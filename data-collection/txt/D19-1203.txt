



















































Recommendation as a Communication Game: Self-Supervised Bot-Play for Goal-oriented Dialogue


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 1951–1961,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

1951

Recommendation as a Communication Game:
Self-Supervised Bot-Play for Goal-oriented Dialogue

Dongyeop Kang♥ Anusha Balakrishnan♣ Pararth Shah♣
Paul Crook♣ Y-Lan Boureau♣ Jason Weston♣
♥Carnegie Mellon University, ♣Facebook AI

dongyeok@cs.cmu.edu anusha.bala28@gmail.com

{pararths,pacrook,ylan,jase}@fb.com

Abstract

Traditional recommendation systems produce
static rather than interactive recommendations
invariant to a user’s specific requests, clarifi-
cations, or current mood, and can suffer from
the cold-start problem if their tastes are un-
known. These issues can be alleviated by
treating recommendation as an interactive di-
alogue task instead, where an expert recom-
mender can sequentially ask about someone’s
preferences, react to their requests, and recom-
mend more appropriate items. In this work,
we collect a goal-driven recommendation di-
alogue dataset (GoRecDial), which consists
of 9,125 dialogue games and 81,260 conver-
sation turns between pairs of human workers
recommending movies to each other. The task
is specifically designed as a cooperative game
between two players working towards a quan-
tifiable common goal. We leverage the dataset
to develop an end-to-end dialogue system that
can simultaneously converse and recommend.
Models are first trained to imitate the behavior
of human players without considering the task
goal itself (supervised training). We then fine-
tune our models on simulated bot-bot conver-
sations between two paired pre-trained mod-
els (bot-play), in order to achieve the dialogue
goal. Our experiments show that models fine-
tuned with bot-play learn improved dialogue
strategies, reach the dialogue goal more often
when paired with a human, and are rated as
more consistent by humans compared to mod-
els trained without bot-play. The dataset and
code are publicly available through the ParlAI
framework1.

1 Introduction

Traditional recommendation systems factorize
users’ historical data (i.e., ratings on movies) to
extract common preference patterns (Koren et al.,

1https://github.com/facebookresearch/ParlAI

2009; He et al., 2017b). However, besides mak-
ing it difficult to accommodate new users because
of the cold-start problem, relying on aggregated
history makes these systems static, and prevents
users from making specific requests, or exploring
a temporary interest. For example, a user who usu-
ally likes horror movies, but is in the mood for a
fantasy movie, has no way to indicate their prefer-
ence to the system, and would likely get a recom-
mendation that is not useful. Further, they cannot
iterate upon initial recommendations with clarifi-
cations or modified requests, all of which are best
specified in natural language.

Recommending through dialogue interactions
(Reschke et al., 2013; Wärnestål, 2005) offers a
promising solution to these problems, and recent
work by Li et al. (2018) explores this approach
in detail. However, the dataset introduced in that
work does not capture higher-level strategic be-
haviors that can impact the quality of the rec-
ommendation made (for example, it may be bet-
ter to elicit user preferences first, before making
a recommendation). This makes it difficult for
models trained on this data to learn optimal rec-
ommendation strategies. Additionally, the rec-
ommendations are not grounded in real observed
movie preferences, which may make trained mod-
els less consistent with actual users. This paper
aims to provide goal-driven recommendation di-
alogues grounded in real-world data. We col-
lect a corpus of goal-driven dialogues grounded in
real user movie preferences through a carefully de-
signed gamified setup (see Figure 1) and show that
models trained with that corpus can learn a suc-
cessful recommendation dialogue strategy. The
training is conducted in two stages: first, a super-
vised phase that trains the model to mimic human
behavior on the task; second, a bot-play phase that
improves the goal-directed strategy of the model.

The contribution of this work is thus twofold.

https://github.com/facebookresearch/ParlAI


1952

Hmm, we've got ..

I like comedy movies. 

...

Iron Man (2008)
Iron Man is a 2008 
American superhero film 
based on the Marvel 
Comics character of the 
same name, produced by 
Marvel Studios and 
distributed by Paramount 
Pictures….

Seeker Expert

Figure 1: Recommendation as a dialogue game.
We collect 81,260 recommendation utterances between
pairs of human players (experts and seekers) with a col-
laborative goal: the expert must recommend the cor-
rect (blue) movie, avoiding incorrect (red) ones, and
the seeker must accept it. A chatbot is then trained to
play the expert in the game.

(1) We provide the first (to the best of our knowl-
edge) large-scale goal-driven recommendation di-
alogue dataset with specific goals and reward sig-
nals, grounded in a real-world knowledge base.
(2) We propose a two-stage recommendation strat-
egy learning framework and empirically validate
that it leads to better recommendation conversa-
tion strategies.

2 Recommendation Dialogue Task
Design

In this section, we first describe the motivation
and design of the dialogue-based recommenda-
tion game that we created. We then describe the
data collection environment and present detailed
dataset statistics.

2.1 Dialogue Game: Expert and Seeker

The game is set up as a conversation between a
seeker looking for a movie recommendation, and
an expert recommending movies to the seeker.
Figure 2 shows an example movie recommenda-
tion dialogue between two-paired human workers
on Amazon Mechanical Turk.

Game Setting. Each worker is given a set of five
movies2 with a description (first paragraph from
the Wikipedia page for the movie) including im-
portant features such as director’s name, year, and

2We deliberately restricted the set of movies to make the
task more tractable. One may argue that the expert can sim-
ply ask these candidates one by one (at the cost of low en-
gagingness). However, this empirically doesn’t happen: ex-
perts make on average only 1.16 incorrect movie recommen-
dations.

genre. The seeker’s set represents their watching
history (movies they are supposed to have liked)
for the game’s sake. The expert’s set consists of
candidate movies to choose from when making
recommendations, among which only one is the
correct movie to recommend. The correct movie
is chosen to be similar to the seeker’s movie set
(see Sec. 2.2), while the other four movies are dis-
similar. The expert is not told by the system which
of the five movies is the correct one. The expert’s
goal is to find the correct movie by chatting with
the seeker and recommend it after a minimal num-
ber of dialogue turns. The seeker’s goal is to ac-
cept or reject the recommendation from the expert
based on whether they judge it to be similar to their
set. The game ends when the expert has recom-
mended the correct movie. The system then asks
each player to rate the other for engagingness.

Justification. Players are asked to provide rea-
sons for recommending, accepting, or rejecting a
movie, so as to get insight into human recommen-
dation strategies3.

Gamification. Rewards and penalties are pro-
vided to players according to their decisions, to
make the task more engaging and incentivize bet-
ter strategies. Bonus money is given if the expert
recommends the correct movie, or if the seeker ac-
cepts the correct movie or rejects an incorrect one.

2.2 Picking Expert and Seeker movie sets

This section describes how movie sets are selected
for experts and seekers.

Pool of movies To reflect movie preferences
of real users, our dataset uses the MovieLens
dataset4, comprising 27M ratings applied to 58K
movies by 280K real users. We obtain descriptive
text for each movie from Wikipedia5 (i.e., the first
paragraph). We also extract entity-level features
(e.g., directors, actors, year) using the MovieWiki
dataset (Miller et al., 2016) (See Figure 1). We fil-
ter out less frequent movies and user profiles (see
Appendix), resulting in a set of 5,330 movies and
65,181 user profiles with their ratings.

Movie similarity metric In order to simulate
a natural setting, the movies in the seeker’s set

3Our model doesn’t utilize this or the engagingness scores
for learning, but these are potential future directions.

4https://grouplens.org/datasets/movielens/
5https://dumps.wikimedia.org/

https://grouplens.org/datasets/movielens/
https://dumps.wikimedia.org/


1953

4 user was very helpful 
and asked good questions

5 They were into 
the conversation.

Favorite actors? 
Directors?

from 1990-2003

Tim Burton Bill Murrary 
Quentin Tarantino

Are you looking for a 
hero centered movie?

i like comedy-drama and american crama some 
fantasy drama and science fiction thriller

What timeframe are you 
looking for?

no not really

How about this movie? American Beauty This 
is more along the lines of crime and fantasy.

I accepted the recommendation. 
I can watch a crime movie

I accepted the recommendation. 
I enjoy Cameron Crowe films

Sounds good.
Maybe something with crime 
or fantasy would be better

15

Rushmore 1998 Comedy, Drama
Reservoir Dogs 1992 Crime, Mystery, Thriller 
Election 1999 Comedy
Big Fish 2003 Drama, Fantasy, Romance 
Vanilla Sky 2001 Mystery, Romance, Sci-Fi 

S
ee

ke
r

E
xp

er
t

American Beauty 1999 Drama, Romance 37
Almost Famous 2000 Drama 15
Metropolitan 1990 Comedy 16
Unbreakable 2000 Drama, Sci-Fi 16
Pathfinder 2007 Action, Adventure, Drama 15

How about this movie? Almost Famous 
This was a Cameron Crowe movie from the 
90's that was a coming of age drama. 15

...
37

37

Figure 2: An example dialogue from our dataset of movie recommendation between two human workers: seeker
(grey) and expert (blue). The goal is for the expert to find and recommend the correct movie (light blue) out of
incorrect movies (light red) which is similar to the seeker movies. Best viewed in color.

should be similar to each other, and the cor-
rect movie should be similar to these, according
to a metric that reflects coherent empirical pref-
erences. To compute such a metric, we train
an embedding-driven recommendation model (Wu
et al., 2018).6 Each movie is represented as an em-
bedding, which is trained so that embeddings of
movies watched by the same user are close to each
other. The closeness metric between two movies is
the cosine similarity of these trained embeddings.
A movie is deemed close to a set of movies if its
embedding is similar to the average of the movie
embeddings in the set.

Movie Set Selection Using these trained embed-
dings, we design seeker and expert sets based on
the following criteria (See Figure 3):
• Seeker movies (grey) are a set of five movies

which are close to each other, chosen from the
set of all movies watched by a real user.
• The correct movie (light blue) is close to the av-

erage of the five embeddings of the seeker set.
• The expert’s incorrect movies (light red) are far

from the seeker set and the correct movie.
We filter out movie sets that are too difficult or

6We also tried a classical matrix-factorization based rec-
ommendation model, which shows comparable performance
to the embedding model.

Figure 3: Movie set selection: watched movies for
seeker (grey) and correct (light blue) / incorrect (light
red) movies for expert.

easy for the recommendation task (see Appendix),
and choose 10,000 pairs of seeker-expert movie
sets at random.

2.3 Data Collection

For each dialogue game, a movie set is randomly
chosen without duplication. We collect dialogues
using ParlAI (Miller et al., 2017) to interface with
Amazon Mechanical Turk. More details about
data collection are included in the Appendix.

Table 1 shows detailed statistics of our dataset
regarding the movie sets, the annotated dialogues,
actions made by expert and seeker, dialogue



1954

Dialogue statistics

Number of dialogues 9,125
Number of utterances 170,904

Number of unique utterances 85,208
Avg length of a dialogue 23.0

Avg duration (minutes) of a dialogue 5.2

Expert’s utterance statistics

Avg utterance length 8.40
Unique tokens 11,757

Unique utterances 40,550

Seeker’s utterance statistics

Avg utterance length 8.47
Unique tokens 10,766

Unique utterances 45,196

Action statistics (all scores are averaged)

# of correct/incorrect recs. by expert 1.0 / 1.16
# of correct/incorrect decisions by seeker 1.1 / 1.04

Game statistics (all scores are averaged)

min/max movie scores 12.3 / 46.0
correct/incorrect movies 39.9 / 15.0

real game score by expert/seeker 61.3 / 50.8
random game score by expert/seeker 43.2 / 38.1

Engagingness statistics (all scores are averaged)

engagingness score by expert/seeker 4.3 / 4.4
engagingness scores & feedback collected 18,308

Table 1: Data statistics. “correct/incorrect” in the
action stats means that the expert recommends the
correct/incorrect movie or the seeker correctly ac-
cepts/rejects the movie.

games, and engagingness feedback.
The collected dialogues contain a wide vari-

ety of action sequences (recommendations and ac-
cept/reject decisions). Experts make an average
of 1.16 incorrect recommendations, which indi-
cates a reasonable difficulty level. Only 37.6% of
dialogue games end at first recommendation, and
19.0% and 10.8% at second and third recommen-
dations, respectively.

Figure 4 shows histogram distributions of (a)
expert’s decisions between speaking utterance and
recommendation utterance and (b) correct and
incorrect recommendations over the normalized
turns of dialogue. In (a), recommendations in-
creasingly occur after a sufficient number of
speaking utterances. In (b), incorrect recommen-
dations are much more frequent earlier in the dia-
logue, while the opposite is true later on.

3 Our Approach

In order to recommend the right movie in the role
of the expert, a model needs to combine several
perceptual and decision skills. We propose to con-

(a) Decision to speak (-1)
or recommend (+1)

(b) Correct (+1) or incorrect
(-1) recommendations

Figure 4: Histogram distribution of (a) experts’ deci-
sions of whether to speak or recommend and (b) cor-
rect/incorrect recommendations over the normalized
dialogue turns.

duct learning in two stages (See Figure 5): super-
vised multi-aspect learning and bot-play.

3.1 Supervised Multi-Aspect Learning

The supervised stage of training the expert model
combines three sources of supervision, corre-
sponding to the three following subtasks: (1) gen-
erate dialogue utterances to speak with the seeker
in a way that matches the utterances of the human
speaker, (2) predict the correct movie based on the
dialogue history and the movie description repre-
sentations, and (3) decide whether to recommend
or speak in a way that matches the observed deci-
sion of the human expert.

Using an LSTM-based model (Hochreiter and
Schmidhuber, 1997), we represent the dialogue
history context ht of utterances x1 to xt as the av-
erage of LSTM representations of x1, · · · , xt, and
the description mk of the k-th movie as the aver-
age of the bag-of-word representations7 of its de-
scription sentences. Let (xt+1, y, dt+1) denote the
ground truth next utterance, correct movie index,
and ground truth decision at time t+1, respectively.
We cast the supervised problem as an end-to-end
optimization of the following loss:

Lsup = αLgen + βLpredict + (1−α−β)Ldecide, (1)

where α and β are weight hyperparame-
ters optimized over the validation set, and
Lpredict,Ldecide,Lgen are negative log-likelihoods

7We empirically found that BOW works better than other
encoders such as LSTM in this case.



1955

Document 
Encoder

Generate 

Dialog
Encoder

Predict

Decide

Read

speak

recommend

MExpert

(a) Supervised multi-aspect learning

Plan
rewards / penalties

Decide Speak

MExpertMSeeker

(b) Bot-play

Figure 5: (a) Supervised learning of the expert modelMexpert and (b) bot-play game between the expertMexpert
and the seekerMseeker models. The former imitates multiple aspects of humans’ behaviors in the task, while the
later fine-tunes the expert model w.r.t the game goal (i.e., recommending the correct movie).

of probability distributions matching each of the
three subtasks:

Lgen = − log pgen(xt+1|ht,m1, · · · ,mK), (2)
Lpredict = − log p(y|c1, · · · , cK), where (3)

c j = ht · m j for j ∈ 1..K, (4)
Ldecide = pMLP(dt+1|ht, c1, · · · , cK), (5)

with pgen the output distribution of an attentive
seq2seq generative model (Bahdanau et al., 2015),
p a softmax distribution over dot products ht · mk
that capture how aligned the dialogue history ht
is with the description mk of the k-th movie, and
pMLP the output distribution of a multi-layer per-
ceptron predictor that takes c1, · · · , cK as inputs8.

3.2 Bot-Play
Motivated by the recent success of self-play in
strategic games (Silver et al., 2017; Vinyals et al.,
2019; OpenAI, 2018) and in negotiation dialogues
(Lewis et al., 2017), we show in this section how
we construct a reward function to perform bot-
play between two bots in our setting, with the aim
of developing a better expert dialogue agent for
recommendation.

Plan optimizes long-term policies of the vari-
ous aspects over multiple turns of the dialogue
game by maximizing game-specific rewards. We

8We experimented with various other encoding functions,
detailed in the Appendix.

first pre-train expert and seeker models individu-
ally: the expert model Mexpert (θ) = minθLsup
is pre-trained by minimizing the supervised loss
in Eq 1, and the seeker model Mseeker(φ) is a
retrieval-based model that retrieves seeker utter-
ances from the training set based on cosine sim-
ilarity of the preceding dialogue contexts encoded
using the BERT pre-trained encoder9. θ and φ are
model parameters of the expert and seeker model,
respectively. Then, we make them chat with each
other, and fine-tune the expert model by maximiz-
ing its reward in the game (See Figure 5, Right).

The dialogue game ends if the expert model rec-
ommends the correct movie, or a maximum dia-
logue length is reached10, yielding T turns of di-
alogue; g = (xexpert1 , x

seeker
1 ..x

expert
T , x

seeker
T ). Let

TREC the set of turns when the expert made a rec-
ommendation. We define the expert’s reward as:

rexpertt =
1

|TREC |
·
∑

t∈TREC
δt−1 · bt, (6)

where δ is a discount factor11 to encourage ear-
lier recommendations, bt is the reward obtained
at each recommendation made, and |TREC | is the
number of recommendations made. bt is 0 unless
the correct movie was recommended.

9See Sec. 4.2 for details on BERT. We also experimented
with sequence-to-sequence models for modeling the seeker
but performance was much worse.

10We restrict the maximum length of a dialogue to 20.
11we use δ = 0.5.



1956

We define the reward function R as follows:

R (xt) =
∑

xt∈Xexpert
γT−t(rexpertt − µ) (7)

where µ = 1t
∑

1..t r
expert
t is the average of the re-

wards received by the expert until time t and γ
is a discount factor to diminish the reward of ear-
lier actions. We optimize the expected reward for
each turn of dialogue xt and calculate its gradient
using REINFORCE (Williams, 1992). The final
role-playing objective LRP is:

∇LRP(θ; z) =
∑

xt∈Xexpert
Ext [∇ log p(xt|x<t)R (xt)]

(8)

We optimize the role-playing objective with the
pre-trained expert model’s decision (Ldecide) and
generation (Lgen) objectives at the same time. To
control the variance of the RL loss, we alternate
optimizing the RL loss and other two supervised
losses for each step. We do not fine-tune the pre-
diction loss, in order not to degrade the prediction
performance during bot-play.

4 Experiments

We describe our experimental setup in §4.1. We
then evaluate our supervised and unsupervised
models in §4.2 and §4.3, respectively.

4.1 Setup
We select 5% of the training corpus as validation
set in our training.

All hyper-parameters are chosen by sweep-
ing different combinations and choosing the ones
that perform best on the validation set. In
the following, the values used for the sweep
are given in brackets. Tokens of textual in-
puts are lower-cased and tokenized using byte-
pair-encoding (BPE) (Sennrich et al., 2016) or
the Spacy12 tokenizer. The seq-to-seq model
uses 300-dimensional word embeddings initial-
ized with GloVe (Pennington et al., 2014) or Fast-
text (Joulin et al., 2017) embeddings, [1, 2] lay-
ers of [256, 512]-dimensional Uni/Bi-directional
LSTMs (Hochreiter and Schmidhuber, 1997) with
0.1 dropout ratio, and soft attention (Bahdanau
et al., 2015). At decoding, we use beam search
with a beam of size 3, and choose the maxi-
mum likelihood output. For each turn, the initial

12https://spacy.io/

movie text and all previous dialogue turns includ-
ing seeker’s and expert’s replies are concatenated
as input to the models.

Both supervised and bot-play learning use
Adam (Kingma and Ba, 2015) optimizer
with batch size 32 and learning rates of
[0.1, 0.01, 0.001] with 0.1 gradient clipping.
The number of softmax layers (Yang et al.,
2018) is [1, 2]. For each turn, the initial movie
description and all previous dialogue utterances
from the seeker and the expert are concatenated
as input text to the other modules. Each movie
textual description is truncated at 50 words for
efficient memory computation.

We use annealing to balance the different su-
pervised objectives: we only optimize the gen-
erate loss for the first 5 epochs, and then grad-
ually increase weights for the predict and decide
losses. We use the same movie-sets as in the su-
pervised phase to fine-tune the expert model. Our
models are implemented using PyTorch and Par-
lAI (Miller et al., 2017). Code and dataset will be
made publicly available through ParlAI13.

4.2 Evaluation of Supervised Models

Metrics. We first evaluate our supervised mod-
els on the three supervised tasks: dialogue gener-
ation, movie recommendation, and per-turn deci-
sion to speak or recommend. The dialogue gener-
ation is evaluated using the F1 score and BLEU
(Papineni et al., 2002) comparing the predicted
and ground-truth utterances. The F1 score is com-
puted at token-level. The recommendation model
is evaluated by calculating the percentage of times
the correct movie is among the top k recommenda-
tions (hit@k). In order to see the usefulness of di-
alogue for recommendation, precision is measured
per each expert turn of the dialogue (Turn@k) re-
gardless of the decision to speak or recommend,
and at the end of the dialogue (Chat@k).

Models. We compare our models with In-
formation Retrieval (IR) based models and
recommendation-only models. The IR models re-
trieve the most relevant utterances from the set
of candidate responses of the training data and
rank them by comparing cosine similarities using
TFIDF features or BERT (Devlin et al., 2019) en-
coder features. Note that IR models make no rec-
ommendation. The recommendation-only models

13https://github.com/facebookresearch/ParlAI

https://spacy.io/
https://github.com/facebookresearch/ParlAI


1957

Generation Recommendation Decision

F1 BLEU Turn@1 Turn@3 Chat@1 Chat@3 Acc

B
as

el
in

e TFIDF-Ranker 32.5 27.8 - - - - -
BERT-Ranker 38.3 23.9 - - - -
Random Recc. 3.6 0.1 21.3 59.2 23.1 62.2 -

BERT Recc. 16.5 0.2 25.5 66.3 26.4 68.3 -

O
ur

s

Generate 39.5 26.0 - - - - -
+predict 40.2 26.4 76.4 96.9 75.7 97.0 -
+Decide 41.0 27.4 77.8 97.1 78.2 97.7 67.6
+Plan 40.9 26.8 76.3 95.7 77.5 97.6 53.6

Table 2: Evaluation on supervised models. We incrementally add different aspects of modules: Generate, predict,
and Decide for supervised multi-aspect learning and Plan for bot-play fine-tuning.

always produce recommendation utterances fol-
lowing the template (e.g., “how about this movie,
[MOVIE]?”) where the [MOVIE] is chosen ran-
domly or based on cosine similarities between di-
alogue contexts and the text descriptions of can-
didate movies. We use the pre-trained BERT en-
coder (Devlin et al., 2019) to encode dialogue con-
texts and movie text descriptions.

We incrementally add each module to our base
Generate model: Predict and Decide for super-
vised learning and Plan for bot-play fine-tuning.
Each model is chosen from the best model in our
hyper-parameter sweeping.

Results. Table 2 shows performance compari-
son on the test set. Note that only the full super-
vised model (+Decide) and the fine-tuned model
(+Plan) can appropriately operate every function
required of an expert agent such as producing ut-
terances, recommending items, and deciding to
speak or recommend.

Compared to recommendation-only models,
our prediction Predict modules show significant
improvements over the recommendation baselines
on both per-turn and per-chat recommendations:
52% on Turn@1 and 34% on Turn@3. Chat scores
are always higher than Turn, indicating that rec-
ommendations get better as more dialogue context
is provided. The Decide module yields additional
improvements over the Predictmodel in both gen-
eration and recommendation, with 67.6% decision
accuracy, suggesting that the supervised signal of
decisions to speak or recommend can contribute to
better overall representations.

In generation, our proposed models show com-
parable performance as the IR baseline models

(e.g., BERTRanker). The +Decide model im-
proves on the F1 generation score because it learns
when to predict the templated recommendation ut-
terance.

As expected, +Plan slightly hurts most met-
rics of supervised evaluation, because it optimizes
a different objective (the game objective), which
might not systematically align with the supervised
metrics. For example, a system optimized to max-
imize game objective should try to avoid incor-
rect recommendations even if humans made them.
Game-related evaluations are shown in §4.3.

Analysis We analyze how each of the supervised
modules acts over the dialogue turns on the test
set. Figure 6 (a) shows a histogram of the rank
of the ground-truth movie over turns. The rank
of the model’s prediction is very high for the first
few turns, then steadily decreases as more utter-
ances are exchanged with the seeker. This indi-
cates that the dialogue context is crucial for find-
ing good recommendations.

The evolution of generation metrics (F1, BLEU)
for each turn is shown at the top of Fig. 6(b), and
the (accumulated) recommendation and decision
metrics (Turn@1/Accuracy) at the bottom14. The
accumulated recommendation and decision per-
formance sharply rises at the end of the dialogue
and variance decreases. The generation perfor-
mance increases, because longer dialogue contexts
helps predict the correct utterances.

14For better understanding of the effect of recommenda-
tion and decision, we show accumulated values, and per-turn
values for generation.



1958

(a) Rank of recommendation

(b) F1/BLEU (top) & Turn@1 /Decision Acc (bottom)

Figure 6: Analysis of the expert’s model: as the di-
alogue continues (x-axis is either fraction of the full
dialogue, or index of dialogue turn), y-axis is (a) rank
of the correct recommendation (the lower rank, the bet-
ter) and (b) F1/BLEU/Turn@1/Decision Accuracy (the
higher the better) with the variance shown in grey.

4.3 Evaluation on Dialogue Games
Metrics. In the bot-play setting, we provide
game-specific measures as well as human evalu-
ations. We use three automatic game measures:
Goal to measure the ratio of dialogue games
where the goal is achieved (i.e., recommending the
correct movie or not), Score to measure the total
game score, and Turn2G to count the number of
dialogue turns taken until the goal is achieved.

We conduct human evaluation by making the
expert model play with human seekers. We mea-

sure automatic metrics as well as dialogue qual-
ity scores provided by the player: fluency, con-
sistency, and engagingness (scored between 1 and
5) (Zhang et al., 2018). We use the full test set
(i.e., 911 movie sets) for bot-bot games and use 20
random samples from the test set for {bot,human}-
human games.

Models. We compare our best supervised model
with several variants of our fine-tuned bot-play
models. We consider bot-play of an expert
model with different seeker models such as BERT-
Ranker based seeker and Seq-to-Seq based seeker.
Each bot-play model is trained on the same train
set that is used for training the original supervised
model. The seeker model uses retrieval based on
BERT pretrained representations of dialogue con-
text (BERT-R) 15.

Players Automatic Human

Expert Seeker Goal Sco T2G F C E

Supervised∗ BERT-R 30.9 38.3 1.4 - - -
Bot-play \w S2S BERT-R 42.1 49.6 2.8 - - -
Bot-play \w BERT-R BERT-R 48.6 52.4 3.2 - - -
Supervised∗ Human 55.0 51.2 2.1 3.1 2.2 2.0
Bot-play∗ Human 68.5 54.7 3.1 3.2 2.6 2.0

Human Human 95.0 64.3 8.5 4.8 4.7 4.2

Table 3: Evaluation on dialogue recommendation
games: bot-bot (top three rows) and {bot,human}-
human (bottom three rows). We use automatic game
measures (Goal, Score, Turn2Goal) and human qual-
ity ratings (Fluency, Consistency, Engagingness).

Results. Compared to the supervised model, the
self-supervised model fine-tuned by seeker mod-
els shows significant improvements in the game-
related measures. In particular, the BERT-R model
shows a +27.7% improvement in goal success ra-
tio. Interestingly, the number of turns to reach the
goal increases from 1.4 to 3.2, indicating that con-
ducting longer dialogues seems to be a better strat-
egy to achieve the game goal throughout our role-
playing game.

In dialogue games with human seeker players,
the bot-play model also outperforms the super-
vised one, even though it is still far behind human
performance. When the expert bot plays with the
human seeker, performance increases compared to

15A potential direction for future work may have more
solid seeker models and explore which aspect of the model
makes the dialogue with the expert model more goal-oriented
or human-like.



1959

playing with the bot seeker, because the human
seeker produces utterances more relevant to their
movie preferences, increasing overall game suc-
cess.

5 Related Work

Recommendation systems often rely on matrix
factorization (Koren et al., 2009; He et al., 2017b).
Content (Mooney and Roy, 2000) and social re-
lationship features (Ma et al., 2011) have also
been used to help with the cold-starting problem
of new users. The idea of eliciting users’ pref-
erence for certain content features through dia-
logue has led to several works. Wärnestål (2005)
studies requirements for developing a conversa-
tional recommender system, e.g., accumulation of
knowledge about user preferences and database
content. Reschke et al. (2013) automatically pro-
duces template-based questions from user reviews.
However, no conversational recommender sys-
tems have been built based on these works due to
the lack of a large publicly available corpus of hu-
man recommendation behaviors.

Very recently, Li et al. (2018) collected the Re-
Dial dataset, comprising 10K conversations of
movie recommendations, and used it to train a
generative encoder-decoder dialogue system. In
this work, crowdsource workers freely talk about
movies and are instructed to make a few movie
recommendations before accepting one. Com-
pared to ReDial, our dataset is grounded in real
movie preferences (movie ratings from Movie-
Lens), instead of relying on workers’ hidden
movie tastes. This allows us to make our task goal-
directed rather than chit-chat; we can optimize
prediction and recommendation strategy based on
a known ground truth, and train the predict and
plan modules of our system. That in turn allows
for novel setups such as bot-play.

To the best of our knowledge, Bordes et al.
(2016) is the only other goal-oriented dialogue
benchmark grounded in a database that has been
released with a large-scale publicly available
dataset. Compared to that work, our database is
made of real (not made-up) movies, and the choice
of target movies is based on empirical distances
between movies and movie features instead of be-
ing arbitrary. This, combined with the collabora-
tive set-up, makes it possible to train a model for
the seeker in the bot-play setting.

Our recommendation dialogue game is collabo-

rative. Other dialogue settings with shared objec-
tives have been explored, for example a collabora-
tive graph prediction task (He et al., 2017a), and
semi-cooperative negotiation tasks (Lewis et al.,
2017; Yarats and Lewis, 2018; He et al., 2018).

6 Conclusion and Future Directions

In conclusion, we have posed recommendation as
a goal-oriented game between an expert and a
seeker, and provided a framework for both training
agents in a supervised way by learning to mimic a
large set of collected human-human dialogues, as
well as by bot-play between trained agents. We
have shown that a combination of the two stages
leads to learning better expert recommenders.

Our results suggest several promising direc-
tions. First, we noted that the recommendation
performance linearly increases as more dialogue
context is provided. An interesting question is
how to learn to produce the best questions that will
result in the most informative dialogue context.

Second, as the model becomes better at the
game, we observe an increase in the length of di-
alogue. However, it remains shorter than the aver-
age length of human dialogues, possibly because
our reward function is designed to minimize it,
which worked better in experiments. A potential
direction for future work is to study how different
game objectives interact with each other.

Finally, our evaluation on movie recommen-
dation is made only within the candidate set of
movies given to expert. Future work should eval-
uate if our training scheme generalizes to a fully
open-ended recommendation system, thus making
our task not only useful for research and model
development, but a useful end-product in itself.

Acknowledgements

We thank Eduard Hovy, Alan W Black, Dan Ju-
rafsky, Alan Ritter, and anonymous reviewers for
their helpful comments.

References

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In ICLR.

Antoine Bordes, Y-Lan Boureau, and Jason Weston.
2016. Learning end-to-end goal-oriented dialog.
arXiv preprint arXiv:1605.07683.



1960

Danqi Chen, Adam Fisch, Jason Weston, and Antoine
Bordes. 2017. Reading wikipedia to answer open-
domain questions. In ACL.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2019. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. In NAACL.

He He, Anusha Balakrishnan, Mihail Eric, and Percy
Liang. 2017a. Learning symmetric collaborative di-
alogue agents with dynamic knowledge graph em-
beddings. In ACL.

He He, Derek Chen, Anusha Balakrishnan, and Percy
Liang. 2018. Decoupling strategy and generation in
negotiation dialogues. In Proceedings of the 2018
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 2333–2343, Brussels, Bel-
gium. Association for Computational Linguistics.

Xiangnan He, Lizi Liao, Hanwang Zhang, Liqiang Nie,
Xia Hu, and Tat-Seng Chua. 2017b. Neural collab-
orative filtering. In WWW.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Armand Joulin, Edouard Grave, Piotr Bojanowski, and
Tomas Mikolov. 2017. Bag of tricks for efficient text
classification. In EACL.

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In ICLR.

Yehuda Koren, Robert M. Bell, and Chris Volinsky.
2009. Matrix factorization techniques for recom-
mender systems. Computer, 42.

Mike Lewis, Denis Yarats, Yann Dauphin, Devi Parikh,
and Dhruv Batra. 2017. Deal or no deal? end-to-end
learning for negotiation dialogues. In EMNLP.

Raymond Li, Samira Ebrahimi Kahou, Hannes Schulz,
Vincent Michalski, Laurent Charlin, and Chris Pal.
2018. Towards deep conversational recommenda-
tions. In NIPS, pages 9725–9735.

Hao Ma, Dengyong Zhou, Chao Liu, Michael R. Lyu,
and Irwin King. 2011. Recommender systems with
social regularization. In WSDM.

Kanti V Mardia. 1970. Measures of multivariate skew-
ness and kurtosis with applications. Biometrika,
57(3):519–530.

Alexander H. Miller, Will Feng, Dhruv Batra, Antoine
Bordes, Adam Fisch, Jiasen Lu, Devi Parikh, and
Jason Weston. 2017. Parlai: A dialog research soft-
ware platform. In EMNLP.

Alexander H. Miller, Adam Fisch, Jesse Dodge, Amir-
Hossein Karimi, Antoine Bordes, and Jason We-
ston. 2016. Key-value memory networks for directly
reading documents. In EMNLP.

Raymond J Mooney and Loriene Roy. 2000. Content-
based book recommending using learning for text
categorization. In Proceedings of the fifth ACM con-
ference on Digital libraries, pages 195–204. ACM.

OpenAI. 2018. Openai five. https://blog.
openai.com/openai-five/.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In ACL.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In EMNLP.

Kevin Reschke, Adam Vogel, and Daniel Jurafsky.
2013. Generating recommendation dialogs by ex-
tracting information from user reviews. In ACL.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Neural machine translation of rare words with
subword units. In ACL.

David Silver, Julian Schrittwieser, Karen Simonyan,
Ioannis Antonoglou, Aja Huang, Arthur Guez,
Thomas Hubert, Lucas Baker, Matthew Lai, Adrian
Bolton, et al. 2017. Mastering the game of go with-
out human knowledge. Nature, 550(7676):354.

Oriol Vinyals, Igor Babuschkin, Junyoung Chung,
Michael Mathieu, Max Jaderberg, Wojciech M.
Czarnecki, Andrew Dudzik, Aja Huang, Petko
Georgiev, Richard Powell, Timo Ewalds, Dan Hor-
gan, Manuel Kroiss, Ivo Danihelka, John Agapiou,
Junhyuk Oh, Valentin Dalibard, David Choi, Lau-
rent Sifre, Yury Sulsky, Sasha Vezhnevets, James
Molloy, Trevor Cai, David Budden, Tom Paine,
Caglar Gulcehre, Ziyu Wang, Tobias Pfaff, Toby
Pohlen, Yuhuai Wu, Dani Yogatama, Julia Cohen,
Katrina McKinney, Oliver Smith, Tom Schaul, Tim-
othy Lillicrap, Chris Apps, Koray Kavukcuoglu,
Demis Hassabis, and David Silver. 2019. AlphaStar:
Mastering the Real-Time Strategy Game StarCraft
II. https://deepmind.com/blog/alphastar-mastering-
real-time-strategy-game-starcraft-ii/.

Pontus Wärnestål. 2005. Modeling a dialogue strat-
egy for personalized movie recommendations. In
Beyond Personalization Workshop, pages 77–82.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. Machine learning, 8(3-4):229–256.

Ledell Yu Wu, Adam Fisch, Sumit Chopra, Keith
Adams, Antoine Bordes, and Jason Weston. 2018.
Starspace: Embed all the things! In AAAI.

Zhilin Yang, Zihang Dai, Ruslan R. Salakhutdinov, and
William W. Cohen. 2018. Breaking the softmax bot-
tleneck: A high-rank rnn language model. In ICLR.

Denis Yarats and Mike Lewis. 2018. Hierarchical text
generation and planning for strategic dialogue. In
ICML.

https://www.aclweb.org/anthology/D18-1256
https://www.aclweb.org/anthology/D18-1256
https://blog.openai.com/openai-five/
https://blog.openai.com/openai-five/


1961

Saizheng Zhang, Emily Dinan, Jack Urbanek, Arthur
Szlam, Douwe Kiela, and Jason Weston. 2018. Per-
sonalizing dialogue agents: I have a dog, do you
have pets too? In ACL.


