



















































Priberam: A Turbo Semantic Parser with Second Order Features


Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014), pages 471–476,
Dublin, Ireland, August 23-24, 2014.

Priberam: A Turbo Semantic Parser with Second Order Features

André F. T. Martins∗† Mariana S. C. Almeida∗†
∗Priberam Labs, Alameda D. Afonso Henriques, 41, 2o, 1000-123 Lisboa, Portugal

†Instituto de Telecomunicações, Instituto Superior Técnico, 1049-001 Lisboa, Portugal
{atm,mla}@priberam.pt

Abstract

This paper presents our contribution to
the SemEval-2014 shared task on Broad-
Coverage Semantic Dependency Parsing.
We employ a feature-rich linear model, in-
cluding scores for first and second-order
dependencies (arcs, siblings, grandparents
and co-parents). Decoding is performed in
a global manner by solving a linear relax-
ation with alternating directions dual de-
composition (AD3). Our system achieved
the top score in the open challenge, and the
second highest score in the closed track.

1 Introduction

The last decade saw a considerable progress in sta-
tistical modeling for dependency syntactic pars-
ing (Kübler et al., 2009). Models that incorporate
rich global features are typically more accurate,
even if pruning is necessary or decoding needs to
be approximate (McDonald et al., 2006; Koo and
Collins, 2010; Bohnet and Nivre, 2012; Martins et
al., 2009, 2013). This paper applies the same ratio-
nale to semantic dependency parsing, in which
the output variable is a semantic graph, rather
than a syntactic tree. We extend a recently pro-
posed dependency parser, TurboParser (Martins et
al., 2010, 2013), to be able to perform semantic
parsing using any of the three formalisms consid-
ered in this shared task (DM, PAS, and PCEDT).
The result is TurboSemanticParser, which we re-
lease as open-source software.1

We describe here a second order model for se-
mantic parsing (§2). We follow prior work in se-
mantic role labeling (Toutanova et al., 2005; Jo-

This work is licensed under a Creative Commons At-
tribution 4.0 International Licence. Page numbers and pro-
ceedings footer are added by the organisers. Licence details:
http://creativecommons.org/licenses/by/4.0/

1http://labs.priberam.com/Resources/
TurboSemanticParser

Figure 1: Example of a semantic graph in the DM
formalism (sentence #22006003). We treat top
nodes as a special semantic role TOP whose predi-
cate is a dummy root symbol.

hansson and Nugues, 2008; Das et al., 2012; Flani-
gan et al., 2014), by adding constraints and model-
ing interactions among arguments within the same
frame; however, we go beyond such sibling in-
teractions to consider more complex grandpar-
ent and co-parent structures, effectively correlat-
ing different predicates. We formulate parsing as
a global optimization problem and solve a relax-
ation through AD3, a fast dual decomposition al-
gorithm in which several simple local subprob-
lems are solved iteratively (§3). Through a rich
set of features (§4), we arrive at top accuracies at
parsing speeds around 1,000 tokens per second, as
described in the experimental section (§5).

2 A Second Order Model for Parsing

Figure 1 depicts a sentence and its semantic graph.
We cast semantic parsing as a structured predic-
tion problem. Let x be a sentence and Y(x) the
set of possible dependency graphs. We assume
each candidate graph y ∈ Y(x) can be repre-
sented as a set of substructures (called parts) in
an underlying set S (e.g., predicates, arcs, pairs
of adjacent arcs). We design a score function f
which decomposes as a sum over these substruc-
tures, f(x, y) :=

∑
s∈S fs(x, ys). We parametrize

this function using a weight vector w, and write
each atomic function as fs(x, ys) := w·φs(x, ys),
where φs(x, ys) is a vector of local features. The
decoding problem consists in obtaining the best-

471



Algorithm 1 Decoding in an Arc-Factored Model
1: input: Predicate scores σP (p), arc scores σA(p → a),

labeled arc scores σLA(p
r→ a).

2: Initialize semantic graph G← ∅
3: for p = 0 to L do
4: Initialize σ ← σP (p), frame A(p)← ∅
5: for a = 1 to L do
6: Set r′ ← arg maxr σLA(p r→ a)
7: if σA(p→ a) + σLA(p r

′→ a) > 0 then
8: A(p)← A(p) ∪ {〈p, a, r′〉}
9: σ ← σ + σA(p→ a) + σLA(p r

′→ a)
10: end if
11: end for
12: if σ > 0 then set G← G ∪ {〈p,A(p)〉}
13: end for
14: output: semantic graph G.

scored semantic graph ŷ given a sentence x:

ŷ = arg max
y∈Y(x)

f(x, y). (1)

Our choice of parts is given in Figure 2. The sec-
ond order parts are inspired by prior work in syn-
tactic parsing, modeling interactions for pairs of
(unlabeled) dependency arcs, such as grandpar-
ents (Carreras, 2007) and siblings (Smith and Eis-
ner, 2008; Martins et al., 2009). The main novelty
is co-parent parts, which, to the best of our knowl-
edge, were never considered before, as they only
make sense when multiple parents are allowed.

If all parts were basic, decoding could be done
independently for each predicate p, as illustrated
in Algorithm 1. The total runtime, for a sentence
with L words, is O(L2|R|), where R is the set
of semantic roles. Adding consecutive siblings
still permits independent decoding for each pred-
icate, but dynamic programming is necessary to
decode the best argument frame, increasing the
runtime to O(L3|R|). The addition of consec-
utive co-parents, grandparents, and arbitrary sib-
lings and co-parents breaks this independency and
sets a demand for approximate decoding. Even
without second-order parts, the inclusion of hard
constraints (such as requiring some roles to be
unique, see §3) also makes the problem harder.2

Rather than looking for a model in which exact
decoding is tractable, which could be even more
stringent for parsing semantic graphs than for de-
pendency trees, we embrace approximate decod-
ing strategies. Namely, our approach is based on

2Albeit the dynamic program could still incorporate con-
straints for unique roles (by appending a bit-string to the state
to mark semantic roles that have been filled), runtime be-
comes exponential in the number of unique roles, only being
feasible when this number is small.

Figure 2: Parts considered in this paper. The
top row illustrate the basic parts, representing the
event that a word is a predicate, or the existence of
an arc between a predicate and an argument, even-
tually labeled with a semantic role. Our second-
order model looks at some pairs of arcs: arcs bear-
ing a grandparent relationship, arguments of the
same predicate, predicates sharing the same argu-
ment, and consecutive versions of these two.

dual decomposition, a class of optimization tech-
niques that tackle the dual of combinatorial prob-
lems in a modular and extensible manner (Ko-
modakis et al., 2007; Rush et al., 2010). We em-
ploy alternating directions dual decomposition
(AD3; Martins et al., 2011). Like the subgradi-
ent algorithm of Rush et al. (2010), AD3 splits
the original problem into local subproblems, and
seeks an agreement on the overlapping variables.
The difference is that the AD3 subproblems have
an additional quadratic term to accelerate con-
sensus, achieving a faster convergence rate both
in theory and in practice (Martins et al., 2012,
2013). For several factors (such as logic factors
representing AND, OR and XOR constraints, bud-
get constraints, and binary pairwise factors), these
quadratic subproblems can be solved efficiently.
For dense or structured factors, the quadratic sub-
problems can be solved as a sequence of local
Viterbi decoding steps, via an active set method
(Martins, 2014); this local decoding operation is
the same that needs to be performed in the subgra-
dient algorithm. We describe these subproblems
in detail in the next section.

3 Solving the Subproblems

Predicate and Arc-Factored Parts. We capture
all the basic parts with a single component. As
stated in §2, local decoding in this component has
a runtime of O(L2|R|), by using Algorithm 1.
Unique Roles. We assume some roles are
unique, i.e., they can occur at most once for the

472



same predicate.3 To cope with unique roles, we
add hard constraints of the kind∑

a I(p
r→ a ∈ y) ≤ 1, ∀p,∀r ∈ Runiq, (2)

where Runiq is the set of unique roles. This set is
obtained from the training data by looking at the
roles that never occur multiple times in the gold
argument frames.4 The constraint above corre-
sponds to a ATMOSTONE factor, which is built-in
in AD3 and can be decoded in linear time (ren-
dering the runtime O(L2|Runiq|) when aggregat-
ing all such factors). These have also been used
by Das et al. (2012) in frame-semantic parsing.

Grandparents, Arbitrary Siblings and Co-
parents. The second-order parts in the middle
row of Figure 2 all involve the simultaneous inclu-
sion of a pair of arcs, without further dependency
on the remaining arcs. We handle each of these
parts using a simple pairwise factor (called PAIR
in the AD3 toolkit). The total runtime to locally
decode these factors is O(L3).

Predicate Automata. To handle consecutive
siblings, we adapt the simple head automaton
model (Alshawi, 1996; Smith and Eisner, 2008;
Koo et al., 2010) to semantic parsing. We in-
troduce one automaton for each predicate p and
attachment direction (left or right). We describe
right-side predicate automata; their left-side coun-
terparts are analogous. Let 〈a0, a1, . . . , ak+1〉 be
the sequence of right modifiers of p, with a0 =
START and ak+1 = END. Then, we have the fol-
lowing component capturing consecutive siblings:

f CSIBp,→ (p→ a1, . . . , p→ ak) =∑k+1
j=1 σCSIB(p, aj−1, aj). (3)

Maximizing f CSIBp,→ via dynamic programming has
a cost of O(L2), yielding O(L3) total runtime.

Argument Automata. For consecutive co-
parents, we introduce another automaton which is
analogous to the predicate automaton, but where
arrows are reversed. Let 〈p0, p1, . . . , pk+1〉 be
the sequence of right predicates that take a as
argument (the left-side case is analagous), with
p0 = START and pk+1 = END. We define:

f CCPa,←(a← p1, . . . , a← pk) =∑k+1
j=1 σCCP(a, pj−1, pj). (4)

3Such roles have been called “deterministic” by Flanigan
et al. (2014).

4For PAS, all 43 roles were found unique; for DM, this
number is 40 out of 52, and for PCEDT only 3 out of 69.

The total runtime is also O(L3).

4 Features

We define binary features for each part represented
in Figure 2. Most of the features are taken from
TurboParser (Martins et al., 2013), while others
are inspired by the semantic parser of Johansson
and Nugues (2008). Those features marked with †

require information from the dependency syntactic
parser, and are only used in the open track.5

Predicate Features. Our predicate features are:

• PREDWORD, PREDLEMMA, PREDPOS. Lexi-
cal form, lemma, and POS tag of the predicate.

• PREDREL.† Syntactic dependency relation be-
tween the predicate and its head.

• PREDHEADWORD/POS.† Form and POS tag
of the predicate syntactic head, conjoined with
the predicate word and POS tag.

• PREDMODWORD/POS/REL.† Form, POS tag,
and dependency relation of the predicate syn-
tactic dependents, conjoined with the predicate
word and POS tag.

Arc Features. All features above, plus the fol-
lowing (conjoined with arc direction and label):

• ARGWORD, ARGLEMMA, ARGPOS. The lex-
ical form, lemma, and POS tag of the argument.

• ARGREL.† Syntactic dependency relation be-
tween the argument and its head.

• LEFTWORD/POS,† RIGHTWORD/POS.†
Form/POS tag of the leftmost/rightmost de-
pendent of the argument, conjoined with the
predicate word and POS tag.

• LEFTSIBWORD/POS,† RIGHTSIBWORD/POS.†
Form/POS tag of the left/right sibling of the
argument, conjoined with the predicate tag.

• PREDCONTEXTWORD, PREDCONTEXTPOS,
PREDCONTEXTLEMMA. Word, POS, and
lemma on the left and right context of the pred-
icate (context size is 2).

• PREDCONTEXTPOSBIGRAM/TRIGRAM. Bi-
gram and trigram of POS tags on the left and
right side of the predicate.

• PREDVOICE.† Predicate voice: active, passive,
or none. Determined from the syntactic depen-
dency tree as in Johansson and Nugues (2008).
5For the open track, the only external information used by

our system were the provided automatic dependency trees.

473



• PREDWORDARGWORD, PREDWORDARG-
POS, PREDPOSARGWORD, PREDPOSARG-
POS. Predicate word/tag conjoined with
argument word/tag.

• PREDARGPOSCONTEXT. Several features
conjoining the POS of words surrounding the
predicate and argument (similar to the contex-
tual features in McDonald et al. (2005)).

• EXACTARCLENGTH, BINNEDARCLENGTH.
Exact and binned arc length (distance between
predicate and argument), conjoined with the
predicate and argument POS tags.

• POSINBETWEEN, WORDINBETWEEN. POS
and forms between the predicate and argument,
conjoined with their own POS tags and forms.

• RELPATH,† POSPATH.† Path in the syntactic
dependency tree between the predicate and the
argument. The path is formed either by depen-
dency relations or by POS tags.

Second Order Features. These involve a pred-
icate, an argument, and a “companion word”
(which can be a second argument, in the case of
siblings, a second predicate, for co-parents, or the
argument of another argument, for grandparents).
In all cases, features are of the following kind:

• POSTRIPLET. POS tags of the predicate, the
argument, and the companion word.

• UNILEXICAL. One word form (for the predi-
cate/argument/companion) and two POS tags.

• BILEXICAL. One POS tag (for the predi-
cate/argument/companion) and two word forms.

• PAIRWISE. Backed-off pair features for the
companion word form/POS tag and the word
form/POS of the predicate/argument.

5 Experimental Results

All models were trained by running 10 epochs of
max-loss MIRA with C = 0.01 (Crammer et al.,
2006). The cost function takes into account mis-
matches between predicted and gold dependen-
cies, with a cost cP on labeled arcs incorrectly
predicted (false positives) and a cost cR on gold
labeled arcs that were missed (false negatives).
These values were set through cross-validation in
the dev set, yielding cP = 0.4 and cR = 0.6 in all
runs, except for the DM and PCEDT datasets in the
closed track, for which cP = 0.3 and cR = 0.7.

To speed up decoding, we discard arcs whose
posterior probability is below 10−4, according to a
probabilistic unlabeled first-order pruner. Table 1
shows a significant reduction of the search space
with a very small drop in recall.

Table 2 shows our final results in the test set,
for a model trained in the train and development
partitions. Our system achieved the best score in
the open track (an LF score of 86.27%, averaged
over DM, PAS, and PCEDT), and the second best in
the closed track, after the Peking team. Overall,
we observe that the precision and recall in PCEDT
are far below the other two formalisms, but this
difference is much smaller when looking at unla-
beled scores. Comparing the results in the closed
and open tracks, we observe a consistent improve-
ment in the three formalisms of around 1% in F1
from using syntactic information. While this con-
firms previous findings that syntactic features are
important in semantic role labeling (Toutanova et
al., 2005; Johansson and Nugues, 2008), these im-
provements are less striking than expected. We
conjecture this is due to the fact that our model in
the closed track already incorporates a variety of
contextual features which are nearly as informa-
tive as those extracted from the dependency trees.

Finally, to assess the importance of the second
order features, Table 3 reports experiments in the
dev-set that progressively add several groups of
features, along with runtimes. We can see that
siblings, co-parents, and grandparents all provide
valuable information that improves the final scores
(with the exception of the PCEDT labeled scores,
where the difference is negligible). This comes
at only a small cost in terms of runtime, which is
around 1,000 tokens per second for the full mod-
els.

UR # UA/tok LR # LA/tok
DM 99.33 3.5 (13.4%) 99.22 34.4 (2.5%)
PAS 99.53 3.3 (12.5%) 99.49 20.8 (1.9%)
PCEDT 99.03 2.1 (8.2%) 98.77 54.5 (3.0%)

Table 1: Pruner statistics in the dev-set, for the
open track. Shown are oracle recall scores, consid-
ering both unlabeled (UR) and labeled arcs (LR);
and the averaged number of unlabeled and la-
beled arcs per token that remained after the prun-
ing stage (# UA/tok and # LA/tok). In brackets,
we show the fraction of unlabeled/labeled arcs that
survived the pruning.

474



UP UR UF LP LR LF
DM, closed 90.14 88.65 89.39 88.82 87.35 88.08
PAS, closed 93.18 91.12 92.14 91.95 89.92 90.93
PCEDT, closed 90.21 85.51 87.80 78.80 74.70 76.70
average, closed – – 89.77 – – 85.24
DM, open 91.41 89.26 90.32 90.23 88.11 89.16
PAS, open 93.62 92.01 92.81 92.56 90.97 91.76
PCEDT, open 91.58 86.61 89.03 80.14 75.79 77.90
average, open – – 90.72 – – 86.27

Table 2: Submitted results for the closed and open
tracks. For comparison, the best-performing sys-
tem in the closed track (Peking) obtained averaged
UF and LF scores of 91.03% and 85.91%, respec-
tively.

UF LF Tok/sec
DM, arc-factored 89.90 88.96 1,681
DM, arc-factored, pruned 89.85 88.90 2,642

+siblings 90.34 89.34 1,838
+co-parents 90.80 89.76 1,073
+grandparent (full) 90.95 89.90 955

PAS, arc-factored 92.34 91.40 1,927
PAS, arc-factored, pruned 92.35 91.40 2,914

+siblings 92.45 91.45 2,106
+co-parents 92.71 91.71 1,104
+grandparent (full) 92.87 91.87 1,043

PCEDT, arc-factored 87.90 79.90 1,558
PCEDT, arc-factored, pruned 87.74 79.83 2,906

+siblings 88.46 79.98 2,066
+co-parents 90.17 79.90 1,531
+grandparent (full) 90.18 80.03 1,371

Table 3: Results in the dev-set for the open track,
progressively adding several groups of features,
until the full model is obtained. We report un-
labeled/labeled F1 and parsing speeds in tokens
per second. Our speeds include the time necessary
for pruning, evaluating features, and decoding, as
measured on a Intel Core i7 processor @3.4 GHz.

6 Conclusions

We have described a system for broad-coverage
semantic dependency parsing. Our system, which
is inspired by prior work in syntactic parsing, im-
plements a linear model with second-order fea-
tures, being able to model interactions between
siblings, grandparents and co-parents. We have
shown empirically that second-order features have
an impact in the final scores. Approximate de-
coding was performed via alternating directions
dual decomposition (AD3), yielding fast runtimes
of around 1,000 tokens per second.

Acknowledgements

We would like to thank the reviewers for
their helpful comments. This work was par-

tially supported by the EU/FEDER programme,
QREN/POR Lisboa (Portugal), under the Intelligo
project (contract 2012/24803) and by a FCT grant
PTDC/EEI-SII/2312/2012.

References
Hiyan Alshawi. 1996. Head automata and bilingual

tiling: Translation with minimal representations. In
Proc. of Annual Meeting of the Association for Com-
putational Linguistics, pages 167–176.

Bernd Bohnet and Joakim Nivre. 2012. A transition-
based system for joint part-of-speech tagging and la-
beled non-projective dependency parsing. In Proc.
of the Empirical Methods in Natural Language Pro-
cessing, pages 1455–1465.

Xavier Carreras. 2007. Experiments with a higher-
order projective dependency parser. In International
Conference on Natural Language Learning, pages
957–961.

Koby Crammer, Ofer Dekel, Joseph Keshet, Shai
Shalev-Shwartz, and Yoram Singer. 2006. On-
line Passive-Aggressive Algorithms. Journal of Ma-
chine Learning Research, 7:551–585.

Dipanjan Das, André F. T. Martins, and Noah A. Smith.
2012. An Exact Dual Decomposition Algorithm
for Shallow Semantic Parsing with Constraints. In
Proc. of First Joint Conference on Lexical and Com-
putational Semantics (*SEM), pages 209–217.

Jeffrey Flanigan, Sam Thomson, Jaime Carbonell,
Chris Dyer, and Noah A. Smith. 2014. A discrim-
inative graph-based parser for the abstract mean-
ing representation. In Proc. of the Annual Meet-
ing of the Association for Computational Linguis-
tics, pages 1426–1436.

Richard Johansson and Pierre Nugues. 2008.
Dependency-based syntactic–semantic analysis with
PropBank and NomBank. International Conference
on Natural Language Learning, pages 183–187.

Nikos Komodakis, Nikos Paragios, and Georgios Tzir-
itas. 2007. MRF optimization via dual decompo-
sition: Message-passing revisited. In Proc. of In-
ternational Conference on Computer Vision, pages
1–8.

Terry Koo and Michael Collins. 2010. Efficient third-
order dependency parsers. In Proc. of Annual Meet-
ing of the Association for Computational Linguis-
tics, pages 1–11.

Terry Koo, Alexander M. Rush, Michael Collins,
Tommi Jaakkola, and David Sontag. 2010. Dual
decomposition for parsing with non-projective head
automata. In Proc. of Empirical Methods for Natu-
ral Language Processing, pages 1288–1298.

475



Sandra Kübler, Ryan McDonald, and Joakim Nivre.
2009. Dependency parsing. Morgan & Claypool
Publishers.

André F. T. Martins, Noah A. Smith, and Eric P. Xing.
2009. Concise Integer Linear Programming Formu-
lations for Dependency Parsing. In Proc. of Annual
Meeting of the Association for Computational Lin-
guistics, pages 342–350.

André F. T. Martins, Noah A. Smith, Eric P. Xing,
Pedro M. Q. Aguiar, and Mário A. T. Figueiredo.
2010. Turbo Parsers: Dependency Parsing by Ap-
proximate Variational Inference. In Proc. of Em-
pirical Methods for Natural Language Processing,
pages 34–44.

André F. T. Martins, Noah A. Smith, Pedro M. Q.
Aguiar, and Mário A. T. Figueiredo. 2011. Dual De-
composition with Many Overlapping Components.
In Proc. of Empirical Methods for Natural Language
Processing, pages 238–249.

André F. T. Martins, Mário A. T. Figueiredo, Pedro
M. Q. Aguiar, Noah A. Smith, and Eric P. Xing.
2012. Alternating directions dual decomposition.
Arxiv preprint arXiv:1212.6550.

André F. T. Martins, Miguel B. Almeida, and Noah A.
Smith. 2013. Turning on the turbo: Fast third-order
non-projective turbo parsers. In Proc. of the Annual
Meeting of the Association for Computational Lin-
guistics, pages 617–622.

André F. T. Martins. 2014. AD3: A Fast Decoder
for Structured Prediction. In S. Nowozin, P. Gehler,
J. Jancsary, and C. Lampert, editors, Advanced
Structured Prediction. MIT Press, Cambridge, MA,
USA.

Ryan McDonald, Koby Crammer, and Fernando
Pereira. 2005. Online large-margin training of de-
pendency parsers. In Proc. of Annual Meeting of the
Association for Computational Linguistics, pages
91–98.

Ryan McDonald, Kevin Lerman, and Fernando Pereira.
2006. Multilingual dependency analysis with a two-
stage discriminative parser. In Proc. of International
Conference on Natural Language Learning, pages
216–220.

Alexander M. Rush, David Sontag, Michael Collins,
and Tommi Jaakkola. 2010. On dual decomposi-
tion and linear programming relaxations for natural
language processing. In Proc. of Empirical Methods
for Natural Language Processing.

David A. Smith and Jason Eisner. 2008. Dependency
parsing by belief propagation. In Proc. of Empirical
Methods for Natural Language Processing, pages
145–156.

Kristina Toutanova, Aria Haghighi, and Christopher
Manning. 2005. Joint learning improves semantic
role labeling. In ACL, pages 589–596.

476


