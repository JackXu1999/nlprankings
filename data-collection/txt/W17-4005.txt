

















































Multi-tape Computing with Synchronous Relations

Christian Wurm and Simon Petitjean
{cwurm,petitjean}@phil.hhu.de

Abstract

We sketch an approach to encode re-
lations of arbitrary arity as simple lan-
guages. Our main focus will be faithful-
ness of the encoding: we prove that with
normal finite-state methods, it is impos-
sible to properly encode the full class of
rational (i.e. transducer recognizable) re-
lations; however, there is a simple encod-
ing for the synchronous rational relations.
We present this encoding and show how
standard finite-state methods can be used
with this encoding, that is, arbitrary opera-
tions on relations can be encoded as oper-
ations on the code. Finally we sketch an
implementation using an existing library
(FOMA).

1 Introduction

There is no need to list the merits and advantages
of finite-state methods. However, there are some
drawbacks, which are partly due to intrinsic prop-
erties of rational (i.e. transducer recognizable) re-
lations in general, partly due to restrictions in cur-
rent libraries:

1. In general, the rational relations are not
closed under intersection and complement.
Some libraries offer an approximate version
of intersection, but this is not guaranteed to
provide accurate results.

2. The question whether given two transducers,
the relation recognized by one is a subset of
(or equal to) the other is generally undecid-
able.

3. Standard libraries only support binary rela-
tions; we will in fact prove there is no way to
faithfully (we will make this precise below)

encode rational relations (binary or more than
binary) as regular languages by finite-state
means.

The goal of this article is to solve all these prob-
lems with one step: restrict our attention to syn-
chronous rational relations. This solves problem
1. because this class actually forms a Boolean al-
gebra; it follows that 2. is also solved, as this way,
it is easy to decide the inclusion/equivalence prob-
lem. We can also solve problem 3., because we
can faithfully encode arbitrary n-ary synchronous
relations as simple languages. This encoding pre-
serves recognizability (by finite-state automata)
and allows to faithfully encode standard opera-
tions on relations via (different) standard opera-
tions on the code (we will define and explain this
in more detail below). As the only drawback,
we have to renounce to the additional expressive
power of rational relations over synchronous rela-
tions; but as it was argued in [9], there might be
little actual need for this in linguistic applications.

While from a theoretical point of view, we think
there is little to object to our approach, there are
large practical obstacles: firstly, synchronous re-
lations are not as comfortable to specify as ratio-
nal relations: for the latter, the representation of
rational expressions is particularly practical and
compelling (it is used i.e. by FOMA/XFST). We
solve this problem here by defining a subclass of
rational expressions which allows us to represent
all and only synchronous relations, and we pro-
vide a program checking whether an expression is
in this class. Secondly, we do not want to build
a new program or library from scratch, but rather
stick to existing ones. Therefore, we implement
an interface which allows to define arbitrary n-ary
synchronous relations, which are then encoded as
languages and can be passed on to FOMA, a stan-
dard automaton library (see [5]). We have to add,

41

Proceedings of the 13th International Conference on Finite State Methods and Natural Language Processing, pages 41–49,
Umeå, Sweden, 4–6 September 2017. c© 2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/W17-4005

https://doi.org/10.18653/v1/W17-4005


however, that the implementation is still work in
progress.

Hence we show that we can make use of syn-
chronous relations in finite-state processing with-
out really big obstacles, and this solves the three
problems we mentioned above. The paper is struc-
tured as follows: next, we lay out the motivations
we have sketched here more explicitly. Then we
provide the basic definitions of classes of relations
and operations on them. Then we sketch our ap-
proach and procedure to solve the problems. Fi-
nally, we discuss the implementation.

2 Motivation and previous work

We here outline the motivations of this paper more
explicitly. It is well-known that rational rela-
tions are not closed under intersection (for proof,
see [1]), and consequently not under complement.
This is problematic for some applications: we
might want to intersect two relations, each one
implementing a certain set of constraints, where
grammatical forms have to satisfy both. Also com-
plementation might be useful, because this way
we might specify ill-formed transformations and
go from there to well-formed transformations. In
fact, libraries as FOMA have a pseudo-intersection
operation, but it is not guaranteed to yield a math-
ematically correct result.1

What is more problematic about the lack of in-
tersection and complement is that without them,
we cannot decide whether two transducers com-
pute the same relation. This is problematic, be-
cause there are many different ways and method-
ologies to define the same relation. It would be
nice to be able to see whether two relations are ac-
tually equivalent or one is more permissive than
another (e.g. in comparing grammatical frame-
works), but this is generally impossible with ratio-
nal relations: proving equivalence of transducers
is equivalent to giving a solution to the Post cor-
respondence problem, which is undecidable (see
[4]).

Finally, to our knowledge all existing libraries
for transducers and rational relations only sup-
port binary relations. This is sufficient for most
purposes in grammar engineering: we are inter-
ested in input/output relations, for example word
form/morphological analysis; interme-
diate steps can and should be discarded. This is no

1This intersection is based on identical automaton transi-
tions, but for transducers, these are no longer unique, see [7].

longer true if we are interested in reconstruction
of old languages from reported sound changes and
shifts: here we often are interested in intermediate
forms, and would need a form of “lossless compo-
sition” which preserves the intermediate steps. An
alternative motivation is for example the desire to
include phonology, prosody, semantics etc. into
relations. For a nice motivation see [6, 7]. Once
we have intersection and arbitrary relations, we
also have the possibility to generalize composition
by “matching” an arbitrary number of components
instead of just one. As this allows to encode inter-
section, rational relations are obviously not closed
under these operations, whereas synchronous ra-
tional relations are (for a general definition see be-
low).

The most important previous work on this topic
is [7], which also gives an encoding of string tu-
ples of arbitrary size into strings. However, this
encoding is somewhat problematic: it either does
not preserve recognizability, that is, if an n-ary
rational relation is encoded in this way, the code
language is not a regular language, or it cannot be
computed by a finite automaton (this follows from
lemma 4). Moreover, it is not faithful for some op-
erations (see below). This is one main motivation
for our approach. Synchronous relations actually
have already been used in some applications (see
[8]), but in a different library (Vaucanson) and un-
related to the issue of introducing relations of ar-
bitrary arity.

3 Preliminary definitions

There are two equivalent ways to define and rep-
resent rational relations, namely firstly as the re-
lations recognized by finite-state transducers, and
secondly as the relations denoted by rational ex-
pressions. A transducer computes an n-ary rela-
tion, if its transitions are labelled by (Σ ∪ {�})n.
For reasons of space, we only formally define ra-
tional expressions, and presuppose knowledge of
transducers. Fix an arbitrary alphabet Σ and an
arbitrary arity n. Then for a1, ..., an ∈ Σ ∪
{�}, (a1, ..., an) is a rational expression (denot-
ing {(a1, ..., an)}); moreover if e, f rational ex-
pressions, then so are e · f (denoting componen-
twise concatenation of tuples), e + f (denoting
union) and e∗ (denoting 1 + e+ (e · e) + ..., where
1 = {(�, ..., �)}. A relation is rational if it is
denoted by some rational expression; we denote
the class by R. The class of synchronous ratio-

42



nal relations (SR) is more complicated to define:
put Σ⊥ := Σ ∪ {⊥}, for ⊥/∈ Σ. The convo-
lution of a tuple of strings (w1, ..., wi) ∈ (Σ∗)i,
written as ⊗(w1, ..., wi), is in ((Σ⊥)∗)i and of
length max({|wj | : 1 ≤ j ≤ i}), is defined
as follows: the kth letter-tuple of ⊗(w1, ..., wi)
is 〈σ1, ..., σi〉, where σj is the k-th letter of wj
provided that k ≤ |wj |, and ⊥ otherwise. The
convolution of a relation R ⊆ (Σ∗)i is defined by
⊗R := {⊗(w1, ..., wi): (w1, ..., wi) ∈ R}. A re-
lation R ∈ (Σ∗)i is synchronous regular, if there
is an �-free finite-state automaton with transitions
labelled by (Σ⊥)i recognizing ⊗R.

Informally, SR are the relations computed by
finite-state transducers which allow �-transitions
in a component only if no other letter is to follow
in this component. There is also a characteriza-
tion of SR in terms of first-order logic (see [2]),
which is very convenient as it entails a lot of clo-
sure properties, in particular Boolean closure and
closure under projection and cylindrification.

To have a more perspicuous notation, we some-
times use the identity expansion on languages:
for L ⊆ Σ∗, we have id(L) ⊆ (Σ∗)2 with id(L) =
{(w,w) : w ∈ L}. We thus expand languages to
their identity relations. For example FOMA repre-
sents every languageL as id(L), hence the concept
is well-known.

We use projection in a slightly different sense
than usual, namely in the sense of projecting away.
We define for i ≤ n, R ⊆ (Σ∗)n, πi(R) =
{(w1, ..., wi−1, wi+1, ..., wn) : (w1, ..., wn) ∈
R}. We urge the reader to keep in mind that
for us, the ith projection is not choosing the ith
component of tuples, but rather discarding it. On
binary relations, these two notions of projection
are obviously notational variants, but on rela-
tions of higher arity, our notion is much more
powerful and convenient. The inverse of pro-
jections are cylinders: for i ≤ n + 1, R ⊆
(Σ∗)n, Ci(R) = {(w1, ..., wi−1, v, wi, ..., wn) :
v ∈ Σ∗, (w1, ..., wn) ∈ R}. We can also de-
fine Ci as follows: for R ∈ (Σ∗)n, Ci(R) =
{(w1, ..., wn+1) : πi({(w1, ..., wn+1}) ⊆ R};
hence cylinders are maximal pre-images of projec-
tions. To avoid undefined terms, we introduce the
following convention: if R ⊆ (Σ∗)n, i > n, then
πi(R) = R, and if i > n + 1, then Ci(R) = R
(these two conventions are again necessarily par-
allel, otherwise Ci is no longer an inverse for πi).

When we encode tuples as strings, relations

as languages, the two notions are closely con-
nected to homomorphisms and inverse homo-
morphisms. We define homomorphisms as fol-
lows: h : (Σ∗)n → (T ∗)n is a homomor-
phism, if h(w1, ..., wn) = (h(w1), ..., h(wn)), and
h(aw) = h(a)h(w). h is a relabelling, if a ∈ Σ
implies h(a) ∈ T . For a homomorphism h :
Σ∗ → T ∗, L ⊆ T ∗, we write h−1(L) = {v ∈ Σ∗ :
h(v) ∈ L} for the maximal pre-image. For clarity,
we distinguish between a function f and its graph,
where graph(f) = {(x, f(x)) : x ∈ dom(x)}.
For every relabelling h, graph(h) is a relation
computed by a one-state synchronous transducer.
For an arbitrary function f : M → N , X ⊆ M ,
we write f [X] = {f(x) : x ∈ X}. Note that if
L ⊆ Σ∗, then h[L] = π1(id(L)◦graph(h)), where
◦ denotes relation composition.

A less well-known notion we need to explain is
(generalized) composition with relations of arbi-
trary arity. We put, for R ⊆ (Σ∗)n, S ⊆ (T ∗)m,
o ≤ m,n,

R ◦o S = {(w1, ..., wn−o, wn+1, ..., w(n+m)−o) :
(w1, ..., wn) ∈ R, (wn−o, ..., w(n+m)−o) ∈ S}.

Hence if o = 0, this becomes Cartesian product.
Standard composition is ◦1 (usually applied to bi-
nary relations), and we will usually write ◦ for ◦1.
We also define a relative we call lossless compo-
sition:

R⊕o S = {(w1, ..., wn−o, ..., wn, ..., w(n+m)−o) :
(w1, ..., wn) ∈ R, (wn−o, ..., w(n+m)−o) ∈ S}.

Hence in this case, the “matching components” are
not discarded, but rather kept, this way increas-
ing the arity of the relation; if m = n = o, then
this becomes intersection. As before, we usually
write ⊕ instead of ⊕1, which is the standard loss-
less composition as in [7].

A simple operation is inversion: R−1 =
{(wn, ..., w1) : (w1, ..., wn) ∈ R}; hence we in-
vert the order of tuples.

Two more standard operations for relations over
strings are concatenation and Kleene star: assume
R,S ⊆ (Σ∗)n. Then R · S = {(w1v1, ..., wnvn) :
(w1, ..., wn) ∈ R, (v1, ..., vn) ∈ S}; and R∗ =
{(�, ..., �)} ∪R ∪R ·R ∪ ....

The following lemma summarizes the most im-
portant closure properties:

Lemma 1 (SR closure properties)

1. If R,S ⊆ (Σ∗)n, R,S ∈ SR, then (Σ∗)n −
R,S ∪R,S ∩R ∈ SR.

43



2. If R ⊆ (Σ∗)n, R ∈ SR, then
πi(R), Ci(R) ∈ SR.

3. If R ⊆ (Σ∗)m, S ⊆ (Σ∗)n, o ≤ m,n, then if
R,S ∈ SR, then R ◦o S,R⊕o S ∈ SR.

4. If R ∈ SR, h a relabelling, then h[R] ∈ SR.
If h a homomorphism, then h[L] ∈ R.

These results are all well-known and easy to
verify, given the logical characterization of SR
(see [2],[9]): operations in 1. correspond to logical
connectives; regarding 2., projection corresponds
to existential quantification, cylindrification to in-
troducing new (free) variables. Generalized (loss-
less) composition in 3. can be easily defined with
operations in 1. and 2. (see section 4.2), and claim
4. is obvious.

What is problematic for SR is the lack of
closure under concatenation and Kleene star: if
R,S ⊆ (Σ∗)n, R,S ∈ SR, then R · S and R∗
need not be in SR.

4 Encodings: faithfulness and
completeness

4.1 Coding preliminaries

We say a map ψ : (T ∗)n → Σ∗ encodes tuples in
strings, if there are maps φ1, ..., φn such that for
all i : 1 ≤ i ≤ n,

(1) φi(ψ(w1, ..., wn)) = wi

We write ~x to refer to tuples of strings. This
means ψ(~x) contains all relevant information of
all components, as they can be uniquely recon-
structed. Note that this already entails a num-
ber of things, like: for ~x = (w1, ..., wn),
(φ1(ψ(~x)), ...., φn(ψ(~x)) = ~x; this in turn shows
that ψ is injective. We then say a languageL ⊆ Σ∗
encodes a relation R ⊆ (T ∗)n, if L = ψ[R]. We
define the complexity of the encoding via the com-
plexity of the maps φi, as these are string-to-string
and hence more convenient to handle (but in most
natural cases, the complexity of φi determines that
of ψ). An encoding is simple, if the maps φi are
relabellings; it is rational, if the φi are finite-state
computable. In general, we say a function f is ra-
tional if graph(f) is a rational relation. Given an
encoding ψ : (T ∗)n → Σ∗, codeψ := ψ[(T ∗)n]
denotes the set of code words.

The crucial question for encodings is whether
we can faithfully transform operations on relations

to operations on the code. Let R1, ..., Rn be rela-
tions, τ be an n-ary operation, ψ be an encoding.
Then we say that the operation τψ faithfully en-
codes τ , if

(2) ψ(τ(R1, ..., Rn)) = τψ(ψ(R1), ..., ψ(Rn))

Hence we can simulate operations on relations by
operations on codes. ψ being an injective function
already entails that it is faithful for union, intersec-
tion and composition; complement easily follows,
provided codeψ is a regular language. For us, the
most relevant property of encodings is the follow-
ing: we want that all standard finite-state methods
(FSM) can be faithfully encoded as standard finite-
state methods, so if τ is a standard FSM, then τψ
should be a standard FSM (though possibly a dif-
ferent one).

We now come to our simple encoding. It is
based on tuple concatenation, but not componen-
twise: we defined · by (a, b) · (c, d) = (ac, bd),
which results in a tuple of strings. To encode tu-
ples as strings, we form (a, b)(c, d) (without ·),
which is not a tuple of strings, but rather a string of
two tuples. We say that a string of tuples ~x1...~xi is
a factorization of ~y ∈ (Σ∗)n, if 1. ~x1, ..., ~xi ∈
(Σ ∪ �)n, and ~x1 · ... · ~xi = ~y. Factorizations
are thus maximal decompositions, but importantly,
factorizations are not unique, because there are
factorizations such as (a, �)(�, b) of (a, b). What is
however unique are synchronous factorizations:
a factorization ~x1....~xn is synchronous, if the fol-
lowing holds: if the jth letter of ~xi is �, then for
all m : i ≤ m ≤ n, the jth letter of ~xm is �.
Hence synchronous factorizations simply embody
the synchronicity condition of synchronous rela-
tions, and synchronous factorizations correspond
to convolutions, except that the latter are relations,
the former are words – which is a crucial differ-
ence!

Note: all relations over strings have a unique
synchronous factorization, regardless of whether
they are synchronous, rational, or even com-
putable. Hence we can conceive of

synfact : (Σ∗)n → ((Σ ∪ {�})n)∗

as a function, which for every tuple gives its syn-
chronous factorization. This is actually a simple
encoding in our sense, where φi is defined by the
relabelling h(a1, ..., an) = ai. Keep in mind how-
ever that in factorizations, (a1, ..., an) is treated as
an arbitrary letter, just as b. The following result is
most important for synfact :

44



Lemma 2 Assume R ⊆ (Σ∗)n. Then R is syn-
chronous rational if and only if synfact [R] is a
regular language.

Proof. The proof is actually straightforward: just
interpret a synchronous transducer recognizing a
relation as recognizing a language, then you rec-
ognize the factorization of the relation, and vice
versa. So the transducer remains the same, just its
interpretation changes. �

This lemma is also very useful in order to prove
that a relation is not synchronous. For example,
take the relation R1 = (b, �)∗ · (a, a)∗. In its
synchronous factorization, we have three letters,
namely (a, a), (b, a) and (a, �), which for simplic-
ity we write c, d, e. Then the synchronous factor-
ization has the form synfact(R1) = {dmcneo :
m+n = n+o}. If we intersect this with d∗e∗, then
we obtain {dmem : m ∈ N}, which is well-known
to be not regular, and henceR1 is not synchronous.
We now provide a useful lemma showing how the
maps φi relate to ψ. We define

(3) 〈φ1, ..., φn〉(w) = (φ1(w), ..., φn(w))

We extend this to sets in the pointwise fashion.

Lemma 3 Assume L is regular, and let φ1, ..., φn
be rational functions. Then 〈φ1, ..., φn〉[L] is a ra-
tional relation.

Proof. By adding an additional component to
graph(φi), it is easy to see that {(w, φi(w), w) :
w ∈ Σ∗} is a rational relation. Call this (ternary)
relation Rφi . By closure under (simple) compo-
sition, we can construct id(L) ◦ Rφ1 ◦ ... ◦ Rφn ,
which is an (n + 2)-ary relation of the form
{(w, φ1(w), ..., φn(w), w) : w ∈ L}. By us-
ing projections π1, πn+2 we obtain 〈φ1, ..., φn〉[L],
which is then still rational (by closure under pro-
jection). �

By closure under inversion, this means that if
ψ(R) is finite-state decodable, it is also finite-state
encodable: there is an (n+1)-ary rational relation
graph(ψ) = {(w1, ..., wn, v) : ψ(w1, ..., wn) =
v}. Now we can state that there does not exist a
rational encoding for rational relations:

Lemma 4 There is no rational encoding ψ :
(Σ∗)n → T ∗ such that for all rational relations
R, ψ[R] is regular.

Proof. Assume there is such an encoding ψ. An
encoding is an injection, hence we have ψ(R) ∩
ψ(S) = ψ(R ∩ S). Since the encodings ψ(R),

ψ(S) are regular, so is ψ(R)∩ψ(S) = ψ(R∩S).
As ψ can be computed by a finite-state trans-
ducer, by closure under transduction and projec-
tion, 〈φ1, ..., φn〉[ψ(R ∩ S)] = ψ−1[ψ(R ∩ S)]
is a rational relation. However, for injective ψ,
ψ−1[ψ(R ∩ S)] = R ∩ S, which is the intersec-
tion of two rational relations and in general R ∩ S
might be not rational – contradiction. �

4.2 Faithfulness for standard operations
After fixing the encoding for relations, we here
present the encoding of operations τψ for some
standard operations τ . Here it is important to keep
in mind: whereas for defining relations, the “tuple
structure” of (a1, ..., an) is essential, if we con-
sider languages/factorizations, then (a1, ..., an) is
just an arbitrary letter no different from b. For rea-
sons of space, in the following table we write ψ
for synfact ; on the left, we present the operation
on (synchronous) relations, on the right the corre-
sponding operation on the code.

τ (on relation) τψ (on language)
1. ψ(R ∪ S) ψ(R) ∪ ψ(S)
2. ψ(R ∩ S) ψ(R) ∩ ψ(S)
3. ψ(R) ψ(R) ∩ codeψ
4. ψ(πi(R)) hi[ψ(R)], hi a relabelling
5. ψ(Ci(R)) h−1i (ψ(R)), hi a relabelling
6. ψ(R ◦1 S) π2(C3(ψ(R)) ∩ C1(ψ(S)))
7. ψ(R⊕1 S) C3(ψ(R)) ∩ C1(ψ(S))
8. R ◦i S generalize 6.
9. R⊕i S generalize 7.
10.ψ(R−1) h[ψ(R)], h a relabelling.

These are the set-theoretic operations (in a
wide sense). As regards π and C (projection
and cylindrification), these are usually not con-
sidered standard operations on relations, but this
is only because on binary relations, they do
not make too much effect. For our codes/fac-
torizations, they become homomorphisms/inverse
homomorphisms: as our letters have the form
(a1, ..., an), πi is simply the relabelling hi :
((Σ ∪ {�})n)∗ → ((Σ ∪ {�})n−1)∗, defined
by hi(a1, ..., an) = h(a1, ..., ai−1, ai+1, ..., an);
cylindrification Ci becomes the corresponding in-
verse relabelling h−1i . We usually do not have
homomorphisms directly in our libraries, but we
can easily define the one-state synchronous trans-
ducers computing them, and obtain the results by
composition:

h[L] = π1(id(L) ◦ graph(h))(4)
h−1[L] = π2(graph(h) ◦ id(L))(5)

45



So in some way or other, we can easily encode
these operations, and hence all these operations
can be used without any restriction. What is
more serious and problematic are concatenation
and Kleene star.

4.3 Concatenation and Kleene star
Our encoding is not faithful for concatenation and
Kleene star. This is because the concatenation of
two synchronous factorizations is not necessarily
a synchronous factorization, such as (a, �)(�, a).
This is related to the fact that synchronous rela-
tions are not closed under concatenation, and cor-
respondingly not under Kleene star, so there is no
remedy to this problem. Lack of closure under
these operations is probably the biggest problem
with synchronous relations. We will circumvent
this problem by introducing a category system of
expressions. We can conceive of rational expres-
sions as grammars with just one category, where
every combination of categories yields that same
category as result. We distinguish three categories
of rational expressions:

1. el, the equal-length expressions (all compo-
nents have equal length)

2. ed, the �-difference expressions, where
shorter components are �

3. bd, the bounded difference expressions

4. gd, where difference can be unbounded and
shorter components need not be �

5. ⊥, the expressions which are no longer guar-
anteed to be synchronous

As we have said, these categories concern the syn-
tactic form of expressions, not their denotation, for
which it is just a heuristic. Fix an arbitrary arity;
then we have the following syntactic rules:

• (a1, ..., an) ∈ el, if a1 6= �, ..., an 6= �

• (a, ..., an) ∈ bd and (a, ..., an) ∈ ed if for
some i ∈ {1, ..., n}, ai = �

Note that the assignment is polymorphic, where
type polymorphism is handled in the standard way
(it can also be avoided by adding a type ed ∧ bd).
The combinatorics are as follows (we use x as
variable for arbitrary categories)

• el · el = el

• el · ed = bd · ed = gd

• el · bd = bd · el = bd · bd = bd

• el · gd = bd · gd = gd

• gd · x = ed · x =⊥

• el∗ = el

• ed∗ = ed

• bd∗ = gd∗ =⊥

Moreover, we define an order el ≤ bd, ed ≤
gd ≤⊥, and for + denoting union, for expres-
sions e, e′ of type x, x′, e + e′ has type x ∨ y,
that is, the join with respect to the order. We call
the expressions of category el, bd, ed, gd the syn-
chronous rational expressions (SR-expressions);
this consequently forms a (proper) subset of the
rational expressions We could also devise a more
fine-grained and permissive system, but we do not
present it for reasons of space. The important
thing is the following:

Lemma 5 Every synchronous rational expression
denotes a synchronous rational relation.

This is easy to prove; for the few critical cases,
use the synchronization lemma from [3]. So with
SR-expressions, we are on the safe side, though
many expressions which do denote synchronous
relations are excluded. Note that the problem
whether an arbitrary rational expression denotes
a synchronous relation is undecidable (see [3],
proposition 5.5).

4.4 Completeness of the constructions
Here we prove that with extended SR-expressions
(for definition see below), we can construct all and
only the synchronous relations. Importantly, this
is not to say that only extended synchronous ra-
tional expressions denote synchronous relations,
but for every synchronous rational relation we can
construct an extended SR-expression. Take an al-
phabet Σ with |Σ| ≥ 2. Let EL ⊆ (Σ∗)2 be the set
of equal-length string pairs {(w, v) : |w| = |v|},
pref ⊆ (Σ∗)2 the set of pairs {(w,wv) : w, v ∈
Σ∗}, and for a ∈ Σ, Ra ⊆ Σ∗ the set of strings
{wa : w ∈ Σ∗}. It is easy to see that EL can be
constructed as synchronous expression with cate-
gory el, pref with category el · ed = gd, Ra : a ∈
Σ with category el (as it is unary). The complete-
ness of our construction follows from the crucial
direction of Eilenberg’s result in [2]:

46



Theorem 6 (Eilenberg, Elgot, Shepherdson) As-
sume |Σ| > 1. Then every synchronous ratio-
nal relation of arbitrary arity over Σ can be con-
structed from EL, pref , Ra : a ∈ Σ by the opera-
tions Ci, πi, ∪,∩, [−].
Actually, this is slightly different from the origi-
nal formulation, as we leave out the logic part and
only consider the semantics; still our formulation
easily follows from the main theorem of [2]. The
proof of this statement is long and complicated,
so we omit a sketch. We define extended syn-
chronous expressions as follows:

• If e is a synchronous rational expression, then
it is an extended synchronous rational expres-
sion.

• If e, f are extended synchronous rational ex-
pressions, then so are πi(e), Ci(e), e ∩ f , e.

The interpretation of these expressions is straight-
forward, as constructors are interpreted as them-
selves. Now the previous lemmas 1,5 and theorem
6 have the following consequence:

Corollary 7 A relation R is synchronous regular
if and only if it is denoted by some extended syn-
chronous regular expression.

Of course, our approach so far is rather terse,
and there is lots of syntactic sugar we can add;
in particular, the operations of (generalized) com-
position and lossless composition can be added,
as they are straightforwardly definable by gener-
alized synchronous expressions. For reasons of
space, we do not present this here, but make use
of this in our implementation.

5 The procedure and implementation

Of course, it would be possible to construct a li-
brary for synchronous relations of arbitrary arity
from scratch. This is however not necessary, as
our results indicate: we can use a library which is
able to handle regular languages and binary rela-
tions, and all we have to do is mediate the input:

user⇐⇒ interface⇐⇒ existing FS-library

Hence the user can interact with our interface,
writing relations of arbitrary arity with syn-
chronous rational expressions. The interface en-
codes them as terms which denote languages (or
rather their identity expansion), which are then
passed on to an existing library, in our case FOMA.
Furthermore, every request by the user is again

mediated. These requests can be of different na-
ture:

1. assign the relation in question to a variable,
and use it to construct a larger relation

2. check equivalence of two expressions (with
or without variables), or emptiness of an ex-
pression.

3. check whether a word w is denoted by an ex-
pression, or give the output for a certain in-
put, or print some set of tuples which are rec-
ognized

These three types of requests can be easily han-
dled, and we quickly sketch the procedure. 1. is
easily taken care of, as this is just a variable as-
signment. 2. emptiness is routinely checked in
FOMA; in order to check inclusion R ⊆ S, we just
have to construct R ∩ S and check its emptiness.
As regards 3., we can just use the standard method
constructing the relation id({w}) and compose/in-
tersect, and print the output or check emptiness.

The processing chain of the interface starts with
the parsing of the user input. The language that
we propose for describing relations is comparable
to the one used for regular expressions in FOMA,
except that the elementary units are tuples instead
of atoms. Before being encoded, the abstract syn-
tax tree resulting of the parsing must be checked,
as only synchronous rational expressions will be
encoded by the interface.

The checking uses a color system, where col-
ors represent the level of threat to the synchronic-
ity of the relation. Each node in the abstract syn-
tax tree of the expression will be colored either in
black, green, orange or red. We start by coloring
all the leaves of the tree (the tuples), and then all
the colors of the internal nodes of the tree (the op-
erations) are determined depending on the color
of their daughter nodes (the arguments of the op-
erations). The checking process explores the tree
bottom up until the root, so the whole relation, is
given a color. After checking, we will consider
that a relation is not synchronous only if its color
is red. A tuple will be given the green color if
it features an empty word. When a node repre-
sents the application of a Kleene star, the resulting
color will be orange if its daughter node (its argu-
ment) is green, so if the Kleene star is applied to a
term containing an empty word. The relation until
now is still synchronous, but will not be anymore

47



if anything is concatenated on the right. For this
reason, a node is given the red color if it repre-
sents a concatenation and if its left daughter node
is orange.

One problem still needs to be taken care of after
the checking: empty words should not appear in
a tuple, except if for all the other tuples concate-
nated to its right also feature the empty word at the
same index. For example, (a, �)(a, b) should be
forbidden. However, (a, b)(a, �) denotes the same
relation, and can be obtained by a simple transfor-
mation of the first expression. Our implementation
realizes this type of transformation, which we call
�-shifting. Whenever two tuples are concatenated,
for each empty word in the left tuple, if the word
at the corresponding index in the right tuple is not
empty, then we swap them. We repeat this process
until no � can be shifted anymore.

After checking the expression and performing
�-shifting, the encoding can be done. The en-
coding that we target is actually very close to the
string that we had before parsing, due to the simi-
larity between our language and the one of FOMA.
The essential difference is that in the target string,
we need to make sure that tuples will be inter-
preted by FOMA as atoms.

Let us now go through the steps of the process-
ing chain while looking at a concrete example. We
consider the following input:

( (a , epsilon , b) (a , c , a) ) | (a , c , b)∗

The abstract syntax tree produced by the parser is
be as follows:

[ ’union’ ,[ ’concat’ ,[( ’a’ , ’ epsilon ’ , ’b’ )],
[( ’a’ , ’c’ , ’a’ )] ],

[ ’ star ’ ,[( ’a’ , ’c’ , ’b’ )] ] ]

The checking of this tree starts by giving colors to
the tuples: (a,epsilon,b) is green because of the �,
the two others are black. The concatenation does
not produce a red color here, as the left daugh-
ter node ([(’a’, ’epsilon’, ’b’)]) is not orange but
green. It would be the case for example if the in-
put was:

( (a , epsilon , b)∗ (a , c , a) ) | (a ,c ,b)∗

In this case, the process would have been stopped
after unsuccessful checking. The next step is the
�-shifting, which explores the tree looking for con-
catenations. Only one shift is performed, on:

[ ’concat’ , [( ’a’ , ’ epsilon ’ , ’b’ )],
[( ’a’ , ’c’ , ’a’ )] ]

The tree which we obtain after the �-shifting is as
follows:

[ ’union’ ,[ ’concat’ ,[( ’a’ , ’c’ , ’b’ )],
[( ’a’ , ’ epsilon ’ , ’a’ )] ],

[ ’ star ’ ,[( ’a’ , ’c’ , ’b’ )] ] ]

The encoding part basically does the opposite of
what the parser did, unfolding the abstract syntax
tree into a string:

((%[’a’%,’c’%,’b’%] %[’a’%,’epsilon’%,’a’%])
|( %[’a’%,’c’%,’b’%] )∗)

where % is the escape character allowing us to let
FOMA consider tuples (here represented as lists)
as a single atoms. Now that the output string was
produced, the user can compute with FOMA an au-
tomaton for the relation. Our interface supports
all the operations mentioned in this article, except
for composition. This is due to the fact that our
interface does not implement its own operations,
but uses the ones provided by FOMA, following
the translations given in section 4.2. Projection
and cylindrification, which are necessary to com-
pute composition, are not supported by FOMA, as
they depend on our specific way to encode the tu-
ples. Even though there is no trivial solution for
their implementation because of this reason, pos-
sible workarounds would include the use of homo-
morphisms or the development of an extension to
FOMA which provides ways to access and modify
the elements in our tuples.

6 Conclusion

We have presented an approach to allow users to
work with (synchronous) rational relations of ar-
bitrary arity, with full Boolean closure properties
and a decidable inclusion problem. Our approach
is based on the desire to work with existing li-
braries, and we have done this by encoding arbi-
trary relations as simple languages. Our two main
results are the following: firstly, an approach as
ours cannot work with the full class of rational
relations, because it is impossible to encode ar-
bitrary rational relations as regular languages by
finite-state means. On the other hand, we have
sketched that it works very well with synchronous
rational relations, for which only concatenation
and star are problematic. The second main result
is that we have presented a class of expressions
which denotes all and only the synchronous ratio-
nal expressions, which is not trivial, as the prob-
lem whether a rational expression denotes a syn-

48



chronous relation is undecidable. From a practical
point of view, we have provided a type checker for
expressions and implemented the encoding. How-
ever, to provide a full user-interface, some work
still needs to be done.

References
[1] Jean Berstel. Transductions and Context-free Lan-

guages. Teubner, Stuttgart, 1979.

[2] S. Eilenberg, C. C. Elgot, and J. C. Shepherdson.
Sets recognized by n-tape automata. Journal of Al-
gebra, 13:447–464, 1969.

[3] Christiane Frougny and Jacques Sakarovitch. Syn-
chronized rational relations of finite and infinite
words. Theor. Comput. Sci., 108(1):45–82, 1993.

[4] T. V. Griffiths. The unsolvability of the equivalence
problem for λ-free nondeterministic generalized ma-
chines. J. ACM, 15(3):409–413, July 1968.

[5] Mans Hulden. Foma: a finite-state compiler and
library. In Alex Lascarides, Claire Gardent, and
Joakim Nivre, editors, EACL 2009, 12th Conference
of the European Chapter of the Association for Com-
putational Linguistics, Proceedings of the Confer-
ence, Athens, Greece, March 30 - April 3, 2009,
pages 29–32. The Association for Computer Lin-
guistics, 2009.

[6] Mans Hulden. Grammar design with multi-tape au-
tomata and composition. In Thomas Hanneforth and
Christian Wurm, editors, Proceedings of the 12th
International Conference on Finite-State Methods
and Natural Language Processing, FSMNLP 2015,
Düsseldorf, Germany, June 22-24, 2015. The Asso-
ciation for Computer Linguistics, 2015.

[7] Mans Hulden. Rewrite rule grammars with multi-
tape automata. Journal of Language Modelling, To
appear.

[8] Florian Lesaint. Synchronous relations in Vau-
canson. Technical Report 0833, Laboratoire de
Recherche et Développement de L’Epita, 2008.

[9] Christian Wurm and Younes Samih. Synchronous
regular relations and morphological analysis. In
Mark-Jan Nederhof, editor, Proceedings of the 11th
International Conference on Finite State Methods
and Natural Language Processing, FSMNLP 2013,
St. Andrews, Scotland, UK, July 15-17, 2013, pages
35–38. The Association for Computer Linguistics,
2013.

49


