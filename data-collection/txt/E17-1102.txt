



















































Bilingual Lexicon Induction by Learning to Combine Word-Level and Character-Level Representations


Proceedings of the 15th Conference of the European Chapter of the Association for Computational Linguistics: Volume 1, Long Papers, pages 1085–1095,
Valencia, Spain, April 3-7, 2017. c©2017 Association for Computational Linguistics

Bilingual Lexicon Induction by Learning to Combine Word-Level and
Character-Level Representations

Geert Heyman1, Ivan Vulić2, and Marie-Francine Moens1

1LIIR, Department of Computer Science, KU Leuven
2Language Technology Lab, DTAL, University of Cambridge
{geert.heyman,sien.moens}@cs.kuleuven.be

iv250@cam.ac.uk

Abstract

We study the problem of bilingual lexicon
induction (BLI) in a setting where some
translation resources are available, but un-
known translations are sought for certain,
possibly domain-specific terminology. We
frame BLI as a classification problem for
which we design a neural network based
classification architecture composed of re-
current long short-term memory and deep
feed forward networks. The results show
that word- and character-level representa-
tions each improve state-of-the-art results
for BLI, and the best results are obtained by
exploiting the synergy between these word-
and character-level representations in the
classification model.

1 Introduction

Bilingual lexicon induction (BLI) is the task of find-
ing words that share a common meaning across dif-
ferent languages. Automatically induced bilingual
lexicons support a variety of tasks in information
retrieval and natural language processing, includ-
ing cross-lingual information retrieval (Lavrenko
et al., 2002; Levow et al., 2005; Vulić and Moens,
2015; Mitra et al., 2016), statistical machine trans-
lation (Och and Ney, 2003; Zou et al., 2013), or
cross-lingual entity linking (Tsai and Roth, 2016).
In addition, they serve as a natural bridge for
cross-lingual annotation and model transfer from
resource-rich to resource-impoverished languages,
finding their application in downstream tasks such
as cross-lingual POS tagging (Yarowsky and Ngai,
2001; Täckström et al., 2013; Zhang et al., 2016),
dependency parsing (Zhao et al., 2009; Durrett et
al., 2012; Upadhyay et al., 2016), semantic role
labeling (Padó and Lapata, 2009; van der Plas et
al., 2011), to name only a few.

Current state-of-the-art BLI results are obtained
by cross-lingual word embeddings (Mikolov et
al., 2013b; Faruqui and Dyer, 2014; Gouws et al.,
2015; Vulić and Moens, 2016; Duong et al., 2016,
inter alia). They significantly outperform tradi-
tional count-based baselines (Gaussier et al., 2004;
Tamura et al., 2012). Although cross-lingual word
embedding models differ on the basis of a bilingual
signal from parallel, comparable or monolingual
data used in training (e.g., word, sentence, docu-
ment alignments, translation pairs from a seed lexi-
con),1 they all induce word translations in the same
manner. (1) They learn a shared bilingual semantic
space in which all source language and target lan-
guage words are represented as dense real-valued
vectors. The shared space enables words from both
languages to be represented in a uniform language-
independent manner such that similar words (re-
gardless of the actual language) have similar rep-
resentations. (2) Cross-lingual semantic similar-
ity between words w and v is then computed as
SF (~w,~v), where ~w and ~v are word representations
in the shared space, and SF denotes a similarity
function operating in the space (cosine similarity
is typically used). A target language word v with
the highest similarity score arg maxv SF (~w,~v) is
then taken as the correct translation of a source
language word w.

In this work, we detect two major gaps in cur-
rent representation learning for BLI. First, the stan-
dard embedding-based approach to BLI learns rep-
resentations solely on the basis of word-level in-
formation. While early BLI works already estab-
lished that character-level orthographic features
may serve as useful evidence for identifying trans-
lations (Melamed, 1995; Koehn and Knight, 2002;

1See recent comparative studies on cross-lingual word em-
bedding learning (Upadhyay et al., 2016; Vulić and Korhonen,
2016) for an in-depth discussion of the differences in modeling
and bilingual supervision.

1085



Haghighi et al., 2008), there has been no attempt
to learn character-level bilingual representations
automatically from the data and apply them to im-
prove on the BLI task. Moreover, while prior work
typically relies on simple orthographic distance
measures such as edit distance (Navarro, 2001),
we show that such character-level representations
can be induced from the data. Second, Irvine and
Callison-Burch (2013; 2016) demonstrated that
bilingual lexicon induction may be framed as a
classification task where multiple heterogeneous
translation clues/features may be easily combined.
Yet, all current BLI models still rely on straightfor-
ward similarity computations in the shared bilin-
gual word-level semantic space (see Sect. 2).

Motivated by these insights, we propose a
novel bilingual lexicon induction (BLI) model that
combines automatically extracted word-level and
character-level representations in a classification
framework. As the seminal bilingual representa-
tion model of Mikolov et al. (2013b), our bilingual
model learns from a set of training translation pairs,
but we demonstrate that the synergy between word-
level and character-level features combined within
a deep neural network based classification frame-
work leads to improved BLI results when evalu-
ated in the medical domain. BLI has a large value
in finding translation pairs in specialized domains
such as the medical domain, where general trans-
lation resources are often insufficient to capture
translations of all domain terminology.

This paper has several contributions:
(C1) On the word level, we show that fram-
ing BLI as a classification problem, that is, using
word embeddings as features for classification
leads to improved results compared to standard
embedding-based BLI approaches (Mikolov et al.,
2013b; Vulić and Korhonen, 2016) which rely on
similarity metrics in a bilingual semantic space.
(C2) On the character level, we find that learning
character-level representations with an RNN
architecture significantly improves results over
standard distance metrics used in previous BLI
research to operationalize orthographic similarity.
(C3) We finally show that it is possible to effec-
tively combine word- and character-level signals
using a deep feed-forward neural network. The
combined model outperforms “single” word-level
and character-level BLI models which rely on only
one set of features.

2 Background

Word-Level Information for BLI Bilingual lex-
icon induction is traditionally based on word-level
features, aiming at quantifying cross-lingual word
similarity on the basis of either (1) context vec-
tors, or (2) automatically induced bilingual word
representations. A typical context-vector approach
(Rapp, 1995; Fung and Yee, 1998; Gaussier et
al., 2004; Laroche and Langlais, 2010; Vulić and
Moens, 2013b; Kontonatsios et al., 2014, inter alia)
constructs context vectors in two languages using
weighted co-occurrence patterns with other words,
and a bilingual seed dictionary is then used to trans-
late the vectors. Second-order BLI approaches
which represent a word by its monolingual seman-
tic similarity with other words were also proposed,
e.g., (Koehn and Knight, 2002; Vulić and Moens,
2013a), as well as models relying on latent topic
models (Vulić et al., 2011; Liu et al., 2013).

Recently, state-of-the-art BLI results were ob-
tained by a suite of bilingual word embedding
(BWE) models. Given source and target language
vocabularies V S and V T , all BWE models learn a
representation of each wordw ∈ V StV T as a real-
valued vector: ~w = [ft1, . . . , ftd], where ftk ∈ R
denotes the value for the k-th cross-lingual fea-
ture for w within a d-dimensional shared bilingual
embedding space. Semantic similarity sim(w, v)
between two words w, v ∈ V S t V T is then com-
puted by applying a similarity function (SF), e.g.
cosine (cos) on their representations in the bilingual
space: sim(w, v) = SF (~w,~v) = cos(~w,~v).

A plethora of variant BWE models were pro-
posed, differing mostly in the strength of bilingual
supervision used in training (e.g., word, sentence,
document alignments, translation pairs) (Zou et al.,
2013; Mikolov et al., 2013b; Hermann and Blun-
som, 2014; Chandar et al., 2014; Søgaard et al.,
2015; Gouws et al., 2015; Coulmance et al., 2015;
Vulić and Moens, 2016, inter alia). Although the
BLI evaluation of the BWE models was typically
performed on Indo-European languages, none of
the works attempted to learn character-level repre-
sentations to enhance the BLI performance.

In this work, we experiment with two BWE mod-
els that have demonstrated a strong BLI perfor-
mance using only a small seed set of word trans-
lation pairs (Mikolov et al., 2013b), or document
alignments (Vulić and Moens, 2016) for bilingual
supervision.

It is also important to note that other word-level

1086



translation evidence was investigated in the litera-
ture. For instance, the model of Irvine and Callison-
Burch (2016) relies on raw word frequencies, tem-
poral word variations, and word burstiness. As the
main focus of this work is investigating the com-
bination of automatically induced word-level and
character-level representations, we do not exploit
the whole space of possible word-level features
and leave this for future work. However, we stress
that our framework enables the inclusion of these
additional word-level signals.

Character-Level Information for BLI For lan-
guage pairs with common roots such as English-
Dutch or English-Spanish, translation pairs often
share orthographic character-level features, and reg-
ularities (e.g., ideal:ideaal, apparition:aparición).
Orthographic translation clues are even more im-
portant in certain domains such as medicine, where
words with the same roots (from Greek and
Latin), and abbreviations are frequently encoun-
tered (e.g., D-dimer:D-dimeer, meiosis:meiose).
When present, such orthographic clues are typically
strong indicators of translation pairs (Haghighi et
al., 2008). This observation was exploited in BLI,
applying simple string distance metrics such as
Longest Common Subsequence Ratio (Melamed,
1995; Koehn and Knight, 2002), or edit distance
(Mann and Yarowsky, 2001; Haghighi et al., 2008).
Irvine and Callison-Burch (2016) showed that these
metrics may be used with languages with different
scripts: they transliterate all words to the Latin
script before calculating normalized edit distance.

BLI as a Classification Task Irvine and
Callison-Burch (2016) demonstrate that BLI can
be observed as a classification problem. They train
a linear classifier to combine similarity scores from
different signals (e.g., temporal word variation, nor-
malized edit distance, word burstiness) using a set
of training translation pairs. The approach out-
performs an unsupervised combination of signals
based on a mean reciprocal rank aggregation, as
well as the matching canonical correlation analysis
algorithm of Haghighi et al. (2008). A drawback
of their classification framework is that translation
signals are processed (i.e., converted to a similarity
score) and weighted independently.

In contrast to their work, we propose to learn
character-level representations instead of using
the simple edit distance signal between candidate
translations. In addition, our model identifies

translations by jointly processing and combining
character-level and word-level translation signals.

3 Methodology

In this paper we frame BLI as a classification prob-
lem as it supports an elegant combination of word-
level and character-level representations. Let V S

and V T denote the sets of all unique source and
target words respectively, and CS and CT denote
the sets of all unique source and target characters.
The goal is to learn a function g : X → Y , where
the input space X consists of all candidate trans-
lation pairs V S × V T and the output space Y is
{−1,+1}. We define g as:

g(wS , wT ) =

{
+1 , if f(wS , wT ) > t
−1 , otherwise

Here, f is a function realized by a neural network
that outputs a classification score between 0 and
1; t is a threshold tuned on a validation set. When
the neural network is confident that wS and wT

are translations, f(wS , wT ) will be close to 1. The
reason for placing a threshold t on the output of f
is twofold. First, it allows balancing between recall
and precision. Second, the threshold naturally ac-
counts for the fact that words might have multiple
translations: if two target language words wT1 and
wT2 both have high scores when paired with w

S ,
both may be considered translations of wS .

Since neural network parameters are trained us-
ing a set of positive translation pairs Dlex, one
way to interpret f is to consider it an automati-
cally trained similarity function. For each positive
training translation pair < wS , wT >, we create
2Ns noise or negative training pairs. These nega-
tive samples are generated by randomly sampling
Ns target language words wTneg,S,i, i = 1, . . . , Ns
from V T and pairing them with the source lan-
guage word wS from the true translation pair
< wS , wT >.2 Similarly, we randomly sample
Ns source language words wSneg,T,i and pair them
with wT to serve as negative samples. We then
train the network by minimizing cross-entropy loss,
expressed by Eq. (1):

2If we accidentally construct a negative pair which occurs
in the set of positive pairs Dlex, we re-sample until we obtain
exactly Ns negative samples.

1087



Lce =
∑

<ws,wt>∈Dlex

(
log(f(wS , wT ))−

Ns∑
i=1

log(f(wSneg,T,i, w
T ))−

Ns∑
i=1

log(f(wS , wTneg,S,i))
)

(1)

We further explain the architecture of the neu-
ral network and the strategy we use to identify
candidate translations during prediction. Four key
components may be distinguished: (1) the input
layer; (2) the character-level encoder; (3) the word-
level encoder; and (4) a feed-forward network that
combines the output representations from the two
encoders into the final classification score.

3.1 Input Layer
The goal is to exploit the knowledge encoded in
both the word and character levels. Therefore, the
raw input representation of a word w ∈ V S of char-
acter length M consists of (1) its one-hot encoding
on the word level, labeled xSw; and (2) a sequence
ofM one-hot encoded vectors xSc0, .., x

S
ci, ..x

S
cM on

the character level, representing the character se-
quence of the word. xSw is thus a |V S |-dimensional
word vector with all zero entries except for the
dimension that corresponds to the position of the
word in the vocabulary. xSci is a |CS |-dimensional
character vector with all zero entries except for the
dimension that corresponds to the position of the
character in the character vocabulary CS .

3.2 Character-Level Encoder
To encode a pair of character sequences
xSc0, .., x

S
ci, ..x

S
cn, x

T
c0, .., x

T
ci, ..x

T
cm we use a two-

layer long short-term memory (LSTM) recurrent
neural network (RNN) (Hochreiter and Schmid-
huber, 1997) as illustrated in Fig. 1. At position
i in the sequence, we feed the concatenation of
the ith character of the source language and target
language word from a training pair to the LSTM
network. The characters are represented by their
one-hot encoding. To deal with the possible differ-
ence in word length, we append special padding
characters at the end of the shorter word (see Fig. 1).
s1i, and s2i denote the states of the first and sec-
ond layer of the LSTM. We found that a two-layer
LSTM performed better than a shallow LSTM. The
output at the final state s2N is the character-level
representation rSTc . We apply dropout regulariza-
tion (Srivastava et al., 2014) with a keep probability
of 0.5 on the output connections of the LSTM (see

Figure 1: An illustration of the character-level
LSTM encoder architecture using the example EN-
NL translation pair <analogous, analoog>.

the dotted lines in Fig. 1). We will further refer to
this architecture as CHAR-LSTMjoint . 3

3.3 Word-Level Encoder
We define the word-level representation of a word
pair < wS , wT > simply as the concatenation of
word embeddings for wS and wT :

rSTw = W
S · xSw ‖ W T · xTw (2)

Here, rSTw is the representation of the word pair,
andWS ,W T are word embedding matrices looked
up using one-hot vectors xSw and x

T
w. The first

variant of the architecture assumes that WS and
W T are obtained in advance using any state-of-the-
art word embedding model, e.g., (Mikolov et al.,
2013b; Vulić and Moens, 2016). They are then kept
fixed when minimizing the loss from Eq. (1). In
Sect. 5.3, however, we investigate another variant
architecture where word embeddings are optimized
jointly with their unsupervised context-prediction
objective and the cross-entropy loss from Eq. (1).

To test the generality of our approach, we ex-
periment with two well-known embedding mod-
els: (1) the model from Mikolov et al. (2013b),
which trains monolingual embeddings using skip-
gram with negative sampling (SGNS) (Mikolov
et al., 2013a); and (2) the model of Vulić and
Moens (2016) which learns word-level bilingual
embeddings from document-aligned comparable

3A possible modification to the architecture would be to
swap the (unidirectional) LSTM for a bidirectional LSTM. In
preliminary experiments on the development set this did not
yield improvements over the proposed architecture, we thus
do not discuss it further.

1088



data (BWESG). For both models, the top layers of
our proposed classification network should learn
to relate the word-level features stemming from
these word embeddings using a set of annotated
translation pairs.

3.4 Combination: Feed-Forward Network
To combine representations on word- and character-
level we use a fully connected feed-forward neural
network rh on top of the concatenation of rSTw and
rSTc which is fed as the input to the network:

rh0 = r
ST
w ‖ rSTc (3)

rhi = σ(Whi · rhi−1 + bhi) (4)
score = σ(Wo · rhH + bo) (5)

σ denotes the sigmoid function and H denotes
the number of layers between the representation
layer and the output layer. In the simplest architec-
ture, H is set to 0 and the word-pair representation
rh0 is directly connected to the output layer (see
Fig. 2A). In this setting each dimension from the
concatenated representation is weighted indepen-
dently. This architecture induces undesirable pat-
terns in the combined activation of features, and
consequently does not learn generalizable relation-
ships between source and target language inputs.
On the word level, for instance, it is obvious that
the classifier needs to combine the embeddings of
the source and target word to make an informed
decision and not merely calculate a weighted sum
of them. Therefore, we opt for an architecture
with hidden layers instead (see Fig. 2B). Unless
stated otherwise, we use two hidden layers, while
in Section 5.3 we further analyze the influence of
parameter H .

3.5 Candidate Generation
To identify which word pairs are translations, one
could enumerate all translation pairs and feed them
to the classifier g. The time complexity of this
brute-force approach is O(|V S | × |V T |) times the
complexity of g. For large vocabularies this can
be a prohibitively expensive procedure. Therefore,
we have resorted to a heuristic which uses a noisy
classifier: it generates 2Nc << |V T | translation
candidates for each source language word wS as
follows. It generates (1) theNc target words closest
to wS measured by edit distance as translations,
and (2) Nc target words measured closest to wS

based on the cosine distance between their word-
level embeddings in a bilingual space induced by
the embedding model of Vulić and Moens (2016).

Figure 2: Illustrations of the classification com-
ponent with feed-forward networks of different
depths. A: H = 0. B: H = 2 (our model). All
layers are fully connected.

4 Experimental Setup

Data One of the main advantages of automatic
BLI systems is their portability to different lan-
guages and domains. However, current standard
BLI evaluation protocols still rely on general-
domain data and test sets (Mikolov et al., 2013a;
Gouws et al., 2015; Lazaridou et al., 2015; Vulić
and Moens, 2016, inter alia). To tackle the lack of
quality domain-specific data for training and eval-
uation of BLI models, we have constructed a new
English-Dutch (EN-NL) text corpus in the medical
domain. The corpus contains topic-aligned doc-
uments (i.e., for a given document in the source
language, we provide a link to a document in
the target language that has comparable content).
The domain-specific document collection was con-
structed from the English-Dutch aligned Wikipedia
corpus available online4, where we retain only doc-
ument pairs with at least 40% of their Wikipedia
categories classified as medical.5

The simple selection heuristic ensures that the
main topic of the corpus lies in the medical domain,
yielding a final collection of 1198 training docu-
ment pairs. Following a standard practice (Koehn
and Knight, 2002; Haghighi et al., 2008; Prochas-
son and Fung, 2011), the corpus was then tokenized
and lowercased, and words occurring less than five
times were filtered out.

Translation Pairs: Training, Development, Test
We construct semi-automatically a set of EN-NL
translation pairs by translating all words that occur

4http://linguatools.org/tools/corpora/
5https://www.dropbox.com/s/hlewabraplb9p5n/medicine en.txt?dl=0

1089



in our pre-processed corpus. This process relied
on Google Translate and manual corrections done
by fluent EN and NL speakers. Translating the
EN vocabulary yields 13,856 translation pairs in
total, while the reverse process of translating the
NL vocabulary yields 6,537 translation pairs. Tak-
ing the union of both lexicons results in 17,567
unique translation pairs, where 7,368 translation
pairs (41.94%) have both the source and target lan-
guage word occurring in our corpus.6

We perform a 80/20 random split of the obtained
subset of 7,368 translation pairs to construct a train-
ing and test set respectively. We make another
80/20 random split of the training set into training
and validation data. We note that 20.31% of the
source words have more than one translation.

Word-Level Embeddings Skip-gram word em-
beddings with negative sampling (SGNS) (Mikolov
et al., 2013b) are obtained with the word2vec
toolkit with the subsampling threshold set to 10e-4
and window size to 5. BWESG embeddings (Vulić
and Moens, 2016) are learned by merging topic-
aligned documents with length-ratio shuffling, and
then by training a SGNS model over the merged
documents with the subsampling threshold set to
10e-4 and the window size set to 100. The dimen-
sionality of all word-level embeddings is d = 50.

Classifier The model is implemented in Python
using Tensorflow (Abadi et al., 2015). For train-
ing we use the Adam optimizer with default values
(Kingma and Ba, 2015) and mini-batches of 10 ex-
amples. We used 2Ns = 10 negative samples and
we generated 2Nc = 10 candidate translation pairs
during prediction. The classification threshold t
is tuned measuring F1 scores on the validation set
using a grid search in the interval [0.1, 1] in steps
of 0.1.

Evaluation Metric The metric we use is F1,
the harmonic mean between recall and precision.
While prior work typically proposes only one trans-
lation per source word and reports Accuracy@1
scores accordingly, here we also account for the
fact that words can have multiple translations. We
evaluate all models using two different modes: (1)
top mode, as in prior work, identifies only one
translation per source word (i.e., it is the target
word with the highest classification score), (2) all

6Since we use a comparable corpus in our experiments,
not all translations of the English vocabulary words occur in
the Dutch part of the corpus and vice versa.

mode identifies as translation pairs all pairs for
which the classification score exceeds threshold t.

5 Results and Discussion

A Roadmap to Experiments We first study au-
tomatically extracted word-level and character-
level representations and their contribution to BLI
in isolation (Sect. 5.1 and Sect. 5.2). It effectively
means that for such single-component experiments
Eq. 3 is simplified to rho = r

ST
w (word-level) and

rho = r
ST
c (character-level). Following that, we

investigate different ways of combining word-level
and character-level representations into improved
BLI models (Sect. 5.3). There, we conduct addi-
tional analyses which investigate the influence of
(i) the number of hidden layers of the classifier, (ii)
training data size, and (iii) other variant architec-
tures (i.e., training word-level and character-level
representations separately vs. training character-
level representations jointly with the classifier vs.
training all components jointly).

5.1 Experiment I: Word Level

The goal of this experiment is twofold. First, we
want to analyze the potential usefulness of standard
word embeddings in a classification framework.
Second, we want to compare the BLI approach
based on classification to standard BLI approaches
that simply compute similarities in a shared bilin-
gual space. All classification NNs are trained for
150 epochs. The results are shown in Tab. 1.

The top two rows are BLI baselines that apply
cosine similarity (SIM) in a bilingual embedding
space to score translation pairs. For SGNS-based
embeddings, we follow (Mikolov et al., 2013b) and
align two monolingual embedding spaces by learn-
ing a linear mapping using the same set of train-
ing translation pairs as used by our classification
framework. The BWESG-based embeddings do
not exploit available translation pairs, but rely on
document alignments during training. The bottom
two rows of Tab. 1 use the classification framework
we proposed (CLASS).

As the main finding, we see that the classification
framework using word-level features outperforms
the standard similarity-based framework. BWESG
in the similarity-based approach works best in top-
mode, i.e., it is good at finding a single translation
for a source word.7 The classification-based ap-

7Surprisingly, the similarity-based approach with SGNS
embeddings (Mikolov et al., 2013b) reports extremely low

1090



development test
Representation F1 F1 F1 F1

(top) (all) (top) (all)
S

IM
BWESG 15.71 11.56 13.43 9.84
SGNS 0.43 0.40 0.56 0.37

C
L

A
S

S

BWESG 11.51 16.02 12.12 15.09
SGNS 17.67 20.67 17.25 19.79

Table 1: Comparison of different BLI systems
which use only word-level information.

proach is consistently better in translating words
with multiple translations as evident from higher
all-mode scores in Tab. 1.

When comparing BWESG and SGNS embed-
dings within the classification framework, we ob-
serve that we obtain significantly better results with
SGNS embeddings. A plausible explanation is that
SGNS embeddings better capture properties related
to the local context of a word like syntax informa-
tion since they are trained with much smaller con-
text windows.8 We also note that SGNS also has a
practical advantage over BWESG concerning the
data requirements as the former does not assume
document-level alignments.

5.2 Experiment II: Character Level
Here, we compare the representation learned by the
character-level encoder with manually extracted
features that are commonly used. The following
character-level methods are evaluated:

• CHAR-LSTMjoint , the output of the architec-
ture described in Sect. 3.2
• EDnorm, the edit distance between the word

pair normalized by the average of the number
of characters of ws and wt as used in prior
work (Irvine and Callison-Burch, 2013; Irvine
and Callison-Burch, 2016).
• log(EDrank), the logarithm of the rank of wt

in a list sorted by the edit distance w.r.t. ws.
This means that the target word that is nearest
in edit distance w.r.t. ws will have a feature
value of log(1) = 0, words that are more
distant from ws will get higher feature values.

results. A possible explanation for such results is that the
model is not able to learn a decent linear mapping between
two monolingual embedding spaces induced from a small
monolingual corpus relying on low-frequency word translation
pairs (Vulić and Korhonen, 2016). We verified the influence of
low-frequency word pairs by gradually decreasing the amount
of pairs in the seed lexicon, keeping only the most frequent
word pairs: e.g., limiting the seed lexicon to the 1000 most
frequent word pairs, we obtain better results, which are still
well below other models in our comparison.

8Large window sizes are inherent to the BWESG model.

development test
Representation F1 F1 F1 F1

(top) (all) (top) (all)
EDnorm 30.35 31.36 30.89 28.43
log(EDrank) 29.01 26.14 29.48 22.25
EDnorm+ log(EDrank) 31.32 30.32 32.27 30.04
CHAR-LSTMjoint 33.93 35.26 33.89 34.93

Table 2: Comparison of character-level BLI meth-
ods from prior work with automatically learned
character-level representations.

Target words with the same edit distance score
are assigned the same rank.
• EDnorm + log(EDrank), the concatenation of

the EDnorm and log(EDrank) features. The
combined model results in a stronger baseline.

For the ED-based features we use the same classifi-
cation framework. However, we use hidden layers
only for EDnorm + log(EDrank) as hidden lay-
ers do not make the the one-dimensional feature
models (EDnorm and log(EDrank)) any more ex-
pressive. The ED-based models were additionally
tuned by performing a grid search to find the op-
timal values for the number of negative samples
2Ns and the number of generated translation can-
didates 2Nc. Both 2Ns and 2Nc are chosen from
the interval [10, 100] in steps of 10 based on the
performance on the validation set. The ED-based
models converge quickly and were only trained for
25 epochs. For the CHAR-LSTMjoint representa-
tion, we use 512 memory cells per layer, we train
the model for 300 epochs, and the parameters 2Ns
or 2Nc were set to the default values (10) without
any additional fine-tuning.

The results are displayed in Tab. 2. The overall
performance is high compared to the results of the
word-level models. The importance of character-
level information in this data set is explained by
the large amount of medical terminology and ex-
pert abbreviations (e.g., amynoglicosides, aphasics,
nystagmus, EPO, EMDR), which due to its ety-
mological processes, typically contain recurring
morphological patterns across languages. It also
further supports the need of models that are able
to exploit and combine word-level and character-
level features. Results also indicate that learning
character-level representations from the data is ben-
eficial as the CHAR-LSTMjoint model significantly
outperforms the baselines used in prior work. The
CHAR-LSTMjoint shows consistent improvements
over baselines across evaluation modes, while the
largest gains are again in the all-mode.

1091



(a) (b)

Figure 3: (a) The influence of the number of layers H between the representations and the output layer on
the BLI performance; (b) The influence of the training set size (the number of training pairs).

5.3 Experiment III: Combined Model

Encouraged by the excellent results of single-
component word-level and character-level BLI
models in the classification framework, we also
evaluate the combined model. As word-level repre-
sentations we choose SGNS embeddings and the
LSTM consists of 128 in memory cells in each
layer in all further experiments.9 We compare three
alternative strategies to learn the parameters of the
neural network used for classification:
(1) SEPARATE: Word-level and character-level rep-
resentations are trained separately. Word-level em-
beddings and LSTM weights for character-level
representations are kept fixed when training the
hidden and output layers are simply appended on
top of the fixed representations.
(2) CHAR JOINT: Word-level embeddings are
trained separately, while character-level represen-
tations are trained together with the hidden layers
and output layer. This can encourage the network
to learn new information on the character-level, dif-
ferent from word-level representations.
(3) ALL JOINT: Motivated by recent work (Ferreira
et al., 2016) which proposed a joint formulation for
learning task-specific BWEs in a document classi-
fication task, all components in our BLI framework
are now trained jointly. The joint training objective
now consists of two components: the context pre-
diction objective (i.e., SGNS-style objective) and
the translation objective described by Eq. (1).

The results are shown in Tab. 3. The CHAR
JOINT strategy significantly improves on the best
single word-level/character-level models. SEPA-
RATE and ALL JOINT, however, do not improve on
the CHAR-LSTMjoint model. CHAR JOINT allows
the character-level representations to learn features
that are complementary to word-level information,

9We found that in this setting, where we use both word-
level and character-level representations, it is beneficial to use
a smaller LSTM than in the character-level only setting.

development test
training F1 F1 F1 F1

(top) (all) (top) (all)
SEPARATE 35.35 35.09 33.60 33.17
CHAR JOINT 36.78 35.85 37.73 36.61
ALL JOINT 33.02 33.75 32.86 33.31

Table 3: Results of the combined model (word-
level SGNS plus CHAR-LSTMjoint ). Three differ-
ent strategies of information fusion are compared.

which seems crucial for an optimal combination
of both representations. Learning word-level em-
beddings jointly with the rest of the network is not
beneficial. This can be explained by the fact that
the translation objective deteriorates the generaliza-
tion capabilities of word embeddings.

Another crucial parameter is the number of hid-
den layers H . Fig. 3(a) shows the influence of
H on F1 in top mode. BLI performance increases
with H . As expected, we see the largest improve-
ment from H = 0 to H = 1. With H = 0 the
network is not able to model dependencies between
features. More hidden layers allow the network to
learn more complex, abstract relations between fea-
tures, resulting in an improved BLI performance.

Influence of Training Set Size In practice, for
various language pairs and domains, one may have
at disposal only a limited number of readily avail-
able translation pairs. Fig. 3(b) shows the influence
of the size of the training set on performance: while
it is obvious that more training data leads to a better
BLI performance, the results suggest that a com-
petitive BLI performance may be achieved with
smaller training sets (e.g., the model reaches up to
77% of the best performance with only 1K training
pairs, and > 80% with 2K pairs).

6 Conclusion and Future work

We have introduced a neural network based classifi-
cation architecture for the task of bilingual lexicon

1092



induction (BLI). We have designed, implemented
and evaluated a character-level encoder in the form
of a two-layer long short-term memory network
and have experimented with different word-level
representations. The resulting encodings were used
in a deep feed-forward neural network. The results
show that especially this combination of character-
and word-level knowledge is very successful in the
BLI task when evaluated in the medical domain.

Our novel method for learning character-level
representations will raise the interest in studying
character-level encoders which could be tested in
different tasks where string comparisons are impor-
tant. In future work, we intend to further propose
and compare with alternative character-level encod-
ing architectures, and combine additional useful
BLI signals in our BLI classification framework.

Acknowledgments

This research has been carried out in the framework
of the Smart Computer-Aided Translation Environ-
ment (SCATE) project (IWT-SBO 130041). IV is
supported by ERC Consolidator Grant LEXICAL
(no 648909). The authors are grateful to the anony-
mous reviewers for their helpful suggestions.

References
Martı́n Abadi, Ashish Agarwal, Paul Barham, Eugene

Brevdo, Zhifeng Chen, Craig Citro, Greg S. Cor-
rado, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Ian Goodfellow, Andrew Harp,
Geoffrey Irving, Michael Isard, Yangqing Jia, Rafal
Jozefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh
Levenberg, Dan Mané, Rajat Monga, Sherry Moore,
Derek Murray, Chris Olah, Mike Schuster, Jonathon
Shlens, Benoit Steiner, Ilya Sutskever, Kunal Talwar,
Paul Tucker, Vincent Vanhoucke, Vijay Vasudevan,
Fernanda Viégas, Oriol Vinyals, Pete Warden, Mar-
tin Wattenberg, Martin Wicke, Yuan Yu, and Xiao-
qiang Zheng. 2015. TensorFlow: Large-scale ma-
chine learning on heterogeneous systems.

Sarath A.P. Chandar, Stanislas Lauly, Hugo Larochelle,
Mitesh M. Khapra, Balaraman Ravindran, Vikas C.
Raykar, and Amrita Saha. 2014. An autoencoder
approach to learning bilingual word representations.
In Proceedings of NIPS, pages 1853–1861.

Jocelyn Coulmance, Jean-Marc Marty, Guillaume Wen-
zek, and Amine Benhalloum. 2015. Trans-gram,
fast cross-lingual word embeddings. In Proceedings
of EMNLP, pages 1109–1113.

Long Duong, Hiroshi Kanayama, Tengfei Ma, Steven
Bird, and Trevor Cohn. 2016. Learning crosslingual
word embeddings without bilingual corpora. In Pro-
ceedings of EMNLP, pages 1285–1295.

Greg Durrett, Adam Pauls, and Dan Klein. 2012. Syn-
tactic transfer using a bilingual lexicon. In Proceed-
ings of EMNLP, pages 1–11.

Manaal Faruqui and Chris Dyer. 2014. Improving
vector space word representations using multilingual
correlation. In Proceedings of EACL, pages 462–
471.

Daniel C. Ferreira, André F. T. Martins, and Mariana
S. C. Almeida. 2016. Jointly learning to embed and
predict with multiple languages. In Proceedings of
ACL, pages 2019–2028.

Pascale Fung and Lo Yuen Yee. 1998. An IR approach
for translating new words from nonparallel, compa-
rable texts. In Proceedings of ACL, pages 414–420.

Éric Gaussier, Jean-Michel Renders, Irina Matveeva,
Cyril Goutte, and Hervé Déjean. 2004. A geometric
view on bilingual lexicon extraction from compara-
ble corpora. In Proceedings of ACL, pages 526–533.

Stephan Gouws, Yoshua Bengio, and Greg Corrado.
2015. BilBOWA: Fast bilingual distributed repre-
sentations without word alignments. In Proceedings
of ICML, pages 748–756.

Aria Haghighi, Percy Liang, Taylor Berg-Kirkpatrick,
and Dan Klein. 2008. Learning bilingual lexicons
from monolingual corpora. In Proceedings of ACL,
pages 771–779.

Karl Moritz Hermann and Phil Blunsom. 2014. Multi-
lingual models for compositional distributed seman-
tics. In Proceedings of ACL, pages 58–68.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural Computation,
9(8):1735–1780.

Ann Irvine and Chris Callison-Burch. 2013. Su-
pervised bilingual lexicon induction with multiple
monolingual signals. In Proceedings of NAACL-
HLT, pages 518–523.

Ann Irvine and Chris Callison-Burch. 2016. A com-
prehensive analysis of bilingual lexicon induction.
Computational Linguistics.

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In Proceedings
of ICLR.

Philipp Koehn and Kevin Knight. 2002. Learning a
translation lexicon from monolingual corpora. In
Proceedings of the ACL Workshop on Unsupervised
Lexical Acquisition (ULA), pages 9–16.

Georgios Kontonatsios, Ioannis Korkontzelos, Jun’ichi
Tsujii, and Sophia Ananiadou. 2014. Combining
string and context similarity for bilingual term align-
ment from comparable corpora. In Proceedings of
EMNLP, pages 1701–1712.

1093



Audrey Laroche and Philippe Langlais. 2010. Re-
visiting context-based projection methods for term-
translation spotting in comparable corpora. In Pro-
ceedings of COLING, pages 617–625.

Victor Lavrenko, Martin Choquette, and W. Bruce
Croft. 2002. Cross-lingual relevance models. In
Proceedings of SIGIR, pages 175–182.

Angeliki Lazaridou, Georgiana Dinu, and Marco Ba-
roni. 2015. Hubness and pollution: Delving into
cross-space mapping for zero-shot learning. In Pro-
ceedings of ACL, pages 270–280.

Gina-Anne Levow, Douglas W. Oard, and Philip
Resnik. 2005. Dictionary-based techniques for
cross-language information retrieval. Information
Processing and Management, 41(3):523–547.

Xiaodong Liu, Kevin Duh, and Yuji Matsumoto. 2013.
Topic models+ word alignment= A flexible frame-
work for extracting bilingual dictionary from compa-
rable corpus. In Proceedings of CoNLL, pages 212–
221.

Gideon S. Mann and David Yarowsky. 2001. Mul-
tipath translation lexicon induction via bridge lan-
guages. In Proceedings of NAACL, pages 1–8.

I. Dan Melamed. 1995. Automatic evaluation and uni-
form filter cascades for inducing n-best translation
lexicons. In Proceedings of Third Workshop on Very
Large Corpora.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey
Dean. 2013a. Efficient estimation of word represen-
tations in vector space. In Workshop Proceedings of
ICLR.

Tomas Mikolov, Quoc V. Le, and Ilya Sutskever. 2013b.
Exploiting similarities among languages for ma-
chine translation. In CoRR, abs/1309.4168.

Bhaskar Mitra, Eric T. Nalisnick, Nick Craswell,
and Rich Caruana. 2016. A dual embed-
ding space model for document ranking. CoRR,
abs/1602.01137.

Gonzalo Navarro. 2001. A guided tour to approx-
imate string matching. ACM Computing Surveys,
33(1):31–88.

Franz Josef Och and Hermann Ney. 2003. A system-
atic comparison of various statistical alignment mod-
els. Computational Linguistics, 29(1):19–51.

Sebastian Padó and Mirella Lapata. 2009. Cross-
lingual annotation projection for semantic roles.
Journal of Artificial Intelligence Research, 36:307–
340.

Emmanuel Prochasson and Pascale Fung. 2011. Rare
word translation extraction from aligned comparable
documents. In Proceedings of ACL, pages 1327–
1335.

Reinhard Rapp. 1995. Identifying word translations
in non-parallel texts. In Proceedings of ACL, pages
320–322.

Anders Søgaard, Željko Agić, Héctor Martı́nez Alonso,
Barbara Plank, Bernd Bohnet, and Anders Jo-
hannsen. 2015. Inverted indexing for cross-lingual
NLP. In Proceedings of ACL, pages 1713–1722.

Nitish Srivastava, Geoffrey E. Hinton, Alex
Krizhevsky, Ilya Sutskever, and Ruslan Salakhut-
dinov. 2014. Dropout: A simple way to prevent
neural networks from overfitting. Journal of
Machine Learning Research, 15(1):1929–1958.

Oscar Täckström, Dipanjan Das, Slav Petrov, Ryan Mc-
Donald, and Joakim Nivre. 2013. Token and type
constraints for cross-lingual part-of-speech tagging.
Transactions of ACL, 1:1–12.

Akihiro Tamura, Taro Watanabe, and Eiichiro Sumita.
2012. Bilingual lexicon extraction from comparable
corpora using label propagation. In Proceedings of
EMNLP, pages 24–36.

Chen-Tse Tsai and Dan Roth. 2016. Cross-lingual
wikification using multilingual embeddings. In Pro-
ceedings of NAACL-HLT.

Shyam Upadhyay, Manaal Faruqui, Chris Dyer, and
Dan Roth. 2016. Cross-lingual models of word em-
beddings: An empirical comparison. In Proceedings
of ACL, pages 1661–1670.

Lonneke van der Plas, Paola Merlo, and James Hen-
derson. 2011. Scaling up automatic cross-lingual
semantic role annotation. In Proceedings of ACL,
pages 299–304.

Ivan Vulić and Anna Korhonen. 2016. On the role of
seed lexicons in learning bilingual word embeddings.
In Proceedings of ACL, pages 247–257.

Ivan Vulić and Marie-Francine Moens. 2013a. Cross-
lingual semantic similarity of words as the similarity
of their semantic word responses. In Proceedings of
NAACL-HLT, pages 106–116.

Ivan Vulić and Marie-Francine Moens. 2013b. A study
on bootstrapping bilingual vector spaces from non-
parallel data (and nothing else). In Proceedings of
EMNLP, pages 1613–1624.

Ivan Vulić and Marie-Francine Moens. 2015. Monolin-
gual and cross-lingual information retrieval models
based on (bilingual) word embeddings. In Proceed-
ings of SIGIR, pages 363–372.

Ivan Vulić and Marie-Francine Moens. 2016.
Bilingual distributed word representations from
document-aligned comparable data. Journal of Ar-
tificial Intelligence Research, 55:953–994.

Ivan Vulić, Wim De Smet, and Marie-Francine Moens.
2011. Identifying word translations from compara-
ble corpora using latent topic models. In Proceed-
ings of ACL, pages 479–484.

1094



David Yarowsky and Grace Ngai. 2001. Inducing mul-
tilingual POS taggers and NP bracketers via robust
projection across aligned corpora. In Proceedings of
NAACL, pages 200–207.

Yuan Zhang, David Gaddy, Regina Barzilay, and
Tommi Jaakkola. 2016. Ten pairs to tag - Mul-
tilingual POS tagging via coarse mapping between
embeddings. In Proceedings of NAACL-HLT, pages
1307–1317.

Hai Zhao, Yan Song, Chunyu Kit, and Guodong Zhou.
2009. Cross language dependency parsing using a
bilingual lexicon. In Proceedings of ACL, pages 55–
63.

Will Y. Zou, Richard Socher, Daniel Cer, and Christo-
pher D. Manning. 2013. Bilingual word embed-
dings for phrase-based machine translation. In Pro-
ceedings of EMNLP, pages 1393–1398.

1095


