



















































DoubleTransfer at MEDIQA 2019: Multi-Source Transfer Learning for Natural Language Understanding in the Medical Domain


Proceedings of the BioNLP 2019 workshop, pages 399–405
Florence, Italy, August 1, 2019. c©2019 Association for Computational Linguistics

399

DoubleTransfer at MEDIQA 2019:
Multi-Source Transfer Learning for Natural Language Understanding

in the Medical Domain

Yichong Xu1, Xiaodong Liu2, Chunyuan Li2, Hoifung Poon2 and Jianfeng Gao2
1 Carnegie Mellon University

2 Microsoft Research
yichongx@cs.cmu.edu

{xiaodl, Chunyuan.Li, hoifung, jfgao}@microsoft.com

Abstract

This paper describes our competing system to
enter the MEDIQA-2019 competition. We use
a multi-source transfer learning approach to
transfer the knowledge from MT-DNN (Liu
et al., 2019b) and SciBERT (Beltagy et al.,
2019) to natural language understanding tasks
in the medical domain. For transfer learn-
ing fine-tuning, we use multi-task learning on
NLI, RQE and QA tasks on general and medi-
cal domains to improve performance. The pro-
posed methods are proved effective for natu-
ral language understanding in the medical do-
main, and we rank the first place on the QA
task.

1 Background

The MEDIQA 2019 shared tasks (Ben Abacha
et al., 2019) aim to improve the current state-of-
the-art systems for textual inference, question en-
tailment and question answering in the medical
domain. This ACL-BioNLP 2019 shared task is
motivated by a need to develop relevant methods,
techniques and gold standards for inference and
entailment in the medical domain and their ap-
plication to improve domain-specific information
retrieval and question answering systems. The
shared task consists of three parts: i) natural lan-
guage inference (NLI) on MedNLI, ii) Recogniz-
ing Question Entailment (RQE), and iii) Question
Answering (QA).

Recent advancement in NLP such as BERT
(Devlin et al., 2018) has facilitated great improve-
ments in many Natural Language Understanding
(NLU) tasks (Liu et al., 2019b). BERT first trains
a language model on an unsupervised large-scale
corpus, and then the pretrained model is fine-tuned
to adapt to downstream NLU tasks. This fine-
tuning process can be seen as a form of transfer
learning, where BERT learns knowledge from the

large-scale corpus and transfer it to downstream
tasks.

We investigate NLU in the medical (scientific)
domain. From BERT, we need to adapt to i) The
change from general domain corpus to scientific
language; ii) The change from low-level language
model tasks to complex NLU tasks. Although
there is limited training data in NLU in the medi-
cal domain, we fortunately have pre-trained mod-
els from two intermediate steps:

• General NLU embeddings: We use MT-DNN
(Liu et al., 2019b) trained on GLUE bench-
mark(Wang et al., 2019). MT-DNN is trained
on 10 tasks including NLI, question equiv-
alence, and machine comprehension. These
tasks correspond well to the target MEDIQA
tasks but in different domains.

• Scientific embeddings: We use SciBERT
(Beltagy et al., 2019), which is a BERT
model, but trained on SemanticScholar sci-
entific papers. Although SciBERT obtained
state-of-the-art results on several single-
sentence tasks, it lacks knowledge from other
NLU tasks such as GLUE.

In this paper, we investigate different methods
to combine and transfer the knowledge from the
two different sources and illustrate our results on
the MEDIQA shared task. We name our method
as DoubleTransfer, since it transfers knowledge
from two different sources. Our method is based
on fine-tuning both MT-DNN and SciBERT using
multi-task learning, which has demonstrated the
efficiency of knowledge transformation (Caruana,
1997; Liu et al., 2015; Xu et al., 2018; Liu et al.,
2019b), and integrating models from both domains
with ensembles.
Related Works. Transfer learning has been
widely used in training models in the medical do-



400

Algorithm 1 Multi-task Fine-tuning with External Datasets
Require: In-domain datasets D1, ...,DK1 , External domain datasets DK1+1, ...,DK2 , max epoch, mix-

ture ratio α
1: Initialize the modelM
2: for epoch= 1, 2, ..., max epoch do
3: Divide each dataset Dk into Nk mini-batches Dk = {bk1, ..., bkNk}, 1 ≤ k ≤ K2
4: S ← D1 ∪ D2 ∪ · · · ∪ DK1
5: N ← N1 +N2 + · · ·+NK1
6: Randomly pick bαNc mini-batches from ⋃K2k=K1 Dk and add to S
7: Assign mini-batches in S in a random order to obtain a sequence B = (b1, ..., bL), where L =
N + bαNc

8: for each mini-batch b ∈ B do
9: Perform gradient update onM with loss l(b) = ∑(s1,s2)∈b l(s1, s2)

10: end for
11: Evaluate development set performance on D1, ...,DK1
12: end for
Ensure: Model with best evaluation performance

main. For example, Romanov and Shivade (2018)
leveraged the knowledge learned from SNLI to
MedNLI; a transfer from general domain NLI
to medical domain NLI. They also employed
word embeddings trained on MIMIC-III medical
notes, which can be seen as a language model in
the scientific domain. SciBERT (Beltagy et al.,
2019) studies transferring knowledge from SciB-
ERT pretrained model to single-sentence classifi-
cation tasks. Our problem is unique because of
the prohibitive cost to train BERT: Either BERT or
SciBERT requires a very long time to train, so we
only explore how to combine the existing embed-
dings from SciBERT or MT-DNN. Transfer learn-
ing is also widely used in other tasks of NLP, such
as machine translation (Bahdanau et al., 2014) and
machine reading comprehension (Xu et al., 2018).

2 Methods

We propose a multi-task learning method for the
medical domain data. It employs datasets/tasks
from both medical domain and external domains,
and leverage the pre-trained model such as MT-
DNN and SciBERT for fine-tuning. An overview
of the proposed method is illustrated in Figure 1.
To further improve the performance, we propose
to ensemble models trained from different initial-
ization in the evaluation stage. Below we detail
our methods for fine-tuning and ensembles.

2.1 Fine-tuning details

Algorithm. We fine-tune the two types of pre-
trained models on all the three tasks using multi-
task learning. As suggested by MEDIQA pa-
per, we also fine-tune our model on MedQuAD
(Abacha and Demner-Fushman, 2019), a med-
ical QA dataset. We will provide details for
fine-tuning on these datasets in Section 2.3. We
additionally regularize the model by also train-
ing on MNLI (Williams et al., 2018). To pre-
vent the negative transfer from MNLI, we put
a larger weight on MEDIQA data by sampling
MNLI data with less probability. Our algorithm
is presented in Algorithm 1 and illustrated as Fig-
ure 1, which is a mixture ratio method for multi-
task learning inspired by Xu et al. (2018). We
start with in-domain datasets D1, ...DK1 (i.e., the
MEDIQA tasks, K1 = 3) and external datasets
DK1+1, ...,DK2 (in this case MNLI). We cast all
the training samples as sentence pairs (s1, s2) ∈
Dk, k = 1, 2, ...,K2. In each epoch of training, we
use all mini-batches from in-domain data, while
only a small proportion (controlled by α ) of mini-
batches from external datasets are used to train the
model. In our experiments, the mixture ratio α
is set to 0.5. We use MedNLI, RQE, QA, and
MedQuAD in medical domain as in-domain data
and MNLI as external data. For MedNLI, we ad-
ditionally find that using MedNLI as in-domain
data and RQE, QA, MedQuAD as external data
can also help boost performance. We use models
trained using both setups of external data for en-



401

Dk
<latexit sha1_base64="nIWvIpXPUYnZ1CkSaNqDEtL1dAU=">AAAB9HicbVDLSgMxFL1TX7W+qi7dBIvgqsyIoMuiLlxWsA9oh3InTdvQTGZMMoUy9DvcuFDErR/jzr8x085CWw8EDufcyz05QSy4Nq777RTW1jc2t4rbpZ3dvf2D8uFRU0eJoqxBIxGpdoCaCS5Zw3AjWDtWDMNAsFYwvs381oQpzSP5aKYx80McSj7gFI2V/G6IZkRRpHez3rhXrrhVdw6ySrycVCBHvVf+6vYjmoRMGipQ647nxsZPURlOBZuVuolmMdIxDlnHUokh0346Dz0jZ1bpk0Gk7JOGzNXfGymGWk/DwE5mIfWyl4n/eZ3EDK79lMs4MUzSxaFBIoiJSNYA6XPFqBFTS5AqbrMSOkKF1NieSrYEb/nLq6R5UfXcqvdwWand5HUU4QRO4Rw8uIIa3EMdGkDhCZ7hFd6cifPivDsfi9GCk+8cwx84nz/6SZI4</latexit><latexit sha1_base64="nIWvIpXPUYnZ1CkSaNqDEtL1dAU=">AAAB9HicbVDLSgMxFL1TX7W+qi7dBIvgqsyIoMuiLlxWsA9oh3InTdvQTGZMMoUy9DvcuFDErR/jzr8x085CWw8EDufcyz05QSy4Nq777RTW1jc2t4rbpZ3dvf2D8uFRU0eJoqxBIxGpdoCaCS5Zw3AjWDtWDMNAsFYwvs381oQpzSP5aKYx80McSj7gFI2V/G6IZkRRpHez3rhXrrhVdw6ySrycVCBHvVf+6vYjmoRMGipQ647nxsZPURlOBZuVuolmMdIxDlnHUokh0346Dz0jZ1bpk0Gk7JOGzNXfGymGWk/DwE5mIfWyl4n/eZ3EDK79lMs4MUzSxaFBIoiJSNYA6XPFqBFTS5AqbrMSOkKF1NieSrYEb/nLq6R5UfXcqvdwWand5HUU4QRO4Rw8uIIa3EMdGkDhCZ7hFd6cifPivDsfi9GCk+8cwx84nz/6SZI4</latexit><latexit sha1_base64="nIWvIpXPUYnZ1CkSaNqDEtL1dAU=">AAAB9HicbVDLSgMxFL1TX7W+qi7dBIvgqsyIoMuiLlxWsA9oh3InTdvQTGZMMoUy9DvcuFDErR/jzr8x085CWw8EDufcyz05QSy4Nq777RTW1jc2t4rbpZ3dvf2D8uFRU0eJoqxBIxGpdoCaCS5Zw3AjWDtWDMNAsFYwvs381oQpzSP5aKYx80McSj7gFI2V/G6IZkRRpHez3rhXrrhVdw6ySrycVCBHvVf+6vYjmoRMGipQ647nxsZPURlOBZuVuolmMdIxDlnHUokh0346Dz0jZ1bpk0Gk7JOGzNXfGymGWk/DwE5mIfWyl4n/eZ3EDK79lMs4MUzSxaFBIoiJSNYA6XPFqBFTS5AqbrMSOkKF1NieSrYEb/nLq6R5UfXcqvdwWand5HUU4QRO4Rw8uIIa3EMdGkDhCZ7hFd6cifPivDsfi9GCk+8cwx84nz/6SZI4</latexit><latexit sha1_base64="nIWvIpXPUYnZ1CkSaNqDEtL1dAU=">AAAB9HicbVDLSgMxFL1TX7W+qi7dBIvgqsyIoMuiLlxWsA9oh3InTdvQTGZMMoUy9DvcuFDErR/jzr8x085CWw8EDufcyz05QSy4Nq777RTW1jc2t4rbpZ3dvf2D8uFRU0eJoqxBIxGpdoCaCS5Zw3AjWDtWDMNAsFYwvs381oQpzSP5aKYx80McSj7gFI2V/G6IZkRRpHez3rhXrrhVdw6ySrycVCBHvVf+6vYjmoRMGipQ647nxsZPURlOBZuVuolmMdIxDlnHUokh0346Dz0jZ1bpk0Gk7JOGzNXfGymGWk/DwE5mIfWyl4n/eZ3EDK79lMs4MUzSxaFBIoiJSNYA6XPFqBFTS5AqbrMSOkKF1NieSrYEb/nLq6R5UfXcqvdwWand5HUU4QRO4Rw8uIIa3EMdGkDhCZ7hFd6cifPivDsfi9GCk+8cwx84nz/6SZI4</latexit>

BERT / MT'DNN / Sci'BERT

External Datasets

In,domain Datasets

Dk
<latexit sha1_base64="nIWvIpXPUYnZ1CkSaNqDEtL1dAU=">AAAB9HicbVDLSgMxFL1TX7W+qi7dBIvgqsyIoMuiLlxWsA9oh3InTdvQTGZMMoUy9DvcuFDErR/jzr8x085CWw8EDufcyz05QSy4Nq777RTW1jc2t4rbpZ3dvf2D8uFRU0eJoqxBIxGpdoCaCS5Zw3AjWDtWDMNAsFYwvs381oQpzSP5aKYx80McSj7gFI2V/G6IZkRRpHez3rhXrrhVdw6ySrycVCBHvVf+6vYjmoRMGipQ647nxsZPURlOBZuVuolmMdIxDlnHUokh0346Dz0jZ1bpk0Gk7JOGzNXfGymGWk/DwE5mIfWyl4n/eZ3EDK79lMs4MUzSxaFBIoiJSNYA6XPFqBFTS5AqbrMSOkKF1NieSrYEb/nLq6R5UfXcqvdwWand5HUU4QRO4Rw8uIIa3EMdGkDhCZ7hFd6cifPivDsfi9GCk+8cwx84nz/6SZI4</latexit><latexit sha1_base64="nIWvIpXPUYnZ1CkSaNqDEtL1dAU=">AAAB9HicbVDLSgMxFL1TX7W+qi7dBIvgqsyIoMuiLlxWsA9oh3InTdvQTGZMMoUy9DvcuFDErR/jzr8x085CWw8EDufcyz05QSy4Nq777RTW1jc2t4rbpZ3dvf2D8uFRU0eJoqxBIxGpdoCaCS5Zw3AjWDtWDMNAsFYwvs381oQpzSP5aKYx80McSj7gFI2V/G6IZkRRpHez3rhXrrhVdw6ySrycVCBHvVf+6vYjmoRMGipQ647nxsZPURlOBZuVuolmMdIxDlnHUokh0346Dz0jZ1bpk0Gk7JOGzNXfGymGWk/DwE5mIfWyl4n/eZ3EDK79lMs4MUzSxaFBIoiJSNYA6XPFqBFTS5AqbrMSOkKF1NieSrYEb/nLq6R5UfXcqvdwWand5HUU4QRO4Rw8uIIa3EMdGkDhCZ7hFd6cifPivDsfi9GCk+8cwx84nz/6SZI4</latexit><latexit sha1_base64="nIWvIpXPUYnZ1CkSaNqDEtL1dAU=">AAAB9HicbVDLSgMxFL1TX7W+qi7dBIvgqsyIoMuiLlxWsA9oh3InTdvQTGZMMoUy9DvcuFDErR/jzr8x085CWw8EDufcyz05QSy4Nq777RTW1jc2t4rbpZ3dvf2D8uFRU0eJoqxBIxGpdoCaCS5Zw3AjWDtWDMNAsFYwvs381oQpzSP5aKYx80McSj7gFI2V/G6IZkRRpHez3rhXrrhVdw6ySrycVCBHvVf+6vYjmoRMGipQ647nxsZPURlOBZuVuolmMdIxDlnHUokh0346Dz0jZ1bpk0Gk7JOGzNXfGymGWk/DwE5mIfWyl4n/eZ3EDK79lMs4MUzSxaFBIoiJSNYA6XPFqBFTS5AqbrMSOkKF1NieSrYEb/nLq6R5UfXcqvdwWand5HUU4QRO4Rw8uIIa3EMdGkDhCZ7hFd6cifPivDsfi9GCk+8cwx84nz/6SZI4</latexit><latexit sha1_base64="nIWvIpXPUYnZ1CkSaNqDEtL1dAU=">AAAB9HicbVDLSgMxFL1TX7W+qi7dBIvgqsyIoMuiLlxWsA9oh3InTdvQTGZMMoUy9DvcuFDErR/jzr8x085CWw8EDufcyz05QSy4Nq777RTW1jc2t4rbpZ3dvf2D8uFRU0eJoqxBIxGpdoCaCS5Zw3AjWDtWDMNAsFYwvs381oQpzSP5aKYx80McSj7gFI2V/G6IZkRRpHez3rhXrrhVdw6ySrycVCBHvVf+6vYjmoRMGipQ647nxsZPURlOBZuVuolmMdIxDlnHUokh0346Dz0jZ1bpk0Gk7JOGzNXfGymGWk/DwE5mIfWyl4n/eZ3EDK79lMs4MUzSxaFBIoiJSNYA6XPFqBFTS5AqbrMSOkKF1NieSrYEb/nLq6R5UfXcqvdwWand5HUU4QRO4Rw8uIIa3EMdGkDhCZ7hFd6cifPivDsfi9GCk+8cwx84nz/6SZI4</latexit>

k = 1, · · · , K1
<latexit sha1_base64="9EtKC8Uxdh3q9J1tp9a9r97APpE=">AAAB+HicbVDLSgMxFM34rPXRUZdugkVwUcpEBN0IRTeCmwr2Ae0wZDKZNjSTDElGqEO/xI0LRdz6Ke78G9N2Ftp64MLhnHu5954w5Uwbz/t2VlbX1jc2S1vl7Z3dvYq7f9DWMlOEtojkUnVDrClngrYMM5x2U0VxEnLaCUc3U7/zSJVmUjyYcUr9BA8EixnBxkqBWxldoVqfRNLoGrwLUOBWvbo3A1wmqCBVUKAZuF/9SJIsocIQjrXuIS81fo6VYYTTSbmfaZpiMsID2rNU4IRqP58dPoEnVolgLJUtYeBM/T2R40TrcRLazgSboV70puJ/Xi8z8aWfM5FmhgoyXxRnHBoJpynAiClKDB9bgoli9lZIhlhhYmxWZRsCWnx5mbTP6siro/vzauO6iKMEjsAxOAUIXIAGuAVN0AIEZOAZvII358l5cd6dj3nrilPMHII/cD5/ANkykeY=</latexit><latexit sha1_base64="9EtKC8Uxdh3q9J1tp9a9r97APpE=">AAAB+HicbVDLSgMxFM34rPXRUZdugkVwUcpEBN0IRTeCmwr2Ae0wZDKZNjSTDElGqEO/xI0LRdz6Ke78G9N2Ftp64MLhnHu5954w5Uwbz/t2VlbX1jc2S1vl7Z3dvYq7f9DWMlOEtojkUnVDrClngrYMM5x2U0VxEnLaCUc3U7/zSJVmUjyYcUr9BA8EixnBxkqBWxldoVqfRNLoGrwLUOBWvbo3A1wmqCBVUKAZuF/9SJIsocIQjrXuIS81fo6VYYTTSbmfaZpiMsID2rNU4IRqP58dPoEnVolgLJUtYeBM/T2R40TrcRLazgSboV70puJ/Xi8z8aWfM5FmhgoyXxRnHBoJpynAiClKDB9bgoli9lZIhlhhYmxWZRsCWnx5mbTP6siro/vzauO6iKMEjsAxOAUIXIAGuAVN0AIEZOAZvII358l5cd6dj3nrilPMHII/cD5/ANkykeY=</latexit><latexit sha1_base64="9EtKC8Uxdh3q9J1tp9a9r97APpE=">AAAB+HicbVDLSgMxFM34rPXRUZdugkVwUcpEBN0IRTeCmwr2Ae0wZDKZNjSTDElGqEO/xI0LRdz6Ke78G9N2Ftp64MLhnHu5954w5Uwbz/t2VlbX1jc2S1vl7Z3dvYq7f9DWMlOEtojkUnVDrClngrYMM5x2U0VxEnLaCUc3U7/zSJVmUjyYcUr9BA8EixnBxkqBWxldoVqfRNLoGrwLUOBWvbo3A1wmqCBVUKAZuF/9SJIsocIQjrXuIS81fo6VYYTTSbmfaZpiMsID2rNU4IRqP58dPoEnVolgLJUtYeBM/T2R40TrcRLazgSboV70puJ/Xi8z8aWfM5FmhgoyXxRnHBoJpynAiClKDB9bgoli9lZIhlhhYmxWZRsCWnx5mbTP6siro/vzauO6iKMEjsAxOAUIXIAGuAVN0AIEZOAZvII358l5cd6dj3nrilPMHII/cD5/ANkykeY=</latexit><latexit sha1_base64="9EtKC8Uxdh3q9J1tp9a9r97APpE=">AAAB+HicbVDLSgMxFM34rPXRUZdugkVwUcpEBN0IRTeCmwr2Ae0wZDKZNjSTDElGqEO/xI0LRdz6Ke78G9N2Ftp64MLhnHu5954w5Uwbz/t2VlbX1jc2S1vl7Z3dvYq7f9DWMlOEtojkUnVDrClngrYMM5x2U0VxEnLaCUc3U7/zSJVmUjyYcUr9BA8EixnBxkqBWxldoVqfRNLoGrwLUOBWvbo3A1wmqCBVUKAZuF/9SJIsocIQjrXuIS81fo6VYYTTSbmfaZpiMsID2rNU4IRqP58dPoEnVolgLJUtYeBM/T2R40TrcRLazgSboV70puJ/Xi8z8aWfM5FmhgoyXxRnHBoJpynAiClKDB9bgoli9lZIhlhhYmxWZRsCWnx5mbTP6siro/vzauO6iKMEjsAxOAUIXIAGuAVN0AIEZOAZvII358l5cd6dj3nrilPMHII/cD5/ANkykeY=</latexit>

k = K1+1, · · · , K2
<latexit sha1_base64="gg82fn5PwbpGh2te5lm987yANFg=">AAACAHicbVDLSsNAFJ3UV62vqAsXbqYWQbCUpAi6EYpuhG4q2Ac0IUwmk3boJBNmJkIJ3fgrblwo4tbPcOffOG2z0NYDFw7n3Mu99/gJo1JZ1rdRWFldW98obpa2tnd298z9g47kqcCkjTnjoucjSRiNSVtRxUgvEQRFPiNdf3Q79buPREjK4wc1TogboUFMQ4qR0pJnHo2um57tlM+dsl11cMCVrMKmV/fMilWzZoDLxM5JBeRoeeaXE3CcRiRWmCEp+7aVKDdDQlHMyKTkpJIkCI/QgPQ1jVFEpJvNHpjAU60EMORCV6zgTP09kaFIynHk684IqaFc9Kbif14/VeGVm9E4SRWJ8XxRmDKoOJymAQMqCFZsrAnCgupbIR4igbDSmZV0CPbiy8ukU6/ZVs2+v6g0bvI4iuAYnIAzYINL0AB3oAXaAIMJeAav4M14Ml6Md+Nj3low8plD8AfG5w8zMpQ3</latexit><latexit sha1_base64="gg82fn5PwbpGh2te5lm987yANFg=">AAACAHicbVDLSsNAFJ3UV62vqAsXbqYWQbCUpAi6EYpuhG4q2Ac0IUwmk3boJBNmJkIJ3fgrblwo4tbPcOffOG2z0NYDFw7n3Mu99/gJo1JZ1rdRWFldW98obpa2tnd298z9g47kqcCkjTnjoucjSRiNSVtRxUgvEQRFPiNdf3Q79buPREjK4wc1TogboUFMQ4qR0pJnHo2um57tlM+dsl11cMCVrMKmV/fMilWzZoDLxM5JBeRoeeaXE3CcRiRWmCEp+7aVKDdDQlHMyKTkpJIkCI/QgPQ1jVFEpJvNHpjAU60EMORCV6zgTP09kaFIynHk684IqaFc9Kbif14/VeGVm9E4SRWJ8XxRmDKoOJymAQMqCFZsrAnCgupbIR4igbDSmZV0CPbiy8ukU6/ZVs2+v6g0bvI4iuAYnIAzYINL0AB3oAXaAIMJeAav4M14Ml6Md+Nj3low8plD8AfG5w8zMpQ3</latexit><latexit sha1_base64="gg82fn5PwbpGh2te5lm987yANFg=">AAACAHicbVDLSsNAFJ3UV62vqAsXbqYWQbCUpAi6EYpuhG4q2Ac0IUwmk3boJBNmJkIJ3fgrblwo4tbPcOffOG2z0NYDFw7n3Mu99/gJo1JZ1rdRWFldW98obpa2tnd298z9g47kqcCkjTnjoucjSRiNSVtRxUgvEQRFPiNdf3Q79buPREjK4wc1TogboUFMQ4qR0pJnHo2um57tlM+dsl11cMCVrMKmV/fMilWzZoDLxM5JBeRoeeaXE3CcRiRWmCEp+7aVKDdDQlHMyKTkpJIkCI/QgPQ1jVFEpJvNHpjAU60EMORCV6zgTP09kaFIynHk684IqaFc9Kbif14/VeGVm9E4SRWJ8XxRmDKoOJymAQMqCFZsrAnCgupbIR4igbDSmZV0CPbiy8ukU6/ZVs2+v6g0bvI4iuAYnIAzYINL0AB3oAXaAIMJeAav4M14Ml6Md+Nj3low8plD8AfG5w8zMpQ3</latexit><latexit sha1_base64="gg82fn5PwbpGh2te5lm987yANFg=">AAACAHicbVDLSsNAFJ3UV62vqAsXbqYWQbCUpAi6EYpuhG4q2Ac0IUwmk3boJBNmJkIJ3fgrblwo4tbPcOffOG2z0NYDFw7n3Mu99/gJo1JZ1rdRWFldW98obpa2tnd298z9g47kqcCkjTnjoucjSRiNSVtRxUgvEQRFPiNdf3Q79buPREjK4wc1TogboUFMQ4qR0pJnHo2um57tlM+dsl11cMCVrMKmV/fMilWzZoDLxM5JBeRoeeaXE3CcRiRWmCEp+7aVKDdDQlHMyKTkpJIkCI/QgPQ1jVFEpJvNHpjAU60EMORCV6zgTP09kaFIynHk684IqaFc9Kbif14/VeGVm9E4SRWJ8XxRmDKoOJymAQMqCFZsrAnCgupbIR4igbDSmZV0CPbiy8ukU6/ZVs2+v6g0bvI4iuAYnIAzYINL0AB3oAXaAIMJeAav4M14Ml6Md+Nj3low8plD8AfG5w8zMpQ3</latexit>

Task'specific
Layers

Task'specific
Losses

Figure 1: Illustration of the proposed multi-source multi-task learning method.

sembling.
Pre-trained Models. We use three different
types of initialization as the starting point for
fine-tuning: i) the uncased MT-DNN large model
from Liu et al. (2019b), ii) the cased knowledge-
distilled MT-DNN model from Liu et al. (2019a),
and iii) the uncased SciBERT model (Beltagy
et al., 2019). We add a simple softmax layer (or
linear layer for QA and MedQuAD tasks) atop
BERT as the answer module for fine-tuning. For
initialization in step 1 in Algorithm 1, we initial-
ize all BERT weights with the pretrained weights,
and randomly initialize the answer layers. After
multi-task fine-tuning, the joint model is further
fine-tuned on each specific task to get better per-
formance. We detail the training loss and fine-
tuning process for each task in Section 2.3.
Objectives. MedNLI and RQE are binary clas-
sification tasks, and we use a cross-entropy loss.
Specifically, for a sentence pairX we compute the
loss

L(X) = −
∑
c

1(X, c) log(Pr(c|X)),

where c iterates over all possible classes, 1(X, c)
is the binary indicator (0 or 1) if class label c is
the correct classification forX , and Pr(c|X) is the
model prediction for probability of class c for sam-
ple X .

We formulate QA and MedQuAD as regression
tasks, and thus a MSE loss is used. Specifically,
for a question-answer pair (Q,A) we compute the
MSE loss as

L(Q,A) = (y − score(Q,A))2,

where y is the target relevance score for pair
(Q,A), and score(Q,A) is the model prediction
for the same pair.

2.2 Model Ensembles
After fine-tuning, we ensemble models trained
from MT-DNN and SciBERT, and using different

setups of in-domain and external datasets. The
traditional methods typically fuse models by aver-
aging the prediction probability of different mod-
els. For our setting, the in-domain data is very
limited and it tends to overfit; this means the pre-
dictions can be arbitrarily close to 1, favoring to
more over-fitting models. To prevent over-fitting,
we ensemble the models by using a majority vote
on their predictions, and resolving ties using sum
of prediction probabilities. Suppose we have M
models, and the m-th model predicts the answer
p̂m for a specific question. For the classification
task (MedNLI and RQE), we have p̂m ∈ RC ,
where C is the number of categories. Let ŷm =
argmaxi p̂

(i)
m be the prediction of modelm, where

p̂
(i)
m is the i-th dimension of p̂m. The final predic-

tion is chosen as

ŷensemble = argmax
y∈maj({ŷm}Mm=1)

M∑
m=1

p̂(y)m .

In other words, we first obtain the major-
ity of predictions by computing the majority
maj({ŷm}Mm=1), and resolve the ties by comput-
ing the sum of prediction probabilities

∑M
m=1 p̂

(y)
m .

For QA tasks (QA and MedQuAD), the task is cast
as a regression problem, where a positive number
means correct answer, and negative otherwise. We
have p̂m ∈ R. We first compute the average score
p̂ensem =

1
M

∑M
m=1 p̂m. We also compute the pre-

diction as ŷm = I(p̂m ≥ 0), where I is the indica-
tor function. We compute the ensemble prediction
through a similar majority vote as the classifica-
tion case:

ŷensem =


1, if

∑M
m=1 ŷm > M/2

0, if
∑M

m=1 ŷm < M/2

I(p̂ensem > 0), otherwise.

To be precise, we predict the majority if a tie does
not exist, or the sign of p̂ensem otherwise. The fi-
nal ranking of answers is carried out by first rank
the (predicted) positive answers, and then the (pre-
dicted) negative answers.



402

2.3 Dataset-Specific Details

MedNLI: Since the MEDIQA shared task uses a
different test set than the original MedNLI dataset,
we merge the original MedNLI development set
into the training set and use evaluation perfor-
mance on the original MedNLI test set. Further-
more, MedNLI and MNLI are the same NLI tasks,
thus, we shared final-layer classifiers for these two
tasks. For MedNLI, we find that each consecutive
3 samples in all the training set contain the same
premise with different hypothesizes, and contains
exactly 1 entail, 1 neutral and 1 contradiction. To
the end, in our prediction, we constrain the three
predictions to be one of each kind, and use the
most likely prediction from the model prediction
probabilities.
RQE: We use the clinical question as the premise
and question from FAQ as the hypothesis. We find
that the test data distribution is quite different from
the train data distribution. To mitigate this effect,
we randomly shuffle half of the evaluation data
into the training set and evaluate on the remain-
ing half.
QA: We use the answer as the premise and the
question as the hypothesis. The QA task is cast
as both a ranking task and a classification task.
Each question is associated with a relevance score
in {1, 2, 3, 4}, and an additional rank over all
the answers for a specific question is given. We
use a modified score to incorporate both informa-
tion: suppose there arem questions with relevance
score s ∈ {1, 2, 3, 4}. Then the i-th most relevant
answer in these m questions get modified score
s− i−1m . In this way the scores are uniformly dis-
tributed in (s− 1, s]. We shift all scores by −2 so
that a positive score leads to a correct answer and
vice versa. We also tried pairwise losses to incor-
porate the ranking but did not find it to boost the
performance very much.

We find that the development set distribution is
inconsistent with test data - the training and test set
consist of both LiveQAMed and Alexa questions,
whereas the development set seems to only con-
tain LiveQAMed questions. We shuffle the train-
ing and development set to make them similar: We
use the last 25 questions in original development
set (LiveQAMed questions) and the last 25 Alexa
questions (from the original training set) as our de-
velopment set, and use the remaining questions as
our training set. This results in 1,504 training pairs
and 431 validation pairs. Due to the limited size

of the QA dataset, we use cross-validation that di-
vides all pairs into 5 slices and train 5 models by
using each slice as a validation set. We train MT-
DNN and SciBERT on both these 5 setups and ob-
tain 10 models, and ensemble all the 10 models
obtained.
MedQuAD: We use 10,109 questions from
MedQuAD because the remaining questions are
not available due to copyright issues. The original
MedQuAD dataset only contains positive question
pairs. We add negative samples to the dataset by
randomly sampling an answer from the same web
page. For each positive QA pair, we add two neg-
ative samples. The resulting 30,327 pairs are ran-
domly divided into 27,391 training pairs and 2,936
evaluation pairs. Then we use the same method as
QA to train MedQuAD; we also share the same
answer module between QA and MedQuAD.

2.4 Implementation and Hyperparameters

We implement our method using PyTorch1 and
Pytorch-pretrained-BERT2, as an extension to
MT-DNN3. We also use the pytorch-compatible
SciBERT pretrained model provided by Al-
lenNLP4. Each training example is pruned to at
most 384 tokens for MT-DNN models and 512 to-
kens for SciBERT models. We use a batch size of
16 for MT-DNN, and 40 for SciBERT. For fine-
tuning, we train the models for 20 epochs using
a learning rate of 5 × 10−5. After that, we fur-
ther fine-tune the model from the best multi-task
model for 6 epochs for each dataset, using a learn-
ing rate of 5×10−6. We ensemble all models with
an accuracy larger than 87.7 for MedNLI, 83.5 for
shuffled RQE, and 83.0 for QA. We ensemble 4
models for MedNLI, 14 models for RQE. For QA,
we ensemble 10 models from cross-validation and
7 models using the normal training-validation ap-
proach.

3 Results

In this section, we provide the leaderboard perfor-
mance and conduct an analysis of the effect of en-
semble models from different sources.

1https://pytorch.org/
2https://github.com/huggingface/

pytorch-pretrained-BERT
3https://github.com/namisan/mt-dnn
4https://github.com/allenai/scibert

https://pytorch.org/
https://github.com/huggingface/pytorch-pretrained-BERT
https://github.com/huggingface/pytorch-pretrained-BERT
https://github.com/namisan/mt-dnn
https://github.com/allenai/scibert


403

Model Dev Set Test Set
WTMed - 98.0
PANLP - 96.6
Ours 91.7 93.8
Sieg - 91.1
SOTA 76.6 -

Table 1: The leaderboard for MedNLI task (link).
Scores are accuracy(%). Our method ranked the 3rd
on the leaderboard. Previous SOTA method was from
(Romanov and Shivade, 2018), on the original MedNLI
test set (used as dev set here).

Model Dev Set Test Set
PANLP - 74.9
Sieg - 70.6
IIT-KGP - 68.4
Ours 91.7 66.2

Table 2: The leaderboard for RQE task (link). Scores
are accuracy(%). Our method ranked the 7th on the
leaderboard.

3.1 Test Set Performance and LeaderBoards

The results for MedNLI dataset is summarized in
Table 1. Our method ends up the 3rd place on the
leaderboard and substantially improving upon pre-
vious state-of-the-art (SOTA) methods.

The results for RQE dataset is summarized in
Table 2. Our method ends up the 7th place on the
leaderboard. Our method has a very large discrep-
ancy between the dev set performance and test set
performance. We think this is because the test set
is quite different from dev set, and that the dev set
is very small and easy to overfit to.

The results for QA dataset is summarized in Ta-
ble 3. Our method reaches the first place on the
leaderboard based on accuracy and precision score
and 3rd-highest MRR. We note that the Spearman
score is not consistent with other scores in the
leaderboard; actually, the Spearman score is com-
puted just based on the predicted positive answers,
and a method can get very high Spearman score by
never predict positive labels.

3.2 Ensembles from Different Sources

We compare the effect of ensembling from dif-
ferent sources in Table 4. We train 6 different
models with different randomizations, with ini-
tializations from MT-DNN (#1,#2,#3) and SciB-
ERT (#4, #5,#6) respectively. If we ensemble

Model Acc Spearman Precision MRR
Ours 78.0 0.238 81.91 0.937
PANLP 77.7 0.180 78.1 0.938
Pentagon 76.5 0.338 77.7 0.962
DUT-BIM 74.5 0.106 74.7 0.906

Table 3: The leaderboard for QA task (link). Our
method ranked #1 on the leaderboard in terms of Acc
(accuracy). The Spearman score is not consistent with
other scores in the leaderboard.

models with the same MT-DNN architecture, the
resulting model only has around 1.5% improve-
ment in accuracy, compared to the numerical aver-
age of the ensemble model accuracies (#1+#2+#3
and #4+#5+#6 in Table 4). On the other hand, if
we ensemble three models from different sources
(#1+#2+#5 and #1+#5+#6 in Table 4), the result-
ing model gains more than 3% in accuracy com-
pared to the numerical average. This shows that
ensembling from different sources has a great ad-
vantage than ensembling from single-source mod-
els.

Model Avg. Acc Esm. Acc
Single Model

#1, MT-DNN - 88.61
#2, MT-DNN - 88.33
#3, MT-DNN - 87.84
#4, SciBERT - 88.19
#5, SciBERT - 87.70
#6, SciBERT - 87.21

Ensemble Model
#1+#2+#3, MT-DNN 88.26 89.7
#4+#5+#6, SciBERT 87.70 89.2
#1+#2+#5, MultiSource 88.21 91.6
#1+#5+#6, MultiSource 87.84 90.4
#1-6, MultiSource 87.98 91.3

Table 4: Comparison of ensembles from different
sources. Avg.Acc stands for average accuracy, the nu-
merical average of each individual model’s accuracy.
Esm.Acc stands for ensemble accuracy, the accuracy
of the resulting ensemble model. For ensembles, MT-
DNN means all the three models are from MT-DNN,
and similarly for SciBERT; MultiSource denotes the
ensemble models come from two different sources.

3.3 Single-Model Performance

For completeness, we report the single-model per-
formance on the MedNLI development set under

https://www.aicrowd.com/challenges/mediqa-2019-natural-language-inference-nli/leaderboards
https://www.aicrowd.com/challenges/mediqa-2019-recognizing-question-entailment-rqe/leaderboards
https://www.aicrowd.com/challenges/mediqa-2019-question-answering-qa/leaderboards


404

various multi-task learning setups and initializa-
tions in Table 5. (1) The Naı̈ve approach denotes
only MedNLI, RQE, QA, MedQuAD is consid-
ered as in-domain data in Algorithm 1 without
any external data; (2) The Ratio approach denotes
that we consider MedNLI as in-domain data, and
RQE, QA, MedQuAD as external data in Algo-
rithm 1; (3) The Ratio+MNLI approach denotes
that we consider MedNLI, RQE, QA, MedQuAD
as in-domain data and MNLI as external data in
Algorithm 1. Note that MNLI is much larger
than the medical datasets, so if we use RQE, QA,
MedQuAD, MNLI as external data, the perfor-
mance is very similar to the third setting. We
did not conduct experiments on single-dataset set-
tings, as previous works have suggested that multi-
task learning can obtain much better results than
single-task models (Liu et al., 2019b; Xu et al.,
2018).

Overall, the best results are achieved via using
SciBERT as the pre-trained model, and multi-task
learning with MNLI. The models trained by mix-
ing in-domain data (the second setup) is also com-
petitive. We therefore use models from both setups
for ensemble.

Init Model Naı̈ve Ratio Ratio+MNLI
MT-DNN 86.9 86.2 87.8
MT-DNN-KD 87.5 88.2 88.8
SciBERT 87.1 87.0 89.4

Table 5: Single model performance on MedNLI de-
veloplment data. Naiı̈ve means simply integrating all
medical-domain data; Ratio means using MedNLI as
in-domain data and other medical domain data as ex-
ternal data; Ratio+MNLI means using medical domain
data as in-domain and MNLI as external.

4 Conclusion

We present new methods for multi-source transfer
learning for the medical domain. Our results show
that ensembles from different sources can improve
model performance much more greatly than en-
sembles from a single source. Our methods are
proved effective in the MEDIQA2019 shared task.

References
Asma Ben Abacha and Dina Demner-Fushman. 2019.

A question-entailment approach to question answer-
ing. arXiv preprint arXiv:1901.08079.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473.

Iz Beltagy, Arman Cohan, and Kyle Lo. 2019. Scibert:
Pretrained contextualized embeddings for scientific
text. arXiv preprint arXiv:1903.10676.

Asma Ben Abacha, Chaitanya Shivade, and Dina
Demner-Fushman. 2019. Overview of the mediqa
2019 shared task on textual inference, question en-
tailment and question answering. In Proceedings of
the BioNLP 2019 workshop, Florence, Italy, August
1, 2019. Association for Computational Linguistics.

Rich Caruana. 1997. Multitask learning. Machine
learning, 28(1):41–75.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805.

Xiaodong Liu, Jianfeng Gao, Xiaodong He, Li Deng,
Kevin Duh, and Ye-Yi Wang. 2015. Representa-
tion learning using multi-task deep neural networks
for semantic classification and information retrieval.
In Proceedings of the 2015 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 912–921.

Xiaodong Liu, Pengcheng He, Weizhu Chen, and Jian-
feng Gao. 2019a. Improving multi-task deep neural
networks via knowledge distillation for natural lan-
guage understanding.

Xiaodong Liu, Pengcheng He, Weizhu Chen, and Jian-
feng Gao. 2019b. Multi-task deep neural networks
for natural language understanding. arXiv preprint
arXiv:1901.11504.

Alexey Romanov and Chaitanya Shivade. 2018.
Lessons from natural language inference in the clin-
ical domain. In Proceedings of the 2018 Conference
on Empirical Methods in Natural Language Pro-
cessing, pages 1586–1596.

Alex Wang, Amanpreet Singh, Julian Michael, Felix
Hill, Omer Levy, and Samuel R. Bowman. 2019.
Glue: A multi-task benchmark and analysis platform
for natural language understanding. In the Proceed-
ings of ICLR.

Adina Williams, Nikita Nangia, and Samuel Bowman.
2018. A broad-coverage challenge corpus for sen-
tence understanding through inference. In Proceed-
ings of the 2018 Conference of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies, Volume 1
(Long Papers), pages 1112–1122. Association for
Computational Linguistics.

http://arxiv.org/abs/1904.09482
http://arxiv.org/abs/1904.09482
http://arxiv.org/abs/1904.09482
http://aclweb.org/anthology/N18-1101
http://aclweb.org/anthology/N18-1101


405

Yichong Xu, Xiaodong Liu, Yelong Shen, Jingjing
Liu, and Jianfeng Gao. 2018. Multi-task learning
for machine reading comprehension. arXiv preprint
arXiv:1809.06963.


