



















































A Transition-Based Algorithm for Unrestricted AMR Parsing


Proceedings of NAACL-HLT 2018, pages 142–149
New Orleans, Louisiana, June 1 - 6, 2018. c©2018 Association for Computational Linguistics

A Transition-based Algorithm for Unrestricted AMR Parsing

David Vilares
Universidade da Coruña

FASTPARSE Lab, LyS Group
Departamento de Computación
Campus de A Elviña s/n, 15071

A Coruña, Spain
david.vilares@udc.es

Carlos Gómez-Rodrı́guez
Universidade da Coruña

FASTPARSE Lab, LyS Group
Departamento de Computación
Campus de A Elviña s/n, 15071

A Coruña, Spain
carlos.gomez@udc.es

Abstract
Non-projective parsing can be useful to han-
dle cycles and reentrancy in AMR graphs. We
explore this idea and introduce a greedy left-
to-right non-projective transition-based parser.
At each parsing configuration, an oracle de-
cides whether to create a concept or whether to
connect a pair of existing concepts. The algo-
rithm handles reentrancy and arbitrary cycles
natively, i.e. within the transition system itself.
The model is evaluated on the LDC2015E86
corpus, obtaining results close to the state of
the art, including a Smatch of 64%, and show-
ing good behavior on reentrant edges.

1 Introduction

Abstract Meaning Representation (AMR) is a se-
mantic representation language to map the mean-
ing of English sentences into directed, cycled, la-
beled graphs (Banarescu et al., 2013). Graph ver-
tices are concepts inferred from words. The con-
cepts can be represented by the words themselves
(e.g. dog), PropBank framesets (Palmer et al.,
2005) (e.g. eat-01), or keywords (like named
entities or quantities). The edges denote relations
between pairs of concepts (e.g. eat-01 :ARG0
dog). AMR parsing integrates tasks that have usu-
ally been addressed separately in natural language
processing (NLP), such as named entity recogni-
tion (Nadeau and Sekine, 2007), semantic role la-
beling (Palmer et al., 2010) or co-reference res-
olution (Ng and Cardie, 2002; Lee et al., 2017).
Figure 1 shows an example of an AMR graph.

Several transition-based dependency parsing al-
gorithms have been extended to generate AMR.
Wang et al. (2015) describe a two-stage model,
where they first obtain the dependency parse of
a sentence and then transform it into a graph.
Damonte et al. (2017) propose a variant of the
ARC-EAGER algorithm to identify labeled edges
between concepts. These concepts are identified

"Earth"

"Earth" name

ARG1 quantpolarity

prince  arrived-01  planet  surprise-01  -  see-01  any  person

time

ARG0

ARG1
ARG4

ARG0

wiki name

op1

Figure 1: AMR graph for ‘When the prince arrived
on the Earth, he was surprised not to see any people’.
Words can refer to concepts by themselves (green),
be mapped to PropBank framesets (red) or be broken
down into multiple-term/non-literal concepts (blue).
Prince plays different semantic roles.

using a lookup table and a set of rules. A re-
stricted subset of reentrant edges are supported by
an additional classifier. A similar configuration is
used in (Gildea et al., 2018; Peng et al., 2018),
but relying on a cache data structure to handle
reentrancy, cycles and restricted non-projectivity.
A feed-forward network and additional hooks are
used to build the concepts. Ballesteros and Al-
Onaizan (2017) use a modified ARC-STANDARD
algorithm, where the oracle is trained using stack-
LSTMs (Dyer et al., 2015). Reentrancy is handled
through SWAP (Nivre, 2009) and they define addi-
tional transitions intended to detect concepts, enti-
ties and polarity nodes.

This paper explores unrestricted non-projective
AMR parsing and introduces AMR-COVINGTON,
inspired by Covington (2001). It handles arbitrary
non-projectivity, cycles and reentrancy in a natu-
ral way, as there is no need for specific transitions,
but just the removal of restrictions from the orig-
inal algorithm. The algorithm has full coverage
and keeps transitions simple, which is a matter of
concern in recent studies (Peng et al., 2018).

142



2 Preliminaries and Notation

Notation We use typewriter font for con-
cepts and their indexes (e.g. dog or 1), regular
font for raw words (e.g. dog or 1), and a bold style
font for vectors and matrices (e.g. v, W).
Covington (2001) describes a fundamental algo-
rithm for unrestricted non-projective dependency
parsing. The algorithm can be implemented as a
left-to-right transition system (Nivre, 2008). The
key idea is intuitive. Given a word to be processed
at a particular state, the word is compared against
the words that have previously been processed, de-
ciding to establish or not a syntactic dependency
arc from/to each of them. The process continues
until all previous words are checked or until the
algorithm decides no more connections with pre-
vious words need to be built, then the next word is
processed. The runtime is O(n2) in the worst sce-
nario. To guarantee the single-head and acyclicity
conditions that are required in dependency pars-
ing, explicit tests are added to the algorithm to
check for transitions that would break the con-
straints. These are then disallowed, making the
implementation less straightforward.

3 The AMR-Covington algorithm

The acyclicity and single-head constraints are not
needed in AMR, as arbitrary graphs are allowed.
Cycles and reentrancy are used to model seman-
tic relations between concepts (as shown in Figure
1) and to identify co-references. By removing the
constraints from the Covington transition system,
we achieve a natural way to deal with them.1

Also, AMR parsing requires words to be trans-
formed into concepts. Dependency parsing oper-
ates on a constant-length sequence. But in AMR,
words can be removed, generate a single concept,
or generate several concepts. In this paper, addi-
tional lookup tables and transitions are defined to
create concepts when needed, following the cur-
rent trend (Damonte et al., 2017; Ballesteros and
Al-Onaizan, 2017; Gildea et al., 2018).

3.1 Formalization
Let G=(V,E) be an edge-labeled directed graph
where: V ={0,1,2, . . . ,M} is the set of concepts
andE = V ×E×V is the set of labeled edges, we
will denote a connection between a head concept

1This is roughly equivalent to going back to the naive
parser called ESH in (Covington, 2001), which has not seen
practical use in parsing due to the lack of these constraints.

i ∈ V and a dependent concept j ∈ V as i l−→ j,
where l is the semantic label connecting them.

The parser will process sentences from left to
right. Each decision leads to a new parsing con-
figuration, which can be abstracted as a 4-tuple
(λ1, λ2, β, E) where:

• β is a buffer that contains unprocessed words.
They await to be transformed to a concept, a
part of a larger concept, or to be removed. In
b|β, b represents the head of β, and it option-
ally can be a concept. In that case, it will be
denoted as b.

• λ1 is a list of previously created concepts that
are waiting to determine its semantic relation
with respect to b. Elements in λ1 are con-
cepts. In λ1|i, i denotes its last element.

• λ2 is a list that contains previously created
concepts for which the relation with b has al-
ready been determined. Elements in λ2 are
concepts. In j|λ2, j denotes the head of λ2.

• E is the set of the created edges.

Given an input sentence, the parser starts at an
initial configuration cs = ([0], [], 1|β, {}) and will
apply valid transitions until a final configuration
cf is reached, such that cf = (λ1, λ2, [], E). The
set of transitions is formally defined in Table 1:

• LEFT-ARCl: Creates an edge b l−→ i. i is
moved to λ2.

• RIGHT-ARCl: Creates an edge i l−→ b. i is
moved to λ2.

• SHIFT: Pops b from β. λ1, λ2 and b are ap-
pended.

• NO ARC: It is applied when the algorithm
determines that there is no semantic relation-
ship between i and b, but there is a relation-
ship between some other node in λ1 and b.

• CONFIRM: Pops b from β and puts the con-
cept b in its place. This transition is called to
handle words that only need to generate one
(more) concept.

• BREAKDOWNα: Creates a concept b from b,
and places it on top of β, but b is not popped,
and the new buffer state is b|b|β. It is used
to handle a word that is going to be mapped

143



Transitions Step t Step t+ 1
LEFT-ARCl (λ1|i, λ2,b|β,E) (λ1,i|λ2,b|β,E ∪ {b l−→ i})
RIGHT-ARCl (λ1|i, λ2,b|β,E) (λ1,i|λ2,b|β,E ∪ {i l−→ b})
MULTIPLE-ARCl1,l2 (λ1|i, λ2,b|β,E) (λ1,i|λ2,b|β,E ∪ {b

l−→ i} ∪ {i l2−→ b})
SHIFT (λ1, λ2,b|β,E) (λ1 · λ2|b, [], β, E)
NO-ARC (λ1|i, λ2, β, E) (λ1,i|λ2, β, E)
CONFIRM (λ1, λ2, b|β,E) (λ1, λ2,b|β,E)
BREAKDOWNα (λ1, λ2, b|β,E) (λ1, λ2,b|b|β,E)
REDUCE (λ1, λ2, b|β,E) (λ1, λ2, β, E)

Table 1: Transitions for AMR-COVINGTON

to multiple concepts. To guarantee termi-
nation, BREAKDOWN is parametrized with a
constant α, banning generation of more than
α consecutive concepts by using this opera-
tion. Otherwise, concepts could be generated
indefinitely without emptying β.

• REDUCE: Pops b from β. It is used to remove
words that do not add any meaning to the sen-
tence and are not part of the AMR graph.

LEFT and RIGHT-ARC handle cycles and reen-
trancy with the exception of cycles of length 2
(which only involve i and b). To assure full
coverage, we include an additional transition:
MULTIPLE-ARC(l1,l2) that creates two edges b

l1−→
i and i l2−→ b. i is moved to λ2. MULTIPLE-
ARCs are marginal and will not be learned in prac-
tice. AMR-COVINGTON can be implemented with-
out MULTIPLE-ARC, by keeping i in λ1 after cre-
ating an arc and using NO-ARC when the parser
has finished creating connections between i and
b, at a cost to efficiency as transition sequences
would be longer. Multiple edges in the same direc-
tion between i and b are handled by representing
them as a single edge that merges the labels.

Example Table 2 illustrates a valid transition se-
quence to obtain the AMR graph of Figure 1.

3.2 Training the classifiers
The algorithm relies on three classifiers: (1) a tran-
sition classifier, Tc, that learns the set of transitions
introduced in §3.1, (2) a relation classifier, Rc, to
predict the label(s) of an edge when the selected
action is a LEFT-ARC, RIGHT-ARC or MULTIPLE-
ARC and (3) a hybrid process (a concept classi-
fier, Cc, and a rule-based system) that determines
which concept to create when the selected action
is a CONFIRM or BREAKDOWN.

Preprocessing Sentences are tokenized and
aligned with the concepts using JAMR (Flanigan
et al., 2014). For lemmatization, tagging and de-
pendency parsing we used UDpipe (Straka et al.,
2016) and its English pre-trained model (Zeman
et al., 2017). Named Entity Recognition is han-
dled by Stanford CoreNLP (Manning et al., 2014).

Architecture We use feed-forward neural net-
works to train the tree classifiers. The transition
classifier uses 2 hidden layers (400 and 200 input
neurons) and the relation and concept classifiers
use 1 hidden layer (200 neurons). The activation
function in hidden layers is a relu(x)=max(0, x)
and their output is computed as relu(Wi ·xi+ bi)
whereWi and bi are the weights and bias tensors to
be learned and xi the input at the ith hidden layer.
The output layer uses a softmax function, com-

puted as P (y = s|x) = ex
Tθs

∑S
s′=1 e

xTθs′
. All classi-

fiers are trained in mini-batches (size=32), using
Adam (Kingma and Ba, 2015) (learning rate set
to 3e−4), early stopping (no patience) and dropout
(Srivastava et al., 2014) (40%). The classifiers are
fed with features extracted from the preprocessed
texts. Depending on the classifier, we are using
different features. These are summarized in Ap-
pendix A (Table 5), which also describes (B) other
design decisions that are not shown here due to
space reasons.

3.3 Running the system

At each parsing configuration, we first try to find a
multiword concept or entity that matches the head
elements of β, to reduce the number of BREAK-
DOWNs, which turned out to be a difficult transi-
tion to learn (see §4.1). This is done by looking
at a lookup table of multiword concepts2 seen in

2The most frequent subgraph.

144



λ1 λ2 β Action (times)
w, t, p REDUCE×21
p, a, o CONFIRM2
p, a, o SHIFT3

p a, o, t CONFIRM4
p a, o, t LEFT-ARC5

p a, o, t SHIFT6
p, a o, t, E REDUCE×27
p, a E, h, w BREAKDOWN8
p, a ‘E’, E, h SHIFT9

p, a, ‘E’ E, h, w BREAKDOWN10
p, a, ‘E’ ‘E’, h, w SHIFT11

a, ‘E’, ‘E’ E, h, w BREAKDOWN12
a, ‘E’, ‘E’ n, h, w LEFT-ARC12

a, ‘E’ ‘E’ n, h, w SHIFT13
‘E’, ‘E’, n E, h, w CONFIRM14
‘E’, ‘E’, n p2, h, w LEFT-ARC15
a, ‘E’, ‘E’ n, p2, h, w NO-ARC16
p, a, ‘E’ ‘E’, n, p2, h, w LEFT-ARC17

p, a ‘E’, ‘E’, n, p2, h, w SHIFT18
‘E’, n, p2 h, w, s REDUCE×219
‘E’, n, p2 s, n, t CONFIRM20
‘E’, n, p2 s, n, t LEFT-ARC21

‘E’, ‘E’, n p2 s, n, t NO-ARC×322
p, a ‘E’, ‘E’, n s, n, t LEFT-ARC×223

p, a, ‘E’ s, n, t SHIFT24
n, p2, s n, t, s2 CONFIRM25
n, p2, s -, t, s2 SHIFT26
p2, s, - t, s2, a2 REDUCE27
p2, s, - s2, a2, p3 CONFIRM28
p2, s, - s2, a2, p3 LEFT-ARC29
n, p2, s - s2, a2, p3 NO-ARC ×530

p a, ‘E’, ‘E’ s2, a2, p3 LEFT-ARC31
p, a, ‘E’ s2, a2, p3 SHIFT32

s, -, s2 a2, p3 CONFIRM33
s, -, s2 a2, p3 SHIFT34

-, s2, a2 p3 CONFIRM35
-, s2, a2 p3 LEFT-ARC36
s, -, s2 a2 p3 RIGHT-ARC37

s2, a2, p3 SHIFT38

Table 2: Sequence of gold transitions to obtain the
AMR graph for the sentence ‘When the prince arrived
on the Earth, he was surprised not to see any people’,
introduced in Figure 1. For brevity, we represent words
(and concepts) by their first character (plus an index if
it is duplicated) and we only show the top three words
for λ1, λ2 and β. Steps from 20 to 23(2) and from 28
to 31 manage the reentrant edges for prince (p) from
surprise-01 (s) and see-01 (s2).

the training set and a set of rules, as introduced in
(Damonte et al., 2017; Gildea et al., 2018).

We then invoke Tc and call the corresponding
subprocess when an additional concept or edge-
label identification task is needed.

Concept identification If the word at the top
of β occurred more than 4 times in the training
set, we call a supervised classifier to predict the
concept. Otherwise, we first look for a word-to-
concept mapping in a lookup table. If not found, if
it is a verb, we generate the concept lemma-01,
and otherwise lemma.

Edge label identification The classifier is in-
voked every time an edge is created. We use the
list of valid ARGs allowed in propbank framesets
by Damonte et al. (2017). Also, if p and o are a
propbank and a non-propbank concept, we restore
inverted edges of the form o l-of−−−→ p as o l−→ p.

4 Methods and Experiments

Corpus We use the LDC2015E86 corpus and its
official splits: 16 833 graphs for training, 1 368
for development and 1 371 for testing. The final
model is only trained on the training split.

Metrics We use Smatch (Cai and Knight, 2013)
and the metrics from Damonte et al. (2017).3

Sources The code and the pretrained model
used in this paper can be found at https://
github.com/aghie/tb-amr.

4.1 Results and discussion
Table 3 shows accuracy of Tc on the development
set. CONFIRM and REDUCE are the easiest transi-
tions, as local information such as POS-tags and
words are discriminative to distinguish between
content and function words. BREAKDOWN is the
hardest action.4 In early stages of this work, we
observed that this transition could learn to cor-
rectly generate multiple-term concepts for named-
entities that are not sparse (e.g. countries or peo-
ple), but failed with sparse entities (e.g. dates or
percent quantities). Low performance on iden-
tifying them negatively affects the edge metrics,
which require both concepts of an edge to be cor-
rect. Because of this and to identify them prop-
erly, we use the mentioned complementary rules
to handle named entities. RIGHT-ARCs are harder
than LEFT-ARCs, although the reason for this is-
sue remains as an open question for us. The per-
formance for NO-ARCs is high, but it would be in-
teresting to achieve a higher recall at a cost of a
lower precision, as predicting NO-ARCs makes the
transition sequence longer, but could help iden-
tify more distant reentrancy. The accuracy of Tc
is ∼86%. The accuracy of Rc is ∼79%. We do

3It is worth noting that the calculation of Smatch and met-
rics derived from it suffers from a random component, as
they involve finding an alignment between predicted and gold
graphs with an approximate algorithm that can produce a sub-
optimal solution. Thus, as in previous work, reported Smatch
scores may slightly underestimate the real score.

4This transition was trained/evaluated for non named-
entity words that generated multiple nodes, e.g. father, that
maps to have-rel-role-91 :ARG2 father.

145



Action Prec. Rec. F-score
LEFT-ARC 81.62 87.73 84.57
RIGHT-ARC 75.53 78.71 77.08
MULTIPLE-ARC 00.00 00.00 00.00
SHIFT 80.44 81.11 80.77
NO-ARC 89.71 86.71 88.18
CONFIRM 84.91 96.11 90.16
REDUCE 96.77 91.53 94.08
BREAKDOWN 85.09 50.23 63.17

Table 3: Tc scores on the development set.

Metric F W F’ D P Ours
Smatch 58 63 67 64 64 64
Unlabeled 61 69 69 69 - 68
No-WSD 58 64 68 65 - 65
NER 75 75 79 83 - 83
Wiki 0 0 75 64 - 70
Negations 16 18 45 48 - 47
Concepts 79 80 83 83 - 83
Reentrancy 38 41 42 41 - 44
SRL 55 60 60 56 - 57

Table 4: F-score comparison with F (Flanigan et al.,
2014), W (Wang et al., 2015), F’ (Flanigan et al., 2016),
D (Damonte et al., 2017), P (Peng et al., 2018). D, P
and our system are left-to-right transition-based.

not show the detailed results since the number of
classes is too high. Cc was trained on concepts
occurring more than 1 time in the training set, ob-
taining an accuracy of∼83%. The accuracy on the
development set with all concepts was ∼77%.

Table 4 compares the performance of our sys-
tems with state-of-the-art models on the test set.
AMR-COVINGTON obtains state-of-the-art results
for all the standard metrics. It outperforms the rest
of the models when handling reentrant edges. It is
worth noting that D requires an additional classi-
fier to handle a restricted set of reentrancy and P
uses up to five classifiers to build the graph.

Discussion In contrast to related work that re-
lies on ad-hoc procedures, the proposed algorithm
handles cycles and reentrant edges natively. This
is done by just removing the original constraints of
the arc transitions in the original Covington (2001)
algorithm. The main drawback of the algorithm
is its computational complexity. The transition
system is expected to run in O(n2), as the orig-
inal Covington parser. There are also collateral
issues that impact the real speed of the system,
such as predicting the concepts in a supervised

way, given the large number of output classes (dis-
carding the less frequent concepts the classifier
needs to discriminate among more than 7 000 con-
cepts). In line with previous discussions (Damonte
et al., 2017), it seems that using a supervised feed-
forward network to predict the concepts does not
lead to a better overall concept identification with
respect of the use of simple lookup tables that pick
up the most common node/subgraph. Currently,
every node is kept in λ, and it is available to be part
of new edges. We wonder if only storing in λ the
head node for words that generate multiple-node
subgraphs (e.g. for the word father that maps to
have-rel-role-91 :ARG2 father, keep-
ing in λ only the concept have-rel-role-91)
could be beneficial for AMR-COVINGTON.

As a side note, current AMR evaluation involves
elements such as neural network initialization,
hooks and the (sub-optimal) alignments of evalu-
ation metrics (e.g. Smatch) that introduce random
effects that were difficult to quantify for us.

5 Conclusion

We introduce AMR-COVINGTON, a non-projective
transition-based parser for unrestricted AMR. The
set of transitions handles reentrancy natively. Ex-
periments on the LDC2015E86 corpus show that
our approach obtains results close to the state of
the art and a good behavior on re-entrant edges.

As future work, AMR-COVINGTON produces
sequences of NO-ARCs which could be short-
ened by using non-local transitions (Qi and Man-
ning, 2017; Fernández-González and Gómez-
Rodrı́guez, 2017). Sequential models have
shown that fewer hooks and lookup tables are
needed to deal with the high sparsity of AMR
(Ballesteros and Al-Onaizan, 2017). Simi-
larly, BIST-COVINGTON (Vilares and Gómez-
Rodrı́guez, 2017) could be adapted for this task.

Acknowledgments

This work is funded from the European Research
Council (ERC), under the European Union’s Hori-
zon 2020 research and innovation programme
(FASTPARSE, grant agreement No 714150),
from the TELEPARES-UDC project (FFI2014-
51978-C2-2-R) and the ANSWER-ASAP project
(TIN2017-85160-C2-1-R) from MINECO, and
from Xunta de Galicia (ED431B 2017/01). We
gratefully acknowledge NVIDIA Corporation for
the donation of a GTX Titan X GPU.

146



References
Miguel Ballesteros and Yaser Al-Onaizan. 2017. AMR

Parsing using Stack-LSTMs. In Proceedings of the
2017 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1280–1286, Copen-
hagen, Denmark. Association for Computational
Linguistics.

Laura Banarescu, Claire Bonial, Shu Cai, Madalina
Georgescu, Kira Griffitt, Ulf Hermjakob, Kevin
Knight, Philipp Koehn, Martha Palmer, and Nathan
Schneider. 2013. Abstract meaning representation
for sembanking. In Proceedings of the 7th Linguis-
tic Annotation Workshop and Interoperability with
Discourse, pages 178–186.

Shu Cai and Kevin Knight. 2013. Smatch: an Evalua-
tion Metric for Semantic Feature Structures. In ACL
(2), pages 748–752.

Michael A Covington. 2001. A fundamental algorithm
for dependency parsing. In Proceedings of the 39th
annual ACM southeast conference, pages 95–102.

Marco Damonte, Shay B. Cohen, and Giorgio Satta.
2017. An Incremental Parser for Abstract Mean-
ing Representation. In Proceedings of the 15th Con-
ference of the European Chapter of the Association
for Computational Linguistics: Volume 1, Long Pa-
pers, pages 536–546, Valencia, Spain. Association
for Computational Linguistics.

Chris Dyer, Miguel Ballesteros, Wang Ling, Austin
Matthews, and Noah A. Smith. 2015. Transition-
Based Dependency Parsing with Stack Long Short-
Term Memory. In Proceedings of the 53rd Annual
Meeting of the Association for Computational Lin-
guistics and the 7th International Joint Conference
on Natural Language Processing (Volume 1: Long
Papers), pages 334–343, Beijing, China. Associa-
tion for Computational Linguistics.

D. Fernández-González and C. Gómez-Rodrı́guez.
2017. Non-Projective Dependency Parsing with
Non-Local Transitions. ArXiv e-prints.

Jeffrey Flanigan, Chris Dyer, Noah A Smith, and
Jaime Carbonell. 2016. CMU at SemEval-2016 task
8: Graph-based AMR Parsing with Infinite Ramp
Loss. In Proceedings of the 10th International
Workshop on Semantic Evaluation (SemEval-2016),
pages 1202–1206.

Jeffrey Flanigan, Sam Thomson, Jaime Carbonell,
Chris Dyer, and Noah A. Smith. 2014. A Discrim-
inative Graph-Based Parser for the Abstract Mean-
ing Representation. In Proceedings of the 52nd An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1426–
1436, Baltimore, Maryland. Association for Com-
putational Linguistics.

Daniel Gildea, Giorgio Satta, and Xiaochang Peng.
2018. Cache Transition Systems for Graph Parsing.
Computational Linguistics, in press.

Diederik Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In Proceedings
of the 3rd International Conference for Learning
Representations, San Diego, USA.

Heeyoung Lee, Mihai Surdeanu, and Dan Jurafsky.
2017. A scaffolding approach to coreference reso-
lution integrating statistical and rule-based models.
Natural Language Engineering, pages 1–30.

Christopher D. Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven J. Bethard, and David Mc-
Closky. 2014. The Stanford CoreNLP natural lan-
guage processing toolkit. In Association for Compu-
tational Linguistics (ACL) System Demonstrations,
pages 55–60.

David Nadeau and Satoshi Sekine. 2007. A sur-
vey of named entity recognition and classification.
Lingvisticae Investigationes, 30(1):3–26.

Vincent Ng and Claire Cardie. 2002. Improving ma-
chine learning approaches to coreference resolution.
In Proceedings of the 40th annual meeting on as-
sociation for computational linguistics, pages 104–
111. Association for Computational Linguistics.

Joakim Nivre. 2008. Algorithms for deterministic in-
cremental dependency parsing. Computational Lin-
guistics, 34(4):513–553.

Joakim Nivre. 2009. Non-projective dependency pars-
ing in expected linear time. In Proceedings of the
Joint Conference of the 47th Annual Meeting of the
ACL and the 4th International Joint Conference on
Natural Language Processing of the AFNLP: Vol-
ume 1-Volume 1, pages 351–359. Association for
Computational Linguistics.

Martha Palmer, Daniel Gildea, and Paul Kingsbury.
2005. The proposition bank: An annotated cor-
pus of semantic roles. Computational linguistics,
31(1):71–106.

Martha Palmer, Daniel Gildea, and Nianwen Xue.
2010. Semantic role labeling. Synthesis Lectures
on Human Language Technologies, 3(1):1–103.

Xiaochang Peng, Daniel Gildea, and Giorgio Satta.
2018. AMR parsing with cache transition systems.
In Proceedings of the National Conference on Arti-
ficial Intelligence (AAAI-18). In press.

Peng Qi and Christopher D. Manning. 2017. Arc-swift:
A Novel Transition System for Dependency Parsing.
In Proceedings of the 55th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 2:
Short Papers), pages 110–117, Vancouver, Canada.
Association for Computational Linguistics.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. Journal of machine learning re-
search, 15(1):1929–1958.

147



Milan Straka, Jan Hajic, and Jana Straková. 2016. UD-
Pipe: Trainable Pipeline for Processing CoNLL-
U Files Performing Tokenization, Morphological
Analysis, POS Tagging and Parsing. In LREC.

David Vilares and Carlos Gómez-Rodrı́guez. 2017. A
non-projective greedy dependency parser with bidi-
rectional lstms. Proceedings of the CoNLL 2017
Shared Task: Multilingual Parsing from Raw Text
to Universal Dependencies, pages 152–162.

Chuan Wang, Nianwen Xue, and Sameer Pradhan.
2015. A transition-based algorithm for AMR pars-
ing. In Proceedings of the 2015 Conference of
the North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies, pages 366–375.

Daniel Zeman, Martin Popel, Milan Straka, Jan Ha-
jic, Joakim Nivre, Filip Ginter, Juhani Luotolahti,
Sampo Pyysalo, Slav Petrov, Martin Potthast, et al.
2017. CoNLL 2017 shared task: multilingual pars-
ing from raw text to universal dependencies. Pro-
ceedings of the CoNLL 2017 Shared Task: Multilin-
gual Parsing from Raw Text to Universal Dependen-
cies, pages 1–19.

A Supplemental Material

Table 5 indicates the features used to train the dif-
ferent classifiers. Concept features are random-
ized by � = 2e−3 to an special index that refers
to an unknown concept during the training
phase. This helps learn a generic embedding for
unseen concepts in the test phase. Also, concepts
that occur only one time in the training set are not
considered as output classes by Cc.

Internal and external (from GloVe) word em-
bedding sizes are set to 100. The size of the con-
cept embedding is set to 50. The rest of the embed-
dings size are set to 20. The weights are initialized
to zero.

B Additional design decisions

We try to list more in detail the main hooks and de-
sign decisions followed in this work to mitigate the
high sparsity in Abstract Meaning Representation
which, at least in our experience, was a struggling
issue. These decisions mainly affect the mapping
from words to multiple-concept subgraphs.

• We identify named entities and nationalities,
and update the training configurations to gen-
erate the corresponding subgraph by applying a
set of hooks.5 The intermediate training config-
5The hooks are based on the text file resources for coun-

tries, cities, etc, released by Damonte et al. (2017) and an
analysis of how named entities are generated in the train-
ing/development set.

Features Tc Rc Cc
From β0, β1, λ10 , λ11
POS X X X
W X X X
EW X X X
C X X X
ENTITY X X X
LMh X X
LMc X X
LMcc X X
RMh X X
RMc X X
RMcc X X
NH, NC X X
DEPTH X X X
NPUNKT X X
HL X X
CT X X
G X
Labels from the predicted
dependency tree
D(bj , ik) ∀j, k j ∈ [0, 1] X X X
∧ k ∈ [0, 1, 2, 3]

Table 5: Set of proposed features for each classifier.
POS, W, C, ENTITY are part-of-speech tag, word, con-
cept and entity embeddings. EW are pre-trained exter-
nal word embeddings, fine-tuned during the training
phase (http://nlp.stanford.edu/data/glove.6B.zip, 100
dimensions). LM and RM are the leftmost and the right-
most function; and h, c, cc represent head, child and
grand-child concepts of a concept; so, for example,
LMc stands for the leftmost child of the concept. NH
and NC are the number of heads and children of a con-
cept. NPUNKT indicates the number of ‘.’, ‘;’, ‘:’, ‘?’,
‘!’ that have already been processed. HL denotes the
labels of the last assigned head. CT indicates the type
of concept (constant, propbank frameset, other). G in-
dicates if a concept was generated using a CONFIRM or
BREAKDOWN. D denotes the dependency label exist-
ing in the dependency tree between the word at the jth
position in β and the kth last in λ1 and vice versa. The
word that generated a concept is still accessible after
creating the concept.

urations are not fed as samples to the classifier.
On early experiments it was observed that the
BREAKDOWN transition could acceptably learn
non-sparse named entities (e.g. countries and
nationalities), but failed on the sparse ones (e.g.
dates or money amounts). By processing the
named entities with hooks instead, the aim was
to make the parser familiar with the parsing con-
figurations that are obtained after applying the
hooks.

• Additionally, named-entity subgraphs and sub-
graphs coming from phrases (involving two or
more terms) from the training set are saved into
a lookup table. The latter ones had little impact.

148



• We store in a lookup table some single-word ex-
pressions that generated multiple-concept sub-
graphs in the training set, based on simple
heuristics. We store words that denote a neg-
ative expression (e.g. undecided that maps to
decide-01 :polarity -). We store words
that always generated the same subgraph and
occurred more than 5 times. We also store cap-
italized single words that were not previously
identified as named entities.

• We use the verbalization list from Wang et al.
(2015) (another lookup table).

• When predicting a CONFIRM or BREAKDOWN
for an uncommon word, we check if that word
was mapped to a concept in the training set. If
not, we generate the concept lemma-01 if it is
a verb, otherwise lemma.

• Dates formatted as YYMMDD or YYYYM-
MDD are identified using a simple criterion (se-
quence of 6 or 8 digits) and transformed into
YYYY-MM-DD on the test phase, as they were
consistently misclassified as integer numbers in
the development set.

• We apply a set of hooks similar to (Damonte
et al., 2017) to determine if the predicted label
is valid for that edge.

• We forbid to generate the same concept twice
consecutively. Also, we set α = 4 for BREAK-
DOWNα.

• If a node is created, but it is not attached to any
head node, we post-process it and connect to the
root node.

• We assume multi-sentence graphs should con-
tain sentence punctuation symbols. If we pre-
dict a multi-sentence graph, but there is no
punctuation symbol that splits sentences, we
post-process the graph and transform the root
node into an AND node.

149


