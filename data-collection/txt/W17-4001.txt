

















































Failure Transducers and Applications in
Knowledge-Based Text Processing

Stoyan Mihov
Institute of Information and

Communication Technologies
Bulgarian Academy of Sciences

25A, Acad. G. Bonchev Str.,
Sofia 1113, Bulgaria

stoyan@lml.bas.bg

Klaus U. Schulz
Centrum für Informations- und

Sprachverarbeitung (CIS)
Ludwig-Maximilians-Universität München

Oettingenstr. 67,
80538 München, Germany

schulz@cis.uni-muenchen.de

Abstract

Finite-state devices encoding lexica and
related knowledge bases often become
very large. A well-known technique for
reducing the size of finite-state automata
is the use of failure transitions. Here we
generalize the concept of failure transi-
tions for finite-state automata to the case
of subsequential transducers. Failure tran-
sitions in the new sense do not have in-
put but may produce output. As an ap-
plication field for failure transducers we
consider text rewriting with large rewrite
lexica under the leftmost-longest replace-
ment strategy. It is shown that using fail-
ure transducers leads to a huge space re-
duction compared to the use of standard
subsequential transducers. As a concrete
example we show how all Wikipedia con-
cepts in an input text can be linked in an
online manner with the Wikipedia pages
of the concepts using failure transducers.

1 Introduction

A wellknown technique for reducing the size of
large finite-state automata is the use of failure tran-
sitions (Aho and Corasick, 1975; Mohri, 1995;
Crochemore and Hancart, 1997; Kourie et al.,
2012; Björklund et al., 2014). While automata
help to find strings in text, more advanced text pro-
cessing tasks are often based on knowledge bases
that provide information on characteristic portions
of input texts (endings, words, phrases, etc.). Us-
ing this information, given input texts are trans-
lated to a new output form. Examples for this form
of “text rewriting” include various forms of tag-
ging, stemming, and (linguistic, semantic,..) an-
notation (KESA, 2016).

There are a number of efficient techniques for

representing a finite dictionary of string entries
with their corresponding mappings as finite-state
machines and transducers (Mihov and Maurel,
2001; Daciuk et al., 2010). These techniques can
produce a very compact representation of the dic-
tionary. But in order to perform text rewriting
based on the dictionary one has to traverse the dic-
tionary starting from each text position and in ad-
dition apply a conflict resolution strategy. There-
fore the time complexity for text rewriting is given
by the length of the text multiplied by the maximal
length of a dictionary entry.

Deterministic finite-state transducers offer an
elegant framework to solve such a text process-
ing task in a more efficient way. In (Mihov and
Schulz, 2007) we considered “rewriting dictionar-
ies”, i.e. collections of strings where for each en-
try a replacement value (another string) is speci-
fied. We showed how to translate a given rewriting
dictionary into a subsequential finite-state trans-
ducer that may be used to replace all occurrences
of dictionary entries in a text by the replacements
with only one traversal of the text by the trans-
ducer. Using this solution, the time complexity for
text rewriting is linear in the length of the text and
does not depend on the dictionary. For resolving
conflicts between overlapping entries the leftmost-
largest rewriting strategy is used. However, when
using large rewriting dictionaries the size of the re-
sulting subsequential transducer can become very
large. A similar technique is used by Schmitz
in (Schmitz, 2011) for constructing subsequential
transducers that represent part-of-speech rules.

In this paper we introduce f-transducers, a new
kind of deterministic transducer with failure tran-
sitions. A failure transition in our sense does not
consume input, but it is essential that it may pro-
duce output. We show how to translate a given
rewriting dictionary into an f-transducer that has
the same functionality as the subsequential finite-

1

Proceedings of the 13th International Conference on Finite State Methods and Natural Language Processing, pages 1–9,
Umeå, Sweden, 4–6 September 2017. c© 2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/W17-4001

https://doi.org/10.18653/v1/W17-4001


state transducer obtained in (Mihov and Schulz,
2007). In this way, a huge space reduction is ob-
tained for large rewriting dictionaries. Since tran-
sitions in transducers come with output, saving
transitions has even a larger benefit than in the au-
tomaton case. As a concrete application we con-
sider a rewriting dictionary with 8 million entries
where each title of a page of the English Wikipedia
obtains a link text with anchor on the correspond-
ing page of the concept. The f-transducer obtained
from the translation runs over a text and replaces
every mentioning of a Wikipedia concept by a link
to the Wikipedia page. In this way, texts can be
linked to the Wikipedia in an online-manner.

We start with formal preliminaries in Section 2.
In Section 3 we introduce failure transducers. Sec-
tion 4 presents the construction of f-transducers
for text rewriting. The algorithm and complex-
ity analysis of our construction is given in Sec-
tion 5. Section 6 describes the annotation of con-
cept names with Wikipedia. We finish with a short
conclusion in Section 7.

2 Formal Preliminaries

An alphabet is a finite set Σ of symbols. Words of
length n ≥ 0 over an alphabet Σ are introduced as
usual and written a1 . . . an (ai ∈ Σ). The unique
word of length 0 is written ε. As usual, Σ∗ denotes
the set of all words over Σ. The concatenation of
two words u, v ∈ Σ∗ is written u · v or uv.

Definition 2.1 A deterministic finite-state au-
tomaton is a tuple

A = 〈Σ, Q, i, F, δ〉

where Σ is an alphabet, Q is a finite set of states,
i ∈ Q is the start state, F ⊆ Q is the set of
final states, and δ : Q × Σ → Q is a par-
tial function called the transition function. Let
A = 〈Σ, Q, i, F, δ〉 be a deterministic finite-state
automaton. The generalized transition function is
the partial function δ∗ : Q× Σ∗ → Q inductively
defined as

• δ∗(q, ε) := q for all q ∈ Q,

• δ∗(q, wσ) := δ(δ∗(q, w), σ) for all q ∈ Q,
w ∈ Σ∗, σ ∈ Σ such that δ∗(q, w) and
δ(δ∗(q, w), σ) are defined.

The language accepted by A is L(A) := {w ∈
Σ∗ | δ∗(i, w) ∈ F}.

Definition 2.2 A failure automaton or f-
automaton is a tuple

FA = 〈Σ, Q, i, F, δ, f〉

where 〈Σ, Q, i, F, δ, f〉 is a deterministic finite-
state automaton and f : Q → Q is a partial
function called the failure function. Let FA =
〈Σ, Q, q0, F, δ, f〉 be an f-automaton. The com-
pleted transition function δf : Q × Σ → Q is the
least (with respect to ⊆) function δ′ : Q×Σ→ Q
such that δ′(q, σ) :={

δ(q, σ) if δ(q, σ) is defined,
δ′(f(q), σ) otherwise, if f(q) is defined.

Similarly as δ and f also δf is a partial function.
The generalized completed transition function is
the (partial) function δ∗f : Q×Σ∗ → Q inductively
defined as

1. for all q ∈ Q: δ∗f (q, ε) := q,

2. for all q ∈ Q, u ∈ Σ∗ and σ ∈ Σ such
that δ∗f (q, u) and δf (δ

∗
f (q, u), σ) are defined:

δ∗f (q, uσ) := δf (δ
∗
f (q, u), σ).

The language of the f-automaton FA is defined as

L(FA) = {w ∈ Σ∗ | δ∗f (q0, w) ∈ F}.

Definition 2.3 A subsequential transducer is
a tuple T = 〈Σ, Q, q0, F, δ, λ,Ψ〉 where
〈Σ, Q, q0, F, δ〉 is a deterministic finite-state au-
tomaton, λ : Q × Σ → Σ∗ is a partial func-
tion called the transition output function and Ψ :
F → Σ∗ is a total function called the state output
function. The domains of δ and λ must coincide.
The generalized transition function δ∗ is defined
as above. The generalized output function is the
partial function λ∗ : Q× Σ∗ → Σ∗ defined as

• λ∗(q, ε) := ε for all q ∈ Q,

• λ∗(q, wσ) := λ∗(q, w) ·λ(δ∗(q, w), σ) for all
q ∈ Q,w ∈ Σ∗, σ ∈ Σ such that δ∗(q, w) and
δ(δ∗(q, w), σ) are defined.

The sets Linp(T ) := {w ∈ Σ∗ | δ∗(q0, w) ∈ F}
and L(T ) :=

{〈w, λ∗(q0, w) ·Ψ(δ∗(q0, w))〉 | δ∗(q0, w) ∈ F}

are respectively called the input language and the
function represented by T .

2



The notion of paths in a finite-state device and the
length of a path are introduced as usual.

Definition 2.4 A position of t ∈ Σ∗ is a pair
〈u, v〉 such that t = uv. An infix occurrence (of
the infix v) in t ∈ Σ∗ is a triple 〈u, v, w〉 such that
t = uvw. An infix occurrence 〈u1, v1, w1〉 of the
text t blocks another infix occurrence 〈u2, v2, w2〉
of t if |u1| < |u2| < |u1v1|. In this case we write
〈u1, v1, w1〉 <ov 〈u2, v2, w2〉 and say that the two
infix occurrences overlap. A set A of infix occur-
rences of the text t is said to be non-overlapping if
two distinct infix occurrences of A never overlap.

Definition 2.5 Let A,B be two sets of infix oc-
currences of the text t. We define
AFTER(A,B) :=

{〈u, v, w〉 ∈ A | ∀
〈
u′, v′, w′

〉
∈ B : |u′v′| ≤ |u|}

LEFTMOST(A) :=

{〈u, v, w〉 ∈ A | ∀
〈
u′, v′, w′

〉
∈ A : |u| ≤ |u′|}

LONGEST(A) :=

{〈u, v, w〉 ∈ A | ∀
〈
u′, v′, w′

〉
∈ A :

|u| 6= |u′| ∨ |v′| ≤ |v|}

Definition 2.6 Let A be set of infix occurrences
of the text t. The subset of leftmost-longest infix
occurrences of A is the set LML(A) :=

⋃∞
i=0 Vi

where V0 := ∅ and Vi+1 :=

Vi ∪ LONGEST(LEFTMOST(AFTER(A,Vi))).

3 Failure transducers

Failure transducers, or f-transducers, represent a
kind of deterministic transducer with a failure
transition function. When applying a failure tran-
sition during text traversal, an empty part of the
input is consumed. However, a non-empty output
string may be produced. We start with an illustrat-
ing example.

Example 3.1 Consider the transducer in the up-
per part of Figure 1. Similarly as State 1, State
2 has outgoing transitions for input letters a, b,
and c. Corresponding transitions lead to the same
state. After introducing a failure transition from
2 to 1 with output D we can eliminate the stan-
dard transitions departing from State 2. The new
transducer with failure transitions is shown below.
Note that both the number of transitions and the
size of the output representation has been reduced.

Figure 1: Illustration for Example 3.1: Com-
pressing deterministic finite-state transducers us-
ing failure transitions.

When reading, say, symbol a in State 2, we follow
the failure link to 1, producing output D. Then we
use the a-transition from 1 to arrive at State 3. The
total output is DA. The example might appear ar-
tificial since with other outputs we could not use
the same technique. However, we shall see later
that moving parts of the output to the failure tran-
sitions is often possible.

Transducers that are used for rewriting texts need
to accept arbitrary strings. For this reason we do
not introduce a special set of final states in our for-
malization of failure-transducers. As a matter of
fact, generalizations are possible.

Definition 3.2 An f-transducer is a tuple

FT = 〈Σ, Q, q0, δ, λ, ϕ, f〉

where Σ is a finite alphabet, Q is a set of states,
q0 ∈ Q is the start state, δ : Q × Σ → Q is the
deterministic transition function, λ : Q×Σ→ Σ∗
is the transition output function, ϕ : Q → Σ∗ is
the failure transition output function, and f : Q→
Q is the failure transition function. The following
conditions must hold:

1. ϕ and f are partial functions such that
dom(ϕ) = dom(f).

3



2. the domains of δ and λ are identical, i.e.,
dom(δ) = dom(λ).

Definition 3.3 Let FT = 〈Σ, Q, q0, δ, λ, ϕ, f〉
be an f-transducer. The completed transition
function δf : Q × Σ → Q and the generalized
completed transition function δ∗f : Q × Σ∗ → Q
are defined as in Definition 2.2. The completed
transition output function λf : Q × Σ → Σ∗ is
defined as the least (with respect to ⊆) function
λ′ : Q× Σ→ Σ∗ such that λ′(q, σ) :={
λ(q, σ) if δ(q, σ) is defined,
ϕ(q)λ′(f(q), σ) otherwise, if f(q) is defined.

The generalized completed transition output func-
tion λ∗f : Q × Σ∗ → Σ∗ is inductively defined
as

1. For all q ∈ Q: λ∗f (q, ε) := ε,

2. For all q ∈ Q, u ∈ Σ∗ and σ ∈ Σ:
λ∗f (q, uσ) := λ

∗
f (q, u)λf (δ

∗
f (q, u), σ).

The final state output function Ψf : Q → Σ∗ is
defined as Ψf (q) :={

ε if f(q) is undefined,
ϕ(q)Ψf (f(q)) otherwise.

Let t be a text. The output of the f-transducer FT
for input t is

OFT (t) := λ
∗
f (q0, t)Ψf (δ

∗
f (q0, t)).

Informally, the way how an f-transducer processes
a text t can be described as follows: starting from
the start state and using the deterministic transition
function δ we read the symbols of the text. The
output at each transition is defined by the transi-
tion output function. When reaching a state p and
a text symbol σ such that δ(p, σ) is not defined
we apply a series of failure transitions until we ar-
rive at a state pn such that δ(pn, σ) = p′ is defined.
The output produced on this intermediate walk has
two parts. The first part is the concatenation of
all failure transition outputs of the states p, . . . , pn
visited. The second part is given by the transition
output of the final σ-transition. Finally, when ar-
riving at state q at the end of the text, we apply a
series of failure transitions, producing failure tran-
sition outputs, until we reach a state for which the
failure function is not defined.

The following lemma shows that an f-
transducer FT in a natural way defines a corre-
sponding subsequential transducer with the same

output function. The proof is a direct consequence
of our definition of the output function OFT .

Lemma 3.4 Let FT = 〈Σ, Q, q0, δ, λ, ϕ, f〉 be
an f-transducer, let δf , λf , and Ψf as above. Then
TFT := 〈Σ, Q, q0, Q, δf , λf ,Ψf 〉 is a subsequen-
tial transducer and we have OFT = OTFT .

In what follows we consider failure transducers
FT where each state q can be reached from the
start state. The depth of a state q ∈ Q, denoted
d(q), is the minimal length of a path from start q0
to q.

Definition 3.5 A backwards f-transducer is an f-
transducer

FT = 〈Σ, Q, q0, δ, λ, ϕ, f〉

such that for every q ∈ Q we have d(q) >
d(f(q)).

Proposition 3.6 The time complexity (assuming a
random access machine) for rewriting a word α of
length n to a word β of length m by a backwards
f-transducer is O(n+m) and does not depend on
the size of the transducer.

The simple proof is omitted.

4 From rewrite dictionaries to
f-transducers

As an application field for f-transducers we now
look at text rewriting using dictionaries of a par-
ticular form.

Definition 4.1 (Mihov and Schulz, 2007) A
rewrite dictionary is a pair D = (D,Σ) where Σ
is an alphabet and D is a finite mapping of words
over Σ. The mapping can be represented in the
form

D = {αi 7→ βi | 1 ≤ i ≤ k}

such that αi 6= αj for i 6= j ∈ {1, 2, . . . , k}. Each
string αi is called an entry or an original of D,
and βi is called the replacement value for αi (i =
1, . . . , k).

Definition 4.2 Let t ∈ Σ∗ be a text and D =
(D,Σ) be a rewrite dictionary. A rewrite occur-
rence of D in t is an infix occurrence 〈u, v, w〉t
such that v ∈ dom(D). By CDt we denote the set
of all rewrite occurrences of D in the text t. The
global rewriting function associated with D is the
mapping L(D) : Σ∗ → Σ∗ that given an input
text t replaces each leftmost-longest infix occur-
rence of CDt in t by the corresponding replacement
value.

4



Example 4.3 (From (Mihov and Schulz, 2007)).
Let D denote the rewriting dictionary with alpha-
bet Σ := {a, b, c, 1, 2, 3, 4, 5} and mapping D of
the form

(a 7→ 1)
(ab 7→ 2)

(abcc 7→ 3)
(babc 7→ 4)

(c 7→ 5)

The leftmost-longest infix occurrences of CDt in
the text t = abcbbbabccb are

〈�, ab, cbbbabccb〉
〈ab, c, bbbabccb〉
〈abcbb, babc, cb〉
〈abcbbbabc, c, b〉

and L(D)(t) = 25bb45b.
We now describe a procedure for translating a
rewrite lexicon D into a backwards f-transducer
FT such that the global rewriting function L(D)
associated with D and OFT are identical. The
construction is a variant of the construction pre-
sented (Mihov and Schulz, 2007) for translat-
ing rewrite dictionaries into standard subsequen-
tial transducers. As in (Mihov and Schulz, 2007)
we proceed in two steps.
Step 1. Given the rewrite lexiconD, as in (Mihov
and Schulz, 2007) we build a trie transducer TD
representing the domain of the lexicon mapping
D. The final states of TD correspond to the entries
(“originals”) ofD, and the failure transition output
of each final state is defined as the image of the en-
try. The transition output for each transition is the
empty string ε. The trie transducer thus represents
the finite mapping D given by D.
Step 2. The second step, where we build the fail-
ure transducer FT representing the global rewrit-
ing function for D, is based on a procedure where
we visit the states of the trie transducer in a
breadth-first manner, starting at the initial state q0.
We first complete the initial state q0 adding loop
transitions with any symbol σ ∈ Σ such that there
is no outgoing σ-transition from q0 in the trie. The
transition output for a loop transitions with symbol
σ is σ. For all states q which are direct ancestors of
q0 i.e. such that q = δ(q0, σ) we define f(q) := q0
and ϕ(q) := σ if q is not final. In case q is final
the function ϕ(q) is already defined.

Figure 2: Trie-transducer (Step 1) and f-transducer
(Step 2) obtained for the rewrite lexicon from Ex-
ample 4.4.

Assume now that for the state q 6= q0 we have
already defined f(q) = p′q and ϕ(q) = γ

′
q. Let

q′ = δ(q, σ) be an ancestor of q in the trie.
Case a. If q′ is a final state of the trie transducer

- i.e., if the failure transition output ϕ(q′) for q is
already defined - we just define f(q′) := q0.

Case b. In the other case we define f(q′) :=
δf (p

′
q, σ) and ϕ(q

′) := γ′q · λf (p′q, σ).
The definition of δf shows that we find state f(q′)
by starting from f(q) = p′q and applying failure
transitions until we arrive at a state pn such that
δ(pn, σ) = f(q

′) is defined.

Example 4.4 As an illustration for the translation
of rewrite lexica into f-transducer we use the re-
wite lexicon from Example 4.3. The resulting
trie transducer (Step 1) and f-transducer (Step 2)
are shown in Figure 2. When processing text
t = abcbbbabccb we first read prefix abc with no
output. Then two failure transitions produce out-
put 25 before we can read the next letter b from
the start. After reading t we have produced output
25bb45 and the current state is the b-successor of
the start. We have to add the final state output for
this state, which is given by the failure transition
output b (cf. Def. 3.3). The total output is 25bb45b
as in Example 4.3.

Remark 4.5 For the following correctness proof
we sketch Step 2 of the parallel construction of a
subsequential transducer T in (Mihov and Schulz,
2007). Recall that in this case for each state q and

5



each symbol σ ∈ Σ such that q does not have
a σ transition in the transducer trie TD a new σ-
transition with suitable output needs to be added.
For q0 the procedure is as above (as for each state,
also q0 is made final). Consider a state q0 6= q
processed during Step 2. Let plab(q) = a1 . . . ar
denote the label of the path π in the trie from q0 to
q. The skip part of plab(q) = a1 . . . ar, denoted
u1, is:

1. a1 if the state sequence π does not contain
any final state of TD, and

2. a1 · · · af (f ≤ r) if this prefix of plab(q)
leads from q0 to the last final state of π.

The read part of plab(q) (denoted u2) is the re-
maining part u2 of plab(q) = u1u2. Note that the
read part is the empty word if q is a final state of
TD or if q is a direct successor of the start state q0.
The failure state for q is the state p′ obtained when
traversing the transducer T with the read part u2,
starting from q0. The construction order guaran-
tees that u2 can be completely read in the prelim-
inary version of the subsequential transducer T
computed up to this point since the length of the
read part u2 is smaller than the length of plab(q).
The output prefix for q is the string γ′ that rep-
resents the concatenation of (i) the output of the
transducer T for the skip part u1 (either a1 or the
substitute for the lexical entry a1 · · · af , cf. cases
above) and (ii) the transition output of the trans-
ducer T for the read part u2 when starting from
q0. With these notions, the processing of q can be
described in the following way:

1. The state output for q is the concatenation of
the output prefix γ′ with the state output of
the failure state p′.

2. If a new σ-transition from q is needed, the
target state is the σ-successor of the failure
state for q (it always exists since the failure
state has smaller depth than q). The transition
output for the new σ-transition from q is the
concatenation of the output prefix γ′ with the
transition output of the transition with label σ
from the failure state p′.

Correctness proof. Because of space lim-
itations, an independent and fully selfcontained
proof cannot be given here. However, using the
correctness of the parallel construction in (Mihov

and Schulz, 2007) (shown in the paper) and Re-
mark 4.5 we can prove correctness of the new con-
struction. Let

FT = 〈Σ, Q, q0, δ, λ, ϕ, f〉

denote the f-transducer obtained. Let

T = 〈Σ, Q, q0, Q, δT , λT ,ΨT 〉

denote the subsequential transducer obtained from
the construction described in (Mihov and Schulz,
2007). The following lemma captures some paral-
lelisms between the two devices. We use the nota-
tion introduced in Definition 3.3.

Lemma 4.6 1. For any state q 6= q0 the state
f(q) is the failure state of q in the sense of
Remark 4.5. We have d(f(q)) < d(q).

2. For any state q and any letter σ we
have δT (q, σ) = δf (q, σ). Furthermore
d(δT (q, σ)) ≤ d(q) + 1.

3. For any state q 6= q0 the failure transition
output ϕ(q) is the output prefix γ′(q) in the
sense of Remark 4.5.

4. For any state q and any letter σ we have
λT (q, σ) = λF (q, σ).

The proof for Lemma 4.6 is given in below. Look-
ing at Part 3 of Lemma 4.6 it is simple to see
that for each state q we have ΨT (q) = Ψf (q).
When we now compare the outputs produced for
a text t by T and FT respectively we find, using
Lemma 4.6, that

OT (t) = λ
∗
T (q0, t) ·ΨT (δT (q0, t))

= λ∗f (q0, t) ·Ψf (δf (q0, t)) = OFT (t).

In (Mihov and Schulz, 2007) it has been shown
that OT represents the global rewrite function
L(D) for the rewrite lexicon D under the left-
most largest strategy in the sense of Definition 4.2.
Hence the same holds for OFT , which shows that
the new construction is correct.

Proof of Lemma 4.6. Recall that for a state q,
the length of the unique path from q0 to q in the
transducer trie is denoted d(q). The proof is by
induction on d(q). If d(q) = 0 we have q = q0.
In this case, Claims 2 and 4 are obvious since we
have δT (q0, σ) = δf (q0, σ) ={

δ(q0, σ) if δ(q0, σ) is defined,
q0 otherwise.

6



and λT (q0, σ) = λF (q0, σ) ={
ε if δ(q0, σ) is defined,
σ otherwise.

There is nothing to show as to Claims 1 and 3.
For the induction step consider a successor state

q = δ(q′, σ′). Let p′ denote the failure state of q′ in
the sense of Remark 4.5. Let p := δT (p′, σ′). By
induction hypothesis we have (i) p′ = f(q′) and
(ii) δT (p′, σ′) = δf (p′, σ′). Furthermore d(p′) <
d(q′) < d(q) and d(p) ≤ d(p′) + 1 < d(q).

We show Claim 1. If q is final, then q0 = f(q)
is the failure state of q in the sense of Remark 4.5.
In the other case the failure state of q in the sense
of Remark 4.5 is p = δT (p′, σ′) = δf (p′, σ′) =
δf (f(q

′), σ′) = f(q).
We show Claim 2. Let σ ∈ Σ. If δ(q, σ) is

defined we have δT (q, σ) = δ(q, σ) = δf (q, σ).
In the other case, first consider the case where
q is final. Then q0 is the failure state for
q and δT (q, σ) = δT (q0, σ) = δf (q0, σ) =
δf (f(q), σ) = δf (q, σ). By induction hypothe-
sis d(δf (q0, σ)) ≤ 1 and thus d(δT (q, σ)) ≤ 1 <
d(q)+1. If q is not final, then p = δT (p′, σ′) is the
failure state for q. We have seen that d(p) < d(q).
By induction hypothesis δT (p, σ) = δf (p, σ).
Claim 1 shows that p = f(q). Hence

δT (q, σ) = δT (p, σ) = δf (p, σ)

= δf (f(q), σ) = δf (q, σ).

We have d(δT (q, σ)) = d(δT (p, σ)) ≤ d(p)+1 ≤
d(q) + 1.

We show Claim 3. If q is final, then γ′(q) =
ΨT (q) = ϕ(q) (note that ΨT (q) is the state output
for q in the transducer trie). In the other case, by
induction hypothesis we have γ′(q′) = ϕ(q′) and
λT (p

′, σ′) = λF (p
′, σ′). In this situation

γ′(q) = γ′(q′) · λT (p′, σ′) = ϕ(q′) · λT (p′, σ′)
= ϕ(q′) · λF (p′, σ′) = ϕ(q).

We show Claim 4. Let σ ∈ Σ. If δ(q, σ) is
defined we have λT (q, σ) = ε = λF (q, σ). In the
other case we have λT (q, σ) = γ′(q) · λT (p, σ)
where γ′(q) is the output prefix for q in the sense
of Remark 4.5. Using Claim 3 and the induction
hypothesis we see that

λT (q, σ) = ϕ(q) · λT (p, σ)
= ϕ(q) · λf (p, σ) = λf (q, σ).

5 Implementation and complexity
analysis

Algorithm 1 presents the pseudo-code of the con-
struction. Clearly, the number of states of the
f-transducer is bounded by ||DI || + 1 and the
number of transitions is bounded by 2||DI || and
does not depend on the alphabet size, where
||DI || =

∑
〈α,β〉∈D |α|. The complexity of

the trie construction is O(||D||), where ||D|| =∑
〈α,β〉∈D |α|+ |β|. If each output string is repre-

sented in the standard way as a sequence of sym-
bols, the space complexity of ϕ can get cubic in
||D||. Using the technique for tree-based out-
put string representation introduced in (Mihov and
Schulz, 2007) the space complexity remains lin-
ear in ||D||. In that case the space and time com-
plexity of the proposed algorithm1 is O(||D||). In
contrast, the space and time complexity of the con-
struction presented in (Mihov and Schulz, 2007) is
O(||D|| · |Σ|) for an alphabet Σ. The complexity
for rewriting a text t to t′ is O(|t|+ |t′|).

6 Application for Online Hyperlinking
Using Link Databases

Document repositories often come with a large
number of internal or external links that lead from
concepts (entities, references, etc.) mentioned in
the text to other web pages. A well-known exam-
ple is the Wikipedia2. On a Wikipedia page, all
concepts of the text that are described in more de-
tail in some other article of the Wikipedia are high-
lighted. When clicking at the concept the visitor is
led to the relevant page of the Wikipedia, using an
internal link (wikilink). In the same way, arbitrary
texts can be linked with the Wikidedia.

To create a wikilink, concept names such
as “United Kingdom” or “Kingdom University”
mentioned in the text are replaced by anchor el-
ements of the form
<a href="/wiki/United_Kingdom">

United Kingdom</a>
<a href="/wiki/Kingdom_University">

Kingdom University</a>

In order to automatize this form of hyperlink-
ing, rewriting dictionaries may be used that list
relevant concept names (e.g. “United Kingdom”)
together with the corresponding anchor elements

1Assuming that in the function f-transducer the loop
transitions of q0 in Lines 5-6 are not explicitly generated and
the loops starting at Line 2 and Line 16 iterate only through
existing transitions.

2http://en.wikipedia.org/wiki/Main Page

7



Algorithm 1 Construction of an f-transducer for a given alphabet Σ and rewrite dictionary D.

Trie(Σ, D)
@1 q0 ← new state()
@2 Q← {q0}
@3 δ ← ∅
@4 λ← ∅
@5 ϕ← ∅
@6 for 〈α, β〉 ∈ D do
@7 q ← q0
@8 for each symbol σ of α do
@9 p← δ(q, σ)
@10 if p = nil then
@11 p← new state()
@12 Q← Q ∪ {p}
@13 δ(q, σ)← p
@14 λ(q, σ)← ε
@15 q ← p
@16 F ← F ∪ {q}
@17 ϕ(q)← β
@18 return 〈Σ, Q, q0, δ, λ, ϕ, ∅〉

f-transducer(Σ, D)
@1 〈Σ, Q, q0, δ, λ, ϕ, f〉 ← Trie(Σ, D)
@2 for σ ∈ Σ do
@3 q ← δ(q0, σ)
@4 if q = nil then
@5 δ(q0, σ)← q0
@6 λ(q0, σ)← σ
@7 else
@8 if !ϕ(q) then
@9 push queue(〈q, q0, ϕ(q)〉)
@10 else
@11 push queue(〈q, q0, σ〉)
@12 while not empty queue() do
@13

〈
q, p′q, γ

′
q

〉
← pull queue()

@14 f(q)← p′q
@15 ϕ(q)← γ′q
@16 for σ ∈ Σ do
@17 q′ ← δ(q, σ)
@18 if q′ 6= nil then
@19 if !ϕ(q′) then
@20 push queue(〈q′, q0, ϕ(q′)〉)
@21 else
@22 p′′ ← p′q
@23 γ′′ ← γ′q
@24 while δ(p′′, σ) = nil do
@25 γ′′ ← concat(γ′′, ϕ(p′′))
@26 p′′ ← f(p′′)
@27 push queue(〈q′, δ(p′′, σ), concat(γ′′, λ(p′′, σ))〉)
@28 return 〈Σ, Q, q0, δ, λ, ϕ, f〉

as a replacement. When processing a text with the
rewriting dictionary, each occurrence of a concept
name is replaced by the corresponding anchor el-
ement as a form of annotation. We note that the
rewriting dictionaries used for automated hyper-
linking are often extremely large.

Algorithm 1 has been applied for constructing
a rewrite f-transducer for annotating texts with the
anchor elements of practically all Wikipedia con-
cept names in English3. The rewrite dictionary has
8, 083, 029 entries and occupies 831 MB. The cor-
responding f-transducer was constructed by a not
optimized implementation of Algorithm 1 using
64 bits for pointer, number and character represen-
tation. The resulting f-transducer has 69, 037, 940
states and occupies 11.5 GB. On an Intel Xeon
CPU at 2.40 GHz the construction time is 63 min-
utes. Using the constructed f-transducer, 100 MB
of text are rewritten in approximately 19 seconds.
This makes it possible to maintain huge knowl-
edge bases in memory and rewrite texts in an on-
line matter. In the same way, texts could be linked
with any other collection of linked open data.

In order to compare the new construction with
the construction presented in (Mihov and Schulz,

3There can be multiple concept names for one Wikipedia
page.

time size
subseq. transducer 283 s 1170 MB
f-transducer 12 s 79 MB

Table 1: Translation of a 5 MB rewrite dictionary
into a text rewriting device. Construction times
and sizes when using a subsequential transducer
and an f-transducer.

2007) we used a 5 MB English correction dic-
tionary with 220, 231 entries. All words in the
correction dictionary are over the 26 lower case
English letters. The rewrite f-transducer is con-
structed in 12 seconds and occupies 79 MB. The
corresponding subsequential transducer is con-
structed in 283 seconds and occupies 1170 MB (cf.
Table 1).

7 Conclusion

In this paper we introduced the concept of fail-
ure transducers. We presented in detail the con-
struction of f-transducers for dictionary based text
rewriting under the left-most-longest match strat-
egy for conflict resolution. The advantage of the
new construction compared to the method pre-
sented in (Mihov and Schulz, 2007) is space and
construction time economy. The new construction

8



avoids the increase in complexity which is caused
by the enormous number of transitions needed for
subsequential transducers when using rewrite dic-
tionary over large alphabets. In our construction
the number of ordinary transitions and the num-
ber of failure transitions of the f-transducer are
bounded by the sum of the lengths of input words
in the dictionary and do not depend on the alpha-
bet size. This made it possible to construct an
f-transducer for annotating all concept names of
the English Wikipedia in a text in online manner
on a personal computer. The same technique can
be applied to similar forms of knowledge-based
text rewriting. In this way, interesting items in
input texts can be linked “on demand” in a user-
driven online manner to distict targets such as lex-
ica, authority pages, product catalogues and other
resources.

References
Alfred Aho and Margaret Corasick. 1975. Efficient

string matching: an aid to bibliographic search.
Communications of the ACM, 18:333–340.

Henrik Björklund, Johanna Björklund, and Niklas
Zechner. 2014. Compression of finite-state au-
tomata through failure transitions. Theoretical Com-
puter Science, 557:87–100.

Maxime Crochemore and Christophe Hancart. 1997.
Automata for matching patterns. In Handbook of
formal languages, pages 399–462. Springer.

Jan Daciuk, Jakub Piskorski, and Strahil Ristov, 2010.
Scientific Applications of Language Methods, chap-
ter Natural Language Dictionaries Implemented as
Finite Automata, pages 133–204. Imperial College
Press.

KESA. 2016. Third international workshop on knowl-
edge extraction and semantic annotation. In Pro-
ceedings ALLDATA 2016 The Second International
Conference on Big Data, Small Data, Linked Data
and Open Data, Lisbon, Portugal.

Derrick G. Kourie, Bruce W. Watson, Loek Cleophas,
and Fritz Venter. 2012. Failure deterministic fi-
nite automata. In Proceedings of Prague Stringol-
ogy Conference, pages 28–41.

Stoyan Mihov and Denis Maurel. 2001. Direct con-
struction of minimal acyclic subsequential transduc-
ers. In Proceedings of the Conference on Imple-
mentation and Application of Automata CIAA’2000,
number 2088 in LNCS, pages 217–229. Springer.

Stoyan Mihov and Klaus U. Schulz. 2007. Effi-
cient dictionary-based text rewriting using subse-
quential transducers. Natural Language Engineer-
ing, 13(4):353–381, December.

Mehryar Mohri. 1995. Matching patterns of an au-
tomaton. In Combinatorial Pattern Matching, pages
286–297. Springer.

Sylvain Schmitz. 2011. A note on sequential rule-
based pos tagging. In Proceedings of the 9th Inter-
national Workshop on Finite State Methods and Nat-
ural Language Processing, FSMNLP ’11, pages 83–
87, Stroudsburg, PA, USA. Association for Compu-
tational Linguistics.

9


	Introduction
	Formal Preliminaries
	Failure transducers
	From rewrite dictionaries to f-transducers
	Implementation and complexity analysis
	Application for Online Hyperlinking Using Link Databases
	Conclusion

