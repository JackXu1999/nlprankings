



















































Universal Dependencies to Logical Form with Negation Scope


Proceedings of the Workshop Computational Semantics Beyond Events and Roles (SemBEaR), pages 22–32,
Valencia, Spain, April 4, 2017. c©2017 Association for Computational Linguistics

Universal Dependencies to Logical Forms with Negation Scope

Federico Fancellu Siva Reddy Adam Lopez Bonnie Webber
ILCC, School of Informatics, University of Edinburgh

f.fancellu@sms.ed.ac.uk, siva.reddy@ed.ac.uk, {alopez, bonnie}@inf.ed.ac.uk

Abstract

Many language technology applications
would benefit from the ability to represent
negation and its scope on top of widely-
used linguistic resources. In this paper, we
investigate the possibility of obtaining a
first-order logic representation with nega-
tion scope marked using Universal De-
pendencies. To do so, we enhance UDe-
pLambda, a framework that converts de-
pendency graphs to logical forms. The re-
sulting UDepLambda¬ is able to handle
phenomena related to scope by means of
an higher-order type theory, relevant not
only to negation but also to universal quan-
tification and other complex semantic phe-
nomena. The initial conversion we did for
English is promising, in that one can repre-
sent the scope of negation also in the pres-
ence of more complex phenomena such as
universal quantifiers.

1 Introduction

Amongst the different challenges around the topic
of negation, detecting and representing its scope
is one that has been extensively researched in dif-
ferent sub-fields of NLP (e.g. Information Extrac-
tion (Velldal et al., 2012; Fancellu et al., 2016)).
In particular, recent work have acknowledged the
value of representing the scope of negation on top
of existing linguistic resources (e.g. AMR – Bos
(2016)). Manually annotating the scope of nega-
tion is however a time-consuming process, requir-
ing annotators to have some expertise of formal
semantics.

Our solution to this problem is to automatically
convert an available representation that captures
negation into a framework that allows a rich vari-
ety of semantic phenomena to be represented, in-

Malta borders no country

ROOT

NUSBJ NEG

DOBJ

(a) UD Dependency Tree

λe.∃x∃y.borders(e) ∧ country(x) ∧ no(x)∧
Malta(y) ∧ arg1(e, y) ∧ arg2(e, x)

(b) UDepLambda Logical Form

∀x.country(x)→ ¬∃e∃y.borders(e)∧
Malta(y) ∧ arg1(e, y) ∧ arg2(e, x)

(c) Desired Logical Form

Figure 1: The dependency tree for ‘Malta borders
no country’ and its logical forms

cluding scope. That is, given an input sentence,
we show how its universal dependency (UD) parse
can be converted into a representation in first-order
logic (FOL) with lambda terms that captures both
predicate–argument relations and scope.

Our approach is based on UDepLambda
(Reddy et al., 2017; Reddy et al., 2016), a
constraint framework that converts dependency
graphs into logical forms, by reducing the lambda
expressions assigned to the dependency edges us-
ing the lambda expressions of the connected head
and child nodes. The edge labels in the input UD
graph are only edited minimally so to yield a more
fine-grained description on the phenomena they
describe, while lexical information is used only
for a very restricted class of lexical items, such as
negation cues. A FOL representation of the entire
input graph can be then obtained by traversing the
edges in a given order and combining their seman-
tics.

However, in its original formulation, UDe-

22



pLambda does not handle either universal quanti-
fiers or other scope phenomena. For example, the
sentence ‘Malta borders no country’ has the UD
graph shown in Figure 1(a). When compared to
the correct representation given in Figure 1(c), the
UDepLambda output shown in Figure 1(b) shows
the absence of universal quantification, which in
turn leads negation scope to be misrepresented.

For this reason, we set the foundation
of UDepLambda¬ (UDepLambda-not), an en-
hanced version of the original framework, whose
type theory allows us to jointly handle negation
and universal quantification. Moreover, unlike its
predecessor, the logical forms are based on the one
used in the ‘Groeningen Meaning Bank’ (GMB;
(Basile et al., 2012a)), so to allow future compari-
son to a manually annotated semantic bank.

Although the present work shows the conver-
sion process for English, given that the edge la-
bels are universal, our framework could be used
to explore the problem of representing the scope
of negation in the other 40+ languages universal
dependencies are available in. This could also ad-
dress the problem that all existing resources to rep-
resent negation scope as a logical form are limited
to English (e.g. GMB and ‘DeepBank’ (Flickinger
et al., 2012)) or only to a few other languages
(e.g. ‘The Spanish Resource Grammar’ (Mari-
mon, 2010)).

In the reminder of this paper, after introduc-
ing the formalism we will be working in (§3), we
will work the theory behind some of the conver-
sion rules, from basic verbal negation to some of
the more complex phenomena related to negation
scope, such as the determiner ‘no’(§4.1), the inter-
action between the negation operator and the uni-
versal classifier (§4.2) and non-adverbial or lexi-
calized negation cues such as ‘nobody’, ‘nothing’
and ‘nowhere’ (§4.3). Limitations, where present,
will be highlighted.

Contribution. The main contribution of the pa-
per is UDepLambda¬, a UD-to-FOL conversion
framework, whose type theory is able to handle
scope related phenomena, which we show here in
the case of negation.

Future work. UDepLambda¬ can serve as
a basis for further extensions that could apply
to other complex semantic phenomena and be
learned automatically, given the link to a manually
annotated semantic bank.

2 Related work

Available resources that contain a representation
of negation scope can be divided in two types:
1) those that represent negation as a FOL (or
FOL-translatable) representation (e.g. GMB,
‘DeepBank’), where systems built using these
resources are concerned with correctly represent-
ing FOL variables and predicates in the scope of
negation; and 2) those that try to ground negation
at a string-level, where both the negation operator
and scope are defined as spans of text (Vincze
et al., 2008; Morante and Daelemans, 2012).
Systems trained on these resources are then
concerned with detecting these spans of text.

Resources in 1) are limited in that they are
only available in English or for a small number
of languages. Moreover no attempt has been
made to connect them to more widely-used,
cross-linguistic frameworks.

On the other hand, grounding a semantic
phenomenon to a string-level leads to inevitable
simplification. For instance, the interaction
between the negation operator and the universal
quantifier (e.g. ‘Not every staff member is British’
vs. ‘None of the staff members are British’),
along a formal representation that would allow
for inference operations is lost. Furthermore, each
corpus is tailored to different applications, making
annotation styles across corpora incompatible.
Nonetheless these resources have been widely
used in the field of Information Extraction and in
particular in the Bio-Medical domain.

Finally, it is also worth mentioning that there
has been some attempts to use formal semantic
representations to detect scope at a string level.
Packard et al. (2014) used hand-crafted heuristics
to traverse the MRS (Minimal Recursion Seman-
tics) structures of negative sentences to then detect
which words were in the scope of negation and
which were not. Basile et al. (2012b) tried instead
to first transform a DRS (Discourse Represen-
tation Structure) into graph form and then align
this to strings. Whilst the MRS-based system
outperformed previous work, mainly due to the
fact that MRS structures are closely related to
the surface realization, the DRT-based approach
performed worse than most systems, mostly
given to the fact that the formalism is not easily
translatable into a theory-neutral surface-oriented
representation.

23



John does not eat

ROOT

NUSBJ

AUX

NEG

Figure 2: Dependency graph for the sentence
’John does not eat’

3 UDepLambda¬
We introduce here the foundations of
UDepLambda¬, an enhancement to the UDe-
pLambda framework to convert a UD graph into
its correspondent logical form. As its predecessor,
the conversion takes place in four different steps:
enhancement, binarization, substitution and com-
position. Whereas binarization and composition
are the same as UDepLambda, substitution differs
in:

• using a higher order type-theory to deal with
universal quantification, which can interact
with other scope operator such as negation;

• using FOL expressions based on those used
in the Groeningen Meaning Bank (GMB), so
as to link to a manually–annotated seman-
tic bank which can be leveraged for future
work.1

The details of the four steps are as follows:

Enhancement. In this step, we first convert a
dependency tree to a dependency graph using ex-
isting enhancements in UDepLambda. The en-
hanced dependency labels are represented in red
color. In future, we will replace this step with
existing enhancements (Schuster and Manning,
2016).

Binarization. The dependency graph is
mapped to a LISP-style s-expression, where the
order of the edge traversal is specified. For in-
stance, the expression (nsubj (aux (neg eat not)
does) John) indicates that the semantic represen-
tation of the sentence in Figure (2) is derived by
composing the semantics of the edge nsubj with
the logic form of ‘John’ and of the phrase ’does

1The current study ignores certain aspects of Discourse
Representation Theory (Kamp et al., 2011) on which the
GMB is based, which are secondary to the issues we are fo-
cussed on.

not eat’. The semantics of the phrase ‘does not eat’
is in turn derived by composing the edge aux with
the phrase ‘not eat’ and the auxiliary ‘does’. Fi-
nally ‘not’ and ‘eat’ are composed along the edge
neg.

The order of traversal follows an obliqueness hi-
erarchy which defines a strict ordering of the mod-
ifiers of a given head traversed during composi-
tion. This hierarchy is reminiscent of bottom-up
traversal in a binarized constituency tree (where
for instance the direct object is always visited be-
fore the subject). Furthermore, for a head to be
further composed, all its modifiers needs to be
composed first. In the sentence in Figure (2), this
hierarchy is defined as neg > aux > nusbj, where
the semantics of the subject can be applied only
when the other modifiers to the verb-head have
been already composed.

Substitution. The substitution step assigns a
lambda expression to each edge and vertex (i.e.
word) in the graph. The lambda expressions of
the edges are manually crafted to match the se-
mantics of the edge labels while no assumption is
made on the semantics of the word-vertices which
are always introduced as existentially bound vari-
ables. This allows usnot to rely for most part on
any language-specific lexical information. These
expressions follows recent work on semantic com-
positionality of complex phenomena in event se-
mantics (Champollion, 2011). In doing this, we
generalize our type theory as follows:

• Each word-vertex is assigned a semantic
type 〈〈v, t〉, t〉 or 〈〈v, t〉, t〉 (here shortened
in 〈vt, t〉), where v stands for either a paired
variable of type Event× Individual. This is
in contrast with the type assigned to words
in the original UDepLambda 〈v, t〉. The
result of this type-raising operation is clear
when we compare the following lambda
expressions:

UDepLambda: λx.man(xa)
UDepLambda¬: λf.∃x.man(xa) ∧ f(x)

where the ‘handle’ f allows for com-
plex types to be added inside another lambda
expression.
Following the GMB, proper nouns are
treated like indefinite nouns, being linked to
a existentially-bound variable (e.g. John :=
λf.∃x.named(xa, John, PER) ∧ f(x)).

24



• Each edge is assigned the semantic type
〈〈vt, t〉, 〈〈vt, t〉, 〈vt, t〉〉〉 where we combine
a generalized quantifier over the parent word
(P) with the one over the child word (Q) to
return another generalized quantifier (f). For
instance, when reducing the sub-expression
(nsubj eat John), we first reduce the parent
vertex ‘eat’ (P) and then the child vertex
‘John’(Q) using the semantics of the subject
(‘Actor’ in the GMB).

nsubj:= λP.λQ.λf.P (λx.f(x) ∧Q(λy.
Actor(xe, ya)))

When compared to the original
UDepLambda expression (of type
〈〈v, t〉, 〈〈v, t〉, 〈v, t〉〉〉):

λf.λg.λx.∃y.f(xe) ∧ g(ya) ∧ arg1(xe, ya)

unlike its predecessor, UDepLambda¬
allows for nested dependencies between
parent and child node which is necessary to
model scope phenomena.

• In cases such as the sub-expression (neg
‘John does eat’ not), the edge label neg and
the word ‘not’ carry the exact same seman-
tics (i.e. the negation operator ¬). For these
functional words we try to define semantics
on the dependency edges only rather than on
the word. As shown below, reducing Q does
not impact the semantic composition of the
edge neg:

neg:= λP.λQ.λf.¬P (λx.f(x))
not:= λf.TRUE

Composition. The lambda expressions are
reduced by following the traversal order decided
during the binarization step. Let’s exemplify
the composition step by showing at the same
time how simple verbal negation composes
semantically, where the input s-expression is (neg
(aux (nsubj eat John) does) not). The substitution
step assigns vertices and edges the following
semantics:

‘eat’ := λf.∃x.eat(xe) ∧ f(x)
‘not’ := λf.TRUE
‘John’ := λf.∃x.named(xa, John, PER)∧ f(x)
‘does’ := λf.TRUE

nsubj:= λP.λQ.λf.P (λx.f(x) ∧Q(λy.Actor(xe, ya)))
aux := λP.λQ.λf.P (λx.f(x))
neg:= λP.λQ.λf.¬P (λx.f(x))
ex-closure:= λx.TRUE

where the subscripts e and a stands for the
event-type and the individual-type existential vari-
able respectively. As for the edge neg, the child
of a aux edge is ignored because not contributing
to the overall semantics of the sentence.2 We start
by reducing (neg eat not), where P is the parent
vertex ‘eat’ and Q the child vertex ‘not’. This
yields the expression:3

λf.¬∃x.eat(xe) ∧ f(x)
We then use this logic form to first reduce the
lambda expression on the edge aux, which outputs
the same input representation, and then compose
this with the semantics of the edge nsubj. The fi-
nal representation of the sentence (after we apply
existential closure) is as follows:

¬∃x.∃y.eat(xe) ∧ named(ya, John, PER) ∧
Actor(xe, ya)

Given the resulting logical form we consider as
part of negation scope all the material under the
negation operator ¬.

4 Analysis of negative constructions

4.1 The quantifier ‘no’

Let’s consider the sentence ‘No man came’ along
with its dependency trees and logical form, shown
in Figure 3.

As shown in Figure 3(b), one shortcoming of
the original UDepLambda is that it doesn’t cover
universal quantification. However, even if we were
to assign any of the following lambda expressions
containing material implication to the neg edge
connecting parent-λf (‘man’) and child-λg (‘no’):

?λf.λg.λx.f(x)→ ¬f(x)
?λf.λg.λx.f(x)→ g(x)

the resulting expressions would have no means of
later accommodating the event ‘came’ in the con-
sequent of the material implication:

*λx.man(x)→ ¬man(x)
*λx.man(x)→ no(x)

2The present work does not consider the semantics of time
the word ‘does’ might contribute to.

3Step-by-step derivations are shown in Appendix A.

25



No man came.

ROOT

NUSBJNEG

(a) Original UD Dependency
Tree

∃x.came(xe) ∧ ¬∃y.man(ya) ∧ arg1(xe, ya)
(b) UDepLambda Logical Form

No man came.

ROOT

NUSBJ:INVNEG:UNIV

(c) Enhanced UD Depen-
dency Tree

∀y.man(ya)→ ¬∃x.came(xe) ∧Actor(xe, ya)
(d) Desired Logical Form

Figure 3: The dependency trees for ‘No man
came’ (top: original UD tree; bottom: enhanced
UD tree) and its logical forms

The higher-order type theory of UDepLambda¬
solves this problem by ensuring that a) there is a
universal quantified variable along with material
implication and b) the entity bound to it (man(x))
is introduced only in the antecedent, whereas
the negated event (along with other arguments)
only in the consequent. The lambda expression
assigned to the neg edge is the following

λP.λQ.λf.∀x.(P (λy.EQ(x, y))→ ¬f(x))

where f allows to leave a ‘handle’ for the
event ‘came’ to be further composed in the
subsequent only, whereas the two-place function
EQ(x,y) as argument of P binds the word in
the parent node with the universally quantified
variable x.

It is worth mentioning at this point that al-
though the universal quantifier ‘no’ is parsed
as depending from an edge neg, it possesses a
semantics that distinguishes it from other negative
adverbs such as ‘not’ or ‘never’, in the fact that
they bind their head to a universally quantifiable

variable. In these cases we also enhance the
label on the dependency edge to reflect this more
fine-grained distinction. In the presence of ‘no’
the neg edge becomes neg:univ if its child vertex
is a universal quantifier. This edit operation relies
on having a list of lexical items for both universal
quantifiers and negation cues in a language, which
is easily obtainable given that these items form a
small, closed class.

A further edit operation is needed to make sure
that the quantifier always outscopes the negation
operator; to do so, we modify the semantics
of the edge that connects the head of the edge
neg:univ (‘man’) with its parent (‘came’), nsubj,
by inverting the order of the Q and P, so that the
former outscopes the latter. We call this enhanced
edge an ‘edge-name:inv.’ edge. Compared to
nsubj, the semantics of nsubj:inv would be as
follows:

nsubj :=
λP.λQ.λf.P (λx.f(x) ∧Q(λy.Actor(xe, ya)))

nsubj-inv :=
λP.λQ.λf.Q(λy.P (λx.Actor(xe, ya) ∧ f(x)))

Using the edited input UD graph, the hierarchy we
follow during composition is neg:univ> nsubj:inv
to yield the s-expression (nsubj:inv (neg:univ no
man) came). Given the following input semantics:

man:= λf.∃x.man(xa) ∧ f(x)
came:= λf.∃x.came(xe) ∧ f(x)

neg:univ:=
λP.λQ.λf.∀x.(P (λy.EQ(x, y))→ ¬f(x))

nsubj:inv :=
λP.λQ.λf.Q(λy.P (λx.Actor(xe, ya) ∧ f(x)))

we first reduce the lambda expression on
the edge neg:univ. to yield the expression
λf.∀x.(man(xa) → ¬f(x)) and then combine
it along the edge nsubj:inv to yield the following
representation:

∀y.(man(ya)→ ¬∃x.came(xe)∧Actor(xe, ya))
, where the scope of negation is correctly con-
verted as inside the universal quantifier.

Inverting the order of the parent and child nodes
in the semantics of the :inv. edge always allows
to represent the universally quantified element as
outscoping the event it depends on. At the same
time, all other arguments and modifiers of the par-
ent event will always compose inside the conse-
quent. This applies to our initial example in Figure
1, where composing the s-expression (dobj:inv.
borders ‘no country’) to yield the expression:

26



λf.∀y.(country(ya)→
¬∃x.borders(xe) ∧ Theme(xe, ya) ∧ f(x))

, makes sure that further material can only be
added in place of f(e), which is inside the scope
of ¬, in turn in the scope of ∀. So when
composing the semantics of the subject ‘Malta’
(:= λf.∃x.named(xa,Malta,ORG)∧ f(x)), the
universal will still have wide-scope, as shown be-
low:

∀y.(country(ya)→
¬∃x.∃z.named(za,Malta, PER) ∧

borders(xez) ∧ Theme(xe, ya) ∧Actor(xe, za))

4.2 Negation and universal quantifier

Alongside quantifiers inherently expressing nega-
tion, as the one shown in the previous section,
another challenging scope representation arises
during the interaction between a negation cue and
a non-negative universal quantifier, such ‘every’.
Let’s take as example the sentences ‘Not every
man came’, shown in Figure 4 alongside its FOL
representation.

If compared to the representation of the
sentence ‘No man came’, where the universal
quantifier outscopes the negation operator, the
construction ‘not every’ yields the opposite
interaction where the quantifier is in the scope
of ¬ (correspondent to the meaning ‘there exists
some man who came’).

As shown in the previous section and here
in Figure 4(b), UDepLambda cannot deal with
such constructions, yielding a meaning where
there exists and event but there doesn’t exists
the entity that performs it. On the other hand,
UDepLambda¬ can easily derive the correct
representation by applying the same edits to the
UD graph shown in the previous section. First,
we enhance the det edge to become a more fine-
grained det:univ in the presence of the child node
‘every’. Second, we change nsubj into nsubj-inv.,
since a universal quantifier is in its yield. The
lambda expression assigned to the edge det:univ
is as follows:

det:univ:=λP.λQ.λf.∀x.(P (λy.EQ(x, y)) → f(x))

Once again, we deploy the usual bottom-
up binarization hierarchy where all modifiers of a
head need to be composed before the head itself
can be used for further composition. In the case of
‘not every...’, we start from the modifiers ‘every’

Not every man came.

ROOT

NSUBJ

DET

NEG

(a) UD tree

λf.λg.λx.came(xe) ∧ arg1(xe, ya)∧
¬∃y.man(ya) ∧ every(ya)
(b) UDepLambda Logical Form

Not every man came.

ROOT

NSUBJ-INV

DET:UNIV

NEG

(c) Enhanced UD tree

¬∀y.(man(ya)→ ∃x.came(xe) ∧Actor(xe, ya))
(d) Desidered Logical Form

(nsubj-inv. came (neg (univ man every) not))
(e) S-Expression

Figure 4: The sentence ‘Not every man came’
along with its dependency trees and logical forms

and ‘not’ and compose the edges following the
order det:univ 〉 neg so to make sure that negation
operator ¬ outscopes the universal quantifier
∀. After the modifiers of the head ‘man’ are
composed, we can then move on to compose
the head itself with its governor node, the event
‘came’. The nsubj:inv. edge ensures that the
subject scopes over the event and not the other
way around. Following this, we are able to obtain
the final representation:

¬∀y.(man(ya)→ ∃x.came(xe)∧Actor(xe, ya))
4.3 Nobody/nothing/nowhere
As shown in Table 1, ‘nobody’, ‘nothing’ and
‘nowhere’ belong to that class of negation cues
whose parent edge do not mark them as inherently
expressing negation. However using an hand-
crafted list of negation cues for English, we can
detect and assign them the semantic representa-
tion λf.¬∃x.thing/person/location(xa)∧f(x),
where the negation operator scopes over an exis-
tentially bound entity.

Binarization and composition vary according to

27



nobody nothing nowhere
nsubj 7 18 -
dobj - 34 -
conj - 8 -

nsubjpass 1 6 -
root - 8 -

advmod - - 3
nmod - 4 -
other - 8 -
tot. 8 86 3

Table 1: Distribution of nobody, nothing and
nowhere with their related dependency tags as they
appear in the English UD corpus (McDonald et al.,
2013)

whether these elements are arguments or adjuncts.
If an argument, the scope of negation includes also
the event, otherwise the latter is excluded. To this
end, let’s compare the sentences ‘Nobody came’
and ‘John came with nothing’, along with their de-
pendency graphs and logic forms (Figure 5).

The argument ‘nobody’ in ‘Nobody came’
yields a scope reading where the negation operator
scopes over the existential. To achieve such read-
ing we once again convert the nsubj (or any argu-
ment edge for that matter) into a nsubj:inv. edge.
This is reminiscent of how we handled universal
quantification when we introduced the quantifier
‘no’, which is in fact integral part of such lexical
elements (the semantics of ‘no-body came’ can be
in fact read as ‘for all x such that x is a person
that x did not come’). Also, the fact that the se-
mantics of these elements is represented through
an existential and not a universal bound variable is
no problem since we are working under the equiv-
alence ∀x.P (x)→ ¬Q(x) ≡ ¬∃x.P (x) ∧Q(x).

Given the s-expression (nsubj:inv. came no-
body) the composition is then as follows:

¬∃x.∃y.person(ya) ∧ f(x) ∧Actor(xe, ya) ∧
came(xe)

On the other hand, when the negated lexical el-
ement is embedded in an adjunct, as in ‘with
nothing’, no enhancement of the original depen-
dency edges takes place since we want to preserve
negation scope inside the phrase (so to yield a
reading where the event ‘John came’ did indeed
take place). By substituting and combining the
semantics of the s-expression (nmod:with came
nothing), where the edge nmod:with is assigned
the lambda expression λP.λQ.λf.P (λx.f(x) ∧

Nobody came.

ROOT

NSUBJ

John came with nothing.

ROOT

NSUBJ

NMOD:WITH

¬∃x∃y.came(xe) ∧ person(ya) ∧Actor(xe, ya)

Nobody came.

ROOT

NSUBJ-INV.

John came with nothing.

ROOT

NSUBJ

NMOD:WITH

∃x∃y.came(xe) ∧ named(ya, John, PER)∧
Actor(xe, ya) ∧ ¬∃z.thing(za) ∧ with(xe, za)

Figure 5: Dependency graphs and FOL represen-
tations for the sentences ‘Nobody came’ (above)
vs. ‘John came with nothing’ (below).

Q(λy.with(xe, ya))), we obtain the following
logic form:

λf.∃x.came(xe) ∧ f(x) ∧ ¬∃y.(thing(ya) ∧
with(xe, ya))

, where we can the scope of negation is limited to
the propositional phrase. Given that the f is out-
side the scope of negation, further compositions
(in the case along the edge nsubj.) will also com-
pose outside it, yielding the correct form in Figure
(5).

The only limitation we have observed so far
concerns ‘nowhere’ (:= λf.∃x.location(xa) ∧
f(x)) and the fact it is always associated with
a dependency tag advmod. The tag advmod de-
scribes however the manner an action is carried out
and has the logical form λP.λQ.λf.P (λx.f(x) ∧
Q(λy.Manner(xe, ya))). This is however dif-
ferent from how ‘nowhere’ is treated in the
Groeningen Meaning Bank, where it is described
as where and not how the event takes place.
That is, our framework would assign a sentence
like ‘They got nowhere near the money’ the
logical form ∃x.got(xe) ∧ ¬∃y.(location(ya) ∧
Manner(xe, ya)), whereas the one contained in
the GMB is: ∃x.got(xe) ∧ ¬∃ya.(location(ya) ∧
in(xe, ya))

4.4 Further remarks
Building on the principle of relying on depen-
dency label information as much as possible while

28



using minimal lexical information, we showed that
UDepLambda¬ is able to deal with complex phe-
nomena involving negation scope. Although the
theory is not shown in full here, these phenom-
ena also include discontinuous scope and affixal
negation, which are part of more recent corpora
used to train systems for detecting negation scope
at a string level (Morante and Daelemans, 2012).

The ability of dealing with discontinuous scope
spans, such as in sentences like ‘John screamed
and did not laugh’, where the subject ‘John’ and
the predicate ‘did not laugh’ are part of the nega-
tion scope but ‘screamed’ is not, comes from the
dependency graphs themselves, where we can re-
cover the shared material by means of simple
transformation heuristics.4

As for affixal negation (e.g. ‘John is im-
patient’), one could use a similar heuristics as in
the case of ‘nobody/nothing/nowhere’ where the
lexical element is enhanced with the negation op-
erator (‘patient’:= λf.∃x.patient(xe) ∧ f(x) →
λf.¬∃x.patient(xe)∧ f(x)). This relies again on
bespoke list of words containing an affixal nega-
tion cue.

Given that UDepLambda¬ is based on depen-
dency graphs, the primary limitations of our sys-
tem are how certain phenomena are handled (or
better not handled) by a dependency parse. This
includes multi-word cues such as ‘no way’ and ‘by
no means’ and the construction ‘neither ... nor’.

5 Conclusion and future work

This paper addressed the problem of represent-
ing negation scope from universal dependencies
by setting the foundations of UDepLambda¬, a
conversion framework whose high-order type the-
ory is able to deal with complex semantic phe-
nomena related to scope. The conversion pro-
cesses we presented show that it is possible to rely
on dependency edges and additionally to minimal
language-dependent lexical information to com-
pose the semantics of negation scope. The fact
that this formalism is able to correctly compose
the scope for many complex phenomena related to
negation scope is promising.

We are currently working on extending this
work in two directions:

4We are considering substituting such heuristics with the
Enhanced++ version of the Stanford Dependencies (Schuster
and Manning, 2016) where implicit relations between content
words are made explicit by adding relations and augmenting
relation names.

1. Automatic framework evaluation: given the
conversion rules presented in this paper, we are
planning to automatically convert the UD graphs
for the sentences in the GMB so to compare
the graph we automatically generate with a gold-
standard representation. This would also to iden-
tify and quantify the errors of our framework.
2. Automatic semantic parsing: given the connec-
tion between this framework and the GMB, we
would like to explore the possibility of learning
the conversion automatically, so not to rely on an
hand-crafted hierarchy to decide the order of edge
traversal.

References
Valerio Basile, Johan Bos, Kilian Evang, and Noortje

Venhuizen. 2012a. Developing a large semantically
annotated corpus. In LREC 2012, Eighth Interna-
tional Conference on Language Resources and Eval-
uation.

Valerio Basile, Johan Bos, Kilian Evang, and Noortje
Venhuizen. 2012b. Ugroningen: Negation detection
with discourse representation structures. In Pro-
ceedings of the First Joint Conference on Lexical
and Computational Semantics-Volume 1: Proceed-
ings of the main conference and the shared task, and
Volume 2: Proceedings of the Sixth International
Workshop on Semantic Evaluation, pages 301–309.
Association for Computational Linguistics.

Johan Bos. 2016. Expressive power of abstract mean-
ing representations. Computational Linguistics.

Lucas Champollion. 2011. Quantification and nega-
tion in event semantics.

Federico Fancellu, Adam Lopez, and Bonnie Webber.
2016. Neural networks for negation scope detection.
In Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics, volume 1,
pages 495–504.

Dan Flickinger, Yi Zhang, and Valia Kordoni. 2012.
Deepbank: A dynamically annotated treebank of the
wall street journal. In Proceedings of the 11th In-
ternational Workshop on Treebanks and Linguistic
Theories, pages 85–96.

Hans Kamp, Josef Van Genabith, and Uwe Reyle.
2011. Discourse representation theory. In
Handbook of philosophical logic, pages 125–394.
Springer.

Montserrat Marimon. 2010. The spanish resource
grammar. In LREC.

Ryan T McDonald, Joakim Nivre, Yvonne Quirmbach-
Brundage, Yoav Goldberg, Dipanjan Das, Kuzman
Ganchev, Keith B Hall, Slav Petrov, Hao Zhang,

29



Oscar Täckström, et al. 2013. Universal depen-
dency annotation for multilingual parsing. In ACL
(2), pages 92–97.

Roser Morante and Walter Daelemans. 2012.
Conandoyle-neg: Annotation of negation in conan
doyle stories. In Proceedings of the Eighth Interna-
tional Conference on Language Resources and Eval-
uation, Istanbul. Citeseer.

Woodley Packard, Emily M Bender, Jonathon Read,
Stephan Oepen, and Rebecca Dridan. 2014. Sim-
ple negation scope resolution through deep parsing:
A semantic solution to a semantic problem. In ACL
(1), pages 69–78.

Siva Reddy, Oscar Täckström, Michael Collins, Tom
Kwiatkowski, Dipanjan Das, Mark Steedman, and
Mirella Lapata. 2016. Transforming dependency
structures to logical forms for semantic parsing.
Transactions of the Association for Computational
Linguistics, 4:127–140.

Siva Reddy, Oscar Täckström, Slav Petrov, Mark
Steedman, and Mirella Lapata. 2017. Universal se-
mantic parsing. arXiv Preprint.

Sebastian Schuster and Christopher D Manning. 2016.
Enhanced english universal dependencies: An im-
proved representation for natural language under-
standing tasks. In Proceedings of the Tenth Interna-
tional Conference on Language Resources and Eval-
uation (LREC 2016).

Erik Velldal, Lilja Øvrelid, Jonathon Read, and
Stephan Oepen. 2012. Speculation and negation:
Rules, rankers, and the role of syntax. Computa-
tional linguistics, 38(2):369–410.

Veronika Vincze, György Szarvas, Richárd Farkas,
György Móra, and János Csirik. 2008. The bio-
scope corpus: biomedical texts annotated for uncer-
tainty, negation and their scopes. BMC bioinformat-
ics, 9(11):S9.

30



A Step-by-step λ-reductions

*Throughout the derivations, we are going to use the variable e in place of xe and z,y or x in place of
xa. Due to space restrictions, we skip reduction for existential closure (→ex−clos).
A.1 ‘John does not eat’

λP.λQ.λf.P (λe.f(e) ∧Q(λx.Actor(e, x)))(λf.∃e.eat(e) ∧ f(e))
→α λP.λQ.λf.P (λe.f(e) ∧Q(λx.Actor(e, x)))(λg.∃e′.eat(e′) ∧ g(e′))
→β λQ.λf.λg.[∃e′.eat(e′) ∧ g(e′)](λe.f(e) ∧Q(λx.Actor(e, x)))
→β λQ.λf.∃e′.eat(e′) ∧ λe.[f(e) ∧Q(λx.Actor(e, x))](e′)
→β λQ.λf.∃e′.eat(e′) ∧ f(e′) ∧Q(λx.Actor(e′, x))
→β λQ.λf.∃e′.eat(e′) ∧ f(e′) ∧Q[λx.Actor(e′, x)](λf.∃x.named(x, John, PER) ∧ f(x))
→α λQ.λf.∃e′.eat(e′) ∧ f(e′) ∧Q[λx.Actor(e′, x)](λg.∃z.named(z, John, PER) ∧ g(z))
→β λf.∃e′.eat(e′) ∧ f(e′) ∧ λg.[∃z.named(z, John, PER) ∧ g(z)](λx.Actor(e′, x))
→β λf.∃e′.eat(e′) ∧ f(e′) ∧ ∃z.named(z, John, PER) ∧ λx.[Actor(e′, x)](z)
→β λf.∃e′.eat(e′) ∧ f(e′) ∧ ∃z.named(z, John, PER) ∧Actor(e′, z)

λP.λQ.λf.¬P (λe.f(e))(λf.∃e′.∃z.eat(e′) ∧ f(e′) ∧ named(z, John, PER) ∧Actor(e′, z))
→α λP.λQ.λf.¬P (λe.f(e))(λg.∃e′.∃z.eat(e′) ∧ g(e′) ∧ named(z, John, PER) ∧Actor(e′, z))
→β λQ.λf.¬λg.[∃e′.∃z.eat(e′) ∧ g(e′) ∧ named(z, John, PER) ∧Actor(e′, z)](λe.f(e))
→β λQ.λf.¬∃e′.∃z.eat(e′) ∧ λe.[f(e)](e′) ∧ named(z, John, PER) ∧Actor(e′, z)
→β λQ.λf.¬∃e′.∃z.eat(e′) ∧ f(e′) ∧ named(z, John, PER) ∧Actor(e′, z)
→β λf.¬∃e′.∃z.eat(e′) ∧ f(e′) ∧ named(z, John, PER) ∧Actor(e′, z)
→β λf.[¬∃e′.∃z.eat(e′) ∧ named(z, John, PER) ∧Actor(e′, z) ∧ f(e′)](λx.TRUE)
→β ¬∃e′.∃z.eat(e′) ∧ named(z, John, PER) ∧Actor(e′, z) ∧ λx.[TRUE](e′)
→β ¬∃e′.∃z.eat(e′) ∧ named(z,John,PER) ∧Actor(e′, z)
A.2 ‘No man came’

λP.λQ.λf.∀x.(P (λy.EQ(x, y))→ ¬f(x))(λf.∃x.man(x) ∧ f(x))
→α λP.λQ.λf.∀x.(P (λy.EQ(x, y))→ ¬f(x))(λf ′.∃z.man(z) ∧ f ′(z))
→β λQ.λf.∀x.(λf ′.[∃z.man(z) ∧ f ′(z)](λy.EQ(x, y))→ ¬f(x))
→β λQ.λf.∀x.(∃z.man(z) ∧ λy.[EQ(x, y)](z)→ ¬f(x))
→β λQ.λf.∀x.(∃z.man(z) ∧ EQ(x, z)→ ¬f(x))
→EQ λQ.λf.∀x.(man(x)→ ¬f(x))
→β λf.∀x.(man(x)→ ¬f(x))

λP.λQ.λf.Q(λx.P (λe.Actor(e, x) ∧ f(e)))(λf.∃e.came(e) ∧ f(e))
→α λP.λQ.λf.Q(λx.P (λe.Actor(e, x) ∧ f(e)))(λg.∃e′.came(e′) ∧ g(e′))
→β λQ.λf.Q(λx.λg.[∃e′.came(e′) ∧ g(e′))](λe.Actor(e, x) ∧ f(e)))
→β λQ.λf.Q(λx.∃e′.came(e′) ∧ λe.[Actor(e, x) ∧ f(e)](e′))
→β λQ.λf.Q(λx.∃e′.came(e′) ∧Actor(e′, x) ∧ f(e′))
→α λQ.λf.Q(λx.∃e′.came(e′) ∧Actor(e′, x) ∧ f(e′))(λf ′.∀x′.(man(x′)→ ¬f ′(x′))
→β λf.λf ′.[∀x′.(man(x′)→ ¬f ′(x′))](λx.∃e′.came(e′) ∧Actor(e′, x) ∧ f(e′))
→β λf.∀x′.(man(x′)→ ¬λx.[∃e′.came(e′) ∧Actor(e′, x) ∧ f(e′)](x′))
→β λf.∀x′.(man(x′)→ ¬∃e′.came(e′) ∧Actor(e′, x′) ∧ f(e′))
→ex−clos. ∀x′.(man(x′)→ ¬∃e′.came(e′) ∧Actor(e′,x′))
A.3 ‘Not every man came’

→∀ λf.∀x.(man(x)→ f(x))
→¬ λf.¬∀z.(man(z)→ f(z))

λP.λQ.λf.Q(λx.P (λe.Actor(e, x) ∧ f(e)))(λf.∃e.came(e) ∧ f(e))

31



→α λP.λQ.λf.Q(λx.P (λe.Actor(e, x) ∧ f(e)))(λg.∃e′.came(e′) ∧ g(e′))
→β λQ.λf.Q(λx.λg.[∃e′.came(e′) ∧ g(e′))](λe.Actor(e, x) ∧ f(e)))
→β λQ.λf.Q(λx.∃e′.came(e′) ∧ λe.[Actor(e, x) ∧ f(e)](e′))
→β λQ.λf.Q(λx.∃e′.came(e′) ∧Actor(e′, x) ∧ f(e′))

λQ.λf.Q(λx.∃e′.came(e′) ∧Actor(e′, x) ∧ f(e′))(λf.¬∀z.(man(z)→ f(z))
→α λQ.λf.Q(λx.∃e′.came(e′) ∧Actor(e′, x) ∧ f(e′))(λf ′.¬∀z.(man(z)→ f ′(z))
→β λf.λf ′.[¬∀z.(man(z)→ f ′(z))](λx.∃e′.came(e′) ∧Actor(e′, x) ∧ f(e′))
→β λf.¬∀z.(man(z)→ λx.[∃e′.came(e′) ∧Actor(e′, x) ∧ f(e′)](z))
→β λf.¬∀z.(man(z)→ ∃e′.came(e′) ∧Actor(e′, z) ∧ f(e′))
→ex−clos. ¬∀z.(man(z)→ ∃e′.came(e′) ∧Actor(e′, z))
A.4 ‘Nobody came’
λP.λQ.λf.Q(λx.P (λe.f(e) ∧Actor(e, x)))(λf.∃e.f(e) ∧ came(e))
→α λP.λQ.λf.Q(λx.P (λe.f(e) ∧Actor(e, x)))(λg.∃e′.g(e′) ∧ came(e′))
→β λQ.λf.Q(λx.λg.[∃e′.g(e′) ∧ came(e′)](λe.f(e) ∧Actor(e, x)))
→β λQ.λf.Q(λx.∃e′.λe.[f(e) ∧Actor(e, x)](e′) ∧ came(e′))
→β λQ.λf.Q(λx.∃e′.f(e′) ∧Actor(e′, x) ∧ came(e′))

λQ.λf.Q(λx.∃e′.f(e′) ∧Actor(e′, x) ∧ came(e′))(λf.¬∃x.person(x) ∧ f(x))
→α λQ.λf.Q(λx.∃e′.f(e′) ∧Actor(e′, x) ∧ came(e′))(λg.¬∃z.person(z) ∧ g(z))
→β λf.λg.[¬∃z.person(z) ∧ g(z)](λx.∃e′.f(e′) ∧Actor(e′, x) ∧ came(e′))
→β λf.¬∃z.person(z) ∧ λx.[∃e′.f(e′) ∧Actor(e′, x) ∧ came(e′)](z)
→β λf.¬∃z.∃e′.person(z) ∧ f(e′) ∧Actor(e′, z) ∧ came(e′)
→ex−clos. ¬∃z.∃e′.person(z) ∧Actor(e′, z) ∧ came(e′)
A.5 ‘John came with nothing’
λP.λQ.λf.P (λe.f(e) ∧Q(λx.with(e, x)))(λf.∃e.came(e) ∧ f(e))
→α λP.λQ.λf.P (λe.f(e) ∧Q(λx.with(e, x)))(λg.∃e′.came(e′) ∧ g(e′))
→β λQ.λf.λg.[∃e′.came(e′) ∧ g(e′)](λe.f(e) ∧Q(λx.with(e, x)))
→β λQ.λf.∃e′.came(e′) ∧ f(e′) ∧ λe.[Q(λx.with(e, x))](e′)
→β λQ.λf.∃e′.came(e′) ∧ f(e′) ∧Q(λx.with(e′, x))
→β λQ.λf.∃e′.came(e′) ∧ f(e′) ∧Q[λx.with(e′, x)](λf.¬∃x.thing(x) ∧ f(x))
→α λQ.λf.∃e′.came(e′) ∧ f(e′) ∧Q[λx.with(e′, x)](λg.¬∃z.thing(z) ∧ g(z))
→β λf.∃e′.came(e′) ∧ f(e′) ∧ λg.[¬∃z.thing(z) ∧ g(z)](λx.with(e′, x))
→β λf.∃e′.came(e′) ∧ f(e′) ∧ ¬∃z.thing(z) ∧ λx.[with(e′, x)](z)
→β λf.∃e′.came(e′) ∧ f(e′) ∧ ¬∃z.thing(z) ∧ with(e′, z)

λP.λQ.λf.P (λe.f(e) ∧Q(λx.Actor(e, x)))(λf.∃e′.came(e′) ∧ f(e′) ∧ ¬∃z.thing(z) ∧ with(e′, z))
→α λP.λQ.λf.P (λe.f(e)∧Q(λx.Actor(e, x)))(λg.∃e′.came(e′)∧g(e′)∧¬∃z.thing(z)∧with(e′, z))
→β λQ.λf.λg.[∃e′.came(e′) ∧ g(e′) ∧ ¬∃z.thing(z) ∧ with(e′, z)](λe.f(e) ∧Q(λx.Actor(e, x)))
→β λQ.λf.∃e′.came(e′) ∧ λe.[f(e) ∧Q(λx.Actor(e, x))](e′) ∧ ¬∃z.thing(z) ∧ with(e′, z)
→β λQ.[λf.∃e′.came(e′) ∧ f(e′) ∧Q(λx.Actor(e′, x)) ∧ ¬∃z.thing(z) ∧ with(e′, z)]
(λg.∃y.named(y, John, PER) ∧ g(y))
→β λf.∃e′.came(e′) ∧ f(e′) ∧ λg.[∃y.named(y, John, PER) ∧ g(y)](λx.Actor(e′, x)) ∧
¬∃z.thing(z) ∧ with(e′, z)]
→β λf.∃e′.came(e′) ∧ f(e′) ∧ ∃y.named(y, John, PER) ∧ λx.[Actor(e′, x)](y) ∧ ¬∃z.thing(z) ∧
with(e′, z)
→β λf.∃e′.came(e′)∧∃y.named(y, John, PER)∧f(e′)∧Actor(e′, y)∧¬∃z.thing(z)∧with(e′, z)
→ex−clos. ∃e′.∃y.came(e′) ∧ named(y,John,PER) ∧Actor(e′,y) ∧ ¬∃z.thing(z) ∧with(e′, z)

32


