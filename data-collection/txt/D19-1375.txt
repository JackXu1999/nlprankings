



















































Data Augmentation with Atomic Templates for Spoken Language Understanding


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 3637–3643,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

3637

Data Augmentation with Atomic Templates for Spoken Language
Understanding

Zijian Zhao∗, Su Zhu∗ and Kai Yu†
MoE Key Lab of Artificial Intelligence

SpeechLab, Department of Computer Science and Engineering
Shanghai Jiao Tong University, Shanghai, China

{1248uu,paul2204,kai.yu}@sjtu.edu.cn

Abstract

Spoken Language Understanding (SLU) con-
verts user utterances into structured seman-
tic representations. Data sparsity is one of
the main obstacles of SLU due to the high
cost of human annotation, especially when do-
main changes or a new domain comes. In
this work, we propose a data augmentation
method with atomic templates for SLU, which
involves minimum human efforts. The atomic
templates produce exemplars for fine-grained
constituents of semantic representations. We
propose an encoder-decoder model to gener-
ate the whole utterance from atomic exem-
plars. Moreover, the generator could be trans-
ferred from source domains to help a new do-
main which has little data. Experimental re-
sults show that our method achieves significant
improvements on DSTC 2&3 dataset which is
a domain adaptation setting of SLU.

1 Introduction

The SLU module is a key component of spoken
dialogue system, parsing user utterances into cor-
responding semantic representations in a narrow
domain. The typical semantic representation for
SLU could be semantic frame (Tur and De Mori,
2011) or dialogue act (Young, 2007). In this pa-
per, we focus on SLU with the dialogue act that
a sentence is labelled as a set of act-slot-value
triples. For example, the utterance “Not Chinese
but I want Thai food please” has an annotation of
“deny(food=Chinese), inform(food=Thai)”.

Deep learning has achieved great success in the
SLU field (Mesnil et al., 2015; Liu and Lane,
2016; Zhao et al., 2019). However, it is notori-
ous for requiring large labelled data, which lim-
its the scalability of SLU models. Despite re-

∗ Zijian Zhao and Su Zhu are co-first authors and con-
tribute equally to this work.

†The corresponding author is Kai Yu.

Figure 1: Workflow of the data augmentation with
atomic templates for SLU.

cent advancements and tremendous research activ-
ity in semi-supervised learning and domain adap-
tation, the deep SLU models still require massive
amounts of labelled data to train.

Therefore, data augmentation for SLU becomes
appealing, and it needs three kinds of capabilities:

• Expression diversity: There are always vari-
ous expressions for the same semantic mean-
ing. Lack of expression diversity is an obsta-
cle of SLU.

• Semantic diversity: The data augmentation
method should generate data samples with
various semantic meanings.

• Domain adaptation: The method should be
able to utilize data from other domains and
adapt itself to a new domain rapidly.

In this work, we propose a new data augmen-
tation method for SLU, which consists of atomic
templates and a sentence generator (as shown in
Figure 1). The method starts from dialogue acts



3638

which are well-structured and predefined by do-
main experts. Rich and varied dialogue acts can
be created automatically, which is guided by a do-
main ontology.

To enhance the capability of domain adaptation
for the sentence generator, we propose to first in-
terpret dialogue acts in natural language so that
new dialogue acts can be understood by the gener-
ator. However, interpreting a dialogue act at sen-
tence level costs a lot, atomic templates are ex-
ploited to alleviate human efforts. The atomic
templates are created at phrase level, which pro-
duce exemplars for fine-grained constituents (i.e.
act-slot-value triple) of semantic representations
(i.e. dialogue act). Thus, the sentence generator
can be an encoder-decoder model, paraphrasing a
set of atomic exemplars to an utterance.

We evaluate our approach on DSTC 2&3
dataset (Henderson et al., 2014a,b), a benchmark
of SLU including domain adaptation setting. The
results show that our method can obtain significant
improvements over strong baselines with limited
training data.

2 Related Work

Data augmentation for SLU Hou et al. (2018)
use a sequence-to-sequence model to translate
between sentence pairs with the same meaning.
However, it cannot generate data for new semantic
representations. Yoo et al. (2018) use a variational
autoencoder to generate labelled language. It still
lacks variety of semantic meanings. Let x and
y denote an input sentence and the correspond-
ing semantic representation respectively. These
two works estimate p(x, y) with generation mod-
els to produce more labelled samples, while they
have two drawbacks. 1) The models cannot con-
trol which kinds of semantic meaning should be
generated for supply. 2) The models cannot gen-
erate data for new semantic representations which
may contain out-of-vocabulary (OOV) labels. We
propose to generate utterance based on semantic
representations by estimating p(x|y), because y
is well-structured and easy to be synthesized. To
overcome the OOV problem of semantic labels,
we first map them to atomic exemplars with a little
of human effort.
Zero-shot learning of SLU Besides data aug-
mentation, zero-shot learning of SLU (Ferreira
et al., 2015; Yazdani and Henderson, 2015) is also
related, which can adapt to unseen semantic labels.

Yazdani and Henderson (2015) exploit a binary
classifier for each possible act-slot-value triple to
predict whether it exists in the input sentence.
Zhao et al. (2019) propose a hierarchical decoding
model for SLU. However, they still have problem
with new act and slot. Bapna et al. (2017); Lee and
Jha (2018); Zhu and Yu (2018) try to solve it with
textual slot descriptions. In this paper, we propose
atomic templates to describe act-slot-value triples
but not separate slots or acts.

3 Method

In this section, our data augmentation method with
atomic templates will be introduced, which gen-
erates additional data samples for training SLU
model.

3.1 SLU Model
For dialogue act based SLU, we adopt the hierar-
chical decoding (HD) model (Zhao et al., 2019)
which dynamically parses act, slot and value in a
structured way. The model consists of four parts:

• A shared utterance encoder, bidirectional
LSTM recurrent neural network (BLSTM)
(Graves, 2012);

• An act type classifier on the utterance;

• A slot type classifier with the utterance and
an act type as inputs;

• A value decoder with the utterance and an
act-slot type pair as inputs.

The value decoder generates word sequence of the
value by utilizing a sequence-to-sequence model
with attention (Luong et al., 2015) and pointer net-
work (Vinyals et al., 2015a) which helps handling
out-of-vocabulary (OOV) values.

3.2 Data Generation with Atomic Templates
As illustrated in Figure 1, the workflow of the data
augmentation is broken down into: 1) mapping
act-slot-value triples to exemplars with atomic
templates, and 2) generating the corresponding ut-
terance depending on the atomic exemplars.

Let x = x1 · · ·x|x| denote the utterance (word
sequence), and y = {y1, · · · , y|y|} denote the dia-
logue act (a set of act-slot-value triples). We wish
to estimate p(x|y), the conditional probability of
utterance x given dialogue act y.

However, there are also some disadvantages to
directly using dialogue acts as inputs:



3639

Triple Templates

bye() goodbyebye

request(addr) the addresswhat’s the address

inform(food=[food]) [food][food] food

inform(hastv=true) televisionwith a television

Table 1: Examples of atomic templates in DSTC 2&3
dataset. “[food]” is an arbitrary value of slot “food”.

• The dialogue acts from different narrow do-
mains may conflict, e.g. different slot names
for the same meaning.

• Act and slot types may not be defined in a
literal way, e.g. using arbitrary symbols like
“city 1” and “city 2” to represent city names
in different contexts.

Thus, it is hard to adapt the model p(x|y) to new
act types, slot types, and domains.

We propose to interpret the dialogue act in short
natural language, and then rephrase it to the corre-
sponding user utterance. While interpreting the di-
alogue act at sentence level costs as much as build-
ing a rule-based SLU system, we choose to in-
terpret act-slot-value triples with atomic templates
which involve minimum human efforts.

3.2.1 Atomic templates
Table 1 gives some examples of atomic tem-
plates used in DSTC 2&3 dataset. Atomic tem-
plates produce a simple description (atomic ex-
emplar ei) in natural language for each act-slot-
value triple1 yi. If there are multiple templates
for triple yi, which generate multiple atomic ex-
emplars E(yi), we choose the most similar one
ei = argmaxe∈E(yi)sim(e, x) in the training
stage, and randomly select one ei from E(yi) in
the data augmentation stage. The similarity func-
tion sim(e, x) we used is Ratcliff-Obershelp algo-
rithm (Black, 2004). Therefore,

p(x|y) = p(x|{y1 · · · y|y|}) = p(x|{e1 · · · e|y|})

3.2.2 Sentence generator
An encoder-decoder model is exploited to gener-
ate the utterance based on the set of atomic exem-
plars by estimating p(x|{e1 · · · e|y|}).

1It should be noted that an act-slot-value triple may have
an empty value, e.g. “request(phone)” refers to asking for
phone number. The triple may also need no slot, e.g. “bye()”.

As the set of atomic exemplars is unordered,
we encode them independently. For each atomic
exemplar ei = wi1 · · ·wiTi (a sequence of words
with length Ti), we use a BLSTM to encode it.
The hidden vectors are recursively computed at the
j-th time step via:

−→
hij =fLSTM(ψ(wij),

−→
h ij−1), j = 1, · · · , |Ti|

←−
hij =bLSTM(ψ(wij),

←−
h ij+1), j = |Ti|, · · · , 1

hij =[
−→
h ij ;
←−
h ij ]

where [·; ·] denotes vector concatenation, ψ(·) is
a word embedding function, fLSTM is the forward
LSTM function and bLSTM is the backward one.
The final hidden vectors of the forward and back-
ward passes are utilized to represent each atomic
exemplar ei, i.e. ci = [

−→
h iTi ;

←−
h i1].

After encoding all the atomic exemplars,
we have a list of hidden vectors H(y) =
[h11 · · · h1T1 ; · · · ;h|y|1 · · · h|y|T|y| ]. A LSTM
model serves as the decoder (Vinyals et al.,
2015b), generating the utterance x word-by-word:

p(x|y) = p(x|H(y)) =
|x|∏
t=1

p(xt|x<t, H(y))

Before the generation, the hidden vector of the de-
coder is initialized as 1/|y|

∑|y|
i=1 ci, the mean of

representations of all the atomic exemplars. The
pointer softmax (Gulcehre et al., 2016) enhanced
by a trick of targeted feature dropout (Xu and Hu,
2018) is adopted to tackle OOV words, which will
switch between generation and copying from the
input source dynamically.

4 Experiment

4.1 Data

In our experiments, we use the dataset provided
for the second and third Dialog State Track-
ing Challenge (DSTC 2&3) (Henderson et al.,
2014a,b). DSTC2 contains a large number of
training dialogues (∼15.6k utterances) related to
restaurant search while DSTC3 is designed to ad-
dress the problem of adaptation to a new domain
(tourist information) with only a small amount of
seed data (dstc3 seed, 109 utterances). The man-
ual transcriptions are used as user utterances to
eliminate the impact of speech recognition errors.

We follow the data partitioning policy as Zhu
et al. (2014), which randomly selects one-half of



3640

DSTC3 test data as the oracle training set (∼9.4k
utterances) and leaves the other half as the evalua-
tion set (∼9.2k utterances).

4.2 Experimental Setup

Delexicalized triples are used in case of non-
enumerable slot, like “inform(food=[food])” in
Table 1. There are 41 and 35 delexicalized triples
for DSTC2 and DSTC3 respectively. For each
triple, we prepare two short templates on average.
Note that, compared to designing sentence-level
templates, writing atomic templates for triples at
phrase level requires much less human efforts.

For data augmentation of DSTC3, there are two
ways to collect extra dialogue acts as inputs2:

• Seed abridgement: Abridging the delexical-
ized dialogue acts existing in dstc3 seed data,
e.g. a dialogue act with 3 triples {A,B,C} can
be abridged to obtain {A,B}, {B,C}, {A,C},
{A}, {B}, {C} and itself.

• Combination: As all possible triples are pre-
defined in the domain ontology of DSTC3 by
experts. We use a general policy of triples
combination, which randomly selects at most
Nc triples to make up a dialogue act. (Nc is
set as 3 empirically.)

Then we fill up each non-enumerable slot in the
dialogue act by randomly choosing a value of this
slot, which ends when each value appears at least
Nv times in all the collected dialogue acts. Nv
is set as 3 empirically. After that, we have 1420
and 20670 dialogue acts from the seed abridge-
ment and combination respectively. New data
samples are generated starting from these dialogue
acts, through the atomic templates and the sen-
tence generator (e.g. 1-best output is kept).

The SLU model and sentence generator use the
same hyper-parameters. The dimension of word
embeddings (Glove3 word vectors are used for
initialization) is 100 and the number of hidden
units is 128. Dropout rate is 0.5 and batch size
is 20. Maximum norm for gradient clipping is
set to 5 and Adam optimizer is used with an ini-
tial learning rate of 0.001. All training consists

2The data splits, atomic templates and extra dialogue
acts will be available at https://github.com/sz128/
DAAT_SLU

3http://nlp.stanford.edu/data/glove.
6B.zip

of 50 epochs with early stopping on the develop-
ment set. We report F1-score of extracting act-
slot-value triples by the official scoring script from
http://camdial.org/˜mh521/dstc/.

4.3 Systems

We first compare two SLU models to answer why
the HD model is chosen for dialogue act based
SLU:

• ZS: zero-shot learning of SLU (Yazdani and
Henderson, 2015) which can adapt to unseen
dialogue acts.

• HD: the hierarchical decoding model (Zhao
et al., 2019) is adopted in our system.

We make comparisons of other data augmenta-
tion methods and the atomic templates (AT):

• Naive: We replace the value simultaneously
existing in an utterance and its semantic la-
bels of dstc3 seed by randomly selecting a
value of the corresponding slot. It ends when
each value appears at least Nv times.

• Human: Zhu et al. (2014) proposed to de-
sign a large number of sentence-level tem-
plates for DSTC3 with lots of human efforts.

• Oracle: The oracle training set is used which
simulates the perfect data augmentation.

Without data augmentation, the SLU models
are pre-trained on DSTC2 dataset (source domain)
and finetuned with dstc3 seed set. In our data aug-
mentation method, the sentence generator based
on atomic concepts is also pre-trained on DSTC2
dataset and finetuned with the dstc3 seed. The
SLU model is first pre-trained on DSTC2 dataset,
then finetuned with the augmented dataset and fi-
nally finetuned with the dstc3 seed.

4.4 Results and Analysis

The main results are illustrated in Table 2. We can
see that:

1. The hierarchical decoding (HD) model gets
better performance than the zero-shot learn-
ing (ZS) method of SLU.

2. The seed data dstc3 seed limits the power of
the SLU model, and even the naive augmen-
tation can enhance it.

https://github.com/sz128/DAAT_SLU
https://github.com/sz128/DAAT_SLU
http://nlp.stanford.edu/data/glove.6B.zip
http://nlp.stanford.edu/data/glove.6B.zip
http://camdial.org/~mh521/dstc/


3641

SLU Augmentation F1-score
ZS w/o 68.3

HD

w/o 78.5
Naive 82.9

AT (seed abridgement) 85.5
AT (combination) 87.9

AT (seed abr. + comb.) 88.6
Human (Zhu et al., 2014) 90.4

Oracle 96.9

Table 2: SLU performances of different systems on the
DSTC3 evaluation set.

3. Our data augmentation method with atomic
templates (AT) improves the SLU perfor-
mance dramatically. One reason may be the
generated data has higher variety of semantic
meaning than the naive augmentation. Com-
bination can make up more dialogue acts and
shows better result than Seed abridgement,
while Seed abridgement provides more real-
istic dialogue acts. Thus, their union gives
the best result.

4. The best performance of our method is close
to the human-designed sentence-level tem-
plates (Zhu et al., 2014), while our approach
needs much less human efforts.

Ablation Study We conduct several ablation
studies to analyze the effectiveness of different
components of our method, as shown in Table 3.
By removing SLU model pretraining on DSTC2
(“- dstc2”) and finetuning on the seed data (“-
dstc3 seed”), we can see a significant decrease in
SLU performance. When we subsequently cast
aside the sentence generator (“- sentence gener-
ator”, i.e. using the atomic exemplars as inputs
of SLU model directly), the SLU performance
decreases by 10.3%. This shows that the sen-
tence generator can produce more natural utter-
ances. If we replace the atomic exemplars as
the corresponding act-slot-value triples (“- atomic
templates”), the SLU performance drops sharply.
The reason may be that the atomic templates pro-
vide a better description of corresponding seman-
tic meanings than the surfaces of the triples. Ex-
amples of generated data samples are in Appendix
A.
Number of seed samples Figure 2 shows the
number of seed samples used versus SLU perfor-
mance on DSTC3 evaluation set. For zero-shot
case (no seed samples), our method is much better
than the baseline. When the number of seed sam-

Method F1-score
HD + AT(seed abr. + comb.) 88.6
- dstc2 86.2
- dstc3 seed 84.5
- dstc2, - dstc3 seed 84.3

- sentence generator 74.0
- atomic templates 70.5

Table 3: SLU performances on the DSTC3 evaluation
set when removing different modules of our method.

Figure 2: SLU performance of different methods with
varying number of seed samples randomly selected
from the oracle DSTC3 training set.

ples increases, our method outperforms the base-
line constantly.

5 Conclusion

In this paper, we propose a new data augmenta-
tion method with atomic templates for SLU. The
atomic templates provide exemplars in natural lan-
guage for act-slot-value triples, involving mini-
mum human efforts. An encoder-decoder model
is exploited to generate utterances based on the
atomic exemplars. We believe our method can also
be applied to SLU systems with other semantic
representations (e.g. semantic frame). Experimen-
tal results show that our method achieves signifi-
cant improvements on DSTC 2&3 dataset, and it is
is very effective for SLU domain adaptation with
limited data.

Acknowledgments

This work has been supported by the National
Key Research and Development Program of China
(Grant No. 2017YFB1002102) and the China
NSFC projects (No. 61573241). We thank
the anonymous reviewers for their thoughtful
comments and efforts towards improving this
manuscript.



3642

References

Ankur Bapna, Gökhan Tür, Dilek Hakkani-Tür, and
Larry P. Heck. 2017. Towards zero-shot frame se-
mantic parsing for domain scaling. In 18th Annual
Conference of the International Speech Communi-
cation Association, pages 2476–2480.

Paul E. Black. 2004. Ratcliff/Obershelp pattern recog-
nition. In Dictionary of Algorithms and Data
Structures [online], Paul E. Black, ed. Avail-
able from: https://www.nist.gov/dads/
HTML/ratcliffObershelp.html (accessed
20 May 2019).

Emmanuel Ferreira, Bassam Jabaian, and Fabrice
Lefèvre. 2015. Zero-shot semantic parser for spoken
language understanding. In Sixteenth Annual Con-
ference of the International Speech Communication
Association.

Alex Graves. 2012. Supervised Sequence Labelling
with Recurrent Neural Networks. Springer Berlin
Heidelberg.

Caglar Gulcehre, Sungjin Ahn, Ramesh Nallapati,
Bowen Zhou, and Yoshua Bengio. 2016. Pointing
the unknown words. In Proceedings of the 54th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 140–
149.

Matthew Henderson, Blaise Thomson, and Jason D
Williams. 2014a. The second dialog state tracking
challenge. In Proceedings of the 15th Annual Meet-
ing of the Special Interest Group on Discourse and
Dialogue (SIGDIAL), pages 263–272.

Matthew Henderson, Blaise Thomson, and Jason D
Williams. 2014b. The third dialog state tracking
challenge. In 2014 IEEE Spoken Language Tech-
nology Workshop (SLT), pages 324–329. IEEE.

Yutai Hou, Yijia Liu, Wanxiang Che, and Ting Liu.
2018. Sequence-to-sequence data augmentation for
dialogue language understanding. In Proceedings of
the 27th International Conference on Computational
Linguistics, pages 1234–1245.

Sungjin Lee and Rahul Jha. 2018. Zero-shot adaptive
transfer for conversational language understanding.
arXiv preprint arXiv:1808.10059.

Bing Liu and Ian Lane. 2016. Attention-based recur-
rent neural network models for joint intent detection
and slot filling. In 17th Annual Conference of the In-
ternational Speech Communication Association (In-
terSpeech).

Minh-Thang Luong, Hieu Pham, and Christopher D
Manning. 2015. Effective approaches to attention-
based neural machine translation. arXiv preprint
arXiv:1508.04025.

Grégoire Mesnil, Yann Dauphin, Kaisheng Yao,
Yoshua Bengio, Li Deng, Dilek Hakkani-Tur, Xi-
aodong He, Larry Heck, Gokhan Tur, Dong Yu, et al.
2015. Using recurrent neural networks for slot fill-
ing in spoken language understanding. IEEE/ACM
Transactions on Audio, Speech, and Language Pro-
cessing, 23(3):530–539.

Gokhan Tur and Renato De Mori. 2011. Spoken lan-
guage understanding: Systems for extracting seman-
tic information from speech. John Wiley & Sons.

Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly.
2015a. Pointer networks. In Advances in Neural
Information Processing Systems, pages 2692–2700.

Oriol Vinyals, Łukasz Kaiser, Terry Koo, Slav Petrov,
Ilya Sutskever, and Geoffrey Hinton. 2015b. Gram-
mar as a foreign language. In Advances in neural
information processing systems, pages 2773–2781.

Puyang Xu and Qi Hu. 2018. An end-to-end approach
for handling unknown slot values in dialogue state
tracking. In Proceedings of the 56th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 1448–1457.

Majid Yazdani and James Henderson. 2015. A model
of zero-shot learning of spoken language under-
standing. In Proceedings of the 2015 Conference on
Empirical Methods in Natural Language Process-
ing, pages 244–249.

Kang Min Yoo, Youhyun Shin, and Sang-goo Lee.
2018. Data augmentation for spoken language un-
derstanding via joint variational generation. arXiv
preprint arXiv:1809.02305.

Steve Young. 2007. CUED standard dialogue acts.
Report, Cambridge University Engineering Depart-
ment, 14th October.

Zijian Zhao, Su Zhu, and Kai Yu. 2019. A hierarchical
decoding model for spoken language understanding
from unaligned data. In IEEE International Con-
ference on Acoustics, Speech and Signal Processing
(ICASSP), pages 7305–7309.

Su Zhu, Lu Chen, Kai Sun, Da Zheng, and Kai
Yu. 2014. Semantic parser enhancement for di-
alogue domain extension with little data. In
2014 IEEE Spoken Language Technology Workshop
(SLT), pages 336–341. IEEE.

Su Zhu and Kai Yu. 2018. Concept transfer learning for
adaptive language understanding. In Proceedings of
the 19th Annual SIGdial Meeting on Discourse and
Dialogue, pages 391–399. Association for Compu-
tational Linguistics.

https://www.nist.gov/dads/HTML/ratcliffObershelp.html
https://www.nist.gov/dads/HTML/ratcliffObershelp.html


3643

A Examples of generated data

Dialogue act Atomic exemplars Generated utterance
thankyou
bye

thank you
good bye

Thank you good bye.

request(addr)
request(phone)

the address
the phone number

The address and phone number.

request(addr)
request(phone)

whats the address
what is the phone number

What is the address and phone number?

inform(type=coffeeshop)
inform(hasinternet=true)

cafe
has internet connection

I’m looking for a cafe has the internet con-
nection.

affirm
inform(type=restaurant)
inform(pricerange=moderate)

yes
looking for a restaurant
moderately priced

Yes, I’m looking for a moderately priced
restaurant.

request(childrenallowed) does it allow children Does it have children?
request(hastv)
request(addr)

does it has a television
the address

Does it have the television address and ad-
dress?

Table 4: Examples of generated data samples for DSTC3. It shows that the generated utterances are associ-
ated with the atomic exemplars. For some frequent triples, well-formed utterances can be produced. We can
find two bad cases at the end of the table. The reason may be that both “request(childrenallowed)” and “re-
quest(hastv);request(addr)” never appear in the dstc3 seed, thus the sentence generator doesn’t fit well.


