



















































Normalization of Transliterated Words in Code-Mixed Data Using Seq2Seq Model & Levenshtein Distance


Proceedings of the 2018 EMNLP Workshop W-NUT: The 4th Workshop on Noisy User-generated Text, pages 49–53
Brussels, Belgium, Nov 1, 2018. c©2018 Association for Computational Linguistics

49

Normalization of Transliterated Words in Code-Mixed Data Using
Seq2Seq Model & Levenshtein Distance

Soumil Mandal, Karthick Nanmaran

Department of Computer Science & Engineering
SRM Institute of Science & Technology, Chennai, India
{soumil.mandal, karthicknanmaran}@gmail.com

Abstract

Building tools for code-mixed data is rapidly
gaining popularity in the NLP research com-
munity as such data is exponentially rising on
social media. Working with code-mixed data
contains several challenges, especially due to
grammatical inconsistencies and spelling vari-
ations in addition to all the previous known
challenges for social media scenarios. In this
article, we present a novel architecture focus-
ing on normalizing phonetic typing variations,
which is commonly seen in code-mixed data.
One of the main features of our architecture is
that in addition to normalizing, it can also be
utilized for back-transliteration and word iden-
tification in some cases. Our model achieved
an accuracy of 90.27% on the test data.

1 Introduction

With rising popularity of social media, the amount
of data is rising exponentially. If mined, this data
can proof to be useful for various purposes. In
countries where the number of bilinguals are high,
we see that users tend to switch back and forth be-
tween multiple languages, a phenomenon known
as code-mixing or code-switching. An interest-
ing case is switching between languages which
share different native scripts. On such occasions,
one of the two languages is typed in it’s phoneti-
cally transliterated form in order to use a common
script. Though there are some standard transliter-
ation rules, for example ITRANS 1, ISO 2, but it
is extremely difficult and un-realistic for people to
follow them while typing. This indeed is the case
as we see that identical words are being transliter-
ated differently by different people based on their
own phonetic judgment influenced by dialects, lo-
cation, or sometimes even based on the informal-
ity or casualness of the situation. Thus, for cre-

1https://en.wikipedia.org/wiki/ITRANS
2https://en.wikipedia.org/wiki/ISO 15919

ating systems for code-mixed data, post language
tagging, normalization of transliterated text is ex-
tremely important in order to identify the word
and understand it’s semantics. This would help
a lot in systems like opinion mining, and is actu-
ally necessary for tasks like summarization, trans-
lation, etc. A normalizing module will also be of
immense help while making word embeddings for
code-mixed data.

In this paper, we present an architecture for
automatic normalization of phonetically translit-
erated words to their standard forms. The lan-
guage pair we have worked on is Bengali-English
(Bn-En), where both are typed in Roman script,
thus the Bengali words are in their transliterated
form. The canonical or normalized form we have
considered is the Indian Languages Translitera-
tion (ITRANS) form of the respective Bengali
word. Bengali is an Indo-Aryan language of In-
dia where 8.10% 3 of the total population are 1st

language speakers and is also the official language
of Bangladesh. The native script of Bengali is the
Eastern Nagari Script 4. Our architecture utilizes
fully char based sequence to sequence learning in
addition to Levenshtein distance to give the final
normalized form or as close to it as possible. Some
additional advantages of our system is that at an
intermediate stage, the back-transliterated form of
the word can be fetched (i.e. word identifica-
tion), which will be very useful in several cases
as original tools (i.e. tools using native script) can
be utilized, for example emotion lexicons. Some
other important contributions of our research are
the new lexicons that have been prepared (dis-
cussed in Sec 3) which can be used for building
various other tools for studying Bengali-English
code-mixed data.

3https://en.wikipedia.org/wiki/Languages of India
4https://www.omniglot.com/writing/bengali.htm



50

2 Related Work

Normalization of text has been studied quite a
lot (Sproat et al., 1999), especially as it acts as
a pre-processing step for several text process-
ing systems. Using Conditional Random Fields
(CRF), Zhu et al. (2007) performed text normal-
ization on informal emails. Dutta et al. (2015)
created a system based on noisy channel model
for text normalization which handles wordplay,
contracted words and phonetic variations in code-
mixed background. An unsupervised framework
was presented by Sridhar (2015) for normaliz-
ing domain-specific and informal noisy texts using
distributed representation of words. The soundex
algorithm was used in (Sitaram et al., 2015) and
(Sitaram and Black, 2016) for spelling correc-
tion of transliterated words and normalization in
a speech to text scenario of code-mixed data re-
spectively. Sharma et al. (2016) build a normal-
ization system using noisy channel framework and
SILPA spell checker in order to build a shallow
parser. Sproat and Jaitly (2016) build a system
combining two models, where one essentially is a
seq2seq model which checks the possible normal-
izations and the other is a language model which
considers context information. Jaitly and Sproat
(2017) used a seq2seq model with attention trained
at sentence level followed by error pruning us-
ing finite-state filters to build a normalization sys-
tem, mainly targeted for text to speech purposes.
A similar flow was adopted by Zare and Rohatgi
(2017) as well where seq2seq was used for nor-
malization and a window of size 20 was consid-
ered for context. Singh et al. (2018) exploited the
fact that words and their variations share similar
context in large noisy text corpora to build their
normalizing model, using skip gram and cluster-
ing techniques. To the best of our knowledge,
the system architecture proposed by us hasn’t been
tried before, especially for code-mixed data.

3 Data Sets

On a whole, three data sets or lexicons were cre-
ated. The first data set was a parallel lexicon (PL)
where the 1st column had phonetically transliter-
ated Bn words in Roman taken from code-mixed
data prepared in Mandal et al. (2018b). The 2nd

column consisted of the standard Roman translit-
erations (ITRANS) of the respective words. To get
this, we first manually back-transliterated PLcol 1
to the original word in Eastern Nagari script, and

then converted it into standardized ITRANS for-
mat. The final size of the PL was 6000. The
second lexicon we created was a transliteration
dictionary (BN TRANS) where the first column
had Bengali words in Eastern Nagari script taken
from samsad 5, while the second column had the
standard transliterations (ITRANS). The number
of entries in the dictionary was 21850. For test-
ing, we took the data used in Mandal and Das
(2018), language tagged it using the system de-
scribed in Mandal et al. (2018a), and then col-
lected Bn tagged tokens. Post manual checking
and discarding of misclassified tokens, the size
of the list was 905. Finally, each of the words
were tagged with their ITRANS using the same
approach used for making PL. For PLcol 1 and test
data, some initial rule based normalization tech-
niques were used. If the input string contains a
digit, it was replaced by the respective phone (e.g.
ek for 1, dui for 2, etc), and if there are n consecu-
tive identical characters where n > 2 (elongation),
it was trimmed down to 2 consecutive characters
(e.g. baaaad will become baad), as no word in
it’s standard form has more than two consecutive
identical characters.

4 Proposed Method

Our method is a two step modular approach com-
prising of two degrees of normalization. The first
normalization module does an initial normaliza-
tion and tries to convert the input string closest to
the standard transliteration. The second normal-
ization module takes the output from the first mod-
ule and tries to match with the standard translitera-
tions present in the dictionary (BN TRANS). The
candidate with the closest match is returned as the
final normalized string.

5 First Normalization Module

The purpose of this module is to phonetically nor-
malize the word as close to the standard transliter-
ation as possible, to make the work of the match-
ing module easier. To achieve this, our idea was
to train a sequence to sequence model where the
input sequences are user transliterated words and
the target sequences are the respective ITRANS
transliterations. We had specifically chosen this
architecture as it has performed amazingly well in
complex sequence mapping tasks like neural ma-
chine translation and summarization.

5http://dsal.uchicago.edu/dictionaries/biswas-bengali/



51

5.1 Seq2Seq Model

The sequence to sequence model (Sutskever et al.,
2014) is a relatively new idea for sequence learn-
ing using neural networks. It has been especially
popular since it achieved state of the art results in
machine translation task. Essentially, the model
takes as input a sequence X = {x1, x2, ..., xn}
and tries to generate another sequence Y = {y1,
y2, ..., ym}, where xi and yi are the input and
target symbols respectively. The architecture of
seq2seq model comprises of two parts, the en-
coder and decoder. As the input and target vec-
tors were quite small (words), attention (Vaswani
et al., 2017) mechanism was not incorporated.

5.1.1 Encoder
Encoder essentially takes a variable length se-
quence as input and encodes it into a fixed length
vector, which is supposed to summarize it’s mean-
ing taking into context as well. A recurrent neural
network (RNN) cell is used to achieve this. The
directional encoder reads the sequence from one
end to the other (left to right in our case).

~ht = ~f enc(Ex(xt),~ht-1)

Here, Ex is the input embedding lookup table (dic-
tionary), ~f enc are the transfer function for the re-
current unit e.g. Vanilla, LSTM or GRU. A con-
tiguous sequence of encodings C = {h1, h2, ..., hn}
is constructed which is then passed on to the de-
coder.

5.1.2 Decoder
Decoder takes input context vector C from the en-
coder, and computes the hidden state at time t as,

st = fdec(Ey(yt-1), st-1, ct)

Subsequently, a parametric function outk returns
the conditional probability using the next target
symbol being k. Here, the concept of teacher forc-
ing is utilized, the strategy of feeding output of the
model from a prior time-step as input.

p(yt = k | y < t,X) =
1

Z
exp(outk(Ey(yt − 1), st, ct))

Z is the normalizing constant∑
jexp(outj(Ey(yt − 1), st, ct))

5.2 Training

The model is trained by minimizing the negative
log-likelihood. For training, we used the fully
character based seq2seq model (Lee et al., 2016)
with stacked LSTM cells. The input units were
user typed phonetic transliterations (PLcol 1) while
the target units were respective standard transliter-
ations (PLcol 2). Thus, the model learns to map
user transliterations to standard transliterations,
effectively learning to normalize phonetic varia-
tions. The lookup table Ex we used for character
encoding was a dictionary where the keys were the
26 English alphabets and the values were the re-
spective index. Encodings at character level were
then padded to the length of the maximum existing
word in the dataset, which was 14, and was con-
verted to one-hot encodings prior to feeding the to
the seq2seq model. We created our seq2seq model
using the Keras (Chollet et al., 2015) library. The
batch size was set to 64, and number of epochs
was set to 100. The size of the latent dimension
was kept at 128. Optimizer we chose was rm-
sprop, learning rate set at 0.001, loss was categor-
ical crossentropy and transfer function used was
softmax. Accuracy and loss graphs during train-
ing with respect to epochs are shown in Fig 1.

Figure 1: Training accuracy and loss.

As we can see from Fig 1, the accuracy reached
at the end of training was not too high (around
41.2%) and the slope became asymptotic. This
is quite understandable as the amount of training
data was relatively quite low for the task, and the
phonetic variations were quite high. On running
this module on our testing data, an accuracy of
51.04% was achieved. It should be noted that even
a single character predicted wrongly by the soft-
max function reduces the accuracy.



52

6 Second Normalization Module

This module basically comprises of the string
matching algorithm. For this, we have used
Levenshtein distance (LD) (Levenshtein, 1966),
which is a string metric for measuring difference
between two sequences. It does so by calculating
the minimum number of insertions, deletions and
substitutions required for converting one sequence
to the other. Here, the output from the previous
module is compared with all the standard ITRANS
entries present in BN TRANS and the string with
the least Levenshtein distance is given as out-
put, which is the final normalized form. If there
are ties, the instance which has higher matches
traversing from left to right is given more prior-
ity. Also, observing the errors from first normal-
izer, we noticed that in a lot of cases, the char-
acter pairs {a,o} and {b,v} are used interchange-
ably quite often (language specific phonological
features), both in phonetic transliterations alone,
as well as when compared with ITRANS. Thus,
along with the standard approach, we tried a mod-
ified version as well where the cost of the above
mentioned character pairs are same, i.e. they are
treated as identical characters. This was simply
done by assigning special symbols to those pairs,
and replacing them in the input parameters. For
example, post replacement, distance(chalo, chala)
will become distance(ch$l$, ch$l$ ).

7 Evaluation

Our system was evaluated in two ways, one at
word level and another at task level.

7.1 Word Level

Here, the basic idea was compare the normalized
words with the respective standard transliterations.
For this, the testing data discussed in Sec 3 was
used. For comparison purposes, three other se-
tups other than our proposed model (setup 4) were
tested, all of which are described in Table 1.

Model 1st Norm LD Acc
setup 1 no standard 58.78
setup 2 no modified 61.10
setup 3 yes standard 89.72
setup 4 yes modified 90.27

Table 1: Comparison of different setups.

From Table 1, we can see that the jump in accu-

racy from setup 1 to setup 3 is quite significant
(by 30.94%). This proves that instead of sim-
ple distance comparison with lexicon entries, a
prior seq2seq normalization can have great impact
on the performance. Additionally, we can also
see that when modified input is given to the Lev-
enshtein distance (LD), the accuracies achieved
are slightly better. On analyzing the errors, we
found out that majority (92%) of them is due to
the fact that the standard from was not present in
BN TRANS, i.e. was out of vocabulary. These
words were mostly slangs, expressions, or two
words joined into a single one. The other 8%
was due to the first module casuing substantial
deviation from normal form. For deeper analy-
sis, we collected the ITRANS of errors due out of
vocab, and on comparison with the first normal-
izations, the mean LD was calculated to be 1.89,
which is suggesting that if they were present in
BN TRANS, the normalizer would have given the
correct output.

7.2 Task Level
For task level evaluation, we decided to go with
sentiment analysis using the exact setup and data
described in Mandal et al. (2018b), on Bengali-
English code-mixed data. All the training and test-
ing data were normalized using our system along
with the lexicons that are mentioned. Finally, the
same steps were followed and the different metrics
were calculated. The comparison of the systems
prior (noisy) and post normalization (normalized)
is shown in Table 2.

Model Acc Prec Rec F1
noisy 80.97 81.03 80.97 81.20

normalized 82.47 82.52 82.47 82.61

Table 2: Prior and post normalization results.

We can see an improvement in the accuracy (by
1.5%). On further investigation, we saw that the
unigram, bigram and trigram matches with the bag
of n-grams and testing data increased by 1.6%,
0.4% and 0.1% respectively. The accuracy can
be improved further more if back-transliteration is
done and Bengali sentiment lexicons are used but
that is beyond the scope of this paper.

8 Discussion

Though our proposed model achieved high accu-
racy, some drawbacks are there. Firstly is the re-



53

quirement for the parallel corpus (PL) for training
a seq2seq model, as manual checking and back-
transliteration is quite tedious. Speed of process-
ing in terms of words/second is not very high due
to the fact that both seq2seq and Levenshthein dis-
tance calculation is computationally heavy, plus
the O(n) search time. For string matching, sim-
pler and faster methods can be tested and search
area reduction algorithms (e.g. specifying search
domains depending on starting character) can be
tried to improve the processing speed. A lexical
checker can be added as well prior to seq2seq to
see if the word is already in it’s transliterated form.

9 Conclusion & Future Work

In this article, we have presented a novel archi-
tecture for normalization of transliterated words
in code-mixed scenario. We have employed the
seq2seq model with LSTM cells for initial normal-
ization followed by evaluating Levenshthein dis-
tance to retrieve the standard transliteration from a
lexicon. Our approach got an accuracy of 90.27%
on testing data, and improved the accuracy of a
pre-existing sentiment analysis system by 1.5%.
In future, we would like to collect more translit-
erated words and increase the data size in order to
improve both PL and BN TRANS. Also, combin-
ing this module with a context capturing system
and expanding to other Indic languages will be one
of the goals as well.

References
François Chollet et al. 2015. Keras. https://
keras.io.

Sukanya Dutta, Tista Saha, Somnath Banerjee, and
Sudip Kumar Naskar. 2015. Text normalization in
code-mixed social media text. In Recent Trends in
Information Systems (ReTIS), 2015 IEEE 2nd Inter-
national Conference on, pages 378–382. IEEE.

Navdeep Jaitly and Richard Sproat. 2017. An rnn
model of text normalization.

Jason Lee, Kyunghyun Cho, and Thomas Hofmann.
2016. Fully character-level neural machine trans-
lation without explicit segmentation. arXiv preprint
arXiv:1610.03017.

Vladimir I Levenshtein. 1966. Binary codes capable
of correcting deletions, insertions, and reversals. In
Soviet physics doklady, volume 10, pages 707–710.

Soumil Mandal and Dipankar Das. 2018. Ana-
lyzing roles of classifiers and code-mixed fac-

tors for sentiment identification. arXiv preprint
arXiv:1801.02581.

Soumil Mandal, Sourya Dipta Das, and Dipankar Das.
2018a. Language identification of bengali-english
code-mixed data using character & phonetic based
lstm models. arXiv preprint arXiv:1803.03859.

Soumil Mandal, Sainik Kumar Mahata, and Dipankar
Das. 2018b. Preparing bengali-english code-mixed
corpus for sentiment analysis of indian languages.
arXiv preprint arXiv:1803.04000.

Arnav Sharma, Sakshi Gupta, Raveesh Motlani, Piyush
Bansal, Manish Srivastava, Radhika Mamidi, and
Dipti M Sharma. 2016. Shallow parsing pipeline for
hindi-english code-mixed social media text. arXiv
preprint arXiv:1604.03136.

Rajat Singh, Nurendra Choudhary, and Manish Shri-
vastava. 2018. Automatic normalization of word
variations in code-mixed social media text. arXiv
preprint arXiv:1804.00804.

Sunayana Sitaram and Alan W Black. 2016. Speech
synthesis of code-mixed text. In LREC.

Sunayana Sitaram, Sai Krishna Rallabandi, and SRAW
Black. 2015. Experiments with cross-lingual sys-
tems for synthesis of code-mixed text. In 9th ISCA
Speech Synthesis Workshop, pages 76–81.

Richard Sproat, Alan W Black, Stanley Chen, Shankar
Kumar, Mari Ostendorf, and Christopher Richards.
1999. Normalization of non-standard words. In
WS’99 Final Report. Citeseer.

Richard Sproat and Navdeep Jaitly. 2016. Rnn ap-
proaches to text normalization: A challenge. arXiv
preprint arXiv:1611.00068.

Vivek Kumar Rangarajan Sridhar. 2015. Unsupervised
text normalization using distributed representations
of words and phrases. In Proceedings of the 1st
Workshop on Vector Space Modeling for Natural
Language Processing, pages 8–16.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 6000–6010.

Maryam Zare and Shaurya Rohatgi. 2017. Deepnorm-
a deep learning approach to text normalization.
arXiv preprint arXiv:1712.06994.

Conghui Zhu, Jie Tang, Hang Li, Hwee Tou Ng, and
Tiejun Zhao. 2007. A unified tagging approach to
text normalization. In Proceedings of the 45th An-
nual Meeting of the Association of Computational
Linguistics, pages 688–695.

https://keras.io
https://keras.io

