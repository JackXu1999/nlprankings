



















































Hippocratic Abbreviation Expansion


Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 364–369,
Baltimore, Maryland, USA, June 23-25 2014. c©2014 Association for Computational Linguistics

Hippocratic Abbreviation Expansion

Brian Roark and Richard Sproat
Google, Inc, 79 Ninth Avenue, New York, NY 10011

{roark,rws}@google.com

Abstract

Incorrect normalization of text can be par-
ticularly damaging for applications like
text-to-speech synthesis (TTS) or typing
auto-correction, where the resulting nor-
malization is directly presented to the user,
versus feeding downstream applications.
In this paper, we focus on abbreviation
expansion for TTS, which requires a “do
no harm”, high precision approach yield-
ing few expansion errors at the cost of
leaving relatively many abbreviations un-
expanded. In the context of a large-
scale, real-world TTS scenario, we present
methods for training classifiers to establish
whether a particular expansion is apt. We
achieve a large increase in correct abbrevi-
ation expansion when combined with the
baseline text normalization component of
the TTS system, together with a substan-
tial reduction in incorrect expansions.

1 Introduction

Text normalization (Sproat et al., 2001) is an im-
portant initial phase for many natural language and
speech applications. The basic task of text normal-
ization is to convert non-standard words (NSWs)
— numbers, abbreviations, dates, etc. — into stan-
dard words, though depending on the task and the
domain a greater or lesser number of these NSWs
may need to be normalized. Perhaps the most de-
manding such application is text-to-speech synthe-
sis (TTS) since, while for parsing, machine trans-
lation and information retrieval it may be accept-
able to leave such things as numbers and abbre-
viations unexpanded, for TTS all tokens need to
be read, and for that it is necessary to know how
to pronounce them. Which normalizations are re-
quired depends very much on the application.

What is also very application-dependent is the
cost of errors in normalization. For some applica-
tions, where the normalized string is an interme-

diate stage in a larger application such as trans-
lation or information retrieval, overgeneration of
normalized alternatives is often a beneficial strat-
egy, to the extent that it may improve the accu-
racy of what is eventually being presented to the
user. In other applications, such as TTS or typing
auto-correction, the resulting normalized string it-
self is directly presented to the user; hence errors
in normalization can have a very high cost relative
to leaving tokens unnormalized.

In this paper we concentrate on abbreviations,
which we define as alphabetic NSWs that it would
be normal to pronounce as their expansion. This
class of NSWs is particularly common in personal
ads, product reviews, and so forth. For example:
home health care svcs stat home health llc
osceola aquatic ctr stars rating write
audi vw repair ser quality and customer

Each of the examples above contains an abbrevi-
ation that, unlike, e.g., conventionalized state ab-
breviations such as ca for California, is either only
slightly standard (ctr for center) or not standard at
all (ser for service).

An important principle in text normalization for
TTS is do no harm. If a system is unable to re-
liably predict the correct reading for a string, it is
better to leave the string alone and have it default
to, say, a character-by-character reading, than to
expand it to something wrong. This is particularly
true in accessibility applications for users who rely
on TTS for most or all of their information needs.
Ideally a navigation system should read turn on
30N correctly as turn on thirty north; but if it can-
not resolve the ambiguity in 30N, it is far better to
read it as thirty N than as thirty Newtons, since lis-
teners can more easily recover from the first kind
of error than the second.

We present methods for learning abbreviation
expansion models that favor high precision (incor-
rect expansions < 2%). Unannotated data is used
to collect evidence for contextual disambiguation
and to train an abbreviation model. Then a small
amount of annotated data is used to build models
to determine whether to accept a candidate expan-

364



sion of an abbreviation based on these features.
The data we report on are taken from Google
MapsTM and web pages associated with its map en-
tries, but the methods can be applied to any data
source that is relatively abbreviation rich.

We note in passing that similar issues arise
in automatic spelling correction work (Wilcox-
O’Hearn et al., 2008), where it is better to leave
a word alone than to “correct” it wrongly.

2 Related work

There has been a lot of interest in recent years on
“normalization” of social media such as Twitter,
but that work defines normalization much more
broadly than we do here (Xia et al., 2006; Choud-
hury et al., 2007; Kobus et al., 2008; Beaufort et
al., 2010; Kaufmann, 2010; Liu et al., 2011; Pen-
nell and Liu, 2011; Aw and Lee, 2012; Liu et al.,
2012a; Liu et al., 2012b; Hassan and Menezes,
2013; Yang and Eisenstein, 2013). There is a good
reason for us to focus more narrowly. For Twit-
ter, much of the normalization task involves non-
standard language such as ur website suxx brah
(from Yang and Eisenstein (2013)). Expanding the
latter to your website sucks, brother certainly nor-
malizes it to standard English, but one could argue
that in so doing one is losing information that the
writer is trying to convey using an informal style.
On the other hand, someone who writes svc ctr
for service center in a product review is probably
merely trying to save time and so expanding the
abbreviations in that case is neutral with respect to
preserving the intent of the original text.

One other difference between the work we re-
port from much of the recent work cited above is
that that work focuses on getting high F scores,
whereas we are most concerned with getting high
precision. While this may seem like a trivial
trade off between precision and recall, our goal
motivates developing measures that minimize the
“risk” of expanding a term, something that is im-
portant in an application such as TTS, where one
cannot correct a misexpansion after it is spoken.

3 Methods

Since our target application is text-to-speech, we
define the task in terms of an existing TTS lexi-
con. If a word is already in the lexicon, it is left
unprocessed, since there is an existing pronuncia-
tion for it; if a word is out-of-vocabulary (OOV),
we consider expanding it to a word in the lexicon.
We consider a possible expansion for an abbrevi-
ation to be any word in the lexicon from which
the abbreviation can be derived by only deletion of

letters.1 For present purposes we use the Google
English text-to-speech lexicon, consisting of over
430 thousand words. Given an OOV item (possi-
ble abbreviation) in context, we make use of fea-
tures of the context and of the OOV item itself to
enumerate and score candidate expansions.

Our data consists of 15.1 billion words of text
data from Google MapsTM, lower-cased and tok-
enized to remove punctuation symbols. We used
this data in several ways. First, we used it to boot-
strap a model for assigning a probability of an ab-
breviation/expansion pair. Second, we used it to
extract contextual n-gram features for predicting
possible expansions. Finally, we sampled just over
14 thousand OOV items in context and had them
manually labeled with a number of categories, in-
cluding ‘abbreviation’. OOVs labeled as abbrevia-
tions were also labeled with the correct expansion.
We present each of these uses in turn.

3.1 Abbreviation modeling

We collect potential abbreviation/full-word pairs
by looking for terms that could be abbreviations
of full words that occur in the same context. Thus:

the svc/service center
heating clng/cooling system

dry clng/cleaning system

contributes evidence that svc is an abbreviation
of service. Similarly instances of clng in con-
texts that can contain cooling or cleaning are evi-
dence that clng could be an abbreviation of either
of these words. (The same contextual information
of course is used later on to disambiguate which
of the expansions is appropriate for the context.)
To compute the initial guess as to what can be a
possible abbreviation, a Thrax grammar (Roark et
al., 2012) is used that, among other things, speci-
fies that: the abbreviation must start with the same
letter as the full word; if a vowel is deleted, all ad-
jacent vowels should also be deleted; consonants
may be deleted in a cluster, but not the last one;
and a (string) suffix may be deleted.2 We count
a pair of words as ‘co-occurring’ if they are ob-
served in the same context. For a given context C,
e.g., the center, letWC be the set of words found
in that context. Then, for any pair of words u, v,
we can assign a pair count based on the count of
contexts where both occur:

c(u, v) = |{C : u ∈WC and v ∈WC}|
1We do not deal here with phonetic spellings in abbrevia-

tions such as 4get, or cases where letters have been transposed
due to typographical errors (scv).

2This Thrax grammar can be found at
http://openfst.cs.nyu.edu/twiki/bin/
view/Contrib/ThraxContrib

365



blvd boulevard rd road yrs years
ca california fl florida ctr center

mins minutes def definitely ste suite

Table 1: Examples of automatically mined abbrevia-
tion/expansion pairs.

Let c(u) be defined as
∑

v c(u, v). From these
counts, we can define a 2×2 table and calculate
statistics such as the log likelihood statistic (Dun-
ning, 1993), which we use to rank possible abbre-
viation/expansion pairs. Scores derived from these
type (rather than token) counts highly rank pairs of
in-vocabulary words and OOV possible abbrevia-
tions that are substitutable in many contexts.

We further filter the potential abbreviations by
removing ones that have a lot of potential expan-
sions, where we set the cutoff at 10. This removes
mostly short abbreviations that are highly ambigu-
ous. The resulting ranked list of abbreviation ex-
pansion pairs is then thresholded before building
the abbreviation model (see below) to provide a
smaller but more confident training set. For this
paper, we used 5-gram contexts (two words on ei-
ther side) to extract abbreviations and their expan-
sions. See Table 1 for some examples.

Our abbreviation model is a pair character lan-
guage model (LM), also known as a joint multi-
gram model (Bisani and Ney, 2008), whereby
aligned symbols are treated as a single token and
a smoothed n-gram model is estimated. This de-
fines a joint distribution over input and output
sequences, and can be efficiently encoded as a
weighted finite-state transducer. The extracted
abbreviation/expansion pairs are character-aligned
and a 7-gram pair character LM is built over
the alignments using the OpenGrm n-gram library
(Roark et al., 2012). For example:

c:c �:e �:n t:t �:e r:r
Note that, as we’ve defined it, the alignments from
abbreviation to expansion allow only identity and
insertion, no deletions or substitutions. The cost
from this LM, normalized by the length of the ex-
pansion, serves as a score for the quality of a pu-
tative expansion for an abbreviation.

For a small set of frequent, conventionalized
abbreviations (e.g., ca for California — 63 pairs
in total — mainly state abbreviations and similar
items), we assign an fixed pair LM score, since
these examples are in effect irregular cases, where
the regularities of the productive abbreviation pro-
cess do not capture their true cost.

3.2 Contextual features

To predict the expansion given the context, we ex-
tract n-gram observations for full words in the TTS
lexicon. We do this in two ways. First, we sim-

ply train a smoothed n-gram LM from the data.
Because of the size of the data set, this is heav-
ily pruned using relative entropy pruning (Stolcke,
1998). Second, we use log likelihood and log odds
ratios (this time using standardly defined n-gram
counts) to extract reliable bigram and trigram con-
texts for words. Space precludes a detailed treat-
ment of these two statistics, but, briefly, both can
be derived from contingency table values calcu-
lated from the frequencies of (1) the word in the
particular context; (2) the word in any context; (3)
the context with any word; and (4) all words in
the corpus. See Agresti (2002), Dunning (1993)
and Monroe et al. (2008) for useful overviews of
how to calculate these and other statistics to de-
rive reliable associations. In our case, we use them
to derive associations between contexts and words
occuring in those contexts. The contexts include
trigrams with the target word in any of the three
positions, and bigrams with the target word in ei-
ther position. We filter the set of n-grams based on
both their log likelihood and log odds ratios, and
provide those scores as features.
3.3 Manual annotations
We randomly selected 14,434 OOVs in their full
context, and had them manually annotated as
falling within one of 8 categories, along with the
expansion if the category was ‘abbreviation’. Note
that these are relatively lightweight annotations
that do not require extensive linguistics expertise.
The abbreviation class is defined as cases where
pronouncing as the expansion would be normal.
Other categories included letter sequence (expan-
sion would not be normal, e.g., TV); partial let-
ter sequence (e.g., PurePictureTV); misspelling;
leave as is (part of a URL or pronounced as a
word, e.g., NATO); foreign; don’t know; and junk.
Abbreviations accounted for nearly 23% of the
cases, and about 3/5 of these abbreviations were
instances from the set of 63 conventional abbrevi-
ation/expansion pairs mentioned in Section 3.1.
3.4 Abbreviation expansion systems
We have three base systems that we compare here.
The first is the hand-built TTS normalization sys-
tem. This system includes some manually built
patterns and an address parser to find common ab-
breviations that occur in a recognizable context.
For example, the grammar covers several hundred
city-state combinations, such as Fairbanks AK,
yielding good performance on such cases.

The other two systems were built using data ex-
tracted as described above. Both systems make
use of the pair LM outlined in Section 3.1, but
differ in how they model context. The first sys-

366



tem, which we call “N-gram”, uses a pruned Katz
(1987) smoothed trigram model. The second sys-
tem, which we call “SVM”, uses a Support Vec-
tor Machine (Cortes and Vapnik, 1995) to classify
candidate expansions as being correct or not. For
both systems, for any given input OOV, the pos-
sible expansion with the highest score is output,
along with the decision of whether to expand.

For the “N-gram” system, n-gram negative log
probabilities are extracted as follows. Let wi be
the position of the target expansion. We extract the
part of the n-gram probability of the string that is
not constant across all competing expansions, and
normalize by the number of words in that window.
Thus the score of the word is:

S(wi) = − 1
k + 1

i+k∑
j=i

log P(wj | wj−1wj−2)

In our experiments, k = 2 since we have a trigram
model, though in cases where the target word is the
last word in the string, k = 1, because there only
the end-of-string symbol must be predicted in ad-
dition to the expansion. We then take the Bayesian
fusion of this model with the pair LM, by adding
them in the log space, to get prediction from both
the context and abbreviation model.

For the “SVM” model, we extract features from
the log likelihood and log odds scores associated
with contextual n-grams, as well as from the pair
LM probability and characteristics of the abbrevi-
ation itself. We train a linear model on a subset of
the annotated data (see section 4). Multiple con-
textual n-grams may be observed, and we take the
maximum log likelihood and log odds scores for
each candidate expansion in the observed context.
We then quantize these scores down into 16 bins,
using the histogram in the training data to define
bin thresholds so as to partition the training in-
stances evenly. We also create 16 bins for the pair
LM score. A binary feature is defined for each
bin that is set to 1 if the current candidate’s score
is less than the threshold of that bin, otherwise 0.
Thus multiple bin features can be active for a given
candidate expansion of the abbreviation.

We also have features that fire for each type of
contextual feature (e.g., trigram with expansion as
middle word, etc.), including ‘no context’, where
none of the trigrams or bigrams from the current
example that include the candidate expansion are
present in our list. Further, we have features for
the length of the abbreviation (shorter abbrevia-
tions have more ambiguity, hence are more risky
to expand); membership in the list of frequent,
conventionalized abbreviations mentioned earlier;
and some combinations of these, along with bias

features. We train the model using standard op-
tions with Google internal SVM training tools.

Note that the number of n-grams in the two
models differs. The N-gram system has around
200M n-grams after pruning; while the SVM
model uses around a quarter of that. We also tried
a more heavily pruned n-gram model, and the re-
sults are only very slightly worse, certainly accept-
able for a low-resource scenario.

4 Experimental Results

We split the 3,209 labeled abbreviations into a
training set of 2,209 examples and a held aside de-
velopment set of 1,000 examples. We first evaluate
on the development set, then perform a final 10-
fold cross validation over the entire set of labeled
examples. We evaluate in terms of the percent-
age of abbreviations that were correctly expanded
(true positives, TP) and that were incorrectly ex-
panded (false positives, FP).

Results are shown in Table 2. The first two rows
show the baseline TTS system and SVM model.
On the development set, both systems have a false
positive rate near 3%, i.e., three abbreviations are
expanded incorrectly for every 100 examples; and
over 50% true positive rate, i.e., more than half of
the abbreviations are expanded correctly. To re-
port true and false positive rates for the N-gram
system we would need to select an arbitrary de-
cision threshold operating point, unlike the deter-
ministic TTS baseline and the SVM model with
its decision threshold of 0. Rather than tune such a
meta-parameter to the development set, we instead
present an ROC curve comparison of the N-gram
and SVM models, and then propose a method
for “intersecting” their output without requiring a
tuned decision threshold.

Figure 1 presents an ROC curve for the N-gram
and SVM systems, and for the simple Bayesian
fusion (sum in log space) of their scores. We can
see that the SVM model has very high precision
for its highest ranked examples, yielding nearly
20% of the correct expansions without any in-
correct expansions. However the N-gram system
achieves higher true positive rates when the false

Percent of abbreviations
dev set full set

System TP FP TP FP
TTS baseline 55.0 3.1 40.0 3.0
SVM model 52.6 3.3 53.3 2.6
SVM ∩ N-gram 50.6 1.1 50.3 0.9
SVM ∩ N-gram, then TTS 73.5 1.9 74.5 1.5

Table 2: Results on held-out labeled data, and with final
10-fold cross-validation over the entire labeled set. Percent-
age of abbreviations expanded correctly (TP) and percentage
expanded incorrectly (FP) are reported for each system.

367



C
or

re
ct

ex
pa

ns
io

n
pe

rc
en

ta
ge

(T
P)

0 1 2 3 4
0

10

20

30

40

50

60 N-­gramN-­gramN-­gram SVMSVMSVM SVM  +  N-­gramSVM  +  N-­gramSVM  +  N-­gram SVM  intersect  N-­gramSVM  intersect  N-­gramSVM  intersect  N-­gram

Incorrect  expansion  percentage  (FP)

C
or
re
ct
  e
xp
an
si
on
  p
er
ce
nt
ag
e  
(T
P)

Fi
gu

re
1:

R
O

C
cu

rv
e

pl
ot

tin
g

tr
ue

po
si

tiv
e

(c
or

re
ct

ex
pa

n-
si

on
)

pe
rc

en
ta

ge
s

ve
rs

us
fa

ls
e

po
si

tiv
e

(i
nc

or
re

ct
ex

pa
ns

io
n)

pe
rc

en
ta

ge
s

fo
rs

ev
er

al
sy

st
em

s
on

th
e

de
ve

lo
pm

en
ts

et
.

at
th

e
SV

M
’s

de
ci

si
on

th
re

sh
ol

d
co

rr
es

po
nd

in
g

to
ar

ou
nd

3.
3%

fa
ls

e
po

si
tiv

e
ra

te
.

T
he

si
m

pl
e

co
m

-
bi

na
tio

n
of

th
ei

r
sc

or
es

ac
hi

ev
es

st
ro

ng
im

pr
ov

e-
m

en
ts

ov
er

ei
th

er
m

od
el

,w
ith

an
op

er
at

in
g

po
in

t
as

so
ci

at
ed

w
ith

th
e

SV
M

de
ci

si
on

bo
un

da
ry

th
at

yi
el

ds
a

co
up

le
of

po
in

ts
im

pr
ov

em
en

ti
n

tr
ue

po
s-

iti
ve

s
an

d
a

fu
ll

1%
re

du
ct

io
n

in
fa

ls
e

po
si

tiv
e

ra
te

.
O

ne
si

m
pl

e
w

ay
to

co
m

bi
ne

th
es

e
tw

o
sy

st
em

ou
tp

ut
s

in
a

w
ay

th
at

do
es

no
tr

eq
ui

re
tu

ni
ng

a
de

-
ci

si
on

th
re

sh
ol

d
is

to
ex

pa
nd

th
e

ab
br

ev
ia

tio
n

if
an

d
on

ly
if

(1
)

bo
th

th
e

SV
M

m
od

el
an

d
th

e
N

-
gr

am
m

od
el

ag
re

e
on

th
e

be
st

ex
pa

ns
io

n;
an

d
(2

)
th

e
SV

M
m

od
el

sc
or

e
is

gr
ea

te
r

th
an

ze
ro

.
In

a
sl

ig
ht

ab
us

e
of

th
e

te
rm

‘i
nt

er
se

ct
io

n’
,w

e
ca

ll
th

is
co

m
bi

na
tio

n
‘S

V
M

in
te

rs
ec

tN
-g

ra
m

’(
or

‘S
V

M
\

N
-g

ra
m

’i
n

Ta
bl

e
2)

.U
si

ng
th

is
ap

pr
oa

ch
,o

ur
tr

ue
po

si
tiv

e
ra

te
on

th
e

de
v

se
t

de
cl

in
es

a
bi

t
to

ju
st

ov
er

50
%

,b
ut

ou
rf

al
se

po
si

tiv
e

ra
te

de
cl

in
es

ov
er

tw
o

fu
ll

pe
rc

en
ta

ge
po

in
ts

to
1.

1%
,y

ie
ld

in
g

a
ve

ry
hi

gh
pr

ec
is

io
n

sy
st

em
.

Ta
ki

ng
th

is
ve

ry
hi

gh
pr

ec
is

io
n

sy
st

em
co

m
bi

-
na

tio
n

of
th

e
N

-g
ra

m
an

d
SV

M
m

od
el

s,
w

e
th

en
co

m
bi

ne
w

ith
th

e
ba

se
lin

e
T

T
S

sy
st

em
as

fo
llo

w
s.

Fi
rs

tw
e

ap
pl

y
ou

r
sy

st
em

,a
nd

ex
pa

nd
th

e
ite

m
if

it
sc

or
es

ab
ov

e
th

re
sh

ol
d;

fo
r

th
os

e
ite

m
s

le
ft

un
-

ex
pa

nd
ed

,w
e

le
tt

he
T

T
S

sy
st

em
pr

oc
es

s
it

in
its

ow
n

w
ay

.I
n

th
is

w
ay

,w
e

ac
tu

al
ly

re
du

ce
th

e
fa

ls
e

po
si

tiv
e

ra
te

on
th

e
de

v
se

to
ve

r
th

e
ba

se
lin

e
T

T
S

sy
st

em
by

ov
er

1%
ab

so
lu

te
to

le
ss

th
an

2%
,w

hi
le

al
so

in
cr

ea
si

ng
th

e
tr

ue
po

si
tiv

e
ra

te
to

73
.5

%
,a

n

in
cr

ea
se

of
18

.5
%

ab
so

lu
te

.
O

f
co

ur
se

,
at

te
st

tim
e,

w
e

w
ill

no
t

kn
ow

w
he

th
er

an
O

O
V

is
an

ab
br

ev
ia

tio
n

or
no

t,
so

w
e

al
so

lo
ok

ed
at

th
e

pe
rf

or
m

an
ce

on
th

e
re

st
of

th
e

co
lle

ct
ed

da
ta

,
to

se
e

ho
w

of
te

n
it

er
ro

-
ne

ou
sl

y
su

gg
es

ts
an

ex
pa

ns
io

n
fr

om
th

at
se

t.
O

f
th

e
11

,1
57

ex
am

pl
es

th
at

w
er

e
ha

nd
-l

ab
el

ed
as

no
n-

ab
br

ev
ia

tio
ns

,o
ur

SV
M
\

N
-g

ra
m

sy
st

em
ex

-
pa

nd
ed

45
ite

m
s,

w
hi

ch
is

a
fa

ls
e

po
si

tiv
e

ra
te

of
0.

4%
un

de
r

th
e

as
su

m
pt

io
n

th
at

no
ne

of
th

em
sh

ou
ld

be
ex

pa
nd

ed
.

In
fa

ct
,

m
an

ua
l

in
sp

ec
tio

n
fo

un
d

th
at

20
%

of
th

es
e

w
er

e
co

rr
ec

t
ex

pa
ns

io
ns

of
ab

br
ev

ia
tio

ns
th

at
ha

d
be

en
m

is
-l

ab
el

ed
.

D
ur

in
g

sy
st

em
de

ve
lo

pm
en

t,
w

e
al

so
ex

pe
ri

-
m

en
te

d
w

ith
a

nu
m

be
r

of
al

te
rn

at
iv

e
hi

gh
pr

ec
i-

si
on

ap
pr

oa
ch

es
th

at
sp

ac
e

pr
ec

lu
de

s
ou

r
pr

es
en

t-
in

g
in

de
ta

il
he

re
,

in
cl

ud
in

g:
pr

un
in

g
th

e
nu

m
-

be
ro

fe
xp

an
si

on
ca

nd
id

at
es

ba
se

d
on

th
e

pa
ir

la
n-

gu
ag

e
m

od
el

sc
or

e;
on

ly
al

lo
w

in
g

ab
br

ev
ia

tio
n

ex
-

pa
ns

io
n

w
he

n
at

le
as

t
on

e
ex

tr
ac

te
d

n-
gr

am
co

n-
te

xt
is

pr
es

en
t

fo
r

th
at

ex
pa

ns
io

n
in

th
at

co
nt

ex
t;

an
d

C
A

R
T

tr
ee

(B
re

im
an

et
al

.,
19

84
)

tr
ai

ni
ng

w
ith

re
al

va
lu

ed
sc

or
es

.
So

m
e

of
th

es
e

yi
el

de
d

ve
ry

hi
gh

pr
ec

is
io

n
sy

st
em

s,
th

ou
gh

at
th

e
co

st
of

le
av

in
g

m
an

y
m

or
e

ab
br

ev
ia

tio
ns

un
ex

pa
nd

ed
.W

e
fo

un
d

th
at

,f
or

us
e

in
co

m
bi

na
tio

n
w

ith
th

e
ba

se
-

lin
e

T
T

S
sy

st
em

,l
ar

ge
ov

er
al

lr
ed

uc
tio

ns
in

fa
ls

e
po

si
tiv

e
ra

te
w

er
e

ac
hi

ev
ed

by
us

in
g

an
in

iti
al

sy
s-

te
m

w
ith

su
bs

ta
nt

ia
lly

hi
gh

er
T

P
an

d
so

m
ew

ha
t

hi
gh

er
FP

ra
te

s,
si

nc
e

fa
rf

ew
er

ab
br

ev
ia

tio
ns

w
er

e
th

en
pa

ss
ed

al
on

g
un

ex
pa

nd
ed

to
th

e
ba

se
lin

e
sy

s-
te

m
,w

ith
its

re
la

tiv
el

y
hi

gh
3%

FP
ra

te
.

To
en

su
re

th
at

w
e

ha
d

no
t

ov
er

-t
un

ed
ou

r
sy

s-
te

m
s

to
th

e
de

v
se

t
th

ro
ug

h
ex

pe
ri

m
en

ta
tio

n,
w

e
pe

rf
or

m
ed

10
-f

ol
d

cr
os

s
va

lid
at

io
n

ov
er

th
e

fu
ll

se
to

f
ab

br
ev

ia
tio

ns
,a

nd
th

e
re

su
lts

ar
e

pr
es

en
te

d
in

Ta
bl

e
2.

M
os

tn
ot

ab
ly

,t
he

T
T

S
ba

se
lin

e
sy

st
em

ha
sa

m
uc

h
lo

w
er

tr
ue

po
si

tiv
e

ra
te

;y
et

w
e

fin
d

ou
r

sy
st

em
s

ac
hi

ev
e

pe
rf

or
m

an
ce

ve
ry

cl
os

e
to

th
at

fo
r

th
e

de
ve

lo
pm

en
ts

et
,s

o
th

at
ou

rfi
na

lc
om

bi
na

tio
n

w
ith

th
e

T
T

S
ba

se
lin

e
w

as
ac

tu
al

ly
sl

ig
hl

y
be

tte
r

th
an

th
e

nu
m

be
rs

on
th

e
de

ve
lo

pm
en

ts
et

.

5
C

on
cl

us
io

ns

N
ot

es
fo

ri
nt

er
na

lr
ev

ie
w

er
s

•
M

ay
be

m
or

e
te

ch
ni

ca
l

ex
pl

an
at

io
n

of
lo

g
lik

el
ih

oo
d

an
d

lo
g

od
ds

sc
or

es

•
R

ev
am

pe
d

in
tr

o,
ba

ck
gr

ou
nd

,c
on

cl
us

io
n

an
d

ex
pa

nd
ed

re
fs

.

•
A

no
ny

m
iz

at
io

n
fo

rs
ub

m
is

si
on

.

Incorrect expansion percentage (FP)

Figure 1: ROC curve plotting true positive (correct expan-
sion) percentages versus false positive (incorrect expansion)
percentages for several systems on the development set.

positive rate falls between 1 and 3 percent, though
both systems reach roughly the same performance
at the SVM’s decision threshold corresponding to
around 3.3% false positive rate. The simple com-
bination of their scores achieves strong improve-
ments over either model, with an operating point
associated with the SVM decision boundary that
yields a couple of points improvement in true pos-
itives and a full 1% reduction in false positive rate.

One simple way to combine these two system
outputs in a way that does not require tuning a de-
cision threshold is to expand the abbreviation if
and only if (1) both the SVM model and the N-
gram model agree on the best expansion; and (2)
the SVM model score is greater than zero. In a
slight abuse of the term ‘intersection’, we call this
combination ‘SVM intersect N-gram’ (or ‘SVM
∩ N-gram’ in Table 2). Using this approach, our
true positive rate on the development set declines
a bit to just over 50%, but our false positive rate
declines over two full percentage points to 1.1%,
yielding a very high precision system.

Taking this very high precision system combi-
nation of the N-gram and SVM models, we then
combine with the baseline TTS system as follows.
First we apply our system, and expand the item if
it scores above threshold; for those items left un-
expanded, we let the TTS system process it in its
own way. In this way, we actually reduce the false
positive rate on the development set over the base-
line TTS system by over 1% absolute to less than
2%, while also increasing the true positive rate to
73.5%, an increase of 18.5% absolute.

Of course, at test time, we will not know
whether an OOV is an abbreviation or not, so
we also looked at the performance on the rest
of the collected data, to see how often it erro-
neously suggests an expansion from that set. Of

the 11,157 examples that were hand-labeled as
non-abbreviations, our SVM ∩N-gram system ex-
panded 45 items, which is a false positive rate
of 0.4% under the assumption that none of them
should be expanded. In fact, manual inspection
found that 20% of these were correct expansions
of abbreviations that had been mis-labeled.

We also experimented with a number of alter-
native high precision approaches that space pre-
cludes our presenting in detail here, including:
pruning the number of expansion candidates based
on the pair LM score; only allowing abbreviation
expansion when at least one extracted n-gram con-
text is present for that expansion in that context;
and CART tree (Breiman et al., 1984) training
with real valued scores. Some of these yielded
very high precision systems, though at the cost
of leaving many more abbreviations unexpanded.
We found that, for use in combination with the
baseline TTS system, large overall reductions in
FP rate were achieved by using an initial system
with substantially higher TP and somewhat higher
FP rates, since far fewer abbreviations were then
passed along unexpanded to the baseline system,
with its relatively high 3% FP rate.

To ensure that we did not overtune our systems
to the development set through experimentation,
we performed 10-fold cross validation over the full
set of abbreviations. These results are presented
in Table 2. Most notably, the TTS baseline system
has a much lower true positive rate; yet we find our
systems achieve performance very close to that for
the development set, so that our final combination
with the TTS baseline was actually slighly better
than the numbers on the development set.

5 Conclusions
In this paper we have presented methods for high
precision abbreviation expansion for a TTS appli-
cation. The methods are largely self-organizing,
using in-domain unannotated data, and depend on
only a small amount of annotated data. Since the
SVM features relate to general properties of ab-
breviations, expansions and contexts, the classi-
fier parameters will likely carry over to new (En-
glish) domains. We demonstrate that in combi-
nation with a hand-built TTS baseline, the meth-
ods afford dramatic improvement in the TP rate
(to about 74% from a starting point of about 40%)
and a reduction of FP to below our goal of 2%.

Acknowledgments
We would like to thank Daan van Esch and the
Google Speech Data Operations team for their
work on preparing the annotated data. We also
thank the reviewers for their comments.

368



References
Alan Agresti. 2002. Categorical data analysis. John

Wiley & Sons, 2nd edition.

Ai Ti Aw and Lian Hau Lee. 2012. Personalized nor-
malization for a multilingual chat system. In Pro-
ceedings of the ACL 2012 System Demonstrations,
pages 31–36, Jeju Island, Korea, July. Association
for Computational Linguistics.

Richard Beaufort, Sophie Roekhaut, Louise-Amélie
Cougnon, and Cédrick Fairon. 2010. A hybrid
rule/model-based finite-state framework for normal-
izing SMS messages. In Proceedings of the 48th An-
nual Meeting of the Association for Computational
Linguistics, pages 770–779, Uppsala, Sweden, July.
Association for Computational Linguistics.

Maximilian Bisani and Hermann Ney. 2008. Joint-
sequence models for grapheme-to-phoneme conver-
sion. Speech Communication, 50(5):434–451.

Leo Breiman, Jerome H. Friedman, Richard A. Olshen,
and Charles J. Stone. 1984. Classification and Re-
gression Trees. Wadsworth & Brooks, Pacific Grove
CA.

Monojit Choudhury, Rahul Saraf, Vijit Jain, Sudesha
Sarkar, and Anupam Basu. 2007. Investigation and
modeling of the structure of texting language. Int. J.
Doc. Anal. Recognit., 10:157–174.

Corinna Cortes and Vladimir Vapnik. 1995. Support-
vector networks. Machine learning, 20(3):273–297.

Ted Dunning. 1993. Accurate methods for the statis-
tics of surprise and coincidence. Computational
Linguistics, 19(1):61–74.

Hany Hassan and Arul Menezes. 2013. Social text nor-
malization using contextual graph random walks. In
Proceedings of the 51st Annual Meeting of the Asso-
ciation for Computational Linguistics, pages 1577–
1586.

Slava M. Katz. 1987. Estimation of probabilities from
sparse data for the language model component of a
speech recogniser. IEEE Transactions on Acoustics,
Speech, and Signal Processing, 35(3):400–401.

Max Kaufmann. 2010. Syntactic normalization of
Twitter messages. In International Conference on
NLP.

Catherine Kobus, François Yvon, and Géraldine
Damnati. 2008. Normalizing SMS: are two
metaphors better than one? In Proceedings of the
22nd International Conference on Computational
Linguistics (Coling 2008), pages 441–448, Manch-
ester, UK, August. Coling 2008 Organizing Com-
mittee.

Fei Liu, Fuliang Weng, Bingqing Wang, and Yang Liu.
2011. Insertion, deletion, or substitution? Nor-
malizing text messages without pre-categorization

nor supervision. In Proceedings of the 49th Annual
Meeting of the Association for Computational Lin-
guistics: Human Language Technologies, pages 71–
76, Portland, Oregon, USA, June. Association for
Computational Linguistics.

Fei Liu, Fuliang Weng, and Xiao Jiang. 2012a. A
broad-coverage normalization system for social me-
dia language. In Proceedings of the 50th Annual
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers), pages 1035–
1044, Jeju Island, Korea, July. Association for Com-
putational Linguistics.

Xiaohua Liu, Ming Zhou, Xiangyang Zhou,
Zhongyang Fu, and Furu Wei. 2012b. Joint
inference of named entity recognition and nor-
malization for tweets. In Proceedings of the 50th
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 1: Long Papers), pages
526–535, Jeju Island, Korea, July. Association for
Computational Linguistics.

Burt L Monroe, Michael P Colaresi, and Kevin M
Quinn. 2008. Fightin’words: Lexical feature se-
lection and evaluation for identifying the content of
political conflict. Political Analysis, 16(4):372–403.

Deana Pennell and Yang Liu. 2011. A character-level
machine translation approach for normalization of
SMS abbreviations. In IJCNLP. Papers/pennell-
liu3.pdf.

Brian Roark, Michael Riley, Cyril Allauzen, Terry Tai,
and Richard Sproat. 2012. The OpenGrm open-
source finite-state grammar software libraries. In
ACL, Jeju Island, Korea.

Richard Sproat, Alan Black, Stanley Chen, Shankar
Kumar, Mari Ostendorf, and Christopher Richards.
2001. Normalization of non-standard words. Com-
puter Speech and Language, 15(3):287–333.

Andreas Stolcke. 1998. Entropy-based pruning of
backoff language models. In Proc. DARPA Broad-
cast News Transcription and Understanding Work-
shop, pages 270–274.

Amber Wilcox-O’Hearn, Graeme Hirst, and Alexander
Budanitsky. 2008. Real-word spelling correction
with trigrams: A reconsideration of the Mays, Dam-
erau, and Mercer model. In CICLing 2008, volume
4919 of LNCS, pages 605–616, Berlin. Springer.

Yunqing Xia, Kam-Fai Wong, and Wenjie Li. 2006.
A phonetic-based approach to Chinese chat text nor-
malization. In Proceedings of the 21st International
Conference on Computational Linguistics and 44th
Annual Meeting of the Association for Computa-
tional Linguistics, pages 993–1000, Sydney, Aus-
tralia, July. Association for Computational Linguis-
tics.

Yi Yang and Jacob Eisenstein. 2013. A log-linear
model for unsupervised text normalization. In Pro-
ceedings of the 2013 Conference on Empirical Meth-
ods in Natural Language Processing, pages 61–72.

369


