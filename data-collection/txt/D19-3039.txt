



















































TEASPN: Framework and Protocol for Integrated Writing Assistance Environments


Proceedings of the 2019 EMNLP and the 9th IJCNLP (System Demonstrations), pages 229–234
Hong Kong, China, November 3 – 7, 2019. c©2019 Association for Computational Linguistics

229

TEASPN: Framework and Protocol
for Integrated Writing Assistance Environments

Masato Hagiwara1 Takumi Ito2,3 Tatsuki Kuribayashi2,3
Jun Suzuki2,4 Kentaro Inui2,4

1Octanove Labs LLC 2Tohoku University 3Langsmith Inc. 4RIKEN AIP
masato@octanove.com

{t-ito, kuribayashi, jun.suzuki, inui}@ecei.tohoku.ac.jp

Abstract

Language technologies play a key role in as-
sisting people with their writing. Although
there has been steady progress in e.g., gram-
matical error correction (GEC), human writ-
ers are yet to benefit from this progress due
to the high development cost of integrating
with writing software. We propose TEASPN1,
a protocol and an open-source framework for
achieving integrated writing assistance envi-
ronments. The protocol standardizes the way
writing software communicates with servers
that implement such technologies, allowing
developers and researchers to integrate the lat-
est developments in natural language process-
ing (NLP) with low cost. As a result, users
can enjoy the integrated experience in their fa-
vorite writing software. The results from ex-
periments with human participants show that
users use a wide range of technologies and
rate their writing experience favorably, allow-
ing them to write more fluent text.

1 Introduction

Language technologies have been playing an im-
portant role in assisting people in writing natu-
ral language texts, such as essays, emails, busi-
ness documents, and academic papers. There
has been considerable progress on writing assis-
tance technologies (or WATs in short) in the past
few decades in fields such as NLP and computer-
aided language learning (CALL). For example, in
one of such areas, grammatical error correction
(GEC) (Leacock et al., 2010), new models and
systems are developed and published month after
month, breaking the previous evaluation records
and advancing state of the art. The recent develop-
ment in neural language models enabled the com-

1See https://www.teaspn.org/demo for the
screencast and https://www.teaspn.org/ for more
general info about TEASPN.

Backend

Research Models

Writing Software

Writing Software

Research Models

Editor Word ProcessorWeb frontend

OSS
Spell

Checker

Commercial
Products

Commercial
API

B
E
FO

R
E

A
F
T
E
R

TEASPN

OSS Spell
Checker

Editor Editor EditorWord
Processor

Web frontend

Suggestion
Model

SearchGEC Model

Suggestion
Model

SearchGEC Model

Figure 1: Writing software before and after TEASPN.

pletion of a prompt with long, realistic looking yet
coherent passages (Radford et al., 2019).

However, real-world users such as writers who
can and should benefit the most from WATs are yet
to reap the fruits from these research efforts. Aside
from a small number of commercial products,
notably Grammarly2 and Smart Compose (Chen
et al., 2019), and research systems such as WriteA-
head (Yen et al., 2015; Chang and Chang, 2015)
and CroVeWA (Soyer et al., 2015), we see few
examples of user-facing applications and exper-
iments that make use of recent development in
WATs. Many models are confined in research im-
plementations that are not easily accessible to end
users and the larger society. WATs, however, are
not truly useful until they are integrated into user-
facing writing applications such as editors and
word processors (collectively called writing soft-
ware in this paper) and interact with end users in
a dynamic and intuitive manner. This “great di-
vide” (see Figure 1 BEFORE) between applica-

2https://www.grammarly.com/

https://www.teaspn.org/demo
https://www.teaspn.org/
https://www.grammarly.com/


230

tions and academia is not unique in the domain of
writing assistance, but a widespread phenomenon
across many fields in machine learning and NLP,
as pointed out by Wagstaff (2012).

One cause of this “great divide” is the high de-
velopment cost for integrating and bridging both
sides. Since there is a wide range of WATs, it is
impractical, if not impossible, for developers of
writing software to support all types of such tech-
nologies that come in different packages in dif-
ferent programming languages. Similarly, since
there is a large selection of writing software, WAT
researchers and developers cannot afford to offer
their solutions in such a way that most writing
software packages can benefit from them. If there
are N types of writing software and M types of
WATs, there can be N×M combinations between
the two sides. As a result, writers often need to
rely on many different writing software solutions
and switch between many different applications
and websites (search engines, grammar checkers,
dictionaries and thesauri, etc.) in order to com-
plete their tasks.

In this paper, we propose TEASPN (Text Edit-
ing Assistance Smartness Protocol for Natural
Language; pronounced “teaspoon”), a protocol
and a framework for achieving integrated writ-
ing assistance environments, as a solution to this
“great divide” problem (Figure 1 AFTER). In-
spired by and built upon Language Server Protocol
(LSP)3, a similar protocol for integrating software
development environments, TEASPN provides an
open protocol that standardizes the way writing
software and WATs communicate with each other.
We also released the TEASPN SDK (software de-
velopment kit) as an open source library, which
eases the cost of making WATs compatible with
TEASPN. As a result, by using TEASPN,

• Developers of writing software can easily in-
tegrate state-of-the-art WATs into their edi-
tors and word processors just by following
the protocol.
• Developers and researchers of WATs can

support major writing software applications
without worrying about the development
cost, just by using the TEASPN SDK.
• Writers can benefit from integrated writing

experience provided by their favorite writing
software and WATs.

3https://microsoft.github.io/
language-server-protocol/

Finally, we implemented a demo TEASPN
server that integrates WATs using latest develop-
ments in NLP (e.g., a neural language model and
seq2seq-based paraphrasing) and ran experiments
with real human writers to verify the framework’s
effectiveness. The experimental results demon-
strated that our integrated writing assistance sys-
tem developed with TEASPN provides better writ-
ing experience for human writers.

2 Related Work

Writing assistance Use of language technolo-
gies for assisting writing in a second language
(L2) has been extensively explored, especially for
non-native English speakers. One of the most ac-
tive research areas is GEC (Leacock et al., 2010),
where several new models are published every
year and commercial systems such as Grammarly
are actively developed. Other research-based
systems include WriteAhead (Yen et al., 2015;
Chang and Chang, 2015), an interactive writ-
ing environment that provides users with gram-
matical patterns mined from large corpora, and
CroVeWA (Soyer et al., 2015), a crosslingual sen-
tence search system for L2 writers. FLOW (Chen
et al., 2012) is another writing assistance system
that allows users to type in their first languages
(L1) and suggests words and phrases in L2. Run-
ning syntactic analysis and visualizing sentence
structures have also been explored for L2 reading
assistance (Faltin, 2003; Srdanović, 2011).

In addition to L2 learners, the use of technolo-
gies for assisting human translators has also been
a focus of research. TransType (Langlais et al.,
2000) is a translation assistance system that sug-
gests completions for the text to the human transla-
tor in an interactive manner. In SemEval 2014, van
Gompel et al. (2014) presented an L2 writing as-
sistance task where systems find the proper trans-
lation of a word given a context in L2. Other writ-
ing assistance systems (not necessarily L2 learn-
ers) include assisting users with composing an
email by auto-completion (Chen et al., 2019) and
reply suggestion (Kannan et al., 2016).

LSP The N × M problem mentioned in Sec-
tion 1 is not unique to writing assistance. In
software development, there can be N differ-
ent types of integrated development environments
(IDEs) and M different programming languages,
making the integration cost proportionally expen-
sive to N × M . LSP solved this problem by

https://microsoft.github.io/language-server-protocol/
https://microsoft.github.io/language-server-protocol/


231

proposing an open protocol that standardizes the
way IDEs communicate with servers that offer
language smartness technologies such as syntax
checking and completion. As of today, LSP is
widely adopted and supported by more than 70
servers and 20 development environments.

Since there is a large overlap between author-
ing in programming and natural languages, we
built TEASPN as a “fork” of LSP. There are a
few features that we need to design and implement
specifically for writing assistance, namely, syntax
highlighting and external resource search, which
makes TEASPN incompatible with LSP. However,
we re-purposed many LSP data models and fea-
tures for TEASPN. Being able to leverage exist-
ing resources for LSP gives TEASPN a great head
start for a wide adoption.

Protocols for NLP Language Grid (Ishida,
2006) is a platform where language providers
(e.g., translation systems) and linguistic resources
(e.g., dictionaries) are connected via semantic
Web technologies to provide language services
to communities. The NLP Interchange For-
mat (NIF) (Hellmann et al., 2012) is a standard
that aims to achieve interoperability between dif-
ferent NLP tools and resources by defining an
RDL/OWL-based format. Although these projects
have seen some real-world success, their adoption
is quite limited as of this writing, compared to the
aforementioned LSP, which powers at least a cou-
ple of millions of developers worldwide both for
Visual Studio Code (VS code)4 and Atom5. We
believe the key to the wide adoption of any pro-
tocol is the focus on the right scope, practicality,
and ease of development, which are the guiding
principles for TEASPN.

3 TEASPN

3.1 Overview

TEASPN adopts a client-server architecture (Fig-
ure 2), where a client (writing software such as
an editor or a word processor) communicates with
a server that provides WATs. The client and the
server communicate over the TEASPN protocol,
an HTTP-like protocol which uses JSON-RPC (re-
mote procedure call)6 to encode the message body.

4https://code.visualstudio.com/blogs/
2017/11/16/connect

5https://blog.atom.io/2016/03/28/
atom-reaches-1m-users.html

6http://www.jsonrpc.org/

Writing
Software

TEASPN
Server

TEASPN
Protocol

TEASPN
SDK

Inherit

TEASPN
Client Library

TEASPN
Handler

Base Class

Handler
Implementation

GEC
Module

Compl.
Module

Syntax
Highlight

…

Figure 2: Architecture of TEASPN.

Requests can be sent in both directions, which are
often triggered by some events (such as user input)
and can be responded with additional data (such as
results of GEC). TEASPN clients and servers can
be written in any programming language as long
as they conform to the protocol.

3.2 Features

By integrating a large selection of WATs in a sin-
gle platform, TEASPN makes them available to
writers at their fingertips and is expected to im-
prove writing effectiveness. Table 1 shows the list
of WATs that are supported by TEASPN. Notice
that the list includes a wide range of WATs that
have been extensively investigated the literature
(e.g., GEC and search) as well as the ones that are
less explored (e.g., syntax highlighting and jump).

Although we were able to build many WAT fea-
tures upon existing ones from LSP, there were two
features that we needed to design from scratch
specifically for TEASPN—syntax highlighting and
search. While syntax highlighting is usually han-
dled on the client side for programming languages
using shallow lexical analysis, syntactic analyses
of natural language can be too costly and complex
to be handled solely by the client. Therefore, we
defined a new type of request and related type dec-
larations so that it can be handled by the server.

The second feature, search, enables writers to
search external linguistic resources. While the
search feature for LSP is limited to the files in the
same workspace, writers of natural language texts
often need to consult a wide variety of resources
such as corpora and dictionaries.

https://code.visualstudio.com/blogs/2017/11/16/connect
https://code.visualstudio.com/blogs/2017/11/16/connect
https://blog.atom.io/2016/03/28/atom-reaches-1m-users.html
https://blog.atom.io/2016/03/28/atom-reaches-1m-users.html
http://www.jsonrpc.org/


232

Feature Description

Syntax highlighting Highlighting parts of text
Grammatical error detection (GED) Detecting typological and grammatical errors
Grammatical error correction (GEC) Automatically correcting issues detected by GED
Completion Completing or suggest succeeding text
Text rewriting Rewriting part of text (paraphrasing, translation, etc.)
Jump Jumping to other locations (coreference, definitions, etc.)
Hover Showing extra information about the location (e.g., definition)
Search Searching external resources such as corpora and dictionaries

Table 1: WATs supported by TEASPN.

3.3 Developers of Writing Software

By adopting TEASPN, developers of writing soft-
ware can easily integrate WATs into their editors
and word processors. The fact that a large number
of IDEs and editors already support LSP helps to a
great extent. For example, in the sample TEASPN
client implementation7 we provide for VS Code,
we needed to modify less than 200 lines of Type-
Script code to make it compatible with the TEA-
SPN protocol while leveraging the existing library
for LSP. We were also able to implement prelimi-
nary TEASPN clients for Atom and Sublime text8

with little modification to existing code.

3.4 Developers of WATs

Developers and researchers of WATs can make
their technologies available to major writing soft-
ware just by using TEASPN without writing any
client code. To facilitate the development pro-
cess, we released the TEASPN SDK, which in-
cludes a library and a sample TEASPN server im-
plementation in Python, one of the most popular
programming languages for developing language
technologies as of late. The library takes care
of low-level communication and text synchroniza-
tion with the client, letting WAT developers just
inherit the TEASPN handler base class and fo-
cus on implementing the missing core NLP logic.
As an example, Figure 3 shows a simplified code
snippet for implementing completion. Notice the
brevity of the code. We also provide a simple yet
working TEASPN server implementation in the
SDK for reference to accelerate the development.

4 Experiments and Implementation

4.1 Experiments

In this section, we develop a demo TEASPN sys-
tem and investigate its effectiveness through ex-

7https://github.com/teaspn/teaspn-sdk
8https://www.sublimetext.com/

@overrides
def get_completion_list(
        self, position: Position) -> CompletionList:
    """Handle autocomplete."""
    offset = self._position_to_offset(position)
    context = self._text[:offset]

    items = []
    # ... add completion items ...
    return CompletionList(isIncomplete=True, items=items)

Figure 3: Code snippet for computing completion

periments with end-users (writers) in order to an-
swer the following research question:

Does the integrated writing assistance environ-
ment developed with TEASPN provide better writ-
ing experience and help write better texts?

To explore the effectiveness of integrated writ-
ing assistance environment, we compared the fol-
lowing two conditions. In the INTEGRATED
condition, participants used an editor (VS Code)
equipped with TEASPN, where many WATs were
available, while in the BASELINE condition, they
used the same editor with no WATs activated,
while being allowed to use any other writing tools
outside the editor (e.g., Grammarly and Web dic-
tionaries). The BASELINE condition was set up
to simulate the real situation that writers face,
where writing assisting technologies are imple-
mented separately outside the editor.

The participants of our experiments consist of
twelve college students or researchers in NLP with
a diverse L1 distribution: Bengali: 1, Chinese:
1, Croatian: 1, German: 1, Hindi: 1, Japanese:
6, Spanish: 1. They were directed to go through
two writing sessions, one for each condition men-
tioned above, during which they wrote English
text within five sentences in response to two dif-
ferent prompts: (i) write about an activity you en-
joy, such as a hobby, and (ii) write about your
hometown. The prompts and the writing environ-
ments were combined randomly. Before the writ-
ing sessions came an instruction session, where

https://github.com/teaspn/teaspn-sdk
https://www.sublimetext.com/


233

Figure 4: Screenshot of our demo system.
the authors of this paper showed the participants
all the features of the demo system for a demon-
stration purpose. After the writing sessions, they
were asked questions regarding their writing expe-
rience. Because the focus of this experiment is to
evaluate the integrated writing assistance environ-
ment, participants are instructed not to consider
the performance of individual WATs.

4.2 Implementation of the Demo System

We implemented a demo system using the TEA-
SPN framework which has all of the features
shown in Table 1. See Figure 4 for the screenshot.

For syntax highlighting, we used the depen-
dency parser SpaCy9. Head tokens with specific
dependency relation10 were highlighted in differ-
ent colors. As for the GEC and GED features,
we used the open-source GEC tool LanguageTool
3.211. We implemented two types of comple-
tion features: one which suggests the likely next
phrases given the context using a neural language
model (Radford et al., 2019) and the other one
which suggests a set of words consistent with the
characters being typed. We built a seq2seq para-
phrase model trained on PARANMT-50M (Wiet-
ing and Gimpel, 2018) for the text rewriting fea-
ture, which allows the writer to select a part of
the text and chooses among paraphrases. As for
the jump feature, we used a coreference resolution
model12 to jump from a selected expression to its
antecedent. The hover feature shows the definition
of a hovered word using WordNet13. Finally, we
implemented a full-text search feature using the
open multilingual sentence dataset Tatoeba14 and
used Elasticsearch 7.1.115 for indexing and search.

9https://spacy.io/
10ROOT, nsubj, nsubjpass, and dobj in the CLEAR

style tag set.
11https://github.com/languagetool-org/

languagetool/releases/tag/v3.2
12https://github.com/huggingface/

neuralcoref
13https://wordnet.princeton.edu/
14https://tatoeba.org/eng/
15https://www.elastic.co

0% 20% 40% 60% 80% 100%

0

4

8

12

INTEGRATED
About the same
BASELINE

Q1. Which condition provides a better writing experience?

Q2. Is there a difference in quality between the two texts?
If yes, in which condition was the better text written?

Q3. Which of the features did you use?

Syn
tax

 hig
hlig

ht

GE
D /

GE
C

Ph
ras

e c
om

ple
tio

n

Wo
rd

co
mp

let
ion

Te
xt r

ew
riti

ng
 

Jum
p (

co
ref

ere
nce

)

Ho
ver

(di
ctio

na
ry)

Se
arc

h (e
xam

ple
)

% Participants

# 
Pa

rti
ci

pa
nt

s

% Participants

Figure 5: Response summary of the questionnaire.

Condition Perplexity # Chars. (mean ± std)
BASELINE 37.8 379 ± 116
INTEGRATED 26.4 335 ± 91

Table 2: Statistics of the written texts.

5 Results and Analysis

After the writing sessions, the participants re-
sponded to a questionnaire including the following
questions: Q1: Which environment provides a bet-
ter writing experience?, Q2: Is there a difference
in quality between the two texts? If yes, in which
environment was the better text written?, and Q3:
Which of the following features did you use?

Figure 5 summarizes the responses from the
participants. Ten out of twelve (83.3%) partici-
pants rated their experience favorably (Q1), and
40% believed they were able to write better texts in
the INTEGRATED condition (Q2), demonstrating
the effectiveness of the integrated writing assis-
tance environment with TEASPN. The responses
for Q3 show that an average participant used 3.2
WAT features in the INTEGRATED condition16.
This suggests that the writers can benefit from an
integrated environment with various WATs acti-
vated.

We ran further analyses on the texts written by
the participants during the writing sessions. Ta-
ble 2 shows some statistics of the written texts
in the two experimental conditions. Perplexity
was calculated using the pretrained GPT-2 model
(small, 117M parameters) (Radford et al., 2019).
The texts written in the INTEGRATED condi-
tion had lower perplexity, suggesting that the in-
tegrated writing environment helped them write

16Note that we assume that every participant used syntax
highlighting, which is activated by default.

https://spacy.io/
https://github.com/languagetool-org/languagetool/releases/tag/v3.2
https://github.com/languagetool-org/languagetool/releases/tag/v3.2
https://github.com/huggingface/neuralcoref
https://github.com/huggingface/neuralcoref
https://wordnet.princeton.edu/
https://tatoeba.org/eng/
https://www.elastic.co


234

more fluent and/or typical English text. This re-
sult backs up the subjective responses from the
participants indicating they were able to produce
better texts in the INTEGRATED condition than
the other. We also note that the texts written in the
INTEGRATED condition were relatively shorter.
This could be due to the fact that the participants
were still spending some of their time observing
and figuring out the behavior of the assisting fea-
tures and spending slightly less time actually writ-
ing. We believe this trend will disappear or even
reverse itself as they get more used to the inte-
grated writing experience and the quality of the
inidividual WATs improve.

6 Conclusion and Future Work

We proposed TEASPN, a framework and a proto-
col which standardizes the way writing software
communicates with writing assistance technolo-
gies, to achieve integrated writing assistance en-
vironments. In addition, we released the TEASPN
SDK as an open source library, which eases the
cost of making WATs compatible with TEASPN.
We developed a demo system which implements
various assistance technologies based on latest
NLP developments and ran experiments with hu-
man participants. The result demonstrated that
they rated their integrated writing experience fa-
vorably, potentially helping them write more flu-
ent and better text.

In future work, by making this a larger com-
munity effort, we wish to broaden the support
lineup for writing software while developing vari-
ous writing assistance features with TEASPN, fur-
ther closing the gap between the latest develop-
ments in NLP and real-world human users.

References
Jim Chang and Jason Chang. 2015. WriteAhead2:

Mining lexical grammar patterns for assisted writ-
ing. In Proceedings of the NAACL 2015 System
Demonstrations, pages 106–110.

Mei-Hua Chen, Shih-Ting Huang, Hung-Ting Hsieh,
Ting-Hui Kao, and Jason S. Chang. 2012. FLOW: A
first-language-oriented writing assistant system. In
Proceedings of ACL 2012 System Demonstrations,
pages 157–162.

Mia Xu Chen, Benjamin N Lee, Gagan Bansal, Yuan
Cao, Shuyuan Zhang, Justin Lu, Jackie Tsay, Yi-
nan Wang, Andrew M. Dai, Zhifeng Chen, Timothy
Sohn, and Yonghui Wu. 2019. Gmail smart com-
pose: Real-time assisted writing.

Anne Vandeventer Faltin. 2003. Natural language pro-
cessing tools for computer assisted language learn-
ing. Linguistik Online, 17(5):137–153.

Maarten van Gompel, Iris Hendrickx, Antal van den
Bosch, Els Lefever, and Véronique Hoste. 2014. Se-
mEval 2014 task 5 - L2 writing assistant. In Pro-
ceedings of SemEval 2014, pages 36–44.

Sebastian Hellmann, Jens Lehmann, and Soren Auer.
2012. NIF: An ontology-based and linked-data-
aware NLP interchange format. Technical report,
Working Draft.

Toru Ishida. 2006. Language Grid: An infrastruc-
ture for intercultural collaboration. In IEEE/IPSJ
Symposium on Applications and the Internet (SAINT
2006), pages 96–100.

Anjuli Kannan, Karol Kurach, Sujith Ravi, Tobias
Kaufmann, Andrew Tomkins, Balint Miklos, Gre-
gory S. Corrado, László Lukács, Marina Ganea, Pe-
ter Young, and Vivek Ramavajjala. 2016. Smart re-
ply: Automated response suggestion for email. In
Proceedings of KDD 2016.

Philippe Langlais, George Foster, and Guy Lapalme.
2000. TransType: a computer-aided translation typ-
ing system. In ANLP-NAACL 2000 Workshop: Em-
bedded Machine Translation Systems.

Claudia Leacock, Martin Chodorow, Michael Gamon,
and Joel Tetreault. 2010. Automated Grammatical
Error Detection for Language Learners. Morgan &
Claypool.

Alec Radford, Jeffrey Wu, Rewon Child, David Luan,
Dario Amodei, and Ilya Sutskever. 2019. Language
models are unsupervised multitask learners. Techni-
cal report, OpenAI.

Hubert Soyer, Goran Topić, Pontus Stenetorp, and
Akiko Aizawa. 2015. CroVeWA: Crosslingual
vector-based writing assistance. In Proceedings of
NAACL 2015 System Demonstrations, pages 91–95,
Denver, Colorado.

Irena Srdanović. 2011. Evaluating e-resources for
Japanese language learning. In Proceedings of eLex
2011, pages 260–267.

Kiri Wagstaff. 2012. Machine learning that matters. In
Proceedings of the Twenty-Ninth International Con-
ference on Machine Learning (ICML), pages 529–
536.

John Wieting and Kevin Gimpel. 2018. ParaNMT-
50M: Pushing the limits of paraphrastic sentence
embeddings with millions of machine translations.
In Proceedings of ACL 2018, pages 451–462.

Tzu-Hsi Yen, Jian-Cheng Wu, Jim Chang, Joanne Bois-
son, and Jason Chang. 2015. WriteAhead: Mining
grammar patterns in corpora for assisted writing. In
Proceedings of ACL-IJCNLP 2015 System Demon-
strations, pages 139–144.

https://doi.org/10.3115/v1/N15-3022
https://doi.org/10.3115/v1/N15-3022
https://doi.org/10.3115/v1/N15-3022
https://www.aclweb.org/anthology/P12-3027
https://www.aclweb.org/anthology/P12-3027
https://arxiv.org/pdf/1906.00080.pdf
https://arxiv.org/pdf/1906.00080.pdf
https://doi.org/10.3115/v1/S14-2005
https://doi.org/10.3115/v1/S14-2005
https://www.aclweb.org/anthology/W00-0507
https://www.aclweb.org/anthology/W00-0507
https://doi.org/10.3115/v1/N15-3019
https://doi.org/10.3115/v1/N15-3019
https://www.aclweb.org/anthology/P12-3027
https://www.aclweb.org/anthology/P12-3027
https://www.aclweb.org/anthology/P18-1042
https://www.aclweb.org/anthology/P18-1042
https://www.aclweb.org/anthology/P18-1042
https://doi.org/10.3115/v1/P15-4024
https://doi.org/10.3115/v1/P15-4024

