



















































Automatic Accuracy Prediction for AMR Parsing


Proceedings of the Eighth Joint Conference on Lexical and Computational Semantics (*SEM), pages 212–223
Minneapolis, June 6–7, 2019. c©2019 Association for Computational Linguistics

212

Automatic Accuracy Prediction for AMR Parsing

Juri Opitz and Anette Frank
Research Training Group AIPHES

Leibniz ScienceCampus “Empirical Linguistics and Computational Language Modeling”
Department for Computational Linguistics

69120 Heidelberg
{opitz,frank}@cl.uni-heidelberg.de

Abstract

Abstract Meaning Representation (AMR) re-
presents sentences as directed, acyclic and
rooted graphs, aiming at capturing their mean-
ing in a machine readable format. AMR pars-
ing converts natural language sentences into
such graphs. However, evaluating a parser on
new data by means of comparison to manually
created AMR graphs is very costly. Also, we
would like to be able to detect parses of ques-
tionable quality, or preferring results of alter-
native systems by selecting the ones for which
we can assess good quality. We propose AMR
accuracy prediction as the task of predicting
several metrics of correctness for an automati-
cally generated AMR parse – in absence of the
corresponding gold parse. We develop a neural
end-to-end multi-output regression model and
perform three case studies: firstly, we evalu-
ate the model’s capacity of predicting AMR
parse accuracies and test whether it can reli-
ably assign high scores to gold parses. Sec-
ondly, we perform parse selection based on
predicted parse accuracies of candidate parses
from alternative systems, with the aim of im-
proving overall results. Finally, we predict
system ranks for submissions from two AMR
shared tasks on the basis of their predicted
parse accuracy averages. All experiments are
carried out across two different domains and
show that our method is effective.

1 Introduction

Abstract Meaning Representation (AMR) (Ba-
narescu et al., 2013) represents the semantic struc-
ture of a sentence, including concepts, seman-
tic operators and relations, sense-disambiguated
predicates and their arguments. As a machine
readable representation of the meaning of a sen-
tence, AMR is potentially useful for many NLP
tasks. Among other applications it has been used
in machine translation (Jones et al., 2012), text

(a / asbestos
:polarity -
:time (n / now)
:location (t / thing

:ARG1-of (p / produce-01
:ARG0 (w / we))))

Figure 1: Humanly produced AMR for: There is no as-
bestos in our products now. Numbered predicates refer
to PropBank senses (Palmer et al., 2005).

summarization (Liu et al., 2015; Dohare and Kar-
nick, 2017) and question answering (Mitra and
Baral, 2016). Since the introduction of AMR,
many approaches to AMR parsing have been pro-
posed: graph-based pipeline systems which rely
on an alignment step (Flanigan et al., 2014, 2016)
or transition-based parsers relying on dependency
annotation (Wang et al., 2015b,a, 2016a). In the
following we will denote the former by JAMR
and the latter by CAMR. More recently, end-
to-end neural systems have been proposed which
produce linearized AMR graphs within character-
based (van Noord and Bos, 2017b) or word-based
(Konstas et al., 2017) encoding models. Both ap-
proaches greatly profit from large amounts of sil-
ver training data. The silver data is obtained with
self-training (Konstas et al., 2017) or the aid of
additional parsers, where only parses with consid-
erable agreement are chosen to extend the train-
ing data (van Noord and Bos, 2017b). Lyu and
Titov (2018) formulate a neural model that jointly
predicts alignments, concepts and relations. Their
system – henceforth called GPLA (Graph Predic-
tion with Latent Alignments) – defines the current
state-of-the-art in AMR parsing.

A system that can perform accuracy prediction
for AMR parsing can be used in a variety of ways:
(i) estimating the quality of downstream tasks that
deploy AMR parses. E.g., in a document sum-
marization scenario, we might expect lower qual-



213

ity of a summary if the estimated quality of AMR
parses used as a basis for the summary is low; (ii)
AMR parsing accuracy estimation can be used to
produce high-quality automatically parsed data:
by filtering the outputs of single parsing systems
in self-training, by selecting high-quality outputs
from different parsing systems in a tri-parsing set-
ting, or else by predicting overall rankings over
alternative parsing systems applied to in- or out-
of-domain data; (iii) finally, AMR parse accuracy
prediction could be used in the context of a parser-
supported treebank construction process. E.g., in
an active learning scenario, we can select use-
ful targets for manual annotation based on their
expected efficiency for parser improvement – the
fine-grained evaluation measures predicted by our
system can be used for targeted improvements. In
the simplest case, we can provide the human anno-
tator with automatic parses where only few flaws
have to be mended. Hence, AMR accuracy pre-
diction systems have the potential to tremendously
reduce manual annotation cost and time.

Contributions We define AMR accuracy pre-
diction as the task of predicting a rich suite of met-
rics to assess various subtasks covered by AMR
parsing (e.g. negation detection or semantic role
labeling). To approach this task, we use the
AMR evaluation suite suggested by Damonte et al.
(2017) and develop a hierarchical multi-output re-
gression model for automatically performing eval-
uation of 12 different tasks involved in AMR pars-
ing (Sections §3 and §4; our code is publicly acces-
sible1). We perform experiments in three different
scenarios on unseen in-domain and out-of-domain
data and show that our model (i) is able to predict
scores with significant correlation to gold scores
and (ii) can be used to rank parses on a sentence-
level or to rank parsers on a corpus-level (§5).

2 Related Work

Automatic accuracy prediction for syntactic pars-
ing comes closest to what we are doing. Ravi
et al. (2008) propose a feature-based SVM regres-
sion model with RBF kernel that predicts syn-
tactic parser performance on different domains.
Like us, they aim at a cheap and effective means
for estimating a parser’s performance. However,
in contrast to their work, our method is domain

1https://gitlab.cl.uni-heidelberg.de/
opitz/quamr

and parser agnostic: we do not take into ac-
count characteristics of the domains of interest and
do not provide any performance statistics of the
competing parsing systems as features to our re-
gressor. Biici (2016) addresses the task without
any domain-dependent features, which results in
a lower correlation to gold scores – even if addi-
tional features from a background language model
are incorporated. In contrast to the prior systems
that predict a single score, we predict an ensem-
ble of metrics suitable for assessing AMR parse
quality with respect to different linguistic aspects.
Also, our system does not rely on externally de-
rived features or complex pre-processing. More-
over, an AMR graph differs in important ways
from a syntactic tree. Nodes in AMR do not ex-
plicitly correspond to words (as in dependency
trees) or phrases (as in constituency trees). AMR
structure elements can exist without any align-
ment to words in the sentence. To our knowledge,
we are the first to propose an accuracy prediction
model for AMR parsing, and offer the first gen-
eral end-to-end parse accuracy prediction model
that predicts an ensemble of scores for different
linguistic aspects.

Automatic accuracy prediction has also been re-
searched for PoS-tagging (Van Asch and Daele-
mans, 2010) and in machine translation. For ex-
ample, Soricut and Narsale (2012) predict BLEU
scores for machine-produced translations. Under
the umbrella of quality estimation researchers try
to predict, i.a., the post-editing time or missing
words in an automatic translation (Cai and Knight,
2013; Joshi et al., 2016; Chatterjee et al., 2018;
Kim et al., 2017; Specia et al., 2013). The fact
that manually creating an AMR graph is signifi-
cantly more costly than a translation provides an-
other compelling argument for investigating auto-
matic AMR accuracy prediction techniques .2

In recent work, Dickinson and Smith (2011,
2017); Jain et al. (2015); Rehbein and Ruppen-
hofer (2018) detect annotation errors in automat-
ically produced dependency parses. The latter ap-
proach uses active learning and ensemble parsing
in combination with variational inference. They
predict edge labelling and attachment errors and
use a back-and-forth encoding mechanism from
non-structured to structured tree data in order to
provide the variational inference model with the

2Creating an AMR graph requires trained linguists and
takes on average 8 to 13 minutes, cf. Banarescu et al. (2013)

https://gitlab.cl.uni-heidelberg.de/opitz/quamr
https://gitlab.cl.uni-heidelberg.de/opitz/quamr


214

(a / asbestos (a / asbestos
:time (n / now) :polarity -
:polarity - :location (p / product)
:location (p / product :time (n / now))
:poss (w / we)))

__________________________
(a / asbesto metr.(F1)| GP JA CA |

:polarity - ---------|--------------|
:ARG1 (w / we Smatch | 70 | 30 | 67 |
:ARG1-of (p / product SRL | 0 | 14 | 0 |

:mod (n / now)))) Concepts | 67 | 44 | 50 |
IgnVars | 55 | 0 | 60 |

Figure 2: Three AMR parses for: There is no asbestos
in our products now, generated by GPLA (top), JAMR
(bottom), CAMR (right). Light and severe errors are
found in GPLA and JAMR parses; CAMR fails to pro-
vide we, the manufacturer of the product. Bottom right:
F1 for Smatch and three example subtasks from evalu-
ation against the gold parse (given in Figure 1).

needed unstructured data. Their work differs from
ours in three important aspects: firstly, they predict
errors in specific edges or nodes, while we predict
an accuracy score over the complete graph. More-
over, our model does not need several candidate
parses as input – when several multiple parses are
available, our model can be exploited for ranking
(cf. Sections §5.2 & §5.3). Finally, our method is
independent of live human feedback.

3 Accuracy Metrics for AMR Parsing

Automatic AMR parses are often deficient.
Consider the examples in Figure 2. All parsers
correctly detect the negation and its scope. The
GPLA parse (top) provides a graph structure close
to the gold annotation (Figure 1). However, it does
not correctly analyze the possessive our (product),
which in the gold parse is represented as an object
produced by the speaker (we). Instead it recog-
nizes a location in the speaker’s possession. JAMR
(middle) fails to detect the concept in focus (as-
bestos), possibly due to a false-positive stemming
mistake. Moreover, it fails to represent that as-
bestos is (not) in the product: it misses the :loca-
tion-edge from asbestos to product.

AMR accuracy metrics Usually, a predicted
AMR graphG is evaluated against a gold graphG′

using triple matching based on a maximally scor-
ing variable mapping. For finding the optimal vari-
able mapping, Integer Linear Programming (ILP)
can be used in the Smatch metric (Cai and Knight,
2013), which produces precision, recall and F1
score between G and G′. While it is important
to obtain a global measure of parse accuracy, we
may also be interested in a quality assessment

that focuses on specific subtasks or meaning as-
pects, such as entity linking, negation detection
or word sense disambiguation (WSD). For exam-
ple, if a parser commits a WSD error this might
be less harmful than e.g., failing to capture nega-
tion, or missing or wrongly predicting a semantic
role. However, the Smatch calculation would treat
many of such errors with equal weight – a property
which in some cases may be undesirable.

To alleviate this issue, Damonte et al. (2017)
proposed an extended AMR evaluation suite
which allows parser performance inspection with
regard to 11 additional subtasks captured by AMR.
In total, 36 metrics can be computed (precision,
recall and F1 for 12 tasks). F1 scores for three
example metrics are displayed in Figure 2 (bot-
tom, right): Smatch, SRL (Smatch computed on
arg-i roles), IgnoreVars (triple overlap after replac-
ing variables with concepts) and Concepts (F1 for
concept identification).3 GPLA produces the over-
all best parse but it is is outperformed by the other
systems in SRL (JAMR) and IgnoreVars (CAMR).

Task definition We adopt the proposed metrics
by Damonte et al. (2017) and use them as target
metrics for our task of AMR parse accuracy pre-
diction. Given an automatic AMR graph G and a
corresponding sentence S, we estimate precision,
recall and F1 of the main task (Smatch) and of the
subtasks, as they would emerge from comparing
G with its gold counterpart G′.

One of our hypotheses is that predicting a wide
range of accuracy metric scores for individual
aspects of AMR structures will aid our model
to better predict the global Smatch scores. We
will therefore investigate a hierarchical model that
builds on predicted subtask measures in order to
predict the global smatch score. Being able to pre-
dict fine-grained quality aspects of AMR parses
will also be useful to assess and exploit differences
of alternative system outputs and provides a basis
for guiding system development or targeted anno-
tation in an active learning setting.

4 Neural Accuracy Prediction Model

We propose a neural hierarchical multi-output re-
gression model for accuracy prediction of AMR

3The other subtasks are: Unlabelled (Smatch after edge
label removal), No WSD (Smatch after PropBank sense re-
moval), NS frames (PropBank frame identification with-
out sense), Wikification (entity linking), NER (named entity
recognition), Reentrancy (Smatch over re-entrant edges).



215

      -           -         01         -          -           -        ...
     -1         -1          8        -1         -1        -1       ...
 :ROOT    [         join      :arg0       [      person     …

 :ROOT’    [        join     :nsubj       [     Vinken   …
     -1         -1         8         -1         -1         1       …

 

   Smatch F1
   SRL F1
   …
   WSD F1

0.7
0.3
…
0.7

                        LSTM

                         LSTM

FF

po
in

t e
r s

po
in

t e
r s

to
k e

n s
se

ns
es

to
k e

n s

...

...

...

...

...

“Pierre0
 Vinken1 ,2 613 years4 old5 ,6 will7 join8 

the9 board10 as11 a12 nonexecutive13 director14 ...”

     senses:
     pointers:
     tokens:
     
     tokens:
     pointers:

A
M

R
D

ep
.

E
m

be
d

E
m

be
d

  SRL F1
  …
  WSD F1

0.3
…
0.7FF

0.7 Smatch F1FF       
         

Figure 3: Our model: green: Evaluation metrics com-
puted in a non-hierarchical fashion. orange: Main eval-
uation metric is computed on top of secondary metrics.

parses. Its architecture is outlined in Figure 3.

Inputs Our model takes the following inputs: (i)
a linearized AMR and a linearized dependency
graph (implementation details in §5). The moti-
vation for feeding the dependency parse instead of
the original sentence is due to the moderate sim-
ilarity of dependency and AMR structures.4 We
examine drawbacks and benefits of providing au-
tomatic dependency parses more closely in our
ablation experiments (§5.4). In addition, (ii) we
produce alignments between sentence tokens and
tokens in the sequential AMR structure, as well
as between sentence tokens and the linearized de-
pendency structure, and feed these sequences of
pointers to our accuracy prediction model. The in-
tuition of using pointers is to provide the model
with richer information via shallow alignment be-
tween AMR, dependencies and the sequence of
sentence tokens (see Section §5 for implementa-
tion details). Finally, (iii) we feed a sequence of
PropBank sense indicators for AMR predicates.

Joint encoding of AMR and dependency parses
for metric prediction Embedding layers are
shared between AMR/dependency pointers and
AMR/dependency tokens. We embed the three
sequences representing the AMR graph (tokens,
pointers and senses) in three matrices and sum
them up element-wise (indicated with + in Figure
3). The same procedure is applied to the linearized
dependency graph (tokens and pointers). The re-
sulting matrices are processed by two two-layered
Bi-LSTMs to yield vectorized representations for
(i) the AMR graph and (ii) the dependency tree
(i.e., the last states of forward and backward reads
are concatenated). Thereafter, we apply element-

4c.f. Groschwitz et al. (2018); Chen and Palmer (2017).

wise multiplication, subtraction and addition to
both vector representations and concatenate the re-
sulting vectors (⊗ in Figure 3). The joint AMR-
dependency representation is further processed by
a feed forward layer (FF) with sigmoid activation
functions in order to predict, in total, 36 different
metrics (green, Figure 3).

Hierarchical prediction of multiple metrics
The task naturally lends itself to be formulated in
a hierarchical multi-task setup (orange, Figure 3).
In this strand, we first compute the 33 fine-grained
subtask metrics and on their basis we caclulate the
Smatch scores (precision, recall, F1) as our pri-
mary metrics. In order to accomplish this, we col-
lect the outputs from the subtask metric prediction
layer in a vector and concatenate it with the pre-
vious layer’s representation (⊕ in Figure 3). The
resulting vector is fed through a last FF layer to
predict the metrics for the task of main interest
(Smatch). Our intuition is that the estimated qual-
ity of the parse with respect to the subtask metrics
informs the model and allows it to better predict
the overall quality.

Loss In the non-hierarchical case, we denote our
full model with fθ : X → [0, 1]d with parame-
ters θ, where d describes the dimensionality of the
score vector (one dimension represents one met-
ric) and D = {(Xi, yi)}Ni=1, yi ∈ [0, 1]d is our
training data. In the non-hierarchical model, we
minimize the mean squared error:

`(fθ) =
1

dN

N∑
i=1

d∑
j=1

(yi,j − fθ(Xi)j)2 (1)

For our hierarchical model, we have two func-
tions, fθ : X → [0, 1](d−k) which returns the
output vector for the (d − k) subtask metrics and
f ′θ′ : X → [0, 1]k which returns the output vector
for our k main metrics (in our experiments, k = 3
for Smatch recall, precision and F1). Then,

`′(fθ, f
′
θ′) =

λ1
(d− k)N

N∑
i=1

d−k∑
j=1

(yi,j − fθ(Xi)j)2

+
λ2
kN

N∑
i=1

d∑
j=d−k+1

(yi,j − f ′θ′(Xi)j−(d−k))2

defines the total loss over the two entangled metric
prediction models. Note that θ ⊂ θ′, which means
that by optimizing the parameters of f ′ with gra-
dient descent, we also concurrently optimize all



216

training development

parser Smatch (F1) % def. Smatch (F1) % def.

JAMR 0.79 86.7 0.69 91.8
CAMR 0.75 93.6 0.66 95.7
GPLA 0.86 83.4 0.76 90.0

Table 1: Parser output evaluation on training and devel-
opment partitions of LDC2015E86. Smatch F1: avg.
over Smatch F1 per sentence, % def.: percentage of
deficient parses (i.e., parses with Smatch F1 < 1).

parameters of f . By this construction, the hier-
archical model instantiates a two-task model with
shared parameters. For our experiments, we man-
ually set the loss weights λ1 = 0.2, λ2 = 1.

5 Experiments

Data Since our goal is to predict the accuracy
of an automatic parse, we need a data set contain-
ing automatically produced AMR parses and their
scores, as they would emerge from comparison to
gold parses. Our largest data set, LDC2015E86,
comprises 19,572 sentences and comes in a pre-
defined training, development and test split. We
parse this data set with three parsers, JAMR
(Flanigan et al., 2014, 2016), CAMR (Wang et al.,
2015b,a, 2016a) and GPLA (Lyu and Titov, 2018).
Since the three parsers have been trained on the
training data partition, we naturally obtain more
accurate parses for the training partition than for
development and test data. Table 1, however, indi-
cates that we still obtain a considerable amount of
deficient parses for training. Based on the parser
outputs we compute evaluations comparing the au-
tomatic parses with the gold parses by using amr-
evaluation-tool-enhanced5, a bug-fixed version of
the script that computes the metrics of Damonte
et al. (2017). This allows us to create full-fledged
training, development and test instances for our
accuracy prediction task. Each instance consists
of a sentence and an AMR parse as input and a
vector of metric scores as target.

Our second data set, LDC2015R36, comprises
submissions to the SemEval-2016 Task 8 (May,
2016). We have 1053 parses from each of the 11
team submissions (and 2 baseline systems).6 Our

5https://github.com/ChunchuanLv/
amr-evaluation-tool-enhanced

6Riga (Barzdins and Gosko, 2016), CMU (equal to
JAMR) (Flanigan et al., 2016), Brandeis (Wang et al., 2016b),
UofR (Peng and Gildea, 2016), ICL-HD (Brandt et al.,
2016), M2L (Puzikov et al., 2016), UMD (Rao et al., 2016),

data set LDC2015E86 LDC2015R36 BioAMRTest

domain news news medical
nb. sentences 19,572 1,053 500
avg. sent. len. 21 22.35 36.52
nb. auto. parses 58,716 13,689 3,000
used as train/dev/test test test

Table 2: Statistics of data sets used in this work.

third dataset, BioAMRTest is used as the test set in
the SemEval-2017 Task 9 (May and Priyadarshi,
2017) and consists of 500 parses from each of the
6 teams.7 The shared task organizers kindly made
this data available for our experiments.

Preprocessing For dependency annotation, we
parse all sentences with spacyV2.08. For sequen-
tializing the AMR and dependency graph repre-
sentations we take intuitions from van Noord and
Bos (2017b) & Konstas et al. (2017) and output
tokens by performing a depth-first-search over the
graph. We replace the AMR negation token ‘-’
and strings representing numbers with special to-
kens. The vocabularies (tokens, senses and point-
ers) are computed from our training partition of
LDC2015E86 and comprise all tokens with a fre-
quency ≥ 5 (tokens with lesser frequency are re-
placed by an OOV-token). PropBank senses of
predicates are removed and collected in an extra
list that is parallel to the tokens in the linearized
AMR sequence. For each linearized AMR and de-
pendency tree we generate a sequence with index
pointers to tokens in the original sentence (-1 for
tokens which do not explicitly refer to any token
in the sentence, e.g. brackets, ‘subj’ or ‘arg0’ re-
lations). Extraction of token-pointers from the de-
pendency graph is trivial. For every concept in the
linearized AMR we execute a search for the corre-
sponding token in the sentence, looking for exact
matches with surface tokens and lemmas.

Training For the optimization of the accuracy
prediction model we use only the development and
training sections of LDC2015E86 and the corre-
sponding automatic parses together with the gold
scores. Details on the training cycle can be found
in the Supplemental Material §A (the loss is de-
DynamicPower (Butler, 2016), TMF (Bjerva et al., 2016),
UCL+Sheffield (Goodman et al., 2016) and CU-NLP (Foland
and Martin, 2016).

7TMF-1 and TMF-2 (van Noord and Bos, 2017a), DAN-
GNT (Nguyen and Nguyen, 2017), Oxford (Buys and Blun-
som, 2017), RIGOTRIO (Gruzitis et al., 2017) and JAMR
(Flanigan et al., 2016)

8https://spacy.io/

https://github.com/ChunchuanLv/amr-evaluation-tool-enhanced
https://github.com/ChunchuanLv/amr-evaluation-tool-enhanced


217

ρ LDC2015E86 ρ BioAMRTest

P R F1 P R F1

Smatch 0.74 0.79 0.78 0.54 0.41 0.47

Concepts 0.56 0.65 0.64 0.67 0.55 0.62
Frames 0.7 0.71 0.72 0.67 0.56 0.63
IgnoreVars 0.76 0.8 0.79 0.33 0.27 0.29
Named Ent. 0.81 0.81 0.81 0.5 0.48 0.5
Negations 0.87 0.87 0.87 0.33 0.32 0.32
No WSD 0.75 0.78 0.78 0.54 0.41 0.46
NS frames 0.76 0.75 0.77 0.72 0.59 0.67
Reentrancies 0.77 0.79 0.8 0.52 0.45 0.48
SRL 0.72 0.74 0.75 0.47 0.43 0.45
Unlabeled 0.71 0.75 0.75 0.6 0.45 0.51
Wikification 0.87 0.85 0.86 0.24 0.23 0.23

Table 3: Pearson correlation coefficient (ρ) over vari-
ous metrics and across domains. Explanations of the
metrics and AMR subtasks are in Section §3 and fn. 3

(a) LDC2015E86 (train) (b) LDC2015E86 (test)

Figure 4:Predicted (y-axis) & gold (x-axis) Smatch F1.

scribed in §4). We use the same single (hierarchi-
cal) model for all three evaluation studies, proving
its applicability across different scenarios (a non-
hierarchical model is only instantiated for the ab-
lation experiments in Section §5.4).

5.1 Correlation with Gold Accuracy

The primary goal in our first experiment is to test
whether the system is able to differentiate good
from bad parses. This capacity is expressed by a
high correlation of predicted accuracies with true
accuracies on unseen data and by the ability to as-
sign high scores to gold parses. We evaluate on the
test partition of LDC2015E86 and BioAMRTest.

Correlation results The results are displayed in
Table 3. Over all metrics, in-domain and out-of-
domain, we achieve significant correlations with
the gold scores (p < 0.005 for every metric).
While on LDC2015E86 the model has learned to
predict the KB linking F1 (ρ = 0.86) and nega-
tion detection F1 with high correlation to the gold

0.0 0.2 0.4 0.6 0.8 1.0
Predicted Smatch F1 LDC2015E86 test

0

5

10

15

20

De
ns

ity

GOLD
JAMR
CAMR
GPLA

(a) LDC2015E86

0.0 0.2 0.4 0.6 0.8 1.0
Predicted Smatch F1 BioAMR test

0

2

4

6

8

10

De
ns

ity

GOLD
JAMR
TMF-2
TMF-1
Oxford
DANGNT

(b) BioAMRTest

Figure 5: Probability density function estimations
for predicted F1 Smatch scores using Scott’s method
(Scott, 2012) with respect to candidate parses from dif-
ferent systems.

scores (ρ = 0.87), Concept assessment poses the
greatest challenge (ρ = 0.64). For the out-of-
domain data BioAMRTest, these two facts seem
almost reversed: here, the assessment of KB link-
ing poses difficulties (ρ = 0.23) while the Concept
F1 predictions are better (ρ = 0.62). The main
metrics of interest (Smatch precision, recall and
F1) can be predicted with high correlation on in-
domain data (ρ ≥ 0.74, cf. also Figure 4) and solid
correlation for out-of-domain data (ρ ≥ 0.41).

Find the Gold AMR! Now, we want to test our
system’s capacity to reliably predict high Smatch
F1 scores for unseen gold AMR parses. Ide-
ally, the scores should be close or equal to 1.
For in-domain data, it appears to work well: a
large amount of Smatch predictions for gold AMR
graphs are very close to one (Figure 5a).

Evidently, our system also gets the ranking of
the parsing systems right: the distribution of the
state-of-the-art (GPLA) is shifted right towards



218

percentile

dataset 5 25 75 90 95 97 99

LDC15E86 0.83 0.99 1.0 1.0 1.0 1.0 1.0
BioAMRTest 0.74 0.77 0.83 0.88 0.93 0.98 1.0

Table 4: Various percentiles of Smatch F1 predictions
for gold graphs.

higher predicted F1 scores, whereas the distribu-
tion of CAMR is shifted left towards lower scores.
Also, more than 75% of gold parses have a pre-
dicted Smatch score of more than 0.99 (Table 4).

On the other hand, finding gold parses in the
BioAMRtest data is much harder: about 75% of
Smatch scores get assigned a score of 0.83 or
lower and only 1% of gold parses are predicted as
perfect (Table 4). The estimated probability den-
sity function for gold parses (red solid line in Fig-
ure 5b) struggles to discriminate itself from the
functions corresponding to the flawed parses of
the automatic systems. Nevertheless, the predic-
tion score density for gold parses is situated more
on the right hand side than most others. In other
words, we find that in the out-of-domain data gold
parses tend to be assigned above-average scores.

To sum up, our observations for the out-of-
domain data stand in some contrast to what we
observe for the in-domain data. However, this out-
come can be plausibly explained: assuming that
the out-of-domain gold parses have some unfa-
miliar properties, a system that has never seen
such parses cannot judge well whether they are
gold or not. In fact, it can be interpreted posi-
tively that the system hesitates to assign maximum
scores to gold parses from a domain in which the
model is completely inexperienced. Additionally,
bio-medial texts involve difficult concepts, naming
conventions and complicated noun phrases which
are hard to understand even for non-expert humans
(e.g., “TAK733 led to a decrease in pERK and
G1 arrest in most of these melanoma cell lines re-
gardless of their origin, driver oncogenic muta-
tions and in vitro sensitivity to TAK733”.). Taking
all this into account, the results for out-of-domain
data may be not as bad as they perhaps appear at
first glance.

5.2 Application Study: AMR Parse Ranking

Our automatic accuracy prediction method natu-
rally lends itself for ranking parser outputs. For
any sentence, provided automatic parses by com-
peting systems can be ranked according to the

Smatch LDC2015E86 Smatch BioAMRTest

P R F1 P R F1

lower-bound 64.9 57.9 60.5 41.7 31.3 34.3
random 72.4 67.0 69.1 60.3 50.3 54.0
ours 76.6 73.5 74.8 64.9 56.0 59.2
upper-bound 79.3 75.2 76.9 73.2 65.2 68.5

JAMR 71.4 66.5 68.4 48.4 39.7 42.9
CAMR 69.5 60.4 64.0 - - -
GPLA 76.3 73.4 74.6 - - -
TMF-1 - - - 56.0 46.5 49.3
TMF-2 - - - 70.0 54.5 60.5
DANGNT - - - 70.2 58.6 63.1
Oxford - - - 65.8 59.0 61.6
RIGOTRIO - - - 65.0 50.8 56.4

Table 5: Results (sentence averages) of different AMR
parsing (bottom part) and ranking (top part) systems on
two test sets. Upper part: results when selecting from
alternative parses: lower-bound (upper-bound): oracle
selecting the worst (best) AMR parse; ours: results
when selecting the best parse according to our models’
accuracy prediction (hierarchical model).

scores predicted by our system. This scenario
arises, e.g., when we run several AMR parsers
over a large corpus with the aim of selecting the
best parse for each sentence in order to collect
silver training data.9 In the worst case, we do
not have any prior knowledge about a parser’s
performance (we may not even know the source
of a parse). We use the test partition from
LDC2015E86 and BioAMRTest to rank, for each
sentence, the automatic candidate parses provided
by the different parsers. In LDC2015E86 we as-
sume not to be agnostic about the parsers as their
performances on the development data of this data
set are known (in terms of their sentence-average
F1 Smatch score). Consider that we are given
a sentence and three automatic parses. We se-
lect the maximum-score parse, where the score is
defined by predicted Smatch F1 plus the average
Smatch F1 of the parse-producing parser on the
development data. As baselines in this scenario
we (i) randomly choose a parse from the three op-
tions or (ii) always choose the parse of GPLA. On
BioAMRTest, however, we have no prior informa-
tion about the submitted systems. We select from
6 automatic parses for each sentence. Since now
we are completely parser agnostic, the baseline is
to randomly select a parse from the candidate set.

Results The results are displayed in Table 5. For
our in-domain test data, LDC2015E86, selecting

9In a self-training scenario, we also could set a threshold
of minimum predicted accuracy to select confident parses.



219

Smatch LDC2015E86 Smatch BioAMRTest

ρ̄ %pos ρ̄ %pos

lower-bound -1 0.0 -1 0.0
random 0.00 50.0 0.00 50.0
ours 0.54 77.0 0.22 70.4
upper-bound 1.00 100.0 1.00 100.0

Table 6: Results of different parse-ranking systems
with respect to sentence-level parse rankings. ρ̄: av-
erage Pearson-r on a sentence level. %pos: ratio of
predicted rankings with positive ρ to gold ranking.

the best parse according to our model’s predicted
accuracy score improves over all individual parser
results: the obtained average Smatch F1 per sen-
tence increases (i) slightly by 0.2 pp. compared
to always choosing outputs from GPLA and (ii)
observably by 5.7 pp. compared to randomly se-
lecting a parse from the competing system out-
puts. The difference compared to always choos-
ing GPLA seems negligible which perhaps can be
explained by the fact that GPLA has been shown
to be on par or better than doubly-blind human
annotators.10 The oracle that always selects the
best parse (upper-bound in Table 5) shows little
room for improvement: it achieves 2.1 pp. Smatch
F1 increase compared to our model. This margin
is small and further success might also be ham-
pered by peculiarities in the manual annotations.
On BioAMRTest, no prior information about the
systems is available. Using our model’s predicted
scores to select from the alternative system out-
puts, we can boost Smatch F1 by 5.2 pp. com-
pared to randomly selecting a parse. Compared to
always selecting the parses of the best submitted
system (in-hindsight), we lag behind by 3.9 pp.

Since our data comprises outputs from sev-
eral parsers with varying performance, we can
study the performance of our approach in com-
bination with different parsers (Figure 6). When
only choosing among CAMR and JAMR outputs,
on LDC2015E86, our system boosts the F1 by
2.7 pp. compared to randomly selecting a parse,
and by 0.6 pp. compared to always choosing the
parse from the better system (determined on dev,
here: JAMR). Choosing from CAMR and GPLA
or JAMR and GPLA makes little difference: in
most cases our system selects the GPLA parse and
the difference to only choosing GPLA parses is

10GPLA (Lyu and Titov, 2018) achieves a high 74.4% cor-
pus-level Smatch F1 (primarily news texts), while a prior an-
notation study (Banarescu et al., 2013) reported doubly blind
annotation corpus-level F1 of 0.71 (for web texts).

CAMR/JAMR CAMR/GPLA JAMR/GPLA

Figure 6: Using our model to predict the best parse out
of two candidate parses, each from a different system.

marginal. Moreover, across both test sets, the ma-
jority of rankings assigned by our method have
positive correlations with the true rankings (Table
6): 77% of all assigned rankings have a positive
correlation with the true ranking (70% for bio-
medical). In sum, we can draw two conclusions
from this experiment: given a sentence, ranking
AMR parser outputs using our accuracy predic-
tion model, on in-domain and out-of-domain un-
seen data (i) clearly improves performance when
non state-of-the-art parsers are applied or if we are
not informed about the parsers’ performances and
(ii) does not worsen results in other cases.

5.3 Application Study: Predict System Ranks
In our final case study, we use our accuracy pre-
diction model to predict a ranking over systems.
We use our model to rank the unseen submitted
system parses of the SemEval-2017 Task 9 (eval-
uated on BioAMRTest) and SemEval-2016 Task 8
(evaluated on LDC2015R36) according to average
predicted F1 Smatch scores. Again, we assume a
parser-agnostic setting, meaning we have no prior
knowledge of the submitted systems (i.e. we just
consider their outputs). In this setting, we do not
rank individual parses given a sentence, but rank
the system outputs, according to estimated aver-
age Smatch F1 per sentence. We evaluate against
the final team rankings of the two shared tasks.

Results The results are displayed in Table 7. On
BioAMRTest we have a good, albeit non statis-
tically significant correlation with the true team
ranking. On the in-domain LDC2015R36 test set
we see a significant correlation of ρ = 0.645
(p1,2 < 0.05). In this shared task, many teams
were competitive and differences between the best
teams were marginal. For example, in the true
ranking, places 1 to 6 achieved between 0.60 and
0.62 Smatch F1. Notably, the first four teams ac-



220

Rank LDC2015R36 Rank BioAMRTest
rank r rank r̂ rank r rank r̂

DANGNT - - 1 3
Oxford - - 2 1
TMF-2 - - 3 2
RIGOTRIO - - 4 5
TMF-1 - - 5 4
JAMR 7 7 6 6
RIGA 1 4 - -
Brandeis 2 3 - -
CU-NLP 3 1 - -
UCL+Sheffield 4 2 - -
ICL-HD 5 8 - -
M2L 6 10 - -
JAMR-base 8 12 - -
UofR 9 11 - -
TMF 10 5 - -
UMD 11 6 - -
DynamicPower 12 13 - -
det. baseline 13 9 - -

ρ 0.645 (p1 = 0.017, p2 = 0.011) 0.771 (p1 = 0.072, p2 = 0.051)

Table 7: True rank r (given corpus-Smatch) and pre-
dicted rank r̂ (based on sentence average Smatch com-
puted using our model). p1: probability of non-
correlation. p2: probability that a randomly produced
ranking achieves equal or greater ρ (estimated over 106

random rankings). For team names, see fn. 6 & 7.

cording to the true ranking and the first four teams
according to our predicted ranking fall into the
same group. This shows that our model success-
fully assigned high ranks to low error submissions.

5.4 Ablation Experiments

We finally perform ablation experiments to eval-
uate the impact of individual model components.
We experiment with five different setups. (i) in-
stead of stacking two Bi-LSTMs, we use only one
Bi-LSTM (one-lstm, Table 8). (ii) instead of the
dependency tree, we feed the words in the order
as they occur in the sentence (no-dep). (iii) no-
pointers: we remove the token-pointers from our
model. (iv), instead of using the hierarchical setup,
we predict all metrics on the same level (green in
Figure 3, no-HL in Table 8) and (v), no-HMTL: we
optimize the non-hierarchical model only with re-
spect to Smatch, disregarding the AMR subtasks.
Remarkably, the dependency tree greatly helps the
model on in-domain data over all measures (-37
total ∆ without dependencies) but hurts the model
on out-of-domain data (+27 total ∆). A possible
explanation is the degradation of the dependency
parse quality: bio-medical data not only poses a
challenge for our model, but also for the depen-
dency parser. With special regard to the main
AMR evaluation measure, Smatch F1, the learned
pointer embeddings provide useful input on the in-
domain test data (-4 ∆ without pointers).

LDC2015R36 BioAMRTest

co
m

pl
et

e
on

e
ls

tm
no

-d
ep

no
-p

oi
nt

er
s

no
-H

L
no

-H
M

TL
co

m
pl

et
e

on
e

ls
tm

no
-d

ep

no
-p

oi
nt

er
s

no
-H

L
no

-H
M

TL

ρ ∆ ρ ∆

Smatch 78 -1 -1 -4 -3 -2 47 0 +5 +4 +2 -3

Concepts 64 -1 -4 -3 -4 - 62 0 +3 +2 0 -
Frames 72 0 -5 0 -1 - 63 0 +1 +1 -1 -
IgnoreVars 79 -1 -1 -1 -2 - 29 +5 +6 +5 +4 -
Named Ent. 81 +2 -3 +2 +3 - 50 -18 -9 -7 -9 -
Negations 87 -1 -1 +1 0 - 32 -16 +2 -1 -4 -
No WSD 78 -1 0 -1 -2 - 46 +2 +6 +5 +3 -
NS frames 77 0 -7 0 0 - 67 +1 +1 0 -1 -
Reentrancies 80 0 -9 +1 +2 - 48 0 +2 0 +1 -
SRL 75 -1 -4 0 +1 - 45 -4 +3 0 +2 -
Unlabeled 75 -1 0 -1 -1 - 51 0 +1 +4 +2 -
Wikification 86 0 -2 +1 +2 - 23 +5 +6 +6 +7 -∑

i ∆i 0 -5 -37 -5 -5 -2 0 -25 +27 +19 +6 -3

Table 8: ρ correlation (F1) differences over different
setups (columns), test sets (out-of-domain, in-domain)
and subtasks (rows). ±x: plus and minus x pp.ρ.

6 Conclusion

AMR parser evaluation with human gold anno-
tation is very costly. Our main contributions in
this work are two-fold: Firstly, we introduced
the concept of automatic AMR accuracy predic-
tion. Given only an automatic parse and the sen-
tence, from whence it was derived, the goal is
to predict evaluation metrics cheaply and possi-
bly at runtime. Secondly, we framed the task as
a multiple-output regression task and developed a
hierarchical neural model to predict a rich suite
of AMR evaluation metrics. We presented three
case studies proving (i) the feasibility of auto-
matic AMR accuracy prediction in general (sig-
nificant correlation with gold scores on unseen in-
domain and out-of-domain data) and (ii) the ap-
plicability of our model in two use cases. In the
first study, we ranked different automatic candi-
date parses per sentence, outperforming the ran-
dom selection baseline by 5.7 pp. average Smatch
F1 (in-domain) and 5.2 pp. (out-of-domain). In
the second study, we ranked team submissions to
two AMR shared tasks and our method was able
to reproduce rankings similar to the true rankings.

Acknowledgments

This work has been supported by the German Re-
search Foundation (grant no. GRK 1994/1) and the
Leibniz Association (grant no. SAS-2015-IDS-
LWC) and the Ministry of Science, Research, and
Art of Baden-Württemberg. We are grateful to the
NVIDIA corporation for donating the GPU used
in this research.



221

References
Laura Banarescu, Claire Bonial, Shu Cai, Madalina

Georgescu, Kira Griffitt, Ulf Hermjakob, Kevin
Knight, Philipp Koehn, Martha Palmer, and Nathan
Schneider. 2013. Abstract meaning representation
for sembanking.

Guntis Barzdins and Didzis Gosko. 2016. Riga at
semeval-2016 task 8: Impact of smatch extensions
and character-level neural translation on amr pars-
ing accuracy. In Proceedings of the 10th Interna-
tional Workshop on Semantic Evaluation (SemEval-
2016), pages 1143–1147. Association for Computa-
tional Linguistics.

Ergun Biici. 2016. Predicting the performance
of parsing with referential translation machines.
The Prague Bulletin of Mathematical Linguistics,
106(1):31 – 44.

Johannes Bjerva, Johan Bos, and Hessel Haagsma.
2016. The meaning factory at semeval-2016 task
8: Producing amrs with boxer. In Proceedings of
the 10th International Workshop on Semantic Eval-
uation (SemEval-2016), pages 1179–1184. Associa-
tion for Computational Linguistics.

Lauritz Brandt, David Grimm, Mengfei Zhou, and Yan-
nick Versley. 2016. Icl-hd at semeval-2016 task 8:
Meaning representation parsing - augmenting amr
parsing with a preposition semantic role labeling
neural network. In Proceedings of the 10th Interna-
tional Workshop on Semantic Evaluation (SemEval-
2016), pages 1160–1166. Association for Computa-
tional Linguistics.

Alastair Butler. 2016. Dynamicpower at semeval-
2016 task 8: Processing syntactic parse trees with
a dynamic semantics core. In Proceedings of the
10th International Workshop on Semantic Evalua-
tion (SemEval-2016), pages 1148–1153. Associa-
tion for Computational Linguistics.

Jan Buys and Phil Blunsom. 2017. Oxford at semeval-
2017 task 9: Neural amr parsing with pointer-
augmented attention. In Proceedings of the 11th
International Workshop on Semantic Evaluation
(SemEval-2017), pages 914–919. Association for
Computational Linguistics.

Shu Cai and Kevin Knight. 2013. Smatch: an evalua-
tion metric for semantic feature structures. In ACL
(2), pages 748–752. The Association for Computer
Linguistics.

Rajen Chatterjee, Matteo Negri, Marco Turchi,
Frédéric Blain, and Lucia Specia. 2018. Combin-
ing quality estimation and automatic post-editing to
enhance machine translation output. In AMTA (1),
pages 26–38. Association for Machine Translation
in the Americas.

Wei-Te Chen and Martha Palmer. 2017. Unsupervised
amr-dependency parse alignment. In Proceedings
of the 15th Conference of the European Chapter of

the Association for Computational Linguistics: Vol-
ume 1, Long Papers, pages 558–567. Association for
Computational Linguistics.

Marco Damonte, Shay B. Cohen, and Giorgio Satta.
2017. An incremental parser for abstract meaning
representation. In Proceedings of the 15th Confer-
ence of the European Chapter of the Association for
Computational Linguistics: Volume 1, Long Papers,
pages 536–546. Association for Computational Lin-
guistics.

Markus Dickinson and Amber Smith. 2011. Detecting
dependency parse errors with minimal resources. In
Proceedings of the 12th International Conference on
Parsing Technologies, pages 241–252. Association
for Computational Linguistics.

Markus Dickinson and Amber Smith. 2017. Simu-
lating dependencies to improve parse error detec-
tion. In Proceedings of the 15th International Work-
shop on Treebanks and Linguistic Theories (TLT15),
Bloomington, IN, USA, January 20-21, 2017., vol-
ume 1779 of CEUR Workshop Proceedings, pages
76–88. CEUR-WS.org.

Shibhansh Dohare and Harish Karnick. 2017. Text
summarization using abstract meaning representa-
tion. CoRR, abs/1706.01678.

Jeffrey Flanigan, Chris Dyer, Noah A. Smith, and
Jaime G. Carbonell. 2016. CMU at semeval-2016
task 8: Graph-based AMR parsing with infinite ramp
loss. In SemEval@NAACL-HLT, pages 1202–1206.
The Association for Computer Linguistics.

Jeffrey Flanigan, Sam Thomson, Jaime Carbonell,
Chris Dyer, and Noah A. Smith. 2014. A discrim-
inative graph-based parser for the abstract mean-
ing representation. In Proceedings of the 52nd An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1426–
1436. Association for Computational Linguistics.

William Foland and James H. Martin. 2016. Cu-nlp
at semeval-2016 task 8: Amr parsing using lstm-
based recurrent neural networks. In Proceedings of
the 10th International Workshop on Semantic Eval-
uation (SemEval-2016), pages 1197–1201. Associa-
tion for Computational Linguistics.

Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difficulty of training deep feedforward neural
networks. In AISTATS, volume 9 of JMLR Proceed-
ings, pages 249–256. JMLR.org.

James Goodman, Andreas Vlachos, and Jason Narad-
owsky. 2016. Ucl+sheffield at semeval-2016 task 8:
Imitation learning for amr parsing with an alpha-
bound. In Proceedings of the 10th International
Workshop on Semantic Evaluation (SemEval-2016),
pages 1167–1172. Association for Computational
Linguistics.

https://doi.org/10.18653/v1/S16-1176
https://doi.org/10.18653/v1/S16-1176
https://doi.org/10.18653/v1/S16-1176
https://doi.org/10.18653/v1/S16-1176
https://content.sciendo.com/view/journals/pralin/106/1/article-p31.xml
https://content.sciendo.com/view/journals/pralin/106/1/article-p31.xml
https://doi.org/10.18653/v1/S16-1182
https://doi.org/10.18653/v1/S16-1182
https://doi.org/10.18653/v1/S16-1179
https://doi.org/10.18653/v1/S16-1179
https://doi.org/10.18653/v1/S16-1179
https://doi.org/10.18653/v1/S16-1179
https://doi.org/10.18653/v1/S16-1177
https://doi.org/10.18653/v1/S16-1177
https://doi.org/10.18653/v1/S16-1177
https://doi.org/10.18653/v1/S17-2157
https://doi.org/10.18653/v1/S17-2157
https://doi.org/10.18653/v1/S17-2157
http://aclweb.org/anthology/E17-1053
http://aclweb.org/anthology/E17-1053
http://aclweb.org/anthology/E17-1051
http://aclweb.org/anthology/E17-1051
http://aclweb.org/anthology/W11-2929
http://aclweb.org/anthology/W11-2929
http://ceur-ws.org/Vol-1779/06dickinson.pdf
http://ceur-ws.org/Vol-1779/06dickinson.pdf
http://ceur-ws.org/Vol-1779/06dickinson.pdf
https://doi.org/10.3115/v1/P14-1134
https://doi.org/10.3115/v1/P14-1134
https://doi.org/10.3115/v1/P14-1134
https://doi.org/10.18653/v1/S16-1185
https://doi.org/10.18653/v1/S16-1185
https://doi.org/10.18653/v1/S16-1185
https://doi.org/10.18653/v1/S16-1180
https://doi.org/10.18653/v1/S16-1180
https://doi.org/10.18653/v1/S16-1180


222

Jonas Groschwitz, Matthias Lindemann, Meaghan
Fowlie, Mark Johnson, and Alexander Koller. 2018.
AMR dependency parsing with a typed semantic al-
gebra. CoRR, abs/1805.11465.

Normunds Gruzitis, Didzis Gosko, and Guntis
Barzdins. 2017. Rigotrio at semeval-2017 task 9:
Combining machine learning and grammar engi-
neering for amr parsing and generation. In Proceed-
ings of the 11th International Workshop on Semantic
Evaluation (SemEval-2017), pages 924–928. Asso-
ciation for Computational Linguistics.

Sambhav Jain, Naman Jain, Bhasha Agrawal, and Ra-
jeev Sangal. 2015. Employing oracle confusion for
parse quality estimation. In Computational Linguis-
tics and Intelligent Text Processing, pages 213–226,
Cham. Springer International Publishing.

Bevan K. Jones, Jacob Andreas, Daniel Bauer,
Karl Moritz Hermann, and Kevin Knight. 2012.
Semantics-based machine translation with hyper-
edge replacement grammars. In COLING, pages
1359–1376. Indian Institute of Technology Bombay.

Nisheeth Joshi, Iti Mathur, Hemant Darbari, and Ajai
Kumar. 2016. Quality estimation of english-hindi
machine translation systems. In Proceedings of
the Second International Conference on Informa-
tion and Communication Technology for Competi-
tive Strategies, ICTCS ’16, pages 53:1–53:5, New
York, NY, USA. ACM.

Hyun Kim, Hun-Young Jung, Hongseok Kwon, Jong-
Hyeok Lee, and Seung-Hoon Na. 2017. Predictor-
estimator: Neural quality estimation based on
target word prediction for machine translation.
ACM Trans. Asian Low-Resour. Lang. Inf. Process.,
17(1):3:1–3:22.

Diederik P. Kingma and Jimmy Ba. 2014. Adam:
A method for stochastic optimization. CoRR,
abs/1412.6980.

Ioannis Konstas, Srinivasan Iyer, Mark Yatskar, Yejin
Choi, and Luke Zettlemoyer. 2017. Neural amr:
Sequence-to-sequence models for parsing and gen-
eration. In Proceedings of the 55th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 146–157. Associa-
tion for Computational Linguistics.

Fei Liu, Jeffrey Flanigan, Sam Thomson, Norman
Sadeh, and Noah A. Smith. 2015. Toward abstrac-
tive summarization using semantic representations.
In Proceedings of the 2015 Conference of the North
American Chapter of the Association for Compu-
tational Linguistics: Human Language Technolo-
gies, pages 1077–1086. Association for Computa-
tional Linguistics.

Chunchuan Lyu and Ivan Titov. 2018. Amr parsing
as graph prediction with latent alignment. In Pro-
ceedings of the 56th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long

Papers), pages 397–407. Association for Computa-
tional Linguistics.

Jonathan May. 2016. Semeval-2016 task 8: Mean-
ing representation parsing. In Proceedings of the
10th International Workshop on Semantic Evalua-
tion (SemEval-2016), pages 1063–1073, San Diego,
California. Association for Computational Linguis-
tics.

Jonathan May and Jay Priyadarshi. 2017. Semeval-
2017 task 9: Abstract meaning representation
parsing and generation. In Proceedings of the
11th International Workshop on Semantic Evalu-
ation (SemEval-2017), page 536–545, Vancouver,
Canada. Association for Computational Linguistics,
Association for Computational Linguistics.

Arindam Mitra and Chitta Baral. 2016. Addressing a
question answering challenge by combining statis-
tical methods with inductive rule learning and rea-
soning. In Proceedings of the Thirtieth AAAI Con-
ference on Artificial Intelligence, February 12-17,
2016, Phoenix, Arizona, USA., pages 2779–2785.
AAAI Press.

Khoa Nguyen and Dang Nguyen. 2017. UIT-
DANGNT-CLNLP at semeval-2017 task 9: Build-
ing scientific concept fixing patterns for improving
CAMR. In Proceedings of the 11th International
Workshop on Semantic Evaluation, SemEval@ACL
2017, Vancouver, Canada, August 3-4, 2017, pages
909–913. Association for Computational Linguis-
tics.

Rik van Noord and Johan Bos. 2017a. The mean-
ing factory at semeval-2017 task 9: Producing amrs
with neural semantic parsing. In Proceedings of the
11th International Workshop on Semantic Evalua-
tion (SemEval-2017), pages 929–933. Association
for Computational Linguistics.

Rik van Noord and Johan Bos. 2017b. Neural semantic
parsing by character-based translation: Experiments
with abstract meaning representations. Computa-
tional Linguistics in the Netherlands Journal, 7:93–
108.

Martha Palmer, Daniel Gildea, and Paul Kingsbury.
2005. The proposition bank: An annotated corpus
of semantic roles. Comput. Linguist., 31(1):71–106.

Xiaochang Peng and Daniel Gildea. 2016. Uofr at
semeval-2016 task 8: Learning synchronous hyper-
edge replacement grammar for amr parsing. In
Proceedings of the 10th International Workshop on
Semantic Evaluation (SemEval-2016), pages 1185–
1189.

Yevgeniy Puzikov, Daisuke Kawahara, and Sadao
Kurohashi. 2016. M2L at semeval-2016 task 8:
AMR parsing with neural networks. In Proceed-
ings of the 10th International Workshop on Seman-
tic Evaluation, SemEval@NAACL-HLT 2016, San
Diego, CA, USA, June 16-17, 2016, pages 1154–
1159. The Association for Computer Linguistics.

http://arxiv.org/abs/1805.11465
http://arxiv.org/abs/1805.11465
https://doi.org/10.18653/v1/S17-2159
https://doi.org/10.18653/v1/S17-2159
https://doi.org/10.18653/v1/S17-2159
https://doi.org/10.1145/2905055.2905259
https://doi.org/10.1145/2905055.2905259
https://doi.org/10.1145/3109480
https://doi.org/10.1145/3109480
https://doi.org/10.1145/3109480
http://arxiv.org/abs/1412.6980
http://arxiv.org/abs/1412.6980
https://doi.org/10.18653/v1/P17-1014
https://doi.org/10.18653/v1/P17-1014
https://doi.org/10.18653/v1/P17-1014
https://doi.org/10.3115/v1/N15-1114
https://doi.org/10.3115/v1/N15-1114
http://aclweb.org/anthology/P18-1037
http://aclweb.org/anthology/P18-1037
http://www.aclweb.org/anthology/S16-1166
http://www.aclweb.org/anthology/S16-1166
http://www.aclweb.org/anthology/S17-2090
http://www.aclweb.org/anthology/S17-2090
http://www.aclweb.org/anthology/S17-2090
http://www.aaai.org/ocs/index.php/AAAI/AAAI16/paper/view/12345
http://www.aaai.org/ocs/index.php/AAAI/AAAI16/paper/view/12345
http://www.aaai.org/ocs/index.php/AAAI/AAAI16/paper/view/12345
http://www.aaai.org/ocs/index.php/AAAI/AAAI16/paper/view/12345
https://doi.org/10.18653/v1/S17-2156
https://doi.org/10.18653/v1/S17-2156
https://doi.org/10.18653/v1/S17-2156
https://doi.org/10.18653/v1/S17-2156
https://doi.org/10.18653/v1/S17-2160
https://doi.org/10.18653/v1/S17-2160
https://doi.org/10.18653/v1/S17-2160
https://doi.org/10.1162/0891201053630264
https://doi.org/10.1162/0891201053630264
http://aclweb.org/anthology/S/S16/S16-1178.pdf
http://aclweb.org/anthology/S/S16/S16-1178.pdf


223

Sudha Rao, Yogarshi Vyas, Hal Daumé III, and Philip
Resnik. 2016. Clip$@$umd at semeval-2016 task
8: Parser for abstract meaning representation us-
ing learning to search. In Proceedings of the
10th International Workshop on Semantic Evalua-
tion (SemEval-2016), pages 1190–1196. Associa-
tion for Computational Linguistics.

Sujith Ravi, Kevin Knight, and Radu Soricut. 2008.
Automatic prediction of parser accuracy. In Pro-
ceedings of the Conference on Empirical Methods in
Natural Language Processing, pages 887–896. As-
sociation for Computational Linguistics.

Ines Rehbein and Josef Ruppenhofer. 2018. Spruc-
ing up the trees – error detection in treebanks. In
Proceedings of the 27th International Conference on
Computational Linguistics, pages 107–118. Associ-
ation for Computational Linguistics.

David W Scott. 2012. Multivariate density estimation
and visualization. In Handbook of computational
statistics, pages 549–569. Springer.

Radu Soricut and Sushant Narsale. 2012. Combining
quality prediction and system selection for improved
automatic translation output. In Proceedings of the
Seventh Workshop on Statistical Machine Transla-
tion, pages 163–170. Association for Computational
Linguistics.

Lucia Specia, Kashif Shah, Jose G. C. De Souza,
Trevor Cohn, and Fondazione Bruno Kessler. 2013.
Quest - a translation quality estimation framework.
In In Proceedings of the 51th Conference of the
Association for Computational Linguistics (ACL),
Demo Session.

Vincent Van Asch and Walter Daelemans. 2010. Us-
ing domain similarity for performance estimation.
In Proceedings of the 2010 Workshop on Do-
main Adaptation for Natural Language Processing,
DANLP 2010, pages 31–36, Stroudsburg, PA, USA.
Association for Computational Linguistics.

Chuan Wang, Sameer Pradhan, Xiaoman Pan, Heng Ji,
and Nianwen Xue. 2016a. Camr at semeval-2016
task 8: An extended transition-based amr parser. In
Proceedings of the 10th International Workshop on
Semantic Evaluation (SemEval-2016), pages 1173–
1178, San Diego, California. Association for Com-
putational Linguistics.

Chuan Wang, Sameer Pradhan, Xiaoman Pan, Heng Ji,
and Nianwen Xue. 2016b. Camr at semeval-2016
task 8: An extended transition-based amr parser. In
Proceedings of the 10th International Workshop on
Semantic Evaluation (SemEval-2016), pages 1173–
1178.

Chuan Wang, Nianwen Xue, and Sameer Pradhan.
2015a. Boosting transition-based amr parsing with
refined actions and auxiliary analyzers. In Proceed-
ings of the 53rd Annual Meeting of the Association

for Computational Linguistics and the 7th Interna-
tional Joint Conference on Natural Language Pro-
cessing (Volume 2: Short Papers), pages 857–862,
Beijing, China. Association for Computational Lin-
guistics.

Chuan Wang, Nianwen Xue, and Sameer Pradhan.
2015b. A transition-based algorithm for amr pars-
ing. In Proceedings of the 2015 Conference of
the North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies, pages 366–375, Denver, Colorado. Asso-
ciation for Computational Linguistics.

A Supplemental Material

Hyper parameters and weights initialization
We initialize all parameters of the model ran-
domly. Embedding vectors of dimension 128 are
drawn from U(0.05, 0.05) and the LSTM weights
(neurons: 128) and weights of the feed forward
output layers are sampled from a Glorot uniform
distribution (Glorot and Bengio, 2010). For fu-
ture work, initializing the embedding layer with
pre-trained vectors could further increase the per-
formance. In this work, however, we learn all pa-
rameters from the given data. We fit our model us-
ing Adam (Kingma and Ba, 2014) (learning rate:
0.001) on the training data over 20 epochs with
mini batches of size 16. We apply early stopping
according to the maximum Pearson’s ρ (with re-
gard to Smatch F1) on the development data. ρ =∑n

i=1(xi−x̄)(yi−ȳ)√∑n
i=1(xi−x̄)2

√∑n
i=1(yi−ȳ)2

quantifies the linear

relationship between predicted scores (x1, ..., xn)
and true scores (y1, ..., yn).

https://doi.org/10.18653/v1/S16-1184
https://doi.org/10.18653/v1/S16-1184
https://doi.org/10.18653/v1/S16-1184
http://aclweb.org/anthology/C18-1010
http://aclweb.org/anthology/C18-1010
http://dl.acm.org/citation.cfm?id=1870526.1870531
http://dl.acm.org/citation.cfm?id=1870526.1870531
http://www.aclweb.org/anthology/S16-1181
http://www.aclweb.org/anthology/S16-1181
http://www.aclweb.org/anthology/P15-2141
http://www.aclweb.org/anthology/P15-2141
http://www.aclweb.org/anthology/N15-1040
http://www.aclweb.org/anthology/N15-1040

