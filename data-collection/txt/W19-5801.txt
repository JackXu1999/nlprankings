

















































LIAAD at SemDeep-5 Challenge: Word-in-Context (WiC)

Daniel Loureiro, Alı́pio Mário Jorge
LIAAD - INESC TEC

Faculty of Sciences - University of Porto, Portugal
dloureiro@fc.up.pt, amjorge@fc.up.pt

Abstract

This paper describes the LIAAD system
that was ranked second place in the Word-
in-Context challenge (WiC) featured in
SemDeep-5. Our solution is based on a
novel system for Word Sense Disambiguation
(WSD) using contextual embeddings and
full-inventory sense embeddings. We adapt
this WSD system, in a straightforward man-
ner, for the present task of detecting whether
the same sense occurs in a pair of sentences.
Additionally, we show that our solution is
able to achieve competitive performance
even without using the provided training
or development sets, mitigating potential
concerns related to task overfitting.

1 Task Overview

The Word-in-Context (WiC) (Pilehvar and
Camacho-Collados, 2019) task aims to evaluate
the ability of word embedding models to ac-
curately represent context-sensitive words. In
particular, it focuses on polysemous words which
have been hard to represent as embeddings due
to the meaning conflation deficiency (Camacho-
Collados and Pilehvar, 2018). The task’s objective
is to detect if target words occurring in a pair of
sentences carry the same meaning.

Recently, contextual word embeddings from
ELMo (Peters et al., 2018) or BERT (Devlin et al.,
2019) have emerged as the successors to tradi-
tional embeddings. With this development, word
embeddings have become context-sensitive by de-
sign and thus more suitable for representing poly-
semous words. However, as shown by the experi-
ments of (Pilehvar and Camacho-Collados, 2019),
they are still insufficient by themselves to reliably
detect meaning shifts.

In this work, we propose a system designed
for the larger task of Word Sense Disambigua-
tion (WSD), where words are matched with spe-

cific senses, that can detect meaning shifts without
being trained explicitly to do so. Our WSD sys-
tem uses contextual word embeddings to produce
sense embeddings, and has full-coverage of all
senses present in WordNet 3.0 (Fellbaum, 1998).
In Loureiro and Jorge (2019) we provide more
details about this WSD system, called LMMS
(Language Modelling Makes Sense), and demon-
strate that it’s currently state-of-the-art for WSD.
For this challenge, we employ LMMS in two
straightforward approaches: checking if the dis-
ambiguated senses are equal, and training a clas-
sifier based on the embedding similarities. Both
approaches perform competitively, with the lat-
ter taking the second position in the challenge
ranking, and the former trailing close behind even
though it’s tested directly on the challenge, forgo-
ing the training and development sets.

2 System Description

LMMS has two useful properties: 1) uses con-
textual word embeddings to produce sense em-
beddings, and 2) covers a large set of over 117K
senses from WordNet 3.0. The first property al-
lows for comparing precomputed sense embed-
dings against contextual word embeddings gener-
ated at test-time (using the same language model).
The second property makes the comparisons more
meaningful by having a large selection of senses
at disposal for comparison.

2.1 Sense Embeddings
Given the meaning conflation deficiency issue
with traditional word embeddings, several works
have focused on adapting Neural Language Mod-
els (NLMs) to produce word embeddings that are
more sense-specific. In this work, we start produc-
ing sense embeddings from the approach used by
recent works in contextual word embeddings, par-
ticularly context2vec (Melamud et al., 2016) and



ELMo (Peters et al., 2018), and introduce some
improvements towards full-coverage and more ac-
curate representations.

2.1.1 Using Supervision

Our set of full-coverage WordNet sense embed-
dings is bootstrapped from the SemCor corpus
(Miller et al., 1994). Sentences containing sense-
annotated tokens (or spans) are processed by a
NLM in order to obtain contextual embeddings for
those tokens. After collecting all sense-labeled
contextual embeddings, each sense embedding
(~vs) is determined by averaging its corresponding
contextual embeddings. Formally, given n contex-
tual embeddings ~c for some sense s:

~vs =
1

n

n∑
i=1

~ci

In this work, we used BERT as our NLM. For
replicability, these are the relevant details: 1024
embedding dimensions, 340M parameters, cased.
Embeddings result from the sum of top 4 layers ([-
1, -4]). Moreover, since BERT uses WordPiece to-
kenization that doesn’t always map to token-level
annotations, we use the average of subtoken em-
beddings as the token-level embedding.

2.1.2 Extending Supervision

Despite its age, SemCor is still the largest sense-
annotated corpus. The lack of larger sets of sense
annotations is a major limitation of supervised ap-
proaches for WSD (Le et al., 2018). We address
this issue by taking advantage of the semantic re-
lations in WordNet to extend the annotated sig-
nal to other senses. Missing sense embeddings
are inferred (i.e. imputed) from the aggregation
of sense embeddings at different levels of abstrac-
tion from WordNet’s ontology. Thus, a synset em-
bedding corresponds to the average of all of its
sense embeddings, a hypernym embedding corre-
sponds to the average of all of its synset embed-
dings, and a lexname embedding corresponds to
the average of a larger set of synset embeddings.
All lower abstraction representations are created
before next-level abstractions to ensure that higher
abstractions make use of lower-level generaliza-
tions. More formally, given all missing senses
in WordNet ŝ ∈ W , their synset-specific sense
embeddings Sŝ, hypernym-specific synset embed-
dings Hŝ, and lexname-specific synset embed-

dings Lŝ, the procedure has the following stages:

(1) if |Sŝ| > 0, ~vŝ = 1|Sŝ|
∑

~vs, ∀~vs ∈ Sŝ

(2) if |Hŝ| > 0, ~vŝ = 1|Hŝ|
∑

~vsyn,∀~vsyn ∈ Hŝ

(3) if |Lŝ| > 0, ~vŝ = 1|Lŝ|
∑

~vsyn, ∀~vsyn ∈ Lŝ

2.1.3 Leveraging Glosses

There’s a long tradition of using glosses for WSD,
perhaps starting with the popular work of Lesk
(1986). As a sequence of words, the informa-
tion contained in glosses can be easily represented
in semantic spaces through approaches used for
generating sentence embeddings. While there are
many methods for generating sentence embed-
dings, it’s been shown that a simple weighted av-
erage of word embeddings performs well (Arora
et al., 2017).

Our contextual embeddings are produced from
NLMs that employ attention mechanisms, assign-
ing more importance to some tokens over oth-
ers. As such, these embeddings already come
‘pre-weighted’ and we embed glosses simply as
the average of all of their contextual embeddings
(without preprocessing). We’ve found that intro-
ducing synset lemmas alongside the words in the
gloss helps induce better contextualized embed-
dings (specially when glosses are short). Finally,
we make our dictionary embeddings (~vd) sense-
specific, rather than synset-specific, by repeating
the lemma that’s specific to the sense alongside all
of the synset’s lemmas and gloss words. The re-
sult is a sense-level embedding that is represented
in the same space as the embeddings we described
in the previous section, and can be trivially com-
bined through concatenation (previously L2 nor-
malized).

Given that both representations are based on
the same NLM, we can make predictions for con-
textual embeddings of target words w (again, us-
ing the same NLM) at test-time by simply dupli-
cating those embeddings, aligning contextual fea-
tures against sense and dictionary features when
computing cosine similarity. Thus, we have sense
embeddings ~vs, to be matched against duplicated
contextual embeddings~cw, represented as follows:

~vs =

[
||~vs||2
||~vd||2

]
,~cw =

[
||~cw||2
||~cw||2

]



2.2 Sense Disambiguation
Having produced our set of full-coverage sense
embeddings, we perform WSD using a simple
Nearest-Neighbors (k-NN) approach, similarly to
Melamud et al. (2016) and Peters et al. (2018). We
match the contextual word embedding of a target
word against the sense embeddings that share the
word’s lemma (see Figure 1). Matching is per-
formed using cosine similarity (with duplicated
features on the contextual embedding for align-
ment, as explained in 2.1.3), and the top match is
used as the disambiguated sense.

Figure 1: Illustration of our k-NN approach for WSD,
which relies on full-coverage sense embeddings repre-
sented in the same space as contextualized embeddings.

2.3 Binary Classification
The WiC task calls for a binary judgement on
whether the meaning of a target word occurring in
a pair of sentences is the same or not. As such, our
most immediate solution is to perform WSD and
base our decision on the resulting senses. This
approach performs competitively, but we’ve still
found it worthwhile to use WiC’s data to train a
classifier based on the strengths of similarities be-
tween contextual and sense embeddings. In this
section we explore the details of both approaches.

2.3.1 Sense Comparison

Our first approach is a straightforward comparison
of the disambiguated senses assigned to the target
word in each sentence. Considering the example
in Figure 2, this approach simply requires check-
ing if the sense cook2v assigned to ‘makes’ in the
first sentence equals the sense produce2v assigned
to the same word in the second sentence.

2.3.2 Classifying Similarities

The WSD procedure we describe in this paper
represents sense embeddings in the same space
as contextual word embeddings. Our second ap-
proach exploits this property by considering the
similarities (including between different embed-
ding types) that can be seen in Figure 2. In this
approach, we take advantage of WiC’s training
set to learn a Logistic Regression Binary Classi-
fier based on different sets of similarities. The
choice of Logistic Regression is due to its explain-
ability and lightweight training, besides competi-
tive performance. We use sklearn’s implementa-
tion (v0.20.1), with default parameters.

3 Results

The best system we submitted during the evalua-
tion period of the challenge was a Logistic Regres-
sion classifier trained on two similarity features
(sim1 and sim2, or contextual and sense-level).
We obtained slightly better results with a classi-
fier trained on all four similarities shown in Figure
2, but were unable to submit that system due to
the limit of a maximum of three submissions dur-
ing evaluation. Interestingly, the simple approach
described in 2.3.1 achieved a competitive perfor-
mance of 66.3 accuracy, without being trained or
fine-tuned on WiC’s data. Performance of best en-
tries and baselines can be seen on Table 1.

Sentence Tokens: Marco makes ravioli Apple makes iPhones

Contextual Embeddings:

Sense Embeddings: (cook.v.02) (produce.v.02)

sim1

sim2

sim3 sim4

Figure 2: Components and interactions involved in our approaches. The simn labels correspond to cosine similar-
ities between the related embeddings. Sense embeddings obtained from 1-NN matches of contextual embeddings.



Submission Acc.
SuperGlue

(Wang et al., 2019)
68.36

LMMS
(Ours)

67.71

Ensemble
(Soler et al., 2019)

66.71

ELMo-weighted
(Ansell et al., 2019)

61.21

BERT-large 65.5
Context2vec 59.3

ELMo-3 56.5
Random 50.0

Table 1: Challenge results at the end of the evaluation
period. Bottom results correspond to baselines.

4 Analysis

In this section we provide additional insights re-
garding our best approach. In Table 2, we show
how task performance varies with the similarities
considered.

Model simn Dev Test
M0 N/A 68.18 66.29
M1 1 67.08 64.64
M2 2 66.93 66.21
M3 1, 2 68.50 67.71
M4 1, 2, 3, 4 69.12 68.07

Table 2: Accuracy of our different models. M0 wasn’t
trained on WiC data, the other models were trained
on different sets of similarites. We submitted M3, but
achieved slightly improved results with M4.

We determined that our best system (M4, using
four features) obtains a precision of 0.65, recall of
0.82, and F1 of 0.73 on the development set, show-
ing a relatively high proportion of false positives
(21.6% vs. 9.25% of false negatives). This skew-
ness can also be seen in the probability distribution
chart at Figure 3. Additionally, we also present a
ROC curve for this system at Figure 4 for a more
detailed analysis of the system’s performance.

5 Conclusion and Future Work

We’ve found that the WiC task can be ade-
quately solved by systems trained for the larger
task of WSD, specially if they’re based on con-
textual embeddings, and when compared to the
reported baselines. Still, we’ve found that the

WiC dataset can be useful to learn a classifier
that builds on top of the WSD system for im-
proved performance on WiC’s task of detecting
shifts in meaning. In future work, we believe this
improved ability to detect shifts in meaning can
also assist WSD, particularly in generating semi-
supervised datasets. We share our code and data at
github.com/danlou/lmms.

0 1

Predicted Values

0
1

T
ru

e
V

al
ue

s

181
True Negatives

138
False Positives

59
False Negatives

260
True Positives

0.0 0.2 0.4 0.6 0.8 1.0

Prediction Probability

0.0

0.5

1.0

1.5

2.0

2.5

3.0

S
am

pl
es

(n
or

m
al

iz
ed

sc
al

e)

Boundary

Positives

Negatives

0.0 0.2 0.4 0.6 0.8 1.0

False Positive Rate

0.0

0.2

0.4

0.6

0.8

1.0

T
ru

e
P

os
it

iv
e

R
at

e

ROC curve (area = 0.76)

Figure 3: Distribution of Prediction Probabilities
across labels, as evaluated by our best model on the
development set.

0 1

Predicted Values

0
1

T
ru

e
V

al
ue

s

181
True Negatives

138
False Positives

59
False Negatives

260
True Positives

0.0 0.2 0.4 0.6 0.8 1.0

Prediction Probability

0.0

0.5

1.0

1.5

2.0

2.5

3.0

S
am

pl
es

(n
or

m
al

iz
ed

sc
al

e)

Boundary

Positives

Negatives

0.0 0.2 0.4 0.6 0.8 1.0

False Positive Rate

0.0

0.2

0.4

0.6

0.8

1.0

T
ru

e
P

os
it

iv
e

R
at

e

ROC curve (area = 0.76)

Figure 4: ROC curve for results of our best model on
the development set.

Acknowledgements

This work is financed by National Funds through
the Portuguese funding agency, FCT - Fundação
para a Ciência e a Tecnologia within project:
UID/EEA/50014/2019.

https://github.com/danlou/lmms


References
Alan Ansell, Felipe Bravo-Marquez, and Bernhard

Pfahringer. 2019. An elmo-inspired approach to
semdeep-5’s word-in-context task. In SemDeep-
5@IJCAI 2019, page forthcoming.

Sanjeev Arora, Yingyu Liang, and Tengyu Ma. 2017.
A simple but tough-to-beat baseline for sentence em-
beddings. In International Conference on Learning
Representations (ICLR).

Jose Camacho-Collados and Mohammad Taher Pile-
hvar. 2018. From word to sense embeddings: A sur-
vey on vector representations of meaning. J. Artif.
Int. Res., 63(1):743–788.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2019. BERT: Pre-training of
deep bidirectional transformers for language under-
standing. In Proceedings of the 2019 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, Volume 1 (Long and Short Papers),
pages 4171–4186, Minneapolis, Minnesota. Associ-
ation for Computational Linguistics.

Christiane Fellbaum. 1998. In WordNet : an electronic
lexical database. MIT Press.

Minh Le, Marten Postma, Jacopo Urbani, and Piek
Vossen. 2018. A deep dive into word sense dis-
ambiguation with LSTM. In Proceedings of the
27th International Conference on Computational
Linguistics, pages 354–365, Santa Fe, New Mexico,
USA. Association for Computational Linguistics.

Michael Lesk. 1986. Automatic sense disambiguation
using machine readable dictionaries: How to tell a
pine cone from an ice cream cone. In Proceedings of
the 5th Annual International Conference on Systems
Documentation, SIGDOC ’86, pages 24–26, New
York, NY, USA. ACM.

Daniel Loureiro and Alı́pio Jorge. 2019. Language
modelling makes sense: Propagating representations
through wordnet for full-coverage word sense dis-
ambiguation. In Proceedings of the 57th Annual
Meeting of the Association for Computational Lin-
guistics, page forthcoming, Florence, Italy. Associa-
tion for Computational Linguistics.

Oren Melamud, Jacob Goldberger, and Ido Dagan.
2016. context2vec: Learning generic context em-
bedding with bidirectional LSTM. In Proceedings
of The 20th SIGNLL Conference on Computational
Natural Language Learning, pages 51–61, Berlin,
Germany. Association for Computational Linguis-
tics.

George A. Miller, Martin Chodorow, Shari Landes,
Claudia Leacock, and Robert G. Thomas. 1994. Us-
ing a semantic concordance for sense identification.
In HUMAN LANGUAGE TECHNOLOGY: Proceed-
ings of a Workshop held at Plainsboro, New Jersey,
March 8-11, 1994.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In Proceedings of the 2018 Confer-
ence of the North American Chapter of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies, Volume 1 (Long Papers), pages
2227–2237, New Orleans, Louisiana. Association
for Computational Linguistics.

Mohammad Taher Pilehvar and Jose Camacho-
Collados. 2019. Wic: the word-in-context dataset
for evaluating context-sensitive meaning represen-
tations. In Proceedings of NAACL, Minneapolis,
United States.

Aina Garı́ Soler, Marianna Apidianaki, and Alexan-
dre Allauzen. 2019. Limsi-multisem at the ijcai
semdeep-5 wic challenge: Context representations
for word usage similarity estimation. In SemDeep-
5@IJCAI 2019, page forthcoming.

Alex Wang, Yada Pruksachatkun, Nikita Nangia,
Amanpreet Singh, Julian Michael, Felix Hill, Omer
Levy, and Samuel R. Bowman. 2019. Superglue:
A stickier benchmark for general-purpose language
understanding systems. CoRR, abs/1905.00537.

https://openreview.net/forum?id=SyK00v5xx
https://openreview.net/forum?id=SyK00v5xx
https://doi.org/10.1613/jair.1.11259
https://doi.org/10.1613/jair.1.11259
https://www.aclweb.org/anthology/N19-1423
https://www.aclweb.org/anthology/N19-1423
https://www.aclweb.org/anthology/N19-1423
https://www.aclweb.org/anthology/C18-1030
https://www.aclweb.org/anthology/C18-1030
https://doi.org/10.1145/318723.318728
https://doi.org/10.1145/318723.318728
https://doi.org/10.1145/318723.318728
https://doi.org/10.18653/v1/K16-1006
https://doi.org/10.18653/v1/K16-1006
https://www.aclweb.org/anthology/H94-1046
https://www.aclweb.org/anthology/H94-1046
https://doi.org/10.18653/v1/N18-1202
https://doi.org/10.18653/v1/N18-1202
http://arxiv.org/abs/1905.00537
http://arxiv.org/abs/1905.00537
http://arxiv.org/abs/1905.00537

