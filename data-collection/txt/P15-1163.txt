



















































SOLAR: Scalable Online Learning Algorithms for Ranking


Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics
and the 7th International Joint Conference on Natural Language Processing, pages 1692–1701,

Beijing, China, July 26-31, 2015. c©2015 Association for Computational Linguistics

SOLAR: Scalable Online Learning Algorithms for Ranking

Jialei Wang1, Ji Wan2,3, Yongdong Zhang2, Steven C. H. Hoi3∗
1 Department of Computer Science, The University of Chicago, USA

2 Key Laboratory of Intelligent Information Processing, ICT, CAS, China
3 School of Information Systems, Singapore Management University, Singapore

jialei@cs.uchicago.edu, {wanji,zhyd}@ict.ac.cn, chhoi@smu.edu.sg

Abstract

Traditional learning to rank methods learn
ranking models from training data in a
batch and offline learning mode, which
suffers from some critical limitations, e.g.,
poor scalability as the model has to be re-
trained from scratch whenever new train-
ing data arrives. This is clearly non-
scalable for many real applications in
practice where training data often arrives
sequentially and frequently. To overcome
the limitations, this paper presents SO-
LAR — a new framework of Scalable On-
line Learning Algorithms for Ranking, to
tackle the challenge of scalable learning to
rank. Specifically, we propose two novel
SOLAR algorithms and analyze their IR
measure bounds theoretically. We conduct
extensive empirical studies by comparing
our SOLAR algorithms with conventional
learning to rank algorithms on benchmark
testbeds, in which promising results vali-
date the efficacy and scalability of the pro-
posed novel SOLAR algorithms.

1 Introduction

Learning to rank [27, 8, 29, 31, 7] aims to learn
some ranking model from training data using ma-
chine learning methods, which has been actively
studied in information retrieval (IR). Specifically,
consider a document retrieval task, given a query,
a ranking model assigns a relevance score to each
document in a collection of documents, and then
ranks the documents in decreasing order of rele-
vance scores. The goal of learning to rank is to
build a ranking model from training data of a set of
queries by optimizing some IR performance mea-
sures using machine learning techniques. In lit-
erature, various learning to rank techniques have

∗ The corresponding author. This work was done when
the first two authors visited Dr Hoi’s group.

been proposed, ranging from early pointwise ap-
proaches [15, 30, 28], to popular pairwise [26, 18,
3], and recent listwise approaches [5, 38]. Learn-
ing to rank has many applications, including doc-
ument retrieval, collaborative filtering, online ad,
answer ranking for online QA in NLP [33], etc.

Most existing learning to rank techniques fol-
low batch and offline machine learning methodol-
ogy, which typically assumes all training data are
available prior to the learning task and the rank-
ing model is trained by applying some batch learn-
ing method, e.g., neural networks [3] or SVM [4].
Despite being studied extensively, the batch learn-
ing to rank methodology has some critical limi-
tations. One of serious limitations perhaps is its
poor scalability for real-world web applications,
where the ranking model has to be re-trained from
scratch whenever new training data arrives. This
is apparently inefficient and non-scalable since
training data often arrives sequentially and fre-
quently in many real applications [33, 7]. Besides,
batch learning to rank methodology also suffers
from slow adaption to fast-changing environment
of web applications due to the static ranking mod-
els pre-trained from historical batch training data.

To overcome the above limitations, this paper
investigates SOLAR — a new framework of Scal-
able Online Learning Algorithms for Ranking,
which aims to learn a ranking model from a se-
quence of training data in an online learning fash-
ion. Specifically, by following the pairwise learn-
ing to rank framework, we formally formulate the
learning problem, and then present two different
SOLAR algorithms to solve the challenging task
together with the analysis of their theoretical prop-
erties. We conduct an extensive set of experi-
ments by evaluating the performance of the pro-
posed algorithms under different settings by com-
paring them with both online and batch algorithms
on benchmark testbeds in literature.

As a summary, the key contributions of this pa-

1692



per include: (i) we present a new framework of
Scalable Online Learning Algorithms for Rank-
ing, which tackles the pairwise learning to rank-
ing problem via a scalable online learning ap-
proach; (ii) we present two SOLAR algorithms:
a first-order learning algorithm (SOLAR-I) and a
second-order learning algorithm (SOLAR-II); (iii)
we analyze the theoretical bounds of the proposed
algorithms in terms of standard IR performance
measures; and (iv) finally we examine the efficacy
of the proposed algorithms by an extensive set of
empirical studies on benchmark datasets.

The rest of this paper is organized as follows.
Section 2 reviews related work. Section 3 gives
problem formulations of the proposed framework
and presents our algorithms, followed by theoret-
ical analysis in Section 4. Section 5 presents our
experimental results, and Section 6 concludes this
work and indicates future directions.

2 Related Work

In general, our work is related to two topics in in-
formation retrieval and machine learning: learn-
ing to rank and online learning. Both of them have
been extensively studied in literature. Below we
briefly review important related work in each area.

2.1 Learning to Rank

Most of the existing approaches to learning to rank
can be generally grouped into three major cate-
gories: (i) pointwise approaches, (ii) pairwise ap-
proaches, and (iii) listwise approaches.

The pointwise approaches treat ranking as a
classification or regression problem for predicting
the ranking of individual objects. For example,
[12, 19] formulated ranking as a regression prob-
lem in diverse forms. [30] formulated ranking a
binary classification of relevance on document ob-
jects, and solved it by discriminative models (e.g.,
SVM). In [15], Perceptron [32] ranking (known as
“Prank”) [15] formulated it as online binary clas-
sification. [28] cast ranking as multiple classifica-
tion or multiple ordinal classification tasks.

The pairwise approaches treat the document
pairs as training instances and formulate ranking
as a classification or regression problem from a
collection of pairwise document instances. Ex-
ample of pairwise learning to rank algorithms
include: neural network approaches such as
RankNet [3] and LambdaRank [2], SVM ap-
proaches such as RankSVM [26], boosting ap-

proaches such as RankBoost [18], regression al-
gorithms such as GBRank [43], and probabilistic
ranking algorithms such as FRank [35]. The pair-
wise group is among one of widely and success-
fully applied approaches. Our work generally be-
longs to this group.

The listwise approaches treat a list of docu-
ments for a query as a training instance and at-
tempt to learn a ranking model by optimizing
some loss defined on the predicted list and the
ground-truth list. In general, there are two types
of approaches. The first is to directly optimize
some IR metrics, such as Mean Average Pre-
cision (MAP) and Normalized Discounted Cu-
mulative Gain (NDCG) [25]. Examples include
AdaRank by boosting [39], SVM-MAP by op-
timizing MAP [42], PermuRank [40], and Sof-
tRank [34] based on a smoothed approxima-
tion to NDCG, and NDCG-Boost by optimizing
NDCG [37], etc. The other is to indirectly opti-
mize the IR metrics by defining some listwise loss
function, such as ListNet [5] and ListMLE [38].

Despite being studied actively, most existing
works generally belong to batch learning meth-
ods, except a few online learning studies. For
example, Prank [15] is probably the first online
pointwise learning to ranking algorithm. Unlike
Prank, our work focuses online pairwise learning
to rank technique, which significantly outperforms
Prank as observed in our empirical studies. Be-
sides, our work is also related to another existing
work in [10], but differs considerably in several as-
pects: (i) they assume the similarity function is de-
fined in a bi-linear form which is inappropriate for
document retrieval applications; (ii) their training
data is given in the form of triplet-image instance
(p1, p2, p3), while our training data is given in
a pairwise query-document instance (qt, d1t , d

2
t );

(iii) they only apply first order online learning al-
gorithms, while we explore both first-order and
second-order online algorithms. Finally, we note
that our work differs from another series of on-
line learning to rank studies [21, 22, 23, 36, 41]
which attempt to explore reinforcement learning
or multi-arm bandit techniques for learning to rank
from implicit/partial feedback, whose formulation
and settings are very different.

2.2 Online Learning

Our work is closely related to studies of online
learning [24], representing a family of efficient

1693



and scalable machine learning algorithms. In liter-
ature, a variety of online algorithms have been pro-
posed, mainly in two major categories: first-order
algorithms and second-order algorithms. The no-
table examples of first-order online learning meth-
ods include classical Perceptron [32], and Passive-
Aggressive (PA) learning algorithms [13]. Unlike
first-order algorithms, second-order online learn-
ing [6], e.g., Confidence-Weighted (CW) learn-
ing [16], usually assumes the weight vector fol-
lows a Gaussian distribution and attempts to up-
date the mean and covariance for each received
instance. In addition, Adaptive Regularization
of Weights Learning (AROW) [14] was proposed
to improve robustness of CW. More other on-
line learning methods can be found in [24]. In
this work, we apply both first-order and second-
order online learning methods for online learning
to rank.

3 SOLAR — Online Learning to Rank

We now present SOLAR — a framework of Scal-
able Online Learning Algorithms for Ranking,
which applies online learning to build ranking
models from sequential training instances.

3.1 Problem Formulation

Without loss of generality, consider an online
learning to rank problem for document retrieval,
where training data instances arrive sequentially.
Let us denote byQ a query space and denote byD
a document space. Each instance received at time
step t is represented by a triplet (q(i)t , d

(1)
t , d

(2)
t ),

where q(i)t ∈ Q denotes the i-th query in the entire
collection of queries Q, d(1)t ∈ D and d(2)t ∈ D
denote a pair of documents for prediction of rank-
ing w.r.t. the query q(i)t . Without loss of clarity,
for the rest of this paper, we simplify the notation
q

(i)
t , d

(1)
t , d

(2)
t as q

i
t, d

1
t , d

2
t , respectively.

We also denote by yt ∈ {+1,−1} the true
ranking order of the pairwise instances at step t
such that if yt = +1, document d1t is ranked be-
fore d2t ; otherwise d

1
t is ranked after d

2
t . We in-

troduce a mapping function φ : Q × D → Rn
that creates a n-dimensional feature vector from
a query-document pair. For example, consider
φ(q, d) ∈ Rn, one way to extract one of the n
features is based on term frequency, which counts
the number of times the query term of q occurs
in document d. We also introduce wt ∈ Rn as

the ranking model to be learned at step t, which is
used to form the target ranking function below:

f(qit, d
1
t , d

2
t ) = w

>
t φ(q

i
t, d

1
t , d

2
t ) = wt

>(φ(qit, d
1
t )− φ(qit, d2t ))

Assume that we have a total of Q queries
{q(i)}Qi=1, each of which is associated with a total
of Di documents and a total of Ti training triplet
instances. In a practical document retrieval task,
the online learning to rank framework operates in
the following procedure:

(i) Given a query q1, an initial model w1 is first
applied to rank the set of documents for the
query, which are then returned to users;

(ii) We then collect user’s feedback (e.g., click-
through data) as the ground truth labels for
the ranking orders of a collection of T1 triplet
training instances;

(iii) We then apply an online learning algorithm to
update the ranking model from the sequence
of T1 triplet training instances;

(iv) We repeat the above by applying the updated
ranking model to process the next query.

For a sequence of T triplet training instances,
the goal of online learning to rank is to optimize
the sequence of ranking models w1, . . . ,wT dur-
ing the entire online learning process. In gen-
eral, the proposed online learning to rank scheme
is evaluated by measuring the online cumulative
MAP [1] or online cumulative NDCG [25]. Let
us denote by NDCGi and MAPi the NDCG and
MAP values for query qi, respectively, which are
defined as follows:

NDCGi =
1

Nn

Di∑
r=1

G(l(πf (r)))D(r) (1)

MAPi =
1

m

∑
s:l(πf (s))=1

∑
j≤s I{l(πf (j))=1}

s
(2)

where I{·} is an indicator function that out-
puts 1 when the statement is true and 0 other-
wise; G(K) = 2K − 1,D(K) = 1log2(1+K) ,
Nn = maxπ

∑m
r=1G(l(π(r)))D(r), l(r) is the

corresponding labels as K-level ratings, πf denote
a rank list produced by ranking function f , m is
the number of relevant documents. The online cu-
mulative IR measure is defined as the average of
the measure over a sequence of Q queries:

NDCG =
1

Q

Q∑
i=1

NDCGi MAP =
1

Q

Q∑
i=1

MAPi (3)

1694



3.2 First-order SOLAR Algorithm
The key challenge of online learning to rank is
how to optimize the ranking model wt when re-
ceiving a training instance (qit, d

1
t , d

2
t ) and its true

label yt at each time step t. In the following, we
apply the passive-aggressive online learning tech-
nique [13] to solve this challenge. First of all, we
formulate the problem as an optimization:

wt+1 = arg min
w

1

2
‖w −wt‖2 + C`(w; (qit, d1t , d2t ), yt)2 (4)

where `(wt) is a hinge loss defined as `(wt) =
max(0, 1− ytwt>(φ(qit, d1t )− φ(qit, d2t ))), and C
is a penalty cost parameter.

The above optimization formulation aims to
achieve a trade-off between two concerns: (i) the
updated ranking model should not be deviated too
much from the previous ranking model wt; and (ii)
the updated ranking model should suffer a small
loss on the triplet instance (qit, d

1
t , d

2
t ). Their trade-

off is essentially controlled by the penalty cost pa-
rameter C. Finally, we can derive the following
proposition for the solution to the above.
Proposition 1. This optimization in (4) has the
following closed-form solution:

wt+1 = wt + λtyt(φ(q
i
t, d

1
t )− φ(qit, d2t )) (5)

where λt is computed as follows:

λt =
max(0, 1−wt>yt(φ(qit, d1t )− φ(qit, d2t )))

‖φ(qit, d1t )− φ(qit, d2t ))‖2 + 12C
(6)

It is not difficult to derive the result in the
above proposition by following the similar idea
of passive aggressive online learning [13]. We
omit the detailed proof here. We can see that if
wt>yt(φ(qit, d1t )− φ(qit, d2t )) ≥ 1, then the model
remains unchanged, which means that if the cur-
rent ranking model can correctly rank the order of
d1t and d

2
t w.r.t. query q

i
t at a large margin, we can

keep our model unchanged at this round; other-
wise, we will update the current ranking model by
the above proposition. Figure 1 gives the frame-
work of the proposed online learning to rank al-
gorithms. We denote by the first-order learning to
rank algorithm as “SOLAR-I” for short.

3.3 Second-order SOLAR Algorithm
The previous algorithm only exploits first-order
information of the ranking model wt. Inspired
by recent studies in second-order online learn-
ing [6, 16, 14], we explore second-order algo-
rithms for online learning to rank.

Algorithm 1: SOLAR — Scalable Online Learning to
Rank
1: Initialize w1 = 0, t = 1
2: for i = 1, 2, . . . , Q do
3: receive a query qi and documents for ranking
4: rank the documents by current model wt
5: acquire user’s feedback in triplet instances
6: for j = 1, . . . , Ti do
7: update wt+1 with (qit, d1t , d2t ) and yt by

Eqn. (5) (SOLAR-I) or by Eqn.(8) (SOLAR-II)
8: t = t + 1
9: end for
10: end for

Figure 1: SOLAR: scalable online learning to rank
Specifically, we cast the online learning to rank-

ing problem into a probabilistic framework, in
which we model feature confidence for a linear
ranking model w with a Gaussian distribution with
mean w ∈ Rd and covariance Σ ∈ Rd×d. The
mean vector w is used as the model of the ranking
function, and the covariance matrix Σ represents
our confidence on the model: the smaller the value
of Σp,p, the more confident the learner has over the
p-th feature wp of the ranking model w.

Following the similar intuition of the above
section, we want to optimize our ranking model
N (w,Σ) by achieving the following trade-off: (i)
to avoid being deviated too much from the previ-
ous model N (wt,Σt); (ii) to ensure that it suffers
a small loss on current triplet instance; and (iii) to
attain a large confidence on the current instance.
Similar to [16], we employ the Kullback-Leibler
divergence to measure the distance between the
current model w to be optimized and the previous
model wt, and the regularization terms include
both the loss suffered at current triplet instance and
the confidence on current triplet instance.

Specifically, we formulate the optimization of
second-order online learning to rank as:
{wt+1,Σt+1} = arg min

w,Σ
DKL(N (w,Σ)||N (wt,Σt))

+
`(w)2 + Ω(Σ)

2γ
(7)

Ω(Σ) = (φ(qit, d
1
t )− φ(qit, d2t ))>Σ(φ(qit, d1t )− φ(qit, d2t ))

where γ is the trade-off parameter. The follow-
ing proposition gives the closed-form solution.
Proposition 2. This optimization problem in (7)
has the following closed-form solution:

wt+1 = wt + αtΣtyt(φ(q
i
t, d

1
t )− φ(qit, d2t )) (8)

Σt+1 = Σt − (1/βt)ΣtAΣt (9)
where A, βt, and αt are computed as follows:

A = (φ(qit, d
1
t )− φ(qit, d2t ))(φ(qit, d1t )− φ(qit, d2t ))>

βt = (φ(q
i
t, d

1
t )− φ(qit, d2t ))>Σt(φ(qit, d1t )− φ(qit, d2t )) + γ

αt = max(0, 1− ytwt>(φ(qit, d1t )− φ(qit, d2t )))/βt

1695



The above can be proved by following [14]. We
omit the details. We denote the above algorithm as
“SOLAR-II” for short.

4 Theoretical Analysis

In this section, we theoretically analyze the two
proposed algorithms by proving some online cu-
mulative IR measure bounds for both of them.

In order to prove the IR measure bounds for the
proposed algorithms, we first need to draw the re-
lationships between the cumulative IR measures
and the sum of pairwise squared hinge losses. To
this purpose, we introduce the following Lemma.
Lemma 4.1. For one query qi and its related doc-
uments, the NDCG and MAP is lower bounded by
its sum of pairwise squared hinge loss suffered by
rank model w.

NDCGi ≥ 1− γNDCG
∑
t

`2(w, (qit, d
1
t , d

2
t ))

MAPi ≥ 1− γMAP
∑
t

`2(w, (qit, d
1
t , d

2
t ))

where γNDCG and γMAP are constant specified
by the properties of IR measures: γNDCG =
G(K−1)D(1)

Nn
and γMAP = 1m , G(K) = 2

K −
1,D(K) = 1log2(1+K) ,
Nn = maxπ

∑m
r=1G(l(π(r)))D(r), l(r) is the

corresponding labels as K-level ratings, π is rank
list, m is the number of relevant documents.

Sketch Proof. Using the essential loss idea
defined in [11], from Theorem 1 of [11] we
could see the essential loss is an upper bound
of measure-based ranking errors; besides, the
essential loss is the lower bound of the sum of
pairwise squared hinge loss, using the properties
of squared hinge loss, which is non-negative, non-
increasing and satisfy `2(0) = 1.

The above lemma indicates that if we could
prove bounds for the online cumulative squared
hinge loss compared to the best ranking model
with all data beforehand, we could obtain the cu-
mulative IR measures bounds. Fortunately there
are strong theoretical loss bounds for the proposed
online learning to ranking algorithms. The follow-
ing shows the theorem of such loss bounds for the
proposed SOLAR algorithms.
Theorem 1. For the SOLAR-I algorithm with Q
queries, for any rank model u, suppose R =
maxi,t ‖φ(qit, d1t ) − φ(qit, d2t ))‖, the cumulative
squared hinge loss is bounded by
Q∑
i=1

Ti∑
t=1

`2t (wt) ≤ (R2 + 1
2C

)(‖u‖2 + 2C
Q∑
i=1

Ti∑
t=1

`2t (u)) (10)

The proof for Theorem 1 can be found in Ap-
pendix A. By combining the results of Lemma 1
and Theorem 1, we can easily derive the cumula-
tive IR measure bound of the SOLAR-I algorithm.
Theorem 2. For the SOLAR-I algorithm with Q
queries, for any ranking model u, the NDCG and
MAP performances are respectively bounded by

NDCG ≥ 1− γNDCG
Q

(R2 +
1

2C
)(‖u‖2 + 2C

Q∑
i

Ti∑
t=1

`2t (u))

MAP ≥ 1− γMAP
Q

(R2 +
1

2C
)(‖u‖2 + 2C

Q∑
i

Ti∑
t=1

`2t (u))

The analysis of the SOLAR-II algorithm would
be much more complex. Let us denote by
M(M = |M|) the set of example indices
for which the algorithm makes a mistake, and
by U(U = |U|) the set of example indices
for which there is an update but not a mis-
take. Let XA =

∑
(qit,d

1
t ,d

2
t )∈M∪U (φ(q

i
t, d

1
t ) −

φ(qit, d
2
t ))(φ(q

i
t, d

1
t ) − φ(qit, d2t ))T . The theorem

below give the squared hinge loss bound.
Theorem 3. For the SOLAR-II al-
gorithm with Q queries, Let χt =
(φ(qit, d

1
t ) − φ(qit, d2t ))TΣt(φ(qit, d1t ) − φ(qit, d2t ))

of examples in M∪ U at time t, K and k is the
maximum and minimum value of χt, respectively.
ΣT be the final covariance matrix and uT be the
final mean vector. For any ranking model u, the
squared hinge loss is bounded by

Q∑
i=1

Ti∑
t=1

`2t (wt) ≤ K + γ
k + γ

(a+

Q∑
i=1

Ti∑
t=1

`t(u))

+(K + γ)(log det(Σ−1T )−
a2

γ2uTΣ−1T u
)

where a =
√
γ‖u‖2 + utXAu

√
log(det(I +

1

γ
XA)) + U

The proof for Theorem 3 can be found in Ap-
pendix B. Now, by combining the Lemma 1 and
Theorem 3, we can derive the cumulative IR mea-
sure bound achieved by the proposed SOLAR-II
algorithm.
Theorem 4. For the SOLAR-II algorithm with Q
queries, for any ranking model u, the NDCG and
MAP performances are respectively bounded by

NDCG ≥ 1− γNDCG(K + γ)
Q(k + γ)

(a+

Q∑
i

Ti∑
t=1

`t(u))− γNDCGb
Q

MAP ≥ 1− γMAP(K + γ)
Q(k + γ)

(a+

Q∑
i

Ti∑
t=1

`t(u))− γMAPb
Q

where b = (K + γ)(log det(Σ−1T )− a
2

γ2uTΣ−1T u
)

The above theorems show that our online algo-
rithm is no much worse than that of the best rank-
ing model u with all data beforehand.

1696



5 Experiments

We conduct extensive experiments to evaluate the
efficacy of our algorithms in two major aspects:
(i) to examine the learning efficacy of the pro-
posed SOLAR algorithms for online learning to
rank tasks; (ii) to directly compare the proposed
SOLAR algorithms with the state-of-the-art batch
learning to rank algorithms. Besides, we also
show an application of our algorithms for trans-
fer learning to rank tasks to demonstrate the im-
portance of capturing changing search intention
timely in real web applications. The results are
in the supplemental file due to space limitation.

5.1 Experimental Testbed and Metrics

We adopt the popular benchmark testbed for learn-
ing to rank: LETOR1 [31]. To make a com-
prehensive comparison, we perform experiments
on all the available datasets in LETOR3.0 and
LETOR4.0. The statistics are shown in Table 1.
For performance evaluation metrics, we adopt
the standard IR measures, including ”MAP”,
”NDCG@1”, ”NDCG@5”, and ”NDCG@10”.

Table 1: LETOR datasets used in the experiments.
Dataset #Queries #features avg#Docs/query
OHSUMED 106 45 152.26
MQ2007 1692 46 41.14
MQ2008 784 46 19.40
HP2003 150 64 984.04
HP2004 75 64 992.12
NP2003 75 64 991.04
NP2004 75 64 984.45
TD2003 50 64 981.16
TD2004 50 64 988.61

5.2 Evaluation of Online Rank Performance

This experiment evaluates the online learning per-
formance of the proposed algorithms for online
learning to rank tasks by comparing them with
the existing “Prank” algorithm [15], a Perceptron-
based pointwise online learning to rank algorithm,
and a recently proposed “Committee Perceptron
(Com-P)” algorithm [17], which explores the en-
semble learning for Perceptron. We evaluate the
performance in terms of both online cumulative
NDCG and MAP measures. As it is an online
learning task, the parameter C of SOLAR-I is
fixed to 10−5 and the parameter γ of SOLAR-II
is fixed to 104 for all the datasets, as suggested
by [17], we set the number of experts in “Com-
P” to 20. All experiments were conducted over 10
random permutations of each dataset, and all re-
sults were averaged over the 10 runs.

1
http://research.microsoft.com/en-us/um/beijing/

projects/letor/

Table 2 give the results of NDCG on all the
datasets, where the best results were bolded. Sev-
eral observations can be drawn as follows.

First of all, among all the algorithms, we found
that both SOLAR-I and SOLAR-II achieve sig-
nificantly better performance than Prank, which
proves the efficacy of the proposed pairwise al-
gorithms. Second, we found that Prank (point-
wise) performs extremely poor on several datasets
(HP2003, HP2004, NP2003, NP2004, TD2003,
TD2004). By looking into the details, we found
that it is likely because Prank (pointwise), as a
pointwise algorithm, is highly sensitive to the im-
balance of training data, and the above datasets are
indeed highly imbalanced in which very few doc-
uments are labeled as relevant among about 1000
documents per query. By contrast, the pairwise al-
gorithm performs much better. This observation
further validates the importance of the proposed
pairwise SOLAR algorithms that are insensitive
to imbalance issue. Last, by comparing the two
SOLAR algorithms, we found SOLAR-II outper-
forms SOLAR-I in most cases, validating the effi-
cacy of exploiting second-order information.

5.3 Batch v.s. Online Learning

5.3.1 Comparison of ranking performance
This experiment aims to directly compare the pro-
posed algorithms with the state-of-the-art batch al-
gorithms in a standard learning to rank setting.
We choose four of the most popular and cutting-
edge batch algorithms that cover both pairwise and
listwise approaches, including RankSVM [20],
AdaRank [39], RankBoost [18], and ListNet [5].
For comparison, we follow the standard setting:
each dataset is divided into 3 parts: 60% for train-
ing, 20% for validation to select the best parame-
ters, and 20% for testing. We use the training data
to learn the ranking model by the proposed SO-
LAR algorithms, the validation data to select the
best parameters, and use the test data to evaluate
performance. For SOLAR-I, we choose the best
parameter C from [10−3.5, 10−6.5] via grid search
on the validation set; and similarly for SOLAR-II,
we choose the best parameter γ from [103, 106].
Following [31], we adopt 5 division versions of all
the datasets, and report the average performance.
The results are shown in Table 3, where the best
performances were bolded2. Several observations
can drawn from the results.

2Results of the baseline algorithms are taken from LETOR.

1697



Table 2: Evaluation of NDCG performance of online learning to rank algorithms.
Algorithm OHSUMED MQ2007 MQ2008

NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10

Prank(Pointwise) 0.2689 0.2253 0.2221 0.2439 0.2748 0.3039 0.2369 0.3352 0.4036
Prank(Pairwise) 0.4456 0.3953 0.3904 0.2777 0.3010 0.3294 0.2834 0.3823 0.4403
Com-P 0.4327 0.3993 0.3934 0.3640 0.3828 0.4135 0.3378 0.4415 0.4885
SOLAR-I 0.5060 0.4479 0.4337 0.3760 0.3973 0.4271 0.3490 0.4584 0.5022
SOLAR-II 0.5352 0.4635 0.4461 0.3897 0.4095 0.4383 0.3594 0.4680 0.5107

Algorithm HP2003 HP2004 NP2003
NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10

Prank(Pointwise) 0.0033 0.0047 0.0050 0.0053 0.0083 0.0088 0.0033 0.0051 0.0075
Prank(Pairwise) 0.5267 0.6491 0.6745 0.5107 0.6438 0.6717 0.4033 0.5926 0.6255
Com-P 0.6487 0.7744 0.7884 0.5640 0.7163 0.7392 0.5227 0.7146 0.7417
SOLAR-I 0.6993 0.7796 0.7917 0.5347 0.7072 0.7335 0.5527 0.7486 0.7792
SOLAR-II 0.7020 0.7959 0.8079 0.5413 0.7146 0.7419 0.5693 0.7621 0.7895

Algorithm NP2004 TD2003 TD2004
NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10

Prank(Pointwise) 0.0080 0.0100 0.0100 0.0040 0.0063 0.0056 0.0040 0.0018 0.0025
Prank(Pairwise) 0.4213 0.6039 0.6290 0.1920 0.1707 0.1737 0.2773 0.2235 0.2071
Com-P 0.4867 0.6989 0.7226 0.3300 0.2717 0.2635 0.3427 0.2988 0.2794
SOLAR-I 0.5613 0.7649 0.7869 0.2160 0.2968 0.2916 0.2533 0.2750 0.2625
SOLAR-II 0.5627 0.7667 0.7858 0.2960 0.3251 0.3245 0.2893 0.2874 0.2806

0 20 40 60 80 100 120

0.3

0.32

0.34

0.36

0.38

0.4

0.42

0.44

0.46

Number of samples

O
n

li
n

e
 c

u
m

u
la

ti
v
e

 M
A

P

 

 

Prank(Pointwise)

Prank(Pairwise)

Com−P
SOLAR−I

SOLAR−II

0 200 400 600 800 1000 1200 1400 1600
0.4

0.42

0.44

0.46

0.48

0.5

0.52

0.54

Number of samples

O
n

li
n

e
 c

u
m

u
la

ti
v
e

 M
A

P

 

 

Prank(Pointwise)

Prank(Pairwise)

Com−P
SOLAR−I

SOLAR−II

0 50 100 150
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

Number of samples

O
n

li
n

e
 c

u
m

u
la

ti
v
e

 M
A

P

 

 

Prank(Pointwise)

Prank(Pairwise)

Com−P
SOLAR−I

SOLAR−II

0 10 20 30 40 50 60 70 80
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

Number of samples

O
n

li
n

e
 c

u
m

u
la

ti
v
e

 M
A

P

 

 

Prank(Pointwise)

Prank(Pairwise)

Com−P
SOLAR−I

SOLAR−II

OSHUMED 2007MQ 2003HP 2004HP

0 50 100 150
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

Number of samples

O
n

li
n

e
 c

u
m

u
la

ti
v
e

 M
A

P

 

 

Prank(Pointwise)

Prank(Pairwise)

Com−P
SOLAR−I

SOLAR−II

0 10 20 30 40 50 60 70 80
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

Number of samples

O
n

li
n

e
 c

u
m

u
la

ti
v
e

 M
A

P

 

 

Prank(Pointwise)

Prank(Pairwise)

Com−P
SOLAR−I

SOLAR−II

0 10 20 30 40 50
0

0.05

0.1

0.15

0.2

0.25

Number of samples

O
n

li
n

e
 c

u
m

u
la

ti
v
e

 M
A

P

 

 

Prank(Pointwise)

Prank(Pairwise)

Com−P
SOLAR−I

SOLAR−II

0 10 20 30 40 50 60 70 80
0

0.02

0.04

0.06

0.08

0.1

0.12

0.14

0.16

0.18

0.2

Number of samples

O
n

li
n

e
 c

u
m

u
la

ti
v
e

 M
A

P

 

 

Prank(Pointwise)

Prank(Pairwise)

Com−P
SOLAR−I

SOLAR−II

2003NP 2004NP 2003TD 2004TD

Figure 2: Evaluation of MAP performances of Online Learning to Rank algorithms

First of all, we found that no single algorithm
beats all the others on all the datasets. Second,
on all the datasets, we found that the SOLAR
algorithms are generally achieve comparable to
the state-of-the-art batch algorithms. On some
datasets, e.g., ”MQ2008”, ”MQ2007” ”HP2003”,
”TD2003”, the proposed online algorithms can
even achieve best performances in terms of MAP.
This encouraging result proves the efficacy of the
proposed algorithms as an efficient and scalable
online solution to train ranking models. Sec-
ond, among the two proposed online algorithms,
SOLAR-II still outperforms SOLAR-I in most
cases, which again shows the importance of ex-
ploiting second-order information.

5.3.2 Scalability Evaluation
This experiment aims to examine the scalability
of the proposed SOLAR algorithms. We com-

0 100 200 300 400 500 600 700 800
10

−1

10
0

10
1

10
2

10
3

10
4

Number of queries received

T
im

e
 c

o
s
t

 

 

SOLAR−I

SOLAR−II

RankSVM

Figure 3: Scalability Evaluation on “2008MQ”

pare it with RankSVM [20], a widely used and ef-
ficient batch algorithm. For implementation, we
adopt the code from [9] 3, which is known to be
the fastest implementation. Figure 3 illustrates the
scalability evaluation on “2008MQ” dataset. From
the results, we observe that SOLAR is much faster
(e.g., 100+ times faster on this dataset)and signifi-
cantly more scalable than RankSVM.

3
http://olivier.chapelle.cc/primal/

1698



Table 3: Evaluation of NDCG of Online vs Batch Learning to Rank algorithms.
Algorithm OHSUMED MQ2007 MQ2008NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10
RankSVM 0.4958 0.4164 0.4140 0.4096 0.4142 0.4438 0.3626 0.4695 0.2279
AdaRank-NDCG 0.5330 0.4673 0.4496 0.3876 0.4102 0.4369 0.3826 0.4821 0.2307
RankBoost 0.4632 0.4494 0.4302 0.4134 0.4183 0.4464 0.3856 0.4666 0.2255
ListNet 0.5326 0.4432 0.4410 0.4002 0.4170 0.4440 0.3754 0.4747 0.2303
SOLAR-I 0.5111 0.4668 0.4497 0.3886 0.4101 0.4361 0.3677 0.4634 0.5086
SOLAR-II 0.5397 0.4690 0.4490 0.4104 0.4149 0.4435 0.3720 0.4771 0.5171

Algorithm HP2003 HP2004 NP2003NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10
RankSVM 0.6933 0.7954 0.8077 0.5733 0.7512 0.7687 0.5800 0.7823 0.8003
AdaRank-NDCG 0.7133 0.8006 0.8050 0.5867 0.7920 0.8057 0.5600 0.7447 0.7672
RankBoost 0.6667 0.8034 0.8171 0.5067 0.7211 0.7428 0.6000 0.7818 0.8068
ListNet 0.7200 0.8298 0.8372 0.6000 0.7694 0.7845 0.5667 0.7843 0.8018
SOLAR-I 0.7067 0.8036 0.8056 0.5467 0.7325 0.7544 0.5800 0.7664 0.7935
SOLAR-II 0.7000 0.8068 0.8137 0.5733 0.7394 0.7640 0.5667 0.7691 0.7917

Algorithm NP2004 TD2003 TD2004NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10 NDCG@1 NDCG@5 NDCG@10
RankSVM 0.5067 0.7957 0.8062 0.3200 0.3621 0.3461 0.4133 0.3240 0.3078
AdaRank-NDCG 0.5067 0.7122 0.7384 0.3600 0.2939 0.3036 0.4267 0.3514 0.3163
RankBoost 0.4267 0.6512 0.6914 0.2800 0.3149 0.3122 0.5067 0.3878 0.3504
ListNet 0.5333 0.7965 0.8128 0.4000 0.3393 0.3484 0.3600 0.3325 0.3175
SOLAR-I 0.5733 0.7814 0.7976 0.2600 0.3060 0.3071 0.3600 0.3119 0.3049
SOLAR-II 0.5733 0.7830 0.8013 0.3000 0.3652 0.3462 0.3333 0.3167 0.3056

6 Conclusions and Future Work
This paper presented SOLAR — a new framework
of Scalable Online Learning Algorithms for Rank-
ing. SOLAR overcomes the limitations of tradi-
tional batch learning to rank for real-world on-
line applications. Our empirical results concluded
that SOLAR algorithms share competitive efficacy
as the state-of-the-art batch algorithms, but enjoy
salient properties which are critical to many appli-
cations. Our future work include (i) extending our
techniques to the framework of listwise learning
to rank; (ii) modifying the framework to handle
learning to ranking with ties; and (iii) conducting
more in-depth analysis and comparisons to other
types of online learning to rank algorithms in di-
verse settings, e.g., partial feedback [41, 22].
Appendix Proof of Theorem 1
Proof. Let ∆t = ‖wt− u‖2−‖wt+1− u‖2, then

T∑
t=1

∆t = ‖u‖2 − ‖wT+1 − u‖2 ≤ ‖u‖2

Further, ∆t can be expressed as:

∆t = −2λtyt(wt − u) · (φ(qit, d1t )− φ(qit, d2t ))
−λt‖φ(qit, d1t )− φ(qit, d2t ))‖2

≥ λt(2`t(wt)− λt − 2`t(u)).
We thus have

‖u‖2 ≥
T∑

t=1

(2λt`t(wt)− λ2t‖φ(qit, d1t )− φ(qit, d2t ))‖2 − 2λt`t(u))

≥
T∑

t=1

(2λt`t(wt)− λ2t‖φ(qit, d1t )− φ(qit, d2t ))‖2 − 2λt`t(u)

−( λt√
2C
−
√

2C`t(u))
2
)

≥
T∑

t=1

(2λt`t(wt)− λ2t (‖φ(qit, d1t )− φ(qit, d2t )‖2 +
1

2C
)− 2C`t(u)2)

=

T∑
t=1

(
`t(wt)

2

‖φ(qit, d1t )− φ(qit, d2t ))‖2 + 12C
− 2C`t(u)2)

Combining the above concludes the theorem.

Appendix B: Proof of Theorem 3

Proof. Using the Cauchy-Schwarz inequality, we

have uTTΣ
−1
T uT ≥

(uTΣ−1T uT )
2

uTΣ−1T u
. Notice that some

inequalities could be easily obtained by extending
the Lemma3, Lemma 4 and Theorem 2 of [14] to
the pairwise setting as follows:

uTΣ−1T uT ≥
M + U −∑t∈M∪U `t(u)

γ
,∑

t∈M∪U

χt
r(χt + γ)

≤ log(det(Σ−1T ))

uTTΣ
−1
T uT =

∑
t∈M∪U

χt
r(χt + γ)

+
∑

t∈M∪U

1− `2t (wt)
χt + γ

,

M + U ≤ a+
∑

t∈M∪U
`t(u)

where a =
√
γ‖u‖2 + utXAu

√
log(det(I +

1

γ
XA)) + U.

We thus have∑
t∈M∪U

`2t (wt)

χt + γ
≤

∑
t∈M∪U

χt

r(χt + γ)
+

∑
t∈M∪U

1

χt + γ

− (M + U −
∑

t∈M∪U `t(u))
2

r2uT Σ−1T u

≤ log(det(Σ−1T )) +
∑

t∈M∪U

1

χt + γ
− a

2

r2uT Σ−1T u

≤ log(det(Σ−1T ))−
a2

r2uT Σ−1T u
+
M + U

k + γ

≤ log(det(Σ−1T ))−
a2

r2uT Σ−1T u
+
a+

∑
t∈M∪U `t(u)

k + γ

Combining the above, we achieve the final result:

Q∑
i=1

Ti∑
t=1

`2t (wt) ≤ K + γ
k + γ

(a+

Q∑
i=1

Ti∑
t=1

`t(u))

+(K + γ)(log det(Σ−1T )−
a2

γ2uTΣ−1T u
)

1699



Acknowledgments

This work was supported by Singapore MOE
tier 1 research grant (C220/MSS14C003) and the
National Nature Science Foundation of China
(61428207).

References

[1] R. A. Baeza-Yates and B. A. Ribeiro-Neto.
Modern Information Retrieval - the concepts
and technology behind search, Second edi-
tion. Pearson Education Ltd., Harlow, Eng-
land, 2011.

[2] C. J. C. Burges, R. Ragno, and Q. V. Le.
Learning to rank with nonsmooth cost func-
tions. In NIPS, pages 193–200, 2006.

[3] C. J. C. Burges, T. Shaked, E. Renshaw,
A. Lazier, M. Deeds, N. Hamilton, and G. N.
Hullender. Learning to rank using gradient
descent. In ICML, pages 89–96, 2005.

[4] Y. Cao, J. Xu, T.-Y. Liu, H. Li, Y. Huang, and
H.-W. Hon. Adapting ranking svm to doc-
ument retrieval. In SIGIR, pages 186–193,
2006.

[5] Z. Cao, T. Qin, T.-Y. Liu, M.-F. Tsai, and
H. Li. Learning to rank: from pairwise ap-
proach to listwise approach. In ICML, pages
129–136, 2007.

[6] N. Cesa-Bianchi, A. Conconi, and C. Gen-
tile. A second-order perceptron algorithm.
SIAM J. Comput., 34(3):640–668, 2005.

[7] O. Chapelle and Y. Chang. Yahoo! learning
to rank challenge overview. In Yahoo! Learn-
ing to Rank Challenge, pages 1–24, 2011.

[8] O. Chapelle, Y. Chang, and T.-Y. Liu. Fu-
ture directions in learning to rank. Journal
of Machine Learning Research - Proceedings
Track, 14:91–100, 2011.

[9] O. Chapelle and S. S. Keerthi. Efficient al-
gorithms for ranking with svms. Inf. Retr.,
13(3):201–215, 2010.

[10] G. Chechik, V. Sharma, U. Shalit, and
S. Bengio. Large scale online learning of
image similarity through ranking. J. Mach.
Learn. Res., 11:1109–1135, Mar. 2010.

[11] W. Chen, T.-Y. Liu, Y. Lan, Z. Ma, and
H. Li. Ranking measures and loss functions
in learning to rank. In NIPS, pages 315–323,
2009.

[12] W. S. Cooper, F. C. Gey, and D. P. Dabney.
Probabilistic retrieval based on staged logis-
tic regression. In SIGIR’98, pages 198–210.
ACM, 1992.

[13] K. Crammer, O. Dekel, J. Keshet, S. Shalev-
Shwartz, and Y. Singer. Online passive-
aggressive algorithms. Journal of Machine
Learning Research, 7:551–585, 2006.

[14] K. Crammer, A. Kulesza, and M. Dredze.
Adaptive regularization of weight vectors. In
NIPS, pages 414–422, 2009.

[15] K. Crammer and Y. Singer. Pranking with
ranking. In NIPS, pages 641–647, 2001.

[16] M. Dredze, K. Crammer, and F. Pereira.
Confidence-weighted linear classification. In
ICML, pages 264–271, 2008.

[17] J. L. Elsas, V. R. Carvalho, and J. G. Car-
bonell. Fast learning of document ranking
functions with the committee perceptron. In
WSDM, pages 55–64, 2008.

[18] Y. Freund, R. D. Iyer, R. E. Schapire, and
Y. Singer. An efficient boosting algorithm for
combining preferences. Journal of Machine
Learning Research, 4:933–969, 2003.

[19] F. C. Gey. Inferring probability of relevance
using the method of logistic regression. In In
Proceedings of ACM SIGIR’94, pages 222–
231. Springer-Verlag, 1994.

[20] R. Herbrich, T. Graepel, and K. Obermayer.
Large margin rank boundaries for ordinal re-
gression. In Advances in Large Margin Clas-
sifiers, pages 115–132, 2000.

[21] K. Hofmann. Fast and reliable online learn-
ing to rank for information retrieval. Phd the-
sis, University of Amsterdam, Amsterdam,
05/2013 2013.

[22] K. Hofmann, A. Schuth, S. Whiteson, and
M. de Rijke. Reusing historical interaction
data for faster online learning to rank for
ir. In Proceedings of the sixth ACM in-
ternational conference on Web search and
data mining, WSDM, pages 183–192, Rome,
Italy, 2013.

[23] K. Hofmann, S. Whiteson, and M. Rijke.
Balancing exploration and exploitation in
listwise and pairwise online learning to rank
for information retrieval. Inf. Retr., 16(1):63–
90, Feb. 2013.

1700



[24] S. C. Hoi, J. Wang, and P. Zhao. Li-
bol: A library for online learning algorithms.
The Journal of Machine Learning Research,
15(1):495–499, 2014.

[25] K. Järvelin and J. Kekäläinen. Ir evaluation
methods for retrieving highly relevant docu-
ments. In SIGIR, pages 41–48, 2000.

[26] T. Joachims. Optimizing search engines us-
ing clickthrough data. In KDD, pages 133–
142, 2002.

[27] H. Li. Learning to rank for information re-
trieval and natural language processing. Syn-
thesis Lectures on Human Language Tech-
nologies, 7(3):1–121, 2014.

[28] P. Li, C. J. C. Burges, and Q. Wu. Mcrank:
Learning to rank using multiple classification
and gradient boosting. In NIPS, 2007.

[29] T.-Y. Liu. Learning to Rank for Information
Retrieval. Springer, 2011.

[30] R. Nallapati. Discriminative models for in-
formation retrieval. In SIGIR’04, pages 64–
71, Sheffield, United Kingdom, 2004.

[31] T. Qin, T.-Y. Liu, J. Xu, and H. Li. Letor: A
benchmark collection for research on learn-
ing to rank for information retrieval. Inf.
Retr., 13(4):346–374, 2010.

[32] F. Rosenblatt. The perceptron: A probabilis-
tic model for information storage and organi-
zation in the brain. Psych. Rev., 7:551–585,
1958.

[33] M. Surdeanu, M. Ciaramita, and
H. Zaragoza. Learning to rank answers
on large online qa collections. In ACL, pages
719–727, 2008.

[34] M. Taylor, J. Guiver, S. Robertson, and
T. Minka. Softrank: optimizing non-smooth
rank metrics. In Proceedings of the in-
ternational conference on Web search and
web data mining, WSDM, pages 77–86, Palo
Alto, California, USA, 2008. ACM.

[35] M.-F. Tsai, T.-Y. Liu, T. Qin, H.-H. Chen,
and W.-Y. Ma. Frank: a ranking method with
fidelity loss. In SIGIR’07, pages 383–390,
Amsterdam, The Netherlands, 2007.

[36] E. Tsivtsivadze, K. Hoffman, and T. Hes-
kes. Large scale co-regularized ranking.
In J. Fürnkranz and E. Hüllermeier, edi-
tors, ECAI Workshop on Preference Learn-
ing, 2012.

[37] H. Valizadegan, R. Jin, R. Zhang, and J. Mao.
Learning to rank by optimizing ndcg mea-
sure. In NIPS, pages 1883–1891, 2009.

[38] F. Xia, T.-Y. Liu, J. Wang, W. Zhang, and
H. Li. Listwise approach to learning to rank:
theory and algorithm. In ICML’08, pages
1192–1199, Helsinki, Finland, 2008.

[39] J. Xu and H. Li. Adarank: a boosting al-
gorithm for information retrieval. In SIGIR,
pages 391–398, 2007.

[40] J. Xu, T.-Y. Liu, M. Lu, H. Li, and W.-Y. Ma.
Directly optimizing evaluation measures in
learning to rank. In SIGIR’08, pages 107–
114, Singapore, Singapore, 2008. ACM.

[41] Y. Yue, J. Broder, R. Kleinberg, and
T. Joachims. The k-armed dueling bandits
problem. J. Comput. Syst. Sci., 78(5):1538–
1556, 2012.

[42] Y. Yue, T. Finley, F. Radlinski, and
T. Joachims. A support vector method for
optimizing average precision. In SIGIR’07,
pages 271–278, Amsterdam, The Nether-
lands, 2007. ACM.

[43] Z. Zheng, K. Chen, G. Sun, and H. Zha.
A regression framework for learning rank-
ing functions using relative relevance judg-
ments. In SIGIR’07, pages 287–294, Ams-
terdam, The Netherlands, 2007.

1701


