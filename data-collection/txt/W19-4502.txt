



















































A Cascade Model for Proposition Extraction in Argumentation


Proceedings of the 6th Workshop on Argument Mining, pages 11–24
Florence, Italy, August 1, 2019. c©2019 Association for Computational Linguistics

11

A Cascade Model for Proposition Extraction in Argumentation

Yohan Jo1, Jacky Visser2, Chris Reed2, Eduard Hovy1
1Language Technologies Institute, Carnegie Mellon University

2Centre for Argument Technology, University of Dundee
yohanj@cs.cmu.edu, j.visser@dundee.ac.uk,

c.a.reed@dundee.ac.uk, hovy@cmu.edu

Abstract
We present a model to tackle a fundamental
but understudied problem in computational ar-
gumentation: proposition extraction. Propo-
sitions are the basic units of an argument and
the primary building blocks of most argument
mining systems. However, they are usually
substituted by argumentative discourse units
obtained via surface-level text segmentation,
which may yield text segments that lack se-
mantic information necessary for subsequent
argument mining processes. In contrast, our
cascade model aims to extract complete propo-
sitions by handling anaphora resolution, text
segmentation, reported speech, questions, im-
peratives, missing subjects, and revision. We
formulate each task as a computational prob-
lem and test various models using a corpus of
the 2016 U.S. presidential debates. We show
promising performance for some tasks and dis-
cuss main challenges in proposition extraction.

1 Introduction

Most argument mining models for identifying the
argumentative structure of a text build upon ele-
mentary text spans that serve argumentative func-
tions, such as premise and conclusion. In argu-
mentation theory, it is commonly accepted that
these building blocks are propositions (Black-
burn, 2016), i.e., statements that are either true
or false. Despite the foundational role of propo-
sitions, however, proposition extraction from text
has been little studied in computational argumen-
tation. Instead, most models rely on argumentative
discourse units (ADUs) obtained by surface-level
text segmentation (Stede et al., 2016; Al Khatib
et al., 2016). In what follows, we discuss limita-
tions of ADUs that potentially impinge upon sub-
sequent argument mining processes, and then de-
scribe our approach.

One limitation of ADUs is that they may lack
important semantic information, such as the ref-

erents of anaphors and the subject of an incom-
plete sentence, necessary for subsequent argu-
ment mining steps. For example, for two consec-
utive text segments Alice complained to Bob and
He is upset, if we do not know he refers to Bob, it
would be confusing whether the first segment sup-
ports the second or vice versa. In another exam-
ple, suppose Alice was faithful to Bob, keeping the
secret is split into two propositions, each associ-
ated with the main clause and the adverbial partici-
ple, respectively. While mere text segmentation
leaves the subject of the participle (Alice) miss-
ing, tracing and reconstructing the subject makes
it clear that the participle supports the main clause.
As illustrated in these examples, anaphora reso-
lution and subject reconstruction recover seman-
tic information that has potential benefits for argu-
ment mining systems.

Moreover, ADUs may completely miss implicit
propositions. For instance, questions and impera-
tives do not convey explicit propositions, but they
are important argumentative components that of-
ten imply propositional content in dialogical ar-
gumentation. Suppose an arguer asks, why would
you waste your money on tax?, and someone re-
sponds, tax is a waste of money. It is not straight-
forward for an argument mining system to tell
whether the response agrees or disagrees with the
arguer, without knowing what is implied by the
question. Implicit propositions occur in reported
speech as well. Suppose an arguer says, the doctor
said we need more magnesium. The arguer is not
only claiming the report event having happened,
but also bringing the content of the doctor’s speech
as a proposition into the argumentation structure
or even may be asserting it using authority. These
examples show the significance of recovering im-
plicit propositions for argument mining systems.

To overcome these limitations, we present a
cascade model that aims to extract propositions



12

from argumentative dialogues, with important se-
mantic information and implicit propositional con-
tent recovered. Our model consists of 7 mod-
ules, namely, anaphora resolution, locution extrac-
tion, reported speech, question, imperative, sub-
ject reconstruction, and revision (Figure 2). For
each module, we formulate the task as a compu-
tational problem and test various models to solve
it, except for the question and imperative mod-
ules, for which we present experimental sketches.
Our analyses and evaluation are based on the tran-
scripts of the 2016 U.S. presidential debates and
reaction on social media that are manually anno-
tated with propositions (Visser et al., 2019). Our
contributions are three-fold.

1. We introduce the problem of proposition ex-
traction as seven tasks.

2. We present various models to tackle each task
and evaluate performance.

3. We analyze challenges facing our computa-
tional methods and suggest future directions.

For the remainder of the paper, we first review
prior work on ADU segmentation and a theoretical
framework for obtaining propositions from ADUs
(§2). We then explain the annotated data of propo-
sitions (§3). Next, we describe our cascade model
(§4) and formulation of each task, along with ex-
periments (§5). We conclude the paper by dis-
cussing the challenges and future directions (§6).

2 Background

In computational argumentation, the basic unit of
an argument is often called an argumentative dis-
course unit (ADU). In this section, we first review
how existing studies define and obtain ADUs from
text, and then some theoretical framework to ob-
tain propositions from ADUs.

2.1 From Text to ADUs

In most studies, ADUs are obtained via text seg-
mentation. While some studies leave the choice of
the boundary of an ADU to the annotator’s judg-
ment (Stab and Gurevych, 2014), many studies
employ a set of syntactic rules as a basis. For in-
stance, an ADU can be as fine-grained as a phrase
that plays a discrete argumentative function (Stede
et al., 2016). In other cases, an ADU may be a
clause (Peldszus and Stede, 2015) or a series of
clauses that must include a subject, a verb, and an
object if necessary (Al Khatib et al., 2016).

Based on annotated ADUs, some studies have

If I'm our nominee, how is Hillary Clinton gonna lecture me about living paycheck 
to paycheck? I was raised paycheck to paycheck.

RUBIO: If I'm our nominee, how is 
Hillary Clinton gonna lecture me 
about living paycheck to paycheck

RUBIO: I was raised paycheck to 
paycheck

If RUBIO is our nominee, CLINTON 
cannot lecture RUBIO about living 
paycheck to paycheck

RUBIO was raised paycheck to 
paycheck

Assertive 
Questioning

Asserting

Arguing Default TransitionDefault Inference

Figure 1: A snippet of the US2016 corpus. The top text
is the original utterance. The blue boxes on the right are
locutions, which are also highlighted with green on the
utterance. The blue boxes on the left are propositions
anchored in the locutions, via illocutionary acts (yellow
boxes).

proposed methods for automatically segmenting
ADUs using machine learning. This task is com-
monly formulated as tagging each word in the text
as either the beginning, inside, or outside of an
ADU (BIO tagging). The tagging has been incor-
porated into an end-to-end argument mining (Eger
et al., 2017) or conducted separately on various
domains (Ajjour et al., 2017). Instead of tagging,
a retrieval approach has also been used, where
candidate ADUs are generated and the best is re-
trieved (Persing and Ng, 2016).

All these approaches to ADU segmentation
share most of the concerns mentioned in Section 1.
For better-informed argument mining, we need to
go further to obtain propositions from ADUs, and
thus a relevant framework will be discussed in the
following section.

2.2 From ADUs to Propositions
Following Speech Act Theory (Austin, 1962;
Searle, 1969), the connection between text seg-
ments and propositions can be modeled as illocu-
tionary acts: the application of particular commu-
nicative intentions to propositional contents – e.g.,
asserting that a proposition is true, or questioning
whether it is true. Focusing on argumentatively
relevant speech acts (van Eemeren and Grooten-
dorst, 1984), Inference Anchoring Theory (IAT)
(Reed and Budzynska, 2011) explains how propo-
sitional contents and the argumentative relations
between them are anchored in the expressed locu-
tions by means of illocutionary connections.

IAT has been applied to annotate argumentative
dialogues of various kinds, including the corpus
used in this paper (Section 3). IAT annotation
comprises, amongst other things, segmenting the
original text into locutions1, identifying the illo-

1Analogous to ADUs. We use the terms interchangeably.



13

Locution1

Y

SpeechIdentification Speech

N

Declarative

Revision

Propositions

Y

N

DeclarativeImperativeTransformY

QuestionTransform

N

Locution2

LocutionExtraction

IsReportedSpeech?

IsQuestion?

IsImperative?

AnaphoraResolution

Anaphora-resolved utterance

Utterance of a speaker

SubjectReconstruction

Alice: Bob stopped by my office and complained, ``Why is the company not launching 
the new service?'' I think I have explained to him already.
Bob stopped by Alice's office and complained, ``Why is the company not launching 
the new service?'' Alice think Alice have explained to Bob already.

[L1] Bob stopped by Alice's office and [L2] complained, ``Why is the company not 
launching the new service?'' Alice think [L3] Alice have explained to Bob already.

[L2] complained, ``Why is the company not launching the new service?''

[L2'] The company should launch the new service

[L2] Bob complained, ``Why is the company not launching the new service?''

[L3] Alice has explained to Bob already

[L1] Bob stopped by Alice's office  [L2] Bob complained, ``Why is the company not launching the new service?''

[L2'] The company should launch the new service  [L3] Alice has explained to Bob already

Figure 2: Cascade model of proposition extraction. The input is each utterance, blue boxes are individual
(sub)modules and orange circles are the outputs of the modules. We made up the utterance used in the figure
in order to cover the functions of most modules.

cutionary force instantiated by the locution, and
reconstructing its propositional content (an exam-
ple snippet shown in Figure 1). Each locution
generally conveys a propositional content. Con-
juncts conjoined by a conjunction and conditional
clauses may be separated if they each fulfill a dis-
crete argumentative function. In addition, punctu-
ation, discourse indicators, and epistemic modali-
ties (e.g., I think) should be excluded. For propo-
sitions, anaphoric references are typically recon-
structed, resulting in full grammatical sentences
understandable without context.

3 Data

We use the US2016 corpus (Visser et al., 2019),
which contains transcripts of televized debates for
the 2016 U.S. presidential election and reaction to
the debates on Reddit. All dialogues have been
manually segmented and annotated with locutions,
illocutionary connections, and propositions based
on IAT (Reed et al., 2016) (Figure 1). The corpus
was annotated by 4 annotators, yielding an overall
Cohen’s κ of 0.610 (considered substantial agree-
ment). We downloaded the annotations from the
corpus webpage and separately scraped the origi-
nal dialogues.

For data preparation, we aligned each locution
with the original dialogue; e.g., in Figure 1, the lo-
cutions (in the right blue boxes) are aligned with
the original utterance (at the top) using text match-
ing. This allows us to build a model to extract
locutions from utterances, and propositions from

locutions. As our model handles reported speech
and questions, we need additional processing to
identify those locutions. In the corpus, a locu-
tion of reported speech (e.g., S said P) is anno-
tated with an intermediate locution, along with the
speaker (S) and the content of speech (P). The con-
tent of speech, in turn, becomes the proposition
of this locution. Locutions of questions are con-
nected with their propositions via four illocution-
ary acts: pure/assertive/challenge/directive ques-
tioning. The processed data includes 2,672 utter-
ances and 8,008 locutions (278 reported speech
and 565 questions).

4 Model

Our cascade model takes a speaker’s utterance as
input, runs seven modules, and outputs a set of
propositions extracted from the utterance. Figure
2 shows the model structure and an example utter-
ance processed throughout. The functions of indi-
vidual modules are as follows:

1. Anaphora resolution: Replace pronoun
anaphors with their referents.

2. Locution extraction: Extract locutions
(ADUs) from the utterance.

3. Reported speech: Determine if the locution
is reported speech; if so, identify the text seg-
ment representing the content of speech.

4. Question: Determine if the locution or
speech content is a question; if so, extract its
propositional content.

5. Imperative: Determine if the locution or



14

speech content is an imperative; if so, extract
its propositional content.

6. Subject reconstruction: Reconstruct the
missing subject, if any, of the locution or
speech content.

7. Revision: Make additional adjustments nec-
essary for final propositions.

5 Method

In this section, we describe how to formulate the
task of each module as a computational problem,
and present various approaches with their perfor-
mance. Each module is evaluated separately on
the ground truth data, instead of using the result of
the previous module. This setting prevents error
propagation and helps to evaluate the performance
of each module more accurately. Some methods
we use are based on machine learning and thus
requires a split of training and test sets. Hence,
we randomly split the entire corpus into five folds
and conduct cross validation with the same folds
throughout the paper.

Extensive experiments are focused on anaphora
resolution, locution extraction, subject reconstruc-
tion, and revision. For the other modules, we
present baseline models or experimental sketches,
leaving room for improvement for future work.

5.1 Module: AnaphoraResolution

Anaphora resolution is based on Stanford
CoreNLP 3.8.0. Yet, blindly applying it induces
several challenges, such as incorrect resolution of
speakers/hearers (this information may be often
missing in the text), resolution of non-pronouns,
and errors inherent in the tool. To rectify these
challenges, we decompose the task into the
following subtasks.
• 1st-person singular: Replace I, my, me,

mine with the speaker’s name.
• 2nd-person singular: Replace you, your,

yours with the previous turn’s speaker name.
• 3rd-person singular gender: Resolve he,

his, him, she, her, hers using CoreNLP.
• 3rd-person singular gender-neutral: Re-

solve it, that using CoreNLP.
• 3rd-person plural: Resolve they, their, them,

theirs using CoreNLP.
Inaccurate anaphora resolution can rather distort
the original meaning of text. Hence, the goal here
is to find the best combination of the subtasks. The
first two subtasks are applied only to TV debates,

BLEU Dep Dep-SO Noun

Locution (no resol) 69.3 .651 .558 .714
CoreNLP 62.8 .617 .538 .704
1S 70.1 .657 .589 .748
1S+2S 69.7 .655 .583 .746
1S+3SG 69.3 .654 .601 .757
1S+3SG+3SN 68.5 .649 .592 .756

Table 1: Performance of anaphora resolution. (1S:
1st-person singular, 2S: 2nd-person singular, 3SG:
3rd-person singular gender, 3SN: 3rd-person singular
gender-neutral, Dep: Dependency, Dep-SO: Depen-
dency for subjects and objects.)

as Reddit user names have not been resolved in the
corpus. All possessive pronouns are replaced with
references suffixed with ’s (e.g., his→ Trump’s).

For evaluation, we assume that effective
anaphora resolution would make a locution more
“similar” to the annotated proposition. Hence,
we compare the similarities between a locution
and the annotated proposition before and after
anaphora resolution, using the following metrics:
• BLEU: Generic string similarity based on n-

grams (n = 1, 2, 3, 4).
• F1-score of dependency tuples: String sim-

ilarity based on dependencies. Less sensitive
than BLEU to the exact locations of words.
• F1-score of nsubj/dobj dependency tuples:

Rough semantic information pieces repre-
senting who did what to whom/what.
• F1-score of nouns: How accurately

anaphora resolution retrieves nouns (as our
anaphora resolution replaces only nouns).

Result
As shown in Table 1, blindly applying CoreNLP
(row 2) significantly hurts all similarity measures
(compared to row 1). In contrast, speaker resolu-
tion (row 3) plays a key role in improving all mea-
sures over original locutions, especially seman-
tic information (subject/object) and nouns. Addi-
tional resolution of hearers (row 4) does not help,
as you is used in a more general way than referring
specifically to the hearer.

Resolving 3rd-person gender pronouns (row 5)
further improves performance for semantic infor-
mation and noun retrieval over speaker resolution,
at the expense of slightly lower BLEU and depen-
dency similarites. Additional resolution of it, its,
and that turns out to rather hurt performance.

For argument mining, it may be desired to re-
solve as many anaphors as possible unless the



15

original meaning is significantly hurt, because
pronouns provide little information for identify-
ing propositional relations. Hence, we conclude
that resolution of speakers and 3rd-person gender
pronouns is ideal for this module, and the subse-
quent modules use the result of this configuration.
However, we find that resolution of 3rd-person
gender-neutral pronouns is critical, as will be dis-
cussed in Section 5.8, and eventually they should
be resolved depending on the availability of proper
anaphora resolution tools.

5.2 Module: LocutionExtraction
For each utterance with anaphors resolved, the
LocutionExtraction module identifies locutions,
from which proposition(s) will be extracted. This
task is almost identical to ADU segmentation, and
several methods have already been proposed (Sec-
tion 2.1). Beating prior models for this task is
beyond the scope of this paper; rather, we focus
on understanding what causes confusion for locu-
tion boundaries. Following the convention for this
task (Eger et al., 2017; Ajjour et al., 2017), the task
is formulated as tagging each word with B/I/O (be-
ginning/inside/outside of a locution).

We explore the state-of-the-art BiLSTM model
(Ajjour) (Ajjour et al., 2017), as well as a regular
CRF (R-CRF) and BiLSTM-CRF (Huang et al.,
2015). A CRF showed strong performance for
cross-domain segmentation, and BiLSTM-CRF is
an extension of CRFs, where emission scores are
calculated through BiLSTM. For all models, we
use the following features, adopted from or in-
formed by the prior work (Ajjour et al., 2017):
• word: Current word (i.e., word index for R-

CRF and pre-trained GloVe.840B.300d word
embeddings for BiLSTM-CRF and Ajjour).
• pos: Part-of-speech tag of the current word.
• ne: Named entity type of the current word.
• prev 1gram: Previous word of the current

word, as conjunctions and discourse markers
are good indicators of locution boundaries.
(R-CRF only, as BiLSTM considers context.)
• bos/eos: Indicator of whether the current

word marks the beginning/end of a sentence,
as locution boundaries are often restricted by
sentence boundaries.
• boc/eoc: Indicator of whether the current

word marks the beginning/end of a clause,
as locution boundaries are closely related to
clause boundaries. We obtain clauses from
the constituency parse of the sentence, taking

R-CRF BiLSTM-CRF Ajjour

.788 .789 .794

Table 2: F1-score of locution extraction.

1st locution1 2nd locution

Subordinate clauses 7% 6%
Adverb phrases 4% 8%
Particle phrases 1% 4%
Yes/no 2% -
Relative clauses - 5%

Table 3: Breakdown of locution types that are separated
by a comma or that are back-to-back (total 293 pairs).

phrases tagged with S. For nested clauses, we
take the deepest clauses to avoid overlap.

The model settings are explained in Appendix A.
We evaluate the models using the macro F1-

score across the BIO tags with 5-fold CV.

Result
Ajjour et al. (2017)’s model outperforms the CRF-
based models (Table 2). The model tends to under-
produce locutions (7,767 compared to 8,008 an-
notated), i.e., produce coarse locutions, missing
signals for splitting them further into smaller lo-
cutions. To examine those signals, we gathered
extracted locutions that overlap with two consec-
utive annotated locutions, and counted the words
between the two locutions (Table 9 in Appendix).

Frequently, the model failed to make a split at a
comma (31%) or between locutions that are back-
to-back without any separator in between (10%).
In the majority of these cases, the locutions are
two independent clauses, indicating that the model
needs a more robust mechanism to make use of
clause boundaries. Although not very common, a
locution also serves as a subordinate clause, ad-
verb phrase, particle phrase, yes/no answer, or rel-
ative clause (Table 3). Deciding whether to sepa-
rate a subordinate clause from the main clause is
not trivial. For instance, if- and when-clauses, the
most common subordinate clauses in the analysis,
are separated off or attached to the main clause
depending on the strength of their dependency,
which is often vague. If we are to build a system
to make this decision automatically, we may con-
sider the truth value of the subordinate clause and
whether it is idiomatic.

Other frequent separators include conjunctions
and (21%) and but (6%). As in the case above, the



16

Regex Prec Recl F1

say + said .404 .363 .383
Reporting marks .576 .259 .357
Other reporting verbs .579 .040 .074

All above .442 .590 .505

Table 4: Accuracy of reported speech detection.

model sometimes has difficulty deciding whether
to split conjoined phrases and clauses.

5.3 Module: ReportedSpeech

A locution extracted above is examined by the Is-
ReportedSpeech submodule to decide if it is re-
ported speech. If so, the content of speech is iden-
tified by the SpeechIdentification submodule.

5.3.1 Submodule: IsReportedSpeech

To detect if a locution is reported speech, we use
11 regular expressions that capture the existence of
reporting verbs (said, say, called, blamed, argued,
insisted) and reporting marks (“, :). A matched
locution is classified as reported speech.

Result

As shown in Table 4, the method achieves an F1-
score of 0.505, which reveals the difficulty of de-
tecting reported speech (the full list of patterns and
their accuracy are in Table 10 in Appendix). High-
performing patterns capture say/said and reporting
marks; other reporting verbs have too low recall.
Interestingly, regular expressions achieve not only
low recall but also low precision. To see why, we
examined false-positives made by said and open-
ing quotation marks, and found this task quite
challenging indeed. Two big challenges are detect-
ing whether the report actually happened and if the
content of speech is mentioned, as in the following
examples (underlined text increases complexity):

1. Event factuality: I thought reddit said that
Paul was supposed to be the rational one
here; He never even said that he didn’t do it

2. Mention of speech content: He said that
the second time anyway; I mean,
“track the terrorists and not the citizens” is
full of so many holes

These challenges suggest that we need more so-
phisticated features to identify event factuality and
the mention of speech content.

Tregex F1 Coverage

Reporting verbs .234 5%
Reporting marks .371 20%

All above .395 23%

Table 5: Accuracy of speech identification.

5.3.2 Submodule: SpeechIdentification

Speech content is important to identify, as it often
contributes to the argumentation structure (e.g., as
part of an authority claim). We formulate this task
as BIO tagging, as in locution extraction. Individ-
ual words in each locution are tagged with B/I/O
based on the best alignment between the locution
and its content proposition (Section 3).

To identify speech content, we use regular ex-
pressions matched to constituency parse trees. A
speech is assumed to be a clause, preceded by a
reporting verb (said, say, says, claim.*, argue.*,
insist.*) or reporting mark (“, :). Matching is con-
ducted using Tregex in Stanford CoreNLP.

For evaluation, a matched clause is tagged with
B and I, and the other words with O. We compute
the macro F1-score of BIO tags and the percentage
of locutions matched by patterns (coverage).

Result

As shown in Table 5, the Tregex method has a low
F1-score, mostly due to a poor coverage (the full
list of patterns and their accuracy are in Table 11 in
Appendix). The low coverage stems from several
causes, including:
• Speech content may not be a complete clause

(e.g., you say charge the banks more), or the
parser fails to recognize it as a clause.
• Speech content is signaled by various verbs

(e.g., talking about, I’m hearing).
• A reporting verb may be missing. This usu-

ally happens when speech content and main
clause are segmented into separate locutions.

We believe that various signals of speech content
may be captured better by machine learning mod-
els, increasing overall performance.

5.4 Module: Question

A locution or speech content is examined by the
IsQuestion submodule to decide if it is a question.
If so, it is transformed to its propositional content
by the QuestionTransformation submodule.



17

Regex Prec Recl F1

Question mark .751 .938 .834
Initiating words .514 .499 .506

All above .588 .972 .733

Table 6: Accuracy of question detection.

5.4.1 Submodule: IsQuestion
To detect if an input text is a question, we use reg-
ular expressions that capture if the enclosing sen-
tence has a question mark or begins with words
that often initiate a question (e.g., how, do) (the
full list of patterns is in Table 12 in Appendix).
The reason for matching the patterns to the entire
sentence is that a question mark is often excluded
from a locution.

Result
As shown in Table 6, a question mark by itself is
strongly indicative of a question and has high re-
call. While it has fair precision, there exist some
confusing false-positives, including:

1. A question merely for emphasis. (e.g., It also
could be somebody sitting on their bed that
weighs 400 pounds, ok?)

2. Reported question. (e.g., You say to yourself,
why didn’t they make the right deal?)

3. A question for expressing confusion. (e.g.,
Bernie?... Come again?)

For questions without a question mark, the
regular expressions for question-initiating words
increase recall but significantly hurts precision.
Some of these words are used as a subordi-
nate conjunction (when) or as a relative pronoun
(which). The low precision of some words is due
to incomplete sentences with missing subject I
(e.g., Could barely understand). The error cases
show that highly accurate detection of a question
requires a combination of several factors.

5.5 Submodule: QuestionTransformation

We found no prior work that addresses transform-
ing questions into propositions, although some
work identifies different types of questions (Zhang
et al., 2017). For this submodule, we only describe
the task with examples in the corpus, without mod-
els. In the corpus, questions are associated with
four illocutionary acts: pure, assertive, challenge,
and directive. Pure questions assume no assertion
and thus may be transformed to a statement under-
specified in the semantic dimension questioned,

optionally containing a placeholder xxx:
• Who is Chafee? → Chafee is xxx
• Do all lives matter? → All lives do / do not

matter
In contrast, assertive and challenge questions have
an assertive force. The difference between them is
whether or not a question is to challenge another
argument.
• What does that say about your ability to han-

dle challenging crises as president? → Clin-
ton does not have the ability to handle chal-
lenging crises as president. (assertive)
• What has he not answered? → He has an-

swered questions (challenge)
Lastly, directive questions have imperative mood:
• Any specific examples? → Provide any spe-

cific examples
We may explore various approaches, such as hand-
crafted rules and seq2seq models, in future work.

5.6 Module: Imperative
There is neither consensus nor common practice
on how to extract propositional content from im-
peratives. Accordingly, the corpus had no guide-
lines for imperatives, and most imperatives have
not been modified. Yet, some imperatives have
been modified according to the annotators’ own
judgment, with examples including:
• Raise the minimum wage → The minimum

wage should be raised
• Let me address college affordability→ Clin-

ton would like to address college affordability
• Look at the mess we’re in→ We’re in a mess

We argue that more analysis would be useful to
understand when and how an imperative can be
systematically transformed to a proposition.

5.7 Module: SubjectReconstruction
A locution or speech content may miss its subject
due to segmentation. Hence, the SubjectRecon-
struction module aims to reconstruct the subject
if it exists within the same sentence. We first trace
the subject of each verb in every sentence, and
then reconstruct the subject (along with auxiliary
verbs) of a segmented text that begins with a verb
whose subject is outside the text.

We trace the subject of a verb using the ba-
sic dependency relations (from CoreNLP) as fol-
lows. When a verb has no subject relation with
any words, we move to the word that is con-
nected with the current verb through a depen-
dency relation of the types: conjunct (conj), auxil-



18

Prec BLEU-Reconst BLEU-Locution

.714 62.6 59.1

(a) Performance of subject reconstruction.

Reason %

Ill-formed sentence 25%
No subject in the sentence 25%
Trace mistake 20%
Complex sentence 10%
Phrasal/clausal subject 10%
Wrong antecedents of relative pronouns 10%

(b) Reasons for subject identification errors.

Table 7: Results of subject identification.

iary (aux/auxpass), copula (cop), and open clausal
complement (xcomp). The intuition is that this
new word and the current word are likely to have
the same subject. We repeat this process until
we find a subject or no more move is available.
The following dependency parse illustrates the in-
tuition, i.e., why wanted and send connected with
xcomp have the same subject. Examples of the
other relations are in Appendix B.

Sometimes a verb’s direct subject is a relative
pronoun, in which case we move to the word mod-
ified by the verb via the acl:relcl relation. How-
ever, which may often refer to a phrase or a clause,
and this method may not be able to capture that.

Result
We identified 96 locutions (1.2% of locutions) be-
ginning with a verb whose subject is identified to
be in the sentence yet outside the locution. We
focus on 73% of them whose subjects are recov-
ered in annotated propositions. Note that anno-
tated subjects can be lexically different from the
ones that are correctly identified by our method,
due to imperfect anaphora resolution. Hence, our
evaluation is based on manual comparison, check-
ing if identified subjects and annotated subjects re-
fer to the same thing/person.

As shown in Table 7a, the method identified
subjects correctly for 71% of the locutions. Ac-
cordingly, the BLEU score improved by 3.5, com-
pared to mere locutions. Table 7b breaks down
the reasons for errors. Sometimes the tracing
method made a mistake (20%) or failed to capture
a phrasal/clausal subject (10%). However, more

commonly, CoreNLP could not properly handle
sentences that are ill-formed (25%), missing a sub-
ject (25%), or too long/complex (10%). In some
cases, it incorrectly identified the antecedents of
relative pronouns (10%).

There exists other work that addresses recover-
ing elided materials in sentences using dependen-
cies (Schuster et al., 2018). Following some of
the work, it would be an interesting direction to
explore a richer set of dependency relations, such
as the enhanced dependencies (Schuster and Man-
ning, 2016).

5.8 Module: Revision
While the previous modules handle major tasks,
a processed locution may still need additional ad-
justments, including grammar correction. Hence,
the Revision module makes adjustments to a pro-
cessed locution and outputs proposition(s). This
task is formulated as a seq2seq problem, i.e., a
model automatically learns and decides how to
change the input, based on the data.

We explore two models: standard attention (Lu-
ong et al., 2015) and copy mechanism. Both
encode an input text using BiLSTM and decode
proposition(s) using LSTM. The attention model
computes the probability of a word being gen-
erated, using attention over the encoder’s hidden
states. It requires a lot of training data, whereas
we already know that most input words remain un-
changed. The copy model, on the other hand, de-
cides internally whether to copy an input word or
generate a new word. Informed by existing copy
mechanisms (Gu et al., 2016; Allamanis et al.,
2016), we developed a slight variant that worked
better on this task. The model and parameters are
explained in detail in Appendix C.

We use two evaluation metrics: BLEU and ex-
act match (percentage of outputs identical to the
annotated propositions). We exclude locutions of
reported speech and questions, to better focus on
this module’s performance. The baseline is to treat
each locution as a proposition without modifica-
tion. Accuracy is based on 5-fold CV.

Result
As shown in Table 8, the baseline (row 1) al-
ready achieves high performance, because locu-
tions are often very similar to the propositions ex-
tracted from them unless they are reported speech
or questions. For this reason, the attention model
(row 2) performs poorly, as it tends to make many



19

BLEU Exact

Locution 75.5 .473
Attention 47.2 .124
Copy 76.2 .493
Copy (short) 76.6 .501

Table 8: Performance of revision.

unnecessary adjustments to input locutions. The
copy model (row 3) performs significantly better
than the attention model, but sometimes it could
not handle long input texts and generated irrele-
vant content toward the end of an output. Leaving
long input texts (25+ words) unmodified (row 4)
slightly improved performance. Overall, the im-
provement over the baseline is rather modest.

The most notable and useful role of the copy
model is correcting a verb case that was left incor-
rect due to anaphora resolution (e.g., cooper want
to → cooper wants to, webb have had → webb
has had). This behavior is quite desirable. The
model also sometimes removed non-propositional
content and changed a person’s first name to the
full name as reflected in annotations. In general,
the roles of the model remain lexical conversion
rather than semantic conversion.

We found that the differences between gen-
erated and annotated propositions are derived
mainly from unresolved non-personal anaphors
(e.g., it, this, that). Furthermore, annotators some-
times insert omitted verb phrases (e.g., You should.
→ You should clinge to capitalism.; not hard to do
→ not hard to dominate). Such semantic informa-
tion is not recovered by the current copy model.

6 Conclusion

Our decomposition of the proposition extraction
task has yielded that: (i) anaphora resolution is
crucial for recovering the semantic information
of propositions, and the main bottleneck is to re-
solve 2nd-person singular and 3rd-person gender-
neutral pronouns; (ii) locution boundaries are of-
ten confused around clause boundaries; (iii) de-
tecting reported speech and speech content suffers
poor accuracy with pattern matching. These tasks,
along with question detection, reveal the need for
sophisticated feature combinations for satisfactory
results, and we may need additional training data;
(iv) for subject reconstruction, the tracing method
is fairly effective, and the accuracy is bounded
mainly by the robustness of dependency parsing to
ill-formed and complex sentences; (v) the final re-

vision with a seq2seq model remains mostly gram-
mar error correction, and substantial semantic re-
vision may require significantly different models.

Though we are starting to explore the chal-
lenges facing complete reconstruction of propo-
sitions from natural argumentative discourse, our
cascade model already demonstrates improvement
over locutions (ADUs) in several modules for this
understudied yet crucial task in argument mining.

We are currently working on systematic extrac-
tion of propositional content from questions and
imperatives, and evaluation of the entire cascade
model as a whole. Our future direction is to use
extracted propositions to develop argument min-
ing models that identify nuanced types of proposi-
tional relations informed by argumentation theory.

Acknowledgements

This research was funded by the Kwanjeong Ed-
ucational Foundation and grant EP/N014871/1 by
the Engineering and Physical Sciences Research
Council (EPSRC).

References

Yamen Ajjour, Wei-Fan Chen, Johannes Kiesel, Hen-
ning Wachsmuth, and Benno Stein. 2017. Unit Seg-
mentation of Argumentative Texts. In Proceedings
of the 4th Workshop on Argument Mining, pages
118–128, Copenhagen, Denmark. Association for
Computational Linguistics.

Khalid Al Khatib, Henning Wachsmuth, Johannes
Kiesel, Matthias Hagen, and Benno Stein. 2016.
A News Editorial Corpus for Mining Argumenta-
tion Strategies. In Proceedings of COLING 2016,
the 26th International Conference on Computational
Linguistics: Technical Papers, pages 3433–3443.
The COLING 2016 Organizing Committee.

Miltiadis Allamanis, Hao Peng, and Charles Sutton.
2016. A Convolutional Attention Network for Ex-
treme Summarization of Source Code. In Interna-
tional Conference on Machine Learning (ICML).

John L. Austin. 1962. How to Do Things with Words.
Clarendon Press.

Simon Blackburn. 2016. The Oxford Dictionary of Phi-
losophy. Oxford University Press.

F. H. van Eemeren and R. Grootendorst. 1984. Speech
acts in argumentative discussions: A theoretical
model for the analysis of discussions directed to-
wards solving conflicts of opinion. Foris.

Steffen Eger, Johannes Daxenberger, and Iryna
Gurevych. 2017. Neural End-to-End Learning for



20

Computational Argumentation Mining. In Proceed-
ings of the 55th Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Pa-
pers), pages 11–22, Stroudsburg, PA, USA. Associ-
ation for Computational Linguistics.

Jiatao Gu, Zhengdong Lu, Hang Li, and Victor O K
Li. 2016. Incorporating Copying Mechanism in
Sequence-to-Sequence Learning. In Proceedings of
the 54th Annual Meeting of the Association for Com-
putational Linguistics (Volume 1: Long Papers),
pages 1631–1640. Association for Computational
Linguistics.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidirec-
tional LSTM-CRF Models for Sequence Tagging.
arXiv.

Thang Luong, Hieu Pham, and Christopher D Man-
ning. 2015. Effective Approaches to Attention-
based Neural Machine Translation. In Proceed-
ings of the 2015 Conference on Empirical Meth-
ods in Natural Language Processing, pages 1412–
1421, Lisbon, Portugal. Association for Computa-
tional Linguistics.

Andreas Peldszus and Manfred Stede. 2015. Towards
Detecting Counter-considerations in Text. In Pro-
ceedings of the 2nd Workshop on Argumentation
Mining, pages 104–109. Association for Computa-
tional Linguistics.

Isaac Persing and Vincent Ng. 2016. End-to-End Ar-
gumentation Mining in Student Essays. In Proceed-
ings of the 2016 Conference of the North Ameri-
can Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
1384–1394, Stroudsburg, PA, USA. Association for
Computational Linguistics.

Chris Reed and Katarzyna Budzynska. 2011. How di-
alogues create arguments. In Proceedings of the 7th
Conference of the International Society for the Study
of Argumentation (ISSA). SicSat.

Chris Reed, Katarzyna Budzynska, and Jacky Visser.
2016. IAT annotation guidelines for US2016.
http://arg.tech/US2016-guidelines.

Sebastian Schuster and Christopher D. Manning. 2016.
Enhanced English universal dependencies: An im-
proved representation for natural language under-
standing tasks. In Proceedings of the Tenth Interna-
tional Conference on Language Resources and Eval-
uation (LREC 2016), pages 2371–2378, Portorož,
Slovenia. European Language Resources Associa-
tion (ELRA).

Sebastian Schuster, Joakim Nivre, and Christopher D
Manning. 2018. Sentences with Gapping: Parsing
and Reconstructing Elided Predicates. In Proceed-
ings of the 2018 Conference of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies, Volume
1 (Long Papers), pages 1156–1168, New Orleans,

Louisiana. Association for Computational Linguis-
tics.

J. R. Searle. 1969. Speech acts: An essay in the philos-
ophy of language. Cambridge University Press.

Christian Stab and Iryna Gurevych. 2014. Annotat-
ing Argument Components and Relations in Per-
suasive Essays. In Proceedings of COLING 2014,
the 25th International Conference on Computational
Linguistics: Technical Papers, pages 1501–1510.
Dublin City University and Association for Compu-
tational Linguistics.

Manfred Stede, Stergos Afantenos, Andreas Peldszus,
Nicholas Asher, and Jérémy Perret. 2016. Parallel
Discourse Annotations on a Corpus of Short Texts.
In Proceedings of the Tenth International Confer-
ence on Language Resources and Evaluation (LREC
2016), Paris, France. European Language Resources
Association (ELRA).

Jacky Visser, Barbara Konat, Rory Duthie, Marcin
Koszowy, Katarzyna Budzynska, and Chris Reed.
2019. Argumentation in the 2016 US presidential
elections: annotated corpora of television debates
and social media reaction. Language Resources and
Evaluation.

Justine Zhang, Arthur Spirling, and Cristian Danescu-
Niculescu-Mizil. 2017. Asking too much? The
rhetorical role of questions in political discourse.
In Proceedings of the 2017 Conference on Empiri-
cal Methods in Natural Language Processing, pages
1558–1572, Copenhagen, Denmark. Association for
Computational Linguistics.

http://arxiv.org/abs/1508.01991v1
http://arxiv.org/abs/1508.01991v1
http://arg.tech/US2016-guidelines
https://www.aclweb.org/anthology/L16-1376
https://www.aclweb.org/anthology/L16-1376
https://www.aclweb.org/anthology/L16-1376
https://doi.org/10.1007/s10579-019-09446-8
https://doi.org/10.1007/s10579-019-09446-8
https://doi.org/10.1007/s10579-019-09446-8


21

Top 1-8 Top 9-16 Top 17-24

, (31%) – (2%) or (1%)
and (12%) , because (1%) ? (1%)

NONE (10%) -lrb- (1%) . and (1%)
, and (9%) , which (1%) to (1%)
, but (4%) ; (1%) as (1%)

. (3%) ... (1%) , so (1%)
because (2%) - (1%) that (1%)

but (2%) when (1%) if (0%)

Table 9: Words that separate two annotated locutions that overlap with one predicted locution. NONE indicates
that the locutions are back-to-back without any separator.

Regex Prec Recl F1

(?<!i )said (\S + ){3,} .387 .295 .335
ˆ‘‘ .559 .119 .196
, ‘‘ .552 .115 .190
you say .500 .068 .120
said that (\S + ){3,} .394 .047 .084
: ‘‘ .875 .025 .049
said ‘‘ .714 .018 .035
called (\S + )+‘‘ .556 .018 .035
blamed .500 .014 .028
argued that (\S + ){3,} 1.000 .004 .007
insisted that (\S + ){3,} 1.000 .004 .007

All above .442 .590 .505

Table 10: Accuracy of reported speech detection.

Tregex F1 Coverage

S $ (VBD < said) .234 5%
S $ (VBD < /says?/) .184 0%
S $ (VBD < /claim.*/) .184 0%
S $ (VBD < /argue.*/) .184 0%
S $ (VBD < /insist.*/) .184 0%
S < ‘‘ .352 15%
S $- /:/ .220 5%

All above .395 23%

Table 11: Regular expressions (Tregex syntax) for speech identification and their accuracy. The first five patterns
represent a clause that is a sibling of said, say or says, claim.*, argue.*, and insist.*, respectively. The last two
patterns represent a clause that includes an opening quotation mark and follows a colon, respectively.



22

Regex Prec Recl F1 Regex Prec Recl F1

\? .751 .938 .834 ˆshould .800 .014 .028
ˆdo .485 .087 .147 ˆwould .538 .012 .024
ˆhow .759 .078 .141 ˆwill 1.000 .011 .021
ˆwhat .462 .064 .112 ˆwas .667 .011 .021
ˆis .775 .055 .102 ˆwhere .714 .009 .017
ˆwhy .423 .039 .071 ˆwhen .071 .009 .016
ˆdid .842 .028 .055 ˆwhich .286 .007 .014
ˆare .800 .021 .041 ˆhave .500 .005 .011
ˆwho .706 .021 .041 ˆwere 1.000 .004 .007
ˆcan .611 .019 .038 ˆcould .182 .004 .007
ˆdoes .588 .018 .034 ˆhas .333 .002 .004

All .588 .972 .733

Table 12: Accuracy of question detection.



23

A Module: LocutionExtraction

For R-CRF, we used sklearn-crfsuite 0.3.6. We
conducted grid search, exploring all combinations
of the bias feature ({1, 0}) and the following opti-
mization parameters:
• Gradient descent using the L-BFGS method

– L1 regularization: 0, 0.05, 0.1
– L2 regularization: 0, 0.05, 0.1

• Passive Aggressive (PA)
– Aggressiveness parameter: 0.5, 1, 2

For BiLSTM-CRF, we used the following pa-
rameter values:
• BiLSTM hidden dim: 128
• Optimizer: Adam
• Learning rate: 0.001
For Ajjour, we used the following parameter

values:
• Encoder BiLSTMs hidden dim: 128
• Output BiLSTM hidden dim: 5, 10, 20
• Optimizer: Adam
• Learning rate: 0.001

B Module: SubjectReconstruction

Conjunct (conj): Two verbs that are conjoined by
a conjunction are likely to have the same subject.
In the following example, preserving has the same
subject as protecting does.

Auxiliary, passive auxiliary (aux, auxpass): An
auxiliary verb that modifies a (passive) verb is
likely to have the same subject as the modified
verb does. In the following example, got has the
same subject as carried does.

Copula (cop): A copula that joins a verb with its
subject is likely to have the same subject as the
verb. In the following example, ’ve has the same
subject as wrong does.

Open clausal complement (xcomp): An open
clausal complement of a verb is likely to have the
same subject as the verb does. In the following ex-
ample, send has the same subject as wanted does.

Adverbial clause modifier (advcl): An adverbial
clause modifier of a verb may or may not have the
same subject as the verb does. In the following ex-
amples, the two sentences have the same structure
of verb + object + marked adverbial clause mod-
ifier. However, in the first sentence, keeping has
the same subject as do does, whereas in the second
sentence, leaving has a different subject than stop
does. For reliability, we do not include adverbial
clause modifiers for tracing a subject.

Relative clause modifier (acl:relcl): Sometimes
a verb’s direct subject is a relative pronoun, in
which case we move to the word that is modified
the current verb. In the following example, ran
modifies campaign, which is the proper subject.

However, which may often refer to a phrase or a
clause, and this method may not be able to capture
that.

C Module: Revision

C.1 Copy Model
Suppose an input text is a sequence of words
wE1 , · · · , wEN , and denote the word vector (e.g.,
word embedding) of wEi as w

E
i . The BiLSTM

encoder encodes each word wEi and outputs for-
ward/backward hidden states

−→
hEi and

←−
hEi as

−→
hEi ,
←−
hEi =

−−−−−→
BiLSTM(wEi ,

−→
hEi−1,

←−
hEi+1)

−→
hE0 =

←−
hEN+1 = 0.



24

For the jth word to be generated, the LSTM de-
coder first encodes the concatenation of the pre-
viously generated word wDj−1 and context vector

h̄
E
j−1 (explained below), along with the previous

hidden state as

hDj = LSTM([w
D
j−1; h̄

E
j−1],h

D
j−1)

hD0 = [
←−
hE1 ;
−→
hEN ].

Next, the decoder attends to the encoder’s hidden
states using an attention mechanism. The attention
weight of the ith hidden state is calculated as the
dot product of the hidden states from the encoder
and decoder:

aji = h
D
j · [
←−
hEi ;
−→
hEi ], âji =

exp(aji)∑
i′ exp(aji′)

h̄
E
j =

∑
i

aji[
−→
hEi ;
←−
hEi ].

The probability of the ith input word being copied
is proportional to the attention weight of the ith
hidden state. On the other hand, calculation of the
probability of newly generating the vth word in
the vocabulary follows the standard attention de-
coder mechanism. Denoting these probabilities as
PC(wv) and PG(wv), respectively, they are calcu-
lated as

PC(wv) =
N∑
i=1

âjiI(w
E
i = wv)

PG(wv) = softmax(WG[hDj ; h̄
E
j ] + bG)v,

where WG and bG are corresponding weight ma-
trix and bias vector. The final probability of wv
being generated is a weighted sum of PC(wv) and
PG(wv), where the weight δ is automatically cal-
culated as

δj = σ(Wδh
D
j + bδ)

P (wv) = δPC(wv) + (1− δ)PG(wv),

where Wδ and bδ are corresponding weight matrix
and bias vector. The original method for calcu-
lating the weight (Gu et al., 2016) and a constant
weight did not perform well on our task.

Beam search is used to choose the best output.
Gradient clipping is used to avoid the exploding
gradient problem.

C.2 Model Parameters
We explore the combinations of the following pa-
rameter values:

• Encoder hidden dim: 96, 128, 160, 192 (at-
tention model) / 128, 192 (copy model)
• Beam size: 4
• Optimizer: Adam
• Learning rate: 0.001
• Gradient clipping: 1


