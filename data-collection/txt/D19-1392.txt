



















































Broad-Coverage Semantic Parsing as Transduction


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 3786–3798,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

3786

Broad-Coverage Semantic Parsing as Transduction

Sheng Zhang Xutai Ma Kevin Duh Benjamin Van Durme
Johns Hopkins University

{zsheng2, xutai ma}@jhu.edu
{kevinduh, vandurme}@cs.jhu.edu

Abstract

We unify different broad-coverage semantic
parsing tasks under a transduction paradigm,
and propose an attention-based neural frame-
work that incrementally builds a meaning rep-
resentation via a sequence of semantic rela-
tions. By leveraging multiple attention mecha-
nisms, the transducer can be effectively trained
without relying on a pre-trained aligner. Ex-
periments conducted on three separate broad-
coverage semantic parsing tasks – AMR, SDP
and UCCA – demonstrate that our attention-
based neural transducer improves the state of
the art on both AMR and UCCA, and is com-
petitive with the state of the art on SDP.

1 Introduction

Broad-coverage semantic parsing aims at map-
ping any natural language text, regardless of its
domain, genre, or even the language itself, into
a general-purpose meaning representation. As a
long-standing topic of interest in computational
linguistics, broad-coverage semantic parsing has
targeted a number of meaning representation
frameworks, including CCG (Steedman, 1996,
2001), DRS (Kamp and Reyle, 1993; Bos, 2008),
AMR (Banarescu et al., 2013), UCCA (Abend
and Rappoport, 2013), SDP (Oepen et al., 2014,
2015), and UDS (White et al., 2016).1 Each of
these frameworks has their specific formal and
linguistic assumptions. Such framework-specific
“balkanization” results in a variety of framework-
specific parsing approaches, and the state-of-the-
art semantic parser for one framework is not al-
ways applicable to another. For instance, the state-
of-the-art approaches to SDP parsing (Dozat and

1Abbreviations respectively denote: Combinatory Cat-
egorical Grammar, Discourse Representation Theory, Ab-
stract Meaning Representation, Universal Conceptual Cog-
nitive Annotation, Semantic Dependency Parsing, and Uni-
versal Decompositional Semantics.

Manning, 2018; Peng et al., 2017a) are not directly
transferable to AMR and UCCA because of the
lack of explicit alignments between tokens in the
sentence and nodes in the semantic graph.

While transition-based approaches are adapt-
able to different broad-coverage semantic parsing
tasks (Wang et al., 2018; Hershcovich et al., 2018;
Damonte et al., 2017), when it comes to represen-
tations such as AMR whose nodes are unanchored
to tokens in the sentence, a pre-trained aligner
has to be used to produce the reference transi-
tion sequences (Wang et al., 2015; Damonte et al.,
2017; Peng et al., 2017b). In contrast, there are
attempts to develop attention-based approaches in
a graph-based parsing paradigm (Dozat and Man-
ning, 2018; Zhang et al., 2019), but they lack pars-
ing incrementality, which is advocated in terms
of computational efficiency and cognitive model-
ing (Nivre, 2004; Huang and Sagae, 2010).

In this paper, we approach different broad-
coverage semantic parsing tasks under a uni-
fied framework of transduction. We propose an
attention-based neural transducer that extends the
two-stage semantic parser of Zhang et al. (2019)
to directly transduce input text into a meaning
representation in one stage. This transducer has
properties of both transition-based approaches and
graph-based approaches: on the one hand, it
builds a meaning representation incrementally via
a sequence of semantic relations, similar to a
transition-based parser; on the other hand, it lever-
ages multiple attention mechanisms used in recent
graph-based parsers, thereby removing the need
for pre-trained aligners.

Requiring only minor task-specific adaptations,
we apply this framework to three separate broad-
coverage semantic parsing tasks: AMR, SDP, and
UCCA. Experimental results show that our neural
transducer outperforms the state-of-the-art parsers
on AMR (77.0% F1 on LDC2017T10 and 71.3%



3787

F1 on LDC2014T12) and UCCA (76.6% F1 on
the English-Wiki dataset v1.2), and is competitive
with the state of the art on SDP (92.2% F1 on the
English DELPH-IN MRS dataset).

2 Background and Related Work

We provide summary background on the meaning
representations we target, and review related work
on parsing for each.
Abstract Meaning Representation (AMR; Ba-
narescu et al., 2013) encodes sentence-level se-
mantics, such as predicate-argument information,
reentrancies, named entities, negation and modal-
ity, into a rooted, directed, and usually acyclic
graph with node and edge labels. AMR graphs ab-
stract away from syntactic realizations, i.e., there
is no explicit correspondence between elements
of the graph and the surface utterance. Fig. 1(a)
shows an example AMR graph.

Since its first general release in 2014, AMR
has been a popular target of data-driven seman-
tic parsing, notably in two SemEval shared tasks
(May, 2016; May and Priyadarshi, 2017). Graph-
based parsers build AMRs by identifying con-
cepts and scoring edges between them, either in a
pipeline (Flanigan et al., 2014), or jointly (Zhou
et al., 2016; Lyu and Titov, 2018; Zhang et al.,
2019). This two-stage parsing process lim-
its the parser incrementality. Transition-based
parsers either transform dependency trees into
AMRs (Wang et al., 2015, 2016; Goodman et al.,
2016), or employ transition systems specifically
tailored to AMR parsing (Damonte et al., 2017;
Ballesteros and Al-Onaizan, 2017). Transition-
based parsers rely on pre-trained aligner produce
the reference transitions. Grammar-based parsers
leverage external semantic resources to derive
AMRs compositionally based on CCG rules (Artzi
et al., 2015), or SHRG rules (Peng et al., 2015).
Another line of work uses neural model transla-
tion models to convert sentences into linearized
AMRs (Barzdins and Gosko, 2016; Peng et al.,
2017b), but has relied on data augmentation to
produce effective parsers (van Noord and Bos,
2017; Konstas et al., 2017). Our parser differs
from the previous ones in that it has incrementality
without relying on pre-trained aligners, and can be
effectively trained without data augmentation.
Semantic Dependency Parsing (SDP) was in-
troduced in 2014 and 2015 SemEval shared
tasks (Oepen et al., 2014, 2015). It is cen-

tered around three semantic formalisms – DM
(DELPH-IN MRS; Flickinger et al., 2012; Oepen
and Lønning, 2006), PAS (Predicate-Argument
Structures; Miyao and Tsujii, 2004), and PSD
(Prague Semantic Dependencies; Hajič et al.,
2012) – representing predicate-argument relations
between content words in a sentence. Their an-
notations have been converted into bi-lexical de-
pendencies, forming directed graphs whose nodes
injectively correspond to surface lexical units, and
edges represent semantic relations between nodes.
In this work, we focus on only the DM formalism.
Fig. 1(b) shows an example DM graph.

Most recent parsers for SDP are graph-based:
Peng et al. (2017a, 2018) use a max-margin clas-
sifier on top of a BiLSTM, with the factored
score for each graph over predicates, unlabeled
arcs, and arc labels. Multi-task learning ap-
proaches and disjoint data have been used to im-
prove the parser performance. Dozat and Man-
ning (2018) extend an LSTM-based syntactic de-
pendency parser to produce graph-structured de-
pendencies, and carefully tune it to state of the art
performance. Wang et al. (2018) extend the transi-
tion system of Choi and McCallum (2013) to pro-
duce non-projective trees, and use improved ver-
sions of stack-LSTMs (Dyer et al., 2015) to learn
representation for key components. All of these
are specialized for bi-lexical dependency parsing,
whereas our parser can effectively produce both
bi-lexical semantics graphs, and graphs that are
less anchored to the surface utterance.

Universal Conceptual Cognitive Annotation
(UCCA; Abend and Rappoport, 2013) targets a
level of semantic granularity that abstracts away
from syntactic paraphrases in a typologically-
motivated, cross-linguistic fashion. Sentence rep-
resentations in UCCA are directed acyclic graphs
(DAG), where terminal nodes correspond to sur-
face lexical tokens, and non-terminal nodes to se-
mantic units that participate in super-ordinate re-
lations. Edges are labeled, indicating the role of a
child in the relation the parent represents. Fig. 1(c)
shows an example UCCA DAG.

The first UCCA parser is proposed by Hersh-
covich et al. (2017), where they extend a transi-
tion system to produce DAGs. To leverage other
semantic resources, Hershcovich et al. (2018) is
one of the few attempts to present (lossy) conver-
sion from AMR, SDP and Universal Dependen-
cies (UD; Nivre et al., 2016) to a unified UCCA-



3788

(a) AMR

expressed

P

Term

H

A

Pierre Vinken

Term Term

A

A P

his concern

Term Term

Pierre

Vinken

expressed

concern

ARG1

compound

ARG2
his

poss

Pierre
(3)

Vinken
(4)

express-01
(1)

concern-01
(5)

person
(2)

ARG0

op1 op2

ARG1

ARG1

person
(2)

Pierre Vinken

express-01

concern-01
person

ARG0

op1 op2

ARG1

ARG1

Pierre
(3)

Vinken
(2)

expressed
(1)

concern
(4)

ARG1

compound-of

ARG2

his
(5)

poss-of

expressed
(5)

P

HPierre
(3)

Vinken
(4)

A
A

P

his
(7) concern

(8)

A

Phrase

H
(2)

A
(6)

top
(1)

(b) DM (c) UCCA

(d) AMR arborescence (e) DM arborescence (f) UCCA arborescence

Figure 1: Meaning representation in the task-specific format – (a) AMR, (b) DM, and (c) UCCA – for an ex-
ample sentence “Pierre Vinken expressed his concern”. Meaning representation (d), (e) and (f) are in the unified
arborescence format, which are converted from (a), (b) and (c) respectively.

based DAG format. They explore multi-task learn-
ing under the unified format. While multi-task
learning improves UCCA parsing results, it shows
poor performance on AMR, SDP and UD parsing.
In contrast, different semantic parsing tasks are
formalized in our unified transduction paradigm
with no loss, and our approach achieves state-of-
the-art or competitive performance on each task,
using only single-task data.

3 Unified Transduction Problem

3.1 Unified Arborescence Format

We first introduce a unified target format for differ-
ent broad-coverage semantic parsing tasks. Mean-
ing representation in the unified format is an ar-
borescence (aka, a directed rooted tree), which is
converted from its corresponding task-specific se-
mantic graph via the following reversible steps:
AMR Reentrancy is what can make an AMR
graph not an arborescence (it introduces cycles).
Following Zhang et al. (2019), we convert an
AMR graph into an arborescence by duplicating
nodes that have reentrant relations; that is, when-
ever a node has a reentrant relation, we make a
copy of that node and use the copy to participate
in the relation, thereby resulting in an arbores-
cence. Next, in order to preserve the reentrancy
information, we assign a node index to each node.
Duplicated nodes are assigned the same index as

the original node. Fig. 1(d) shows an AMR ar-
borescence converted from Fig. 1(a): two “per-
son” nodes have the same node index 2. The origi-
nal AMR graph can be recovered by merging iden-
tically indexed nodes.
DM We first break the DM graph into a set of
weakly connected subgraphs. For each subgraph,
if it has the top node, we treat top as root; other-
wise, we treat the node with the max outdegree as
root. We then run depth-first traversal over each
subgraph from its root to yield an arborescence,
and repeat the following three steps until no more
edges can be added to the arborescence: (1) we run
breadth-first traversal over the arborescence from
the root until we find a node that has an incoming
edge not belonging to the arborescence; (2) we re-
verse the edge and add a -of suffix to the edge
label; (3) we run depth-first search from that node
to include more edges to the arborescence. During
the whole process, we add node indices and du-
plicate reentrant nodes in the same way as AMR
conversion. Finally, we connect arborescences by
adding a null edge from top to other arbores-
cence roots. Fig. 1(e) shows a DM arborescence
converted from Fig. 1(b). The original DM graph
can be recovered by removing null edges, merg-
ing identically indexed nodes, and reversing edges
with -of suffix.
UCCA To date, official UCCA evaluation only
considers UCCA’s foundational layer, which is al-



3789

express-01
(1)

top
(0)

person
(2)

Pierre
(3)

Vinken
(4)

concern-01
(5)

person
(2)

top
(0)

ARG0 op1 op2 ARG1 ARG1

express-01
(1)

person
(2)

Pierre
(3)

Vinken
(4)

concern-01
(5)

person
(2)

<end>
(6)

Pierre Vinken expressed his concern

Encoder

Source Node Module 

Relation Type Module 

Target Node Module 

top
(0)

express-01
(1)

ARG0

person
(2)

op1

person
(2)

op1

express-01
(1)

ARG1

concern-01
(5)

ARG1

Decoder 

Decoder 
Input 

Semantic
Relations 

Decoder Output 
Semantic Relations 

Input Text 

Embedding
Module 

Figure 2: The encoder-decoder architecture of our attention-based neural transducer. An encoder encodes the input
text into hidden states. A decoder is composed by three modules: a target node module, a relation type module,
and a source node module. At each decoding time step, the decoder takes the previous semantic relation as input,
and outputs a new semantic relation in a factorized way: firstly, the target node module produces a new target
node; secondly, the source node module points to a preceding node as a new source node; finally, the relation type
module predicts the relation type between source and target nodes.

ready an arborescence. We convert it to the uni-
fied arborescence format by first collapsing sub-
graphs of pre-terminal nodes: we replace each
pre-terminal node with its first terminal node; if
the pre-terminal node has other terminals, we add
a special phrase edge from the first terminal
node to other terminal nodes. The collapsing step
largely reduces the number of terminal nodes in
UCCA. We then add labels to the remaining non-
terminal nodes. Each node label is simply the
same as its incoming edge label. We find that
adding node labels improves performance of our
neural transducer (See Section 6.2 for the experi-
mental results). Lastly, we add node indices in the
same way as AMR conversion. Fig. 1(f) shows a
DM arborescence converted from Fig. 1(c). The
original UCCA DAG can be recovered by expand-
ing pre-terminal subgraphs, and removing non-
terminal node labels.

3.2 Problem Formalization

For any broad-coverage semantic parsing task, we
denote the input text by X , and the output mean-
ing representation in the unified arborescence for-
mat by Y , where X is a sequence of tokens
〈x1, x2, ..., xn〉 and Y can be decomposed as a se-
quence of semantic relations 〈y1, y2, ..., ym〉. A
relation y is a tuple 〈u, du, r, v, dv〉, consisting of
a source node label u, a source node index du, a
relation type r, a target node label v, and a target
node index dv.

LetY be the output space. The unified transduc-
tion problem is to seek the most-likely sequence of
semantic relations Ŷ given X:

Ŷ = argmax
Y ∈Y

P(Y | X)

= argmax
Y ∈Y

m∏
i

P(yi | y<i, X)

4 Transducer

To tackle the unified transduction problem, we
introduce an attention-based neural transducer
that extends Zhang et al. (2019)’s attention-based
parser. Their attention-based parser addresses se-
mantic parsing in a two-stage process: it first em-
ploys an extended variant of pointer-generator net-
work (See et al., 2017) to convert the input text
into a list of nodes, and then uses a deep biaffine
graph-based parser (Dozat and Manning, 2016)
with a maximum spanning tree (MST) algorithm
to create edges. In contrast, our attention-based
neural transducer directly transduces the input text
into a meaning representation in one stage via a se-
quence of semantic relations. A high-level model
architecture of our transducer is depicted in Fig. 2:
an encoder first encodes the input text into hidden
states; and then conditioned on the hidden states,
at each decoding time step, a decoder takes the
previous semantic relation as input, and outputs
a new semantic relation, which includes a target
node, a relation type, and a source node.



3790

Specifically, there a significant difference be-
tween Zhang et al. (2019) and our model: Zhang
et al. (2019) first predicts nodes, and then edges.
These two stages are done separately (except that
a shared encoder is used). At the node predic-
tion stage, their model has no knowledge of edges,
and therefore node prediction is performed purely
based previous nodes. At the edge prediction
stage, their model predicts the head of each node
in parallel. Head prediction of one node has no
constrains or impact on another. As a result, MST
algorithms have to be used to search for a valid
prediction. In comparison, our model does not
have two separate stages for node and edge pre-
diction. At each decoding step, our model predicts
not only a node, but also the incoming edge to the
node, which includes a source and a relation type.
See Fig. 2 for an example. The predicted node and
incoming edge together with previous predictions
form a partial semantic graph, which is used as
input of the next decoding step for the next node
and incoming edge prediction. Our model there-
fore makes predictions based on the partial seman-
tic graph, which helps prune the output space for
both nodes and edges. Since at each decoding step,
we assume the incoming edge is always from a
preceding node (see Section 4.3 for the details),
the predicted semantic graph is guaranteed to be
a valid arborescence, and a MST algorithm is no
longer needed.

4.1 Encoder

At the encoding stage, we employ an encoder em-
bedding module to convert the input text into vec-
tor representations, and a BiLSTM is used to en-
code vector representations into hidden states.
Encoder Embedding Module concatenates
word-level embeddings from GloVe (Pennington
et al., 2014) and BERT2 (Devlin et al., 2018),
char-level embeddings from CharCNN (Kim
et al., 2016), and randomly initialized embeddings
for POS tags.

For AMR, it includes extra randomly initialized
embeddings for anonymization indicators that tell
the encoder whether a token is an anonymized to-
ken from preprocessing.

For UCCA, it includes extra randomly initial-
ized embeddings for NER tags, syntactic depen-
dency labels, punctuation indicators, and shapes

2 We use average pooling in the same way as Zhang et al.
(2019) to get word-level embeddings from BERT.

that are provided in the UCCA official dataset.
Multi-layer BiLSTM (Hochreiter and Schmidhu-
ber, 1997) is defined as:

slt =

[ −→s lt←−s lt
]
=

[ −−−→
LSTM(sl−1t , s

l
t−1)←−−−

LSTM(sl−1t , s
l
t+1)

]
, (1)

where slt is the l-th layer hidden state at time step
t; sti is the embedding module output for token xt.

4.2 Decoder
Decoder Embedding Module at decoding time
step i converts elements in the input semantic rela-
tion 〈ui, dui , ri, vi, dvi 〉 into vector representations
〈ui,dui , ri,vi,dvi 〉:3
ui and vi are concatenations of word-level

embeddings from GloVe, char-level embeddings
from CharCNN, and randomly initialized embed-
dings for POS tags. POS tags for source and target
nodes are inferred at runtime: if a node is copied
from input text, the POS tag of the correspond-
ing token is used; if it is copied from a preceding
node, the POS tag of the preceding node is used;
otherwise, an UNK tag is used.

dui ,d
v
i and ri are randomly initialized embed-

dings for source node index, target node index, and
relation type.

Next, the decoder outputs a new semantic rela-
tion in a factorized way depicted in Fig. 2: First, a
target node module takes vector representations of
the previous semantic relation, and predicts a tar-
get node label as well as its index. Then, a source
node module predicts a source node via pointing to
a preceding node. Lastly, a relation type module
takes the predicted source and target nodes, and
predicts the relation type between them.
Target Node Module converts vector representa-
tions of the input semantic relation into a hidden
state zi in the following way:

zi = FFN
(relation)([hli; ci; ri;ui;d

u
i ]) (2)

hli = LSTM(h
l−1
i ,h

l
i−1) (3)

FFN(x) = Wx+ b (4)

where an l-layer LSTM generates contextual rep-
resentation hli for target node vi (for initialization,
h0i = [vi;d

v
i ], h

l
0 = [

←−s l1;
−→s ln]). A feed-forward

neural network FFN(relation) generates the hidden
3While training, the input semantic relation is from the

reference sequence of relations; at test time, it is the previous
decoder output semantic relation.



3791

state zi of the input semantic relation by combin-
ing contextual representation hli for target node vi,
encoder context vector ci, and vector representa-
tions ri,ui,dui for relation type ri, source node
label ui and source node index dui .

Encoder context vector ci is a weighted-sum of
encoder hidden states sl1:n. The weight is atten-
tion a(enc)i from the decoder at decoding step i to
encoder hidden states:

a
(enc)
i = softmax

(
MLP(enc)([hli; s

l
1:n])

)
(5)

MLP(x) = ELU(Wx+ b) (6)

Given the hidden state zi for input semantic
relation, we use an extended variant of pointer-
generator network to compute the probability dis-
tribution of next target node label vi+1:

P(vi+1) = pgenp
(vocab)
i ⊕ penca

(enc)
i ⊕ pdeca

(dec)
i

(7)

p
(vocab)
i = softmax

(
FFN(vocab)(zi)

)
(8)

a
(dec)
i = softmax

(
MLP(dec)([zi; z1:i−1])

)
(9)

[pgen, penc, pdec] = softmax
(

FFN(switch)(zi)
)
(10)

P(vi+1) is a hybrid of three parts: (1) emitting
a new node label from a pre-defined vocabulary
via probability distribution p(vocab)i ; (2) copying
a token from the encoder input text as node la-
bel via encoder-side attention a(enc)i ; and (3) copy-
ing a node label from preceding target nodes via
decoder-side attention a(dec)i . Scalars pgen, penc
and pdec act as a soft switch to control the produc-
tion of target node label from different sources.

The next target node index dvi+1 is assigned
based on the following rule:

dvi+1 =

{
dvj , if vi+1 copies its antecedent vj .

i+ 1, otherwise.

Source Node Module produces the next source
node label ui+1 via pointing to a node label among
preceding target node labels (the dotted arrows
shown in Fig. 2). The probability distribution of
next source node label ui+1 is defined as

P(ui+1) = softmax
(

BIAFFINE(h
(start)
i+1 ,h

(end)
1:i )

)
(11)

where BIAFFINE is a biaffine function (Dozat and
Manning, 2016). h(start)i+1 is the vector representa-

tion for the start of the pointer. h(end)1:i are vec-
tor representations for possible ends of the pointer.

They are computed by two multi-layer percep-
trons:

h
(start)
i+1 = MLP

(start)(hli+1) (12)

h
(end)
1:i = MLP

(end)(hl1:i) (13)

Note that hli+1 is the LSTM hidden state for tar-
get node vi+1, generated by Equation (3) in the
target node module. We reuse LSTM hidden states
from the target node module such that we can train
the decoder modules jointly.

Then, the next source node index dui+1 is the
same as the target node the module points to.
Relation Type Module also reuses LSTM hidden
states from the target node module to compute the
probability distribution of next relation type ri+1.
Assuming that the source node module points to
target node label vj as the next source node label,
The next relation type probability distribution is
computed by:

P(ri+1) = softmax
(

BILINEAR(h
(rel-src)
i+1 ,h

(rel-tgt)
i+1 )

)
(14)

h
(rel-src)
i+1 = MLP

(rel-src)(hlj) (15)

h
(rel-tgt)
i+1 = MLP

(rel-tgt)(hli+1) (16)

4.3 Training
To ensure that at each decoding step, the source
node can be found in the preceding nodes, we cre-
ate the reference sequence of semantic relations
by running a pre-order traversal over the reference
arborescence. The pre-order traversal only deter-
mines the order between a node and its children.
As for the order of its children, we sort them in al-
phanumerical order in the case of AMR, following
Zhang et al. (2019). In the case of SDP, we sort the
children based on their order in the input text. In
the case of UCCA, we sort the children based on
their UCCA node ID.

Given a training pair 〈X,Y 〉, the optimization
objective is to maximize the decomposed con-
ditional log likelihood

∑
i log

(
P(yi | y<i, X)

)
,

which is approximated by:∑
i

log
(
P(ui)

)
+log

(
P(ri)

)
+log

(
P(vi)

)
(17)

We also employ label smoothing (Szegedy
et al., 2016) to prevent overfitting, and include a
coverage loss (See et al., 2017) to penalize repet-
itive nodes: covlossi =

∑
t min(a

(enc)
i [t], covi[t]),

where covi =
∑i−1

j=0 a
(enc)
j .



3792

4.4 Prediction
Our transducer at each decoding time step looks
for the source node from the preceding nodes,
which ensures that the output of a greedy search
is already a valid arborescence Ŷ :

P(Ŷ | X) =
∏
i

max
ui

P(ui)max
ri

P(ri)max
vi

P(vi)

Therefore, a MST algorithm such as the Chu-Liu-
Edmonds algorithm atO(EV ) used in Zhang et al.
(2019) is no longer needed,4 and the decoding
speed of our transducer is O(V ). Moreover, since
our transducer builds the meaning representation
via a sequence of semantic relations, we imple-
ment a beam search over relation in Algo. 1. Com-
pared to the beam search of Zhang et al. (2019)
that only returns top-k nodes, our beam search
finds the top-k relation scores, which includes
source nodes, relation types and target nodes.

Algorithm 1: Beam Search over Semantic Relations.
Input : The input text X .
Output: A sequence of relations Y = {y1, ...ym}.
// Initialization.
i, score← 0, 0;
Y,finished← {}, {};
beam← {{Y, score}};
// Encoding.
encode(X);

// Decoding.
for i← 1 to MaxLength do

new beam← {};
{Y, score} = beam.pop();
for vi in topK(P(vi)) do

if vi = EOS then
finished.push({Y, score});

else
for ui ← v0 to vi−1 do

for ri in RelationTypeSet do
Y ← Y ∪ {〈ui, ri, vi〉};
score← score + log

(
P(ui)

)
+

log
(
P(ri)

)
+ log

(
P(vi)

)
;

new beam.push({Y, score});
end

end
end

end
beam← new beam.topK();

end
// Finishing.
while beam.not empty() do
{Y, score} ← beam.pop();
finished.push({Y, score});

end
{Y, score} ← finished.topK(k=1);
return Y ;

4E denotes the number of edges. V the number of nodes.

5 Data Pre- and Post-processing

AMR Pre- and post-processing steps are similar to
those of Zhang et al. (2019): in preprocessing, we
anonymize subgraphs of entities, remove senses,
and convert resultant AMR graphs into the uni-
fied format; in post-processing, we assign the most
frequent sense for nodes, restore Wikipedia links
using the DBpedia Spotlight API (Daiber et al.,
2013), add polarity attributes based on rules ob-
served from training data, and recover the original
AMR format from the unified format.
DM No pre- or post-processing is done to DM ex-
cept converting them into the unified format, and
recovering them from predictions.
UCCA During training, multi-sentence input text
and its corresponding DAG are split into single-
sentence training pairs based on rules observed
from training data. At test time, we split multi-
sentence input text, and join the predicted graphs
into one. We also convert the original format to
the unified format in preprocessing, and recover
the original DAG format in post-processing.

Hidden Size
Glove 300
BERT 1024
POS / NER / Dep / Shapes 100
Anonymization / Node index 50
CharCNN kernel size 3
CharCNN channel size 100
Encoder 2@512
Decoder 2@1024
Biaffine input size 256

Bilinear input size
AMR 128
DM 256
UCCA 128

Optimizer
Type ADAM
Learning rate 0.001
Maximum gradient norm 5.0
Coverage loss weight λ 1.0
Label smoothing � 0.1
Beam size 5
Batch size 64

Dropout rate
AMR 0.33
DM 0.2
UCCA 0.33

Vocabulary

Encoder-side vocab size

AMR 1.0 9200
AMR 2.0 18000
DM 11000
UCCA 10000

Decoder-side vocab size

AMR 1.0 7300
AMR 2.0 12200
DM 11000
UCCA 10000

Table 1: Hyperparameter settings



3793

6 Experiments

6.1 Data and Setup

We evaluate our approach on three separate broad-
coverage semantic parsing tasks: (1) AMR 2.0
(LDC2017T10) and 1.0 (LDC2014T12); (2) the
English DM dataset from SemEval 2015 Task 18
(LDC2016T10); (3) the UCCA English Wikipedia
Corpus v1.2 (Abend and Rappoport, 2013). The
train/dev/test split follows the official setup. Our
model is trained on two GeForce GTX TITAN X
GPUs with early stop based on the dev set. We fix
BERT parameters similar to Zhang et al. (2019)
due to the limited GPU memory. Hyperparameter
setting for each task is provided in Table 1.

6.2 Results

Data Parser F1(%)

AMR
2.0

Cai and Lam (2019) 73.2
Lyu and Titov (2018) 74.4±0.2
Lindemann et al. (2019) 75.3±0.1
Naseem et al. (2019) 75.5
Zhang et al. (2019) 76.3±0.1

- w/o beam search 75.3±0.1

Ours 77.0±0.1
- w/o beam search 76.4±0.1

AMR
1.0

Flanigan et al. (2016) 66.0
Pust et al. (2015) 67.1
Wang and Xue (2017) 68.1
Guo and Lu (2018) 68.3±0.4
Zhang et al. (2019) 70.2±0.1

- w/o beam search 69.2±0.1

Ours 71.3±0.1
- w/o beam search 70.4±0.1

Table 2: SMATCH F1 on AMR 2.0 and 1.0 test sets.
Standard deviation is computed over 3 runs.

AMR Table 2 compares our neural transducer to
the previous best results (SMATCH F1, Cai and
Knight, 2013) on AMR test sets. The transducer
improves the state of the art on AMR 2.0 by 0.7%
F1. On AMR 1.0 where training data is much
smaller than AMR 2.0, it shows a larger improve-
ment (1.1% F1) over the state of the art.

In Table 2, we also conduct ablation study on
beam search to investigate contributions from the
model architecture itself and the beam search algo-
rithm. The transducer model without beam search

is already better than the previous best parser that
is equipped with beam search. When compared
with the previous best parser without beam search,
our model still has around 1.0% F1 improvement.

Metric L’18 N’19 Z’19 Ours

SMATCH 74 75 76 77

Unlabeled 77 80 79 80
No WSD 76 76 77 78
Reentrancies 52 56 60 61
Concepts 86 86 85 86
Named Ent. 86 83 78 79
Wikification 76 80 86 86
Negation 58 67 75 77
SRL 70 72 70 71

Table 3: Fine-grained F1 scores on the AMR 2.0 test
set. L’18 is Lyu and Titov (2018); N’19 is Naseem
et al. (2019); Z’19 is Zhang et al. (2019).

Table 3 summarizes the parser performance on
each subtask using Damonte et al. (2017) evalua-
tion tool. Our transducer outperforms Zhang et al.
(2019) on all subtasks, but is still not close to Lyu
and Titov (2018) on named entities due to the dif-
ferent preprocessing methods for anonymization.

Parser ID OOD

Du et al. (2015) 89.1 81.8
Almeida and Martins (2015)(open) 89.4 83.8
Wang et al. (2018) 90.3 84.9
Peng et al. (2017a): BASIC 89.4 84.5
Peng et al. (2017a): FREDA3 90.4 85.3
Peng et al. (2018) 91.2 86.6
Dozat and Manning (2018) 93.7 88.9

Ours 92.2 87.1

Table 4: Labeled F1 (%) scores on the English DM in-
domain (WSJ) and out-of-domain (Brown corpus) test
sets. (open) denotes results from the open track.

DM Table 4 compares our neural transducer to the
state of the art (labeled F1) on the English DM in-
domain (ID) and out-of-domain (OOD) data. Ex-
cept Dozat and Manning (2018), our transducer
outperforms all other baselines, including FREDA3
of Peng et al. (2017a) and Peng et al. (2018),
which leverage multi-task learning from different
datasets. The best parser (Dozat and Manning,
2018) is specifically designed for bi-lexical depen-
dencies, and is not directly applicable to other se-



3794

mantic parsing tasks such as AMR and UCCA.
In contrast, our transducer is more general, and is
competitive to the best SDP parser.

Parser F1 (%)

Hershcovich et al. (2017) 71.1
Hershcovich et al. (2018): single 71.2
Hershcovich et al. (2018): MTL 74.3

Ours 76.6±0.1
- w/o non-terminal node labels 75.7±0.1

Table 5: Labeled F1 (%) scores for all edges including
primary edges and remote edges. Standard deviation is
computed over 3 runs.

UCCA Table 5 compares our results to the pre-
vious best published results (labeled F1 for all
edges) on the English Wiki test set. Hershcovich
et al. (2018) explore multi-task learning (MTL)
to improve UCCA parsing, using AMR, DM and
UD parsing as auxiliaries. While improvement is
achieved UCCA parsing, their MTL model shows
poor results on the auxiliary tasks: 64.7% unla-
beled F1 on AMR, 27.2% unlabeled F1 on DM,
and 4.9% UAS on UD. In comparison, our trans-
ducer improves the state of the art on AMR, and
shows competitive results on DM. At the same
time, it also outperforms the best published UCCA
results by 2.3% F1. When converting UCCA
DAGs to the unified format, we adopt a simple rule
(Section 3.1) to add node labels to non-terminals.
Table 5 shows that these node labels do improve
the parsing performance from 75.7% to 76.6%.

6.3 Analysis

Validity Graph-based parsers like Dozat and Man-
ning (2018); Zhang et al. (2019) make indepen-
dent decisions on edge types. As a result, the same
outgoing edge type can appear multiple times to a
node. For instance, a node can have more than
one ARG1 outgoing edge. Although F1 scores can
be computed for graphs with such kind of nodes,
these graphs are in fact invalid mean representa-
tions. Our neural transducer incrementally builds
meaning representations: at each decoding step, it
takes a semantic relation as input, and has memory
of preceding edge type information, which implic-
itly places constraints on edge type prediction. We
compute the number of invalid graphs predicted
by the parser of Zhang et al. (2019) and our neu-
ral transducer on the AMR 2.0 test set, and find

that our neural transducer reduces the number of
invalid graphs by 8%.
Speed Besides the improvement on parsing accu-
racy, we also significantly speed up parsing. Ta-
ble 6 compares the parsing speed of our transducer
and Zhang et al. (2019) on the AMR 2.0 test set,
under the same environment setup. Without rely-
ing on MST algorithms to produce a valid arbores-
cence, our transducer is able to parse at 1.7x speed.

Speed (tokens/sec)

Zhang et al. (2019) 617
Ours 1076

Table 6: Parsing speed on the AMR 2.0 test set.

7 Conclusion

We cast three broad-coverage semantic parsing
tasks into a unified transduction framework, and
propose a neural transducer to tackle the problem.
Given the input text, the transducer incrementally
builds a meaning representation via a sequence
of semantic relations. Experiments conducted on
three tasks show that our approach improves the
state of the art in both AMR and UCCA, and is
competitive to the best parser in SDP.

This work can be viewed as a starting point for
cross-framework semantic parsing. Also, com-
pared with transition-based parsers (e.g. Damonte
et al., 2017) and graph-based parsers (e.g. Dozat
and Manning, 2018), our transductive framework
does not require a pre-trained aligner, and it is ca-
pable of building a meaning representation that
is less anchored to the input text. These advan-
tages make it well suited to semantic parsing in
cross-lingual settings (Zhang et al., 2018). In the
future, we hope to explore its potential in cross-
framework and cross-lingual semantic parsing.

Acknowledgments

We thank the anonymous reviewers for their valu-
able feedback. This work was supported in part
by the JHU Human Language Technology Center
of Excellence, and DARPA LORELEI and AIDA.
The U.S. Government is authorized to reproduce
and distribute reprints for Governmental purposes.
The views and conclusions contained in this pub-
lication are those of the authors and should not be
interpreted as representing official policies or en-
dorsements of DARPA or the U.S. Government.



3795

References
Omri Abend and Ari Rappoport. 2013. Universal con-

ceptual cognitive annotation (ucca). In Proceed-
ings of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 228–238. Association for Computa-
tional Linguistics.

Mariana S. C. Almeida and André F. T. Martins. 2015.
Lisbon: Evaluating TurboSemanticParser on multi-
ple languages and out-of-domain data. In Proceed-
ings of the 9th International Workshop on Semantic
Evaluation (SemEval 2015), pages 970–973, Den-
ver, Colorado. Association for Computational Lin-
guistics.

Yoav Artzi, Kenton Lee, and Luke Zettlemoyer. 2015.
Broad-coverage ccg semantic parsing with amr. In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing, pages
1699–1710. Association for Computational Linguis-
tics.

Miguel Ballesteros and Yaser Al-Onaizan. 2017. AMR
parsing using stack-LSTMs. In Proceedings of the
2017 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1269–1275, Copen-
hagen, Denmark. Association for Computational
Linguistics.

Laura Banarescu, Claire Bonial, Shu Cai, Madalina
Georgescu, Kira Griffitt, Ulf Hermjakob, Kevin
Knight, Philipp Koehn, Martha Palmer, and Nathan
Schneider. 2013. Abstract meaning representation
for sembanking. In Proceedings of the 7th Linguis-
tic Annotation Workshop and Interoperability with
Discourse, pages 178–186. Association for Compu-
tational Linguistics.

Guntis Barzdins and Didzis Gosko. 2016. RIGA at
SemEval-2016 task 8: Impact of Smatch extensions
and character-level neural translation on AMR pars-
ing accuracy. In Proceedings of the 10th Interna-
tional Workshop on Semantic Evaluation (SemEval-
2016), pages 1143–1147, San Diego, California. As-
sociation for Computational Linguistics.

Johan Bos. 2008. Wide-coverage semantic analysis
with Boxer. In Semantics in Text Processing. STEP
2008 Conference Proceedings, pages 277–286. Col-
lege Publications.

Deng Cai and Wai Lam. 2019. Core Semantic First: A
Top-down Approach for AMR Parsing. In Proceed-
ings of the 2019 Conference on Empirical Methods
in Natural Language Processing and 9th Interna-
tional Joint Conference on Natural Language Pro-
cessing, Hong Kong, China. Association for Com-
putational Linguistics.

Shu Cai and Kevin Knight. 2013. Smatch: an evalua-
tion metric for semantic feature structures. In Pro-
ceedings of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short

Papers), pages 748–752. Association for Computa-
tional Linguistics.

Jinho D. Choi and Andrew McCallum. 2013.
Transition-based dependency parsing with selec-
tional branching. In Proceedings of the 51st An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1052–
1062, Sofia, Bulgaria. Association for Computa-
tional Linguistics.

Joachim Daiber, Max Jakob, Chris Hokamp, and
Pablo N. Mendes. 2013. Improving efficiency and
accuracy in multilingual entity extraction. In Pro-
ceedings of the 9th International Conference on Se-
mantic Systems (I-Semantics).

Marco Damonte, Shay B. Cohen, and Giorgio Satta.
2017. An incremental parser for abstract meaning
representation. In Proceedings of the 15th Confer-
ence of the European Chapter of the Association for
Computational Linguistics: Volume 1, Long Papers,
pages 536–546. Association for Computational Lin-
guistics.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805.

Timothy Dozat and Christopher D Manning. 2016.
Deep biaffine attention for neural dependency pars-
ing. arXiv preprint arXiv:1611.01734.

Timothy Dozat and Christopher D. Manning. 2018.
Simpler but more accurate semantic dependency
parsing. In Proceedings of the 56th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 2: Short Papers), pages 484–490. Associa-
tion for Computational Linguistics.

Yantao Du, Fan Zhang, Xun Zhang, Weiwei Sun, and
Xiaojun Wan. 2015. Peking: Building semantic de-
pendency graphs with a hybrid parser. In Proceed-
ings of the 9th International Workshop on Semantic
Evaluation (SemEval 2015), pages 927–931, Den-
ver, Colorado. Association for Computational Lin-
guistics.

Chris Dyer, Miguel Ballesteros, Wang Ling, Austin
Matthews, and Noah A. Smith. 2015. Transition-
based dependency parsing with stack long short-
term memory. In Proceedings of the 53rd Annual
Meeting of the Association for Computational Lin-
guistics and the 7th International Joint Conference
on Natural Language Processing (Volume 1: Long
Papers), pages 334–343, Beijing, China. Associa-
tion for Computational Linguistics.

Jeffrey Flanigan, Chris Dyer, Noah A. Smith, and
Jaime Carbonell. 2016. Cmu at semeval-2016 task
8: Graph-based amr parsing with infinite ramp
loss. In Proceedings of the 10th International
Workshop on Semantic Evaluation (SemEval-2016),
pages 1202–1206. Association for Computational
Linguistics.

http://aclweb.org/anthology/P13-1023
http://aclweb.org/anthology/P13-1023
https://doi.org/10.18653/v1/S15-2162
https://doi.org/10.18653/v1/S15-2162
https://doi.org/10.18653/v1/D15-1198
https://doi.org/10.18653/v1/D17-1130
https://doi.org/10.18653/v1/D17-1130
http://aclweb.org/anthology/W13-2322
http://aclweb.org/anthology/W13-2322
https://doi.org/10.18653/v1/S16-1176
https://doi.org/10.18653/v1/S16-1176
https://doi.org/10.18653/v1/S16-1176
https://doi.org/10.18653/v1/S16-1176
https://www.aclweb.org/anthology/W08-2222
https://www.aclweb.org/anthology/W08-2222
http://aclweb.org/anthology/P13-2131
http://aclweb.org/anthology/P13-2131
https://www.aclweb.org/anthology/P13-1104
https://www.aclweb.org/anthology/P13-1104
http://aclweb.org/anthology/E17-1051
http://aclweb.org/anthology/E17-1051
http://aclweb.org/anthology/P18-2077
http://aclweb.org/anthology/P18-2077
https://doi.org/10.18653/v1/S15-2154
https://doi.org/10.18653/v1/S15-2154
https://doi.org/10.3115/v1/P15-1033
https://doi.org/10.3115/v1/P15-1033
https://doi.org/10.3115/v1/P15-1033
https://doi.org/10.18653/v1/S16-1186
https://doi.org/10.18653/v1/S16-1186
https://doi.org/10.18653/v1/S16-1186


3796

Jeffrey Flanigan, Sam Thomson, Jaime Carbonell,
Chris Dyer, and Noah A. Smith. 2014. A discrim-
inative graph-based parser for the abstract mean-
ing representation. In Proceedings of the 52nd An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1426–
1436. Association for Computational Linguistics.

Dan Flickinger, Valia Kordoni, and Zhang Yi. 2012.
DeepBank: A Dynamically Annotated Treebank of
the Wall Street. In Proceedings of the 11th Interna-
tional Workshop on Treebanks and Linguistic Theo-
ries, pages 85–86, Lisbon, Portugal.

James Goodman, Andreas Vlachos, and Jason Narad-
owsky. 2016. Ucl+sheffield at semeval-2016 task 8:
Imitation learning for amr parsing with an alpha-
bound. In Proceedings of the 10th International
Workshop on Semantic Evaluation (SemEval-2016),
pages 1167–1172. Association for Computational
Linguistics.

Zhijiang Guo and Wei Lu. 2018. Better transition-
based amr parsing with a refined search space. In
Proceedings of the 2018 Conference on Empirical
Methods in Natural Language Processing, pages
1712–1722. Association for Computational Linguis-
tics.

Jan Hajič, Eva Hajičová, Jarmila Panevová, Petr
Sgall, Ondřej Bojar, Silvie Cinková, Eva Fučı́ková,
Marie Mikulová, Petr Pajas, Jan Popelka, Jiřı́
Semecký, Jana Šindlerová, Jan Štěpánek, Josef
Toman, Zdeňka Urešová, and Zdeněk Žabokrtský.
2012. Announcing Prague Czech-English depen-
dency treebank 2.0. In Proceedings of the Eighth In-
ternational Conference on Language Resources and
Evaluation (LREC-2012), pages 3153–3160, Istan-
bul, Turkey. European Language Resources Associ-
ation (ELRA).

Daniel Hershcovich, Omri Abend, and Ari Rappoport.
2017. A transition-based directed acyclic graph
parser for UCCA. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1127–
1138, Vancouver, Canada. Association for Compu-
tational Linguistics.

Daniel Hershcovich, Omri Abend, and Ari Rappoport.
2018. Multitask parsing across semantic representa-
tions. In Proceedings of the 56th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers), pages 373–385, Melbourne,
Australia. Association for Computational Linguis-
tics.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Liang Huang and Kenji Sagae. 2010. Dynamic pro-
gramming for linear-time incremental parsing. In
Proceedings of the 48th Annual Meeting of the As-
sociation for Computational Linguistics, ACL ’10,

pages 1077–1086, Stroudsburg, PA, USA. Associa-
tion for Computational Linguistics.

Hans Kamp and Uwe Reyle. 1993. From Discourse to
Logic. Dordrecht: Kluwer Academic Publishers.

Yoon Kim, Yacine Jernite, David Sontag, and Alexan-
der M. Rush. 2016. Character-aware neural lan-
guage models. In Proceedings of the Thirtieth AAAI
Conference on Artificial Intelligence, AAAI’16,
pages 2741–2749. AAAI Press.

Ioannis Konstas, Srinivasan Iyer, Mark Yatskar, Yejin
Choi, and Luke Zettlemoyer. 2017. Neural amr:
Sequence-to-sequence models for parsing and gen-
eration. In Proceedings of the 55th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 146–157. Associa-
tion for Computational Linguistics.

Matthias Lindemann, Jonas Groschwitz, and Alexan-
der Koller. 2019. Compositional semantic parsing
across graphbanks. In Proceedings of the 57th An-
nual Meeting of the Association for Computational
Linguistics, pages 4576–4585, Florence, Italy. Asso-
ciation for Computational Linguistics.

Chunchuan Lyu and Ivan Titov. 2018. Amr parsing
as graph prediction with latent alignment. In Pro-
ceedings of the 56th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 397–407. Association for Computa-
tional Linguistics.

Jonathan May. 2016. SemEval-2016 task 8: Mean-
ing representation parsing. In Proceedings of the
10th International Workshop on Semantic Evalua-
tion (SemEval-2016), pages 1063–1073, San Diego,
California. Association for Computational Linguis-
tics.

Jonathan May and Jay Priyadarshi. 2017. SemEval-
2017 task 9: Abstract meaning representation
parsing and generation. In Proceedings of the
11th International Workshop on Semantic Evalua-
tion (SemEval-2017), pages 536–545, Vancouver,
Canada. Association for Computational Linguistics.

Yusuke Miyao and Jun’ichi Tsujii. 2004. Deep lin-
guistic analysis for the accurate identification of
predicate-argument relations. In Proceedings of
Coling 2004, pages 1392–1398, Geneva, Switzer-
land. COLING.

Tahira Naseem, Abhishek Shah, Hui Wan, Radu Flo-
rian, Salim Roukos, and Miguel Ballesteros. 2019.
Rewarding Smatch: Transition-based AMR parsing
with reinforcement learning. In Proceedings of the
57th Annual Meeting of the Association for Com-
putational Linguistics, pages 4586–4592, Florence,
Italy. Association for Computational Linguistics.

Joakim Nivre. 2004. Incrementality in deterministic
dependency parsing. In Proceedings of the Work-
shop on Incremental Parsing: Bringing Engineer-
ing and Cognition Together, IncrementParsing ’04,

https://doi.org/10.3115/v1/P14-1134
https://doi.org/10.3115/v1/P14-1134
https://doi.org/10.3115/v1/P14-1134
https://doi.org/10.18653/v1/S16-1180
https://doi.org/10.18653/v1/S16-1180
https://doi.org/10.18653/v1/S16-1180
http://aclweb.org/anthology/D18-1198
http://aclweb.org/anthology/D18-1198
http://www.lrec-conf.org/proceedings/lrec2012/pdf/510_Paper.pdf
http://www.lrec-conf.org/proceedings/lrec2012/pdf/510_Paper.pdf
https://doi.org/10.18653/v1/P17-1104
https://doi.org/10.18653/v1/P17-1104
https://www.aclweb.org/anthology/P18-1035
https://www.aclweb.org/anthology/P18-1035
http://dl.acm.org/citation.cfm?id=1858681.1858791
http://dl.acm.org/citation.cfm?id=1858681.1858791
http://dl.acm.org/citation.cfm?id=3016100.3016285
http://dl.acm.org/citation.cfm?id=3016100.3016285
https://doi.org/10.18653/v1/P17-1014
https://doi.org/10.18653/v1/P17-1014
https://doi.org/10.18653/v1/P17-1014
https://www.aclweb.org/anthology/P19-1450
https://www.aclweb.org/anthology/P19-1450
http://aclweb.org/anthology/P18-1037
http://aclweb.org/anthology/P18-1037
https://doi.org/10.18653/v1/S16-1166
https://doi.org/10.18653/v1/S16-1166
https://doi.org/10.18653/v1/S17-2090
https://doi.org/10.18653/v1/S17-2090
https://doi.org/10.18653/v1/S17-2090
https://www.aclweb.org/anthology/C04-1204
https://www.aclweb.org/anthology/C04-1204
https://www.aclweb.org/anthology/C04-1204
https://www.aclweb.org/anthology/P19-1451
https://www.aclweb.org/anthology/P19-1451
http://dl.acm.org/citation.cfm?id=1613148.1613156
http://dl.acm.org/citation.cfm?id=1613148.1613156


3797

pages 50–57, Stroudsburg, PA, USA. Association
for Computational Linguistics.

Joakim Nivre, Marie-Catherine de Marneffe, Filip Gin-
ter, Yoav Goldberg, Jan Hajic, Christopher D. Man-
ning, Ryan McDonald, Slav Petrov, Sampo Pyysalo,
Natalia Silveira, Reut Tsarfaty, and Daniel Zeman.
2016. Universal dependencies v1: A multilingual
treebank collection. In Proceedings of the Tenth In-
ternational Conference on Language Resources and
Evaluation (LREC 2016).

Rik van Noord and Johan Bos. 2017. Neural semantic
parsing by character-based translation: Experiments
with abstract meaning representations. Computa-
tional Linguistics in the Netherlands Journal, 7:93–
108.

Stephan Oepen, Marco Kuhlmann, Yusuke Miyao,
Daniel Zeman, Silvie Cinkova, Dan Flickinger, Jan
Hajic, and Zdenka Uresova. 2015. SemEval 2015
task 18: Broad-coverage semantic dependency pars-
ing. In Proceedings of the 9th International Work-
shop on Semantic Evaluation (SemEval 2015), pages
915–926, Denver, Colorado. Association for Com-
putational Linguistics.

Stephan Oepen, Marco Kuhlmann, Yusuke Miyao,
Daniel Zeman, Dan Flickinger, Jan Hajic, Angelina
Ivanova, and Yi Zhang. 2014. SemEval 2014 task
8: Broad-coverage semantic dependency parsing. In
Proceedings of the 8th International Workshop on
Semantic Evaluation (SemEval 2014), pages 63–72,
Dublin, Ireland. Association for Computational Lin-
guistics.

Stephan Oepen and Jan Tore Lønning. 2006.
Discriminant-based MRS banking. In Proceedings
of the Fifth International Conference on Language
Resources and Evaluation (LREC’06), Genoa,
Italy. European Language Resources Association
(ELRA).

Hao Peng, Sam Thomson, and Noah A. Smith. 2017a.
Deep multitask learning for semantic dependency
parsing. In Proceedings of the 55th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 2037–2048. Asso-
ciation for Computational Linguistics.

Hao Peng, Sam Thomson, Swabha Swayamdipta, and
Noah A. Smith. 2018. Learning joint semantic
parsers from disjoint data. In Proceedings of the
2018 Conference of the North American Chapter of
the Association for Computational Linguistics: Hu-
man Language Technologies, Volume 1 (Long Pa-
pers), pages 1492–1502, New Orle/ans, Louisiana.
Association for Computational Linguistics.

Xiaochang Peng, Linfeng Song, and Daniel Gildea.
2015. A synchronous hyperedge replacement gram-
mar based approach for AMR parsing. In Proceed-
ings of the Nineteenth Conference on Computational
Natural Language Learning, pages 32–41, Beijing,
China. Association for Computational Linguistics.

Xiaochang Peng, Chuan Wang, Daniel Gildea, and Ni-
anwen Xue. 2017b. Addressing the data sparsity
issue in neural amr parsing. In Proceedings of the
15th Conference of the European Chapter of the As-
sociation for Computational Linguistics: Volume 1,
Long Papers, pages 366–375. Association for Com-
putational Linguistics.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 1532–1543. Associa-
tion for Computational Linguistics.

Michael Pust, Ulf Hermjakob, Kevin Knight, Daniel
Marcu, and Jonathan May. 2015. Parsing english
into abstract meaning representation using syntax-
based machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natural
Language Processing, pages 1143–1154. Associa-
tion for Computational Linguistics.

Abigail See, Peter J. Liu, and Christopher D. Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1073–
1083. Association for Computational Linguistics.

M. Steedman. 1996. Surface Structure and Interpreta-
tion. Linguistic inquiry monographs. MIT Press.

M. Steedman. 2001. The Syntactic Process. A Brad-
ford book. MIT Press.

Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe,
Jon Shlens, and Zbigniew Wojna. 2016. Rethink-
ing the inception architecture for computer vision.
In Proceedings of the IEEE conference on computer
vision and pattern recognition, pages 2818–2826.

Chuan Wang, Sameer Pradhan, Xiaoman Pan, Heng
Ji, and Nianwen Xue. 2016. Camr at semeval-2016
task 8: An extended transition-based amr parser. In
Proceedings of the 10th International Workshop on
Semantic Evaluation (SemEval-2016), pages 1173–
1178. Association for Computational Linguistics.

Chuan Wang and Nianwen Xue. 2017. Getting the
most out of amr parsing. In Proceedings of the
2017 Conference on Empirical Methods in Natural
Language Processing, pages 1257–1268. Associa-
tion for Computational Linguistics.

Chuan Wang, Nianwen Xue, and Sameer Pradhan.
2015. A transition-based algorithm for amr parsing.
In Proceedings of the 2015 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 366–375. Association for Computational Lin-
guistics.

Yuxuan Wang, Wanxiang Che, Jiang Guo, and Ting
Liu. 2018. A neural transition-based approach for
semantic dependency graph parsing. In AAAI Con-
ference on Artificial Intelligence.

http://www.petrovi.de/data/lrec16.pdf
http://www.petrovi.de/data/lrec16.pdf
https://doi.org/10.18653/v1/S15-2153
https://doi.org/10.18653/v1/S15-2153
https://doi.org/10.18653/v1/S15-2153
https://doi.org/10.3115/v1/S14-2008
https://doi.org/10.3115/v1/S14-2008
http://www.lrec-conf.org/proceedings/lrec2006/pdf/364_pdf.pdf
https://doi.org/10.18653/v1/P17-1186
https://doi.org/10.18653/v1/P17-1186
https://doi.org/10.18653/v1/N18-1135
https://doi.org/10.18653/v1/N18-1135
https://doi.org/10.18653/v1/K15-1004
https://doi.org/10.18653/v1/K15-1004
http://aclweb.org/anthology/E17-1035
http://aclweb.org/anthology/E17-1035
https://doi.org/10.3115/v1/D14-1162
https://doi.org/10.3115/v1/D14-1162
https://doi.org/10.18653/v1/D15-1136
https://doi.org/10.18653/v1/D15-1136
https://doi.org/10.18653/v1/D15-1136
https://doi.org/10.18653/v1/P17-1099
https://doi.org/10.18653/v1/P17-1099
https://books.google.com/books?id=Mh1vQgAACAAJ
https://books.google.com/books?id=Mh1vQgAACAAJ
https://books.google.com/books?id=z2YwnwEACAAJ
https://doi.org/10.18653/v1/S16-1181
https://doi.org/10.18653/v1/S16-1181
https://doi.org/10.18653/v1/D17-1129
https://doi.org/10.18653/v1/D17-1129
https://doi.org/10.3115/v1/N15-1040
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16549
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16549


3798

Aaron Steven White, Drew Reisinger, Keisuke Sak-
aguchi, Tim Vieira, Sheng Zhang, Rachel Rudinger,
Kyle Rawlins, and Benjamin Van Durme. 2016.
Universal decompositional semantics on universal
dependencies. In Proceedings of the 2016 Confer-
ence on Empirical Methods in Natural Language
Processing, pages 1713–1723, Austin, Texas. Asso-
ciation for Computational Linguistics.

Sheng Zhang, Xutai Ma, Kevin Duh, and Benjamin
Van Durme. 2019. AMR parsing as sequence-to-
graph transduction. In Proceedings of the 57th An-
nual Meeting of the Association for Computational
Linguistics, pages 80–94, Florence, Italy. Associa-
tion for Computational Linguistics.

Sheng Zhang, Xutai Ma, Rachel Rudinger, Kevin Duh,
and Benjamin Van Durme. 2018. Cross-lingual de-
compositional semantic parsing. In Proceedings of
the 2018 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1664–1675, Brus-
sels, Belgium. Association for Computational Lin-
guistics.

Junsheng Zhou, Feiyu Xu, Hans Uszkoreit, Weiguang
QU, Ran Li, and Yanhui Gu. 2016. Amr parsing
with an incremental joint model. In Proceedings of
the 2016 Conference on Empirical Methods in Nat-
ural Language Processing, pages 680–689. Associ-
ation for Computational Linguistics.

https://doi.org/10.18653/v1/D16-1177
https://doi.org/10.18653/v1/D16-1177
https://www.aclweb.org/anthology/P19-1009
https://www.aclweb.org/anthology/P19-1009
https://doi.org/10.18653/v1/D18-1194
https://doi.org/10.18653/v1/D18-1194
https://doi.org/10.18653/v1/D16-1065
https://doi.org/10.18653/v1/D16-1065

