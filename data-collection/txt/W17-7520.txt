



















































Proceedings of the...


S Bandyopadhyay, D S Sharma and R Sangal. Proc. of the 14th Intl. Conference on Natural Language Processing, pages 155–164,
Kolkata, India. December 2017. c©2016 NLP Association of India (NLPAI)

Unsupervised Separation of Transliterable and
Native Words for Malayalam

Deepak P
Queen’s University Belfast, UK

deepaksp@acm.org

Abstract

Differentiating intrinsic language words
from transliterable words is a key step
aiding text processing tasks involving dif-
ferent natural languages. We consider
the problem of unsupervised separation of
transliterable words from native words for
text in Malayalam language. Outlining a
key observation on the diversity of char-
acters beyond the word stem, we develop
an optimization method to score words
based on their nativeness. Our method re-
lies on the usage of probability distribu-
tions over character n-grams that are re-
fined in step with the nativeness scorings
in an iterative optimization formulation.
Using an empirical evaluation, we illus-
trate that our method, DTIM, provides sig-
nificant improvements in nativeness scor-
ing for Malayalam, establishing DTIM as
the preferred method for the task.

1 Introduction

Malayalam is an agglutinative language from the
southern Indian state of Kerala where it is the of-
ficial state language. It is spoken by 38 million
native speakers, three times as many speakers as
Hungarian (Vincze et al., 2013) or Greek (Ntoulas
et al., 2001), for which specialized techniques
have been developed in other contexts. The grow-
ing web presence of Malayalam necessitates au-
tomatic techniques to process Malayalam text. A
major hurdle in harnessing Malayalam text from
social and web media for multi-lingual retrieval
and machine translation is the presence of a large
amount of transliterable words. By transliterable
words, we mean both (a) words (from English)
like police and train that virtually always appear
in transliterated form in contemporary Malayalam,
and (b) proper nouns such as names that need to

be transliterated than translated to correlate with
English text. On a manual analysis of a news ar-
ticle dataset, we found that transliterated words
and proper nouns each form 10-12% of all dis-
tinct words. It is useful to transliterate such words
for scenarios that involve processing Malayalam
text in the company of English text; this will avoid
them being treated as separate index terms (wrt
their transliteration) in a multi-lingual retrieval en-
gine, and help a statistical translation system to
make use of the link to improve effectiveness. In
this context, it ia notable that there has been re-
cent interest in devising specialized methods to
translate words that fall outside the core vocabu-
lary (Tsvetkov and Dyer, 2015).

In this paper, we consider the problem of sepa-
rating out such transliterable words from the other
words within an unlabeled dataset; we refer to
the latter as “native” words. We propose an un-
supervised method, DTIM, that takes a dictio-
nary of distinct words from a Malayalam corpus
and scores each word based on their nativeness.
Our optimization method, DTIM, iteratively re-
fines the nativeness scoring of each word, leverag-
ing dictionary-level statistics modelled using char-
acter n-gram probability distributions. Our empiri-
cal analysis establishes the effectiveness of DTIM.

We outline related work in the area in Section 2.
This is followed by the problem statement in Sec-
tion 3 and the description of our proposed ap-
proach in Section 4. Our empirical analysis forms
Section 5 followed by conclusions in Section 7.

2 Related Work

Identification of transliterable text fragments, be-
ing a critical task for cross-lingual text analysis,
has attracted attention since the 1990s. While
most methods addressing the problem have used
supervised learning, there have been some meth-
ods that can work without labeled data. We briefly
survey both classes of methods.155



2.1 Supervised and ‘pseudo-supervised’
Methods

An early work(Chen and Lee, 1996) focuses on a
sub-problem, that of supervised identification of
proper nouns for Chinese. (Jeong et al., 1999)
consider leveraging decision trees to address the
related problem of learning transliteration and
back-transliteration rules for English/Korean word
pairs. Recognizing the costs of procuring train-
ing data, (Baker and Brew, 2008) and (Gold-
berg and Elhadad, 2008) explore usage of pseudo-
transliterable words generated using translitera-
tion rules on an English dictionary for Korean and
Hebrew respectively. Such pseudo-supervision,
however, would not be able to generate uncommon
domain-specific terms such as medical/scientific
terminology for usage in such domains (unless
specifically tuned), and is hence limited in utility.

2.2 Unsupervised Methods

A recent work proposes that multi-word phrases
in Malayalam text where their component words
exhibit strong co-occurrence be categorized as
transliterable phrases (Prasad et al., 2014). Their
intuition stems from observing contiguous words
such as test dose which often occur in translit-
erated form while occurring together, but get re-
placed by native words in other contexts. Their
method is however unable to identify single
transliterable words, or phrases involving words
such as train and police whose transliterations are
heavily used in the company of native Malayalam
words. A recent method for Korean (Koo, 2015)
starts by identifying a seed set of transliterable
words as those that begin or end with consonant
clusters and have vowel insertions; this is spe-
cific to Korean since Korean words apparently do
not begin or end with consonant clusters. High-
frequency words are then used as seed words for
native Korean for usage in a Naive Bayes classi-
fier. In addition to the outlined reasons that make
both the unsupervised methods inapplicable for
our task, they both presume availability of corpus
frequency statistics. We focus on a general sce-
nario assuming the availability of only a word lex-
icon.

2.3 Positioning the Transliterable Word
Identification Task

Nativeness scoring of words may be seen as a vo-
cabulary stratification step (upon usage of thresh-

olds) for usage by downstream applications. A
multi-lingual text mining application that uses
Malayalam and English text would benefit by
transliterating non-native Malayalam words to En-
glish, so the transliterable Malayalam token and
its transliteration is treated as the same token.
For machine translation, transliterable words may
be channeled to specialized translation methods
(e.g., (Tsvetkov and Dyer, 2015)) or for manual
screening and translation.

3 Problem Definition

We now define the problem more formally. Con-
sider n distinct words obtained from Malayalam
text, W = {. . . , w, . . .}. Our task is to devise
a technique that can use W to arrive at a native-
ness score for each word, w, within it, as wn. We
would like wn to be an accurate quantification of
native-ness of word w. For example, when words
in W are ordered in the decreasing order of wn
scores, we expect to get the native words at the
beginning of the ordering and vice versa. We do
not presume availability of any data other thanW;
this makes our method applicable across scenar-
ios where corpus statistics are unavailable due to
privacy or other reasons.

3.1 Evaluation

Given that it is easier for humans to crisply classify
each word as either native or transliterable (nouns
or transliterated english words) in lieu of attaching
a score to each word, the nativeness scoring (as
generated by a scoring method such as ours) often
needs to be evaluated against a crisp nativeness as-
sessment, i.e., a scoring with scores in {0, 1}. To
aid this, we consider the ordering of words in the
labeled set in the decreasing (or more precisely,
non-increasing) order of nativeness scores (each
method produces an ordering for the dataset). To
evaluate this ordering, we use two sets of metrics
for evaluation:

• Precision at the ends of the ordering: Top-
k precision denotes the fraction of native
words within the k words at the top of the
ordering; analogously, Bottom-k precision
is the fraction of transliterable words among
the bottom k. Since a good scoring would
likely put native words at the top of the order-
ing and the transliterable ones at the bottom, a
good scoring method would intuitively score156



high on both these metrics. We call the aver-
age of the top-k and bottom-k precision for a
given k, as Avg-k precision. These measures,
evaluated at varying values of k, indicate the
quality of the nativeness scoring.

• Clustering Quality: Consider the cardinal-
ities of the native and transliterable words
from the labeled set as being N and T re-
spectively. We now take the top-N words and
bottom-T words from the ordering generated
by each method, and compare against the re-
spective labeled sets as in the case of stan-
dard clustering quality evaluation1. Since the
cardinalities of the generated native (translit-
erable) cluster and the native (transliterable)
labeled set is both N (T ), the Recall of the
cluster is identical to its Purity/Precision,
and thus, the F-measure too; we simply
call it Clustering Quality. A cardinality-
weighted average of the clustering quality
across the native and transliterable clusters
yields a single value for the clustering quality
across the dataset. It may be noted that we are
not making the labeled dataset available to
the method generating the ordering, instead
merely using it’s cardinalities for evaluation
purposes.

4 Our Method: DTIM

We now introduce our method, Diversity-based
Transliterable Word Identification for Malayalam
(DTIM). We use probability distributions over
character n-grams to separately model transliter-
able and native words, and develop an optimiza-
tion framework that alternatively refines the n-
gram distributions and nativeness scoring within
each iteration. DTIM involves an initialization
that induces a “coarse” separation between na-
tive and transliterable words followed by iterative
refinement. The initialization is critical in opti-
mization methods that are vulnerable to local op-
tima; the pure word distribution needs to be initial-
ized to “coarsely” prefer pure words over translit-
erable words. This will enable further iterations
to exploit the initial preference direction to fur-
ther refine the model to “attract” the pure words
more strongly and weaken any initial preference to
transliterable words. The vice versa holds for the
transliterable word models. We will first outline

1
https://nlp.stanford.edu/IR-book/html/

htmledition/evaluation-of-clustering-1.html

the initialization step followed by the description
of the method.

4.1 Diversity-based Initialization
Our initialization is inspired by an observation on
the variety of suffixes attached to a word stem.
Consider a word stem |pu|ra|2, a stem commonly
leading to native Malayalam words; its suffixes
are observed to start with a variety of charac-
ters such as |ttha| (e.g., |pu|ra|ttha|kki|), |me|
(e.g., |pu|ra|me|), |mbo| (e.g., |pu|ra|mbo|kku|)
and |ppa| (e.g., |pu|ra|ppa|du|). On the other hand,
stems that mostly lead to transliterable words of-
ten do not exhibit so much of diversity. For exam-
ple, |re|so| is followed only by |rt| (i.e., resort) and
|po|li| is usually only followed by |s| (i.e., police).
Some stems such as |o|ppa| lead to transliterations
of two English words such as open and operation.
Our observation, upon which we model the initial-
ization, is that the variety of suffixes is generally
correlated with native-ness (i.e., propensity to lead
to a native word) of word stems. This is intuitive
since non-native word stems provide limited flex-
ibility to being modified by derivational or inflec-
tional suffixes as compared to native ones.

For simplicity, we use the first two characters of
each word as the word stem; we will evaluate the
robustness of DTIM to varying stem lengths in our
empirical evaluation, while consistently using the
stem length of two characters in our description.
We start by associating each distinct word stem in
W with the number of unique third characters that
follow it (among words in W); in our examples,
|pu|ra| and |o|pa| would be associated with 4 and 2
respectively. We initialize the native-ness weights
as proportional to the diversity of 3rd characters
beyond the stem:

wn0 = min

{
0.99,

|u3(wstem,W)|
τ

}
(1)

where u3(wstem,W) denotes the set of third char-
acters that follow the stem of word w among
words in W . We flatten off wn0 scores beyond
a diversity of τ (note that a diversity of τ or
higher will lead to the second term becoming 1.0
or higher, kicking in the min function to choose
0.99 for wn0) as shown in the above equation.

2We will represent Malayalam words in transliterated form for reading
by those who might not be able to read Malayalam. A pipe would separate
Malayalam characters; for example |pu| corresponds to a single Malayalam
character.157



We give a small transliterable-ness weight even to
highly diverse stems to reduce over-reliance on the
initialization. We set τ = 10 based on our obser-
vation from the dataset that most word stems hav-
ing more than 10 distinct characters were seen to
be native. As in the case of word stem length, we
study DTIM trends across varying τ in our empir-
ical analysis. wn0 is in [0, 1]; analogously, (1 −
wn0) may be regarded as a score of transliterable-
ness.

4.2 Objective Function and Optimization
Framework

As outlined earlier, we use separate character n-
gram probability distributions to model native and
transliterable words. We would like these proba-
bility distributions support the nativeness scoring,
and vice versa. While the size of the n-grams (i.e.,
whether n = 1, 2, 3 or 4) is a system-level param-
eter, we use n = 1 for simplicity in our descrip-
tion. We denote the native and transliterable dis-
tributions asN and T respectively, withN (c) and
T (c) denoting the weight associated with the char-
acter c according to the distributions. Consider the
following function, given a particular state for the
N , T and wns:

∏

w∈W

∏

c∈w

(
w2n×N (c)+ (1−wn)2×T (c)

)
(2)

This measures the aggregate supports for words
in W , the support for each word measured as an
interpolated support from across the distributions
N and T with weighting factors squares of the
nativeness scores (i.e., wns) and transliterableness
scores (i.e., (1− wn)s) respectively. Similar mix-
ing models have been used earlier in emotion lex-
icon learning (Bandhakavi et al., 2014) and so-
lution post discovery (Deepak and Visweswariah,
2014). The squares of the nativeness scores are
used in our model (instead of the raw scores) for
optimization convenience. A highly native word
should intuively have a high wn (nativeness) and
a high support from N and correspondingly low
transliterable-ness (i.e., (1 − wn)) and support
from T ; a highly transliterable word would be ex-
pected to have exactly the opposite. Due to the de-
sign of Eq. 2 in having the higher terms multiplied
with each other (and so for the lower terms), this
function would be maximized for a desirable esti-
mate of the variables θ = {N , T , {. . . , wn, . . .}}.

Conversely, by striving to maximize the objective
function, we would arrive at a desirable estimate
of the variables. An alternative construction yield-
ing a minimizing objective would be as follows:

∏

w∈W

∏

c∈w

(
(1−wn)2×N (c)+w2n×T (c)

)
(3)

In this form, given a good estimate of the vari-
ables, the native (transliterable) words have their
nativeness (transliterableness) weights multiplied
with the support from the transliterable (native)
models. In other words, maximizing the objective
in Eq. 2 is semantically similar to minimizing the
objective in Eq. 3. As we will illustrate soon, it
is easier to optimize for N and T using the maxi-
mizing formulation in Eq. 2 while the minimizing
objective in Eq. 3 yields better to optimize for the
word nativeness scores, {. . . , wn, . . .}.

4.3 Learning N and T using the Maximizing
Objective

We start by taking the log-form of the objective in
Eq. 2 (this does not affect the optimization direc-
tion), yielding:

Omax =
∑

w∈W

∑

c∈w
ln

(
w2n×N (c)+(1−wn)2×T (c)

)

(4)
The distributions, being probability distribu-

tions over n-grams, should sum to zero. This con-
straint, for our unigram models, can be written as:

∑

c

N (c) =
∑

c

T (c) = 1 (5)

Fixing the values of {. . . , wn, . . .} and T (or
N ), we can now identify a better estimate for N
(or T ) by looking for an optima (i.e., where the
objective function has a slope of zero). Towards
that, we take the partial derivative (or slope) of the
objective for a particular character. :

∂Omax
∂N (c′) =

( ∑

w∈W

freq(c′, w)× w2n(
w2nN (c′) + (1− wn)2T (c′)

)
)
+λN

(6)
where freq(c′, w) is the frequency of the char-

acter c′ inw and λN denotes the Lagrangian multi-
plier corresponding to the sum-to-unity constraint
for N . Equating this to zero does not however158



yield a closed form solution for N ′, but a simple
re-arrangement yields an iterative update formula:

N (c′) ∝
∑

w∈W

freq(c′, w)× w2n(
w2n + (1− wn)2 T (c

′)
NP (c′)

) (7)

The N term in the RHS is denoted as NP
to indicate the usage of the previous estimate of
N . The sum-to-one constraint is trivially achieved
by first estimating the N (c′)s by treating Eq. 7
as equality, followed by normalizing the scores
across the character vocabulary. Eq. 7 is intuitively
reasonable, due to establishing a somewhat direct
relationship between N and wn (in the numer-
ator), thus allowing highly native words to con-
tribute more to buildingN . The analogous update
formula for T fixing N turns out to be:

T (c′) ∝
∑

w∈W

freq(c′, w)× (1− wn)2(
(1− wn)2 + w2n N (c

′)
TP (c′)

) (8)

Eq. 7 and Eq. 8 would lead us closer to a max-
ima for Eq. 4 is their second (partial) derivatives
are negative3. To verify this, we note that the sec-
ond (partial) derivative wrt N (c′) is as follows

∂2Omax
∂2N (c′) =

(−1)×
∑

w∈W

freq(c′, w)(w2n)
2

(
w2nN (c′) + (1− wn)2T (c′)

)2 (9)

It is easy to observe that the RHS is a prod-
uct of −1 and a sum of a plurality of positive
terms (square terms that are trivially positive, with
the exception being the freq(., .) term which is
also non-negative by definition), altogether yield-
ing a negative value. That the the second (partial)
derivative is negative confirms that the update for-
mula derived from the first partial derivative in-
deed helps in maximizing Omax wrt N (c′). A
similar argument holds for the T (c′) updates as
well, which we omit for brevity.

3http://mathworld.wolfram.com/
SecondDerivativeTest.html

4.4 Learning the nativeness scores,
{. . . , wn, . . .}, using the Minimizing
Objective

Analogous to the previous section, we take the
log-form of Eq. 3:

Omin =
∑

w∈W

∑

c∈w
ln

(
(1−wn)2×N (c)+w2n×T (c)

)

(10)
Unlike the earlier case, we do not have any con-

straints since the sum-to-unit constraint on the na-
tiveness and transliterableness scores are built in
into the construction. We now fix the values of all
other variables and find the slope wrt w′n, where
w′ indicates a particular word inW .

∂Omin
∂w′n

=
∑

c∈w′

2w′nT (c) + 2w′nN (c)− 2N (c)(
w′2n T (c) + (1− w′n)2N (c)

)

(11)
We equate the slope to zero and form an itera-

tive update formula, much like in the distribution
estimation phase.

w′n =

∑
c∈w′

N (c)
(w′2n T (c)+(1−w′n)2N (c))∑

c∈w′
N (c)+T (c)

(w′2n T (c)+(1−w′n)2N (c))
(12)

Using the previous estimates of w′n for the RHS
yields an iterative update form for the nativeness
scores. As in the model estimation phase, the up-
date rule establishes a reasonably direct relation-
ship between w′n and N . Since our objective is
to minimize Omin, we would like to verify the
direction of optimization using the second partial
derivative.

∂2Omin
∂2w′n

=

∑

c∈w′

N (c)T (c)−
(
w′nT (c)− (1− w′n)N (c)

)2
(
w′2n T (c) + (1− w′n)2N (c)

)2
(13)

We provide an informal argument for the pos-
itivity of the second derivative; note that the de-
nominator is a square term making it enough to
analyze just the numerator term. Consider a highly
native word (high w′n) whose characters would in-
tuitively satisfy N (c) > T (c). For the bound-
ary case of w′n = 1, the numerator term reduces159



to T (c) × (N (c) − T (c)) which would be posi-
tive given the expected relation betweenN (c) and
T (c). A similar argument holds for highly translit-
erable words. For words with w′n → 0.5 where we
would expect N (c) ≈ T (c), the numerator be-
comesN (c)T (c)−0.25(T (c)−N (c))2, which is
expected to be positive since the difference term
is small, making it’s square very small in com-
parison to the first product term. To outline the
informal nature of the argument, it may be noted
that T (c) > N (c) may hold for certain characters
within highly native words; but as long as most
of the characters within highly native words sat-
isfy the N (c) > T (c), there would be sufficient
positivity to offset the negative terms induced with
such outlier characters.

Algorithm 1: DTIM
Input: A set of Malayalam words,W
Output: A nativeness scoring wn ∈ [0, 1] for

every word w inW
Hyper-parameters: word stem length, τ , n
Initialize the wn scores for each word using
the diversity metric in Eq. 1 using the chosen
stem length and τ

while not converged and number of iterations
not reached do

Estimate n-gram distributions N and T
using Eq. 7 and Eq. 8 respectively

Learn nativeness weights for each word
using Eq. 12

end
return latest estimates of nativeness weights

4.5 DTIM: The Method

Having outlined the learning steps, the method
is simply an iterative usage of the learning steps
as outlined in Algorithm 1. In the first invoca-
tion of the distribution learning step where previ-
ous estimates are not available, we simply assume
a uniform distribution across the n-gram vocab-
ulary for usage as the previous estimates. Each
of the update steps are linear in the size of the
dictionary, making DTIM a computationally light-
weight method. Choosing n = 2 instead of uni-
grams (as used in our narrative) is easy since that
simply involves replacing the c ∈ w all across the
update steps by [ci, ci+1] ∈ w with [ci, ci+1] de-
noting pairs of contiguous characters within the
word; similarly, n = 3 involves usage of contigu-

ous character triplets and correspondingly learning
the distributionsN and T over triplets. The DTIM
structure is evidently inspired by the Expectation-
Maximization framework (Dempster et al., 1977)
involving alternating optimizations of an objective
function; DTIM, however, uses different objective
functions for the two steps for optimization conve-
nience.

5 Experiments

We now describe our empirical study of DTIM,
starting with the dataset and experimental setup
leading on to the results and analyses.

5.1 Dataset
We evaluate DTIM on a set of 65068 distinct
words from across news articles sourced from
Mathrubhumi4, a popular Malayalam newspaper;
this word list is made available publicly5. For eval-
uation purposes, we got a random subset of 1035
words labeled by one of three human annotators;
that has been made available publicly6 too, each
word labeled as either native, transliterable or un-
known. There were approximately 3 native words
for every transliterable word in the labeled set,
reflective of distribution in contemporary Malay-
alam usage as alluded to in the introduction. We
will use the whole set of 65068 words as input to
the method, while the evaluation would obviously
be limited to the labelled subset of 1035 words.

5.2 Baselines
As outlined in Section 2, the unsupervised ver-
sion of the problem of telling apart native and
transliterable words for Malayalam and/or simi-
lar languages has not been addressed in literature,
to the best of our knowledge. The unsupervised
Malayalam-focused method(Prasad et al., 2014)
(Ref: Sec 2.2) is able to identify only transliter-
able word-pairs, making it inapplicable for con-
texts such as our health data scenario where in-
dividual english words are often transliterated for
want of a suitable malayalam alternative. The
Korean method(Koo, 2015) is too specific to Ko-
rean language and cannot be used for other lan-
guages due to the absence of a generic high-
precision rule to identify a seed set of transliter-
able words. With both the unsupervised state-of-
the-art approaches being inapplicable for our task,

4
http://www.mathrubhumi.com

5Dataset: https://goo.gl/DOsFES
6Labeled Set: https://goo.gl/XEVLWv160



we compare against an intuitive generalization-
based baseline, called GEN, that orders words
based on their support from the combination of
a unigram and bi-gram character language model
learnt overW; this leads to a scoring as follows:

wGENn =

∏

[ci,ci+1]∈w
λ×BW(ci+1|ci)+ (1−λ)×UW(ci+1)

(14)
where BW and UW are bigram and unigram

character-level language models built over all
words in W . We set λ = 0.8 (Smucker and Al-
lan, 2006). We experimented with higher-order
models in GEN, but observed drops in evalua-
tion measures leading to us sticking to the usage
of the unigram and bi-gram models. The form of
Eq. 14 is inspired by an assumption similar to that
used in both (Prasad et al., 2014) and (Koo, 2015)
that transliterable words are rare. Thus, we ex-
pect they would not be adequately supported by
models that generalize over whole ofW . We also
compare against our diversity-based initialization
score from Section 4.1, which we will call as
INIT. For ease of reference, we outline the INIT
scoring:

wINITn = min

{
0.99,

|u3(wstem,W)|
τ

}
(15)

The comparison against INIT enables us to iso-
late and highlight the value of the iterative update
formulation vis-a-vis the initialization.

5.3 Evaluation Measures and Setup
As outlined in Section 3, we use top-k, bottom-k
and avg-k precision (evaluated at varying values
of k) as well as clustering quality in our evalua-
tion. For the comparative evaluaton, we set DTIM
parameters as the following: τ = 10 and a word-
stem length of 2. We will study trends against vari-
ations across these parameters in a separate sec-
tion.

5.4 Experimental Results
5.4.1 Precision at the ends of the Ordering
Table 1 lists the precision measures over various
values of k. It may be noted that any instantia-
tion of DTIM (across the four values of n-gram
size, n) is able to beat the baselines convincingly

on each metric on each value of k, convincingly
establishing the effectiveness of the DTIM for-
mulation. DTIM is seen to be much more effec-
tive in separating out the native and transliterable
words at either ends of the ordering, than the base-
lines. It is also notable that EM-style iterations
are able to significantly improve upon the initial-
ization (i.e., INIT). That the bottom-k precision is
seen to be consistently lower than top-k precision
needs to be juxtaposed in the context of the ob-
servation that there were only 25% transliterable
words against 75% native words; thus, the lift in
precision against a random ordering is much more
substantial for the transliterable words. The trends
across varying n-gram sizes (i.e., n) in DTIM is
worth noting too; the higher values of n (such
as 3 and 4) are seen to make more errors at the
ends of the lists, whereas they catch-up with the
n ∈ {1, 2} versions as k increases. This indi-
cates that smaller-n DTIM is being able to tell
apart a minority of the words exceedingly well
(wrt native-ness), whereas the higher n-gram mod-
elling is able to spread out the gains across a larger
spectrum of words in W . Around n = 4 and be-
yond, sparsity effects (since 4-grams and 5-grams
would not occur frequently, making it harder to
exploit their occurrence statistics) are seen to kick
in, causing reductions in precision.

5.4.2 Clustering Quality

Table 2 lists the clustering quality metric across
the various methods. Clustering quality, unlike the
precision metrics, is designed to evaluate the entire
ordering without limiting the analysis to just the
top-k and bottom-k entries. As in the earlier case,
DTIM convincingly outperforms the baselines by
healthy margins across all values of n. Conse-
quent to the trends across n as observed earlier,
n ∈ {3, 4} are seen to deliver better accuracies,
with such gains tapering off beyond n = 4 due to
sparsity effects. The words, along with the DTIM
nativeness scores for n = 3, can be viewed at
https://goo.gl/OmhlB3 (the list excludes
words with fewer than 3 characters).

5.5 Analyzing DTIM

We now analyze the performance of DTIM across
varying values of the diversity threshold (τ ) and
word-stem lengths.161



k=50 k=100 k=150 k=200
Top-k Bot-k Avg-k Top-k Bot-k Avg-k Top-k Bot-k Avg-k Top-k Bot-k Avg-k

INIT 0.88 0.50 0.69 0.90 0.40 0.65 0.90 0.41 0.66 0.90 0.38 0.64
GEN 0.64 0.10 0.37 0.58 0.11 0.35 0.60 0.15 0.38 0.64 0.17 0.41

DTIM (n=1) 0.94 0.64 0.79 0.90 0.56 0.73 0.90 0.49 0.70 0.92 0.48 0.70
DTIM (n=2) 1.00 0.78 0.89 0.94 0.68 0.81 0.93 0.57 0.75 0.95 0.52 0.74
DTIM (n=3) 0.86 0.76 0.81 0.91 0.75 0.83 0.92 0.69 0.81 0.92 0.64 0.78
DTIM (n=4) 0.82 0.74 0.78 0.87 0.69 0.78 0.83 0.62 0.73 0.85 0.65 0.75

Table 1: Top-k and Bottom-k Precision (best result in each column highlighted)

Native Transliterable Weighted Average
INIT 0.79 0.38 0.69
GEN 0.73 0.17 0.59

DTIM (n=1) 0.81 0.44 0.72
DTIM (n=2) 0.84 0.50 0.75
DTIM (n=3) 0.86 0.60 0.79
DTIM (n=4) 0.86 0.60 0.79

Table 2: Clustering Quality (best result in each
column highlighted)

τ → 5 10 20 50 100 1000
n = 1 0.72 0.72 0.72 0.72 0.72 0.72
n = 2 0.74 0.75 0.75 0.74 0.74 0.74
n = 3 0.77 0.79 0.78 0.78 0.78 0.78
n = 4 0.78 0.79 0.79 0.79 0.79 0.79

Table 3: DTIM Clustering Quality against τ

Stem Length→ 1 2 3 4
n = 1 0.64 0.72 0.75 0.56
n = 2 0.58 0.75 0.74 0.55
n = 2 0.59 0.79 0.69 0.60
n = 2 0.58 0.79 0.69 0.62

Table 4: DTIM Clustering Quality against Word
Stem Length (best result in each row highlighted)

5.5.1 Diversity Threshold

Table 3 analyzes the clustering quality trends of
DTIM across varying values of τ . The table sug-
gests that DTIM is extremely robust to variations
in diversity threshold, despite a slight preference
towards values around 10 and 20. This suggests
that a system designer looking to use DTIM need
not carefully tune this parameter due to the inher-
ent robustness.

5.5.2 Word Stem Length

Given the nature of Malayalam language where
the variations in word lengths are not as high as
in English, it seemed very natural to use a word
stem length of 2. Moreover, very large words are
uncommon in Malayalam. In our corpus, 50%
of words were found to contain five characters
or less, the corresponding fraction being 71% for
upto seven characters. Our analysis of DTIM
across variations in word-stem length, illustrated
in Table 4 strongly supports this intuition with
clustering quality peaking at stem-length of 2 for
n ≥ 2. It is notable, however, that DTIM degrades
gracefully on either side of 2. Trends across dif-
ferent settings of word-stem length are interesting
since they may provide clues about applicability
for other languages with varying character granu-
larities (e.g., each Chinese character corresponds
to multiple characters in Latin-script).

6 Discussion

6.1 Applicability to Other Languages

In contrast to earlier work focused on specific
languages (e.g., (Koo, 2015)) that use heuristics
that are very specific to the language (such as ex-
pected patterns of consonants), DTIM heuristics
are general-purpose in design. The only heuris-
tic setting that is likely to require some tuning for
applicability in other languages is the word-stem
length. We expect the approach would generalize162



well to other Sanskrit-influenced Dravidian lan-
guages such as Kannada/Telugu. Unfortunately,
we did not have any Kannada/Telugu/Kodava
knowledge (Dravidian languages have largely dis-
joint speaker-populations) in our team, or ac-
cess to labelled datasets in those languages (they
are low-resource languages too); testing this on
Kannada/Telugu/Tamil would be interesting future
work. The method is expected to be less appli-
cable to English, the language being significantly
different and with potentially fewer transliterable
words.

6.2 DTIM in an Application Context

Within any target application context, machine-
labelled transliterable words (and their automati-
cally generated transliterations) may need to man-
ual screening for accountability reasons. The
high accuracy at either ends of the ordering lends
itself to be exploited in the following fashion;
in lieu of employing experts to verify all la-
bellings/transliterations, low-expertise volunteers
(e.g., students) can be called in to verify labellings
at the ends (top/bottom) of the lists with experts
focusing on the middle (more ambiguous) part of
the list; this frees up experts’ time as against a
cross-spectrum expert-verification process, lead-
ing to direct cost savings. We also expect that
DTIM followed by automatic transliterations of
bottom-k words would aid in retrieval and ma-
chine translation scenarios.

7 Conclusions and Future Work

We considered the problem of unsupervised sepa-
ration of transliterable and native words in Malay-
alam, a critical task in easing automated process-
ing of Malayalam text in the company of other
language text. We outlined a key observation on
the differential diversity beyond word stems, and
formulated an initialization heuristic that would
coarsely separate native and transliterable words.
We proposed the usage of probability distribu-
tions over character n-grams as a way of separately
modelling native and transliterable words. We
then formulated an iterative optimization method
that alternatively refines the nativeness scorings
and probability distributions. Our technique for
the problem, DTIM, that encompasses the initial-
ization and iterative refinement, was seen to sig-
nificantly outperform other unsupervised baseline
methods in our empirical study. This establishes

DTIM as the preferred method for the task. We
have also released our datasets and labeled sub-
set to help aid future research on this and related
tasks.

7.1 Future Work

The applicability of DTIM to other Dravidian lan-
guages is interesting to study. Due to our lack
of familiarity with any other language in the fam-
ily, we look forward to contacting other groups to
further the generalizability study. While native-
ness scoring improvements directly translate to re-
duction of effort for manual downstream process-
ing, quantifying gains these bring about in transla-
tion and retrieval is interesting future work. Ex-
ploring the relationship/synergy of this task and
Sandhi splitting (Natarajan and Charniak, 2011)
would form another interesting direction for future
work. Further, we would like to develop methods
to separate out the two categories of transliterable
words, viz., foreign language words and proper
nouns. Such a method would enable a more fine-
grained stratification of the vocabulary.

Transliterable words are often within Malay-
alam used to refer to very topical content, for
which suitable words are harder to find. Thus,
transliterable words could be preferentially treated
towards building rules in interpretable cluster-
ing (Balachandran et al., 2012) and for modelling
context in regex-oriented rule-based information
extraction (Murthy et al., 2012). Transliterable
words might also hold cues for detecting segment
boundaries in conversational transcripts (Kumma-
muru et al., 2009; Padmanabhan and Kumma-
muru, 2007).

References
[Baker and Brew2008] Kirk Baker and Chris Brew.

2008. Statistical identification of english loanwords
in korean using automatically generated training
data. In LREC. Citeseer.

[Balachandran et al.2012] Vipin Balachandran,
P Deepak, and Deepak Khemani. 2012. Inter-
pretable and reconfigurable clustering of document
datasets by deriving word-based rules. Knowledge
and information systems, 32(3):475–503.

[Bandhakavi et al.2014] Anil Bandhakavi, Nirmalie
Wiratunga, P Deepak, and Stewart Massie. 2014.
Generating a word-emotion lexicon from# emo-
tional tweets. In * SEM@ COLING, pages 12–21.

[Chen and Lee1996] Hsin-Hsi Chen and Jen-Chang163



Lee. 1996. Identification and classification of
proper nouns in chinese texts. In COLING.

[Deepak and Visweswariah2014] P Deepak and
Karthik Visweswariah. 2014. Unsupervised solu-
tion post identification from discussion forums. In
ACL (1), pages 155–164.

[Dempster et al.1977] A. P. Dempster, N. M. Laird, and
D. B. Rubin. 1977. Maximum likelihood from in-
complete data via the em algorithm. Journal of the
Royal Statistical Society. Series B (Methodological),
39(1):1–38.

[Goldberg and Elhadad2008] Yoav Goldberg and
Michael Elhadad. 2008. Identification of translit-
erated foreign words in hebrew script. In Compu-
tational linguistics and intelligent text processing,
pages 466–477. Springer.

[Jeong et al.1999] Kil Soon Jeong, Sung Hyon Myaeng,
Jae Sung Leeb, and Key-Sun Choib. 1999. Auto-
matic identification and back-transliteration of for-
eign words for information retrieval. Inf. Proc. &
Mgmt., 35.

[Koo2015] Hahn Koo. 2015. An unsupervised method
for identifying loanwords in korean. Language Re-
sources and Evaluation, 49(2):355–373.

[Kummamuru et al.2009] Krishna Kummamuru,
Deepak Padmanabhan, Shourya Roy, and
L Venkata Subramaniam. 2009. Unsupervised
segmentation of conversational transcripts. Statis-
tical Analysis and Data Mining: The ASA Data
Science Journal, 2(4):231–245.

[Murthy et al.2012] Karin Murthy, P Deepak, and
Prasad M Deshpande. 2012. Improving recall of
regular expressions for information extraction. In
International Conference on Web Information Sys-
tems Engineering, pages 455–467. Springer.

[Natarajan and Charniak2011] Abhiram Natarajan and
Eugene Charniak. 2011. $sˆ3$ - statistical sandhi
splitting. In IJCNLP, pages 301–308.

[Ntoulas et al.2001] Alexandros Ntoulas, Sofia Stamou,
and Manolis Tzagarakis. 2001. Using a www
search engine to evaluate normalization perfor-
mance for a highly inflectional language. In ACL
(Companion Volume), pages 31–36.

[Padmanabhan and Kummamuru2007] Deepak Pad-
manabhan and Krishna Kummamuru. 2007.
Mining conversational text for procedures with
applications in contact centers. International
Journal on Document Analysis and Recognition,
10(3):227–238.

[Prasad et al.2014] Reshma Prasad, Mary Priya Sebas-
tian, et al. 2014. A technique to extract transliter-
ating phrases in statistical machine translation from
english to malayalam. In National Conference on
Indian Language Computing.

[Smucker and Allan2006] Mark Smucker and James
Allan. 2006. An investigation of dirichlet prior
smoothing’s performance advantage. Ir.

[Tsvetkov and Dyer2015] Yulia Tsvetkov and Chris
Dyer. 2015. Lexicon stratification for translat-
ing out-of-vocabulary words. In ACL Short Papers,
pages 125–131.

[Vincze et al.2013] Veronika Vincze, János Zsibrita,
and István Nagy. 2013. Dependency parsing for
identifying hungarian light verb constructions. In
IJCNLP, pages 207–215.

164


