



















































Multi-Task Deep Neural Networks for Natural Language Understanding


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 4487–4496
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

4487

Multi-Task Deep Neural Networks for Natural Language Understanding

Xiaodong Liu∗1, Pengcheng He∗2, Weizhu Chen2, Jianfeng Gao1
1 Microsoft Research 2 Microsoft Dynamics 365 AI
{xiaodl,penhe,wzchen,jfgao}@microsoft.com

Abstract

In this paper, we present a Multi-Task Deep
Neural Network (MT-DNN) for learning rep-
resentations across multiple natural language
understanding (NLU) tasks. MT-DNN not
only leverages large amounts of cross-task
data, but also benefits from a regularization ef-
fect that leads to more general representations
to help adapt to new tasks and domains. MT-
DNN extends the model proposed in Liu et al.
(2015) by incorporating a pre-trained bidirec-
tional transformer language model, known as
BERT (Devlin et al., 2018). MT-DNN ob-
tains new state-of-the-art results on ten NLU
tasks, including SNLI, SciTail, and eight out of
nine GLUE tasks, pushing the GLUE bench-
mark to 82.7% (2.2% absolute improvement)
1. We also demonstrate using the SNLI and Sc-
iTail datasets that the representations learned
by MT-DNN allow domain adaptation with
substantially fewer in-domain labels than the
pre-trained BERT representations. The code
and pre-trained models are publicly available
at https://github.com/namisan/mt-dnn.

1 Introduction

Learning vector-space representations of text, e.g.,
words and sentences, is fundamental to many nat-
ural language understanding (NLU) tasks. Two
popular approaches are multi-task learning and
language model pre-training. In this paper we
combine the strengths of both approaches by
proposing a new Multi-Task Deep Neural Network
(MT-DNN).

Multi-Task Learning (MTL) is inspired by hu-
man learning activities where people often apply
the knowledge learned from previous tasks to help
learn a new task (Caruana, 1997; Zhang and Yang,
2017). For example, it is easier for a person who
knows how to ski to learn skating than the one who

∗Equal Contribution.
1As of February 25, 2019 on the latest GLUE test set.

does not. Similarly, it is useful for multiple (re-
lated) tasks to be learned jointly so that the knowl-
edge learned in one task can benefit other tasks.
Recently, there is a growing interest in applying
MTL to representation learning using deep neu-
ral networks (DNNs) (Collobert et al., 2011; Liu
et al., 2015; Luong et al., 2015; Xu et al., 2018;
Guo et al., 2018; Ruder12 et al., 2019) for two
reasons. First, supervised learning of DNNs re-
quires large amounts of task-specific labeled data,
which is not always available. MTL provides an
effective way of leveraging supervised data from
many related tasks. Second, the use of multi-task
learning profits from a regularization effect via al-
leviating overfitting to a specific task, thus making
the learned representations universal across tasks.

In contrast to MTL, language model pre-
training has shown to be effective for learning
universal language representations by leveraging
large amounts of unlabeled data. A recent sur-
vey is included in Gao et al. (2018). Some of
the most prominent examples are ELMo (Peters
et al., 2018), GPT (Radford et al., 2018) and BERT
(Devlin et al., 2018). These are neural network
language models trained on text data using unsu-
pervised objectives. For example, BERT is based
on a multi-layer bidirectional Transformer, and is
trained on plain text for masked word prediction
and next sentence prediction tasks. To apply a
pre-trained model to specific NLU tasks, we often
need to fine-tune, for each task, the model with
additional task-specific layers using task-specific
training data. For example, Devlin et al. (2018)
shows that BERT can be fine-tuned this way to
create state-of-the-art models for a range of NLU
tasks, such as question answering and natural lan-
guage inference.

We argue that MTL and language model pre-
training are complementary technologies, and can
be combined to improve the learning of text rep-



4488

resentations to boost the performance of various
NLU tasks. To this end, we extend the MT-DNN
model originally proposed in Liu et al. (2015)
by incorporating BERT as its shared text encod-
ing layers. As shown in Figure 1, the lower lay-
ers (i.e., text encoding layers) are shared across
all tasks, while the top layers are task-specific,
combining different types of NLU tasks such as
single-sentence classification, pairwise text clas-
sification, text similarity, and relevance ranking.
Similar to the BERT model, MT-DNN can be
adapted to a specific task via fine-tuning. Unlike
BERT, MT-DNN uses MTL, in addition to lan-
guage model pre-training, for learning text repre-
sentations.

MT-DNN obtains new state-of-the-art results on
eight out of nine NLU tasks 2 used in the Gen-
eral Language Understanding Evaluation (GLUE)
benchmark (Wang et al., 2018), pushing the GLUE
benchmark score to 82.7%, amounting to 2.2% ab-
solute improvement over BERT. We further extend
the superiority of MT-DNN to the SNLI (Bow-
man et al., 2015a) and SciTail (Khot et al., 2018)
tasks. The representations learned by MT-DNN
allow domain adaptation with substantially fewer
in-domain labels than the pre-trained BERT rep-
resentations. For example, our adapted models
achieve the accuracy of 91.6% on SNLI and 95.0%
on SciTail, outperforming the previous state-of-
the-art performance by 1.5% and 6.7%, respec-
tively. Even with only 0.1% or 1.0% of the origi-
nal training data, the performance of MT-DNN on
both SNLI and SciTail datasets is better than many
existing models. All of these clearly demonstrate
MT-DNN’s exceptional generalization capability
via multi-task learning.

2 Tasks

The MT-DNN model combines four types of NLU
tasks: single-sentence classification, pairwise text
classification, text similarity scoring, and rele-
vance ranking. For concreteness, we describe
them using the NLU tasks defined in the GLUE
benchmark as examples.

2The only GLUE task where MT-DNN does not create
a new state of the art result is WNLI. But as noted in the
GLUE webpage (https://gluebenchmark.com/faq), there are
issues in the dataset, and none of the submitted systems has
ever outperformed the majority voting baseline whose accu-
racy is 65.1.

Single-Sentence Classification: Given a sen-
tence3, the model labels it using one of the pre-
defined class labels. For example, the CoLA task
is to predict whether an English sentence is gram-
matically plausible. The SST-2 task is to de-
termine whether the sentiment of a sentence ex-
tracted from movie reviews is positive or negative.

Text Similarity: This is a regression task. Given
a pair of sentences, the model predicts a real-value
score indicating the semantic similarity of the two
sentences. STS-B is the only example of the task
in GLUE.

Pairwise Text Classification: Given a pair of
sentences, the model determines the relationship
of the two sentences based on a set of pre-defined
labels. For example, both RTE and MNLI are
language inference tasks, where the goal is to pre-
dict whether a sentence is an entailment, contra-
diction, or neutral with respect to the other. QQP
and MRPC are paraphrase datasets that consist of
sentence pairs. The task is to predict whether the
sentences in the pair are semantically equivalent.

Relevance Ranking: Given a query and a list of
candidate answers, the model ranks all the can-
didates in the order of relevance to the query.
QNLI is a version of Stanford Question Answer-
ing Dataset (Rajpurkar et al., 2016). The task in-
volves assessing whether a sentence contains the
correct answer to a given query. Although QNLI
is defined as a binary classification task in GLUE,
in this study we formulate it as a pairwise ranking
task, where the model is expected to rank the can-
didate that contains the correct answer higher than
the candidate that does not. We will show that this
formulation leads to a significant improvement in
accuracy over binary classification.

3 The Proposed MT-DNN Model

The architecture of the MT-DNN model is shown
in Figure 1. The lower layers are shared across all
tasks, while the top layers represent task-specific
outputs. The input X , which is a word sequence
(either a sentence or a pair of sentences packed
together) is first represented as a sequence of em-
bedding vectors, one for each word, in l1. Then the
transformer encoder captures the contextual infor-
mation for each word via self-attention, and gen-

3In this study, a sentence can be an arbitrary span of con-
tiguous text or word sequence, rather than a linguistically
plausible sentence.



4489

Figure 1: Architecture of the MT-DNN model for representation learning. The lower layers are shared across
all tasks while the top layers are task-specific. The input X (either a sentence or a pair of sentences) is first
represented as a sequence of embedding vectors, one for each word, in l1. Then the Transformer encoder captures
the contextual information for each word and generates the shared contextual embedding vectors in l2. Finally, for
each task, additional task-specific layers generate task-specific representations, followed by operations necessary
for classification, similarity scoring, or relevance ranking.

erates a sequence of contextual embeddings in l2.
This is the shared semantic representation that is
trained by our multi-task objectives. In what fol-
lows, we elaborate on the model in detail.

Lexicon Encoder (l1): The input X =
{x1, ..., xm} is a sequence of tokens of length m.
Following Devlin et al. (2018), the first token x1 is
always the [CLS] token. If X is packed by a sen-
tence pair (X1, X2), we separate the two sentences
with a special token [SEP]. The lexicon encoder
maps X into a sequence of input embedding vec-
tors, one for each token, constructed by summing
the corresponding word, segment, and positional
embeddings.

Transformer Encoder (l2): We use a multi-
layer bidirectional Transformer encoder (Vaswani
et al., 2017) to map the input representation vec-
tors (l1) into a sequence of contextual embedding
vectors C ∈ Rd×m. This is the shared represen-
tation across different tasks. Unlike the BERT
model (Devlin et al., 2018) that learns the rep-
resentation via pre-training, MT-DNN learns the
representation using multi-task objectives, in ad-
dition to pre-training.

Below, we will describe the task specific lay-

ers using the NLU tasks in GLUE as examples,
although in practice we can incorporate arbitrary
natural language tasks such as text generation
where the output layers are implemented as a neu-
ral decoder.

Single-Sentence Classification Output: Sup-
pose that x is the contextual embedding (l2) of the
token [CLS], which can be viewed as the seman-
tic representation of input sentence X . Take the
SST-2 task as an example. The probability that
X is labeled as class c (i.e., the sentiment) is pre-
dicted by a logistic regression with softmax:

Pr(c|X) = softmax(W>SST · x), (1)

where WSST is the task-specific parameter ma-
trix.

Text Similarity Output: Take the STS-B task
as an example. Suppose that x is the contextual
embedding (l2) of [CLS] which can be viewed
as the semantic representation of the input sen-
tence pair (X1, X2). We introduce a task-specific
parameter vector wSTS to compute the similarity
score as:

Sim(X1, X2) = w>STS · x, (2)



4490

where Sim(X1, X2) is a real value of the range (-
∞,∞).

Pairwise Text Classification Output: Take nat-
ural language inference (NLI) as an example. The
NLI task defined here involves a premise P =
(p1, ..., pm) of m words and a hypothesis H =
(h1, ..., hn) of n words, and aims to find a log-
ical relationship R between P and H . The de-
sign of the output module follows the answer
module of the stochastic answer network (SAN)
(Liu et al., 2018a), a state-of-the-art neural NLI
model. SAN’s answer module uses multi-step rea-
soning. Rather than directly predicting the entail-
ment given the input, it maintains a state and iter-
atively refines its predictions.

The SAN answer module works as follows. We
first construct the working memory of premise P
by concatenating the contextual embeddings of the
words in P , which are the output of the trans-
former encoder, denoted as Mp ∈ Rd×m, and sim-
ilarly the working memory of hypothesis H , de-
noted as Mh ∈ Rd×n. Then, we perform K-step
reasoning on the memory to output the relation la-
bel, where K is a hyperparameter. At the begin-
ning, the initial state s0 is the summary of Mh:

s0 =
∑

j αjM
h
j , where αj =

exp(w>1 ·Mhj )∑
i exp(w

>
1 ·Mhi )

.

At time step k in the range of {1, 2, ,K − 1},
the state is defined by sk = GRU(sk−1,xk).
Here, xk is computed from the previous state sk−1

and memory Mp: xk =
∑

j βjM
p
j and βj =

softmax(sk−1W>2 M
p). A one-layer classifier is

used to determine the relation at each step k:

P kr = softmax(W
>
3 [s

k;xk; |sk − xk|; sk · xk]).
(3)

At last, we utilize all of the K outputs by aver-
aging the scores:

Pr = avg([P 0r , P
1
r , ..., P

K−1
r ]). (4)

Each Pr is a probability distribution over all
the relations R ∈ R. During training, we apply
stochastic prediction dropout (Liu et al., 2018b)
before the above averaging operation. During de-
coding, we average all outputs to improve robust-
ness.

Relevance Ranking Output: Take QNLI as an
example. Suppose that x is the contextual embed-
ding vector of [CLS] which is the semantic rep-
resentation of a pair of question and its candidate

answer (Q,A). We compute the relevance score
as:

Rel(Q,A) = g(w>QNLI · x), (5)

For a given Q, we rank all of its candidate an-
swers based on their relevance scores computed
using Equation 5.

3.1 The Training Procedure
The training procedure of MT-DNN consists of
two stages: pretraining and multi-task learning.
The pretraining stage follows that of the BERT
model (Devlin et al., 2018). The parameters of
the lexicon encoder and Transformer encoder are
learned using two unsupervised prediction tasks:
masked language modeling and next sentence pre-
diction.4

In the multi-task learning stage, we use mini-
batch based stochastic gradient descent (SGD) to
learn the parameters of our model (i.e., the pa-
rameters of all shared layers and task-specific lay-
ers) as shown in Algorithm 1. In each epoch, a
mini-batch bt is selected(e.g., among all 9 GLUE
tasks), and the model is updated according to the
task-specific objective for the task t. This approx-
imately optimizes the sum of all multi-task objec-
tives.

For the classification tasks (i.e., single-sentence
or pairwise text classification), we use the cross-
entropy loss as the objective:

−
∑
c

1(X, c) log(Pr(c|X)), (6)

where 1(X, c) is the binary indicator (0 or 1) if
class label c is the correct classification for X , and
Pr(.) is defined by e.g., Equation 1 or 4.

For the text similarity tasks, such as STS-B,
where each sentence pair is annotated with a real-
valued score y, we use the mean squared error as
the objective:

(y − Sim(X1, X2))2, (7)

where Sim(.) is defined by Equation 2.
The objective for the relevance ranking tasks

follows the pairwise learning-to-rank paradigm
(Burges et al., 2005; Huang et al., 2013). Take
QNLI as an example. Given a query Q, we obtain
a list of candidate answersAwhich contains a pos-
itive example A+ that includes the correct answer,

4In this study we use the pre-trained BERT models re-
leased by the authors.



4491

Algorithm 1: Training a MT-DNN model.
Initialize model parameters Θ randomly.
Pre-train the shared layers (i.e., the lexicon

encoder and the transformer encoder).
Set the max number of epoch: epochmax.

//Prepare the data for T tasks.
for t in 1, 2, ..., T do

Pack the dataset t into mini-batch: Dt.
end
for epoch in 1, 2, ..., epochmax do

1. Merge all the datasets:
D = D1 ∪D2... ∪DT

2. Shuffle D
for bt in D do

//bt is a mini-batch of task t.
3. Compute loss : L(Θ)
L(Θ) = Eq. 6 for classification
L(Θ) = Eq. 7 for regression
L(Θ) = Eq. 8 for ranking

4. Compute gradient: ∇(Θ)
5. Update model: Θ = Θ− �∇(Θ)

end
end

and |A|− 1 negative examples. We then minimize
the negative log likelihood of the positive example
given queries across the training data

−
∑

(Q,A+)

Pr(A
+|Q), (8)

Pr(A
+|Q) = exp(γRel(Q,A

+))∑
A′∈A exp(γRel(Q,A

′))
, (9)

where Rel(.) is defined by Equation 5 and γ is a
tuning factor determined on held-out data. In our
experiment, we simply set γ to 1.

4 Experiments

We evaluate the proposed MT-DNN on three pop-
ular NLU benchmarks: GLUE (Wang et al., 2018),
SNLI (Bowman et al., 2015b), and SciTail (Khot
et al., 2018). We compare MT-DNN with exist-
ing state-of-the-art models including BERT and
demonstrate the effectiveness of MTL with and
without model fine-tuning using GLUE and do-
main adaptation using both SNLI and SciTail.

4.1 Datasets
This section briefly describes the GLUE, SNLI,
and SciTail datasets, as summarized in Table 1.

GLUE The General Language Understanding
Evaluation (GLUE) benchmark is a collection of
nine NLU tasks as in Table 1, including question
answering, sentiment analysis, text similarity and
textual entailment; it is considered well-designed
for evaluating the generalization and robustness of
NLU models.

SNLI The Stanford Natural Language Inference
(SNLI) dataset contains 570k human annotated
sentence pairs, in which the premises are drawn
from the captions of the Flickr30 corpus and hy-
potheses are manually annotated (Bowman et al.,
2015b). This is the most widely used entailment
dataset for NLI. The dataset is used only for do-
main adaptation in this study.

SciTail This is a textual entailment dataset de-
rived from a science question answering (SciQ)
dataset (Khot et al., 2018). The task involves as-
sessing whether a given premise entails a given hy-
pothesis. In contrast to other entailment datasets
mentioned previously, the hypotheses in SciTail
are created from science questions while the cor-
responding answer candidates and premises come
from relevant web sentences retrieved from a large
corpus. As a result, these sentences are linguis-
tically challenging and the lexical similarity of
premise and hypothesis is often high, thus making
SciTail particularly difficult. The dataset is used
only for domain adaptation in this study.

4.2 Implementation details
Our implementation of MT-DNN is based on
the PyTorch implementation of BERT5. We used
Adamax (Kingma and Ba, 2014) as our optimizer
with a learning rate of 5e-5 and a batch size of
32 by following Devlin et al. (2018). The max-
imum number of epochs was set to 5. A linear
learning rate decay schedule with warm-up over
0.1 was used, unless stated otherwise. We also set
the dropout rate of all the task specific layers as
0.1, except 0.3 for MNLI and 0.05 for CoLa. To
avoid the exploding gradient problem, we clipped
the gradient norm within 1. All the texts were to-
kenized using wordpieces, and were chopped to
spans no longer than 512 tokens.

4.3 GLUE Main Results
We compare MT-DNN with its variants and a list
of state-of-the-art models that have been submitted

5https://github.com/huggingface/pytorch-pretrained-
BERT



4492

Corpus Task #Train #Dev #Test #Label Metrics
Single-Sentence Classification (GLUE)

CoLA Acceptability 8.5k 1k 1k 2 Matthews corr
SST-2 Sentiment 67k 872 1.8k 2 Accuracy

Pairwise Text Classification (GLUE)
MNLI NLI 393k 20k 20k 3 Accuracy
RTE NLI 2.5k 276 3k 2 Accuracy
WNLI NLI 634 71 146 2 Accuracy
QQP Paraphrase 364k 40k 391k 2 Accuracy/F1
MRPC Paraphrase 3.7k 408 1.7k 2 Accuracy/F1

Text Similarity (GLUE)
STS-B Similarity 7k 1.5k 1.4k 1 Pearson/Spearman corr

Relevance Ranking (GLUE)
QNLI QA/NLI 108k 5.7k 5.7k 2 Accuracy

Pairwise Text Classification
SNLI NLI 549k 9.8k 9.8k 3 Accuracy
SciTail NLI 23.5k 1.3k 2.1k 2 Accuracy

Table 1: Summary of the three benchmarks: GLUE, SNLI and SciTail.

Model CoLA SST-2 MRPC STS-B QQP MNLI-m/mm QNLI RTE WNLI AX Score
8.5k 67k 3.7k 7k 364k 393k 108k 2.5k 634

BiLSTM+ELMo+Attn 1 36.0 90.4 84.9/77.9 75.1/73.3 64.8/84.7 76.4/76.1 - 56.8 65.1 26.5 70.5
Singletask Pretrain

Transformer 2 45.4 91.3 82.3/75.7 82.0/80.0 70.3/88.5 82.1/81.4 - 56.0 53.4 29.8 72.8

GPT on STILTs 3 47.2 93.1 87.7/83.7 85.3/84.8 70.1/88.1 80.8/80.6 - 69.1 65.1 29.4 76.9
BERTLARGE4 60.5 94.9 89.3/85.4 87.6/86.5 72.1/89.3 86.7/85.9 92.7 70.1 65.1 39.6 80.5
MT-DNNno-fine-tune 58.9 94.6 90.1/86.4 89.5/88.8 72.7/89.6 86.5/85.8 93.1 79.1 65.1 39.4 81.7
MT-DNN 62.5 95.6 91.1/88.2 89.5/88.8 72.7/89.6 86.7/86.0 93.1 81.4 65.1 40.3 82.7
Human Performance 66.4 97.8 86.3/80.8 92.7/92.6 59.5/80.4 92.0/92.8 91.2 93.6 95.9 - 87.1

Table 2: GLUE test set results scored using the GLUE evaluation server. The number below each task denotes the
number of training examples. The state-of-the-art results are in bold, and the results on par with or pass human
performance are in bold. MT-DNN uses BERTLARGE to initialize its shared layers. All the results are obtained
from https://gluebenchmark.com/leaderboard on February 25, 2019. Model references: 1:(Wang et al., 2018) ;
2:(Radford et al., 2018); 3: (Phang et al., 2018); 4:(Devlin et al., 2018).

Model MNLI-m/mm QQP RTE QNLI (v1/v2) MRPC CoLa SST-2 STS-B
BERTLARGE 86.3/86.2 91.1/88.0 71.1 90.5/92.4 89.5/85.8 61.8 93.5 89.6/89.3
ST-DNN 86.6/86.3 91.3/88.4 72.0 96.1/- 89.7/86.4 - - -
MT-DNN 87.1/86.7 91.9/89.2 83.4 97.4/92.9 91.0/87.5 63.5 94.3 90.7/90.6

Table 3: GLUE dev set results. The best result on each task is in bold. The Single-Task DNN (ST-DNN) uses the
same model architecture as MT-DNN. But its shared layers are the pre-trainedBERT model without being refined
via MTL. We fine-tuned ST-DNN for each GLUE task using task-specific data. There have been two versions of
the QNLI dataset. V1 is expired on January 30, 2019. The current version is v2. MT-DNN use BERTLARGE as
their initial shared layers.

to the GLUE leaderboard. The results are shown
in Tables 2 and 3.

BERTLARGE This is the large BERT model re-
leased by the authors, which we used as a baseline.

We fine-tuned the model for each GLUE task on
task-specific data.

MT-DNN This is the proposed model described
in Section 3. We used the pre-trained BERTLARGE

https://gluebenchmark.com/leaderboard


4493

to initialize its shared layers, refined the model via
MTL on all GLUE tasks, and fine-tuned the model
for each GLUE task using task-specific data. The
test results in Table 2 show that MT-DNN out-
performs all existing systems on all tasks, ex-
cept WNLI, creating new state-of-the-art results
on eight GLUE tasks and pushing the benchmark
to 82.7%, which amounts to 2.2% absolution im-
provement over BERTLARGE. Since MT-DNN
uses BERTLARGE to initialize its shared layers, the
gain is mainly attributed to the use of MTL in
refining the shared layers. MTL is particularly
useful for the tasks with little in-domain training
data. As we observe in the table, on the same type
of tasks, the improvements over BERT are much
more substantial for the tasks with less in-domain
training data than those with more in-domain la-
bels, even though they belong to the same task
type, e.g., the two NLI tasks: RTE vs. MNLI, and
the two paraphrase tasks: MRPC vs. QQP.

MT-DNNno-fine-tune Since the MTL of MT-DNN
uses all GLUE tasks, it is possible to directly ap-
ply MT-DNN to each GLUE task without fine-
tuning. The results in Table 2 show that MT-
DNNno-fine-tune still outperforms BERTLARGE con-
sistently among all tasks but CoLA. Our analysis
shows that CoLA is a challenge task with much
smaller in-domain data than other tasks, and its
task definition and dataset are unique among all
GLUE tasks, making it difficult to benefit from
the knowledge learned from other tasks. As a
result, MTL tends to underfit the CoLA dataset.
In such a case, fine-tuning is necessary to boost
the performance. As shown in Table 2, the ac-
curacy improves from 58.9% to 62.5% after fine-
tuning, even though only a very small amount
of in-domain data is available for adaptation.
This, together with the fact that the fine-tuned
MT-DNN significantly outperforms the fine-tuned
BERTLARGE on CoLA (62.5% vs. 60.5%), reveals
that the learned MT-DNN representation allows
much more effective domain adaptation than the
pre-trained BERT representation. We will revisit
this topic with more experiments in Section 4.4.

The gain of MT-DNN is also attributed to its
flexible modeling framework which allows us to
incorporate the task-specific model structures and
training methods which have been developed in
the single-task setting, effectively leveraging the
existing body of research. Two such examples are
the use of the SAN answer module for the pairwise

text classification output module and the pairwise
ranking loss for the QNLI task which by design
is a binary classification problem in GLUE. To in-
vestigate the relative contributions of these mod-
eling design choices, we implement a variant of
MT-DNN as described below.

ST-DNN ST-DNN stands for Single-Task DNN.
It uses the same model architecture as MT-DNN.
But its shared layers are the pre-trained BERT
model without being refined via MTL. We then
fine-tuned ST-DNN for each GLUE task using
task-specific data. Thus, for pairwise text classi-
fication tasks, the only difference between their
ST-DNNs and BERT models is the design of the
task-specific output module. The results in Ta-
ble 3 show that on all four tasks (MNLI, QQP, RTE
and MRPC) ST-DNN outperforms BERT, justi-
fying the effectiveness of the SAN answer mod-
ule. We also compare the results of ST-DNN and
BERT on QNLI. While ST-DNN is fine-tuned us-
ing the pairwise ranking loss, BERT views QNLI
as binary classification and is fine-tuned using the
cross entropy loss. ST-DNN significantly outper-
forms BERT demonstrates clearly the importance
of problem formulation.

4.4 Domain Adaptation Results on SNLI and
SciTail

Figure 2: Domain adaption results on SNLI and Sci-
Tail development datasets using the shared embeddings
generated by MT-DNN and BERT, respectively. Both
MT-DNN and BERT are fine-tuned based on the pre-
trained BERTBASE. The X-axis indicates the amount of
domain-specific labeled samples used for adaptation.



4494

Model 0.1% 1% 10% 100%
SNLI Dataset (Dev Accuracy%)

#Training Data 549 5,493 54,936 549,367
BERT 52.5 78.1 86.7 91.0
MT-DNN 82.1 85.2 88.4 91.5

SciTail Dataset (Dev Accuracy%)
#Training Data 23 235 2,359 23,596
BERT 51.2 82.2 90.5 94.3
MT-DNN 81.9 88.3 91.1 95.7

Table 4: Domain adaptation results on SNLI and Sci-
Tail, as shown in Figure 2.

One of the most important criteria of building
practical systems is fast adaptation to new tasks
and domains. This is because it is prohibitively
expensive to collect labeled training data for new
domains or tasks. Very often, we only have very
small training data or even no training data.

To evaluate the models using the above crite-
rion, we perform domain adaptation experiments
on two NLI tasks, SNLI and SciTail, using the fol-
lowing procedure:

1. use the MT-DNN model or the BERTBASE as
initial model;

2. create for each new task (SNLI or SciTail) a
task-specific model, by adapting the trained
MT-DNN using task-specific training data;

3. evaluate the models using task-specific test
data.

We starts with the default training/dev/test set
of these tasks. But we randomly sample 0.1%,
1%, 10% and 100% of its training data. As a re-
sult, we obtain four sets of training data for Sci-
Tail, which respectively includes 23, 235, 2.3k and
23.5k training samples. Similarly, we obtain four
sets of training data for SNLI, which respectively
include 549, 5.5k, 54.9k and 549.3k training sam-
ples.

We perform random sampling five times and re-
port the mean among all the runs. Results on dif-
ferent amounts of training data from SNLI and Sc-
iTail are reported in Figure 2. We observe that
MT-DNN outperforms the BERT baseline consis-
tently with more details provided in Table 4. The
fewer training examples used, the larger improve-
ment MT-DNN demonstrates over BERT. For ex-
ample, with only 0.1% (23 samples) of the SNLI

training data, MT-DNN achieves 82.1% in accu-
racy while BERT’s accuracy is 52.5%; with 1%
of the training data, the accuracy from MT-DNN
is 85.2% and BERT is 78.1%. We observe similar
results on SciTail. The results indicate that the rep-
resentations learned by MT-DNN are more consis-
tently effective for domain adaptation than BERT.

In Table 5, we compare our adapted mod-
els, using all in-domain training samples, against
several strong baselines including the best re-
sults reported in the leaderboards. We see that
MT-DNNLARGE generates new state-of-the-art re-
sults on both datasets, pushing the benchmarks to
91.6% on SNLI (1.5% absolute improvement) and
95.0% on SciTail (6.7% absolute improvement),
respectively. This results in the new state-of-the-
art for both SNLI and SciTail. All of these demon-
strate the exceptional performance of MT-DNN on
domain adaptation.

Model Dev Test
SNLI Dataset (Accuracy%)

GPT (Radford et al., 2018) - 89.9
Kim et al. (2018)∗ - 90.1
BERTBASE 91.0 90.8
MT-DNNBASE 91.5 91.1
BERTLARGE 91.7 91.0
MT-DNNLARGE 92.2 91.6

SciTail Dataset (Accuracy%)
GPT (Radford et al., 2018)∗ - 88.3
BERTBASE 94.3 92.0
MT-DNNBASE 95.7 94.1
BERTLARGE 95.7 94.4
MT-DNNLARGE 96.3 95.0

Table 5: Results on the SNLI and SciTail dataset.
Previous state-of-the-art results are marked by
∗, obtained from the official SNLI leaderboard
(https://nlp.stanford.edu/projects/snli/) and the
official SciTail leaderboard maintained by AI2
(https://leaderboard.allenai.org/scitail).

5 Conclusion

In this work we proposed a model called MT-
DNN to combine multi-task learning and lan-
guage model pre-training for language represen-
tation learning. MT-DNN obtains new state-of-
the-art results on ten NLU tasks across three pop-
ular benchmarks: SNLI, SciTail, and GLUE. MT-
DNN also demonstrates an exceptional generaliza-
tion capability in domain adaptation experiments.



4495

There are many future areas to explore to im-
prove MT-DNN, including a deeper understand-
ing of model structure sharing in MTL, a more
effective training method that leverages related-
ness among multiple tasks, for both fine-tuning
and pre-training (Dong et al., 2019), and ways of
incorporating the linguistic structure of text in a
more explicit and controllable manner. At last,
we also would like to verify whether MT-DNN
is resilience against adversarial attacks (Glockner
et al., 2018; Talman and Chatzikyriakidis, 2018;
Liu et al., 2019).

Acknowledgments

We would like to thanks Jade Huang from Mi-
crosoft for her generous help on this work.

References
Samuel R Bowman, Gabor Angeli, Christopher Potts,

and Christopher D Manning. 2015a. A large anno-
tated corpus for learning natural language inference.
In Proceedings of the 2015 Conference on Empiri-
cal Methods in Natural Language Processing, pages
632–642.

Samuel R. Bowman, Gabor Angeli, Christopher Potts,
and Christopher D. Manning. 2015b. A large an-
notated corpus for learning natural language infer-
ence. In Proceedings of the 2015 Conference on
Empirical Methods in Natural Language Processing
(EMNLP). Association for Computational Linguis-
tics.

Chris Burges, Tal Shaked, Erin Renshaw, Ari Lazier,
Matt Deeds, Nicole Hamilton, and Greg Hullender.
2005. Learning to rank using gradient descent. In
Proceedings of the 22nd international conference on
Machine learning, pages 89–96. ACM.

Rich Caruana. 1997. Multitask learning. Machine
learning, 28(1):41–75.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. Journal of Machine Learning Research,
12(Aug):2493–2537.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805.

Li Dong, Nan Yang, Wenhui Wang, Furu Wei,
Xiaodong Liu, Yu Wang, Jianfeng Gao, Ming
Zhou, and Hsiao-Wuen Hon. 2019. Unified
language model pre-training for natural language
understanding and generation. arXiv preprint
arXiv:1905.03197.

J. Gao, M. Galley, and L. Li. 2018. Neural approaches
to conversational AI. CoRR, abs/1809.08267.

Max Glockner, Vered Shwartz, and Yoav Goldberg.
2018. Breaking nli systems with sentences that re-
quire simple lexical inferences. In The 56th Annual
Meeting of the Association for Computational Lin-
guistics (ACL), Melbourne, Australia.

Han Guo, Ramakanth Pasunuru, and Mohit Bansal.
2018. Soft layer-specific multi-task summarization
with entailment and question generation. In Pro-
ceedings of the 56th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 687–697.

Po-Sen Huang, Xiaodong He, Jianfeng Gao, Li Deng,
Alex Acero, and Larry Heck. 2013. Learning deep
structured semantic models for web search using
clickthrough data. In Proceedings of the 22nd ACM
international conference on Conference on informa-
tion & knowledge management, pages 2333–2338.
ACM.

Tushar Khot, Ashish Sabharwal, and Peter Clark. 2018.
SciTail: A textual entailment dataset from science
question answering. In AAAI.

Seonhoon Kim, Jin-Hyuk Hong, Inho Kang, and No-
jun Kwak. 2018. Semantic sentence matching with
densely-connected recurrent and co-attentive infor-
mation. arXiv preprint arXiv:1805.11360.

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Xiaodong Liu, Kevin Duh, and Jianfeng Gao. 2018a.
Stochastic answer networks for natural language in-
ference. arXiv preprint arXiv:1804.07888.

Xiaodong Liu, Jianfeng Gao, Xiaodong He, Li Deng,
Kevin Duh, and Ye-Yi Wang. 2015. Representa-
tion learning using multi-task deep neural networks
for semantic classification and information retrieval.
In Proceedings of the 2015 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 912–921.

Xiaodong Liu, Pengcheng He, Weizhu Chen, and
Jianfeng Gao. 2019. Improving multi-task deep
neural networks via knowledge distillation for
natural language understanding. arXiv preprint
arXiv:1904.09482.

Xiaodong Liu, Yelong Shen, Kevin Duh, and Jianfeng
Gao. 2018b. Stochastic answer networks for ma-
chine reading comprehension. In Proceedings of the
56th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers). Asso-
ciation for Computational Linguistics.

Minh-Thang Luong, Quoc V Le, Ilya Sutskever, Oriol
Vinyals, and Lukasz Kaiser. 2015. Multi-task
sequence to sequence learning. arXiv preprint
arXiv:1511.06114.



4496

Matthew E Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. arXiv preprint arXiv:1802.05365.

Jason Phang, Thibault Févry, and Samuel R Bowman.
2018. Sentence encoders on stilts: Supplementary
training on intermediate labeled-data tasks. arXiv
preprint arXiv:1811.01088.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving language under-
standing by generative pre-training.

Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and
Percy Liang. 2016. Squad: 100,000+ questions for
machine comprehension of text. pages 2383–2392.

Sebastian Ruder12, Joachim Bingel, Isabelle Augen-
stein, and Anders Søgaard. 2019. Latent multi-task
architecture learning.

Aarne Talman and Stergios Chatzikyriakidis. 2018.
Testing the generalization power of neural network
models across nli benchmarks. arXiv preprint
arXiv:1810.09774.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. arXiv preprint arXiv:1706.03762.

Alex Wang, Amapreet Singh, Julian Michael, Felix
Hill, Omer Levy, and Samuel R Bowman. 2018.
Glue: A multi-task benchmark and analysis platform
for natural language understanding. arXiv preprint
arXiv:1804.07461.

Yichong Xu, Xiaodong Liu, Yelong Shen, Jingjing
Liu, and Jianfeng Gao. 2018. Multi-task learning
for machine reading comprehension. arXiv preprint
arXiv:1809.06963.

Yu Zhang and Qiang Yang. 2017. A survey on multi-
task learning. arXiv preprint arXiv:1707.08114.

https://aclweb.org/anthology/D16-1264
https://aclweb.org/anthology/D16-1264

