



















































Improving Open Information Extraction via Iterative Rank-Aware Learning


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 5295–5300
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

5295

Improving Open Information Extraction
via Iterative Rank-Aware Learning

Zhengbao Jiang, Pengcheng Yin, Graham Neubig
Language Technologies Institute

Carnegie Mellon University
{zhengbaj, pcyin, gneubig}@cs.cmu.edu

Abstract

Open information extraction (IE) is the task of
extracting open-domain assertions from natu-
ral language sentences. A key step in open
IE is confidence modeling, ranking the ex-
tractions based on their estimated quality to
adjust precision and recall of extracted asser-
tions. We found that the extraction likelihood,
a confidence measure used by current super-
vised open IE systems, is not well calibrated
when comparing the quality of assertions ex-
tracted from different sentences. We propose
an additional binary classification loss to cal-
ibrate the likelihood to make it more globally
comparable, and an iterative learning process,
where extractions generated by the open IE
model are incrementally included as training
samples to help the model learn from trial and
error. Experiments on OIE2016 demonstrate
the effectiveness of our method.1

1 Introduction

Open information extraction (IE, Sekine (2006);
Banko et al. (2007)) aims to extract open-domain
assertions represented in the form of n-tuples
(e.g., was born in; Barack Obama; Hawaii) from
natural language sentences (e.g., Barack Obama
was born in Hawaii). Open IE started from rule-
based (Fader et al., 2011) and syntax-driven sys-
tems (Mausam et al., 2012; Corro and Gemulla,
2013), and recently has used neural networks for
supervised learning (Stanovsky et al., 2018; Cui
et al., 2018; Sun et al., 2018; Duh et al., 2017; Jia
et al., 2018).

A key step in open IE is confidence model-
ing, which ranks a list of candidate extractions
based on their estimated quality. This is impor-
tant for downstream tasks, which rely on trade-
offs between the precision and recall of extracted

1Code and data are available at https://github.
com/jzbjyb/oie_rank

generate
model t

extractionsextractions
up to t

merge

minimize binary
classification loss

model t+1

extractions
up to t+1

Figure 1: Iterative rank-aware learning.

assertions. For instance, an open IE-powered
medical question answering (QA) system may re-
quire its assertions in higher precision (and conse-
quently lower recall) than QA systems for other
domains. For supervised open IE systems, the
confidence score of an assertion is typically com-
puted based on its extraction likelihood given by
the model (Stanovsky et al., 2018; Sun et al.,
2018). However, we observe that this often yields
sub-optimal ranking results, with incorrect extrac-
tions of one sentence having higher likelihood
than correct extractions of another sentence. We
hypothesize this is due to the issue of a disconnect
between training and test-time objectives. Specif-
ically, the system is trained solely to raise like-
lihood of gold-standard extractions, and during
training the model is not aware of its test-time be-
havior of ranking a set of system-generated asser-
tions across sentences that potentially include in-
correct extractions.

To calibrate open IE confidences and make
them more globally comparable across different
sentences, we propose an iterative rank-aware
learning approach, as outlined in Fig. 1. Given ex-
tractions generated by the model as training sam-
ples, we use a binary classification loss to explic-
itly increase the confidences of correct extractions
and decrease those of incorrect ones. Without
adding additional model components, this train-
ing paradigm naturally leads to a better open IE
model, whose extractions can be further included
as training samples. We further propose an iter-

https://github.com/jzbjyb/oie_rank
https://github.com/jzbjyb/oie_rank


5296

ative learning procedure that gradually improves
the model by incrementally adding extractions to
the training data. Experiments on the OIE2016
dataset (Stanovsky and Dagan, 2016) indicate that
our method significantly outperforms both neural
and non-neural models.

2 Neural Models for Open IE

We briefly revisit the formulation of open IE and
the neural network model used in our paper.

2.1 Problem Formulation

Given sentence s = (w1, w2, ..., wn), the goal of
open IE is to extract assertions in the form of tu-
ples r = (p,a1,a2, ...,am), composed of a sin-
gle predicate and m arguments. Generally, these
components in r need not to be contiguous, but to
simplify the problem we assume they are contigu-
ous spans of words from s and there is no overlap
between them.

Methods to solve this problem have recently
been formulated as sequence-to-sequence gener-
ation (Cui et al., 2018; Sun et al., 2018; Duh
et al., 2017) or sequence labeling (Stanovsky et al.,
2018; Jia et al., 2018). We adopt the second for-
mulation because it is simple and can take ad-
vantage of the fact that assertions only consist of
words from the sentence. Within this framework,
an assertion r can be mapped to a unique BIO
(Stanovsky et al., 2018) label sequence y by as-
signing O to the words not contained in r, Bp/Ip
to the words in p, and Bai /Iai to the words in ai
respectively, depending on whether the word is at
the beginning or inside of the span.

The label prediction ŷ is made by the model
given a sentence associated with a predicate of in-
terest (s, v). At test time, we first identify verbs
in the sentence as candidate predicates. Each sen-
tence/predicate pair is fed to the model and extrac-
tions are generated from the label sequence.

2.2 Model Architecture and Decoding

Our training method in § 3 could potentially
be used with any probabilistic open IE model,
since we make no assumptions about the model
and only the likelihood of the extraction is re-
quired for iterative rank-aware learning. As
a concrete instantiation in our experiments, we
use RnnOIE (Stanovsky et al., 2018; He et al.,
2017), a stacked BiLSTM with highway con-
nections (Zhang et al., 2016; Srivastava et al.,

2015) and recurrent dropout (Gal and Ghahra-
mani, 2016). Input of the model is the concate-
nation of word embedding and another embedding
indicating whether this word is predicate:

xt = [Wemb(wt),Wmask(wt = v)].

The probability of the label at each position is cal-
culated independently using a softmax function:

P (yt|s, v) ∝ exp(Wlabelht + blabel),

where ht is the hidden state of the last layer. At
decoding time, we use the Viterbi algorithm to re-
ject invalid label transitions (He et al., 2017), such
as Ba2 followed by Ia1 .

2

We use average log probability of the label se-
quence (Sun et al., 2018) as its confidence:3

c(s, v, ŷ) =

∑|s|
t=1 logP (ŷt|s, v)

|s|
. (1)

The probability is trained with maximum likeli-
hood estimation (MLE) of the gold extractions.
This formulation lacks an explicit concept of
cross-sentence comparison, and thus incorrect ex-
tractions of one sentence could have higher confi-
dence than correct extractions of another sentence.

3 Iterative Rank-Aware Learning

In this section, we describe our proposed binary
classification loss and iterative learning procedure.

3.1 Binary Classification Loss
To alleviate the problem of incomparable confi-
dences across sentences, we propose a simple bi-
nary classification loss to calibrate confidences to
be globally comparable. Given a model θ′ trained
with MLE, beam search is performed to generate
assertions with the highest probabilities for each
predicate. Assertions are annotated as either posi-
tive or negative with respect to the gold standard,
and are used as training samples to minimize the
hinge loss:

θ̂ = argmin
θ

E
s∈D

v,ŷ∈gθ′ (s)

max (0, 1− t · cθ(s, v, ŷ)), (2)

2This formulation cannot easily handle coordination,
where multiple instances of an argument are extracted for a
single predicate, so we use a heuristic of keeping only the first
instance of an argument.

3The log probability is normalized by the length of the
sentence to avoid bias towards short sentences. The original
confidence score in RnnOIE is slightly different from ours.
Empirically, we found them to perform similarly.



5297

Input: training data D, initial model θ(0)
Output: model after convergence θ
t← 0 # iteration
E ← ∅ # generated extractions
while not converge do
E ← E ∪ {(s, v, ŷ)|v, ŷ ∈ gθ(t)(s), ∀s ∈ D}
θ(t+1) ← argmin

θ
E

(s,v,ŷ)∈E
max (0, 1− t · cθ(s, v, ŷ))

t← t+ 1;
end

Algorithm 1: Iterative learning.

Train Dev. Test

# sentence 1 688 560 641
# extraction 3 040 971 1 729

Table 1: Dataset statistics.

where D is the training sentence collection, gθ′
represents the candidate generation process, and
t ∈ {1,−1} is the binary annotation. cθ(s, v, ŷ)
is the confidence score calculated by average log
probability of the label sequence.

The binary classification loss distinguishes pos-
itive extractions from negative ones generated
across different sentences, potentially leading to a
more reliable confidence measure and better rank-
ing performance.

3.2 Iterative Learning

Compared to using external models for confidence
modeling, an advantage of the proposed method is
that the base model does not change: the binary
classification loss just provides additional supervi-
sion. Ideally, the resulting model after one-round
of training becomes better not only at confidence
modeling, but also at assertion generation, sug-
gesting that extractions of higher quality can be
added as training samples to continue this training
process iteratively. The resulting iterative learning
procedure (Alg. 1) incrementally includes extrac-
tions generated by the current model as training
samples to optimize the binary classification loss
to obtain a better model, and this procedure is con-
tinued until convergence.

4 Experiments

4.1 Experimental Settings

Dataset We use the OIE2016 dataset (Stanovsky
and Dagan, 2016) to evaluate our method, which
only contains verbal predicates. OIE2016 is au-
tomatically generated from the QA-SRL dataset
(He et al., 2015), and to remove noise, we remove

extractions without predicates, with less than two
arguments, and with multiple instances of an ar-
gument. The statistics of the resulting dataset are
summarized in Tab. 1.

Evaluation Metrics We follow the evalua-
tion metrics described by Stanovsky and Da-
gan (2016): area under the precision-recall curve
(AUC) and F1 score. An extraction is judged as
correct if the predicate and arguments include the
syntactic head of the gold standard counterparts.4

Baselines We compare our method with both
competitive neural and non-neural models, includ-
ing RnnOIE (Stanovsky et al., 2018), OpenIE4,5

ClausIE (Corro and Gemulla, 2013), and PropS
(Stanovsky et al., 2016).

Implementation Details Our implementation is
based on AllenNLP (Gardner et al., 2018) by
adding binary classification loss function on the
implementation of RnnOIE.6 The network con-
sists of 4 BiLSTM layers (2 forward and 2 back-
ward) with 64-dimensional hidden units. ELMo
(Peters et al., 2018) is used to map words into con-
textualized embeddings, which are concatenated
with a 100-dimensional predicate indicator em-
bedding. The recurrent dropout probability is set
to 0.1. Adadelta (Zeiler, 2012) with � = 10−6 and
ρ = 0.95 and mini-batches of size 80 are used to
optimize the parameters. Beam search size is 5.

4.2 Evaluation Results
Tab. 4 lists the evaluation results. Our base model
(RnnOIE, § 2) performs better than non-neural
systems, confirming the advantage of supervised
training under the sequence labeling setting. To
test if the binary classification loss (E.q. 2, § 3)
could yield better-calibrated confidence, we per-
form one round of fine-tuning of the base model
with the hinge loss (+Binary loss in Tab. 4).
We show both the results of using the confidence
(E.q. 1) of the fine-tuned model to rerank the
extractions of the base model (Rerank Only),
and the end-to-end performance of the fine-tuned
model in assertion generation (Generate). We

4The absolute performance reported in our paper is
much lower than the original paper because the authors
use a more lenient lexical overlap metric in their released
code: https://github.com/gabrielStanovsky/
oie-benchmark.

5https://github.com/dair-iitd/
OpenIE-standalone

6https://allennlp.org/models#
open-information-extraction

https://github.com/gabrielStanovsky/oie-benchmark
https://github.com/gabrielStanovsky/oie-benchmark
https://github.com/dair-iitd/OpenIE-standalone
https://github.com/dair-iitd/OpenIE-standalone
https://allennlp.org/models#open-information-extraction
https://allennlp.org/models#open-information-extraction


5298

sentence old new labelrank rank

A CEN forms an important but small part of a Local Strategic Partnership . 3 1 3

An animal that cares for its young but shows no other sociality traits is said

to be “ subsocial” .

2 2 7

A casting director at the time told Scott that he had wished that he’d met

him a week before ; he was casting for the “G.I. Joe” cartoon.

1 3 7

Table 2: Case study of reranking effectiveness. Red for predicate and blue for arguments.

sentence label

A Democrat , he became the youngest mayor in Pittsburgh’s history in September

2006 at the age of 26 .

3

A motorcycle speedway long-track meeting , one of the few held in the UK, was staged
at Ammanford.

7

Table 3: Case study of generation effectiveness. Red for predicate and blue for arguments.

 0.06

 0.08

 0.1

 0.12

 0.14

 0.16

 1  2  3  4  5  6  7  8  9  10

A
U

C

rerank
generate

pos rerank
pos generate

 0.24

 0.27

 0.3

 0.33

 0.36

 1  2  3  4  5  6  7  8  9  10

F
1

rerank
generate

pos rerank
pos generate

Figure 2: AUC and F1 at different iterations.

found both settings lead to improved performance
compared to the base model, which demonstrates
that calibrating confidence using binary classifi-
cation loss can improve the performance of both
reranking and assertion generation. Finally, our
proposed iterative learning approach (Alg. 1, § 3)
significantly outperforms non-iterative settings.

We also investigate the performance of our iter-
ative learning algorithm with respect to the num-
ber of iterations in Fig. 2. The model obtained at
each iteration is used to both rerank the extractions
generated by the previous model and generate new
extractions. We also report results of using only
positive samples for optimization. We observe the
AUC and F1 of both reranking and generation in-
creases simultaneously for the first 6 iterations and
converges after that, which demonstrates the effec-

System AUC F1

Non-neural Systems
PropS .006 .065
ClausIE .026 .144
OpenIE4 .034 .164

Neural Systems
Base Model (RnnOIE) .050 .204
+Binary loss (§ 3.1), Rerank Only .091 .225
+Binary loss (§ 3.1), Generate .092 .260
+Iterative Learning (§ 3.2) .125 .315

Table 4: AUC and F1 on OIE2016.

tiveness of iterative training. The best performing
iteration achieves AUC of 0.125 and F1 of 0.315,
outperforming all the baselines by a large margin.
Meanwhile, using both positive and negative sam-
ples consistently outperforms only using positive
samples, which indicates the necessity of exposure
to the errors made by the system.

Case Study Tab. 2 compares extractions from
RnnOIE before and after reranking. We can see
the order is consistent with the annotation after
reranking, showing the additional loss function’s
efficacy in calibrating the confidences; this is par-
ticularly common in extractions with long argu-
ments. Tab. 3 shows a positive extraction discov-
ered after iterative training (first example), and a
wrong extraction that disappears (second exam-
ple), which shows that the model also becomes
better at assertion generation.



5299

overgenerated wrong missing
predicate argument argument

41% 38% 21%

Table 5: Proportions of three errors.

Error Analysis Why is the performance still rel-
atively low? We randomly sample 50 extractions
generated at the best performing iteration and con-
duct an error analysis to answer this question. To
count as a correct extraction, the number and or-
der of the arguments should be exactly the same
as the ground truth and syntactic heads must be in-
cluded, which is challenging considering that the
OIE2016 dataset has complex syntactic structures
and multiple arguments per predicate.

We classify the errors into three categories and
summarize their proportions in Tab. 5. “Overgen-
erated predicate” is where predicates not included
in ground truth are overgenerated, because all the
verbs are used as candidate predicates. An ef-
fective mechanism should be designed to reject
useless candidates. “Wrong argument” is where
extracted arguments do not coincide with ground
truth, which is mainly caused by merging multi-
ple arguments in ground truth into one. “Missing
argument” is where the model fails to recognize
arguments. These two errors usually happen when
the structure of the sentence is complicated and
coreference is involved. More linguistic informa-
tion should be introduced to solve these problems.

5 Conclusion

We propose a binary classification loss function to
calibrate confidences in open IE. Iteratively op-
timizing the loss function enables the model to
incrementally learn from trial and error, yielding
substantial improvement. An error analysis is per-
formed to shed light on possible future directions.

Acknowledgements

This work was supported in part by gifts from
Bosch Research, and the Carnegie Bosch Institute.

References
Michele Banko, Michael J. Cafarella, Stephen Soder-

land, Matthew Broadhead, and Oren Etzioni. 2007.
Open information extraction from the web. In Pro-
ceedings of the 20th International Joint Conference
on Artificial Intelligence, pages 2670–2676.

Luciano Del Corro and Rainer Gemulla. 2013. Clausie:
clause-based open information extraction. In 22nd
International World Wide Web Conference, pages
355–366.

Lei Cui, Furu Wei, and Ming Zhou. 2018. Neural
open information extraction. In Proceedings of the
56th Annual Meeting of the Association for Compu-
tational Linguistics, pages 407–413.

Kevin Duh, Benjamin Van Durme, and Sheng Zhang.
2017. MT/IE: cross-lingual open information ex-
traction with neural sequence-to-sequence models.
In Proceedings of the 15th Conference of the Euro-
pean Chapter of the Association for Computational
Linguistics, pages 64–70.

Anthony Fader, Stephen Soderland, and Oren Etzioni.
2011. Identifying relations for open information ex-
traction. In Proceedings of the 2011 Conference on
Empirical Methods in Natural Language Process-
ing, pages 1535–1545.

Yarin Gal and Zoubin Ghahramani. 2016. A theoret-
ically grounded application of dropout in recurrent
neural networks. In Advances in Neural Informa-
tion Processing Systems 29: Annual Conference on
Neural Information Processing Systems 2016, pages
1019–1027.

Matt Gardner, Joel Grus, Mark Neumann, Oyvind
Tafjord, Pradeep Dasigi, Nelson F. Liu, Matthew E.
Peters, Michael Schmitz, and Luke Zettlemoyer.
2018. Allennlp: A deep semantic natural language
processing platform. CoRR, abs/1803.07640.

Luheng He, Kenton Lee, Mike Lewis, and Luke Zettle-
moyer. 2017. Deep semantic role labeling: What
works and what’s next. In Proceedings of the 55th
Annual Meeting of the Association for Computa-
tional Linguistics, pages 473–483.

Luheng He, Mike Lewis, and Luke Zettlemoyer. 2015.
Question-answer driven semantic role labeling: Us-
ing natural language to annotate natural language.
In Proceedings of the 2015 Conference on Empiri-
cal Methods in Natural Language Processing, pages
643–653.

Shengbin Jia, Yang Xiang, and Xiaojun Chen. 2018.
Supervised neural models revitalize the open rela-
tion extraction. CoRR, abs/1809.09408.

Mausam, Michael Schmitz, Stephen Soderland, Robert
Bart, and Oren Etzioni. 2012. Open language learn-
ing for information extraction. In Proceedings of
the 2012 Joint Conference on Empirical Methods
in Natural Language Processing and Computational
Natural Language Learning, pages 523–534.

Matthew E. Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word repre-
sentations. In Proceedings of the 2018 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, pages 2227–2237.

http://ijcai.org/Proceedings/07/Papers/429.pdf
https://doi.org/10.1145/2488388.2488420
https://doi.org/10.1145/2488388.2488420
https://aclanthology.info/papers/P18-2065/p18-2065
https://aclanthology.info/papers/P18-2065/p18-2065
https://aclanthology.info/papers/E17-2011/e17-2011
https://aclanthology.info/papers/E17-2011/e17-2011
http://www.aclweb.org/anthology/D11-1142
http://www.aclweb.org/anthology/D11-1142
http://papers.nips.cc/paper/6241-a-theoretically-grounded-application-of-dropout-in-recurrent-neural-networks
http://papers.nips.cc/paper/6241-a-theoretically-grounded-application-of-dropout-in-recurrent-neural-networks
http://papers.nips.cc/paper/6241-a-theoretically-grounded-application-of-dropout-in-recurrent-neural-networks
http://arxiv.org/abs/1803.07640
http://arxiv.org/abs/1803.07640
https://doi.org/10.18653/v1/P17-1044
https://doi.org/10.18653/v1/P17-1044
http://aclweb.org/anthology/D/D15/D15-1076.pdf
http://aclweb.org/anthology/D/D15/D15-1076.pdf
http://arxiv.org/abs/1809.09408
http://arxiv.org/abs/1809.09408
http://www.aclweb.org/anthology/D12-1048
http://www.aclweb.org/anthology/D12-1048
https://aclanthology.info/papers/N18-1202/n18-1202
https://aclanthology.info/papers/N18-1202/n18-1202


5300

Satoshi Sekine. 2006. On-demand information extrac-
tion. In ACL 2006, 21st International Conference on
Computational Linguistics and 44th Annual Meet-
ing of the Association for Computational Linguis-
tics, Proceedings of the Conference, Sydney, Aus-
tralia, 17-21 July 2006.

Rupesh Kumar Srivastava, Klaus Greff, and Jürgen
Schmidhuber. 2015. Training very deep networks.
In Advances in Neural Information Processing Sys-
tems 28: Annual Conference on Neural Information
Processing Systems 2015, pages 2377–2385.

Gabriel Stanovsky and Ido Dagan. 2016. Creating a
large benchmark for open information extraction.
In Proceedings of the 2016 Conference on Empiri-
cal Methods in Natural Language Processing, pages
2300–2305.

Gabriel Stanovsky, Jessica Ficler, Ido Dagan, and Yoav
Goldberg. 2016. Getting more out of syntax with
props. CoRR, abs/1603.01648.

Gabriel Stanovsky, Julian Michael, Luke Zettlemoyer,
and Ido Dagan. 2018. Supervised open information
extraction. In Proceedings of the 2018 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, pages 885–895.

Mingming Sun, Xu Li, Xin Wang, Miao Fan, Yue Feng,
and Ping Li. 2018. Logician: A unified end-to-end
neural approach for open-domain information ex-
traction. In Proceedings of the Eleventh ACM Inter-
national Conference on Web Search and Data Min-
ing, pages 556–564.

Matthew D. Zeiler. 2012. ADADELTA: an adaptive
learning rate method. CoRR, abs/1212.5701.

Yu Zhang, Guoguo Chen, Dong Yu, Kaisheng Yao,
Sanjeev Khudanpur, and James R. Glass. 2016.
Highway long short-term memory RNNS for dis-
tant speech recognition. In 2016 IEEE International
Conference on Acoustics, Speech and Signal Pro-
cessing, pages 5755–5759.

http://aclweb.org/anthology/P06-2094
http://aclweb.org/anthology/P06-2094
http://papers.nips.cc/paper/5850-training-very-deep-networks
http://aclweb.org/anthology/D/D16/D16-1252.pdf
http://aclweb.org/anthology/D/D16/D16-1252.pdf
http://arxiv.org/abs/1603.01648
http://arxiv.org/abs/1603.01648
https://aclanthology.info/papers/N18-1081/n18-1081
https://aclanthology.info/papers/N18-1081/n18-1081
https://doi.org/10.1145/3159652.3159712
https://doi.org/10.1145/3159652.3159712
https://doi.org/10.1145/3159652.3159712
http://arxiv.org/abs/1212.5701
http://arxiv.org/abs/1212.5701
https://doi.org/10.1109/ICASSP.2016.7472780
https://doi.org/10.1109/ICASSP.2016.7472780

