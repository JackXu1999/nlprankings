




































Syntax-Enhanced Neural Machine Translation with Syntax-Aware Word Representations


Proceedings of NAACL-HLT 2019, pages 1151–1161
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

1151

Syntax-Enhanced Neural Machine Translation with Syntax-Aware Word
Representations

Meishan Zhang1 and Zhenghua Li2 and Guohong Fu3∗ and Min Zhang2
1. School of New Media and Communication, Tianjin University, China

2. School of Computer Science and Technology, Soochow University, China
3. Institute of Artificial Intelligence, Soochow University, China

mason.zms@gmail.com,
{zhli13, minzhang}@suda.edu.cn,

ghfu@hotmail.com

Abstract

Syntax has been demonstrated highly effec-
tive in neural machine translation (NMT). Pre-
vious NMT models integrate syntax by rep-
resenting 1-best tree outputs from a well-
trained parsing system, e.g., the representa-
tive Tree-RNN and Tree-Linearization meth-
ods, which may suffer from error propaga-
tion. In this work, we propose a novel method
to integrate source-side syntax implicitly for
NMT. The basic idea is to use the interme-
diate hidden representations of a well-trained
end-to-end dependency parser, which are re-
ferred to as syntax-aware word representations
(SAWRs). Then, we simply concatenate such
SAWRs with ordinary word embeddings to en-
hance basic NMT models. The method can be
straightforwardly integrated into the widely-
used sequence-to-sequence (Seq2Seq) NMT
models. We start with a representative RNN-
based Seq2Seq baseline system, and test the
effectiveness of our proposed method on two
benchmark datasets of the Chinese-English
and English-Vietnamese translation tasks, re-
spectively. Experimental results show that the
proposed approach is able to bring significant
BLEU score improvements on the two datasets
compared with the baseline, 1.74 points for
Chinese-English translation and 0.80 point for
English-Vietnamese translation, respectively.
In addition, the approach also outperforms
the explicit Tree-RNN and Tree-Linearization
methods.

1 Introduction

In the past few years, neural machine transla-
tion (NMT) has drawn increasing interests due to
its simplicity and promising performance (Bah-
danau et al., 2014; Jean et al., 2015; Luong and
Manning, 2015; Luong et al., 2015; Shen et al.,
2016; Vaswani et al., 2017). The widely used

∗Corresponding author.

教育 是 现代 文明 的 基石
Education is modern civilization ’s cornerstone

top

root

amod

assmod

assm

attr

• An example of input dependency tree.

Input

教育

是

现代

文明

的

基石

Encoder

o1
o2
o3
o4
o5
o6

Decoder

head=1, top

head=0, root

head=4, amod

head=6, assmod

head=4, assm

head=2, attr

• SAWRs, where the encoder outputs are used as inputs for
NMT similar to source-side word embeddings.

Figure 1: An example to illustrate our method of en-
coding source dependency syntax, where the English
translation is “Education is the cornerstone of modern
civilization” for the source Chinese input.

sequence-to-sequence (Seq2Seq) framework com-
bined with attention mechanism achieves signif-
icant improvement over the traditional statistical
machine translation (SMT) models on a variety
of language pairs, such as Chinese-English (Shi
et al., 2016; Mi et al., 2016; Vaswani et al., 2017;
Cheng et al., 2018). Under an encoder-decoder ar-
chitecture, the Seq2Seq framework first encodes
the source sentence into a sequence of hidden vec-
tors, and then incrementally predicts the target
sentence (Cho et al., 2014a).

Recently, inspired by the success of syntax-
based SMT (Williams et al., 2016), researchers
propose a range of interesting approaches for ex-
ploiting syntax information in NMT models, as
syntactic trees could offer long-distance relations
in sentences (Shi et al., 2016; Wu et al., 2017b; Li



1152

et al., 2017; Bastings et al., 2017; Hashimoto and
Tsuruoka, 2017).

As a straightforward method, tree-structured re-
current neural network (Tree-RNN) can elegantly
model the source-side syntax and globally en-
code the whole trees. Eriguchi et al. (2016),
Chen et al. (2017a) and Yang et al. (2017) show
that Tree-RNN can effectively integrate syntax-
oriented trees into Seq2Seq NMT models.

Regardless of the effectiveness of Tree-RNN,
we find that it suffers from a severe low-efficiency
problem because of the heterogeneity of different
syntax trees, which leads to increasing difficul-
ties for batch computation compared with sequen-
tial inputs. Even with deliberate batching method
of Neubig et al. (2017), our preliminary experi-
ments show that Tree-RNN with gated recurrent
unit (GRU) can lead to nearly four times slower
performance when it is integrated into a classical
Seq2Seq system.

To solve the problem, Tree-Linearization is a
good alternative for syntax encoding. The main
idea is to linearize syntax trees into sequential
symbols, and then exploit the resulting sequences
as inputs for NMT. Li et al. (2017) propose a
depth-first method to traverse a constituent tree,
converting it into a sequence of symbols mixed
with sentential words and syntax labels. Similarly,
Wu et al. (2017b) combine several strategies of
tree traversing for dependency syntax integration.

In this work, we present an implicit syntax en-
coding method for NMT, enhancing NMT models
by syntax-aware word representations (SAWRs).
Figure 1 illustrates the basic idea, where trees are
modeled indirectly by sequential vectors extracted
from an encoder-decoder dependency parser. On
the one hand, the method avoids the structural het-
erogeneity and thus can be integrated efficiently,
and on the other hand, it does not require discrete
1-best tree outputs, alleviating the error propaga-
tion problem induced from syntax parsers. Con-
cretely, the vector outputs are extracted from the
encoding outputs of the encoder-decoder depen-
dency parser. As shown in Figure 1, the encoding
outputs, denoted as o = o1 · · ·o6, are then inte-
grated into Seq2Seq NMT models by directly con-
catenated with the source input word embeddings
after a linear projection.

We start with a Seq2Seq baseline with attention
mechanism (Bahdanau et al., 2014) for study, fol-
lowing previous studies of the same research line,

and then integrate source dependency syntax by
SAWRs. We conduct experiments on Chinese-
English and English-Vietnamese translation tasks,
respectively. The results show that our method is
very effective in source syntax integration. With
source dependency syntax, the performances of
Chinese-English and English-Vietnamese trans-
lation can be significantly boosted by 1.74
BLEU points and 0.80 BLEU points, respec-
tively. We also compare the method with the
representative Tree-RNN and Tree-Linearization
approaches of syntax integration, finding that
our method is able to achieve larger improve-
ments than the two approaches for both tasks.
All the codes are released publicly available at
https://github.com/zhangmeishan/SYN4NMT un-
der Apache License 2.0.

2 Baseline

We take the simple yet effective Seq2Seq model
with attention mechanism proposed by Luong
et al. (2015) as our baseline. Under the stan-
dard encoder-decoder architecture, an encoder
first maps the source-language input sentence into
a sequence of hidden vectors, and a decoder then
incrementally predicts the target output sentence.
In particular, we should notice that several recent
models (Vaswani et al., 2017; Zheng et al., 2017;
Cheng et al., 2018) which have been shown to
be more powerful can also serve as our baseline,
since these models focus on very different aspects
of NMT, which could be potentially complemen-
tary with our focus of syntax integration. We will
demonstrate it by experimental analysis as well.

2.1 Encoder
In the encoder part, a single-layer bi-directional
recurrent neural network (Bi-RNN) is employed
to encode the sentence in order to capture fea-
tures from the current word and the unbounded
left and right contextual words. Given a source-
language input sentence x = x1 · · ·xn and its em-
bedding sequence ex1 · · · exn , the Bi-RNN pro-
duces an encoding sequence of dense vectors h =
h1 · · ·hi · · ·hn:

hi =
−→
h i ⊕

←−
h i,

−→
h i = rnn

L(exi ,
−→
h i−1)

←−
h i = rnn

R(exi ,
←−
h i+1)

(1)

where rnnL/R can be either GRU (Cho et al.,
2014b) or LSTM. We use GRU all through this



1153

paper for efficiency following Chen et al. (2017a).

2.2 Decoder

The decoder part incrementally predicts the target
word sequence y = y1 · · · ym, whose translation
probability is defined as follows:

p(y|x) =
m∏

j=1

p(yj |y1 · · · yj−1,h). (2)

The training objective is to maximize the proba-
bility of the reference translation. During evalu-
ation, we aim to search for a target sentence with
the highest probability for a given source sentence.

The probability of the j-th target word is com-
puted by a two-layer feed-forward neural network:

p(yj |y1 · · · yj−1,h) = g(sj−1, cj), (3)

where sj−1 = rnntgt(eyj−1 ⊕ cj−1, sj−2) is the
output of a left-to-right RNN over the predicted
words, and the cj /cj−1 is the weighted sum over
the encoding sequence h of the source sentence
via the attention mechanism, which is computed
as follows:

cj =
n∑

k=1

αj,khk

αj,k =
exp(βj,k)∑n
l=1 exp(βj,l)

βj,l = s
T
j−1W

ahl

(4)

where W a is the model parameter in attention.

3 Our Method

Syntax information has been demonstrated to be
valuable for NMT. Previously, there were two rep-
resentative approaches to encode syntax into an
NMT model. The first approach directly repre-
sents an input syntax tree by Tree-RNN, and then
uses the Tree-RNN outputs as additional encoder
inputs for NMT. The second approach models
source syntax trees indirectly by first converting
a hierarchical tree into a sequence of symbols, and
then use the symbols as inputs for NMT. The sec-
ond method is referred to as Tree-Linearization
here.

Tree-RNN is able to represent the syntax struc-
tures fully and comprehensively. However, be-
cause of the heterogeneity of different syntax
trees, this approach suffers serious inefficiency

encoder

decoder

input

embedding

projection

Bi-RNN

⊕⊕⊕

decoder

parser output translation output

encoder

Figure 2: The framework of the SAWR approach,
where the left part shows the encoder-decoder of a su-
pervised dependency parsing model and the right part
shows the NMT encoder-decoder.

problem as the increased difficulty of batch com-
putation for GPU neural computation. The second
approach exploits an alternative sequence to sub-
stitute the original trees, which solves the ineffi-
ciency problem. But it may bring loss of syntax
information because the hierarchical tree structure
is no longer maintained in the new representation,
which could be potentially useful for NMT.

Both the two syntax integration approaches are
based on discrete 1-best outputs of a supervised
dependency parser, which may suffer from the er-
ror propagation problem. Incorrect syntax trees as
inputs for NMT may produce erroneous outputs,
leading to inappropriate translation results. In or-
der to alleviate the problem, we present a novel
method not using the discrete parsing outputs.

We focus on supervised dependency parsing
models which can be formalized as an encoder-
decoder architecture, and exploit the encoder out-
puts as the inputs for our Seq2Seq NMT model.
The encoder outputs are sequences of dense vec-
tors aligning with the source sentential words, as
shown in Figure 1, and thus they could be eas-
ily combined with the encoder part of our NMT
model. We refer to this method as SAWR for
brief. Our approach takes the implicit hidden out-
puts from a supervised parser as inputs for NMT,
which greatly reduces the direct influence brought
from discrete 1-best parser outputs.

Figure 2 shows the framework of SAWR. Con-
cretely, we first project the encoder outputs of a
dependency parsing model into a sequence of vec-
tors by a feed-forward linear layer, as shown by



1154

the projection module in Figure 2:

si = Woi + b (5)

where o=o1 · · ·on is the encoder output of a
parsing model, W and b are model parameters.
Then we concatenate the resulting vectors with the
source embeddings as inputs for the baseline Bi-
RNN Encoder. Thus the encoder process can be
formalized as follows:

h = Bi-RNN
(
ex1 ⊕ s1, · · · , exn ⊕ sn

)
. (6)

Noticeably, the SAWR method can be regarded
as an adaption of joint learning as well. We
can train both dependency parsing and machine
translation model parameters concurrently. In this
work, we focus on the machine translation task
and do not involve the training objective of de-
pendency parsing. However, we can still fine-
tune model parameters of the encoder part of de-
pendency parsing by back-propagating the train-
ing losses of NMT into this part as well.

Actually, SAWRs are also similar to the ELMO
embeddings (Peters et al., 2018). ELMO learns
context word representations by using language
model as objective, while SAWRs learn syntax-
aware word representations by using dependency
parsing as objective. On the other hand, compared
with the Tree-RNN and Tree-Linearization meth-
ods which encode syntax trees by neural networks
directly, SAWRs are less sensitive to the output
syntax trees. Thus the SAWR method can alleviate
the error propagation problem.

4 Experiments

4.1 Settings
Data. We conduct experiments on the Chinese-
English and English-Vietnamese translation tasks,
respectively. For Chinese-English, we use the par-
allel training data from the publicly available LDC
corpora,1 with 28.3M Chinese words and 34.5M
English words, respectively, consisting of 1.25M
sentence pairs, and test model performances on
the NIST datasets, using NIST MT02 as the de-
velopment data, and MT03-06 as test datasets. For
English-Vietnamese, we use the standard IWSLT
2015 dataset,2 which consists of about 133K sen-
tence pairs, and evaluate our models by exploiting

1LDC2002E18, LDC2003E07, LDC2003E14, Hansards
portion of LDC2004T07, LDC2004T08 and LDC2005T06.

2https://nlp.stanford.edu/projects/nmt/

the TED tst2012 and tst2013 as the development
and test datasets, respectively.

For the source side sentences, we construct vo-
cabularies of the most frequent 50K words, while
for the target side sentences, we apply byte-pair
encodings (BPE) (Sennrich et al., 2016) with 32K
merges to obtain subword units, and construct the
target vocabularies by the most frequent 32K sub-
words. During training, we use only the sentence
pairs whose source and target lengths both are no
longer than 50 and 150 for Chinese-English and
English-Vietnamese translations, respectively.

Evaluation. We use the case insensitive 4-
gram BLEU score as the main evaluation met-
rics (Papineni et al., 2002), and adopt the script
multi-bleu.perl in the Mose toolkit.3 Sig-
nificance tests are conducted based on the best-
BLEU results for each approach by using boot-
strap resampling (Koehn, 2004).

Alternatively, in order to compare the effective-
ness of our model with other syntax integration
methods, we implement a Tree-RNN approach
and a Tree-Linearization approach, respectively:

• Tree-RNN: We build a one-layer bi-
directional Tree-RNN with GRU over
input word embeddings, producing syntax-
enhanced word representations, which are
then fed into the encoder of NMT as basic
inputs. The method is similar to the model
proposed by Chen et al. (2017a).

• Tree-Linearization: We first convert depen-
dency trees into constituent trees (Sun and
Wan, 2013), and then feed it into the NMT
model proposed by Li et al. (2017).

Hyperparameters. We set the dimension sizes
of all hidden neural layers to 1024, except the in-
put layers for RNNs (i.e. input word embeddings
and the projection layer of SAWR), which are set
to 512. We initialize all model parameters by ran-
dom uniform distribution between [−0.1, 0.1]. We
apply dropout on the output layer of word transla-
tion with a ratio of 0.5.

We adopt the Adam algorithm (Kingma and Ba,
2014) for parameter optimization, with the initial
learning rate of 5 × 10−4, the gradient clipping
threshold of 5, and the mini-batch size of 80. Dur-
ing translation, we employ beam search for decod-
ing with the beam size of 5.

3http://www.statmt.org/moses



1155

System MT03 MT04 MT05 MT06 Average/∆
Baseline 36.44 39.35 36.26 36.32 37.09
SAWR 38.42 40.60 38.27 38.04 38.83/+1.74

Tree-RNN 38.12 40.35 37.86 37.32 38.41/+1.32
Tree-Linearization 37.95 40.24 37.64 37.44 38.32/+1.23

Previous Work
Chen et al. (2017a) 35.64 36.63 34.35 30.57 34.30/+2.59

Li et al. (2017) 34.9 38.6 35.5 35.6 36.15/+1.45
Chen et al. (2017b) 35.91 38.73 34.18 33.76 35.65/+1.52

Table 1: Final results of Chinese-English translation. All syntax-integrated approaches are significantly better than
the baseline system (p < 0.05).

Source-Side Parsing. We employ the state-of-
the-art BiAffine dependency parser recently pro-
posed by Dozat and Manning (2016) to obtain
the source-side dependency syntax information.
The BiAffine parser can also be understood as an
encoder-decoder model, where the encoder part is
a three-layer bi-directional LSTM over the input
words, and the decoder uses BiAffine operations to
score all candidate dependency arcs and finds the
highest-scoring trees via dynamic programming.

For Chinese-English translation, we train the
dependency parser on Chinese Treebank 7.0 with
Stanford dependencies,4 using 50K random sen-
tences as the training data and the remaining as
the test data. The parser achieves 81.02% pars-
ing accuracy (labeled attached score, LAS) on the
test dataset. For English-Vietnamese translation,
we train the dependency parser on English WSJ
corpus, following the same data split as Dozat and
Manning (2016), and obtaining a LAS of 93.84%
on the test dataset.5

4.2 Speed Comparison

All our experiments are run on a single GPU
NVIDIA TITAN Xp. We report the averaged
one-epoch training time on the Chinese-English
translation dataset (consuming all 125M sentence
pairs) as follows:

Baseline 105 min
SAWR 142 min

Tree-RNN 498 min
Tree-Linearization 137 min

4https://nlp.stanford.edu/software/stanford-
dependencies.shtml

5For simplicity, we use only words as inputs for both Chi-
nese and English dependency parsing, avoiding the influences
brought by other inputs, such as automatic POS tags.

The SAWR system spends averaged 142 minutes,6

37 minutes slower than the baseline model. The
Tree-Linearization spends averaged 137 minutes
per epoch, which is the fastest syntax integration
method. Our SAWR approach spends 5 more min-
utes than Tree-Linearization, appropriate 3.5% of
the total spend time per epoch, which could be
negligible. The Tree-RNN model spends 498 min-
utes per epoch, nearly four times slower than the
baseline model.7 According to the results, we can
conclude that the Tree-RNN model is highly inef-
ficient for encoding dependency syntax, whereas
the SAWR and Tree-Linearization are almost as
efficient as the baseline Seq2Seq system.

4.3 Main Results

4.3.1 Chinese-English Translation
Table 1 shows the main results of all approaches
on Chinese-English datasets. Considering the ef-
fect of random initialization, we train three indi-
vidual models for each approach, and use the av-
eraged BLEU scores for fair comparisons.

According to the results, we can see that all
syntax-integrated approaches can bring significant
improvements over the baseline system, which de-
notes that syntax is highly effective for Chinese-
English machine translation. In addition, the pro-
posed SAWR approach obtains the largest BLEU
improvements, averaged ∆ = 1.74 BLEU points
better than the baseline system. The Tree-RNN
and Tree-Linearization approaches bring improve-

6We exclude the time consumed by the encoder part of
the dependency parsing model for fair comparisons, as other
methods require to perform parsing in an offline way.

7The Tree-RNN model is implemented with deliberate
batching motivated by Neubig et al. (2017), without which
the model is intolerably slow, reaching about 1,900 minutes
per epoch.



1156

System tst 2013 / ∆
Baseline 28.29
SAWR 29.09/+0.80

Tree-RNN 28.51/+0.22
Tree-Linearization 28.93/+0.64

Table 2: Final Results on the IWSLT 2015 English-
Vietnamese translation task. Only SAWR is signifi-
cantly better than the baseline system (p < 0.05).

ments of averaged ∆ = 1.32 and ∆ = 1.23 BLEU
points, respectively. The results show that our im-
plicit syntax-aware encoding method is better than
Tree-RNN and Tree-Linearization.

We compare our NMT models with other state-
of-the-art methods as well. The results are just
for reference since experimental details could be
very different. In particular, we list the relative im-
provements over the corresponding baseline mod-
els by integrating syntax structures, which are cal-
culated according to their papers. All these studies
exploit lower baselines compared with our mod-
els. The Tree-RNN and Tree-Linearization are es-
sentially similar to Chen et al. (2017a) and Li et al.
(2017), respectively. As shown, our approaches
can still obtain large improvements based on a
stronger baseline.

4.3.2 English-Vietnamese Translation

Table 2 shows the final results on the IWSLT 2015
English-Vietnamese translation task. The over-
all tendency is similar to that of Chinese-English
translation. The syntax information can boost the
translation performances by using any of the three
approaches. The SAWR approach gives the best
translation performance, significantly outperform
the baseline system by ∆ = 0.80 BLEU points.
While although the other two approaches bring
better performances, the improvements are not
significant. The results demonstrate the advantage
of the proposed implicit SAWR approach. By not
using the 1-best parser outputs, our approach can
reduce the error propagation problem, thus bring
larger improvements with syntax.

In particular, we find that the increases of BLEU
scores are smaller than that of Chinese-English
translation by integrating syntactic features. The
averaged BLEU increases are 0.55 for English-
Vietnamese and 1.43 for Chinese-English. The
possible reason may be due to that the source En-
glish sentences are more grammatically rigorous

Parser MT03 MT04 MT05 MT06 Average
no Tune 38.42 40.60 38.27 38.04 38.83

Tune 37.33 39.45 36.93 37.03 37.69

Table 3: The influence of fine-tuning parser parameters
in the SAWR system.

than Chinese sentences. For example, the English
functional words such as “of” and “‘s” which indi-
cate the possessive relationship, should be always
kept in sentences by standard, while their Chinese
correspondence “的” may be omitted in sentences.

4.4 Analysis
In this section, we conduct analysis on Chinese-
English translation from different aspects to bet-
ter understand the SAWR approach of integrating
source-side dependency syntax for NMT.

4.4.1 Fine-Tuning Syntax-Oriented Inputs
The SAWR approach directly uses the encoder
outputs of a dependency parser as extra inputs
for NMT. In the above experiments, we keep the
parser model parameters fixed, letting them unin-
fluenced from NMT optimization. Actually, this
part can be further fine tuned along with the NMT
learning, by treating them as one kind model pa-
rameters. Thus there arises a question that whether
fine-tuning the parser model parameters can bring
better performance.

As an interesting attempt, we can simultane-
ously fine tune the parameters of both the parser
and the Seq2Seq NMT model during training. Fig-
ure 3 shows the results. We can see that fine-tuning
decreases the average BLEU score by 38.83 −
37.69 = 1.14 significantly. This may be because
that fine-tuning disorders the representation ability
of the parser and makes its function more overlap-
ping with other network components. This further
demonstrates that pretrained syntax-aware word
representations are helpful for NMT.

4.4.2 Alignment Study
Alignment quality is an important metric to il-
lustrate and evaluate machine translation outputs.
Here we study how syntax features influence the
alignment results for NMT. We approximate the
alignment scores by the attention probabilities as
shown in Equation 4.8 For better understanding

8We aim to offer an intuitive interpretation by a carefully-
selected example. In fact, the alignment computation method
here may be problematic (Koehn and Knowles, 2017).



1157

System MT03 MT04 MT05 MT06 Average/∆
Baseline×3 40.90 43.25 40.64 40.16 41.24
SAWR×3 41.94 44.59 41.91 41.97 42.60/+1.36

Tree-RNN×3 42.03 44.15 41.50 41.41 42.27/+1.03
Tree-Linearization×3 41.74 44.23 41.32 41.44 42.18/+0.94

Hybrid 42.72 45.14 42.38 42.15 43.10/+1.86

Table 4: Ensemble performances, where the Hybrid model denotes SAWR + Tree-RNN + Tree-Linearization.

System ... 现代(modern)
... 的

(’s)
...

Baseline

SAWR

Tree-RNN

Tree-Linearization

Figure 3: Alignments for the baseline and syntax-
integrated systems, where the same example in Figure
1 is analyzed and the target English word is “of”.

the effectiveness of syntax, we choose the target-
side English word “of” for comparison, which is a
grammatical functional word.

Figure 3 shows the alignment probability dis-
tributions returned by different approaches. Intu-
itively, this word should be aligned with the Chi-
nese word “的(de)”. But according to the results,
we can see that only the SAWR model distributes
a high attention score to it, which is consistent
with our intuition. The other three models are all
aligned to the source word “现代 (modern)” with
high confidence over 85%. The possible reason
for “of” being aligned to “现代 (modern)” could
be due to that “of modern” is a high-frequency col-
location in the training corpora.

4.4.3 Ensemble Study
Here we perform model ensembles to examine
the divergences of the three syntax-integration
approaches (Zhou et al., 2017b; Denkowski
and Neubig, 2017). Intuitively, the hetero-
approach ensemble which combines three NMT
models of different methods should obtain bet-
ter performances than homo-approach ensembles
which combine three NMT models of the same
method, since NMT models of different syntax-
integrations approaches have larger divergences.

Table 4 shows the results. First, we can see
that ensemble is one effective technique to im-
prove the translation performances. More impor-

(0,10] (11,20] (21,30] (31,40] (41,50] >50

30

34

38

42

B
L

E
U

Baseline SAWR
Tree-RNN Tree-Linearization

Figure 4: The effect of source input length.

tantly, the results show that the heterogeneous en-
semble achieves averaged BLEU improvements
by 43.10 − 41.24 = 1.86 points, better than the
gains achieved by all three homo-approach ensem-
bles, denoting that the three approaches could be
mutually complementary in representing depen-
dency syntax, and the resulting models of the three
approaches are highly diverse.

4.4.4 Analysis by Source Sentence Length
Intuitively, by introducing the source syntax into
the NMT model, relations between long-distance
words are explicitly modeled by dependency trees,
thus we can expect that models enhanced by
source syntax are able to bring better translations
for longer sentences. Figure 4 shows the perfor-
mances of the baseline and all syntax-enriched
models in terms of source sentence lengths, where
we bin all the MT03-MT06 sentences by their
lengths into six intervals. The results show that
the BLEU scores are improved significantly when
source sentential lengths are over 10, which con-
firms our intuition.

4.4.5 Effect of Parsing Performance
Finally, we examine how the performance of the
dependency parser influences the final transla-
tion quality. While the full dependency parser is



1158

System MT03 MT04 MT05 MT06 Average/∆
Transformer 40.45 42.76 40.09 39.67 40.74

SAWR 41.63 43.60 41.68 40.21 41.78/+1.04
Tree-RNN 41.24 43.38 41.04 40.02 41.42/+0.68

Tree-Linearization 41.12 43.02 41.04 39.86 41.26/+0.52

Table 5: Final results based on the transformer. Only the SAWR results are significantly better (p < 0.05).

SAWR Tree-RNN Tree-Linearization Baseline

36

37

38

39

B
L

E
U

50K(81.02) 30K(79.43) 10K(73.69) 5K(70.61)

Figure 5: The effect of dependency parsing perfor-
mances on our proposed approaches.

trained on 50K sentences, we retrain three weaker
dependency parsers on 30K, 10K and 5K sen-
tences, respectively. Figure 5 shows the NMT
BLEU scores and the parsing accuracies. It is clear
that the parsing accuracy directly influences the
translation quality, indicating the effectiveness and
importance of exploiting syntactic information.

4.4.6 Transformer as Baseline
Here we conduct experiments based on the trans-
former NMT model (Vaswani et al., 2017),
which is a stronger baseline, to further ver-
ify the effectiveness of our proposed method.
This also demonstrates that the proposed SAWR
method does not limit to a certain NMT base-
line. Concretely, we extend the bottom word rep-
resentations by incorporating syntactic encodings
s=s1 · · · sn (shown in Equation 5) into them, and
then feed them into the transformer encoder by
a linear projection layer to align with the input
dimension. We implement Tree-RNN and Tree-
Linearization for Transformer in a similar way,
only adapting the source input word representing.
We adopt a widely-used setting with 8 heads, 6
layers and the hidden dimension size of 512.

Table 5 shows the results. As shown, the trans-
former results are indeed much better than RNN-
based baseline. The BLEU scores show an aver-
age increase of 40.74−37.09 = 3.65. In addition,
we can see that syntax information can still give

positive influences based on the transformer. The
SAWR approach can also outperform the base-
line system significantly. Particularly, we find that
our SAWR approach is much more effective than
the Tree-RNN and Tree-Linearization approaches.
The results further demonstrate the effectiveness
of SAWRs in syntax integration for NMT.

5 Related Work

By explicitly expressing the structural connections
between words and phrases, syntax trees been
demonstrated helpful in SMT (Liu et al., 2006;
Cowan et al., 2006; Marton and Resnik, 2008;
Xie et al., 2011; Li et al., 2013; Williams et al.,
2016). Although the representative Seq2Seq NMT
models are able to capture latent long-distance re-
lations by using neural network structures such
GRU and LSTM (Sutskever et al., 2014; Wu et al.,
2016), recent studies show that explicitly integrat-
ing syntax trees into NMT models can bring fur-
ther gains (Sennrich and Haddow, 2016; Shi et al.,
2016; Zhou et al., 2017a; Wu et al., 2017a; Aha-
roni and Goldberg, 2017). Under the NMT setting,
the exploration of syntax trees could be more flex-
ible, because of the strong capabilities of neural
network in representing arbitrary structures.

Recursive neural networks based on LSTM or
GRU have been one natural method to model syn-
tax trees (Zhu et al., 2015; Tai et al., 2015; Li et al.,
2015; Zhang et al., 2016; Teng and Zhang, 2016;
Miwa and Bansal, 2016; Kokkinos and Potami-
anos, 2017), which are capable of representing the
entire trees globally. Eriguchi et al. (2016) present
the first work to apply a bottom-up Tree-LSTM
for NMT. The major drawback is that its bottom-
up composing strategy is insufficient for bottom
nodes. Thus bi-directional extensions have been
suggested (Chen et al., 2017a; Yang et al., 2017).
Since Tree-RNN suffers serious inefficiency prob-
lem, Li et al. (2017) suggest a Tree-Linearization
alternative, which converts constituent trees into a
sequence of symbols mixed with words and syn-



1159

tactic tags. The method is as effective as Tree-
RNN approaches yet more effective. Noticeably,
all these studies focus on constituent trees.

There have been several studies for NMT us-
ing dependency syntax. Hashimoto and Tsuruoka
(2017) propose to combine the head information
with sequential words together as source encoder
inputs, where their input trees are latent depen-
dency graphs. Recently, there are several studies
by using convolutional neural structures to repre-
sent source dependency trees, where tree nodes are
modeled individually (Chen et al., 2017b; Bast-
ings et al., 2017). Wu et al. (2017b) build a syn-
tax enhanced encoder by multiple Bi-RNNs over
several different word sequences based on differ-
ent traversing orders over dependency trees, i.e.,
the original sequential order and several tree-based
orders. All these methods require certain extra ef-
forts to encode the source dependency syntax over
a baseline Seq2Seq NMT.

6 Conclusion

We proposed a novel syntax integration method,
SAWR, to incorporate source dependency-based
syntax for NMT. It encodes dependency syntax
implicitly, not requiring discrete syntax trees as
inputs. Experiments showed that the method can
bring significantly better performances for both
Chinese-English and English-Vietnamese transla-
tion tasks. In addition, we compared the method
with two approaches based on Tree-RNN and
Tree-Linearization, which has been previously ex-
ploited for syntax integration, finding that our
method is more effective and meanwhile very ef-
ficient. We conducted several experimental analy-
ses to study our proposed methods deeper.

Acknowledgments

We thank all anonymous reviewers for their valu-
able comments. We thank Huadong Chen, Haoran
Wei and Zaixiang Zheng for their help in imple-
menting baseline neural machine translation mod-
els. This work is supported by National Natu-
ral Science Foundation of China (NSFC) grants
61525205, U1836222, and 61672211.

References
Roee Aharoni and Yoav Goldberg. 2017. Towards

string-to-tree neural machine translation. In Pro-
ceedings of the 55th ACL, pages 132–140.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473.

Joost Bastings, Ivan Titov, Wilker Aziz, Diego
Marcheggiani, and Khalil Simaan. 2017. Graph
convolutional encoders for syntax-aware neural ma-
chine translation. In Proceedings of EMNLP, pages
1957–1967.

Huadong Chen, Shujian Huang, David Chiang, and Ji-
ajun Chen. 2017a. Improved neural machine trans-
lation with a syntax-aware encoder and decoder. In
Proceedings of ACL, pages 1936–1945.

Kehai Chen, Rui Wang, Masao Utiyama, Lemao
Liu, Akihiro Tamura, Eiichiro Sumita, and Tiejun
Zhao. 2017b. Neural machine translation with
source dependency representation. In Proceedings
of EMNLP, pages 2846–2852.

Yong Cheng, Zhaopeng Tu, Fandong Meng, Junjie
Zhai, and Yang Liu. 2018. Towards robust neural
machine translation. In ACL.

Kyunghyun Cho, Bart van Merrienboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014a. On the proper-
ties of neural machine translation: Encoder–decoder
approaches. In Proceedings of SSST-8, pages 103–
111.

Kyunghyun Cho, Bart van Merrienboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014b. Learning
phrase representations using rnn encoder–decoder
for statistical machine translation. In EMNLP, pages
1724–1734.

Brooke Cowan, Ivona Kuc̆erová, and Michael Collins.
2006. A discriminative model for tree-to-tree trans-
lation. In Proceedings of EMNLP, pages 232–241.

Michael Denkowski and Graham Neubig. 2017.
Stronger baselines for trustable results in neural ma-
chine translation. In The First Workshop on Neural
Machine Translation (NMT).

Timothy Dozat and Christopher D Manning. 2016.
Deep biaffine attention for neural dependency pars-
ing. arXiv preprint arXiv:1611.01734.

Akiko Eriguchi, Kazuma Hashimoto, and Yoshimasa
Tsuruoka. 2016. Tree-to-sequence attentional neu-
ral machine translation. In Proceedings of ACL,
pages 823–833.

Kazuma Hashimoto and Yoshimasa Tsuruoka. 2017.
Neural machine translation with source-side latent
graph parsing. In Proceedings of EMNLP, pages
125–135.

Sébastien Jean, Orhan Firat, Kyunghyun Cho, Roland
Memisevic, and Yoshua Bengio. 2015. Montreal
neural machine translation systems for wmt’15. In
Proceedings of SMT, pages 134–140.



1160

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Philipp Koehn. 2004. Statistical significance tests for
machine translation evaluation. In Proceedings of
EMNLP 2004, pages 388–395.

Philipp Koehn and Rebecca Knowles. 2017. Six chal-
lenges for neural machine translation. In Pro-
ceedings of the First Workshop on Neural Machine
Translation, pages 28–39.

Filippos Kokkinos and Alexandros Potamianos. 2017.
Structural attention neural networks for improved
sentiment analysis. In Proceedings of EACL, pages
586–591.

Jiwei Li, Thang Luong, Dan Jurafsky, and Eduard
Hovy. 2015. When are tree structures necessary for
deep learning of representations? In Proceedings of
the EMNLP, pages 2304–2314.

Junhui Li, Philip Resnik, and Hal Daumé III. 2013.
Modeling syntactic and semantic structures in hier-
archical phrase-based translation. In Proceedings of
NAACL, pages 540–549.

Junhui Li, Deyi Xiong, Zhaopeng Tu, Muhua Zhu, Min
Zhang, and Guodong Zhou. 2017. Modeling source
syntax for neural machine translation. In Proceed-
ings of ACL, pages 688–697.

Yang Liu, Qun Liu, and Shouxun Lin. 2006. Tree-
to-string alignment template for statistical machine
translation. In Proceedings of ACL, pages 609–616.

Minh-Thang Luong and Christopher D Manning. 2015.
Stanford neural machine translation systems for spo-
ken language domains. In Proceedings of IWSLT
2015, pages 76–79.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In Proceedings of the
2015 EMNLP, pages 1412–1421.

Yuval Marton and Philip Resnik. 2008. Soft syntac-
tic constraints for hierarchical phrased-based trans-
lation. In Proceedings of ACL, pages 1003–1011.

Haitao Mi, Baskaran Sankaran, Zhiguo Wang, and
Abe Ittycheriah. 2016. Coverage embedding mod-
els for neural machine translation. In Proceedings
of EMNLP, pages 955–960.

Makoto Miwa and Mohit Bansal. 2016. End-to-end re-
lation extraction using lstms on sequences and tree
structures. In ACL, pages 1105–1116.

Graham Neubig, Yoav Goldberg, and Chris Dyer. 2017.
On-the-fly operation batching in dynamic computa-
tion graphs. In Conference on Neural Information
Processing Systems (NIPS).

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of
ACL, pages 311–318.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word repre-
sentations. In Proceedings of NAACL, pages 2227–
2237.

Rico Sennrich and Barry Haddow. 2016. Linguistic
input features improve neural machine translation.
In Proceedings of the First Conference on Machine
Translation, pages 83–91.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Neural machine translation of rare words with
subword units. In Proceedings of the 54th ACL,
pages 1715–1725, Berlin, Germany.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In Pro-
ceedings of ACL, pages 1683–1692.

Xing Shi, Inkit Padhi, and Kevin Knight. 2016. Does
string-based neural mt learn source syntax? In Pro-
ceedings of EMNLP, pages 1526–1534.

Weiwei Sun and Xiaojun Wan. 2013. Data-driven,
pcfg-based and pseudo-pcfg-based models for chi-
nese dependency parsing. TACL (TACL), 1(1):301–
314.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In NIPS, pages 3104–3112.

Kai Sheng Tai, Richard Socher, and Christopher D.
Manning. 2015. Improved semantic representations
from tree-structured long short-term memory net-
works. In ACL, pages 1556–1566.

Zhiyang Teng and Yue Zhang. 2016. Bidirectional
tree-structured lstm with head lexicalization. arXiv
preprint arXiv:1611.06788.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In NIPS, pages 6000–6010.

Philip Williams, Rico Sennrich, Matt Post, and Philipp
Koehn. 2016. Syntax-based statistical machine
translation. Synthesis Lectures on Human Language
Technologies, 9(4):1–208.

Shuangzhi Wu, Dongdong Zhang, Nan Yang, Mu Li,
and Ming Zhou. 2017a. Sequence-to-dependency
neural machine translation. In Proceedings of ACL,
pages 698–707.

Shuangzhi Wu, Ming Zhou, and Dongdong Zhang.
2017b. Improved neural machine translation with
source syntax. In Proceedings of IJCAI 2017, pages
4179–4185.



1161

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, et al. 2016. Google’s neural ma-
chine translation system: Bridging the gap between
human and machine translation. arXiv preprint
arXiv:1609.08144.

Jun Xie, Haitao Mi, and Qun Liu. 2011. A novel
dependency-to-string model for statistical machine
translation. In Proceedings of EMNLP, pages 216–
226.

Baosong Yang, Derek F. Wong, Tong Xiao, Lidia S.
Chao, and Jingbo Zhu. 2017. Towards bidirectional
hierarchical representations for attention-based neu-
ral machine translation. In Proceedings of the 2017
Conference on EMNLP, pages 1432–1441.

Xingxing Zhang, Liang Lu, and Mirella Lapata. 2016.
Top-down tree long short-term memory networks.
In Proceedings of NAACL, pages 310–320.

Zaixiang Zheng, Hao Zhou, Shujian Huang, Lili Mou,
Xinyu Dai, Jiajun Chen, and Zhaopeng Tu. 2017.
Modeling past and future for neural machine trans-
lation. arXiv preprint arXiv:1711.09502.

Hao Zhou, Zhaopeng Tu, Shujian Huang, Xiaohua Liu,
Hang Li, and Jiajun Chen. 2017a. Chunk-based
bi-scale decoder for neural machine translation. In
Proceedings of the 55th ACL, pages 580–586.

Long Zhou, Wenpeng Hu, Jiajun Zhang, and
Chengqing Zong. 2017b. Neural system combina-
tion for machine translation. In Proceedings of ACL,
pages 378–384.

Xiao-Dan Zhu, Parinaz Sobhani, and Hongyu Guo.
2015. Long short-term memory over recursive
structures. In ICML, pages 1604–1612.


