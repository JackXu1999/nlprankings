




































Debiasing Word Embeddings Improves Multimodal Machine Translation

Tosho Hirasawa
Tokyo Metropolitan University

hirasawa-tosho@ed.tmu.ac.jp

Mamoru Komachi
Tokyo Metropolitan University
komachi@tmu.ac.jp

Abstract

In recent years, pretrained word embed-
dings have proved useful for multimodal
neural machine translation (NMT) mod-
els to address the shortage of available
datasets. However, the integration of
pretrained word embeddings has not yet
been explored extensively. Further, pre-
trained word embeddings in high dimen-
sional spaces have been reported to suf-
fer from the hubness problem. Although
some debiasing techniques have been pro-
posed to address this problem for other nat-
ural language processing tasks, they have
seldom been studied for multimodal NMT
models. In this study, we examine various
kinds of word embeddings and introduce
two debiasing techniques for three mul-
timodal NMT models and two language
pairs — English–German translation and
English–French translation. With our op-
timal settings, the overall performance
of multimodal models was improved by
up to +1.62 BLEU and +1.14 METEOR
for English–German translation and +1.40
BLEU and +1.13 METEOR for English–
French translation.

1 Introduction

In multimodal machine translation, a target sen-
tence is translated from a source sentence together
with related nonlinguistic information such as vi-
sual information. Recently, neural machine trans-
lation (NMT) has superseded traditional statisti-
cal machine translation owing to the introduction

c⃝ 2019 The authors. This article is licensed under a Creative
Commons 4.0 licence, no derivative works, attribution, CC-
BY-ND.

of the attentive encoder-decoder model, in which
machine translation is treated as a sequence-to-
sequence learning problem and is trained to pay
attention to the source sentence while decoding
(Bahdanau et al., 2015).

Pretrained word embeddings are considered an
important part of neural network models in many
natural language processing (NLP) tasks. In the
context of NMT, pretrained word embeddings have
proved useful in low-resource domains (Qi et al.,
2018), in which FastText (Bojanowski et al., 2017)
embeddings are used to initialize the encoder and
decoder of the NMT model. They provided sub-
stantial overall performance improvement for low-
resource language pairs. Similarly, Hirasawa et
al. (2019) introduced a multimodal NMT model
with embedding prediction that provided substan-
tial performance improvement.

However, when word embeddings are used in
the k-nearest neighbor (kNN) problem, certain
words appear frequently in the k-nearest neighbors
for other words (Dinu et al., 2015; Faruqui et al.,
2016); this is called the hubness problem in the
general machine learning domain (Radovanović et
al., 2010). This phenomenon harms the utility of
pretrained word embeddings. In the context of
NMT, Rios Gonzales et al. (2017) reported that
NMT models produce less-accurate translations
for less-frequent words, but they are not aware of
the hubness problem in word embeddings. Instead,
they proposed annotating sense labels or lexical la-
bels to address this problem. However, it is known
to be effective to debias word embeddings based
on their local bias (Hara et al., 2015) or global bias
(Mu and Viswanath, 2018) for word analogy tasks,
which does not require extra expensive annotations
and references.

In this study, we explore the utility of well-

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 32



established word embeddings and introduce de-
biasing techniques for multimodal NMT models.
The main contributions of this study are as follows:

1. We show that GloVe word embeddings are
useful for various multimodal NMT models
irrespective of the extent to which visual fea-
tures are used in them.

2. We introduce All-but-the-Top debiasing tech-
nique for pretrained word embeddings to fur-
ther improve multimodal NMT models.

2 Related Works

With the recent development of multimodal paral-
lel corpora such as Multi30K (Elliott et al., 2016),
many multimodal NMT models have been pro-
posed. Most of these models are divided into two
categories: visual feature integration and multitask
learning. In both categories, visual features are ex-
tracted using image processing techniques.

Visual feature adaptation Visual features are
extracted using image processing techniques and
then integrated into a machine translation model
in many ways. These studies include incorpora-
tion with visual features in NMT models (Calixto
et al., 2017; Zhou et al., 2018) and multitask learn-
ing models (Elliott and Kádár, 2017; Zhou et al.,
2018), as discussed later in Section 3.

Data augmentation Owing to the lack of the
available datasets, data augmentation is widely
studied in multimodal NMT. Compared to a paral-
lel corpus without images (Grönroos et al., 2018)
and a pseudo-parallel corpus (Helcl et al., 2018),
few studies have used monolingual data. Hirasawa
et al. (2019) proposed a multimodal NMT model
with embedding prediction to fully use pretrained
word embeddings. However, the use of word em-
beddings has not been studied among various mul-
timodal NMT models. We examine three differ-
ent word embeddings for three multimodal NMT
models.

3 Multimodal Neural Machine
Translation

In this study, we measure the effectiveness of
pretrained word embeddings for doubly-attentive
NMT (Calixto et al., 2017), IMAGINATION
(Elliott and Kádár, 2017), and visual attention
grounding NMT (Zhou et al., 2018); these use

visual feature integration, multitask learning, and
mixed model, respectively.

First, in visual feature integration, visual fea-
tures are incorporated into NMT models in differ-
ent ways. Calixto et al. (2017) separately calculate
textual and visual context vectors using an atten-
tion mechanism and then forward the concatenated
context vector to output the probabilities of target
words. Caglayan et al. (2018) use hidden states
in the encoder to mask the local visual features
and concatenate the textual context vector and the
masked visual context vector to obtain the final
context vector.

Second, in multitask learning, most multitask
learning models use latent space learning as an
auxiliary task. Models share the encoder between
the main translation task and the auxiliary task,
thereby improving the encoder. Elliott and Kádár
(2017) proposed the IMAGINATION model that
learns to construct the corresponding visual feature
from the hidden states of the textual encoder of a
source sentence.

Third, visual feature integration and multitask
learning are not mutually exclusive and can be
used together. Zhou et al. (2018) compute the
text representation from a source sentence while
paying attention to each word based on the paired
image. This text representation is used in both
the machine translation task and the shared space
learning task.

All of these models tackle machine transla-
tion as a sequence-to-sequence learning prob-
lem in which a neural model is trained to
translate a source sentence of N–tokens x =
{x1, x2, · · · , xN} into the target sentence of M–
tokens y = {y1, y2, · · · , yM}.

3.1 Doubly-attentive NMT

Doubly-attentive NMT (Calixto et al., 2017) has a
simple encoder and a modified decoder from Bah-
danau et al. (2015) that uses two individual atten-
tion mechanisms to compute the textual context
vector and the visual context vector.

Architecture The encoder is a bidirectional
gated recurrent unit (GRU) (Cho et al., 2014), in
which a forward GRU encodes source sentence x
in the normal order to generate a sequence of for-
ward hidden states

−→
h = {−→h1,

−→
h2, · · · ,

−→
hN} and a

backward GRU encodes this source sentence in the
reversed order to generate a sequence of backward
hidden states

←−
h = {←−h1,

←−
h2, · · · ,

←−
hN}. The final

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 33



hidden states h for each position i are given as
a concatenation of each forward hidden state and
each backward hidden state.

−→
hi =

−−−→
GRU(

−−→
hi−1, eenc(xi)) (1)

←−
hi =

←−−−
GRU(

←−−
hi+1, eenc(xi)) (2)

hi = [
−→
hi;
←−
hi] (3)

where i ∈ [1, N ] denotes each position in a source
sentence;

−−−→
GRU and

←−−−
GRU are the forward and

backward GRU, respectively; and eenc(xi) is the
embedding representation for a word xi.

While decoding, the model first computes a hid-
den state proposal sj for each time step j ∈ [1,M ].

sj = GRU(ŝj−1, edec(ŷj−1)) (4)

where ŝj−1 is the previous hidden state and
edec(ŷj−1) is the embedding for the previous out-
put word ŷj−1.

The textual context vector and the visual con-
text vector are computed using two independent
attention mechanisms. In each time step j while
decoding, a feed-forward layer is used to calculate
a normalized soft alignment αj,i with each source
hidden state hi, and the textual context vector ctj
is computed as a weighted sum of source hidden
states.

ztj,i = vttanh(U
t
αsj +W

t
αhi) (5)

αtj,i =
exp(ztj,i)∑N

k=1 exp(z
t
j,k)

(6)

ctj =

N∑

i=1

αtj,ihi (7)

where vt, U tα and W
t
α are model parameters.

The visual context vector cvj is also computed
from the spatial visual features vi of the paired
image in the same manner as the textual context
vector along with the gating scalar mechanism, in
which a scalar variable is computed based on the
previous hidden state to decide how much atten-
tion should be paid to the entire visual features.

zvj,i = vvtanh(U
v
αsj +W

v
αvi) (8)

αvj,i =
exp(zvj,i)∑N

k=1 exp(z
v
j,k)

(9)

βj = σ(Wsŝj−1 + bs) (10)

cvj = βj

N∑

i=1

αvj,ivi (11)

where vv, U vα, W
v
α , Ws, and bs are model param-

eters. σ is the gating scalar function learnt while
training; it projects a vector to a scalar value and
activates with a sigmoid function.

The final hidden state ŝj is computed using the
hidden state proposal sj , textual context ctj , and
visual context cvj .

zj = σz(W
t
zc

t
j +W

v
z c

v
j +Wzŝj) (12)

rj = σr(W
t
rc

t
j +W

v
r c

v
j +Wrŝj) (13)

s′j = tanh(W
t
zc

t
j +W

v
z c

v
j + rj ⊙ (Uŝj)) (14)

ŝj = (1− zj)⊙ s′j + zj ⊙ sj (15)

where σz and σr are feed-forward layers with sig-
moid activation, and W tz , W

v
z , Wz , W

t
r , W

v
r ,

Wr, W tz , W
v
z , and U are model parameters.

The system output at timestep j is obtained us-
ing the current hidden state, previous word embed-
ding, textual context, and visual context.

p(w|ŷ<j) = softmax(tanh(Lsŝj
+Lwedec(ŷj−1) +L

tctj +L
icvj ))

(16)

ŷj = argmax
w∈V

{p(w|ŷ<j)} (17)

where Ls, Lw, Lt and Li are model parameters.

Loss function We use the negative log likeli-
hood of the probabilities to generate reference to-
kens as the loss function J for this model.

J = −
M∑

j=1

log(p(yj |ŷ<j)) (18)

3.2 IMAGINATION
IMAGINATION (Elliott and Kádár, 2017) is a
multitask learning model that jointly learns ma-
chine translation and visual latent space models.
It trains an NMT model for a machine translation
task and a latent space learning model for an auxil-
iary task, in which a source sentence and the paired
image are mapped closely in the latent space. The
models for each task share the same encoder in a
multitask scenario.

Architecture The encoder is the same as that in
the doubly-attentive NMT model described in Sec-
tion 3.1. The decoder in the NMT model is the
same as that proposed by Bahdanau et al. (2015);
it first computes the hidden state proposal sj , then
estimates context vector cj over source hidden

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 34



states, and finally outputs the predicted word yj for
each time step j ∈ [1,M ].

sj = GRU(ŝj−1, edec(ŷj−1)) (19)

zj,i = vatanh(Wasj +Uahi) (20)

αj,i =
exp(zj,i)∑N

k=1 exp(zj,k)
(21)

cj =
N∑

i=1

αj,ihi (22)

p(w|ŷ<j) = softmax(tanh(sj+edec(ŷj−1)+cj))
(23)

ŷj = argmax
w∈V

{p(w|ŷ<j)} (24)
where Wa, Ua and va are model parameters.

The latent space learning model calculates the
average vector over the hidden states hi in the en-
coder and maps it to the final vector v̂ in the latent
space.

v̂ = tanh(Wv ·
1

N

N∑

i

hi) (25)

where Wv is a model parameter.

Loss function The loss function for IMAGINA-
TION is the linear interpolation of loss functions
of each task.

J = λJT(θ, ϕT) + (1− λ)JV(θ, ϕV) (26)
where θ is the parameter of the shared encoder; ϕT
and ϕV are parameters of the machine translation
model and latent space model, respectively; and λ
is the interpolation coefficient1.

We use the loss function defined in Eq. 18 for
the NMT model JT(θ, ϕT).

JT(θ, ϕT) = −
M∑

j=1

log(p(yj |ŷ<j)) (27)

The max margin loss is used as the loss function
for latent space learning; it makes corresponding
latent vectors of a source sentence and the paired
image closer.

JV(θ, ϕV) =
∑

v′ ̸=v
max{0, α−d(v̂,v)+d(v̂,v′)}

(28)
where v is the latent vector of the paired image;
v′, the image vector for other examples; d, the co-
sine similarity function that is used to calculate the
word similarity; and α, the margin that adjusts the
sparseness of each vector in the latent space2.
1We use λ = 0.5 in our experiment.
2We use α = 0.1 in our experiment.

3.3 Visual Attention Grounding NMT
Visual Attention Grounding NMT (VAG-NMT)
(Zhou et al., 2018) uses a combination of the visual
feature integration model and the multitask learn-
ing model, which also uses latent space learning as
the auxiliary task.

Architecture The shared encoder of this model
is an extension of Bahdanau et al. (2015), in which
the model computes the sentence representation t
by paying attention to the hidden states hi based
on the visual feature v.

zi = tanh(Wvv) · tanh(Whhi) (29)

βi =
exp(zi)∑N

k=1 exp(zk)
(30)

t =
N∑

i=1

βihi (31)

where Wv and Wh are model parameters.
The decoder of the NMT model is the same as

that used in IMAGINATION (Section 3.2) with a
slight modification for initializing the hidden state
with the sentence representation t.

s0 = tanh(Winit(ρt+ (1− ρ)
1

N

N∑

i

hi)) (32)

where Winit is a model parameter; and ρ, a hyper-
parameter to determine the ratio of text representa-
tion in the decoder initial state 3.

In latent space learning, both the sentence repre-
sentation t and the visual representation v are pro-
jected to the latent space and made closer in the
space during training.

temb = tanh(Wtt+ bt) (33)

vemb = tanh(Wvv + bv) (34)

where Wt, bt, Wv, and bv are model parameters.

Loss function The loss function for VAG-NET
is given as described in Eq.26, and we use the loss
function defined in Eq.27 for JT(θ, ϕT).

The max margin loss with negative sampling is
used as the loss function for latent space learning.

JV(θ, ϕV)

=
∑

p

∑

k

max{0, γ − d(vp, tp) + d(vp, tk ̸=p)}

+
∑

k

∑

p

max{0, γ − d(tk,vk) + d(tp,vk ̸=p)}

(35)
3We use ρ = 0.5 in our experiment.

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 35



where d is a cosine similarity function; k and p is
the index for sentences and images, respectively;
tk ̸=p, the negative samples for which all examples
in the same batch with the target example are se-
lected; and γ, the margin that adjusts the sparse-
ness of each item in the latent space4.

4 Word Embedding

In this study, we compare three different word
embeddings: word2vec (Mikolov et al., 2013),
GloVe (Pennington et al., 2014), and FastText (Bo-
janowski et al., 2017). Section 5.1 describes the
configurations to build each embedding.

When we use word embeddings of high dimen-
sion in the kNN problem in which the similar-
ity of two words is computed using a distance
function, certain words frequently appear in the
k-nearest neighbors of other words (Dinu et al.,
2015; Faruqui et al., 2016); this is called the
hubness problem in the general machine learning
domain (Radovanović et al., 2010). This phe-
nomenon harms the utility of pretrained word em-
beddings. In the context of NMT, Rios Gonzales et
al. (2017) report that less-frequent words are trans-
lated with low-accuracy; that may be influenced by
the hubness problem.

To address this problem, localized centering
(Hara et al., 2015) and All-but-the-Top (Mu and
Viswanath, 2018) have been proposed in NLP lit-
erature, in which pretrained word embeddings are
debiased using the local bias of each word or the
global bias of the entire vocabulary. In this study,
both debiasing techniques are tested for all embed-
ding types.

Localized centering Localized centering shifts
each word based on its local bias. The local cen-
troid for each word x is computed and subtracted
from the original word x to obtain the new embed-
ding x̂.

ck(x) =
1

k

∑

x′∈kNN(x)
x′ (36)

x̂ = x− ck(x) (37)

where k is a hyperparameter called local segment
size 5; kNN(x) returns the k–nearest neighbors of
the word x.

4We use γ = 0.1 in our experiment.
5We use k = 10 in our experiment.

Language Lines Types Tokens

English 96M 10M 2,347M
German 35M 11M 829M
French 39M 4M 703M

Table 1: Statistics of Wikipedia corpus for each language.

All-but-the-Top All-but-the-Top uses the global
bias of the entire vocabulary to shift the embedding
of each word. The algorithm of All-but-the-Top
has three steps: subtract the centroid of all words
from each word x, compute the PCA components
for the centered space, and subtract the top n PCA
components from each centered word to obtain the
final word x̂.

x′ = x− 1|V|
∑

w∈V
w (38)

u1, u2, · · · , uD = PCA(x′ ∈ V) (39)

x̂ = x′ −
D∑

i=1

(uTi x
′)ui (40)

where D is a hyperparameter that is used to de-
termine how many principal components of pre-
trained word embeddings are ignored6.

5 Experiment

5.1 Word Embeddings
Training corpus As publicly available pre-
trained word embeddings use different training
corpora, we created a monolingual corpus from
Wikipedia for a fair comparison. We downloaded
the January 20, 2019, version of Wikidump for En-
glish, German, and French7 and extracted article
pages. All extracted sentences are preprocessed
by lower-casing, tokenizing, and normalizing the
punctuation using the Moses script 8. Table 1
shows the statistics of the preprocessed Wikipedia
corpus for each language.

Training settings All embeddings trained on
Wikipedia have a dimension of 300. The specific
options set for training are as follows; default val-
ues were used for other options.

We trained the word2vec model9 using the
CBOW algorithm with window size of 10, nega-
6We use D = 3 in our experiment.
7https://dumps.wikimedia.org/
8We applied preprocessing using task1-tokenize.sh
from https://github.com/multi30k/dataset.
9We train using https://github.com/tmikolov/word2vec.

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 36



tive sampling of 10, and minimum count of 10; the
GloVe model10 with windows size of 10 and mini-
mum count of 10; and the FastText model11 using
the CBOW algorithm with word n-gram of 5, win-
dow size of 5, and negative sampling of 10.

Unknown words There are two types of un-
known words: words that are a part of pretrained
word embeddings but are not included in a vo-
cabulary (Out-Of-Vocabulary (OOV) words) and
words that are a part of a vocabulary but are not
included in pretrained word embeddings (OOV
words for embeddings). OOV words for embed-
dings only exist when using word-level embed-
dings (word2vec and glove); the embeddings of
such words in FastText are calculated as the mean
embedding of character n-grams consisting of the
word.

The embeddings for both types of OOV words
are calculated as the average embedding over
words that are a part of pretrained word embed-
dings but are not included in the vocabularies, and
they are updated individually during training.

5.2 Dataset

We train, validate, and test all multimodal NMT
models using the Multi30K (Elliott et al., 2016)
dataset. English is selected as the source lan-
guage, and German/French are selected as target
languages. All sentences in all languages are pre-
processed by lower-casing, tokenizing, and nor-
malizing the punctuation.

We run experiments without byte pair encod-
ing (BPE) (Sennrich et al., 2016) for all models
as BPE breaks a word into subwords, resulting
in an increase in OOV words for word2vec and
GloVe embeddings. In addition, we also run ex-
periments using BPE with 10k merge operations
to show the utility of pretrained word embeddings.
The BPE subwords are shared for source and tar-
get languages and learnt from training dataset12.
Table 2 shows the statistics of vocabularies in the
Multi30K training data.

Visual features are extracted using pretrained
ResNet-50 (He et al., 2016). We encode all images
in the Multi30K dataset using ResNet-50 and pick
out the hidden state in the res4f layer of 1024D for
the doubly-attentive model, and that in the pool5

10We train using https://github.com/stanfordnlp/GloVe.
11We train using https://github.com/facebookresearch/fastText.
12We use https://github.com/rsennrich/subword-nmt to train
and apply BPE.

OOV
Language Types Tokens Vocab Embed

English 10,210 377,534 10M 129
German 18,722 360,706 11M 1,841
French 11,219 409,845 4M 89

with BPE

English 5,199 397,793 N/A N/A
→ German 7,062 400,507 N/A N/A
English 5,830 394,353 N/A N/A
→ French 6,572 428,762 N/A N/A

Table 2: Statistics of vocabularies without BPE (upper) and
with BPE (lower) in Multi30K training data. “Vocab” denotes
the number of OOV words for the vocabulary. “Embed” de-
notes the number of OOV words for embeddings. “English →
German” shows statistics of the shared subwords for English–
German translation, and “English → French” for English–
French translation.

layer of 2048D for IMAGINATION and VAG-
NET, respectively.

5.3 Model

All models are implemented using nmtpytorch
toolkit v3.0.013 (Caglayan et al., 2017).

The encoder for each model has one layer with
256 hidden dimensions, and therefore the bidirec-
tional GRU has 512 dimensions. We set the latent
space vector size for IMAGINATION to 2048 and
the dimension of the shared visual-text space for
VAG-NET to 512. The input word embedding size
and output vector size are 300 each.

We use the Adam optimizer with learning rate of
0.0004. The gradient norm is clipped to 1.0. The
dropout rate is 0.3.

BLEU (Papineni et al., 2002) and METEOR
(Denkowski and Lavie, 2014) are used as perfor-
mance metrics. As in (Qi et al., 2018), we also
evaluated the models using the F-score of each
word. The F-score is calculated as the harmonic
mean of the precision (the fraction of produced
sentences containing a word that is in the refer-
ences sentences) and the recall (the fraction of ref-
erence sentences containing a word that is in the
model outputs). We ran the experiment three times
with different random seeds and obtained the mean
for each model.

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 37



English→ German
debiasing None Localized Centering All-but-the-Top

Model embedding BLEU METEOR BLEU METEOR BLEU METEOR

NMT random 34.57 54.50
Doubly-attentive random 33.50 52.75
IMAGINATION random 34.97 54.21
VAG-NET random 35.55 54.87

NMT word2vec 34.23 52.83 34.14 53.09 33.88 52.66
GloVe 35.49 55.14 35.33 54.89 35.98 55.15
FastText 33.63 52.48 33.42 52.34 33.91 52.65

Doubly-attentive word2vec 32.05 50.85 32.07 51.23 32.73 51.04
GloVe 34.06 53.74 33.37 52.98 34.77 53.86
FastText 31.14 49.29 31.04 50.33 30.86 50.13

IMAGINATION word2vec 33.97 52.59 33.43 52.32 34.35 52.79
GloVe 35.74 55.00 35.92 55.15 36.59 55.35
FastText 34.21 52.53 33.69 52.22 33.83 52.31

VAG-NET word2vec 34.32 53.01 34.10 53.40 33.91 52.70
GloVe 36.01 55.31 35.56 54.61 36.36 55.17
FastText 34.12 52.56 33.92 52.75 33.82 52.38

Table 3: Results obtained using Multi30K test2016 dataset for English–German translation. “NMT” shows the results of
Bahdanau et al. (2015). When the debiasing is “None,” we show the results obtained with raw pretrained word embeddings or
random values.

English→ French
debiasing None Localized Centering All-but-the-Top

Model embedding BLEU METEOR BLEU METEOR BLEU METEOR

NMT random 57.15 72.47
Doubly-attentive random 54.85 71.06
IMAGINATION random 57.38 72.57
VAG-NET random 57.78 73.21

NMT word2vec 55.65 70.79 55.82 70.90 56.20 71.20
GloVe 58.14 73.67 57.76 73.00 58.24 73.40
FastText 55.13 70.18 55.24 70.56 55.42 70.60

Doubly-attentive word2vec 52.32 68.06 53.30 68.98 52.95 68.68
GloVe 56.25 72.19 54.58 71.23 56.12 71.91
FastText 50.46 66.35 51.02 67.20 51.22 67.09

IMAGINATION word2vec 55.94 70.91 55.63 70.73 55.96 70.93
GloVe 57.89 73.09 57.65 73.16 58.10 73.26
FastText 55.12 70.17 55.52 70.77 55.52 70.42

VAG-NET word2vec 56.23 71.14 55.79 70.82 56.33 71.34
GloVe 58.45 73.59 57.31 73.16 57.94 73.40
FastText 55.25 70.45 55.33 70.51 55.49 70.63

Table 4: Results obtained using Multi30K test2016 dataset for English–French translation. “NMT” shows the results of
Bahdanau et al. (2015). When the debiasing is “None,” we show the results obtained with raw pretrained word embeddings or
random values.

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 38



Figure 1: F-score of word prediction per frequency breakdown in training corpus. The model without brackets is initialized
with random values: “(None),” GloVe without debiasing; “(LC),” GloVe with localized centering; and “(AbtT),” GloVe with
All-but-the-Top.

Source two men playing guitar in front of a large au-
dience .

Reference zwei männer spielen gitarre vor einem großen
publikum .

VAG zwei männer spielen vor einem großen pub-
likum gitarre .

VAG (GloVe) zwei männer spielen gitarre vor einem großen
publikum .

Table 5: Examples of English–German translations obtained using test dataset. “(GloVe)” denotes the model with the optimal
settings for GloVe.

5.4 Results

Table 3 shows the overall performance of the
randomly initialized models and the models ini-
tialized with pretrained word embeddings for
English–German translation. Though GloVe em-
beddings show considerable improvement for both
in text-only NMT and all types of multimodal
NMT, word2vec and FastText embeddings greatly
reduce model performance even with some debi-
asing. With GloVe embeddings, All-but-the-Top
debiasing results in further improvement. In par-
ticular, IMAGINATION is improved with GloVe
embedding initialization (+0.77 BLEU and +0.79
METEOR) and showed further improvement with
All-but-the-Top debiasing (+1.62 BLEU and +1.14
METEOR).

Table 4 shows that the combination of GloVe
embedding and All-but-the-Top debiasing greatly
improves the overall performance of each model
for English–French translation. The model with
GloVe and All-but-the-Top surpasses the randomly

13https://github.com/toshohirasawa/mmt-emb-init

initialized model by +1.09 BLEU and +0.93 ME-
TEOR in the text-only NMT model, by +1.27
BLEU and +0.85 METEOR in the doubly-attentive
model, by +0.72 BLEU and +0.69 METEOR in
the IMAGINATION model, by +0.16 BLEU and
+0.19 METEOR in the VAG-NET model, respec-
tively.

6 Discussion

Word embedding In our study, GloVe performs
the best among three word embeddings, while
word2vec and FastText do not help multimodal
NMT models; the degradation of word2vec is at-
tributed to the cohesiveness of word embeddings
and that of FastText the shortage of training data,
respectively.

The word embeddings in word2vec are reported
to be cohesively clustered and not evenly dis-
tributed, while those in GloVe are well distributed
(Mimno and Thompson, 2017). This makes it
harder to train the model with word2vec rather
than the model initialized using random values, as
the model with word2vec is required to learn all the

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 39



English→ German
BPE Init BLEU METEOR

No random 35.55 54.87
No GloVe 36.36 55.17
Yes random 35.46 55.30

English→ French
BPE Init BLEU METEOR

No random 57.78 73.21
No GloVe 58.45 73.59
Yes random 56.63 72.38

Table 6: Results of VAG-NET with various settings obtained
using Multi30K test2016 dataset for English–German transla-
tion (upper) and English–French translation (lower). “BPE”
denotes whether a model uses BPE. “Init” denotes the ini-
tialization strategy: “random,” a model initialized using ran-
dom values and “GloVe,” a model initialized using GloVe em-
beddings with All-but-the-Top debiasing (English–German)
or without debiasing (English–French).

word representations from almost the same value
i.e. the mean vector of entire embeddings.

FastText requires more training data than GloVe
does, as it learns not only embeddings for words
but also those of their subwords. Our pre-
trained word embeddings are trained using only
Wikipedia and do not use Common Crawl; it con-
tains at least 50 times tokens and three times words
than Wikipedia does, and is used together with
Wikipedia to construct FastText embeddings that
improve NMT models (Qi et al., 2018).

Debiasing All-but-the-Top improves most of
models for both English–German translation and
English–French translation; this may prove the
idea suggested in Mu and Viswanath (2018), in
which neural network models may not be able to
learn the debiasing technique by themselves.

In contrast, models using localized centering
only show a comparable performance with models
not using debiasing. It is because that the debiased
vector has small norm and thus the additional train-
ing may break the relation of debiased vectors, as
localized centering subtracts the local centroid of
a word that is quite similar with the word. This
observation is contrary with Hara et al. (2015), in
which debiased word embeddings are used without
the additional training.

Languages We found that pretrained word em-
beddings are more useful for English–German
translation than for English–French translation.
The best models with GloVe embedding surpasses
the randomly initialized model by +1.28 BLEU
in average for English–German translation, but by
only +0.97 BLEU for English–French translation
with the optimal settings. This is because the Ger-
man decoder has more unique words (18,722 for
German and 11,219 for French, as listed in Table
2) in the original training dataset, resulting in less
in-vocabulary words after restricting the vocabu-
lary and making it difficult for the German decoder
learn embeddings from scratch.

BPE BPE is an alternative approach to improve
translation quality. Therefore, we compared the
VAG-NET model with GloVe embeddings and the
VAG-NET model with BPE to validate which ap-
proach would contribute more to the overall per-
formance (Table 6). Although BPE does not
improve the VAG-NET model for both English–
German and English-French translation, GloVe
embeddings provide a substantial improvement in
both language pairs.

Translation quality To understand the model
performance for translating rare words, we com-
puted the F-score of VAG-NET models with var-
ious debiasing techniques (Figure 1). Although
VAG-NET models with GloVe embeddings out-
perform the model with random initialization, we
do not observe a consistent improvement for rare
word translation, as reported in (Qi et al., 2018).

Translation examples Table 5 shows English–
German translations generated by VAG-NET mod-
els with different initialization strategies. Com-
pared to the model without pretrained word em-
beddings, the model with GloVe embeddings gen-
erates a more fluent sentence.

7 Conclusion

We have explored the use of pretrained word em-
beddings with various multimodal NMT models.
We showed that GloVe embeddings improve the
performance of all multimodal translation models,
and All-but-the-Top debiasing can result in further
improvement.

In the future, we will examine training ap-
proaches for word embeddings that are more suit-
able for multimodal NMT, especially by consider-
ing MT evaluation metrics when training word em-

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 40



beddings. For example, fine-tuning word embed-
dings based on BLEU or other metrics for machine
translation could further improve the compatibility
of pretrained word embeddings with multimodal
NMT models.

Acknowledgment

This work was partially supported by JSPS Grant-
in-Aid for Scientific Research (C) Grant Number
JP19K12099.

References
Bahdanau, Dzmitry, Kyunghyun Cho, and Yoshua Ben-

gio. 2015. Neural machine translation by jointly
learning to align and translate. In ICLR.

Bojanowski, Piotr, Edouard Grave, Armand Joulin, and
Tomas Mikolov. 2017. Enriching word vectors with
subword information. In TACL, volume 5, pages
135–146.

Caglayan, Ozan, Mercedes Garcı́a-Martı́nez, Adrien
Bardet, Walid Aransa, Fethi Bougares, and Loı̈c Bar-
rault. 2017. NMTPY: A flexible toolkit for ad-
vanced neural machine translation systems. Prague
Bull. Math. Linguistics, pages 15–28.

Caglayan, Ozan, Adrien Bardet, Fethi Bougares, Loı̈c
Barrault, Kai Wang, Marc Masana, Luis Herranz,
and Joost van de Weijer. 2018. LIUM-CVC submis-
sions for WMT18 multimodal translation task. In
WMT, pages 597–602.

Calixto, Iacer, Qun Liu, and Nick Campbell. 2017.
Doubly-attentive decoder for multi-modal neural
machine translation. In ACL, pages 1913–1924.

Cho, Kyunghyun, Bart van Merrienboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014. On the properties
of neural machine translation: Encoder–decoder ap-
proaches. In Proceedings of SSST-8, Eighth Work-
shop on Syntax, Semantics and Structure in Statisti-
cal Translation, pages 103–111.

Denkowski, Michael and Alon Lavie. 2014. Meteor
Universal: Language specific translation evaluation
for any target language. In WMT, pages 376–380.

Dinu, Georgiana, Angeliki Lazaridou, and Marco Ba-
roni. 2015. Improving zero-shot learning by mit-
igating the hubness problem. In ICLR, Workshop
Track.

Elliott, Desmond and Àkos Kádár. 2017. Imagination
improves multimodal translation. In IJCNLP, pages
130–141.

Elliott, Desmond, Stella Frank, Khalil Sima’an, and Lu-
cia Specia. 2016. Multi30k: Multilingual English-
German image descriptions. In Proceedings of the
5th Workshop on Vision and Language, pages 70–74.

Faruqui, Manaal, Yulia Tsvetkov, Pushpendre Rastogi,
and Chris Dyer. 2016. Problems with evaluation
of word embeddings using word similarity tasks.
In Proceedings of the 1st Workshop on Evaluating
Vector-Space Representations for NLP, pages 30–35,
August.

Grönroos, Stig-Arne, Benoit Huet, Mikko Kurimo,
Jorma Laaksonen, Bernard Merialdo, Phu Pham,
Mats Sjöberg, Umut Sulubacak, Jörg Tiedemann,
Raphael Troncy, and Raúl Vázquez. 2018. The
MeMAD submission to the WMT18 multimodal
translation task. In WMT, pages 603–611.

Hara, Kazuo, Ikumi Suzuki, Masashi Shimbo,
Kei Kobayashi, Kenji Fukumizu, and Miloš
Radovanović. 2015. Localized Centering: Reduc-
ing hubness in large-sample data. In AAAI, pages
2645–2651.

He, Kaiming, Xiangyu Zhang, Shaoqing Ren, and Jian
Sun. 2016. Deep residual learning for image recog-
nition. In CVPR, pages 770–778.

Helcl, Jindřich, Jindřich Libovický, and Dusan Varis.
2018. CUNI system for the WMT18 multimodal
translation task. In WMT, pages 616–623.

Hirasawa, Tosho, Hayahide Yamagishi, Yukio Mat-
sumura, and Mamoru Komachi. 2019. Multimodal
machine translation with embedding prediction. In
NAACL SRW, pages 86–91.

Mikolov, Tomas, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In NIPS, pages 3111–3119.

Mimno, David and Laure Thompson. 2017. The
strange geometry of skip-gram with negative sam-
pling. In EMNLP, pages 2873–2878.

Mu, Jiaqi and Pramod Viswanath. 2018. All-but-the-
Top: Simple and effective postprocessing for word
representations. In ICLR.

Papineni, Kishore, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. BLEU: a method for automatic
evaluation of machine translation. In ACL, pages
311–318.

Pennington, Jeffrey, Richard Socher, and Christo-
pher D. Manning. 2014. GloVe: Global vectors for
word representation. In EMNLP, pages 1532–1543.

Qi, Ye, Devendra Sachan, Matthieu Felix, Sarguna Pad-
manabhan, and Graham Neubig. 2018. When and
why are pre-trained word embeddings useful for neu-
ral machine translation? In NAACL, pages 529–535.

Radovanović, Miloš, Alexandros Nanopoulos, and Mir-
jana Ivanović. 2010. Hubs in Space: Popular Near-
est Neighbors in High-Dimensional Data. Journal of
Machine Learning Research, 11:2487–2531.

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 41



Rios Gonzales, Annette, Laura Mascarell, and Rico
Sennrich. 2017. Improving Word Sense Disam-
biguation in Neural Machine Translation with Sense
Embeddings. In WMT, pages 11–19.

Sennrich, Rico, Barry Haddow, and Alexandra Birch.
2016. Neural machine translation of rare words with
subword units. In ACL, pages 1715–1725.

Zhou, Mingyang, Runxiang Cheng, Yong Jae Lee, and
Zhou Yu. 2018. A visual attention grounding neu-
ral model for multimodal machine translation. In
EMNLP, pages 3643–3653.

Proceedings of MT Summit XVII, volume 1 Dublin, Aug. 19-23, 2019 | p. 42


