



















































Guiding Extractive Summarization with Question-Answering Rewards


Proceedings of NAACL-HLT 2019, pages 2566–2577
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

2566

Guiding Extractive Summarization with Question-Answering Rewards

Kristjan Arumae and Fei Liu
Computer Science Department

University of Central Florida, Orlando, FL 32816, USA
k.arumae@knights.ucf.edu feiliu@cs.ucf.edu

Abstract
Highlighting while reading is a natural behav-
ior for people to track salient content of a doc-
ument. It would be desirable to teach an ex-
tractive summarizer to do the same. However,
a major obstacle to the development of a super-
vised summarizer is the lack of ground-truth.
Manual annotation of extraction units is cost-
prohibitive, whereas acquiring labels by auto-
matically aligning human abstracts and source
documents can yield inferior results. In this
paper we describe a novel framework to guide
a supervised, extractive summarization system
with question-answering rewards. We argue
that quality summaries should serve as a docu-
ment surrogate to answer important questions,
and such question-answer pairs can be conve-
niently obtained from human abstracts. The
system learns to promote summaries that are
informative, fluent, and perform competitively
on question-answering. Our results compare
favorably with those reported by strong sum-
marization baselines as evaluated by automatic
metrics and human assessors.

1 Introduction

Our increasingly digitized lifestyle calls for sum-
marization techniques to produce short and accu-
rate summaries that can be accessed at any time.
These summaries should factually adhere to the
content of the source text and present the reader
with the key points therein. Although neural ab-
stractive summarization has shown promising re-
sults (Rush et al., 2015; Nallapati et al., 2016;
See et al., 2017), these methods can have poten-
tial drawbacks. It was revealed that abstracts gen-
erated by neural systems sometimes alter or fal-
sify objective details, and introduce new meanings
not present in the original text (Cao et al., 2018).
Reading these abstracts can lead to misinterpreta-
tion of the source materials, which is clearly unde-
sirable. In this work, we focus on extractive sum-
marization, where the summaries are guaranteed

(CNN) A judge this week sentenced a former TSA agent to six
months in jail for secretly videotaping a female co-worker
while she was in the bathroom, prosecutors said.

During the investigation, detectives with the Metro Nashville
Police Department in Tennessee also found that the agent,
33-year-old Daniel Boykin, entered the woman’s home multiple
times, where he took videos, photos and other data.

Police found more than 90 videos and 1,500 photos of the victim
on Boykin’s phone and computer .

The victim filed a complaint after seeing images of herself on his
phone last year. [...]

Comprehension Questions (Human Abstract):

Former Daniel Boykin, 33, videotaped his female co-worker
in the restroom, authorities say.

Authorities say they found 90 videos and 1,500 photos of the victim
on and computer.

Table 1: An example extractive summary bolded in the arti-
cle (top). Highlighted sections indicate salient segments use-
ful for answering fill-in-the-blank questions generated from
human abstracts (bottom).

to remain faithful to the original content. Our sys-
tem seeks to identify salient and consecutive se-
quences of words from the source document, and
highlight them in the text to assist users in brows-
ing and comprehending lengthy documents. An
example is illustrated in Table 1.

A primary challenge faced by extractive sum-
marizers is the lack of annotated data. The cost
of hiring humans to label a necessary amount of
source articles with summary words, good for
training a modern classifier, can be prohibitive.
Previous work has exploited using human ab-
stracts to derive labels for extraction units (Wood-
send and Lapata, 2010). E.g., a source word is
tagged 1 if it appears in the abstract, 0 otherwise.
Although pairs of source articles and human ab-
stracts are abundant, labels derived in this way
are not necessarily best since summary saliency
can not be easily captured with a rule based cat-
egorization. Considering that human abstracts in-
volve generalization, paraphrasing, and can con-



2567

tain words not present in the source text, leverag-
ing them to derive labels for extraction units can
be suboptimal. In this work, we investigate a new
strategy that seeks to better utilize human abstracts
to guide the extraction of summary text units.

We hypothesize that quality extractive sum-
maries should contain informative content so that
they can be used as document surrogates to answer
important questions, thereby satisfying users’ in-
formation needs. The question-answer pairs can
be conveniently developed from human abstracts.
Our proposed approach identifies answer tokens
from each sentence of the human abstract, then re-
places each answer token with a blank to create
a Cloze-style question-answer pair. To answer all
questions (≈human abstract), the system summary
must contain content that is semantically close to
and collectively resembles the human abstract.

In this paper, we construct an extractive sum-
mary by selecting consecutive word sequences
from the source document. To accomplish this
we utilize a novel reinforcement learning frame-
work to explore the space of possible extractive
summaries and assess each summary using a novel
reward function judging the summary’s adequacy,
fluency, length, and its competency to answer im-
portant questions. The system learns to sam-
ple extractive summaries yielding the highest ex-
pected rewards, with no pre-derived extraction la-
bels needed. This work extends the methodology
of Arumae and Liu (2018) with new representa-
tions of extraction units and thorough experimen-
tal evaluation. The contributions of this research
can be summarized as follows:

• we describe a novel framework generating ex-
tractive summaries by selecting consecutive se-
quences of words from source documents. This
new system explores various encoding mecha-
nisms, as well as new sampling techniques to
capture phrase level data. Such a framework has
not been thoroughly investigated in the past;

• We conduct a methodical empirical evaluation
from the point of view of information saliency.
Rather than solely relying on automatic summa-
rization evaluation methods, we also show the
advantages of our system by assessing the sum-
mary quality with reading comprehension tasks.
Our summaries compare favorably with the au-
tomatic metrics against state of the art, and show
promising results against baselines when evalu-
ated by humans for question answering.

2 Related Work

Extractive summarization has seen growing popu-
larity in the past decades (Nenkova and McKeown,
2011). The methods focus on selecting represen-
tative sentences from the document(s) and option-
ally deleting unimportant sentence constituents to
form a summary (Knight and Marcu, 2002; Radev
et al., 2004; Zajic et al., 2007; Martins and Smith,
2009; Gillick and Favre, 2009; Lin and Bilmes,
2010; Wang et al., 2013; Li et al., 2013, 2014;
Hong et al., 2014; Yogatama et al., 2015). A ma-
jority of the methods are unsupervised. They esti-
mate sentence importance based on the sentence’s
length and position in the document, whether the
sentence contains topical content and its relation-
ship with other sentences. The summarization ob-
jective is to select a handful of sentences to maxi-
mize the coverage of important content while min-
imizing summary redundancy. Although unsuper-
vised methods are promising, they cannot benefit
from the large-scale training data harvested from
the Web (Sandhaus, 2008; Hermann et al., 2015;
Grusky et al., 2018).

Neural extractive summarization has focused
primarily on extracting sentences (Nallapati et al.,
2017; Cao et al., 2017; Isonuma et al., 2017; Tarn-
pradab et al., 2017; Zhou et al., 2018; Kedzie et al.,
2018). These studies exploit parallel training data
consisting of source articles and story highlights
(i.e., human abstracts) to create ground-truth la-
bels for sentences. A neural extractive summarizer
learns to predict a binary label for each source
sentence indicating if it is to be included in the
summary. These studies build distributed sentence
representations using neural networks (Cheng and
Lapata, 2016; Yasunaga et al., 2017) and use rein-
forcement learning to optimize the evaluation met-
ric (Narayan et al., 2018b) and improve summary
coherence (Wu and Hu, 2018). However, sentence
extraction can be coarse and in many cases, only
a part of the sentence is worthy to be added to the
summary. In this study, we perform finer-grained
extractive summarization by allowing the system
to select consecutive sequences of words rather
than sentences to form a summary.

Interestingly, studies reveal that summaries gen-
erated by recent neural abstractive systems are, in
fact, quite “extractive.” Abstractive systems often
adopt the encoder-decoder architecture with an at-
tention mechanism (Rush et al., 2015; Nallapati
et al., 2016; Paulus et al., 2017; Guo et al., 2018;
Gehrmann et al., 2018; Lebanoff et al., 2018; Ce-



2568

likyilmaz et al., 2018). The encoder condenses a
source sequence to a fixed-length vector and the
decoder takes the vector as input and generates a
summary by predicting one word at a time. See,
Liu, and Manning (2017) suggest that about 35%
of the summary sentences occur in the source doc-
uments, and 90% of summary n-grams appear in
the source. Moreover, the summaries may contain
inaccurate factual details and introduce new mean-
ings not present in the original text (Cao et al.,
2018; Song et al., 2018). It thus raises concerns
as to whether such systems can be used in real-
world scenarios to summarize materials such as le-
gal documents. In this work, we choose to focus
on extractive summarization where selected word
sequences can be highlighted on the source text to
avoid change of meaning.

Our proposed method is inspired by the work
of Lei et al. (2016) who seek to identify rationales
from textual input to support sentiment classifica-
tion and question retrieval. Distinct from this pre-
vious work, we focus on generating generic doc-
ument summaries. We present a novel supervised
framework encouraging the selection of consecu-
tive sequences of words to form an extractive sum-
mary. Further, we leverage reinforcement learning
to explore the space of possible extractive sum-
maries and promote those that are fluent, adequate,
and competent in question answering. We seek to
test the hypothesis that successful summaries can
serve as document surrogates to answer important
questions, and moreover, ground-truth question-
answer pairs can be derived from human abstracts.
In the following section we describe our proposed
approach in details.

3 Our Approach

Let S be an extractive summary consisting of text
segments selected from a source document x. The
summary can be mapped to a sequence of binary
labels y assigned to document words. In this sec-
tion we first present a supervised framework for
identifying consecutive sequences of words that
are summary-worthy, then proceed by describing
our question-answering rewards and a deep rein-
forcement learning framework to guide the selec-
tion of summaries so that they can be used as doc-
ument surrogates to answer important questions.1

1We have made our code and models available at https:
//github.com/ucfnlp/summ_qa_rewards

3.1 Representing an Extraction Unit
How best to decompose a source document into a
set of text units useful for extractive summariza-
tion remains an open problem. A natural choice
is to use words as extraction units. However, this
choice ignores the cohesiveness of text. A text
chunk (e.g., a prepositional phrase) can be either
selected to the summary in its entirety or not at all.
In this paper we experiment with both schemes,
using either words or chunks as extraction units.
When a text chunk is selected in the summary, all
its consisting words are selected. We obtain text
chunks by breaking down the sentence constituent
parse tree in a top-down manner until each tree
fragment governs at most 5 words. A chunk thus
can contain from 1 to 5 words. Additionally, word
level modeling can be considered a special case of
chunks where the length of each phrase is 1. It is
important to note that using sentences as extrac-
tion units is out of the scope of this paper, because
our work focuses on finer-grained extraction units
such as words and phrases and this is notably a
more challenging task.

The most successful neural models for encod-
ing a piece of text to a fixed-length vector include
the recurrent (Hochreiter and Schmidhuber, 1997)
and convolutional neural networks (CNN; Kim et
al., 2014), among others. A recent study by Khan-
delwal et al. (2018) reported that the recurrent net-
works are capable of memorizing a recent context
of about 20 tokens and the model is highly sensi-
tive to word order, whereas this is less the case for
CNN whose max-pooling operation makes it ag-
nostic to word order. We implement both networks
and are curious to compare their effectiveness at
encoding extraction units for summarization.

{het} = fBi-LSTM1 (x) (1)
or {het} = fCNN2 (x) (2)

Our model first encodes the source document
using a bidirectional LSTM with the forward and
backward passes (Eq. (1)). The representation of
the t-th source word het = [

←−
h et ||
−→
h et ] is the con-

catenation of the hidden states in both directions.
A chunk is similarly denoted by het = [

←−
h et ||
−→
h et+n]

where t and t + n are the indices of its beginning
and ending words. In both cases, a fixed-length
vector (het ∈ Rm) is created for the word/chunk.
Further, our CNN encoder (Eq. (2)) uses a sliding
window of {1,3,5,7} words, corresponding to the
kernel sizes, to scan through the source document.
We apply a number of filters to each window size

https://github.com/ucfnlp/summ_qa_rewards
https://github.com/ucfnlp/summ_qa_rewards


2569

to extract local features. The t-th source word is
represented by the concatenation of feature maps
(an m-dimensional vector). To obtain the chunk
vector we perform max-pooling over the represen-
tations of its consisting words (from t to t+n). In
the following we use het to denote the vector rep-
resentation of the t-th extraction unit, may it be a
word or a chunk, generated using either encoder.

3.2 Constructing an Extractive Summary
It is desirable to first develop a supervised frame-
work for identifying summary-worthy text seg-
ments from a source article. These segments col-
lectively form an extractive summary to be high-
lighted on the source text. The task can be for-
mulated as a sequence labeling problem: a source
text unit (a word or chunk) is labelled 1 if it is to
be included in the summary and 0 otherwise. It
is not unusual to develop an auto-regressive model
to perform sequence labeling, where the label of
the t-th extraction unit (yt) depends on all previ-
ous labels (y<t). Given this hypothesis, we build
a framework to extract summary units where the
importance of the t-th source unit is characterized
by its informativeness (encoded in het ), its position
in the document, and relationship with the partial
summary. The details are presented below.

We use a positional embedding (gt) to signify
the position of the t-th text unit in the source docu-
ment. The position corresponds to the index of the
source sentence containing the t-th unit, and fur-
ther, all text units belonging to the same sentence
share the same positional embedding. We apply si-
nusoidal initialization to the embeddings, follow-
ing Vaswani et al. (2017). Importantly, positional
embeddings allow us to inject macro-positional
knowledge about words/chunks into a neural sum-
marization framework to offset the natural bias
that humans tend to have on putting important con-
tent at the beginning of an article.

Next, we build a representation for the partial
summary to aid the system in selecting future text
units. The representation st is expected to encode
the extraction decisions up to time t-1 and it can
be realized using a unidirectional LSTM network
(Eq. (3)). The t-th input to the network is repre-
sented as yt−1⊗het−1 where yt−1 is a binary label
serving as a gating mechanism to control if the se-
mantic content of the previous text unit (het−1) is
to be included in the summary (“⊗” corresponds
to elementwise product). During training, we ap-
ply teacher forcing and yt−1 is the ground-truth
extraction label for the (t− 1)-th unit; at test time,

gt�1 gt gt+1 gt+2

st+2st+1stst�1

het�1 h
e
t h

e
t+1 h

e
t+2

Figure 1: A unidirectional LSTM (blue, Eq. (3)) encodes
the partial summary, while the multilayer perceptron network
(orange, Eq. (4-5)) utilizes the text unit representation (het ),
its positional embedding (gt), and the partial summary rep-
resentation (st) to determine if the t-th text unit is to be in-
cluded in the summary. Best viewed in color.

yt−1 is generated on-the-fly by obtaining the la-
bel yielding the highest probability according to
Eq. (5). In the previous work of Cheng and La-
pata (2016) and Nallapati et al. (2017), similar
auto-regressive models are developed to identify
summary sentences. Different from the previous
work, this study focuses on extracting consecutive
sequences of words and chunks from the source
document, and the partial summary representation
is particularly useful for predicting if the next unit
is to be included in the summary to improve sum-
mary fluency.

st = f
Uni-LSTM
3 (st−1, yt−1 ⊗ het−1) (3)

Given the partial summary representation (st),
and representation of the text unit (het ) and its
positional encoding (gt), we employ a multilayer
perceptron to predict how likely the unit is to be in-
cluded in the summary. This process is described
by Eqs. (4-5) and further illustrated in Figure 1.

at = f
ReLU(Wa[het ;gt; st] + b

a) (4)
p(yt|y<t,x) = σ(wyat + by) (5)

Our model parameters include {Wa, ba, wy,
by} along with those required by fBi-LSTM1 , fCNN2
and fUni-LSTM3 . It is possible to train this model in
a fully supervised fashion by minimizing the neg-
ative log-likelihood of the training data. We gen-
erate ground-truth labels for source text units as
follows. A source word receives a label of 1 if
both itself and its adjacent word appear in the hu-
man abstract (excluding cases where both words
are stopwords). This heuristic aims to label con-
secutive source words (2 or more) as summary-
worthy, as opposed to picking single words which
can be less informative. A source text chunk re-
ceives a label of 1 if one of its component words
is labelled 1 in the above process.



2570

Because human abstracts are often short and
contain novel words not present in source doc-
uments, they can be suboptimal for generating
ground-truth labels for extraction units. Only a
small portion of the source words (about 8% in
our dataset) are labelled as positive, whereas the
vast majority are negative. Such labels can be inef-
fective in providing supervision. In the following
section, we investigate a new learning paradigm,
which encourages extractive summaries to contain
informative content useful for answering impor-
tant questions, while question-answer pairs can be
automatically derived from human abstracts.

3.3 Using Summaries to Answer Questions
Our hypothesis is that high-quality summaries
should contain informative content making them
appropriate to serve as document surrogates to sat-
isfy users’ information needs. We train the extrac-
tive summarizer to identify source text units nec-
essary for answering questions, and the question-
answer (QA) pairs can be conveniently developed
from human abstracts.

To obtain QA pairs, we set an answer token to
be either a salient word or a named entity to limit
the space of potential answers. For any sentence
in the human abstract, we identify an answer to-
ken from it, then replace the answer token with a
blank to create a Cloze-style question-answer pair
(see Table 1). When a sentence contains multiple
answer tokens, a set of QA pairs can be obtained
from it. It is important to note that at least one QA
pair should be extracted from each sentence of the
abstract. Because a system summary is trained to
contain content useful for answering all questions
(≈human abstract), any missing QA pair is likely
to cause the summary to be insufficient.

We collect answer tokens using the following
methods: (a) we extract a set of entities with tag
{PER, LOC, ORG, MISC} from each sentence us-
ing the Stanford CoreNLP toolkit (Manning et al.,
2014); (b) we also identify the ROOT word of
each sentence’s dependency parse tree along with
the sentence’s subject/object word, whose type is
{NSUBJ, CSUBJ, OBJ, IOBJ} (if exists), then add
them to the collection of answer tokens. Further,
we prune the answer space by excluding those
which appear fewer than 5 times overall. Having
several methods for question construction allows
us to explore the answer space properly. In the re-
sults section we perform experiments on root, sub-
ject/object, and named entities to see which model
provides the best extraction guide.

Given an extractive summary S containing a set
of source text units, and a collection of question-
answer pairs P = {(Qk, e∗k)}Kk=1 related to the
source document, we want to develop a mecha-
nism leveraging the extractive summary to answer
these questions. We first encode each question Qk
to a vector representation (qk). This is achieved
by concatenating the last hidden states of the for-
ward/backward passes of a bidirectional LSTM
(Eq. (6)). Next, we exploit the attention mecha-
nism to locate summary parts that are relevant to
answering the k-th question. Given the attention
mechanism, an extractive summary S can be used
to answer multiple questions related to the docu-
ment. We define αt,k to be the semantic related-
ness between the t-th source text unit and the k-th
question. Following Chen et al. (2016a), we in-
troduce a bilinear term to characterize their rela-
tionship (αt,k ∝ hetWαqk; see Eq. (7)). In this
process, we consider only those source text units
selected in summary S. Using αt,k as weights, we
then compute a context vector ck condensing sum-
mary content related to the k-th question (Eq. (8)).

qk = f
Bi-LSTM
4 (Qk) (6)

αt,k =
exp(hetW

αqk)∑
t exp(h

e
tW

αqk)
(7)

ck =
∑

t αt,kh
e
t (8)

uk = [ck;qk; |ck − qk|; ck ⊗ qk] (9)

To predict the most probable answer, we construct
a fully-connected network as the output layer. The
input to the network includes a concatenation of
the context vector (ck), question vector (qk), abso-
lute difference (|ck−qk|) and element-wise prod-
uct (ck ⊗ qk) of the two vectors (Eq. (9)). A soft-
max function is used to estimate a probability dis-
tribution over the space of candidate answers:

P (ek|S, Qk) = softmax(WefReLU(Wuuk + bu)).

Such a fully-connected output layer has achieved
success on natural language inference (Mou et al.,
2016; Chen et al., 2018); here we test its efficacy
on answer selection. The model parameters in-
clude {Wα,We,Wu,bu} and those of fBi-LSTM4 .

3.4 A Reinforcement Learning Framework

In this section we introduce a reinforcement learn-
ing framework to explore the space of possible
extractive summaries and present a novel reward
function to promote summaries that are adequate,



2571

fluent, restricted in length, and competent in ques-
tion answering. Our reward function consists of
four components, whose interpolation weights γ,
α, and β are tuned on the dev set.

R(y) = Rc(y) + γRa(y) + αRf (y) + βRl(y)

We define QA competency (Eq. (10)) as the av-
erage log-likelihood of correctly answering ques-
tions using the system summary (y). A high-
quality system summary is expected to resem-
ble reference summary by using similar wording.
The adequacy metric (Eq. (11)) measures the per-
centage of overlapping unigrams between the sys-
tem (y) and reference summary (y∗). The flu-
ency criterion (Eq. (12)) encourages consecutive
sequences of source words to be selected by pre-
venting many 0/1 switches in the label sequence
(i.e., |yt − yt−1|). Finally, we limit the summary
size by setting the ratio of selected words to be
close to a threshold δ (Eq. (13)).

QA Rc(y)=
1

K

K∑
k=1

logP (e∗k |y,Qk) (10)

Adequ. Ra(y)=
1

|y∗ |
U(y,y∗) (11)

Fluency Rf (y)=−
|y|∑
t=2

|yt−yt−1 | (12)

Length Rl(y)=−
∣∣∣ 1|y|∑

t

yt−δ
∣∣∣ (13)

The reward function R(y) successfully com-
bines intrinsic measures of summary fluency and
adequacy (Goldstein et al., 2005) with extrin-
sic measure of summary responsiveness to given
questions (Dang, 2006; Murray et al., 2008). A re-
inforcement learning agent finds a policy P (y|x)
to maximize the expected reward EP (y|x)[R(y)].
Training the system with policy gradient (Eq. (14))
involves repeatedly sampling an extractive sum-
mary ŷ from the source document x. At time t,
the agent takes an action by sampling a decision
based on p(yt|ŷ<t,x) (Eq. (5)) indicating whether
the t-th source text unit is to be included in the
summary. Once the full summary sequence ŷ is
generated, it is compared to the ground-truth se-
quence to compute the reward R(ŷ). In this way,
reinforcement learning explores the space of ex-
tractive summaries and promotes those yielding
high rewards. At inference time, rather than sam-
pling actions from p(yt|y<t,x), we choose yt that

yields the highest probability to generate the sys-
tem summary y. This process is deterministic and
no QA is required.

∇θEP (y|x)[R(y)]
= EP (y|x)[R(y)∇θ logP (y|x)]

≈ 1N
∑N

n=1R(ŷ(n))∇θ logP (ŷ(n)|x) (14)

4 Experiments

We proceed by discussing the dataset and settings,
comparison systems, and experimental results ob-
tained through both automatic metrics and human
evaluation in a reading comprehension setting.

4.1 Dataset and Settings
Our goal is to build an extractive summarizer iden-
tifying important textual segments from source ar-
ticles. To investigate the effectiveness of the pro-
posed approach, we conduct experiments on the
CNN/Daily Mail dataset using a version provided
by See et al. (2017). The reference summaries of
this dataset were created by human editors exhibit-
ing a moderate degree of extractiveness. E.g., 83%
of summary unigrams and 45% of bigrams appear
in source articles (Narayan et al., 2018a). On av-
erage, a CNN article contains 761 words / 34 sen-
tences and a DM article contains 653 words / 29
sentences. We report results respectively for the
CNN and DM portion of the dataset.

Our hyperparameter settings are as follows. We
set the hidden state dimension of the LSTM to
be 256 in either direction. A bidirectional LSTM
fBi-LSTM1 (·) produces a 512-dimensional vector for
each content word. Similarly, fBi-LSTM4 (·) gener-
ates a question vector qk of the same size. Our
CNN encoder fCNN2 (·) uses multiple window sizes
of {1, 3, 5, 7} and 128 filters per window size. het
is thus a 512-dimensional vector using either CNN
or LSTM encoder. We set the hidden state dimen-
sion of st to be 128. We also use 100-dimensional
word embeddings (Pennington et al., 2014) and
sinusoidal positional encodings (Vaswani et al.,
2017) of 30 dimensions.

The maximum article length is set to 400 words.
Compared to the study of Arumae and Liu (2018),
we expand the search space dramatically from 100
to 400 words, which poses a challenge to the RL-
based summarizers. We associate each article with
at most 10 QA pairs (K=10) and use them to guide
the extraction of summary segments. We apply
mini-batch training with Adam optimizer (Kingma
and Ba, 2014), where a mini-batch contains 128



2572

CNN
System #Ans. R-1 R-2 R-L

Lead-3 – 28.8 11.5 19.3
PointerGen+Cov. – 29.9 10.9 21.1
Graph Attn. – 30.3 9.8 20.0
LexRank – 26.1 9.6 17.7
SumBasic – 22.9 5.5 14.8
KLSum – 20.7 5.9 13.7
Distraction-M3 – 27.1 8.2 18.7

QASumm+NoQ 0 16.38 7.25 11.30
QASumm+SUBJ/OBJ 9,893 26.16 8.97 18.24
QASumm+ROOT 3,678 26.67 9.19 18.76
QASumm+NER 6,167 27.38 9.38 19.02

Table 2: Summarization results on CNN test set. Summaries
are evaluated at their full-length by ROUGE F1-scores.

Daily Mail
System #Ans. R-1 R-2 R-L

Lead-3 – 22.5 9.3 20.0
PointerGen+Cov. – 31.2 17.0 28.9
Graph Attn. – 27.4 11.3 15.1
NN-WE – 15.7 6.4 9.8
NN-SE – 22.7 8.5 12.5
SummaRuNNer – 26.2 10.8 14.4

QASumm+NoQ 0 22.26 9.16 19.78
QASumm+SUBJ/OBJ 19,151 23.38 9.54 20.14
QASumm+ROOT 5,498 26.87 11.97 23.07
QASumm+NER 15,342 25.74 11.89 22.38

Table 3: Summarization results on DM test set. To ensure a
fair comparison, we follow the convention to report ROUGE
recall scores evaluated at 75 bytes.

articles and their QA pairs. The summary ratio δ is
set to 0.15, yielding extractive summaries of about
60 words. Following Arumae and Liu (2018), we
set hyperparameters β = 2α; α and γ are tuned on
the dev set using grid search.

4.2 Experimental Results

Comparison systems We compare our method
with a number of extractive and abstractive sys-
tems that have reported results on the CNN/DM
datasets. We consider non-neural approaches that
extract sentences from the source article to form
a summary. These include LexRank (Radev et al.,
2004), SumBasic (Vanderwende et al., 2007), and
KLSum (Haghighi and Vanderwende, 2009). Such
methods treat sentences as bags of words, and
then select sentences containing topically impor-
tant words. We further include the Lead-3 baseline
that extracts the first 3 sentences from any given
article. The method has been shown to be a strong
baseline for summarizing news articles.

Neural extractive approaches focus on learning
vector representations for sentences and words,

then performing extraction based on the learned
representations. Cheng et al. (2016) describe a
neural network method composed of a hierarchi-
cal document encoder and an attention-based ex-
tractor. The system has two variants: NN-WE ex-
tracts words from the source article and NN-SE ex-
tracts sentences. SummaRuNNer (Nallapati et al.,
2017) presents an autoregressive sequence label-
ing method based on recurrent neural networks. It
selects summary sentences based on their content,
salience, position, and novelty representations.

Abstractive summarization methods are not di-
rectly comparable to our approach, but we choose
to include three systems that report results respec-
tively for CNN and DM datasets. Distraction-
M3 (Chen et al., 2016b) trains the summarization
system to distract its attention to traverse differ-
ent regions of the source article. Graph atten-
tion (Tan et al., 2017) introduces a graph-based
attention mechanism to enhance the encoder-
decoder framework. PointerGen+Cov. (See et al.,
2017) allows the system to not only copy words
from the source text but also generate summary
words by selecting them from a vocabulary. Ab-
stractive methods can thus introduce new words to
the summary that are not present in the source arti-
cle. However, system summaries may change the
meaning of the original texts due to this flexibility.

Results We present summarization results of
various systems in Tables 2 and 3, evaluated on
the standard CNN/DM test sets by R-1, R-2, and
R-L metrics (Lin, 2004), which respectively mea-
sure the overlap of unigrams, bigrams, and longest
common subsequences between system and refer-
ence summaries. We investigate four variants of
our method: QASumm+NoQ does not utilize any
question-answer pairs during training. It extracts
summary text chunks by learning from ground-
truth labels (§3.2) and the chunks are encoded by
fBi-LSTM1 . Other variants initialize their models us-
ing pretrained parameters from QASumm+NoQ,
then integrate the reinforcement learning objective
(§3.4) to exploit the space of possible extractive
summaries and reward those that are useful for an-
swering questions. We consider three types of QA
pairs: the answer token is the root of a sentence de-
pendency parse tree (+ROOT), a subject or object
(+SUBJ/OBJ), or an entity found in the sentence
(+NER). In all cases, the question is generated by
replacing the answer token with a blank symbol.

As illustrated in Tables 2 and 3, our QASumm
methods with reinforcement learning (+ROOT,



2573

NoText QASumm+NoQ GoldSumm FullText
Train Dev Gap Train Dev Gap Train Dev Gap Train Dev Gap

SUBJ/OBJ 49.7 24.4 25.3 55.9 31.2 24.7 69.3 48.6 20.7 67.6 43.3 24.3
ROOT 68.1 34.9 33.2 71.6 36.3 35.3 76.9 44.9 32.0 76.0 35.7 40.3
NER 61.0 15.8 45.2 66.0 32.7 33.3 85.2 54.0 31.2 82.4 46.3 36.1

Table 4: Question-answering accuracies using different types of QA pairs (ROOT, SUBJ/OBJ, NER) and different source input
(NoText, QASumm+NoQ, GoldSumm, and FullText) as the basis for predicting answers.

+SUBJ/OBJ, +NER) perform competitively with
strong baselines. They outperform the counterpart
QASumm+NoQ that makes no use of the QA pairs
by a substantial margin. They outperform or per-
form at a comparable level to state-of-the-art pub-
lished systems on the CNN/DM datasets but are
generally inferior to PointerGen. We observe that
exacting summary chunks is highly desirable in
real-world applications as it provides a mechanism
to generate concise summaries. Nonetheless, ac-
curately identifying summary chunks is challeng-
ing because the search space is vast and spurious-
ness arises in chunking sentences. Cheng and La-
pata (2016) report a substantial performance drop
when adapting their system to extract words. Our
QASumm methods focusing on chunk extraction
perform on par with competitive systems that ex-
tract whole sentences. We additionally present hu-
man evaluation results of summary usefulness for
a reading comprehension task in §4.3.

In Tables 2 and 3, we further show the num-
ber of unique answers per QA type. We find that
the ROOT-type QA pairs have the least number of
unique answers. They are often main verbs of sen-
tences. In contrast, the SUBJ/OBJ-type has the
most number of answers. They are subjects and
objects of sentences and correspond to an open
class of content words. The NER-type has a mod-
erate number of answers compared to others. Note
that all answer tokens have been filtered by fre-
quency; those appearing less than 5 times in the
dataset are removed to avoid overfitting.

Among variants of the QASumm method, we
find that QASumm+ROOT achieves the highest
scores on DM dataset. QASumm+NER performs
consistently well on both CNN and DM datasets,
suggesting QA pairs of this type are effective in
guiding the system to extract summary chunks.
We conjecture that maintaining a moderate num-
ber of answers is important to maximize perfor-
mance. To answer questions with missing enti-
ties, the summary is encouraged to contain similar
content as the question body. Because questions
are derived from the human abstract, this in turn

requires the system summary to carry similar se-
mantic content as the human abstract.

Question-answering accuracy We next dive
into the QA component of our system to investi-
gate question-answering performance when differ-
ent types of summaries and QA pairs are supplied
to the system (§3.3). Given a question, the system
predicts an answer using an extractive summary as
the source input. Intuitively, an informative sum-
mary can lead to high QA accuracy, as the sum-
mary content serves well as the basis for predicting
answers. With the same summary as input, certain
types of questions can be more difficult to answer
than others, and the system must rely heavily on
the summary to gauge correct answers.

We compare various types of summaries. These
include (a) QASumm+NoQ which extracts sum-
mary chunks without requiring QA pairs; and
(b) GoldSumm, which are gold-standard extractive
summaries generated by collecting source words
appearing in human summaries. We further con-
sider NoText and FullText, corresponding to using
no source text or the full source article as input.
They represent the two extremes. In all cases the
QA component (§3.3) is trained on the training set
and we report QA accuracies on the dev set.

In Table 4, we observe that question-answering
with GoldSumm performs the best for all QA
types. It outperforms the scenarios using Full-
Text as the source input. This indicates that dis-
tilled information contained in a high-quality sum-
mary can be useful for answering questions, as
searching for answers in a succinct summary can
be more efficient than that in a full article. More-
over, we observe that the performance of QA-
Summ+NoQ is in between NoText and GoldSumm
for all answer types. The results suggest that
extractive summaries with even modest ROUGE
scores can prove useful for question-answering.
Regarding different types of QA pairs, we find
that the ROOT-type can achieve high QA accu-
racy when using NoText input. It suggests that
ROOT answers can to some extent be predicted
based on the question context. The NER-type QA



2574

Figure 2: Summarization results using fLSTM1 or fCNN2 en-
coder with word/chunk as the extraction unit.

pairs work the best for both GoldSumm and Full-
Text, likely because the source texts contain nec-
essary entities required to correctly answer those
questions. We also find the SUBJ/OBJ-type QA
pairs have the smallest gap between train/dev ac-
curacies, despite that they have a large answer
space. Based on the analysis we would suggest fu-
ture work to consider using NER-based QA pairs
as they encourage the summaries to contain salient
source content and be informative.

Extraction units We finally compare the per-
formance of using either words or chunks as ex-
traction units (§3.1). The chunks are obtained by
breaking down sentence constituent parse trees in
a top-down manner until all tree fragments con-
tain 5 words or less. We observe that 70% of the
chunks are 1-grams, and 2/3/4/5-grams are 9%,
7%, 6%, and 8% respectively. We compare the
bidirectional LSTM (f LSTM1 ) and CNN (f

CNN
2 ) en-

coders for their effectiveness on generating repre-
sentations for extraction units. Figure 2 presents
the results of the QASumm+NoQ system under
various settings. We find that extracting chunks
performs superior, and combining chunks with
LSTM representations yield the highest scores.

4.3 Human Evaluation
Testing the usefulness of an extractive system
driven by reading comprehension is not inherently
measured by automatic metrics (i.e. ROUGE). We
conducted a human evaluation to assess whether
the highlighted summaries contribute to document
understanding. Similar to our training paradigm
we presented each participant with the document
and three fill-in-the-blank questions created from
the human abstracts. It was guaranteed that each
question was from a unique human abstract to
avoid seeing the answer adjacent to the same tem-
plate. The missing section was randomly gener-
ated to be either the root word, the subject or ob-

Summary Time Accuracy Inform.

Human 69.5s 87.3 4.23
QASumm+NoQ 87.9s 53.7 1.76
Pointer+Cov. 100.9s 52.3 2.14
QASumm+NER 95.0s 62.3 2.14

Table 5: Amazon mechanical turk experiments. Human ab-
stracts were the goldstandard summaries, Pointer+Cov. were
summaries generated by See et al. (2017). Our systems tested
were the supervised extractor, and our full model (NER).

ject of the sentence, or a named entity. We com-
pare our reinforced extracted summary (presented
as a bold overlay to the document), against our
supervised method (section 3.2), abstractive sum-
maries generated by See et al. (2017), and the hu-
man abstracts in full. Additionally we asked the
participants to rate the quality of the summary pre-
sented (1-5, with 5 being most informative). We
utilized Amazon Mechanical Turk, and conducted
an experiment where we sampled 80 documents
from the CNN test set. The articles were evenly
split across the four competing systems, and each
HIT was completed by 5 turkers. Upon comple-
tion the data was analyzed manually for accuracy
since turkers entered each answer as free text, and
to remove any meaningless datapoints.

Table 5 shows the average time (in seconds) to
complete a single question, the overall accuracy of
the participants, and the informativeness of a given
summary type. Excluding the use of human ab-
stracts, all systems resulted in similar performance
times. However we observe a large margin in QA
accuracy in our full system compared to the ab-
stractive and our supervised approach. Although
participants rated the informativeness of the sum-
maries to be the same our systems yielded a higher
performance. This strongly indicates that having a
system which makes using of document compre-
hension has a tangible effect when applied towards
a real-world task.

5 Conclusion

We exploited an extractive summarization frame-
work using deep reinforcement learning to iden-
tify consecutive word sequences from a document
to form an extractive summary. Our reward func-
tion promotes adequate and fluent summaries that
can serve as document surrogates to answer im-
portant questions, directly addressing users’ infor-
mation needs. Experimental results on benchmark
datasets demonstrated the efficacy of our proposed
method over state-of-the-art baselines, assessed by
both automatic metrics and human evaluators.



2575

References
Kristjan Arumae and Fei Liu. 2018. Reinforced extrac-

tive summarization with question-focused rewards.
In Proceedings of the ACL Student Research Work-
shop.

Ziqiang Cao, Wenjie Li, Sujian Li, and Furu Wei. 2017.
Improving multi-document summarization via text
classification. In Proceedings of the Association for
the Advancement of Artificial Intelligence (AAAI).

Ziqiang Cao, Furu Wei, Wenjie Li, and Sujian Li. 2018.
Faithful to the original: Fact aware neural abstrac-
tive summarization. In Proceedings of the AAAI
Conference on Artificial Intelligence (AAAI).

Asli Celikyilmaz, Antoine Bosselut, Xiaodong He, and
Yejin Choi. 2018. Deep communicating agents
for abstractive summarization. In Proceedings of
the North American Chapter of the Association for
Computational Linguistics (NAACL).

Danqi Chen, Jason Bolton, and Christopher D. Man-
ning. 2016a. A thorough examination of the
cnn/daily mail reading comprehension task. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (ACL).

Qian Chen, Xiaodan Zhu, Zhen-Hua Ling, Diana
Inkpen, and Si Wei. 2018. Neural natural language
inference models enhanced with external knowl-
edge. In Proceedings of the Annual Meeting of the
Association for Computational Linguistics (ACL).

Qian Chen, Xiaodan Zhu, Zhen-Hua Ling, Si Wei,
and Hui Jiang. 2016b. Distraction-based neural net-
works for document summarization. In Proceedings
of the Twenty-Fifth International Joint Conference
on Artificial Intelligence (IJCAI).

Jianpeng Cheng and Mirella Lapata. 2016. Neural
summarization by extracting sentences and words.
In Proceedings of ACL.

Hoa Trang Dang. 2006. DUC 2005: Evaluation of
question-focused summarization systems. In Pro-
ceedings of the Workshop on Task-Focused Summa-
rization and Question Answering.

Sebastian Gehrmann, Yuntian Deng, and Alexander M.
Rush. 2018. Bottom-up abstractive summariza-
tion. In Proceedings of the Conference on Em-
pirical Methods in Natural Language Processing
(EMNLP).

Dan Gillick and Benoit Favre. 2009. A scalable global
model for summarization. In Proceedings of the
NAACL Workshop on Integer Linear Programming
for Natural Langauge Processing.

Jade Goldstein, Alon Lavie, Chin-Yew Lin, and Clare
Voss. 2005. Intrinsic and extrinsic evaluation mea-
sures for machine translation and/or summarization.
In Proceedings of the ACL-05 Workshop.

Max Grusky, Mor Naaman, and Yoav Artzi. 2018.
NEWSROOM: A dataset of 1.3 million summaries
with diverse extractive strategies. In Proceedings of
the 2018 Conference of the North American Chap-
ter of the Association for Computational Linguistics:
Human Language Technologies (NAACL-HLT).

Han Guo, Ramakanth Pasunuru, and Mohit Bansal.
2018. Soft, layer-specific multi-task summarization
with entailment and question generation. In Pro-
ceedings of the Annual Meeting of the Association
for Computational Linguistics (ACL).

Aria Haghighi and Lucy Vanderwende. 2009. Explor-
ing content models for multi-document summariza-
tion. In Proceedings of the North American Chap-
ter of the Association for Computational Linguistics
(NAACL).

Karl Moritz Hermann, Tomas Kocisky, Edward
Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su-
leyman, and Phil Blunsom. 2015. Teaching ma-
chines to read and comprehend. In Proceedings of
Neural Information Processing Systems (NIPS).

Sepp Hochreiter and Jurgen Schmidhuber. 1997.
Long short-term memory. Neural Computation,
9(8):1735–1780.

Kai Hong, John M Conroy, Benoit Favre, Alex
Kulesza, Hui Lin, and Ani Nenkova. 2014. A repos-
itory of state of the art and competitive baseline sum-
maries for generic news summarization. In Proceed-
ings of the Ninth International Conference on Lan-
guage Resources and Evaluation (LREC).

Masaru Isonuma, Toru Fujino, Junichiro Mori, Yutaka
Matsuo, and Ichiro Sakata. 2017. Extractive sum-
marization using multi-task learning with document
classification. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing
(EMNLP).

Chris Kedzie, Kathleen McKeown, and Hal Daume III.
2018. Content selection in deep learning models of
summarization. In Proceedings of the Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP).

Urvashi Khandelwal, He He, Peng Qi, and Dan Ju-
rafsky. 2018. Sharp nearby, fuzzy far away: How
neural language models use context. Proceedings of
the Annual Meeting of the Association for Computa-
tional Linguistics (ACL).

Gunhee Kim, Leonid Sigal, and Eric P. Xing. 2014.
Joint summarization of large-scale collections of
web images and videos for storyline reconstruction.
In Proceedings of CVPR.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.



2576

Kevin Knight and Daniel Marcu. 2002. Summariza-
tion beyond sentence extraction: A probabilistic ap-
proach to sentence compression. Artificial Intelli-
gence.

Logan Lebanoff, Kaiqiang Song, and Fei Liu. 2018.
Adapting the neural encoder-decoder framework
from single to multi-document summarization. In
Proceedings of the Conference on Empirical Meth-
ods in Natural Language Processing (EMNLP).

Tao Lei, Regina Barzilay, and Tommi Jaakkola. 2016.
Rationalizing neural predictions. In Proceedings of
the Conference on Empirical Methods in Natural
Language Processing (EMNLP).

Chen Li, Fei Liu, Fuliang Weng, and Yang Liu. 2013.
Document summarization via guided sentence com-
pression. In Proceedings of the 2013 Conference on
Empirical Methods in Natural Language Processing
(EMNLP).

Chen Li, Yang Liu, Fei Liu, Lin Zhao, and Fuliang
Weng. 2014. Improving multi-document summa-
rization by sentence compression based on expanded
constituent parse tree. In Proceedings of the Con-
ference on Empirical Methods on Natural Language
Processing (EMNLP).

Chin-Yew Lin. 2004. ROUGE: a package for au-
tomatic evaluation of summaries. In Proceedings
of ACL Workshop on Text Summarization Branches
Out.

Hui Lin and Jeff Bilmes. 2010. Multi-document sum-
marization via budgeted maximization of submodu-
lar functions. In Proceedings of NAACL.

Christopher D Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven J Bethard, and David Mc-
Closky. 2014. The stanford CoreNLP natural lan-
guage processing toolkit. In Proceedings of the As-
sociation for Computational Linguistics (ACL) Sys-
tem Demonstrations.

Andre F. T. Martins and Noah A. Smith. 2009. Sum-
marization with a joint model for sentence extrac-
tion and compression. In Proceedings of the ACL
Workshop on Integer Linear Programming for Natu-
ral Language Processing.

Lili Mou, Rui Men, Ge Li, Yan Xu, Lu Zhang, Rui Yan,
and Zhi Jin. 2016. Natural language inference by
tree-based convolution and heuristic matching. In
Proceedings of the Annual Meeting of the Associa-
tion for Computational Linguistics (ACL).

Gabriel Murray, Thomas Kleinbauer, Peter Poller,
Steve Renals, Jonathan Kilgour, and Tilman Becker.
2008. Extrinsic summarization evaluation: A deci-
sion audit task. Machine Learning for Multimodal
Interaction.

Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017.
SummaRuNNer: A recurrent neural network based
sequence model for extractive summarization of

documents. In Proceedings of the Thirty-First AAAI
Conference on Artificial Intelligence (AAAI).

Ramesh Nallapati, Bowen Zhou, Cicero dos Santos,
Caglar Gulcehre, and Bing Xiang. 2016. Abstrac-
tive text summarization using sequence-to-sequence
rnns and beyond. In Proceedings of SIGNLL.

Shashi Narayan, Shay B. Cohen, and Mirella Lapata.
2018a. Don’t give me the details, just the summary!
Topic-aware convolutional neural networks for ex-
treme summarization. In Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP).

Shashi Narayan, Shay B. Cohen, and Mirella Lapata.
2018b. Ranking sentences for extractive summa-
rization with reinforcement learning. In Proceed-
ings of the 16th Annual Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies
(NAACL-HLT).

Ani Nenkova and Kathleen McKeown. 2011. Auto-
matic summarization. Foundations and Trends in
Information Retrieval.

Romain Paulus, Caiming Xiong, and Richard Socher.
2017. A deep reinforced model for abstractive sum-
marization. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing
(EMNLP).

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors for
word representation. In Empirical Methods in Nat-
ural Language Processing (EMNLP), pages 1532–
1543.

Dragomir R. Radev, Hongyan Jing, Małgorzata Styś,
and Daniel Tam. 2004. Centroid-based summariza-
tion of multiple documents. Information Processing
and Management, 40(6):919–938.

Alexander M. Rush, Sumit Chopra, and Jason Weston.
2015. A neural attention model for sentence sum-
marization. In Proceedings of EMNLP.

Evan Sandhaus. 2008. The new york times annotated
corpus. Linguistic Data Consortium.

Abigail See, Peter J. Liu, and Christopher D. Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In Proceedings of the Annual
Meeting of the Association for Computational Lin-
guistics (ACL).

Kaiqiang Song, Lin Zhao, and Fei Liu. 2018.
Structure-infused copy mechanisms for abstractive
summarization. In Proceedings of the International
Conference on Computational Linguistics (COL-
ING).

Jiwei Tan, Xiaojun Wan, and Jianguo Xiao. 2017.
Abstractive document summarization with a graph-
based attentional neural model. In Proceedings of

http://www.aclweb.org/anthology/D14-1162
http://www.aclweb.org/anthology/D14-1162


2577

the Annual Meeting of the Association for Computa-
tional Linguistics (ACL).

Sansiri Tarnpradab, Fei Liu, and Kien A. Hua. 2017.
Toward extractive summarization of online forum
discussions via hierarchical attention networks. In
Proceedings of the 30th Florida Artificial Intelli-
gence Research Society Conference (FLAIRS).

Lucy Vanderwende, Hisami Suzuki, Chris Brockett,
and Ani Nenkova. 2007. Beyond SumBasic: Task-
focused summarization with sentence simplification
and lexical expansion. Information Processing and
Management, 43(6):1606–1618.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Proceedings of the 31st Conference on
Neural Information Processing Systems (NIPS).

Lu Wang, Hema Raghavan, Vittorio Castelli, Radu Flo-
rian, and Claire Cardie. 2013. A sentence com-
pression based framework to query-focused multi-
document summarization. In Proceedings of ACL.

Kristian Woodsend and Mirella Lapata. 2010. Auto-
matic generation of story highlights. In Proceedings
of the Annual Meeting of the Association for Com-
putational Linguistics (ACL).

Yuxiang Wu and Baotian Hu. 2018. Learning to extract
coherent summary via deep reinforcement learning.
In Proceedings of the AAAI Conference on Artificial
Intelligence (AAAI).

Michihiro Yasunaga, Rui Zhang, Kshitijh Meelu,
Ayush Pareek, Krishnan Srinivasan, and Dragomir
Radev. 2017. Graph-based neural multi-document
summarization. In Proceedings of the Confer-
ence on Computational Natural Language Learning
(CoNLL).

Dani Yogatama, Fei Liu, and Noah A. Smith. 2015.
Extractive summarization by maximizing semantic
volume. In Proceedings of EMNLP.

David Zajic, Bonnie J. Dorr, Jimmy Lin, and Richard
Schwartz. 2007. Multi-candidate reduction: Sen-
tence compression as a tool for document summa-
rization tasks. Information Processing and Manage-
ment.

Qingyu Zhou, Nan Yang, Furu Wei, Shaohan Huang,
Ming Zhou, and Tiejun Zhao. 2018. Neural doc-
ument summarization by jointly learning to score
and select sentences. In Proceedings of the Annual
Meeting of the Association for Computational Lin-
guistics (ACL).


