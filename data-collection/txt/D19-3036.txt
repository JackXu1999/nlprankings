



















































A Summarization System for Scientific Documents


Proceedings of the 2019 EMNLP and the 9th IJCNLP (System Demonstrations), pages 211–216
Hong Kong, China, November 3 – 7, 2019. c©2019 Association for Computational Linguistics

211

A Summarization System for Scientific Documents

Shai Erera1, Michal Shmueli-Scheuer1, Guy Feigenblat1, Ora Peled Nakash2,
Odellia Boni1, Haggai Roitman1, Doron Cohen1, Bar Weiner1, Yosi Mass1, Or Rivlin1,

Guy Lev1, Achiya Jerbi1, Jonathan Herzig1, Yufang Hou1, Charles Jochim1,
Martin Gleize1, Francesca Bonin1, Debasis Ganguly1, David Konopnicki1

1IBM Research, 2IBM Cloud
davidko@il.ibm.com

Abstract

We present a novel system providing sum-
maries for Computer Science publications.
Through a qualitative user study, we identi-
fied the most valuable scenarios for discov-
ery, exploration and understanding of scien-
tific documents. Based on these findings, we
built a system that retrieves and summarizes
scientific documents for a given information
need, either in form of a free-text query or by
choosing categorized values such as scientific
tasks, datasets and more. Our system ingested
270,000 papers, and its summarization mod-
ule aims to generate concise yet detailed sum-
maries. We validated our approach with hu-
man experts.

1 Introduction

The publication rate of scientific papers is ever in-
creasing and many tools such as Google Scholar,
Microsoft Academic and more, provide search ca-
pabilities and allow researchers to find papers of
interest. In Computer Science, and specifically,
natural language processing, machine learning,
and artificial intelligence, new tools that go be-
yond search capabilities are used to monitor1, ex-
plore (Singh et al., 2018), discuss and comment2

publications. Yet, there is still a high information
load on researchers that seek to keep up-to-date.
Summarization of scientific papers can mitigate
this issue and expose researchers with adequate
amount of information in order to reduce the load.

Many tools for text summarization are avail-
able3. However, such tools target mainly news
or simple documents, not taking into account the
characteristics of scientific papers i.e., their length
and complexity.

1arxiv-sanity.com
2groundai.com/
3github.com/miso-belica/sumy,ivypanda.

com/online-text-summarizer

A summarization system for scientific publica-
tions requires many underlying technologies: first,
extracting structure, tables and figures from PDF
documents, then, identifying important entities,
and, finally, generating a useful summary. We
chose to provide summarization as part of a search
system as it is the most common interface to con-
sume scientific content, regardless of the task.

Use-cases. We identified the most valuable sce-
narios for scientific paper usage through a qualita-
tive user study. We interviewed six potential users:
a PhD student, two young researchers, two senior
researchers, and a research strategist, all in the
NLP domain. Users were asked to describe when
do they access scientific papers, how often does it
happens, how do they explore content, and finally,
what are their pain-points with current tools. Top
scenarios were, by order of frequency, (1) keeping
updated on current work, (2) preparing a research
project/grant request, (3) preparing related works
when writing a paper, (4) checking the novelty of
an idea, and (5) learning a new domain or technol-
ogy. While (2), (3), (4), and (5) are important, it
seems that they happen only a few times a year,
whereas scenario (1) happens on a daily/weekly
basis. All users mentioned information overload
as their main problem, and, foremost, the efforts
incurred by reading papers. Thus, we decided to
focus on scenario (1). We further asked the users
to describe: (a) how do they search and (b) the
strategy they use to decide whether they want to
read a paper. For (a), users mentioned searching
by using either keywords, entities (e.g., task name,
dataset name, benchmark name), or citation. In
this scenario, users are familiar with their research
topic, and hence can be very focused. Some ex-
amples queries were “state of the art results for
SQUAD” or “using BERT in abstractive summa-
rization”. For (b), users first read the title, and if

arxiv-sanity.com
groundai.com/
github.com/miso-belica/sumy,ivypanda.com/online-text-summarizer
github.com/miso-belica/sumy,ivypanda.com/online-text-summarizer


212

relevant, continue to the abstract. Here, users men-
tioned, that in many cases, they find the abstract
not informative enough in order to determine rel-
evance. Hence the importance of summarization
for helping researchers understand the gist of a
paper without the need to read it entirely or even
opening the PDF file.

Approach and Contribution. We present a
novel summarization system for Computer Sci-
ence publications, named IBM Science Summa-
rizer, which can be useful foremost to the ACL
community, and to researchers at large. It pro-
duces summaries focused around an information
need provided by the user - a natural language
query, scientific tasks (e.g., “Machine Transla-
tion”), datasets or academic venues. IBM Science
Summarizer summarizes the various sections of
a paper independently, allowing users to focus on
the relevant sections for the task at hand. In do-
ing so, the system exploits the various entities and
the user’s interactions, like the user query, in order
to provide a relevant summary. We validated our
approach with human experts. The system is avail-
able at: https://ibm.biz/sciencesum.

2 Related Work

Numerous tools support the domain of scientific
publications including search, monitoring, explor-
ing and more. For automatic summarization, ef-
forts mostly concentrated on automated generation
of survey papers (Jha et al., 2015; Jie et al., 2018).
Surveyor (Jha et al., 2015) considers both content
and discourse of source papers when generating
survey papers. CitationAS (Jie et al., 2018) au-
tomatically generates survey papers using citation
content for the medical domain. The main differ-
ences between these systems and ours is that they
create summaries from multi-documents, while
our tool summarizes individual papers and sup-
ports query-focused summaries.

For supporting the ACL community, CL
Scholar (Singh et al., 2018) presents a graph min-
ing tool on top of the ACL anthology and en-
ables exploration of research progress. Tutori-
alBank (Fabbri et al., 2018) helps researchers to
learn or stay up-to-date in the NLP field. Recently,
paperswithcode4 is an open resource for ML pa-
pers, code and leaderboards. Our work is comple-
mentary to these approaches and provide the first

4paperswithcode.com/

Documents,  Entities,
query

query

Analysis & 
Enrichment

Query 
execution

Summarization

User query SummaryPDF

JSON

Text, Tables, 
Figures 

extraction

Metadata 
enrichment

Entity 
extraction

Elasticsearch
(a) (b)

Figure 1: IBM Science Summarizer Framework.

tool for automatic summarization and exploration
of scientific documents.5

3 System Overview

IBM Science Summarizer’s main purpose is
to support discovery, exploration and understand-
ing of scientific papers by providing summaries.
The system has two parts. First, an ingestion
pipeline parses and indexes papers’ content from
arXiv.com and ACL anthology, as depicted in Fig-
ure 1(a). Second, a search engine (backed up by a
UI), supports search and exploration, coupled with
summarization, as shown in Figure 1(b).

Figure 2 shows the user-interface for IBM Sci-
ence Summarizer. Users interact with the sys-
tem by posing natural language queries, or by
using filters on the metadata fields such as con-
ference venue, year, and author, or entities (e.g.,
tasks, datasets)6. User experience is an impor-
tant usability factor. Thus, our UI provides in-
dicators to help users explore and understand re-
sults. Specifically, associating a comprehensive
structure with each result allows users to navigate
inside content in a controlled manner: each sec-
tion shows clearly the elements that are computed
by the system (section summary, detected entities,
etc.) and the elements that are directly extracted
from the original paper. This clear distinction al-
lows users to have visibility into the systems’ con-
tributions (Flavian et al., 2009).

4 Ingestion Pipeline

Our system contains 270,000 papers from
arXiv.org (“Computer Science” subset) and the

5For clarity, more related works are referred to in the var-
ious sections of this paper.

6In this case, there is no user query.

https://ibm.biz/sciencesum
paperswithcode.com/


213

Figure 2: IBM Science Summarizer UI.

ACL anthology7. The ingestion pipeline consists
of paper acquisition, extracting the paper’s text,
tables and figures and enriching the paper’s data
with various annotations and entities.

Paper Parsing. We use Science-Parse8 to ex-
tract the PDF text, tables and figures. Science-
Parse outputs a JSON record for each PDF, which
among other fields, contains the title, abstract text,
metadata (such as authors and year), and a list
of the sections of the paper, where each record
holds the section’s title and text. We have merged
sub-sections into their containing sections and this
resulted in about 6-7 merged sections per article
(e.g., see Fig. 2). Science-Parse also supports ex-
tracting figures and tables into an image file, as
well as caption text.

In addition, we detect figure and table refer-
ences in the extracted text. We extract tasks,
datasets and metric (see details below). Finally,
we use Elasticsearch9 to index the papers, where
for each paper we index its title, abstract text, sec-
tions text and some metadata.

7We removed duplication between the two by using Jac-
card similarity on the titles and authors.

8github.com/allenai/science-parse
9https://www.elastic.co

Entities Extraction. Entities in our system are
of three types, task (e.g., “Question Answering”),
dataset (e.g., “SQuAD2.0”), and metric (e.g.,
“F1”). We utilize both a dictionary-based ap-
proach and learning-based approach as follows.
First, we adopted the manual curated dictionaries
of paperswithcode5. Since those dictionaries may
not cover all evolving topics, we further developed
a module that automatically extracts entities. Dif-
ferently from previous work on information ex-
traction from scientific literature which mainly fo-
cused on the abstract section (Gábor et al., 2018;
Luan et al., 2018), we analyze the entire paper and
extract the above three types of entities that are
related to the paper’s main research findings. We
cast this problem as a textual entailment task: we
treat paper contents as text and the targeting Task-
Dataset-Metric (TDM) triples as hypothesis. The
textual entailment approach forces our model to
focus on learning the similarity patterns between
text and various triples. We trained our mod-
ule on a dataset consisting of 332 papers in the
NLP domain, and it achieves a macro-F1 score of
56.6 and a micro-F1 score of 66.0 for predicting
TDM triples on a testing dataset containing 162
papers (Hou et al., 2019). In total, our system in-
dexed 872 tasks, 345 datasets, and 62 metrics from
the entire corpus.

github.com/allenai/science-parse
https://www.elastic.co


214

5 Summarization

This module generates a concise, coherent, infor-
mative summary for a given scientific paper that
covers the main content conveyed in the text. The
summary can either be focused around a query,
or query agnostic (a generic summary)10. Scien-
tific papers are complex: they are long, structured,
cover various subjects and the language may be
quite different between sections, e.g., the intro-
duction is quite different than the experiments sec-
tion. To ensure our summarizer assigns sufficient
attention to each of these aspects we have opted to
generate a standalone summary for each section.
This way we summarize a shorter, more focused
text, and the users can navigate more easily as they
are given the structure of the paper. Each of these
section-based summaries are eventually composed
together into one paper summary.

Scientific papers summarization goes back
more than thirty years. Some of these works fo-
cus on summarizing content (Paice, 1981; Paice
and Jones, 1993), while others focused on citation
sentences (citation-aware summarization) (Elkiss
et al., 2008; Qazvinian and Radev, 2008; Abu-
Jbara and Radev, 2011). Recently, Yasunaga et al.
(2019) released a large-scale dataset, Scisumm-
Net, including summaries produced by humans for
over 1000 scientific papers using solely the pa-
pers abstract and citations. While citations data
encompasses the impact of the paper and views
from the research community, it is not available
for newly-published papers, and tends to lead to
high level and shorter summaries (Scisumm-Net
average summary length is 151 words). We opted
to focus on more extensive, detailed summaries
which do not rely on citations data. As mentioned
above, the inputs to the summarization module
are an (optional) query and entities (task, dataset,
metric), and the relevant papers returned by the
search/filtering (see Fig. 2). Given a retrieved pa-
per and the optional query Q (or entity), we de-
scribe next how a summary is produced for each
section D in the paper.

Query Handling. If present, Q can either be
short and focused or verbose. If short, it is ex-
panded using query expansion (Xu et al., 2009).
This pseudo-relevance feedback transforms Q into
a profile of 100 unigram terms, obtained from an-

10Note that in order to optimize the response time, the pro-
duction system currently offers query agnostic summaries.

alyzing the top papers that are returned from our
corpus as a response to the given query. Alterna-
tively, in the case of a verbose query, a Fixed-Point
term weighting schema (Paik and Oard, 2014) is
applied in order to rank the terms of the query.

Alternatively, if only filtering is applied and
there is no query, the keyphrases of the paper are
extracted and used as a surrogate for the query. In
this case, all keywords in the generated query are
given the same weight.

Pre-Processing. Sentences are segmented us-
ing the NLTK library and each sentence is tok-
enized, lower cased and stop words are removed.
Then, each sentence is transformed into a uni-
grams and bi-grams bag-of-words representations,
where each n-gram is associated with its relative
frequency in the text.

Summarization Algorithm. In general, sum-
maries can either be extractive or an abstractive.
In the extractive case, a summary is generated by
selecting a subset of sentences from the original
input. Abstractive summarizers, on the other hand,
can also paraphrase input text. In many cases, ex-
tractive summarization generates grammatical and
focused summaries while abstractive techniques
require heavy supervision, are limited to short
documents and may transform meaning (Gambhir
and Gupta, 2017).

In our system, summarization is applied on
D using a state-of-the-art unsupervised, extrac-
tive, query focused summarization algorithm, in-
spired by (Feigenblat et al., 2017), whose details
are briefly described as follows. The algorithm
gets a paper section, a natural language query Q,
a desired summary length (in our case, 10 sen-
tences11), and a set of entities associated with the
query EQ. The output S is a subset of sentences
from D selected through an unsupervised opti-
mization scheme. To this end, the sentence subset
selection problem is posed as a multi-criteria opti-
mization problem, where several summary quality
objectives are be considered. The selection is ob-
tained using the Cross Entropy (CE) method (Ru-
binstein and Kroese, 2004). Optimization starts
by assigning a uniform importance probability to
each sentence in D. Then, CE works iteratively,
and, at each iteration, it samples summaries us-
ing a learnt distribution over the sentences, and

11We leave the study of variable-length section summaries
for future work.



215

evaluates the quality of these summaries by apply-
ing a target function. This function takes into ac-
count several quality prediction objectives, which
(for simplicity) are multiplied together. The learn-
ing process employs an exploration-exploitation
trade-off in which the importance of a sentence is
a fusion between its importance in previous itera-
tions and its importance in the current one.

The following five summary quality predic-
tors are used by Feigenblat et al. (2017): query
saliency, entities coverage, diversity, text coverage
and sentence length. Query saliency measures to
what extent the summary contains query related
terms as expressed by the cosine similarity be-
tween the unigrams bag-of-words representation
of the summary and the query terms. Entities cov-
erage measures to what extent the set of entities
identified in a summary shares the same set of en-
tities with EQ, measured by the Jaccard similar-
ity between the sets. The aim of this objective is
to produce a summary that is more aligned with
the information need provided explicitly (as a filter
specified by the user) or implicitly (learnt from the
query terms). Diversity lays towards summaries
with a diverse language model using the entropy
of the unigrams bag-of-words representation of the
summary. Text coverage measures the summary
coverage of D as measured by cosine similarity
between the bi-gram bag-of-words representation
of a summary and D. Finally, the length objec-
tive biases towards summaries that include longer
sentences, which tend to be more informative.

6 Human Evaluation

IBM Science Summarizer summarization
paradigm is section-based, i.e., each section is
summarized independently, and then all sections’
summaries are combined into the paper’s sum-
mary. In order to evaluate this paradigm, we
approached 12 authors from the NLP community,
and asked them to evaluate summaries of two
papers that they have co-authored (preferably as
the first author). For each paper, we generated
two summaries of two types: the section-based
summary as described above, and a second
summary generated using the same algorithm but
ignoring sections (i.e., treating the paper content
as flat text), a section-agnostic summary. For the
section-based summary, each section’s summary
length was fixed to 10 sentences. The length of
the section-agnostic summary was defined as the

length of the section-based summary. In total 24
papers, and 48 summaries were evaluated.

Tasks. The authors evaluated summaries of each
summary type, section-agnostic and section-based
(in random order), by performing the following 3
tasks per summary: (1) for each sentence in the
summary, we asked them to indicate whether they
would consider it as a part of a summary of their
paper (i.e., precision oriented measure); (2) we
asked them to evaluate how well each of the sec-
tions of the paper is covered in the summary (i.e.,
coverage/recall); and (3) we asked them to glob-
ally evaluate the quality of the summary. For tasks
(2) and (3) we used a 1-5 scale, ranging from very
bad to excellent, 3 means good.

Analysis. The objective of the analysis is to find
quantitative scores for each summary type to fa-
cilitate a comparison between them. For task (1),
for each paper, we calculated the precision scores
of the two summary types, and then computed the
average score for each summary type across all
papers. For task (2), we calculated an average
score for each paper and summary type by aver-
aging over the sections scores. Then, we obtained
the average of these scores for each summary type
across all papers. Finally, for task (3), we simply
averaged the scores given by the authors to each
summary type. To further quantify the evaluation,
we analyzed how well each summary type did for
each of the 3 tasks. For that we counted the num-
ber of times that each summary type scored better
than the other, and then divided by the total num-
ber of papers, to obtain the “% wins”.

Results. Table 1 summarizes the results across
the 3 tasks. For example, for task (2), for 68% of
the papers, the section-based summary was scored
higher, while, for 22% the section-agnostic sum-
mary was scored higher (for 10% of the papers,
the summaries were scored equally). The average
score for section-based summaries was 3.32 with
standard deviation of 0.53. Notably, the quality
of the section-based summaries significantly out-
performs the section-agnostic summaries on all 3
tasks, supporting our proposed paradigm.

7 Conclusion

We presented IBM Science Summarizer, the
first system that provides researchers a tool to sys-
tematically explore and consume summaries of
scientific papers. As future work, we plan to add



216

Task Section-agnostic Section-based
% wins Avg. score (std) % wins Avg. score (std)

(1) 37 0.54 (0.17) 63 0.6 (0.18)†
(2) 22 3 (0.56) 68 3.32 (0.53) †
(3) 4.5 2.86 (0.56) 36 3.22 (0.61) ‡

Table 1: Tasks results for section-agnostic, and section-
based. † - The results were significant with p < 0.05.
‡- The results were significant with p < 0.005.

support for additional entities e.g., methods, and
to increase our corpus to include more papers. Fi-
nally, we plan to provide this tool to the commu-
nity as an open service and conduct an extensive
user study about the usage and quality of the sys-
tem, including automatic evaluation of the sum-
maries.

References
Amjad Abu-Jbara and Dragomir Radev. 2011. Co-

herent citation-based summarization of scientific pa-
pers. In Proceedings of the 49th Annual HLT, HLT
’11, pages 500–509. Association for Computational
Linguistics.

Aaron Elkiss, Siwei Shen, Anthony Fader, Güneş
Erkan, David States, and Dragomir Radev. 2008.
Blind men and elephants: What do citation sum-
maries tell us about a research article? J. Am. Soc.
Inf. Sci. Technol., 59(1):51–62.

Alexander Fabbri, Irene Li, Prawat Trairatvorakul, Yi-
jiao He, Weitai Ting, Robert Tung, Caitlin West-
erfield, and Dragomir Radev. 2018. Tutorialbank:
A manually-collected corpus for prerequisite chains,
survey extraction and resource recommendation. In
Proceedings of the 56th ACL, pages 611–620.

Guy Feigenblat, Haggai Roitman, Odellia Boni, and
David Konopnicki. 2017. Unsupervised query-
focused multi-document summarization using the
cross entropy method. In Proceedings of the 40th
International ACM SIGIR, pages 961–964.

Carlos Flavian, Raquel Gurrea, and Carlos Orus. 2009.
Web design: a key factor for the website success.
Journal of Systems and Information Technology,
11(2):168–184.

Kata Gábor, Davide Buscaldi, Anne-Kathrin Schu-
mann, Behrang QasemiZadeh, Haı̈fa Zargayouna,
and Thierry Charnois. 2018. Semeval-2018 task 7:
Semantic relation extraction and classification in sci-
entific papers. In Proceedings SemEval@NAACL-
HLT 2018, pages 679–688.

Mahak Gambhir and Vishal Gupta. 2017. Recent auto-
matic text summarization techniques: A survey. Ar-
tif. Intell. Rev., 47(1):1–66.

Yufang Hou, Charles Jochim, Martin Gleize, Francesca
Bonin, and Debasis Ganguly. 2019. Identification
of tasks, datasets, evaluation metrics, and numeric
scores for scientific leaderboards construction. vol-
ume arXiv:1906.09317.

Rahul Jha, Reed Coke, and Dragomir Radev. 2015.
Surveyor: A system for generating coherent survey
articles for scientific topics. In Proceedings of the
Twenty-Ninth AAAI, AAAI’15, pages 2167–2173.

Wang Jie, Zhang Chengzhi, Zhang Mengying, and
Deng Sanhong. 2018. Citationas: A tool of auto-
matic survey generation based on citation content*.
Journal of Data and Information Science, 3(2).

Yi Luan, Luheng He, Mari Ostendorf, and Hannaneh
Hajishirzi. 2018. Multi-task identification of enti-
ties, relations, and coreference for scientific knowl-
edge graph construction. In Proceedings of EMNLP
2018, pages 3219–3232.

C. D. Paice. 1981. The automatic generation of litera-
ture abstracts: An approach based on the identifica-
tion of self-indicating phrases. In Proceedings of the
3rd Annual ACM SIGIR, SIGIR ’80, pages 172–191.

Chris D. Paice and Paul A. Jones. 1993. The identi-
fication of important concepts in highly structured
technical papers. In Proceedings of the 16th Annual
International ACM SIGIR, SIGIR ’93, pages 69–78,
New York, NY, USA. ACM.

Jiaul H. Paik and Douglas W. Oard. 2014. A fixed-
point method for weighting terms in verbose infor-
mational queries. CIKM ’14, pages 131–140, New
York, NY, USA. ACM.

Vahed Qazvinian and Dragomir R. Radev. 2008. Sci-
entific paper summarization using citation summary
networks. In Proceedings of the 22Nd International
Conference on Computational Linguistics - Volume
1, COLING ’08, pages 689–696.

Reuven Y. Rubinstein and Dirk P. Kroese. 2004. The
Cross Entropy Method: A Unified Approach To
Combinatorial Optimization, Monte-carlo Simula-
tion. Springer-Verlag, Berlin, Heidelberg.

Mayank Singh, Pradeep Dogga, Sohan Patro, Dhi-
raj Barnwal, Ritam Dutt, Rajarshi Haldar, Pawan
Goyal, and Animesh Mukherjee. 2018. Cl scholar:
The acl anthology knowledge graph miner. In Pro-
ceedings of the NAACL 2018.

Yang Xu, Gareth J.F. Jones, and Bin Wang. 2009.
Query dependent pseudo-relevance feedback based
on wikipedia. In Proceedings of the 32Nd Interna-
tional ACM SIGIR, pages 59–66.

Michihiro Yasunaga, Jungo Kasai, Rui Zhang, Alexan-
der Richard Fabbri, Irene Li, Dan Friedman, and
Dragomir R. Radev. 2019. Scisummnet: A large an-
notated corpus and content-impact models for scien-
tific paper summarization with citation networks. In
AAAI 2019.

http://dl.acm.org/citation.cfm?id=2002472.2002536
http://dl.acm.org/citation.cfm?id=2002472.2002536
http://dl.acm.org/citation.cfm?id=2002472.2002536
https://doi.org/10.1002/asi.v59:1
https://doi.org/10.1002/asi.v59:1
https://doi.org/10.1007/s10462-016-9475-9
https://doi.org/10.1007/s10462-016-9475-9
https://arxiv.org/abs/1906.09317
https://arxiv.org/abs/1906.09317
https://arxiv.org/abs/1906.09317
https://doi.org/10.1145/160688.160696
https://doi.org/10.1145/160688.160696
https://doi.org/10.1145/160688.160696
http://dl.acm.org/citation.cfm?id=1599081.1599168
http://dl.acm.org/citation.cfm?id=1599081.1599168
http://dl.acm.org/citation.cfm?id=1599081.1599168

