










































Parsing of Partially Bracketed Structures for Parse Selection


Proceedings of the 12th International Conference on Parsing Technologies, pages 231–240,
October 5-7, 2011, Dublin City University. c© 2011 Association for Computational Linguistics

Parsing of Partially Bracketed Structures for Parse Selection

Mark-Jan Nederhof
School of Computer Science

University of St Andrews
St Andrews, United Kingdom

Ricardo Sánchez-Sáez
Instituto Tecnológico de Informática
Universidad Politècnica de Valencia

Valencia, Spain

Abstract

We consider the problem of parsing a sen-
tence that is partially annotated with infor-
mation about where phrases start and end.
The application domain is interactive parse
selection with probabilistic grammars. It
is explained that the main obstacle is spu-
rious ambiguity. The proposed solution is
first described in terms of appropriately con-
strained synchronous grammars, and then in
terms of a computational model for parsing.
Experiments show the feasibility for a prac-
tical grammar.

1 Introduction

In interactive parse selection, the objective is to
obtain correct parses of sentences in a corpus, by
means of an iterative process, alternately draw-
ing upon a language model and human linguistic
judgement. In a first step, the most likely parse is
computed on the basis of the model. This parse
is displayed to the human annotator, who looks
for possible errors and enters corrections. Each
correction takes the form of an occurrence of a
phrase that the parse should contain. The model
is then consulted anew, to recompute the most
likely parse, but now under the constraint that all
occurrences of phrases entered previously by the
linguist must be included. This process is re-
peated until no more errors remain. Applications
can be found in creation of treebanks (Marcus et
al., 1993) and computer-assisted translation (Bar-
rachina et al., 2009).

Apart from the exact language model used in
the process, there are various ways to implement
interactive parse selection. One obvious approach
is to demand that errors are corrected strictly from
left to right. That is, where the occurrence of a

phrase is asserted by the annotator, it is implic-
itly assumed that all phrases in the latest proposed
parse that are wholly contained in the preceding
prefix are correct. This means that these struc-
tures in a left-hand portion of the parse tree can
no longer change in future iterations.

Another degree of freedom in the design of in-
teractive parse selection is the exact information
that the human annotator provides about occur-
rences of phrases. The most obvious choice would
be a triple consisting of the beginning, the end, and
the syntactic category (‘noun phrase’, ‘preposi-
tional phrase’, etc.). If desired, the category could
be omitted or underspecified. This approach has
been implemented for example by Sánchez-Sáez
et al. (2009; 2010).

The main motivation for interactive parse selec-
tion is that it saves the human annotator manual
labour, by automatic prediction of at least parts of
parses that very often are correct. With the crite-
rion of minimizing human effort, it not clear how-
ever that the optimal design of interactive parse
selection is of the kind outlined above, with a
strictly left-to-right strategy, and with specifica-
tion of both the beginning and the end for each
corrected phrase. One objection against the left-
to-right strategy is that errors may be temporarily
overlooked. Typical implementations may allow
backtracking to deal with this situation, but back-
tracking entails that work needs to be redone.

One objection against having to specify the be-
ginning as well as the end of a corrected phrase
is firstly that this requires more mouse clicks or
keyboard strokes than if, say, only the correct be-
ginning of a phrase were specified. Furthermore,
for long and complex sentences, it may be tedious
to determine both phrase boundaries.

For these reasons we explore a less rigid alter-

231



native, namely to allow the human annotator to
specify only the beginning of a phrase, or only the
end of a phrase. This is formalized in the remain-
der of this paper as an unmatched open bracket, or
an unmatched close bracket. Such a bracket may
be labelled with a category or not. Parse selec-
tion is not constrained to be unidirectional, and at
each iteration, brackets can be placed at arbitrary
positions in the input sentence, and thereupon the
most likely parse is (re-)computed that is consis-
tent with the provided brackets so far.

In our notation, the unmatched brackets are
written as square brackets. We refer to them as
‘unmatched’ because the user need not specify
both the beginning and end of a phrase. However,
users may specify both the beginning of a phrase
and the end of the same phrase, by a square open
and a square close bracket, if they so choose.

Next to unmatched brackets, we also allow
matched brackets in the input, which in our no-
tation are written as round brackets. These must
always occur in pairs of one open bracket and one
close bracket, specified together by the user. Un-
like square brackets, pairs of round brackets must
be properly nested. As square brackets, round
brackets may be labelled by categories or may be
unlabelled. Sentences enriched with matched and
unmatched brackets will be called partially brack-
eted strings.

As we will informally illustrate in the follow-
ing section, parsing of partially bracketed strings
by context-free grammars causes particular prob-
lems. The main issue is spurious ambiguity, by
which one input string may be parsed in different
ways all corresponding to one and the same parse
tree by the input grammar. Where the language
model is used to compute the most likely parse,
performance may suffer from having one compu-
tation computed in more than one way. A more
serious consequence is that computation of inside
probabilities is hindered by subparses being rep-
resented more than once. Also n-best parsing al-
gorithms no longer work correctly without further
refinements.

The main contribution of this article is to offer
a solution to avoiding all spurious ambiguity. Our
theoretical framework is that of order-preserving
synchronous context-free grammars, to be sum-
marized in Section 3. With this machinery, map-
pings between unbracketed, bracketed and par-
tially bracketed strings will be presented in Sec-

tion 4. A sketch of a proof that spurious ambiguity
is avoided as claimed is the subject of Section 5.
The actual parsing process, which is based on Ear-
ley’s algorithm, is presented in Section 6.

Section 7 discusses an implementation. The
practicality of our approach is demonstrated by
experiments measuring running time. In addition,
some possible optimizations are proposed. We end
our paper with conclusions, in Section 8.

The issue of avoiding spurious ambiguity was
considered before by (Wieling et al., 2005). Our
treatment differs in that the solution is at the same
time more precise, in terms of synchronous CFGs
rather than grammar transformations, and more
succinct, using simpler constraints on allowable
structures. Also novel is our parsing algorithm,
which is versed towards practical application. Ear-
lier work on partially bracketed strings, such as
that by Pereira and Schabes (1992), has involved
matching brackets only.

2 Informal Illustration

Let us consider the following example context-
free grammar:

NP → Adj NP | N
Adj → big | angry
N → dog

(The vertical bar separates alternative right-hand
sides for the same left-hand side nonterminal sym-
bol.)

The language of all fully bracketed strings is
generated by the following grammar:

NP → (NP Adj NP )NP | (NP N )NP
Adj → (Adj big )Adj | (Adj angry )Adj
N → (N dog )N

We can make such bracketed strings less precise
by:

1. omitting labels of categories at brackets,
and/or

2. replacing a matching pair of round brackets
by a pair of square brackets, of which zero,
one or both may then be omitted.

For example, we can ‘fuzzify’ a fully bracketed
string:

(NP (Adj big )Adj (NP (Adj angry )Adj
(NP (N dog )N )NP )NP )NP (1)

232



by a partially bracketed string:

big angry ( dog ) ]NP (2)

Note there is little point in omitting the label of
one round bracket from a pair of matching brack-
ets without also omitting it from the other bracket
in the pair. This is because the one omitted label
could be reconstructed from the remaining label
by casual inspection of the string.

The language of all partially bracketed strings
can thus be naively specified by a context-free
grammar where next to a rule of the form:

A → (A α )A

we also have a rule of the form:

A → ( α )

and nine rules of the form:

A → y(l) α y(r)

where y(l) is one of [A, [, or the empty string ε, and
y(r) is one of ]A, ], or ε.

However, with the resulting grammar, the par-
tially bracketed string in (2) can be parsed in five
different ways, four of which are illustrated in Fig-
ure 1. The trees in (a) and (b) differ in the place-
ment of ]NP to the right of a right-most path in the
parse tree with more than one node labelled NP;
in fact, there are three different nodes to which ]NP
can be attached. The trees in (c) and (d) differ from
those in (a) and (b) in the placement of the pair of
unlabelled round brackets on either side of a path
in the parse tree involving only unit rules (that is,
rules with right-hand sides of length one).

Because the original grammar was unambigu-
ous, the existence of five different parse trees
for the partially bracketed string should be seen
as spurious ambiguity, given the task of finding
parses of “big angry dog” that are consistent with
the collection of brackets inserted into that string.
As we will explain in more detail later in this arti-
cle, this problem of spurious ambiguity is avoided
by demanding that brackets occur as high as pos-
sible. In the example, this means that the round
brackets are placed around “N” as in (c) or (d)
rather than around “dog” as in (a) or (b). Fur-
ther, ]NP is attached to the highest possible node
labelled NP as in (d) rather than (c). Thus, our
parser would return only the tree in (d). It is not
difficult to see there is always a unique way of
placing brackets as high as possible.

3 Preliminaries

In order to formalize the main problem and its so-
lution, we turn to a restricted type of synchronous
context-free grammar (SCFG), in notation similar
to that in Satta and Peserico (2005). A SCFG G
defines a relation between a source language gen-
erated by a context-free grammar G1 and a target
language generated by a context-free grammar G2.
In the general case, each ‘synchronous’ rule in G
has the form 〈A → α,B → β〉, where A → α is a
rule in G1 and B → β is a rule in G2. The number
of nonterminal symbols in α must equal that in β.

Each such synchronous rule 〈A → α,B → β〉
is also associated with a bijection from the nonter-
minal occurrences in α to the nonterminal occur-
rences in β. By this bijection, one may express a
reordering of constituents between source and tar-
get structures. In this paper, we will consider a
restricted type of SCFG without such reordering,
or put differently, the bijection implicitly maps the
i-th nonterminal occurrence in α to the i-th nonter-
minal occurrence in β. We will call this restriction
OP-SCFG (order-preserving SCFG).

Let G be an OP-SCFG as above, with S1 the
start symbol of G1 and S2 the start symbol of G2.
We first define relations T (A,B)G between pairs of
languages, for A a nonterminal in G1 and B a non-
terminal in G2, to be the smallest relations such
that:

1. existence of a synchronous rule

〈A → w0A1w1 · · ·wn−1Amwm,

B → v0B1v1 · · · vm−1Bmvm〉 (3)

2. existence for 1 ≤ i ≤ m of strings xi and yi
such that xi T

(Ai,Bi)
G yi

together imply that:

w0x1w1 · · · xmwm T
(A,B)
G v0y1v1 · · · ymvm

The transduction TG generated by G is now defined

to be T (S1,S2)G .
For each 4-tuple (x,A,B, y) such that

x T
(A,B)
G y we can build at least one derivation

tree that shows in reverse how x T (A,B)G y was
obtained. More precisely, such derivation trees
can be inductively defined as follows. Let there be
a synchronous rule as in (3), and let each ti, with
1 ≤ i ≤ m, be a derivation tree associated with
a 4-tuple (xi, Ai, Bi, yi) such that xi T

(Ai,Bi)
G yi.

233



NP

Adj

big

NP

Adj

angry

NP

N

( dog )

]NP

NP

Adj

big

NP

Adj

angry

NP

N

( dog )

]NP

NP

Adj

big

NP

Adj

angry

NP

( N

dog

)

]NP

NP

Adj

big

NP

Adj

angry

NP

( N

dog

)

]NP

(a) (b) (c) (d)

Figure 1: Four parses of the same partially bracketed string.

Then a derivation tree can be constructed for the 4-
tuple (x,A,B, y), where x = w0x1w1 · · · xmwm
and y = v0y1v1 · · · ymvm, by a root node labelled
by the above synchronous rule, and its (ordered)
children are the roots of ti.

Similar to the notion of ambiguity in CFGs,
we say that a pair (x, y) is ambiguous for a fixed
SCFG if more than one derivation tree can be as-
sociated with the 4-tuple (x, S1, S2, y). We say the
SCFG is ambiguous if there is at least one ambigu-
ous pair (x, y). For an example of these concepts,
see the following section.

In this paper, we will assume there are no ep-
silon rules, i.e., rules with empty right-hand sides.

4 Bracketed and Partially Bracketed
Strings

The parsing problem for a CFG G can be de-
scribed in terms of a transduction from unbrack-
eted strings to fully bracketed strings, by means of
the OP-SCFG Gbracket that has one synchronous
rule:

〈A → α,A → (A α )A〉

for each rule A → α in G. The strings y such that
x TGbracket y each describe one parse of x according
to the input CFG G.

A naive transduction to fuzzify fully bracketed
strings can be defined in terms of a SCFG Gnaive
of which the synchronous rules are, for each rule
A → α in the input grammar:

• 〈A → (A α )A, A → (A α )A〉,

• 〈A → (A α )A, A → ( α )〉,

• 〈A → (A α )A, A → y
(l) α y(r)〉, for all nine

combinations of y(l) ∈ {[A, [, ε} and y(r) ∈

{]A, ], ε}.

The problem with spurious ambiguity that was the
subject of discussion in Section 2 can now be ex-
pressed in formal terms, as ambiguity of SCFG
Gnaive . Concretely, one and the same fully brack-
eted string can be mapped to one and the same par-
tially bracketed string in different ways. This is
particularly relevant if the transduction is used in
reverse, mapping a given partially bracketed string
to fully bracketed strings, or in other words, build-
ing parse trees according to the input grammar.
As explained in the introduction, the problems this
causes include increased running time, and failure
of probabilistic models and n-best algorithms.

To illustrate this, let us revisit the example from
Figure 1, which corresponds to the following in-
put/output pair:

( (NP (Adj big )Adj (NP (Adj angry )Adj
(NP (N dog )N )NP )NP)NP ,

big angry ( dog ) ]NP ) (4)

With Gnaive , there are five different derivation
trees through which this pair can be obtained. For
example, the tree in Figure 1 (d), which we regard
as the preferred one, corresponds to application of
the following rules:

〈 NP → (NP Adj NP )NP , NP → Adj NP ]NP 〉 ,

〈 Adj → (Adj big )Adj , Adj → big 〉 ,

〈 NP → (NP Adj NP )NP , NP → Adj NP 〉 ,

〈 Adj → (Adj angry )Adj , Adj → angry 〉 ,

〈 NP → (NP N )NP , NP → ( N ) 〉 ,

〈 N → (N dog )N , N → dog 〉

As solution we propose a refined SCFG Gfuzzy .
It specifies the same transduction as Gnaive , but

234



now without ambiguity. Intuitively, we ensure that
any brackets in a partially bracketed string are at-
tached as high as possible. Because there can be at
most one way of doing this that corresponds to a
fully bracketed string, the implication is that there
can be at most one derivation tree for each combi-
nation of a source string x and a target string y.

The SCFG Gfuzzy conceptually keeps records
of where brackets are attached by replacing non-
terminals A in all possible ways by nonterminals
A(s(l), s(r)), where the values s(l) and s(r) are ei-
ther ǫ or a bracket. If such a value is a bracket,
that means that this bracket was attached to the
nearest descendant to which it could be attached,
in the left-most (for s(l)) or right-most (for s(r))
path downwards in the parse tree. The definition of
Gfuzzy disallow situations where this bracket could
be moved to the current node, because that would
imply that the bracket is not attached as high as
possible. Note that there is a finite number of
choices for s(l) and s(r), so that the rules are still
within context-free power.

The synchronous rules of Gfuzzy are specified in
Table 1. As expressed by (5) and (6), the round
brackets from the source language can be replaced
with unlabelled or square brackets. If in the target
language there is an open round bracket, either la-
belled or unlabelled, then the close bracket must
be of the same form, and vice versa.

As is clear from (7), only nonterminals are ex-
tended with two arguments. Terminals in Σ are
copied unchanged from source language to target
language. The first line of (8) says that if the cur-
rent rule is a unit rule, and if a pair of round brack-
ets were attached to a node further down, possibly
along more occurrences of unit rules, then there
must be a reason why these brackets cannot be at-
tached to the current node, and the only reason can
be that other brackets y(l) 6= ε or y(r) 6= ε are al-
ready attached to the current node. The second
and third lines similarly exclude situations where
a square bracket was placed further down, while it
could be attached to the current node.

The information about brackets attached to the
current node, or brackets from further down if no
brackets are attached to the current node, is passed
on bottom-up, as expressed by (9). For technical
reasons, we need to augment the grammar with a
new start symbol, as shown in (10).

5 Correctness

Two properties of Gfuzzy are of interest. The first
is that TGfuzzy equals TGnaive , and the second is that
Gfuzzy is unambiguous. The first proof is tedious,
but the intuition is simple: if we are given a deriva-
tion tree associated with 4-tuple (x, S, S, y) where
x TGnaive y, for a fully bracketed string x and par-
tially bracketed string y, then we can systemat-
ically change this derivation tree, to preserve x
and y but move brackets to be attached as high as
possible in the parse tree of y. With this attach-
ment of brackets, we can straightforwardly map
this derivation tree into a derivation tree associ-
ated with (x, S†, S†, y) where x TGfuzzy y, ensuring
that the constraint in (8) is satisfied. Conversely, if
x TGfuzzy y then clearly x TGnaive y.

The unambiguity of Gfuzzy can be argued as fol-
lows. First, if Gfuzzy were ambiguous, then there
would be a pair (A,B) of nonterminals and a pair
(x, y) of strings, with the length of xy minimal
and AB minimal according to some fixed lexico-
graphical ordering, such that two or more differ-
ent derivation trees can be associated with 4-tuple
(x,A,B, y) where x T (A,B)Gfuzzy y. Because of the
minimality of xy and AB, the two derivation trees
must differ in the synchronous rule at the root,
each of which must be of the form in (5). The
remainder of the proof consists of a large number
of case distinctions, and in each the task is to show
a contradiction, by violation of (8). For example,
suppose y starts with [ and the two synchronous
rules differ in that one has y(l) = [ and the sec-
ond has y(l) = ε. Then in the second case, the
[ must be generated by a rule further down in the
derivation tree, which would violate (8).

6 Parsing

In this section we simplify the discussion by look-
ing only at the context-free rules in the right parts
of the synchronous rules defined in Table 1. These
rules generate the right projection of TGfuzzy . We
will discuss a recognition algorithm on the basis
of these rules, with the tacit assumption that this
can be extended to a parsing algorithm, to obtain
fully bracketed strings as output, for a given par-
tially bracketed strings as input.

Naively, one could use any parsing algorithm
instantiated to the set of rules in the right parts
of (5). For example, one could use the classical
Earley algorithm (Earley, 1970; Stolcke, 1995).
This manipulates items of the form J〈A → α •

235



For given CFG G, with set N of nonterminals, set Σ of terminals, and start symbol S ∈ N , the SCFG
Gfuzzy has one synchronous rule:

〈 A → (A X1 · · ·Xm )A, A(s
(l)
0 , s

(r)
0 ) → y

(l) Y1 · · ·Ym y
(r) 〉 (5)

for each rule A → X1 · · ·Xm in G, for each choice of the pair:

(y(l), y(r)) ∈ {((A, )A), ((, ))} ∪ {[A, [, ε} × {]A, ], ε} (6)

and for each choice of pairs:

(s
(l)
i , s

(r)
i ) ∈ {((B, )B) | B ∈ N} ∪ {((, ))} ∪ ({[B | B ∈ N} ∪ {[, ε})× ({]B | B ∈ N} ∪ {], ε})

for each i (1 ≤ i ≤ m) such that Xi ∈ N , and (s
(l)
i , s

(r)
i ) = (ε, ε) for each i such that Xi ∈ Σ, and:

Yi =

{

Xi(s
(l)
i , s

(r)
i ) if Xi ∈ N

Xi if Xi ∈ Σ
(7)

under the following constraints:

m = 1 ∧ (s
(l)
1 , s

(r)
m ) ∈ {((A, )A), ((, ))} → (y

(l) 6= ε ∨ y(r) 6= ε) ∧

(s
(l)
1 = [A ∨ s

(l)
1 = [) → y

(l) 6= ε ∧

(s
(r)
m = ]A ∨ s

(r)
m = ]) → y(r) 6= ε

(8)

and:

(s
(l)
0 , s

(r)
0 ) =































































(y(l), y(r)) if (y(l), y(r)) ∈ {((A, )A), ((, ))}

(s
(l)
1 , s

(r)
m ) if m = 1 ∧ y(l) = y(r) = ε ∧ (s

(l)
1 , s

(r)
m ) ∈ {((B, )B) | B ∈ N \ {A}}

(s(l), s(r)) otherwise, where:

s(l) =







y(l) if y(l) ∈ {[A, [}

s
(l)
1 if y

(l) = ε ∧ s
(l)
1 ∈ {[B | B ∈ N \ {A}}

ε otherwise

s(r) =







y(r) if y(r) ∈ {]A, ]}
s
(r)
m if y(r) = ε ∧ s

(r)
m ∈ {]B | B ∈ N \ {A}}

ε otherwise

(9)

Gfuzzy further has one synchronous rule:

〈 S† → S, S† → S(s(l), s(r)) 〉 (10)

for each choice of the pair:

(s(l), s(r)) ∈ {((B, )B) | B ∈ N} ∪ {((, ))} ∪ ({[B | B ∈ N} ∪ {[, ε})× ({]B | B ∈ N} ∪ {], ε})

where S† is a new symbol.

Table 1: The SCFG Gfuzzy constructed out of CFG G.

236



β〉, i, jK, which means that of a rule A → αβ from
the grammar, the first part α has been processed
and was found to generate the substring ai+1 · · · aj
of a fixed input string a1 · · · an.

The problem is that there is a very large num-
ber of rules as in the right parts of (5). This num-
ber is in fact exponential in the length m of the
largest rule from the original grammar G. Casual
inspection of the constraints on the rules in Table 1
reveals however that only the values of s(l)0 , s

(r)
0 ,

y(l), s(l)1 , s
(r)
m , y(r) are ever used in the current rule.

The values of s(l)i for 1 < i ≤ m and the values of

s
(r)
i for 1 ≤ i < m can be safely ignored.

We therefore let the parser manipulate items of
the form J〈A(s(l)0 , s

(r)
0 ) → α

′ •β′〉, [s
(l)
1 , s

(r)
m ], i, jK

where α′β′ = y(l);α; y(r) and A → α is a rule in
G. Each such item can be seen as an abbreviation
of an item for the Earley algorithm for the right
parts in (5), leaving out fields that are not useful.
The values of s(l)0 , s

(r)
0 , y

(l), s(l)1 , s
(r)
m , y(r) are ini-

tially the empty string, and are gradually filled in
as these values become known.

The recognition algorithm is presented as de-
duction system in Table 2. Step (11) is the ini-
tialization step of Earley’s algorithm and Step (12)
straightforwardly corresponds to the predictor
step. Steps (14), (15) and (17) correspond to the
scanner step of Earley’s algorithm. In the side
condition of (17), the constraints on the allowable
combinations of y(l), s(l)1 , s

(r)
m , y(r) are checked,

and s(l)0 and s
(r)
0 are determined on the basis of the

other values.

The steps (13) and (16) have no direct equiv-
alent in Earley’s original algorithm. They are
motivated by the intention to give uniform treat-
ment to context-free rules with and without brack-
ets. Step (18) straightforwardly corresponds to the
completer step of Earley’s algorithm, given the ab-
breviated form of our items, as explained above.
Acceptance is expressed by step (19).

Deduction systems like this have a com-
mon algorithmic interpretation; see for example
McAllester (2002). The time complexity of our
algorithm is O(n3 · |G|2), where |G| is the size of
the input grammar. This can be brought down as
usual to O(n3 · |G|) using techniques from Gra-
ham et al. (1980), which bring the complexity in
line with the best known practical parsing algo-
rithms for context-free grammars. Note that if the
values of s(l)0 , s

(r)
0 , y

(l), s(l)1 , s
(r)
m , y(r) in an item

J〈A(s
(l)
0 , s

(r)
0 ) → α

′ • β′〉, [s
(l)
1 , s

(r)
m ], i, jK, with

α′β′ = y(l);α; y(r), are anything other than ǫ, then
they are uniquely determined by i and j. It is for
this reason that the number of possible labelled
and unlabelled brackets does not contribute an ex-
tra factor to the time complexity.

The recognition algorithm can also be straight-
forwardly extended to compute the most likely
parse or the inside probability, similarly to how
this is done by Jelinek et al. (1992). Note that un-
ambiguity is essential in the latter case. The prob-
abilities manipulated by the parser would then be
based on the probabilities of rules from the orig-
inal grammar, similarly to how this is normally
done in probabilistic parsing algorithms based
on Earley’s algorithm (Stolcke, 1995; Nederhof,
2003).

7 Experiments

We have implemented the construction from Ta-
ble 1 and the parsing algorithm from Table 2. Our
aim was to assess the feasibility in practical terms.
The latter algorithm was based on an implemen-
tation of the standard Earley algorithm, which we
used as a base line. The implementation language
is C++ and the experiments were performed on a
laptop computer with a 2.66 GHz Intel Core 2 Duo
processor.

First, a context-free grammar was extracted
from sections 2-21 of the Penn Treebank, with No-
Transform and NoEmpties as in (Klein and Man-
ning, 2001), and unary rules were collapsed. This
grammar has 84613 rules, 372 nonterminals and
44389 terminals (words). With this grammar, we
parsed the (unbracketed) sentences from section
23 that had length 10 or less. Of these, 92 sen-
tences were outside the language generated by the
grammar and were discarded. Parsing of the re-
maining 178 sentences using the standard Earley
algorithm took 8m27s in total.

Next, we tried to construct a context-free gram-
mar that generates partially bracketed sentences
without spurious ambiguity, as the right-projection
of the construction in Table 1. Predictably, this
was found to be infeasible for any but very small
subsets of our input grammar, because of the expo-
nential behaviour in the length of right-hand sides.

Lastly, the extended Earley algorithm from Ta-
ble 2 was applied on the same 178 sentences, but
now in partially bracketed form. We started with
the fully bracketed sentences, as they appear in

237



Initialize
J〈S(ε, ε) → •;α; 〉, [ε, ε], 0, 0K

{

(S → α) ∈ G (11)

Predict J〈A(ε, ε) → y(l);α •Bβ; 〉, [s
(l)
1 , s

(r)
m ], i, jK

J〈B(ε, ε) → •; γ; 〉, [ε, ε], i, iK

{

(B → γ) ∈ G (12)

No open J〈A(ε, ε) → •;α; 〉, [ε, ε], i, iK

J〈A(ε, ε) → ; •α; 〉, [ε, ε], i, iK
(13)

Open J〈A(ε, ε) → •;α; 〉, [ε, ε], i, iK

J〈A(ε, ε) → y(l); •α; 〉, [ε, ε], i, i + 1K

{

y(l) = ai+1 ∈ {(A, (, [A, [} (14)

Scan J〈A(ε, ε) → y
(l);α • aβ; 〉, [s

(l)
1 , s

(r)
m ], i, jK

J〈A(ε, ε) → y(l);αa • β; 〉, [s
(l)
1 , s

(r)
m ], i, j + 1K

{

a = aj+1 (15)

No close J〈A(ε, ε) → y(l);α•; 〉, [s
(l)
1 , s

(r)
m ], i, jK

J〈A(s
(l)
0 , s

(r)
0 ) → y

(l);α; •〉, [s
(l)
1 , s

(r)
m ], i, jK

{

the constraint in (8) with y(r) = ε

(s
(l)
0 , s

(r)
0 ) defined by (9)

(16)

Close J〈A(ε, ε) → y
(l);α•; 〉, [s

(l)
1 , s

(r)
m ], i, jK

J〈A(s
(l)
0 , s

(r)
0 ) → y

(l);α; y(r)•〉, [s
(l)
1 , s

(r)
m ], i, j + 1K







y(r) = aj+1 ∈ {)A, ), ]A, ]}
the constraint in (8)

(s
(l)
0 , s

(r)
0 ) defined by (9)

(17)

Complete

J〈A(ε, ε) → y(l);α •Bβ; 〉, [s
(l)
1 , s

(r)
m ], i, jK

J〈B(t
(l)
0 , t

(r)
0 ) → z

(l); γ; z(r)•〉, [t
(l)
1 , t

(r)
m′ ], j, kK

J〈A(ε, ε) → y(l);αB • β; 〉, [u
(l)
1 , u

(r)
m ], i, kK























u
(l)
1 =

{

t
(l)
0 if α = ε

s
(l)
1 otherwise

u
(r)
m =

{

t
(r)
0 if β = ε

s
(r)
m otherwise

(18)

Accept J〈S(s
(l)
0 , s

(r)
0 ) → y

(l); γ; y(r)•〉, [s
(l)
1 , s

(r)
m ], 0, nK

accept
(19)

Table 2: Recognition of partially bracketed strings.

238



p time
0.0 25m33s
0.2 68m08s
0.4 51m07s
0.6 34m36s
0.8 21m02s
1.0 11m48s

Table 3: CPU time for recognition of sentences of
length ≤ 10 from section 23 of the Penn Treebank, for
a varying probability p.

the treebank, and then randomly omitted a vary-
ing percentage of brackets and category labels.

This process of ‘fuzzifying’ a fully bracketed
sentence proceeds in stages, with one potential
step turning a bracket pair (A )A into [A ]A. If
this step does not happen, there is another poten-
tial step turning (A )A into ( ). For each labelled
square bracket individually, a step may remove the
label, which is then optionally followed by a step
removing the bracket altogether. The process is
parameterized with a value p, which expresses the
probability that a step of fuzzifying does not hap-
pen. Hence, p = 0 means that all annotation is
removed and p = 1 means that all brackets and
labels are kept.

The results are given in Table 3. The first row of
the table corresponds to the sentences in unanno-
tated form. The running time is higher than the
baseline of the standard Earley algorithm. This
was to be expected, as there are some extra steps in
Table 2, introduced for handling of brackets, and
these steps are performed even if the input con-
tains no brackets at all. Nonetheless, the running
time is of the same order of magnitude.

In the next few rows of the table we see that the
running time increases further. Again, this is to be
expected, as the presence of brackets induces mul-
tiple instances of parsing items where there would
be only one in the unbracketed case. When close
to 100 % of the brackets are maintained, the run-
ning time again decreases. This is because the
brackets reduce ambiguity.

One may object that the parsing of fully brack-
eted sentences should take close to 0 seconds, as
those sentences are already parsed. However, we
have not introduced any further optimizations to
the Earley algorithm apart from those presented in
Table 2, and the predictive nature of the algorithm
leads to many steps creating different partial anal-

yses at an open bracket of which all but one is dis-
carded upon finding the matching close bracket.

The main objective was to investigate to which
extent parsing of partially bracketed structures is
possible, under the constraint that no spurious am-
biguity should arise. Our experiments show that
the running time is of the same order of magnitude
as parsing of unbracketed strings using the stan-
dard Earley algorithm. Further refinements can be
expected to reduce the running time.

For example, we found a straightforward op-
timization that is realized by letting parts of the
check from condition (8) happen as soon as pos-
sible, rather than delaying them until completion
of an item in (16) or (17). In concrete terms, the
compatibility of an open bracket y(l) and the value
of s(l)1 coming from the first member in the right-
hand side can be checked as soon as that first mem-
ber is known. This and other optimizations lead to
a more involved formulation however, and for pre-
sentational reasons we abstain from further discus-
sion.

Further note that the general ideas that led to
Table 2 starting from the construction in Table 1
can as easily be used to derive other parsing al-
gorithms for partially bracketed strings, using any
other parsing strategy such as the bottom-up Ear-
ley algorithm (Sikkel, 1997) and left-corner pars-
ing (Rosenkrantz and Stearns, 1970).

8 Conclusions

This paper has introduced a sound and elegant the-
oretical framework for processing partially brack-
eted strings. That is, an input string may contain
any combination of matched or unmatched and la-
belled or unlabelled brackets.

Our theory, which uses synchronous CFGs, led
us to a procedure based on Earley’s algorithm. Its
effectiveness was shown in experiments using a
practical grammar. Despite having implemented
few optimizations, we found that the time mea-
surements show promising results, and consider-
able speed-ups may be expected by further refine-
ment of the implementation. Use for the purpose
of interactive parse selection therefore seems fea-
sible. Further work will be needed to determine to
which extent linguists benefit from being able to
specify partially bracketed structures.

239



Acknowledgements

This work is partially supported by the Span-
ish MICINN under the MIPRCV Consolider
Ingenio 2010 (CSD2007-00018), MITTRAL
(TIN2009-14633-C03-01), and Prometeo
(PROMETEO/2009/014) research projects,
and the FPU fellowship AP2006-01363.

References

S. Barrachina, O. Bender, F. Casacuberta,
J. Civera, E. Cubel, S. Khadivi, A. Lagarda,
H. Ney, J. Tomás, E. Vidal, and J.-M. Vi-
lar. 2009. Statistical approaches to computer-
assisted translation. Computational Linguistics,
35(1):3–28.

J. Earley. 1970. An efficient context-free pars-
ing algorithm. Communications of the ACM,
13(2):94–102, February.

S.L. Graham, M.A. Harrison, and W.L. Ruzzo.
1980. An improved context-free recognizer.
ACM Transactions on Programming Languages
and Systems, 2:415–462.

F. Jelinek, J.D. Lafferty, and R.L. Mercer. 1992.
Basic methods of probabilistic context free
grammars. In P. Laface and R. De Mori, editors,
Speech Recognition and Understanding — Re-
cent Advances, Trends and Applications, pages
345–360. Springer-Verlag.

D. Klein and C.D. Manning. 2001. Parsing with
treebank grammars: Empirical bounds, theo-
retical models, and the structure of the Penn
treebank. In 39th Annual Meeting and 10th
Conference of the European Chapter of the As-
sociation for Computational Linguistics, Pro-
ceedings of the Conference, pages 338–345,
Toulouse, France, July.

M.P. Marcus, B. Santorini, and M.A.
Marcinkiewicz. 1993. Building a large anno-
tated corpus of English: The Penn treebank.
Computational Linguistics, 19(2):313–330.

D. McAllester. 2002. On the complexity anal-
ysis of static analyses. Journal of the ACM,
49(4):512–537.

M.-J. Nederhof. 2003. Weighted deductive pars-
ing and Knuth’s algorithm. Computational Lin-
guistics, 29(1):135–143.

F. Pereira and Y. Schabes. 1992. Inside-
outside reestimation from partially bracketed
corpora. In 30th Annual Meeting of the As-
sociation for Computational Linguistics, Pro-
ceedings of the Conference, pages 128–135,
Newark, Delaware, USA, June–July.

D.J. Rosenkrantz and R.E. Stearns. 1970. Prop-
erties of deterministic top-down grammars. In-
formation and Control, 17:226–256.

R. Sánchez-Sáez, J.A. Sánchez, and J.M. Benedı́.
2009. Interactive predictive parsing. In Pro-
ceedings of the 11th International Conference
on Parsing Technologies, pages 222–225, Paris,
France, October.

R. Sánchez-Sáez, J.A. Sánchez, and J.M. Benedı́.
2010. Confidence measures for error dis-
crimination in an interactive predictive parsing
framework. In The 23rd International Confer-
ence on Computational Linguistics, Posters Vol-
ume, pages 1220–1228, Beijing, China, August.

G. Satta and E. Peserico. 2005. Some com-
putational complexity results for synchronous
context-free grammars. In Human Language
Technology Conference and Conference on Em-
pirical Methods in Natural Language Process-
ing, pages 803–810.

K. Sikkel. 1997. Parsing Schemata. Springer-
Verlag.

A. Stolcke. 1995. An efficient probabilistic
context-free parsing algorithm that computes
prefix probabilities. Computational Linguistics,
21(2):167–201.

M. Wieling, M.-J. Nederhof, and G. Van Noord.
2005. Parsing partially bracketed input. In
Computational Linguistics in the Netherlands,
pages 1–16.

240


