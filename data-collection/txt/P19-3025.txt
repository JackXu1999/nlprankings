



















































GrapAL: Connecting the Dots in Scientific Literature


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics: System Demonstrations, pages 147–152
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

147

GrapAL: Connecting the Dots in Scientific Literature

Christine Betts♠∗, Joanna Power♥, Waleed Ammar♥
♠Paul G. Allen School of Computer Science & Engineering,

University of Washington, Seattle, WA, USA
♥Allen Institute for Artificial Intelligence, Seattle, WA, USA

chrstn@cs.washington.edu, {joannap,waleeda}@allenai.org

Abstract

We introduce GrapAL (Graph database of
Academic Literature), a versatile tool for
exploring and investigating a knowledge
base of scientific literature that was semi-
automatically constructed using NLP meth-
ods. GrapAL fills many informational needs
expressed by researchers. At the core of Gra-
pAL is a Neo4j graph database with an intu-
itive schema and a simple query language. In
this paper, we describe the basic elements of
GrapAL, how to use it, and several use cases
such as finding experts on a given topic for
peer reviewing, discovering indirect connec-
tions between biomedical entities, and com-
puting citation-based metrics. We open source
the demo code to help other researchers de-
velop applications that build on GrapAL.1

1 Introduction

Researchers rely on scientific literature to perform
a wide variety of tasks such as searching for pa-
pers, assessing applicants for a research position
and keeping track of papers published on topics
of interest. Several software tools are available to
help researchers perform these tasks. For example,
many biomedical researchers use PubMed to find
papers relevant for their studies,2 Google Scholar
allows researchers to verify and curate their user
profiles,3 and Semantic Scholar extracts research
topics, figures, and tables from papers and links
them to external content such as slides, videos and
GitHub repositories.4 However, such tools tend to
only feature the most commonly used functionali-
ties in order to keep the interface simple for users,

*Work done while at the Allen Institute for Artificial In-
telligence.

1https://github.com/allenai/
grapal-website

2https://www.ncbi.nlm.nih.gov/pubmed/
3https://scholar.google.com/
4https://www.semanticscholar.org/

ignoring the long tail of informational needs such
as finding experts on a given topic, identifying po-
tential collaborators, assessing influence between
research areas, and discovering connections be-
tween biological entities.

In this paper, we address these limitations
by introducing a tool that provides a flexible
and efficient way to query the Semantic Scholar
knowledge base, a semi-automatically constructed
knowledge base of scientific literature (Ammar
et al., 2018). In addition to bridging the gap
between available tools and informational needs
of researchers, GrapAL demonstrates how semi-
automatically constructed knowledge bases can be
effectively used to solve real-world problems.

GrapAL is publicly available at grapal.
allenai.org, along with documentation.5 In
the following section (§2), we introduce the
schema and query language used in GrapAL and
discuss how users can connect to the database. In
§3, we show how GrapAL can be used to satisfy
several compelling case studies. In §4, we discuss
some of the design choices and the system archi-
tecture for GrapAL.

2 How to Use GrapAL

GrapAL is designed to satisfy many use cases re-
quested by Semantic Scholar users who need to
process scientific literature. To achieve this, we
design GrapAL as a Neo4j property graph with
an intuitive schema, making it queryable with the
Cypher query language (Francis et al., 2018).

Schema. Fig. 1 demonstrates the schema of our
graph database, which consists of 7 node types
(displayed in turquoise) and 8 edge types (dis-
played in purple). The properties associated with

5A screencast of the tool is available at https:
//www.youtube.com/watch?v=1ivX9sHw2RU&
feature=youtu.be

https://github.com/allenai/grapal-website
https://github.com/allenai/grapal-website
https://www.ncbi.nlm.nih.gov/pubmed/
https://scholar.google.com/
https://www.semanticscholar.org/
grapal.allenai.org
grapal.allenai.org
https://www.youtube.com/watch?v=1ivX9sHw2RU&feature=youtu.be
https://www.youtube.com/watch?v=1ivX9sHw2RU&feature=youtu.be
https://www.youtube.com/watch?v=1ivX9sHw2RU&feature=youtu.be


148

Figure 1: Overview of GrapAL schema. *denotes indexed property.

Node Type Count
Affiliation* 16M
Author 17M
Entity 493K
Paper 46M
Relation 51
RelationInstance 347K
Venue* 78K

Edge Type Count
AFFILIATED WITH 119M
APPEARS IN 67M
AUTHORS 148M
CITES 693M
MENTIONS 400M
MENTIONS RELATION 73M
WITH ENTITY 1M
WITH RELATIONSHIP 350K

Table 1: Approximate node and edge cardinalities. (*)
indicates node types that are not canonicalized.

each node and edge type are listed. In order to
avoid violating intellectual property of publishers,
we do not include some information about papers
such as the abstract and full text.

At the core of the graph is the Paper node.
Paper nodes may connect to Venue nodes,
Author nodes, Affiliation nodes, Entity
nodes, RelationInstance nodes or other
Paper nodes via APPEARS IN edges, AUTHORS
edges, AFFILIATED WITH edges, MENTIONS
edges, MENTIONS RELATION edges and CITES
edges, respectively. A RelationInstance
node, e.g., CAUSES[SMOKING,CANCER], repre-
sents an n-ary relationship of type Relation
(via a WITH RELATIONSHIP edge) between
two or more Entity nodes (via WITH ENTITY
edges). Details on how we extract entities and var-
ious metadata for each paper can be found in Am-
mar et al. (2018). The only schema changes intro-
duced in this work are including Affiliation
and Venue nodes (and corresponding edge types),
and optimizing for query execution time. Table 1
provides the number of instances of each node and
edge type in the schema at the time of this writing.

Query Language. Before we discuss realistic
case studies in §3, we introduce the query lan-

guage used in GrapAL with a few toy examples:
First, consider the following query that matches

arbitrary author nodes in GrapAL and returns the
first 10:

// Find arbitrary authors.
MATCH (a:Author) RETURN a LIMIT 10

More often than not, we only want to match
nodes with some desired properties. In the next
example, we only match authors with first name
‘Clarence’ and last name ‘Ellis’. Note the round
brackets used to specify an instance of node type
Author, and the curly brackets used to specify its
properties.

// Find authors by name.
MATCH (a:Author {last: "Ellis", first:

"Clarence"})↪→
RETURN a

Alternatively, we could use a WHERE clause to
specify the desired properties of matched nodes,
as demonstrated in the following example that
matches papers by their title. This example also
shows how to match nodes by specifying their re-
lation to another node, e.g., authors of a paper.
Note the use of square brackets to specify edges
and the arrow to specify edge direction.

// Find authors of a specific paper.
MATCH (a:Author)-[:AUTHORS]->(p:Paper)
WHERE p.title = "One-shot learning of

object categories"↪→
RETURN a

More information about the Cypher query lan-
guage can be found in Francis et al. (2018).

Connecting to GrapAL. Users can query
GrapAL in a variety of methods. First, an
interactive graphical interface is available



149

at https://grapal.allenai.org:
7473/browser/ that is suitable for interac-
tive exploration of GrapAL with a relatively
small number of results. We demonstrate how
the interactive interface could be used in a
screencast.6

Users can also build web applications that lever-
age GrapAL through the Neo4j HTTP endpoint.7

As an example, we have developed a simple
web-based application at https://grapal.
allenai.org/app that can be used to load any
of the case studies described in the next section.8

Users can also type in arbitrary queries, share the
queries with collaborators, and download the re-
sults in JSON format.

Users can also query the graph natively in their
favourite programming language using one of the
Neo4j language drivers. Neo4j officially supports
five languages: .NET, Java, Javascript, Go and
Python, but additional drivers are available.9 We
provide an example of using the Python driver
to compute disruption scores as described in Wu
et al. (2019).10

DOI and ArXivId Compatibility. Users can
switch between Digital Object Identifiers (DOIs)
or arXiv identifiers (ArXivId) and paper IDs with
the Semantic Scholar API11. For example, we can
look up the paper node corresponding to the DOI
10.1038/nrn3241 by first executing the HTTP
query https://api.semanticscholar.
org/v1/paper/10.1038/nrn3241
that returns a JSON object with paper ID
931d6b6ee097eab80b8f89a313c8d3a6d
5443cb2. Then, we execute the Cypher query:

// Look up paper by ID.
MATCH (p:Paper {paper_id:

"931d6b6ee097eab80b8f89a313c8d3
a6d5443cb2"})

↪→
↪→
RETURN p

In the future, we plan to add DOI properties and
ArXivId properties to the knowledge base.

6https://www.youtube.com/watch?v=
1ivX9sHw2RU&feature=youtu.be

7Documentation for the API is available at https://
neo4j.com/docs/http-api/3.5/

8For example, the following URL will load the short-
est path example: https://grapal.allenai.org/
app/?example=shortest-path

9See https://neo4j.com/developer/
language-guides/ for the complete list of Neo4j
language drivers.

10https://gist.github.com/chrstnb/
088f7699930ad53e757906f4d3d6c1f5

11http://api.semanticscholar.org/

Figure 2: Shortest path between Swabha Swayamdipta
and Regina Barzilay.

3 Case Studies

We interviewed computer science and biomedical
researchers to better understand the kinds of ques-
tions they would like to answer from a knowledge
base of scientific literature. In this section, we fo-
cus on some of the more compelling use cases that
were identified in the interviews, and provide ex-
ample queries to address them in GrapAL.

For each example we give a link to load the
query in the query loader and the full text of the
query. From the query loader, users can view or
save the results of a query and also copy it to be
pasted into the Neo4j browser, where users can
view interactive visualizations of the query results.

Shortest Path. Consider a researcher a seek-
ing an introduction or an endorsement to work
with another researcher b. By finding the short-
est path between the two researchers in Gra-
pAL, researcher a can identify common collabo-
rators connecting the two. The following query,
for instance, matches a path connecting Swabha
Swayamdipta and Regina Barzilay using author-
ship edges only, and returns a path that connects
them via Luke Zettlemoyer who co-authored pa-
pers with both researchers (see Fig. 2).12

// Find shortest path between two
researchers by name.↪→

MATCH p=shortestPath((a:Author)-
[:AUTHORS*0..6]-(b:Author))

WHERE a.first = "Swabha"
AND a.last = "Swayamdipta"
AND b.first = "Regina"
AND b.last = "Barzilay"

RETURN p

In this example, we constrain the number and
type of edges in the graph to a maximum of six
AUTHORS edges. For authors with an ambiguous
name, it may be necessary to specify the author by

12This query can be loaded and modified at
https://grapal.allenai.org/app/?example=
shortest-path

https://grapal.allenai.org:7473/browser/
https://grapal.allenai.org:7473/browser/
https://grapal.allenai.org/app
https://grapal.allenai.org/app
https://api.semanticscholar.org/v1/paper/10.1038/nrn3241
https://api.semanticscholar.org/v1/paper/10.1038/nrn3241
https://www.youtube.com/watch?v=1ivX9sHw2RU&feature=youtu.be
https://www.youtube.com/watch?v=1ivX9sHw2RU&feature=youtu.be
https://neo4j.com/docs/http-api/3.5/
https://neo4j.com/docs/http-api/3.5/
https://grapal.allenai.org/app/?example=shortest-path
https://grapal.allenai.org/app/?example=shortest-path
https://neo4j.com/developer/language-guides/
https://neo4j.com/developer/language-guides/
https://gist.github.com/chrstnb/088f7699930ad53e757906f4d3d6c1f5
https://gist.github.com/chrstnb/088f7699930ad53e757906f4d3d6c1f5
http://api.semanticscholar.org/
https://grapal.allenai.org/app/?example=shortest-path
https://grapal.allenai.org/app/?example=shortest-path


150

their ID, which can be found by inspecting their
author page URL on Semantic Scholar:13

// Find shortest path between two
researchers, one by author ID.↪→

MATCH p=shortestPath((a:Author)-
[:AUTHORS*0..6]-(b:Author))

WHERE a.author_id = 2705113
AND b.first = "Regina"
AND b.last = "Barzilay"

RETURN p

Similar queries can be used to find colleagues who
published at a given venue, or currently work at a
given university or research lab.

Finding Experts. One of the pain points in orga-
nizing a conference is identifying reviewers who
are knowledgeable about the research topics dis-
cussed in submitted papers. By querying GrapAL,
members of the organizing committee will be able
to find more competent reviewers, while relying
less on their (often biased) professional network
when deciding whom to invite for peer reviewing.
For example, the following query can be used to
find researchers who published the most on “Rela-
tionship extraction” since 2013.14

// Find authors who published the most
on relation extraction since 2013.↪→

MATCH (a:Author)-[:AUTHORS]->(p:Paper),
(p)-[:MENTIONS]->
(:Entity {name: "Relationship

extraction"})
WHERE p.year > 2013
WITH a, count(p) as cp
RETURN a, cp
ORDER BY cp DESC

Here, we use ORDER BY cp DESC to sort the
authors by the number of papers they published on
this topic. In order to find the node that represents
a topic of interest in GrapAL, users could use the
search feature on semantic scholar and inspect the
relevant topic page URL for the entity ID, or use
regular expressions to query GrapAL, e.g.,15

// Fuzzy matching of entity names.
MATCH (e:Entity)
WHERE e.name =˜ "(?i)relationship

extraction"
RETURN e

13E.g., Swabha Swayamdipta’s author page URL is
https://www.semanticscholar.org/author/
Swabha-Swayamdipta/2705113

14This query can be loaded and modified at https://
grapal.allenai.org/app/?example=experts

15This query can be loaded and modified at
https://grapal.allenai.org/app/?example=
canonical-entity

Figure 3: Ten papers that mention both ‘Natural lan-
guage processing’ and ‘Constraint programming.’.

Papers at the Intersection of Entities. Search
engine results sometimes make it difficult to find
papers that discuss multiple topics or fields. With
GrapAL, we can return papers that discuss any
number of entities of interest, e.g., ”Constraint
programming” and ”Natural language process-
ing”. Fig. 3 shows a visualization of the results
on the Neo4j browser, limited to 10 papers.16

// Find papers which mention both
constraint programming and natural
language processing.

↪→
↪→
MATCH (p:Paper)-[:MENTIONS]->

(e1:Entity {name: "Constraint
programming"}),

(p:Paper)-[:MENTIONS]->
(e2:Entity {name: "Natural language

processing"})
RETURN p

Connecting Scientific Concepts. Some re-
searchers wanted to explore direct and indirect
connections between two scientific concepts (en-
tities) of interest, e.g., the impact of ‘adjuvant
antiestrogen therapy (Arimidex)’ on ‘estrogen re-
ceptors’. Using GrapAL, we can find how two
entities are indirectly connected via coded rela-
tionships and a chain of entities in the knowledge
base, which can help generate new hypotheses or
quickly assess the viability of a hypothesis before
conducting expensive lab experiments.17

16This query can be loaded and modified at
https://grapal.allenai.org/app/?example=
intersecting-entities

17This query can be loaded and modified at
https://grapal.allenai.org/app/?example=
scientific-concepts

https://www.semanticscholar.org/author/Swabha-Swayamdipta/2705113
https://www.semanticscholar.org/author/Swabha-Swayamdipta/2705113
https://grapal.allenai.org/app/?example=experts
https://grapal.allenai.org/app/?example=experts
https://grapal.allenai.org/app/?example=canonical-entity
https://grapal.allenai.org/app/?example=canonical-entity
https://grapal.allenai.org/app/?example=intersecting-entities
https://grapal.allenai.org/app/?example=intersecting-entities
https://grapal.allenai.org/app/?example=scientific-concepts
https://grapal.allenai.org/app/?example=scientific-concepts


151

// Find path between Estrogen Receptors
and Arimidex via coded
relationships.

↪→
↪→
MATCH path=shortestPath(

(er:Entity {name: "Estrogen
Receptors"})-

[:WITH_ENTITY*0..15]-
(ar:Entity {name: "Arimidex"}))

WITH nodes(path) as ns
UNWIND ns as n
MATCH (n)-[:WITH_ENTITY {position: 0}]->

(e0:Entity),
(n)-[:WITH_ENTITY {position: 1}]->

(e1:Entity),
(n)-[:WITH_RELATIONSHIP]->

(r:Relation)
RETURN e0, r, e1

This query returns a list of triples (e0, r, e1) that
connect ‘Arimidex’ to ‘Estrogen Receptors’. The
UNWIND operator allows us to examine each node
on the shortest path and process it as needed.

Citation-Based Metrics. Citations are often
used as a proxy for the impact of papers, re-
searchers or venues. In addition to computing
traditional metrics such as h-index and i10-index,
GrapAL can also be used to compute more granu-
lar metrics, e.g., to estimate the rate at which pa-
pers in one conference cite papers in another con-
ference:18

// Find the number of times a NAACL
paper cites a CVPR paper.↪→

MATCH (p1:Paper)-[:APPEARS_IN]->
(naacl:Venue),

(p2:Paper)-[:APPEARS_IN]->(cvpr:Venue),
path=((p1)-[:CITES]->(p2))
WHERE naacl.text =˜ ".*NAACL.*"
AND cvpr.text =˜ ".*CVPR.*"
RETURN count(path)

This query returns the number of times a NAACL
paper cites a CVPR paper. We use the =˜ operator
to match on venue names by regular expression
because venues are stored as unstructured strings.

4 System Design

Graph Database. Due to the high connectivity
in the data and the nature of queries GrapAL is
designed for, we opted to create GrapAL using
a graph-native database instead of a more con-
ventional relational database. Unlike a relational
database, a graph database provides a natural and
efficient way to query and traverse multi-hop re-
lations without using computationally expensive
join operations. Several graph database systems

18This query can be loaded and modified at
https://grapal.allenai.org/app/?example=
citation-metrics

have recently become available, including AWS
Neptune, Grakn.ai, dgraph and Neo4j. We de-
cided to build GrapAL on Neo4j since it is one
of the more mature platforms, has a strong com-
munity of developers, and is the most widely used
graph database system as of the time of this writ-
ing.19 One limitation of Neo4j is that it is not a
distributed database system, but we were able to
fit GrapAL on a single server.

Building and Deploying GrapAL. GrapAL
is powered by the same data that powers the
semanticscholar.orgwebsite, as described
in Ammar et al. (2018). We use a staging server to
read a snapshot of the data as Spark DataFrames
from AWS S3 and write CSV files that match
the property schema described earlier. Due to
the sheer amount of records, we process different
shards of the data in parallel before aggregating all
shards into one CSV file for each node and edge
type of the schema. Then, we use the Neo4j CSV
import function to build the database. Once we’ve
built the database, we start up a Neo4j server and
run a Cypher script to create indexes. The stag-
ing server is an EC2 machine with instance type
r5.24xlarge. This process takes around 6
hours and the resulting database is roughly 80 GB
(including indexes).

Once the data is imported, the database files
are copied over to a production server that serves
the dataset publicly and has lower processor and
memory requirements compared to the staging
server. The staging server is an EC2 machine with
instance type r4.16xlarge. We plan to rebuild
GrapAL at a monthly cadence with new snapshots
of the data.

5 Related Work

Related APIs are available to help researchers nav-
igate scientific literature. Singh et al. (2018) pro-
vides an API to interact with the ACL anthology.
However, it is limited to the areas of computa-
tional linguistics and natural langauge processing,
and it uses a predefined list of query templates
with placeholders for authors, papers and venues.
Springer Nature SciGraph 20 provides an API for
accessing publication metadata from the Springer
Nature corpus, but it is limited to papers and books

19https://db-engines.com/en/ranking/
graph+dbms

20https://scigraph.springernature.com/
explorer

https://grapal.allenai.org/app/?example=citation-metrics
https://grapal.allenai.org/app/?example=citation-metrics
semanticscholar.org
https://db-engines.com/en/ranking/graph+dbms
https://db-engines.com/en/ranking/graph+dbms
https://scigraph.springernature.com/explorer
https://scigraph.springernature.com/explorer


152

published by Springer Nature. The Microsoft Aca-
demic Graph (Shen et al., 2018) is similarly an
API for examining academic literature. As a re-
lational database, it is hard to query with complex,
multi-hop relations as discussed in §4. This work
is also related to a line of NLP work focusing on
scientific documents including citation prediction
(e.g., Yogatama et al., 2011; Bhagavatula et al.,
2018), author modeling (e.g., Sim et al., 2015),
stylometry (e.g., Bergsma et al., 2012), bibliomet-
rics (e.g., Foulds and Smyth, 2013; Weihs and Et-
zioni, 2017) and information extraction (e.g., Ker-
gosien et al., 2018; Andruszkiewicz and Hazan,
2018).

6 Conclusion

GrapAL is a versatile tool for exploring and in-
vestigating scientific literature built on the Neo4j
graph database framework. We describe the ba-
sic elements of GrapAL, how to use it, and use
cases such as finding experts on a given topic
for peer reviewing, discovering indirect connec-
tions between biomedical entities, and computing
citation-based metrics.

Future improvements include more metadata
and changes to the structure of affiliation and
venue data. We intend to change the data pipeline
architecture to perform event-based incremental
updates rather than a regular batch build. We con-
tinue to improve the models used to populate Gra-
pAL’s nodes and edges (e.g., author disambigua-
tion and entity extraction and linking).

Acknowledgments

We thank Khaled Ammar for his graph database
suggestions, Michal Guerquin for his help in
designing and building the pipeline, and Darrell
Plessas for his technical assistance. We also thank
Noah Smith and the Semantic Scholar team for
their support.

References
Waleed Ammar, Dirk Groeneveld, Chandra Bhagavat-

ula, Iz Beltagy, Miles Crawford, Doug Downey, Ja-
son Dunkelberger, Ahmed Elgohary, Sergey Feld-
man, Vu Ha, Rodney Kinney, Sebastian Kohlmeier,
Kyle Lo, Tyler Murray, Hsu-Han Ooi, Matthew E.
Peters, Joanna Power, Sam Skjonsberg, Lucy Lu
Wang, Chris Wilhelm, Zheng Yuan, Madeleine van
Zuylen, and Oren Etzioni. 2018. Construction of

the literature graph in semantic scholar. In Proc. of
NAACL.

Piotr Andruszkiewicz and Rafal Hazan. 2018. Anno-
tated corpus of scientific conference’s homepages
for information extraction. In Proc. of LREC.

Shane Bergsma, Matt Post, and David Yarowsky. 2012.
Stylometric analysis of scientific articles. In Proc. of
NAACL.

Chandra Bhagavatula, Sergey Feldman, Russell Power,
and Waleed Ammar. 2018. Content-based citation
recommendation. In Proc. of NAACL.

James Foulds and Padhraic Smyth. 2013. Modeling
scientific impact with topical influence regression.
In Proc. of EMNLP.

Nadime Francis, Alastair Green, Paolo Guagliardo,
Leonid Libkin, Tobias Lindaaker, Victor Marsault,
Stefan Plantikow, Mats Rydberg, Petra Selmer, and
Andrés Taylor. 2018. Cypher: An evolving query
language for property graphs. In Proc. of SIGMOD.

Eric Kergosien, Amin Farvardin, Maguelonne Teis-
seire, Marie-Noëlle Bessagnet, Joachim Schöpfel,
Stéphane Chaudiron, Bernard Jacquemin, Annig La-
cayrelle, Mathieu Roche, Christian Sallaberry, and
Jean-Philippe Tonneau. 2018. Automatic identifica-
tion of research fields in scientific papers. In Proc.
of LREC.

Zhihong Shen, Hao Ma, and Kuansan Wang. 2018.
A web-scale system for scientific knowledge explo-
ration. In Proc. of ACL.

Yanchuan Sim, Bryan Routledge, and Noah A. Smith.
2015. A utility model of authors in the scientific
community. In Proc. of EMNLP.

Mayank Singh, Pradeep Dogga, Sohan Patro, Dhi-
raj Barnwal, Ritam Dutt, Rajarshi Haldar, Pawan
Goyal, and Animesh Mukherjee. 2018. Cl scholar:
The acl anthology knowledge graph miner. In Proc.
of NAACL.

Luca Weihs and Oren Etzioni. 2017. Learning to pre-
dict citation-based impact measures. In Proc. of
ACM/IEEE Joint Conference on Digital Libraries,
pages 49–58. IEEE Press.

Lingfei Wu, Dashun Wang, and James A. Evans. 2019.
Large teams develop and small teams disrupt science
and technology. Nature, 566:378–382.

Dani Yogatama, Michael Heilman, Brendan O’Connor,
Chris Dyer, Bryan R. Routledge, and Noah A.
Smith. 2011. Predicting a scientific community’s re-
sponse to an article. In Proc. of EMNLP.

http://aclweb.org/anthology/L18-1587
http://aclweb.org/anthology/L18-1587
http://aclweb.org/anthology/L18-1587
http://aclweb.org/anthology/N12-1033
http://aclweb.org/anthology/D13-1012
http://aclweb.org/anthology/D13-1012
http://aclweb.org/anthology/L18-1299
http://aclweb.org/anthology/L18-1299
http://aclweb.org/anthology/D15-1175
http://aclweb.org/anthology/D15-1175
http://aclweb.org/anthology/D11-1055
http://aclweb.org/anthology/D11-1055

