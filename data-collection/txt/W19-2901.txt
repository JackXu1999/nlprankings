



















































The Active-Filler Strategy in a Move-Eager Left-Corner Minimalist Grammar Parser


Proceedings of the Workshop on Cognitive Modeling and Computational Linguistics, pages 1–10
Minneapolis, USA, June 7, 2019. c©2019 Association for Computational Linguistics

1

The Active-Filler Strategy in a Move-Eager Left-Corner
Minimalist Grammar Parser

Tim Hunter
Department of Linguistics

UCLA
timhunter@ucla.edu

Miloš Stanojević
School of Informatics

University of Edinburgh
m.stanojevic@ed.ac.uk

Edward P. Stabler
Samung Research America

California, USA
stabler@ucla.edu

Abstract

Recent psycholinguistic evidence suggests
that human parsing of moved elements is
‘active’, and perhaps even ‘hyper-active’: it
seems that a leftward-moved object is related
to a verbal position rapidly, perhaps even
before the transitivity information associated
with the verb is available to the listener. This
paper presents a formal, sound and complete
parser for Minimalist Grammars whose search
space contains branching points that we can
identify as the locus of the decision to perform
this kind of active gap-finding. This brings
formal models of parsing into closer contact
with recent psycholinguistic theorizing than
was previously possible.

1 Introduction

Minimalist Grammars (MGs) (Stabler, 1997,
2011) provide an explicit formulation of the cen-
tral ideas of contemporary transformational gram-
mar, deriving from Chomsky (1995). They have
allowed formal insights into syntactic theory it-
self (Kobele, 2010; Kobele and Michaelis, 2011;
Hunter, 2011; Graf, 2013), and there has been
some work using MGs as the basis for psycholin-
guistic modeling. But this psycholinguistic work
has focused primarily on sentence-processing at
a relatively high level of abstraction, considering
various measures of the workload imposed by dif-
ferent kinds of sentences — either information-
theoretic metrics (Hale, 2003, 2006; Yun et al.,
2015), or metrics based on memory load (Kobele
et al., 2012; Graf and Marcinek, 2014; Brennan
et al., 2016) — rather than the algorithmic-level
questions of how derivations are pieced together
incrementally.

A significant amount of experimental sentence-
processing work aims to investigate exactly these
kinds of algorithmic-level questions as they apply

to long-distance syntactic dependencies, for ex-
ample filler-gap dependencies between a moved
wh-phrase and its base position. This is the kind
of syntactic construction that MGs are particu-
larly well-placed to describe (in contrast to simpler
formalisms such as context-free grammars where
parsing is well-studied), but it has been difficult
to connect the experimental psycholinguistic work
with any incremental, algorithmic-level MG pars-
ing algorithms. Most parsing strategies proposed
by psycholinguists have not been easy to relate to
formal models of parsing.

2 Motivation and Background

A significant problem that confronts the human
sentence-processor is the treatment of filler-gap
dependencies. These are dependencies between a
pronounced element, the filler, and a position in
the sentence that is not indicated in any direct way
by the pronunciation, the gap. A canonical ex-
ample is the kind of dependency created by wh-
movement, for example the one shown in (1).

(1) What did John buy yesterday?

The interesting puzzle posed by such dependen-
cies is that a parser, of course, does not get to “see”
the gap: it must somehow determine that there is
a gap in the position indicated in (1) on the basis
of the properties of the surrounding words, for ex-
ample the fact that ‘what’ must be associated with
a corresponding gap, the fact that ‘buy’ takes a di-
rect object, etc.

Experimental psycholinguistic work has uncov-
ered a number of robust generalizations about how
the human parsing system decides where to posit
gap sites in amongst the pronounced elements as it
works through a sentence incrementally. One con-
ceivable strategy would be to posit gaps “only as
a last resort, when all other structural hypotheses
about that part of the sentence have been tried and



2

have failed” (Fodor, 1978, p.433). But the strategy
that comprehenders actually employ is essentially
to treat gaps as a “first resort”, or what has be-
come known as the “active filler” or “active gap-
finding” strategy: hypothesize that there is a gap
in any position where there might be one, and re-
tract this hypothesis if subsequent input provides
bottom-up evidence disconfirming it (Fodor, 1978;
Stowe, 1986; Frazier and Clifton, 1989). Specif-
ically, there is reason to believe that the depen-
dency in (1) is constructed before the parser en-
counters ‘yesterday’. A primary piece of evidence
for this is the so-called “filled-gap effect”: in a
sentence like (2), we observe a reading slowdown
at ‘books’ (Stowe, 1986).

(2) What did John buy books about yester-
day?

This slowdown is what one might expect if a de-
pendency between ‘what’ and the object-position
of ‘buy’ is constructed — actively, as a first re-
sort — before the comprehender reads past ‘buy’,
and then has to be retracted when ‘books’ is read.
(What was hypothesized to be a gap position is in
fact filled, hence “filled-gap effect”.)

This basic generalization prompts a number of
questions about the details of when and how this
sort of hypothesizing of a gap takes place: in
particular, one can ask what counts as a posi-
tion where there “might be” a gap, and how this
strategy interacts with the intricate grammatical
constraints upon the relevant long-distance depen-
dencies. See for example Traxler and Pickering
(1996), Phillips (2006), Staub (2007), Wagers and
Phillips (2009), and Omaki et al. (2015), among
many others, for investigations of these issues.

At present it is difficult for the generaliza-
tions emerging from this experimental work to be
framed in terms of the workings of a parser for
contemporary transformational grammars. Con-
sider for comparison the earlier empirical work
on attachment preferences and garden path the-
ory (e.g. Frazier and Clifton, 1996): since the fo-
cus was on grammatical relationships that were lo-
cal in phrase-structural terms, the strategies being
discovered could be understood as strategies for
searching through the hypothesis space induced by
the operations of a context-free parser. For exam-
ple, the garden-path effect in (3) can be interpreted
as evidence that given the locally ambiguous pre-
fix ‘When Fido scratched the vet’, readers pursue
the analysis in (4a) rather than the one in (4b).

This is an instance of the Late Closure preference.

(3) When Fido scratched the vet (and his new as-
sistant) removed the muzzle.

(4) a. When [S Fido scratched the vet] [S . . . ]
b. When [S Fido scratched] [S the vet . . . ]

Another way to put this is to say that after the word
‘scratched’, a bottom-up parser has the choice be-
tween performing a reduce step (to analyze this
verb as a complete, intransitive VP) or perform-
ing a shift step (supposing that other remaining in-
put will also be part of the VP), and it prefers the
latter. See Figure 1, where the initial empty se-
quence of stack elements is indicated by �. If we
suppose that the parser first explores the branch
of the search space shown on the left in Figure 1,
corresponding to the structure in (4a), then the dis-
ruption observed at the word ‘removed’ in (3) can
be linked to the idea that this word triggers back-
tracking to the branching point shown in the dia-
gram, so that the alternative intransitive-verb anal-
ysis in (4b) can be constructed by following the
other branch.

In principle, it should be possible to give an
analogous description of the active filler strategy
for positing gaps: we can imagine a description
of the parser’s search space that allows us to state
preferences for one kind of transition (the kind that
interrupts “local processing” and posits a gap as-
sociated with an earlier filler) over another (the
kind that continues working with local material).
This is difficult at present, however, because there
are relatively few formal models of parsing that
treat both long-distance dependencies and local
dependencies in a cohesive, integrated manner.
Aside from this technical hurdle, however, the ac-
tive filler strategy can be regarded as having the
same form as the Late Closure preference: just as
humans’ first guess given the prefix ‘When Fido
scratched the vet’ is (4a) rather than (4b), their first
guess given the prefix ‘What did John buy’ is (5a)
rather than (5b).

(5) a. What did John buy . . .
b. What did John buy . . .

3 Minimalist Grammars

A Minimalist Grammar (Stabler, 1997,
2011) is defined with a tuple G =
〈Σ, B, Lex,C, {MERGE,MOVE}〉, where Σ is
the vocabulary, B is a set of basic features, Lex



3

S

S

VP

. . .

NP

N

vet

D

the

S

VP

V

scratched

NP

Fido

WHEN

when
1 2 3 40 5

�

(WHEN,(0,1))

(WHEN,(0,1)), (NP,(1,2))

(WHEN,(0,1)), (NP,(1,2)), (V,(2,3))

(WHEN,(0,1)), (NP,(1,2)), (VP,(2,3))

(WHEN,(0,1)), (S,(1,3))

(WHEN,(0,1)), (S,(1,3)), (D,(3,4))

(WHEN,(0,1)), (S,(1,3)), (D,(3,4)), (N,(4,5))

(WHEN,(0,1)), (S,(1,3)), (NP,(3,5))

reduce

shift ‘vet’

shift ‘the’

reduce

(WHEN,(0,1)), (NP,(1,2)), (V,(2,3)), (D,(3,4))

(WHEN,(0,1)), (NP,(1,2)), (V,(2,3)), (D,(3,4)), (N,(4,5))

(WHEN,(0,1)), (NP,(1,2)), (V,(2,3)), (NP,(3,5))

(WHEN,(0,1)), (NP,(1,2)), (VP,(2,5))

(WHEN,(0,1)), (S,(1,5))

reduce

reduce

reduce

shift ‘vet’

shift ‘the’ reduce

Figure 1: Part of the search space for the locally-ambiguous prefix ‘0 When 1 Fido 2 scratched 3 the 4 vet 5’ in a
bottom-up shift-reduce parser. The left branch is the route favoured by Late Closure (Frazier and Clifton, 1996).
The garden-path effect in (3) can be seen as a consequence of the reanalysis required when a parser searches this
left branch first.

is a finite lexicon (as defined just below), C ∈ B
is the start category, and MERGE and MOVE are
the generating functions. The basic features of the
set B are concatenated with prefix operators to
specify their roles, as follows:

categories, selectees = B
selectors = {=f | f ∈ B}
licensees = {-f | f ∈ B}
licensors = {+f | f ∈ B}

Let F be the set of role-marked features, that is,
the union of the categories, selectors, licensors
and licensees. Let T = {::, :} be two types,
indicating “lexical” and “derived” structures,
respectively. Let C = Σ∗ × T × F ∗ be the
set of chains. Let E = C+ be the set of ex-
pressions; intuitively, an expression is a chain
together with its “moving” sub-chains, if any.
Finally, the lexicon Lex ⊂ Σ∗ × {::} × F ∗ is a
finite set. The functions MERGE and MOVE are
defined in Table 1. Note that each MERGE rule
deletes a selection feature =f and a corresponding
category feature f , so the result on the left side
of each rule has two features less than the total
number of features on the right. Similarly, each

MOVE rule deletes a licensor feature +f and a
licensee feature -f . The rules (understood as
functions from right-to-left, or “bottom-up”) have
pairwise disjoint domains; that is, an instance
of a right side of a rule is not an instance of
the right side of any other rule. The set of all
structures that can be derived from the lexicon
is S(G) = closure(Lex, {MERGE,MOVE}).
The set of sentences L(G) = {s | s · C ∈
S(G) for some type · ∈ {:, ::}}, where C is the
“start” category.

Two simple derivations are shown in Figures 2
and 3. These trees have elements of the grammar’s
lexicon (not shown separately) at their leaves. At
each binary-branching node we write the structure
that results from applying MERGE to the struc-
tures at the daughter nodes; and at each unary-
branching node we write the structure that results
from applying MOVE to the structure at the daugh-
ter node.

The lowest MERGE step shown in Figure 2, for
example, combines (via MERGE3, specifically) the
lexical items for ‘buy’ and ‘what’; the d category
feature on ‘what’ can satisfy the first of the =d se-



4

merge is the union of the following 3 rules, each with 2 elements on the right,
for strings s, t ∈ Σ∗, for types · ∈ {:, ::} (lexical and derived, respectively),
for feature sequences γ ∈ F ∗, δ ∈ F+, and for chains α1, . . . , αk, ι1, . . . , ιl (0 ≤ k, l)

(MERGE1) lexical item s selects non-mover t to produce the merged st
st : γ, α1, . . . , αk → s :: =fγ t · f, α1, . . . , αk

(MERGE2) derived item s selects a non-mover t to produce the merged ts
ts : γ, α1, . . . , αk, ι1, . . . , ιl → s : =fγ, α1, . . . , αk t · f, ι1, . . . , ιl

(MERGE3) any item s selects a mover t to produce the merged s with chain t
s : γ, α1, . . . , αk, t : δ, ι1, . . . , ιl → s · =fγ, α1, . . . , αk t · fδ, ι1, . . . , ιl

move is the union of the following 2 rules, each with 1 element on the right,
for δ ∈ F+, such that none of the chains α1, . . . , αi−1, αi+1, . . . , αk has -f as its first feature:

(MOVE1) final move of t, so its -f chain is eliminated on the left
ts : γ, α1, . . . , αi−1, αi+1, . . . , αk → s : +fγ, α1, . . . , αi−1, t : -f, αi+1, . . . , αk

(MOVE2) nonfinal move of t, so its chain continues with features δ
s : γ, α1, . . . , αi−1, t : δ, αi+1, . . . , αk → s : +fγ, α1, . . . , αi−1, t : -fδ, αi+1, . . . , αk

Table 1: Rules for minimalist grammars from Stabler 2011, §A.1.

lectors on ‘buy’, and these two features are deleted
in the resulting structure. This resulting struc-
ture, like the two above it, consists of two chains:
as well as the chain1 that participates “as usual”
in the structure-building steps of combining with
the subject and silent complementizer, there is the
chain ‘what : -wh’ representing the wh-element
that is “in transit” throughout these steps of the
derivation. Given this separation of a structure
into its component chains, movement amounts to
bringing together two chains. The (formally re-
dundant) dashed line in the figure links the MOVE
step at the root of the derivation to the structure
that gave rise to the ‘what’ chain that this MOVE
step acts on. The last two steps of the deriva-
tion effectively wrap (Bach, 1979) the components
‘John buys’ and ‘what’ around the (as it happens,
silent) complementizer.

4 Previous MG Parsers

Stabler (2013) presented the first systematic gen-
eralization of incremental/transition-based CFG
parsing methods to MGs, specifically a top-down
MG parser. This requires a complete root-to-leaf
path to a lexical item before it can be scanned, and
therefore only allows a filler (e.g. a wh-phrase) to
be consumed once we commit to a particular po-
sition for the corresponding gap (e.g. matrix sub-

1In traditional terminology, this first chain happens to be a
trivial or one-membered chain, i.e. one that does not undergo
any movement.

what John buys : c

John buys : +wh c,what : -wh

John buys : v,what : -wh

buys : =d v,what : -wh

what :: d -whbuys :: =d =d v

John :: d

� :: =v +wh c

Figure 2: Example derivation for: what John buys

ject position, matrix object position, embedded
subject position, etc.). In terms of the tree di-
agrams like Figures 2 and 3, both the solid-line
connection from the root down to a wh-phrase and
the dashed-line connection are established before
the wh-phrase can be consumed. The ambiguity-
resolution question raised by filler-gap dependen-
cies therefore amounts to a choice between com-
peting analyses that diverged before the filler was
consumed, rather than a choice of how to extend a
particular analysis like in Figure 1. See Hunter (in
press) for more detailed discussion.

Stanojević and Stabler (2018) adapt the idea
of left-corner parsing from CFGs to MGs. This
parser can consume a wh-filler without commit-
ting to a particular gap site for it, and therefore —
unlike the Stabler (2013) parser — there is a sin-
gle sequence of steps that it can take to parse a
prefix such as ‘What does John think’ which can
be extended with either a subject-gap or object-



5

what John buys books about : c

John buys books about : +wh c,what : -wh

John buys books about : v,what : -wh

buys books about : =d v,what : -wh

books about : d,what : -wh

about : p,what : -wh

what :: d -whabout :: =d p

books :: =p d

buys :: =d =d v

John :: d

� :: =v +wh c

Figure 3: Example derivation for: what John buys books about

gap structure.2 But it does this without identifying
a “filler site” for the wh-phrase either: the wh-
phrase, in effect, remains entirely disconnected
from the rest of the structure until its gap site
is encountered, then the rest of the clause(s) out
of which the wh-phrase moves is assembled, and
only then is the wh-phrase slotted into its surface
position as part of the linking of this clause into
its surroundings. In terms of the tree diagrams:
while this parser does allow the solid-line con-
nection from the root down to a wh-phrase to be
unknown when the wh-phrase is scanned, it con-
structs the dashed-line connection only after this
solid-line connection is eventually established.

The goal here is to adjust the parsing mecha-
nisms of Stanojević and Stabler (2018) so that they
produce a search space where the choice points
are more in line with the psycholinguistic liter-
ature’s framing of the choices that confront the
human sentence-processing mechanism regarding
filler-gap dependencies. With respect to the tree
diagrams, we would like a parser that can establish
the dashed-line connection down to a wh-phrase at
the point where the wh-phrase is consumed, and
delay the solid-line connection until later.

5 Move-Eager Left-Corner MG Parsing

We maintain an input buffer and a store. Each
item in the store is either an element of the form
((start index, end index) · category), or an impli-
cation (written with⇒) from one such element to
another. There is a distinguished “top” item in the

2Leaving aside questions of how movement dependen-
cies are treated, left-corner parsing is also generally regarded
as more psychologically plausible for reasons relating to the
memory demands imposed by different kinds of embedding
configurations in basic, movement-free structures (Resnik,
1992).

store; additional items are unordered. We begin
with an implication ((0, n) · c)⇒ ((0, n) ROOT)
in the store, where c is the starting category of the
grammar and ‘ROOT’ is a distinguished grammar-
external symbol.

A SHIFT transition consumes a word from the
buffer and puts a corresponding element ((i, i +
1) :: X) into the top position in the store, or
((i, i) :: X) in the case of shifting an empty string.

We define the other parsing transitions in terms
of the five MG grammatical rules in Table 1.

If R is a binary grammatical rule A → B C
and we have B at the top of our store, then the
transition relation LC(R) allows us to replace this
B with the implication C ⇒ A; or, if we have
C at the top of our store, then LC(R) allows us
to replace C with the implication B ⇒ A. The
idea in the latter case is that, since we have al-
ready found a C, finding a B in the future is now
all that we need to do to establish an A. This is
familiar from left-corner CFG parsing, and forms
the core of how MERGE steps are parsed (since the
MERGE rules are the binary rules). For example,
if we have found a preposition spanning from po-
sition i to position j, i.e. ((i, j) :: =d p), then
LC(MERGE1) allows us to replace this with an im-
plication ((j, k) · d)⇒ ((i, k) : p). The right side
of this implication has type ‘:’, since it is necessar-
ily non-lexical; the type of the left side is unspeci-
fied (· ∈ {:, ::}).

Given an implicationX ⇒ Y somewhere in our
store, a central idea from (arc-eager) left-corner
parsing is that parsing steps that produce anX can
be connected, or chained together, with this stored
implication to instead produce a Y (and in this
case we remove the implication from the store).
We can think of X ⇒ Y as a fragment of tree



6

structure that has Y at the root and has an “un-
filled” X somewhere along its frontier (or a con-
text, a Y tree with an X hole); if there is a step
we can take that can produce an X , that X can be
plugged in to the tree fragment.

For any parsing transition T , there are four vari-
ants C0(T ), C1(T ), C2(T ) and C3(T ) that con-
nect, in slightly varying configurations, the items
produced by T itself with implications already in
the store.

(6) a. If T produces B and we already have
B ⇒ A, then C0(T ) produces A.

b. If T produces B ⇒ A and we already
haveC ⇒ B, then C1(T ) producesC ⇒
A.

c. If T produces C ⇒ B and we already
haveB ⇒ A, then C2(T ) producesC ⇒
A.

d. If T produces C ⇒ B and we already
have B ⇒ A and D ⇒ C, then C3(T )
produces D ⇒ A.

In all cases the relevant pre-existing implications
are removed from the store. C0 connects a shifted
lexical item with the antecedent of an implication,
i.e. the “unfilled” slot at the bottom of some tree
fragment. Rules C1(T ) and C2(T ) are similar to
function composition, or the B combinatory rule
of CCG (Steedman, 2000).3 C1(T ) and C2(T )
differ from each other in whether it is the top or
bottom of the fragment newly created by T that
connects with a pre-existing fragment; C3(T ) is
for the more complicated cases where connections
are made at both ends of the fragment created by
T . See Figure 4.

The place where the parser presented here dif-
fers from that of Stanojević and Stabler (2018) is
in the treatment of MOVE rules. These are treated
as ways to “extend” the other parsing transitions.
Given a grammar rule MOVEn of the form A →
B, if a parsing transition T produces an implica-
tion C ⇒ B, then MVn(T ) produces C ⇒ A.4
(The parser of Stanojević and Stabler (2018), in
contrast, would wait until C is completed and we
simply haveB, at which point a standalone MOVE-
transition would replace this with A.)

3Resnik (1992, p.197) emphasizes this relationship be-
tween arc-eager parsing’s connect rules and function com-
position, and the analogy to CCG’s function composition op-
eration specifically.

4Note that whereas ⇒ “points upwards” in the tree, →
points downwards (cf. Table 1).

With these rules, we obtain a search space
that better allows us to precisely express the ac-
tive/greedy gap-finding strategies that the psy-
cholinguistic evidence supports. This is illustrated
by the traces shown in Figures 5-6.5

The first interesting step in Figure 5 is Step 2,
which builds the MERGE3 step (i.e. the bottom
application of MERGE in Figure 2 discussed ear-
lier) on top of ‘what’ to produce an implication.
Given the actual surroundings of ‘what’ in Fig-
ure 2, (the feature parts of) this implication would
be =d =d v ⇒ =d v,-wh.6 But it could also
be =dγ ⇒ γ,-wh for any other feature-sequence
γ (cf. Table 1), so the parser creates an implication
where these additional features are left as variables
to be resolved by unification later. This is the new
store item shown in Step 2, where the start and end
positions of the selector of ‘what’ are likewise un-
known and left as variables n0 and n1, α3 is the
first feature of γ (which we actually know cannot
be a licensor) and α4 is the rest of γ.7

The next step shifts the empty complementizer
into the store. The resulting item has no variables,
and spans from position 1 to position 1.

Step 4 is perhaps the most complex and interest-
ing step. At its core is the fact that LC(MERGE1)
constructs, from the silent complementizer whose
features are =v +wh c, an implication from the
its complement (features v, plus possible movers)
to its parent (features +wh c, plus possible
movers). But the right-hand side of this implica-
tion is something that MOVE1 can apply to; specif-
ically, MOVE1 applied to +wh c, -wh produces
c. So putting these together, MV1(LC(MERGE1))
produces an implication from v,-wh to c. And C2
can chain this together with the initial implication
from c to ROOT, to produce an implication from
v,-wh to ROOT as the end result. This new store

5An implementation using depth-first backtracking search
is available at https://github.com/stanojevic/Move-Eager-
Left-Corner-MG-Parser

6In these sequences of feature-sequences, spaces bind
more tightly than commas.

7Leaving the other features of the wh-phrase’s selector as
variables allows us to remain completely agnostic about the
base position of the wh-phrase. But a version of this parser
that did not do this would still avoid the problem for the top-
down MG parser discussed in Section 4: it would commit
to the immediate surroundings of the wh-phrase’s base posi-
tion (for which there are only finitely many options) before
moving on from consuming the filler, but it would remain
agnostic about how far this surrounding material is from the
root of the tree. Committing to the immediate surroundings
of the wh-phrase would not be unnatural in languages with
rich case-marking.

https://github.com/stanojevic/Move-Eager-Left-Corner-MG-Parser
https://github.com/stanojevic/Move-Eager-Left-Corner-MG-Parser


7

A

B

B

A

B

B

C

A

B

B

C

A

B

B

C

C

D

C3C2C1C0

Figure 4: Illustration of connecting operations C0, C1, C2 and C3. The newly created item is shaded in each case.

item in Step 4 says, in effect, that finding a v span-
ning positions 1 to n0, out of which has moved the
-wh element already found spanning positions 0
to 1, will allow us to conclude that the root of a
complete tree spans positions 0 to n0. The impli-
cation established at Step 2 remains in place, un-
affected by this step.

Step 6 places ‘John’ in the subject position:
LC(MERGE2) creates an implication from some se-
lector with features =dγ (plus movers, if any) to
the parent node with features γ (plus the same
movers, if any). By taking γ to be v and taking
the relevant movers to be -wh, the right-hand side
of this new implication can be unified with the left-
hand side of the one established at Step 4; and fur-
thermore, the left-hand side of the new implica-
tion can be unified with the right-hand side of the
one established at Step 2 (i.e. the parent of the wh-
phrase). The new implication is therefore chained
together with two existing ones, by C3, to produce
an implication simply from =d =d v to ROOT.
The left-hand side of this implication is plugged
in when we shift the next word, ‘buys’.

Particularly important for the goals outlined
above is that instead of the C3(LC(MERGE2)) tran-
sition in Step 6, the parser also has the option of
taking the C2(LC(MERGE2)) transition shown in
Step 6’ in Figure 6. This transition involves the
same MERGE step putting ‘John’ in the subject
position, and connects the resulting structure “up-
wards” to the sought-after v,-wh in the same way,
but does not connect the bottom of the resulting

structure to the surroundings of the wh-phrase that
were constructed at Step 2. Instead, the sister node
of the subject (features =d v,-wh) is left open
as the left-hand side of the implication to ROOT,
and the implication constructed at Step 2 remains.
This is exactly what is required in the sentence be-
ing parsed in Figure 6, where the gap is further
embedded inside the direct object. But the first
five steps are the same in both cases.8

The choice between whether to take Step 6 or
6’ therefore reflects exactly the choice between
whether to follow the active filler strategy or not,
just as the the choice between a shift step and a
reduce step in Figure 1 reflects the choice between
whether to follow the Late Closure strategy or not;
recall the discussion of (4) and (5) above. The
observed human preference for active gap-finding
might therefore be formulated as a preference for
C3 transitions over C2 transitions, just as Late Clo-
sure effects can be formulated as the result of a
preference for shift transitions over reduce tran-
sitions. On this view, the filled-gap effect in (2)
(i.e. the disruption at ‘books’) is the result of back-
tracking out of an area of the search space that a
C3 transition led into, corresponding to the analy-
sis in (5a), back to a branching point from which

8The same can be said of the Stanojević and Stabler
(2018) parser. But that parser would establish the connec-
tion between the ‘know’ clause and the ‘eat’ clause only after
reaching the gap site in ‘John knows what Mary ate’, in con-
trast to the way the two clauses would be connected immedi-
ately upon entering the ‘eat’ clause in ‘John knows that Mary
ate’.



8

0 init ((0, n0) ·1 c)⇒ ((0, n0) ROOT)
1 SHIFT ‘what’ ((0, 1) :: d -wh)

((0, n0) ·1 c)⇒ ((0, n0) ROOT)
2 LC(MERGE3) ((n0, n1) ·2 =dα3α4)⇒ ((n0, n1) : α3α4), ((0, 1) : -wh) α3 6= +f9

((0, n7) ·8 c)⇒ ((0, n7) ROOT)
3 SHIFT � ((1, 1) :: =v +wh c)

((n4, n5) ·6 =dα7α8)⇒ ((n4, n5) : α7α8), ((0, 1) : -wh) α7 6= +f13
((0, n11) ·12 c)⇒ ((0, n11) ROOT)

4 C2(MV1(LC(MERGE1))) ((1, n0) ·1 v), ((0, 1),-wh)⇒ ((0, n0) ROOT)
((n3, n4) ·5 =dα6α7)⇒ ((n3, n4) : α6α7), ((0, 1) : -wh) α6 6= +f8

5 SHIFT ‘John’ ((1, 2) :: d)
((1, n0) ·1 v), ((0, 1),-wh)⇒ ((0, n0) ROOT)
((n3, n4) ·5 =dα6α7)⇒ ((n3, n4) : α6α7), ((0, 1) : -wh) α6 6= +f8

6 C3(LC(MERGE2)) ((2, n0) ·1 =d =d v)⇒ ((0, n0) ROOT)
7 C0(SHIFT) ‘buys’ ((0, 3) ROOT)

Figure 5: Trace of the parser’s progress on ‘What John buys’, with a gap in object position. Variables are sub-
scripted, and unification of variables when the rules apply is restricted by the indicated inequalities. Note that the
(derived, lexical) type indicators are variables when they are introduced before the type is specified.

6’ C2(LC(MERGE2)) ((2, n0) : =d v, ((0, 1),-wh)⇒ ((0, n0) ROOT)
((n2, n3) ·4 =dα5α6)⇒ ((n2, n3) : α5α6), ((0, 1) : -wh) α6 6= +f8

7’ SHIFT ‘buys’ ((2, 3) :: =d =d v
((2, n4) : =d v, ((0, 1),-wh)⇒ ((0, n4) ROOT)
((n6, n7) ·8 =dα9α10)⇒ ((n6, n7) : α9α10), ((0, 1) : -wh) α10 6= +f11

8’ C2(LC(MERGE1)) ((3, n0) ·1 d, ((0, 1),-wh)⇒ ((0, n0) ROOT)
((n3, n4) ·5 =dα6α7)⇒ ((n3, n4) : α6α7), ((0, 1) : -wh) α7 6= +f8

9’ SHIFT ‘books’ ((3, 4) :: =p d
((3, n2) ·3 d, ((0, 1),-wh)⇒ ((0, n2) ROOT)
((n5, n6) ·7 =dα8α9)⇒ ((n3, n4) : α6α7), ((0, 1) : -wh) α9 6= +f9

10’ C3(LC(MERGE1)) ((4, n0) ·1 =d pα8α9)⇒ ((0, n0) ROOT)
11’ C0(SHIFT) ‘about’ ((0, 5) ROOT)

Figure 6: Trace of the parser’s progress on ‘What John buys books about’, with gap inside a PP inside an object.
As anticipated in the discussion of example (5) above, the first five steps, up to and including the shift step that
consumes the subject ‘John’, are the same as in Figure 5, and so we do not repeat them again, showing only how
the remaining steps differ.



9

we can take a C2 transition instead to construct the
analysis in (5b).

This general, formal hypothesis of a preference
for C3 transitions over C2 transitions has the po-
tential to make predictions about human parsing
preferences in domains beyond those that directly
prompted the active gap-finding generalization.

6 Conclusion

The main contribution we would like to highlight
is that this parser’s search space, for sentences
containing a filler-gap dependency, is shaped in
such a way that it contains branching points cor-
responding to the choice of whether to (a) posit
a gap actively as a first-resort when the opportu-
nity arises, or (b) explore other analyses of the lo-
cal material first before resorting to positing a gap.
This makes it possible to at least state, in a pre-
cise and general way, the widely-accepted gener-
alization that the human parsing mechanism takes
the former option (i.e. adopts the active-filler strat-
egy), and formulate a theory that includes a stip-
ulation to this effect. But if the facts had turned
out differently it would have been just as easy to
stipulate that the other option is taken instead, and
so in this respect we make no claim here to hav-
ing progressed towards an explanation of the ob-
served active-filler generalization. Rather we hope
to have pinpointed more precisely what there is to
be explained.

This kind of formal instantiation of the active
filler idea may also provide a way for variations
on the broadly-accepted core idea to be formu-
lated in ways that make precise, distinguishable
predictions. For example, looking more closely
at Figures 5 and 6, we see that the parser actu-
ally posits the gap site before consuming the word
that precedes the gap: this happens in Step 6 be-
fore shifting ‘buys’ in Figure 5, and in Step 10’
before shifting ‘about’ in Figure 6. This emerges
as a consequence of the fact that, given a binary-
branching tree node, a left-corner parser uses one
daughter to predict the other (its sister) rather than
constructing both independently (as a bottom-up
parser would). Since the parser already “knows
about” the gap, the way it goes about establish-
ing a structure where the gap and a verb are sis-
ters (if this is what it chooses to do) is by using
the gap to predict the verb in its sister position
— even though the verb might be usually thought
of as appearing to the left of the gap. Although

this perhaps diverges from the most natural un-
derstanding of the strategies discussed in the psy-
cholinguistics literature, it appears to be similar to
the “hyper-active” gap-finding strategy that Omaki
et al. (2015) report some evidence for.

A second way in which the details of Figures 5
and 6 may differ from the usual conception of the
active filler strategy is that the filler wh-phrase is
integrated into its surface position after the com-
plementizer is shifted in Step 3. In a sense it is
the +wh feature on the complementizer that re-
ally triggers the construction of the MOVE step of
the derivation, rather than the filler, and the filler
is identified as the moved -wh element only in-
directly by virtue of the fact that it covers the re-
quired span, from position 0 to position 1. In these
sentences with a null complementizer this differ-
ence is not really meaningful, but it may be in lan-
guages that allow an overt complementizer to co-
occur with a fronted wh-phrase.

Finally, one of the most well-known properties
of active gap-finding is that it is island-sensitive:
humans do not posit gaps in positions which are
separated from the filler position by an island
boundary (e.g. Traxler and Pickering, 1996; Wa-
gers and Phillips, 2009). In future work we intend
to investigate whether this effect might fall out as
a natural consequence of certain grammatical en-
codings of the relevant island constraints.

Acknowledgments

The second author was supported by ERC H2020
Advanced Fellowship GA 742137 SEMANTAX
grant. The second and third authors devised and
implemented the parser described here; the first
author contributed the psycholinguistic motiva-
tions and interpretations.

References
Emmon Bach. 1979. Control in Montague Grammar.

Linguistic Inquiry, 10(4):515–531.

J.R. Brennan, E.P. Stabler, S.E. VanWagenen, W.-M.
Luh, and J.T. Hale. 2016. Abstract linguistic struc-
ture correlates with temporal activity during natu-
ralistic comprehension. Brain and Language, 157-
158:81–94.

Noam Chomsky. 1995. The Minimalist Program. MIT
Press, Cambridge, Massachusetts.

Janet Dean Fodor. 1978. Parsing strategies and con-
straints on transformations. Linguistic Inquiry,
9(3):427–473.



10

Lyn Frazier and Charles Clifton. 1989. Successive
cyclicity in the grammar and the parser. Languages
and Cognitive Processes, 2(4):93–126.

Lyn Frazier and Charles Clifton. 1996. Construal.
MIT Press, Cambridge, MA.

Thomas Graf. 2013. Local and transderivational con-
straints in syntax and semantics. Ph.D. thesis,
UCLA.

Thomas Graf and Bradley Marcinek. 2014. Evaluat-
ing evaluation metrics for minimalist parsing. In
Procs. 2014 ACL Workshop on Cognitive Modeling
and Computational Linguistics (CMCL), page 2836.

John T. Hale. 2003. Grammar, uncertainty and sen-
tence processing. Ph.D. thesis, Johns Hopkins Uni-
versity.

John T. Hale. 2006. Uncertainty about the rest of the
sentence. Cognitive Science, 30:643–672.

Tim Hunter. 2011. Syntactic Effects of Conjunctivist
Semantics: Unifying Movement and Adjunction.
John Benjamins, Philadelphia.

Tim Hunter. in press. Left-corner parsing of minimal-
ist grammars. In R.C. Berwick and E.P. Stabler, ed-
itors, Minimalist Parsing. Oxford University Press.

Gregory M. Kobele. 2010. Without remnant move-
ment, MGs are context-free. In Mathematics of
Language 10/11, LNCS 6149, pages 160–173, NY.
Springer.

Gregory M. Kobele, Sabrina Gerth, and John T. Hale.
2012. Memory resource allocation in top-down
minimalist parsing. In Procs. Formal Grammar
2012, Opole, Poland.

Gregory M. Kobele and Jens Michaelis. 2011. Dis-
entangling notions of specifier impenetrability. In
M. Kanazawa, A. Kornai, M. Kracht, and H. Seki,
editors, The Mathematics of Language, pages 126–
142. Springer, Berlin.

Akira Omaki, Ellen F. Lau, Imogen Davidson White,
Myles L. Dakan, Aaron Apple, and Colin Phillips.
2015. Hyper-active gap filling. Frontiers in Psy-
chology, 6(384).

Colin Phillips. 2006. The real-time status of island
phenomena. Language, 82:795–823.

Philip Resnik. 1992. Left-corner parsing and psycho-
logical plausibility. In Proceedings of the Four-
teenth International Conference on Computational
Linguistics (COLING ’92), pages 191–197.

Edward P. Stabler. 1997. Derivational minimalism. In
C. Retoré, editor, Logical Aspects of Computational
Linguistics, LNCS 1328, pages 68–95. Springer-
Verlag, NY.

Edward P. Stabler. 2011. Computational perspectives
on minimalism. In Cedric Boeckx, editor, Oxford
Handbook of Linguistic Minimalism, pages 617–
641. Oxford University Press, Oxford.

Edward P. Stabler. 2013. Two models of minimalist,
incremental syntactic analysis. Topics in Cognitive
Science, 5(3):611–633.

Miloš Stanojević and Edward Stabler. 2018. A
sound and complete left-corner parser for Minimal-
ist Grammars. In Procs. Eighth Workshop on Cog-
nitive Aspects of Computational Language Learning
and Processing, pages 65–74.

Adrian Staub. 2007. The parser doesn’t ignore tran-
sitivity, after all. Journal of Experimental Psychol-
ogy: Learning, Memory and Cognition, 33(3):550–
569.

Mark Steedman. 2000. The Syntactic Process. MIT
Press, Cambridge, MA.

Laurie A. Stowe. 1986. Parsing wh-constructions: Ev-
idence for on-line gap location. Language and Cog-
nitive Processes, 1(3):227–245.

Matthew J. Traxler and Martin J. Pickering. 1996.
Plausibility and the processing of unbounded depen-
dencies: An eye-tracking study. Journal of Memory
and Language, 35:454–475.

Matthew W. Wagers and Colin Phillips. 2009. Multiple
dependencies and the role of grammar in real-time
comprehension. Journal of Linguistics, 45:395–
433.

Jiwon Yun, Zhong Chen, Tim Hunter, John Whitman,
and John Hale. 2015. Uncertainty in the processing
of relative clauses in East Asian languages. Journal
of East Asian Linguistics, 24(2).


