Proceedings of the ACL 2010 Conference Short Papers, pages 162–167,

Uppsala, Sweden, 11-16 July 2010. c(cid:13)2010 Association for Computational Linguistics

162

Predicate Argument Structure Analysis using Transformation-based

Learning

Hirotoshi Taira

Sanae Fujita

Masaaki Nagata

NTT Communication Science Laboratories

{taira,sanae}@cslab.kecl.ntt.co.jp

2-4, Hikaridai, Seika-cho, Souraku-gun, Kyoto 619-0237, Japan

nagata.masaaki@lab.ntt.co.jp

Abstract

Maintaining high annotation consistency
in large corpora is crucial for statistical
learning; however, such work is hard,
especially for tasks containing semantic
elements.
This paper describes predi-
cate argument structure analysis using 　
transformation-based learning. An advan-
tage of transformation-based learning is
the readability of learned rules. A dis-
advantage is that the rule extraction pro-
cedure is time-consuming. We present
incremental-based,
transformation-based
learning for semantic processing tasks. As
an example, we deal with Japanese pred-
icate argument analysis and show some
tendencies of annotators for constructing
a corpus with our method.

1

Introduction

Automatic predicate argument structure analysis
(PAS) provides information of “who did what
to whom” and is an important base tool for
such various text processing tasks as machine
translation information extraction (Hirschman et
al., 1999), question answering (Narayanan and
Harabagiu, 2004; Shen and Lapata, 2007), and
summarization (Melli et al., 2005). Most re-
cent approaches to predicate argument structure
analysis are statistical machine learning methods
such as support vector machines (SVMs)(Pradhan
et al., 2004).
For predicate argument struc-
ture analysis, we have the following represen-
tative large corpora: FrameNet (Fillmore et al.,
2001), PropBank (Palmer et al., 2005), and Nom-
Bank (Meyers et al., 2004) in English, the Chi-
nese PropBank (Xue, 2008) in Chinese,
the
GDA Corpus (Hashida, 2005), Kyoto Text Corpus
Ver.4.0 (Kawahara et al., 2002), and the NAIST
Text Corpus (Iida et al., 2007) in Japanese.

The construction of such large corpora is strenu-
ous and time-consuming. Additionally, maintain-
ing high annotation consistency in such corpora
is crucial for statistical learning; however, such
work is hard, especially for tasks containing se-
mantic elements. For example, in Japanese cor-
pora, distinguishing true dative (or indirect object)
arguments from time-type argument is difﬁcult be-
cause the arguments of both types are often ac-
companied with the ‘ni’ case marker.

A problem with such statistical learners as SVM
is the lack of interpretability; if accuracy is low, we
cannot identify the problems in the annotations.

We are focusing on transformation-based learn-
ing (TBL). An advantage for such learning meth-
ods is that we can easily interpret the learned
model. The tasks in most previous research are
such simple tagging tasks as part-of-speech tag-
ging, insertion and deletion of parentheses in syn-
tactic parsing, and chunking (Brill, 1995; Brill,
1993; Ramshaw and Marcus, 1995). Here we ex-
periment with a complex task: Japanese PASs.
TBL can be slow, so we proposed an incremen-
tal training method to speed up the training. We
experimented with a Japanese PAS corpus with a
graph-based TBL. From the experiments, we in-
terrelated the annotation tendency on the dataset.
The rest of this paper is organized as follows.
Section 2 describes Japanese predicate structure,
our graph expression of it, and our improved
method. The results of experiments using the
NAIST Text Corpus, which is our target corpus,
are reported in Section 3, and our conclusion is
provided in Section 4.
2 Predicate argument structure and

graph transformation learning

First, we illustrate the structure of a Japanese sen-
tence in Fig. 1. In Japanese, we can divide a sen-
tence into bunsetsu phrases (BP). A BP usually
consists of one or more content words and zero,

163

Sentence
Sentence

Syntactic dependency between bunsetsus
Syntactic dependency between bunsetsus

BP
BP

BP
BP

BP
BP

CW FW
CW FW

CW FW
CW FW

CW FW
CW FW

BP
BP

CW
CW

BP
BP

BP
BP

CW FW
CW FW

CW
CW

FW
FW

Kare
Kare

no
no

tabe
tabe

ta
ta

okashi
okashi

wa
wa

kinou
kinou

mise de
mise de

kat
kat

ta
ta

He
He

’s
’s

eat PAST snack
eat PAST snack

TOP
TOP

yesterday
yesterday

shop
shop

at
at

buy PAST
buy PAST

ARG
ARG

ARG
ARG

ARG
ARG

ARG
ARG

Nom.
Nom.

Acc.
Acc.

PRED
PRED

Time
Time

Acc.
Acc.

Loc.
Loc.

PRED
PRED

Kareno tabeta okashiwa kinou misede katta.
Kareno tabeta okashiwa kinou misede katta.

The snack he ate is one I bought at the store yesterday.
The snack he ate is one I bought at the store yesterday.

BP: Bunsetsu phrase
BP: Bunsetsu phrase
CW: Content Word
CW: Content Word
FW: Functional Word
FW: Functional Word

PRED: Predicate
PRED: Predicate
ARG: Argument
ARG: Argument

Argument Types
Argument Types

Nom: Nominative
Nom: Nominative
Acc: Accusative
Acc: Accusative
Dat: Dative
Dat: Dative
Time: Time
Time: Time
Loc: Location
Loc: Location

Figure 1: Graph expression for PAS

one, or more than one functional words. Syn-
tactic dependency between bunsetsu phrases can
be deﬁned. Japanese dependency parsers such as
Cabocha (Kudo and Matsumoto, 2002) can extract
BPs and their dependencies with about 90% accu-
racy.

Since predicates and arguments in Japanese are
mainly annotated on the head content word in
each BP, we can deal with BPs as candidates of
predicates or arguments. In our experiments, we
mapped each BP to an argument candidate node
of graphs. We also mapped each predicate to a
predicate node. Each predicate-argument relation
is identiﬁed by an edge between a predicate and an
argument, and the argument type is mapped to the
edge label. In our experiments below, we deﬁned
ﬁve argument types: nominative (subjective), ac-
cusative (direct objective), dative (indirect objec-
tive), time, and location. We use ﬁve transforma-
tion types: a) add or b) delete a predicate node, c)
add or d) delete an edge between an predicate and
an argument node, e) change a label (= an argu-
ment type) to another label (Fig. 2). We explain
the existence of an edge between a predicate and
an argument labeled t candidate node as that the
predicate and the argument have a t type relation-
ship.

Transformation-based learning was proposed
by (Brill, 1995). Below we explain our learn-
ing strategy when we directly adapt the learning
method to our graph expression of PASs. First, un-
structured texts from the training data are inputted.
After pre-processing, each text is mapped to an
initial graph. In our experiments, the initial graph
has argument candidate nodes with corresponding
BPs and no predicate nodes or edges. Next, com-

BP
BP

BP
BP

BP
BP

BP
BP

BP
BP

BP
BP

PRED
PRED

PRED
PRED

a) `Add Pred Node’
a) `Add Pred Node’

b) `Delete Pred Node’
b) `Delete Pred Node’

ARG
ARG

c) `Add Edge’
c) `Add Edge’

ARG
ARG

Nom.
Nom.

PRED
PRED

d) `Delete Edge’
d) `Delete Edge’

PRED
PRED

ARG
ARG

Nom.
Nom.

e) `Change Edge Label’
e) `Change Edge Label’

ARG
ARG

Acc.
Acc.

PRED
PRED

PRED
PRED

Figure 2: Transform types

paring the current graphs with the gold standard
graph structure in the training data, we ﬁnd the dif-
ferent statuses of the nodes and edges among the
graphs. We extract such transformation rule candi-
dates as ‘add node’ and ‘change edge label’ with
constraints, including ‘the corresponding BP in-
cludes a verb’ and ‘the argument candidate and the
predicate node have a syntactic dependency.’ The
extractions are executed based on the rule tem-
plates given in advance. Each extracted rule is
evaluated for the current graphs, and error reduc-
tion is calculated. The best rule for the reduction
is selected as a new rule and inserted at the bottom
of the current rule list. The new rule is applied to
the current graphs, which are transferred to other
graph structures. This procedure is iterated until
the total errors for the gold standard graphs be-
come zero. When the process is completed, the
rule list is the ﬁnal model. In the test phase, we it-
eratively transform nodes and edges in the graphs
mapped from the test data, based on rules in the
model like decision lists. The last graph after all
rule adaptations is the system output of the PAS.

In this procedure, the calculation of error reduc-
tion is very time-consuming, because we have to
check many constraints from the candidate rules
for all training samples. The calculation order is
O(M N), where M is the number of articles and
N is the number of candidate rules. Additionally,
an edge rule usually has three types of constraints:
‘pred node constraint,’ ‘argument candidate node
constraint,’ and ‘relation constraint.’ The num-
ber of combinations and extracted rules are much
larger than one of the rules for the node rules.
Ramshaw et al. proposed an index-based efﬁcient
reduction method for the calculation of error re-
duction (Ramshaw and Marcus, 1994). However,
in PAS tasks, we need to check the exclusiveness
of the argument types (for example, a predicate ar-
gument structure does not have two nominative ar-

164

guments), and we cannot directly use the method.
Jijkoun et al. only used candidate rules that hap-
pen in the current and gold standard graphs and
used SVM learning for constraint checks (Jijkoun
and de Rijke, 2007). This method is effective
for achieving high accuracy; however, it loses the
readability of the rules. This is contrary to our aim
to extract readable rules.

To reduce the calculations while maintaining
readability, we propose an incremental method
and describe its procedure below. In this proce-
dure, we ﬁrst have PAS graphs for only one arti-
cle. After the total errors among the current and
gold standard graphs become zero in the article,
we proceed to the next article. For the next article,
we ﬁrst adapt the rules learned from the previous
article. After that, we extract new rules from the
two articles until the total errors for the articles be-
come zero. We continue these processes until the
last article. Additionally, we count the number of
rule occurrences and only use the rule candidates
that happen more than once, because most such
rules harm the accuracy. We save and use these
rules again if the occurrence increases.

3 Experiments

3.1 Experimental Settings

We used the articles in the NAIST Text Cor-
pus version 1.4β (Iida et al., 2007) based on the
Mainichi Shinbun Corpus (Mainichi, 1995), which
were taken from news articles published in the
Japanese Mainichi Shinbun newspaper. We used
articles published on January 1st for training ex-
amples and on January 3rd for test examples.
Three original argument types are deﬁned in the
NAIST Text Corpus: nominative (or subjective),
accusative (or direct object), and dative (or indi-
rect object). For evaluation of the difﬁcult anno-
tation cases, we also added annotations for ‘time’
and ‘location’ types by ourselves. We show the
dataset distribution in Table 1. We extracted the
BP units and dependencies among these BPs from
the dataset using Cabocha, a Japanese dependency
parser, as pre-processing. After that, we adapted
our incremental learning to the training data. We
used two constraint templates in Tables 2 and 3
for predicate nodes and edges when extracting the
rule candidates.

Table 1: Data distribution

# of Articles
# of Sentences
# of Predicates
# of Arguments

Nom.
Acc.
Dat.
Time
Loc.

Training
95
1,129
3,261
3,877
1,717
1,012
632
371
145

Test
74
687
2,038
2,468
971
701
376
295
125

Table 4: Total performances (F1-measure (%))

Type
Pred.

Arg.

P
System
Baseline
89.4
Our system 91.8
Baseline
79.3
Our system 81.9

R
85.1
85.3
59.5
62.4

F1
87.2
88.4
68.0
70.8

3.2 Results
Our incremental method takes an hour. In com-
parison, the original TBL cannot even extract one
rule in a day. The results of predicate and argu-
ment type predictions are shown in Table 4. Here,
‘Baseline’ is the baseline system that predicts the
BSs that contain verbs, adjectives, and da form
nouns (‘to be’ in English) as predicates and pre-
dicts argument types for BSs having syntactical
dependency with a predicted predicate BS, based
on the following rules: 1) BSs containing nomina-
tive (ga) / accusative (wo) / dative (ni) case mark-
ers are predicted to be nominative, accusative, and
dative, respectively. 2) BSs containing a topic case
marker (wa) are predicted to be nominative. 3)
When a word sense category from a Japanese on-
tology of the head word in BS belongs to a ‘time’
or ‘location’ category, the BS is predicted to be a
‘time’ and ‘location’ type argument. In all preci-
sion, recall, and F1-measure, our system outper-
formed the baseline system.

Next, we show our system’s learning curve in
Fig. 3. The number of ﬁnal rules was 68. This
indicates that the ﬁrst twenty rules are mainly ef-
fective rules for the performance. The curve also
shows that no overﬁtting happened. Next, we
show the performance for every argument type in
Table 5. ‘TBL,’ which stands for ‘transformation-
based learning,’ is our system.
In this table,
the performance of the dative and time types im-
proved, even though they are difﬁcult to distin-
guish. On the other hand, the performance of the
location type argument in our system is very low.
Our method learns rules as decreasing errors of

165

Table 2: Predicate node constraint templates

Pred. Node Constraint Template

Constraint

pos1 & pos2

pos1
pos2

‘da’
lemma

Description
noun, verb, adjective, etc.
independent, attached word, etc.
above two features combination
da form (copula)
word base form

Rule Example

Pred. Node Constraint
pos1=‘ADJECTIVE’

pos2=‘DEPENDENT WORD’

pos1=‘VERB’ & pos2=‘ANCILLARY WORD’

‘da form’
lemma=‘%’

Operation

add pred node
del pred node
add pred node
add pred node
add pred node

Table 3: Edge constraint templates

Edge Constraint Template

Pred. Node
Const.
∗

FW
∗

Relation
Const.
dep(arg → pred)
dep(arg ← pred)
dep(arg → pred)

Rule Example

Edge Constraint
FW of Arg. =‘wa(TOP)’ & dep(arg → pred)

FW of Pred. =‘na(ADNOMINAL)’ & dep(arg
← pred)
SemCat of Arg. = ‘TIME’ & dep(arg → pred)

Operation
add NOM edge

add NOM edge

add TIME edge

passive form

kform (= type
of
inﬂected
form)
Pred. SemCat

dep(arg → pred)
∗

∗

FW of Arg. =‘ga(NOM) & Pred.: passive form chg edge label
NOM → ACC
add NOM edge

kform of Pred. = continuative ‘ta’ form

SemCat of Arg. = ‘HUMAN’ & Pred. SemCat
= ‘PHYSICAL MOVE’

add NOM edge

Arg. Cand.
Const.
FW (=func.
word)
∗

SemCat
(=semantic
category)
FW
∗

SemCat

F1-measure (%)
F1-measure (%)

80
80

70
70

60
60

50
50

40
40

30
30

20
20

10
10

0
0

0
0

10
10

20
20

30
30

40
40

50
50

60
60

70
70

rules
rules

Figure 3: Learning curves: x-axis = number of
rules; y-axis: F1-measure (%)

all arguments, and the performance of the location
type argument is probably sacriﬁced for total error
reduction because the number of location type ar-
guments is much smaller than the number of other
argument types (Table 1), and the improvement of
the performance-based learning for location type
arguments is relatively low. To conﬁrm this, we
performed an experiment in which we gave the
rules of the baseline system to our system as initial
rules and subsequently performed our incremen-
tal learning. ‘Base + TBL’ shows the experiment.
The performance for the location type argument
improved drastically. However, the total perfor-
mance of the arguments was below the original
TBL. Moreover, the ‘Base + TBL’ performance
surpassed the baseline system. This indicates that
our system learned a reasonable model.

Finally, we show some interesting extracted
rules in Fig. 4. The ﬁrst rule stands for an ex-
pression where the sentence ends with the per-
formance of something, which is often seen in
Japanese newspaper articles. The second and third
rules represent that annotators of this dataset tend
to annotate time types for which the semantic cate-
gory of the argument is time, even if the argument
looks like the dat. type, and annotators tend to an-
notate dat.
type for arguments that have an dat.

166

Rule No.20
Rule No.20

BP
BP

CW
CW
`%’
`%’

PRED
PRED

if BP contains the word `%’ ,
if BP contains the word `%’ ,
Add Pred. Node
Add Pred. Node

Rule No.15
Rule No.15

SemCat is `Time’
SemCat is `Time’

ARG
ARG

Dat. / Time
Dat. / Time

PRED
PRED

Change Edge Label
Change Edge Label

Dat. →Time
Dat. →Time

Rule No.16
Rule No.16

if func. wd. is `DAT’ case,
if func. wd. is `DAT’ case,

ARG
ARG

Time / Dat.
Time / Dat.

PRED
PRED

Change Edge Label
Change Edge Label

Example
Example

`People who answered are 87%’
`People who answered are 87%’

BP
BP

BP
BP

BP
BP

CW
CW
CW
CW
FW
FW
FW
FW
８７％ で
８７％ で
答え た
答え た
87%-de
87%-de
kotae-ta
kotae-ta
answer-ed people-TOP 87%-be
answer-ed people-TOP 87%-be

CW
CW
FW
FW
人 は
人 は
hito-wa
hito-wa

PRED
PRED

Example
Example

`will start on the 7th’
`will start on the 7th’

BP
BP

CW
CW

FW
FW

BP
BP
CW
CW

7日 に
7日 に
7ka-ni
7ka-ni

スタート する
スタート する
staato-suru
staato-suru

7th DAT
7th DAT

start will
start will

ARG
ARG

ARG
ARG

Time
Time

PRED
PRED

Rule No.16 is applied
Rule No.16 is applied

Dat.
Dat.

PRED
PRED

Figure 4: Examples of extracted rules

Table 5: Results for every arg.
(%))

type (F-measure

System
Base
TBL

Base + TBL

Args. Nom. Acc. Dat. Time Loc.
38.0
68.0
70.8
1.7
69.5
37.4

65.8
64.9
63.9

79.6
86.4
85.8

70.5
74.8
67.8

51.5
59.6
55.8

type case marker.

4 Conclusion

We performed experiments for Japanese predicate
argument structure analysis using transformation-
based learning and extracted rules that indicate the
tendencies annotators have. We presented an in-
cremental procedure to speed up rule extraction.
The performance of PAS analysis improved, espe-
cially, the dative and time types, which are difﬁcult
to distinguish. Moreover, when time expressions
are attached to the ‘ni’ case, the learned model
showed a tendency to annotate them as dative ar-
guments in the used corpus. Our method has po-
tential for dative predictions and interpreting the
tendencies of annotator inconsistencies.

Acknowledgments

We thank Kevin Duh for his valuable comments.

References
Eric Brill. 1993. Transformation-based error-driven
In Proc. of the Third International Work-

parsing.
shop on Parsing Technologies.

Eric Brill. 1995. Transformation-based error-driven
learning and natural language processing: A case
study in part-of-speech tagging. Computational Lin-
guistics, 21(4):543–565.

Charles J. Fillmore, Charles Wooters, and Collin F.
Baker.
2001. Building a large lexical databank
which provides deep semantics. In Proc. of the Pa-
ciﬁc Asian Conference on Language, Information
and Computation (PACLING).

Kouichi Hashida. 2005. Global document annotation

(GDA) manual. http://i-content.org/GDA/.

Lynette Hirschman,

Patricia Robinson,

Lisa
Brown,
Sundheim.
Hub-4 Event’99 general guidelines.

Ferro,
Ralph
1999.
http://www.itl.nist.gov/iaui/894.02/related projects/muc/.

Nancy
Grishman,

Chinchor,

Erica

Beth

and

Ryu Iida, Mamoru Komachi, Kentaro Inui, and Yuji
Matsumoto. 2007. Annotating a Japanese text cor-
pus with predicate-argument and coreference rela-
tions. In Proc. of ACL 2007 Workshop on Linguistic
Annotation, pages 132–139.

Valentin Jijkoun and Maarten de Rijke. 2007. Learn-
In Proc. of
ing to transform linguistic graphs.
the Second Workshop on TextGraphs: Graph-
Based Algorithms for Natural Language Processing
(TextGraphs-2), pages 53–60. Association for Com-
putational Linguistics.

167

2002.

Daisuke Kawahara, Sadao Kurohashi, and Koichi
Hashida.
Construction of a Japanese
relevance-tagged corpus (in Japanese). Proc. of the
8th Annual Meeting of the Association for Natural
Language Processing, pages 495–498.

Taku Kudo and Yuji Matsumoto.

Japanese
dependency analysis using cascaded chunking.
In
Proc. of the 6th Conference on Natural Language
Learning 2002 (CoNLL 2002).

2002.

Mainichi. 1995. CD Mainichi Shinbun 94. Nichigai

Associates Co.

Gabor Melli, Yang Wang, Yudong Liu, Mehdi M.
Kashani, Zhongmin Shi, Baohua Gu, Anoop Sarkar,
and Fred Popowich.
Description of
SQUASH, the SFU question answering summary
handler for the DUC-2005 summarization task. In
Proc. of DUC 2005.

2005.

Adam Meyers, Ruth Reeves, Catherine Macleod,
Rachel Szekely, Veronika Zielinska, Brian Young,
and Ralph Grishman. 2004. The NomBank project:
In Proc. of HLT-NAACL 2004
An interim report.
Workshop on Frontiers in Corpus Annotation.

Srini Narayanan and Sanda Harabagiu. 2004. Ques-
tion answering based on semantic structures.
In
Proc. of the 20th International Conference on Com-
putational Linguistics (COLING).

M. Palmer, P. Kingsbury, and D. Gildea. 2005. The
proposition bank: An annotated corpus of semantic
roles. Computational Linguistics, 31(1):71–106.

Sameer Pradhan, Waybe Ward, Kadri Hacioglu, James
Martin, and Dan Jurafsky. 2004. Shallow semantic
parsing using support vector machines. In Proc. of
the Human Language Technology Conference/North
American Chapter of the Association of Computa-
tional Linguistics HLT/NAACL 2004.

Lance Ramshaw and Mitchell Marcus. 1994. Explor-
ing the statistical derivation of transformational rule
In The Bal-
sequences for part-of-speech tagging.
ancing Act: Proc. of the ACL Workshop on Com-
bining Symbolic and Statistical Approaches to Lan-
guage.

Lance Ramshaw and Mitchell Marcus. 1995. Text
chunking using transformation-based learning.
In
Proc. of the third workshop on very large corpora,
pages 82–94.

Dan Shen and Mirella Lapata.

2007. Using se-
In
mantic roles to improve question answering.
Proc. of
the 2007 Joint Conference on Empir-
ical Methods in Natural Language Processing
and Computational Natural Language Learning
(EMNLP/CoNLL), pages 12–21.

Nianwen Xue. 2008. Labeling Chinese predicates
with semantic roles. Computational Linguistics,
34(2):224–255.

