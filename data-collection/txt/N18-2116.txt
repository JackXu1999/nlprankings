



















































Smaller Text Classifiers with Discriminative Cluster Embeddings


Proceedings of NAACL-HLT 2018, pages 739–745
New Orleans, Louisiana, June 1 - 6, 2018. c©2018 Association for Computational Linguistics

Smaller Text Classifiers with Discriminative Cluster Embeddings

Mingda Chen Kevin Gimpel
Toyota Technological Institute at Chicago, Chicago, IL, 60637, USA

{mchen,kgimpel}@ttic.edu

Abstract

Word embedding parameters often domi-
nate overall model sizes in neural meth-
ods for natural language processing. We
reduce deployed model sizes of text clas-
sifiers by learning a hard word cluster-
ing in an end-to-end manner. We use
the Gumbel-Softmax distribution to maxi-
mize over the latent clustering while min-
imizing the task loss. We propose varia-
tions that selectively assign additional pa-
rameters to words, which further improves
accuracy while still remaining parameter-
efficient.

1 Introduction

Word embeddings (Bengio et al., 2003) form the
foundation of most neural methods for natural lan-
guage processing (NLP). However, embeddings
typically comprise a large fraction of the total
parameters learned by a model, especially when
large vocabularies and high dimensions are used.
This can become problematic when seeking to de-
ploy NLP systems on mobile devices where mem-
ory and computation time are limited.

We address this issue by proposing alternative
parameterizations for word embeddings in text
classifiers. We introduce a latent variable for each
word type that represents the (hard) cluster to
which it belongs. An embedding is learned for
each cluster. All parameters (including cluster as-
signment probabilities for each word and the clus-
ter embeddings themselves) are learned jointly in
an end-to-end manner.

This idea is based on the conjecture that most
words do not need their own unique embedding
parameters, due both to the focused nature of par-
ticular text classification tasks and also due to
the power law characteristics of word frequen-

. . . is a group of symptoms . . .

k

embedding matrix

cluster pointer

Figure 1: Schematic of deployed cluster embedding
model with k clusters; cluster probabilities can be re-
placed by pointers at test time.

cies. For a particular task, many word embeddings
would be essentially identical, so using clusters
lets us avoid learning redundant embedding vec-
tors, making parameter usage more efficient. For
sentiment analysis, for example, the procedure can
learn to place all sentiment-neutral words in a sin-
gle cluster, and then learn distinct clusters for pos-
itive and negative words.

During learning, we minimize log loss of the
correct classification label while maximizing over
the latent variables. To do so, we use the Gumbel-
Softmax distribution (Jang et al., 2016; Maddison
et al., 2016) as a continuous approximation to hard
clustering. After training, we compute the argmax
over cluster assignments for each word type and
replace the cluster assignment probabilities with
pointers to clusters; see Figure 1. This leads to a
large reduction in model size at test time.

We consider two variations of the above idea
which introduce a small number of additional
word-specific parameters. The best variation
learns unique embeddings for only the most fre-
quent words and uses hard clustering for the rest.
We evaluate our methods on five text classifica-
tion datasets, comparing them at several model
size budgets. Our results demonstrate that clus-
tering can maintain or improve performance while
offering extremely small deployed models.

739



2 Related Work

Several methods have been proposed for reducing
the memory requirements of models that use word
embeddings. One is based on quantization (Botha
et al., 2017; Han et al., 2016), which changes the
way parameters are stored. In particular, it seeks
to find shared weights among embedding vectors
and only keeps scale factors for each word.

Another family of methods uses hashing func-
tions to replace dictionaries (Tito Svenstrup et al.,
2017; Joulin et al., 2017). This can save storage
space, but still requires the model to have roughly
the same size embedding matrix. Network pruning
has also been used to compress neural networks.
Han et al. (2015) pruned weights iteratively by
removing weights below a threshold and then re-
training the network.

Our work is also related to prior work using
hard word clustering for NLP tasks (Botha et al.,
2017; Brown et al., 1992). The primary difference
is that we cluster words to minimize the task loss
rather than doing so beforehand.

Recently, Shu and Nakayama (2018) also found
clustering helpful for compressing the word em-
bedding matrix for NLP tasks. Their method fol-
lows the intuition of product quantization (Jegou
et al., 2011; Joulin et al., 2017). Our methods dif-
fer from theirs in two ways. First, our methods
are trained end-to-end instead of relying on pre-
trained word embeddings. Since our embeddings
are trained for each task, we can use much smaller
embedding dimensionalities, which saves a lot of
parameters. Second, our method is faster at test
time because it does not use multiple code books.

3 Embedding Parameterizations

Our text classifiers use long short-term memory
(LSTM; Hochreiter and Schmidhuber, 1997) net-
works to embed sequences of word embeddings
and then use the final hidden state as input to a
softmax layer to generate label predictions. The
standard cross entropy loss is used for training.
We use this same architecture throughout and vary
the method of parameterizing the word embedding
module among the four options listed below.

Standard Embeddings (SE). This is the stan-
dard setting in which each word type in the vocab-
ulary has a unique embedding. Given a vocabulary
V = {w1, w2, · · · , wv} and embedding dimen-
sionality m, this yields vm word embedding pa-

rameters. In our experiments, we limit the vocab-
ulary to various sizes v, always keeping the most
frequent v words and replacing the rest with an
unknown word symbol.

Cluster Embeddings (CE). We next propose a
method in which each word is placed into a single
cluster (“hard clustering”) and we learn a unique
embedding vector for each cluster. We refer to this
setting as using cluster embeddings (CE). We de-
note the embedding matrixW ∈ Rk×m where k is
the number of clusters and m is again the embed-
ding dimensionality. Each word wi now has a vec-
tor of parameters ~ai = (ai1, · · · , aik) which are
interpreted as cluster probabilities. So this method
requires learning vk cluster probabilities in addi-
tion to the km parameters for the cluster embed-
dings themselves.

We treat the cluster membership of each word
wi as a latent variable hi during training. All pa-
rameters are optimized jointly to minimize cross
entropy while maximizing over the latent vari-
ables. This poses difficulty in practice due to the
discrete nature of the clustering. That is, max-
imizing over the latent variables involves non-
differentiable argmax operations:

hi = argmax
1≤j≤k

aij

To tackle this problem, we use the recently pro-
posed Gumbel-Softmax to approximate the clus-
tering decision during training. Gumbel-Softmax
is a temperature-modulated continuous relaxation
for the categorical distribution. When the tempera-
ture approaches 0, samples from Gumbel-Softmax
will become identical to those from the categorical
distribution. During training, we have a sample
~ti = (ti1, · · · , tik) for every instance of a word
wi. The vector ~ti is a non-sparse approximation to
the one-hot vector indicated by the latent variable
value hi. It is parameterized as:

tij =
exp ((aij + gj)/τ)∑k
l=1 exp ((ail + gl)/τ)

where the gj are samples from a Gumbel(0,1) dis-
tribution and τ is the temperature. The embedding
vector ~ei for word wi is calculated by ~ei =W>~ti.

Even when merely using this method in a soft
clustering setting, it can save parameters when
vk + km < vm. But with hard clustering, we
can reduce this further by assuming we will again

740



Dataset # Classes Train Dev. Test
AG News 4 115,000 5,000 7,600
DBpedia 14 560,000 5,000 70,000
Yelp Review Polarity 2 555,000 5,000 38,000
Yelp Review Full 5 645,000 5,000 50,000
IMDB Movie Reviews 2 23,000 2,000 25,000

Table 1: Dataset statistics.

maximize over latent variables at test time. In this
case, the cluster for word wi at test time is

~ti = one hot

(
argmax
1≤j≤k

aij

)

where the function one hot returns a one-hot vec-
tor of length k with a 1 in the index given by its ar-
gument. These argmax operations can be precom-
puted for all words in V , permitting us to discard
the vk cluster probabilities and instead just store a
cluster pointer for each word, each of which will
only take O(log2 k) space.

Cluster Adjustment Embeddings (CAE).
While the cluster embedding model can lead to
large savings in parameters, it loses the ability to
model subtle distinctions among words, especially
as k decreases. We propose a modification (cluster
adjustment embeddings; CAE) that represents
a word by concatenating its cluster embedding
with a short unique vector for the word. If we
think of cluster embeddings as centroids for each
cluster, this model provides a way to adjust or
correct the cluster embedding for each word,
while still leveraging parameter sharing via the
cluster embeddings. For all CAE experiments
below, we use a 1-dimensional vector (i.e., a
scalar) as the unique vector for each word that
gets concatenated to the cluster embedding.

Mixture Embeddings (ME). Finally, we con-
sider a variation (mixture embeddings; ME) in
which the most frequent u words use unique em-
beddings and the remaining words use cluster em-
beddings. The words with unique embeddings are
selected based on word frequency in the training
data, with the intuition that frequent words are po-
tentially useful for the task and contain enough in-
stances to learn unique embedding parameters.

4 Experimental setup

We evaluate our embedding models on five text
classification datasets: AG News, DBpedia, Yelp
Review Polarity, Yelp Review Full (Zhang et al.,

0.05 0.10 0.15 0.20
0.86

0.88

0.90

0.92

ME
CAE
SE
CE

(a) AG News

0.05 0.10 0.15 0.20
0.95

0.96

0.97

0.98

0.99

(b) DBpedia

0.05 0.10 0.15 0.20

0.62

0.64

0.66

(c) Yelp Full

0.05 0.10 0.15 0.20

0.94

0.95

0.96

(d) Yelp Polarity

Figure 2: Development accuracy vs model size (MB)
on four datasets. ME consistently outperforms other
models under various size budgets.

2015), and the IMDB movie review dataset (Maas
et al., 2011). We randomly sample 5,000 instances
from the training set to use as development data
for all datasets except for IMDB, where we sam-
ple 2,000. Table 1 shows dataset statistics. For
IMDB, to make our results comparable to Shu and
Nakayama (2018), we follow their experimental
setup: We tokenize and lowercase the IMDB data
using NLTK and truncate each review to be at most
400 words. For the other datasets, we lowercase
and tokenize the sentences using regular expres-
sions based on Kim (2014).

For optimization, we use Adam (Kingma and
Ba, 2015) with learning rate 0.001. Embedding
matrices are randomly initialized for all models.
To reduce the hyperparameter search space, the
LSTM hidden vector size is set to 50 for all ex-
periments and the Gumbel-Softmax temperature
is fixed to 0.9. When a single result is reported,
all other hyperparameters (vocabulary size v,
embedding dimension m, number of clusters k,
and number of unique vectors u) are tuned based
on the development sets. Our code is implemented
in TensorFlow (Abadi et al., 2015) and is available
at https://github.com/mingdachen/
word-cluster-embedding.

5 Results

When evaluating our models, we are concerned
with both accuracy and model size. We vary hy-
perparameters to obtain a range of model sizes for
each embedding parameterization, then train mod-
els for each set of hyperparameter values. In Fig-

741



AG News DBPedia Yelp Full Yelp Polarity
size 0.05 0.1 0.05 0.1 0.05 0.1 0.05 0.1
SE 84.8 90.4 95.3 98.1 59.2 62.6 93.4 95.5
CE 89.2 90.7 96.9 97.9 60.3 61.0 93.9 94.4
CAE 86.3 90.7 96.1 98.1 61.2 62.3 93.7 95.3
ME 90.3 91.5 97.5 98.3 61.4 63.4 95.2 95.8

Table 2: Test results. Model sizes are in MB.

ure 2, we plot development accuracies across the
range of model sizes on four datasets. Model sizes
are calculated using the formula given in the ap-
pendix.

When the model size is extremely small (e.g.,
less than 0.1 MB in AG News), our cluster models
outperform the standard parameterization (SE). As
model size increases, the standard model becomes
better and better, though it does not outperform
ME. While CE is weak on the Yelp tasks, which
could be attributed to the difficulty of 5-way senti-
ment classification, we see clear improvements by
adding small amounts of word-specific informa-
tion via CAE and ME. ME consistently performs
well compared to the others across model sizes.

We report test results in Table 2. The test re-
sults are reported based on model performance on
the development set for different model sizes. The
models are consistent between development and
test, as our cluster models with max size 0.05MB
outperform SE across datasets, with ME having
the highest accuracies.

On IMDB, we compare our methods to compo-
sitional coding (Shu and Nakayama, 2018). This
method learns an efficient coding of word em-
beddings via the summation of embeddings from
multiple clusterings. The clusterings and cluster
embeddings are learned offline to reconstruct pre-
trained GloVe vectors (Pennington et al., 2014).
We recalculated the embedding sizes from Shu
and Nakayama (2018) using our formula (in the
appendix). We also reimplemented their compo-
sitional coding as another embedding model and
trained it in an end-to-end fashion. We use the
best model configuration from Shu and Nakayama
(2018) and do grid search for the embedding di-
mension. As for the vocabulary size v, we find
models perform better with small values, and thus
we fix it to v = 3000.

Results are shown in Table 3. Compared with
compositional coding, our models perform much
better with a much smaller set of embedding pa-
rameters even when we use a smaller number of
cluster embeddings (e.g., compare 8 × 8 coding

embedding model acc.
size (MB) size (MB) (%)

GloVe baseline 85.947 - 87.18
8 × 8 coding 0.288 - 82.84
16 × 32 coding 1.302 - 87.37
64 × 8 coding 2.305 - 88.15
64 × 8 coding (m = 90) 0.245 0.353 83.43
SE (|V | = 3000, m = 8) 0.092 0.137 86.84
CE (k = 50, m = 5) 0.004 0.046 85.58
CAE (k = 50, m = 5) 0.016 0.058 86.94
ME (k = 50, u = 300, m = 5) 0.009 0.051 88.22

Table 3: IMDB test results. The four rows above the
dashed line are from Shu and Nakayama (2018); our
results are below it.

words
1 million week third percent which 000 ago reports once
2 are after from has another down home than but end
3 official security china international country court city
4 heavyweights operational coordinated healing rewarded
5 com internet technology ibm google research windows
6 market quarter sales deals bid growth trade economic
7 championship yankees defense player contract football
8 troops press attack forces peace iran led army killing

Table 4: Word clusters learned using CE model on AG
News. Each row is a different cluster.

to CE; both use a comparable number of cluster
embedding vectors, while CE works better). ME
(with k = 50 clusters and unique embeddings for
the u = 300 most frequent words) outperforms all
other models while retaining a small model size.
CAE performs better than SE, but uses more pa-
rameters than CE. We find a better trade-off with
ME, which only adds parameters to the most fre-
quent words.

6 Discussion

6.1 Cluster Analysis

Table 4 shows clusters learned via CE on the AG
News dataset. Cluster 1 appears to contain words
that are related to quantities such as times and
numbers while cluster 2 mostly contains preposi-
tions and other function words. The connection to
the AG News labels (World, Sports, Business, and
Sci/Tech) is more clear in the subsequent clusters.
Clusters 3 and 8 are related to World, cluster 4 may
relate to World or Sports, clusters 5 and 6 are re-
lated to Sci/Tech, and cluster 7 is related to Sports.

6.2 Impact of Hyperparameters

Figure 3 shows the relationship between accuracy
and several hyperparameters. Figure 3a shows
the effect of embedding dimension on SE mod-
els. One-dimensional embeddings work reason-

742



2 4 6 8 10
0.6

0.7

0.8

0.9

1.0

Yelp-P.
Yelp-F.
AGNews
DBPedia

(a) SE embedding dim. (m)

0 500 1000 1500 2000

0.7

0.8

0.9

1.0

Yelp-P.
Yelp-F.
AGNews
DBPedia

(b) ME # unique emb. (u)

0 20000 40000
0.86

0.88

0.90

0.92

ME
CAE
SE
CE

(c) Vocab. size (AG News)

20 40 60 80 100
0.8

0.9

1.0

ME
CAE
CE

(d) # clusters (AG News)

Figure 3: Dev. accuracy vs. hyperparameters.

ably well, but the largest accuracy gains occur
when increasing dimensionality from 1 to 2. Con-
sider the LSTM gating functions, which consist
of a nonlinearity applied to U1x + U2h, where
x is a word embedding, h is a hidden state, and
U1, U2 are parameters. We can think of these func-
tions as doing affine transformations on the hidden
state. So, in the one-dimensional case, the trans-
formations that a word vector can do are restricted
to translation. However, when word vectors have
more than two dimensions, they can do almost any
affine transformation. To further investigate this,
we experimented with simple recurrent neural net-
works (RNNs) with very small word embedding
dimensionalities in the appendix.

Figure 3b shows that for most datasets, increas-
ing the number of unique embedding vectors (u)
in ME helps for the Yelp datasets, especially early
on, but u = 500 appears sufficient to capture most
of the accuracy. Since similar trends are observed
across different datasets, we only plot results for
AG News in the final two plots. In Figure 3c,
there is a clear boundary after which vocabulary
size has minimal effect on accuracy. In Figure 3d,
we observe that the number of clusters does not
have much impact.

The main differences among CE, CAE, and ME
are the ways they balance precision of embed-
ding vectors and overall model size. CE forgets
word identities and uses common parameters for
all words in a cluster. Therefore it is expected
that it should perform best only when all models
are restricted to be extremely small. CAE adds
parameters evenly across all words in the vocab-
ulary while ME focuses its additional parameters

0.2 0.4 0.6 0.8 1.0
data size

0.65

0.70

0.75

0.80

0.85

ac
cu

ra
cy

ME
CAE
SE
CE

Figure 4: Varying the fraction of training data used on
the IMDB task.

on the most frequent words. Our results show that
devoting parameters to the most frequent words
achieves the best balance and consistently strong
results. The most frequent words in the training
set are likely to be those most closely related to
the task. Higher frequency also means more train-
ing data for the word’s embedding parameters.

6.3 Impact of Training Data Size

Figure 4 shows test accuracies when varying the
size of the training set for the IMDB task. The
clustering models need relatively large amounts
of training data, because they actually may have
more parameters to learn during training due to the
cluster membership probabilities for each word.
We suspect this is why ME underperforms SE and
CAE with small training sets. Even though ME
permits very small deployed models, it still re-
quires a substantial training set to learn its cluster
membership probabilities.

7 Conclusions and Future Work

We proposed word embedding parameterizations
that dramatically reduce the number of parameters
at test time while achieving comparable or bet-
ter performance. Our methods are applicable to
other neural methods that use word embeddings
or any kind of parameter lookup data structure.
Future work will incorporate pretrained word em-
beddings into these cluster parameterizations and
apply them to additional tasks.

Acknowledgments

We thank Qingming Tang for helpful discussions
and the anonymous reviewers for their comments.

743



References
Martı́n Abadi, Ashish Agarwal, Paul Barham, Eugene

Brevdo, Zhifeng Chen, Craig Citro, Greg S. Cor-
rado, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Ian Goodfellow, Andrew Harp,
Geoffrey Irving, Michael Isard, Yangqing Jia, Rafal
Jozefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh
Levenberg, Dandelion Mané, Rajat Monga, Sherry
Moore, Derek Murray, Chris Olah, Mike Schus-
ter, Jonathon Shlens, Benoit Steiner, Ilya Sutskever,
Kunal Talwar, Paul Tucker, Vincent Vanhoucke,
Vijay Vasudevan, Fernanda Viégas, Oriol Vinyals,
Pete Warden, Martin Wattenberg, Martin Wicke,
Yuan Yu, and Xiaoqiang Zheng. 2015. Tensor-
Flow: Large-scale machine learning on heteroge-
neous systems. Software available from tensor-
flow.org. https://www.tensorflow.org/.

Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and
Christian Jauvin. 2003. A neural probabilistic lan-
guage model. Journal of machine learning research
3(Feb):1137–1155.

Jan A. Botha, Emily Pitler, Ji Ma, Anton Bakalov,
Alex Salcianu, David Weiss, Ryan McDonald, and
Slav Petrov. 2017. Natural language processing
with small feed-forward networks. In Proceed-
ings of the 2017 Conference on Empirical Meth-
ods in Natural Language Processing. Association
for Computational Linguistics, pages 2879–2885.
http://aclweb.org/anthology/D17-1309.

Peter F. Brown, Peter V. deSouza, Robert L. Mercer,
T. J. Watson, Vincent J. Della Pietra, and Jenifer C.
Lai. 1992. Class-based n-gram models of nat-
ural language. Computational Linguistics 18(4).
http://www.aclweb.org/anthology/J92-4003.

Song Han, Huizi Mao, and William J Dally. 2016.
Deep compression: Compressing deep neural net-
works with pruning, trained quantization and huff-
man coding. In International Conference on Learn-
ing Representations.

Song Han, Jeff Pool, John Tran, and William Dally.
2015. Learning both weights and connections
for efficient neural network. In C. Cortes, N. D.
Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett,
editors, Advances in Neural Information Processing
Systems 28, Curran Associates, Inc., pages 1135–
1143. http://papers.nips.cc/paper/5784-learning-
both-weights-and-connections-for-efficient-neural-
network.pdf.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation
9(8):1735–1780.

Eric Jang, Shixiang Gu, and Ben Poole. 2016. Categor-
ical reparameterization with Gumbel-softmax. In
International Conference on Learning Representa-
tions.

Herve Jegou, Matthijs Douze, and Cordelia Schmid.
2011. Product quantization for nearest neighbor

search. IEEE Transactions on Pattern Analysis and
Machine Intelligence 33(1):117–128.

Armand Joulin, Edouard Grave, Piotr Bojanowski,
Matthijs Douze, Hervé Jégou, and Tomas Mikolov.
2017. Fasttext.zip: Compressing text classification
models. In International Conference on Learning
Representations.

Yoon Kim. 2014. Convolutional neural networks
for sentence classification. In Proceedings of the
2014 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP). Association
for Computational Linguistics, pages 1746–1751.
https://doi.org/10.3115/v1/D14-1181.

Diederik Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In International
Conference on Learning Representations.

Andrew L. Maas, Raymond E. Daly, Peter T. Pham,
Dan Huang, Andrew Y. Ng, and Christopher Potts.
2011. Learning word vectors for sentiment anal-
ysis. In Proceedings of the 49th Annual Meet-
ing of the Association for Computational Lin-
guistics: Human Language Technologies. Associa-
tion for Computational Linguistics, pages 142–150.
http://www.aclweb.org/anthology/P11-1015.

Chris J Maddison, Andriy Mnih, and Yee Whye Teh.
2016. The concrete distribution: A continuous re-
laxation of discrete random variables. In Interna-
tional Conference on Learning Representations.

Jeffrey Pennington, Richard Socher, and Christo-
pher Manning. 2014. GloVe: Global vectors
for word representation. In Proceedings of the
2014 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP). Association
for Computational Linguistics, pages 1532–1543.
https://doi.org/10.3115/v1/D14-1162.

Raphael Shu and Hideki Nakayama. 2018. Compress-
ing word embeddings via deep compositional code
learning. In International Conference on Learning
Representations.

Dan Tito Svenstrup, Jonas Hansen, and Ole Winther.
2017. Hash embeddings for efficient word repre-
sentations. In I. Guyon, U. V. Luxburg, S. Bengio,
H. Wallach, R. Fergus, S. Vishwanathan, and R. Gar-
nett, editors, Advances in Neural Information Pro-
cessing Systems 30, Curran Associates, Inc., pages
4928–4936. http://papers.nips.cc/paper/7078-hash-
embeddings-for-efficient-word-representations.pdf.

Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015.
Character-level convolutional networks for text
classification. In C. Cortes, N. D. Lawrence,
D. D. Lee, M. Sugiyama, and R. Garnett, editors,
Advances in Neural Information Processing Sys-
tems 28, Curran Associates, Inc., pages 649–657.
http://papers.nips.cc/paper/5782-character-level-
convolutional-networks-for-text-classification.pdf.

744



Embedding Dimension 1 2 3
Accuracy 0.82 0.78 0.84

Table 5: IMDB test results for RNN with different em-
bedding dimensions.

A Model Size Calculation

Let the model have vocabulary size v, k embed-
ding vectors, embedding dimensionm, and o other
parameters. To compute model sizes, we assume
each cluster pointer is stored using dlog2 ke bits
and that other parameters are stored using 32 bits.
For the CE model, for example, model size can be
calculated based on the following formula:

v ∗ dlog2 ke+ k ∗m ∗ 32 + o ∗ 32

B Impact of Word Embedding
Dimension

(a) 1-dim. word embeddings (b) 2-dim. word embeddings

(c) 3-dim. word embeddings

1 2 3
0.000
0.025
0.050
0.075
0.100
0.125
0.150
0.175

0.06

0.13

0.19

(d) Area ratio vs. dimension

Figure 5: Plots of 2-dimensional RNN hidden states
when varying word embedding dimensionality.

In order to look into the impact of word embed-
ding dimension, we run experiments on AG News
using an RNN with 2-dimensional hidden states
instead of an LSTM. Figure 5 plots the final hid-
den states of the RNN with various embedding di-
mensions.

When embeddings have one dimension (Fig-
ure 5a), most of the hidden states roughly lie on
a line, which is expected considering the limited
transformation a scalar can do. As the dimension

increases, the hidden states become more spread
out. To evaluate this phenomena quantitatively, we
calculate the area ratio that hidden states have cov-
ered, which is shown in Figure 5d. The area ratio
increases monotonically with increasing embed-
ding dimension. We also report the correspond-
ing test accuracies in Table 5. The classification
accuracy does not necessarily improve from larger
usage of space. The reason for this could be the
vanishing gradient problem in simple RNNs.

745


