



















































Generative Topic Embedding: a Continuous Representation of Documents


Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 666–675,
Berlin, Germany, August 7-12, 2016. c©2016 Association for Computational Linguistics

Generative Topic Embedding: a Continuous Representation of Documents

Shaohua Li1,2 Tat-Seng Chua1 Jun Zhu3 Chunyan Miao2
shaohua@gmail.com dcscts@nus.edu.sg dcszj@tsinghua.edu.cn ascymiao@ntu.edu.sg

1. School of Computing, National University of Singapore
2. Joint NTU-UBC Research Centre of Excellence in Active Living for the Elderly (LILY)

3. Department of Computer Science and Technology, Tsinghua University

Abstract

Word embedding maps words into a low-
dimensional continuous embedding space
by exploiting the local word collocation
patterns in a small context window. On
the other hand, topic modeling maps docu-
ments onto a low-dimensional topic space,
by utilizing the global word collocation
patterns in the same document. These
two types of patterns are complementary.
In this paper, we propose a generative
topic embedding model to combine the
two types of patterns. In our model, topics
are represented by embedding vectors, and
are shared across documents. The proba-
bility of each word is influenced by both
its local context and its topic. A variational
inference method yields the topic embed-
dings as well as the topic mixing propor-
tions for each document. Jointly they rep-
resent the document in a low-dimensional
continuous space. In two document clas-
sification tasks, our method performs bet-
ter than eight existing methods, with fewer
features. In addition, we illustrate with an
example that our method can generate co-
herent topics even based on only one doc-
ument.

1 Introduction

Representing documents as fixed-length feature
vectors is important for many document process-
ing algorithms. Traditionally documents are rep-
resented as a bag-of-words (BOW) vectors. How-
ever, this simple representation suffers from being
high-dimensional and highly sparse, and loses se-
mantic relatedness across the vector dimensions.

Word Embedding methods have been demon-
strated to be an effective way to represent words

as continuous vectors in a low-dimensional em-
bedding space (Bengio et al., 2003; Mikolov et al.,
2013; Pennington et al., 2014; Levy et al., 2015).
The learned embedding for a word encodes its
semantic/syntactic relatedness with other words,
by utilizing local word collocation patterns. In
each method, one core component is the embed-
ding link function, which predicts a word’s distri-
bution given its context words, parameterized by
their embeddings.

When it comes to documents, we wish to find a
method to encode their overall semantics. Given
the embeddings of each word in a document, we
can imagine the document as a “bag-of-vectors”.
Related words in the document point in similar di-
rections, forming semantic clusters. The centroid
of a semantic cluster corresponds to the most rep-
resentative embedding of this cluster of words, re-
ferred to as the semantic centroids. We could use
these semantic centroids and the number of words
around them to represent a document.

In addition, for a set of documents in a partic-
ular domain, some semantic clusters may appear
in many documents. By learning collocation pat-
terns across the documents, the derived semantic
centroids could be more topical and less noisy.

Topic Models, represented by Latent Dirichlet
Allocation (LDA) (Blei et al., 2003), are able to
group words into topics according to their colloca-
tion patterns across documents. When the corpus
is large enough, such patterns reflect their seman-
tic relatedness, hence topic models can discover
coherent topics. The probability of a word is gov-
erned by its latent topic, which is modeled as a
categorical distribution in LDA. Typically, only a
small number of topics are present in each docu-
ment, and only a small number of words have high
probability in each topic. This intuition motivated
Blei et al. (2003) to regularize the topic distribu-
tions with Dirichlet priors.

666



Semantic centroids have the same nature as top-
ics in LDA, except that the former exist in the em-
bedding space. This similarity drives us to seek the
common semantic centroids with a model similar
to LDA. We extend a generative word embedding
model PSDVec (Li et al., 2015), by incorporating
topics into it. The new model is named TopicVec.
In TopicVec, an embedding link function models
the word distribution in a topic, in place of the cat-
egorical distribution in LDA. The advantage of the
link function is that the semantic relatedness is al-
ready encoded as the cosine distance in the em-
bedding space. Similar to LDA, we regularize the
topic distributions with Dirichlet priors. A varia-
tional inference algorithm is derived. The learning
process derives topic embeddings in the same em-
bedding space of words. These topic embeddings
aim to approximate the underlying semantic cen-
troids.

To evaluate how well TopicVec represents doc-
uments, we performed two document classifica-
tion tasks against eight existing topic modeling or
document representation methods. Two setups of
TopicVec outperformed all other methods on two
tasks, respectively, with fewer features. In addi-
tion, we demonstrate that TopicVec can derive co-
herent topics based only on one document, which
is not possible for topic models.

The source code of our implementation is avail-
able at https://github.com/askerlee/topicvec.

2 Related Work

Li et al. (2015) proposed a generative word em-
bedding method PSDVec, which is the precur-
sor of TopicVec. PSDVec assumes that the con-
ditional distribution of a word given its context
words can be factorized approximately into inde-
pendent log-bilinear terms. In addition, the word
embeddings and regression residuals are regular-
ized by Gaussian priors, reducing their chance of
overfitting. The model inference is approached by
an efficient Eigendecomposition and blockwise-
regression method (Li et al., 2016b). TopicVec
differs from PSDVec in that in the conditional dis-
tribution of a word, it is not only influenced by its
context words, but also by a topic, which is an em-
bedding vector indexed by a latent variable drawn
from a Dirichlet-Multinomial distribution.

Hinton and Salakhutdinov (2009) proposed to
model topics as a certain number of binary hidden
variables, which interact with all words in the doc-

ument through weighted connections. Larochelle
and Lauly (2012) assigned each word a unique
topic vector, which is a summarization of the con-
text of the current word.

Huang et al. (2012) proposed to incorporate
global (document-level) semantic information to
help the learning of word embeddings. The global
embedding is simply a weighted average of the
embeddings of words in the document.

Le and Mikolov (2014) proposed Paragraph
Vector. It assumes each piece of text has a la-
tent paragraph vector, which influences the distri-
butions of all words in this text, in the same way
as a latent word. It can be viewed as a special case
of TopicVec, with the topic number set to 1. Typ-
ically, however, a document consists of multiple
semantic centroids, and the limitation of only one
topic may lead to underfitting.

Nguyen et al. (2015) proposed Latent Feature
Topic Modeling (LFTM), which extends LDA to
incorporate word embeddings as latent features.
The topic is modeled as a mixture of the con-
ventional categorical distribution and an embed-
ding link function. The coupling between these
two components makes the inference difficult.
They designed a Gibbs sampler for model infer-
ence. Their implementation1 is slow and infeasi-
ble when applied to a large corpous.

Liu et al. (2015) proposed Topical Word Em-
bedding (TWE), which combines word embed-
ding with LDA in a simple and effective way.
They train word embeddings and a topic model
separately on the same corpus, and then average
the embeddings of words in the same topic to get
the embedding of this topic. The topic embedding
is concatenated with the word embedding to form
the topical word embedding of a word. In the end,
the topical word embeddings of all words in a doc-
ument are averaged to be the embedding of the
document. This method performs well on our two
classification tasks. Weaknesses of TWE include:
1) the way to combine the results of word embed-
ding and LDA lacks statistical foundations; 2) the
LDA module requires a large corpus to derive se-
mantically coherent topics.

Das et al. (2015) proposed Gaussian LDA. It
uses pre-trained word embeddings. It assumes that
words in a topic are random samples from a mul-
tivariate Gaussian distribution with the topic em-
bedding as the mean. Hence the probability that a

1https://github.com/datquocnguyen/LFTM/

667



Name Description
S Vocabulary {s1, · · · , sW}
V Embedding matrix (vs1 , · · · ,vsW )
D Document set {d1, · · · , dM}
vsi Embedding of word si

asisj ,A Bigram residuals

tik,T i Topic embeddings in doc di
rik, ri Topic residuals in doc di
zij Topic assignment of the j-th word j in doc di
φi Mixing proportions of topics in doc di

Table 1: Table of notations

word belongs to a topic is determined by the Eu-
clidean distance between the word embedding and
the topic embedding. This assumption might be
improper as the Euclidean distance is not an opti-
mal measure of semantic relatedness between two
embeddings2.

3 Notations and Definitions

Throughout this paper, we use uppercase bold let-
ters such as S,V to denote a matrix or set, low-
ercase bold letters such as vwi to denote a vector,
a normal uppercase letter such as N,W to denote
a scalar constant, and a normal lowercase letter as
si, wi to denote a scalar variable.

Table 1 lists the notations in this paper.
In a document, a sequence of words is referred

to as a text window, denoted by wi, · · · , wi+l,
or wi:wi+l. A text window of chosen size c
before a word wi defines the context of wi as
wi−c, · · · , wi−1. Here wi is referred to as the fo-
cus word. Each context word wi−j and the focus
word wi comprise a bigram wi−j , wi.

We assume each word in a document is seman-
tically similar to a topic embedding. Topic embed-
dings reside in the same N -dimensional space as
word embeddings. When it is clear from context,
topic embeddings are often referred to as topics.
Each document has K candidate topics, arranged
in the matrix form T i = (ti1 · · · tiK), referred to
as the topic matrix. Specifically, we fix ti1 = 0,
referring to it as the null topic.

In a document di, each word wij is assigned to
a topic indexed by zij ∈ {1, · · · ,K}. Geometri-
cally this means the embedding vwij tends to align

2Almost all modern word embedding methods adopt the
exponentiated cosine similarity as the link function, hence the
cosine similarity may be assumed to be a better estimate of
the semantic relatedness between embeddings derived from
these methods.

with the direction of ti,zij . Each topic tik has a
document-specific prior probability to be assigned
to a word, denoted as φik = P (k|di). The vector
φi = (φi1, · · · , φiK) is referred to as the mixing
proportions of these topics in document di.

4 Link Function of Topic Embedding

In this section, we formulate the distribution of a
word given its context words and topic, in the form
of a link function.

The core of most word embedding methods is a
link function that connects the embeddings of a fo-
cus word and its context words, to define the distri-
bution of the focus word. Li et al. (2015) proposed
the following link function:

P (wc | w0 : wc−1)

≈P (wc) exp
{
v>wc

c−1∑
l=0

vwl +
c−1∑
l=0

awlwc

}
. (1)

Here awlwc is referred as the bigram resid-
ual, indicating the non-linear part not captured by
v>wcvwl . It is essentially the logarithm of the nor-
malizing constant of a softmax term. Some litera-
ture, e.g. (Pennington et al., 2014), refers to such
a term as a bias term.

(1) is based on the assumption that the con-
ditional distribution P (wc | w0 : wc−1) can
be factorized approximately into independent log-
bilinear terms, each corresponding to a context
word. This approximation leads to an efficient and
effective word embedding algorithm PSDVec (Li
et al., 2015). We follow this assumption, and pro-
pose to incorporate the topic of wc in a way like a
latent word. In particular, in addition to the con-
text words, the corresponding embedding tik is in-
cluded as a new log-bilinear term that influences
the distribution of wc. Hence we obtain the fol-
lowing extended link function:

P (wc | w0:wc−1, zc, di) ≈ P (wc)·

exp
{
v>wc

(c−1∑
l=0

vwl + tzc
)

+
c−1∑
l=0

awlwc+rzc
}
, (2)

where di is the current document, and rzc is the
logarithm of the normalizing constant, named the
topic residual. Note that the topic embeddings tzc
may be specific to di. For simplicity of notation,
we drop the document index in tzc . To restrict
the impact of topics and avoid overfitting, we con-
strain the magnitudes of all topic embeddings, so
that they are always within a hyperball of radius γ.

668



w1 · · ·w0 wc

zc

θd

α

vsi

µi

Word Embeddings asisj

hij

Residuals

Gaussian Gaussian

Mult

Dir

tTopic Embeddings

wc ∈ d

T
d ∈ D

Documents

V A

Figure 1: Graphical representation of TopicVec.

It is infeasible to compute the exact value of the
topic residual rk. We approximate it by the context
size c = 0. Then (2) becomes:

P (wc | k, di) = P (wc) exp
{
v>wctk + rk

}
. (3)

It is required that
∑

wc∈S P (wc | k) = 1 to
make (3) a distribution. It follows that

rk = − log
(∑
sj∈S

P (sj) exp{v>sjtk}
)
. (4)

(4) can be expressed in the matrix form:

r = − log(u exp{V >T }), (5)
whereu is the row vector of unigram probabilities.

5 Generative Process and Likelihood

The generative process of words in documents can
be regarded as a hybrid of LDA and PSDVec.
Analogous to PSDVec, the word embedding vsi
and residual asisj are drawn from respective Gaus-
sians. For the sake of clarity, we ignore their gen-
eration steps, and focus on the topic embeddings.
The remaining generative process is as follows:

1. For the k-th topic, draw a topic embedding uni-
formly from a hyperball of radius γ, i.e. tk ∼
Unif(Bγ);

2. For each document di:

(a) Draw the mixing proportions φi from the
Dirichlet prior Dir(α);

(b) For the j-th word:
i. Draw topic assignment zij from the cate-

gorical distribution Cat(φi);
ii. Draw word wij from S according to
P (wij | wi,j−c:wi,j−1, zij , di).

The above generative process is presented in plate
notation in Figure (1).

5.1 Likelihood Function
Given the embeddings V , the bigram residuals
A, the topics T i and the hyperparameter α, the
complete-data likelihood of a single document di
is:

p(di,Zi,φi|α,V ,A,T i)
=p(φi|α)p(Zi|φi)p(di|V ,A,T i,Zi)

=
Γ(
∑K

k=1 αk)∏K
k=1 Γ(αk)

K∏
j=1

φ
αj−1
ij ·

Li∏
j=1

(
φi,zijP (wij)

· exp
{
v>wij

( j−1∑
l=j−c

vwil + tzij
)

+
j−1∑
l=j−c

awilwij + ri,zij

})
, (6)

where Zi = (zi1, · · · , ziLi), and Γ(·) is the
Gamma function.

Let Z,T ,φ denote the collection of all the
document-specific {Zi}Mi=1, {T i}Mi=1, {φi}Mi=1,
respectively. Then the complete-data likelihood
of the whole corpus is:

p(D,A,V ,Z,T ,φ|α, γ,µ)

=
W∏
i=1

P (vsi ;µi)
W,W∏
i,j=1

P (asisj ; f(hij))
K∏
k

Unif(Bγ)

·
M∏
i=1

{p(φi|α)p(Zi|φi)p(di|V ,A,T i,Zi)}

=
1

Z(H,µ)UKγ
exp{−

W,W∑
i,j=1

f(hi,j)a2sisj−
W∑
i=1

µi‖vsi‖2}

·
M∏
i=1

{
Γ(
∑K

k=1 αk)∏K
k=1 Γ(αk)

K∏
j=1

φ
αj−1
ij ·

Li∏
j=1

(
φi,zijP (wij)

· exp
{
v>wij

( j−1∑
l=j−c

vwil+tzij
)

+
j−1∑
l=j−c

awilwij +ri,zij
})}

,

(7)

where P (vsi ;µi) and P (asisj ; f(hij)) are the two
Gaussian priors as defined in (Li et al., 2015).

669



Following the convention in (Li et al., 2015),
hij ,H are empirical bigram probabilities, µ are
the embedding magnitude penalty coefficients,
andZ(H,µ) is the normalizing constant for word
embeddings. Uγ is the volume of the hyperball of
radius γ.

Taking the logarithm of both sides, we obtain

log p(D,A,V ,Z,T ,φ|α, γ,µ)

=C0 − logZ(H,µ)− ‖A‖2f(H) −
W∑
i=1

µi‖vsi‖2

+
M∑
i=1

{ K∑
k=1

log φik(mik + αk − 1) +
Li∑
j=1

(
ri,zij

+v>wij
( j−1∑
l=j−c

vwil + tzij
)

+
j−1∑
l=j−c

awilwij

)}
, (8)

wheremik =
∑Li

j=1 δ(zij = k) counts the number
of words assigned with the k-th topic in di, C0 =

M log Γ(
∑K

k=1 αk)∏K
k=1 Γ(αk)

+
∑M,Li

i,j=1 logP (wij)−K logUγ
is constant given the hyperparameters.

6 Variational Inference Algorithm

6.1 Learning Objective and Process

Given the hyperparameters α, γ,µ, the learning
objective is to find the embeddings V , the topics
T , and the word-topic and document-topic distri-
butions p(Zi,φi|di,A,V ,T ). Here the hyperpa-
rameters α, γ,µ are kept constant, and we make
them implicit in the distribution notations.

However, the coupling between A,V and
T ,Z,φ makes it inefficient to optimize them si-
multaneously. To get around this difficulty, we
learn word embeddings and topic embeddings sep-
arately. Specifically, the learning process is di-
vided into two stages:

1. In the first stage, considering that the topics
have a relatively small impact to word dis-
tributions and the impact might be “averaged
out” across different documents, we simplify
the model by ignoring topics temporarily. Then
the model falls back to the original PSDVec.
The optimal solution V ∗,A∗ is obtained ac-
cordingly;

2. In the second stage, we treat V ∗,A∗ as
constant, plug it into the likelihood func-
tion, and find the corresponding optimal
T ∗, p(Z,φ|D,A∗,V ∗,T ∗) of the full model.

As in LDA, this posterior is analytically in-
tractable, and we use a simpler variational dis-
tribution q(Z,φ) to approximate it.

6.2 Mean-Field Approximation and
Variational GEM Algorithm

In this stage, we fix V = V ∗,A = A∗, and
seek the optimal T ∗, p(Z,φ|D,A∗,V ∗,T ∗). As
V ∗,A∗ are constant, we also make them implicit
in the following expressions.

For an arbitrary variational distribution
q(Z,φ), the following equalities hold

Eq log
[
p(D,Z,φ|T )
q(Z,φ)

]
=Eq [log p(D,Z,φ|T )] +H(q)
= log p(D|T )− KL(q||p), (9)

where p = p(Z,φ|D,T ), H(q) is the entropy of
q. This implies

KL(q||p)
= log p(D|T )−

(
Eq [log p(D,Z,φ|T )] +H(q)

)
= log p(D|T )− L(q,T ). (10)

In (10), Eq [log p(D,Z,φ|T )] + H(q) is usu-
ally referred to as the variational free energy
L(q,T ), which is a lower bound of log p(D|T ).
Directly maximizing log p(D|T ) w.r.t. T is in-
tractable due to the hidden variables Z,φ, so we
maximize its lower bound L(q,T ) instead. We
adopt a mean-field approximation of the true pos-
terior as the variational distribution, and use a
variational algorithm to find q∗,T ∗ maximizing
L(q,T ).

The following variational distribution is used:

q(Z,φ;π,θ) = q(φ;θ)q(Z;π)

=
M∏
i=1

Dir(φi;θi)
Li∏
j=1

Cat(zij ;πij)

 . (11)
We can obtain (Li et al., 2016a)

L(q,T )

=
M∑
i=1

{
K∑
k=1

( Li∑
j=1

πkij + αk − 1
)(
ψ(θik)− ψ(θi0)

)

+ Tr(T >i
Li∑
j=1

vwijπ
>
ij) + r

>
i

Li∑
j=1

πij

}
+H(q) + C1, (12)

670



where T i is the topic matrix of the i-th docu-
ment, and ri is the vector constructed by con-
catenating all the topic residuals rik. C1 =
C0−logZ(H,µ)−‖A‖2f(H)−

∑W
i=1 µi‖vsi‖2+∑M,Li

i,j=1

(
v>wij

∑j−1
k=j−c vwik +

∑j−1
k=j−c awikwij

)
is

constant.
We proceed to optimize (12) with a General-

ized Expectation-Maximization (GEM) algorithm
w.r.t. q and T as follows:

1. Initialize all the topics T i = 0, and correspond-
ingly their residuals ri = 0;

2. Iterate over the following two steps until con-
vergence. In the l-th step:

(a) Let the topics and residuals be T =
T (l−1), r = r(l−1), find q(l)(Z,φ) that max-
imizes L(q,T (l−1)). This is the Expectation
step (E-step). In this step, log p(D|T ) is con-
stant. Then the q that maximizes L(q,T (l))
will minimize KL(q||p), i.e. such a q is the
closest variational distribution to p measured
by KL-divergence;

(b) Given the variational distribution q(l)(Z,φ),
find T (l), r(l) that improve L(q(l),T ), using
Gradient descent method. This is the gener-
alized Maximization step (M-step). In this
step, π,θ,H(q) are constant.

6.2.1 Update Equations of π,θ in E-Step
In the E-step, T = T (l−1), r = r(l−1) are con-
stant. Taking the derivative of L(q,T (l−1)) w.r.t.
πkij and θik, respectively, we can obtain the opti-
mal solutions (Li et al., 2016a) at:

πkij ∝ exp{ψ(θik) + v>wijtik + rik}. (13)

θik =
Li∑
j=1

πkij + αk. (14)

6.2.2 Update Equation of T i in M-Step
In the Generalized M-step, π = π(l),θ = θ(l) are
constant. For notational simplicity, we drop their
superscripts (l).

To update T i, we first take the derivative of
(12) w.r.t. T i, and then take the Gradient Descent
method.

The derivative is obtained as (Li et al., 2016a):

∂L(q(l),T )
∂T i

=
Li∑
j=1

vwijπ
>
ij +

K∑
k=1

m̄ik
∂rik
∂T i

, (15)

where m̄ik =
∑Li

j=1 π
k
ij = E[mik], the sum of

the variational probabilities of each word being as-
signed to the k-th topic in the i-th document. ∂rik∂T i
is a gradient matrix, whose j-th column is ∂rik∂tij .

Remind that rik = − log
(
EP (s)[exp{v>s tik}]

)
.

When j 6= k, it is easy to verify that ∂rik∂tij = 0.
When j = k, we have

∂rik
∂tik

= e−rik · EP (s)[exp{v>s tik}vs]

= e−rik ·
∑
s∈W

exp{v>s tik}P (s)vs

= e−rik · exp{t>ikV }(u ◦ V ), (16)
where u◦V is to multiply each column of V with
u element-by-element.

Therefore ∂rik∂T i = (0, · · ·
∂rik
∂tik

, · · · ,0). Plug-
ging it into (15), we obtain

∂L(q(l),T )
∂T i

=
Li∑
j=1

vwijπ
>
ij+(m̄i1

∂ri1
∂ti1

, · · · , m̄iK ∂riK
∂tiK

).

We proceed to optimize T i with a gradient de-
scent method:

T
(l)
i = T

(l−1) + λ(l, Li)
∂L(q(l),T )

∂T i
,

where λ(l, Li) = L0λ0l·max{Li,L0} is the learning rate
function, L0 is a pre-specified document length
threshold, and λ0 is the initial learning rate. As
the magnitude of ∂L(q

(l),T )
∂T i

is approximately pro-
portional to the document length Li, to avoid the
step size becoming too big a on a long document,
if Li > L0, we normalize it by Li.

To satisfy the constraint that ‖t(l)ik ‖ ≤ γ, when
t
(l)
ik > γ, we normalize it by γ/‖t(l)ik ‖.

After we obtain the new T , we update r(m)i us-
ing (5).

Sometimes, especially in the initial few itera-
tions, due to the excessively big step size of the
gradient descent, L(q,T ) may decrease after the
update of T . Nonetheless the general direction of
L(q,T ) is increasing.
6.3 Sharing of Topics across Documents
In principle we could use one set of topics across
the whole corpus, or choose different topics for
different subsets of documents. One could choose
a way to best utilize cross-document information.

For instance, when the document category in-
formation is available, we could make the docu-
ments in each category share their respective set

671



of topics, so that M categories correspond to M
sets of topics. In the learning algorithm, only the
update of πkij needs to be changed to cater for this
situation: when the k-th topic is relevant to the
document i, we update πkij using (13); otherwise
πkij = 0.

An identifiability problem may arise when we
split topic embeddings according to document
subsets. In different topic groups, some highly
similar redundant topics may be learned. If we
project documents into the topic space, portions
of documents in the same topic in different docu-
ments may be projected onto different dimensions
of the topic space, and similar documents may
eventually be projected into very different topic
proportion vectors. In this situation, directly us-
ing the projected topic proportion vectors could
cause problems in unsupervised tasks such as clus-
tering. A simple solution to this problem would be
to compute the pairwise similarities between topic
embeddings, and consider these similarities when
computing the similarity between two projected
topic proportion vectors. Two similar documents
will then still receive a high similarity score.

7 Experimental Results

To investigate the quality of document represen-
tation of our TopicVec model, we compared its
performance against eight topic modeling or doc-
ument representation methods in two document
classification tasks. Moreover, to show the topic
coherence of TopicVec on a single document, we
present the top words in top topics learned on a
news article.

7.1 Document Classification Evaluation
7.1.1 Experimental Setup
Compared Methods Two setups of TopicVec
were evaluated:

• TopicVec: the topic proportions learned by
TopicVec;
• TV+WV: the topic proportions, concate-

nated with the mean word embedding of the
document (same as the MeanWV below).

We compare the performance of our methods
against eight methods, including three topic mod-
eling methods, three continuous document repre-
sentation methods, and the conventional bag-of-
words (BOW) method. The count vector of BOW
is unweighted.

The topic modeling methods include:

• LDA: the vanilla LDA (Blei et al., 2003) in
the gensim library3;
• sLDA: Supervised Topic Model4 (McAuliffe

and Blei, 2008), which improves the predic-
tive performance of LDA by modeling class
labels;
• LFTM: Latent Feature Topic Modeling5

(Nguyen et al., 2015).
The document-topic proportions of topic modeling
methods were used as their document representa-
tion.

The document representation methods are:

• Doc2Vec: Paragraph Vector (Le and
Mikolov, 2014) in the gensim library6.
• TWE: Topical Word Embedding7 (Liu et

al., 2015), which represents a document
by concatenating average topic embedding
and average word embedding, similar to our
TV+WV;
• GaussianLDA: Gaussian LDA8 (Das et al.,

2015), which assumes that words in a topic
are random samples from a multivariate
Gaussian distribution with the mean as the
topic embedding. Similar to TopicVec, we
derived the posterior topic proportions as the
features of each document;
• MeanWV: The mean word embedding of the

document.
Datasets We used two standard document clas-
sification corpora: the 20 Newsgroups9 and the
ApteMod version of the Reuters-21578 corpus10.
The two corpora are referred to as the 20News and
Reuters in the following.

20News contains about 20,000 newsgroup doc-
uments evenly partitioned into 20 different cate-
gories. Reuters contains 10,788 documents, where
each document is assigned to one or more cate-
gories. For the evaluation of document classifi-
cation, documents appearing in two or more cate-
gories were removed. The numbers of documents
in the categories of Reuters are highly imbalanced,
and we only selected the largest 10 categories,
leaving us with 8,025 documents in total.

3https://radimrehurek.com/gensim/models/ldamodel.html
4http://www.cs.cmu.edu/˜chongw/slda/
5https://github.com/datquocnguyen/LFTM/
6https://radimrehurek.com/gensim/models/doc2vec.html
7https://github.com/largelymfs/topical word embeddings/
8https://github.com/rajarshd/Gaussian LDA
9http://qwone.com/˜jason/20Newsgroups/

10http://www.nltk.org/book/ch02.html

672



The same preprocessing steps were applied to
all methods: words were lowercased; stop words
and words out of the word embedding vocabulary
(which means that they are extremely rare) were
removed.

Experimental Settings TopicVec used the word
embeddings trained using PSDVec on a March
2015 Wikipedia snapshot. It contains the most fre-
quent 180,000 words. The dimensionality of word
embeddings and topic embeddings was 500. The
hyperparameters were α = (0.1, · · · , 0.1), γ = 5.
For 20news and Reuters, we specified 15 and 12
topics in each category on the training set, respec-
tively. The first topic in each category was al-
ways set to null. The learned topic embeddings
were combined to form the whole topic set, where
redundant null topics in different categories were
removed, leaving us with 281 topics for 20News
and 111 topics for Reuters. The initial learning
rate was set to 0.1. After 100 GEM iterations
on each dataset, the topic embeddings were ob-
tained. Then the posterior document-topic distri-
butions of the test sets were derived by performing
one E-step given the topic embeddings trained on
the training set.

LFTM includes two models: LF-LDA and LF-
DMM. We chose the better performing LF-LDA
to evaluate. TWE includes three models, and we
chose the best performing TWE-1 to compare.

LDA, sLDA, LFTM and TWE used the spec-
ified 50 topics on Reuters, as this is the optimal
topic number according to (Lu et al., 2011). On
the larger 20news dataset, they used the specified
100 topics. Other hyperparameters of all com-
pared methods were left at their default values.

GaussianLDA was specified 100 topics on
20news and 70 topics on Reuters. As each sam-
pling iteration took over 2 hours, we only had time
for 100 sampling iterations.

For each method, after obtaining the document
representations of the training and test sets, we
trained an `-1 regularized linear SVM one-vs-all
classifier on the training set using the scikit-learn
library11. We then evaluated its predictive perfor-
mance on the test set.

Evaluation metrics Considering that the largest
few categories dominate Reuters, we adopted
macro-averaged precision, recall and F1 measures
as the evaluation metrics, to avoid the average re-
sults being dominated by the performance of the

11http://scikit-learn.org/stable/modules/svm.html

20News Reuters

Prec Rec F1 Prec Rec F1

BOW 69.1 68.5 68.6 92.5 90.3 91.1

LDA 61.9 61.4 60.3 76.1 74.3 74.8

sLDA 61.4 60.9 60.9 88.3 83.3 85.1

LFTM 63.5 64.8 63.7 84.6 86.3 84.9

MeanWV 70.4 70.3 70.1 92.0 89.6 90.5
Doc2Vec 56.3 56.6 55.4 84.4 50.0 58.5

TWE 69.5 69.3 68.8 91.0 89.1 89.9

GaussianLDA 30.9 26.5 22.7 46.2 31.5 35.3

TopicVec 71.4 71.3 71.2 91.8 92.0 91.7
TV+WV1 72.1 71.9 71.8 91.4 91.9 91.5

1Combined features of TopicVec topic proportions and
MeanWV.

Table 2: Performance on multi-class text classifi-
cation. Best score is in boldface.

Avg. Features BOW MeanWV TWE TopicVec TV+WV

20News 50381 500 800 281 781

Reuters 17989 500 800 111 611

Table 3: Number of features of the five best per-
forming methods.

top categories.

Evaluation Results Table 2 presents the perfor-
mance of the different methods on the two clas-
sification tasks. The highest scores were high-
lighted with boldface. It can be seen that TV+WV
and TopicVec obtained the best performance on
the two tasks, respectively. With only topic pro-
portions as features, TopicVec performed slightly
better than BOW, MeanWV and TWE, and sig-
nificantly outperformed four other methods. The
number of features it used was much lower than
BOW, MeanWV and TWE (Table 3).

GaussianLDA performed considerably inferior
to all other methods. After checking the generated
topic embeddings manually, we found that the em-
beddings for different topics are highly similar to
each other. Hence the posterior topic proportions
were almost uniform and non-discriminative. In
addition, on the two datasets, even the fastest Alias
sampling in (Das et al., 2015) took over 2 hours for
one iteration and 10 days for the whole 100 itera-
tions. In contrast, our method finished the 100 EM
iterations in 2 hours.

673



Figure 2: Topic Cloud of the pharmaceutical com-
pany acquisition news.

7.2 Qualitative Assessment of Topics Derived
from a Single Document

Topic models need a large set of documents to ex-
tract coherent topics. Hence, methods depending
on topic models, such as TWE, are subject to this
limitation. In contrast, TopicVec can extract co-
herent topics and obtain document representations
even when only one document is provided as in-
put.

To illustrate this feature, we ran TopicVec on
a New York Times news article about a pharma-
ceutical company acquisition12, and obtained 20
topics.

Figure 2 presents the most relevant words in
the top-6 topics as a topic cloud. We first calcu-
lated the relevance between a word and a topic as
the frequency-weighted cosine similarity of their
embeddings. Then the most relevant words were
selected to represent each topic. The sizes of
the topic slices are proportional to the topic pro-
portions, and the font sizes of individual words
are proportional to their relevance to the topics.
Among these top-6 topics, the largest and small-
est topic proportions are 26.7% and 9.9%, respec-
tively.

As shown in Figure 2, words in obtained topics
were generally coherent, although the topics were

12http://www.nytimes.com/2015/09/21/business/a-huge-
overnight-increase-in-a-drugs-price-raises-protests.html

only derived from a single document. The reason
is that TopicVec takes advantage of the rich se-
mantic information encoded in word embeddings,
which were pretrained on a large corpus.

The topic coherence suggests that the derived
topic embeddings were approximately the seman-
tic centroids of the document. This capacity may
aid applications such as document retrieval, where
a “compressed representation” of the query docu-
ment is helpful.

8 Conclusions and Future Work

In this paper, we proposed TopicVec, a generative
model combining word embedding and LDA, with
the aim of exploiting the word collocation patterns
both at the level of the local context and the global
document. Experiments show that TopicVec can
learn high-quality document representations, even
given only one document.

In our classification tasks we only explored the
use of topic proportions of a document as its rep-
resentation. However, jointly representing a doc-
ument by topic proportions and topic embeddings
would be more accurate. Efficient algorithms for
this task have been proposed (Kusner et al., 2015).

Our method has potential applications in vari-
ous scenarios, such as document retrieval, classifi-
cation, clustering and summarization.

Acknowlegement

We thank Xiuchao Sui and Linmei Hu for their
help and support. We thank the anonymous men-
tor provided by ACL for the careful proofread-
ing. This research is funded by the National Re-
search Foundation, Prime Minister’s Office, Sin-
gapore under its IDM Futures Funding Initiative
and IRC@SG Funding Initiative administered by
IDMPO.

References
Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and

Christian Jauvin. 2003. A neural probabilistic lan-
guage model. Journal of Machine Learning Re-
search, pages 1137–1155.

David M Blei, Andrew Y Ng, and Michael I Jordan.
2003. Latent dirichlet allocation. the Journal of ma-
chine Learning research, 3:993–1022.

Rajarshi Das, Manzil Zaheer, and Chris Dyer. 2015.
Gaussian LDA for topic models with word embed-
dings. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Linguistics

674



and the 7th International Joint Conference on Natu-
ral Language Processing (Volume 1: Long Papers),
pages 795–804, Beijing, China, July. Association for
Computational Linguistics.

Geoffrey E Hinton and Ruslan R Salakhutdinov. 2009.
Replicated softmax: an undirected topic model. In
Advances in neural information processing systems,
pages 1607–1614.

Eric H Huang, Richard Socher, Christopher D Man-
ning, and Andrew Y Ng. 2012. Improving word
representations via global context and multiple word
prototypes. In Proceedings of the 50th Annual Meet-
ing of the Association for Computational Linguis-
tics: Long Papers-Volume 1, pages 873–882. Asso-
ciation for Computational Linguistics.

Matt Kusner, Yu Sun, Nicholas Kolkin, and Kilian Q.
Weinberger. 2015. From word embeddings to docu-
ment distances. In David Blei and Francis Bach, ed-
itors, Proceedings of the 32nd International Confer-
ence on Machine Learning (ICML-15), pages 957–
966. JMLR Workshop and Conference Proceedings.

Hugo Larochelle and Stanislas Lauly. 2012. A neural
autoregressive topic model. In Advances in Neural
Information Processing Systems, pages 2708–2716.

Quoc Le and Tomas Mikolov. 2014. Distributed repre-
sentations of sentences and documents. In Proceed-
ings of the 31st International Conference on Ma-
chine Learning (ICML-14), pages 1188–1196.

Omer Levy, Yoav Goldberg, and Ido Dagan. 2015. Im-
proving distributional similarity with lessons learned
from word embeddings. Transactions of the Associ-
ation for Computational Linguistics, 3:211–225.

Shaohua Li, Jun Zhu, and Chunyan Miao. 2015. A
generative word embedding model and its low rank
positive semidefinite solution. In Proceedings of
the 2015 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1599–1609, Lisbon,
Portugal, September. Association for Computational
Linguistics.

Shaohua Li, Tat-Seng Chua, Jun Zhu, and Chun-
yan Miao. 2016a. Generative topic em-
bedding: a continuous representation of docu-
ments (extended version with proofs). Technical
report. https://github.com/askerlee/topicvec/blob/
master/topicvec-ext.pdf.

Shaohua Li, Jun Zhu, and Chunyan Miao. 2016b. PS-
DVec: a toolbox for incremental and scalable word
embedding. To appear in Neurocomputing.

Yang Liu, Zhiyuan Liu, Tat-Seng Chua, and Maosong
Sun. 2015. Topical word embeddings. In AAAI,
pages 2418–2424.

Yue Lu, Qiaozhu Mei, and ChengXiang Zhai. 2011.
Investigating task performance of probabilistic topic
models: an empirical study of PLSA and LDA. In-
formation Retrieval, 14(2):178–203.

Jon D McAuliffe and David M Blei. 2008. Super-
vised topic models. In Advances in neural informa-
tion processing systems, pages 121–128.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Proceedings of NIPS 2013, pages 3111–3119.

Dat Quoc Nguyen, Richard Billingsley, Lan Du, and
Mark Johnson. 2015. Improving topic models with
latent feature word representations. Transactions
of the Association for Computational Linguistics,
3:299–313.

Jeffrey Pennington, Richard Socher, and Christopher D
Manning. 2014. GloVe: Global vectors for
word representation. Proceedings of the Empiricial
Methods in Natural Language Processing (EMNLP
2014), 12.

675


