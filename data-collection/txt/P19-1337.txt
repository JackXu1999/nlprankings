



















































Scalable Syntax-Aware Language Models Using Knowledge Distillation


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 3472–3484
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

3472

Scalable Syntax-Aware Language Models Using Knowledge Distillation

Adhiguna Kuncoro♠♦ Chris Dyer♠ Laura Rimell♠
Stephen Clark♠ Phil Blunsom♠♦

♠DeepMind, London, UK
♦Department of Computer Science, University of Oxford, UK

{akuncoro,cdyer,laurarimell,clarkstephen,pblunsom}@google.com

Abstract

Prior work has shown that, on small amounts
of training data, syntactic neural language
models learn structurally sensitive generalisa-
tions more successfully than sequential lan-
guage models. However, their computational
complexity renders scaling difficult, and it re-
mains an open question whether structural bi-
ases are still necessary when sequential mod-
els have access to ever larger amounts of train-
ing data. To answer this question, we intro-
duce an efficient knowledge distillation (KD)
technique that transfers knowledge from a syn-
tactic language model trained on a small cor-
pus to an LSTM language model, hence en-
abling the LSTM to develop a more struc-
turally sensitive representation of the larger
training data it learns from. On targeted syn-
tactic evaluations, we find that, while sequen-
tial LSTMs perform much better than previ-
ously reported, our proposed technique sub-
stantially improves on this baseline, yielding
a new state of the art. Our findings and anal-
ysis affirm the importance of structural biases,
even in models that learn from large amounts
of data.

1 Introduction

Language models (LMs) based on sequential
LSTMs (Hochreiter and Schmidhuber, 1997) have
numerous practical applications, but it has also
been shown that they do not always develop accu-
rate syntactic generalisations (Marvin and Linzen,
2018). Thus, one strategy for improving LSTMs
is to change their biases to facilitate more linguis-
tically valid generalisations.

This paper introduces a scalable method for in-
troducing syntactic biases to LSTMs (and indeed,
to any left-to-right language model trained with
a cross-entropy objective) by distilling knowl-
edge (Bucilǎ et al., 2006; Hinton et al., 2015) from
recurrent neural network grammars (Dyer et al.,

2016, RNNGs). RNNGs have been shown to suc-
cessfully capture non-local syntactic dependencies
(Kuncoro et al., 2018), achieve excellent parsing
performance (Kuncoro et al., 2017; Fried et al.,
2017), and correlate well with encephalography
signals (Hale et al., 2018). Unfortunately, these
benefits come at the expense of scalability, since
the hierarchical constituent composition process
(§3) within RNNGs means that the structure of the
computation graph for a sentence varies according
to its tree structure. Even with the help of auto-
matic dynamic batching (Neubig et al., 2017a,b),
RNNGs can be ten times slower to train than a
comparable LSTM as they benefit less from spe-
cialised hardware like GPUs. As such, RNNGs
are an impractical alternative to computationally
convenient architectures that are used to build lan-
guage models from massive corpora (Peters et al.,
2018; Howard and Ruder, 2018; Devlin et al.,
2019; Radford et al., 2019).

As RNNGs are hard to scale, we instead use
the predictions of an RNNG teacher model trained
on a small training set, to guide the learning of
syntactic structure in a sequential LSTM student
model, which is trained on the training set in its
entirety. We denote the resulting lanugage model
(i.e., the student LSTM) as a distilled syntax-
aware LSTM LM (DSA-LSTM). Intuitively, the
RNNG teacher is an expert on syntactic general-
isation, although it lacks the opportunity to learn
the relevant semantic and common-sense knowl-
edge from a large training corpus. By learning
from both, the DSA-LSTM therefore learns from a
signal that is informative for syntactic generalisa-
tion, but without sacrificing the semantic richness
contained in a large corpus.

Since the DSA-LSTM differs from a conven-
tional LSTM only in its training loss, it has the
same hardware-friendly computational structure
as a conventional LSTM, and is therefore much



3473

faster to train. On targeted syntactic evaluations, it
achieves better accuracy than: (i) a strong LSTM
LM which, through careful hyperparameter tun-
ing, performs much better than previously thought
(§2); (ii) the teacher RNNG that exploits a hierar-
chical inductive bias but lacks scalability (§3); and
(iii) a born-again network (Furlanello et al., 2018)
that similarly learns from KD, albeit without a hi-
erarchical bias from the teacher. We analyse the
DSA-LSTM’s internal representation through the
syntactic probe (Shi et al., 2016; Adi et al., 2017)
of Blevins et al. (2018), and find that the learned
representations encode hierarchical information to
a large extent, despite the DSA-LSTM lacking di-
rect access to syntactic annotation.

While not directly comparable, on subject-verb
agreement both the teacher RNNG and student
DSA-LSTM outperform BERT (Devlin et al.,
2019; Goldberg, 2019), which benefits from bidi-
rectional information and is trained on 30 times
as much data. Altogether, these findings suggest
that structural biases continue to play an important
role, even at massive data scales, in improving the
linguistic competence of LMs.

2 Replication of Targeted Syntactic
Evaluations of LSTM LMs

In this section, we replicate the targeted syntac-
tic evaluations reported by Marvin and Linzen
(2018), which assess LMs’ ability to assign higher
probability in grammatical/ungrammatical mini-
mal pairs within a variety of complex syntactic
structures. This will serve as our primary evalu-
ation instrument in this paper.

The following example illustrates the subject-
verb agreement across an object relative clause
(no complementiser) construction:

• The farmer the parents love swims/∗swim.

An LM succeeds on each example iff it assigns
a higher probability to the grammatical sentence.
Marvin and Linzen (2018) report that LSTMs,
even with multi-task syntactic supervision, on ag-
gregate still lag far behind human performance.

Experimental settings. Following Marvin and
Linzen (2018), we use LSTMs with 650 hidden
units trained on the Wikipedia corpus of Gulor-
dava et al. (2018). Hyperparameters are optimised
based on a grid search and can be found in the Ap-
pendix. As the targeted syntactic evaluations are
based on individual sentences, our LSTM models

each sentence separately.1

Discussion. We present our findings in Table 1
(“Ours”); for all our models we report mean and
standard deviation of 10 identical models from dif-
ferent random seeds. Our LSTM LM achieves
much better perplexity than the LSTM LM (32%
ppl. reduction) and even the multi-task LSTM
(12% reduction) of Marvin and Linzen (2018). As
our LSTM has the same number of hidden units,
we attribute this gap to differences in optimisation
and codebases. On aggregate, our LSTM LM out-
performs the LSTM multi-task model from Mar-
vin and Linzen (2018) that exploits explicit CCG
annotations, and is able to match or exceed hu-
man performance on 7 out of all 15 constructions,
thus confirming earlier findings that neural lan-
guage models are able to acquire complex syntac-
tic generalisation without explicit syntactic super-
vision (Gulordava et al., 2018; Goldberg, 2019).

Despite the small variance in perplexity (stdev
0.16 ppl.), the trained LMs exhibit large variance
in accuracy for some constructions (up to stdev
0.12 for NPI across a relative clause). This ob-
servation is consistent with earlier findings that
models with similar perplexity may exhibit differ-
ent patterns of syntactic generalisation (Kuncoro
et al., 2018; Tran et al., 2018), and serves as a cau-
tion against reporting results based on single runs.

3 Syntactic Evaluation with RNNG

To what extent can a model that leverages syntac-
tic bias and annotation do well on targeted syntac-
tic evaluations, even when trained on less data?

Here we briefly describe and assess the perfor-
mance of the stack-only RNNG (Kuncoro et al.,
2017) that we use as the teacher. Our choice
of RNNG is motivated by its excellent number
agreement performance on the Linzen et al. (2016)
dataset,2 achieving 92.9% for four attractors un-
der purely incremental decoding (Kuncoro et al.,
2018).

1By modelling each sentence separately, our setup is con-
sistent with that of Marvin and Linzen (2018) but differs from
those with cross-sentential context (Mikolov et al., 2010).

2While BERT (Devlin et al., 2019) achieves even bet-
ter number agreement performance (Goldberg, 2019), the re-
sults are not directly comparable since BERT operates non-
incrementally and was trained on 500 times as much data.
The current state of the art among models trained on the
Linzen et al. (2016) training set is the adaptive universal
transformer model (Dehghani et al., 2019).



3474

Marvin & Linzen models Ours Ours (small training)
M&L-LSTM M&L-Multi Our LSTM Small LSTM† RNNG† Humans

Gulordava et al. (2018) test perplexity 78.65 61.10 53.73 (±0.16) 94.54 (±0.21) 92.30 (±0.27) N/A
SUBJECT-VERB AGREEMENT

Simple 0.94 1.00 1.00 (±0.00) 0.89 (±0.03) 0.99 (±0.01) 0.96
In a sentential complement 0.99 0.93 0.97 (±0.02) 0.89 (±0.01) 0.93 (±0.02) 0.93
Short VP coordination 0.90 0.90 0.96 (±0.02) 0.90 (±0.03) 0.96 (±0.02) 0.94
Long VP coordination 0.61 0.81 0.82 (±0.05) 0.78 (±0.03) 0.94 (±0.03) 0.82
Across a prepositional phrase 0.57 0.69 0.89 (±0.02) 0.83 (±0.02) 0.95 (±0.01) 0.85
Across a subject relative clause 0.56 0.74 0.87 (±0.02) 0.81 (±0.04) 0.95 (±0.03) 0.88
Across an object relative clause 0.50 0.57 0.77 (±0.11) 0.54 (±0.08) 0.95 (±0.03) 0.85
Across an object relative clause (no that) 0.52 0.52 0.70 (±0.05) 0.55 (±0.07) 0.93 (±0.02) 0.82
In an object relative clause 0.84 0.89 0.90 (±0.03) 0.79 (±0.05) 0.96 (±0.01) 0.78
In an object relative clause (no that) 0.71 0.81 0.86 (±0.05) 0.72 (±0.03) 0.96 (±0.02) 0.79
Average of subject-verb agreement 0.71 0.79 0.87 (±0.02) 0.77 (±0.02) 0.95 (±0.01) 0.86

REFLEXIVE ANAPHORA
Simple 0.83 0.86 0.91 (±0.01) 0.93 (±0.01) 0.83 (±0.02) 0.96
In a sentential complement 0.86 0.83 0.81 (±0.02) 0.77 (±0.03) 0.46 (±0.05) 0.91
Across a relative clause 0.55 0.56 0.64 (±0.02) 0.63 (±0.02) 0.82 (±0.02) 0.87
Average of reflexive anaphora 0.75 0.75 0.79 (±0.01) 0.78 (±0.01) 0.70 (±0.02) 0.91

NEGATIVE POLARITY ITEMS
Simple 0.40 0.48 0.96 (±0.04) 0.93 (±0.06) 0.28 (±0.05) 0.98
Across a relative clause 0.41 0.73 0.75 (±0.12) 0.82 (±0.09) 0.78 (±0.06) 0.81
Average of negative polarity items 0.41 0.61 0.86 (±0.06) 0.88 (±0.05) 0.53 (±0.04) 0.90
Average of all constructions 0.68 0.75 0.85 (±0.02) 0.79 (±0.02) 0.85 (±0.02) 0.88

Table 1: Replication of Marvin and Linzen (2018) results. M&L-Multi is the Marvin and Linzen (2018)
LSTM trained on LM and CCG supertagging (Bangalore and Joshi, 1999; Clark and Curran, 2007) losses
with an interpolation factor of 0.5. We report our LSTM LM, small LSTM†, and RNNG† performance
(†smaller training data; §3) in the format of mean (±standard deviation) of 10 identical models from
different seeds. Results in bold denote the best among models trained on similar amounts of training
data.

3.1 Recurrent Neural Network Grammars
An RNNG defines the joint probability of sur-
face string x and phrase-structure tree y, denoted
as t(x,y). The model generates phrase-structure
trees in a top-down, left-to-right manner through
a series of action sequences in a process reminis-
cent of shift-reduce parsing. At any given state,
the decision over which action to take is param-
eterised by a stack LSTM (Dyer et al., 2015) en-
coding partially-completed constituents. Let ht be
the stack LSTM hidden state at time t. The next
action at ∈ {GEN, NT, REDUCE} is sampled ac-
cording to a categorical distribution defined by an
affine transformation and a softmax:

at ∼ softmax(Waht + ba).

• If at ∈ {GEN, NT}, the model samples a termi-
nal x or a non-terminal n from each respective
categorical distribution as the next input:

x ∼ softmax(Wxht + bx),
n ∼ softmax(Wnht + bn).

• If at = REDUCE, the topmost stack elements
going back to the last incomplete non-terminal
are popped, and a composition function (here

a bidirectional LSTM) is executed to represent
the completed phrase on the stack. This recur-
sive composition function constitutes a primary
difference with the syntactic LM of Choe and
Charniak (2016) that operates sequentially, and
has been found to be crucial for achieving good
number agreement (Kuncoro et al., 2018) and
correlation with brain signals (Hale et al., 2018).

The stack LSTM, composition function, lookup
embeddings, and pairs of affine transformation
weights and biases {W,b} are model parameters.

3.2 Experiments

Here we outline the experimental settings and
present our RNNG findings.

Experimental settings. We implement the
RNNG with DyNet and enable autobatching on
GPU. Predicted phrase-structure trees for the
training and validation sets of the Gulordava et al.
(2018) Wikipedia dataset are obtained with a
pre-trained Berkeley parser (Petrov and Klein,
2007). Since training the RNNG on the full
training set with the same number of hidden units



3475

as the LSTM would take more than a month,3

we train the RNNG on ∼ 20% of the training set
(600,000 sentences), and use a smaller hidden
state size of 256 (vs. 650 for the full LSTM). As
the dataset is pre-processed, we select this subset
such that all word types occur at least once in this
smaller training set.
Incremental decoding and marginal probabil-
ity. To preserve incrementality constraints, at
test time we use a word-synchronised beam search
(Fried et al., 2017) with fast-tracking (Stern et al.,
2017), using word and action beam sizes of k =
50 and k × 10 = 500, respectively. As exact in-
ference of t(x) is intractable, we evaluate with a
lower bound of the marginal probability by sum-
ming over the top k hypotheses yb(x)1 , . . . ,y

b(x)
k

on the beam b(x) once parsing finishes:

t(x) =
∑

y′∈T (x)

t(x,y′) ≥
k∑
i=1

t(x,y
b(x)
i ),

where T (x) denotes the set of all possible phrase-
structure trees for a sentence x. On targeted
syntactic evaluations, the model succeeds iff
log t(xcorrect) > log t(xincorrect).
Discussion. We present the results in Table 1
(sixth column: “RNNG”), and compare with
LSTMs trained on: (i) the full dataset (fourth col-
umn: “Our LSTM”), and (ii) the same (smaller)
training set as the RNNG (fifth column: “Small
LSTM”). Our findings clearly reaffirm the ben-
efits of both hierarchical bias and data scale. In
terms of hierarchical bias, an RNNG that leverages
syntactic annotations and explicit composition op-
erators outperforms a comparable small LSTM on
11 out of 15 constructions, and on aggregate im-
proves accuracy on targeted syntactic evaluations
from 79% to 85% (29% error reduction), thus
matching the aggregate performance of the full
LSTM trained on 5 times as much data, although
we remark that their success and failure modes ap-
pear to be different.

In terms of data scale, the LSTM LM trained
on the full training set substantially outperforms
the LSTM trained on the smaller training set. In
particular, the performance difference between the
small and full LSTMs sheds light on which con-
structions are sensitive to variations in the amount

3We tested the speed of RNNGs and LSTMs with simi-
lar capacity (40 million parameters) on DyNet. Both models
ran on a single Quadro P4000 GPU with automatic batching
turned on and a batch size of 20 sentences.

of data. For instance, agreement across an ob-
ject relative clause exhibits large variations across
the two training regimes (77% to 54%), suggest-
ing that LSTMs require a large amount of data
to learn these constructions well. Our finding
on the importance of data scale for LM training
is consistent with the success of recent LM pre-
training approaches (Peters et al., 2018; Devlin
et al., 2019, inter alia) and earlier work on noisy
channel models for tasks such as machine transla-
tion and speech recognition (Jelinek, 1997; Rosen-
feld, 2000; Koehn, 2010, inter alia).

Despite its smaller training set, the RNNG per-
forms extremely well on subject-verb agreement,
substantially outperforming both the full LSTM
and a pre-trained BERT (Devlin et al., 2019, Ta-
ble 2) trained on 150 times as much data, although
it still lags behind the full LSTM on reflexive
anaphora and NPI.

4 Syntax-Aware Language Model

Given the trade-off between hierarchical opera-
tions and scalability, how can we design LMs that
can better capture complex syntactic dependencies
and be easily scalable at the same time?
4.1 Knowledge Distillation (KD)
The goal of KD is to find a set of student
model parameters θ̂KD that would minimise the
Kullback–Leibler (KL) divergence between the
teacher RNNG’s marginal probability t(x) =∑

y′∈T (x) t(x,y
′) and the LSTM student qθ(x).

Expanding the KL term and removing terms that
do not depend on θ yields:

θ̂KD = arg min
θ

DKL (t(x) || qθ(x)) , (1)

= arg min
θ
−

∑
x∈Σ∗

t(x) log qθ(x), (2)

= arg min
θ
−Ex∼t(x) log qθ(x), (3)

where Σ denotes the set of all word types in the
vocabulary, and Σ∗ the set of all possible sen-
tences. As Eq. 2 involves an intractable sum-
mation over the set of all possible sentences,
one alternative is to approximate this expectation
with Monte Carlo sampling to obtain K sentences
D′ = {x′(1), . . . ,x′(K)} from t(x),4 and train a
student LSTM LM on these sampled sentences as
opposed to ground-truth LM data:

4While an RNNG estimates t(x,y), a simple way of sam-
pling surface strings x from the RNNG is to sample pairs of
(x(k),y(k)) ∼ t(x,y) and ignore all non-terminals y(k).



3476

Ex∼t(x) log qθ(x) ≈
1

K

∑
x′∈D′

|x′|∑
j=1

log qθ(x
′
j |x′<j),

although our preliminary experiments suggest that
this procedure performs poorly due to high vari-
ance.5 We instead approximate Eq. 3 by minimis-
ing the KL at the local word-level:

Ex∼t(x) log qθ(x) ≈

Ex∗∼p∗(x)
|x∗|∑
j=1

DKL (t(w | x∗<j) || qθ(w | x∗<j)) ,

where x∗ is sampled from the empirical distribu-
tion p∗(x), rather than from the teacher RNNG.
Here t(w | x∗<j) and qθ(w | x∗<j) respectively
parameterise the (marginal) probability of gener-
ating the next-word continuation w ∈ Σ, given the
“ground-truth” conditioning context x∗<j , under
the teacher and student models.

For a dataset of sentences D =
{x∗(1), . . . ,x∗(|D|)} characterising the em-
pirical distribution p∗(x∗) = 1|D| when x

∗ ∈ D
(i.i.d. assumption), the word-level objective is:

θ̂KD ≈ arg min
θ
− 1
|D|

∑
x∗∈D

`KD(x
∗; θ),

`KD(x
∗; θ) =

|x∗|∑
j=1

∑
w∈Σ

t(w | x∗<j) log qθ(w | x∗<j).

In earlier work, this local word-level approxima-
tion to the KD objective for sequence models has
been shown to work surprisingly well in the case
of neural machine translation6 (Kim and Rush,
2016) and language modelling (Furlanello et al.,
2018, Born-Again Networks).
Interpolation. As the teacher RNNG is trained
on a smaller training set, the DSA-LSTM should
not only aim to emulate the RNNG’s predictions
and risk being upper-bounded by the teacher’s per-
formance, but also learn from the correct next
word x∗j to fully exploit scalability.

7 We thus inter-
polate the distillation (left) and LM (right) losses:

5This procedure of training a student LSTM LM on string
samples from the RNNG with K ≈ 3, 000, 000 yields a high
validation perplexity of above 1,000, due to the enormity of
the sample space and the use of discrete samples.

6While Kim and Rush (2016) proposed a technique for
sequence-level KD for machine translation through beam
search, the same technique is not directly applicable to LM,
which is an unconditional language generation problem.

7Recall that `KD(x; θ) does not depend on the true next
word x∗j .

θ̂α-int = arg min
θ
− 1
|D|

∑
x∗∈Dα`KD(x∗; θ) + (1− α) |x∗|∑

j=1

log qθ(x
∗
j | x∗<j)

 ,
where α is the interpolation coefficient. We illus-
trate the effect of this interpolation in Fig. 1.

Furthermore, computing `KD(x∗; θ) requires
the RNNG’s estimate of t(w | x∗<j), which ne-
cessitates an expensive marginalisation over all
tree prefixes that generate w conditional on x∗<j .
For efficiency, we approximate this using the one-
best predicted tree from a pre-trained Berkeley
parser,8 denoted as ŷberk(x∗), as follows:

t(w | x∗<j) ≈ t(w | x∗<j , ŷberk<j (x∗)),

where ŷberk<j (x
∗) are all the non-terminals in

ŷberk(x∗) that occur before x∗j . In other words,
we first parse the sentence with a Berkeley parser,
and use the resulting tree prefix as conditioning
context to compute the probability of generating
w ∈ Σ under the RNNG. While this means that the
teacher’s predictions are not derived from a purely
incremental process,9 the student DSA-LSTM still
operates strictly incrementally. This interpolated
objective is similar to label smoothing (Szegedy
et al., 2016; Pereyra et al., 2017), with the softmax
distribution of the RNNG as the smoothing factor
as opposed to the uniform distribution.
Intuition. In Fig. 1, we provide an intuition
about why the interpolation of the distillation and
LM losses could inject hierarchical bias into a se-
quential model. We consider the interpolated tar-
get with α = 0.5 for a prefix (suppressing non-
terminals) Parts of the river valley, where the cor-
rect continuation is have since the agreement con-
troller parts is plural. The standard LM loss is
zero only when all word types other than the cor-
rect one are assigned zero probability mass, and
it is only in expectation (across training contexts)
that syntactic regularities are inferred. In contrast,
the interpolated target assigns a minimum proba-
bility of 0.5 to the correct label, but crucially con-
tains additional information about the plausibility
of every alternative based on the teacher RNNG’s
predictions. Under this objective, the plural verbs

8We use the same pre-trained Berkeley parser to obtain
training and validation trees in §3.

9The resulting syntactic prefix ŷberk<j (x) for approximating
t(w | x∗<j) under the RNNG is obtained from a Berkeley
parser that has access to yet unseen words x>j .



3477

Figure 1: Example of the KD target (top), the standard LM target (middle), and the interpolated target
used to train the DSA-LSTM (bottom) with α = 0.5, for a prefix (showing only the terminals) Parts of
the river valley, where the correct continuation is have due to the plural subject parts.

are and meander are assigned relatively high prob-
ability mass since they fit both the syntactic and
semantic constraints (e.g. Parts of the river val-
ley often meander), while the set of singular verbs
has, meanders, and is are assigned much lower
probability mass since they are syntactically il-
licit. Thus, as long as the RNNG makes the accu-
rate structural generalisations (and we have shown
that it largely does in §3), every training instance
provides the student LSTM with a wealth of in-
formation about all the possible legitimate contin-
uations according to the predictions of the hier-
archical teacher, thereby making it easier for the
student to learn the appropriate hierarchical con-
straints and generalisations.

Differences with other KD work. Our ap-
proach departs from the predominant view of
distillation primarily as a means of compressing
knowledge from a bigger teacher or an ensemble
to a compact student (Ba and Caruana, 2014; Kim
and Rush, 2016; Liu et al., 2018, inter alia) in two
important ways. First, here the teacher and stu-
dent models are different in character, and not just
in size: we transfer knowledge from a teacher that
models the joint probability of strings and phrase-
structure trees through hierarchical operations, to
a student that only models surface strings through
sequential operations. This setup presents an in-
teresting dynamic since the DSA-LSTM has to
mimic the predictions of the RNNG, which condi-
tions on syntactic annotation to guide hierarchical
operations, even though the DSA-LSTM itself has
no direct access to any syntactic annotations at all.

Second, distillation thus far has mostly been

applied in settings where the teacher and student
models are trained on the same data. For scal-
ability reasons, we train the RNNG on a subset
of the data, and obtain its soft predictions on the
rest. We hypothesise that the predictions of the
hierarchical teacher—although they come from a
model trained on a smaller dataset—can neverthe-
less encourage the LSTM to develop structurally
sensitive representations of the larger dataset it ob-
serves.

Born-Again Networks (BA). In practice, the in-
terpolated distillation objective above can be ap-
plied to any teacher and student models. Recently,
Furlanello et al. (2018) surprisingly finds perplex-
ity improvement in a born-again setup that trains
an LSTM LM on the gold data, and then uses the
resulting model as a teacher to a student LSTM
that shares the same architecture as the teacher. To
better understand the importance of learning from
a hierarchical teacher (which is not the case in a
BA-LSTM since the teacher model is also sequen-
tial), we present experiments comparing the DSA-
LSTM with a BA-LSTM.

4.2 Experiments

Here we describe our experimental settings and
present our findings.

Computational challenge. The KD loss neces-
sitates computing the teacher RNNG’s predictive
softmax distribution for each token in the train-
ing set, but pre-computing these for the Gulor-
dava et al. (2018) training set leads to a pro-



3478

hibitive memory footprint.10 To save space, we
instead pre-compute the teacher RNNG’s hidden
state ht ∈ RM for every token xt in the training
set (M � |Σ|), and compute the teacher’s soft-
max on-the-fly with an affine transformation and
a softmax, which presents minimal computational
overhead.
Experimental settings. The DSA-LSTM has an
identical architecture to the LSTM LM (§2), al-
though the learning rate is optimised indepen-
dently (Appendix). We select the final model
based on validation LM perplexity, with targeted
syntactic evaluations only applied at test time.

Training speed. Since the DSA-LSTM operates
sequentially, it is amenable to batching operations
and is five times faster to train than a comparable
RNNG. Despite this significant speed-up, train-
ing the DSA-LSTM in our basic implementation
is still half as fast as the standard LM objective.
We attribute this difference to the additional com-
putational overhead associated with the distillation
objective, such as I/O operations and computing
the cross-entropy between the teacher and student
models for the entire vocabulary. These opera-
tions, however, only apply at training time; at test
time there is no overhead of inferring qθ̂α-int(x) un-
der the DSA-LSTM.

Baselines. The DSA-LSTM benefits from three
main components: (i) a KD objective, which in
itself has been shown to be a good regulariser
(Furlanello et al., 2018), (ii) the scalability of
the sequential architecture, and (iii) a hierarchical
bias, which here comes from the teacher RNNG.
To understand the benefit of each component, we
compare DSA-LSTM with these baselines:

• a strong LSTM LM (§2) that is scalable but
lacks a hierarchical bias (“Full LSTM”);

• the teacher RNNG trained on a 20% subset of
the training set (§3), which benefits from a hier-
archical bias but lacks scalability (“RNNG”);

• a DSA-LSTM trained on the same smaller sub-
set as the teacher RNNG (“S-DSA-LSTM”).
This baseline isolates the importance of scala-
bility, since it still benefits from a KD objective
and a hierarchical bias from the teacher RNNG;

10Pre-computing the RNNG’s predictions necessitates
storing N × |Σ| numbers, where N is the number of tokens.
For the Gulordava et al. (2018) training set (∼80M tokens),
this requires storing 4 trillion floating points, or 25 terabytes.

• a born-again LSTM that benefits from KD and
scalability, though it lacks a hierarchical bias
due to the sequential teacher (“BA-LSTM”).

Discussion. To avoid clutter, for each model
variant we present only the mean performance of
10 identical models from different random seeds;
results with standard deviations are in the Ap-
pendix. We present our findings in Table 2, based
on which we derive several observations.

• Of the three models trained on the small subset,
the S-DSA-LSTM outperforms the small LSTM
trained on standard LM objective, improving
overall acccuracy from 0.79 to 0.82 (14% error
reduction), even though both models share the
same architecture and training set size (i.e. only
the training objective is different). On subject-
verb agreement, the S-DSA-LSTM successfully
narrows the gap with the slower teacher RNNG,
which benefits from syntactic bias and annota-
tion. These findings confirm our hypothesis that
the KD approach constitutes an efficient way to
inject hierarchical bias into sequential models.

• The born-again model (BA-LSTM) outperforms
the LSTM LM, albeit by a small margin. This
finding suggests that KD helps improve the syn-
tactic competence of LSTMs, even when the
teacher model lacks explicit hierarchical bias
and shares the same architecture as the student.

• In terms of perplexity, both BA-LSTM and
DSA-LSTM perform slightly worse than the
full LSTM LM trained without KD loss. We
attribute this gap to the smoother target distri-
bution when using KD, which effectively pe-
nalises high probabilities on the correct next
word x∗j unless the teacher model is extremely
confident. This observation is consistent with
earlier findings on label smoothing in machine
translation (Pereyra et al., 2017; Vaswani et al.,
2017), which often results in better BLEU at the
expense of slightly worse likelihood.

• Despite identical architectures, on aggregate
the DSA-LSTM substantially improves over the
full LSTM (85% to 89%), constituting a 27% er-
ror rate reduction and a new state of the art. Our
findings suggest that the DSA-LSTM combines
the best of both hierarchical bias and data scale:
on subject-verb agreement, the DSA-LSTM im-
proves over the LSTM baseline and narrows the
gap with the teacher RNNG, while at the same
time performing well on reflexive anaphora and



3479

Small Training Set Full Training Set
Small LSTM† S-DSA-LSTM† RNNG† Full LSTM BA-LSTM DSA-LSTM BERT Humans

Gulordava et al. (2018) test ppl. 94.54 93.95 92.30 53.73 54.64 56.74 N/A N/A
SUBJECT-VERB AGREEMENT

Simple 0.89 0.96 0.99 1.00 1.00 1.00 1.00 0.96
In a sentential complement 0.89 0.98 0.93 0.97 0.98 0.98 0.83 0.93
Short VP coordination 0.90 0.88 0.96 0.96 0.95 0.99 0.89 0.94
Long VP coordination 0.78 0.74 0.94 0.82 0.80 0.80 0.98 0.82
Across a prepositional phrase 0.83 0.88 0.95 0.89 0.89 0.91 0.85 0.85
Across a subject relative clause 0.81 0.87 0.95 0.87 0.87 0.90 0.84 0.88
Across an object relative clause 0.54 0.69 0.95 0.77 0.81 0.84 0.89 0.85
Across an object relative clause (no that) 0.55 0.61 0.93 0.70 0.74 0.77 0.86 0.82
In an object relative clause 0.79 0.87 0.96 0.90 0.91 0.92 0.95 0.78
In an object relative clause (no that) 0.72 0.88 0.96 0.86 0.83 0.92 0.79 0.79
Average of subject-verb agreement 0.77 0.84 0.95 0.87 0.88 0.90 0.89 0.86

REFLEXIVE ANAPHORA
Simple 0.93 0.90 0.83 0.91 0.92 0.91 0.94 0.96
In a sentential complement 0.77 0.78 0.46 0.81 0.81 0.82 0.89 0.91
Across a relative clause 0.63 0.67 0.82 0.64 0.64 0.67 0.80 0.87
Average of reflexive anaphora 0.78 0.78 0.70 0.79 0.79 0.80 0.88 0.91

NEGATIVE POLARITY ITEMS
Simple 0.93 0.84 0.28 0.96 0.98 0.94 N/A 0.98
Across a relative clause 0.82 0.73 0.78 0.75 0.70 0.91 N/A 0.81
Average of negative polarity items 0.88 0.79 0.53 0.86 0.84 0.92 N/A 0.90
Average of all constructions 0.79 0.82 0.85 0.85 0.86 0.89 N/A 0.88

Table 2: Experimental findings of the “DSA-LSTM”. For each column, we report the mean of 10 iden-
tical models trained from different random seeds; standard deviation values are reported in the Ap-
pendix. “S-DSA-LSTM” indicates the DSA-LSTM trained on the smaller RNNG training set, while
“BA-LSTM” is the born-again model where the teacher is the full LSTM LM. We also compare with
the syntactic generalisation of “BERT” Base (Devlin et al., 2019; Goldberg, 2019), which is not strictly
comparable since it is trained on 30 times as much data. † indicates models trained on the smaller 20%
training set (§3). Results in bold denote the best among those trained with the same amounts of data.

NPI, on which the teacher RNNG (but not the
full LSTM) fails to achieve a good performance.

• While not directly comparable, the DSA-LSTM
outperforms a pre-trained BERT (Devlin et al.,
2019; Goldberg, 2019)11 on subject-verb agree-
ment. Since BERT benefits from bidirectional-
ity and was trained on 30 times as much data
as the DSA-LSTM, this finding suggests that,
at least in terms of syntactic competence, struc-
tural biases continue to be relevant even as the
current generation of sequential LMs is able to
exploit increasingly large amounts of data.

4.3 Probing for Hierarchical Information

Having established the advantages of the DSA-
LSTM on targeted syntactic evaluations, we turn
to the question of analysing how its internal rep-
resentation differs from that of a standard LSTM
LM. To this end, we adopt the method of Blevins
et al. (2018) and use a probe (Shi et al., 2016; Adi
et al., 2017; Belinkov et al., 2017; Conneau et al.,
2018; Hewitt and Manning, 2019, inter alia) that

11Goldberg (2019) applies an additional pre-processing
step, removing sentences in which the focus verb does not
appear as a single word in the word piece-based vocabulary;
hence, the evaluation sentences are slightly different.

predicts the grandparent constituent of a word to-
ken xt, based on its encoding ht under the pre-
trained LSTM. Under this framework, the accu-
racy of the probe on a held-out set can be un-
derstood as an indication of how well the hidden
states encode the relevant syntactic information re-
quired to succeed in this task.

We use a linear classifier for the probe and ob-
tain the predicted grandparent constituent label us-
ing the same pre-trained Berkeley parser (§3) that
we used to obtain predicted phrase-structure trees
to train the RNNG. For the probing experiment,
we randomly select sentences from each respec-
tive training, validation, and test set of the Gulor-
dava et al. (2018) dataset to yield∼300,000 words
for training and ∼10,000 words for each of vali-
dation and test sets. For the probe features, we use
a concatenation of the LSTM hidden state at the
current and next words,12 i.e. [ht;ht+1], where ;
denotes the concatenation operation.

Recall that the DSA-LSTM operates only on
word sequences and has no access to the Berkeley
parse during training. We summarise the probing

12Our probing feature set thus slightly differs from that of
Blevins et al. (2018), who concatenated the hidden states of a
left-to-right and right-to-left LSTM language models.



3480

Figure 2: Probing accuracy on the test set. We
analyse the hidden states of the LSTM and DSA-
LSTM to analyse the structural information en-
coded in each respective model’s hidden state.

result in Fig. 2. Overall, the syntactic probing ac-
curacy for the DSA-LSTM is much higher than for
the LSTM LM (83% to 74%; a 34% error rate re-
duction), suggesting that the means by which the
DSA-LSTM achieves better syntactic competence
is by tracking more hierarchical information dur-
ing sequential processing.

5 Related Work

Augmenting language models with syntactic in-
formation and structural inductive bias has been
a long-standing area of research. To this end, syn-
tactic language models estimate the joint proba-
bility of surface strings and some form of syn-
tactic structure (Jurafsky et al., 1995; Chelba and
Jelinek, 2000; Roark, 2001; Henderson, 2004;
Emami and Jelinek, 2005; Buys and Blunsom,
2015; Mirowski and Vlachos, 2015; Dyer et al.,
2016; Kim et al., 2019). In contrast to these ap-
proaches, the DSA-LSTM only models the prob-
ability of surface strings, albeit with an auxiliary
loss that distills the next-word predictive distribu-
tion of a syntactic language model.

Earlier work has also explored multi-task learn-
ing with syntactic objectives as an auxiliary loss in
language modelling and machine translation (Lu-
ong et al., 2016; Eriguchi et al., 2016; Nadejde
et al., 2017; Enguehard et al., 2017; Aharoni and
Goldberg, 2017; Eriguchi et al., 2017). Our ap-
proach of injecting syntactic bias through a KD
objective is orthogonal to this approach, with the
primary difference that here the student DSA-
LSTM has no direct access to syntactic annota-
tions; it does, however, have access to the teacher
RNNG’s softmax distribution over the next word.

Our approach is also closely related to recent
work that introduces structurally-motivated induc-

tive biases into language models. Chung et al.
(2017) segmented the hidden state update of an
RNN through a multi-scale hierarchical recur-
rence, thereby providing a shortcut to the gradient
propagation of long-range, hierarchical dependen-
cies. Yogatama et al. (2018) introduced a stack-
structured memory to encourage hierarchical mod-
elling in language models, where the resulting
model successfully outperforms standard LSTM
variants in number agreement (Linzen et al., 2016)
evaluation. Shen et al. (2019) imposed a hierarchi-
cal bias on the LSTM cell-updating mechanism,
based on the intuition that larger constituents con-
tain information that changes more slowly across
the sequence. Our proposed method is orthogo-
nal and can be applied on top of these recent ap-
proaches.

6 Conclusion

In this paper, we introduce a distilled syntax-aware
LSTM (DSA-LSTM), which combines scalability
with structural biases. We achieve this by dis-
tilling the predictions about upcoming words in a
large training corpus made by a (computationally
complex) hierarchical language model trained on a
small subset of the data. While we find that LSTM
language models achieve better syntactic general-
isation than previously thought, on targeted syn-
tactic evaluations our approach improves over this
strong baseline, yields a new state of the art, com-
pares favourably to a language model trained on
much more data, and results in a language model
that encodes hierarchical information to a large ex-
tent despite its sequential architecture. Our ap-
proach is a general one that can be applied to other
student model architectures, such as Transformers
(Vaswani et al., 2017). These findings suggest that
the question of structural biases continues to be
relevant for improving syntactic competence, even
in scalable architectures that can benefit from ever-
growing amounts of training data.

Acknowledgments

We would like to thank Rebecca Marvin and
Tal Linzen for their help in answering questions
regarding data preparation. We also thank Dani
Yogatama, John Hale, and the three anonymous
reviewers for their helpful suggestions.



3481

References
Yossi Adi, Einat Kermany, Yonatan Belinkov, Ofer

Lavi, and Yoav Goldberg. 2017. Fine-grained anal-
ysis of sentence embeddings using auxiliary predic-
tion tasks. In Proc. of ICLR.

Roee Aharoni and Yoav Goldberg. 2017. Towards
string-to-tree neural machine translation. In Proc.
of ACL.

Jimmy Ba and Rich Caruana. 2014. Do deep nets really
need to be deep? In NIPS.

Srinivas Bangalore and Aravind K. Joshi. 1999. Su-
pertagging: An approach to almost parsing. Com-
putational Linguistics, 25.

Yonatan Belinkov, Nadir Durrani, Fahim Dalvi, Hassan
Sajjad, and James Glass. 2017. What do neural ma-
chine translation models learn about morphology?
In Proc. of ACL.

Terra Blevins, Omer Levy, and Luke Zettlemoyer and.
2018. Deep rnns encode soft hierarchical syntax. In
Proc. of ACL.

Cristian Bucilǎ, Rich Caruana, and Alexandru
Niculescu-Mizil. 2006. Model compression. In
Proc. of KDD.

Jan Buys and Phil Blunsom. 2015. A Bayesian model
for generative transition-based dependency parsing.
CoRR, abs/1506.04334.

Ciprian Chelba and Frederick Jelinek. 2000. Struc-
tured language modeling. Computer Speech and
Language, 14(4).

Do Kook Choe and Eugene Charniak. 2016. Parsing as
language modeling. In Proc. of EMNLP.

Junyoung Chung, Sungjin Ahn, and Yoshua Bengio.
2017. Hierarchical multiscale recurrent neural net-
works. In Proc. of ICLR.

Stephen Clark and James R. Curran. 2007. Wide-
coverage efficient statistical parsing with CCG and
log-linear models. Computational Linguistics.

Alexis Conneau, Germán Kruszewski, Guillaume
Lample, Loı̈c Barrault, and Marco Baroni. 2018.
What you can cram into a single vector: Probing
sentence embeddings for linguistic properties.

Mostafa Dehghani, Stephan Gouws, Oriol Vinyals,
Jakob Uszkoreit, and Lukasz Kaiser. 2019. Univer-
sal transformers. In Proc. of ICLR.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2019. BERT: pre-training of
deep bidirectional transformers for language under-
standing. In Proc. of NAACL.

Chris Dyer, Miguel Ballesteros, Wang Ling, Austin
Matthews, and Noah A. Smith. 2015. Transition-
based dependency parsing with stack long short-
term memory. In Proc. of ACL.

Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros,
and Noah A. Smith. 2016. Recurrent neural network
grammars. In Proc. of NAACL.

Ahmad Emami and Frederick Jelinek. 2005. A neu-
ral syntactic language model. Machine Learning,
60:195–227.

Émile Enguehard, Yoav Goldberg, and Tal Linzen.
2017. Exploring the syntactic abilities of rnns with
multi-task learning. In Proc. of CoNLL.

Akiko Eriguchi, Kazuma Hashimoto, and Yoshimasa
Tsuruoka. 2016. Tree-to-sequence attentional neu-
ral machine translation. In Proc. of ACL.

Akiko Eriguchi, Yoshimasa Tsuruoka, and Kyunghyun
Cho. 2017. Learning to parse and translate improves
neural machine translation. In Proc. of ACL.

Daniel Fried, Mitchell Stern, and Dan Klein. 2017. Im-
proving neural parsing by disentangling model com-
bination and reranking effects. In Proc. of ACL.

Tommaso Furlanello, Zachary Chase Lipton, Michael
Tschannen, Laurent Itti, and Anima Anandkumar.
2018. Born-again neural networks. In Proc. of
ICML.

Yoav Goldberg. 2019. Assessing BERT’s syntactic
abilities. CoRR, abs/1901.05287.

Kristina Gulordava, Piotr Bojanowski, Edouard Grave,
Tal Linzen, and Marco Baroni. 2018. Colorless
green recurrent networks dream hierarchically. In
Proc. of NAACL.

John Hale, Chris Dyer, Adhiguna Kuncoro, and
Jonathan R. Brennan. 2018. Finding syntax in hu-
man encephalography with beam search. In Proc. of
ACL.

James Henderson. 2004. Discriminative training of a
neural network statistical parser. In Proc. of ACL.

John Hewitt and Christopher D. Manning. 2019. A
structural probe for finding syntax in word represen-
tations. In Proc. of NAACL.

Geoffrey E. Hinton, Oriol Vinyals, and Jeffrey Dean.
2015. Distilling the knowledge in a neural network.
CoRR, abs/1503.02531.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long
short-term memory. Neural Computation.

Jeremy Howard and Sebastian Ruder. 2018. Universal
language model fine-tuning for text classification. In
Proc. of ACL.

Frederick Jelinek. 1997. Statistical Methods for
Speech Recognition. MIT Press.

D. Jurafsky, C. Wooters, J. Segal, A. Stolcke, E. Fos-
ler, G. Tajchaman, and N. Morgan. 1995. Us-
ing a stochastic context-free grammar as a language
model for speech recognition. In Proc. of ICASSP.

https://doi.org/10.1109/ICASSP.1995.479396
https://doi.org/10.1109/ICASSP.1995.479396
https://doi.org/10.1109/ICASSP.1995.479396


3482

Yoon Kim and Alexander M. Rush. 2016. Sequence-
level knowledge distillation. In Proc. of EMNLP.

Yoon Kim, Alexander M. Rush, Lei Yu, Adhiguna
Kuncoro, Chris Dyer, and Gabor Melis. 2019. Un-
supervised recurrent neural network grammars. In
Proc. of NAACL.

Philipp Koehn. 2010. Statistical Machine Translation.
Cambridge University Press.

Adhiguna Kuncoro, Miguel Ballesteros, Lingpeng
Kong, Chris Dyer, Graham Neubig, and Noah A.
Smith. 2017. What do recurrent neural network
grammars learn about syntax? In Proc. of EACL.

Adhiguna Kuncoro, Chris Dyer, John Hale, Dani Yo-
gatama, Stephen Clark, and Phil Blunsom. 2018.
Lstms can learn syntax-sensitive dependencies well,
but modeling structure makes them better. In Proc.
of ACL.

Tal Linzen, Emmanuel Dupoux, and Yoav Goldberg.
2016. Assessing the ability of LSTMs to learn
syntax-sensitive dependencies. Transactions of the
Association for Computational Linguistics.

Yijia Liu, Wanxiang Che, Huaipeng Zhao, Bing Qin,
and Ting Liu. 2018. Distilling knowledge for
search-based structured prediction. In Proc. of ACL.

Thang Luong, Quoc V. Le, Ilya Sutskever, Oriol
Vinyals, and Lukasz Kaiser. 2016. Multi-task se-
quence to sequence learning. In Proc. of ICLR.

Rebecca Marvin and Tal Linzen. 2018. Targeted syn-
tactic evaluation of language models. In Proc. of
EMNLP.

Tomáš Mikolov, Martin Karafiát, Lukáš Burget, Jan
Černocký, and Sanjeev Khudanpur. 2010. Recur-
rent neural network based language model. In Proc.
of Interspeech.

Piotr Mirowski and Andreas Vlachos. 2015. Depen-
dency recurrent neural language models for sentence
completion. In Proc. of ACL-IJCNLP.

Maria Nadejde, Siva Reddy, Rico Sennrich, Tomasz
Dwojak, Marcin Junczys-Dowmunt, Philipp Koehn,
and Alexandra Birch. 2017. Predicting target lan-
guage ccg supertags improves neural machine trans-
lation. In Proc. of WMT.

Graham Neubig, Chris Dyer, Yoav Goldberg, Austin
Matthews, Waleed Ammar, Antonios Anastasopou-
los, Miguel Ballesteros, David Chiang, Daniel
Clothiaux, Trevor Cohn, Kevin Duh, Manaal
Faruqui, Cynthia Gan, Dan Garrette, Yangfeng Ji,
Lingpeng Kong, Adhiguna Kuncoro, Gaurav Ku-
mar, Chaitanya Malaviya, Paul Michel, Yusuke
Oda, Matthew Richardson, Naomi Saphra, Swabha
Swayamdipta, and Pengcheng Yin. 2017a. DyNet:
The Dynamic Neural Network Toolkit. arXiv
preprint arXiv:1701.03980.

Graham Neubig, Yoav Goldberg, and Chris Dyer.
2017b. On-the-fly operation batching in dynamic
computation graphs. In Proc. of NIPS.

Gabriel Pereyra, George Tucker, Jan Chorowski,
Lukasz Kaiser, and Geoffrey Hinton. 2017. Regular-
izing neural networks by penalizing confident output
distributions. In Proc. of ICLR.

Matthew E. Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In Proc. of NAACL.

Slav Petrov and Dan Klein. 2007. Improved inference
for unlexicalized parsing. In Proc. of NAACL.

Alec Radford, Jeffrey Wu, Rewon Child, David Luan,
Dario Amodei, and Ilya Sutskever. 2019. Language
models are unsupervised multitask learners.

Brian Roark. 2001. Probabilistic top-down parsing
and language modeling. Computational Linguistics,
27(2).

Ronald Rosenfeld. 2000. Two decades of statistical
language modeling: Where do we go from here. In
Proc. of IEEE.

Yikang Shen, Shawn Tan, Alessandro Sordoni, and
Aaron C. Courville. 2019. Ordered neurons: In-
tegrating tree structures into recurrent neural net-
works. In Proc. of ICLR.

Xing Shi, Inkit Padhi, and Kevin Knight. 2016. Does
string-based neural MT learn source syntax? In
Proc. of EMNLP.

Mitchell Stern, Daniel Fried, and Dan Klein. 2017. Ef-
fective inference for generative neural parsing. In
Proc. of EMNLP.

Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe,
Jonathon Shlens, and Zbigniew Wojna. 2016. Re-
thinking the inception architecture for computer vi-
sion. In Proc. of CVPR.

Ke M. Tran, Arianna Bisazza, and Christof Monz.
2018. The importance of being recurrent for mod-
eling hierarchical structure. In Proc. of EMNLP.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Proc. of NIPS.

Dani Yogatama, Yishu Miao, Gabor Melis, Wang Ling,
Adhiguna Kuncoro, Chris Dyer, and Phil Blunsom.
2018. Memory architectures in recurrent neural net-
work language models. In Proc. of ICLR.



3483

Appendix

Here we outline the hyperparameters and the ex-
perimental results with standard deviation values.

A Hyperparameters

The hyperparameters for each model is sum-
marised as follows.
LSTM LMs. For the LSTM LMs trained on the
full and small training sets, we use the follow-
ing hyperparameters that achieve the best valida-
tion perplexity following a grid search: 2-layer
LSTM with 650 hidden units per layer for the
full LSTM and 300 hidden units per layer for the
small LSTM (similar model capacity as the RNNG
trained on the same smaller training set), opti-
mised by stochastic gradient descent (SGD) with
a learning rate of 0.45 (decayed exponentially at
every epoch with a factor of 0.9 after the tenth
epoch), a dropout rate of 0.2 applied on both in-
put and recurrent connections, and a batch size of
20 sentences.
RNNG. For the RNNG, we use the following
hyperparameters that achieve the best validation
perplexity following a similar grid search: 2-layer
stack LSTM with 256 hidden units per layer, opti-
mised by SGD with a learning rate of 0.3 (decayed
exponentially at every epoch with a factor of 0.92
after the tenth epoch), a dropout rate of 0.3 ap-
plied on both input and recurrent connections, and
a batch size of 10 sentences.
DSA-LSTMs and Born-Again LSTMs. We
use the same hyperparameters for the DSA-
LSTMs trained on both the full and small (S-DSA-
LSTM) training sets and the born-again LSTM
(BA-LSTM) trained on the full training set. Since
the model architectures are identical with the re-
spective LSTM LMs (i.e. only the training objec-
tive is different), we only optimise for the learning
rates and keep all other hyperparameters the same.
We find that a learning rate of 0.4 and an expo-
nential decay factor of 0.9 applied after the tenth
epoch works well across all three models trained
with the KD objective.

B Experimental Results with Standard
Deviation

We summarise the experimental results that in-
clude standard deviation values in Table 3.



3484

Small Training Set Full Training Set
S-DSA-LSTM† RNNG† Full LSTM BA-LSTM DSA-LSTM BERT Humans

Gulordava et al. (2018) test ppl. 93.95 (±0.18) 92.30 (±0.27) 53.73 (±0.16) 54.64 (±0.25) 56.74 (±0.26) N/A N/A
SUBJECT-VERB AGREEMENT

Simple 0.96 (±0.03) 0.99 (±0.01) 1.00 (±0.00) 1.00 (±0.00) 1.00 (±0.00) 1.00 0.96
In a sentential complement 0.98 (±0.02) 0.93 (±0.02) 0.97 (±0.02) 0.98 (±0.02) 0.98 (±0.02) 0.83 0.93
Short VP coordination 0.88 (±0.04) 0.96 (±0.02) 0.96 (±0.02) 0.95 (±0.02) 0.99 (±0.02) 0.89 0.94
Long VP coordination 0.74 (±0.03) 0.94 (±0.03) 0.82 (±0.05) 0.80 (±0.04) 0.80 (±0.02) 0.98 0.82
Across a prepositional phrase 0.88 (±0.02) 0.95 (±0.01) 0.89 (±0.02) 0.89 (±0.03) 0.91 (±0.03) 0.85 0.85
Across a subject relative clause 0.87 (±0.02) 0.95 (±0.03) 0.87 (±0.02) 0.87 (±0.01) 0.90 (±0.02) 0.84 0.88
Across an object relative clause 0.69 (±0.06) 0.95 (±0.03) 0.77 (±0.11) 0.81 (±0.05) 0.84 (±0.03) 0.89 0.85
Across an object relative clause (no that) 0.61 (±0.05) 0.93 (±0.02) 0.70 (±0.05) 0.74 (±0.03) 0.77 (±0.02) 0.86 0.82
In an object relative clause 0.87 (±0.05) 0.96 (±0.01) 0.90 (±0.03) 0.91 (±0.03) 0.92 (±0.04) 0.95 0.78
In an object relative clause (no that) 0.88 (±0.03) 0.96 (±0.02) 0.86 (±0.05) 0.83 (±0.02) 0.92 (±0.02) 0.79 0.79
Average of subject-verb agreement 0.84 (±0.02) 0.95 (±0.01) 0.87 (±0.02) 0.88 (±0.01) 0.90 (±0.01) 0.89 0.86

REFLEXIVE ANAPHORA
Simple 0.90 (±0.01) 0.83 (±0.02) 0.91 (±0.01) 0.92 (±0.03) 0.91 (±0.04) 0.94 0.96
In a sentential complement 0.78 (±0.01) 0.46 (±0.05) 0.81 (±0.02) 0.81 (±0.02) 0.82 (±0.03) 0.89 0.91
Across a relative clause 0.67 (±0.03) 0.82 (±0.02) 0.64 (±0.02) 0.64 (±0.02) 0.67 (±0.03) 0.80 0.87
Average of reflexive anaphora 0.78 (±0.01) 0.70 (±0.02) 0.79 (±0.01) 0.79 (±0.02) 0.80 (±0.03) 0.88 0.91

NEGATIVE POLARITY ITEMS
Simple 0.84 (±0.05) 0.28 (±0.05) 0.96 (±0.04) 0.98 (±0.02) 0.94 (±0.04) N/A 0.98
Across a relative clause 0.73 (±0.07) 0.78 (±0.06) 0.75 (±0.12) 0.70 (±0.10) 0.91 (±0.07) N/A 0.81
Average of negative polarity items 0.79 (±0.05) 0.53 (±0.04) 0.86 (±0.06) 0.84 (±0.05) 0.92 (±0.05) N/A 0.90
Average of all constructions 0.82 (±0.02) 0.85 (±0.02) 0.85 (±0.02) 0.86 (±0.01) 0.89 (±0.01) N/A 0.88

Table 3: Experimental findings of the “DSA-LSTM”. For each column, we report the mean and standard
deviation values of 10 identical models trained from different random seeds. “S-DSA-LSTM” indicates
the DSA-LSTM trained on the smaller RNNG training set, while “BA-LSTM” is the born-again model
where the teacher is the full LSTM LM. We also compare with the syntactic generalisation of “BERT”
Base, which is not strictly comparable since it is trained on 30 times as much data. † indicates models
trained on the smaller 20% training set (§3). Results in bold denote the best among those trained with
the same amounts of data.


