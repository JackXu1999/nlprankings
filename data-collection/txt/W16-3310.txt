




































Proceedings of the 12th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+12), pages 93–102,
Düsseldorf, Germany, June 29 - July 1, 2016.

An Alternate View on Strong Lexicalization in TAG

Aniello De Santo1 Alëna Aksënova1

Department of Linguistics
Stony Brook University

1{aniello.desanto,alena.aksenova}@stonybrook.edu
2mail@thomasgraf.net

Thomas Graf 2

Abstract

TAGs were recently shown not to be
closed under strong lexicalization but to
be strongly lexicalizable by context-free
tree grammars of rank 2. This paper
presents an alternative lexicalization pro-
cedure that builds on an earlier gener-
alization of TAGs to multi-dimensional
trees. A previous theorem that every Tree
Substitution grammar is strongly lexical-
ized by a corresponding TAG is lifted to
higher dimensions to show that for ev-
ery d-dimensional TAG there exists a (d+
1)-dimensional TAG that strongly lexi-
calizes it. A similar lifting reveals that
d-dimensional TAGs are not closed un-
der strong lexicalization, so for arbitrary
TAGs an increase in dimensionality is an
unavoidable consequence of strong lexi-
calization.

1 Introduction

The lexicalization properties of different grammar
formalisms have been a topic of interest for a long
time. A grammar is lexicalized if the atoms from
which compound structures are assembled each
contain a pronounced lexical item. In the case of
TAGs, this means that no elementary trees may
contain only non-terminal symbols or the empty
string. Lexicalized grammars have the advantage
of being finitely ambiguous — no string of fi-
nite length can have an infinite number of possi-
ble analyses. Not only does this guarantee that
recognition is decidable, parsing is also simplified
in practice (Schabes et al., 1988): the hypothesis
space of the parser at any given point is signifi-
cantly reduced because elementary trees that can-
not be introduced by one of the symbols in the in-
put string never need to be considered. As a result,

many parsing algorithms assume that the grammar
is lexicalized or at least can be lexicalized in an au-
tomatic fashion (cf. Kallmeyer (2010)).

In particular for parsing, though, the issue is
not just whether a grammar can be lexicalized but
whether the lexicalization procedure preserves es-
sential properties of the grammar. While a recog-
nizer only needs to determine the well-formedness
of strings, a parser has to assign them structures
licensed by the grammar. One thus has to distin-
guish between two types of lexicalization: weak
lexicalization produces a weakly equivalent lex-
icalized grammar, whereas strong lexicalization
yields a lexicalized grammars that also generates
the same structural descriptions. Recent work
showed that TAGs I) can be weakly lexicalized
(Fujiyoshi, 2004), II) are not closed under strong
lexicalization (Kuhlmann and Satta, 2012) and III)
are strongly lexicalized by context-free tree gram-
mars of rank 2 (Maletti and Engelfriet, 2012).

This paper offers a different perspective on
strong lexicalization of TAGs that stays close to
the basic intuition of TAGs as a mechanism for
rewriting nodes by objects that are more complex
than strings. The main advantage is that this al-
lows us to preserve the basic insights of previous
proofs on TAG lexicalization. We adopt Roger’s
formalism of multi-dimensional trees (Sec. 2.2
and 2.3), with TAGs as the special case where
trees are limited to 3 dimensions (Rogers, 1998a;
Rogers, 1998b; Rogers, 2003a; Rogers, 2003b).
With TAGs lifted to arbitrary dimensions, we es-
tablish three central results:

1. Every d-dimensional TAG is a (d + 1)-
dimensional Tree Substitution Grammar
(TSG; Sec. 3.1)

2. Every d-dimensional TSG is strongly lexical-
ized by some d-dimensional TAG (Sec. 3.2;
cf. Schabes (1990)).

93



A↓

A

A

A

A

A*

A

A

A*

Figure 1: Substitution and adjunction

3. The class of d-dimensional TAGs is not
closed under strong lexicalization (Sec. 3.3;
cf. Kuhlmann and Satta (2012)).

This entails as a corollary that an increase in di-
mensionality is unavoidable in the strong lexical-
ization of (at least some) d-dimensional TAGs.

2 Preliminaries

In order to appreciate the results of Sec. 3.1–3.3,
the reader has to be familiar with a few core con-
cepts: the relation between adjunction and substi-
tution (2.1), the view of TAGs as a formalism over
3-dimensional trees (2.2), and their generalization
to trees of higher dimensionality (2.3).

2.1 Adjunction and Substitution

We assume familiarity on the reader’s part with the
TAG formalism as defined in Joshi (1985). A TAG
is specified by two finite sets I and A of initial and
auxiliary trees, respectively. Their union is the set
E of elementary trees. Every auxiliary tree con-
tains exactly one node that is marked as a foot
node (indicated by ∗ in our figures). Initial trees
must not contain any foot nodes. Elementary trees
are then combined by the operations of adjunction
and substitution, illustrated in Fig. 1.

The distinction between adjunction and substi-
tution plays an important role in this paper. Both
operations replace nodes by trees. Tree substitu-
tion can only replace leaf nodes, and the tree being
substituted may not contain a foot node. Tree ad-
junction, on the other hand, may rewrite any non-
terminal node by any tree that contains exactly one
foot node (i.e. by an auxiliary tree). Usually, it is
also required that the label of the rewritten node
is identical to the labels of the root (and the foot
node, if it exists) of the substituted tree. Nodes
are furthermore annotated with features to indicate
whether adjunction and substitution are mandatory
or optional as well as which trees may rewrite a
given node.

Substitution can be regarded as adjunction of a
foot-less tree at a leaf node. We thus use a more
general definition of adjunction. Given a tree t, let
t ↾ r be the subtree of t rooted in node r. Further-
more, t[n←− u] replaces a node n of t with tree u.
If n does not exist, then t[n←− u] = t. Now adjunc-
tion of u into t at node n is defined as t

n
⇐= u :=

t[n←− u[ f ←− t ↾ n]], where f is the foot node of
u. Substitution is the special case where f does
not exist so that t[n←− u[ f ←− t ↾ n]] = t[n←− u].
As long as nodes are correctly annotated with fea-
tures to ensure that n is a leaf iff u does not contain
a foot node and that labels are correctly matched,
this generalized notion of adjunction behaves ex-
actly as the combination of standard adjunction
and substitution. We can now define a tree substi-
tution grammar as a restricted TAG where all licit
instances of adjunction only rewrite leaf nodes —
this characterization will play an essential role in
Sec. 3.1.

2.2 TAGs as 3-Dimensional Grammar

Formalisms

The history of how a TAG G generates a specific
tree can be recorded as a derivation tree. Each
node in the derivation tree is labeled with the name
of an elementary tree and an edge 〈t,a,u〉 from t
to u with label a indicates t

a
⇐= u. The label of

the root node must be the name of an initial tree.
Now suppose that each node in the derivation tree
is replaced by the tree it denotes, and each edge
〈t,a,u〉 is instead replaced by a collection of un-
labeled edges that go from each node of u to the
node in t at address a. The result can be regarded
as a 3-dimensional tree such as the one in Fig. 2,
with the first dimension corresponding to prece-
dence, the second one to dominance, and the third
one to adjunction.

Rogers (1998b) shows that TAGs are equivalent
to context-free grammars over such 3-dimensional
trees. Each elementary tree is no longer a standard
2-dimensional tree but instead has a 3-dimensional
root node that is the mother of all nodes in the 2-
dimensional tree. Just like a context-free grammar
may combine 2-dimensional trees t and u if t con-
tains a leaf with the same label as the root node of
u, a TAG may combine 3-dimensional trees t and
u if t contains a leaf in the third dimension whose
label matches the 3-dimensional root of u. (Note
that the feature annotations regulating adjunction
are not considered part of node labels here.)

94



SNAβ :

a dS

b cε

SNAα :

a dS

b cS*NA

β

α

1 S •

SNA

a dS

b cε

S

a dS

b cS*NA

Figure 2: A standard TAG, one of its derivations, and the corresponding 3-dimensional tree

SNA

b S{u,v}

e S*NA
•S

(u)

SNA

c S{v}

d S*NA
•S

(v)

S{u}

ε
•S

(i)

SNA

b S{w}

e S*NA
•S

•S

(w)

SNA

c S

d S*NA

S{w}

ε
•S

•S

(i′)

Figure 3: Example of 3- and 4-dimensional TAGs

2.3 Generalization to Multi-Dimensional

Trees

Rogers (2003a; 2003b) explores how TAGs can be
made more powerful by increasing the dimension-
ality of elementary trees. Let us illustrate the idea
with a simple example first, which is also depicted
in Fig. 3.

Consider a TAG with I := {i} and A := {u,v}
such that the only valid adjunction steps are i

ai⇐= u,
u

au⇐= u, u
au⇐= v, and v

av⇐= v for some fixed ad-
dresses ai,au,av. In Fig. 3, the node at ai is labeled
S{u}, the one at au has label S{u,v}, and av refers to
the node with label S{v}.

This TAG allows derivations of the form iu∗v∗.
It is impossible for any TAG to allow only deriva-
tions of the form iunvn (n ≥ 0) so that the number
of u-trees matches the number of v-trees. How-
ever, a TAG with 4-dimensional trees has suffi-
cient power to generate exactly those derivations.

First we lift i to the 4-dimensional tree i′ by
adding a single node in the fourth dimension that
is the mother of all nodes in the 3-dimensional
tree. Then we build a 4-dimensional auxiliary tree
w that contains both u and v. Consider the com-
plex 3-dimensional tree t obtained from u and v
by identifying the 3-dimensional root of v with the

node at address au in u. Just as was done for i we
add a new root to t in the fourth dimension that
is the 4-dimensional mother of all nodes in t, thus
creating the 4-dimensional tree w. We also make
the node at address av the 3-dimensional foot node
of w (indicated by underlining) and add features so
that w can optionally adjoin into another instance
of w at address au. The result is a 4-dimensional
TAG that only licenses derivations of the form iw∗,
which produce standard TAG derivations of the
form iunvn, n ≥ 1 (see Fig. 4). This example can
be lifted to arbitrary dimensions to show that each
new dimension adds more power to TAGs.

With the general intuition well-established, we
now turn to the formal definition of higher-
dimensional TAGs. A detailed axiomatization of
multi-dimensional trees has already been provided
by Rogers (2003a), so we limit the discussion to
the bare essentials.

Let Σ be some fixed alphabet. For the sake of
simplicity, we assume that Σ directly encodes ad-
junction constraints. A 2-dimensional tree is an
ordered tree as usually defined, with nodes labeled
by symbols drawn from Σ. The tree is footed iff
it contains a foot node in the second dimension.
A d-dimensional local structure l over Σ (d ≥ 3)
consists of a Σ-labeled d-root r and a (d − 1)-
dimensional tree t over Σ such that r immediately
dominates every node n of t along the d-th dimen-
sion. The notion of (d − 1)-dimensional tree will
be clarified in the next paragraph. We also call
t := ydd−1(l) the (d − 1)-yield of the local struc-
ture, and we say that r is a d-dimensional mother
of a (d −1)-dimensional tree. Lower-dimensional
yields are obtained by iterated application of the
yield operator: ydn(l) = ydn(ydn+1(· · ·ydd(l))),
2 ≤ n < d. We sometimes omit the dimension of
the yield if it is clear from context.

The set of d-dimensional trees (d ≥ 3) is defined
in a recursive fashion. First, every d-dimensional
local structure is a d-dimensional tree. Then t
is a d-dimensional tree iff I) its root r and all

95



S{w}

ε
•S

•S

SNA

b S{w}

e S*NA
•S

SNA

c S

d S*NA

SNA

b S{w}

e S*NA
•S

SNA

c S

d S*NA

S

ε
•S

SNA

b S

e S*NA

SNA

b S

e S*NA

SNA

c S

d S*NA

SNA

c S

d S*NA

Figure 4: A complex 4-dimensional tree and the 3-dimensional tree obtained from it

96



the nodes immediately dominated by r along the
d-th dimension jointly form a d-dimensional lo-
cal structure, and II) every node that is immedi-
ately dominated by r in the d-th dimension and
that is itself a d-dimensional mother must be the
root of a d-dimensional tree. A d-dimensional
tree is footed iff one of its nodes is marked as a
(d − 1)-dimensional foot node. Note that no d-
dimensional tree may contain more than one foot
node for dimension (d − 1). Starting out with the
standard definition of 2-dimensional trees it is thus
possible to construct 3-dimensional local struc-
tures, which can be combined into 3-dimensional
trees, from which one can build 4-dimensional lo-
cal structures, and so on. The examples in Fig. 2
and 4 highlight that d-dimensional trees are indeed
trees in the sense that every point is reachable from
the d-dimensional root by exactly one path along
dimension d.

Whenever the (d − 1)-dimensional yield of
some local d-dimensional structure contains a
node that is a mother along the d-th dimension of
some (d−1)-dimensional tree, this encodes an in-
stance of d-dimensional adjunction (in the gener-
alized sense of Sec. 2.1 with substitution as a spe-
cial case of adjunction). Consider a d-dimensional
tree in which some node n is a d-dimensional
mother of a (d − 1)-dimensional tree u. Then the
output of this d-dimensional adjunction is com-
puted as follows. First, n becomes the (d − 1)-
dimensional mother of the (d − 2)-dimensional v
tree whose mother is the root of u. Note that if
some nodes of v are (d − 1)-dimensional moth-
ers, this relation is preserved. Second, if n is al-
ready a (d −1)-dimensional mother of some (d −
2)-dimensional tree w and u contains a (d − 1)-
dimensional foot node f , then f becomes the new
mother of w. In all other cases, adjunction is unde-
fined. The reader may consult Fig. 4 for a concrete
example of 4-dimensional adjunction.

We are now in a position to fully define d-
dimensional TAGs. An elementary d-dimensional
tree (d-tree) is a d-dimensional local structure. It
is an initial d-tree if it is not footed, and an aux-
iliary d-tree otherwise. Given two elementary d-

dimensional trees u and v, we write u
d a
⇐= v to in-

dicate that v may adjoin into u at node address a.
This is tantamount to stating that the grammar al-
lows for d-dimensional trees where the node at ad-
dress a in ydd−1(u) is the d-dimensional mother
of ydd−1(v). A d-dimensional TAG (d-TAG) Gd

S •

S •

SNA

a dS

b cε

S •

S

a dS

b cS*NA

Figure 5: The 3-dimensional adjunction from
Fig. 2 is replaced by 4-dimensional substitution

consists of a finite set of elementary d-trees. A
d-dimensional TSG (d-TSG) is the special case of
a d-TAG where it holds for every tree that a node
is a d-dimensional mother iff it is not a (d − 1)-
dimensional mother.

3 Strong Lexicalization of d-TAGs

3.1 d-TAGs are (d+1)-TSGs

The advantage of d-TAGs is that proofs for stan-
dard TAGs can be generalized to arbitrary dimen-
sion with little modification. The proof that TSGs
are strongly lexicalized by TAGs will be suitably
modified in the next section, thereby establishing
that d-TSGs are strongly lexicalized by d-TAGs.
This directly implies that (d + 1)-TAGs strongly
lexicalize d-TAGs thanks to a basic fact we show
now: every d-TAG is a (d +1)-TSG.

We first observe that a given d-TAG Gd can be
easily converted to a (d +1)-TAG Gd+1. Let e be
some elementary d-tree of Gd . We construct an
equivalent (d+1)-tree e′ such that ydd(e′) = e. To
this end, let e′ be a (d+1)-dimensional local struc-
ture with root r and yield e such that the label of
r is identical to the root label of e. Each node in
ydd−1(e′) may (or must) be adjoined to in dimen-
sion d + 1 iff the corresponding node in ydd−1(e)
may (or must) be adjoined to in dimension d.

An example of the construction was already
shown in Fig. 3: the 3-dimensional tree i is con-
verted into a 4-dimensional structure i′ by adding
a new root node S and edges linking the new root
to the nodes in i. Since there is a direct link be-
tween the 4-dimensional root node and each node
in the 3-dimensional tree, every node that was part
of i is now a leaf node in i′.

The conversion of interior nodes to leaves is
the essential aspect of the construction: all nodes
of e′ that can be adjoined to are d-dimensional
leaves. This holds because e is a d-dimensional
local structure, so the only node of e that is not a
leaf in dimension d is its root r, which cannot be

97



adjoined to. Clearly every node of e that can be a
mother in dimension (d + 1) must be a node that
can be adjoined to, and consequently it is neces-
sarily a leaf in dimension d. By definition, then,
Gd+1 is a (d +1)-TSG.

A concrete example is given in Fig. 5, where
the 3-dimensional trees α and β from Fig. 2 have
been lifted to 4-dimensional structures via the ad-
dition of 4-dimensional root nodes. As a result, the
node of 3-dimensional β that α was adjoined to in
Fig. 5 is now a leaf node of 4-dimensional β , and
the instance of adjunction in the third dimension is
replaced by substitution in the fourth dimension.

Proposition 1. For every d-TAG Gd there exists
a (d +1)-TSG Gd+1 such that the d-tree language
generated by G is the d-yield of the (d + 1)-tree
language generated by Gd+1.

3.2 d-TAGs Strongly Lexicalize d-TSGs

It has been known for a long time that TAGs
strongly lexicalize TSGs (Schabes, 1990; Joshi
and Schabes, 1997; Kuhlmann and Satta, 2012).
In this section we show that the corresponding
proof can be lifted to multidimensional structures.

Proposition 2. For each finitely ambiguous d-
dimensional TSG that does not generate the empty
string and contains only useful trees, there is
a strongly equivalent d-dimensional Lexicalized
TAG.

Let us first consider the general idea behind
the construction from Schabes (1990) for normal
TSGs, i.e. 3-TAGs where adjunction is only al-
lowed at leaf nodes. Given such a 3-TSG G, we
can build a lexicalized 3-TAG Gl that generates
the same tree language as G. The basic idea is
that G can be bifurcated into a recursive part and a
non-recursive part. The recursive part contains all
elementary trees u such that there is at least one 3-
dimensional tree generated by G in which a node
of u dominates another instance of u in the third
dimension. The non-recursive part consists of all
other elementary 3-trees, which form the set Il of

S •

S

T T

S S
(α)

S •

S

a
(β )

Figure 6: Non-lexicalized 3-dimensional TSG

initial trees of the lexicalized 3-TAG Gl . The set
Al of auxiliary trees of Gl is then created by tak-
ing the recursive part of G and computing its clo-
sure under 3-dimensional adjunction of trees from
Il (which is only allowed to target leaf nodes since
no t ∈ Il contains a foot node). Both Il and Al
are guaranteed to be finite, so Gl is indeed a 3-
TAG. Schabes proves, in our generalized termi-
nology, that G and Gl generate 3-dimensional tree
languages with the same 2-dimensional yield.

We now show that Schabes’ lexicalization al-
gorithm can be directly lifted to work on d-TAGs
such that every d-TSG is strongly lexicalized by
some d-TAG. As an illustrative example, we refer
to the 3-TSG depicted in Fig. 6 and the equivalent,
lexicalized 3-TAG in Fig. 7.

We start out with some well-known concepts
from graph theory that are needed in the construc-
tion of the graph from which the auxiliary trees are
computed. Given a Σ-labeled graph G := 〈N,B〉
with set N of nodes and set B ⊆ N × Σ × N of
branches, a path on G is a sequence 〈n1, . . . ,nk〉 ∈
Nk such that for all 1 ≤ i < k, 〈ni,σ ,ni+1〉 ∈ B
for some σ ∈ Σ (we use the term branches in-
stead of the more common “edges” to avoid con-
fusion between E as the set of edges and E as the
set of elementary trees of some TAG). If further-
more n1 = nk, then the path is a cycle. A subgraph
of G is a graph H = (N′,B′) such that N′ ⊆ N,
B′ ⊆ B, and 〈n1,σ ,n2〉 ∈ B′ implies n1,n2 ∈ N′.
The graph composition (also, lexicographic prod-
uct (Harary, 1972)) G1 ·G2 of graphs G1 := 〈N1,B1〉
and G2 := 〈N2,B2〉 is a graph such that: I) the node
set of G1 ·G2 is the cartesian product N1 ×N2, and
II) any two nodes (u,v) and (x,y) are connected by
a σ -labeled edge in G1 ·G2 iff either 〈u,σ ,x〉 ∈ B1
or u = x and 〈u,σ ,y〉 ∈ B2.

Now let us consider a d-dimensional finitely
ambiguous d-TSG Gd with set I of initial trees
such that the string yield of the language gener-
ated by Gd does not include the empty string. We
also assume that for every initial tree i ∈ I there is
at least one well-formed derivation that contains i.
Recall that a d-TSG does not have any auxiliary
trees by definition, wherefore all elementary trees
of Gd are useful initial trees. A lexicalized d-TAG
Gdlex is then built from the d-TSG G

d in four steps.

Step 1: Determine Recursion. In order to
distinguish between recursive and non-recursive
trees, we build a directed graph G = (N,B) where
N is the set of nodes labeled by the names of the

98



S •

S

T T

S*NA S

(α1)

S
a

S •

S

T T

S S*NA

(α2)

S
a

S •

S

a

(β )

Figure 7: The lexicalized 3-dimensional TAG

trees in I, and B⊆N×Add×N is a set of branches
labeled by tree addresses a ∈ Add. Let us con-
sider t1, t2 ∈ I, and let u be the node at address a
in ydd−1(t1). Then B contains an edge 〈t1,a, t2〉 iff

t1
d u
⇐= t2 is licensed by the grammar. A tree t ∈ I is

recursive iff t in Gd belongs to a cycle of G . We
use R to denote the set of all recursive initial trees,
whereas NR := I − R is the set of non-recursive
trees.

Step 2: Construct the set Ilex of initial trees.

We use T (NR) to denote the closure of NR un-
der adjunction. Since all members of NR are non-
recursive, T (NR) is finite. The set Ilex of initial
trees for the lexicalized d-TAG Glex is the max-
imal subset of T (NR) that only contains d-trees
whose root is labeled by the start category S. As
the empty string is not generated by Gd , the initial
trees of Glex have at least one terminal symbol on
the frontier. In the example in Fig. 6, β is the only
initial tree of the new grammar.

Step 3: Compute Cycles. A cycle of G is mini-
mal iff it contains no proper subgraph that is also a
cycle. Let C be a set of minimal cycles of G such
that the closure of C under graph composition is
the set of all cycles in G . The members of C are
referred to as base cycles.

Step 4: Construct the set of auxiliary trees.

Each base cycle ci ∈ C is decomposed as a tree
as follows: I) every node of the cycle is expanded
as the tree whose name labels the node; II) sub-
stitution of a tree into another is performed at the
addresses labeling the edge connecting the corre-
sponding nodes; III)the edge leading to recursion
is cut from the graph and the tree node whose ad-
dress labeled that edge is labeled as the foot node.
A null adjunction constraint (NA) is also put on the
foot nodes to disallow recursive adjunction within
the auxiliary trees. The set of auxiliary trees for

Gdlex is initialized to the empty set A. Then, sub-
stitution is exhaustively applied to the nodes in the
yield of any of the base cycle trees — except for
the unique node marked as a foot node — through
the elements of the set of initial trees. The re-
sulting set of trees is the set of auxiliary trees of
the lexicalized d-dimensional TAG Gdlex. This con-
cludes the construction of Gdlex.

Figure 7 shows the final lexicalized 3-
dimensional grammar. The set of initial trees con-
tains tree β , whereas α1 and α2 belong to the set
of auxiliary trees. The resulting d-TAG Gdlex gen-
erates exactly the same set of trees as the original,
finitely ambiguous d-TSG Gd .

We can now see how previous results directly
imply that d-dimensional TAGs strongly lexicalize
d-dimensional TSGs. Furthermore, in the previ-
ous section we discussed how d-TAGs are equiv-
alent to (d + 1)-TSGs. This jointly implies that
(d +1)-TAGs strongly lexicalize d-TAGs.

Proposition 3. For each finitely ambiguous d-
dimensional TAG that does not generate the empty
string and contains only useful trees, there is a
strongly equivalent (d + 1)-dimensional Lexical-
ized TAG.

3.3 d-TAGs are Not Closed Under Strong

Lexicalization

In the previous sections we have shown that each
d-TSG has a strongly equivalent d + 1-TAG, and
that d-TAGs are strongly lexicalized by (d + 1)-
TAGs. These results have been obtained by lift-
ing previous proofs for TAGs to d-dimensional
TAGs. However, one might wonder if the ex-
tension of TAGs to multidimensional structures is
enough to assure lexicalization. In other words,
are d-dimensional TAGs closed under strong lexi-
calization?

99



(α) SNA –

•S

SNA

SOA

TNA

SOA

TNA

– – SNA

(β ) SNA –
•S

SNA

aNA

– – SNA

(γ) SOA – ε

Figure 8: Parenthetical encoding for the 4-
dimensional version of the non lexicalized gram-
mar in Fig. 6

(α1) SNA –

•S

SNA

SNA

TNA

SOA

TNA

–
•S

SNA

aNA

– – SNA – – SNA

(α2) SNA –

•S

SNA

SOA

TNA

SNA

TNA

–
•S

SNA

aNA

– – SNA

– – SNA

(β ) SNA –
•S

SNA

aNA

– – SNA

(γ) SOA – ε

Figure 9: Parenthetical encoding for a 4-
dimensional lexicalized grammar

Diligent readers may have already anticipated
that the answer is negative. As before, it suf-
fices to lift an existing proof from the literature
to higher dimensions, in this case Kuhlmann and
Satta’s (2012) result that TAGs are not closed un-
der strong lexicalization. This entails that the in-
crease in dimensionality from d to d + 1 brought
about by the strong lexicalization procedure can-
not be avoided in the general case.

Kuhlmann and Satta start out with the observa-
tion that adjunction may be regarded as context-
free rewriting on the path of trees. They build a
counterexample grammar to show that a lexical-
ized TAG cannot generate the same trees as the
non-lexicalized, original TAG. They then pro-
vide a proof based on the intuition that, while
a non-lexicalized grammar can potentially extend
the length of the shortest path from the tree root
node to any terminal node ad infinitum, the length
of such paths is finitely bounded for the corre-
sponding lexicalized grammar. This property also

holds for d-TAGs, where recursive adjunction of
d-trees that do not contain any lexical nodes can
increase the length of paths without bounds.

Kuhlmann and Satta’s proof rests on two ba-
sic concepts. The first one is their parentheti-
cal notation, which represents trees as string paths
and thus highlights how adjunction operates on the
path from the root node to a foot node (the spine
of a tree). The second is a function called excess,
which is used to measure the distance between a
root node and a terminal node on a tree path.

The parenthetical encoding of TAGs can be
adopted for multidimensional trees without prob-
lems. Consider some arbitrary d-dimensional tree
T d . Every leaf node of T d is reachable from its
d-dimensional root following the branches encod-
ing the d-dimensional dominance relation. This
unique path from the root node to a frontier
node along the d-th dimension is the spine of
the d-dimensional structure (cf. Rogers (2003a)).
The parenthetical notation simply encodes the d-
dimensional spine of d-trees: every internal node
n along the d-th dimension is represented by a
pair of matching brackets, e.g. “S-(” and “)-S”).
These brackets surround the parenthetical encod-
ing of the d-dimensional subtree rooted in n. A
tree encoded in this notation is called a spinal tree.
Examples are given in Fig. 8 and 9.

Since d-dimensional trees can be described in
the same fashion as 2-dimensional ones via the
parenthetical notation, the notion of excess re-
mains untouched. For every terminal node v, the
excess of v is the mismatch of left parentheses over
right parentheses in the sequence of nodes in the
path from the d-dimensional root node to v. This is
done by subtracting the number of all right paren-
thesis from the number of all left parenthesis that
occur along the path from the root to v. For exam-
ple, the excess of a in α2 of Fig. 9 is 2. The excess
of the whole spinal tree is always 0.

Let us now return to the 3-TAG given in Fig. 6.
It can be lifted to a 4-dimensional TSG as de-
scribed in the Sec. 2.3. Figure 8 shows a paren-
thetical rewriting of the 4-dimensional trees in the
grammar, while Fig. 9 shows the rewriting of a
possible lexicalized d-dimensional grammar, ob-
tained via the procedure in Schabes (1990). Let us
call the non-lexicalized parenthetical encoding G1,
and the hypothetical lexicalized version Glex1 . If
Glex1 is a correct lexicalization of G1, it should gen-
erate exactly the same 4-dimensional trees. But

100



TAGs can be generalized
to d-TAGs

Rogers (2003a)

1) (d +1)-TAG
slex
−−−→ d-TAG

2 ) d-TAGs are not closed un-
der strong lexicalization

This paper

CFTGs(2)
slex
−−−→ TAGs

Maletti & Engelfriet (2012)

TAGs
slex
−−−→ CFGs/TSGs

Schabes (1990)

TAGs are not closed under
strong lexicalization

Kuhlmann & Satta (2012)

Figure 10: Summary of relevant existing results

the notion of excess reveals that this is not the case.
In G1, adjunction of α into another instance of α
can take place an arbitrary number of times. As
a result, when β finally adjoins into α , an un-
bounded number of left brackets may occur be-
tween the root of the tree and leaf node a of β ,
wherefore there is no upper bound on the excess
of trees generated by G1. For Glex1 , on the other
hand, every tree must contain a lexical node with
excess at most 2. Hence G1 and Glex1 cannot gen-
erate the same language of d-trees.

While this simple example does not preclude
that some other grammar strongly lexicalizes G1,
this is in fact impossible. Kuhlmann and Satta
prove that the potential variation in the excess of a
lexical node in an elementary tree is bounded by a
constant tied to the grammar, while the excess of
a lexical node in a non-lexicalized grammar is po-
tentially infinite. Like so many other facts about
3-TAGs, this one carries over to d-TAGs, too, and
consequently d-TAGs turn out not to be closed un-
der strong lexicalization either.

4 Conclusion

The generalization of TAGs to higher-dimensional
trees first proposed in Rogers (2003a) is very use-
ful in increasing the power of TAGs while pre-
serving the mechanics of their structure-building
operations. This paper has exploited this fact to
lift a variety of previously known results about
TAGs to higher dimensions, culminating in the re-
alization that TAGs are strongly lexicalized by 4-
dimensional TAGs and, more generally, that ev-
ery d-TAG is strongly lexicalized by some (d +
1)-TAG. A major advantage of lexicalization is

that it simplifies the parsing problem. At the
same time, increasing the dimensionality of TAGs
makes parsing harder, which can be gleaned from
the fact that 4-dimensional TAGs can generate
the 8-language anbncndnen f ngnhn, whereas stan-
dard (3-dimensional) TAGs are restricted to the 4-
language anbncndn. An interesting question for fu-
ture research will be whether the simplifications of
lexicalization can offset the parsing disadvantages
of higher dimensions.

Acknowledgments

We are very grateful to the three anonymous re-
viewers, whose comments led to several improve-
ments in the presentation of the material.

References

Akio Fujiyoshi. 2004. Epsilon-free grammars and
lexicalized grammars that generate the class of the
mildly contextsensitive languages. In Proceedings
of the 7th International Workshop on Tree Adjoining
Grammar and Related Formalisms, pages 16–23.

Frank Harary. 1972. Graph Theory. Addison-Wesley,
Reading, MA.

Aravind K. Joshi and Y. Schabes. 1997. Tree-
adjoining grammars. In Grzegorz Rosenberg and
Arto Salomaa, editors, Handbook of Formal Lan-
guages, pages 69–123. Springer, Berlin.

Aravind K. Joshi. 1985. Tree-adjoining grammars:
How much context sensitivity is required to provide
reasonable structural descriptions? In David Dowty,
Lauri Karttunen, and Arnold Zwicky, editors, Nat-
ural Language Parsing, pages 206–250. Cambridge
University Press, Cambridge.

101



Laura Kallmeyer. 2010. Parsing Beyond Context-Free
Grammars. Springer, Berlin.

Marco Kuhlmann and Giorgio Satta. 2012. Tree-
adjoining grammars are not closed under strong lexi-
calization. Computational Linguistics, 38:617–629.

Andreas Maletti and Joost Engelfriet. 2012. Strong
lexicalization of tree adjoining grammars. In Pro-
ceedings of the 50th Annual Meeting of the Associ-
ation for Computational Linguistics: Long Papers -
Volume 1, ACL ’12, pages 506–515.

James Rogers. 1998a. A descriptive characteriza-
tion of tree-adjoining languages. In Proceedings
of the 17th International Conference on Computa-
tional Linguistics (COLING’98) and the 36th An-
nual Meeting of the Association for Computational
Linguistics (ACL’98), pages 1117–1121.

James Rogers. 1998b. On defining TALs with logical
constraints. In Anne Abeillé, Tilman Becker, Owen
Rambow, Giorgio Satta, and K. Vijay-Shanker, edi-
tors, Fourth International Workshop on Tree Adjoin-
ing Grammars and Related Frameworks (TAG+4),
pages 151–154.

James Rogers. 2003a. Syntactic structures as multi-
dimensional trees. Research on Language and Com-
putation, 1:265–305.

James Rogers. 2003b. wMSO theories as grammar for-
malisms. Theoretical Computer Science, 293:291–
320.

Yves Schabes, Anne Abeillé, and Aravind K. Joshi.
1988. Parsing strategies with ‘lexicalized’ gram-
mars: Application to tree adjoining grammars.
Technical Report MS-CIS-88-65, Department of
Computer & Information Science, University of
Pennsylvania, Philadelphia, PA.

Yves Schabes. 1990. Mathematical and Computa-
tional Aspects of Lexicalized Grammars. Ph.D. the-
sis, Philadelphia, PA, USA.

102


