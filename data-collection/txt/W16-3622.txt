



















































A Context-aware Natural Language Generator for Dialogue Systems


Proceedings of the SIGDIAL 2016 Conference, pages 185–190,
Los Angeles, USA, 13-15 September 2016. c©2016 Association for Computational Linguistics

A Context-aware Natural Language Generator for Dialogue Systems

Ondřej Dušek and Filip Jurčı́ček
Charles University in Prague, Faculty of Mathematics and Physics

Institute of Formal and Applied Linguistics
Malostranské náměstı́ 25, CZ-11800 Prague, Czech Republic

{odusek,jurcicek}@ufal.mff.cuni.cz

Abstract

We present a novel natural language gen-
eration system for spoken dialogue sys-
tems capable of entraining (adapting) to
users’ way of speaking, providing contex-
tually appropriate responses. The genera-
tor is based on recurrent neural networks
and the sequence-to-sequence approach.
It is fully trainable from data which in-
clude preceding context along with re-
sponses to be generated. We show that
the context-aware generator yields signif-
icant improvements over the baseline in
both automatic metrics and a human pair-
wise preference test.

1 Introduction

In a conversation, speakers are influenced by pre-
vious utterances of their counterparts and tend to
adapt (align, entrain) their way of speaking to each
other, reusing lexical items as well as syntactic
structure (Reitter et al., 2006). Entrainment occurs
naturally and subconsciously, facilitates success-
ful conversations (Friedberg et al., 2012; Nenkova
et al., 2008), and forms a natural source of vari-
ation in dialogues. In spoken dialogue systems
(SDS), users were reported to entrain to system
prompts (Parent and Eskenazi, 2010).

The function of natural language generation
(NLG) components in task-oriented SDS typically
is to produce a natural language sentence from a
dialogue act (DA) (Young et al., 2010) represent-
ing an action, such as inform or request, along
with one or more attributes (slots) and their val-
ues (see Fig. 1). NLG is an important component
of SDS which has a great impact on the perceived
naturalness of the system; its quality can also in-
fluence the overall task success (Stoyanchev and
Stent, 2009; Lopes et al., 2013). However, typical

is there another option

inform(line=M102, direction=Herald Square, 
           vehicle=bus, departure_time=9:01am, 
           from_stop=Wall Street)

Take bus line M102 from Wall Street 
                    to Herald Square at 9:01am.
There is a bus at 9:01am from Wall Street 
                           to Herald Square using line M102.

typical NLG

context-aware
additions

contextually bound response

preceding user utterance

Figure 1: An example of NLG input and output,
with context-aware additions.

NLG systems in SDS only take the input DA into
account and have no way of adapting to the user’s
way of speaking. To avoid repetition and add vari-
ation into the outputs, they typically alternate be-
tween a handful of preset variants (Jurčı́ček et al.,
2014) or use overgeneration and random sampling
from a k-best list of outputs (Wen et al., 2015b).
There have been several attempts at introducing
entrainment into NLG in SDS, but they are lim-
ited to rule-based systems (see Section 4).

We present a novel, fully trainable context-
aware NLG system for SDS that is able to entrain
to the user and provides naturally variable outputs
because generation is conditioned not only on the
input DA, but also on the preceding user utter-
ance (see Fig. 1). Our system is an extension of
Dušek and Jurčı́ček (2016b)’s generator based on
sequence-to-sequence (seq2seq) models with at-
tention (Bahdanau et al., 2015). It is, to our knowl-
edge, the first fully trainable entrainment-enabled
NLG system for SDS. We also present our first re-
sults on the dataset of Dušek and Jurčı́ček (2016a),
which includes the preceding user utterance along
with each data instance (i.e., pair of input mean-
ing representation and output sentence), and we
show that our context-aware system outperforms
the baseline in both automatic metrics and a hu-
man pairwise preference test.

185



In the following, we first present the architec-
ture of our generator (see Section 2), then give an
account of our experiments in Section 3. We in-
clude a brief survey of related work in Section 4.
Section 5 contains concluding remarks and plans
for future work.

2 Our generator

Our seq2seq generator is an improved version of
Dušek and Jurčı́ček (2016b)’s generator, which it-
self is based on the seq2seq model with atten-
tion (Bahdanau et al., 2015, see Fig. 2) as imple-
mented in the TensorFlow framework (Abadi et
al., 2015).1 We first describe the base model in
Section 2.1, then list our context-aware improve-
ments in Section 2.2.

2.1 Baseline Seq2seq NLG with Attention
The generation has two stages: The first, encoder
stage uses a recurrent neural network (RNN)
composed of long-short-term memory (LSTM)
cells (Hochreiter and Schmidhuber, 1997; Graves,
2013) to encode a sequence of input tokens2 x =
{x1, . . . , xn} into a sequence of hidden states h =
{h1, . . . , hn}:

ht = lstm(xt, ht−1) (1)

The second, decoder stage then uses the hidden
states h to generate the output sequence y =
{y1, . . . , ym}. Its main component is a second
LSTM-based RNN, which works over its own in-
ternal state st and the previous output token yt−1:

st = lstm((yt−1 ◦ ct)WS , st−1) (2)
It is initialized by the last hidden encoder state
(s0 = hn) and a special starting symbol. The gen-
erated output token yt is selected from a softmax
distribution:

p(yt|yt−1 . . . ,x) = softmax((st ◦ ct)WY ) (3)
In (2) and (3), ct represents the attention model – a
sum over all encoder hidden states, weighted by a
feed-forward network with one tanh hidden layer;
WS and WY are linear projection matrices and “◦”
denotes concatenation.

DAs are represented as sequences on the en-
coder input: a triple of the structure “DA type, slot,

1See (Dušek and Jurčı́ček, 2016b) and (Bahdanau et al.,
2015) for a more formal description of the base model.

2Embeddings are used (Bengio et al., 2003), i.e., xt and
yt are vector representations of the input and output tokens.

value” is created for each slot in the DA and the
triples are concatenated (see Fig. 2).3 The gen-
erator supports greedy decoding as well as beam
search which keeps track of top k most probable
output sequences at each time step (Sutskever et
al., 2014; Bahdanau et al., 2015).

The generator further features a simple con-
tent classification reranker to penalize irrelevant
or missing information on the output. It uses an
LSTM-based RNN to encode the generator out-
puts token-by-token into a fixed-size vector. This
is then fed to a sigmoid classification layer that
outputs a 1-hot vector indicating the presence of
all possible DA types, slots, and values. The vec-
tors for all k-best generator outputs are then com-
pared to the input DA and the number of missing
and irrelevant elements is used to rerank them.

2.2 Making the Generator Context-aware

We implemented three different modifications to
our generator that make its output dependent on
the preceding context:4

Prepending context. The preceding user utter-
ance is simply prepended to the DA and fed into
the encoder (see Fig. 2). The dictionary for con-
text utterances is distinct from the DA tokens dic-
tionary.

Context encoder. We add another, separate en-
coder for the context utterances. The hidden states
of both encoders are concatenated, and the de-
coder then works with double-sized vectors both
on the input and in the attention model (see Fig. 2).

n-gram match reranker. We added a second
reranker for the k-best outputs of the generator
that promotes outputs that have a word or phrase
overlap with the context utterance. We use geo-
metric mean of modified n-gram precisions (with
n ∈ {1, 2}) as a measure of context overlap, i.e.,
BLEU-2 (Papineni et al., 2002) without brevity
penalty. The log probability l of an output se-
quence on the generator k-best list is updated as
follows:

l = l + w · √p1p2 (4)
3While the sequence encoding may not necessarily be

the best way to obtain a vector representation of DA, it was
shown to work well (Dušek and Jurčı́ček, 2016b).

4For simplicity, we kept close to the basic seq2seq archi-
tecture of the generator; other possibilities for encoding the
context, such as convolution and/or max-pooling, are possi-
ble.

186



lstm lstm lstm lstm lstm lstm

lstm lstm lstm lstm lstm

+

att att att att att

lstm

att

inform_no_match
departure_time

DEPARTURE_TIME ampm AMPM
inform_no_match

lstm

att

lstm

att

schedule for DEPARTURE_TIME AMPM not found .<GO>

schedule for DEPARTURE_TIME AMPM not found . <STOP>

schedule for NUMBER AMPMis there a

lstm lstm lstm lstm lstm lstm lstm

schedule for NUMBER AMPMis there a

lstm lstm lstm lstm lstm lstm lstm

+
+

+

Base modelPrepending context

Context encoder

decoder with attentionDA encoder

Figure 2: The base Seq2seq generator (black) with our improvements: prepending context (green) and
separate context encoder (blue).

Setup BLEU NIST
Baseline (context not used) 66.41 7.037
n-gram match reranker 68.68 7.577
Prepending context 63.87 6.456

+ n-gram match reranker 69.26 7.772
Context encoder 63.08 6.818

+ n-gram match reranker 69.17 7.596

Table 1: BLEU and NIST scores of different gen-
erator setups on the test data.

In (4), p1 and p2 are modified unigram and bigram
precisions of the output sequence against the con-
text, and w is a preset weight. We believe that any
reasonable measure of contextual match would be
viable here, and we opted for modified n-gram
precisions because of simple computation, well-
defined range, and the relation to the de facto stan-
dard BLEU metric.5 We only use unigrams and
bigrams to promote especially the reuse of single
words or short phrases.

In addition, we combine the n-gram match
reranker with both of the two former approaches.

We used gold-standard transcriptions of the im-
mediately preceding user utterance in our experi-
ments in order to test the context-aware capabil-
ities of our system in a stand-alone setting; in a
live SDS, 1-best speech recognition hypotheses
and longer user utterance history can be used with
no modifications to the architecture.

3 Experiments

We experiment on the publicly available dataset of
Dušek and Jurčı́ček (2016a)6 for NLG in the pub-

5We do not use brevity penalty as we do not want to de-
mote shorter output sequences. However, adding it to the for-
mula in our preliminary experiments yielded similar results
to the ones presented here.

6The dataset is released at http://hdl.handle.
net/11234/1-1675; we used a more recent version
from GitHub (https://github.com/UFAL-DSG/alex_

lic transport information domain, which includes
preceding context along with each pair of input
DA and target natural language sentence. It con-
tains over 5,500 utterances, i.e., three paraphrases
for each of the over 1,800 combinations of input
DA and context user utterance. The data con-
cern bus and subway connections on Manhattan,
and comprise four DA types (iconfirm, inform, in-
form no match, request). They are delexicalized
for generation to avoid sparsity, i.e., stop names,
vehicles, times, etc., are replaced by placeholders
(Wen et al., 2015a). We applied a 3:1:1 split of the
set into training, development, and test data. We
use the three paraphrases as separate instances in
training data, but they serve as three references for
a single generated output in validation and evalua-
tion.

We test the three context-aware setups de-
scribed in Section 2.2 and their combinations,
and we compare them against the baseline non-
context-aware seq2seq generator. Same as Dušek
and Jurčı́ček (2016b), we train the seq2seq mod-
els by minimizing cross-entropy on the training set
using the Adam optimizer (Kingma and Ba, 2015),
and we measure BLEU on the development set af-
ter each pass over the training data, selecting the
best-performing parameters.7 The content clas-
sification reranker is trained in a similar fashion,
measuring misclassification on both training and
development set after each pass.8 We use 5 dif-

context_nlg_dataset), which contains several small
fixes.

7Based on our preliminary experiments on development
data, we use embedding size 50, LSTM cell size 128, learning
rate 0.0005, and batch size 20. Training is run for at least
50 and up to 1000 passes, with early stopping if the top 10
validation BLEU scores do not change for 100 passes.

8We use the same settings except for the number of passes
over the training data, which is at least 20 and 100 at most.
For validation, development set is given 10 times more im-
portance than the training set.

187



ferent random initializations of the networks and
average the results.

Decoding is run with a beam size of 20 and the
penalty weight for content classification reranker
set to 100. We set the n-gram match reranker
weight based on experiments on development
data.9

3.1 Evaluation Using Automatic Metrics
Table 1 lists our results on the test data in terms
of the BLEU and NIST metrics (Papineni et al.,
2002; Doddington, 2002). We can see that while
the n-gram match reranker brings a BLEU score
improvement, using context prepending or sepa-
rate encoder results in scores lower than the base-
line.10 However, using the n-gram match reranker
together with context prepending or separate en-
coder brings significant improvements of about
2.8 BLEU points in both cases, better than using
the n-gram match reranker alone.11 We believe
that adding the context information into the de-
coder does increase the chances of contextually
appropriate outputs appearing on the decoder k-
best lists, but it also introduces a lot more uncer-
tainty and therefore, the appropriate outputs may
not end on top of the list based on decoder scores
alone. The n-gram match reranker is then able
to promote the relevant outputs to the top of the
k-best list. However, if the generator itself does
not have access to context information, the n-gram
match reranker has a smaller effect as contextually
appropriate outputs may not appear on the k-best
lists at all. A closer look at the generated outputs
confirms that entrainment is present in sentences
generated by the context-aware setups (see Fig. 2).

In addition to BLEU and NIST scores, we mea-
sured the slot error rate ERR (Wen et al., 2015b),
i.e., the proportion of missing or superfluous slot
placeholders in the delexicalized generated out-
puts. For all our setups, ERR stayed around 3%.

3.2 Human Evaluation
We evaluated the best-performing setting based
on BLEU/NIST scores, i.e., prepending context
with n-gram match reranker, in a blind pairwise
preference test with untrained judges recruited on

9w is set to 5 when the n-gram match reranker is run by
itself or combined with the separate encoder, 10 if combined
with prepending context.

10In our experiments on development data, all three meth-
ods brought a mild BLEU improvement.

11Statistical significance at 99% level has been assessed
using pairwise bootstrap resampling (Koehn, 2004).

the CrowdFlower crowdsourcing platform.12 The
judges were given the context and the system out-
put for the baseline and the context-aware system,
and they were asked to pick the variant that sounds
more natural. We used a random sample of 1,000
pairs of different system outputs over all 5 ran-
dom initializations of the networks, and collected
3 judgments for each of them. The judges pre-
ferred the context-aware system output in 52.5%
cases, significantly more than the baseline.13

We examined the judgments in more detail and
found three probable causes for the rather small
difference between the setups. First, both setups’
outputs fit the context relatively well in many cases
and the judges tend to prefer the overall more fre-
quent variant (e.g., for the context “starting from
Park Place”, the output “Where do you want to
go?” is preferred over “Where are you going to?”).
Second, the context-aware setup often selects a
shorter response that fits the context well (e.g., “Is
there an option at 10:00 am?” is confirmed sim-
ply with “At 10:00 am.”), but the judges seem
to prefer the more eloquent variant. And third,
both setups occasionally produce non-fluent out-
puts, which introduces a certain amount of noise.

4 Related Work

Our system is an evolutionary improvement over
the LSTM seq2seq system of Dušek and Jurčı́ček
(2016b) and as such, it is most related in terms
of architecture to other recent RNN-based ap-
proaches to NLG, which are not context-aware:
RNN generation with a convolutional reranker by
Wen et al. (2015a) and an improved LSTM-based
version (Wen et al., 2015b), as well as the LSTM
encoder-aligner-decoder NLG system of Mei et al.
(2015). The recent end-to-end trainable SDS of
Wen et al. (2016) does have an implicit access to
previous context, but the authors do not focus on
its influence on the generated responses.

There have been several attempts at modelling
entrainment in dialogue (Brockmann et al., 2005;
Reitter et al., 2006; Buschmeier et al., 2010) and
even successful implementations of entrainment
models in NLG systems for SDS, where entrain-
ment caused an increase in perceived naturalness
of the system responses (Hu et al., 2014) or in-
creased naturalness and task success (Lopes et al.,

12http://crowdflower.com
13The result is statistically significant at 99% level accord-

ing to the pairwise bootstrap resampling test.

188



Context is there a later option
Input DA iconfirm(alternative=next)
Baseline Next connection.
n-gram match reranker You want a later connection.
Prepending context + n-gram match reranker You want a later connection.
Context encoder + n-gram match reranker You want a later option.
Context i need to find a bus connection
Input DA inform no match(vehicle=bus)
Baseline No bus found, sorry.
n-gram match reranker I did not find a bus route.
Prepending context + n-gram match reranker I’m sorry, I cannot find a bus connection.
Context encoder + n-gram match reranker I’m sorry, I cannot find a bus connection.
Context i rather take the bus
Input DA inform(vehicle=bus, departure time=8:01am, direction=Cathedral Parkway, from stop=Bowling Green, line=M15)
Baseline At 8:01am by bus line M15 from Bowling Green to Cathedral Parkway.
n-gram match reranker At 8:01am by bus line M15 from Bowling Green to Cathedral Parkway.
Prepending context + n-gram match reranker You can take the M15 bus from Bowling Green to Cathedral Parkway at 8:01am.
Context encoder + n-gram match reranker At 8:01am by bus line M15 from Bowling Green to Cathedral Parkway.

Table 2: Example outputs of the different setups of our generator (with entrainment highlighted)

2013; Lopes et al., 2015). However, all of the pre-
vious approaches are completely or partially rule-
based. Most of them attempt to model entrainment
explicitly, focus on specific entrainment phenom-
ena only, and/or require manually selected lists
of variant expressions, while our system learns
synonyms and entrainment rules implicitly from
the corpus. A direct comparison with previous
entrainment-capable NLG systems for SDS is not
possible in our stand-alone setting since their rules
involve the history of the whole dialogue whereas
we focus on the preceding utterance in our experi-
ments.

5 Conclusions and Further Work

We presented an improvement to our natural
language generator based on the sequence-to-
sequence approach (Dušek and Jurčı́ček, 2016b),
allowing it to exploit preceding context user utter-
ances to adapt (entrain) to the user’s way of speak-
ing and provide more contextually accurate and
less repetitive responses. We used two different
ways of feeding previous context into the genera-
tor and a reranker based on n-gram match against
the context. Evaluation on our context-aware
dataset (Dušek and Jurčı́ček, 2016a) showed a sig-
nificant BLEU score improvement for the com-
bination of the two approaches, which was con-
firmed in a subsequent human pairwise preference
test. Our generator is available on GitHub at the
following URL:

https://github.com/UFAL-DSG/tgen

In future work, we plan on improving the n-
gram matching metric to allow fuzzy matching
(e.g., capturing different forms of the same word),
experimenting with more ways of incorporating
context into the generator, controlling the output

eloquence and fluency, and most importantly, eval-
uating our generator in a live dialogue system.
We also intend to evaluate the generator with au-
tomatic speech recognition hypotheses as context
and modify it to allow n-best hypotheses as con-
texts. Using our system in a live SDS will also
allow a comparison against previous handcrafted
entrainment-capable NLG systems.

Acknowledgments

This work was funded by the Ministry of Edu-
cation, Youth and Sports of the Czech Republic
under the grant agreement LK11221 and core re-
search funding, SVV project 260 333, and GAUK
grant 2058214 of Charles University in Prague. It
used language resources stored and distributed by
the LINDAT/CLARIN project of the Ministry of
Education, Youth and Sports of the Czech Repub-
lic (project LM2015071). The authors would like
to thank Ondřej Plátek and Miroslav Vodolán for
helpful comments.

References
M. Abadi, A. Agarwal, P. Barham, E. Brevdo,

Z. Chen, C. Citro, G. S. Corrado, A. Davis,
J. Dean, M. Devin, S. Ghemawat, I. Goodfellow,
A. Harp, G. Irving, M. Isard, Y. Jia, R. Jozefow-
icz, L. Kaiser, M. Kudlur, J. Levenberg, D. Mané,
R. Monga, S. Moore, D. Murray, C. Olah, M. Schus-
ter, J. Shlens, B. Steiner, I. Sutskever, K. Talwar,
P. Tucker, V. Vanhoucke, V. Vasudevan, F. Viégas,
O. Vinyals, P. Warden, M. Wattenberg, M. Wicke,
Y. Yu, and X. Zheng. 2015. TensorFlow: Large-
scale machine learning on heterogeneous systems.
Software available from tensorflow.org.

D. Bahdanau, K. Cho, and Y. Bengio. 2015. Neural
machine translation by jointly learning to align and
translate. In International Conference on Learning
Representations. arXiv:1409.0473.

189



Y. Bengio, R. Ducharme, P. Vincent, and C. Jauvin.
2003. A neural probabilistic language model. Jour-
nal of Machine Learning Research, 3:1137–1155.

C. Brockmann, A. Isard, J. Oberlander, and M. White.
2005. Modelling alignment for affective dialogue.
In Workshop on Adapting the Interaction Style to Af-
fective Factors at the 10th International Conference
on User Modeling.

H. Buschmeier, K. Bergmann, and S. Kopp. 2010.
Modelling and evaluation of lexical and syntactic
alignment with a priming-based microplanner. In
Empirical Methods in Natural Language Genera-
tion, number 5790 in Lecture Notes in Computer
Science, pages 85–104. Springer.

G. Doddington. 2002. Automatic evaluation
of machine translation quality using N-gram co-
occurrence statistics. In Proceedings of the Sec-
ond International Conference on Human Language
Technology Research, pages 138–145.

O. Dušek and F. Jurčı́ček. 2016a. A context-aware
natural language generation dataset for dialogue sys-
tems. In Workshop on Collecting and Generating
Resources for Chatbots and Conversational Agents
- Development and Evaluation, pages 6–9.

O. Dušek and F. Jurčı́ček. 2016b. Sequence-to-
sequence generation for spoken dialogue via deep
syntax trees and strings. arXiv:1606.05491. To ap-
pear in Proceedings of ACL.

H. Friedberg, D. Litman, and S. B. F. Paletz. 2012.
Lexical entrainment and success in student engineer-
ing groups. In Proc. of SLT, pages 404–409.

A. Graves. 2013. Generating sequences with recurrent
neural networks. arXiv:1308.0850.

S. Hochreiter and J. Schmidhuber. 1997. Long short-
term memory. Neural computation, 9(8):1735–
1780.

Z. Hu, G. Halberg, C. Jimenez, and M. Walker. 2014.
Entrainment in pedestrian direction giving: How
many kinds of entrainment. In Proc. of IWSDS,
pages 90–101.

F. Jurčı́ček, O. Dušek, O. Plátek, and L. Žilka. 2014.
Alex: A statistical dialogue systems framework. In
Proc. of Text, Speech and Dialogue, pages 587–594.

D. Kingma and J. Ba. 2015. Adam: A
method for stochastic optimization. In Interna-
tional Conference on Learning Representations.
arXiv:1412.6980.

P. Koehn. 2004. Statistical significance tests for
machine translation evaluation. In Proceedings of
EMNLP, pages 388–395.

J. Lopes, M. Eskenazi, and I. Trancoso. 2013. Auto-
mated two-way entrainment to improve spoken dia-
log system performance. In Proc. of ICASSP, pages
8372–8376.

J. Lopes, M. Eskenazi, and I. Trancoso. 2015. From
rule-based to data-driven lexical entrainment mod-
els in spoken dialog systems. Computer Speech &
Language, 31(1):87–112.

H. Mei, M. Bansal, and M. R. Walter. 2015.
What to talk about and how? selective genera-
tion using LSTMs with coarse-to-fine alignment.
arXiv:1509.00838.

A. Nenkova, A. Gravano, and J. Hirschberg. 2008.
High frequency word entrainment in spoken dia-
logue. In Proc. of ACL-HLT, pages 169–172.

K. Papineni, S. Roukos, T. Ward, and W.-J. Zhu. 2002.
BLEU: A method for automatic evaluation of ma-
chine translation. In Proc. of ACL, pages 311–318.

G. Parent and M. Eskenazi. 2010. Lexical entrainment
of real users in the Let’s Go spoken dialog system.
In Proc. of Interspeech, pages 3018–3021.

D. Reitter, F. Keller, and J. D. Moore. 2006. Compu-
tational modelling of structural priming in dialogue.
In Proc. of NAACL-HLT: Short Papers, pages 121–
124.

S. Stoyanchev and A. Stent. 2009. Lexical and syntac-
tic priming and their impact in deployed spoken di-
alog systems. In Proc. of NAACL-HLT, pages 189–
192.

I. Sutskever, O. Vinyals, and Q. VV Le. 2014. Se-
quence to sequence learning with neural networks.
In Advances in Neural Information Processing Sys-
tems, pages 3104–3112. arXiv:1409.3215.

T.-H. Wen, M. Gasic, D. Kim, N. Mrksic, P.-H. Su,
D. Vandyke, and S. Young. 2015a. Stochastic lan-
guage generation in dialogue using recurrent neural
networks with convolutional sentence reranking. In
Proc. of SIGDIAL, pages 275–284.

T.-H. Wen, M. Gasic, N. Mrkšić, P.-H. Su, D. Vandyke,
and S. Young. 2015b. Semantically conditioned
LSTM-based natural language generation for spo-
ken dialogue systems. In Proc. of EMNLP, pages
1711–1721.

T.-H. Wen, M. Gašić, N. Mrkšić, L. M. Rojas-
Barahona, P.-H. Su, S. Ultes, D. Vandyke, and
S. Young. 2016. A network-based end-
to-end trainable task-oriented dialogue system.
arXiv:1604.04562.

S. Young, M. Gašić, S. Keizer, F. Mairesse, J. Schatz-
mann, B. Thomson, and K. Yu. 2010. The hid-
den information state model: A practical frame-
work for POMDP-based spoken dialogue manage-
ment. Computer Speech & Language, 24(2):150–
174.

190


