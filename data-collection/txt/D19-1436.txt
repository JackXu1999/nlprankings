



















































ARAML: A Stable Adversarial Training Framework for Text Generation


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 4271‚Äì4281,
Hong Kong, China, November 3‚Äì7, 2019. c¬©2019 Association for Computational Linguistics

4271

ARAML: A Stable Adversarial Training Framework for Text Generation

Pei Ke‚àó, Fei Huang‚àó, Minlie Huang‚Ä†, Xiaoyan Zhu
Institute for Artificial Intelligence, State Key Lab of Intelligent Technology and Systems

Beijing National Research Center for Information Science and Technology
Department of Computer Science and Technology, Tsinghua University, Beijing 100084, China

kepei1106@outlook.com, f-huang18@mails.tsinghua.edu.cn
aihuang@tsinghua.edu.cn, zxy-dcs@tsinghua.edu.cn

Abstract

Most of the existing generative adversarial net-
works (GAN) for text generation suffer from
the instability of reinforcement learning train-
ing algorithms such as policy gradient, leading
to unstable performance. To tackle this prob-
lem, we propose a novel framework called Ad-
versarial Reward Augmented Maximum Like-
lihood (ARAML). During adversarial train-
ing, the discriminator assigns rewards to sam-
ples which are acquired from a stationary dis-
tribution near the data rather than the gen-
erator‚Äôs distribution. The generator is opti-
mized with maximum likelihood estimation
augmented by the discriminator‚Äôs rewards in-
stead of policy gradient. Experiments show
that our model can outperform state-of-the-art
text GANs with a more stable training process.

1 Introduction

Natural text generation, as a key task in NLP,
has been advanced substantially thanks to the
flourish of neural models (Bengio et al., 2003;
Mikolov et al., 2010). Typical frameworks such
as sequence-to-sequence (seq2seq) have been ap-
plied to various generation tasks, including ma-
chine translation (Sutskever et al., 2014) and di-
alogue generation (Vinyals and Le, 2015). The
standard paradigm to train such neural models
is maximum likelihood estimation (MLE), which
maximizes the log-likelihood of observing each
word in the text given the ground-truth proceed-
ing context (Graves, 2013).

Although widely used, MLE suffers from the
exposure bias problem (Bengio et al., 2015; Ran-
zato et al., 2016): during test, the model sequen-
tially predicts the next word conditioned on its pre-
vious generated words while during training con-
ditioned on ground-truth words. To tackle this

‚àó Equal contribution
‚Ä† Corresponding author: Minlie Huang

problem, generative adversarial networks (GAN)
with reinforcement learning (RL) training ap-
proaches have been introduced to text generation
tasks (Yu et al., 2017; Che et al., 2017; Lin et al.,
2017; Fedus et al., 2018; Guo et al., 2018; Shi
et al., 2018; Xu et al., 2018), where the discrim-
inator is trained to distinguish real and generated
text samples to provide reward signals for the gen-
erator, and the generator is optimized via policy
gradient (Yu et al., 2017).

However, recent studies have shown that poten-
tial issues of training GANs on discrete data are
more severe than exposure bias (Semeniuta1 et al.,
2018; Caccia et al., 2018). One of the fundamental
issues when generating discrete text samples with
GANs is training instability. Updating the gener-
ator with policy gradient always leads to an un-
stable training process because it‚Äôs difficult for the
generator to derive positive and stable reward sig-
nals from the discriminator even with careful pre-
training (Che et al., 2017). As a result, the genera-
tor gets lost due to the high variance of reward sig-
nals and the training process may finally collapse
(Li et al., 2017).

In this paper, we propose a novel adversar-
ial training framework called Adversarial Reward
Augmented Maximum Likelihood (ARAML) to
deal with the instability issue of training GANs
for text generation. At each iteration of adversarial
training, we first train the discriminator to assign
higher rewards to real data than to generated sam-
ples. Then, inspired by reward augmented max-
imum likelihood (RAML) (Norouzi et al., 2016),
the generator is updated on the samples acquired
from a stationary distribution with maximum like-
lihood estimation (MLE), weighted by the dis-
criminator‚Äôs rewards. This stationary distribution
is designed to guarantee that training samples are
surrounding the real data, thus the exploration
space of our generator is indeed restricted by the



4272

MLE training objective, resulting in more stable
training. Compared to other text GANs with RL
training techniques, our framework acquires sam-
ples from the stationary distribution rather than the
generator‚Äôs distribution, and uses RAML training
paradigm to optimize the generator instead of pol-
icy gradient. Our contributions are mainly as fol-
lows:

‚Ä¢ We analyze the fundamental issue of current
GANs for text generation from the perspec-
tives of training instability.

‚Ä¢ We propose a novel framework called Adver-
sarial Reward Augmented Maximum Like-
lihood (ARAML), which incorporates sta-
ble RAML training into adversarial training
paradigm. Experimental results on three text
generation tasks show the effectiveness of our
method.

2 Related Work

Recently, text generation has been widely studied
with neural models trained with maximum likeli-
hood estimation (Graves, 2013). However, MLE
tends to generate universal text (Li et al., 2016).
Various methods have been proposed to enhance
the generation quality by refining the objective
function (Li et al., 2016; Mou et al., 2016) or mod-
ifying the generation distribution with external in-
formation like topic (Xing et al., 2017), sentence
type (Ke et al., 2018), emotion (Zhou et al., 2018a)
and knowledge (Zhou et al., 2018b).

As mentioned above, MLE suffers from the ex-
posure bias problem (Bengio et al., 2015; Ranzato
et al., 2016). Thus, reinforcement learning has
been introduced to text generation tasks such as
policy gradient (Ranzato et al., 2016) and actor-
critic (Bahdanau et al., 2017). (Norouzi et al.,
2016) proposed an efficient and stable approach
called Reward Augmented Maximum Likelihood
(RAML), which connects the log-likelihood and
expected rewards to incorporate MLE training ob-
jective into RL framework.

Since some text generation tasks have no ex-
plicit metrics to be directly optimized, adversar-
ial training has been applied to generating discrete
text samples with a discriminator to learn a proper
reward. For instance, SeqGAN (Yu et al., 2017)
devised a discriminator to distinguish the real data
and generated samples, and a generator to max-
imize the reward from the discriminator via pol-

icy gradient. Other variants of GANs have been
proposed to improve the generator or the discrimi-
nator. To improve the generator, MaliGAN (Che
et al., 2017) developed a normalized maximum
likelihood optimization target for the generator to
stably model the discrete sequences. LeakGAN
(Guo et al., 2018) guided the generator with re-
ward signals leaked from the discriminator at all
generation steps to deal with long text generation
task. MaskGAN (Fedus et al., 2018) employed
an actor-critic architecture to make the generator
fill in missing text conditioned on the surrounding
context, which is expected to mitigate the prob-
lem of mode collapse. As for the discriminator,
RankGAN (Lin et al., 2017) replaced traditional
discriminator with a ranker to learn the relative
ranking information between the real texts and
generated ones. Inverse reinforcement learning
(Shi et al., 2018) used a trainable reward approxi-
mator as the discriminator to provide dense reward
signals at each generation step. DPGAN (Xu et al.,
2018) introduced a language model based discrim-
inator and regarded cross-entropy as rewards to
promote the diversity of generation results.

The most similar works to our model are RAML
(Norouzi et al., 2016) and MaliGAN (Che et al.,
2017): 1) Compared with RAML, our model adds
a discriminator to learn the reward signals instead
of choosing existing metrics as rewards. We be-
lieve that our model can adapt to various text gen-
eration tasks, particularly those without explicit
evaluation metrics. 2) Unlike MaliGAN, we ac-
quire samples from a fixed distribution near the
real data rather than the generator‚Äôs distribution,
which is expected to make the training process
more stable.

3 Model

3.1 Task Definition and Model Overview

Text generation can be formulated as follows:
given the real data distribution Pdata(X), the task
is to train a generative model GŒ∏ where PGŒ∏(X)
can fit Pdata(X) well. In this formulation, X =
x1x2 ¬∑ ¬∑ ¬∑xm and xt(1 ‚â§ t ‚â§ m) denotes a word in
the vocabulary V .

Figure 1 shows the overview of our model
ARAML. This adversarial training framework
consists of two phases: 1) The discriminator is
trained to assign higher rewards to real data than
to generated data. 2) The generator is trained on
the samples acquired from a stationary distribu-



4273

Real Data 

G 

sample sample 

Real Data 

Train D 

Real Data 

Sample from ùëÉùë† 

reward1 

reward2 

reward3 

Training Samples 

D Train 

G 

Discriminator 

Train 

Generator 

Generated Data 

Figure 1: Overview of ARAML. The training samples are acquired from a stationary distribution Ps based on the
real data. The generator is then trained on the samples augmented by the discriminator‚Äôs rewards. The discriminator
is trained to distinguish real data and generated data.

tion with reward augmented MLE training objec-
tive. This training paradigm of the generator in-
deed constrains the search space with the MLE
training objective, which alleviates the issue of un-
stable training.

3.2 Discriminator

The discriminatorDœÜ aims to distinguish real data
and generated data like other GANs. Inspired by
Least-Square GAN (Mao et al., 2017), we devise
the loss function as follows:

LDœÜ =
1

2
EX‚àºPdata(X)

[
(DœÜ(X)‚àí 1)2

]
+

1

2
EX‚àºPGŒ∏ (X)

[
(DœÜ(X))

2
]

(1)

This loss function forces the discriminator to as-
sign higher rewards to real data than to gener-
ated data, so the discriminator can learn to provide
more proper rewards as the training proceeds.

3.3 Generator

The training objective of our generator GŒ∏ is de-
rived from the objective of other discrete GANs
with RL training method:

LRL,Œ∏ = ‚àíEX‚àºPGŒ∏ (X)[rœÜ(X)]‚àí œÑH(PGŒ∏(X))
(2)

where rœÜ(X) denotes the rewards from the dis-
criminator DœÜ and the entropy regularized term
H(PGŒ∏(X)) encourages GŒ∏ to generate diverse
text samples. œÑ is a temperature hyper-parameter
to balance these two terms.

As mentioned above, discrete GANs suffer
from the instability issue due to policy gradient,

thus they are consequently difficult to train. In-
spired by RAML (Norouzi et al., 2016), we intro-
duce an exponential payoff distribution QœÜ(X) to
connect RL loss with RAML loss:

QœÜ(X) =
1

Z
exp(rœÜ(X)/œÑ) (3)

where Z =
‚àë

X exp(rœÜ(X)/œÑ). Thus, we can
rewrite LRL,Œ∏ with PGŒ∏(X) and QœÜ(X) as fol-
lows:

LRL,Œ∏ = œÑKL(PGŒ∏(X)||QœÜ(X)) + constant
(4)

Following RAML, we remove the constant term
and optimize the KL divergence in the opposite
direction:

LRAML,Œ∏ = KL(QœÜ(X)||PGŒ∏(X))
= ‚àíEX‚àºQœÜ(X)[logPGŒ∏(X)]‚àíH(QœÜ(X))
= ‚àíEX‚àºQœÜ(X)[logPGŒ∏(X)] + constant (5)

where H(QœÜ(X)) is a constant in the training
phase of the generator. It has been proved that
LRL,Œ∏ and LRAML,Œ∏ are equivalent up to their
first order Taylor approximations, and they have
the same global optimum (Norouzi et al., 2016).
LRAML,Œ∏ can be trained in a MLE-like fash-
ion but sampling from the distribution QœÜ(X)
is intractable in the adversarial setting, because
QœÜ(X) varies with the discriminator DœÜ. Thus,
we introduce importance sampling to separate
sampling process fromDœÜ and obtain the final loss
function:

LGŒ∏ = ‚àíEX‚àºPs(X)[WœÜ(X) logPGŒ∏(X)] (6)



4274

where Ps(X) denotes a stationary distribution and
WœÜ(X) ‚àù QœÜ(X)/Ps(X). To optimize this loss
function, we first construct the fixed distribution
Ps(X) to get samples, and devise the proper re-
ward function rœÜ(X) to train the generator in a
stable and effective way.

3.3.1 Sampling
We construct the distribution Ps based on Pdata:

Ps(X) = EX‚àºPdata(X)[Ps(Xs|X)] (7)

In this way, Ps(Xs|X) can be designed to guaran-
tee that Ps(X) is near Pdata(X), leading to a more
stable training process. To obtain a new sampleXs
from a real data sample X , we can design three
steps which contain sampling an edit distance d,
the positions {p1, p2, ¬∑ ¬∑ ¬∑ , pd} for substitution and
the new words {w1, w2, ¬∑ ¬∑ ¬∑ , wd} filled into the
corresponding positions. Thus, Ps(Xs|X) can be
decomposed into three terms:

Ps(Xs|X) = P (d, p, w|X)
= P (d|X)P (p|X, d)P (w|X, d, p) (8)

The first step is to sample an edit distance based
on a real data sample X , where X = x1x2 ¬∑ ¬∑ ¬∑xm
is a sequence of length m. The number of sen-
tences which have the edit distance e to some in-
put sentence can be computed approximately as
below:

c(e,m) =

(
m

e

)
¬∑ (|V| ‚àí 1)e (9)

where c(e,m) denotes the number of sentences
which have an edit distance e(e ‚àà {0, 1, ...,m})
to a sentence of length m, and |V| indicates the
size of vocabulary. We then follow (Norouzi et al.,
2016) to re-scale the counts by exp{‚àíe/œÑ} and do
normalization, so that we can sample an edit dis-
tance d‚àó from:

P (d = d‚àó|X) = exp{‚àíd
‚àó/œÑ}c(d‚àó,m)‚àëm

e=0 exp{‚àíe/œÑ}c(e,m)
(10)

where œÑ , as a temperature hyper-parameter, re-
stricts the search space surrounding the original
sentence. Larger œÑ brings more samples with long
edit distances.

The next step is to select positions for substitu-
tion based on the sampled edit distance d‚àó. Intu-
itively, we can randomly choose d‚àó distinct posi-
tions inX to be replaced by new words. The prob-
ability of choosing the position p‚àó is calculated as

follows:

P (p = p‚àó|X, d = d‚àó) = d
‚àó

m
(11)

Following this sampling strategy, we can obtain
the position set {p1, p2, ¬∑ ¬∑ ¬∑ , pd‚àó}. This strategy
approximately guarantees that the edit distance be-
tween a new sentence and the original sentence is
d‚àó.

At the final step, our model determines new
words for substitution at each sampled position
pj(j = 1, 2, ..., d

‚àó). We can formulate this sam-
pling process from the original sequence X to a
new sample Xs as a sequential transition X =
X0 ‚Üí X1 ‚Üí ¬∑ ¬∑ ¬∑ ‚Üí Xd‚àó = Xs. At each
step from Xj‚àí1 to Xj (j = 1, ¬∑ ¬∑ ¬∑ , d‚àó), we
first sample a new word wj from the distribution
P (w|Xj‚àí1, p = pj), then replace the old word at
position pj of Xj‚àí1 to obtain Xj . The whole sam-
pling process can be decomposed as follows:

P (w|X, d = d‚àó,p = {p1, p2, ¬∑ ¬∑ ¬∑ , pd‚àó})

=
d‚àó‚àè
j=1

P (wj |Xj‚àí1, p = pj) (12)

There are two common sampling strategies to
model P (w|Xj‚àí1, p = pj), i.e. random sam-
pling and constrained sampling. Random sam-
pling strategy samples a new word wj according
to the uniform distribution over the vocabulary
V (Norouzi et al., 2016), while constrained sam-
pling strategy samples wj to maximize the lan-
guage model score of the target sentence Xj (Su
et al., 2018; Miao et al., 2019). Here, we adopt
constrained sampling in our model and compare
the performances of two strategies in the experi-
ment.

3.3.2 Training
We devise the reward function rœÜ(X) according to
the discriminator‚Äôs output DœÜ(X) and the station-
ary distribution Ps(X):

rœÜ(X) = œÑ ¬∑ [logPs(X) +DœÜ(X)] (13)

Intuitively, this reward function encourages the
generator to generate sentences with large sam-
pling probability and high rewards from the dis-
criminator. Thus, the weight of samples WœÜ(X)
can be calculated as follows:

WœÜ(X) ‚àù
QœÜ(X)

Ps(X)
‚àù exp {DœÜ(X)} (14)



4275

So far, we can successfully optimize the gener-
ator‚Äôs loss LGŒ∏ via Equation 6. This training
paradigm makes our generator avoid possible vari-
ances caused by policy gradient and get more sta-
ble reward signals from the discriminator, because
our generator is restricted to explore the training
samples near the real data.

Algorithm 1 Adversarial Reward Augmented
Maximum Likelihood
Require:

Total adversarial training iterations: N iters
Steps of training generator: G steps
Steps of training discriminator: D steps

1: Pre-train the generator GŒ∏ with MLE loss
2: Generate samples from PGŒ∏
3: Pre-train the discriminator DœÜ via Eq.(1)
4: Construct Ps(X) via Eq.(7) - Eq.(12)
5: for each s = 1, 2, ..., N iters do
6: for each j = 1, 2, ..., G steps do
7: Update GŒ∏ via Eq.(6)
8: end for
9: for each k = 1, 2, ..., D steps do

10: Update DœÜ via Eq.(1)
11: end for
12: end for

3.4 Extension to Conditional Text Generation
We have shown our adversarial training frame-
work for text generation tasks without an in-
put. Actually, it can also be extended to con-
ditional text generation tasks like dialogue gen-
eration. Given the data distribution Pdata(C,X)
whereC,X denote contexts and responses respec-
tively, the objective function of ARAML‚Äôs genera-
tor can be modified as below:

LGŒ∏ = ‚àíE(C,X)‚àºPdata(C,X)
[

EXs‚àºPs(Xs|C,X) [WœÜ(C,Xs) logPGŒ∏(Xs|C)]
]

(15)

where WœÜ(C,Xs) ‚àù exp{DœÜ(C,Xs)} and
DœÜ(C,Xs) is trained to distinguish whether Xs is
the true response to C.

3.5 Comparison with RAML and MaliGAN
The most similar works to our framework are
RAML (Norouzi et al., 2016) and MaliGAN (Che
et al., 2017). The main difference among them is
the training objective of their generators. We have
shown different objective functions in Table 1. For

comparison, we use the form with no input for all
the three models.

Our model is greatly inspired by RAML, which
gets samples from a non-parametric distribution
Q(X) constructed based on a specific reward.
Compared to RAML, our reward comes from a
learnable discriminator which varies as the adver-
sarial training proceeds rather than a specific re-
ward function. This difference equips our frame-
work with the ability to adapt to the text gener-
ation tasks with no explicit evaluation metrics as
rewards.

Our model is also similar to MaliGAN, which
gets samples from the generator‚Äôs distribution.
In MaliGAN‚Äôs training objective, GŒ∏‚Ä≤ also indi-
cates the generator‚Äôs distribution but it‚Äôs used in
the sampling phase and fixed at each optimiza-
tion step. The weight of samples W

‚Ä≤
œÜ(X) ‚àù

DœÜ(X)
1‚àíDœÜ(X) . Different from our model, MaliGAN
acquires samples from the generator‚Äôs distribution
PGŒ∏‚Ä≤ , which usually brings samples with low re-
wards even with careful pre-training for the gen-
erator, leading to training instability. Instead, our
framework gets samples from a stationary distri-
bution Ps around real data, thus our training pro-
cess is more stable.

Model Training Objective of Generator
RAML LGŒ∏ = ‚àíEX‚àºQ(X)[logPGŒ∏ (X)]

MaliGAN LGŒ∏ = ‚àíEX‚àºPG
Œ∏‚Ä≤

(X)[W
‚Ä≤
œÜ(X) logPGŒ∏ (X)]

ARAML LGŒ∏ = ‚àíEX‚àºPs(X)[WœÜ(X) logPGŒ∏ (X)]

Table 1: Training objectives of generators for RAML,
MaliGAN and ARAML.

4 Experiment

4.1 Datasets

Dataset Amount(Train/Test) Vocabulary Length
COCO 80,000/5,000 4,839 12.8

EMNLP2017 49,996/10,000 5,721 27.8
WeiboDial 100,000/5,000 7,998 7.3/10.8

Table 2: Statistics of COCO, EMNLP2017 WMT and
WeiboDial. The average lengths 7.3/10.8 of Weibo-
Dial indicate the lengths of posts and responses, respec-
tively.

We evaluated ARAML on three datasets:
COCO image caption dataset (Chen et al.,
2015), EMNLP2017 WMT dataset1 and Weibo-
Dial single-turn dialogue dataset (Qian et al.,

1http://statmt.org/wmt17/translation-task.html



4276

2018). COCO and EMNLP2017 WMT are the
common benchmarks with no input to evaluate the
performance of discrete GANs, and we followed
the existing works to preprocess these datasets
(Shi et al., 2018; Guo et al., 2018). WeiboDial, as
a dialogue dataset, was applied to test the perfor-
mance of our model with input trigger. We sim-
ply removed post-response pairs containing low-
frequency words and randomly selected a subset
for our training/test set. The statistics of three
datasets are presented in Table 2.

4.2 Baselines

We compared our model with MLE, RL and GAN
baselines. Since COCO and EMNLP2017 WMT
don‚Äôt have input while WeiboDial regards posts
as input, we chose the following baselines respec-
tively:
MLE: a RNN model trained with MLE objective
(Graves, 2013). Its extension, Seq2Seq, can work
on the dialogue dataset (Sutskever et al., 2014).
SeqGAN: The first text GAN model that updates
the generator with policy gradient based on the re-
wards from the discriminator (Yu et al., 2017).
LeakGAN: A variant of SeqGAN that provides
rewards based on the leaked information of the
discriminator for the generator (Guo et al., 2018).
MaliGAN: A variant of SeqGAN that optimizes
the generator with a normalized maximum likeli-
hood objective (Che et al., 2017).
IRL: This inverse reinforcement learning method
replaces the discriminator with a reward approxi-
mator to provide dense rewards (Shi et al., 2018).
RAML: A RL approach to incorporate MLE ob-
jective into RL training framework, which regards
BLEU as rewards (Norouzi et al., 2016).
DialogGAN: An extension of SeqGAN tuned
to dialogue generation task with MLE objective
added to the adversarial objective (Li et al., 2017).
DPGAN: A variant of DialogGAN which uses a
language model based discriminator and regards
cross-entropy as rewards (Xu et al., 2018).

Note that MLE, SeqGAN, LeakGAN, Mali-
GAN and IRL are the baselines on COCO and
EMNLP2017 WMT, while MLE, RAML, Dialog-
GAN, and DPGAN on WeiboDial. The original
codes are used to test the baselines.

4.3 Implementation Details

The implementation details of our model are
shown in Table 3. For COCO / EMNLP2017, the

Dataset COCO / EMNLP2017 WeiboDial
Generator LSTM GRU
Discriminator GRU & CNN GRU & MLP

Temperature 0.85 (COCO) 0.950.9 (EMNLP2017)
Sampling size 5 5
Dimension of 128 100word embedding
Batch size 100 100
Pretraining epochs 50 / 15 / 50 50 / 10 / 30(G/D/LM)
Optimizer Adam Adam
Learning rate(G/D) 0.001 / 0.0001 0.001 / 0.0001

Table 3: Implementation details of ARAML. G/D/LM
indicates the generator / discriminator / language model
used in constrained sampling, respectively.

generator is a LSTM unit (Hochreiter and Schmid-
huber, 1997) with 128 cells, and the discriminator
is implemented based on (Yu et al., 2017). For
WeiboDial, the generator is an encoder-decoder
structure with attention mechanism, where both
the encoder and the decoder consist of a two-layer
GRU (Cho et al., 2014) with 128 cells. The dis-
criminator is implemented based on (Tao et al.,
2018). The language model used in the con-
strained sampling of ARAML is implemented in
the same setting as the generators, and is pre-
trained on the training set of each dataset. The
codes and the datasets are available at https:
//github.com/kepei1106/ARAML.

As for the details of the baselines, the genera-
tors of all the baselines except LeakGAN are the
same as ours. Note that the generator of Leak-
GAN consists of a hierarchical LSTM unit, thus
we followed the implementation in the original
paper. In terms of the differences, the discrimi-
nators of GAN baselines are implemented based
on the original papers. Other hyper-parameters of
baselines including batch size, learning rate, and
pre-training epochs, were set based on the origi-
nal codes, because the convergence of baselines is
sensitive to these hyper-parameters.

4.4 Language Generation on COCO and
EMNLP2017 WMT

We adopted forward/reverse perplexity (Zhao
et al., 2018) and Self-BLEU (Zhu et al., 2018)
to evaluate the quality of generated texts. For-
ward perplexity (PPL-F) indicates the perplexity
on the generated data provided by a language
model trained on real data to measure the fluency
of generated samples. Reverse perplexity (PPL-R)
switches the roles of generated data and real data

https://github.com/kepei1106/ARAML
https://github.com/kepei1106/ARAML


4277

Model COCO EMNLP2017 WMTPPL-F PPL-R S-BLEU-2/3/4 PPL-F PPL-R S-BLEU-2/3/4
MLE 18.83¬± 0.51 38.81¬± 0.97 0.790¬± 0.006 / 0.598¬± 0.009 / 0.419¬± 0.010 55.64¬± 1.03 192.33¬± 9.51 0.771¬± 0.005 / 0.505¬± 0.009 / 0.304¬± 0.008

SeqGAN 33.07¬± 1.98 49.24¬± 2.36 0.814¬± 0.005 / 0.619¬± 0.008 / 0.430¬± 0.007 67.60¬± 3.48 276.82¬± 5.12 0.786¬± 0.019 / 0.500¬± 0.029 / 0.276¬± 0.023
LeakGAN 11.43¬± 2.74 87.54¬± 6.42 0.877¬± 0.032 / 0.762¬± 0.045 / 0.645¬± 0.049 17.92¬± 1.77 491.70¬± 18.29 0.890¬± 0.013 / 0.751¬± 0.011 / 0.604¬± 0.009
MaliGAN 47.16¬± 2.94 54.40¬± 1.29 0.786¬± 0.005 / 0.572¬± 0.008 / 0.370¬± 0.007 126.84¬± 11.18 288.20¬± 16.48 0.780¬± 0.019 / 0.494¬± 0.032 / 0.265¬± 0.028

IRL 41.86¬± 11.82 84.23¬± 7.02 0.857¬± 0.014 / 0.687¬± 0.031 / 0.499¬± 0.062 285.20¬± 36.47 1124.57¬± 109.80 0.890¬± 0.008 / 0.656¬± 0.052 / 0.406¬± 0.077
ARAML 26.97¬± 0.55 35.79¬± 0.49 0.777¬± 0.005 / 0.560¬± 0.006/ 0.366¬± 0.008 77.90¬± 0.70 188.41¬± 3.18 0.745¬± 0.002 / 0.455¬± 0.006 / 0.257¬± 0.006

Table 4: Automatic evaluation on COCO and EMNLP2017 WMT. Each metric is presented with mean and standard
deviation.

to reflect the discrepancy between the generated
distribution and the data distribution. Self-BLEU
(S-BLEU) regards each sentence in the generated
collection as hypothesis and the others as refer-
ence to obtain BLEU scores, which evaluates the
diversity of generated results.

Results are shown in Table 4. LeakGAN per-
forms best on forward perplexity because it can
generate more fluent samples. As for reverse per-
plexity, our model ARAML beats other baselines,
showing that our model can fit the data distribution
better. Other GANs, particularly LeakGAN, ob-
tain high reverse perplexity due to mode collapse
(Shi et al., 2018), thus they only capture limited
fluent expressions, resulting in large discrepancy
between the generated distribution and data distri-
bution. ARAML also outperforms the baselines
in terms of Self-BLEU, indicating that our model
doesn‚Äôt fall into mode collapse with the help of the
MLE training objective and has the ability to gen-
erate more diverse sentences.

We also provide standard deviation of each met-
ric in Table 4, reflecting the stability of each
model‚Äôs performance. Our model ARAML nearly
achieves the smallest standard deviation in all the
metrics, indicating that our framework outper-
forms policy gradient in the stability of adversarial
training.

4.5 Dialogue Generation on WeiboDial

Dialogue evaluation is an open problem and ex-
isting works have found that automatic metrics
have low correlation to human evaluation (Liu
et al., 2016; Novikova et al., 2017; Chaganty et al.,
2018). Thus, we resorted to manual evaluation to
assess the generation quality on WeiboDial. We
randomly sampled 200 posts from the test set and
collected the generated results from all the mod-
els. For each pair of responses (one from ARAML
and the other from a baseline, given the same in-
put post), five annotators were hired to label which
response is better (i.e. win, lose or tie) in terms of
grammaticality (whether a response itself is gram-

matical and logical) and relevance (whether a re-
sponse is appropriate and relevant to the post). The
two metrics were evaluated independently.

The evaluation results are shown in Table 5. To
measure the inter-annotator agreement, we calcu-
lated Fleiss‚Äô kappa (Fleiss, 1971) for each pair-
wise comparison where results show moderate
agreement (0.4 ‚â§ Œ∫ ‚â§ 0.6). We also conducted
sign test to check the significance of the differ-
ences.

As shown in Table 5, ARAML performs signif-
icantly better than other baselines in all the cases.
This result indicates that the samples surrounding
true responses provide stable rewards for the gen-
erator, and stable RAML training paradigm signif-
icantly enhances the performance in both metrics.

4.6 Further Analysis on Stability

0 50 100 150 200 250

Epoch

0

10

20

30

40

50

60

PP
L-
F

ARAML
SeqGAN
LeakGAN
MaliGAN
IRL

0 50 100 150 200 250

Epoch

20

40

60

80

100

120

PP
L-
R

ARAML
SeqGAN
LeakGAN
MaliGAN
IRL

Figure 2: PPL-F/PPL-R curves of ARAML, SeqGAN,
LeakGAN, MaliGAN and IRL in the training pro-
cess. The shade area indicates the standard devia-
tion at each data point. The dotted vertical lines sep-
arate pre-training and adversarial training phases (50
for ARAML, IRL and MaliGAN, 80 for SeqGAN and
LeakGAN).

To verify the training stability, we conducted
experiments on COCO many times and chose the
best 5 trials for SeqGAN, LeakGAN, IRL, Mali-
GAN and ARAML, respectively. Then, we pre-
sented the forward/reverse perplexity in the train-



4278

Model Grammaticality Œ∫ Relevance Œ∫Win (%) Lose (%) Tie (%) Win (%) Lose (%) Tie (%)
ARAML vs. MLE 56.5** 36.5 7.0 0.456 50.5** 37.5 12.0 0.465
ARAML vs. RAML 54.5** 37.5 8.0 0.416 47.0* 40.5 12.5 0.480
ARAML vs. DialogGAN 75.5** 13.5 11.0 0.445 73.0** 11.0 16.0 0.460
ARAML vs. DPGAN 57.5** 36.0 6.5 0.435 56.5** 30.5 13.0 0.529

Table 5: Human evaluation on WeiboDial. The scores represent the percentages of Win, Lose or Tie when our
model is compared with a baseline. Œ∫ denotes Fleiss‚Äô kappa (all are moderate agreement). The scores marked with
* mean p-value< 0.05 and ** indicates p-value< 0.01 in sign test.

ing process in Figure 2. We can see that our model
with smaller standard deviation is more stable than
other GAN baselines in both metrics. Although
LeakGAN reaches the best forward perplexity, its
standard deviation is extremely large and it per-
forms badly in reverse perplexity, indicating that it
generates limited expressions that are grammatical
yet divergent from the data distribution.

4.7 Ablation Study

4.7.1 Impact of Temperature
The temperature œÑ controls the search space sur-
rounding the real data as we analyze in Section
3.3.1. To investigate its impact on the perfor-
mance of our model, we fixed all the other hyper-
parameters and test ARAML with different tem-
peratures on COCO.

0.75 0.8 0.85 0.9 0.95 1
Temparature

20

22

24

26

28

30

32

PP
L-
F

0.75 0.8 0.85 0.9 0.95 1
Temperature

34

34.5

35

35.5

36

36.5

37

PP
L-
R

0.8 0.9 1
Temperature

0.75

0.755

0.76

0.765

0.77

0.775

0.78

0.785

0.79

S-
BL

EU
-2

0.8 0.9 1
Temperature

0.5

0.52

0.54

0.56

0.58

0.6

S-
BL

EU
-3

0.8 0.9 1
Temperature

0.3

0.32

0.34

0.36

0.38

0.4

S-
BL

EU
-4

Figure 3: PPL-F, PPL-R and S-BLEU of ARAML with
different temperatures œÑ ‚àà {0.8, 0.85, 0.9, 0.95} on
COCO.

The experimental results are shown in Figure 3.
We can see that as the temperature becomes larger,
forward perplexity increases gradually while Self-
BLEU decreases. As mentioned in Section 3.3.1,

large temperatures encourage our generator to ex-
plore the samples that are distant from real data
distribution, thus the diversity of generated results
will be improved. However, these samples dis-
tant from the data distribution are more likely to
be poor in fluency, leading to worse forward per-
plexity. Reverse perplexity is influenced by both
generation quality and diversity, so the correla-
tion between temperature and reverse perplexity is
not intuitive. We can observe that the model with
œÑ = 0.95 reaches the best reverse perplexity.

4.7.2 Impact of Sampling Strategy
We have mentioned two common sampling strate-
gies in Section 3.3.1, i.e. random sampling
and constrained sampling. To analyze their im-
pact, we keep all the model structures and hyper-
parameters fixed and test ARAML with these two
strategies on COCO.

Model PPL-F PPL-R S-BLEU-2/3/4
ARAML-R 37.48¬±0.53 37.44¬±0.56 0.752/0.571/0.384
ARAML-C 26.97¬±0.55 35.79¬±0.49 0.777/0.560/0.366

Table 6: PPL-F, PPL-R and S-BLEU of ARAML with
random sampling (ARAML-R) and constrained sam-
pling (ARAML-C) on COCO.

Table 6 shows the results. It‚Äôs obvious that ran-
dom sampling hurts the model performance ex-
cept Self-BLEU-1, because it indeed allows low-
quality samples available to the generator. Explor-
ing these samples degrades the quality and diver-
sity of generated results. Despite the worse per-
formance on automatic metrics, random sampling
doesn‚Äôt affect the training stability of our frame-
work. The standard deviation of ARAML-R is still
smaller than other GAN baselines.

4.8 Case Study

Table 7 presents the examples generated by the
models on COCO. We can find that other baselines
suffer from grammatical errors (e.g. ‚Äúin front of
flying her kite‚Äù from MLE), repetitive expressions



4279

Model Generated Samples
MLE A little girl sitting on a beach in front of flying

her kite at the beach.
A little boy standing in a room next to a desk.

SeqGAN A man sitting on a bench with snow board
in the background.
A brown gray cat is in the corner of a street.

LeakGAN A person that is holding something while
another kid is standing in the water.
A room with a television, mantle, and a chair.

MaliGAN A man with a shirt on holding one large pink
giant and white kite.
A couple and vases are outside on the bed.

IRL A group of people wearing helmet sitting down
on a cell phone.
A group of people sitting in the middle of tracks.

ARAML A man is wearing a hat and holding a toothbrush
as he stands on the grass of a field.
A boy reading a book on a sofa in a room.

Table 7: Examples of generated sentences on COCO.
Grammatical errors are in red, while blue text repre-
sents repetitive expressions and green part indicates in-
coherent statements.

(e.g. ‚ÄúA group of people‚Äù from IRL) and incoher-
ent statements (e.g. ‚ÄúA group of people sitting on
a cell phone‚Äù from IRL). By contrast, our model
performs well in these sentences and has the abil-
ity to generate grammatical and coherent results.

Post: ‰Ω†ËøòËøüÂà∞Âì™Ôºü‰Ω†Ê≤°Ëøô‰π†ÊÉØÂïä
Are you late? You don‚Äôt have this habit.

MLE: ‰Ω†ÊòØ‰∏çÊòØË¶ÅÂ•ΩÂ•ΩÁÖßÈ°æËá™Â∑±ÁöÑÔºÅÔºÅÔºÅ
Would you take care of yourself !!!

RAML: ËøôÊòØÊàëÁöÑÁîüÊ¥ªÔºåÊàë‰πü‰∏çÊÉ≥Âπ≤
This is my life. I don‚Äôt want to do this.

DialogGAN: ËøôÁ§æ‰ºöÁöÑÊ∏©Â∫¶Âø´Âà∞‰∫Ü„ÄÇÂë®Êú´ÔºåË¶ÅË∫∫Â∫ä‰∏äÔºÅ
The temperature of the society has nearly
reached. I‚Äôll lie on my bed on the weekend!

DPGAN: ÊàëÂú®‰∏äÁè≠ÔºåÊàëÂ∞±‰∏ç‰π†ÊÉØ‰∫Ü
I‚Äôm working and I‚Äôm used to doing this.

ARAML: ÂóØÔºåÂë®Êú´Â∞±‰∏çËøüÂà∞‰∫ÜÔºÅ
Hum. I won‚Äôt be late on the weekend!

Table 8: Examples of generated responses on Weibo-
Dial.

Table 8 shows the generated examples on Wei-
boDial. It‚Äôs obvious that other baselines don‚Äôt cap-
ture the topic word ‚Äúlate‚Äù in the post, thus gener-
ate irrelevant responses. ARAML can provide a
response that is grammatical and closely relevant
to the post.

5 Conclusion

We propose a novel adversarial training frame-
work to deal with the instability problem of current
GANs for text generation. To address the instabil-
ity issue caused by policy gradient, we incorporate

RAML into the adversarial training paradigm to
make our generator acquire stable rewards. Ex-
periments show that our model performs better
than several state-of-the-art GAN baselines with
lower training variance, yet producing better per-
formance on three text generation tasks.

Acknowledgments

This work was supported by the National
Science Foundation of China (Grant No.
61936010/61876096) and the National Key R&D
Program of China (Grant No. 2018YFC0830200).
We would like to thank THUNUS NExT Joint-Lab
for the support.

References
Dzmitry Bahdanau, Philemon Brakel, Kelvin Xu,

Anirudh Goyal, Ryan Lowe, Joelle Pineau, Aaron
Courville, and Yoshua Bengio. 2017. An actor-critic
algorithm for sequence prediction. In Proceedings
of International Conference on Learning Represen-
tations.

Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and
Noam Shazeer. 2015. Scheduled sampling for se-
quence prediction with recurrent neural networks.
In Advances in Neural Information Processing Sys-
tems, pages 1171‚Äì1179.

Yoshua Bengio, ReÃÅjean Ducharme, Pascal Vincent, and
Christian Jauvin. 2003. A neural probabilistic lan-
guage model. Journal of Machine Learning Re-
search, 3:1137‚Äì1155.

Massimo Caccia, Lucas Caccia, William Fedus, Hugo
Larochelle, Joelle Pineau, and Laurent Charlin.
2018. Language gans falling short. arXiv preprint
arXiv: 1811.02549.

Arun Tejasvi Chaganty, Stephen Mussmann, and Percy
Liang. 2018. The price of debiasing automatic met-
rics in natural language evaluation. In Proceedings
of the 56th Annual Meeting of the Association for
Computational Linguistics, pages 643‚Äì653.

Tong Che, Yanran Li, Ruixiang Zhang, R Devon
Hjelm, Wenjie Li, Yangqiu Song, and Yoshua Ben-
gio. 2017. Maximum-likelihood augmented discrete
generative adversarial networks. arXiv preprint
arXiv: 1702.07983.

Xinlei Chen, Hao Fang, Tsung-Yi Lin, Ramakr-
ishna Vedantam, Saurabh Gupta, Piotr Dollar, and
C. Lawrence Zitnick. 2015. Microsoft coco cap-
tions: Data collection and evaluation server. arXiv
preprint arXiv: 1504.00325.

Kyunghyun Cho, Bart Van Merrienboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014. On the proper-
ties of neural machine translation: Encoder-decoder



4280

approaches. In Proceedings of Eighth Workshop on
Syntax, Semantics and Structure in Statistical Trans-
lation, pages 103‚Äì111.

William Fedus, Ian J. Goodfellow, and Andrew M. Dai.
2018. Maskgan: Better text generation via filling in
the . In Proceedings of International Confer-
ence on Learning Representations.

Joseph L Fleiss. 1971. Measuring nominal scale agree-
ment among many raters. Psychological Bulletin,
76(5):378‚Äì382.

Alex Graves. 2013. Generating sequences with re-
current neural networks. arXiv preprint arXiv:
1308.0850.

Jiaxian Guo, Sidi Lu, Han Cai, Weinan Zhang, Yong
Yu, and Jun Wang. 2018. Long text generation via
adversarial training with leaked information. In Pro-
ceedings of AAAI conference on Artificial Intelli-
gence, pages 5141‚Äì5148.

Sepp Hochreiter and JuÃàrgen Schmidhuber. 1997.
Long short-term memory. Neural Computation,
9(8):1735‚Äì1780.

Pei Ke, Jian Guan, Minlie Huang, and Xiaoyan Zhu.
2018. Generating informative responses with con-
trolled sentence function. In Proceedings of the
56th Annual Meeting of the Association for Compu-
tational Linguistics, pages 1499‚Äì1508.

Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao,
and Bill Dolan. 2016. A diversity-promoting ob-
jective function for neural conversation models. In
Conference of the North American Chapter of the
Association for Computational Linguistics: Human
Language Technologies, pages 110‚Äì119.

Jiwei Li, Will Monroe, Tianlin Shi, Sebastien Jean,
Alan Ritter, and Dan Jurafsky. 2017. Adversarial
learning for neural dialogue generation. In Proceed-
ings of the Conference on Empirical Methods in Nat-
ural Language Processing, pages 2157‚Äì2169.

Kevin Lin, Dianqi Li, Xiaodong He, Zhengyou Zhang,
and Ming-Ting Sun. 2017. Adversarial ranking for
language generation. In Advances in Neural Infor-
mation Processing Systems, pages 3155‚Äì3165.

Chia Wei Liu, Ryan Lowe, Iulian V. Serban, Michael
Noseworthy, Laurent Charlin, and Joelle Pineau.
2016. How not to evaluate your dialogue system:
An empirical study of unsupervised evaluation met-
rics for dialogue response generation. In Proceed-
ings of the Conference on Empirical Methods in Nat-
ural Language Processing, pages 2122‚Äì2132.

Xudong Mao, Qing Li, Haoran Xie, Raymond Y. K.
Lau, Zhen Wang, and Stephen Paul Smolley.
2017. Least squares generative adversarial net-
works. In International Conference on Computer
Vision, pages 2813‚Äì2821.

Ning Miao, Hao Zhou, Lili Mou, Rui Yan, and Lei
Li. 2019. Cgmh: Constrained sentence generation
by metropolis-hastings sampling. In Proceedings of
AAAI conference on Artificial Intelligence.

Tomas Mikolov, Martin Karafiat, Lukas Burget,
Jan Honza Cernock, and Sanjeev Khudanpur. 2010.
Recurrent neural network based language model. In
Proceedings of the 11st Annual Conference of the
International Speech Communication Association,
pages 1045‚Äì1048.

Lili Mou, Yiping Song, Rui Yan, Ge Li, Lu Zhang,
and Zhi Jin. 2016. Sequence to backward and for-
ward sequences: A content-introducing approach to
generative short-text conversation. In Proceedings
of 26th International Conference on Computational
Linguistics, pages 3349‚Äì3358.

Mohammad Norouzi, Samy Bengio, Zhifeng Chen,
Navdeep Jaitly, Mike Schuster, Yonghui Wu, and
Dale Schuurmans. 2016. Reward augmented max-
imum likelihood for neural structured prediction.
In Advances in Neural Information Processing Sys-
tems, pages 1723‚Äì1731.

Jekaterina Novikova, Ondrej Dusek, Amanda Cercas
Curry, and Verena Rieser. 2017. Why we need new
evaluation metrics for NLG. In Proceedings of the
2017 Conference on Empirical Methods in Natural
Language Processing, pages 2241‚Äì2252.

Qiao Qian, Minlie Huang, Haizhou Zhao, Jingfang
Xu, and Xiaoyan Zhu. 2018. Assigning personal-
ity/profile to a chatting machine for coherent con-
versation generation. In Proceedings of the Twenty-
Seventh International Joint Conference on Artificial
Intelligence, pages 4279‚Äì4285.

Marc‚ÄôAurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2016. Sequence level train-
ing with recurrent neural networks. In Proceedings
of International Conference on Learning Represen-
tations.

Stanislau Semeniuta1, Aliaksei Severyn, and Syl-
vain Gelly. 2018. On accurate evaluation of gans
for language generation. arXiv preprint arXiv:
1806.04936.

Zhan Shi, Xinchi Chen, Xipeng Qiu, and Xuanjing
Huang. 2018. Toward diverse text generation with
inverse reinforcement learning. In Proceedings of
the Twenty-Seventh International Joint Conference
on Artificial Intelligence, pages 4361‚Äì4367.

Jinyue Su, Jiacheng Xu, Xipeng Qiu, and Xuanjing
Huang. 2018. Incorporating discriminator in sen-
tence generation: A gibbs sampling method. In
Proceedings of AAAI conference on Artificial Intel-
ligence, pages 5496‚Äì5503.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in Neural Information Process-
ing Systems, pages 3104‚Äì3112.



4281

Chongyang Tao, Lili Mou, Dongyan Zhao, and Rui
Yan. 2018. Ruber: An unsupervised method for au-
tomatic evaluation of open-domain dialog systems.
In Proceedings of the Thirty-Second AAAI Confer-
ence on Artificial Intelligence, pages 722‚Äì729.

Oriol Vinyals and Quoc Le. 2015. A neural conversa-
tional model. In International Conference on Ma-
chine Learning Deep Learning Workshop.

Chen Xing, Wei Wu, Yu Wu, Jie Liu, Yalou Huang,
Ming Zhou, and Wei-Ying Ma. 2017. Topic aware
neural response generation. In Proceedings of the
Thirty-First AAAI Conference on Artificial Intelli-
gence, pages 3351‚Äì3357.

Jingjing Xu, Xuancheng Ren, Junyang Lin, and
Xu Sun. 2018. Diversity-promoting gan: A cross-
entropy based generative adversarial network for di-
versified text generation. In Conference on Empiri-
cal Methods in Natural Language Processing, page
3940‚Äì3949.

Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu.
2017. Seqgan: Sequence generative adversarial nets
with policy gradient. In Proceedings of AAAI con-
ference on Artificial Intelligence, pages 2852‚Äì2858.

Junbo Jake Zhao, Yoon Kim, Kelly Zhang, Alexan-
der M. Rush, and Yann LeCun. 2018. Adversari-
ally regularized autoencoders. In Proceedings of the
35th International Conference on Machine Learn-
ing, pages 5897‚Äì5906.

Hao Zhou, Minlie Huang, Tianyang Zhang, Xiaoyan
Zhu, and Bing Liu. 2018a. Emotional chatting ma-
chine: Emotional conversation generation with in-
ternal and external memory. In Proceedings of AAAI
conference on Artificial Intelligence.

Hao Zhou, Tom Young, Minlie Huang, Haizhou Zhao,
Jingfang Xu, and Xiaoyan Zhu. 2018b. Com-
monsense knowledge aware conversation generation
with graph attention. In Proceedings of the Twenty-
Seventh International Joint Conference on Artificial
Intelligence, pages 4623‚Äì4629.

Yaoming Zhu, Sidi Lu, Lei Zheng, Jiaxian Guo,
Weinan Zhang, Jun Wang, and Yong Yu. 2018.
Texygen: A benchmarking platform for text gener-
ation models. In Proceedings of the 41st Interna-
tional ACM SIGIR Conference on Research Devel-
opment in Information Retrieval, pages 1097‚Äì1100.


