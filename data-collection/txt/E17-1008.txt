



















































Distinguishing Antonyms and Synonyms in a Pattern-based Neural Network


Proceedings of the 15th Conference of the European Chapter of the Association for Computational Linguistics: Volume 1, Long Papers, pages 76–85,
Valencia, Spain, April 3-7, 2017. c©2017 Association for Computational Linguistics

Distinguishing Antonyms and Synonyms
in a Pattern-based Neural Network

Kim Anh Nguyen and Sabine Schulte im Walde and Ngoc Thang Vu
Institut für Maschinelle Sprachverarbeitung

Universität Stuttgart
Pfaffenwaldring 5B, 70569 Stuttgart, Germany

{nguyenkh,schulte,thangvu}@ims.uni-stuttgart.de

Abstract

Distinguishing between antonyms and
synonyms is a key task to achieve high
performance in NLP systems. While
they are notoriously difficult to distinguish
by distributional co-occurrence models,
pattern-based methods have proven effec-
tive to differentiate between the relations.
In this paper, we present a novel neu-
ral network model AntSynNET that ex-
ploits lexico-syntactic patterns from syn-
tactic parse trees. In addition to the lexi-
cal and syntactic information, we success-
fully integrate the distance between the re-
lated words along the syntactic path as a
new pattern feature. The results from clas-
sification experiments show that AntSyn-
NET improves the performance over prior
pattern-based methods.

1 Introduction

Antonymy and synonymy represent lexical se-
mantic relations that are central to the organization
of the mental lexicon (Miller and Fellbaum, 1991).
While antonymy is defined as the oppositeness be-
tween words, synonymy refers to words that are
similar in meaning (Deese, 1965; Lyons, 1977).
From a computational point of view, distinguish-
ing between antonymy and synonymy is impor-
tant for NLP applications such as Machine Trans-
lation and Textual Entailment, which go beyond a
general notion of semantic relatedness and require
to identify specific semantic relations. However,
due to interchangeable substitution, antonyms and
synonyms often occur in similar contexts, which
makes it challenging to automatically distinguish
between them.

Two families of approaches to differentiate be-
tween antonyms and synonyms are predominent

in NLP. Both make use of distributional vector
representations, relying on the distributional hy-
pothesis (Harris, 1954; Firth, 1957), that words
with similar distributions have related meanings:
co-occurrence models and pattern-based models.
These distributional semantic models (DSMs) of-
fer a means to represent meaning vectors of words
or word pairs, and to determine their semantic re-
latedness (Turney and Pantel, 2010).

In co-occurrence models, each word is repre-
sented by a weighted feature vector, where fea-
tures typically correspond to words that co-occur
in particular contexts. When using word embed-
dings, these models rely on neural methods to rep-
resent words as low-dimensional vectors. To cre-
ate the word embeddings, the models either make
use of neural-based techniques, such as the skip-
gram model (Mikolov et al., 2013), or use matrix
factorization (Pennington et al., 2014) that builds
word embeddings by factorizing word-context co-
occurrence matrices. In comparison to standard
co-occurrence vector representations, word em-
beddings address the problematic sparsity of word
vectors and have achieved impressive results in
many NLP tasks such as word similarity (e.g.,
Pennington et al. (2014)), relation classification
(e.g., Vu et al. (2016)), and antonym-synonym dis-
tinction (e.g., Nguyen et al. (2016)).

In pattern-based models, vector representations
make use of lexico-syntactic surface patterns to
distinguish between the relations of word pairs.
For example, Justeson and Katz (1991) suggested
that adjectival opposites co-occur with each other
in specific linear sequences, such as between
X and Y. Hearst (1992) determined surface pat-
terns, e.g., X such as Y, to identify nomi-
nal hypernyms. Lin et al. (2003) proposed two
textual patterns indicating semantic incompatibil-
ity, from X to Y and either X or Y, to
distinguish opposites from semantically similar

76



words. Roth and Schulte im Walde (2014) pro-
posed a method that combined patterns with dis-
course markers for classifying paradigmatic rela-
tions including antonymy, synonymy, and hyper-
nymy. Recently, Schwartz et al. (2015) used two
prominent patterns from Lin et al. (2003) to learn
word embeddings that distinguished antonyms
from similar words in determining degrees of sim-
ilarity and word analogy.

In this paper, we present a novel pattern-
based neural method AntSynNET to distinguish
antonyms from synonyms. We hypothesize that
antonymous word pairs co-occur with each other
in lexico-syntactic patterns within a sentence more
often than would be expected by synonymous
pairs. This hypothesis is inspired by corpus-based
studies on antonymy and synonymy. Among oth-
ers, Charles and Miller (1989) suggested that ad-
jectival opposites co-occur in patterns; Fellbaum
(1995) stated that nominal and verbal opposites
co-occur in the same sentence significantly more
often than chance; Lin et al. (2003) argued that if
two words appear in clear antonym patterns, they
are unlikely to represent synonymous pair.

We start out by inducing patterns between X and
Y from a large-scale web corpus, where X and Y
represent two words of an antonym or synonym
word pair, and the pattern is derived from the sim-
ple paths between X and Y in a syntactic parse
tree. Each node in the simple path combines lexi-
cal and syntactic information; in addition, we sug-
gest a novel feature for the patterns, i.e., the dis-
tance between the two words along the syntactic
path. All pattern features are fed into a recur-
rent neural network with long short-term mem-
ory (LSTM) units (Hochreiter and Schmidhuber,
1997), which encode the patterns as vector repre-
sentations. Afterwards, the vector representations
of the patterns are used in a classifier to distin-
guish between antonyms and synonyms. The re-
sults from experiments show that AntSynNET im-
proves the performance over prior pattern-based
methods. Furthermore, the implementation of our
models is made publicly available1.

The remainder of this paper is organized as fol-
lows: In Section 2, we present previous work dis-
tinguishing antonyms and synonyms. Section 3
describes our proposed AntSynNET model. We
present the induction of the patterns (Section 3.1),
describe the recurrent neural network with long

1
https://github.com/nguyenkh/AntSynNET

short-term memory units which is used to en-
code patterns within a vector representation (Sec-
tion 3.2), and describe two models to classify
antonyms and synonyms: the pure pattern-based
model (Section 3.3.1) and the combined model
(Section 3.3.2). After introducing two baselines in
Section 4, we describe our dataset, experimental
settings, results of our methods, the effects of the
newly proposed distance feature, and the effects of
the various types of word embeddings. Section 6
concludes the paper.

2 Related Work

Pattern-based methods: Regarding the task of
antonym-synonym distinction, there exist a vari-
ety of approaches which rely on patterns. Lin
et al. (2003) used bilingual dependency triples
and patterns to extract distributionally similar
words. They relied on clear antonym patterns such
as from X to Y and either X or Y in a
post-processing step to distinguish antonyms from
synonyms. The main idea is that if two words X
and Y appear in one of these patterns, they are
unlikely to represent synonymous pair. Schulte
im Walde and Köper (2013) proposed a method
to distinguish between the paradigmatic relations
antonymy, synonymy and hypernymy in German,
based on automatically acquired word patterns.
Roth and Schulte im Walde (2014) combined gen-
eral lexico-syntactic patterns with discourse mark-
ers as indicators for the same relations, both for
German and for English. They assumed that if
two phrases frequently co-occur with a specific
discourse marker, then the discourse relation ex-
pressed by the corresponding marker should also
indicate the relation between the words in the af-
fected phrases. By using the raw corpus and a
fixed list of discourse markers, the model can eas-
ily be extended to other languages. More re-
cently, Schwartz et al. (2015) presented a symmet-
ric pattern-based model for word vector represen-
tation in which antonyms are assigned to dissim-
ilar vector representations. Differently to the pre-
vious pattern-based methods which used the stan-
dard distribution of patterns, Schwartz et al. used
patterns to learn word embeddings.

Vector representation methods: Yih et al.
(2012) introduced a new vector representation
where antonyms lie on opposite sides of a sphere.
They derived this representation with the incor-
poration of a thesaurus and latent semantic anal-

77



ysis, by assigning signs to the entries in the co-
occurrence matrix on which latent semantic anal-
ysis operates, such that synonyms would tend to
have positive cosine similarities, and antonyms
would tend to have negative cosine similarities.
Scheible et al. (2013) showed that the distribu-
tional difference between antonyms and synonyms
can be identified via a simple word space model by
using appropriate features. Instead of taking into
account all words in a window of a certain size
for feature extraction, the authors experimented
with only words of a certain part-of-speech, and
restricted distributions. Santus et al. (2014) pro-
posed a different method to distinguish antonyms
from synonyms by identifying the most salient
dimensions of meaning in vector representations
and reporting a new average-precision-based dis-
tributional measure and an entropy-based mea-
sure. Ono et al. (2015) trained supervised word
embeddings for the task of identifying antonymy.
They proposed two models to learn word embed-
dings: the first model relied on thesaurus informa-
tion; the second model made use of distributional
information and thesaurus information. More re-
cently, Nguyen et al. (2016) proposed two meth-
ods to distinguish antonyms from synonyms: in
the first method, the authors improved the qual-
ity of weighted feature vectors by strengthening
those features that are most salient in the vec-
tors, and by putting less emphasis on those that
are of minor importance when distinguishing de-
grees of similarity between words. In the second
method, the lexical contrast information was inte-
grated into the skip-gram model (Mikolov et al.,
2013) to learn word embeddings. This model suc-
cessfully predicted degrees of similarity and iden-
tified antonyms and synonyms.

3 AntSynNET: LSTM-based
Antonym-Synonym Distinction

In this section, we describe the AntSynNET
model, using a pattern-based LSTM for distin-
guishing antonyms from synonyms. We first
present the induction of patterns from a parsed cor-
pus (Section 3.1). Section 3.2 then describes how
we utilize the recurrent neural network with long
short-term memory units to encode the patterns
as vector representation. Finally, we present the
AntSynNET model and two approaches to classify
antonyms and synonyms (Section 3.3).

3.1 Induction of Patterns

Corpus-based studies on antonymy have sug-
gested that opposites co-occur with each other
within a sentence significantly more often than
would be expected by chance. Our method thus
makes use of patterns as the main indicators of
word pair co-occurrence, to enforce a distinction
between antonyms and synonyms. Figure 1 shows
a syntactic parse tree of the sentence “My old
village has been provided with the new services”.
Following the characterizations of a tree in graph
theory, any two nodes (vertices) of a tree are
connected by a simple path (or one unique path).
The simple path is the shortest path between any
two nodes in a tree and does not contain repeated
nodes. In the example, the lexico-syntactic tree
pattern of the antonymous pair old–new is deter-
mined by finding the simple path (in red) from
the lemma old to the lemma new. It focuses
on the most relevant information and ignores
irrelevant information which does not appear in
the simple path (i.e., has, been). The example
pattern between X = old and Y = new in Fig-
ure 1 is represented as follows: X/JJ/amod/2 --
village/NN/nsubj/1 -- provide/VBN/ROOT/0

-- with/IN/prep/1 -- service/NNS/pobj/2

-- Y/JJ/amod/3.

Node Representation: The path patterns make
use of four features to represent each node in the
syntax tree: lemma, part-of-speech (POS) tag, de-
pendency label and distance label. The lemma fea-
ture captures the lexical information of words in
the sentence, while the POS and dependency fea-
tures capture the morpho-syntactic information of
the sentence. The distance label measures the path
distance between the target word nodes in the syn-
tactic tree. Each step between a parent and a child
node represents a distance of 1; and the ancestor
nodes of the remaining nodes in the path are rep-
resented by a distance of 0. For example, the node
provided is an ancestor node of the simple path
from old to new. The distances from the node
provided to the nodes village and old are
1 and 2, respectively.

The vector representation of each node concate-
nates the four-feature vectors as follows:

~vnode = [~vlemma ⊕ ~vpos ⊕ ~vdep ⊕ ~vdist]

where ~vlemma, ~vpos, ~vdep, ~vdist represent the em-
beddings of the lemma, POS tag, dependency label

78



Root

provided/VBN

has/VBZ been/VBNvillage/NN with/IN

services/NNS

the/DT

My/PRP$ old/JJ

new/JJ

ROOT

nsubj

1

prep

1

pobj 2
amod
2

amo
d

3

Figure 1: Illustration of the syntactic tree for the sentence “My old village has been provided with the
new services”. Red lines indicate the path from the word old to the word new.

and distance label, respectively; and the⊕ denotes
the concatenation operation.

Pattern Representation: For a pattern p
which is constructed by the sequence of nodes
n1, n2, ..., nk, the pattern representation of p is
a sequence of vectors: p = [~n1, ~n2, ..., ~nk]. The
pattern vector ~vp is then encoded by applying a
recurrent neural network.

3.2 Recurrent Neural Network with Long
Short-Term Memory Units

A recurrent neural network (RNN) is suitable for
modeling sequential data by a vector representa-
tion. In our methods, we use a long short-term
memory (LSTM) network, a variant of a recur-
rent neural network to encode patterns, for the
following reasons. Given a sequence of words
p = [n1, n2, ..., nk] as input data, an RNN pro-
cesses each word nt at a time, and returns a vec-
tor of state hk for the complete input sequence.
For each time step t, the RNN updates an inter-
nal memory state ht which depends on the current
input nt and the previous state ht−1. Yet, if the se-
quential input is a long-term dependency, an RNN
faces the problem of gradient vanishing or explod-
ing, leading to difficulties in training the model.

LSTM units address these problems. The un-
derlying idea of an LSTM is to use an adaptive gat-
ing mechanism to decide on the degree that LSTM
units keep the previous state and memorize the ex-
tracted features of the current input. More specif-

ically, an LSTM comprises four components: an
input gate it, a forget gate ft, an output gate ot,
and a memory cell ct. The state of an LSTM at
each time step t is formalized as follows:

it = σ(Wi · xt + Ui · ht−1 + bi)
ft = σ(Wf · xt + Uf · ht−1 + bf )
ot = σ(Wo · xt + Uo · ht−1 + bo)
gt = tanh(Wc · xt + Uc · ht−1 + bc)
ct = it ⊗ gt + ft ⊗ ct−1

W refers to a matrix of weights that projects in-
formation between two layers; b is a layer-specific
vector of bias terms; σ denotes the sigmoid func-
tion. The output of an LSTM at a time step t is
computed as follows:

ht = ot ⊗ tanh(ct)
where ⊗ denotes element-wise multiplication. In
our methods, we rely on the last state hk to repre-
sent the vector ~vp of a pattern p = [~n1, ~n2, ..., ~nk].

3.3 The Proposed AntSynNET Model
In this section, we present two models to distin-
guish antonyms from synonyms. The first model
makes use of patterns to classify antonyms and
synonyms, by using an LSTM to encode pat-
terns as vector representations and then feeding
those vectors to a logistic regression layer (Sec-
tion 3.3.1). The second model creates combined
vector representations of word pairs, which con-
catenate the vectors of the words and the patterns
(Section 3.3.2).

79



LSTM LSTM LSTM LSTM LSTM LSTM

~vp ~vp

Mean Pooling

Logistic Regression

X/ADJ/amod/0 from/ADP/prep/1 Y/ADJ/pobj/2 X/ADJ/conj/1world/NOUN/pobj/0Y/ADJ/amod/1

~vlemma
~vpos
~vdep
~vdist

Figure 2: Illustration of the AntSynNET model. Each word pair is represented by several patterns, and
each pattern represents a path in the graph of the syntactic tree. Patterns consist of several nodes where
each node is represented by a vector with four features: lemma, POS, dependency label, and distance
label. The mean pooling of the pattern vectors is the vector representation of each word pair, which is
then fed to the logistic regression layer to classify antonyms and synonyms.

3.3.1 Pattern-based AntSynNET
In this model, we make use of a recurrent neural
network with LSTM units to encode patterns con-
taining a sequence of nodes. Figure 2 illustrates
the AntSynNET model. Given a word pair (x, y),
we induce patterns for (x, y) from a corpus, where
each pattern represents a path from x to y (cf. Sec-
tion 3.1). We then feed each pattern p of the word
pair (x, y) into an LSTM to obtain ~vp, the vector
representation of the pattern p (cf. Section 3.2).
For each word pair (x, y), the vector representa-
tion of (x, y) is computed as follows:

~vxy =

∑
p∈P (x,y) ~vp · cp∑

p∈P (x,y) cp
(1)

~vxy refers to the vector of the word pair (x, y);
P (x, y) is the set of patterns corresponding to the
pair (x, y); cp is the frequency of the pattern p.
The vector ~vxy is then fed into a logistic regres-
sion layer whose target is the class label associ-
ated with the pair (x, y). Finally, the pair (x, y) is
predicted as positive (i.e., antonymous) word pair
if the probability of the prediction for ~vxy is larger
than 0.5.

3.3.2 Combined AntSynNET
Inspired by the supervised distributional concate-
nation method in Baroni et al. (2012) and the in-
tegrated path-based and distributional method for
hypernymy detection in Shwartz et al. (2016), we

take into account the patterns and distribution of
target pairs to create their combined vector rep-
resentations. Given a word pair (x, y), the com-
bined vector representation of the pair (x, y) is de-
termined by using both the co-occurrence distribu-
tion of the words and the syntactic path patterns:

~vcomb(x,y) = [~vx ⊕ ~vxy ⊕ ~vy] (2)

~vcomb(x,y) refers to the combined vector of the
word pair (x, y); ~vx and ~vy are the vectors of word
x and word y, respectively; ~vxy is the vector of the
pattern that corresponds to the pair (x, y), cf. Sec-
tion 3.3.1. Similar to the pattern-based model, the
combined vector ~vcomb(x,y) is fed into the logis-
tic regression layer to classify antonyms and syn-
onyms.

4 Baseline Models

To compare AntSynNET with baseline models for
pattern-based classification of antonyms and syn-
onyms, we introduce two pattern-based baseline
methods: the distributional method (Section 4.1),
and the distributed method (Section 4.2).

4.1 Distributional Baseline

As a first baseline, we apply the approach by Roth
and Schulte im Walde (2014), henceforth R&SiW.
They used a vector space model to represent pairs
of words by a combination of standard lexico-

80



syntactic patterns and discourse markers. In ad-
dition to the patterns, the discourse markers added
information to express discourse relations, which
in turn may indicate the specific semantic relation
between the two words in a word pair. For ex-
ample, contrast relations might indicate antonymy,
whereas elaborations may indicate synonymy or
hyponymy.

Michael Roth, the first author of R&SiW, kindly
computed the relation classification results of the
pattern–discourse model for our test sets. The
weights between marker-based and pattern-based
models were tuned on the validation sets; other hy-
perparameters were set exactly as described by the
R&SiW method.

4.2 Distributed Baseline

The SP method proposed by Schwartz et al. (2015)
uses symmetric patterns for generating word em-
beddings. In this work, the authors applied an un-
supervised algorithm for the automatic extraction
of symmetric patterns from plain text. The sym-
metric patterns were defined as a sequence of 3-5
tokens consisting of exactly two wildcards and 1-
3 words. The patterns were filtered based on their
frequencies, such that the resulting pattern set con-
tained 11 patterns. For generating word embed-
dings, a matrix of co-occurrence counts between
patterns and words in the vocabulary was com-
puted, using positive point-wise mutual informa-
tion. The sparsity problem of vector representa-
tions was addressed by smoothing. For antonym
representation, the authors relied on two patterns
suggested by Lin et al. (2003) to construct word
embeddings containing an antonym parameter that
can be turned on in order to represent antonyms as
dissimilar, and that can be turned off to represent
antonyms as similar.

To apply the SP method to our data, we make
use of the pre-trained SP embeddings2 with 500
dimensions3. We calculate the cosine similarity
of word pairs and then use a Support Vector Ma-
chine with Radial Basis Function kernel to classify
antonyms and synonyms.

2
http://homes.cs.washington.edu/˜roysch/papers/

sp_embeddings/sp_embeddings.html
3The 500-dimensional embeddings outperformed the

300-dimensional embeddings for our data.

5 Experiments

5.1 Dataset

For training the models, neural networks require a
large amount of training data. We use the existing
large-scale antonym and synonym pairs previously
used by Nguyen et al. (2016). Originally, the data
pairs were collected from WordNet (Miller, 1995)
and Wordnik4.

In order to induce patterns for the word pairs in
the dataset, we identify the sentences in the cor-
pus that contain the word pair. Thereafter, we ex-
tract all patterns for the word pair. We filter out all
patterns which occur less than five times; and we
only take into account word pairs that contain at
least five patterns for training, validating and test-
ing. For the proportion of positive and negative
pairs, we keep a ratio of 1:1 positive (antonym) to
negative (synonym) pairs in the dataset. In order
to create the sets of training, testing and valida-
tion data, we perform random splitting with 70%
train, 25% test, and 5% validation sets. The final
dataset contains the number of word pairs accord-
ing to word classes described in Table 1. More-
over, Table 2 shows the average number of pat-
terns for each word pair in our dataset.

Word Class Train Test Validation Total
Adjective 5562 1986 398 7946
Verb 2534 908 182 3624
Noun 2836 1020 206 4062

Table 1: Our dataset.

Word Class Train Test Validation
Adjective 135 131 141
Verb 364 332 396
Noun 110 132 105

Table 2: Average number of patterns per word pair
across word classes.

5.2 Experimental Settings

We use the English Wikipedia dump5 from June
2016 as the corpus resource for our methods
and baselines. For parsing the corpus, we
rely on spaCy6. For the lemma embeddings,
we rely on the word embeddings of the dLCE

4
http://www.wordnik.com

5
https://dumps.wikimedia.org/enwiki/latest/

enwiki-latest-pages-articles.xml.bz2
6
https://spacy.io

81



Model Adjective Verb NounP R F1 P R F1 P R F1
SP baseline 0.730 0.706 0.718 0.560 0.609 0.584 0.625 0.393 0.482
R&SiW baseline 0.717 0.717 0.717 0.789 0.787 0.788 0.833 0.831 0.832
Pattern-based AntSynNET 0.764 0.788 0.776∗ 0.741 0.833 0.784 0.804 0.851 0.827
Combined AntSynNET 0.763 0.807 0.784∗ 0.743 0.815 0.777 0.816 0.898 0.855∗∗

Table 3: Performance of the AntSynNET models in comparison to the baseline models.

Feature Model Adjective Verb NounP R F1 P R F1 P R F1

Direction
Pattern-based 0.752 0.755 0.753 0.734 0.819 0.774 0.800 0.825 0.813
Combined 0.754 0.784 0.769 0.739 0.793 0.765 0.829 0.810 0.819

Distance
Pattern-based 0.764 0.788 0.776 0.741 0.833 0.784 0.804 0.851 0.827
Combined 0.763 0.807 0.784∗∗ 0.743 0.815 0.777 0.816 0.898 0.855∗∗

Table 4: Comparing the novel distance feature with Schwarz et al.’s direction feature, across word classes.

model7 (Nguyen et al., 2016) which is the state-
of-the-art vector representation for distinguishing
antonyms from synonyms. We re-implemented
this cutting-edge model on Wikipedia with 100 di-
mensions, and then make use of the dLCE word
embeddings for initialization the lemma embed-
dings. The embeddings of POS tags, dependency
labels, distance labels, and out-of-vocabulary lem-
mas are initialized randomly. The number of
dimensions is set to 10 for the embeddings of
POS tags, dependency labels and distance labels.
We use the validation sets to tune the number of
dimensions for these labels. For optimization,
we rely on the cross-entropy loss function and
Stochastic Gradient Descent with the Adadelta up-
date rule (Zeiler, 2012). For training, we use the
Theano framework (Theano Development Team,
2016). Regularization is applied by a dropout of
0.5 on each of component’s embeddings (dropout
rate is tuned on the validation set). We train the
models with 40 epochs and update all embeddings
during training.

5.3 Overall Results

Table 3 shows the significant8 performance of our
models in comparison to the baselines. Concern-
ing adjectives, the two proposed models signif-
icantly outperform the two baselines: The per-
formance of the baselines is around .72 for F1,
and the corresponding results for the combined
AntSynNET model achieve an improvement of
>.06. Regarding nouns, the improvement of the
new methods is just .02 F1 in comparison to the

7
https://github.com/nguyenkh/AntSynDistinction

8t-test, *p < 0.05, **p < 0.1

R&SiW baseline, but we achieve a much better
performance in comparison to the SP baseline, an
increase of .37 F1. Regarding verbs, we do not
outperform the more advanced R&SiW baseline
in terms of the F1 score, but we obtain higher re-
call scores. In comparison to the SP baseline, our
models still show a clear F1 improvement.

Overall, our proposed models achieve compar-
atively high recall scores compared to the two
baselines. This strengthens our hypothesis that
there is a higher possibility for the co-occurrence
of antonymous pairs in patterns over synonymous
pairs within a sentence. Because, when the pro-
posed models obtain high recall scores, the mod-
els are able to retrieve most relevant information
(antonymous pairs) corresponding to the patterns.
Regarding the low precision in the two proposed
models, we sampled randomly 5 pairs in each pop-
ulation: true positive, true negative, false positive,
false negative. We then compared the overlap of
patterns for the true predictions (true positive pairs
and true negative pairs) and the false predictions
(false positive pairs and false negative pairs). We
found out that there is no overlap between patterns
of true predictions; and the number overlap be-
tween patterns of false predictions is 2, 2, and 4
patterns for noun, adjective, and verb classes, re-
spectively. This shows that the low precision of
our models stems from the patterns which repre-
sent both antonymous and synonymous pairs.

5.4 Effect of the Distance Feature

In our models, the novel distance feature is suc-
cessfully integrated along the syntactic path to
represent lexico-syntactic patterns. The intu-

82



Model Word Embeddings Adjective Verb NounP R F1 P R F1 P R F1

Pattern-based Model
GloVe 0.763 0.770 0.767 0.705 0.852 0.772 0.789 0.849 0.818
dLCE 0.764 0.788 0.776 0.741 0.833 0.784 0.804 0.851 0.827

Combined Model
Glove 0.750 0.798 0.773 0.717 0.826 0.768 0.807 0.827 0.817
dLCE 0.763 0.807 0.784 0.743 0.815 0.777 0.816 0.898 0.855

Table 5: Comparing pre-trained GloVe and dLCE word embeddings.

ition behind the distance feature exploits prop-
erties of trees in graph theory, which show that
there exist differences in the degree of relation-
ship between the parent node and the child nodes
(distance = 1) and in the degree of relation-
ship between the ancestor node and the descendant
nodes (distance > 1). Hence, we use the distance
feature to effectively capture these relationships.

In order to evaluate the effect of our novel dis-
tance feature, we compare the distance feature to
the direction feature proposed by Shwartz et al.
(2016). In their approach, the authors combined
lemma, POS, dependency, and direction features
for the task of hypernym detection. The direc-
tion feature represented the direction of the depen-
dency label between two nodes in a path from X to
Y.

For evaluation, we make use of the same infor-
mation regarding dataset and patterns as in Sec-
tion 5.3, and then replace the distance feature by
the direction feature. The results are shown in Ta-
ble 4. The distance feature enhances the perfor-
mance of our proposed models more effectively
than the direction feature does, across all word
classes.

5.5 Effect of Word Embeddings

Our methods rely on the word embeddings of the
dLCE model, state-of-the-art word embeddings
for antonym-synonym distinction. Yet, the word
embeddings of the dLCE model, i.e., supervised
word embeddings, represent information collected
from lexical resources. In order to evaluate the ef-
fect of these word embeddings on the performance
of our models, we replace them by the pre-trained
GloVe word embeddings9 with 100 dimensions,
and compare the effects of the GloVe word em-
beddings and the dLCE word embeddings on the
performance of the two proposed models.

Table 5 illustrates the performance of our two
models on all word classes. The table shows that
the dLCE word embeddings are better than the

9
http://www-nlp.stanford.edu/projects/glove/

pre-trained GloVe word embeddings, by around
.01 F1 for the pattern-based AntSynNET model
and the combined AntSynNET model regarding
adjective and verb pairs. Regarding noun pairs,
the improvements of the dLCE word embeddings
over pre-trained GloVe word embeddings achieve
around .01 and .04 F1 for the pattern-based model
and the combined model, respectively.

6 Conclusion

In this paper, we presented a novel pattern-
based neural method AntSynNET to distinguish
antonyms from synonyms. We hypothesized that
antonymous word pairs co-occur with each other
in lexico-syntactic patterns within a sentence more
often than synonymous word pairs.

The patterns were derived from the simple paths
between semantically related words in a syntac-
tic parse tree. In addition to lexical and syntactic
information, we suggested a novel path distance
feature. The AntSynNET model consists of two
approaches to classify antonyms and synonyms.
In the first approach, we used a recurrent neural
network with long short-term memory units to en-
code the patterns as vector representations; in the
second approach, we made use of the distribution
and encoded patterns of the target pairs to gener-
ate combined vector representations. The result-
ing vectors of patterns in both approaches were fed
into the logistic regression layer for classification.

Our proposed models significantly outper-
formed two baselines relying on previous work,
mainly in terms of recall. Moreover, we demon-
strated that the distance feature outperformed a
previously suggested direction feature, and that
our embeddings outperformed the state-of-the-art
GloVe embeddings. Last but not least, our two
proposed models only rely on corpus data, such
that the models are easily applicable to other lan-
guages and relations.

83



Acknowledgements

We would like to thank Michael Roth for helping
us to compute the results of the R&SiW model on
our dataset.

The research was supported by the Ministry of
Education and Training of the Socialist Republic
of Vietnam (Scholarship 977/QD-BGDDT; Kim-
Anh Nguyen), the DFG Collaborative Research
Centre SFB 732 (Kim-Anh Nguyen, Ngoc Thang
Vu), and the DFG Heisenberg Fellowship SCHU-
2580/1 (Sabine Schulte im Walde).

References
Marco Baroni, Raffaella Bernardi, Ngoc-Quynh Do,

and Chung chieh Shan. 2012. Entailment above the
word level in distributional semantics. In Proceed-
ings of the 13th Conference of the European Chap-
ter of the Association for Computational Linguistics
(EACL), pages 23–32, Avignon, France.

Walter G. Charles and George A. Miller. 1989. Con-
texts of antonymous adjectives. Applied Psychol-
ogy, 10:357–375.

James Deese. 1965. The Structure of Associations in
Language and Thought. The John Hopkins Press,
Baltimore, MD.

Christiane Fellbaum. 1995. Co-occurrence and
antonymy. International Journal of Lexicography,
8:281–303.

John R. Firth. 1957. Papers in Linguistics 1934-51.
Longmans, London, UK.

Zellig S. Harris. 1954. Distributional structure. Word,
10(23):146–162.

Marti Hearst. 1992. Automatic acquisition of hy-
ponyms from large text corpora. In In Proceed-
ings of the 14th International Conference on Com-
putational Linguistics (COLING), pages 539–545,
Nantes, France.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural Computation,
9(8):1735–1780.

John S. Justeson and Slava M. Katz. 1991. Co-
occurrences of antonymous adjectives and their con-
texts. Computational Linguistics, 17:1–19.

Dekang Lin, Shaojun Zhao, Lijuan Qin, and Ming
Zhou. 2003. Identifying synonyms among distri-
butionally similar words. In Proceedings of the 18th
International Joint Conference on Artificial Intelli-
gence (IJCAI), pages 1492–1493, Acapulco, Mex-
ico.

John Lyons. 1977. Semantics, volume 1. Cambridge
University Press.

Tomas Mikolov, Wen-tau Yih, and Geoffrey Zweig.
2013. Linguistic regularities in continuous space
word representations. In Proceedings of the Con-
ference of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies (NAACL), pages 746–751, At-
lanta, Georgia.

George A. Miller and Christiane Fellbaum. 1991. Se-
mantic networks of English. Cognition, 41:197–
229.

George A. Miller. 1995. WordNet: A lexical
database for English. Communications of the ACM,
38(11):39–41.

Kim Anh Nguyen, Sabine Schulte im Walde, and
Ngoc Thang Vu. 2016. Integrating distributional
lexical contrast into word embeddings for antonym-
synonym distinction. In Proceedings of the 54th An-
nual Meeting of the Association for Computational
Linguistics (ACL), pages 454–459, Berlin, Germany.

Masataka Ono, Makoto Miwa, and Yutaka Sasaki.
2015. Word embedding-based antonym detec-
tion using thesauri and distributional information.
In Proceedings of the Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies
(NAACL), pages 984–989, Denver, Colorado.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vec-
tors for word representation. In Proceedings of the
2014 Conference on Empirical Methods in Natural
Language Processing (EMNLP), pages 1532–1543,
Doha, Qatar.

Michael Roth and Sabine Schulte im Walde. 2014.
Combining word patterns and discourse markers for
paradigmatic relation classification. In Proceedings
of the 52nd Annual Meeting of the Association for
Computational Linguistics (ACL), pages 524–530,
Baltimore, MD.

Enrico Santus, Alessandro Lenci, Qin Lu, and Sabine
Schulte im Walde. 2014. Chasing hypernyms in
vector spaces with entropy. In Proceedings of the
14th Conference of the European Chapter of the
Association for Computational Linguistics (EACL),
pages 38–42, Gothenburg, Sweden.

Silke Scheible, Sabine Schulte im Walde, and Sylvia
Springorum. 2013. Uncovering distributional dif-
ferences between synonyms and antonyms in a word
space model. In Proceedings of the 6th Interna-
tional Joint Conference on Natural Language Pro-
cessing (IJCNLP), pages 489–497, Nagoya, Japan.

Sabine Schulte im Walde and Maximilian Köper. 2013.
Pattern-based distinction of paradigmatic relations
for german nouns, verbs, adjectives. In Proceed-
ings of the 25th International Conference of the Ger-
man Society for Computational Linguistics and Lan-
guage Technology (GSCL), pages 189–198, Darm-
stadt, Germany.

84



Roy Schwartz, Roi Reichart, and Ari Rappoport. 2015.
Symmetric pattern based word embeddings for im-
proved word similarity prediction. In Proceedings
of the 19th Conference on Computational Language
Learning (CoNLL), pages 258–267, Beijing, China.

Vered Shwartz, Yoav Goldberg, and Ido Dagan. 2016.
Improving hypernymy detection with an integrated
path-based and distributional method. In Proceed-
ings of the 54th Annual Meeting of the Association
for Computational Linguistics (ACL), pages 2389–
2398, Berlin, Germany.

Theano Development Team. 2016. Theano: A Python
framework for fast computation of mathematical ex-
pressions. arXiv e-prints, abs/1605.02688.

Peter D. Turney and Patrick Pantel. 2010. From
frequency to meaning: Vector space models of se-
mantics. Journal of Artificial Intelligence Research,
37:141–188.

Ngoc Thang Vu, Heike Adel, Pankaj Gupta, and Hin-
rich Schütze. 2016. Combining recurrent and con-
volutional neural networks for relation classifica-
tion. In Proceedings of the 2016 Conference of
the North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies (NAACL), pages 534–539.

Wen-tau Yih, Geoffrey Zweig, and John C. Platt. 2012.
Polarity inducing latent semantic analysis. In Pro-
ceedings of the 2012 Joint Conference on Empirical
Methods in Natural Language Processing and Com-
putational Natural Language Learning (EMNLP),
pages 1212–1222, Jeju Island, Korea.

Matthew D. Zeiler. 2012. ADADELTA: an adaptive
learning rate method. CoRR, abs/1212.5701.

85


