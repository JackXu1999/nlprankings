



















































Learning Dynamic Context Augmentation for Global Entity Linking


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 271–281,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

271

Learning Dynamic Context Augmentation for Global Entity Linking

Xiyuan Yang1, Xiaotao Gu2, Sheng Lin1, Siliang Tang1∗, Yueting Zhuang1,
Fei Wu1, Zhigang Chen3, Guoping Hu3 & Xiang Ren4

1Zhejiang University, 2University of Illinois at Urbana Champaign
3iFLYTEK Research, 4University of Southern California

{yangxiyuan, shenglin, siliang, yzhuang, wufei}@zju.edu.cn,
xiaotao2@illinois.edu, {zgchen, gphu}@iflytek.com,

xiangren@usc.edu

Abstract

Despite of the recent success of collective en-
tity linking (EL) methods, these “global” in-
ference methods may yield sub-optimal results
when the “all-mention coherence” assumption
breaks, and often suffer from high computa-
tional cost at the inference stage, due to the
complex search space. In this paper, we pro-
pose a simple yet effective solution, called
Dynamic Context Augmentation (DCA), for
collective EL, which requires only one pass
through the mentions in a document. DCA
sequentially accumulates context information
to make efficient, collective inference, and can
cope with different local EL models as a plug-
and-enhance module. We explore both super-
vised and reinforcement learning strategies for
learning the DCA model. Extensive experi-
ments1 show the effectiveness of our model
with different learning settings, base models,
decision orders and attention mechanisms.

1 Introduction

Linking mentions of entities in text to knowledge
base entries (i.e., entity linking, or EL) is critical
to understanding and structuring text corpora. In
general, EL is approached by first obtaining can-
didate entities for each mention, and then identi-
fying the true referent among the candidate enti-
ties. Prior distribution and local contexts, either in
the form of hand-crafted features (Ratinov et al.,
2011; Shen et al., 2015) or dense embeddings (He
et al., 2013; Nguyen et al., 2016; Francis-Landau
et al., 2016), play key roles in distinguishing dif-
ferent candidates. However, in many cases, local
features can be too sparse to provide sufficient in-
formation for disambiguation.

To alleviate this problem, various collective EL
models have been proposed to globally optimize

∗Corresponding author.
1Code and data is available at https://github.com/YoungXiyuan/DCA

New Mexico

Beirut
Washington

New Mexico

Beirut

Washington
Mention

Figure 1: An Illustration of the Dynamic Context
Augmentation process. A traditional global EL model
jointly optimizes the linking configuration after itera-
tive calculations over all mentions, which is compu-
tationally expensive. In contrast, the DCA process
only requires one pass of the document to accumulate
knowledge from previously linked mentions to enhance
fast future inference.

the inter-entity coherence between mentions in the
same document (Hoffart et al., 2011; Cheng and
Roth, 2013; Nguyen et al., 2014; Alhelbawy and
Gaizauskas, 2014; Pershina et al., 2015). De-
spite of their success, existing global EL models
try to optimize the entire linking configuration of
all mentions, with extra assumptions of either all-
mention coherence or pairwise coherence (Phan
et al., 2018). Such assumptions are against hu-
man intuitions, as they imply that no inference can



272

be made until all mentions in a document have
been observed. Also, there usually exists a trade-
off between accuracy and efficiency: state-of-the-
art collective/global models suffer from high time
complexity. From the perspective of computa-
tional efficiency, optimal global configuration in-
ference is NP-hard. Approximation methods, such
as loopy belief propagation (Ganea and Hofmann,
2017) or iterative substitutions (Shen et al., 2015),
are still computationally expensive due to the huge
hypothesis space, and thus can hardly be scaled to
handle large corpus. Many previous works have
discussed the urgent needs of more efficient link-
ing system for production, both in time complex-
ity (Hughes et al., 2014) and memory consump-
tion (Blanco et al., 2015).

In this paper, we propose a simple yet effec-
tive Dynamic Context Augmentation (DCA) pro-
cess to incorporate global signal for EL. As Fig-
ure 1 shows, in contrast to traditional global mod-
els, DCA only requires one pass through all men-
tions to achieve comparable linking accuracy. The
basic idea is to accumulate knowledge from pre-
viously linked entities as dynamic context to en-
hance later decisions. Such knowledge come from
not only the inherent properties (e.g., descrip-
tion, attributes) of previously linked entities, but
also from their closely related entities, which em-
power the model with important associative abil-
ities. In real scenarios, some previously linked
entities may be irrelevant to the current mention.
Some falsely linked entities may even introduce
noise. To alleviate error propagation, we fur-
ther explore two strategies: (1) soft/hard attention
mechanisms that favour the most relevant entities;
(2) a reinforcement learning-based ranking model,
which proves to be effective as reported in other
information extraction tasks.

Contributions. The DCA model forms a new
linking strategy from the perspective of data aug-
mentation and thus can serve as a plug-and-
enhance module of existing linking models. The
major contributions of this work are as follows:
(1) DCA can introduce topical coherence into lo-
cal linking models without reshaping their origi-
nal designs or structures; (2) Comparing to global
EL models, DCA only requires one pass through
all mentions, yielding better efficiency in both
training and inference; (3) Extensive experiments
show the effectiveness of our model under differ-
ent learning settings, base models, decision orders

and attention mechanisms.

2 Background

2.1 Problem Definition
Given a set of entity mentionsM = {m1, ...,mT }
in corpusD, Entity Linking aims to link each men-
tion mt to its corresponding gold entity e∗t . Such
a process is usually divided into two steps: Candi-
date generation first collects a set of possible (can-
didate) entities Et = {e1t , ..., e

|Et|
t } for mt; Candi-

date ranking is then applied to rank all candidates
by likelihood. The linking system selects the top
ranked candidate as the predicted entity êt. The
key challenge is to capture high-quality features
of each entity mention for accurate entity predic-
tion, especially when local contexts are too sparse
to disambiguate all candidates.

We build our DCA model based on two existing
local EL models. In this section, we first introduce
the architecture of the base models, then present
the proposed DCA model under the standard su-
pervised learning framework. Since the DCA pro-
cess can be naturally formed as a sequential deci-
sion problem, we also explore its effectiveness un-
der the Reinforcement Learning framework. De-
tailed performance comparison and ablation stud-
ies are reported in Section 6.

2.2 Local Base Models for Entity Linking
We apply the DCA process in two popular lo-
cal models with different styles: the first is a
neural attention model named ETHZ-Attn (Ganea
and Hofmann, 2017), the other is the Berkeley-
CNN (Francis-Landau et al., 2016) model which
is made up of multiple convolutional neural net-
works (CNN).

ETHZ-Attn. For each mention mt and a can-
didate ejt ∈ Et, three local features are con-
sidered: (1) Mention-entity Prior P̂ (ejt |mt) is
the empirical distribution estimated from mas-
sive corpus (e.g.Wikipedia); (2) Context Simi-
larity ΨC(mt, e

j
t ) measures the textual similar-

ity between ejt and the local context of mt; (3)
Type Similarity ΨT (mt, e

j
t ) considers the similar-

ity between the type of ejt and contexts around
mt. P̂ (e

j
t |mt) and ΨC(mt, e

j
t ) are calculated in

the same way as (Ganea and Hofmann, 2017).
For ΨT (mt, e

j
t ), we first train a typing system

proposed by (Xu and Barbosa, 2018) on AIDA-
train dataset, yielding 95% accuracy on AIDA-A
dataset. In the testing phase, the typing system



273

predicts the probability distribution over all types
(PER, GPE, ORG and UNK) for mt, and outputs
ΨT (mt, e

j
t ) for each candidate accordingly. All

local features are integrated by a two-layer feed-
forward neural network with 100 hidden units, as
described in (Ganea and Hofmann, 2017).

Berkeley-CNN. The only difference between
ETHZ-Attn and Berkeley-CNN is that, this
model utilizes CNNs at different granularities to
capture context similarity ΨC(mt, e

j
t ) between a

mention’s context and its target candidate entities.

3 Dynamic Context Augmentation

As Figure 1 demonstrates, the basic idea of
DCA is to accumulate knowledge from previously
linked entities as dynamic context to enhance later
decisions. Formally, denote the list of previously
linked entities as St = {ê1, ..., êt}, where each êi
is represented as an embedding vector. The aug-
mented context can be represented by accumulated
features of all previous entities and their neighbors
(e.g. by averaging their embeddings, in the sim-
plest way). In actual scenarios, some entities in St
are irrelevant, if not harmful, to the linking result
of mt+1. To highlight the importance of relevant
entities while filtering noises, we also try to apply
a neural attention mechanism on dynamic contexts
(Figure 2). For mention mt+1, candidates that are
more coherent with St are preferred. More specif-
ically, we calculate the relevance score for each
êi ∈ St as

u(êi) = max
ejt+1∈Et+1

ejt+1
> ·A · êi, (1)

where A is a parameterized diagonal matrix. Top
K entities in St are left to form dynamic context
while the others are pruned. The relevance scores
are transformed to attention weights with

a(êi) =
exp[u(êi)]∑

êj∈St exp[u(êj)]
. (2)

Thus, we can define a weighted coherence score
between ejt+1 ∈ Et+1 and St as

Φ(ejt+1, St) =
∑
êi∈St

a(êi) · ejt+1
> ·R · êi, (3)

where R is a learnable diagonal matrix. Such a
coherence score will be later incorporated in the
final representation of ejt+1.

… …

-inf

soft attention: max(column)

hard attention (keep top K)
-inf

softmax
entity 

attention 
weight

embedding
matrix 

Input: pre-trained 
embedding of 
linked entities

Input:  pre-trained 
embedding of 

mention candidates

embedding matrix 

weighted sum
context 

embedding of 

Figure 2: Neural attention mechanism on the dynamic
context. The soft attention module assigns higher
weights to entities that are more relevant to the target
mention. The hard attention module only considers top
K entities as dynamic contexts.

To empower the linking model with associative
ability, aside from previously linked entities, we
also incorporate entities that are closely associated
with entities in St. Specifically, for each êi ∈ St,
we collect its neighborhood N (êi) consisting of
Wikipedia entities that have inlinks pointing to êi.
Denoting S′t as the union of {N (êi)|êi ∈ St}, we
define a similar weighted coherence score between
ejt+1 ∈ Et+1 and S′t as

Φ′(ejt+1, S
′
t) =

∑
êi∈S′t

a′(êi) · ejt+1
> ·R′ · êi, (4)

where a′ is defined similarly to a, and R′

is a learnable diagonal matrix. The final
representation ~h0(mt+1, e

j
t+1) is the concatena-

tion of Φ(ejt+1, St), Φ
′(ejt+1, S

′
t), ΨT (mt, e

j
t+1),

ΨC(mt, e
j
t+1) and log P̂ (e

j
t+1|mt+1).

4 Model Learning for DCA

In this section, we explore different learning
strategies for the linking model. Specifically, we
present a Supervised Learning model, where the
model is given all gold entities for training, and a
Reinforcement Learning model, where the model
explores possible linking results by itself in a long-
term planning task.

4.1 Supervised Ranking Method
Given a mention-candidate pair (mt, e

j
t ), the rank-

ing model parameterized by θ accepts the feature



274

vector ~h0(mt, e
j
t ) as input, and outputs the proba-

bility Pθ(e
j
t |mt). In this work, we use a two-layer

feedforward neural network as the ranking model.
We apply the max-margin loss as

Lθ =
∑
D∈D

∑
mt∈D

∑
ejt∈Et

gθ(e
j
t ,mt),

gθ(e
j
t ,mt) = max(0, γ − Pθ(e∗t |mt) + Pθ(e

j
t |mt)).

The learning process is to estimate the optimal pa-
rameter such that θ∗ = arg minθ Lθ.

Note that, in the Supervised Ranking model, dy-
namic contexts are provided by previous gold en-

tities: St = {e∗1, ..., e∗t }, S′t =
t⋃
i=1
N (e∗i ). In the

testing phase, however, we do not have access to
gold entities. Wrongly linked entities can intro-
duce noisy contexts to future linking steps. To
consider such long-term influences, we introduce
an alternative Reinforcement Learning model in
the next section.

4.2 Reinforcement Learning Method
Naturally, the usage of dynamic context augmen-
tation forms a sequential decision problem, as
each linking step depends on previous linking de-
cisions. Correct linking results provide valuable
information for future decisions, while previous
mistakes can lead to error accumulation. Rein-
forcement Learning (RL) algorithms have proven
to be able to alleviate such accumulated noises
in the decision sequence in many recent works
(Narasimhan et al., 2016; Feng et al., 2018). In
this work, we propose an RL ranking model for
DCA-enhanced entity linking.

Agent: The Agent is a candidate ranking model
that has a similar architecture to (Clark and Man-
ning, 2016), aiming to output the action prefer-
ence Hθ(St−1, S′t−1, A

j
t ) of each linking action

Ajt = (mt → e
j
t ). It is a 2-layer feedforward

neural network with following components:

Input Layer: For each (mt, ejt ) pair, DCA-
RL extracts context-dependent features from
St−1, S

′
t−1, and concatenates them with other

context-independent features to produce an I-
dimensional input vector ~h0(mt, e

j
t ).

Hidden Layers: Let Drop(~x) be the dropout op-
eration (Srivastava et al., 2014) and ReLU(~x) be
the rectifier nonlinearity (Nair and Hinton, 2010).
So the output ~h1 of the hidden layer is defined as:

~h1 = Drop(ReLU( ~W1 · ~h0 +~b1)), (5)

where ~W1 is a H1 × I weight matrix.
Output Layers: This scoring layer is also fully
connected layer of size 1.

~h2 = ~W2 · ~h1 +~b2, (6)

where ~W2 is a 1×H1 weight matrix. In the end, all
action preference would be normalized together
using an exponential softmax distribution, getting
their action probabilities πθ(A

j
t |St−1, S′t−1):

According to policy approximating methods,
the best approximate policy may be stochastic. So
we randomly sample the actions based on the soft-
max distribution during the training time, whereas
deliberately select the actions with the highest
ranking score at the test time.

Reward. The reward signals are quite sparse in
our framework. For each trajectory, the Agent can
only receive a reward signal after it finishes all
the linking actions in a given document. There-
fore the immediate reward of action t, Rt = 0,
where 0 ≤ t < T , and RT = −(|Me|/T ), where
T is total number of mentions in the source docu-
ment, and |Me| is the number of incorrectly linked
mentions. Then the value Gt (expected reward) of
each previous state St can be retraced back with a
discount factor ρ according to RT :

Gt = ρ
T−tRT (7)

To maximize the expected reward of all trajec-
tories, the Agent utilizes the REINFORCE algo-
rithm (Sutton and Barto, 1998) to compute Monte
Carlo policy gradient over all trajectories, and per-
form gradient ascent on its parameters:

θ ← θ + α
∑
t

Gt∇θ lnπθ(Ajt |St−1, S′t−1) (8)

In following sections, to fully investigate the ef-
fectiveness of the proposed method, we report and
compare the performances of both the Supervised-
learning model and the Reinforcement-learning
model.

5 Analysis of Computational Complexity

For each document D, the train and inference
of the global EL models are heavily relied on
the inter-entity coherence graph Φg. Many stud-
ies (Ratinov et al., 2011; Globerson et al., 2016;
Yamada et al., 2016; Ganea and Hofmann, 2017;
Le and Titov, 2018) obtain Φg by calculating all



275

Dataset #mention
#

doc
Mentions
per doc

Gold
recall

AIDA-train 18448 946 19.5 -
AIDA-A 4791 216 22.1 97.3
AIDA-B 4485 231 19.4 98.3

MSNBC 656 20 32.8 98.5
AQUAINT 727 50 14.5 94.2
ACE2004 257 36 7.1 90.6
CWEB 11154 320 34.8 91.1
WIKI 6821 320 21.3 92.4

Table 1: Dataset Statistics. Gold recall is the percent-
age of mentions for which the candidate entities contain
the ground truth entity.

pairwise scores between two arbitrary elements
ei
x and ejy sampled independently from candidate

sets Ei and Ej in the given document. It is obvious
that Φ is intractable, and the computational com-
plexity of Φg is

O(Φg) = O(
T∑
i=1

T∑
j=1,j 6=i

|Ei|∑
eix∈Ei

|Ej |∑
ejy∈Ej

Φ(ei
x, ej

y))

(9)
, where Φ(eix, ejy) is a learnable score function.
Thus,O(Φg) is approximate toO(T 2×|E|2×I),
where |E| is the average number of candidates per
mention and I is the unit cost of pairwise func-
tion Φ. In order to reduce O(Φg), most previous
models (Hoffart et al., 2011; Ganea and Hofmann,
2017; Le and Titov, 2018; Fang et al., 2019) have
to hard prune their candidates into an extremely
small size (e.g. |E|=5). This will reduce the gold
recall of candidate sets and also unsuitable for
large scale production (e.g. entity disambiguation
for dynamic web data like Twitter).

In contrast, the computational complexity of our
model is O(T × |E| × I × K), where K is the
key hyper-parameter described in Section 3 and is
usually set to a small number. This indicates the
response time of our method grow linearly as a
function of T × |E|.

6 Experiment

6.1 Experiment Setup
Datasets. Following our predecessors, we train
and test all models on the public and widely
used AIDA CoNLL-YAGO dataset (Hoffart et al.,
2011). The target knowledge base is Wikipedia.
The corpus consists of 946 documents for training,
216 documents for development and 231 docu-
ments for testing (AIDA-train/A/B respectively).

System In-KB acc. (%)

AIDA-light (Nguyen et al., 2014) 84.8
WNED (Guo and Barbosa, 2016) 89.0
Global-RNN (Nguyen et al., 2016) 90.7
MulFocal-Att (Globerson et al., 2016) 91.0
Deep-ED (Ganea and Hofmann, 2017) 92.22
Ment-Norm (Le and Titov, 2018) 93.07

Prior (p(e|m)) (Ganea and Hofmann, 2017) 71.51

Berkeley-CNN (Sec. 2.2) 84.21
Berkeley-CNN + DCA-SL 92.72 ± 0.3
Berkeley-CNN + DCA-RL 92.37 ± 0.1
ETHZ-Attn (Sec. 2.2) 90.88
ETHZ-Attn + DCA-SL 94.64 ± 0.2
ETHZ-Attn + DCA-RL 93.73 ± 0.2

Table 2: In-domain Performance Comparison on the
AIDA-B Dataset. For our method we show 95% confi-
dence intervals obtained over 5 runs. DCA-based mod-
els achieve the best reported scores on this benchmark.

To evaluate the generalization ability of each
model, we apply cross-domain experiments fol-
lowing the same setting in (Ganea and Hofmann,
2017; Le and Titov, 2018; Yang et al., 2018).
Models are trained on AIDA-train, and evaluated
on five popular public datasets: AQUAINT (Milne
and Witten, 2008), MSNBC (Cucerzan, 2007),
ACE2004 (Ratinov et al., 2011), CWEB (Guo
and Barbosa, 2016) and WIKI (Guo and Barbosa,
2016). The statistics of these datasets are avail-
able in Table 1. In the candidate generation step,
we directly use the candidates provided by the
Ment-Norm system (Le and Titov, 2018)2, and
their quality is also listed in Table 1.

Compared Methods. We compare our meth-
ods with following existing systems that report
state-of-the-art results on the test datasets: AIDA-
light (Nguyen et al., 2014) uses a kind of two-
stage collective mapping algorithm and designs
several domain or category related coherence fea-
tures. WNED (Guo and Barbosa, 2016) applies
random walks on carefully built disambiguation
graphs and uses a greedy, iterative and global
disambiguation algorithm based on Information
Theory. Global-RNN (Nguyen et al., 2016) de-
velops a framework based on convolutional neu-
ral networks and recurrent neural networks to
simultaneously model the local and global fea-
tures. MulFocal-Att (Globerson et al., 2016)
adopts a coherence model with a multi-focal at-
tention mechanism. Deep-ED (Ganea and Hof-
mann, 2017) leverages learned neural representa-

2https://github.com/lephong/mulrel-nel



276

System MSBNC AQUAINT ACE2004 CWEB WIKI

AIDA (Hoffart et al., 2011) 79 56 80 58.6 63
GLOW (Ratinov et al., 2011) 75 83 82 56.2 67.2
RI (Cheng and Roth, 2013) 90 90 86 67.5 73.4
WNED (Guo and Barbosa, 2016) 92 87 88 77 84.5
Deep-ED (Ganea and Hofmann, 2017) 93.7 88.5 88.5 77.9 77.5
Ment-Norm (Le and Titov, 2018) 93.9 88.3 89.9 77.5 78.0

Prior (p(e|m)) (Ganea and Hofmann, 2017) 89.3 83.2 84.4 69.8 64.2

Berkeley-CNN (Section 2.2) 89.05 80.55 87.32 67.97 60.27
Berkeley-CNN + DCA-SL 93.38 ± 0.2 85.63 ± 0.3 88.73 ± 0.3 71.01 ± 0.1 72.55 ± 0.2
Berkeley-CNN + DCA-RL 93.65 ± 0.2 88.53 ± 0.3 89.73 ± 0.4 72.66 ± 0.4 73.98 ± 0.2
ETHZ-Attn (Section 2.2) 91.97 84.06 86.92 70.07 74.37
ETHZ-Attn + DCA-SL 94.57 ± 0.2 87.38 ± 0.5 89.44 ± 0.4 73.47 ± 0.1 78.16 ± 0.1
ETHZ-Attn + DCA-RL 93.80 ± 0.0 88.25 ± 0.4 90.14 ± 0.0 75.59 ± 0.3 78.84 ± 0.2

Table 3: Performance Comparison on Cross-domain Datasets using F1 score (%). The best results are in bold.
Note that our own results all retain two decimal places. Other results with uncertain amount of decimal places are
directly retrieved from their original paper.

tions, and uses a deep learning model combined
with a neural attention mechanism and graphical
models. Ment-Norm (Le and Titov, 2018) im-
proving the Deep-ED model by modeling latent
relations between mentions.

For a fair comparison with prior work, we
use the same input as the WNED, Deep-ED and
Ment-Norm (models proposed after 2016), and
report the performance of our model with both
Supervised Learning (DCA-SL) and Reinforce-
ment Learning (DCA-RL). We won’t compare our
models with the RLEL (Fang et al., 2019) which
is a deep reinforcement learning based LSTM
model. There are two reasons: 1) RLEL uses
optimized candidate sets with smaller candidate
size and higher gold recall than ours and the listed
baselines. 2) RLEL uses additional training set
from Wikipedia data. (Fang et al., 2019) doesn’t
release either their candidate sets or updated train-
ing corpus, so the comparison with their work
would be unfair for us.

Hyper-parameter Setting. We coarsely tune
the hyper-parameters according to model perfor-
mance on AIDA-A. We set the dimensions of
word embedding and entity embedding to 300,
where the word embedding and entity embedding
are publicly released by (Pennington et al., 2014)
and (Ganea and Hofmann, 2017) respectively.
Hyper-parameters of the best validated model are:
K = 7, I = 5, H1 = 100, and the probability
of dropout is set to 0.2. Besides, the rank margin
γ = 0.01 and the discount factor ρ = 0.9. We also

System In-KB acc. (%)SL RL
ETHZ-Attn (Section 2.2) 90.88 -
ETHZ-Attn + 1-hop DCA 93.69 93.20
ETHZ-Attn + 2-hop DCA 94.47 93.76

Table 4: Ablation Study on Neighbor Entities. We
compare the performance of DCA with or without
neighbor entities (i.e., 2-hop vs. 1-hop).

regularize the Agent model as adopted in (Ganea
and Hofmann, 2017) by constraining the sum of
squares of all weights in the linear layer with
MaxNorm = 4. When training the model, we
use Adam (Kingma and Ba, 2014) with learning
rate of 2e-4 until validation accuracy exceeds
92.8%, afterwards setting it to 5e-5.

6.2 Overall Performance Comparison

Starting with an overview of the end-task perfor-
mance, we compare DCA (using SL or RL) with
several state-of-the-art systems on in-domain and
cross-domain datasets. We follow prior work and
report in-KB accuracy for AIDA-B and micro F1
scores for the other test sets.

Table 2 summarizes results on the AIDA-
B dataset, and shows that DCA-based models
achieve the highest in-KB accuracy and outper-
forms the previous state-of-the-art neural system
by near 1.6% absolute accuracy. Moreover, com-
pared with the base models, dynamic context aug-
mentation significantly improve absolute in-KB
accuracy in models Berkeley-CNN (more than



277

R

R R

R
R

R

R

R

Figure 3: Ablation Study on Different Decision Orders. We test on both in-domain (AIDA-B) and cross-domain
(CWEB) datasets, using ETHZ-Attn as the local model.

8%) and ETHZ-Attn (3.3% on average). Note
that, our DCA model outperforms existing global
models with the same local model (Global-RNN
uses Berkeley-CNN as base model, Deep-ED and
Ment-Norm use ETHZ-Attn as the local model).

Table 3 shows the results on the five cross-
domain datasets. As shown, none of existing
methods can consistently win on all datasets.
DCA-based models achieve state-of-the-art per-
formance on the MSBNC and the ACE2004
dataset. On remaining datasets, DCA-RL achieves
comparable performance with other complex
global models. In addition, RL-based models
show on average 1.1% improvement on F1 score
over the SL-based models across all the cross-
domain datasets. At the same time, DCA-based
methods are much more efficient, both in time
complexity and in resource requirement. Detailed
efficiency analysis will be presented in following
sections.

6.3 Performance Analysis

1. Impact of decision order. As the DCA model
consecutively links and adds all the mentions in a
document, the linking order may play a key role in
the final performance. In this work, we try three
different linking orders: Offset links all mentions
by their natural orders in the original document;

System In-KB acc. (%)SL RL
DCA + Average Sum 94.05 93.56
DCA + Soft Attention 94.23 93.69

DCA + Soft&Hard Attention 94.47 93.76

Table 5: Study on Different Attention Mechanisms
on the Dynamic Context. Results (using ETHZ-Attn
as local model) show that different attention mecha-
nisms have similar impact on the performance.

Size first links mentions with smaller candidate
sizes, as they tend to be easier to link; The baseline
method is to link all mentions in a Random order.
Figure 3 shows the performance comparison on
the AIDA-B and the CWEB dataset. As shown, in
general, Size usually leads to better performance
than Offset and Random. However, the DCA-SL
model shows poor performance on the CWEB
dataset with Size order. This is mainly because
the CWEB dataset is automatically generated
rather than curated by human, and thus contains
many noisy mentions. Some mentions in CWEB
with less than three candidates are actually bad
cases , where none of the candidates is the actual
gold entity. Thus, such mentions will always
introduce wrong information to the model, which
leads to a worse performance. In contrast, the
AIDA-B dataset does not have such situations.



278

Figure 4: (a) In-KB accuracy as a function of decision length on AIDA-B dataset; (b) Memory usage as a function
of the number of candidates on AIDA-B dataset; (c) Runtime cost (at inference time) as a function of the number
of mentions. (each dot represents a document of AIDA-B with |E| = 35).

The DCA-RL model, however, still has strong
performance on the CWEB dataset, which high-
lights its robustness to potential noises.

2. Effect of neighbor entities. In contrast to
traditional global models, we include both pre-
viously linked entities and their close neighbors
for global signal. Table 4 shows the effectiveness
of this strategy. We observe that incorporating
these neighbor entities (2-hop) significantly
improve the performance (compared to 1-hop) by
introducing more related information. And our
analysis shows that on average 0.72% and 3.56%
relative improvement of 2-hop DCA-(SL/RL)
over 1-hop DCA-(SL/RL) or baseline-SL (without
DCA) is statistically significant (with P-value <
0.005). This is consistent with our design of DCA.

3. Study of different attention mechanisms.
Table 5 shows the performance comparison
by replacing the attention module described in
Section 3 with different variants. Average Sum
treats all previously linked entities equally with
a uniform distribution. Soft Attention skips the
pruning step for entities with low weight scores.
Soft&Hard Attention stands for the strategy used
in our model. It is obvious that the attention
mechanism does show positive influence on the
linking performance compared with Average Sum.
Hard pruning brings slight further improvement.

4. Impact of decision length. As wrongly linked
entities can introduce noise to the model, there
exists a trade-off in DCA: involving more previ-
ous entities (longer historical trajectory) provides
more information, and also more noise. Figure
(4.a) shows how the performance of DCA changes
with the number of previous entities involved. We
observe that longer historical trajectories usually

have a positive influence on the performance of
DCA. The reason is that our attention mechanism
could effectively assess and select relevant con-
texts for each entity mention on the fly, thus re-
ducing potential noise.

6.4 Analysis on Time Complexity

As discussed in Sec. 5, the running time of a DCA
enhanced model may rise linearly when the aver-
age number of candidates per mention (i.e., |E|)
increases, while the global EL model increases ex-
ponentially. To validate the theory we empirically
investigate the scalability of DCA, and carefully
select two global EL models Ment-Norm (Le and
Titov, 2018) and Deep-ED (Ganea and Hofmann,
2017) as our baselines. The reason for this choice
is that our final model shares the same local model
as their models, which excludes other confound-
ing factors like implementation details. As Figure
(4.c) shows, when |E| increases, the running time
of these two global EL models increases shapely,
while our DCA model grows linearly. On the other
hand, we also observed that the resources required
by the DCA model are insensitive to |E|. For
example, as shown in Figure (4.b), the memory
usage of Ment-Norm and Deep-ED significantly
rises as more candidates are considered, while the
DCA model remains a relatively low memory us-
age all the time. We also measure the power con-
sumption of Ment-Norm and DCA models, and we
find that the DCA model saves up to 80% of the
energy consumption over the Ment-Norm, which
is another advantage for large scale production.

7 Related Work

Local EL methods disambiguate each mention in-
dependently according to their local contexts (Ya-
mada et al., 2016; Chen et al., 2017; Globerson
et al., 2016; Raiman and Raiman, 2018). The per-



279

formance is limited when sparse local contexts fail
to provide sufficient disambiguation evidence.

To alleviate this problem, global EL models
jointly optimize the entire linking configuration.
The key idea is to maximize a global coher-
ence/similarity score between all linked entities
(Hoffart et al., 2011; Ratinov et al., 2011; Cheng
and Roth, 2013; Nguyen et al., 2014; Alhelbawy
and Gaizauskas, 2014; Pershina et al., 2015; Guo
and Barbosa, 2016; Globerson et al., 2016; Ganea
and Hofmann, 2017; Le and Titov, 2018; Yang
et al., 2018; Fang et al., 2019; Xue et al., 2019).
Despite of its significant improvement in accu-
racy, such global methods suffer from high com-
plexity. To this end, some works try to relax the
assumption of all-mention coherence, e.g. with
pairwise coherence, to improve efficiency (Phan
et al., 2018), but exact inference remains an NP-
hard problem. Approximation methods are hence
proposed to achieve reasonably good results with
less cost. (Shen et al., 2012) propose the iter-
ative substitution method to greedily substitute
linking assignment of one mention at a time that
can improve the global objective. Another com-
mon practice is to use Loopy Belief Propagation
for inference (Ganea and Hofmann, 2017; Le and
Titov, 2018). Both approximation methods itera-
tively improve the global assignment, but are still
computationally expensive with unbounded num-
ber of iterations. In contrast, the proposed DCA
method only requires one pass through the docu-
ment. Global signals are accumulated as dynamic
contexts for local decisions, which significantly
reduces computational complexity and memory
consumption.

8 Conclusions

In this paper we propose Dynamic Context Aug-
mentation as a plug-and-enhance module for lo-
cal Entity Linking models. In contrast to exist-
ing global EL models, DCA only requires one
pass through the document. To incorporate global
disambiguation signals, DCA accumulates knowl-
edge from previously linked entities for fast in-
ference. Extensive experiments on several public
benchmarks with different learning settings, base
models, decision orders and attention mechanisms
demonstrate both the effectiveness and efficiency
of DCA-based models. The scalability of DCA-
based models make it possible to handle large-
scale data with long documents. Related code and

data has been published and may hopefully benefit
the community.

Acknowledgments

This work has been supported in part by National
Key Research and Development Program of China
(SQ2018AAA010010), NSFC (No.61751209,
U1611461), Zhejiang University-iFLYTEK Joint
Research Center, Zhejiang University-Tongdun
Technology Joint Laboratory of Artificial In-
telligence, Hikvision-Zhejiang University Joint
Research Center, Chinese Knowledge Center of
Engineering Science and Technology (CKCEST),
Engineering Research Center of Digital Library,
Ministry of Education. Xiang Ren’s research
has been supported in part by National Science
Foundation SMA 18-29268, DARPA MCS and
GAILA, IARPA BETTER, Schmidt Family Foun-
dation, Amazon Faculty Award, Google Research
Award, Snapchat Gift and JP Morgan AI Research
Award. Finally, we would like to thank Qi Zhang
from Sogou, Inc. and all the collaborators in INK
research lab for their constructive feedback on
this work.

References
Ayman Alhelbawy and Robert Gaizauskas. 2014.

Graph ranking for collective named entity disam-
biguation. In Proceedings of the 52nd Annual Meet-
ing of the Association for Computational Linguistics
(Volume 2: Short Papers), volume 2, pages 75–80.

Roi Blanco, Giuseppe Ottaviano, and Edgar Meij.
2015. Fast and space-efficient entity linking for
queries. In Proceedings of the Eighth ACM Interna-
tional Conference on Web Search and Data Mining,
pages 179–188. ACM.

Hui Chen, Baogang Wei, Yonghuai Liu, Yiming Li,
Jifang Yu, and Wenhao Zhu. 2017. Bilinear joint
learning of word and entity embeddings for entity
linking. Neurocomputing.

Xiao Cheng and Dan Roth. 2013. Relational inference
for wikification. In Proceedings of the 2013 Con-
ference on Empirical Methods in Natural Language
Processing, pages 1787–1796.

Kevin Clark and Christopher D Manning. 2016. Deep
reinforcement learning for mention-ranking coref-
erence models. In Proceedings of the 2016 Con-
ference on Empirical Methods in Natural Language
Processing, pages 2256–2262.

Silviu Cucerzan. 2007. Large-scale named entity dis-
ambiguation based on wikipedia data. In Proceed-
ings of the 2007 Joint Conference on Empirical



280

Methods in Natural Language Processing and Com-
putational Natural Language Learning (EMNLP-
CoNLL).

Zheng Fang, Yanan Cao, Qian Li, Dongjie Zhang,
Zhenyu Zhang, and Yanbing Liu. 2019. Joint en-
tity linking with deep reinforcement learning. In The
World Wide Web Conference, pages 438–447. ACM.

Jun Feng, Minlie Huang, Yijie Zhang, Yang Yang,
and Xiaoyan Zhu. 2018. Relation mention extrac-
tion from noisy data with hierarchical reinforcement
learning. arXiv preprint arXiv:1811.01237.

Matthew Francis-Landau, Greg Durrett, and Dan
Klein. 2016. Capturing semantic similarity for
entity linking with convolutional neural networks.
arXiv preprint arXiv:1604.00734.

Octavian-Eugen Ganea and Thomas Hofmann. 2017.
Deep joint entity disambiguation with local neural
attention. arXiv preprint arXiv:1704.04920.

Amir Globerson, Nevena Lazic, Soumen Chakrabarti,
Amarnag Subramanya, Michael Ringaard, and Fer-
nando Pereira. 2016. Collective entity resolution
with multi-focal attention. In Proceedings of the
54th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), vol-
ume 1, pages 621–631.

Zhaochen Guo and Denilson Barbosa. 2016. Robust
named entity disambiguation with random walks.
Semantic Web, (Preprint):1–21.

Zhengyan He, Shujie Liu, Mu Li, Ming Zhou, Longkai
Zhang, and Houfeng Wang. 2013. Learning entity
representation for entity disambiguation. In Pro-
ceedings of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers), volume 2, pages 30–34.

Johannes Hoffart, Mohamed Amir Yosef, Ilaria Bor-
dino, Hagen Fürstenau, Manfred Pinkal, Marc Span-
iol, Bilyana Taneva, Stefan Thater, and Gerhard
Weikum. 2011. Robust disambiguation of named
entities in text. In Proceedings of the Conference on
Empirical Methods in Natural Language Process-
ing, pages 782–792. Association for Computational
Linguistics.

Kristy Hughes, Joel Nothman, and James R Curran.
2014. Trading accuracy for faster named entity link-
ing. In Proceedings of the Australasian Language
Technology Association Workshop 2014, pages 32–
40.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Phong Le and Ivan Titov. 2018. Improving entity link-
ing by modeling latent relations between mentions.
arXiv preprint arXiv:1804.10637.

David Milne and Ian H Witten. 2008. Learning to link
with wikipedia. In Proceedings of the 17th ACM
conference on Information and knowledge manage-
ment, pages 509–518. ACM.

Vinod Nair and Geoffrey E Hinton. 2010. Rectified
linear units improve restricted boltzmann machines.
In Proceedings of the 27th international conference
on machine learning (ICML-10), pages 807–814.

Karthik Narasimhan, Adam Yala, and Regina Barzilay.
2016. Improving information extraction by acquir-
ing external evidence with reinforcement learning.
arXiv preprint arXiv:1603.07954.

Dat Ba Nguyen, Johannes Hoffart, Martin Theobald,
and Gerhard Weikum. 2014. Aida-light: High-
throughput named-entity disambiguation. LDOW,
1184.

Thien Huu Nguyen, Nicolas Fauceglia, Mariano Ro-
driguez Muro, Oktie Hassanzadeh, Alfio Massimil-
iano Gliozzo, and Mohammad Sadoghi. 2016. Joint
learning of local and global features for entity link-
ing via neural networks. In Proceedings of COLING
2016, the 26th International Conference on Compu-
tational Linguistics: Technical Papers, pages 2310–
2320.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP), pages 1532–1543.

Maria Pershina, Yifan He, and Ralph Grishman. 2015.
Personalized page rank for named entity disam-
biguation. In Proceedings of the 2015 Conference of
the North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies, pages 238–243.

Minh C Phan, Aixin Sun, Yi Tay, Jialong Han, and
Chenliang Li. 2018. Pair-linking for collective en-
tity disambiguation: Two could be better than all.
IEEE Transactions on Knowledge and Data Engi-
neering.

Jonathan Raiman and Olivier Raiman. 2018. Deep-
type: Multilingual entity linking by neural type sys-
tem evolution. arXiv preprint arXiv:1802.01021.

Lev Ratinov, Dan Roth, Doug Downey, and Mike
Anderson. 2011. Local and global algorithms
for disambiguation to wikipedia. In Proceedings
of the 49th Annual Meeting of the Association
for Computational Linguistics: Human Language
Technologies-Volume 1, pages 1375–1384. Associ-
ation for Computational Linguistics.

Wei Shen, Jianyong Wang, and Jiawei Han. 2015. En-
tity linking with a knowledge base: Issues, tech-
niques, and solutions. IEEE Transactions on Knowl-
edge and Data Engineering, 27(2):443–460.



281

Wei Shen, Jianyong Wang, Ping Luo, and Min Wang.
2012. Linden: linking named entities with knowl-
edge base via semantic knowledge. In Proceedings
of the 21st international conference on World Wide
Web, pages 449–458. ACM.

Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. The Journal of Machine Learning
Research, 15(1):1929–1958.

Richard S Sutton and Andrew G Barto. 1998. Re-
inforcement learning: An introduction, volume 1.
MIT press Cambridge.

Peng Xu and Denilson Barbosa. 2018. Neural fine-
grained entity type classification with hierarchy-
aware loss. north american chapter of the associ-
ation for computational linguistics, 1:16–25.

Mengge Xue, Weiming Cai, Jinsong Su, Linfeng
Song, Yubin Ge, Yubao Liu, and Bin Wang. 2019.
Neural collective entity linking based on recurrent
random walk network learning. arXiv preprint
arXiv:1906.09320.

Ikuya Yamada, Hiroyuki Shindo, Hideaki Takeda, and
Yoshiyasu Takefuji. 2016. Joint learning of the em-
bedding of words and entities for named entity dis-
ambiguation. arXiv preprint arXiv:1601.01343.

Yi Yang, Ozan Irsoy, and Kazi Shefaet Rahman.
2018. Collective entity disambiguation with struc-
tured gradient tree boosting. arXiv preprint
arXiv:1802.10229.


