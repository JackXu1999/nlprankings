



















































Combining Spans into Entities: A Neural Two-Stage Approach for Recognizing Discontiguous Entities


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 6216–6224,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

6216

Combining Spans into Entities:
A Neural Two-Stage Approach for Recognizing Discontiguous Entities

Bailin Wang
ILCC, School of Informatics

University of Edinburgh
bailin.wang@ed.ac.uk

Wei Lu
StatNLP Research Group

Singapore University of Technology and Design
luwei@sutd.edu.sg

Abstract

In medical documents, it is possible that an
entity of interest not only contains a discon-
tiguous sequence of words but also overlaps
with another entity. Entities of such structures
are intrinsically hard to recognize due to the
large space of possible entity combinations. In
this work, we propose a neural two-stage ap-
proach to recognizing discontiguous and over-
lapping entities by decomposing this problem
into two subtasks: 1) it first detects all the
overlapping spans that either form entities on
their own or present as segments of discon-
tiguous entities, based on the representation of
segmental hypergraph, 2) next it learns to com-
bine these segments into discontiguous entities
with a classifier, which filters out other incor-
rect combinations of segments. Two neural
components are designed for these subtasks re-
spectively and they are learned jointly using a
shared encoder for text. Our model achieves
the state-of-the-art performance in a standard
dataset, even in the absence of external fea-
tures that previous methods used.

1 Introduction

Named entity recognition (NER) aims at identi-
fying shallow semantic elements in text and has
been a crucial step towards natural language un-
derstanding (Tjong Kim Sang and De Meulder,
2003). Extracted entities can facilitate various
downstream tasks like question answering (Ab-
ney et al., 2000), relation extraction (Mintz et al.,
2009; Liu et al., 2017), event extraction (Riedel
and McCallum, 2011; Lu and Roth, 2012; Li et al.,
2013), and coreference resolution (Soon et al.,
2001; Ng and Cardie, 2002; Chang et al., 2013).

The underlying assumptions behind most NER
systems are that an entity should contain a con-
tiguous sequence of words and should not overlap
with each other. However, such assumptions do

Figure 1: Entities are highlighted with colored under-
lines. “laceration ... esophagus” and “stomach ... lac”
contain discontiguous sequence of words and the latter
also overlaps with another entity “blood in stomach”.

not always hold in practice. First, entities or men-
tions1 with overlapping structures frequently exist
in news (Doddington et al., 2004) and biomedi-
cal documents (Kim et al., 2003). Second, entities
can be discontiguous, especially in clinical texts
(Pradhan et al., 2014b). For example, Figure 3
shows three entities where two of them are discon-
tiguous (“laceration . . . esophagus” and “stomach
. . . lac”), and the second discontiguous entity also
overlaps with another entity (“blood in stomach”).

Such discontiguous entities are intrinsically
hard to recognize considering the large search
space of possible combinations of entities that
have discontiguous and overlapping structures.
Muis and Lu (2016a) proposed a hypergraph-
based representation to compactly encode discon-
tiguous entities. However, this representation suf-
fers from the ambiguity issue during decoding –
one particular hypergraph corresponds to multiple
interpretations of entity combinations. As a result,
it resorted to heuristics to deal with such an issue.

Motivated by their work, we take a novel ap-
proach to resolve the ambiguity issue in this work.
Our core observation is that though it is hard to
exactly encode the exponential space of all possi-
ble discontiguous entities, recent work on extract-
ing overlapping structures (Wang and Lu, 2018)
can be employed to efficiently explore the space

1Mentions are defined as references to entities that could
be named, nominal or pronominal (Florian et al., 2004).



6217

of all the span combinations of discontiguous en-
tities. Based on this observation, we decompose
the problem of recognizing discontiguous entities
into two subtasks: 1) segment extraction: learn-
ing to detect all (potentially overlapping) spans
that either form entities on their own or present as
parts of a discontiguous entity; 2) segment merg-
ing: learning to form entities by merging certain
spans into discontiguous entities.

Our contributions are summarized as follows:

• By decomposing the problem of extracting
discontiguous entities into two subtasks, we
propose a two-stage approach that does not
have the ambiguity issue.

• Under this decomposition, we design two
neural components for these two subtasks re-
spectively. We further show that the joint
learning setting where the two components
use a shared text encoder is beneficial.

• Empirical results show that our system
achieves a significant improvement com-
pared with previous methods, even in the ab-
sence of external features that previous meth-
ods used. 2

Though we only focus on discontiguous entity
recognition in this work, our model may find ap-
plications in other tasks that involve discontiguous
structures, such as detecting gappy multiword ex-
pressions (Schneider et al., 2014).

2 Related Work

The task of extracting overlapping entities has
long been studied (Zhang et al., 2004; Zhou et al.,
2004; Zhou, 2006; McDonald et al., 2005; Alex
et al., 2007; Finkel and Manning, 2009; Lu and
Roth, 2015; Muis and Lu, 2017). As neural mod-
els (Collobert et al., 2011; Lample et al., 2016;
Huang et al., 2015; Chiu and Nichols, 2016; Ma
and Hovy, 2016) are proven effective for NER,
there have been several neural systems recently
proposed to handle entities of overlapping struc-
tures (Ju et al., 2018; Katiyar and Cardie, 2018;
Wang et al., 2018; Sohrab and Miwa, 2018; Wang
and Lu, 2018; Straková et al., 2019; Lin et al.,
2019; Fisher and Vlachos, 2019). Our system is
based on the model of neural segmental hyper-
graphs (Wang and Lu, 2018) which encodes all the

2Our code is available at https://github.com/
berlino/disco_em19.

possible combinations of overlapping entities us-
ing a compact hypergraph representation without
ambiguity. Note that other system for extracting
overlapping structures can also fit into our two-
stage system.

For discontiguous and overlapping entity recog-
nition, Tang et al. (2013); Zhang et al. (2014); Xu
et al. (2015) extended the BIO tagging scheme
to encode such complex structures so that tradi-
tional linear-chain CRF (Lafferty et al., 2001) can
be employed. However, the model suffers greatly
from ambiguity during decoding due to the use of
the extended tagset. Muis and Lu (2016a) pro-
posed a hypergraph-based representation to reduce
the level of ambiguity. Essentially, these systems
trade expressiveness for efficiency: they inexactly
encoded the whole space of discontiguous enti-
ties with ambiguity for training, and then relied
on some heuristics to handle the ambiguity during
decoding. 3 Considering it is intrinsically hard to
exactly identify discontiguous entities in one stage
using a structured model, our work tries to decom-
pose the task into two sub-tasks to resolve the am-
biguity issue.

This task is also related to joint entity and re-
lation extraction (Kate and Mooney, 2010; Li and
Ji, 2014; Miwa and Sasaki, 2014) where the dis-
contiguous entities can be viewed as relation links
between segments. The major difference is that
discontiguous entities require explicitly model-
ing overlapping entities and linking multiple seg-
ments.

3 Model

Our goal is to extract a set of entities that may have
overlapping and discontiguous structures given
a natural language sentence. We use x =
x1 . . . x|x| to denote a sentence, and use y =
{[bi:j . . . bm:n]k} to denote a set of discontiguous
entities where each entity of type k contains a list
of spans, e.g., bi:j and bm:n, with subscripts in-
dicating the starting and ending positions of the
span. Hence, this task can be viewed as extracting
and labelling a sequence of spans as an entity.

Our two-stage approach first extracts spans of
interest like bi:j , which are parts of discontiguous
entities. Then it merges these extracted spans into
discontiguous entities. In the more general set-
ting where discontiguous entities are typed, our

3We will briefly introduce them and their heuristics later
as our baselines in our experiments for comparison.

https://github.com/berlino/disco_em19
https://github.com/berlino/disco_em19


6218

approach is designed to jointly extract and label
the spans at the first stage, then only merge the
spans of the same type at the second stage. We
call the intermediate typed span bki:j a segment in
the rest of the paper.

Formally, our model aims at maximizing the
conditional probability p(y|x), which is decom-
posed as:

p(y|x) = p(s|x)p(y|s,x) (1)

where s = {bki:j} denotes the set of segments that
leads to y through a specific combination. 4 That
is, we divide the problem of extracting discontigu-
ous entities into two subtasks, namely segment ex-
traction and segment merging.

3.1 Segment Extraction

The entity segments s of interest in a given sen-
tence could also overlap with each other. For ex-
ample, in Figure 3 the entity “blood in stomach”
contains another segment “stomach”. To make
our model capable of extracting such overlapping
segment combinations, we employ the model of
neural segmental hypergraphs from Wang and Lu
(2018), which uses a hypergraph-based represen-
tation to encode all the possible combinations of
segments without ambiguity. Specifically, the seg-
mental hypergraphs adopt a log-linear approach to
model the conditional probability of each segment
combination for a given sentence:

p(s|x) = exp f(x, s)∑
s′ exp f(x, s

′)
(2)

where f(x, s) is the score function for any pair of
input sentence x and output segment combination
s.

In segmental hypergraphs, each segment com-
bination s corresponds to a hyperpath. Following
Wang and Lu (2018), the score for a hyperpath is
the sum of the scores for each hyperedge, which
are based on the word-level and span-level repre-
sentations through LSTM (Graves and Schmidhu-
ber, 2005):

hwi = [biLSTM1(x0, ...,xn)]i (3)

hsi:j = biLSTM2(h
w
i , ...,h

w
j ) (4)

where xk is the corresponding word embedding
for word xk, hwi denotes the representation for the

4We note that each y corresponds to one unique s.

# sents
# entities (%)

# o.l. (%)
1 segment 2 segments 3 segments

Train 534 544 (46) 607 (51) 44 (4) 205 (17)
Dev 303 357 (45) 421 (53) 18 (2) 240 (30)
Test 430 584 (48) 610 (50) 16 (1) 327 (27)

Table 1: Statistics of the dataset. o.l.: overlapping enti-
ties, sents: sentences.

i-th word and hsi:j denotes the representation for
the span from the i-th to the j-th word.

On top of the segmental hypergraph represen-
tation, the partition function which is the denom-
inator of Equation 2 can be computed using dy-
namic programming. The inference algorithm
has a quadratic time complexity in the number of
words, which can be further reduced to linear time
complexity if we introduce the maximal length c
of a segment. We regard c as a hyperparameter.

3.2 Segment Merging

Given a set of segments, our next subtask is to
merge them into entities. First, we enumerate all
the valid segment combinations, denoted as E,
based on the assumption that the segments in the
same entity should have the same type and not
overlap with each other. Our model then indepen-
dently decides whether each valid segment combi-
nation forms an entity. We call these valid segment
combinations entity candidates. For brevity, let us
use tk to denote an entity candidate [bi:j . . . bm:n]k

where each segment like bki:j belongs to s.
Formally, given segments s , the probability of

generating entities y can be represented as:

p(y|s,x) =
∏
tk∈E

(
1[tk ∈ y]p(tk ∈ y)

+ 1[tk /∈ y](1− p(tk ∈ y))
)

(5)

where 1 is an indicator function. We use a binary
classifier to model p(tk ∈ y).

To capture the interactions between segments
within the same combination, we employ yet an-
other LSTM on top of segments as follows:

he
tk

= biLSTM3(h
s
i:j , ...,h

s
m:n) (6)

where he
tk

denotes the representation of the seg-
ment combination tk, which then serves as a fea-
ture vector for a binary classifier to determine
whether it is an entity. Note that we reuse the span



6219

representation from Equation 4, meaning that en-
coder for words and spans are shared in both seg-
ment extraction and merging.

The binary classifier for each tk in Equation 5
is computed as:

p(tk ∈ y) = sigmoid(W · relu(he
tk
) + b) (7)

where we use a rectified linear unit (ReLU) (Glo-
rot et al., 2011) and a linear layer, parameterized
by W and b, to map the representation from Equa-
tion 6 to a scalar score. This score is normalized
into a distribution by the sigmoid function.

In the joint model, we stack three separate
LSTMs to encode text at different levels from
words to spans, then discontiguous entities. Intu-
itively, the word and span level LSTM try to cap-
ture the lower-level information for segment ex-
traction while the entity level LSTM captures the
higher-level information for segment merging.

3.3 Learning and Decoding
For a dataset D consisting of sentence-entities
pairs (x,y), our objective is to minimize the neg-
ative log-likelihood as follows:

L(θ) = −
∑

(xi,yi)∈D

log p(yi|xi) +
λ

2
‖θ‖2 (8)

where θ denotes model parameters and λ is
the `2 coefficient. p(yi|xi) is computed by
p(si|xi)p(yi|si,xi) where si is inferred from yi.

During the decoding stage, the system first pre-
dicts the most probable segments from the neural
segmental hypergraph by ŝ = argmaxs′ p(s

′|x).
Then it feeds the prediction to the next stage of
merging segments and outputs the discontiguous
entities by ŷ = argmaxy′ p(y

′|ŝ,x).

4 Experiments

4.1 Setup
Data We evaluated our model on the task
of recognizing mentions in clinical text from
ShARe/CLEF eHealth Evaluation Lab (SHEL)
2013 (Suominen et al., 2013) and SemEval-2014
(Pradhan et al., 2014a). The task is defined to
extract mentions of disorders from clinical docu-
ments according to the Unified Medical Language
System (UMLS). The original dataset only has a
small percentage of discontiguous entities, mak-
ing it not suitable for comparing the effectiveness
of different models when handling discontiguous

entities. Following Muis and Lu (2016a), we use
a subset of the original data where each sentence
contains at least one discontiguous entity.

We split the dataset according to the setting of
SemEval 2014. Statistics are shown in Table 1.
In this subset, 53.6% of entities are discontiguous.
Overlapping entities also frequently appear. Since
an entity has three segments at most, we make
the constraint that an entity candidate has no more
than three segments during segment merging.

Note that all entities hold the same type of dis-
order in this dataset. Our model is intrinsically
able to handle discontiguous entities of multiple
types. Recall that segments are typed as bki:j dur-
ing segment extraction, and only segments of the
same type can be merged into an entity tk where
k indicates the entity type. To assess its ability
to deal with multiple entity types, we conducted a
further analysis (see section 4.2).

Hyperparameters We use the pretrained word
embeddings from Chiu et al. (2016) which are
trained on the PubMed corpus. A dropout layer
(Srivastava et al., 2014) is used after each word is
mapped to its embedding. The dropout rate and
the number of hidden units in LSTMs are tuned
based on the performance on the development set.
We set the maximal length of a segment to be 6
during segment extraction. Our model is trained
with Adam (Kingma and Ba, 2014). 5

Baselines The first baseline we consider is to ex-
tend the traditional BIO tagging scheme to seven
tags following Tang et al. (2013). With this tag-
ging scheme, each word in a sentence is assigned
a label. Then a linear-chain CRF is built to model
the sequence labelling process. The next base-
line is a hypergraph-based method by Muis and Lu
(2016a). It encodes each entity combination into
a directed graph based on six types of nodes; each
has its specific semantics.

Since these baselines are both ambiguous,
heuristics are required during decoding. Follow-
ing Muis and Lu (2016a), we explored two heuris-
tics: given a model’s ambiguous output, either
a tag sequence or a hypergraph, the “enough”
heuristic finds the minimal set of entities that cor-
responds to it, while “all” decodes the union of all
the possible set of entities. Please refer to Muis
and Lu (2016a) for details. We also describe them
in the Appendix for self-containedness.

5See Appendix C for the full hyperparameters.



6220

Model P R F1

Non-
Neural

CRF (enough) 54.7 41.2 47.0
CRF (all) 15.2 44.9 22.7
Graph (enough) 76.9 40.1 52.7
Graph (all) 76.0 40.5 52.8
Our model 76.3 41.4 53.7

Neural

CRF (enough) 43.7 54.3 48.4
CRF (all) 15.7 55.8 24.5
Our model 48.4 66.5 56.1
w.o. shared encoder 46.2 65.1 54.0

Table 2: Main results. Graph: the hypergraph based
model by Muis and Lu (2016a). “enough” and “all”
denotes the heuristics used in ambiguous model. w.o.
shared encoder: without using shared encoder.

We compare our approach to these baselines in
two settings. In the non-neural setting, we com-
pare models using the same set of handcrafted fea-
tures, including external features from POS tag-
ger and Brown cluster following (Muis and Lu,
2016a). In the neural setting, we implement a
linear-chain CRF model using the same neural en-
coder. We are trying to see our model can perform
better in both settings. Note that all neural mod-
els in our experiments do not leverage any hand-
crafted features.

4.2 Results and Analysis
The main results are listed in Table 2. In both
non-neural and neural settings, our model achieves
the better result in terms of F1 compared with
other baselines, revealing the effectiveness of our
methodology of decomposing the task into two
stages. Our neural model achieves the best per-
formance even without using any external hand-
crafted features.

We also assess the performance when our model
uses separate encoders for segment extraction and
merging. From the results, we observe that the set-
ting of using a shared encoder is very beneficial for
our two-stage system.

Compared with non-neural models, neural mod-
els are better in terms of F1, both for CRF and our
models. The gain mostly comes from the ability to
recall more entities. Handcrafted features in non-
neural models lead to high precisions but do not
seem to be general enough to recall most entities.

The “enough” heuristic works better than “all”
in most cases. Hence we use it for evaluating mod-
els’ ability in handling multiple entity types.

Handling Multiple Entity Types To assess
the effectiveness of handling entities of multi-

Model P R F1
Non-

Neural
CRF (enough) 55.3 37.4 44.6
Graph (enough) 67.3 37.5 48.2

Neural
CRF (enough) 41.6 52.3 46.3
Our model 43.3 65.8 52.2

Table 3: Results on handling multiple entity types.

ple types, we further categorize each entity into
three types based on its Concept Unique Identifier
(CUI), following Muis and Lu (2016a). 6 In this
setting, segments are jointly extracted and labelled
using these three categories during segment ex-
traction. During segment merging, an entity can-
didate can only contain segments of the same type
during merging.

The results are listed in Table 3. Our neural
model again achieves the best performance among
all models in terms of F1. Compared with neu-
ral CRF, our model is significantly better at recall-
ing entities. Similar to the previous observation,
the neural encoder consistently boosts the perfor-
mance of the CRF by recalling more entities, com-
pared with its non-neural counterpart.

5 Conclusion and Future Work

In this work, we propose a neural two-stage
approach for recognizing discontiguous entities,
which learns to extract and merge segments jointly
without suffering from ambiguity issue. Empiri-
cally, it achieves a significant improvement com-
pared with previous methods that rely heavily on
handcrafted features.

During training, the classifier of merging seg-
ments is only exposed to correct segments, making
it unable to recover from errors of segment exac-
tion during decoding. This issue is similar to expo-
sure bias (Wiseman and Rush, 2016) and it might
be beneficial if the classifier of segment merging
is exposed to incorrect segments during training.
We leave this for future work.

Acknowledgements

We would like to thank the anonymous reviewers
for their valuable comments. Wei Lu is supported
by Singapore Ministry of Education Academic
Research Fund (AcRF) Tier 2 Project MOE2017-
T2-1-156, and is partially supported by SUTD
project PIE-SGP-AI-2018-01.

6Note that the label of CUI is not available for all entities.
Entities without CUI are assigned with a default NULL label.



6221

References
Steven Abney, Michael Collins, and Amit Singhal.

2000. Answer extraction. In Proc. of the sixth con-
ference on applied natural language processing.

Beatrice Alex, Barry Haddow, and Claire Grover. 2007.
Recognising nested named entities in biomedical
text. In Proc. of BioNLP.

Kai-Wei Chang, Rajhans Samdani, and Dan Roth.
2013. A constrained latent variable model for coref-
erence resolution. In Proc. of EMNLP.

Billy Chiu, Gamal Crichton, Anna Korhonen, and
Sampo Pyysalo. 2016. How to train good word em-
beddings for biomedical nlp. In Proc. of the 15th
Workshop on Biomedical Natural Language Pro-
cessing.

Jason PC Chiu and Eric Nichols. 2016. Named en-
tity recognition with bidirectional lstm-cnns. TACL,
4:357–370.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. JMLR, 12(Aug):2493–2537.

George R Doddington, Alexis Mitchell, Mark A Przy-
bocki, Lance A Ramshaw, Stephanie Strassel, and
Ralph M Weischedel. 2004. The automatic content
extraction (ace) program-tasks, data, and evaluation.
In Proc. of LREC.

Jenny Rose Finkel and Christopher D Manning. 2009.
Nested named entity recognition. In Proc. of
EMNLP.

Joseph Fisher and Andreas Vlachos. 2019. Merge and
label: A novel neural network architecture for nested
NER. In Proc. of ACL, pages 5840–5850.

R. Florian, H. Hassan, A. Ittycheriah, H. Jing,
N. Kambhatla, X. Luo, N. Nicolov, and S. Roukos.
2004. A statistical model for multilingual entity de-
tection and tracking. In Proc. of HLT-NAACL.

Xavier Glorot, Antoine Bordes, and Yoshua Bengio.
2011. Deep sparse rectifier neural networks. In
Proc. of AISTATS.

Alex Graves and Jürgen Schmidhuber. 2005. Frame-
wise phoneme classification with bidirectional lstm
and other neural network architectures. Neural Net-
works, 18(5-6):602–610.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidirec-
tional lstm-crf models for sequence tagging. arXiv
preprint arXiv:1508.01991.

Meizhi Ju, Makoto Miwa, and Sophia Ananiadou.
2018. A neural layered model for nested named en-
tity recognition. In Proc. of NAACL-HLT.

Rohit J Kate and Raymond J Mooney. 2010. Joint en-
tity and relation extraction using card-pyramid pars-
ing. In Proc. of CoNLL.

Arzoo Katiyar and Claire Cardie. 2018. Nested named
entity recognition revisited. In Proc. of NAACL-
HLT.

J-D Kim, Tomoko Ohta, Yuka Tateisi, and Jun’ichi
Tsujii. 2003. Genia corpus—a semantically an-
notated corpus for bio-textmining. Bioinformatics,
19(suppl 1):i180–i182.

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. In Proc. of
ICLR.

John Lafferty, Andrew McCallum, and Fernando CN
Pereira. 2001. Conditional random fields: Prob-
abilistic models for segmenting and labeling se-
quence data. In Proc. of ICML.

Guillaume Lample, Miguel Ballesteros, Sandeep Sub-
ramanian, Kazuya Kawakami, and Chris Dyer. 2016.
Neural architectures for named entity recognition.
In Proc. of NAACL-HLT.

Qi Li and Heng Ji. 2014. Incremental joint extraction
of entity mentions and relations. In Proc. of ACL.

Qi Li, Heng Ji, and Liang Huang. 2013. Joint event
extraction via structured prediction with global fea-
tures. In Proc. of ACL.

Hongyu Lin, Yaojie Lu, Xianpei Han, and Le Sun.
2019. Sequence-to-nuggets: Nested entity mention
detection via anchor-region networks. In Proc. of
ACL, pages 5182–5192.

Liyuan Liu, Xiang Ren, Qi Zhu, Shi Zhi, Huan Gui,
Heng Ji, and Jiawei Han. 2017. Heterogeneous su-
pervision for relation extraction: A representation
learning approach. In Proc. of EMNLP.

Wei Lu and Dan Roth. 2012. Automatic event extrac-
tion with structured preference modeling. In Proc.
of ACL.

Wei Lu and Dan Roth. 2015. Joint mention extrac-
tion and classification with mention hypergraphs. In
Proc. of EMNLP.

Xuezhe Ma and Eduard Hovy. 2016. End-to-end se-
quence labeling via bi-directional lstm-cnns-crf. In
Proc. of ACL.

Ryan McDonald, Koby Crammer, and Fernando
Pereira. 2005. Flexible text segmentation with struc-
tured multilabel classification. In Proc. of HLT-
EMNLP.

Mike Mintz, Steven Bills, Rion Snow, and Dan Juraf-
sky. 2009. Distant supervision for relation extrac-
tion without labeled data. In Proc. of ACL-IJCNLP.

Makoto Miwa and Yutaka Sasaki. 2014. Modeling
joint entity and relation extraction with table repre-
sentation. In Proc. of EMNLP.



6222

Aldrian Obaja Muis and Wei Lu. 2016a. Learning
to recognize discontiguous entities. In Proc. of
EMNLP.

Aldrian Obaja Muis and Wei Lu. 2016b. Supplemen-
tary material for recognizing overlapping mentions
with mention separators.

Aldrian Obaja Muis and Wei Lu. 2017. Labeling gaps
between words: Recognizing overlapping mentions
with mention separators. In Proc. of EMNLP.

Vincent Ng and Claire Cardie. 2002. Improving ma-
chine learning approaches to coreference resolution.
In Proc. of ACL.

Sameer Pradhan, Noémie Elhadad, Wendy Chapman,
Suresh Manandhar, and Guergana Savova. 2014a.
Semeval-2014 task 7: Analysis of clinical text. In
Proc. of SemEval.

Sameer Pradhan, Noémie Elhadad, Brett R South,
David Martinez, Lee Christensen, Amy Vogel,
Hanna Suominen, Wendy W Chapman, and Guer-
gana Savova. 2014b. Evaluating the state of the
art in disorder recognition and normalization of the
clinical narrative. Journal of the American Medical
Informatics Association, 22(1):143–154.

S. Riedel and A. McCallum. 2011. Fast and robust
joint models for biomedical event extraction. In
Proc. of EMNLP.

Nathan Schneider, Emily Danchik, Chris Dyer, and
Noah A Smith. 2014. Discriminative lexical seman-
tic segmentation with gaps: running the mwe gamut.
TACL, 2:193–206.

Mohammad Golam Sohrab and Makoto Miwa. 2018.
Deep exhaustive model for nested named entity
recognition. In Proc. of EMNLP.

Wee Meng Soon, Hwee Tou Ng, and Daniel
Chung Yong Lim. 2001. A machine learning ap-
proach to coreference resolution of noun phrases.
Computational linguistics, 27(4):521–544.

Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. JMLR, 15(1):1929–1958.

Jana Straková, Milan Straka, and Jan Hajic. 2019.
Neural architectures for nested NER through lin-
earization. In Proc. of ACL, pages 5326–5331.

Hanna Suominen, Sanna Salanterä, Sumithra Velupil-
lai, Wendy W Chapman, Guergana Savova, Noemie
Elhadad, Sameer Pradhan, Brett R South, Danielle L
Mowery, Gareth JF Jones, et al. 2013. Overview of
the share/clef ehealth evaluation lab 2013. In Proc.
of International Conference of the Cross-Language
Evaluation Forum for European Languages.

Buzhou Tang, Hongxin Cao, Yonghui Wu, Min Jiang,
and Hua Xu. 2013. Recognizing clinical entities in
hospital discharge summaries using structural sup-
port vector machines with word representation fea-
tures. In Proc. of BMC medical informatics and de-
cision making.

Erik F Tjong Kim Sang and Fien De Meulder.
2003. Introduction to the conll-2003 shared task:
Language-independent named entity recognition. In
Proc. of CoNLL.

Bailin Wang and Wei Lu. 2018. Neural segmental hy-
pergraphs for overlapping mention recognition. In
Proc. of EMNLP.

Bailin Wang, Wei Lu, Yu Wang, and Hongxia Jin.
2018. A neural transition-based model for nested
mention recognition. In Proc. of EMNLP.

Sam Wiseman and Alexander M. Rush. 2016.
Sequence-to-sequence learning as beam-search op-
timization. In Proc. of EMNLP.

Jun Xu, Yaoyun Zhang, Jingqi Wang, Yonghui Wu,
Min Jiang, Ergin Soysal, and Hua Xu. 2015.
Uth-ccb: the participation of the semeval 2015
challenge–task 14. In Proc. of SemEval.

Jie Zhang, Dan Shen, Guodong Zhou, Jian Su, and
Chew-Lim Tan. 2004. Enhancing hmm-based
biomedical named entity recognition by studying
special phenomena. Journal of biomedical infor-
matics, 37(6):411–422.

Yaoyun Zhang, Jingqi Wang, Buzhou Tang, Yonghui
Wu, Min Jiang, Yukun Chen, and Hua Xu. 2014.
Uth ccb: a report for semeval 2014–task 7 analysis
of clinical text. In Proc. of SemEval.

Guodong Zhou. 2006. Recognizing names in biomed-
ical texts using mutual information independence
model and svm plus sigmoid. International Journal
of Medical Informatics, 75(6):456–467.

Guodong Zhou, Jie Zhang, Jian Su, Dan Shen, and
Chewlim Tan. 2004. Recognizing names in biomed-
ical texts: a machine learning approach. Bioinfor-
matics, 20(7):1178–1190.

A Segment Extraction

Neural segmental hypergraphs (Wang and Lu,
2018) were proposed for modeling overlapping
structures in entity mentions. We directly adopt
their approach to model the segments of overlap-
ping structures. Note that our segment also holds
the information of entity type, so the resulting sys-
tem for segment extraction can also be viewed as
performing sub-mention recognition. Next, we
illustrate how the segmental hypergraph encodes
the overlapping segments by a concrete example.



6223

For brevity, we only show the example that is an-
notated with one entity type, and it is able to be
trivially extended to the case of multiple entity
types.

Given a phrase “He had blood in his mouth and
on his tongue”, there exist two disorder mentions:
‘blood in his mouth’ and ‘blood ... on his tongue’
where the second mention has a discontiguous se-
quence of words. Our two-stage approach first ex-
tracts segments that lead to these two mentions.
In this example, the segments consist of ‘blood’,
‘blood in his mouth’ and ‘on his tongue’. We ob-
serve that the first two segments overlap with each
other.

Segmental hypergraph encodes this segment
combination based on five types of nodes:

• Ai encodes all segments that start with the i-
th or a later word

• Ei encodes all segments that start exactly
with the i-th word

• Tki represents all segments of type k starting
with the i-th word

• Iki,j represents all segments of type k that con-
tain the j-th word and start with the i-th word

• X marks the end of a segment.

Each segment can be expressed in terms of
these five nodes and corresponds with a path in
the segmental hypergraph. As a result, each seg-
ment combination corresponds with a hyperpath
where hyperedges are designated to connect mul-
tiple nodes so as to model overlapping segments.
Figure 2 shows such a hyperpath for the segment
combination in our example phrase. Since we only
have one entity type in this example, we eliminate
the superscript k in T and I nodes that indicates
the information of entity type.

Starting from the third word ‘blood’, there exist
two segments ‘blood’ and ‘blood in his mouth’.
The brown hyperedge with the parent node be-
ing I3,3 is responsible for connecting these two
overlapping segments. This hyperedge means that
there exists a segment that ends at the third word
(the link from I3,3 to X) and there also exists a
segment that continues to the next word (the link
from I3,3 to I3,4 ). The segment ‘on his tongue’ is
directly mapped to the path from T8 to X.

The score for each hyperpath is the sum of the
scores that are computed over each hyperedge.

Since T nodes encode word-level information
and I nodes encode span-level information, two
LSTMs are employed to capture the interactions
at both word level and span level respectively. We
use their original implementation that is publicly
available7.

B Heuristics for Handling Ambiguity

This section tries to explain the two heuris-
tics “enough” and “all” when ambiguous tag se-
quences occur. We use the extended BIO tagging
scheme (Tang et al., 2013; Muis and Lu, 2016a)
for example.

To encode the three discontiguous entities in
Figure 3, this tagset has seven tags:

• B/I: Beginning and Inside of contiguous en-
tities

• BH/IH: Beginning and Inside of head where
head refers to segments shared by multiple
discontiguous entities.

• BD/ID: Beginning and Inside of body where
body refers to segments that are not shared
across entities.

• O: Outside of entities.

The resulting tag sequence is shown in Figure 4.
Since this tagging scheme cannot model the cor-
respondence between different tags, tagging se-
quences are very likely to have multiple interpre-
tations. For instance, it is not clear that “lacer-
ation” should be combined with “esophagus” or
with “stomach”.

The “all” heuristics extracts all the possible en-
tities that could exist in the tagging sequence. In
this case, “all” heuristics will produce “laceration
... esophagus” , “stomach ... lac”, “blood in stom-
ach”, “laceration ... lac”, “esophagu ... lac”,
“laceration ...esophagus ... lac”, “laceration ...
stomach”, “esophagus ... stomach”, “laceration...
stomach ... lac”, “esophagus ... stomach...lac”.

The “enough” heuristics tries to find the mini-
mal set of entities that corresponds to this tagging
sequence. In this case, “enough” heuristics would
produce at least three entities like: “laceration ...
esophagus” , “stomach ... lac” and “blood in stom-
ach”; “laceration ... lac” , “blood in stomach” and

7https://github.com/berlino/
overlapping-ner-em18

https://github.com/berlino/overlapping-ner-em18
https://github.com/berlino/overlapping-ner-em18


6224

A1 A2 A3 A4 A5 A6 A7 A8 A9 A10

E1 E2 E3 E4 E5 E6 E7 E8 E9 E10

T1 T2

T3

T4 T5 T6 T7

T8

T9 T10

X X X X X X X X

X X X

I3,3 I3,4 I3,5 I3,6 I8,8 I8,9 I8,10

He had blood in his mouth and on his tongue

Disorder

Figure 2: A hyperpath that encodes three mention segments: ‘blood’, ‘blood in his mouth’ and ‘on his tongue’.

Figure 3: Entities are highlighted with colored under-
lines. “laceration ... esophagus” and “stomach ... lac”
contain discontiguous sequence of words and the latter
also overlaps with another entity “blood in stomach”.

Figure 4: Entities annotated using seven tags.

“esophagus ... stomach”. We make further con-
straints to generate only one combination follow-
ing Muis and Lu (2016b).

C Hyperparameters

The hyperparameters used in our neural two-stage
model are listed in Table 4. Since the size of our

dataset is relatively small, the dropout is crucial to
prevent overfitting considering that the pre-traind
word embeddings have the dimension of 200. The
length of most segments is not greater than 6, so
we set the maximal length c to be 6 to improve the
efficiency of segment extraction.

We also tried to incorporate a character-level
component (Lample et al., 2016) to capture mor-
phological and orthographic information. How-
ever, it does not have a significant effect on the
performance in term of F1.

word embedding dim 200
LSTM(word) hidden size 128
LSTM(span) hidden size 128
LSTM(entity) hidden size 64
maximal length c 6
dropout 0.8
l2 0.0001

Table 4: Hyperparameters of our joint model.


