



















































Phrase-Level Combination of SMT and TM Using Constrained Word Lattice


Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 275–280,
Berlin, Germany, August 7-12, 2016. c©2016 Association for Computational Linguistics

Phrase-Level Combination of SMT and TM
Using Constrained Word Lattice

Liangyou Li and Andy Way and Qun Liu
ADAPT Centre, School of Computing

Dublin City University
Dublin 9, Ireland

{liangyouli,away,qliu}@computing.dcu.ie

Abstract

Constrained translation has improved sta-
tistical machine translation (SMT) by
combining it with translation memory
(TM) at sentence-level. In this paper, we
propose using a constrained word lattice,
which encodes input phrases and TM con-
straints together, to combine SMT and TM
at phrase-level. Experiments on English–
Chinese and English–French show that
our approach is significantly better than
previous combination methods, including
sentence-level constrained translation and
a recent phrase-level combination.

1 Introduction

The combination of statistical machine translation
(SMT) and translation memory (TM) has proven
to be beneficial in improving translation quality
and has drawn attention from many researchers
(Biçici and Dymetman, 2008; He et al., 2010;
Koehn and Senellart, 2010; Ma et al., 2011; Wang
et al., 2013; Li et al., 2014). Among various
combination approaches, constrained translation
(Koehn and Senellart, 2010; Ma et al., 2011) is
a simple one and can be readily adopted.

Given an input sentence, constrained translation
retrieves similar TM instances and uses matched
segments to constrain the translation space of the
input by generating a constrained input. Then an
SMT engine is used to search for a complete trans-
lation of the constrained input.

Despite its effectiveness in improving SMT,
previous constrained translation works at the
sentence-level, which means that matched seg-
ments in a TM instance are either all adopted or
all abandoned regardless of their individual qual-
ity (Wang et al., 2013). In this paper, we propose
a phrase-level constrained translation approach

which uses a constrained word lattice to encode
the input and constraints from the TM together and
allows a decoder to directly optimize the selection
of constraints towards translation quality (Section
2).

We conduct experiments (Section 3) on
English–Chinese (EN–ZH) and English–French
(EN–FR) TM data. Results show that our method
is significantly better than previous combination
approaches, including sentence-level constrained
methods and a recent phrase-level combination
method. Specifically, it improves the BLEU (Pap-
ineni et al., 2002) score by up to +5.5% on EN–ZH
and +2.4% on EN–FR over a phrase-based base-
line (Koehn et al., 2003) and decreases the TER
(Snover et al., 2006) error by up to -4.3%/-2.2%,
respectively.

2 Constrained Word Lattice

A word lattice G = (V,E,Σ, φ, ψ) is a directed
acyclic graph, where V is a set of nodes, including
a start point and an end point, E ⊆ V × V is a
set of edges, Σ is a set of symbols, a label function
φ : E → Σ and a weight function ψ : E → R.1
A constrained word lattice is a special case of a
word lattice, which extends Σ with extra symbols
(i.e. constraints).

A constraint is a target phrase which will ap-
pear in the final translation. Constraints can be ob-
tained in two ways: addition (Ma et al., 2011) and
subtraction (Koehn and Senellart, 2010).2 Figure
1 exemplifies the differences between them.

The construction of a constrained lattice is very
similar to that of a word lattice, except that we
need to label some edges with constraints. The
general process is:

1In this paper, edge weights are set to 1.
2Addition means that constraints are added from a TM tar-

get to an input, while subtraction means that some constraints
are removed from the TM target.

275



Figure 1: An example of generating a constrained input in two ways: addition and subtraction. While
addition replaces an input phrase with a target phrase from a TM instance (an example is marked by
lighter gray), subtraction removes mismatched target words and inserts mismatched input words (darker
gray). Constraints are specified by <>. Sentences are taken from Koehn and Senellart (2010).

1. Building an initial lattice for an input sen-
tence. This produces a chain.

2. Adding phrasal constraints into the lattice
which produces extra nodes and edges.

Figure 2 shows an example of a constrained lattice
for the sentence in Figure 1.

In the rest of this section, we explain how to use
addition and subtraction to build a constrained lat-
tice and the decoder for translating the lattice. No-
tations we use in this section are: an input f and a
TM instance 〈f ′, e′, A〉where f ′ is the TM source,
e′ is the TM target and A is a word alignment be-
tween f ′ and e′.

2.1 Addition

In addition, matched input words are directly re-
placed by their translations from a retrieved TM,
which means that addition follows the word order
of an input sentence. This property makes it easy
to obtain constraints for an input phrase.

For an input phrase f , we firstly find its matched
phrase f ′ from f ′ via string edits3 between f and
f ′, so that f = f ′. Then, we extract its translation
e′ from e′, which is consistent with the alignment
A (Och and Ney, 2004).

To build a lattice using addition, we directly add
a new edge to the lattice which covers f and is
labeled by e′. For example, dash-dotted lines in
Figure 2 are labeled by constraints from addition.

3String edits, as used in the Levenshtein distance (Leven-
shtein, 1966), include match, substitution, deletion, and in-
sertion with a priority in this paper: match > substitution
> deletion > insertion.

2.2 Subtraction

In subtraction, mismatched input words in f are
inserted into e′ and mismatched words in e′ are
removed. The inserted position is determined by
A. The advantage of subtraction is that it keeps
the word order of e′. This is important since the
reordering of target words is one of the fundamen-
tal problems in SMT, especially for language pairs
which have a high degree of syntactic reordering.

However, this property makes it hard to build
a lattice from subtraction, as – different from the
addition – subtraction does not directly produce
a constraint for an input phrase. Thus, for some
generated constraints, there is not a specific cor-
responding phrase in the input. In addition, when
adding a constraint to the lattice, we need to con-
sider its context so that the lattice keeps target
word order.

To solve this problem, in this paper we propose
to segment an input sentence into a sequence of
phrases according to information from a matched
TM (i.e. the string edit and word alignment) and
then create a constrained input for each phrase and
add them to the lattice.

Formally, we produce a monotonic segmen-
tation,

〈
f1, f

′
1, e
′
1

〉 · · · 〈fN , f ′N , e′N〉, for each
sentence triple: 〈f, f ′, e′〉. Each 〈f i, f ′i, e′i〉 tu-
ple is obtained in two phases: (1) According to
the alignment A, f ′i and e′i are produced. (2)
Based on string edits between f and f ′, f i is rec-
ognized. The resulting tuple is subject to several
restrictions:

1. Each < f ′i, e′i > is consistent with the word
alignment A and at least one word in f ′i is
aligned to words in e′i.

276



Figure 2: An example of constructing a constrained word lattice for the sentence in Figure 1. Dash-dotted
lines are generated by addition and dotted lines are generated by subtraction. Constraints are specified
by <>.

2. Each boundary word in f ′i is either the first
word or the last word of f ′ or aligned to at
least one word in e′, so that mismatched in-
put words in f i which are unaligned can find
their position in the current tuple.

3. The string edit for the first word of f i, where
i 6= 1, is not “deletion”. That means the first
word is not an extra input word. This is be-
cause, in subtraction, the inserted position of
a mismatched unaligned word depends on the
alignment of the word before it.

4. No smaller tuples may be extracted without
violating restrictions 1–3. This allows us to
obtain a unique segmentation where each tu-
ple is minimal.

After obtaining the segmentation, we create a
constrained input for each f i using subtraction
and add it to the lattice by creating a path cover-
ing f i. The path contains one or more edges, each
of which is labeled either by an input word or a
constraint in the constrained input.

2.3 Decoding

The decoder for integrating word lattices into the
phrase-based model (Koehn et al., 2003) works
similarly to the phrase-based decoder, except that
it tracks nodes instead of words (Dyer et al., 2008):
given the topological order of nodes in a lattice,
the decoder builds a translation hypothesis from
left to right by selecting a range of untranslated
nodes.

The decoder for a constrained lattice works sim-
ilarly except that, for a constrained edge, the de-
coder can only build its translation directly from
the constraint. For example, in Figure 2, the trans-
lation of the edge “1 → 5” is “, le texte du
deuxième alinéa”.

EN–ZH Sentences W/S (EN) W/S (ZH)

Train 84,871 13.5 13.8
Dev 734 14.3 14.5
Test 943 17.4 17.4

EN–FR Sentences W/S (EN) W/S (FR)

Train 751,548 26.9 29.3
Dev 2,665 26.8 29.2
Test 2,655 27.1 29.4

Table 1: Summary of English–Chinese (EN–ZH)
and English–French (EN–FR) datasets

3 Experiment

In our experiments, a baseline system PB is built
with the phrase-based model in Moses (Koehn et
al., 2007). We compare our approach with three
other combination methods. ADD combines PB
with addition (Ma et al., 2011), while SUB com-
bines PB with subtraction (Koehn and Senellart,
2010). WANG combines SMT and TM at phrase-
level during decoding (Wang et al., 2013; Li et
al., 2014). For each phrase pair applied to trans-
late an input phrase, WANG finds its correspond-
ing phrase pairs in a TM instance and then ex-
tracts features which are directly added to the log-
linear framework (Och and Ney, 2002) as sparse
features. We build three systems based on our ap-
proach: CWLadd only uses constraints from addi-
tion; CWLsub only uses constraints from subtrac-
tion; CWLboth uses constraints from both.

Table 1 shows a summary of our datasets. The
EN–ZH dataset is a translation memory from
Symantec. Our EN–FR dataset is from the pub-
licly available JRC-Acquis corpus.4 Word align-
ment is performed by GIZA++ (Och and Ney,
2003) with heuristic function grow-diag-final-and.

4http://ipsc.jrc.ec.europa.eu/index.
php?id=198

277



Systems EN–ZH EN–FRBLEU↑ TER↓ BLEU↑ TER↓
PB 44.3 40.0 65.7 25.9

Sentence-Level Combination

ADD 45.6* 39.2* 64.2 27.2
SUB 49.4* 36.3* 64.2 27.3

Phrase-Level Combination

WANG 44.7* 39.3* 66.1* 25.7*
CWLadd 49.8* 35.7* 68.1* 23.7*
CWLSub 51.4* 33.7* 68.6* 23.4*
CWLboth 51.2* 33.8* 68.3* 23.6*

Table 2: Experimental results of comparing our
approach (CWLx) with previous work. All scores
reported are an average of 3 runs. Scores with ∗

are significantly better than that of the baseline PB
at p < 0.01. Bold scores are significantly better
than that of all previous work at p < 0.01.

We use SRILM (Stolcke, 2002) to train a 5-gram
language model on the target side of our train-
ing data with modified Kneser-Ney discounting
(Chen and Goodman, 1996). Batch MIRA (Cherry
and Foster, 2012) is used to tune weights. Case-
insensitive BLEU [%] and TER [%] are used to
evaluate translation results.

3.1 Results

Table 2 shows experimental results on EN–ZH and
EN–FR. We find that our method (CWLx) signif-
icantly improves the baseline system PB on EN–
ZH by up to +5.5% BLEU score and by +2.4%
BLEU score on EN–FR. In terms of TER, our sys-
tem significantly decreases the error by up to -
4.3%/-2.2% on EN–ZH and EN–FR, respectively.

Although, compared to the baseline PB, ADD
and SUB work well on EN–ZH, they reduce the
translation quality on EN–FR. By contrast, their
phrase-level countparts (CWLadd and CWLsub)
bring consistent improvements over the baseline
on both language pairs. This suggests that a com-
bination approach based on constrained word lat-
tices is more effective and robust than sentence-
level constrained translation. Compared to system
WANG, our method produces significantly better
translations as well. In addition, our approach is
simpler and easier to adopt than WANG.

Compared with CWLadd, CWLsub produces
better translations. This may suggest that, for a
constrained word lattice, subtraction generates a
better sequence of constraints than addition since
it keeps target words and the word order. However,

Ranges Sentence W/S (EN)

[0.8, 1.0) 198 16.4
[0.6, 0.8) 195 14.7
[0.4, 0.6) 318 16.8
(0.0, 0.4) 223 21.5

(a) English–Chinese

Ranges Sentences W/S (EN)

[0.9, 1.0) 313 32.5
[0.8, 0.9) 258 28.3
[0.7, 0.8) 216 28.4
[0.6, 0.7) 156 33.3
[0.5, 0.6) 171 34.1
[0.4, 0.5) 168 34.3
[0.3, 0.4) 277 40.3
(0.0, 0.3) 360 54.7

(b) English–French

Table 3: Composition of test subsets based
on fuzzy match scores on English–Chinese and
English–French data.

combining them together (i.e. CWLboth) does not
bring a further improvement. We assume the rea-
son for this is that addition and subtraction share
parts of the constraints generated from the same
TM. For example, in Figure 2, the edge “1 → 5”
based on addition and the edge “11 → 7” based
on subtraction are labeled by the same constraint.

3.2 Influence of Fuzzy Match Scores
Since a fuzzy match scorer5 is used to select the
best TM instance for an input and thus is an impor-
tant factor for combining SMT and TM, it is inter-
esting to know what impact it has on the transla-
tion quality of various approaches. Table 3 shows
statistics of each test subset on EN–ZH and EN–
FR where sentences are grouped by their fuzzy
match scores.

Figure 3 shows BLEU scores of systems eval-
uated on these subsets. We find that BLEU
scores increasingly grow when match scores be-
come higher. While ADD achieves better BLEU
scores than SUB on lower fuzzy ranges, SUB per-
forms better than ADD on higher fuzzy scores. In
addition, our approaches (CWLx) are better than
the baseline on all ranges but show much more im-
provement on ranges with higher fuzzy scores.

5In this paper, we use a lexical fuzzy match score (Koehn
and Senellart, 2010) based on Levenshtein distance to find
the best match.

278



(0,0.4) [0.4,0.6)

30

35

40

45 PB
ADD
SUB
CWLadd
CWLsub
CWLboth

[0.6,0.8) [0.8,1)

55

60

65

70

75

(0,0.3) [0.3,0.4)

35

40

45

50

[0.4,0.5) [0.5,0.6)

55

60

65

[0.6,0.7) [0.7,0.8)

70

75

80

[0.8,0.9) [0.9,1)
80

82

84

86

88

90

B
L

E
U

[%
]

E
N

–Z
H

E
N

–F
R

E
N

–F
R

Ranges of Fuzzy Match Scores

Figure 3: BLEU scores of systems evaluated on
sentences which fall into different ranges accord-
ing to fuzzy match scores on EN–ZH and EN–FR.
All scores are averaged over 3 runs.

4 Conclusion

In this paper, we propose a constrained word lat-
tice to combine SMT and TM at phrase-level.
This method uses a word lattice to encode all
possible phrasal constraints together. These con-
straints come from two sentence-level constrained
approaches, including addition and subtraction.
Experiments on English–Chinese and English–
French show that compared with previous com-
bination methods, our approach produces signifi-
cantly better translation results.

In the future, we would like to consider gener-
ating constraints from more than one fuzzy match
and using fuzzy match scores or a more sophisti-
cated function to weight constraints. It would also
be interesting to know if our method will work bet-
ter when discarding fuzzy matches with very low
scores.

Acknowledgments

This research has received funding from the Peo-
ple Programme (Marie Curie Actions) of the Euro-
pean Union’s Framework Programme (FP7/2007-
2013) under REA grant agreement no 317471. The
ADAPT Centre for Digital Content Technology
is funded under the SFI Research Centres Pro-
gramme (Grant 13/RC/2106) and is co-funded un-
der the European Regional Development Fund.
The authors thank all anonymous reviewers for
their insightful comments and suggestions.

References

Ergun Biçici and Marc Dymetman. 2008. Dy-
namic Translation Memory: Using Statistical Ma-
chine Translation to Improve Translation Memory
Fuzzy Matches. In Proceedings of the 9th Interna-
tional Conference on Computational Linguistics and
Intelligent Text Processing, pages 454–465, Haifa,
Israel, February.

Stanley F. Chen and Joshua Goodman. 1996. An
Empirical Study of Smoothing Techniques for Lan-
guage Modeling. In Proceedings of the 34th Annual
Meeting on Association for Computational Linguis-
tics, pages 310–318, Santa Cruz, California, June.

Colin Cherry and George Foster. 2012. Batch Tun-
ing Strategies for Statistical Machine Translation. In
Proceedings of the 2012 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 427–436, Montreal, Canada, June.

279



Christopher Dyer, Smaranda Muresan, and Philip
Resnik. 2008. Generalizing Word Lattice Trans-
lation. In Proceedings of the 46th Annual Meeting
of the Association for Computational Linguistics:
Human Language Technologies, Columbus, Ohio,
June.

Yifan He, Yanjun Ma, Josef van Genabith, and Andy
Way. 2010. Bridging SMT and TM with Translation
Recommendation. In Proceedings of the 48th An-
nual Meeting of the Association for Computational
Linguistics, pages 622–630, Uppsala, Sweden, July.

Philipp Koehn and Jean Senellart. 2010. Conver-
gence of Translation Memory and Statistical Ma-
chine Translation. In Proceedings of AMTA Work-
shop on MT Research and the Translation Industry,
pages 21–31, Denver, Colorado, USA, November.

Philipp Koehn, Franz Josef Och, and Daniel Marcu.
2003. Statistical Phrase-based Translation. In Pro-
ceedings of the 2003 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics on Human Language Technology - Vol-
ume 1, pages 48–54, Edmonton, Canada.

Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ondřej Bojar, Alexan-
dra Constantin, and Evan Herbst. 2007. Moses:
Open Source Toolkit for Statistical Machine Trans-
lation. In Proceedings of the 45th Annual Meeting
of the ACL on Interactive Poster and Demonstration
Sessions, pages 177–180, Prague, Czech Republic,
June.

Vladimir Iosifovich Levenshtein. 1966. Binary Codes
Capable of Correcting Deletions, Insertions and Re-
versals. Soviet Physics Doklady, 10:707.

Liangyou Li, Andy Way, and Qun Liu. 2014. A
Discriminative Framework of Integrating Transla-
tion Memory Features into SMT. In Proceedings of
the 11th Conference of the Association for Machine
Translation in the Americas, Vol. 1: MT Researchers
Track, pages 249–260, Vancouver, BC, Canada, Oc-
tober.

Yanjun Ma, Yifan He, Andy Way, and Josef van Gen-
abith. 2011. Consistent Translation using Discrim-
inative Learning - A Translation Memory-Inspired
Approach. In Proceedings of the 49th Annual Meet-
ing of the Association for Computational Linguis-
tics: Human Language Technologies, pages 1239–
1248, Portland, Oregon, USA, June.

Franz Josef Och and Hermann Ney. 2002. Discrimi-
native Training and Maximum Entropy Models for
Statistical Machine Translation. In Proceedings of
the 40th Annual Meeting on Association for Com-
putational Linguistics, pages 295–302, Philadelphia,
Pennsylvania, July.

Franz Josef Och and Hermann Ney. 2003. A System-
atic Comparison of Various Statistical Alignment
Models. Computational Linguistics, 29(1):19–51,
March.

Franz Josef Och and Hermann Ney. 2004. The
Alignment Template Approach to Statistical Ma-
chine Translation. Compututational Linguistics,
30(4):417–449, December.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. BLEU: A Method for Automatic
Evaluation of Machine Translation. In Proceedings
of the 40th Annual Meeting on Association for Com-
putational Linguistics, pages 311–318, Philadelphia,
Pennsylvania, July.

M. Snover, B. Dorr, R. Schwartz, L. Micciulla, and
J. Makhoul. 2006. A Study of Translation Edit Rate
with Targeted Human Annotation. In Proceedings
of Association for Machine Translation in the Amer-
icas, pages 223–231, Cambridge, Massachusetts,
USA, August.

Andreas Stolcke. 2002. SRILM-an Extensible Lan-
guage Modeling Toolkit. In Proceedings of the 7th
International Conference on Spoken Language Pro-
cessing, pages 257–286, Denver, Colorado, USA,
November.

Kun Wang, Chengqing Zong, and Keh-Yih Su. 2013.
Integrating Translation Memory into Phrase-Based
Machine Translation during Decoding. In Proceed-
ings of the 51st Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Pa-
pers), pages 11–21, Sofia, Bulgaria, August.

280


