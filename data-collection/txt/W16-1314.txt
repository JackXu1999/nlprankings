



















































Regularizing Relation Representations by First-order Implications


Proceedings of AKBC 2016, pages 75–80,
San Diego, California, June 12-17, 2016. c©2016 Association for Computational Linguistics

Regularizing Relation Representations by First-order Implications

Thomas Demeester
Ghent University - iMinds

Ghent, Belgium
tdmeeste@intec.ugent.be

Tim Rocktäschel and Sebastian Riedel
University College London

London, UK
{t.rocktaschel,s.riedel}@cs.ucl.ac.uk

Abstract

Methods for automated knowledge base con-
struction often rely on trained fixed-length
vector representations of relations and enti-
ties to predict facts. Recent work showed that
such representations can be regularized to in-
ject first-order logic formulae. This enables to
incorporate domain-knowledge for improved
prediction of facts, especially for uncommon
relations. However, current approaches rely
on propositionalization of formulae and thus
do not scale to large sets of formulae or knowl-
edge bases with many facts. Here we propose
a method that imposes first-order constraints
directly on relation representations, avoiding
costly grounding of formulae. We show that
our approach works well for implications be-
tween pairs of relations on artificial datasets.

1 Introduction

Many methods for automated knowledge base (KB)
construction rely on learned relation and entity vec-
tor representations (Nickel et al., 2015). Such rep-
resentations are hard to learn for relations with only
few supporting facts in KBs. Moreover, inference
on KBs such as Freebase (Bollacker et al., 2008)
could still benefit from common-sense knowledge
contained in ontologies like WordNet (Miller, 1995)
or PPDB (Ganitkevitch et al., 2013). It is thus de-
sirable to be able to use various kinds of domain or
ontological knowledge, for instance in the form of
first-order logic formulae, to help knowledge base
inference. Furthermore, such formulae make use of
learned representations as well as help to learn better
representations.

One way to incorporate logical formulae is to
regularize relation and entity-pair representations
(Rocktäschel et al., 2015). However, in their method
first-order formulae need to be grounded for all en-
tity pairs in the KB. As a result of this proposition-
alization, the method does not scale to large KBs
or many formulae. Another recent method is based
on imposing rules as constraints in an integer linear
program (Wang et al., 2015). This approach suffers
from a similar scalability problem, since every rule
is imposed for all occurrences of facts in the training
data.

To alleviate this computational bottleneck, we
propose a method to incorporate first-order impli-
cations directly (and only) into relation representa-
tions. The idea is to map relation and entity-pair rep-
resentations into a well-chosen subspace in which
formulae can be expressed as direct regularizers of
relation representations without imposing them on
entity representations too. As such, the proposed
method is suited for problems with large numbers
of rules and facts.

Our approach is based on the concept of order-
embeddings, introduced by Vendrov et al. (2016).
Order-embeddings capture partial orderings, such as
textual entailment, directly in vector representations.
This idea can be extended towards relation represen-
tations in KBs. In particular, we show how to con-
struct order-embeddings for capturing implications
between relations, such that these implications hold
for any possible entity-pair.

The model presented here is also related to
Kruszewski et al. (2015). They demonstrate that
textual entailment can be captured by mapping real-

75



valued vectors into (approximate) Boolean valued
vectors. This is achieved by requiring that Boolean
vector representations of more specific words or sen-
tences are included in the representation of more
general ones. Furthermore, these representations
may be useful for modeling other types of logical re-
lationships, such as negation or conjunction. It is our
goal to extend the approach towards arbitrary first-
order formulae between relations. Therefore, as a
first step we investigate whether restricting the rela-
tion embedding space to approximate Boolean vec-
tors still allows us to reconstruct training facts and
imposed implications.

The rest of the paper is organized as follows. We
first revisit matrix factorization for KB construc-
tion (§2), before introducing a factorization model
that regularizes approximately Boolean relation rep-
resentations to incorporate first-order implications
(§3). Finally, we show empirical results on syn-
thetic knowledge bases. We explore how enforcing
restrictions on representations influences the ability
to model the observed data, analyze the learned rela-
tion representations qualitatively, and investigate the
impact of injecting implications (§4).

2 Model

Before introducing first-order regularization of rela-
tion representations, we revisit one possible model
that uses relation (and entity-pair) representations
to estimate the probability of a fact: the universal
schema matrix factorization proposed by Riedel et
al. (2013). Let R be a set of relations r and P a set
of entity pairs (ei, ej) (which we will shortly write
as e from now on). We can represent facts, i.e., pos-
sible combinations of entity pairs and relations, as a
binary matrix of size |P|× |R|. The probability that
a particular relation and entity pair combination is a
valid fact can be modeled by the sigmoid of the dot
product of the relation’s vector representation v(r)
and the entity-pair’s vector representation v(e):

p
(
z = 1|v(r),v(e)) = σ(v(r)Tv(e)), (1)

with the binary target variable z indicating validity
of the considered fact and v(r),v(e) ∈ Rk. The rep-
resentations v(r) and v(e) can be found by minimiz-
ing the negative log-likelihood of true given train-
ing facts (together with a set of negative facts) using

stochastic gradient descent. The contribution to this
loss from relation r and entity pair e takes the fol-
lowing form

LF (r, e) = −z log(p)− (1− z) log(1− p) (2)
with p short-hand for the probability in eq. (1).

In this paper we propose various forms of v(r)
and v(e). However, when the representations are
chosen to be unrestricted real-valued vectors, i.e.,
v(r) = ρ ∈ Rk and v(e) = e ∈ Rk for some
fixed embedding length k, we get the latent feature
Model F by Riedel et al. (2013).

Note that often no explicit negative instances are
available for training, in which case unobserved
facts can be randomly sampled and assumed to be
negative.

2.1 Non-Negative Embedding Space
With the model described above we do not have any
control over the learned representations. However,
the embeddings can gain useful properties once we
restrict them in an appropriate way. We propose the
following restrictions, motivated below: we require
all components of v(e) to be non-negative, and we
confine relation representations v(r) to lie within
the unit hypercube (0, 1)k.

We want to be able to model implications between
relations by defining an order relation on their vector
representations. An in-depth description of order-
embeddings is given in Vendrov et al. (2016), but
the main idea applied to relation representations is
as follows. Consider a pair of relations rp and rq
such that rp implies rq for any entity pair for which
rp holds (which we shortly write as ‘rp ⇒ rq’).
For their vector representations we require that the
component-wise inequality vi(rp) ≤ vi(rq) holds
(i = 1, . . . , k). Note that enforcing this locally for
every relation pair will also lead to globally consis-
tent relation representations (e.g. imposing rs ⇒ rt
and rt ⇒ ru will satisfy rs ⇒ ru by construction).
Relations that hold true more often will have larger
entries, whereas relation vectors with the overall
lowest values will represent the most specific rela-
tions (such as leaf nodes in an ontology).

If rp ⇒ rq holds, it needs to hold for any entity
pair e. Thus, we require that ∀e ∈ P :
p
(
z = 1|v(rp),v(e)

) ≤ p(z = 1|v(rq),v(e)).
76



If vi(rp) ≤ vi(rq) (i = 1, . . . , k), and we restrict
all components of v(e) to be non-negative, then by
construction v(rp)Tv(e) ≤ v(rq)Tv(e), and with
eq. (1), the above requirement is satisfied.

Besides the ability to capture pairwise implica-
tions, we also want to incorporate more complex
first-order formulae and need to be able to express
these as a function of the relation and entity-pair
representations. Approximate Boolean vectors dis-
cussed in Kruszewski et al. (2015) provide an attrac-
tive direction, but studying how they can be adapted
to suit the relation extraction use case is out of
scope of the current work. To pave the way for fu-
ture work on incorporating arbitrary first-order con-
straints, we will however investigate whether con-
straining relation representations to the unit hyper-
cube v(r) ∈ (0, 1)k still allows us to reliably encode
observed facts and impose implications.

2.2 Training Restricted Representations
There are different ways to impose the discussed re-
strictions on vector representations. In this work,
we choose v(r) = σ(ρ), and v(e) = ReLU(e) or
exp(e), where ReLU(e) = log(1 + exp e) is the
component-wise smooth approximation of the recti-
fied linear unit, and with again ρ ∈ Rk and e ∈ Rk.
The imposed restrictions constrain the set of usable
loss functions for training. Indeed, the lowest value
of σ

(
v(r)Tv(e)

)
is 0.5, which makes training with

the loss function in eq. (2) no longer practical. The
problem can be avoided if the dot product v(r)Tv(e)
is first mapped from the positive real axis to entire R.
Among various options, we choose the logarithm be-
cause

σ
(

log
(
v(r)Tv(e)

))
=

v(r)Tv(e)
1 + v(r)Tv(e)

, (3)

such that the loss from eq. (2) simplifies to

LF (r, e) =− z log
(
v(r)Tv(e)

)
+ log

(
1 + v(r)Tv(e)

)
. (4)

The expression on the right-hand side of eq. (3)
represents an alternative form of the probability in
eq. (1) for training and predicting the validity of
facts using non-negative embeddings. Note that
since log and exp are inverse functions, choosing
v(e) = exp(e) leads to values of log

(
v(r)Tv(e)

)
with the same order of magnitude as e, unlike the

choice v(e) = ReLU(e). This may be the rea-
son why the former seems to work better in practice
(see § 3). Yet another option would be to construct
an approximate Boolean factorization for both, en-
tity pairs and relations, whereby v(r) = σ(ρ) and
v(e) = σ(e). Finding a suitable loss function is less
straightforward, but we tested the quadratic loss on
v(r)Tv(e). As shown in the following section, this
additional restriction reduces the ability of the model
to reconstruct facts.

2.3 Implication Regularization

We will refer to the loss term LF introduced above
as the fact loss, as it measures how well training
facts are recovered with low-dimensional represen-
tations. To impose logical constraints, we add an
additional loss term per rule which we will call the
implication loss LI . As already described, the re-
quired order relation between two relations can be
expressed by their representations as

∧k
i=1 vi(rp) ≤

vi(rq). We thus propose the following loss term for
every implication rp ⇒ rq,

Lrp⇒rqI =
k∑

i=1

log
(
1 + ReLU(ρp,i − ρq,i)

)
. (5)

As before, other choices are possible. It is how-
ever essential to ensure that only positive values of
ρp,i−ρq,i are penalized, which is obtained by apply-
ing the ReLU function (see § 2.2). The difficulty in
choosing an appropriate loss function is that its be-
havior needs to be compatible with the fact loss. For
instance, the simple loss ReLU(ρp,i − ρq,i) seems
not to work in practice as balancing both losses dur-
ing optimization becomes difficult. The particular
form of LI in eq. (5) was obtained in a similar way
to eq. (4), and originates from simplifying

−
k∑

i=1

log
(
1− σ( log ReLU(ρp,i − ρq,i))).

We empirically found that this loss works well in
practice and behaves in an intuitive way. For exam-
ple, injecting the formulae rp ⇒ rq and rq ⇒ rp
leads to roughly identical representations for both
relations.

77



0 10 20 30 40

embedding length k

0.0

0.2

0.4

0.6

0.8

1.0
F

1

(σ(ρ), e)

(ρ, e)

(ρ, exp(e))

(σ(ρ), exp(e))

(σ(ρ), ReLU(e))

(σ(ρ), σ(e))

Figure 1: Ability of various methods
(
v(r),v(e)

)
to recon-

struct binary matrices, on a sampled KB with 50 entities (249

observed entity pairs) and 20 relations.

r1r2r3r4r5r6r7r8

(a)

en
ti

ty
p
a
ir

s

r1r2r3r4r5r6r7r8

(b)

r1r2r3r4r5r6r7r8

(c)
0

1

Figure 2: Toy example with 8 relations, 17 observed en-
tity pairs, and 5 implication rules (r4 ⇒ r1), (r7 ⇒ r3),
(r4 ⇒ r2), (r6 ⇒ r4), and (r5 ⇒ r4). (a) Original knowl-
edge base (dark blue: known facts; white: unknown facts; light

blue: inferred facts from rules); (b) reconstructed with embed-

ding size 15 with L = LF , and (c) with L = LF + LI .

3 Experiments
To gain insights into the proposed models, we inves-
tigate their behavior on small-scale artificial KB in-
ference datasets that we can adapt to different possi-
ble scenarios. Concretely, we sample facts for a pre-
defined number of entities and relations. Then, we
generate implications for sampled pairs of relations
and add a fraction of implied facts to the training
data and the rest to a test set. This gives us control
over how much an implication is visible for training
representations of facts in the KB.

Fact Reconstruction in Non-Negative Space We
first investigate whether restricting embedding
spaces still allows to reconstruct observed facts. To
this end, we consider a dataset with 20 relations and

r1 r2 r3 r4 r5 r6 r7 r8

(a)

L = LF

r1 r2 r3 r4 r5 r6 r7 r8

(b)

L = LF + LI

−15
−10
−5
0

5

10

15

Figure 3: The columns are the 15-dimensional representations
ρ1 to ρ8 for the relations r1 to r8 in the toy example of Fig. 2.

(a) Only fact lossLF applied; (b) including implication lossLI .

0 10 20 30 40

embedding length k

0.0

0.2

0.4

0.6

0.8

1.0

F
1

L = LF
L = LF + LI

Figure 4: Ability of correctly predicting unseen facts implied
by observed facts on a dataset with 20 relations, 249 observed

entity pairs, and 10 pairwise implications with 50% evidence

for the observed facts, with the model
(
σ(ρ), exp(e)

)
.

50 entities, leading to observations for 249 entity
pairs. We calculate the F1 score for reconstruct-
ing all training facts, assuming that all unobserved
facts are negative. Fig. 1 shows the result for dif-
ferent combinations of restricting the relation and
entity pair embedding spaces. Every model maps
a relation r and entity-pair e into vector space, de-
noted by

(
v(r),v(e)

)
where ρ and e represent the

learned real-valued (i.e., non-restricted) representa-
tions before mapping into a non-negative subspace.
The results are shown as a function of the embed-
ding size k. We found that from the two models that
satisfy both the relation and the entity pair restric-
tion, the one with v(e) = exp(e) seems to work
best and will be used in the remainder of the exper-
iments. As expected, imposing restrictions leads to
a reduced ability to fit the data exactly and hence re-
quires higher-dimensional vector representations of
relations and entity-pairs.

78



Implication Regularization To visualize what
happens when regularizing relation representations
based on given implications, we sample a small KB
with 8 relations, 17 entity pair observations and
the following five implications: r4 ⇒ r1, r7 ⇒
r3, r4 ⇒ r2, r6 ⇒ r4 and r5 ⇒ r4. We add 20%
of the facts that can be inferred from these rules as
training data and use the rest as test data.

Fig. 2(a) shows observed facts (dark blue), as well
as test facts (light blue). With an embedding size of
15, LF is able to perfectly reconstruct the training
data, as shown in Fig. 2(b), but therefore overfits. In
contrast, when imposing implications we can recon-
struct training facts and predict test facts that could
be inferred by these implications (Fig. 2(c)). Note
that in Fig. 2(b) the predictions are made with high
confidence, whereas in Fig. 2(c) the reconstruction
is not perfect, with the predictions distributed be-
tween 0 and 1. This is due to the fact that during
training the loss related to some of the facts is in-
fluenced both by the implication loss and by a con-
flicting contribution from the fact loss (due to the
random sampling of negative examples among the
unobserved ones). Although this effect is an arti-
fact of the small scale of the example (where non-
observed facts are sampled more often than in a large
and sparse situations), it underlines the importance
of properly weighting both loss terms, for which fur-
ther research on large-scale data is needed.

The learned relation embeddings are visualized in
Fig. 3. We can see that regularizing relation embed-
dings by implications leads to representations that
satisfy the order imposed by the implications (see
Fig. 3(b)).

For the final experiment, we again consider the
dataset used for Fig. 1, but this time we inject 10
pairwise implications and add half of the additional
facts that can be inferred from them to the train-
ing set. The others are added to the test set, to-
gether with as many sampled negative test facts. The
F1 value on the test facts for different embedding
sizes is shown in Fig. 4. We found that the implica-
tion loss successfully acts as a regularizer, yielding
F1 scores of around 80% for predicting unobserved
valid facts even with large embedding sizes where
a model without this regularization drastically over-
fits.

4 Conclusion and Future Work

We have presented a scalable method to incorpo-
rate first-order implications into relation representa-
tions for knowledge base inference. It alleviates the
need for propositionalization of such formulae and
we plan to use it to improve large-scale knowledge
base inference with many formulae extracted from
ontologies. We discussed and illustrated the method
in a matrix factorization setting, but it can be applied
to any model that produces relation and entity (or
entity-pair) representations that can be mapped into
non-negative space. In future work, we will inves-
tigate ways to efficiently incorporate more complex
formulae as well, involving conjunctions, disjunc-
tions, and negations.

Acknowledgments

We thank Sameer Singh and Dirk Weissenborn for
fruitful discussions, and the reviewers as well as Jo-
hannes Welbl for comments on drafts of this pa-
per. This work was supported by the Research
Foundation - Flanders (FWO), Ghent University -
iMinds, Microsoft Research through its PhD Schol-
arship Programme, an Allen Distinguished Investi-
gator Award, and a Marie Curie Career Integration
Award.

References

[Bollacker et al.2008] Kurt Bollacker, Colin Evans,
Praveen Paritosh, Tim Sturge, and Jamie Taylor.
2008. Freebase: a collaboratively created graph
database for structuring human knowledge. In Pro-
ceedings of the 2008 ACM SIGMOD international
conference on Management of data, pages 1247–1250.
ACM.

[Ganitkevitch et al.2013] Juri Ganitkevitch, Benjamin
Van Durme, and Chris Callison-Burch. 2013. Ppdb:
The paraphrase database. In HLT-NAACL, pages
758–764.

[Kruszewski et al.2015] German Kruszewski, Denis Pa-
perno, and Marco Baroni. 2015. Deriving boolean
structures from distributional vectors. Transactions of
the Association for Computational Linguistics, 3:375–
388.

[Miller1995] George A Miller. 1995. Wordnet: a lexical
database for english. Communications of the ACM,
38(11):39–41.

79



[Nickel et al.2015] Maximilian Nickel, Kevin Murphy,
Volker Tresp, and Evgeniy Gabrilovich. 2015. A
review of relational machine learning for knowledge
graphs: From multi-relational link prediction to auto-
mated knowledge graph construction. arXiv preprint
arXiv:1503.00759.

[Riedel et al.2013] Sebastian Riedel, Limin Yao, Andrew
McCallum, and Benjamin M Marlin. 2013. Rela-
tion extraction with matrix factorization and universal
schemas.

[Rocktäschel et al.2015] Tim Rocktäschel, Sameer Singh,
and Sebastian Riedel. 2015. Injecting Logical Back-
ground Knowledge into Embeddings for Relation Ex-
traction. In Annual Conference of the North American
Chapter of the Association for Computational Linguis-
tics (NAACL).

[Vendrov et al.2016] Ivan Vendrov, Ryan Kiros, Sanja Fi-
dler, and Raquel Urtasun. 2016. Order-embeddings of
images and language. arXiv preprint, abs/1511.06361.

[Wang et al.2015] Quan Wang, Bin Wang, and Li Guo.
2015. Knowledge base completion using embeddings
and rules. In Proceedings of the 24th International
Conference on Artificial Intelligence, IJCAI’15, pages
1859–1865. AAAI Press.

80


