



















































Microsoft Research Asia's Systems for WMT19


Proceedings of the Fourth Conference on Machine Translation (WMT), Volume 2: Shared Task Papers (Day 1) pages 424–433
Florence, Italy, August 1-2, 2019. c©2019 Association for Computational Linguistics

424

Microsoft Research Asia’s Systems for WMT19

Yingce Xia, Xu Tan, Fei Tian, Fei Gao,
Weicong Chen, Yang Fan, Linyuan Gong, Yichong Leng,

Renqian Luo, Yiren Wang, Lijun Wu, Jinhua Zhu,
Tao Qin∗, Tie-Yan Liu
Microsoft Research Asia

Abstract

We Microsoft Research Asia made submis-
sions to 11 language directions in the WMT19
news translation tasks. We won the first
place for 8 of the 11 directions and the sec-
ond place for the other three. Our basic sys-
tems are built on Transformer, back transla-
tion and knowledge distillation. We integrate
several of our rececent techniques to enhance
the baseline systems: multi-agent dual learn-
ing (MADL), masked sequence-to-sequence
pre-training (MASS), neural architecture opti-
mization (NAO), and soft contextual data aug-
mentation (SCA).

1 Introduction

We participated in the WMT19 shared news
translation task in 11 translation direc-
tions. We achieved first place for 8 direc-
tions: German↔English, German↔French,
Chinese↔English, English→Lithuanian,
English→Finnish, and Russian→English, and
three other directions were placed second (ranked
by teams), which included Lithuanian→English,
Finnish→English, and English→Kazakh.

Our basic systems are based on Transformer,
back translation and knowledge distillation. We
experimented with several techniques we pro-
posed recently. In brief, the innovations we intro-
duced are:

Multi-agent dual learning (MADL) The core
idea of dual learning is to leverage the duality be-
tween the primal task (mapping from domain X to
domain Y) and dual task (mapping from domain
Y to X ) to boost the performances of both tasks.
MADL (Wang et al., 2019) extends the dual learn-
ing (He et al., 2016; Xia et al., 2017a) framework
by introducing multiple primal and dual models.
It was integrated into our submitted systems for

*Corresponding author. This work was conducted at Mi-
crosoft Research Asia.

German↔English and German↔French transla-
tions.

Masked sequence-to-sequence pretraining
(MASS) Pre-training and fine-tuning have
achieved great success in language understanding.
MASS (Song et al., 2019), a pre-training method
designed for language generation, adopts the
encoder-decoder framework to reconstruct a
sentence fragment given the remaining part of
the sentence: its encoder takes a sentence with
randomly masked fragment (several consecutive
tokens) as input, and its decoder tries to predict
this masked fragment. It was integrated into our
submitted systems for Chinese→English and
English→Lithuanian translations.

Neural architecture optimization (NAO) As
well known, the evolution of neural network ar-
chitecture plays a key role in advancing neural ma-
chine translation. Neural architecture optimization
(NAO), our newly proposed method (Luo et al.,
2018), leverages the power of a gradient-based
method to conduct optimization and guide the cre-
ation of better neural architecture in a continuous
and more compact space given the historically ob-
served architectures and their performances. It
was applied in English↔Finnish translations in
our submitted systems.

Soft contextual data augmentation (SCA)
While data augmentation is an important trick to
boost the accuracy of deep learning methods in
computer vision tasks, its study in natural lan-
guage tasks is relatively limited. SCA (Zhu et al.,
2019) softly augments a randomly chosen word in
a sentence by its contextual mixture of multiple re-
lated words, i.e., replacing the one-hot representa-
tion of a word by a distribution provided by a lan-
guage model over the vocabulary. It was applied
in Russian→English translation in our submitted
systems.



425

2 Our Techniques

2.1 Multi-agent dual learning (MADL)

MADL is an enhanced version of dual learn-
ing (He et al., 2016; Wang et al., 2018). It lever-
ages N primal translation models fi and N dual
translation models gj for training, and eventually
outputs one f0 and one g0 for inference, where fi :
X 7→ Y, gj : Y 7→ X , i, j ∈ {0, 1, · · · , N − 1}.
All these models are pre-trained on bilingual data
. The i-th primal model fi has a non-negative
weight αi and the j-th dual model gi has a non-
negative weight βj . All the α·’s and β·’s are hyper-
parameters. Let Fα denote a combined translation
model from X to Y , and Gβ a combined transla-
tion model from Y to X ,

Fα =
N−1∑
i=0

αifi, Gβ =
N−1∑
j=0

βjgj ;

s.t.
N−1∑
i=0

αi = 1;
N−1∑
j=0

βj = 1.

(1)

Fα and Gβ work as follows: for any x ∈ X and
y ∈ Y ,

Fα(x) : ŷ = argmaxỹ∈Y

N−1∑
i=0

αi logP (ỹ|x; fi);

Gα(y) : x̂ = argmaxx̃∈X

N−1∑
j=0

βj logP (x̃|y; gj).

Let B denote the bilingual dataset. Let Mx and
My denote the monolingual data of X and Y . The
training objective function of MADL can be writ-
ten as follows:

min
f0, g0

− 1
|B|

∑
(x,y)∈B

logP (y|x; f0)

− 1
|B|

∑
(x,y)∈B

logP (x|y; g0)

− 1
|Mx|

∑
x∈Mx

logP (x|Gβ(Fα(x)))

− 1
|My|

∑
y∈My

logP (y|Fα(Gβ(y))).

(2)

Note that f>0 and g>0 will not be optimized dur-
ing training and we eventually output f0 and g0 for
translation. More details can be found in (Wang
et al., 2019).

2.2 Masked sequence-to-sequence
pre-training (MASS)

MASS is a pre-training method for language gen-
eration. For machine translation, it can leverage
monolingual data in two languages to pre-train a
translation model. Given a sentence x ∈ X , we
denote x\u:v as a modified version of x where
its fragment from position u to v are masked,
0 < u < v < m and m is the number of tokens of
sentence x. We denote k = v − u+ 1 as the num-
ber of tokens being masked from position u to v.
We replace each masked token by a special sym-
bol [M], and the length of the masked sentence is
not changed. xu:v denotes the sentence fragment
of x from u to v.

MASS pre-trains a sequence to sequence model
by predicting the sentence fragment xu:v taking
the masked sequence x\u:v as input. We use the
log likelihood as the objective function:

L(θ;X ) = 1
|X |

Σx∈X logP (x
u:v|x\u:v; θ),

L(θ;Y) = 1
|Y|

Σy∈Y logP (y
u:v|y\u:v; θ),

(3)

where X , Y denote the source and target domain.
We also extend MASS to supervised setting where
bilingual sentence pair (x, y) ∈ (X ,Y) can be
leveraged for pre-training. The log likelihood in
the supervised setting is as follows:

L(θ; (X ,Y)) = Σ(x,y)∈(X ,Y)(logP (y|x\u:v; θ)

+ logP (x|y\u:v; θ)
+ logP (xu:v|[x\u:v; y\u:v]; θ)
+ logP (yu:v|[x\u:v; y\u:v]; θ)
+ logP (yu:v|x\u:v; θ) + logP (xu:v|y\u:v; θ)).

(4)
where [·; ·] represents the concatenation oper-
ation. P (y|x\u:v; θ) and P (x|y\u:v; θ) denote
the probability of translating a masked sequence
to another language, which encourage the en-
coder to extract meaningful representations of
unmasked input tokens in order to predict the
masked output sequence. P (xu:v|[x\u:v; y\u:v]; θ)
and P (yu:v|[x\u:v; y\u:v]; θ) denote the probabil-
ity of generating the masked source/target seg-
ment given both the masked source and target se-
quences, which encourage the model to extract
cross-lingual information. P (yu:v|x\u:v; θ) and
P (xu:v|y\u:v; θ) denote the probability of gener-
ating the masked fragment given only the masked



426

sequence in another language. More details about
MASS can be found in Song et al. (2019).

2.3 Neural architecture optimization (NAO)
NAO (Luo et al., 2018) is a gradient based neu-
ral architecture search (NAS) method. It contains
three key components: an encoder, an accuracy
predictor, and a decoder, and optimizes a network
architecture as follows. (1) The encoder maps a
network architecture x to an embedding vector ex
in a continuous space E . (2) The predictor, a func-
tion f , takes ex ∈ E as input and predicts the dev
set accuracy of the architecture x. We perform a
gradient ascent step, i.e., moving ex along the di-
rection specified via the gradient ∂f∂ex , and get a
new embedding vector ex′ :

ex′ = ex + η
∂f

∂ex
, (5)

where η is the step size. (3) The decoder is used to
map ex′ back to the corresponding architecture x′.
The new architecture x′ is assumed to have better
performance compared with the original one x due
to the property of gradient ascent. NAO repeats
the above three steps, and sequentially generates
better and better architectures.

To learn high-quality encoder, decoder and per-
formance prediction function, it is essential to
have a large quantity of paired training data in the
form of (x, y), where y is the dev set accuracy
of the architecture x. To reduce computational
cost, we share weights among different architec-
tures (Pham et al., 2018) to aid the generation of
such paired training data.

We use NAO to search powerful neural
sequence-to-sequence architectures. The search
space is illustrated in Fig. 1. Specifically, each
network is composed of N encoder layers and N
decoder layers. We set N = 6 in our experiments.
Each encoder layer further contains 2 nodes and
each decoder layer contains 3 nodes. The node
has two branches, respectively taking the output
of other node as input, and applies a particular
operator (OP), for example, identity, self-attention
and convolution, to generate the output. The out-
puts of the two branches are added together as the
output of the node. Each encoder layer contains
two nodes while each decoder layer has three. For
each layer, we search: 1) what is the operator at
each branch of every node. For a comprehen-
sive list of different OPs, please refer to the Ap-
pendix of this paper; 2) the topology of connection

between nodes within each layer. In the middle
part of Fig. 1, we plot possible connections within
the nodes of a layer specified by all candidate ar-
chitectures, with a particular highlight of Trans-
former (Vaswani et al., 2017).

To construct the final network, we do not adopt
the typically used way of stacking the same layer
multiple times. Instead we assume that layers in
encoder/decoder could have different architectures
and directly search such personalized architecture
for each layer. We found that such a design signif-
icantly improves the performance due to the more
flexibility.

2.4 Soft contextual data augmentation (SCA)
SCA is a data augmentation technology for NMT
(Zhu et al., 2019), which replaces a randomly cho-
sen word in a sentence with its soft version. For
any word w ∈ V , its soft version is a distribu-
tion over the vocabulary of |V | words: P (w) =
(p1(w), p2(w), ..., p|V |(w)), where pj(w) ≥ 0 and∑|V |

j=1 pj(w) = 1.
Given the distribution P (w), one may simply

sample a word from this distribution to replace the
original word w. Different from this method, we
directly use this distribution vector to replace the
randomly chosen word w from the original sen-
tence. Suppose E is the embedding matrix of all
the |V | words. The embedding of the soft version
of w is

ew = P (w)E =

|V |∑
j=0

pj(w)Ej , (6)

which is the expectation of word embeddings over
the distribution.

In our systems, we leverage a pre-trained lan-
guage model to compute P (w) and condition on
all the words preceding w. That is, for the t-th
word xt in a sentence, we have

pj(xt) = LM(vj |x<t),

where LM(vj |x<t) denotes the probability of the
j-th word vj in the vocabulary appearing after the
sequence x1, x2, · · · , xt−1. The language model
is pre-trained using the monolingual data.

3 Submitted Systems

3.1 English↔German
We submit constrained systems to both English to
German and German to English translations, with
the same techniques.



427

Layer
Layer 

Input 1
Layer 

Input 2

Node 2

Node 1

Node 3

Node

Input 1 Input 2

Branch 1:
Self-Attention

Branch 2:
Identity

Add

N ×

N ×

Encoder Layer

Decoder Layer

Emb Emb Emb Emb Emb

x1 x2 x3 x4 x5

y1 y2 y3 y4 y5

Network

Figure 1: Visualization of different levels of the search space, from the network, to the layer, to the node. For
each of the different layers, we search its unique layer space. The lines in the middle part denote all possible
connections between the three nodes (constituting the layer space) as specified via each architecture, while among
them the deep black lines indicate the particular connection in Transformer. The right part similarly contains the
two branches used in Node2 of Transformer.

Dataset We concatenate “Europarl v9”, “News
Commentary v14”, “Common Crawl corpus”
and “Document-split Rapid corpus” as the ba-
sic bilingual dataset (denoted as B0). Since
“Paracrawl” data is noisy, we select 20M bilin-
gual data from this corpus using the script
filter interactive.py1. The two parts of
bilingual data are concatenated together (denoted
as B1). We clean B1 by normalizing the sentences,
removing non-printable characters, and tokeniza-
tion. We share a vocabulary for the two languages
and apply BPE for word segmentation with 35000
merge operations. (We tried different BPE merge
operations but found no significant differences.)
For monolingual data, we use 120M English sen-
tences (denoted asMen) and 120M German sen-
tences (denoted as Mde) from Newscrawl, and
preprocess them in the same way as bilingual data.
We use newstest 2016 and the validation set and
newstest 2018 as the test set.

Model Configuration We use the PyTorch im-
plementation of Transformer2. We choose the
Transformer big setting, in which both the en-
coder and decoder are of six layers. The dropout
rate is fixed as 0.2. We set the batchsize as 4096
and the parameter --update-freq as 16. We
apply Adam (Kingma and Ba, 2015) optimizer
with learning rate 5× 10−4.

Training Pipeline The pipeline consists of three
steps:

1. Pre-train two English→German trans-
lation models (denoted as f̄1 and f̄2) and

1Scripts at https://tinyurl.com/yx9fpoam
2https://github.com/pytorch/fairseq

two German→English translation models (de-
noted as ḡ1 and ḡ2) on B1; pre-train an-
other English→German (denoted as f̄3) and
German→English (denoted as ḡ3) on B0.

2. Apply back translation following (Sennrich
et al., 2016a; Edunov et al., 2018). We back-
translate Men and Mde using f̄3 and ḡ3 with
beam search, add noise to the translated sen-
tences (Edunov et al., 2018), merge the synthetic
data with B1, and train one English→German
model f0 and one German→English model g0 for
seven days on eight V100 GPUs.

3. Apply MADL to f0 and g0. That is, the
Fα in Eqn.(2) is specified as the combination of
f0, f̄1, f̄2 with equal weights; and Gβ consists of
g0, ḡ1, ḡ2. During training, we will only update f0
and g0. To speed up training, we randomly select
20M monolingual English and German sentences
fromMen andMde respectively instead of using
all monolingual sentences. The eventual output
models are denoted as f1 and g1 respectively. This
step takes 3 days on four P40 GPUs.

Table 1: Results of English↔German by sacreBLEU.

En→De De→En
news16 news18 news16 news18

baseline 37.4 45.6 41.9 44.9
BT 39.2 47.4 45 47.1

MADL 41.9 50.4 47.4 49.1

Results The results are summarized in Table 1,
which are evaluated by sacreBLEU3. The baseline

3https://github.com/mjpost/sacreBLEU

https://tinyurl.com/yx9fpoam
https://github.com/pytorch/fairseq
https://github.com/mjpost/sacreBLEU


428

is the average accuracy of models using only bi-
text, i.e., f̄1 and f̄2 for English→German transla-
tion and ḡ1 and ḡ2 for German→English, and BT
is the accuracy of the model after back-translation
training. As can be seen, back translation im-
proves accuracy. For example, back-translation
boosts the BLEU score from 45.6 to 47.4 on
news18 English→German translation, which is
1.8 point improvement. MADL further boosts
BLEU to 50.4, obtaining another 3-point im-
provement, demonstrating the effectiveness of our
method.

For the final submission, we accumulate many
translation models (trained using bitext, back
translation, and MADL, with different random
seeds) and do knowledge distillation on the source
sentences from WMT14 to WMT19 test sets. Take
English→German translation as an example. De-
note the English inputs as T = {si}NTi=1, whereNT
is the size of the test set. For each s in T , we trans-
late s to d′ usingM English→German models and
eventually obtain

E = {(si, f (j)(si))|s ∈ T }i,j , i ∈ [NT ], j ∈ [M ],

where f (j) is the j-th translation model we ac-
cumulated, T is the combination of inputs from
WMT14 to WMT19. After obtaining E , we ran-
domly select NTM bitext pairs (denoted as B2)
from B1 and finetune model f1 on B2∪E . We stop
tuning when the BLEU scores of WMT16 (i.e., the
validation set) drops.

We eventually obtain 44.9 BLEU score for
English→German and 42.8 for German→English
on WMT19 test sets and are ranked in the first
place in these two translation tasks.

3.2 German↔French
For German↔French translation, we fol-
low a similar process as the one used to
English↔German tasks introduced in Section 3.1.
We merge the “commoncrawl”, “europarl-v7”
and part of “de-fr.bicleaner07” selected by
filter interactive.py as the bilingual
data. We collect 20M monolingual sentences for
French and 20M for German from newscrawl.
The data pre-processing rule and training pro-
cedure are the same as that used in Section 3.1.
We split 9k sentences from the “dev08 14” as the
validation set and use the remaining ones as the
test set.

The results of German↔French translation on
the test set are summarized in Table 2.

Table 2: Results of German↔French by sacreBLEU.

De→Fr Fr→De
baseline 29.5 23.4
MADL 31.5 24.9

Again, our method achieves significant im-
provement over the baselines. Specifically,
MADL boosts the baseline of German→French
and French→German by 2 and 1.5 points respec-
tively.

Our submitted German→French is a single sys-
tem trained by MADL, achieving 37.3 BLEU on
WMT19. The French→German is an ensemble
of three independently trained models, achiev-
ing 35.0 BLEU score. Our systems are ranked
in the first place for both German→French and
French→German in the leaderboard.

3.3 Chinese→English

Dataset For Chinese→English translation, we
use all the bilingual and monolingual data pro-
vided by the WMT official website, and also
extra bilingual and monolingual data crawled
from the web. We filter the total 24M
bilingual pairs from WMT using the script
filter interactive.py as described in
Section 3.1 and get 18M sentence pairs. We use
the Chinese monolingual data from XMU mono-
lingual corpus4 and English monolingual data
from News Crawl as well as the English sentences
from all English-XX language pairs in WMT.
We use 100M additional parallel sentences drawn
from UN data, Open Subtitles and Web crawled
data, which is filtered using the same filter rule
described above, as well as fast align and in/out-
domain filter. Finally we get 38M bilingual pairs.
We also crawled 80M additional Chinese mono-
lingual sentences from Sougou, China News, Xin-
hua News, Sina News, Ifeng News, and 2M En-
glish monolingual sentences from China News and
Reuters. We use newstest2017 and newstest2018
on Chinese-English as development datasets.

We normalize the Chinese sentence from SBC
case to DBC case, remove non-printable charac-
ters and tokenize with both Jieba5 and PKUSeg6

to increase diversity. For English sentences, we re-
move non-printable characters and tokenize with

4http://nlp.nju.edu.cn/cwmt-wmt/
5https://github.com/fxsjy/jieba
6https://github.com/lancopku/PKUSeg-python



429

Moses tokenizer7. We follow previous prac-
tice (Hassan et al., 2018) and apply Byte-Pair En-
coding (BPE) (Sennrich et al., 2016b) separately
for Chinese and English, each with 40K vocabu-
lary.

MASS Pre-training We pre-train MASS
(Transfomer big) with both monolingual and
bilingual data. We use 100M Chinese and 300M
English monolingual sentences for the unsuper-
vised setting (Equation 3), and with a total of
56M bilingual sentence pairs for the supervised
setting (Equation 4). We share the encoder and
decoder for all the losses in Equation 3 and 4.
We then fine-tune the MASS pre-trained model
on both 18M and 56M bilingual sentence pairs
to get the baseline translation model for both
Chinese→English and English→Chinese.

Back Translation and Knowledge Distillation
We randomly choose 40M monolingual sentences
for Chinese and English respectively for back
translation following (Sennrich et al., 2016a; He
et al., 2016) and sequence-level knowledge distil-
lation following (Kim and Rush, 2016). We iterate
back translation and knowledge distillation multi-
ple times, to gradually boost the performance of
the model.

Results The results on newstest2017 and new-
stest2018 are shown in Table 3. We list two
baseline Transformer big systems which use 18M
bilingual data (constraint) and 56M bilingual data
(unconstraint) respectively. The pre-trained model
achieves about 1 BLEU point improvement after
fine-tuning on both 18M and 56M bilingual data.
After iterative back translation (BT) and knowl-
edge distillation (KD), as well as re-ranking, our
system achieves 30.8 and 30.9 BLEU points on
newstest2017 and newstest2018 respectively.

System newstest17 newstest18

Baseline (18M) 24.2 24.5
+ MASS (18M) 25.2 25.4
Baseline (56M) 26.9 27.0
+ MASS (56M) 28.0 27.8
+ Iterative BT/KD 30.4 30.5
+ Reranking 30.8 30.9

Table 3: BLEU scores on Chinese→English test sets.

7https://github.com/moses-smt/mosesdecoder/blob/maste
r/scripts/tokenizer/tokenizer.perl

WMT19 Submission For the WMT19 submis-
sion, we conduct fine-tuning and speculation to
further boost the accuracy by using the source sen-
tences in the WMT19 test set. We first filter the
bilingual as well as pseudo-generated data accord-
ing to the relevance to the source sentences. We
use the filter method in Deng et al. (2018) and
continue to train the model on the filtered data.
Second, we conduct speculation on the test source
sentences following the practice in Deng et al.
(2018). The final BLEU score of our submission
is 39.3, ranked in the first place in the leaderboard.

3.4 English↔Lithuanian
For English↔Lithuanian translation, we follow
the similar process as that for Chinese→English
task introduced in Section 3.3. We use all the
WMT bilingual data, which is 2.24M after filtra-
tion. We use the same English monolingual data as
used in Chinese-English. We select 100M Lithua-
nian monolingual data from official commoncrawl
and use all the wiki and news Lithuanian mono-
lingual data provided by WMT. In addition, we
crawl 5M Lithuanian news data from LRT web-
site8. We share the BPE vocabulary between En-
glish and Lithuanian, and the vocabulary size is
65K.

All the bilingual and monolingual data are used
for MASS pre-training, and all the bilingual data
are used for fine-tuning. For iterative back trans-
lation and knowledge distillation, we split 24M
English monolingual data as well as 12M Lithua-
nian monolingual data into 5 parts through sam-
pling with replacement, to get different models
independently so as to increase diversity in re-
ranking/ensemble. Each model uses 8M English
monolingual data and 6M Lithuanian monolingual
data. For our WMT19 submission, different from
zh-en, speculation technology is not used.

The BLEU scores on newsdev19 are
shown in Table 4. Our final submissions
for WMT19 achieves 20.1 BLEU points for
English→Lithuanian translation (ranked in the
first place) and 35.6 for Lithuanian→English
translation (ranked in the second place).

3.5 English↔Finnish
Preprocess We use the official English-Finnish
data from WMT19, including both bilingual data
and monolingual data. After de-duplicating, the

8https://www.lrt.lt/



430

System En→Lt Lt→En

Baseline 20.7 28.2
MASS + Fine-tune 21.5 28.7
+ Iterative BT/KD 28.3 33.6
+ Reranking 29.1 34.2

Table 4: BLEU scores for English↔Lithuanian on the
newsdev19 set.

bilingual data contains 8.8M aligned sentence
pairs. We share the vocabulary for English and
Finnish with 46k BPE units. We use the WMT17
and WMT18 English-Finnish test sets as two de-
velopment datasets, and tune hyper-parameters
based on the concatenation of them.

Architecture search We use NAO to search
sequence-to-sequence architectures for English-
Finnish translation tasks, as introduced in subsec-
tion 2.3. We use PyTorch for our implementa-
tions. Due to time limitations, we are not targeting
at finding better neural architectures than Trans-
former; instead we target at models with com-
parable performance to Transformer, while pro-
viding diversity in the reranking process. The
whole search process takes 2.5 days on 16 P40
GPU cards and the discovered neural architecture,
named as NAONet, is visualized in the Appendix.

Train single models The final system for
English-Finnish is obtained through reranking of
three strong model checkpoints, respectively from
the Transformer model decoding from left to right
(L2R Transformer), the Transformer model de-
coding from right to left (R2L Transformer) and
NAONet decoding from left to right. All the mod-
els have 6-6 layers in encoder/decoder, and are ob-
tained using the same process which is detailed as
below.

Step 1: Base models. Train two models
P1(x|y) and P1(y|x) based on all the bilingual
dataset (8.8M), respectively for English→Finnish
and Finnish→English translations.

Step 2: Back translation. Do the normal back
translation (Sennrich et al., 2016a; He et al., 2016)
using P1 and P2. Specifically we choose 10M
monolingual English corpus, use P1(y|x) to gen-
erate the 10M pseudo bitext with beam search
(beam size is set to 5), and mix it with the bilin-
gual data to continue the training of P1(x|y). The
ratio of mixing is set as 1 : 1 through up-sampling.
The model obtained through such a process is de-

noted as P2(x|y). The same process is applied to
the opposite direction and the new model P2(y|x)
is attained.

Step 3: Back translation + knowledge distilla-
tion. In this step we generate more pseudo bi-
text by sequence level knowledge distillation (Kim
and Rush, 2016) apart from using back translation.
To be more concrete, as the first step, similar to
Step 2, we choose 15M monolingual English and
Finnish corpus, and generate the translations us-
ing P2(y|x) and P2(x|y), respectively. The result-
ing pseudo bitext is respectively denoted as Dx→y
and Dy→x. Then we concatenate all the bilingual
data, Dx→y and Dy→x, and use the whole corpus
to train a new English-Finnish model from scratch.
The attained model is denoted as P3(y|x).

Step 4: Finetune. In this step we try a very
simple data selection method to handle the do-
main mismatch problem in WMT. We remove
all the bilingual corpus from Paracrawl which is
generally assumed to be quite noisy (Junczys-
Dowmunt, 2018) and use the remaining bilingual
corpus (4.5M ) to finetune P3(y|x) for one epoch.
The resulting model is denoted as P4(y|x) which
is set as the final model checkpoint.

newstest17 newstest18
Baseline 26.09 16.07

+BT 28.84 18.54
+BT & KD 29.76 19.13
+Finetune 30.19 19.46

Table 5: BLEU scores of L2R Transformer on
English→Finnish test sets.

newstest17 newstest18
L2R Transformer 30.19 19.46
R2L Transformer 30.40 19.73

NAONet 30.54 19.58

Table 6: The final BLEU scores on English→Finnish
test sets, for the three models: L2R Transformer, R2L
Transformer and NAONet, after the four steps of train-
ing.

To investigate the effects of the four steps, we
record the resulting BLEU scores on WMT17 and
WMT18 test sets in Table 5, taking the L2R Trans-
former model as an example. Furthermore, we re-
port the final BLEU scores of the three models af-
ter the four steps in Table 6. All the results are
obtained via beam size 5 and length penalty 1.0.



431

The similar results for Finnish-English translation
are shown in Table 7.

newstest17 newstest18
L2R Transformer 35.66 25.56
R2L Transformer 35.31 25.56

NAONet 36.18 26.38

Table 7: The final BLEU scores on Finnish→English
test sets, for the three models: L2R Transformer, R2L
Transformer and NAONet, after the four steps of train-
ing.

Re-ranking We use n-best re-ranking to deliver
the final translation results using the three model
checkpoints introduced in the last subsection. The
beam size is set as 12. The weights of the three
models, as well as the length penalty in generation,
are tuned on the WMT-18 test sets. The results are
shown in the second row of Table 8.

We would also like to investigate what is the
influence of the NAONet to the re-ranking re-
sults. To achieve that, in re-ranking we replace
NAONet with another model from L2R Trans-
former, trained with the same process in subsec-
tion 3.5 with the difference only in random seeds,
while maintain the other two models unchanged.
The results are illustrated in the last row of Ta-
ble 8. From the comparison of the two rows in
Table 8, we can see the new architecture NAONet
discovered via NAO brings more diversity in the
ranking, thus leading to better results. We also re-
port the similar results for Finnish-English tasks in
Table 9.

Our systems achieve 27.4 for and 31.9 for
English→Finnish and Finnish→English, ranked
in the first place and second place (by teams), re-
spectively.

3.6 Russian→English
Dataset We use the bitext data from the several
corpora: ParaCrawl, Common Crawl, News Com-
mentary, Yandex Corpus, and UN Parallel Corpus.

news17 news18 news19
Re-ranking
w/ NAONet

31.48 21.21 27.4

Re-ranking
w/o NAONet

30.82 20.79 /

Table 8: English→Finnish BLEU scores of re-ranking
using the three models. “news” is short for “newstest”.

news17 news18 news19
Re-ranking
w/ NAONet

37.54 27.51 31.9

Re-ranking
w/o NAONet

36.83 26.99 /

Table 9: Finnish→English BLEU scores of re-ranking
using the three models.

We also use News Crawl corpora as monolingual
data. The data is filtered by rules such as sentence
length, language identification, resulting a training
dataset with 16M bilingual pairs and 40M mono-
lingual sentences (20M for English and 20M for
Russian). We use WMT17 and WMT18 test set
as development data. The two languages use sep-
arate vocabularies, each with 50K BPE merge op-
erations.

Our system Our final system for
Russian→English translation is a combina-
tion of Transformer network (Vaswani et al.,
2017), back translation (Sennrich et al., 2016a),
knowledge distillation (Kim and Rush, 2016), soft
contextual data augmentation (Zhu et al., 2019),
and model ensemble. We use Transformer big as
network architecture. We first train two models,
English→Russian and Russian→English respec-
tively, on bilingual pairs as baseline model. Based
on these two models, we perform back translation
and knowledge distillation on monolingual data,
generating 40M synthetic data. Combining both
bilingual and synthetic data, we get a large train
corpus with 56M pairs in total. We upsample the
bilingual pairs and shuffle the combined corpus
to ensure the balance between bilingual and syn-
thetic data. Finally, we train the Russian→English
model from scratch. During the training, we
also use soft contextual data augmentation to
further enhance training. Following the above
procedures, 5 different models are trained and
ensembled for final submission.

Results Our final submission achieves 40.1
BLEU score, ranked first in the leaderboard. Table
10 reports the results of our system on the devel-
opment set.

3.7 English→Kazakh

Dataset We notice that most of the parallel data
are out of domain. Therefore, we crawl some ex-
ternal data:



432

newstest17 newstest18
Baseline 36.5 32.6

+BT & KD 40.9 35.2
+SCA 41.7 35.6

Table 10: Russian→English BLEU scores.

(1) We crawl all news articles from inform.
kz, a Kazakh-English news website. Then we
match an English new article to a Kazakh one by
matching their images with image hashing. In this
way, we find 10K pairs of bilingual news articles.
We use their title as additional parallel data. These
data are in-domain and useful in training.

(2) We crawl 140K parallel sentence pairs from
glosbe.com. Although most of these sentences
are out-of-domain, they significantly extended the
size of our parallel dataset and lead to better re-
sults.

Because most of our parallel training data are
noisy, we filter these data with some rules: (1) For
the KazakhTV dataset, we remove any sentence
pair with an alignment score less than 0.05. (2)
For the Wiki Titles dataset, we remove any sen-
tence pair that starts with User or NGC. (3) For
all datasets, we remove any sentence pair in which
the English sentence contains no lowercase alpha-
bets. (4) For all datasets, we remove any sentence
pair where the length ratio is greater than 2.5:1.

We tokenize all our data using the Moses De-
coder. We learn a shared BPE (Sennrich et al.,
2016b) from all our data (including all WMT19
parallel data, WMT19 monolingual data9, glosbe,
inform.kz news titles, and inform.kz news con-
tents) and get a shared vocabulary of 49,152 to-
kens. Finally, our dataset consists of 300K bilin-
gual sentence pairs, 700K Kazakh monolingual
sentences, and many English monolingual sen-
tences.

Our system Our model is based on the Trans-
former (Vaswani et al., 2017). We vary the hyper-
parameters to increase the diversity of our model.
Our models usually have 6 encoder layers, 6/7 de-
coder layers, ReLU/GELU (Hendrycks and Gim-
pel, 2016) activation function, and an embedding
dimension of 640.

We train 4 English-Kazakh models and 4
Kazakh-English models with different random

9When we learn BPE, English monolingual data is down-
sampled to make the number of English sentences roughly
the same as the number of Kazakh sentences.

seeds and hyper-parameters. Then we apply back-
translation (Edunov et al., 2018) and knowledge
distillation (Kim and Rush, 2016) for 6 rounds. In
each round, we

1. Sample 4M sentences from English monolin-
gual data and back-translate them to Kazakh with
the best EN-KK model (on the dev set) in the pre-
vious round.

2. Back-translate all Kazakh monolingual data
to English with the best KK-EN model in the pre-
vious round.

3. Sample 200K sentences from English mono-
lingual data and translate them to Kazakh using
the ensemble of all EN-KK models in the previ-
ous round.

4. Train 4 English-Kazakh models with BT data
from step 2 and KD data from step 3. We up-
sample bilingual sentence pairs by 2x.

5. Train 4 Kazakh-English models with BT data
from step 1. We up-sample bilingual sentence
pairs by 3x.

Result Our final submission achieves 10.6
BLEU score, ranked second by teams in the
leaderboard.

4 Conclusions

This paper describes Microsoft Research Asia’s
neural machine translation systems for the
WMT19 shared news translation tasks. Our sys-
tems are built on Transformer, back translation
and knowledge distillation, enhanced with our
recently proposed techniques: multi-agent dual
learning (MADL), masked sequence-to-sequence
pre-training (MASS), neural architecture opti-
mization (NAO), and soft contextual data aug-
mentation (SCA). Due to time and GPU limita-
tions, we only apply each technique to a subset
of translation tasks. We believe combining them
together will further improve the translation accu-
racy and will conduct experiments in the future.
Furthermore, some other techniques such as de-
liberation learning (Xia et al., 2017b), adversar-
ial learning (Wu et al., 2018b), and reinforcement
learning (He et al., 2017; Wu et al., 2018a) could
also hep and are worthy of exploration.

Acknowledgments

This work is supported by Microsoft Machine
Translation team.

inform.kz
inform.kz
glosbe.com
https://github.com/moses-smt/mosesdecoder
https://github.com/moses-smt/mosesdecoder


433

References
Yongchao Deng, Shanbo Cheng, Jun Lu, Kai Song,

Jingang Wang, Shenglan Wu, Liang Yao, Guchun
Zhang, Haibo Zhang, Pei Zhang, et al. 2018.
Alibaba’s neural machine translation systems for
wmt18. In Proceedings of the Third Conference
on Machine Translation: Shared Task Papers, pages
368–376.

Sergey Edunov, Myle Ott, Michael Auli, and David
Grangier. 2018. Understanding back-translation at
scale. 2018 Conference on Empirical Methods in
Natural Language Processing.

Hany Hassan, Anthony Aue, Chang Chen, Vishal
Chowdhary, Jonathan Clark, Christian Feder-
mann, Xuedong Huang, Marcin Junczys-Dowmunt,
William Lewis, Mu Li, et al. 2018. Achieving hu-
man parity on automatic chinese to english news
translation. arXiv preprint arXiv:1803.05567.

Di He, Hanqing Lu, Yingce Xia, Tao Qin, Liwei Wang,
and Tie-Yan Liu. 2017. Decoding with value net-
works for neural machine translation. In Advances
in Neural Information Processing Systems, pages
178–187.

Di He, Yingce Xia, Tao Qin, Liwei Wang, Nenghai Yu,
Tie-Yan Liu, and Wei-Ying Ma. 2016. Dual learn-
ing for machine translation. In Advances in Neural
Information Processing Systems, pages 820–828.

Dan Hendrycks and Kevin Gimpel. 2016. Bridging
nonlinearities and stochastic regularizers with gaus-
sian error linear units. CoRR, abs/1606.08415.

Marcin Junczys-Dowmunt. 2018. Microsoft’s submis-
sion to the wmt2018 news translation task: How i
learned to stop worrying and love the data. In Pro-
ceedings of the Third Conference on Machine Trans-
lation (WMT), Volume 2: Shared Task Papers, pages
429–434.

Yoon Kim and Alexander M. Rush. 2016. Sequence-
level knowledge distillation. In Proceedings of the
2016 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1317–1327, Austin,
Texas. Association for Computational Linguistics.

Diederik P Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. International
Conference on Learning Representation (ICLR).

Renqian Luo, Fei Tian, Tao Qin, Enhong Chen, and
Tie-Yan Liu. 2018. Neural architecture optimiza-
tion. In S. Bengio, H. Wallach, H. Larochelle,
K. Grauman, N. Cesa-Bianchi, and R. Garnett, ed-
itors, Advances in Neural Information Processing
Systems 31, pages 7816–7827. Curran Associates,
Inc.

Hieu Pham, Melody Y. Guan, Barret Zoph, Quoc V. Le,
and Jeff Dean. 2018. Efficient neural architecture
search via parameters sharing. international confer-
ence on machine learning, pages 4092–4101.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016a. Improving neural machine translation mod-
els with monolingual data. In Proceedings of the
54th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), vol-
ume 1, pages 86–96.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016b. Neural machine translation of rare words
with subword units. 54th Annual Meeting of the As-
sociation for Computational Linguistics (ACL).

Kaitao Song, Xu Tan, Tao Qin, Jianfeng Lu, and Tie-
Yan Liu. 2019. Mass: Masked sequence to se-
quence pre-training for language generation. In In-
ternational Conference on Machine Learning, pages
5926–5936.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in neural information pro-
cessing systems, pages 5998–6008.

Yijun Wang, Yingce Xia, Li Zhao, Jiang Bian, Tao
Qin, Guiquan Liu, and Tie-Yan Liu. 2018. Dual
transfer learning for neural machine translation with
marginal distribution regularization. In Thirty-
Second AAAI Conference on Artificial Intelligence.

Yiren Wang, Yingce Xia, Tianyu He, Fei Tian, Tao Qin,
ChengXiang Zhai, and Tie-Yan Liu. 2019. Multi-
agent dual learning. In International Conference on
Learning Representations.

Lijun Wu, Fei Tian, Tao Qin, Jianhuang Lai, and Tie-
Yan Liu. 2018a. A study of reinforcement learning
for neural machine translation. In Proceedings of
the 2018 Conference on Empirical Methods in Nat-
ural Language Processing, pages 3612–3621.

Lijun Wu, Yingce Xia, Fei Tian, Li Zhao, Tao Qin,
Jianhuang Lai, and Tie-Yan Liu. 2018b. Adversarial
neural machine translation. In Asian Conference on
Machine Learning, pages 534–549.

Yingce Xia, Tao Qin, Wei Chen, Jiang Bian, Neng-
hai Yu, and Tie-Yan Liu. 2017a. Dual supervised
learning. In Proceedings of the 34th International
Conference on Machine Learning-Volume 70, pages
3789–3798. JMLR. org.

Yingce Xia, Fei Tian, Lijun Wu, Jianxin Lin, Tao Qin,
Nenghai Yu, and Tie-Yan Liu. 2017b. Deliberation
networks: Sequence generation beyond one-pass de-
coding. In Advances in Neural Information Process-
ing Systems, pages 1784–1794.

Jinhua Zhu, Fei Gao, Lijun Wu, Yingce Xia, Tao Qin,
Wengang Zhou, Xueqi Cheng, and Tie-Yan Liu.
2019. Soft contextual data augmentation for neural
machine translation. In ACL 2019.

http://arxiv.org/abs/1606.08415
http://arxiv.org/abs/1606.08415
http://arxiv.org/abs/1606.08415
https://doi.org/10.18653/v1/D16-1139
https://doi.org/10.18653/v1/D16-1139
http://papers.nips.cc/paper/8007-neural-architecture-optimization.pdf
http://papers.nips.cc/paper/8007-neural-architecture-optimization.pdf
http://proceedings.mlr.press/v97/song19d/song19d.pdf
http://proceedings.mlr.press/v97/song19d/song19d.pdf
https://openreview.net/forum?id=HyGhN2A5tm
https://openreview.net/forum?id=HyGhN2A5tm

