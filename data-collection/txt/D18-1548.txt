











































Linguistically-Informed Self-Attention for Semantic Role Labeling


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 5027–5038
Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics

5027

Linguistically-Informed Self-Attention for Semantic Role Labeling

Emma Strubell
1
, Patrick Verga

1
, Daniel Andor

2
, David Weiss

2
and Andrew McCallum

1

1College of Information and Computer Sciences
University of Massachusetts Amherst

{strubell, pat, mccallum}@cs.umass.edu
2Google AI Language

New York, NY
{andor, djweiss}@google.com

Abstract

Current state-of-the-art semantic role labeling
(SRL) uses a deep neural network with no
explicit linguistic features. However, prior
work has shown that gold syntax trees can dra-
matically improve SRL decoding, suggesting
the possibility of increased accuracy from ex-
plicit modeling of syntax. In this work, we
present linguistically-informed self-attention
(LISA): a neural network model that com-
bines multi-head self-attention with multi-task
learning across dependency parsing, part-of-
speech tagging, predicate detection and SRL.
Unlike previous models which require sig-
nificant pre-processing to prepare linguistic
features, LISA can incorporate syntax using
merely raw tokens as input, encoding the se-
quence only once to simultaneously perform
parsing, predicate detection and role label-
ing for all predicates. Syntax is incorpo-
rated by training one attention head to attend
to syntactic parents for each token. More-
over, if a high-quality syntactic parse is al-
ready available, it can be beneficially injected
at test time without re-training our SRL model.
In experiments on CoNLL-2005 SRL, LISA
achieves new state-of-the-art performance for
a model using predicted predicates and stan-
dard word embeddings, attaining 2.5 F1 ab-
solute higher than the previous state-of-the-art
on newswire and more than 3.5 F1 on out-
of-domain data, nearly 10% reduction in er-
ror. On ConLL-2012 English SRL we also
show an improvement of more than 2.5 F1.
LISA also out-performs the state-of-the-art
with contextually-encoded (ELMo) word rep-
resentations, by nearly 1.0 F1 on news and
more than 2.0 F1 on out-of-domain text.

1 Introduction

Semantic role labeling (SRL) extracts a high-level
representation of meaning from a sentence, label-
ing e.g. who did what to whom. Explicit repre-
sentations of such semantic information have been

shown to improve results in challenging down-
stream tasks such as dialog systems (Tur et al.,
2005; Chen et al., 2013), machine reading (Berant
et al., 2014; Wang et al., 2015) and translation (Liu
and Gildea, 2010; Bazrafshan and Gildea, 2013).

Though syntax was long considered an obvious
prerequisite for SRL systems (Levin, 1993; Pun-
yakanok et al., 2008), recently deep neural net-
work architectures have surpassed syntactically-
informed models (Zhou and Xu, 2015; Marcheg-
giani et al., 2017; He et al., 2017; Tan et al., 2018;
He et al., 2018), achieving state-of-the art SRL
performance with no explicit modeling of syntax.
An additional benefit of these end-to-end models
is that they require just raw tokens and (usually)
detected predicates as input, whereas richer lin-
guistic features typically require extraction by an
auxiliary pipeline of models.

Still, recent work (Roth and Lapata, 2016; He
et al., 2017; Marcheggiani and Titov, 2017) indi-
cates that neural network models could see even
higher accuracy gains by leveraging syntactic in-
formation rather than ignoring it. He et al. (2017)
indicate that many of the errors made by a syntax-
free neural network on SRL are tied to certain
syntactic confusions such as prepositional phrase
attachment, and show that while constrained in-
ference using a relatively low-accuracy predicted
parse can provide small improvements in SRL ac-
curacy, providing a gold-quality parse leads to
substantial gains. Marcheggiani and Titov (2017)
incorporate syntax from a high-quality parser
(Kiperwasser and Goldberg, 2016) using graph
convolutional neural networks (Kipf and Welling,
2017), but like He et al. (2017) they attain only
small increases over a model with no syntactic
parse, and even perform worse than a syntax-free
model on out-of-domain data. These works sug-
gest that though syntax has the potential to im-
prove neural network SRL models, we have not



5028

yet designed an architecture which maximizes the
benefits of auxiliary syntactic information.

In response, we propose linguistically-informed
self-attention (LISA): a model that combines
multi-task learning (Caruana, 1993) with stacked
layers of multi-head self-attention (Vaswani et al.,
2017); the model is trained to: (1) jointly pre-
dict parts of speech and predicates; (2) perform
parsing; and (3) attend to syntactic parse parents,
while (4) assigning semantic role labels. Whereas
prior work typically requires separate models to
provide linguistic analysis, including most syntax-
free neural models which still rely on external
predicate detection, our model is truly end-to-end:
earlier layers are trained to predict prerequisite
parts-of-speech and predicates, the latter of which
are supplied to later layers for scoring. Though
prior work re-encodes each sentence to predict
each desired task and again with respect to each
predicate to perform SRL, we more efficiently en-
code each sentence only once, predict its pred-
icates, part-of-speech tags and labeled syntactic
parse, then predict the semantic roles for all pred-
icates in the sentence in parallel. The model is
trained such that, as syntactic parsing models im-
prove, providing high-quality parses at test time
will improve its performance, allowing the model
to leverage updated parsing models without re-
quiring re-training.

In experiments on the CoNLL-2005 and
CoNLL-2012 datasets we show that our
linguistically-informed models out-perform
the syntax-free state-of-the-art. On CoNLL-2005
with predicted predicates and standard word
embeddings, our single model out-performs the
previous state-of-the-art model on the WSJ test
set by 2.5 F1 points absolute. On the challenging
out-of-domain Brown test set, our model improves
substantially over the previous state-of-the-art by
more than 3.5 F1, a nearly 10% reduction in error.
On CoNLL-2012, our model gains more than 2.5
F1 absolute over the previous state-of-the-art.
Our models also show improvements when
using contextually-encoded word representations
(Peters et al., 2018), obtaining nearly 1.0 F1
higher than the state-of-the-art on CoNLL-2005
news and more than 2.0 F1 improvement on
out-of-domain text.1

1Our implementation in TensorFlow (Abadi et al., 2015)
is available at : http://github.com/strubell/
LISA

Bilinear

 I        saw          the          sloth      climbing

PRP  VBP:PRED  DT NN VBG:PRED

Syntactically-informed self-attention + FF

Multi-head self-attention + FF r

Multi-head self-attention + FF

Feed 
Forward

J

Feed 
Forward

...

p

...
spred srole

saw 
climbing

B-ARG0  B-V   B-ARG1  I-ARG1    I-ARG1
   O            O     B-ARG0   I-ARG0      B-V

Figure 1: Word embeddings are input to J layers of
multi-head self-attention. In layer p one attention
head is trained to attend to parse parents (Figure
2). Layer r is input for a joint predicate/POS clas-
sifier. Representations from layer r correspond-
ing to predicted predicates are passed to a bilinear
operation scoring distinct predicate and role rep-
resentations to produce per-token SRL predictions
with respect to each predicted predicate.

2 Model

Our goal is to design an efficient neural network
model which makes use of linguistic information
as effectively as possible in order to perform end-
to-end SRL. LISA achieves this by combining: (1)
A new technique of supervising neural attention to
predict syntactic dependencies with (2) multi-task
learning across four related tasks.

Figure 1 depicts the overall architecture of our
model. The basis for our model is the Trans-
former encoder introduced by Vaswani et al.
(2017): we transform word embeddings into
contextually-encoded token representations us-
ing stacked multi-head self-attention and feed-
forward layers (§2.1).

To incorporate syntax, one self-attention head
is trained to attend to each token’s syntactic par-
ent, allowing the model to use this attention head
as an oracle for syntactic dependencies. We in-
troduce this syntactically-informed self-attention
(Figure 2) in more detail in §2.2.

Our model is designed for the more realistic set-
ting in which gold predicates are not provided at
test-time. Our model predicts predicates and inte-
grates part-of-speech (POS) information into ear-
lier layers by re-purposing representations closer
to the input to predict predicate and POS tags us-

http://github.com/strubell/LISA
http://github.com/strubell/LISA


5029

I  
saw  
the  

sloth  
climbing

sloth(i) (t = 3)

      MatMul: 

Concat + FF 

sloth(i+1)

+

A[t]parse

M [t]parse

A
i
hV

i
h

A[t]parse

A[t]parse M
i
0[t] M

i
1[t] M

i
2[t]

A
i
2[t]A

i
1[t]A

i
0[t]

Figure 2: Syntactically-informed self-attention for
the query word sloth. Attention weights Aparse
heavily weight the token’s syntactic governor,
saw, in a weighted average over the token val-
ues Vparse. The other attention heads act as
usual, and the attended representations from all
heads are concatenated and projected through a
feed-forward layer to produce the syntactically-
informed representation for sloth.

ing hard parameter sharing (§2.3). We simplify
optimization and benefit from shared statistical
strength derived from highly correlated POS and
predicates by treating tagging and predicate detec-
tion as a single task, performing multi-class clas-
sification into the joint Cartesian product space of
POS and predicate labels.

Though typical models, which re-encode the
sentence for each predicate, can simplify SRL to
token-wise tagging, our joint model requires a
different approach to classify roles with respect
to each predicate. Contextually encoded tokens
are projected to distinct predicate and role em-
beddings (§2.4), and each predicted predicate is
scored with the sequence’s role representations us-
ing a bilinear model (Eqn. 6), producing per-label
scores for BIO-encoded semantic role labels for
each token and each semantic frame.

The model is trained end-to-end by maximum
likelihood using stochastic gradient descent (§2.5).

2.1 Self-attention token encoder

The basis for our model is a multi-head self-
attention token encoder, recently shown to achieve
state-of-the-art performance on SRL (Tan et al.,
2018), and which provides a natural mechanism

for incorporating syntax, as described in §2.2. Our
implementation replicates Vaswani et al. (2017).

The input to the network is a sequence X of T
token representations xt. In the standard setting
these token representations are initialized to pre-
trained word embeddings, but we also experiment
with supplying pre-trained ELMo representations
combined with task-specific learned parameters,
which have been shown to substantially improve
performance of other SRL models (Peters et al.,
2018). For experiments with gold predicates, we
concatenate a predicate indicator embedding pt
following previous work (He et al., 2017).

We project2 these input embeddings to a rep-
resentation that is the same size as the output of
the self-attention layers. We then add a positional
encoding vector computed as a deterministic sinu-
soidal function of t, since the self-attention has no
innate notion of token position.

We feed this token representation as input to a
series of J residual multi-head self-attention lay-
ers with feed-forward connections. Denoting the
jth self-attention layer as T (j)(·), the output of
that layer s(j)t , and LN(·) layer normalization, the
following recurrence applied to initial input c(p)t :

s
(j)
t = LN(s

(j�1)
t + T

(j)(s(j�1)t )) (1)

gives our final token representations s(j)t . Each
T
(j)(·) consists of: (a) multi-head self-attention

and (b) a feed-forward projection.
The multi-head self attention consists of H at-

tention heads, each of which learns a distinct at-
tention function to attend to all of the tokens in
the sequence. This self-attention is performed for
each token for each head, and the results of the H
self-attentions are concatenated to form the final
self-attended representation for each token.

Specifically, consider the matrix S(j�1) of T to-
ken representations at layer j � 1. For each atten-
tion head h, we project this matrix into distinct
key, value and query representations K(j)h , V

(j)
h

and Q(j)h of dimensions T⇥dk, T⇥dq, and T⇥dv,
respectively. We can then multiply Q(j)h by K

(j)
h

to obtain a T ⇥ T matrix of attention weights A(j)h
between each pair of tokens in the sentence. Fol-
lowing Vaswani et al. (2017) we perform scaled
dot-product attention: We scale the weights by the
inverse square root of their embedding dimension

2All linear projections include bias terms, which we omit
in this exposition for the sake of clarity.



5030

and normalize with the softmax function to pro-
duce a distinct distribution for each token over all
the tokens in the sentence:

A
(j)
h = softmax(d

�0.5
k Q

(j)
h K

(j)
h

T
) (2)

These attention weights are then multiplied by
V

(j)
h for each token to obtain the self-attended to-

ken representations M (j)h :

M
(j)
h = A

(j)
h V

(j)
h (3)

Row t of M (j)h , the self-attended representation for
token t at layer j, is thus the weighted sum with
respect to t (with weights given by A(j)h ) over the
token representations in V (j)h .

The outputs of all attention heads for each token
are concatenated, and this representation is passed
to the feed-forward layer, which consists of two
linear projections each followed by leaky ReLU
activations (Maas et al., 2013). We add the out-
put of the feed-forward to the initial representa-
tion and apply layer normalization to give the final
output of self-attention layer j, as in Eqn. 1.

2.2 Syntactically-informed self-attention

Typically, neural attention mechanisms are left on
their own to learn to attend to relevant inputs. In-
stead, we propose training the self-attention to at-
tend to specific tokens corresponding to the syn-
tactic structure of the sentence as a mechanism for
passing linguistic knowledge to later layers.

Specifically, we replace one attention head with
the deep bi-affine model of Dozat and Manning
(2017), trained to predict syntactic dependencies.
Let Aparse be the parse attention weights, at layer
i. Its input is the matrix of token representations
S
(i�1). As with the other attention heads, we

project S(i�1) into key, value and query represen-
tations, denoted Kparse, Qparse, Vparse. Here the
key and query projections correspond to parent
and dependent representations of the tokens, and
we allow their dimensions to differ from the rest of
the attention heads to more closely follow the im-
plementation of Dozat and Manning (2017). Un-
like the other attention heads which use a dot prod-
uct to score key-query pairs, we score the compati-
bility between Kparse and Qparse using a bi-affine
operator Uheads to obtain attention weights:

Aparse = softmax(QparseUheadsK
T
parse) (4)

These attention weights are used to compose
a weighted average of the value representations
Vparse as in the other attention heads.

We apply auxiliary supervision at this attention
head to encourage it to attend to each token’s par-
ent in a syntactic dependency tree, and to encode
information about the token’s dependency label.
Denoting the attention weight from token t to a
candidate head q as Aparse[t, q], we model the
probability of token t having parent q as:

P (q = head(t) | X ) = Aparse[t, q] (5)

using the attention weights Aparse[t] as the distri-
bution over possible heads for token t. We define
the root token as having a self-loop. This atten-
tion head thus emits a directed graph3 where each
token’s parent is the token to which the attention
Aparse assigns the highest weight.

We also predict dependency labels using per-
class bi-affine operations between parent and de-
pendent representations Qparse and Kparse to pro-
duce per-label scores, with locally normalized
probabilities over dependency labels ydept given by
the softmax function. We refer the reader to Dozat
and Manning (2017) for more details.

This attention head now becomes an oracle for
syntax, denoted P , providing a dependency parse
to downstream layers. This model not only pre-
dicts its own dependency arcs, but allows for the
injection of auxiliary parse information at test time
by simply setting Aparse to the parse parents pro-
duced by e.g. a state-of-the-art parser. In this way,
our model can benefit from improved, external
parsing models without re-training. Unlike typi-
cal multi-task models, ours maintains the ability
to leverage external syntactic information.

2.3 Multi-task learning

We also share the parameters of lower layers in our
model to predict POS tags and predicates. Fol-
lowing He et al. (2017), we focus on the end-to-
end setting, where predicates must be predicted
on-the-fly. Since we also train our model to
predict syntactic dependencies, it is beneficial to
give the model knowledge of POS information.
While much previous work employs a pipelined
approach to both POS tagging for dependency
parsing and predicate detection for SRL, we take
a multi-task learning (MTL) approach (Caruana,

3Usually the head emits a tree, but we do not enforce it
here.



5031

1993), sharing the parameters of earlier layers in
our SRL model with a joint POS and predicate de-
tection objective. Since POS is a strong predic-
tor of predicates4 and the complexity of training
a multi-task model increases with the number of
tasks, we combine POS tagging and predicate de-
tection into a joint label space: For each POS tag
TAG which is observed co-occurring with a predi-
cate, we add a label of the form TAG:PREDICATE.

Specifically, we feed the representation s(r)t
from a layer r preceding the syntactically-
informed layer p to a linear classifier to pro-
duce per-class scores rt for token t. We compute
locally-normalized probabilities using the softmax
function: P (yprpt | X ) / exp(rt), where y

prp
t is a

label in the joint space.

2.4 Predicting semantic roles

Our final goal is to predict semantic roles for each
predicate in the sequence. We score each predicate
against each token in the sequence using a bilinear
operation, producing per-label scores for each to-
ken for each predicate, with predicates and syntax
determined by oracles V and P .

First, we project each token representation s(J)t
to a predicate-specific representation spredt and a
role-specific representation srolet . We then provide
these representations to a bilinear transformation
U for scoring. So, the role label scores sft for the
token at index t with respect to the predicate at
index f (i.e. token t and frame f ) are given by:

sft = (s
pred
f )

T
Us

role
t (6)

which can be computed in parallel across all se-
mantic frames in an entire minibatch. We calculate
a locally normalized distribution over role labels
for token t in frame f using the softmax function:
P (yroleft | P,V,X ) / exp(sft).

At test time, we perform constrained decoding
using the Viterbi algorithm to emit valid sequences
of BIO tags, using unary scores sft and the transi-
tion probabilities given by the training data.

2.5 Training

We maximize the sum of the likelihoods of the in-
dividual tasks. In order to maximize our model’s
ability to leverage syntax, during training we
clamp P to the gold parse (PG) and V to gold
predicates VG when passing parse and predicate

4All predicates in CoNLL-2005 are verbs; CoNLL-2012
includes some nominal predicates.

representations to later layers, whereas syntactic
head prediction and joint predicate/POS prediction
are conditioned only on the input sequence X . The
overall objective is thus:

1

T

TX

t=1

h FX

f=1

log P (yroleft | PG,VG,X )

+ log P (yprpt | X )
+ �1 log P (head(t) | X )

+ �2 log P (y
dep
t | PG,X )

i
(7)

where �1 and �2 are penalties on the syntactic at-
tention loss.

We train the model using Nadam (Dozat, 2016)
SGD combined with the learning rate schedule in
Vaswani et al. (2017). In addition to MTL, we reg-
ularize our model using dropout (Srivastava et al.,
2014). We use gradient clipping to avoid explod-
ing gradients (Bengio et al., 1994; Pascanu et al.,
2013). Additional details on optimization and hy-
perparameters are included in Appendix A.

3 Related work

Early approaches to SRL (Pradhan et al., 2005;
Surdeanu et al., 2007; Johansson and Nugues,
2008; Toutanova et al., 2008) focused on devel-
oping rich sets of linguistic features as input to a
linear model, often combined with complex con-
strained inference e.g. with an ILP (Punyakanok
et al., 2008). Täckström et al. (2015) showed that
constraints could be enforced more efficiently us-
ing a clever dynamic program for exact inference.
Sutton and McCallum (2005) modeled syntactic
parsing and SRL jointly, and Lewis et al. (2015)
jointly modeled SRL and CCG parsing.

Collobert et al. (2011) were among the first to
use a neural network model for SRL, a CNN over
word embeddings which failed to out-perform
non-neural models. FitzGerald et al. (2015) suc-
cessfully employed neural networks by embed-
ding lexicalized features and providing them as
factors in the model of Täckström et al. (2015).

More recent neural models are syntax-free.
Zhou and Xu (2015), Marcheggiani et al. (2017)
and He et al. (2017) all use variants of deep
LSTMs with constrained decoding, while Tan
et al. (2018) apply self-attention to obtain state-of-
the-art SRL with gold predicates. Like this work,
He et al. (2017) present end-to-end experiments,
predicting predicates using an LSTM, and He et al.



5032

(2018) jointly predict SRL spans and predicates in
a model based on that of Lee et al. (2017), obtain-
ing state-of-the-art predicted predicate SRL. Con-
current to this work, Peters et al. (2018) and He
et al. (2018) report significant gains on PropBank
SRL by training a wide LSTM language model
and using a task-specific transformation of its hid-
den representations (ELMo) as a deep, and com-
putationally expensive, alternative to typical word
embeddings. We find that LISA obtains further ac-
curacy increases when provided with ELMo word
representations, especially on out-of-domain data.

Some work has incorporated syntax into neu-
ral models for SRL. Roth and Lapata (2016) in-
corporate syntax by embedding dependency paths,
and similarly Marcheggiani and Titov (2017) en-
code syntax using a graph CNN over a pre-
dicted syntax tree, out-performing models with-
out syntax on CoNLL-2009. These works are
limited to incorporating partial dependency paths
between tokens whereas our technique incorpo-
rates the entire parse. Additionally, Marcheggiani
and Titov (2017) report that their model does not
out-perform syntax-free models on out-of-domain
data, a setting in which our technique excels.

MTL (Caruana, 1993) is popular in NLP, and
others have proposed MTL models which incor-
porate subsets of the tasks we do (Collobert et al.,
2011; Zhang and Weiss, 2016; Hashimoto et al.,
2017; Peng et al., 2017; Swayamdipta et al., 2017),
and we build off work that investigates where and
when to combine different tasks to achieve the
best results (Søgaard and Goldberg, 2016; Bin-
gel and Søgaard, 2017; Alonso and Plank, 2017).
Our specific method of incorporating supervision
into self-attention is most similar to the concur-
rent work of Liu and Lapata (2018), who use edge
marginals produced by the matrix-tree algorithm
as attention weights for document classification
and natural language inference.

The question of training on gold versus pre-
dicted labels is closely related to learning to search
(Daumé III et al., 2009; Ross et al., 2011; Chang
et al., 2015) and scheduled sampling (Bengio
et al., 2015), with applications in NLP to sequence
labeling and transition-based parsing (Choi and
Palmer, 2011; Goldberg and Nivre, 2012; Balles-
teros et al., 2016). Our approach may be inter-
preted as an extension of teacher forcing (Williams
and Zipser, 1989) to MTL. We leave exploration of
more advanced scheduled sampling techniques to

future work.

4 Experimental results

We present results on the CoNLL-2005 shared
task (Carreras and Màrquez, 2005) and the
CoNLL-2012 English subset of OntoNotes 5.0
(Pradhan et al., 2006), achieving state-of-the-art
results for a single model with predicted predicates
on both corpora. We experiment with both stan-
dard pre-trained GloVe word embeddings (Pen-
nington et al., 2014) and pre-trained ELMo rep-
resentations with fine-tuned task-specific parame-
ters (Peters et al., 2018) in order to best compare
to prior work. Hyperparameters that resulted in
the best performance on the validation set were
selected via a small grid search, and models were
trained for a maximum of 4 days on one TitanX
GPU using early stopping on the validation set.
We convert constituencies to dependencies using
the Stanford head rules v3.5 (de Marneffe and
Manning, 2008). A detailed description of hyper-
parameter settings and data pre-processing can be
found in Appendix A.

We compare our LISA models to four strong
baselines: For experiments using predicted predi-
cates, we compare to He et al. (2018) and the en-
semble model (PoE) from He et al. (2017), as well
as a version of our own self-attention model which
does not incorporate syntactic information (SA).
To compare to more prior work, we present addi-
tional results on CoNLL-2005 with models given
gold predicates at test time. In these experiments
we also compare to Tan et al. (2018), the previous
state-of-the art SRL model using gold predicates
and standard embeddings.

We demonstrate that our models benefit from
injecting state-of-the-art predicted parses at test
time (+D&M) by fixing the attention to parses
predicted by Dozat and Manning (2017), the win-
ner of the 2017 CoNLL shared task (Zeman et al.,
2017) which we re-train using ELMo embeddings.
In all cases, using these parses at test time im-
proves performance.

We also evaluate our model using the gold syn-
tactic parse at test time (+Gold), to provide an up-
per bound for the benefit that syntax could have
for SRL using LISA. These experiments show that
despite LISA’s strong performance, there remains
substantial room for improvement. In §4.3 we per-
form further analysis comparing SRL models us-
ing gold and predicted parses.



5033

Dev WSJ Test Brown Test
GloVe P R F1 P R F1 P R F1
He et al. (2017) PoE 81.8 81.2 81.5 82.0 83.4 82.7 69.7 70.5 70.1
He et al. (2018) 81.3 81.9 81.6 81.2 83.9 82.5 69.7 71.9 70.8
SA 83.52 81.28 82.39 84.17 83.28 83.72 72.98 70.1 71.51
LISA 83.1 81.39 82.24 84.07 83.16 83.61 73.32 70.56 71.91

+D&M 84.59 82.59 83.58 85.53 84.45 84.99 75.8 73.54 74.66
+Gold 87.91 85.73 86.81 — — — — — —

ELMo
He et al. (2018) 84.9 85.7 85.3 84.8 87.2 86.0 73.9 78.4 76.1
SA 85.78 84.74 85.26 86.21 85.98 86.09 77.1 75.61 76.35
LISA 86.07 84.64 85.35 86.69 86.42 86.55 78.95 77.17 78.05

+D&M 85.83 84.51 85.17 87.13 86.67 86.90 79.02 77.49 78.25
+Gold 88.51 86.77 87.63 — — — — — —

Table 1: Precision, recall and F1 on the CoNLL-2005 development and test sets.

WSJ Test P R F1
He et al. (2018) 84.2 83.7 83.9
Tan et al. (2018) 84.5 85.2 84.8
SA 84.7 84.24 84.47
LISA 84.72 84.57 84.64

+D&M 86.02 86.05 86.04

Brown Test P R F1
He et al. (2018) 74.2 73.1 73.7
Tan et al. (2018) 73.5 74.6 74.1
SA 73.89 72.39 73.13
LISA 74.77 74.32 74.55

+D&M 76.65 76.44 76.54

Table 2: Precision, recall and F1 on CoNLL-2005
with gold predicates.

4.1 Semantic role labeling

Table 1 lists precision, recall and F1 on the
CoNLL-2005 development and test sets using pre-
dicted predicates. For models using GloVe embed-
dings, our syntax-free SA model already achieves
a new state-of-the-art by jointly predicting pred-
icates, POS and SRL. LISA with its own parses
performs comparably to SA, but when supplied
with D&M parses LISA out-performs the previous
state-of-the-art by 2.5 F1 points. On the out-of-
domain Brown test set, LISA also performs com-
parably to its syntax-free counterpart with its own
parses, but with D&M parses LISA performs ex-
ceptionally well, more than 3.5 F1 points higher
than He et al. (2018). Incorporating ELMo em-

beddings improves all scores. The gap in SRL
F1 between models using LISA and D&M parses
is smaller due to LISA’s improved parsing ac-
curacy (see §4.2), but LISA with D&M parses
still achieves the highest F1: nearly 1.0 abso-
lute F1 higher than the previous state-of-the art
on WSJ, and more than 2.0 F1 higher on Brown.
In both settings LISA leverages domain-agnostic
syntactic information rather than over-fitting to the
newswire training data which leads to high perfor-
mance even on out-of-domain text.

To compare to more prior work we also evalu-
ate our models in the artificial setting where gold
predicates are provided at test time. For fair com-
parison we use GloVe embeddings, provide pred-
icate indicator embeddings on the input and re-
encode the sequence relative to each gold predi-
cate. Here LISA still excels: with D&M parses,
LISA out-performs the previous state-of-the-art by
more than 2 F1 on both WSJ and Brown.

Table 3 reports precision, recall and F1 on
the CoNLL-2012 test set. We observe perfor-
mance similar to that observed on ConLL-2005:
Using GloVe embeddings our SA baseline al-
ready out-performs He et al. (2018) by nearly
1.5 F1. With its own parses, LISA slightly
under-performs our syntax-free model, but when
provided with stronger D&M parses LISA out-
performs the state-of-the-art by more than 2.5
F1. Like CoNLL-2005, ELMo representations im-
prove all models and close the F1 gap between
models supplied with LISA and D&M parses. On
this dataset ELMo also substantially narrows the



5034

Dev P R F1
GloVe

He et al. (2018) 79.2 79.7 79.4
SA 82.32 79.76 81.02
LISA 81.77 79.65 80.70

+D&M 82.97 81.14 82.05
+Gold 87.57 85.32 86.43

ELMo
He et al. (2018) 82.1 84.0 83.0
SA 84.35 82.14 83.23
LISA 84.19 82.56 83.37

+D&M 84.09 82.65 83.36
+Gold 88.22 86.53 87.36

Test P R F1
GloVe

He et al. (2018) 79.4 80.1 79.8
SA 82.55 80.02 81.26
LISA 81.86 79.56 80.70

+D&M 83.3 81.38 82.33

ELMo
He et al. (2018) 81.9 84.0 82.9
SA 84.39 82.21 83.28
LISA 83.97 82.29 83.12

+D&M 84.14 82.64 83.38

Table 3: Precision, recall and F1 on the CoNLL-
2012 development and test sets. Italics indicate
a synthetic upper bound obtained by providing a
gold parse at test time.

difference between models with- and without syn-
tactic information. This suggests that for this chal-
lenging dataset, ELMo already encodes much of
the information available in the D&M parses. Yet,
higher accuracy parses could still yield improve-
ments since providing gold parses increases F1 by
4 points even with ELMo embeddings.

4.2 Parsing, POS and predicate detection

We first report the labeled and unlabeled attach-
ment scores (LAS, UAS) of our parsing models on
the CoNLL-2005 and 2012 test sets (Table 4) with
GloVe (G) and ELMo (E) embeddings. D&M
achieves the best scores. Still, LISA’s GloVe
UAS is comparable to popular off-the-shelf de-
pendency parsers such as spaCy,5 and with ELMo

5spaCy reports 94.48 UAS on WSJ using Stan-
ford dependencies v3.3: https://spacy.io/usage/

Data Model POS UAS LAS

WSJ
D&ME — 96.48 94.40
LISAG 96.92 94.92 91.87
LISAE 97.80 96.28 93.65

Brown
D&ME — 92.56 88.52
LISAG 94.26 90.31 85.82
LISAE 95.77 93.36 88.75

CoNLL-12
D&ME — 94.99 92.59
LISAG 96.81 93.35 90.42
LISAE 98.11 94.84 92.23

Table 4: Parsing (labeled and unlabeled attach-
ment) and POS accuracies attained by the models
used in SRL experiments on test datasets. Sub-
script G denotes GloVe and E ELMo embeddings.

Model P R F1

WSJ He et al. (2017) 94.5 98.5 96.4LISA 98.9 97.9 98.4

Brown He et al. (2017) 89.3 95.7 92.4LISA 95.5 91.9 93.7
CoNLL-12 LISA 99.8 94.7 97.2

Table 5: Predicate detection precision, recall and
F1 on CoNLL-2005 and CoNLL-2012 test sets.

embeddings comparable to the standalone D&M
parser. The difference in parse accuracy between
LISAG and D&M likely explains the large in-
crease in SRL performance we see from decoding
with D&M parses in that setting.

In Table 5 we present predicate detection pre-
cision, recall and F1 on the CoNLL-2005 and
2012 test sets. SA and LISA with and without
ELMo attain comparable scores so we report only
LISA+GloVe. We compare to He et al. (2017) on
CoNLL-2005, the only cited work reporting com-
parable predicate detection F1. LISA attains high
predicate detection scores, above 97 F1, on both
in-domain datasets, and out-performs He et al.
(2017) by 1.5-2 F1 points even on the out-of-
domain Brown test set, suggesting that multi-task
learning works well for SRL predicate detection.

4.3 Analysis

First we assess SRL F1 on sentences divided by
parse accuracy. Table 6 lists average SRL F1
(across sentences) for the four conditions of LISA
and D&M parses being correct or not (L±, D±).
Both parsers are correct on 26% of sentences.

facts-figures

https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures
https://spacy.io/usage/facts-figures


5035

L+/D+ L–/D+ L+/D– L–/D–
Proportion 26% 12% 4% 56%
SA 79.29 75.14 75.97 75.08
LISA 79.51 74.33 79.69 75.00

+D&M 79.03 76.96 77.73 76.52
+Gold 79.61 78.38 81.41 80.47

Table 6: Average SRL F1 on CoNLL-2005 for sen-
tences where LISA (L) and D&M (D) parses were
completely correct (+) or incorrect (–).

Orig. Fix
Labels

Move
Core
Arg.

Merge
Spans

Split
Spans

Fix
Span

Boundary

Drop
Arg.

Add
Arg.

85.0

87.5

90.0

92.5

95.0

97.5

100.0

F1 SA
LISA
+D&M
+Gold

Figure 3: Performance of CoNLL-2005 models af-
ter performing corrections from He et al. (2017).

Here there is little difference between any of the
models, with LISA models tending to perform
slightly better than SA. Both parsers make mis-
takes on the majority of sentences (57%), diffi-
cult sentences where SA also performs the worst.
These examples are likely where gold and D&M
parses improve the most over other models in
overall F1: Though both parsers fail to correctly
parse the entire sentence, the D&M parser is less
wrong (87.5 vs. 85.7 average LAS), leading to
higher SRL F1 by about 1.5 average F1.

Following He et al. (2017), we next apply a
series of corrections to model predictions in or-
der to understand which error types the gold
parse resolves: e.g. Fix Labels fixes labels on
spans matching gold boundaries, and Merge Spans
merges adjacent predicted spans into a gold span.6

In Figure 3 we see that much of the performance
gap between the gold and predicted parses is due
to span boundary errors (Merge Spans, Split Spans
and Fix Span Boundary), which supports the hy-
pothesis proposed by He et al. (2017) that incorpo-
rating syntax could be particularly helpful for re-
solving these errors. He et al. (2017) also point out

6Refer to He et al. (2017) for a detailed explanation of the
different error types.

PP NP VP SBAR ADVP PRN Other
0

10

20

30

40

50

60

%
sp

lit
/m

er
ge

la
be

ls 99

27
20

12 8 4 2

78

20
15

11
7

3 2

44

11
13

3
5

5
4

LISA
+D&M
+Gold

Figure 4: Percent and count of split/merge correc-
tions performed in Figure 3, by phrase type.

that these errors are due mainly to prepositional
phrase (PP) attachment mistakes. We also find
this to be the case: Figure 4 shows a breakdown
of split/merge corrections by phrase type. Though
the number of corrections decreases substantially
across phrase types, the proportion of corrections
attributed to PPs remains the same (approx. 50%)
even after providing the correct PP attachment to
the model, indicating that PP span boundary mis-
takes are a fundamental difficulty for SRL.

5 Conclusion

We present linguistically-informed self-attention:
a multi-task neural network model that effectively
incorporates rich linguistic information for seman-
tic role labeling. LISA out-performs the state-of-
the-art on two benchmark SRL datasets, includ-
ing out-of-domain. Future work will explore im-
proving LISA’s parsing accuracy, developing bet-
ter training techniques and adapting to more tasks.

Acknowledgments

We are grateful to Luheng He for helpful discus-
sions and code, Timothy Dozat for sharing his
code, and to the NLP reading groups at Google
and UMass and the anonymous reviewers for feed-
back on drafts of this work. This work was sup-
ported in part by an IBM PhD Fellowship Award
to E.S., in part by the Center for Intelligent Infor-
mation Retrieval, and in part by the National Sci-
ence Foundation under Grant Nos. DMR-1534431
and IIS-1514053. Any opinions, findings, conclu-
sions or recommendations expressed in this mate-
rial are those of the authors and do not necessarily
reflect those of the sponsor.



5036

References

Martın Abadi, Ashish Agarwal, Paul Barham, Eugene
Brevdo, Zhifeng Chen, Craig Citro, Greg S Corrado,
Andy Davis, Jeffrey Dean, Matthieu Devin, et al.
2015. Tensorflow: Large-scale machine learning on
heterogeneous systems, 2015. Software available
from tensorflow.org.

Héctor Martı́nez Alonso and Barbara Plank. 2017.
When is multitask learning effective? semantic se-
quence prediction under varying data conditions. In
EACL.

Miguel Ballesteros, Yoav Goldberg, Chris Dyer, and
Noah A. Smith. 2016. Training with exploration im-
proves a greedy stack lstm parser. In Proceedings of
the 2016 Conference on Empirical Methods in Nat-
ural Language Processing, pages 2005–2010.

Marzieh Bazrafshan and Daniel Gildea. 2013. Seman-
tic roles for string to tree machine translation. In
ACL.

Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and
Noam Shazeer. 2015. Scheduled sampling for se-
quence prediction with recurrent neural networks.
In NIPS.

Yoshua Bengio, Patrice Simard, and Paolo Frasconi.
1994. Learning long-term dependencies with gradi-
ent descent is difficult. IEEE Transactions on Neu-
ral Networks, 5(2):157–166.

Jonathan Berant, Vivek Srikumar, Pei-Chun Chen,
Brad Huang, Christopher D. Manning, Abby Van-
der Linden, Brittany Harding, and Peter Clark. 2014.
Modeling biological processes for reading compre-
hension. In EMNLP.

Joachim Bingel and Anders Søgaard. 2017. Identify-
ing beneficial task relations for multi-task learning
in deep neural networks. In EACL.

Xavier Carreras and Lluı́s Màrquez. 2005. Introduc-
tion to the conll-2005 shared task: Semantic role la-
beling. In CoNLL.

Rich Caruana. 1993. Multitask learning: a knowledge-
based source of inductive bias. In ICML.

Kai-Wei Chang, Akshay Krishnamurthy, Alekh Agar-
wal, Hal Daumé III, and John Langford. 2015.
Learning to search better than your teacher. In
ICML.

Yun-Nung Chen, William Yang Wang, and Alexander I
Rudnicky. 2013. Unsupervised induction and filling
of semantic slots for spoken dialogue systems using
frame-semantic parsing. In Proc. of ASRU-IEEE.

Jinho D. Choi and Martha Palmer. 2011. Getting the
most out of transition-based dependency parsing. In
Proceedings of the 49th Annual Meeting of the Asso-
ciation for Computational Linguistics: short papers,
pages 687–692.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. Journal of Machine Learning Research,
12(Aug):2493–2537.

Hal Daumé III, John Langford, and Daniel Marcu.
2009. Search-based structured prediction. Machine
Learning, 75(3):297–325.

Timothy Dozat. 2016. Incorporating nesterov momen-
tum into adam. In ICLR Workshop track.

Timothy Dozat and Christopher D. Manning. 2017.
Deep biaffine attention for neural dependency pars-
ing. In ICLR.

Nicholas FitzGerald, Oscar Täckström, Kuzman
Ganchev, and Dipanjan Das. 2015. Semantic role
labeling with neural network factors. In Proceed-
ings of the 2015 Conference on Empirical Methods
in Natural Language Processing, pages 960–970.

W. N. Francis and H. Kučera. 1964. Manual of infor-
mation to accompany a standard corpus of present-
day edited american english, for use with digital
computers. Technical report, Department of Lin-
guistics, Brown University, Providence, Rhode Is-
land.

Yoav Goldberg and Joakim Nivre. 2012. A dynamic
oracle for arc-eager dependency parsing. In Pro-
ceedings of COLING 2012: Technical Papers, pages
959–976.

Kazuma Hashimoto, Caiming Xiong, Yoshimasa Tsu-
ruoka, and Richard Socher. 2017. A joint many-task
model: Growing a neural network for multiple nlp
tasks. In Conference on Empirical Methods in Nat-
ural Language Processing.

Luheng He, Kenton Lee, Omer Levy, and Luke Zettle-
moyer. 2018. Jointly predicting predicates and argu-
ments in neural semantic role labeling. In ACL.

Luheng He, Kenton Lee, Mike Lewis, and Luke Zettle-
moyer. 2017. Deep semantic role labeling: What
works and whats next. In Proceedings of the 55th
Annual Meeting of the Association for Computa-
tional Linguistics.

Richard Johansson and Pierre Nugues. 2008.
Dependency-based semantic role labeling of
propbank. In Proceedings of the 2008 Confer-
ence on Empirical Methods in Natural Language
Processing, pages 69–78.

Diederik Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In 3rd Inter-
national Conference for Learning Representations
(ICLR), San Diego, California, USA.

Eliyahu Kiperwasser and Yoav Goldberg. 2016. Sim-
ple and accurate dependency parsing using bidirec-
tional LSTM feature representations. Transactions
of the Association for Computational Linguistics,
4:313–327.



5037

Thomas N. Kipf and Max Welling. 2017. Semisu-
pervised classification with graph convolutional net-
works. In International Conference on Learning
Representations.

Kenton Lee, Luheng He, Mike Lewis, and Luke Zettle-
moyer. 2017. End-to-end neural coreference resolu-
tion. In EMNLP.

Beth Levin. 1993. English verb classes and alterna-
tions: A preliminary investigation. University of
Chicago press.

Mike Lewis, Luheng He, and Luke Zettlemoyer. 2015.
Joint A* CCG Parsing and Semantic Role Labeling.
In EMNLP.

Ding Liu and Daniel Gildea. 2010. Semantic role
features for machine translation. In Proceedings
of the 23rd International Conference on Computa-
tional Linguistics (COLING).

Yang Liu and Mirella Lapata. 2018. Learning struc-
tured text representations. Transactions of the Asso-
ciation for Computational Linguistics, 6:63–75.

Andrew L. Maas, Awni Y. Hannun, and Andrew Y. Ng.
2013. Rectifier nonlinearities improve neural net-
work acoustic models. In ICML, volume 30.

Diego Marcheggiani, Anton Frolov, and Ivan Titov.
2017. A simple and accurate syntax-agnostic neural
model for dependency-based semantic role labeling.
In CoNLL.

Diego Marcheggiani and Ivan Titov. 2017. Encoding
sentences with graph convolutional networks for se-
mantic role labeling. In Proceedings of the 2017
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP).

Mitchell P. Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. 1993. Building a large annotated
corpus of English: The Penn TreeBank. Compu-
tational Linguistics – Special issue on using large
corpora: II, 19(2):313–330.

Marie-Catherine de Marneffe and Christopher D. Man-
ning. 2008. The stanford typed dependencies rep-
resentation. In COLING 2008 Workshop on Cross-
framework and Cross-domain Parser Evaluation.

Yurii Nesterov. 1983. A method of solving a con-
vex programming problem with convergence rate
o(1/k2). volume 27, pages 372–376.

Martha Palmer, Daniel Gildea, and Paul Kingsbury.
2005. The proposition bank: An annotated corpus
of semantic roles. Computational Linguistics, 31(1).

Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio.
2013. On the difficulty of training recurrent neural
networks. In Proceedings of the 30 th International
Conference on Machine Learning.

Hao Peng, Sam Thomson, and Noah A. Smith. 2017.
Deep multitask learning for semantic dependency
parsing. In ACL.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors for
word representation. In EMNLP.

Matthew E. Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In NAACL.

Sameer Pradhan, Alessandro Moschitti, Nianwen Xue,
Hwee Tou Ng, Anders Björkelund, Olga Uryupina,
Yuchen Zhang, and Zhi Zhong. 2006. Towards ro-
bust linguistic analysis using ontonotes. In Proceed-
ings of the Seventeenth Conference on Computa-
tional Natural Language Learning, pages 143–152.

Sameer Pradhan, Wayne Ward, Kadri Hacioglu, James
Martin, and Dan Jurafsky. 2005. Semantic role la-
beling using different syntactic views. In Proceed-
ings of the Association for Computational Linguis-
tics 43rd annual meeting (ACL).

Vasin Punyakanok, Dan Roth, and Wen-Tau Yih. 2008.
The importance of syntactic parsing and inference in
semantic role labeling. Computational Linguistics,
34(2):257–287.

Stéphane Ross, Geoffrey J. Gordon, and J. Andrew
Bagnell. 2011. A reduction of imitation learning and
structured prediction to no-regret online learning. In
Proceedings of the 14th International Conference on
Artificial Intelligence and Statistics (AISTATS).

Michael Roth and Mirella Lapata. 2016. Neural se-
mantic role labeling with dependency path embed-
dings. In Proceedings of the 54th Annual Meet-
ing of the Association for Computational Linguistics
(ACL), pages 1192–1202.

Anders Søgaard and Yoav Goldberg. 2016. Deep
multi-task learning with low level tasks supervised
at lower layers. In Proceedings of the 54th Annual
Meeting of the Association for Computational Lin-
guistics, pages 231–235.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. Journal of machine learning re-
search, 15(1):1929–1958.

Mihai Surdeanu, Lluı́s Màrquez, Xavier Carreras, and
Pere R. Comas. 2007. Combination strategies for
semantic role labeling. Journal of Artificial Intelli-
gence Research, 29:105–151.

Charles Sutton and Andrew McCallum. 2005. Joint
parsing and semantic role labeling. In CoNLL.

Swabha Swayamdipta, Sam Thomson, Chris Dyer, and
Noah A. Smith. 2017. Frame-semantic parsing with
softmax-margin segmental rnns and a syntactic scaf-
fold. In arXiv:1706.09528.



5038

Oscar Täckström, Kuzman Ganchev, and Dipanjan
Das. 2015. Efficient inference and structured learn-
ing for semantic role labeling. TACL, 3:29–41.

Zhixing Tan, Mingxuan Wang, Jun Xie, Yidong Chen,
and Xiaodong Shi. 2018. Deep semantic role label-
ing with self-attention. In AAAI.

Kristina Toutanova, Aria Haghighi, and Christopher D.
Manning. 2008. A global joint model for se-
mantic role labeling. Computational Linguistics,
34(2):161–191.

Kristina Toutanova, Dan Klein, Christopher D Man-
ning, and Yoram Singer. 2003. Feature-rich part-of-
speech tagging with a cyclic dependency network.
In Proceedings of the 2003 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics on Human Language Technology-
Volume 1, pages 173–180. Association for Compu-
tational Linguistics.

Gokhan Tur, Dilek Hakkani-Tür, and Ananlada Choti-
mongkol. 2005. Semi-supervised learning for spo-
ken language understanding using semantic role la-
beling. In ASRU.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In 31st Conference on Neural Information
Processing Systems (NIPS).

Hai Wang, Mohit Bansal, Kevin Gimpel, and David
McAllester. 2015. Machine comprehension with
syntax, frames, and semantics. In ACL.

R. J. Williams and D. Zipser. 1989. A learning algo-
rithm for continually running fully recurrent neural
networks. Neural computation, 1(2):270–280.

Daniel Zeman, Martin Popel, Milan Straka, Jan Ha-
jic, Joakim Nivre, Filip Ginter, Juhani Luotolahti,
Sampo Pyysalo, Slav Petrov, Martin Potthast, et al.
2017. Conll 2017 shared task: Multilingual parsing
from raw text to universal dependencies. In Pro-
ceedings of the CoNLL 2017 Shared Task: Multilin-
gual Parsing from Raw Text to Universal Dependen-
cies, pages 1–19, Vancouver, Canada. Association
for Computational Linguistics.

Yuan Zhang and David Weiss. 2016. Stack-
propagation: Improved representation learning for
syntax. In Proceedings of the 54th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 1557–1566. Asso-
ciation for Computational Linguistics.

Jie Zhou and Wei Xu. 2015. End-to-end learning of
semantic role labeling using recurrent neural net-
works. In Proc. of the Annual Meeting of the As-
sociation for Computational Linguistics (ACL).


