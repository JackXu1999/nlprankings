



















































How to Write Summaries with Patterns? Learning towards Abstractive Summarization through Prototype Editing


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 3741–3751,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

3741

How to Write Summaries with Patterns?
Learning towards Abstractive Summarization through Prototype Editing

Shen Gao ♠∗, Xiuying Chen ♠♣∗, Piji Li ♦, Zhangming Chan ♠♣, Dongyan Zhao ♠♣, Rui Yan ♠♣†
♠Wangxuan Institute of Computer Technology, Peking University, Beijing, China,

♦Tencent AI Lab, Shenzhen, China
♣Center for Data Science, Peking University, Beijing, China

{shengao, xy-chen, zhangming.chan, zhaody, ruiyan}@pku.edu.cn
pijili@tencent.com

Abstract

Under special circumstances, summaries
should conform to a particular style with pat-
terns, such as court judgments and abstracts in
academic papers. To this end, the prototype
document-summary pairs can be utilized to
generate better summaries. There are two
main challenges in this task: (1) the model
needs to incorporate learned patterns from
the prototype, but (2) should avoid copying
contents other than the patternized words—
such as irrelevant facts—into the generated
summaries. To tackle these challenges, we
design a model named Prototype Editing
based Summary Generator (PESG). PESG
first learns summary patterns and prototype
facts by analyzing the correlation between a
prototype document and its summary. Pro-
totype facts are then utilized to help extract
facts from the input document. Next, an edit-
ing generator generates new summary based
on the summary pattern or extracted facts.
Finally, to address the second challenge, a fact
checker is used to estimate mutual information
between the input document and generated
summary, providing an additional signal
for the generator. Extensive experiments
conducted on a large-scale real-world text
summarization dataset1 show that PESG
achieves the state-of-the-art performance in
terms of both automatic metrics and human
evaluations.

1 Introduction

Abstractive summarization can be regarded as a
sequence mapping task that maps the source text
to the target summary (Rush et al., 2015; Li et al.,
2017; Cao et al., 2018; Gao et al., 2019a). It has
drawn significant attention since the introduction

∗Equal contribution. Ordering is decided by a coin flip.
†Corresponding author.

1https://github.com/gsh199449/proto-summ

prototype
sum

m
ary

The court held that the defendant Wang had stolen the property
of others for the purpose of illegal possession. The amount was
large, and his behavior constituted the crime of theft. The accu-
sation of the public prosecution agency was established. The de-
fendant Wang has a criminal record and will be considered when
sentencing. Since the defendant Wang did not succeed because of
reasons other than his will, he could be punished lightly. After the
defendant confessed his crimes to the case, he was given a lighter
punishment according to law.

sum
m

ary

The court held that the accused Zhang and Fan stole property and
the amount was large. Their actions constituted the crime of theft.
The accusation of the public prosecution agency was established
and supported. This crime was committed within two years after the
release of the defendants Zhang and Fan. Thus they are recidivists
and this situation will be considered when sentencing. The fact
that defendants Zhang and Fan surrendered themselves and pleaded
guilty in court gives a lighter punishment according to law.

Table 1: An example of patternized summary genera-
tion. The text in red denotes patternized words shared
in different summaries, and text in blue denotes specific
facts.

of deep neural networks to natural language pro-
cessing. Under special circumstances, the gen-
erated summaries are required to conform to a
specific pattern, such as court judgments, diagno-
sis certificates, abstracts in academic papers, etc.
Take the court judgments for example, there is al-
ways a statement of the crime committed by the
accused, followed by the motives and the results
of the judgment. An example case is shown in Ta-
ble 1, where the summary shares the same writing
style and has words in common with the prototype
summary (retrieved from the training dataset).

Existing prototype based generation models
such as (Wu et al., 2018) are all applied on short
text, thus, cannot handle long documents sum-
marization task. Another series of works focus
on template-based methods such as (Oya et al.,
2014). However, template-based methods are too
rigid for our patternized summary generation task.
Hence, in this paper, we propose a summarization
framework named Prototype Editing based Sum-
mary Generator (PESG) that incorporates proto-
type document-summary pairs to improve summa-

https://github.com/gsh199449/proto-summ


3742

rization performance when generating summaries
with pattern. First, we calculate the cross depen-
dency between the prototype document-summary
pair to obtain a summary pattern and prototype
facts (explained in § 4.2). Then, we extract facts
from the input document with the help of the pro-
totype facts (explained in § 4.3). Next, a recurrent
neural network (RNN) based decoder is used to
generate a new summary, incorporating both the
summary pattern and extracted facts (explained in
§ 4.4). Finally, a fact checker is designed to pro-
vide mutual information between the generated
summary and the input document to prevent the
generator from copying irrelevant facts from the
prototype (explained in § 4.5). To evaluate PESG,
we collect a large-scale court judgment dataset,
where each judgment is a summary of the case
description with a patternized style. Extensive
experiments conducted on this dataset show that
PESG outperforms the state-of-the-art summariza-
tion baselines in terms of ROUGE metrics and hu-
man evaluations by a large margin.

Our contributions can be summarized as fol-
lows:
• We propose to use prototype information to

help generate better summaries with patterns.
• Specifically, we propose to generate the sum-

mary incorporating the prototype summary pattern
and extracted facts from input document.
•We provide mutual information signal for the

generator to prevent copying irrelevant facts from
the prototype.
•We release a large-scale prototype based sum-

marization dataset that is beneficial for the com-
munity.

2 Related Work

We detail related work on text summarization and
prototype editing.

Text summarization can be classified into ex-
tractive and abstractive methods. Extractive meth-
ods (Narayan et al., 2018b; Chen et al., 2018) di-
rectly select salient sentences from an article to
compose a summary. One shortcoming of these
models is that they tend to suffer from redundancy.
Recently, with the emergence of neural network
models for text generation, a vast majority of the
literature on summarization (Ma et al., 2018; Zhou
et al., 2018; Gao et al., 2019a; Chen et al., 2019)
is dedicated to abstractive summarization, which
aims to generate new content that concisely para-

phrases a document from scratch.
Another line of research focuses on prototype

editing. (Guu et al., 2018) proposed the first pro-
totype editing model, which samples a prototype
sentence from training data and then edits it into
a new sentence. Following this work, (Wu et al.,
2018) proposed a new paradigm for response gen-
eration, which first retrieves a prototype response
from a pre-defined index and then edits the pro-
totype response. (Cao et al., 2018) applied this
method on summarization, where they employed
existing summaries as soft templates to gener-
ate new summary without modeling the depen-
dency between the prototype document, summary
and input document. Different from these soft
attention methods, (Cai et al., 2018) proposed a
hard-editing skeleton-based model to promote the
coherence of generated stories. Template-based
summarization is also a hard-editing method (Oya
et al., 2014), where a multi-sentence fusion algo-
rithm is extended in order to generate summary
templates.

Different from all above works, our model fo-
cuses on patternized summary generation, which
is more challenging than traditional news summa-
rization and short sentence prototype editing.

3 Problem Formulation

For an input document X = {x1, x2, . . . , xTm},
we assume there is a ground truth summary Y =
{y1, y2, . . . , yTn}. In our prototype summariza-
tion task, a retrieved prototype document X̂ =
{x̂1, x̂2, . . . , x̂Tm}with a corresponding prototype
summary Ŷ = {ŷ1, ŷ2, . . . , ŷTn} is also attached
according to their similarities with X .

For a given document X , our model extracts
salient facts from X guided by a prototype doc-
ument X̂ , and then generates the summary Y

′
by

referring to the prototype summary Ŷ . The goal
is to generate a summary Y

′
that not only follows

a patternized style (as defined by prototype sum-
mary Ŷ ) but also is consistent with the facts in
document X .

4 Model

4.1 Overview
In this section, we propose our prototype editing
based summary generator, which can be split into
two main parts, as shown in Figure 1:
• Summary Generator. (1) Prototype Reader

analyzes the dependency between X̂ and Ŷ to de-



3743

Fact Checker

Editing Generator

Prototype Reader

Prototype
Document

Prototype
Summary

Input Document

Dependence Analysis

Summary
Pattern

Fact
Extraction

Extracted
Facts

Lo
ca

l
M

at
ch

in
g

G
lo

ba
l

M
at

ch
in

g

Editing
Gate

Attention

Prototype
Facts

Figure 1: Overview of PESG. We divide our model into
four parts: (1) Prototype Reader; (2) Fact Extraction;
(3) Editing Generator; (4) Fact Checker.

termine the summary pattern and prototype facts.
(2) Fact Extraction module extracts facts from
the input document under the guidance of the pro-
totype facts. (3) Editing Generator module gen-
erates the summary Y

′
of document X by incor-

porating summary pattern and facts.
• Fact Checker estimates the mutual informa-

tion between the generated summary Y
′

and input
document X . This information provides an addi-
tional signal for the generation process, preventing
irrelevant facts from being copied from the proto-
type document.

4.2 Prototype Reader

To begin with, we use an embedding matrix e to
map a one-hot representation of each word in X ,
X̂ , Ŷ into a high-dimensional vector space. We
then employ a bi-directional recurrent neural net-
work (Bi-RNN) to model the temporal interactions
between words:

hxt = Bi-RNNx(e(xt), h
x
t−1), (1)

ĥxt = Bi-RNNx(e(x̂t), ĥ
x
t−1), (2)

ĥyt = Bi-RNNy(e(ŷt), ĥ
y
t−1), (3)

where hxt , ĥ
x
t and ĥ

y
t denote the hidden state of t-

th step in Bi-RNN for X , X̂ and Ŷ , respectively.
Following (Tao et al., 2018; Gao et al., 2019b; Hu
et al., 2019), we choose long short-term memory
(LSTM) as the cell for Bi-RNN.

On one hand, the sections in the prototype sum-
mary that are not highly related to the prototype
document are the universal patternized words and
should be emphasized when generating the new
summary. On the other hand, the sections in the
prototype document that are highly related to the

prototype summary are useful facts that can guide
the process of extracting facts from input docu-
ment. Hence, we employ a bi-directional attention
mechanism between a prototype document and
summary to analyze the cross-dependency, that is,
from document to summary and from summary to
document. Both of these attentions are derived
from a shared similarity matrix, S ∈ RTm×Tn ,
calculated by the hidden states of prototype doc-
ument X̂ and prototype summary Ŷ . Sij indicates
the similarity between the i-th document word x̂i
and j-th summary word ŷj and is computed as:

Sij = α(ĥ
x
i , ĥ

y
j ),

α(x, y) = wᵀ[x⊕ y ⊕ (x⊗ y)],
(4)

where α is a trainable scalar function that cal-
culates the similarity between two input vectors.
⊕ denotes a concatenation operation and ⊗ is an
element-wise multiplication.

We use ast = mean(S:t) ∈ R to represent the
attention weight on the t-th prototype summary
word by document words, which will learn to as-
sign high weights to highly related universal patt-
ernized words when generating a summary. From
ast , we obtain the weighted sum of the hidden
states of prototype summary as “summary pat-
tern” l = {l1, . . . , lTn}, where li is:

li = a
s
i ĥ

y
i . (5)

Similarly, adt = mean(St:) ∈ R assigns high
weights to the words in a prototype document that
are relevant to the prototype summary. A convo-
lutional layer is then applied to extract “prototype
facts” r̂t from the prototype document:

r̂t = CNN(adt ĥ
x
t ). (6)

We sum the prototype facts to obtain the overall
representation of these facts:

q =
∑Tm

t r̂t. (7)

4.3 Fact Extraction
In this section, we discuss how to extract useful
facts from an input document with the help of pro-
totype facts.

We first extract the facts from an input docu-
ment by calculating their relevance to prototype
facts. The similarity matrix E is then calculated
between the weighted prototype document adi ĥ

x
i

and input document representation hxj :

Eij = α(a
d
i ĥ

x
i , h

x
j ), (8)



3744

SRU

SRU

GRU

GRU

Extracted Facts

Editing
Generator

Figure 2: Framework of fact extraction module.

where α is the similarity function introduced in
Equation 4. Then, we sum up Eij along the length
of the prototype document to obtain the weight
Ej =

∑Tm
ti Etj for j-th word in the document.

Next, similar to Equation 6, a convolutional layer
is applied on the weighted hidden states Ethxt to
obtain the fact representation rt from the input
document:

rt = CNN(Ethxt ). (9)

Inspired by the polishing strategy in extractive
summarization (Chen et al., 2018), we propose to
use the prototype facts to polish the extracted facts
rt and obtain the final fact representation m., as
shown in Figure 2. Generally, the polishing pro-
cess consists of two hierarchical recurrent layers.
The first recurrent layer is made up of Selective
Recurrent Units (SRUs), which take facts r· and
polished fact qk as input, outputting the hidden
state hkTm . The second recurrent layer consists of
regular Gated Recurrent Units (GRUs), which are
used to update the polished fact from qk to qk+1
using hkTm .

SRU is a modified version of the original GRU
introduced in (Chen et al., 2018), details of which
can be found in Appendix A. Its difference from
GRU lies in that the update gate in SRU is decided
by both the polished fact qk and original fact rt to-
gether. The t-th hidden state of SRU is calculated
as:

hkt = SRU(rt, qk). (10)

We take hkTm as the overall representation of all in-
put facts r·. In this way, SRU can decide to which
degree each unit should be updated based on its
relationship with the polished fact qk.

Next, hkTm is used to update the polished fact
qk using the second recurrent layer, consisting of
GRUs:

mk+1, qk+1 = GRU(hkTm , qk), (11)

where qk is the cell state, hkTm is the input and
mk+1 is the output hidden state. q0 is initialized
using q in Equation 7. This iterative process is
conducted K times, and each output mk is stored
as extracted facts M = {m1,m2, . . . ,mK}. In
this way, M stores facts with different polished
levels.

4.4 Editing Generator

The editing generator aims to generate a summary
based on the input document, prototype summary
and extracted facts. As with the settings of proto-
type reader, we use LSTM as the RNN cell. We
first apply a linear transformation on the summa-
tion of the summary pattern l

′
=
∑Tn

i li and input
document representations hxTm , and then employ
this vector as the initial state d0 of the RNN gen-
erator as shown in Equation 12. The procedure of
t-th generation is shown in Equation 13:

d0 =We[h
x
Tm ⊕ l

′
] + be, (12)

dt = LSTM(dt−1, [git−1 ⊕ e(yt−1)]), (13)

where We, be are trainable parameters, dt is the
hidden state of the t-th generating step, and git−1
is the context vector produced by the standard at-
tention mechanism (Bahdanau et al., 2015).

To take advantage of the extracted facts M and
prototype summary l, we incorporate them both
into summary generation using a dynamic atten-
tion. More specifically, we utilize a matching
function f to model the relationship between the
current decoding state dt and each vi (vi can be a
extracted fact mi or summary pattern li):

δit =
exp(f(vi, dt))∑K
j exp(f(vj , dt))

, (14)

g∗t =
∑K

i δitvi, (15)

where g∗t can be g
m
t or g

s
t for attending to extracted

facts or a summary pattern, respectively. We use a
simple but efficient bi-linear layer as the matching
function f = miWfdt. As for combining gmt and
gst , we propose to use an “editing gate” γ, which is
determined by the decoder state dt, to decide the
importance of the summary pattern and extracted
facts at each decoding step.

γ = σ (Wgdt + bg) , (16)

where σ denotes the sigmoid function. Using
the editing gate, we obtain ght which dynamically



3745

combines information from the extracted facts and
summary pattern with the editing gate γ, as:

ght = [γg
m
t ⊕ (1− γ) gst ] . (17)

Finally, the context vector ght is concatenated with
the decoder state dt and fed into a linear layer to
obtain the generated word distribution Pv:

dot =Wo[dt ⊕ ght ] + bo, (18)
Pv = softmax (Wvdot + bv) . (19)

The loss is the negative log likelihood of the target
word yt:

Ls = −
∑Tn

t=1 logPv(yt). (20)

In order to handle the out-of-vocabulary (OOV)
problem, we equip our decoder with a pointer net-
work (Gu et al., 2016; Vinyals et al., 2015; See
et al., 2017). This process is the same as the model
described in (See et al., 2017), thus, is omit here
due to limited space.

What’s more, previous work (Holtzman et al.,
2018) has found that using a cross entropy loss
alone is not enough for generating coherent text.
Similarly, in our task, usingLs alone is not enough
to distinguish a good summary with accurate facts
from a bad summary with detailed facts from the
prototype document (see § 6.2). Thus, we propose
a fact checker to determine whether the generated
summary is highly related to the input document.

4.5 Fact Checker
To generate accurate summaries that are consistent
with the detailed facts from the input document
rather than facts from the prototype document, we
add a fact checker to provide additional training
signals for the generator. Following (Hjelm et al.,
2018), we employ the neural mutual information
estimator to estimate the mutual information be-
tween the generated summary Y

′
and its corre-

sponding document X , as well as the prototype
document X̂ . Generally, mutual information is
estimated from a local and global level, and we
expect the matching degree to be higher between
the generated summary and input document than
the prototype document. An overview of the fact
checker is shown in Figure 3.

To begin, we use a local matching network to
calculate the matching degree, for local features,
between the generated summary and the input, as
well as prototype document. Remember that, in

Global Matching

Input
Document

Prototype
Document

Generated
Summary

Tile

Local Matching 

Figure 3: Framework of fact checker module.

§ 4.3, we obtain the fact representation of an input
document ri and prototype facts r̂i. Combining
these with the final hidden state dTn of the genera-
tor RNN (in Equation 13), yields the local features
of input extracted facts and the prototype facts:

Cr = {dTn ⊕ r1, . . . , dTn ⊕ rTm}, (21)
Cf = {dTn ⊕ r̂1, . . . , dTn ⊕ r̂Tm}. (22)

A 1× 1 convolutional layer and a fully-connected
layer are applied to score these two features:

τ rl = CNNl(C
r), τ fl = CNNl(C

f ), (23)

where τ rl ∈ R, τ
f
l ∈ R represent the local match-

ing degree between the generated summary and
input document and prototype document, respec-
tively. We want the generated summary to be more
similar to the input document than the prototype
document. Thus, the optimization objective of the
local matching network is to minimize Ll:

Ll = −
(
log(τ rl ) + log(1− τ

f
l )
)
. (24)

We also have a global matching network to mea-
sure the matching degree, for global features, be-
tween the generated summary and the input doc-
ument, as well as prototype document. To do so,
we concatenate the representation of the generated
summary with the final hidden state of the input
document hxTm and final state of the prototype doc-
ument ĥxTm , respectively, and apply a linear layer
to these:

τ rg = relu(Wm[dTn ⊕ hxTm ] + bm), (25)

τ fg = relu(Wm[dTn ⊕ ĥxTm ] + bm), (26)

where Wm, bm are trainable parameters and τ rg ∈
R and τ fg ∈ R represent the matching degree be-
tween the generated summary and the input docu-
ment, and prototype document, respectively. The
objective of this global matching network, similar
to the local matching network, is to minimize:

Lg = −
(
log(τ rg ) + log(1− τ fg )

)
. (27)



3746

Acronym Gloss

PESG-FC PESG w/o Fact Checker
PESG-PR PESG w/o Prototype Reader
PESG-SS PESG w/o Summary Pattern
PESG-FG PESG w/o FGRU

Table 2: Ablation models for comparison.

Finally, we combine the local and global loss func-
tions to obtain the final loss L, which we use L to
calculate the gradients for all parameters:

L = �Lg + ηLl + Ls, (28)

where �, η are both hyper parameters. To optimize
the trainable parameters, we employ the gradient
descent method Adagrad (Duchi et al., 2010) to
update all parameters.

5 Experimental Setup

5.1 Dataset

We collect a large-scale prototype based summa-
rization dataset2, which contains 2,003,390 court
judgment documents. In this dataset, we use a case
description as an input document and the court
judgment as the summary. The average lengths
of the input documents and summaries are 595.15
words and 273.57 words respectively. The per-
centage of words common to a prototype sum-
mary and the reference summary is 80.66%, which
confirms the feasibility and necessity of prototype
summarization. Following other summarization
datasets (Grusky et al., 2018; Kim et al., 2019;
Narayan et al., 2018a), we also count the novel n-
grams in a summary compared with the n-grams in
the original document, and the percentage of novel
n-grams are 51.21%, 84.59%, 91.48%, 94.83%
for novel 1-grams to 4-grams respectively. The
coverage, compression and density (Grusky et al.,
2018) are commonly used as metrics to evalu-
ate the abstractness of a summary. For the sum-
maries in our dataset, the coverage percentage is
48.78%, compression is 2.28 and density is 1.31.
We anonymize entity tokens into special tags, such
as using “PERS” to replace a person’s name.

5.2 Comparisons

In order to prove the effectiveness of each mod-
ule of PESG, we conduct several ablation studies,
shown in Table 2. We also compare our model
with the following baselines: (1) Lead-3 is a

2https://github.com/gsh199449/proto-summ

commonly used summarization baseline (Nallap-
ati et al., 2017; See et al., 2017), which selects
the first three sentences of document as the sum-
mary. (2) S2S is a sequence-to-sequence frame-
work with a pointer network, proposed by (See
et al., 2017). (3) Proto is a context-aware pro-
totype editing dialog response generation model
proposed by (Wu et al., 2018). (4) Re3Sum, pro-
posed by (Cao et al., 2018), uses an IR platform to
retrieve proper summaries and extends the seq2seq
framework to jointly conduct template-aware sum-
mary generation. (5) Uni-model was proposed
by (Hsu et al., 2018), and is the current state-
of-the-art abstractive summarization approach on
the CNN/DailyMail dataset. (6) We also directly
concatenate the prototype summary with the orig-
inal document as input for S2S and Uni-model,
named as Concat-S2S and Concat-Uni, re-
spectively.

5.3 Evaluation Metrics
For the court judgment dataset, we evaluate
standard ROUGE-1, ROUGE-2 and ROUGE-
L (Lin, 2004) on full-length F1 following pre-
vious works (Nallapati et al., 2017; See et al.,
2017; Paulus et al., 2018), where ROUGE-1 (R1),
ROUGE-2 (R2), and ROUGE-L (RL) refer to the
matches of unigram, bigrams, and the longest
common subsequence respectively.

(Schluter, 2017) notes that only using the
ROUGE metric to evaluate summarization quality
can be misleading. Therefore, we also evaluate our
model by human evaluation. Three highly edu-
cated participants are asked to score 100 randomly
sampled summaries generated by three models:
Uni-model, Re3Sum and PESG. The statisti-
cal significance of observed differences between
the performance of two runs is tested using a two-
tailed paired t-test and is denoted using N(or H) for
strong (or weak) significance for α = 0.01.

5.4 Implementation Details
We implement our experiments in Tensor-
Flow (Abadi et al., 2016) on an NVIDIA GTX
1080 Ti GPU. The word embedding dimension is
256 and the number of hidden units is 256. The
batch size is set to 64. We padded or cut in-
put document to contain exactly 250 words, and
the decoding length is set to 100. � and η from
the Equation 28 are both set to 1.0. We initialize
all of the parameters randomly using a Gaussian
distribution. We use Adagrad optimizer (Duchi

https://github.com/gsh199449/proto-summ


3747

The court held that the defendant PERS was drunk driving a motor vehicle on the road, and his behavior constituted 
a dangerous driving offence and should be punished according to law.

Th
e c

ou
rt

he
ld 

tha
t

the
 de

fen
da

nt

on the
 ro

ad

wa
s d

ru
nk

dr
ivi

ng

mo
tor

 ve
hic

le

his be
ha

vio
r

co
ns

titu
ted

da
ng

ero
us

dr
ivi

ng

ac
co

rd
ing

 to
 la

w

sh
ou

ld
be pu

nis
he

d

Figure 4: Visualizations of editing gate.

R1 R2 RL

Lead-3 32.9 13.3 30.0
Re3Sum 36.3 24.0 36.0
S2S 37.6 24.6 37.3
Uni-model 37.9 25.0 37.6
Concat-S2S 34.2 20.3 34.3
Concat-Uni 37.4 24.3 36.9
PESG 40.2 28.1 39.9

Proto – – –

Table 3: ROUGE scores comparison with baselines.
Proto directly copies from the prototype summary as
generated summary.

Fluency Consistency

Uni-model 1.61 1.53
Re3Sum 1.53 1.14
PESG 1.86N 1.73N

Table 4: Fluency and consistency comparison by hu-
man evaluation.

et al., 2010) as our optimizing algorithm and em-
ploy beam search with size 5 to generate more
fluency summary sentence. We also apply gra-
dient clipping (Pascanu et al., 2013) with range
[−5, 5] during training. We use dropout (Srivas-
tava et al., 2014) as regularization with keep prob-
ability p = 0.7.

6 Experimental Result

6.1 Overall Performance

We compare our model with the baselines listed
in Table 3. Our model performs consistently bet-
ter than other summarization models including the
state-of-the-art model with improvements of 6%,
12% and 6% in terms of ROUGE-1, ROUGE-2
and ROUGE-L. This demonstrates that prototype
document-summary pair provides strong guidance
for summary generation that cannot be replaced by
other complicated baselines without prototype in-
formation. Meanwhile, directly concatenating the

prototype summary with the original input does
not increase performance, instead leading to drops
of 9%, 17%, 8% and 1%, 3%, 2% in terms of
ROUGE 1,2,L on the S2S and Unified models,
respectively. As for the baseline model Proto,
we found that it directly copies from the prototype
summary as generated summary, which leads to a
totally useless and incorrect summary.

For the human evaluation, we asked annotators
to rate each summary according to its consistency
and fluency. The rating score ranges from 1 to 3,
with 3 being the best. Table 4 lists the average
scores of each model, showing that PESG outper-
forms the other baseline models in both fluency
and consistency. The kappa statistics are 0.33 and
0.29 for fluency and consistency respectively, and
that indicates the moderate agreement between an-
notators. To prove the significance of these re-
sults, we also conduct the paired student t-test be-
tween our model and Re3Sum (row with shaded
background). We obtain a p-value of 2 × 10−7
and 9×10−12 for fluency and consistency, respec-
tively.

We also analyze the effectiveness of perfor-
mance by the two hyper-parameters: η and �.
It turns out that our model has a consistently
good performance, with ROUGE-1, ROUGE-2,
ROUGE-L scores above 39.5, 27.5, 39.4, which
demonstrates that our model is very robust.

6.2 Ablation Study
The ROUGE scores of different ablation models
are shown in Table 5. All ablation models perform
worse than PESG in terms of all metrics, which
demonstrates the preeminence of PESG. More im-
portantly, by this controlled experiment, we can
verify the contributions of each modules in PESG.

6.3 Analysis of Editing Generator
We visualize the editing gate (illustrated in Equa-
tion 16) of two randomly sampled examples,



3748

39

40
court

26

28

Ro
ug

e 
Sc

or
e

rouge-1
rouge-L
rouge-2

1 2 3 4 5 6
Hop Number

38

39

40

Figure 5: Visualizations
of ROUGE score with
different hop numbers.

R1 R2 RL

PESG-FC 38.7 26.2 38.6
PESG-PR 37.3 24.6 37.0
PESG-SS 38.6 25.6 38.3
PESG-FG 38.8 25.9 38.5

Table 5: ROUGE scores
of different ablation
models of PESG.

shown in Figure 4. A lower weight (lighter color)
means that the word is more likely to be copied
from the summary pattern; that is to say, this word
is a universal patternized word. We can see that the
phrase本院认为 (the court held that) has a lower
weight than the name of the defendant (PERS),
which is consistent with the fact that (the court
held that) is a patternized word and the name of
the defendant is closely related to the input docu-
ment.

We also show a case study in Table 6, which in-
cludes the input document and reference summary
with the generated summaries. Underlined text de-
notes a grammar error and a strike-through line de-
notes a fact contrary to the input document. We
only show part of the document and summary due
to limited space; the full version is shown in Ap-
pendix. As can be seen, the summary generated by
Uni-model faces an inconsistency problem and
the summary generated by Re3Sum is contrary to
the facts described in the input document. How-
ever, PESG overcomes both of these problems and
generates an accurate summary with good gram-
mar and logic.

6.4 Analysis of Fact Extraction Module

We investigate the influence of the iteration num-
ber when facts are extracted. Figure 5 illustrates
the relationship between iteration number and the
f-value of the ROUGE score. The results show that
the ROUGE scores first increases with the number
of hops. After reaching an upper limit it then be-
gins to drop. This phenomenon demonstrates that
the fact extraction module is effective by polishing
the facts representation.

7 Conclusion

In this paper, we propose a framework named Pro-
totype Editing based Summary Generator (PESG),
which aims to generate summaries in formal

安徽省人民法院作出刑事判决，以斗殴罪判处被告人PERS 有期徒
刑YEARS。合肥市监狱提出减刑意见。执行机关以PERS在服刑期间
确有悔改表现，已获得奖励二个，建议对其减刑。经审理查明，罪
犯PERS在服刑期间，能认罪服法,努力参加技术学习。(Anhui Provin-
cial People’s Court made a criminal judgment and sentenced the defendant
PERS to YEARS imprisonment for the crime of fighting. Hefei Prison pro-
posed a commutation sentence since PERS had repentance and received two
awards during his sentence. It was found through trial that the criminal PERS
pleaded guilty and strived to participate in technical learning while serving his
sentence.)

reference

本院认为，罪犯PERS 在服刑期间确有悔改，表现符合法定减
刑条件。依据《中华人民共和国刑法》第NUM 款之规定，对罪
犯PERS 减去自本裁定送达之日起至DATE 止尚未执行完毕的刑
罚。本裁定送达后即发生法律效力。(The court believed that the
criminal PERS did have repentance during his sentence, and his per-
formance was in line with the statutory commutation conditions. Ac-
cording to the provisions of Section NUM of the Criminal Law of the
People’s Republic of China, the court decided to exempt PERS from
penalty that had not been executed since the date of delivery of this
ruling until DATE. Legal effect would occur upon the delivery of this
ruling.)

U
n
i
-
m
o
d
e
l

本院认为，被告人PERS 以非法占有为目的，秘密窃取他人财物
，数额较大，其行为已构成盗窃罪。公诉机关指控被告人PERS勋
斗殴罪的事实清楚，证据确实充分，本院予以支持。(The court
held that the defendant PERS secretly stole the property of others for
the purpose of illegal possession, the stolen amount was relatively large,
and his behavior had constituted theft. The fact that defendant PERS
committed the crime of fighting was clear, the evidence was indeed suf-
ficient, and the court supported it.)

R
e
3S
u
m

本院认为, PERS 在道路上驾驶机动车,其行为已构成上诉人服刑
确系罪. 公诉机关指控的犯罪事实清楚，证据确实充分。(The
court held that PERS was driving a motor vehicle on the road, and his
behavior constituted that the appellant was guilty of serving a sentence.
The criminal facts accused by the public prosecution agency were clear
and the evidence was indeed sufficient.)

PE
SG

本院认为，罪犯PERS 在服刑期间，确有悔改表现。符合法定减
刑条件，依照《中华人民共和国刑法》第NUM 条、第NUM 条
之规定，裁定如下对罪犯PERS减去有期徒刑MONTHS。本裁定
送达后即发生法律效力。(The court held that the criminal PERS did
have repentance during his sentence. In accordance with the provisions
of NUM and NUM of the Criminal Law of the People’s Republic of
China, the ruling was as follows: exempted PERS from the MONTHS
penalty. Legal effect would occur upon the delivery of this ruling.)

Table 6: Examples of the generated natural answers by
PESG and other models.

writing scenarios, where summaries should con-
form to a patternized style. Given a prototype
document-summary pair, our model first calcu-
lates the cross dependency between the prototype
document-summary pair. Next, a fact extraction
module is employed to extract facts from the docu-
ment, which are then polished. Finally, we design
an editing-based generator to produce a summary
by incorporating the polished fact and summary
pattern. To ensure that the generated summary
is consistent with the input document, we pro-
pose a fact checker to estimate the mutual infor-
mation between the input document and generated
summary. Our model outperforms state-of-the-art
methods in terms of ROUGE scores and human
evaluations by a large margin, which demonstrates
the effectiveness of PESG.

Acknowledgments

We would like to thank the anonymous reviewers
for their constructive comments. We would also



3749

like to thank Anna Hennig in Inception Institute
of Artificial Intelligence for her help on this paper.
This work was supported by the National Key Re-
search and Development Program of China (No.
2017YFC0804001), the National Science Founda-
tion of China (NSFC No. 61876196 and NSFC
No. 61672058)

A SRU Cell

Gated recurrent unit (GRU) (Cho et al., 2014) is
a gating mechanism in recurrent neural networks,
which incorporate an update gate in an RNN. We
first give the details of the original GRU here.

ui = σ(W
(u)xi + U

(u)hi−1 + b
(u)), (29)

ri = σ(W
(r)xi + U

(r)hi−1 + b
(r)), (30)

h̃i = tanh(W (h)xi + ri ◦ Uhi−1 + b(h)), (31)
hi = ui ◦ h̃i + (1− ui) ◦ hi−1, (32)

where σ is the sigmoid activation function,
W (u),W (r),W (h) ∈ RnH×nI , U (u), U (r), U ∈
RnH×nH , nH is the hidden size, and nI is the size
of input xi. In the original version of GRU, the
update gate ui in Equation 29 is used to decide
how much of the hidden state should be retained
and how much should be updated. In our case,
we want to decide which facts are salient accord-
ing to the polished facts qk−1 at the k-th hop. To
achieve this, we replace the calculation of ui with
the newly computed update gate gi:

fi = [xi ◦ qk−1;xi; qk−1], (33)
zi =W

(2) tanh(W (1)fi + b
(1)) + b(2), (34)

gi =
exp(zi)∑ns
j=1 exp(zj)

, (35)

where W (2),W (1), b(1), b(2) are all trainable pa-
rameters and k is the hop number in the multi-hop
situation which is a hyper-parameter manually set.
The effectiveness of this hyper-parameter is ver-
ified in the experimental results shown in § 6.4.
Equation 32 now becomes:

hi = gi ◦ h̃i + (1− gi) ◦ hi−1. (36)

We use the name “SRU” to denote this modified
version of an GRU cell.

B Case Study

安徽省合肥市包河区人民法院作出刑事判决，以斗殴罪判处被告
人PERS 有期徒刑YEARS 。案经本院二审，准许上诉人撤回上诉。
判决生效后交付执行。执行机关合肥市义城监狱于DATE提出减刑意
见，报送本院审理。本院依法组成合议庭进行了审理，现已审理终
结。执行机关以罪犯PERS在服刑期间确有悔改表现，已获得奖励二
个，建议对其减刑。经审理查明，罪犯PERS在服刑期间，能认罪服
法，努力参加技术学习，积极完成生产任务。(The People’s Court of
Baohe District, Hefei City, Anhui Province made a criminal judgment and
sentenced the defendant PERS to YEARS imprisonment for the crime of
fighting. In the second instance of the court, the appellant was allowed to
withdraw the appeal. The judgment takes effect after being delivered. The
enforcement agency Hefei City Yicheng Prison put forward a commutation
opinion on DATE and submitted it to the court for trial. The court had
formed a collegiate bench in accordance with the law and had now end the
trial. Criminal PERS had repentance during his sentence and received two
awards, thus the enforcement agency suggested he should be commuted.
Investigation confirmed that the criminal PERS was able to plead guilty
while serving his sentence, strived to participate in technical studies, and
completed production tasks.)

reference

本院认为，罪犯PERS 在服刑期间确有悔改表现符合法定减
刑条件。依据《中华人民共和国刑法》第NUM款之规定，裁
定如下对罪犯PERS减去自本裁定送达之日起至DATE止尚未
执行完毕的刑罚。本裁定送达后即发生法律效力。(The court
held that the criminal PERS did have repentance during the period
of serving his sentence in accordance with the statutory commuta-
tion conditions. According to the provisions of NUM Section of the
Criminal Law of the People’s Republic of China, the court decided
to exempt PERS from penalty that had not been executed since the
date of delivery of this ruling until DATE. Legal effect would occur
upon the delivery of this ruling.)

U
nified

本院认为，被告人PERS 以非法占有为目的，秘密窃取他人
财物，数额较大，其行为已构成盗窃罪，依法应予惩处。
公诉机关指控被告人PERS 聚众斗殴罪的事实清楚，证据确
实充分，指控罪名成立，本院予以支持。被告人PERS 曾因
故意犯罪被判处有期徒刑，在刑罚执行完毕后YEARS 内再
犯，应当判处有期徒刑以上刑罚之罪，是累犯，依法应当从
重处罚。(The court held that the defendant PERS secretly stole
the property of others for the purpose of illegal possession, and the
amount was relatively large. His behavior had constituted theft and
should be punished according to law. The fact that the defendant
PERS commiting the crimes of the fighting was clear, the evidence
was indeed sufficient, thus the charges were established and the
court supported it. The defendant PERS was sentenced to fixed-
term imprisonment for intentional crimes. If he committed another
crime in YEARS after the execution of the penalty, he should be
sentenced to a fixed-term imprisonment or more. He is a recidivist
and should be severely punished according to law.)

R
e

3Sum

本院认为NUM PERS在道路上驾驶机动车其行为已构成上诉
人服刑确系罪公诉机关指控的犯罪事实清楚证据确实充分指
控的罪名成立本院予以支持被告人PERS 归案后如实供述自
己的罪行依法予以从轻处罚公诉机关的量刑建议适当本院予
以采纳此依照《中华人民共和国刑法》第NUM 款之规定判
决如下被告人PERS 犯服刑判处有期徒刑MONTHS并处罚金
人民币MONEY (The court held that NUM PERS was driving a
motor vehicle on the road, and his behavior constituted that the ap-
pellant was guilty of serving a sentence. The criminal facts accused
by the public prosecution agency were clear, the evidence was in-
deed sufficient, and the charges were supported by the court. After
confessing his crimes, he should be given a lighter punishment ac-
cording to law. The public prosecution agency’s sentencing recom-
mendations were appropriate and adopted by the court. According
to the provisions of Section NUM of the Criminal Law of the Peo-
ple’s Republic of China, the judgment was as follows, the defendant
PERS was sentenced to imprisonment and sentenced to fixed-term
MONTHS imprisonment, and fined the penalty RMB MONEY.)

PE
SG

本院认为，罪犯PERS 在服刑期间，确有悔改表现。符合法
定减刑条件，依照《中华人民共和国刑法》第NUM 条、
第NUM 条之规定，裁定如下：对罪犯PERS 减去有期徒
刑MONTHS。本裁定送达后即发生法律效力。(The court be-
lieved that the criminal PERS did have repentance during his sen-
tence. In accordance with the statutory commutation conditions
and NUM and NUM of the Criminal Law of the People’s Repub-
lic of China, the ruling was as follows: exempted PERS from the
MONTHS penalty. Legal effect would occur upon the delivery of
this ruling.)

Table 7: Examples of the generated natural answers by
PESG and other models.



3750

References
Martı́n Abadi, Paul Barham, Jianmin Chen, Zhifeng

Chen, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Geoffrey Irving, Michael Isard,
et al. 2016. Tensorflow: a system for large-scale
machine learning. In OSDI, volume 16, pages 265–
283.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In ICLR.

Deng Cai, Yan Wang, Victoria Bi, Zhaopeng Tu,
Xiaojiang Liu, Wai Lam, and Shuming Shi.
2018. Skeleton-to-response: Dialogue genera-
tion guided by retrieval memory. arXiv preprint
arXiv:1809.05296.

Ziqiang Cao, Wenjie Li, Sujian Li, and Furu Wei. 2018.
Retrieve, rerank and rewrite: Soft template based
neural summarization. In ACL, pages 152–161. As-
sociation for Computational Linguistics.

Xiuying Chen, Zhangming Chan, Shen Gao, Meng-
Hsuan Yu, Dongyan Zhao, and Rui Yan. 2019.
Learning towards abstractive timeline summariza-
tion. In Proceedings of the Twenty-Eighth In-
ternational Joint Conference on Artificial Intelli-
gence, IJCAI-19, pages 4939–4945. International
Joint Conferences on Artificial Intelligence Organi-
zation.

Xiuying Chen, Shen Gao, Chongyang Tao, Yan Song,
Dongyan Zhao, and Rui Yan. 2018. Iterative docu-
ment representation learning towards summarization
with polishing. In EMNLP, pages 4088–4097.

Kyunghyun Cho, Bart van Merrienboer, Çaglar
Gülçehre, Dzmitry Bahdanau, Fethi Bougares, Hol-
ger Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. In EMNLP.

John C. Duchi, Elad Hazan, and Yoram Singer. 2010.
Adaptive subgradient methods for online learning
and stochastic optimization. JMLR, 12:2121–2159.

Shen Gao, Xiuying Chen, Piji Li, Zhaochun Ren, Li-
dong Bing, Dongyan Zhao, and Rui Yan. 2019a.
Abstractive text summarization by incorporating
reader comments. In AAAI.

Shen Gao, Zhaochun Ren, Yihong Eric Zhao, Dongyan
Zhao, Dawei Yin, and Rui Yan. 2019b. Product-
aware answer generation in e-commerce question-
answering. In WSDM.

Max Grusky, Mor Naaman, and Yoav Artzi. 2018.
Newsroom: A dataset of 1.3 million summaries with
diverse extractive strategies. In NAACL-HLT.

Jiatao Gu, Zhengdong Lu, Hang Li, and Victor
O. K. Li. 2016. Incorporating copying mech-
anism in sequence-to-sequence learning. CoRR,
abs/1603.06393.

Kelvin Guu, Tatsunori B. Hashimoto, Yonatan Oren,
and Percy Liang. 2018. Generating sentences by
editing prototypes. TACL, 6:437–450.

R. Devon Hjelm, Alex Fedorov, Samuel Lavoie-
Marchildon, Karan Grewal, Adam Trischler, and
Yoshua Bengio. 2018. Learning deep representa-
tions by mutual information estimation and maxi-
mization. CoRR, abs/1808.06670.

Ari Holtzman, Jan Buys, Maxwell Forbes, Antoine
Bosselut, David Golub, and Yejin Choi. 2018.
Learning to write with cooperative discriminators.
In ACL.

Wan-Ting Hsu, Chieh-Kai Lin, Ming-Ying Lee, Kerui
Min, Jing Tang, and Min Sun. 2018. A unified
model for extractive and abstractive summarization
using inconsistency loss. In ACL.

Wenpeng Hu, Zhangming Chan, Bing Liu, Dongyan
Zhao, Jinwen Ma, and Rui Yan. 2019. Gsn: A
graph-structured network for multi-party dialogues.
In Proceedings of the Twenty-Eighth International
Joint Conference on Artificial Intelligence, IJCAI-
19, pages 5010–5016. International Joint Confer-
ences on Artificial Intelligence Organization.

Byeongchang Kim, Hyunwoo Kim, and Gunhee Kim.
2019. Abstractive Summarization of Reddit Posts
with Multi-level Memory Networks. In NAACL-
HLT.

Piji Li, Wai Lam, Lidong Bing, and Zihao Wang. 2017.
Deep recurrent generative decoder for abstractive
text summarization. In EMNLP, pages 2091–2100.

Chin-Yew Lin. 2004. Rouge: A package for auto-
matic evaluation of summaries. Text Summarization
Branches Out.

Shuming Ma, Xu Sun, Junyang Lin, and Houfeng
Wang. 2018. Autoencoder as assistant supervisor:
Improving text representation for chinese social me-
dia text summarization. In ACL.

Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017.
Summarunner: A recurrent neural network based se-
quence model for extractive summarization of docu-
ments. In AAAI.

Shashi Narayan, Shay B. Cohen, and Mirella Lapata.
2018a. Don’t give me the details, just the summary!
topic-aware convolutional neural networks for ex-
treme summarization. In EMNLP.

Shashi Narayan, Shay B. Cohen, and Mirella Lapata.
2018b. Ranking sentences for extractive summa-
rization with reinforcement learning. In NAACL-
HLT.

Tatsuro Oya, Yashar Mehdad, Giuseppe Carenini, and
Raymond Ng. 2014. A template-based abstractive
meeting summarization: Leveraging summary and
source text relationships. In INLG, pages 45–53.

http://aclweb.org/anthology/P18-1015
http://aclweb.org/anthology/P18-1015
https://doi.org/10.24963/ijcai.2019/686
https://doi.org/10.24963/ijcai.2019/686
https://doi.org/10.24963/ijcai.2019/696
https://doi.org/10.24963/ijcai.2019/696


3751

Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio.
2013. On the difficulty of training recurrent neural
networks. In ICML.

Romain Paulus, Caiming Xiong, and Richard Socher.
2018. A deep reinforced model for abstractive sum-
marization. In ICLR.

Alexander M Rush, Sumit Chopra, and Jason Weston.
2015. A neural attention model for abstractive sen-
tence summarization. In EMNLP, pages 379–389.

Natalie Schluter. 2017. The limits of automatic sum-
marisation according to rouge. In Proceedings of
the 15th Conference of the European Chapter of the
Association for Computational Linguistics: Volume
2, Short Papers, pages 41–45. Association for Com-
putational Linguistics.

Abigail See, Peter J. Liu, and Christopher D. Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In ACL.

Nitish Srivastava, Geoffrey E. Hinton, Alex
Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-
nov. 2014. Dropout: a simple way to prevent neural
networks from overfitting. Journal of Machine
Learning Research, 15:1929–1958.

Chongyang Tao, Shen Gao, Mingyue Shang,
Wei Chung Wu, Dongyan Zhao, and Rui Yan.
2018. Get the point of my utterance! learning to-
wards effective responses with multi-head attention
mechanism. In IJCAI.

Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly.
2015. Pointer networks. In NIPS, pages 2692–2700.

Yu Ping Wu, Furu Wei, Shaohan Huang, Zhoujun
Li, and Ming Zhou. 2018. Response genera-
tion by context-aware prototype editing. CoRR,
abs/1806.07042.

Qingyu Zhou, Nan Yang, Furu Wei, and Ming Zhou.
2018. Sequential copying networks. In AAAI.

http://aclweb.org/anthology/E17-2007
http://aclweb.org/anthology/E17-2007

