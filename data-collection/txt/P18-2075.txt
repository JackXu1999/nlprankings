



















































Policy Gradient as a Proxy for Dynamic Oracles in Constituency Parsing


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 469–476
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

469

Policy Gradient as a Proxy for
Dynamic Oracles in Constituency Parsing

Daniel Fried and Dan Klein
Computer Science Division

University of California, Berkeley
{dfried,klein}@cs.berkeley.edu

Abstract

Dynamic oracles provide strong supervi-
sion for training constituency parsers with
exploration, but must be custom defined
for a given parser’s transition system. We
explore using a policy gradient method as
a parser-agnostic alternative. In addition
to directly optimizing for a tree-level met-
ric such as F1, policy gradient has the po-
tential to reduce exposure bias by allow-
ing exploration during training; moreover,
it does not require a dynamic oracle for
supervision. On four constituency parsers
in three languages, the method substan-
tially outperforms static oracle likelihood
training in almost all settings. For parsers
where a dynamic oracle is available (in-
cluding a novel oracle which we define for
the transition system of Dyer et al. (2016)),
policy gradient typically recaptures a sub-
stantial fraction of the performance gain
afforded by the dynamic oracle.

1 Introduction

Many recent state-of-the-art models for con-
stituency parsing are transition based, decom-
posing production of each parse tree into a se-
quence of action decisions (Dyer et al., 2016;
Cross and Huang, 2016; Liu and Zhang, 2017;
Stern et al., 2017), building on a long line of work
in transition-based parsing (Nivre, 2003; Yamada
and Matsumoto, 2003; Henderson, 2004; Zhang
and Clark, 2011; Chen and Manning, 2014; Andor
et al., 2016; Kiperwasser and Goldberg, 2016).

However, models of this type, which decom-
pose structure prediction into sequential decisions,
can be prone to two issues (Ranzato et al., 2016;
Wiseman and Rush, 2016). The first is exposure
bias: if, at training time, the model only observes

states resulting from correct past decisions, it will
not be prepared to recover from its own mistakes
during prediction. Second is the loss mismatch be-
tween the action-level loss used at training and any
structure-level evaluation metric, for example F1.

A large family of techniques address the ex-
posure bias problem by allowing the model to
make mistakes and explore incorrect states during
training, supervising actions at the resulting states
using an expert policy (Daumé III et al., 2009;
Ross et al., 2011; Choi and Palmer, 2011; Chang
et al., 2015); these expert policies are typically
referred to as dynamic oracles in parsing (Gold-
berg and Nivre, 2012; Ballesteros et al., 2016).
While dynamic oracles have produced substan-
tial improvements in constituency parsing perfor-
mance (Coavoux and Crabbé, 2016; Cross and
Huang, 2016; Stern et al., 2017; González and
Gómez-Rodrı́guez, 2018), they must be custom
designed for each transition system.

To address the loss mismatch problem, another
line of work has directly optimized for structure-
level cost functions (Goodman, 1996; Och, 2003).
Recent methods applied to models that produce
output sequentially commonly use policy gradi-
ent (Auli and Gao, 2014; Ranzato et al., 2016;
Shen et al., 2016) or beam search (Xu et al., 2016;
Wiseman and Rush, 2016; Edunov et al., 2017) at
training time to minimize a structured cost. These
methods also reduce exposure bias through explo-
ration but do not require an expert policy for su-
pervision.

In this work, we apply a simple policy gra-
dient method to train four different state-of-the-
art transition-based constituency parsers to max-
imize expected F1. We compare against training
with a dynamic oracle (both to supervise explo-
ration and provide loss-augmentation) where one
is available, including a novel dynamic oracle that
we define for the top-down transition system of



470

Dyer et al. (2016).
We find that while policy gradient usually out-

performs standard likelihood training, it typically
underperforms the dynamic oracle-based methods
– which provide direct, model-aware supervision
about which actions are best to take from arbi-
trary parser states. However, a substantial frac-
tion of each dynamic oracle’s performance gain is
often recovered using the model-agnostic policy
gradient method. In the process, we obtain new
state-of-the-art results for single-model discrimi-
native transition-based parsers trained on the En-
glish PTB (92.6 F1), French Treebank (83.5 F1),
and Penn Chinese Treebank Version 5.1 (87.0 F1).

2 Models

The transition-based parsers we use all decompose
production of a parse tree y for a sentence x into
a sequence of actions (a1, . . . aT ) and resulting
states (s1, . . . sT+1). Actions at are predicted se-
quentially, conditioned on a representation of the
parser’s current state st and parameters θ:

p(y|x; θ) =
T∏
t=1

p(at | st; θ) (1)

We investigate four parsers with varying transi-
tion systems and methods of encoding the current
state and sentence: (1) the discriminative Recur-
rent Neural Network Grammars (RNNG) parser of
Dyer et al. (2016), (2) the In-Order parser of Liu
and Zhang (2017), (3) the Span-Based parser of
Cross and Huang (2016), and (4) the Top-Down
parser of Stern et al. (2017).1 We refer to the orig-
inal papers for descriptions of the transition sys-
tems and model parameterizations.

3 Training Procedures

Likelihood training without exploration maxi-
mizes Eq. 1 for trees in the training corpus, but
may be prone to exposure bias and loss mismatch
(Section 1). Dynamic oracle methods are known
to improve on this training procedure for a vari-
ety of parsers (Coavoux and Crabbé, 2016; Cross
and Huang, 2016; Stern et al., 2017; González and
Gómez-Rodrı́guez, 2018), supervising exploration

1Stern et al. (2017) trained their model using a non-
probabilistic, max-margin objective. For comparison to the
other models and to allow training with policy gradient,
we create a locally-normalized probabilistic variant of their
model by applying a softmax function to the predicted scores
for each action.

during training by providing the parser with the
best action to take at each explored state. We de-
scribe how policy gradient can be applied as an
oracle-free alternative. We then compare to sev-
eral variants of dynamic oracle training which fo-
cus on addressing exposure bias, loss mismatch,
or both.

3.1 Policy Gradient
Given an arbitrary cost function ∆ comparing
structured outputs (e.g. negative labeled F1, for
trees), we use the risk objective:

R(θ) =
N∑
i=1

∑
y

p(y | x(i); θ)∆(y,y(i))

which measures the model’s expected cost over
possible outputs y for each of the training exam-
ples (x(1),y(1)), . . . , (x(N),y(N)).

Minimizing a risk objective has a long his-
tory in structured prediction (Povey and Wood-
land, 2002; Smith and Eisner, 2006; Li and Eis-
ner, 2009; Gimpel and Smith, 2010) but often re-
lies on the cost function decomposing according
to the output structure. However, we can avoid
any restrictions on the cost using reinforcement
learning-style approaches (Xu et al., 2016; Shen
et al., 2016; Edunov et al., 2017) where cost is as-
cribed to the entire output structure – albeit at the
expense of introducing a potentially difficult credit
assignment problem.

The policy gradient method we apply is a sim-
ple variant of REINFORCE (Williams, 1992). We
perform mini-batch gradient descent on the gradi-
ent of the risk objective:

∇R(θ) =
N∑
i=1

∑
y

p(y|x(i))∆(y,y(i))∇ log p(y|x(i); θ)

≈
N∑
i=1

∑
y∈Y(x(i))

∆(y,y(i))∇ log p(y|x(i); θ)

where Y(x(i)) is a set of k candidate trees obtained
by sampling from the model’s distribution for sen-
tence x(i). We use negative labeled F1 for ∆.

To reduce the variance of the gradient estimates,
we standardize ∆ using its running mean and stan-
dard deviation across all candidates used so far
throughout training. Following Shen et al. (2016),
we also found better performance when including
the gold tree y(i) in the set of k candidates Y(x(i)),
and do so for all experiments reported here.2

2Including the gold tree in the set of candidates does bias



471

3.2 Dynamic Oracle Supervision
For a given parser state st, a dynamic oracle de-
fines an action a∗(st) which should be taken to
incrementally produce the best tree still reachable
from that state.3

Dynamic oracles provide strong supervision for
training with exploration, but require custom de-
sign for a given transition system. Cross and
Huang (2016) and Stern et al. (2017) defined opti-
mal (with respect to F1) dynamic oracles for their
respective transition systems, and below we define
a novel dynamic oracle for the top-down system of
RNNG.

In RNNG, tree production occurs in a stack-
based, top-down traversal which produces a left-
to-right linearized representation of the tree using
three actions: OPEN a labeled constituent (which
fixes the constituent’s span to begin at the next
word in the sentence which has not been shifted),
SHIFT the next word in the sentence to add it to
the current constituent, or CLOSE the current con-
stituent (which fixes its span to end after the last
word that has been shifted). The parser stores
opened constituents on the stack, and must there-
fore close them in the reverse of the order that they
were opened.

At a given parser state, our oracle does the fol-
lowing:

1. If there are any open constituents on the stack
which can be closed (i.e. have had a word
shifted since being opened), check the top-
most of these (the one that has been opened
most recently). If closing it would produce
a constituent from the the gold tree that has
not yet been produced (which is determined
by the constituent’s label, span beginning po-
sition, and the number of words currently
shifted), or if the constituent could not be
closed at a later position in the sentence to
produce a constituent in the gold tree, return
CLOSE.

the estimate of the risk objective’s gradient; however since
in the parsing tasks we consider, the gold tree has constant
and minimal cost, augmenting with the gold is equivalent to
jointly optimizing the standard likelihood and risk objectives,
using an adaptive scaling factor for each objective that is de-
pendent on the cost for the trees that have been sampled from
the model. We found that including the gold candidate in this
manner outperformed initial experiments that first trained a
model using likelihood training and then fine-tuned using un-
biased policy gradient.

3More generally, an oracle can return a set of such actions
that could be taken from the current state, but the oracles we
use select a single canonical action.

2. Otherwise, if there are constituents in the
gold tree which have not yet been opened in
the parser state, with span beginning at the
next unshifted word, OPEN the outermost of
these.

3. Otherwise, SHIFT the next word.

While we do not claim that this dynamic ora-
cle is optimal with respect to F1, we find that it
still helps substantially in supervising exploration
(Section 5).

Likelihood Training with Exploration Past
work has differed on how to use dynamic ora-
cles to guide exploration during oracle training
(Ballesteros et al., 2016; Cross and Huang, 2016;
Stern et al., 2017). We use the same sample-based
method of generating candidate sets Y as for pol-
icy gradient, which allows us to control the dy-
namic oracle and policy gradient methods to per-
form an equal amount of exploration. Likelihood
training with exploration then maximizes the sum
of the log probabilities for the oracle actions for
all states composing the candidate trees:

LE(θ) =
N∑
i=1

∑
y∈Y(x(i))

∑
s∈y

log p(a∗(s) | s)

where a∗(s) is the dynamic oracle’s action for
state s.

Softmax Margin Softmax margin loss (Gimpel
and Smith, 2010; Auli and Lopez, 2011) addresses
loss mismatch by incorporating task cost into the
training loss. Since trees are decomposed into a
sequence of local action predictions, we cannot
use a global cost, such as F1, directly. As a proxy,
we rely on the dynamic oracles’ action-level su-
pervision.

In all models we consider, action probabilities
(Eq. 1) are parameterized by a softmax function

pML(a | st; θ) ∝ exp(z(a, st, θ))

for some state–action scoring function z. The
softmax-margin objective replaces this by

pSMM (a | st; θ) ∝ exp(z(a, st, θ) + ∆(a, a∗t ))
(2)

We use ∆(a, a∗t ) = 0 if a = a
∗
t and 1 otherwise.

This can be viewed as a “soft” version of the max-
margin objective used by Stern et al. (2017) for
training without exploration, but retains a locally-
normalized model that we can use for sampling-
based exploration.



472

10 20 30 40 50
epoch

89.0
89.5
90.0
90.5
91.0
91.5
92.0

de
ve

lo
pm

en
t F

1

likelihood
likelihood + explore, k=10
policy gradient, k=10

Figure 1: English development set F1 by training
epoch, comparing likelihood training with two ex-
ploration variants for the Top-Down parser.

Softmax Margin with Exploration Finally, we
train using a combination of softmax margin loss
augmentation and exploration. We perform the
same sample-based candidate generation as for
policy gradient and likelihood training with explo-
ration, but use Eq. 2 to compute the training loss
for candidate states. For those parsers that have a
dynamic oracle, this provides a means of training
that more directly provides both exploration and
cost-aware losses.

4 Experiments

We compare the constituency parsers listed in Sec-
tion 2 using the above training methods. Our
experiments use the English PTB (Marcus et al.,
1993), French Treebank (Abeillé et al., 2003), and
Penn Chinese Treebank (CTB) Version 5.1 (Xue
et al., 2005).

Training To compare the training procedures
as closely as possible, we train all models for a
given parser in a given language from the same
randomly-initialized parameter values.

We train two different versions of the RNNG
model: one model using size 128 for the LSTMs
and hidden states (following the original work),
and a larger model with size 256. We perform
evaluation using greedy search in the Span-Based
and Top-Down parsers, and beam search with
beam size 10 for the RNNG and In-Order parsers.
We found that beam search improved performance
for these two parsers by around 0.1-0.3 F1 on the
development sets, and use it at inference time in
every setting for these two parsers.

In our experiments, policy gradient typically re-
quires more epochs of training to reach perfor-
mance comparable to either of the dynamic oracle-
based exploration methods. Figure 1 gives a typi-
cal learning curve, for the Top-Down parser on En-
glish. We found that policy gradient is also more
sensitive to the number of candidates sampled per

sentence than either of the other exploration meth-
ods, with best performance on the development set
usually obtained with k = 10 for k ∈ {2, 5, 10}
(where k also counts the sentence’s gold tree, in-
cluded in the candidate set). See Appendix A in
the supplemental material for the values of k used.

Tags, Embeddings, and Morphology We
largely follow previous work for each parser in our
use of predicted part-of-speech tags, pretrained
word embeddings, and morphological features.

All parsers use predicted part-of-speech tags as
part of their sentence representations. For En-
glish and Chinese, we follow the setup of Cross
and Huang (2016): training the Stanford tagger
(Toutanova et al., 2003) on the training set of each
parsing corpus to predict development and test set
tags, and using 10-way jackknifing to predict tags
for the training set.

For French, we use the predicted tags and mor-
phological features provided with the SPMRL
dataset (Seddah et al., 2014). We modified the
publicly released code for all parsers to use pre-
dicted morphological features for French. We fol-
low the approach outlined by Cross and Huang
(2016) and Stern et al. (2017) for representing
morphological features as learned embeddings,
and use the same dimensions for these embeddings
as in their papers. For RNNG and In-Order, we
similarly use 10-dimensional learned embeddings
for each morphological feature, feeding them as
LSTM inputs for each word alongside the word
and part-of-speech tag embeddings.

For RNNG and the In-Order parser, we use the
same word embeddings as the original papers for
English and Chinese, and train 100-dimensional
word embeddings for French using the structured
skip-gram method of Ling et al. (2015) on French
Wikipedia.

5 Results and Discussion

Table 1 compares parser F1 by training procedure
for each language. Policy gradient improves upon
likelihood training in 14 out of 15 cases, with im-
provements of up to 1.5 F1. One of the three dy-
namic oracle-based training methods – either like-
lihood with exploration, softmax margin (SMM),
or softmax margin with exploration – obtains bet-
ter performance than policy gradient in 10 out of
12 cases. This is perhaps unsurprising given the
strong supervision provided by the dynamic ora-
cles and the credit assignment problem faced by



473

training English French Chinese

Span-Based (Cross and Huang, 2016)
C&H∗ 91.3 83.3 —
likelihood 91.0 81.5 83.3
policy gradient 91.4 (+0.4) 81.4 (-0.1) 83.5 (+0.2)
likelihood+explore∗ 91.3 (+0.3) 81.2 (-0.3) 83.5 (+0.2)
SMM∗ 91.3 (+0.3) 81.5 (+0.0) 83.7 (+0.4)
SMM+explore∗ 91.5 (+0.5) 81.7 (+0.2) 84.0 (+0.7)
Top-Down (Stern et al., 2017)
Stern et al.∗† 91.8 82.2 —
likelihood 91.2 80.7 83.9
policy gradient 91.4 (+0.2) 81.4 (+0.7) 84.7 (+0.8)
likelihood+explore∗ 91.3 (+0.1) 81.5 (+0.8) 85.3 (+1.4)
SMM∗ 91.1 (-0.1) 81.2 (+0.5) 84.5 (+0.6)
SMM+explore∗ 91.4 (+0.2) 81.9 (+1.2) 84.8 (+0.9)
RNNG Discriminative, Size 128 (Dyer et al., 2016)
Dyer et al. 91.7 — 84.6
likelihood 91.4 83.2 84.5
policy gradient 91.6 (+0.2) 83.3 (+0.1) 84.7 (+0.2)
likelihood+explore∗ 92.1 (+0.7) 83.0 (-0.2) 85.5 (+1.0)
SMM∗ 91.5 (+0.1) 82.8 (-0.4) 83.6 (-0.9)
SMM+explore∗ 92.1 (+0.7) 83.5 (+0.3) 85.0 (+0.5)
RNNG Discriminative, Size 256
likelihood 91.7 83.1 84.5
policy gradient 92.3 (+0.7) 83.2 (+0.1) 85.6 (+1.1)
likelihood+explore 92.6 (+0.9) 82.9 (-0.2) 86.0 (+1.5)
In-Order (Liu and Zhang, 2017)
L&Z 91.8 — 86.1
likelihood 91.6 82.7 85.5
policy gradient 92.2 (+0.6) 83.3 (+0.6) 87.0 (+1.5)

Table 1: Test set F1 by training procedure, and
in comparison to past work using the same mod-
els. Improvements over likelihood training are
indicated in parentheses, with the highest results
among the training procedures compared here in
bold. ∗: training uses a dynamic oracle; †: past
work using a global scoring model (all models we
train here are locally-normalized).

policy gradient. However, a substantial fraction of
this performance gain is recaptured by policy gra-
dient in most cases.

While likelihood training with exploration us-
ing a dynamic oracle more directly addresses ex-
ploration bias, and softmax margin training more
directly addresses loss mismatch, these two phe-
nomena are still entangled, and the best dynamic
oracle-based method to use varies. The effective-
ness of the oracle method is also likely to be influ-
enced by the nature of the dynamic oracle avail-
able for the parser. For example, the oracle for
RNNG lacks F1 optimality guarantees, and soft-
max margin without exploration often underper-
forms likelihood for this parser. However, explo-
ration improves softmax margin training across all
parsers and conditions.

Although results from likelihood training are
mostly comparable between RNNG-128 and the
larger model RNNG-256 across languages, policy
gradient and likelihood training with exploration
both typically yield larger improvements in the
larger models, obtaining 92.6 F1 for English and
86.0 for Chinese (using likelihood training with
exploration), although results are slightly higher
for the policy gradient and dynamic oracle-based
methods for the smaller model on French (includ-
ing 83.5 with softmax margin with exploration).
Finally, we observe that policy gradient also pro-
vides large improvements for the In-Order parser,
where a dynamic oracle has not been defined.

We note that although some of these results
(92.6 for English, 83.5 for French, 87.0 for Chi-
nese) are state-of-the-art for single model, dis-
criminative transition-based parsers, other work
on constituency parsing achieves better perfor-
mance through other methods. Techniques that
combine multiple models or add semi-supervised
data (Vinyals et al., 2015; Dyer et al., 2016; Choe
and Charniak, 2016; Kuncoro et al., 2017; Liu
and Zhang, 2017; Fried et al., 2017) are orthog-
onal to, and could be combined with, the single-
model, fixed training data methods we explore.
Other recent work (Gaddy et al., 2018; Kitaev and
Klein, 2018) obtains comparable or stronger per-
formance with global chart decoders, where train-
ing uses loss augmentation provided by an ora-
cle. By performing model-optimal global infer-
ence, these parsers likely avoid the exposure bias
problem of the sequential transition-based parsers
we investigate, at the cost of requiring a chart de-
coding procedure for inference.

Overall, we find that although optimizing for
F1 in a model-agnostic fashion with policy gradi-
ent typically underperforms the model-aware ex-
pert supervision given by the dynamic oracle train-
ing methods, it provides a simple method for con-
sistently improving upon static oracle likelihood
training, at the expense of increased training costs.

Acknowledgments

DF is supported by a Huawei / Berkeley AI fel-
lowship. This research used the Savio computa-
tional cluster provided by the Berkeley Research
Computing program at the University of Califor-
nia, Berkeley.



474

References
Anne Abeillé, Lionel Clément, and François Toussenel.

2003. Building a Treebank for French. Springer
Netherlands, Dordrecht.

Daniel Andor, Chris Alberti, David Weiss, Aliaksei
Severyn, Alessandro Presta, Kuzman Ganchev, Slav
Petrov, and Michael Collins. 2016. Globally nor-
malized transition-based neural networks. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 2442–2452, Berlin, Germany. Asso-
ciation for Computational Linguistics.

Michael Auli and Jianfeng Gao. 2014. Decoder inte-
gration and expected BLEU training for recurrent
neural network language models. In Proceedings
of the 52nd Annual Meeting of the Association for
Computational Linguistics (Volume 2: Short Pa-
pers), volume 2, pages 136–142.

Michael Auli and Adam Lopez. 2011. Training a log-
linear parser with loss functions via softmax-margin.
In Proceedings of the Conference on Empirical
Methods in Natural Language Processing, EMNLP
’11, pages 333–343, Stroudsburg, PA, USA. Associ-
ation for Computational Linguistics.

Miguel Ballesteros, Yoav Goldberg, Chris Dyer, and
Noah A. Smith. 2016. Training with exploration im-
proves a greedy stack lstm parser. In Proceedings of
the 2016 Conference on Empirical Methods in Natu-
ral Language Processing, pages 2005–2010, Austin,
Texas. Association for Computational Linguistics.

Kai-Wei Chang, Akshay Krishnamurthy, Alekh Agar-
wal, Hal Daumé III, and John Langford. 2015.
Learning to search better than your teacher. In In-
ternational Conference on Machine Learning.

Danqi Chen and Christopher Manning. 2014. A fast
and accurate dependency parser using neural net-
works. In Proceedings of the 2014 conference on
empirical methods in natural language processing
(EMNLP), pages 740–750.

Do Kook Choe and Eugene Charniak. 2016. Parsing as
language modeling. In Empirical Methods in Natu-
ral Language Processing.

Jinho D. Choi and Martha Palmer. 2011. Getting the
most out of transition-based dependency parsing. In
Proceedings of the 49th Annual Meeting of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies: Short Papers - Volume 2, HLT
’11, pages 687–692, Stroudsburg, PA, USA. Associ-
ation for Computational Linguistics.

Maximin Coavoux and Benoit Crabbé. 2016. Neural
greedy constituent parsing with dynamic oracles. In
Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), pages 172–182, Berlin, Germany. As-
sociation for Computational Linguistics.

James Cross and Liang Huang. 2016. Span-based con-
stituency parsing with a structure-label system and
provably optimal dynamic oracles. In Proceedings
of the 2016 Conference on Empirical Methods in
Natural Language Processing, pages 1–11, Austin,
Texas. Association for Computational Linguistics.

Hal Daumé III, John Langford, and Daniel Marcu.
2009. Search-based structured prediction. Machine
learning, 75(3):297–325.

Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros,
and Noah A. Smith. 2016. Recurrent neural network
grammars. In Proceedings of the 2016 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, pages 199–209, San Diego, Califor-
nia. Association for Computational Linguistics.

Sergey Edunov, Myle Ott, Michael Auli, David Grang-
ier, and Marc’Aurelio Ranzato. 2017. Classical
structured prediction losses for sequence to se-
quence learning. arXiv preprint arXiv:1711.04956.

Daniel Fried, Mitchell Stern, and Dan Klein. 2017. Im-
proving neural parsing by disentangling model com-
bination and reranking effects. In Proceedings of
ACL.

David Gaddy, Mitchell Stern, and Dan Klein. 2018.
What’s going on in neural constituency parsers? an
analysis. In Proceedings of NAACL.

Kevin Gimpel and Noah A. Smith. 2010. Softmax-
margin crfs: Training log-linear models with cost
functions. In Human Language Technologies: The
2010 Annual Conference of the North American
Chapter of the Association for Computational Lin-
guistics, pages 733–736, Los Angeles, California.
Association for Computational Linguistics.

Yoav Goldberg and Joakim Nivre. 2012. A dynamic or-
acle for arc-eager dependency parsing. In Proceed-
ings of COLING 2012, pages 959–976, Mumbai, In-
dia. The COLING 2012 Organizing Committee.

Daniel Fernández González and Carlos Gómez-
Rodrı́guez. 2018. Faster shift-reduce constituent
parsing with a non-binary, bottom-up strategy.
arXiv preprint, 1804.07961.

Joshua Goodman. 1996. Parsing algorithms and met-
rics. In Proceedings of the 34th Annual Meeting
of the Association for Computational Linguistics,
pages 177–183, Santa Cruz, California, USA. As-
sociation for Computational Linguistics.

James Henderson. 2004. Discriminative training of a
neural network statistical parser. In Proceedings of
the 42Nd Annual Meeting on Association for Com-
putational Linguistics, ACL ’04, Stroudsburg, PA,
USA. Association for Computational Linguistics.

Eliyahu Kiperwasser and Yoav Goldberg. 2016. Sim-
ple and accurate dependency parsing using bidirec-
tional lstm feature representations. Transactions

http://www.aclweb.org/anthology/P16-1231
http://www.aclweb.org/anthology/P16-1231
http://dl.acm.org/citation.cfm?id=2145432.2145471
http://dl.acm.org/citation.cfm?id=2145432.2145471
https://aclweb.org/anthology/D16-1211
https://aclweb.org/anthology/D16-1211
http://dl.acm.org/citation.cfm?id=2002736.2002869
http://dl.acm.org/citation.cfm?id=2002736.2002869
http://www.aclweb.org/anthology/P16-1017
http://www.aclweb.org/anthology/P16-1017
https://aclweb.org/anthology/D16-1001
https://aclweb.org/anthology/D16-1001
https://aclweb.org/anthology/D16-1001
http://www.aclweb.org/anthology/N16-1024
http://www.aclweb.org/anthology/N16-1024
http://www.aclweb.org/anthology/N10-1112
http://www.aclweb.org/anthology/N10-1112
http://www.aclweb.org/anthology/N10-1112
http://www.aclweb.org/anthology/C12-1059
http://www.aclweb.org/anthology/C12-1059
https://arxiv.org/abs/1804.07961
https://arxiv.org/abs/1804.07961
https://doi.org/10.3115/981863.981887
https://doi.org/10.3115/981863.981887
https://doi.org/10.3115/1218955.1218968
https://doi.org/10.3115/1218955.1218968
https://transacl.org/ojs/index.php/tacl/article/view/885
https://transacl.org/ojs/index.php/tacl/article/view/885
https://transacl.org/ojs/index.php/tacl/article/view/885


475

of the Association for Computational Linguistics,
4:313–327.

Nikita Kitaev and Dan Klein. 2018. Constituency pars-
ing with a self-attentive encoder. arXiv preprint
arXiv:1805.01052.

Adhiguna Kuncoro, Miguel Ballesteros, Lingpeng
Kong, Chris Dyer, Graham Neubig, and Noah A.
Smith. 2017. What do recurrent neural network
grammars learn about syntax? In Proceedings of
the 15th Conference of the European Chapter of the
Association for Computational Linguistics: Volume
1, Long Papers, pages 1249–1258, Valencia, Spain.
Association for Computational Linguistics.

Zhifei Li and Jason Eisner. 2009. First- and second-
order expectation semirings with applications to
minimum-risk training on translation forests. In
Proceedings of the 2009 Conference on Empirical
Methods in Natural Language Processing: Volume
1 - Volume 1, EMNLP ’09, pages 40–51, Strouds-
burg, PA, USA. Association for Computational Lin-
guistics.

Wang Ling, Chris Dyer, Alan W Black, and Isabel
Trancoso. 2015. Two/too simple adaptations of
word2vec for syntax problems. In Proceedings of
the 2015 Conference of the North American Chap-
ter of the Association for Computational Linguistics:
Human Language Technologies, pages 1299–1304.
Association for Computational Linguistics.

Jiangming Liu and Yue Zhang. 2017. In-order
transition-based constituent parsing. Transactions
of the Association for Computational Linguistics,
5:413–424.

Mitchell P Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. 1993. Building a large annotated
corpus of English: The Penn treebank. Computa-
tional Linguistics, 19(2):313–330.

Joakim Nivre. 2003. An efficient algorithm for pro-
jective dependency parsing. In Proceedings of the
8th International Workshop on Parsing Technologies
(IWPT).

Franz Josef Och. 2003. Minimum error rate train-
ing in statistical machine translation. In Proceed-
ings of the 41st Annual Meeting of the Association
for Computational Linguistics, pages 160–167, Sap-
poro, Japan. Association for Computational Linguis-
tics.

Daniel Povey and Philip C Woodland. 2002. Mini-
mum phone error and i-smoothing for improved dis-
criminative training. In Acoustics, Speech, and Sig-
nal Processing (ICASSP), 2002 IEEE International
Conference on, volume 1, pages I–105. IEEE.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2016. Sequence level train-
ing with recurrent neural networks. International
Conference on Learning Representations.

Stéphane Ross, Geoffrey Gordon, and Drew Bagnell.
2011. A reduction of imitation learning and struc-
tured prediction to no-regret online learning. In Pro-
ceedings of the fourteenth international conference
on artificial intelligence and statistics, pages 627–
635.

Djamé Seddah, Sandra Kübler, and Reut Tsarfaty.
2014. Introducing the spmrl 2014 shared task on
parsing morphologically-rich languages. In Pro-
ceedings of the First Joint Workshop on Statisti-
cal Parsing of Morphologically Rich Languages and
Syntactic Analysis of Non-Canonical Languages,
pages 103–109, Dublin, Ireland. Dublin City Uni-
versity.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 1683–1692, Berlin, Germany. Asso-
ciation for Computational Linguistics.

David A. Smith and Jason Eisner. 2006. Minimum risk
annealing for training log-linear models. In Pro-
ceedings of the COLING/ACL 2006 Main Confer-
ence Poster Sessions, pages 787–794, Sydney, Aus-
tralia. Association for Computational Linguistics.

Mitchell Stern, Jacob Andreas, and Dan Klein. 2017. A
minimal span-based neural constituency parser. In
Proceedings of ACL.

Kristina Toutanova, Dan Klein, Christopher D. Man-
ning, and Yoram Singer. 2003. Feature-rich part-of-
speech tagging with a cyclic dependency network.
In Proceedings of the 2003 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics on Human Language Technology
- Volume 1, NAACL ’03, pages 173–180, Strouds-
burg, PA, USA. Association for Computational Lin-
guistics.

Oriol Vinyals, Łukasz Kaiser, Terry Koo, Slav Petrov,
Ilya Sutskever, and Geoffrey Hinton. 2015. Gram-
mar as a foreign language. In Proceedings of NIPS,
pages 2773–2781.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. In Reinforcement Learning, pages
5–32. Springer.

Sam Wiseman and Alexander M. Rush. 2016.
Sequence-to-sequence learning as beam-search opti-
mization. In Proceedings of the 2016 Conference on
Empirical Methods in Natural Language Process-
ing, pages 1296–1306, Austin, Texas. Association
for Computational Linguistics.

Wenduan Xu, Michael Auli, and Stephen Christopher
Clark. 2016. Expected f-measure training for shift-
reduce parsing with recurrent neural networks. In
Proceedings of the 2016 Conference of the North

http://www.aclweb.org/anthology/E17-1117
http://www.aclweb.org/anthology/E17-1117
http://dl.acm.org/citation.cfm?id=1699510.1699517
http://dl.acm.org/citation.cfm?id=1699510.1699517
http://dl.acm.org/citation.cfm?id=1699510.1699517
https://doi.org/10.3115/v1/N15-1142
https://doi.org/10.3115/v1/N15-1142
https://transacl.org/ojs/index.php/tacl/article/view/1199
https://transacl.org/ojs/index.php/tacl/article/view/1199
https://doi.org/10.3115/1075096.1075117
https://doi.org/10.3115/1075096.1075117
http://www.aclweb.org/anthology/W14-6111
http://www.aclweb.org/anthology/W14-6111
http://www.aclweb.org/anthology/P16-1159
http://www.aclweb.org/anthology/P16-1159
http://www.aclweb.org/anthology/P/P06/P06-2101
http://www.aclweb.org/anthology/P/P06/P06-2101
https://doi.org/10.3115/1073445.1073478
https://doi.org/10.3115/1073445.1073478
https://aclweb.org/anthology/D16-1137
https://aclweb.org/anthology/D16-1137


476

American Chapter of the Association for Computa-
tional Linguistics on Human Language Technology.
Association for Computational Linguistics.

Naiwen Xue, Fei Xia, Fu-dong Chiou, and Marta
Palmer. 2005. The penn chinese treebank: Phrase
structure annotation of a large corpus. Nat. Lang.
Eng., 11(2):207–238.

Hiroyasu Yamada and Yuji Matsumoto. 2003. Statis-
tical dependency analysis with support vector ma-
chines. In Proceedings of the 8th International
Workshop on Parsing Technologies (IWPT).

Yue Zhang and Stephen Clark. 2011. Syntactic pro-
cessing using the generalized perceptron and beam
search. Computational linguistics, 37(1):105–151.

https://doi.org/10.1017/S135132490400364X
https://doi.org/10.1017/S135132490400364X

