




















Modularisation of Finnish Finite-State Language Description—Towards
Wide Collaboration in Open Source Development of Morphological

Analyser

Tommi A Pirinen
University of Helsinki
Helsinki, Finland

tommi.pirinen@helsinki.fi

Abstract

In this paper we present an open source
implementation for Finnish morphological
parser. We shortly evaluate it against con-
temporary criticism towards monolithic
and unmaintainable finite-state language
description. We use it to demonstrate way
of writing finite-state language description
that is used for varying set of projects,
that typically need morphological anal-
yser, such as POS tagging, morphologi-
cal analysis, hyphenation, spell checking
and correction, rule-based machine trans-
lation and syntactic analysis. The lan-
guage description is done using available
open source methods for building finite-
state descriptions coupled with autotools-
style build system, which is de facto stan-
dard in open source projects.

1 Introduction

Writing maintainable language descriptions for
finite-state systems has traditionally been a labori-
ous task. Even though finite-state technology has
been de facto standard for writing computational
language descriptions for more than two decades
now (Beesley and Karttunen, 2003), it has some
recognised flaws and problems both caused by
shortcomings of actual implementations and back-
ground technology (Wintner, 2008). Commonly
language description is performed by a single lin-
guist or language technologist. The descriptions
typically wind up being complex enough that mod-
ifying them requires a great amount of studying
and understanding before one is able to do the
smallest of modifications to the system. In the
current times that all proper, healthy, scientific
projects should be open source and globally de-
veloped, this poses a challenge for such project’s
internal structure. Another source of problem in

such collaboration is that background of contrib-
utors for language description varies from com-
puter scientists to linguists (Maxwell and David,
2008) to computer-savvy native language speak-
ers, all of whom should be able to contribute to
the project. The solutions we propose for this is
to embrace proper modularisation in language de-
scriptions to allowmultiple specific entry points to
contributors.
In this paper we describe a new implementation

of the Finnish language description called omorfi1,
made to support large variety of NLP applications
and different audiences. While the background
theory for implementing finite-state description
of Finnish was laid out already in Koskenniemi
(1983), and morphophonological system does not
have significant changes, the actual system was
rewritten from the scratch. The rewriting was orig-
inally done by single linguist as usual, in amaster’s
thesis project (Pirinen, 2008), but afterwards it has
been extended as full-fledged open source project
and used in various contexts. This extended de-
velopment has necessitated a better modularised
framework to allow people of varying level of fa-
miliarity with finite-state technology and Finnish
to contribute on their prospective parts of the de-
scription without causing of modularisation prob-
lems for other applications of the finite-state anal-
ysers.
The projects that have used and use omorfi as

language description include spell checking and
correction (Pirinen and Lindén, 2010b), lemmatis-
ing for IR applications (e.g. Kurola (2010)), named
entity recognition, rule-based machine transla-
tion Forcada et al. (2010)2, and syntactic disam-
biguation and analysis. The demands for even the
basic morphology with all these different applica-
tions are very different with regards to productiv-
ity; lexical coverage and accuracy as well as depth

1http://home.gna.org/omorfi
2http://www.apertium.org/

Bolette Sandford Pedersen, Gunta Nešpore and Inguna Skadiņa (Eds.)
NODALIDA 2011 Conference Proceedings, pp. 299–302



of tagging, so it has became obvious that no one
lexical automaton will work for everyone. For
this reason the modularisation has to provide eas-
ily configurable options and modifiability for all
end-points.
One of the key points in modular structure here

is that we ensure that modifying will not typi-
cally break already working parts, so contribu-
tors adding new words or moving hyphens will
not cause problems in other parts of description as
much as possible.

2 Modularisation of Finite-State
Language Description

The modularisation scheme we ended up with in
finite-state description of Finnish has grown or-
ganically around rather standard description of
finite-state morphology. The further development
followed from development of finite-state tech-
nology along years from initial implementation of
omorfi at publication of Pirinen (2008).
In omorfi we use a hierarchical set of ab-

stract modules implemented to encapsulate the
system. As mentioned, the classical modules of
morphotactic combinatorics (i.e. Xerox compati-
ble lexc language description) and morphophonol-
ogy (i.e. Xerox compatible twolc description) is
still present. The morphotactic combinatorics has
already been split to sub modules for two reasons.
First is primarily practical fact that code base for
morphotactic combinatorics for words of Finnish
is huge. Second and perhaps the more important
distinction is the fact that central and integral part
of the life force of morphophonological descrip-
tion of the all languages is to keep up with constant
influx of new lexical items to the language; neolo-
gisms, proper nouns and other coinages. From fur-
ther new modules, orthographical variations was
implemented to create detached support for certain
obvious variations of Finnish written data, e.g. the
typewriter and SF7-ASCII era digraphs like sh and
zh in stead of š and ž respectively. The hyphen-
ation and syllabification of Finnish language is
also one obvious service for morphological dictio-
nary to provide; for Finnish the compound bound-
aries cannot typically be discriminated without a
dictionary (Lindén and Pirinen, 2009a). One of
the features that has become rather obvious along
years for morphological parsers is the fact that all
computational linguistic applications must require
their own very special version of morphological

analysis, so in omorfi we have chosen to avoid
lock-ins for any specific type of tag sets, and in-
stead go for one version of analysis to contain cer-
tain superset of all needed forms and rewrite as
needed. The statistical models is one of recent de-
velopments of finite-state technology, and there is
a lot to offer for language models here so the whole
family of weighted finite-state training and models
is also implemented in omorfi as a separate mod-
ule here, which for most intents and purposes does
work independently of any other part of the lan-
guage description.

3 Implementation

Here we briefly discuss implementation of mod-
ules, mainly to discuss about practices that help the
cooperation. Naturally full discussion of the mod-
ules is found in the documentation of the system3.
The system implementation is harnessing the au-
totools framework and unix style tools of HFST
to incrementally build the finite-state automata us-
ing finite-state algebra, such as composition to ex-
tend them, originally noted even in Beesley and
Karttunen (2003). The crucial thing for this mod-
ular approach is that it can be applied incremen-
tally, each module can be replaced or disabled en-
tirely at needs of end application, and with auto-
tools framework all this can be performed by sim-
ple command-line switch to ./configure.

3.1 Lexical Data—Lexicon and Features of
Lexical Items

The initial part of morphotactics deals with lexico-
graphical data. This is the part where most mod-
ification and cooperation can be used, the lexical
items in language change all the time in introduc-
tion of new word forms, and the expertise needed
to extend the lexicon does not require significant
expertise beyond understanding of the language.
For this case we provide different entry formats for
new lexical data; csv, XML and so on. The min-
imal data to enter for new word form is morpho-
logical part of speech. Additionally a paradigm
classification is typically needed for working in-
flection and derivation. While this is facilitated as
much as possible, further research for easy lexicon
management is still required.
The other practical example as to why easymod-

ification of lexical data is crucial is that for ex-
ample for rule-based machine translation benefits

3http://home.gna.org/omorfi/

300

Tommi Pirinen

300



from mapping between lexical units of source lan-
guage and target language. Similarly for forthcom-
ing syntactic constraint grammar work in vein of
(Karlsson, 1990). For this reason easy access to
lexical units is required for users of morphology.

3.2 Traditional Morphotactics and
Phonology—The Lexc and Twolc Model

The various lexical data sources are joined back
to traditional lexc format, which is combined
with word stem variation definitions and inflec-
tional data to produce lexical automaton. This
is compose-intersectedwithmorphophonology de-
scriptions to produce the analyser already; as these
parts rarely need changes beyond bug-fixes and
are unlikely to benefit from open source coopera-
tion beyond initial linguist work, they are still in
same form as traditional finite-state morphology
by Beesley and Karttunen (2003), even if it was
deemed monolithic and fragile for such collabora-
tion.

3.3 Analysis Formats and Sets
Another thing that is quickly obvious for interop-
erability is that all projects using morphological
analyser, for whatever purpose, require their own
analysis format. Instead of converging to stan-
dard we have temporarily solved this by making
our analyser to contain superset of required fea-
tures at all times, and providing rules to rewrite
the tagsets. The rulesets can be compiled to finite-
state networks and composed like usual. Typical
rules are of course relatively simple contextless
rewriting, for example the annotation for singular
nominative is +sg+nom or <sg><nom>, for differ-
ent applications, so a simple composition in style
of NUM=SG:+sg is enough for providing the sin-
gular nominatives to that analysis style. Ideally of
course this would be solved by using more suitable
abstract data type for the annotations than char-
acter string (Wintner, 2008), ideally derived from
standardized set of features, such as ISOCat as is
also suggested by (Maxwell and David, 2008).

3.4 Orthographical variations
When dealing with data from various sources, such
as old literature or spoken standard language found
in instant messaging etc., there are certain varia-
tions on spelling rules. These has also been imple-
mented as independent rule set compiled to com-
posable finite-state automaton. Incidentally both
mapping of typewriter digraphs sh and zh to š and ž

correspondingly and omission of final component
of i-final diphthong of spoken language are both
definable as rule working on morphological anal-
yser as an independent unit.

3.5 Hyphenation and syllabification
Hyphenation is in practice also one of the appli-
cations of the language. It has been defined as
a rule set over half-build morphological analyser,
since it can neatly abuse build-time information of
the analyser, such as word and morpheme bound-
aries. The syllables could also conversely be used
by other parts of the description if needed.

3.6 Error models
Error model is a crucial part of spell-checking sys-
tem, for the correction task. This is implemented
as finite-state filter that can be applied with on-
the-fly composition (Pirinen and Lindén, 2010a)
to perform the error correction for spell checking,
or for example error-tolerant analysis.

3.7 Statistical models
Statistical models provide for disambiguating lan-
guage models and spell-checking tasks for ex-
ample. The statistical models used are simple
finite-state automata or training sets combinable
to the language description by use of composi-
tion (Lindén and Pirinen, 2009a; Lindén and Piri-
nen, 2009b).

3.8 Filtering the Analyser
The models needed for different task may need
widely different dictionaries and allowed word-
forms, and not always the statistical models are
sufficient to discriminate between good word
forms. So we also provide filter rule sets, to limit
features, such as derivation and compounding, and
lexical units, such as archaic or dialectal words.
For example for the spell-checker’s error detection
lexicon or information retrieval task compound-
ing and derivation can be largely allowed, whereas
in the spelling correction the suggestions should
be relatively conservative for plausible but non-
existing compounds and derivations.

4 Discussion and Future Work

In this article we have showed that finite-state de-
scription can be implemented in modularised man-
ner enabling wide cooperation in the open source
context for people with varying background. Fur-
thermore we have demonstrated the ease of proper

301

Modularisation of Finnish Finite-State Language Description — Towards Wide Collaboration in Open
Source Development of a Morphological Analyser

301



abstraction in finite-state language description us-
ing easily available open source tools while still
providing open source community with the de
facto standard build system of autotoolset for wide
distribution, packaging and deployment.
What we did not address here is the easy way of

coupling up-to-date documentation with our mod-
ularised language description. The next step to re-
search is to see into integrating the notion of liter-
ate programming in this framework. This topic has
already been widely researched by Maxwell and
David (2008), specifically in case of finite-state
language descriptions.

Acknowledgements

We thank Donald Killian for pointing us towards
the ongoing discussion about shortcomings of
finite-state morphologies and the HFST research
group, and our colleagues for fruitful discussions.

References
Kenneth R Beesley and Lauri Karttunen. 2003. Finite

State Morphology. CSLI publications.

Mikel L. Forcada, Mireia Ginestí i Rosell, Jacob Nord-
falk, Jim O’Regan, Sergio Ortiz-Rojas, Juan An-
tonio Pérez-Ortiz, Gema Ramírez-Sánchez, Felipe
Sánchez-Martínez, and Francis M. Tyers. 2010.
Apertium: a free/open-source platform for rule-
based machine translation platform. Machine Trans-
lation. to appear.

Fred Karlsson. 1990. Constraint grammar as a frame-
work for parsing unrestricted text. In H. Karlgren,
editor, Proceedings of the 13th International Confer-
ence of Computational Linguistics, volume 3, pages
168–173, Helsinki.

Kimmo Koskenniemi. 1983. Two-level Morphol-
ogy: A General Computational Model for Word-
Form Recognition and Production. Ph.D. thesis,
University of Helsinki.

Joel Kurola. 2010. Työpaikkailmoitusten sisällön ja
osaamisvaatimusten käsittely. Bachelor’s thesis (in
Finnish).

Krister Lindén and Tommi Pirinen. 2009a. Weighted
finite-state morphological analysis of finnish com-
pounds. In Kristiina Jokinen and Eckhard Bick, ed-
itors, Nodalida 2009, volume 4 of NEALT Proceed-
ings.

Krister Lindén and Tommi Pirinen. 2009b. Weighting
finite-state morphological analyzers using hfst tools.
In Bruce Watson, Derrick Courie, Loek Cleophas,
and Pierre Rautenbach, editors, FSMNLP 2009, 13
July.

Michael Maxwell and Anne David. 2008. Joint gram-
mar development by linguists and computer scien-
tists. In Workshop on NLP for Less Privileged
Languages, Third International Joint Conference on
Natural Language Processing, Hyderabad, India.

Tommi A Pirinen and Krister Lindén. 2010a. Build-
ing and using existing hunspell dictionaries and TEX
hyphenators as finite-state automata. In Proccedings
of Computational Linguistics - Applications, 2010,
pages 25–32, Wisła, Poland.

Tommi A Pirinen and Krister Lindén. 2010b. Finite-
state spell-checking with weighted language and er-
ror models. In Proceedings of the Seventh SaLT-
MiL workshop on creation and use of basic lexi-
cal resources for less-resourced languagages, pages
13–18, Valletta, Malta.

Tommi Pirinen. 2008. Suomen kielen äärellistilainen
automaattinen morfologinen analyysi avoimen
lähdekoodin menetelmin. Master’s thesis, Helsingin
yliopisto.

Shuly Wintner. 2008. Strengths and weaknesses of
finite-state technology: A case study in morpho-
logical grammar development. Nat. Lang. Eng.,
14:457–469, October.

302

Tommi Pirinen

ISSN 1736-6305 Vol. 11
http://hdl.handle.net/10062/16955


