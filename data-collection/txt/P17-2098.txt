



















































Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics


Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 623–628
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-2098

Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 623–628
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-2098

Neural Semantic Parsing over Multiple Knowledge-bases

Jonathan Herzig1,2 and Jonathan Berant1

1Tel-Aviv University, Tel Aviv-Yafo, Israel
2IBM Research, Haifa 31905, Israel

jherzig@gmail.com, joberant@cs.tau.ac.i

Abstract

A fundamental challenge in developing se-
mantic parsers is the paucity of strong su-
pervision in the form of language utter-
ances annotated with logical form. In this
paper, we propose to exploit structural reg-
ularities in language in different domains,
and train semantic parsers over multiple
knowledge-bases (KBs), while sharing in-
formation across datasets. We find that
we can substantially improve parsing ac-
curacy by training a single sequence-to-
sequence model over multiple KBs, when
providing an encoding of the domain at de-
coding time. Our model achieves state-of-
the-art performance on the OVERNIGHT
dataset (containing eight domains), im-
proves performance over a single KB
baseline from 75.6% to 79.6%, while ob-
taining a 7x reduction in the number of
model parameters.

1 Introduction

Semantic parsing is concerned with translat-
ing language utterances into executable logi-
cal forms and constitutes a key technology for
developing conversational interfaces (Zelle and
Mooney, 1996; Zettlemoyer and Collins, 2005;
Kwiatkowski et al., 2011; Liang et al., 2011; Artzi
and Zettlemoyer, 2013; Berant and Liang, 2015).

A fundamental obstacle to widespread use of se-
mantic parsers is the high cost of annotating log-
ical forms in new domains. To tackle this prob-
lem, prior work suggested strategies such as train-
ing from denotations (Clarke et al., 2010; Liang
et al., 2011; Artzi and Zettlemoyer, 2013), from
paraphrases (Berant and Liang, 2014; Wang et al.,
2015) and from declarative sentences (Krishna-
murthy and Mitchell, 2012; Reddy et al., 2014).

Example 1
Domain: HOUSING
“Find a housing that is no more than 800 square feet.”,
Type.HousingUnit u Size.≤ .800
Domain: PUBLICATIONS
“Find an article with no more than two authors”
Type.Article uR[λx.count(AuthorOf.x)].≤ .2
Example 2
Domain: RESTAURANTS
“which restaurant has the most ratings?”
argmax(Type.Restaurant,R[λx.count(R[Rating].x)])
Domain: CALENDAR
“which meeting is attended by the most people?”
argmax(Type.Meeting,R[λx.count(R[Attendee].x)])

Figure 1: Examples for natural language utterances with log-
ical forms in lambda-DCS (Liang, 2013) in different domains
that share structural regularity (a comparative structure in the
first example and a superlative in the second).

In this paper, we suggest an orthogonal solu-
tion: to pool examples from multiple datasets in
different domains, each corresponding to a sepa-
rate knowledge-base (KB), and train a model over
all examples. This is motivated by an observation
that while KBs differ in their entities and proper-
ties, the structure of language composition repeats
across domains (Figure 1). E.g., a superlative in
language will correspond to an ‘argmax’, and a
verb followed by a noun often denotes a join op-
eration. A model that shares information across
domains can improve generalization compared to
a model that is trained on a single domain only.

Recently, Jia and Liang (2016) and Dong and
Lapata (2016) proposed sequence-to-sequence
models for semantic parsing. Such neural mod-
els substantially facilitate information sharing, as
both language and logical form are represented
with similar abstract vector representations in all
domains. We build on their work and examine
models that share representations across domains
during encoding of language and decoding of log-
ical form, inspired by work on domain adaptation

623

https://doi.org/10.18653/v1/P17-2098
https://doi.org/10.18653/v1/P17-2098


(Daume III, 2007) and multi-task learning (Caru-
ana, 1997; Collobert et al., 2011; Luong et al.,
2016; Firat et al., 2016; Johnson et al., 2016). We
find that by providing the decoder with a represen-
tation of the domain, we can train a single model
over multiple domains and substantially improve
accuracy compared to models trained on each do-
main separately. On the OVERNIGHT dataset, this
improves accuracy from 75.6% to 79.6%, setting
a new state-of-the-art, while reducing the number
of parameters by a factor of 7. To our knowledge,
this work is the first to train a semantic parser over
multiple KBs.

2 Problem Setup

We briefly review the model presented by Jia and
Liang (2016), which we base our model on.

Semantic parsing can be viewed as a sequence-
to-sequence problem (Sutskever et al., 2014),
where a sequence of input language tokens x =
x1, . . . , xm is mapped to a sequence of output log-
ical tokens y1, . . . , yn .

The encoder converts x1, . . . , xm into a
sequence of context sensitive embeddings
b1, . . . , bm using a bidirectional RNN (Bahdanau
et al., 2015): a forward RNN generates hidden
states hF1 , . . . , h

F
m by applying the LSTM re-

currence (Hochreiter and Schmidhuber, 1997):
hFi = LSTM(φ

(in)(xi), h
F
i−1), where φ

(in) is
an embedding function mapping a word xi to
a fixed-dimensional vector. A backward RNN
similarly generates hidden states hBm, . . . , h

B
1 by

processing the input sequence in reverse. Finally,
for each input position i, the representation bi is
the concatenation [hFi , h

B
i ] . An attention-based

decoder (Bahdanau et al., 2015; Luong et al.,
2015) generates output tokens one at a time. At
each time step j, it generates yj based on the
current hidden state sj , then updates the hidden
state sj+1 based on sj and yj . Formally, the
decoder is defined by the following equations:

s1 = tanh(W
(s)[hFm, h

B
1 ]),

eji = s
>
j W

(a)bi,

αji =
exp(eji)∑m
i′=1 eji′

,

cj =

m∑

i=1

αjibi,

p(yj = w | x, y1:j−1) ∝ exp(U [sj , cj ]),
sj+1 = LSTM([φ

(out)(yj), cj ], sj),

(1)

where i ∈ {1, . . . ,m} and j ∈ {1, . . . , n}. The
matrices W (s), W (a), U , and the embedding func-
tion φ(out) are decoder parameters. We also em-
ploy attention-based copying as described by Jia
and Liang (2016), but omit details for brevity.

The entire model is trained end-to-end by max-
imizing p(y | x) = ∏nj=1 p(yj | x, y1:j−1).

3 Models over Multiple KBs

In this paper, we focus on a setting where we have
access to K training sets from different domains,
and each domain corresponds to a different KB. In
all domains the input is a language utterance and
the label is a logical form (we assume annotated
logical forms can be converted to a single formal
language such as lambda-DCS in Figure 1). While
the mapping from words to KB constants is spe-
cific to each domain, we expect that the manner in
which language expresses composition of mean-
ing to be shared across domains. We now describe
architectures that share information between the
encoders and decoders of different domains.

3.1 One-to-one model
This model is similar to the baseline model de-
scribed in Section 2. As illustrated in Figure 2, it
consists of a single encoder and a single decoder,
which are used to generate outputs for all domains.
Thus, all model parameters are shared across do-
mains, and the model is trained from all examples.
Note that the number of parameters does not de-
pend on the number of domains K.

Since there is no explicit representation of the
domain that is being decoded, the model must
learn to identify the domain given only the input.
To alleviate that, we encode the k’th domain by a
one-hot vector dk ∈ RK . At each step, the de-
coder updates the hidden state conditioned on the
domain’s one-hot vector, as well as on the previ-
ous hidden state, the output token and the context.
Formally, for domain k, Equation 1 is changed:1

sj+1 = LSTM([φ
(out)(yj), cj , dk], sj). (2)

Recently Johnson et al. (2016) used a similar in-
tuition for neural machine translation, where they
added an artificial token at the beginning of each
source sentence to specify the target language.
We implemented their approach and compare to
it in Section 4.

1For simplicity, we omit the domain index k from our no-
tation whenever it can be inferred from context.

624



“Thai restaurants at NYC”

“3bd apt. near NYU”

encoder decoder

[0,1] [1, 0]

“Thai restaurants at NYC”

“3bd apt. near NYU”

domain 1 

encoder

domain 2 

encoder

general 

encoder

domain 1 

decoder

domain 2 

decoder

Figure 2: Illustration of models with one example from the RESTAURANTS domain and another from the HOUSING domain.
Left: One-to-one model with optional domain encoding. Right: many-to-many model.

Since we have one decoder for multiple do-
mains, tokens which are not in the domain vocab-
ulary could possibly be generated. We prevent that
at test time by excluding out-of-domain tokens be-
fore the softmax (p(yj | x, y1:j−1)) takes place.

3.2 Many-to-many model
In this model, we keep a separate encoder and de-
coder for every domain, but augment the model
with an additional encoder that consumes exam-
ples from all domains (see Figure 2). This is moti-
vated by prior work on domain adaptation (Daume
III, 2007; Blitzer et al., 2011), where each example
has a representation that captures domain-specific
aspects of the example and a representation that
captures domain-general aspects. In our case, this
is achieved by encoding examples with a domain-
specific encoder as well as a domain-general en-
coder, and passing both representations to the de-
coder.

Formally, we now have K + 1 encoders and
K decoders, and denote by hF,ki , h

B,k
i , b

k
i the for-

ward state, backward state and their concatenation
at position i (the domain-general encoder has in-
dex K + 1). The hidden state of the decoder in
domain k is initialized from the domain-specific
and domain-general encoder:

s1 = tanh(W
(s)[hF,km , h

B,k
1 , h

F,K+1
m , h

B,K+1
1 ]).

Then, we compute unnormalized attention
scores based on both encoders, and represent the
language context with both domain-general and
domain-specific representations. Equation 1 for
domain k is changed as follows:

eji = s
>
j W

(a)[bki , b
K+1
i ],

cj =

m∑

i=1

αji[b
k
i , b

K+1
i ].

In this model, the number of encoding parameters
grows by a factor of 1k , and the number of decod-
ing parameters grows by less than a factor of 2.

3.3 One-to-many model

Here, a single encoder is shared, while we keep
a separate decoder for each domain. The shared
encoder captures the fact that the input in each do-
main is a sequence of English words. The domain-
specific decoders learn to output tokens from the
right domain vocabulary.

4 Experiments

4.1 Data

We evaluated our system on the OVERNIGHT se-
mantic parsing dataset, which contains 13, 682 ex-
amples of language utterances paired with log-
ical forms across eight domains. OVERNIGHT
was constructed by generating logical forms from
a grammar and annotating them with language
through crowdsourcing. We evaluated on the same
train/test split as Wang et al. (2015), using the
same accuracy metric, that is, the proportion of
questions for which the denotations of the pre-
dicted and gold logical forms are equal.

4.2 Implementation Details

We replicate the experimental setup of Jia and
Liang (2016): We used the same hyper-parameters
without tuning; we used 200 hidden units and 100-
dimensional word vectors; we initialized parame-
ters uniformly within the interval [−0.1, 0.1], and
maximized the log likelihood of the correct logical
form with stochastic gradient descent. We trained
the model for 30 epochs with an initial learning
rate of 0.1, and halved the learning rate every 5
epochs, starting from epoch 15. We replaced word
vectors for words that occur only once in the train-
ing set with a universal <unk> word vector. At
test time, we used beam search with beam size 5.
We then picked the highest-scoring logical form
that does not yield an executor error when its de-
notation is computed. Our models were imple-
mented in Theano (Bergstra et al., 2010).

625



Model Basketball Blocks Calendar Housing Publications Recipes Restaurants Social Avg. # Model Params
INDEP 85.2 61.2 77.4 67.7 74.5 79.2 79.5 80.2 75.6 14.1 M
MANY2MANY 83.9 63.2 79.8 75.1 75.2 81.5 79.8 82.4 77.6 22.8 M
ONE2MANY 84.4 59.1 79.8 74.6 80.1 81.5 80.7 81.1 77.7 8.6 M
INPUTTOKEN 85.9 63.2 79.2 77.8 75.8 80.6 82.5 81.0 78.2 2 M
ONE2ONE 84.9 63.4 75.6 76.7 78.9 83.8 81.3 81.4 78.3 2 M
DOMAINENCODING 86.2 62.7 82.1 78.3 80.7 82.9 82.2 81.7 79.6 2 M

Table 1: Test accuracy for all models on all domains, along with the number of parameters for each model.

4.3 Results

For our main result, we trained on all eight
domains all models described in Section 3:
ONE2ONE, DOMAINENCODING and INPUTTO-
KEN representing respectively the basic one-to-
one model, with extensions of one-hot domain en-
coding or an extra input token, as described in
Section 3.1. MANY2MANY and ONE2MANY are
the models described in Sections 3.2 and 3.3, re-
spectively. INDEP is the baseline sequence-to-
sequence model described in Section 2, which
trained independently on each domain.

Results show (Table 1) that training on multi-
ple KBs improves average accuracy over all do-
mains for all our proposed models, and that per-
formance improves as more parameters are shared.
Our strongest results come when parameter shar-
ing is maximal (i.e., single encoder and single de-
coder), coupled with a one-hot domain represen-
tation at decoding time (DOMAINENCODING). In
this case accuracy improves not only on average,
but also for each domain separately. Moreover, the
number of model parameters necessary for train-
ing the model is reduced by a factor of 7.

Our baseline, INDEP, is a reimplementation of
the NORECOMBINATION model described in Jia
and Liang (2016), which achieved average accu-
racy of 75.8% (corresponds to our 75.6% result).
Jia and Liang (2016) also introduced a framework
for generating new training examples in a single
domain through recombination. Their model that
uses the most training data achieved state-of-the-
art average accuracy of 77.5% on OVERNIGHT.
We show that by training over multiple KBs we
can achieve higher average accuracy, and our best
model, DOMAINENCODING, sets a new state-of-
the-art average accuracy of 79.6%.

Figure 3 shows a learning curve for all mod-
els on the test set, when training on a frac-
tion of the training data. We observe that the
difference between models that share parame-
ters (INPUTTOKEN, ONE2ONE and DOMAINEN-
CODING) and models that keep most of the pa-

0 0.1 0.2 0.5 1
30

40

50

60

70

80

Training data fraction

A
ve

ra
ge

ac
cu

ra
cy

INDEP
MANY2MANY
ONE2MANY
INPUTTOKEN

ONE2ONE
DOMAINENCODING

Figure 3: Learning curves for all models on the test set.

rameters separate (INDEP, MANY2MANY and
ONE2MANY) is especially pronounced when the
amount of data is small, reaching a difference of
more than 15 accuracy point with 10% of the train-
ing data. This highlights the importance of using
additional data from a similar distribution without
increasing the number of parameters when there is
little data. The learning curve also suggests that
the MANY2MANY model improves considerably
as the amount of data increases, and it would be
interesting to examine its performance on larger
datasets.

4.4 Analysis
Learning a semantic parser involves mapping lan-
guage phrases to KB constants, as well as learning
how language composition corresponds to logical
form composition. We hypothesized that the main
benefit of training on multiple KBs lies in learn-
ing about compositionality. To verify that, we ap-
pend the domain index to the name of every con-
stant in every KB, and therefore constant names
are disjoint across datasets. We train DOMAINEN-
CODING on this dataset and obtain an accuracy
of 79.1% (comparing to 79.6%), which hints that
most of the gain is attributed to compositionality
rather than mapping of language to KB constants.

We also inspected cases where DOMAINEN-

626



CODING performed better than INDEP, by ana-
lyzing errors on a development set (20% of the
training data). We found 45 cases where INDEP
makes an error (and DOMAINENCODING does
not) by predicting a wrong comparative or superla-
tive structure (e.g., > instead of ≥). However,
the opposite case occurs only 29 times. This re-
iterates how we learn structural linguistic regular-
ities when sharing parameters.

Lastly, we observed that the domain’s training
set size negatively correlates with its relative im-
provement in performance (DOMAINENCODING
accuracy compared to INDEP), where Spearman’s
ρ = −0.86. This could be explained by the ten-
dency of smaller domains to cover a smaller frac-
tion of structural regularities in language, thus,
they gain more by sharing information.

5 Conclusion

In this paper we address the challenge of obtaining
training data for semantic parsing from a new per-
spective. We propose that one can improve pars-
ing accuracy by training models over multiple KBs
and demonstrate this on the eight domains of the
OVERNIGHT dataset.

In future work, we would like to further reduce
the burden of data gathering by training character-
level models that learn to map language phrases to
KB constants across datasets, and by pre-training
language side models that improve the encoder
from data that is independent of the KB. We also
plan to apply this method on datasets where only
denotations are provided rather than logical forms.

Reproducibility

All code, data, and experiments for
this paper are available on the CodaLab
platform at https://worksheets.
codalab.org/worksheets/
0xdec998f58deb4829aba80fbf49f69236/.

Acknowledgments

We thank Shimi Salant and the anonymous re-
viewers for their constructive feedback. This
work was partially supported by the Israel Science
Foundation, grant 942/16.

References
Y. Artzi and L. Zettlemoyer. 2013. Weakly supervised

learning of semantic parsers for mapping instruc-

tions to actions. Transactions of the Association for
Computational Linguistics (TACL) 1:49–62.

D. Bahdanau, K. Cho, and Y. Bengio. 2015. Neural
machine translation by jointly learning to align and
translate. In International Conference on Learning
Representations (ICLR).

J. Berant and P. Liang. 2014. Semantic parsing via
paraphrasing. In Association for Computational
Linguistics (ACL).

J. Berant and P. Liang. 2015. Imitation learning of
agenda-based semantic parsers. Transactions of the
Association for Computational Linguistics (TACL)
3:545–558.

J. Bergstra, O. Breuleux, F. Bastien, P. Lamblin, R. Pas-
canu, G. Desjardins, J. Turian, D. Warde-Farley, and
Y. Bengio. 2010. Theano: a CPU and GPU math
expression compiler. In Python for Scientific Com-
puting Conference.

J. Blitzer, S. Kakade, and D. P. Foster. 2011. Domain
adaptation with coupled subspaces. In Artificial In-
telligence and Statistics (AISTATS). pages 173–181.

R. Caruana. 1997. Multitask learning. Machine Learn-
ing 28:41–75.

J. Clarke, D. Goldwasser, M. Chang, and D. Roth.
2010. Driving semantic parsing from the world’s re-
sponse. In Computational Natural Language Learn-
ing (CoNLL). pages 18–27.

R. Collobert, J. Weston, L. Bottou, M. Karlen,
K. Kavukcuoglu, and P. Kuksa. 2011. Natural lan-
guage processing (almost) from scratch. Journal of
Machine Learning Research (JMLR) 12:2493–2537.

H. Daume III. 2007. Frustratingly easy domain adap-
tation. In Association for Computational Linguistics
(ACL).

L. Dong and M. Lapata. 2016. Language to logical
form with neural attention. In Association for Com-
putational Linguistics (ACL).

O. Firat, K. Cho, and Y. Bengio. 2016. Multi-way, mul-
tilingual neural machine translation with a shared at-
tention mechanism. In North American Association
for Computational Linguistics (NAACL).

S. Hochreiter and J. Schmidhuber. 1997. Long short-
term memory. Neural Computation 9(8):1735–
1780.

R. Jia and P. Liang. 2016. Data recombination for neu-
ral semantic parsing. In Association for Computa-
tional Linguistics (ACL).

M. Johnson, M. Schuster, Q. V. Le, M. Krikun,
Y. Wu, Z. Chen, N. Thorat, F. Vigas, M. Wat-
tenberg, G. Corrado, M. Hughes, and J. Dean.
2016. Google’s multilingual neural machine trans-
lation system: Enabling zero-shot translation. arXiv
preprint arXiv:1611.04558 .

627



J. Krishnamurthy and T. Mitchell. 2012. Weakly
supervised training of semantic parsers. In Em-
pirical Methods in Natural Language Processing
and Computational Natural Language Learning
(EMNLP/CoNLL). pages 754–765.

T. Kwiatkowski, L. Zettlemoyer, S. Goldwater, and
M. Steedman. 2011. Lexical generalization in CCG
grammar induction for semantic parsing. In Em-
pirical Methods in Natural Language Processing
(EMNLP). pages 1512–1523.

P. Liang. 2013. Lambda dependency-based composi-
tional semantics. arXiv .

P. Liang, M. I. Jordan, and D. Klein. 2011. Learn-
ing dependency-based compositional semantics. In
Association for Computational Linguistics (ACL).
pages 590–599.

M. Luong, Q. V. Le, I. Sutskever, O. Vinyals, and
L. Kaiser. 2016. Multi-task sequence to sequence
learning. In International Conference on Learning
Representations (ICLR).

M. Luong, H. Pham, and C. D. Manning. 2015. Effec-
tive approaches to attention-based neural machine
translation. In Empirical Methods in Natural Lan-
guage Processing (EMNLP). pages 1412–1421.

S. Reddy, M. Lapata, and M. Steedman. 2014. Large-
scale semantic parsing without question-answer
pairs. Transactions of the Association for Compu-
tational Linguistics (TACL) 2(10):377–392.

I. Sutskever, O. Vinyals, and Q. V. Le. 2014. Sequence
to sequence learning with neural networks. In Ad-
vances in Neural Information Processing Systems
(NIPS). pages 3104–3112.

Y. Wang, J. Berant, and P. Liang. 2015. Building a
semantic parser overnight. In Association for Com-
putational Linguistics (ACL).

M. Zelle and R. J. Mooney. 1996. Learning to parse
database queries using inductive logic program-
ming. In Association for the Advancement of Arti-
ficial Intelligence (AAAI). pages 1050–1055.

L. S. Zettlemoyer and M. Collins. 2005. Learning to
map sentences to logical form: Structured classifica-
tion with probabilistic categorial grammars. In Un-
certainty in Artificial Intelligence (UAI). pages 658–
666.

628


	Neural Semantic Parsing over Multiple Knowledge-bases

