



















































A Joint Graph Model for Pinyin-to-Chinese Conversion with Typo Correction


Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 1512–1523,
Baltimore, Maryland, USA, June 23-25 2014. c©2014 Association for Computational Linguistics

A Joint Graph Model for Pinyin-to-Chinese Conversion
with Typo Correction∗

Zhongye Jia and Hai Zhao†
MOE-Microsoft Key Laboratory for Intelligent Computing and Intelligent Systems,

Center for Brain-Like Computing and Machine Intelligence
Department of Computer Science and Engineering, Shanghai Jiao Tong University

800 Dongchuan Road, Shanghai 200240, China
jia.zhongye@gmail.com, zhaohai@cs.sjtu.edu.cn

Abstract

It is very import for Chinese language pro-
cessing with the aid of an efficient input
method engine (IME), of which pinyin-
to-Chinese (PTC) conversion is the core
part. Meanwhile, though typos are in-
evitable during user pinyin inputting, ex-
isting IMEs paid little attention to such big
inconvenience. In this paper, motivated by
a key equivalence of two decoding algo-
rithms, we propose a joint graph model to
globally optimize PTC and typo correction
for IME. The evaluation results show that
the proposed method outperforms both ex-
isting academic and commercial IMEs.

1 Introduction

1.1 Chinese Input Method

The daily life of Chinese people heavily depends
on Chinese input method engine (IME), no matter
whether one is composing an E-mail, writing an
article, or sending a text message. However, ev-
ery Chinese word inputted into computer or cell-
phone cannot be typed through one-to-one map-
ping of key-to-letter inputting directly, but has to
go through an IME as there are thousands of Chi-
nese characters for inputting while only 26 letter
keys are available in the keyboard. An IME is
an essential software interface that maps Chinese
characters into English letter combinations. An ef-

∗This work was partially supported by the National Natu-
ral Science Foundation of China (Grant No.60903119, Grant
No.61170114, and Grant No.61272248), the National Ba-
sic Research Program of China (Grant No.2013CB329401),
the Science and Technology Commission of Shanghai Mu-
nicipality (Grant No.13511500200), and the European Union
Seventh Framework Program (Grant No.247619).

†Corresponding author

ficient IME will largely improve the user experi-
ence of Chinese information processing.

Nowadays most of Chinese IMEs are pinyin
based. Pinyin is originally designed as the pho-
netic symbol of a Chinese character (based on the
standard modern Chinese, mandarin) , using Latin
letters as its syllable notation. For example, the
pinyin of the Chinese character “爱”(love) is “ài”.
Most characters usually have unique pinyin rep-
resentations, while a few Chinese characters may
be pronounced in several different ways, so they
may have multiple pinyin representations. The ad-
vantage of pinyin IME is that it only adopts the
pronunciation perspective of Chinese characters
so that it is simple and easy to learn. But there
are only less than 500 pinyin syllables in stan-
dard modern Chinese, compared with over 6,000
commonly used Chinese characters, which leads
to serious ambiguities for pinyin-to-charactermap-
ping. Modern pinyin IMEsmostly use a “sentence-
based” decoding technique (Chen and Lee, 2000)
to alleviate the ambiguities. “Sentence based”
means that IME generates a sequence of Chinese
characters upon a sequence of pinyin inputs with
respect to certain statistical criteria.

1.2 Typos and Chinese Spell Checking

Written in Chinese characters but not alphabets,
spell checking for Chinese language is quite dif-
ferent from the same task for other languages.
Since Chinese characters are entered via IME,
those user-made typos do not immediately lead to
spelling errors. When a user types a wrong letter,
IME will be very likely to fail to generate the ex-
pected Chinese character sequence. Normally, the
user may immediately notice the inputting error
and then make corrections, which usually means
doing a bunch of extra operations like cursor

1512



movement, deletion and re-typing. Thus there are
two separated sub-tasks for Chinese spell check-
ing: 1. typo checking for user typed pinyin se-
quences which should be a built-in module in
IME, and 2. spell checking for Chinese texts in
its narrow sense, which is typically a module of
word processing applications (Yang et al., 2012b).
These two terms are often confused especially in
IME related works such as (Chen and Lee, 2000)
and (Wu et al., 2009).

Pinyin typos have always been a serious prob-
lem for Chinese pinyin IMEs. The user may fail
to input the completely right pinyin simply be-
cause he/she is a dialect speaker and does not know
the exact pronunciation for the expected character.
This may be a very common situation since there
are about seven quite different dialects in Chinese,
among which being spoken languages, six are far
different from the standard modern Chinese, man-
darin. With the boom of smart-phones, pinyin ty-
pos worsen due to the limited size of soft key-
board, and the lack of physical feedback on the
touch screen. However, existing practical IMEs
only provide small patches to deal with typos such
as Fuzzy Pinyin (Wu and Chen, 2004) and other
language specific errors (Zheng et al., 2011b).

Typo checking and correction has an important
impact on IME performance. When IME fails to
correct a typo and generate the expected sentence,
the user will have to takemuch extra effort to move
the cursor back to the mistyped letter and correct it,
which leads to very poor user experience (Jia and
Zhao, 2013).

2 Related Works

The very first approach for Chinese input with
typo correction was made by (Chen and Lee,
2000), which was also the initial attempt of
“sentence-based” IME. The idea of “statistical in-
put method” was proposed by modeling PTC con-
version as a hidden Markov model (HMM), and
using Viterbi (Viterbi, 1967) algorithm to decode
the sequence. They solved the typo correction
problem by decomposing the conditional proba-
bility P (H|P ) of Chinese character sequence H
given pinyin sequence P into a language model
P (wi|wi−1) and a typing model P (pi|wi). The
typing model that was estimated on real user input
data was for typo correction. However, real user
input data can be very noisy and not very conve-
nient to obtain. As we will propose a joint model

in this paper, such an individual typing model is
not necessarily built in our approach.

(Zheng et al., 2011a) developed an IME sys-
tem with typo correction called CHIME using
noisy channel error model and language-specific
features. However their model depended on a
very strong assumption that input pinyin sequence
should have been segmented into pinyin words by
the user. This assumption does not really hold in
modern “sentence-based” IMEs. We release this
assumption since our model solves segmentation,
typo correction and PTC conversion jointly.

Besides the common HMM approach for PTC
conversion, there are also variousmethods such as:
support vector machine (Jiang et al., 2007), max-
imum entropy (ME) model (Wang et al., 2006),
conditional random field (CRF) (Li et al., 2009)
and statistical machine translation (SMT) (Yang et
al., 2012a; Wang et al., 2013c; Zhang and Zhao,
2013), etc.

Spell checking or typo checking was first pro-
posed for English (Peterson, 1980). (Mays et al.,
1991) addressed that spell checking should be done
within a context, i.e., a sentence or a long phrase
with a certain meaning, instead of only in one
word. A recent spell correction work is (Li et al.,
2006), where a distributional similarity was intro-
duced for spell correction of web queries.

Early attempts for Chinese spelling checking
could date back to (Chang, 1994) where charac-
ter tables for similar shape, pronunciation, mean-
ing, and input-method-code characters were pro-
posed. More recently, the 7th SIGHANWorkshop
on Chinese Language Processing (Yu et al., 2013)
held a shared task on Chinese spell checking. Var-
ious approaches were made for the task includ-
ing language model (LM) based methods (Chen
et al., 2013), ME model (Han and Chang, 2013),
CRF (Wang et al., 2013d; Wang et al., 2013a),
SMT (Chiu et al., 2013; Liu et al., 2013), and graph
model (Jia et al., 2013), etc.

3 Pinyin Input Method Model

3.1 From English Letter to Chinese Sentence

It is a rather long journey from the first English
letter typed on the keyboard to finally a completed
Chinese sentence generated by IME. We will first
take an overview of the entire process.

The average length of pinyin syllables is about 3
letters. There are about 410 pinyin syllables used
in the current pinyin system. Each pinyin sylla-

1513



ble has a bunch of corresponding Chinese char-
acters which share the same pronunciation repre-
sented by the syllable. The number of those homo-
phones ranges from 1 to over 300. Chinese char-
acters then form words. But word in Chinese is
a rather vague concept. Without word delimiters,
linguists have argued on what a Chinese word re-
ally is for a long time and that is why there is al-
ways a primary word segmentation treatment in
most Chinese language processing tasks (Zhao et
al., 2006; Huang and Zhao, 2007; Zhao and Kit,
2008; Zhao et al., 2010; Zhao and Kit, 2011; Zhao
et al., 2013). A Chinese word may contain from
1 to over 10 characters due to different word seg-
mentation conventions. Figure 1 demonstrates the
relationship of pinyin andword, from pinyin letters
“nihao” to the word “你好 (hello)”. Typically, an
IME takes the pinyin input, segments it into sylla-
bles, looks up corresponding words in a dictionary
and generates a sentence with the candidate words.

nihao

你好

ni hao

好你

Pinyin syllables

Chinese characters

Pinyin word

Chinese word

n i h a o Pinyin characters

Figure 1: Relationship of pinyin and words

3.2 Pinyin Segmentation and Typo
Correction

Non-Chinese users may feel confused or even
surprised if they know that when typing pinyin
through an IME, Chinese IME users will never en-
ter delimiters such as “Space” key to segment ei-
ther pinyin syllables or pinyin words, but just in-
put the entire un-segmented pinyin sequence. For
example, if one wants to input “你好世界 (Hello
world)”, he will just type “nihaoshijie” instead of
segmented pinyin sequence “ni hao shi jie”. Nev-
ertheless, pinyin syllable segmentation is a much
easier problem compared to Chinese word seg-
mentation. Since pinyin syllables have a very lim-
ited vocabulary and follow a set of regularities
strictly, it is convenient to perform pinyin sylla-

ble segmentation by using rules. But as the pinyin
input is not segmented, it is nearly impossible to
adopt previous spell checking methods for English
to pinyin typo checking, although techniques for
English spell checking have been well developed.
A bit confusing but interesting, pinyin typo cor-
rection and segmentation come as two sides of one
problem: when a pinyin sequence is mistyped, it
is unlikely to be correctly segmented; when it is
segmented in an awkward way, it is likely to be
mistyped.

Inspired by (Yang et al., 2012b) and (Jia et al.,
2013), we adopt the graph model for Chinese spell
checking for pinyin segmentation and typo correc-
tion, which is based on the shortest path word seg-
mentation algorithm (Casey and Lecolinet, 1996).
The model has two major steps: segmentation and
correction.

3.2.1 Pinyin Segmentation
The shortest path segmentation algorithm is based
on the idea that a reasonable segmentation should
minimize the number of segmented units. For a
pinyin sequence p1p2 . . . pL, where pi is a letter,
first a directed acyclic graph (DAG) GS = (V, E)
is built for pinyin segmentation step. The vertex
set V consists of the following parts:

• Virtual start vertex S0 and end vertex SE ;
• Possible legal syllables fetched from dictio-
nary Dp according to the input pinyin se-
quence:

{Si,j |Si,j = pi . . . pj ∈ Dp};
• The letter itself as a fallback no matter if it is
a legal pinyin syllable or not:

{Si|Si = pi}.
The vertex weights wS are all set to 0. The edges
are from a syllable to all syllables next to it:

E = {E(Si,j → Sj+1,k)|Si,j , Sj+1,k ∈ V}.
The edge weight the negative logarithm of con-
ditional probability P (Sj+1,k|Si,j) that a syllable
Si,j is followed by Sj+1,k, which is give by a bi-
gram language model of pinyin syllables:

WE(Si,j→Sj+1,k) = − logP (Sj+1,k|Si,j)
The shortest path P ∗ on the graph is the path P
with the least sum of weights:

P ∗ = argmin
(v,E)∈G∧(v,E)∈P

∑
v

wv +
∑
E

WE .

1514



Computing the shortest path from S0 to SE on
GS yields the best segmentation. This is the sin-
gle source shortest path (SSSP) problem on DAG
which has an efficient algorithm by preprocessing
the DAG with topology sort, then traversing ver-
tices and edges in topological order. It has the time
complexity of O(|V|+ |E|). For example, one in-
tends to input “你好世界 (Hello world)” by typ-
ing “nihaoshijie”, but mistyped as “mihaoshijiw”.
The graph for this input is shown in Figure 2. The
shortest path, i.e., the best segmentation is “mi hao
shi ji w”. We will continue to use this example in
the rest of this paper.

m i h a o s h i j i w

ha

hao

ao

shi

ji

mi

Figure 2: Graph model for pinyin segmentation

3.2.2 Pinyin Typo Correction
Next in the correction step, for the segmented
pinyin sequence S1, S2, . . . , SM , a graph Gc is
constructed to perform typo correction. The ver-
tex set V consists of the following parts:

• Virtual start vertex S′0 and end vertex S′E with
vertex weights of 0;

• All possible syllables similar to original syl-
lable in Gs. If the adjacent syllables can be
merged into a legal syllable, the merged syl-
lable is also added into V:

{S′i,j |S′i,j = S′i . . . S′j ∈ Dp,
S′k ∼ Sk, k = i ≤ j},

where the similarity ∼ is measured in Lev-
enshtein distance (Levenshtein, 1966). Sylla-
bles with Levenshtein distance under a certain
threshold are considered as similar:

L(Si, Sj) < T ↔ Si ∼ Sj .

The vertex weight is the Levenshtein distance
multiply by a normalization parameter:

wS′i,j = β
j∑

k−i
L(S′k, Sk).

Similar toGs, the edges are from one syllable to all
syllables next to it and edge weights are the condi-
tional probabilities between them. Computing the
shortest path from S′0 to S′E on Gc yields the best
typo correction result. In addition, the result has
been segmented so far. Considering our running
example, the graph Gc is shown in Figure 3, and
the typo correction result is “mi hao shi jie”.

whao shi ji

jie

mi

ti

ni

ma

hai

huo

pao

shu

sai

zhi

jia

...

...

...

... ...

... ...

...

a

e

...

shuai

ju

Figure 3: Graph model for pinyin typo correction

Merely using the above model, the typo cor-
rection result is not satisfying yet, no matter how
much effort is paid. The major reason is that the
basic semantic unit of Chinese language is actu-
ally word (tough vaguely defined) which is usu-
ally composed of several characters. Thus the con-
ditional probability between characters does not
make much sense. In addition, a pinyin syllable
usually maps to dozens or even hundreds of cor-
responding homophonic characters, which makes
the conditional probability between syllablesmuch
more noisy. However, using pinyin words instead
of syllables is not a wise choice because pinyin
word segmentation is not so easy a task as syllable
segmentation. To make typo correction better, we
consider to integrate it with PTC conversion using
a joint model.

3.3 Hidden Markov Model for
Pinyin-to-Chinese Conversion

PTC conversion has long been viewed as a decod-
ing problem using HMM. We continue to follow
this formalization. The best Chinese character se-
quence W ∗ for a given pinyin syllable sequence S
is the one with the highest conditional probability
P (W |S) that
W ∗ = argmax

W
P (W |S)

= argmax
W

P (W )P (S|W )
P (S)

= argmax
W

P (W )P (S|W )

= argmax
w1,ww,...,wM

∏
wi

P (wi|wi−1)
∏
wi

P (si|wi)

1515



In the HMM for pinyin IME, observation states are
pinyin syllables, hidden states are Chinese words,
emission probability is P (si|wi), and transition
probability is P (wi|wi−1). Note the transition
probability is the conditional probability between
words instead of characters. PTC conversion is to
decode the Chinese word sequence from the pinyin
sequence. The Viterbi algorithm (Viterbi, 1967) is
used for the decoding.

The shortest path algorithm for typo correction
and Viterbi algorithm for PTC conversion are very
closely related. It has been strictly proven by (For-
ney, 1973) that the sequence decoding problem on
HMM is formally identical to finding a shortest
path on a certain graph, which can be constructed
in the following manner.

Consider a first order HMM with all possi-
ble observations O = {o1, o2, . . . , oM}, hidden
states S = {s1, s2, . . . , sN}, a special start state
s0, emission probabilities (Esi,ok) = P (ok|si),
transition probabilities (Tsi,sj ) = P (sj |si), and
start probabilities (Ssi) = P (si|s0). For an
observation sequence of T time periods Y =
{y1, y2, . . . , yT |yt ∈ O, t = 1, . . . , T}, the de-
coding problem is to find the best corresponding
hidden state sequence X∗ with the highest proba-
bility, i.e.,

X∗ = argmax
x1,xt∈S

Sx1Ex1,y1
T∏

t=2

Ext,ytTxt−1,xt . (1)

Thenwewill construct a DAGG = (V, E) upon
the HMM. The vertex set V includes:

• Virtual start vertex v0 and end vertex vE with
vertex weight of 0;

• Normal vertices vxt , where t = 1, . . . , T , and
∀xt ∈ S. The vertex weight is the negative
logarithm of emission probability:

wvxt = − log Ext,yt .

The edge set E includes:

• Edges from the start vertexE(v0 → vx1)with
edge weight

WE(v0→vx1 ) = − logSx1 ,

where ∀x1 ∈ S;
• Edges to the end vertex E(vxT → vE) with
vertex weights of 0;

• Edges between adjacent time periods
E(vxt−1 → vxt) with edge weight

WE(vxt−1→vxt ) = − log Txt−1,xt ,

where t = 2, . . . , T , and ∀xt, xt−1 ∈ S.

The shortest path P ∗ from v0 to vE is the one with
the least sum of vertex and edge weights, i.e.,

P ∗ = argmin
vxt∈V

T∑
t=1

(wvxt + WE(vxt−1→vxt ))

= argmin
vx1 ,vxt∈V

{− logSx1 − log Ex1,y1

+
T∑

t=2

(− log Ext,yt − log Txt−1,xt)}

= argmax
vx1 ,vxt∈V

Sx1Ex1,y1
T∏

t=2

Ext,ytTxt−1,xt . (2)

The optimization goal of P ∗ in Equation (2) is
identical to that of X∗ in Equation (1).

3.4 Joint Graph Model For Pinyin IME

Given HMM decoding problem is identical to
SSSP problem on DAG, we propose a joint graph
model for PTC conversion with typo correction.
The joint graph model aims to find the global op-
timal for both PTC conversion and typo correction
on the entire input pinyin sequence. The graph
G = (V, E) is constructed based on graph Gc for
typo correction in Section 3.2. The vertex set V
consists of the following parts:

• Virtual start vertex V0 and end vertex VE with
vertex weight of 0;

• Adjacent pinyin syllables in Gc are merged
into pinyin words. Corresponding Chinese
words are fetched from a PTC dictionary Dc,
which is a dictionary maps pinyin words to
Chinese words, and added as vertices:

{Vi,j |∀Vi,j ∈ Dc[S′i . . . S′j ], i ≤ j};

The vertex weight consists of two parts: 1.
the vertex weights of syllables in Gc, and 2.
the emission probability:

wVi,j =β
j∑

k=i

L(S′k, Sk)

− γ logP (S′i . . . S′j |Vi,j);

1516



If the corresponding pinyin syllables in Gc have an
edge between them, the vertices in G also have an
edge:

E = {E(Vi,j → Vj+1,k)|E(Si,j → Sj+1,k) ∈ Gc}.

The edge weights are the negative logarithm of the
transition probabilities:

WE(Vi,j→Vj+1,k) = − logP (Vj+1,k|Vi,j)

Although the model is formulated on first order
HMM, i.e., the LM used for transition probabil-
ity is a bigram one, it is easy to extend the model
to take advantage of higher order n-gram LM, by
tracking longer history while traversing the graph.

Computing the shortest path from V0 to VE onG
yields the best pinyin-to-Chinese conversion with
typo correction result. Considering our running
example, the graph G is shown in Figure 4.

ni’hao

whao shi ji

jiemi

ti

ni

ma hai

huo

pao

shu

sai

zhi

jia

a

eshuai

ju

mi’huo

你好

...

zhi'ji

shi'jie

接
姐
节

...

你
呢
呢

...

米
迷

...

饿
额

...

啊
阿

...

家
加

...
吗
嘛
妈

...

跑
泡

...

好
好
豪

...

或
活
火

...

还
海

...

只
之

...

提
题

...

世
事

...

束
书
数

...

赛
塞
鳃

...

迷惑

...

至极

...

帅
甩
摔

...

句
局

...

及
几

...

世界

...

Figure 4: Joint graph model

The joint graph is rather huge and density. Ac-
cording to our empirical statistics, when setting
threshold T = 2, for a sentence of M characters,
the joint graph will have |V| = M × 1, 000, and
|E| = M × 1, 000, 000.
3.5 K-Shortest Paths
To reduce the scale of graph G, we filter graph Gc
by searching itsK-shortest paths first to getG′c and
construct G on top of G′c. Figure 5 shows the 3-
shortest paths filtered graphG′c and Figure 6 shows
the correspondingG for our running example. The
scale of graph may be thus drastically reduced.

hao shi

ji

jie

mi

ni

huo zhi a

Figure 5: K-shortest paths in typo correction

An efficient heap data structure is required in
K-shortest paths algorithm (Eppstein, 1998) for

hao shi

ji

jie

mi

ni

huo zhi a

ni’hao

mi’huo zhi'ji

shi'jie

只
之

...

世界

...

至极

...

啊
阿

...

接
姐
节

...

及
几

...

世
事

...

好
好
豪

...

你好

...

你
呢
呢

...

米
迷

...

迷惑

...

或
活
火

...

Figure 6: Filtered graph model

backtracking the best paths to current vertex while
traversing. The heap is implemented as a priority
queue of size K sorted according to path length
that should support efficient push and pop opera-
tions. Fibonacci heap (Fredman and Tarjan, 1987)
is adopted for the heap implementation since it has
a push complexity of O(1) which is better than the
O(K) for other heap structures.

Another benefit provided by K-shortest paths
is that it can be used for generating N -best can-
didates of PTC conversion, which may be helpful
for further performance improvement.

4 Experiments

4.1 Corpora, Tools and Experiment Settings

The corpus for evaluation is the one provided
in (Yang et al., 2012a), which is originally ex-
tracted from the People’s Daily corpus and labeled
with pinyin. The corpus has already been split into
training T, development D and test T
sets as shown in Table 1.

T D T
#Sentence 1M 2K 100K
#character 43,679,593 83,765 4,123,184

Table 1: Data set size

SRILM (Stolcke, 2002) is adopted for lan-
guagemodel training andKenLM (Heafield, 2011;
Heafield et al., 2013) for language model query.
The Chinese part of the corpus is segmented into
words before LM training. Maximum match-
ing word segmentation is used with a large word
vocabulary V extracted from web data provided
by (Wang et al., 2013b). The pinyin part is seg-
mented according to the Chinese part. This vo-
cabulary V also serves as the PTC dictionary. The
original vocabulary is not labeled with pinyin, thus
we use the PTC dictionary of sunpinyin1 which is
an open source Chinese pinyin IME, to label the

1http://code.google.com/p/sunpinyin/

1517



vocabulary V with pinyin. The emission proba-
bilities are estimated using the lexical translation
module of MOSES (Koehn et al., 2007) as “trans-
lation probability” from pinyin to Chinese.

4.2 Evaluation Metrics

Wewill use conventional sequence labeling evalu-
ation metrics such as sequence accuracy and char-
acter accuracy2.

Chinese characters in a sentence may be sepa-
rated by digits, punctuation and alphabets which
are directly inputted without the IME. We fol-
low the so-called term Max Input Unit (MIU), the
longest consecutive Chinese character sequence
proposed by (Jia and Zhao, 2013). We will mainly
consider MIU accuracy (MIU-Acc) which is the
ratio of the number of completely corrected gen-
erated MIUs over the number of all MIUs, and
character accuracy (Ch-Acc), but the sentence ac-
curacy (S-Acc) will also be reported in evaluation
results.

We will also report the conversion error
rate (ConvER) proposed by (Zheng et al., 2011a),
which is the ratio of the number of mistyped pinyin
word that is not converted to the right Chinese
word over the total number of mistyped pinyin
words3.

4.3 Baseline System without Typo Correction

Firstly we build a baseline system without typo
correction which is a pipeline of pinyin syllable
segmentation and PTC conversion. The baseline
system takes a pinyin input sequence, segments it
into syllables, and then converts it to Chinese char-
acter sequence.

The pinyin syllable segmentation already has
very high (over 98%) accuracy with a trigram LM
using improved Kneser-Ney smoothing. Accord-
ing to our empirical observation, emission prob-
abilities are mostly 1 since most Chinese words
have unique pronunciation. So in this step we set
γ = 0. We consider different LM smoothing
methods including Kneser-Ney (KN), improved
Kneser-Ney (IKN), and Witten-Bell (WB). All of
the three smoothing methods for bigram and tri-
gram LMs are examined both using back-off mod-

2We only work on the PTC conversion part of IME, thus
we are unable to use existing evaluation systems (Jia and
Zhao, 2013) for full Chinese IME functions.

3Other evaluation metrics are also proposed by (Zheng et
al., 2011a) which is only suitable for their system since our
system uses a joint model

els and interpolated models. The number of N -
best candidates for PTC conversion is set to 10.
The results on D are shown in Figure 7 in which
the “-i” suffix indicates using interpolated model.
According to the results, we then choose the tri-
gram LM using Kneser-Ney smoothing with inter-
polation.

 0.62

 0.64

 0.66

 0.68

 0.7

 0.72

 0.74

KN KN-i IKN IKN-i WB WB-i

 0.944

 0.946

 0.948

 0.95

 0.952

 0.954

 0.956

 0.958

 0.96

 0.962

 0.964

M
IU

-A
cc

C
h-

A
cc

MIU-Acc-bigram
Ch-Acc-bigram

MIU-Acc-trigram
Ch-Acc-trigram

Figure 7: MIU-Acc and Ch-Acc with different LM
smoothing

The choice of the number of N -best candidates
for PTC conversion also has a strong impact on the
results. Figure 8 shows the results onDwith dif-
ferentNs, of which theN axis is drawn in logarith-
mic scale. We can observe that MIU-Acc slightly
decreases while N goes up, but Ch-Acc largely in-
creases. We therefore chooseN = 10 as trade-off.

 0.7265

 0.727

 0.7275

 0.728

 0.7285

 0.729

 0.7295

 0.73

 0.7305

 0.731

 0.7315

 0.732

 1  10  100  1000

 0.935

 0.94

 0.945

 0.95

 0.955

 0.96

 0.965

 0.97

 0.975

 0.98

 0.985

M
IU

-A
cc

C
h-

A
cc

MIU-Acc
Ch-Acc

Figure 8: MIU-Acc and Ch-Acc with different Ns

The parameter γ determines emission probabil-
ity. Results with different γ on D is shown in
Figure 9, of which the γ axis is drawn in logarith-
mic scale. γ = 0.03 is chosen at last.

We compare our baseline system with several
practical pinyin IMEs including sunpinyin and
Google Input Tools (Online version)4. The results
on D are shown in Table 2.

4http://www.google.com/inputtools/try/

1518



 0.45

 0.5

 0.55

 0.6

 0.65

 0.7

 0.75

 0.001  0.01  0.1  1

 0.82

 0.84

 0.86

 0.88

 0.9

 0.92

 0.94

 0.96

 0.98

M
IU

-A
cc

C
h-

A
cc

MIU-Acc
Ch-Acc

Figure 9: MIU-Acc and Ch-Acc with different γ

MIU-Acc Ch-Acc S-Acc
Baseline 73.39 96.24 38.00
sunpinyin 52.37 87.51 13.95
Google 74.74 94.81 40.2
Yang-ME - 93.3 30.2
Yang-MT - 95.5 45.4

Table 2: Baseline system compared to other
IMEs (%)

4.4 PTC Conversion with Typo Correction
Based upon the baseline system, we build the joint
system of PTC conversion with typo correction.

We simulate user typos by randomly generating
errors automatically on the corpus. The typo rate
is set according to previous Human-Computer In-
teraction (HCI) studies. Due to few works have
been done on modeling Chinese text entry, we
have to refer to those corresponding results on
English (Wobbrock and Myers, 2006; MacKen-
zie and Soukoreff, 2002; Clarkson et al., 2005),
which show that the average typo rate is about 2%.
(Zheng et al., 2011a) performed an experiment that
2,000 sentences of 11,968 Chinese words were en-
tered by 5 native speakers. The collected data con-
sists of 775 mistyped pinyin words caused by one
edit operation, and 85 caused by two edit opera-
tions. As we observe on T that the average
pinyin word length is 5.24, then typo rate in the
experiment of (Zheng et al., 2011a) can be roughly
estimated as:

775 + 85× 2
11968× 5.24 = 1.51%,

which is similar to the conclusion on English. Thus
we generate corpora from D with typo rate of
0% (0-P), 2% (2-P), and 5% (5-P) to evaluate the
system.

According to (Zheng et al., 2011a) most
mistyped pinyin words are caused by one edit op-
eration. Since pinyin syllable is much shorter than

pinyin word, this ratio can be higher for pinyin
syllables. From our statistics on T, with 2%
randomly generated typos, Pr(L(S′, S) < 2) =
99.86%. Thus we set the threshold T for L to 2.

We first set K-shortest paths filter to K = 10
and tune β. Results with different β are shown
in Figure 10. With β = 3.5, we select K. Re-

 0.7

 0.705

 0.71

 0.715

 0.72

 0.725

 0.73

 0.735

 0.74

 0.745

 2  2.5  3  3.5  4  4.5  5

 0.954

 0.956

 0.958

 0.96

 0.962

 0.964

 0.966

 0.968

 0.97

M
IU

-A
cc

C
h-

A
ccMIU-Acc

Ch-Acc

(a) 0-P

 0.665

 0.67

 0.675

 0.68

 0.685

 0.69

 0.695

 2  2.5  3  3.5  4  4.5  5

 0.932

 0.934

 0.936

 0.938

 0.94

 0.942

 0.944

 0.946
M

IU
-A

cc

C
h-

A
cc

MIU-Acc
Ch-Acc

(b) 2-P

 0.585

 0.59

 0.595

 0.6

 0.605

 0.61

 0.615

 2  2.5  3  3.5  4  4.5  5

 0.872

 0.874

 0.876

 0.878

 0.88

 0.882

 0.884

 0.886

 0.888

M
IU

-A
cc

C
h-

A
cc

MIU-Acc
Ch-Acc

(c) 5-P

Figure 10: MIU-Acc and Ch-Acc with different β

sults with different K are shown in Figure 11. We
choose K = 20 since there is no significant im-
provement when K > 20.

The selection of K also directly guarantees the
running time of the joint model. With K = 20,
on a normal PC with Intel Pentium Dual-Core
E6700 CPU, the PTC conversion rate is over 2000
characters-per-minute (cpm), which is much faster
than the normal typing rate of 200 cpm.

With all parameters optimized, results on T

1519



 0.705

 0.71

 0.715

 0.72

 0.725

 0.73

 0.735

 0.74

 0.745

 0  10  20  30  40  50  60  70  80  90  100

 0.954

 0.956

 0.958

 0.96

 0.962

 0.964

 0.966

 0.968

M
IU

-A
cc

C
h-

A
ccMIU-Acc

Ch-Acc

(a) 0-P

 0.655

 0.66

 0.665

 0.67

 0.675

 0.68

 0.685

 0.69

 0.695

 0.7

 0  10  20  30  40  50  60  70  80  90  100

 0.92

 0.925

 0.93

 0.935

 0.94

 0.945

M
IU

-A
cc

C
h-

A
ccMIU-Acc

Ch-Acc

(b) 2-P

 0.55

 0.56

 0.57

 0.58

 0.59

 0.6

 0.61

 0  10  20  30  40  50  60  70  80  90  100

 0.85

 0.855

 0.86

 0.865

 0.87

 0.875

 0.88

 0.885

 0.89

M
IU

-A
cc

C
h-

A
ccMIU-Acc

Ch-Acc

(c) 5-P

Figure 11: MIU-Acc and Ch-Acc with different K

using the proposed joint model are shown in Ta-
ble 3 and Table 4. Our results are compared to
the baseline system without typo correction and
Google Input Tool. Since sunpinyin does not have
typo correction module and performs much poorer
than our baseline system, we do not include it in
the comparison. Though no direct proofs can be
found to indicate if Google Input Tool has an in-
dependent typo correction component, its outputs
show that such a component is unlikely available.

Since Google Input Tool has to be accessed
through a web interface and the network connec-
tion cannot be guaranteed. we only take a subset
of 10K sentences of T to perform the experi-
ments, and the results are shown in Table 3.

The scores reported in (Zheng et al., 2011a) are
not listed in Table 4 since the data set is differ-
ent. They reported a ConvER of 53.56%, which is
given here for reference.

Additionally, to further inspect the robustness of
ourmodel, performance with typo rate ranges from
0% to 5% is shown in Figure 12. Although the per-
formance decreases while typo rate goes up, it is
still quite satisfying around typo rate of 2% which
is assumed to be the real world situation.

MIU-Acc Ch-Acc S-Acc ConvER
Baseline 0-P 79.90 97.47 48.87 -
Baseline 2-P 50.47 90.53 11.12 99.95
Baseline 5-P 30.26 82.83 3.32 99.99
Google 0-P 79.08 95.26 46.83 -
Google 2-P 49.47 61.50 11.08 91.70
Google 5-P 29.18 36.20 3.29 94.64
Joint 0-P 79.90 97.52 49.27 -
Joint 2-P 75.55 95.40 40.69 18.45
Joint 5-P 67.76 90.17 27.86 24.68

Table 3: Test results on 10K sentences from T
(%)

MIU-Acc Ch-Acc S-Acc ConvER
Baseline 0-P 74.46 96.42 40.50 -
Baseline 2-P 47.25 89.50 9.62 99.95
Baseline 5-P 28.28 81.74 2.63 99.98
Joint 2-P 74.22 96.39 40.34 -
Joint 2-P 69.91 94.14 33.11 21.35
Joint 5-P 62.14 88.49 22.62 27.79

Table 4: Test results on T (%)

 0

 0.2

 0.4

 0.6

 0.8

 1

 1.2

 0  1  2  3  4  5

 0

 0.2

 0.4

 0.6

 0.8

 1

 1.2

M
IU

-A
cc

C
h-

A
cc

MIU-Acc
Ch-Acc

Figure 12: MIU-Acc and Ch-Acc with different
typo rate (%)

5 Conclusion

In this paper, we have developed a joint graph
model for pinyin-to-Chinese conversion with typo
correction. This model finds a joint global opti-
mal for typo correction and PTC conversion on the
entire input pinyin sequence. The evaluation re-
sults show that our model outperforms both pre-
vious academic systems and existing commercial
products. In addition, the joint model is efficient
enough for practical use.

1520



References
Richard G. Casey and Eric Lecolinet. 1996. A Sur-

vey of Methods and Strategies in Character Segmen-
tation. Pattern Analysis and Machine Intelligence,
IEEE Transactions on, 18(7):690–706.

Chao-Huang Chang. 1994. A Pilot Study on Auto-
matic Chinese Spelling Error Correction. Journal of
Chinese Language and Computing, 4:143–149.

Zheng Chen and Kai-Fu Lee. 2000. A New Statis-
tical Approach To Chinese Pinyin Input. In Pro-
ceedings of the 38th Annual Meeting of the Associa-
tion for Computational Linguistics, pages 241–247,
Hong Kong, October.

Kuan-YuChen, Hung-Shin Lee, Chung-HanLee, Hsin-
Min Wang, and Hsin-Hsi Chen. 2013. A Study
of Language Modeling for Chinese Spelling Check.
In Proceedings of the Seventh SIGHAN Workshop
on Chinese Language Processing, pages 79–83,
Nagoya, Japan, October. Asian Federation of Nat-
ural Language Processing.

Hsun-wen Chiu, Jian-cheng Wu, and Jason S. Chang.
2013. Chinese Spelling Checker Based on Statis-
tical Machine Translation. In Proceedings of the
Seventh SIGHAN Workshop on Chinese Language
Processing, pages 49–53, Nagoya, Japan, October.
Asian Federation of Natural Language Processing.

Edward Clarkson, James Clawson, Kent Lyons, and
Thad Starner. 2005. An Empirical Study of Typ-
ing Rates onmini-QWERTYKeyboards. InCHI ’05
Extended Abstracts onHuman Factors in Computing
Systems, CHI EA ’05, pages 1288–1291, New York,
NY, USA. ACM.

David Eppstein. 1998. Finding the K Shortest Paths.
SIAM Journal on computing, 28(2):652–673.

Jr G. David Forney. 1973. The Viterbi Algorithm.
Proceedings of the IEEE, 61(3):268–278.

Michael L. Fredman and Robert Endre Tarjan. 1987.
Fibonacci Heaps and Their Uses in Improved Net-
work Optimization Algorithms. Journal of the ACM
(JACM), 34(3):596–615, July.

Dongxu Han and Baobao Chang. 2013. A Maxi-
mum Entropy Approach to Chinese Spelling Check.
In Proceedings of the Seventh SIGHAN Workshop
on Chinese Language Processing, pages 74–78,
Nagoya, Japan, October. Asian Federation of Nat-
ural Language Processing.

Kenneth Heafield, Ivan Pouzyrevsky, Jonathan H.
Clark, and Philipp Koehn. 2013. Scalable Modified
Kneser-Ney Language Model Estimation. In Pro-
ceedings of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics, pages 690–696,
Sofia, Bulgaria, August.

Kenneth Heafield. 2011. KenLM: Faster and Smaller
Language Model Queries. In Proceedings of the

EMNLP 2011 Sixth Workshop on Statistical Ma-
chine Translation, pages 187–197, Edinburgh, Scot-
land, United Kingdom, July.

Changning Huang and Hai Zhao. 2007. Chinese Word
Segmentation: A Decade Review. Journal of Chi-
nese Information Processing, 21(3):8–20.

Zhongye Jia and Hai Zhao. 2013. KySS 1.0: a
Framework for Automatic Evaluation of Chinese In-
put Method Engines. In Proceedings of the Sixth In-
ternational Joint Conference on Natural Language
Processing, pages 1195–1201, Nagoya, Japan, Octo-
ber. Asian Federation of Natural Language Process-
ing.

Zhongye Jia, Peilu Wang, and Hai Zhao. 2013. Graph
Model for Chinese Spell Checking. In Proceedings
of the Seventh SIGHAN Workshop on Chinese Lan-
guage Processing, pages 88–92, Nagoya, Japan, Oc-
tober. Asian Federation of Natural Language Pro-
cessing.

Wei Jiang, Yi Guan, Xiaolong Wang, and BingQuan
Liu. 2007. PinYin-to-Character Conversion Model
based on Support Vector Machines. Journal of Chi-
nese information processing, 21(2):100–105.

Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ondrej Bojar, Alexan-
dra Constantin, and Evan Herbst. 2007. Moses:
Open Source Toolkit for Statistical Machine Trans-
lation. In Proceedings of the 45th Annual Meeting of
the Association for Computational Linguistics Com-
panion Volume Proceedings of the Demo and Poster
Sessions, pages 177–180, Prague, Czech Republic,
June. Association for Computational Linguistics.

Vladimir I. Levenshtein. 1966. Binary Codes Capable
of Correcting Deletions, Insertions and Reversals. In
Soviet physics doklady, volume 10, page 707.

Mu Li, Muhua Zhu, Yang Zhang, and Ming Zhou.
2006. Exploring Distributional Similarity Based
Models for Query Spelling Correction. In Proceed-
ings of the 21st International Conference on Compu-
tational Linguistics and 44th Annual Meeting of the
Association for Computational Linguistics, pages
1025–1032, Sydney, Australia, July. Association for
Computational Linguistics.

Lu Li, Xuan Wang, Xiao-Long Wang, and Yan-Bing
Yu. 2009. A Conditional Random Fields Approach
to Chinese Pinyin-to-Character Conversion. Journal
of Communication and Computer, 6(4):25–31.

Xiaodong Liu, Kevin Cheng, Yanyan Luo, Kevin Duh,
and Yuji Matsumoto. 2013. A Hybrid Chinese
Spelling Correction Using LanguageModel and Sta-
tisticalMachine Translation with Reranking. InPro-
ceedings of the Seventh SIGHAN Workshop on Chi-
nese Language Processing, pages 54–58, Nagoya,
Japan, October. Asian Federation of Natural Lan-
guage Processing.

1521



I. Scott MacKenzie and R.William Soukoreff. 2002. A
Character-level Error Analysis Technique for Eval-
uating Text Entry Methods. In Proceedings of the
Second Nordic Conference on Human-computer In-
teraction, NordiCHI ’02, pages 243–246, NewYork,
NY, USA. ACM.

Eric Mays, Fred J Damerau, and Robert L Mercer.
1991. Context Based Spelling Correction. Informa-
tion Processing & Management, 27(5):517–522.

James L. Peterson. 1980. Computer Programs for De-
tecting and Correcting Spelling Errors. Commun.
ACM, 23(12):676–687, December.

Andreas Stolcke. 2002. SRILM-An Extensible Lan-
guage Modeling Toolkit. In Proceedings of the in-
ternational conference on spoken language process-
ing, volume 2, pages 901–904.

Andrew J. Viterbi. 1967. Error Bounds for Con-
volutional Codes and an Asymptotically Optimum
Decoding Algorithm. Information Theory, IEEE
Transactions on, 13(2):260–269.

Xuan Wang, Lu Li, Lin Yao, and Waqas Anwar. 2006.
A Maximum Entropy Approach to Chinese Pin Yin-
To-Character Conversion. In Systems, Man and Cy-
bernetics, 2006. SMC’06. IEEE International Con-
ference on, volume 4, pages 2956–2959. IEEE.

Chun-Hung Wang, Jason S. Chang, and Jian-Cheng
Wu. 2013a. Automatic Chinese Confusion Words
ExtractionUsing Conditional RandomFields and the
Web. In Proceedings of the Seventh SIGHANWork-
shop on Chinese Language Processing, pages 64–
68, Nagoya, Japan, October. Asian Federation of
Natural Language Processing.

Peilu Wang, Ruihua Sun, Hai Zhao, and Kai Yu.
2013b. A New Word Language Model Evaluation
Metric for Character Based Languages. In Chinese
Computational Linguistics and Natural Language
Processing Based on Naturally Annotated Big Data,
pages 315–324. Springer.

Rui Wang, Masao Utiyama, Isao Goto, Eiichro Sumita,
Hai Zhao, and Bao-Liang Lu. 2013c. Converting
Continuous-Space Language Models into N-Gram
Language Models for Statistical Machine Transla-
tion. In Proceedings of the 2013 Conference on Em-
pirical Methods in Natural Language Processing,
pages 845–850, Seattle, Washington, USA, October.
Association for Computational Linguistics.

Yih-Ru Wang, Yuan-Fu Liao, Yeh-Kuang Wu, and
Liang-Chun Chang. 2013d. Conditional Random
Field-based Parser and Language Model for Tradi-
tional Chinese Spelling Checker. In Proceedings
of the Seventh SIGHAN Workshop on Chinese Lan-
guage Processing, pages 69–73, Nagoya, Japan, Oc-
tober. Asian Federation of Natural Language Pro-
cessing.

Jacob O.Wobbrock and Brad A.Myers. 2006. Analyz-
ing the Input Stream for Character- Level Errors in
Unconstrained Text Entry Evaluations. ACM Trans.
Comput.-Hum. Interact., 13(4):458–489, December.

Jun Wu and Liren Chen. 2004. Fault-tolerant Roman-
ized Input Method for Non-roman Characters, Au-
gust 25. US Patent App. 10/928,131.

Jun Wu, Hulcan Zhu, and Hongjun Zhu. 2009. Sys-
tems and Methods for Translating Chinese Pinyin
to Chinese Characters, January 13. US Patent
7,478,033.

Shaohua Yang, Hai Zhao, and Bao-liang Lu. 2012a. A
Machine Translation Approach for Chinese Whole-
Sentence Pinyin-to-Character Conversion. In Pro-
ceedings of the 26th Pacific Asia Conference on Lan-
guage, Information, and Computation, pages 333–
342, Bali,Indonesia, November. Faculty of Com-
puter Science, Universitas Indonesia.

ShaohuaYang, Hai Zhao, XiaolinWang, and Bao-liang
Lu. 2012b. Spell Checking for Chinese. In Interna-
tional Conference on Language Resources and Eval-
uation, pages 730–736, Istanbul, Turkey, May.

Liang-Chih Yu, Yuen-Hsien Tseng, Jingbo Zhu, and
Fuji Ren, editors. 2013. Proceedings of the Seventh
SIGHAN Workshop on Chinese Language Process-
ing. Asian Federation of Natural Language Process-
ing, Nagoya, Japan, October.

Jingyi Zhang and Hai Zhao. 2013. Improving Func-
tion Word Alignment with Frequency and Syntac-
tic Information. In Proceedings of the Twenty-Third
international joint conference on Artificial Intelli-
gence, pages 2211–2217. AAAI Press.

Hai Zhao and Chunyu Kit. 2008. Exploiting Unlabeled
Text with Different Unsupervised Segmentation Cri-
teria for Chinese Word Segmentation. Research in
Computing Science, 33:93–104.

Hai Zhao and Chunyu Kit. 2011. Integrating Unsu-
pervised and Supervised Word Segmentation: The
Role of Goodness Measures. Information Sciences,
181(1):163–183.

Hai Zhao, Chang-Ning Huang, and Mu Li. 2006. An
Improved Chinese Word Segmentation System with
Conditional Random Field. In Proceedings of the
Fifth SIGHANWorkshop on Chinese Language Pro-
cessing, pages 162–165, Sydney, Australia, July.
Association for Computational Linguistics.

Hai Zhao, Chang-Ning Huang, Mu Li, and Bao-Liang
Lu. 2010. A Unified Character-Based Tagging
Framework for Chinese Word Segmentation. ACM
Transactions on Asian Language Information Pro-
cessing (TALIP), 9(2):5.

Hai Zhao, Masao Utiyama, Eiichiro Sumita, and Bao-
Liang Lu. 2013. An Empirical Study on Word
Segmentation for Chinese Machine Translation. In
Computational Linguistics and Intelligent Text Pro-
cessing, pages 248–263. Springer.

1522



Yabin Zheng, Chen Li, and Maosong Sun. 2011a.
CHIME: An Efficient Error-tolerant Chinese Pinyin
Input Method. In Proceedings of the Twenty-Second
International Joint Conference on Artificial Intel-
ligence - Volume Volume Three, IJCAI’11, pages
2551–2556. AAAI Press.

Yabin Zheng, Lixing Xie, Zhiyuan Liu, Maosong Sun,
Yang Zhang, and Liyun Ru. 2011b. Why Press
Backspace? Understanding User Input Behaviors in
Chinese Pinyin Input Method. In Proceedings of the
49th Annual Meeting of the Association for Compu-
tational Linguistics: Human Language Techologies,
pages 485–490, Portland, Oregon, USA, June. Asso-
ciation for Computational Linguistics.

1523


