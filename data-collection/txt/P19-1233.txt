



















































GCDT: A Global Context Enhanced Deep Transition Architecture for Sequence Labeling


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 2431–2441
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

2431

GCDT: A Global Context Enhanced Deep Transition Architecture
for Sequence Labeling

Yijin Liu1∗ , Fandong Meng2, Jinchao Zhang2, Jinan Xu1†, Yufeng Chen1 and Jie Zhou2
1Beijing Jiaotong University, China

2Pattern Recognition Center, WeChat AI, Tencent Inc, China
adaxry@gmail.com

{fandongmeng, dayerzhang, withtomzhou}@tencent.com
{jaxu,chenyf}@bjtu.edu.cn

Abstract

Current state-of-the-art systems for the se-
quence labeling tasks are typically based on
the family of Recurrent Neural Networks
(RNNs). However, the shallow connections
between consecutive hidden states of RNNs
and insufficient modeling of global informa-
tion restrict the potential performance of those
models. In this paper, we try to address these
issues, and thus propose a Global Context en-
hanced Deep Transition architecture for se-
quence labeling named GCDT. We deepen the
state transition path at each position in a sen-
tence, and further assign every token with a
global representation learned from the entire
sentence. Experiments on two standard se-
quence labeling tasks show that, given only
training data and the ubiquitous word embed-
dings (Glove), our GCDT achieves 91.96 F1
on the CoNLL03 NER task and 95.43 F1 on
the CoNLL2000 Chunking task, which outper-
forms the best reported results under the same
settings. Furthermore, by leveraging BERT as
an additional resource, we establish new state-
of-the-art results with 93.47 F1 on NER and
97.30 F1 on Chunking 1.

1 Introduction

Sequence labeling tasks, including part-of-speech
tagging (POS), syntactic chunking and named en-
tity recognition (NER), are fundamental and chal-
lenging problems of Natural Language Process-
ing (NLP). Recently, neural models have become
the de-facto standard for high-performance sys-
tems. Among various neural networks for se-
quence labeling, bi-directional RNNs (BiRNNs),
especially BiLSTMs (Hochreiter and Schmidhu-
ber, 1997) have become a dominant method on

∗ This work was done when Yijin Liu was interning at
Pattern Recognition Center, WeChat AI, Tencent Inc, China

† Jinan Xu is the corresponding author of the paper.
1Code is available at: https://github.com/Adaxry/GCDT.

multiple benchmark datasets (Huang et al., 2015;
Chiu and Nichols, 2016; Lample et al., 2016; Pe-
ters et al., 2017).

However, there are several natural limitations
of the BiLSTMs architecture. For example, at
each time step, the BiLSTMs consume an incom-
ing word and construct a new summary of the past
subsequence. This procedure should be highly
nonlinear, to allow the hidden states to rapidly
adapt to the mutable input while still preserving a
useful summary of the past (Pascanu et al., 2014).
While in BiLSTMs, even stacked BiLSTMs, the
transition depth between consecutive hidden states
are inherently shallow. Moreover, global contex-
tual information, which has been shown highly
useful for model sequence (Zhang et al., 2018),
is insufficiently captured at each token position in
BiLSTMs. Subsequently, inadequate representa-
tions flow into the final prediction layer, which
leads to the restricted performance of BiLSTMs.

In this paper, we present a global context en-
hanced deep transition architecture to eliminate
the mentioned limitations of BiLSTMs. In par-
ticular, we base our network on the deep transi-
tion (DT) RNN (Pascanu et al., 2014), which in-
creases the transition depth between consecutive
hidden states for richer representations. Further-
more, we assign each token an additional repre-
sentation, which is a summation of hidden states
of a specific DT over the whole input sentence,
namely global contextual embedding. It’s benefi-
cial to make more accurate predictions since the
combinatorial computing between diverse token
embeddings and global contextual embedding can
capture useful representations in a way that im-
proves the overall system performance.

We evaluate our GCDT on both CoNLL03
and CoNLL2000. Extensive experiments on two
benchmarks suggest that, merely given training
data and publicly available word embeddings



2432

(Glove), our GCDT surpasses previous state-of-
the-art systems on both tasks. Furthermore, by ex-
ploiting BERT as an extra resource, we report new
state-of-the-art F1 scores with 93.47 on CoNLL03
and 97.30 on CoNLL2000. The main contribu-
tions of this paper can be summarized as follows:

• We are the first to introduce the deep transi-
tion architecture for sequence labeling, and
further enhance it with the global contextual
representation at the sentence level, named
GCDT.

• GCDT substantially outperforms previous
systems on two major tasks of NER and
Chunking. Moreover, by leveraging BERT
as an extra resource to enhance GCDT, we re-
port new state-of-the-art results on both tasks.

• We conduct elaborate investigations of global
contextual representation, model complexity
and effects of various components in GCDT.

2 Background

Given a sequence of X = {x1, x2, · · · , xN} with
N tokens and its corresponding linguistic labels
Y = {y1, y2, · · · , yN} with the equal length, the
sequence labeling tasks aim to learn a parameter-
ized mapping function fθ : X → Y from input
tokens to task-specific labels.

Typically, the input sentence is firstly encoded
into a sequence of distributed representations X =
{x1,x2, · · · ,xN} by character-aware and pre-
trained word embeddings. The majority of high-
performance models use bidirectional RNNs, BiL-
STMs in particular, to encode the token embed-
dings X into context-sensitive representations for
the final prediction.

Additionally, it’s beneficial to model and pre-
dict labels jointly, thus a subsequent conditional
random field (CRF Lafferty et al., 2001) is com-
monly utilized as a decoder layer. At the training
stage, those models maximize the log probability
of the correct sequence of tags as follows:

log(p(y|X)) = s(X,y)− log(
∑
ỹ∈Yx

es(X,ỹ))

(1)

where s(·) is the score function and Yx is the
set of all possible sequence of tags. Typically,
the Viterbi algorithm (Forney, 1973) is utilized to

search the label sequences with maximum score
when decoding:

y∗ = argmax
ỹ∈Yx

s(x, ỹ) (2)

3 GCDT

3.1 Overview

In this section, we start with a brief overview of
our presented GCDT and then proceed to struc-
ture the following sections with more details about
each submodule. As shown in Figure 1, there
are three deep transition modules in our model,
namely global contextual encoder, sequence la-
beling encoder and decoder accordingly.

Token Representation Given a sentence X =
{x1, x2, ..., XN} with N tokens, our model first
captures each token representation xt by concate-
nating three primary embeddings:

xt = [ct;wt;g] (3)

1. Character level word embedding ct is ac-
quired from Convolutional Neural Network.
(CNN) (dos Santos and Zadrozny, 2014)

2. Pre-trained word embedding wt is obtained
from the lookup table initialized by Glove2.

3. Global contextual embedding g is extracted
from bidirectional DT, and more details will
be described in the following paragraphs.

The global embedding g is computed by mean
pooling over all hidden states {hg1,h

g
2, · · · ,h

g
N}

of global contextual encoder (right part in Figure
1). For simplicity, we can take “DT” as a rein-
forced Gated Recurrent Unit (GRU Chung et al.,
2014), and more details about DT will be de-
scribed in the next section. Thus g is computed
as follows:

g =
1

N

n∑
t=1

hgt (4)

hgt = [
−→
h gt ;
←−
h gt ] (5)

−→
h gt =

−−→
DTg(ct,wt; θ−−→DT g

) (6)
←−
h gt =

←−−
DTg(ct,wt; θ←−−DT g

) (7)

2https://nlp.stanford.edu/projects/glove/



2433

Mean Pooling 

Global Contextual EncoderSequence Labeling Encoder

<s> y1 yn-1

Sequence Labeling Decoder

yt-1

Softmax

ht

y1 yny2

st

h1 h2 hn

Word

Char

Global

Forward DT cell

Backward DT cell

Word Embedding  

Plain DT cell

x1 x2 xn x1 xn-1 xn

w1

c1
x1 x2 xn x1 xn-1 xn

w1

c1

g

w2

c2

g

wn

cn

g

w1

c1

g

cn-1

g

wn

cn

g

wn-1 w2

c2

wn

cn

w1

c1

wn

cn

wn-1

cn-1

Global

Figure 1: Overview of GCDT. The global contextual encoder (on the right) serves as an enhancement of token rep-
resentation. The sequence labeling encoder and decoder (on the left) take charge of the task-specific predictions.

Sequence Labeling Encoder Subsequently, the
concatenated token embeddings xt (Eq. 3) is fed
into the sequence labeling encoder (bottom left
part in Figure 1).

ht = [
−→
ht;
←−
ht] (8)

−→
ht =

−−→
DTen(xt,

−→
h t−1; θ−−→DT en

) (9)
←−
ht =

←−−
DTen(xt,

←−
h t−1; θ←−−DT en

) (10)

Sequence Labeling Decoder Considering the
t-th word in this sentence, the output of sequence
labeling encoder ht along with the past label em-
bedding yt−1 are fed into the decoder (top left part
in Figure 1). Subsequently, the output of decoder
st is transformed into lt for the final softmax over
the tag vocabulary. Formally, the label of word xt
is predicted as the probabilistic equation (Eq. 13)

st = DTde(ht,yt−1; θDTde) (11)

lt = stWl + bl (12)

P (yt = j|x) = softmax(lt)[j] (13)

As we can see from the above procedures and Fig-
ure 1, our GCDT firstly encodes the global con-
textual representation along the sequential axis by

DT, which is utilized to enrich token representa-
tions. At each time step, we encode the past la-
bel information jointly using the sequence label-
ing decoder instead of resorting to CRF. Addition-
ally, we employ beam search algorithm to infer the
most probable sequence of labels when testing.

3.2 Deep Transition RNN

Deep transition RNNs extend conventional RNNs
by increasing the transition depth of consecu-
tive hidden states. Previous studies have shown
the superiority of this architecture on both lan-
guage modeling (Pascanu et al., 2014) and ma-
chine translation (Barone et al., 2017; Meng and
Zhang, 2019). Particularly, Meng and Zhang
(2019) propose to maintain a linear transformation
path throughout the deep transition procedure with
a linear gate to enhance the transition structure.

Following Meng and Zhang (2019), the deep
transition block in our hierarchical model is
composed of two key components, namely Lin-
ear Transformation enhanced GRU (L-GRU) and
Transition GRU (T-GRU). At each time step, L-
GRU first encodes each token with an additional
linear transformation of the input embedding, then
the hidden state of L-GRU is passed into a chain of



2434

T-GRU connected merely by hidden states. After-
wards, the output “state” of the last T-GRU for the
current time step is carried over as “state” input of
the first L-GRU for the next time step. Formally, in
a unidirectional network with transition number of
L, the hidden state of the t-th token in a sentence
is computed as:

h0i = L-GRU(xi,h
L
i−1) (14)

hji = T-GRU
j(hj−1i ) 1 ≤ j ≤ L (15)

Linear Transformation Enhanced GRU L-
GRU extends the conventional GRU by an addi-
tional linear transformation of the input token em-
beddings. At time step t, the hidden state of L-
GRU is computed as follows:

ht = (1− zt)� ht−1 + zt � h̃t (16)

h̃t = tanh(Wxhxt + rt � (Whhht−1))
+ lt �Wxxt

(17)

where Wxh and Whh are parameter matrices, and
reset gate rt and update gate zt are same as GRU:

rt = σ(Wxrxt +Whrht−1) (18)

zt = σ(Wxzxt +Whzht−1) (19)

The linear transformation Wxxt in candidate hid-
den state h̃t (Eq. 17) is regulated by the linear gate
lt, which is computed as follows:

lt = σ(Wxlxt +Whlht−1) (20)

Transition GRU T-GRU is a special case of
conventional GRU, which only takes hidden states
from the adjacent lower layer as inputs. At time
step t at transition depth l, the hidden state of T-
GRU is computed as follows:

hlt = (1− zlt)� hl−1t + zlt � h̃t
l

(21)

h̃t
l
= tanh(rlt � (Wlhhl−1t )) (22)

Reset gate rt and update gate zt also only take
hidden states as input, which are computed as:

rl = σ(Wlrh
l−1) (23)

zt = σ(Wlzh
l−1) (24)

As indicated above, at each time step of our
deep transition block, there is a L-GRU in the bot-
tom and several T-GRUs on the top of L-GRU.

3.3 Local Word Representation

Charater-aware word embeddings It has been
demonstrated that character level information
(such as capitalization, prefix and suffix) (Col-
lobert et al., 2011; dos Santos and Zadrozny, 2014)
is crucial for sequence labeling tasks. In our
GCDT, the character sets consist of all unique
characters in datasets besides the special symbol
“PAD” and “UNK”. We use one layer of CNN fol-
lowed by max pooling to generate character-aware
word embeddings.

Pre-trained word embeddings The pre-trained
word embeddings have been indicated as a stan-
dard component of neural network architectures
for various NLP tasks. Since the capitalization
feature of words is crucial for sequence labeling
tasks (Collobert et al., 2011), we adopt word em-
beddings trained in the case sensitive schema.

Both the character-aware and pre-trained word
embeddings are context-insensitive, which are
called local word representations compared with
global contextual embedding in the next section.

3.4 Global Contextual Embedding

We adopt an independent deep transition RNN
named global contextual encoder (right part in
Figure 1) to capture global features. In particu-
lar, we transform the hidden states of global con-
textual encoder into a fixed-size vector with var-
ious strategies, such as mean pooling, max pool-
ing and self-attention mechanism (Vaswani et al.,
2017). According to the preliminary experiments,
we choose mean pooling strategy considering the
balance between effect and efficiency.

In conventional BiRNNs, the global contextual
feature is insufficiently modeled at each position,
as the nature of recurrent architecture makes RNN
partial to the most recent input token. While
our context-aware representation is incorporated
with local word embeddings directly, which as-
sists in capturing useful representations through
combinatorial computing between diverse local
word embeddings and the global contextual em-
bedding. We further investigate the effects on po-
sitions where the global embedding is used. (Sec-
tion 5.1)



2435

4 Experiments

4.1 Datasets and Metric

NER The CoNLL03 NER task (Sang and
De Meulder, 2003) is tagged with four linguistic
entity types (PER, LOC, ORG, MISC). Standard
data includes train, development and test sets.

Chunking The CoNLL2000 Chunking task
(Sang and Buchholz, 2000) defines 11 syntactic
chunk types (NP, VP, PP, etc.). Standard data in-
cludes train and test sets.

Metric We adopt the BIOES tagging scheme for
both tasks instead of the standard BIO2, since
previous studies have highlighted meaningful im-
provements with this scheme (Ratinov and Roth,
2009). We take the official conlleval 3 as the
token-level F1 metric. Since the data size if rela-
tively small, we train each final model for 5 times
with different parameter initialization and report
the mean and standard deviation F1 value.

4.2 Implementation Details

All trainable parameters in our model are initial-
ized by the method described by Glorot and Ben-
gio (2010). We apply dropout (Srivastava et al.,
2014) to embeddings and hidden states with a rate
of 0.5 and 0.3 respectively. All models are opti-
mized by the Adam optimizer (Kingma and Ba,
2014) with gradient clipping of 5 (Pascanu et al.,
2013). The initial learning rate α is set to 0.008,
and decrease with the growth of training steps.
We monitor the training process on the develop-
ment set and report the final result on the test set.
One layer CNN with a filter of size 3 is utilized
to generate 128-dimension word embeddings by
max pooling. The cased, 300d Glove is adapted
to initialize word embeddings, which is frozen in
all models. In the auxiliary experiments, the out-
put hidden states of BERT are taken as additional
word embeddings and kept fixed all the time.

Empirically, We assign the following hyper-
parameters with default values except mentioned
later. We set batch size to 4096 at the token level,
transition number to 4, hidden size of sequence la-
beling encoder and decoder to 256, hidden size of
global contextual encoder to 128.

3https://www.clips.uantwerpen.be/conll2000/chunking/
conlleval.txt

Models F1
(Collobert et al., 2011)* 89.59
(Huang et al., 2015)* 90.10
(Passos et al., 2014)* 90.90
(Lample et al., 2016) 90.94
(Yang et al., 2016)* 90.94
(Luo et al., 2015)* 91.20
(Ma and Hovy, 2016) 91.21
(Yang et al., 2017b)*† 91.26
(Zhang et al., 2018) 91.57
(Yang et al., 2017a) 91.62
(Chiu and Nichols, 2016)*† 91.62 ± 0.33
(Xin et al., 2018) 91.64 ± 0.17
GCDT 91.96 ± 0.04
GCDT + BERTLARGE 93.47 ± 0.03

Table 1: F1 scores on CoNLL03. † refers to models
trained on both training and development set. * refers
to adopting external task-specific resources.

Models F1
(Collobert et al., 2011)* 94.32
(Huang et al., 2015)* 94.46
(Yang et al., 2017b) 94.66
(Zhai et al., 2017) 94.72
(Hashimoto et al., 2017) 95.02
(Søgaard and Goldberg, 2016) 95.28
(Xin et al., 2018) 95.29 ± 0.08
GCDT 95.43 ± 0.06
GCDT + BERTLARGE 97.30 ± 0.03

Table 2: F1 scores on CoNLL2000 Chunking task. *
refers to adopting external task-specific resources (like
Gazetteers or annotated data).

4.3 Main Results

The main results of our GCDT on the CoNLL03
and CoNLL2000 are illustrated in Table 1 and
Table 2 respectively. Given only standard train-
ing data and publicly available word embeddings,
our GCDT achieves state-of-the-art results on both
tasks. It should be noted that some results on NER
are not comparable to ours directly, as their final
models are trained on both training and develop-
ment data 4. More notably, our GCDT surpasses
the models that exploit additional task-specific re-
sources or annotated corpora (Luo et al., 2015;
Yang et al., 2017b; Chiu and Nichols, 2016).

Additionally, we conduct experiments by lever-
aging the well-known BERT as an external re-
source for relatively fair comparison with models

4We achieve F1 score of 92.18 when training on both
training and development data without extra resources.



2436

Models F1
(Rei, 2017) 86.26
(Liu et al., 2017) 91.71 ± 0.10
(Peters et al., 2017)† 91.93 ± 0.19
(Peters et al., 2018) 92.20
(Clark et al., 2018) 92.61
(2018) BERTBASE 92.40
(2018) BERTLARGE 92.80
(Akbik et al., 2018)† 93.09
GCDT + BERTLARGE 93.47 ± 0.03

Table 3: F1 scores on the CoNL03 NER task by lever-
aging language model, † refers to models trained on
both training and development data. We establish new
state-of-the-art result on this task.

Models F1
(Rei, 2017) 93.88
(Liu et al., 2017) 95.96 ± 0.08
(Peters et al., 2017) 96.37 ± 0.05
(Akbik et al., 2018) 96.72 ± 0.05
(Clark et al., 2018) 97.00
GCDT + BERTLARGE 97.30 ± 0.03

Table 4: F1 scores on the CoNLL2000 Chunking task
by leveraging language model. We establish new state-
of-the-art result on this task.

that utilize external language models trained on
massive corpora. Especially, Rei (2017) and Liu
et al. (2017) build task-specific language models
only on supervised data. Table 3 and Table 4 show
that our GCDT outperforms previous state-of-the-
art results substantially at 93.47 (+0.38) on NER
and 97.30 (+0.30) on Chunking when contrasted
with a collection of highly competitive baselines.

5 Analysis

We choose the CoNLL03 NER task as example to
elucidate the properties of our GCDT and conduct
several additional experiments.

5.1 Where to Use the Global Representation?

In this experiment, we investigate the effects of lo-
cations on the global contextual embedding in our
hierarchical model. In particular, we use the global
embedding g to augment:

• input of final softmax layer ;
xsoftmaxk = [h

decoder
k ;yk−1;g]

• input of sequence labeling decoder;
xdecoderk = [h

encoder
k ;yk−1;g]

# Use global embedding at F1
0 None 91.60
1 Input of final softmax 91.48
2 Input of sequence labeling decoder 91.45
3 Input of sequence labeling encoder 91.96

Table 5: Comparison of CoNLL03 test F1 when the
global contextual embedding is used at different layers.

• input of sequence labeling encoder;
xencoderk = [wk; ck;g]

Table 5 shows that the global embedding g im-
proves performance when utilized at the relative
low layer (row 3) , while g may do harm to per-
formances when adapted at the higher layers (row
0 vs. row 1 & 2). In the last option, g is incor-
porated to enhance the input token representation
for sequence labeling encoder, the combinatorial
computing between the multi-granular local word
embeddings (wk and ck) and global embedding
g can capture more specific and richer represen-
tations for the prediction of each token, and thus
improves overall system performance. While the
other two options (row 1, 2) concatenate the highly
abstract g with hidden states (hencoderk or h

decoder
k )

from the higher layers, which may bring noise
to token representation due to the similar feature
spaces and thus hurt task-specific predictions.

5.2 Comparing with Stacked RNNs

Although our proposed GCDT bears some resem-
blance to the conventional stacked RNNs, they are
very different from each other. Firstly, although
the stacked RNNs can process very deep archi-
tectures, the transition depth between consecutive
hidden states in the token level is still shallow.

Secondly, in the stacked RNNs, the hidden
states along the sequential axis are simply fed into
the corresponding positions of the higher layers,
namely only position-aware features are transmit-
ted in the deep architecture. While in GCDT, the
internal states in all token position of the global
contextual encoder are transformed into a fixed-
size vector. This contextual-aware representation
provides more general and informative features of
the entire sentence compared with stacked RNNs.

To obtain rigorous comparisons, we stack two
layers of deep transition RNNs instead of conven-
tional RNNs with similar parameter numbers of
GCDT. According to the results in Table 6, the
stacked-DT improves the performance of the orig-



2437

Model # Parameters F1
DT 5.6M 91.60

stacked-DT 8.4M 91.61
GCDT 7.4M 91.96

Table 6: Comparison of CoNLL03 test F1 between
stacked RNNs and GCDT.

inal DT slightly, while there is still a large mar-
gin between GCDT and the stacked-DT. As we
can see, our GCDT achieves a much better perfor-
mance than stacked-DT with a smaller parameter
size, which further verifies that our GCDT can ef-
fectively leverage global information to learn more
useful representations for sequence labeling tasks.

5.3 Ablation Experiments
We conduct ablation experiments to investigate the
impacts of various components in GCDT. More
specifically, we remove one kind of token embed-
ding from char-aware, pre-trained and global em-
beddings for sequence labeling encoder each time,
and utilize DT or conventional GRU with similar
model sizes 5. Results of different combinations
are presented in Table 7.

Given the same input embeddings, DT sur-
passes the conventional GRU substantially in most
cases, which further demonstrates the superiority
of DT in sequence labeling tasks. Our observa-
tions on character-level and pre-trained word em-
beddings suggest that they have a significant im-
pact on highly competitive results (row 1 & 3 vs.
row 5), which is consistent with previous work
(dos Santos and Zadrozny, 2014; Lample et al.,
2016). Furthermore, the global contextual embed-
ding substantially improves the performances on
both DT and GRU based models (row 6 & 7 vs.
row 4 & 5).

5.4 Effect of BERT
WordPiece is adopted to tokenize sequence in
BERT, which may cut a word into pieces, such as
converting “Johanson” into “Johan ##son”. There-
fore, additional efforts should be taken to maintain
alignments between input tokens and their corre-
sponding labels. Three strategies are conducted
to obtain the exclusive BERT embedding of each
token in a sequence. Firstly, we take the first sub-
word as the whole word embedding after tokeniza-
tion, which is employed in the original paper of

5To avoid the effect of various model size, we fine tuning
hidden size of each model, and more details in Section 5.5

# Embeddings RNN F1
0 No char GRU 91.14
1 No char DT 90.94
2 No Glove GRU 87.23
3 No Glove DT 88.59
4 No global GRU 91.32
5 No global DT 91.60
6 All GRU 91.42
7 All DT 91.96

Table 7: Ablation experiments on the CoNLL03 to in-
vestigate the impacts of various components, where
“char” indicates character-aware word embeddings,
“Glove” indicates pre-trained word embeddings, and
“global” indicates global contextual embedding.

BERT
F1Type Layer Pooling

BASE

6
first 92.70
max 92.88
mean 92.99

12
first 92.89
max 92.74
mean 92.92

LARGE

12
first 92.88
max 93.23
mean 93.36

18
first 93.18
max 93.07
mean 93.47

24
first 92.57
max 92.60
mean 92.83

Table 8: Comparison of CoNLL03 F1 scores when var-
ious types, layers and pooling strategies of BERT are
employed. “first” indicates the first sub-word embed-
ding, “mean” and “max” refer to mean and max pool-
ing correspondingly.

BERT (Devlin et al., 2018). Mean and max pool-
ings are used as the latter two strategies. Results
of various combinations of BERT type, layer and
pooling strategy are illustrated in Table 8.

It’s reasonable that BERT trained on large
model surpasses the smaller one in most cases due
to the larger model capacity and richer contextual
representation. For the pooling strategy, “mean” is
considered to capture more comprehensive repre-
sentations of rare words than “first” and “max”,
thus better average performances. Additionally,
we hypothesize that the higher layers in BERT en-
code more abstract and semantic features, while
the lower ones prefer general and syntax infor-



2438

# Global Contextual Encoder Sequence Labeling Module # Parameters F1
0 GRU-384 GRU-384 7.8M 91.42
1 GRU-384 DT4-256 9.5M 91.53
2 GRU-512 DT4-256 11.2M 91.49
3 DT2-128 GRU-384 5.7M 91.45
4 DT2-128 DT4-256 7.2M 91.72
5 DT4-128 DT4-256 7.4M 91.96

Table 9: F1 scores on the CoNLL03 and parameter sizes of various models, where “GRU-384” indicates the
conventional GRU with hidden size of 384, while “DT2-128” refers to deep transition RNN with transition number
of 2 and hidden size of 128, similarly for “DT4-256”.

mation, which is more helpful for our NER and
Chunking tasks. These hypotheses are consistent
with results emerged in Table 8.

5.5 Model Complexity
One way of measuring the complexity of a neural
model is through the total number of trainable pa-
rameters. In GCDT, the global contextual encoder
increases parameter numbers of the sequence la-
beling encoder due to the enlargement of input di-
mensions, thus we run additional experiments to
verify whether the increment of parameters has a
great affection on performances. Empirically, we
replace DT with conventional GRU in the global
contextual encoder and sequence labeling module
(both encoder and decoder) respectively. Results
of various combinations are shown in Table 9.

Observations on parameter numbers show that
DT outperforms GRU substantially, with a smaller
size (row 4 & 5 vs. row 0). From the perspective of
global contextual encoder, DT gives slightly bet-
ter result compared with GRU (row 3 vs. row 0).
We observe similar results in the sequence label-
ing module (row 1 & 2 vs. row 0). Intuitively, it
should further improve performance when utiliz-
ing DT in both modules, which is consistent with
the observations in Table 9 (row 4 & 5 vs. row 0).

6 Related Work

Neural Sequence Labeling Collobert et al.
(2011) propose a seminal neural architecture for
sequence labeling, which learns useful repre-
sentation from pre-trained word embeddings in-
stead of hand-crafted features. Huang et al.
(2015) develop the outstanding BiLSTMs-CRF
architecture, which is improved by incorporat-
ing character-level LSTM (Lample et al., 2016),
GRU (Yang et al., 2016), CNN (dos Santos and
Zadrozny, 2014; Xin et al., 2018), IntNet (Xin
et al., 2018). The shallow connections between

consecutive hidden states in those models inspire
us to deepen the transition path for richer repre-
sentation.

More recently, there has been a growing body
of work exploring to leverage language model
trained on massive corpora in both character level
(Peters et al., 2017, 2018; Akbik et al., 2018) and
token level (Devlin et al., 2018). Inspired by the
effectiveness of language model embeddings, we
conduct auxiliary experiments by leveraging the
well-known BERT as an additional feature.

Exploit Global Information Chieu and Ng
(2002) explore the usage of global feature in the
whole document by the co-occurrence of each
token, which is fed into a maximum entropy
classifier. With the widespread application of
distributed word representations (Mikolov et al.,
2013) and neural networks (Collobert et al., 2011;
Huang et al., 2015) in sequence labeling tasks, the
global information is encoded into hidden states
of BiRNNs. Specially, Yang et al. (2017a) lever-
age global sentence patterns for NER reranking.
Inspired by the global sentence-level representa-
tion in S-LSTM (Zhang et al., 2018), we propose a
more concise approach to capture global informa-
tion, which has been demonstrated more effective
on sequence lableing tasks.

Deep Transition RNN Deep transition recur-
rent architecture extends conventional RNNs by
increasing the transition depth between consecu-
tive hidden states. Previous studies have shown
the superiority of this architecture on both lan-
guage model (Pascanu et al., 2014) and machine
translation (Barone et al., 2017; Meng and Zhang,
2019). We follow the deep transition architecture
in (Meng and Zhang, 2019), and extend it into a
hierarchical model with the global contextual rep-
resentation at the sentence level for sequence la-
beling tasks.



2439

7 Conclusion

We propose a novel hierarchical neural model for
sequence labeling tasks (GCDT), which is based
on the deep transition architecture and motivated
by global contextual representation at the sentence
level. Empirical studies on two standard datasets
suggest that GCDT outperforms previous state-of-
the-art systems substantially on both CoNLL03
NER task and CoNLL2000 Chunking task with-
out additional corpora or task-specific resources.
Furthermore, by leveraging BERT as an external
resource, we report new state-of-the-art F1 scores
of 93.47 on CoNLL03 and 97.30 on CoNLL2000.

In the future, we would like to extend GCDT to
other analogous sequence labeling tasks and ex-
plore its effectiveness on other languages.

Acknowledgments

Liu, Xu, and Chen are supported by the Na-
tional Nature Science Foundation of China (Con-
tract 61370130, 61473294 and 61502149), and
Beijing Natural Science Foundation under Grant
No. 4172047, and the Fundamental Research
Funds for the Central Universities (2015JBM033),
and the International Science and Technology
Cooperation Program of China under grant No.
2014DFA11350. We sincerely thank the anony-
mous reviewers for their thorough reviewing and
valuable suggestions.

References
Alan Akbik, Duncan Blythe, and Roland Vollgraf.

2018. Contextual string embeddings for sequence
labeling. In Proceedings of the 27th International
Conference on Computational Linguistics, pages
1638–1649. Association for Computational Linguis-
tics.

Antonio Valerio Miceli Barone, Jindrich Helcl, Rico
Sennrich, Barry Haddow, and Alexandra Birch.
2017. Deep architectures for neural machine trans-
lation. CoRR, abs/1707.07631.

Hai Leong Chieu and Hwee Tou Ng. 2002. Named
entity recognition: A maximum entropy approach
using global information. In COLING 2002: The
19th International Conference on Computational
Linguistics.

Jason Chiu and Eric Nichols. 2016. Named entity
recognition with bidirectional lstm-cnns. Transac-
tions of the Association for Computational Linguis-
tics, 4:357–370.

Junyoung Chung, Çaglar Gülçehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. CoRR, abs/1412.3555.

Kevin Clark, Minh-Thang Luong, Christopher D. Man-
ning, and Quoc Le. 2018. Semi-supervised se-
quence modeling with cross-view training. In Pro-
ceedings of the 2018 Conference on Empirical Meth-
ods in Natural Language Processing, pages 1914–
1925. Association for Computational Linguistics.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. Journal of Machine Learning Research,
12(Aug):2493–2537.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805.

G David Forney. 1973. The viterbi algorithm. Pro-
ceedings of the IEEE, 61(3):268–278.

Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difficulty of training deep feedforward neu-
ral networks. In Proceedings of the thirteenth in-
ternational conference on artificial intelligence and
statistics, pages 249–256.

Kazuma Hashimoto, caiming xiong, Yoshimasa Tsu-
ruoka, and Richard Socher. 2017. A joint many-
task model: Growing a neural network for multiple
nlp tasks. In Proceedings of the 2017 Conference
on Empirical Methods in Natural Language Pro-
cessing, pages 1923–1933. Association for Compu-
tational Linguistics.

Sepp Hochreiter and Jrgen Schmidhuber. 1997.
Long short-term memory. Neural Computation,
9(8):1735–1780.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidi-
rectional LSTM-CRF models for sequence tagging.
CoRR, abs/1508.01991.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

John Lafferty, Andrew McCallum, and Fernando CN
Pereira. 2001. Conditional random fields: Prob-
abilistic models for segmenting and labeling se-
quence data.

Guillaume Lample, Miguel Ballesteros, Sandeep Sub-
ramanian, Kazuya Kawakami, and Chris Dyer. 2016.
Neural architectures for named entity recognition.
In Proceedings of the 2016 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 260–270. Association for Computational Lin-
guistics.

http://aclweb.org/anthology/C18-1139
http://aclweb.org/anthology/C18-1139
http://arxiv.org/abs/1707.07631
http://arxiv.org/abs/1707.07631
http://aclweb.org/anthology/C02-1025
http://aclweb.org/anthology/C02-1025
http://aclweb.org/anthology/C02-1025
http://aclweb.org/anthology/Q16-1026
http://aclweb.org/anthology/Q16-1026
http://arxiv.org/abs/1412.3555
http://arxiv.org/abs/1412.3555
http://arxiv.org/abs/1412.3555
http://aclweb.org/anthology/D18-1217
http://aclweb.org/anthology/D18-1217
https://doi.org/10.18653/v1/D17-1206
https://doi.org/10.18653/v1/D17-1206
https://doi.org/10.18653/v1/D17-1206
https://doi.org/10.1162/neco.1997.9.8.1735
http://arxiv.org/abs/1508.01991
http://arxiv.org/abs/1508.01991
https://doi.org/10.18653/v1/N16-1030


2440

Liyuan Liu, Jingbo Shang, Frank F. Xu, Xiang Ren,
Huan Gui, Jian Peng, and Jiawei Han. 2017. Em-
power sequence labeling with task-aware neural lan-
guage model. CoRR, abs/1709.04109.

Gang Luo, Xiaojiang Huang, Chin-Yew Lin, and Za-
iqing Nie. 2015. Joint entity recognition and disam-
biguation. In Proceedings of the 2015 Conference
on Empirical Methods in Natural Language Pro-
cessing, pages 879–888.

Xuezhe Ma and Eduard Hovy. 2016. End-to-end se-
quence labeling via bi-directional lstm-cnns-crf. In
Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), pages 1064–1074. Association for
Computational Linguistics.

Fandong Meng and Jinchao Zhang. 2019. DTMT: A
novel deep transition architecture for neural machine
translation. AAAI.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111–3119.

Razvan Pascanu, Caglar Gulcehre, Kyunghyun Cho,
and Yoshua Bengio. 2014. How to construct deep
recurrent neural networks. In ICLR.

Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio.
2013. On the difficulty of training recurrent neural
networks. In International conference on machine
learning, pages 1310–1318.

Alexandre Passos, Vineet Kumar, and Andrew McCal-
lum. 2014. Lexicon infused phrase embeddings for
named entity resolution. In Proceedings of the Eigh-
teenth Conference on Computational Natural Lan-
guage Learning, pages 78–86. Association for Com-
putational Linguistics.

Matthew Peters, Waleed Ammar, Chandra Bhagavat-
ula, and Russell Power. 2017. Semi-supervised se-
quence tagging with bidirectional language models.
In Proceedings of the 55th Annual Meeting of the
Association for Computational Linguistics (Volume
1: Long Papers), pages 1756–1765. Association for
Computational Linguistics.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word repre-
sentations. In Proceedings of the 2018 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, Volume 1 (Long Papers), pages 2227–
2237. Association for Computational Linguistics.

Lev Ratinov and Dan Roth. 2009. Design challenges
and misconceptions in named entity recognition. In
Proceedings of the thirteenth conference on compu-
tational natural language learning, pages 147–155.
Association for Computational Linguistics.

Marek Rei. 2017. Semi-supervised multitask learn-
ing for sequence labeling. In Proceedings of the
55th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), pages
2121–2130. Association for Computational Linguis-
tics.

Erik F Sang and Sabine Buchholz. 2000. Introduc-
tion to the conll-2000 shared task: Chunking. arXiv
preprint cs/0009008.

Erik F Sang and Fien De Meulder. 2003. Intro-
duction to the conll-2003 shared task: Language-
independent named entity recognition. arXiv
preprint cs/0306050.

Cı́cero Nogueira dos Santos and Bianca Zadrozny.
2014. Learning character-level representations for
part-of-speech tagging. In ICML.

Anders Søgaard and Yoav Goldberg. 2016. Deep
multi-task learning with low level tasks supervised
at lower layers. In Proceedings of the 54th Annual
Meeting of the Association for Computational Lin-
guistics (Volume 2: Short Papers), pages 231–235.
Association for Computational Linguistics.

Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: A simple way to prevent neural networks
from overfitting. Journal of Machine Learning Re-
search, 15:1929–1958.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Ł ukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In I. Guyon, U. V. Luxburg, S. Bengio,
H. Wallach, R. Fergus, S. Vishwanathan, and R. Gar-
nett, editors, Advances in Neural Information Pro-
cessing Systems 30, pages 5998–6008. Curran As-
sociates, Inc.

Yingwei Xin, Ethan Hart, Vibhuti Mahajan, and Jean-
David Ruvini. 2018. Learning better internal
structure of words for sequence labeling. CoRR,
abs/1810.12443.

Jie Yang, Yue Zhang, and Fei Dong. 2017a. Neu-
ral reranking for named entity recognition. In Pro-
ceedings of the International Conference Recent Ad-
vances in Natural Language Processing, RANLP
2017, pages 784–792. INCOMA Ltd.

Zhilin Yang, Ruslan Salakhutdinov, and William
Cohen. 2016. Multi-task cross-lingual se-
quence tagging from scratch. arXiv preprint
arXiv:1603.06270.

Zhilin Yang, Ruslan Salakhutdinov, and William W
Cohen. 2017b. Transfer learning for sequence tag-
ging with hierarchical recurrent networks. In ICLR.

Feifei Zhai, Saloni Potdar, Bing Xiang, and Bowen
Zhou. 2017. Neural models for sequence chunking.
CoRR, abs/1701.04027.

http://arxiv.org/abs/1709.04109
http://arxiv.org/abs/1709.04109
http://arxiv.org/abs/1709.04109
https://doi.org/10.18653/v1/P16-1101
https://doi.org/10.18653/v1/P16-1101
https://www.aaai.org/Papers/AAAI/2019/AAAI-MengF.4631.pdf
https://www.aaai.org/Papers/AAAI/2019/AAAI-MengF.4631.pdf
https://www.aaai.org/Papers/AAAI/2019/AAAI-MengF.4631.pdf
https://doi.org/10.3115/v1/W14-1609
https://doi.org/10.3115/v1/W14-1609
http://aclweb.org/anthology/P17-1161
http://aclweb.org/anthology/P17-1161
http://aclweb.org/anthology/N18-1202
http://aclweb.org/anthology/N18-1202
https://doi.org/10.18653/v1/P17-1194
https://doi.org/10.18653/v1/P17-1194
https://doi.org/10.18653/v1/P16-2038
https://doi.org/10.18653/v1/P16-2038
https://doi.org/10.18653/v1/P16-2038
http://jmlr.org/papers/v15/srivastava14a.html
http://jmlr.org/papers/v15/srivastava14a.html
http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
http://arxiv.org/abs/1810.12443
http://arxiv.org/abs/1810.12443
https://doi.org/10.26615/978-954-452-049-6_101
https://doi.org/10.26615/978-954-452-049-6_101
http://arxiv.org/abs/1701.04027


2441

Yue Zhang, Qi Liu, and Linfeng Song. 2018. Sentence-
state lstm for text representation. In Proceedings of
the 56th Annual Meeting of the Association for Com-
putational Linguistics (Volume 1: Long Papers),
pages 317–327. Association for Computational Lin-
guistics.

http://aclweb.org/anthology/P18-1030
http://aclweb.org/anthology/P18-1030

