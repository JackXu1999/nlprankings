



















































Towards Linear Time Neural Machine Translation with Capsule Networks


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 803–812,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

803

Towards Linear Time Neural Machine Translation with Capsule
Networks

Mingxuan Wang1 Jun xie2 Zhixing Tan2 Jinsong Su3 Deyi Xiong4 Lei Li1
1ByteDance AI Lab, Beijing, China

{wangmingxuan.89,lilei.lab}@bytedance.com
2Mobile Internet Group, Tencent Technology Co., Ltd

3Xiamen University, Xiamen, China
4Tianjin University, Tianjin, China

Abstract

In this study, we first investigate a novel cap-
sule network with dynamic routing for linear
time Neural Machine Translation (NMT), re-
ferred as CAPSNMT. CAPSNMT uses an ag-
gregation mechanism to map the source sen-
tence into a matrix with pre-determined size,
and then applys a deep LSTM network to
decode the target sequence from the source
representation. Different from the previous
work (Sutskever et al., 2014) to store the
source sentence with a passive and bottom-
up way, the dynamic routing policy encodes
the source sentence with an iterative process
to decide the credit attribution between nodes
from lower and higher layers. CAPSNMT
has two core properties: it runs in time that
is linear in the length of the sequences and
provides a more flexible way to aggregate
the part-whole information of the source sen-
tence. On WMT14 English-German task and
a larger WMT14 English-French task, CAP-
SNMT achieves comparable results with the
Transformer system. To the best of our knowl-
edge, this is the first work that capsule net-
works have been empirically investigated for
sequence to sequence problems.1

1 Introduction

Neural Machine Translation (NMT) is an end-
to-end learning approach to machine translation
which has recently shown promising results on
multiple language pairs (Luong et al., 2015; Shen
et al., 2015; Wu et al., 2016; Gehring et al., 2017a;
Kalchbrenner et al., 2016; Sennrich et al., 2015;
Vaswani et al., 2017). Unlike conventional Statis-
tical Machine Translation (SMT) systems (Koehn
et al., 2003; Chiang, 2005) which consist of mul-
tiple separately tuned components, NMT aims at
building upon a single and large neural network

1The work is partially done when the first author worked
at Tencent.

to directly map input text to associated output text
(Sutskever et al., 2014).

In general, there are several research lines of
NMT architectures, among which the Enc-Dec
NMT (Sutskever et al., 2014) and the Enc-Dec
Att NMT are of typical representation (Bahdanau
et al., 2014; Wu et al., 2016; Vaswani et al., 2017).
The Enc-Dec represents the source inputs with a
fixed dimensional vector and the target sequence
is generated from this vector word by word. The
Enc-Dec, however, does not preserve the source
sequence resolution, a feature which aggravates
learning for long sequences. This results in the
computational complexity of decoding process be-
ing O(|S| + |T |), with |S| denoting the source
sentence length and |T | denoting the target sen-
tence length. The Enc-Dec Att preserves the reso-
lution of the source sentence which frees the neu-
ral model from having to squash all the informa-
tion into a fixed represention, but at a cost of a qua-
dratic running time. Due to the attention mecha-
nism, the computational complexity of decoding
process is O(|S| × |T |). This drawbacks grow
more severe as the length of the sequences in-
creases.

Currently, most work focused on the Enc-Dec
Att, while the Enc-Dec paradigm is less empha-
sized on despite its advantage of linear-time de-
coding (Kalchbrenner et al., 2016). The linear-
time approach is appealing, however, the perfor-
mance lags behind the Enc-Dec Att. One poten-
tial issue is that the Enc-Dec needs to be able
to compress all the necessary information of the
input source sentence into context vectors which
are fixed during decoding. Therefore, a natural
question was raised, Will carefully designed ag-
gregation operations help the Enc-Dec paradigm
to achieve the best performance?

In recent promising work of capsule network, a
dynamic routing policy is proposed and proven to



804

effective (Sabour et al., 2017; Zhao et al., 2018;
Gong et al., 2018). Following a similar spirit to
use this technique, we present CAPSNMT, which
is characterized by capsule encoder to address
the drawbacks of the conventional linear-time ap-
proaches. The capsule encoder processes the at-
tractive potential to address the aggregation issue,
and then introduces an iterative routing policy to
decide the credit attribution between nodes from
lower (child) and higher (parent) layers. Three
strategies are also proposed to stabilize the dy-
namic routing process. We empirically verify
CAPSNMT on WMT14 English-German task and
a larger WMT14 English-French task. CAPSNMT
achieves comparable results with the state-of-the-
art Transformer systems. Our contributions can be
summarized as follows:

• We propose a sophisticated designed linear-
time CAPSNMT which achieved compara-
ble results with the Transformer framework.
To the best of our knowledge, CAPSNMT
is the first work that capsule networks have
been empirically investigated for sequence-
to-sequence problems.

• We propose several techniques to stabilize
the dynamic routing process. We believe
that these technique should always be em-
ployed by capsule networks for the best per-
formance.

2 Linear Time Neural Machine
Translation

From the perspective of machine learning, the
task of linear-time translation can be formalized
as learning the conditional distribution p(y|x) of
a target sentence (translation) y given a source
sentence x. Figure 1 gives the framework of our
proposed linear time NMT with capsule encoder,
which mainly consists of two components: a con-
stant encoder that represents the input source sen-
tence with a fixed-number of vectors, and a de-
coder which leverages these vectors to generate
the target-side translation. Please note that due to
the fixed-dimension representation of encoder, the
time complexity of our model could be linear in
the number of source words.

Constant Encoder with Aggregation Lay-
ers Given the input source sentence x =
x1, x2 · · · , xL, Then, we introduce capsule net-

Input
Embedding

Inputs Outputs
(shifted right)

N×

N×

Bi-LSTM
Layer

Add & Norm

Child Capsule

Parent Capsule

Input
Embedding

Projection
Layer

Add & Norm

Forward
LSTM

Add & Norm

Linear

Softmax

Output
Probabilities

Figure 1: CAPSNMT:Linear time neural machine
translation with capsule encoder

works to transfer

X = [x1,x2, · · · ,xL] ∈ RL×dx .

The goal of the constant encoder is to transfer the
inputs X ∈ RL×dv into a pre-determined size rep-
resentation

C = [c1, c2, · · · , cM ] ∈ RM×dc .

whereM < L is the pre-determined size of the en-
coder output, and dc is the dimension of the hidden
states.

We first introduce a bi-directional LSTM (BiL-
STM) as the primary-capsule layer to incorporate
forward and backward context information of the
input sentence:

−→
ht =

−−−−→
LSTM(ht−1,xt)

←−
ht =

←−−−−
LSTM(ht+1,xt)

ht = [
−→
ht,
←−
ht]

(1)

Here we produce the sentence-level encoding ht
of word xt by concatenating the forward

−→
ht and

backward output vector
←−
ht. Thus, the output of

BiLSTM encoder are a sequence of vectors H =
[h1,h2, · · · ,hL] corresponding to the input se-
quence.

On the top of the BiLSTM, we introduce sev-
eral aggregation layers to map the variable-length
inputs into the compressed representation. To
demonstrate the effectiveness of our encoder, we



805

compare it with a more powerful aggregation
method, which mainly involves Max and Average
pooling.

Both Max and Average pooling are the simplest
ways to aggregate information, which require no
additional parameters while being computation-
ally efficient. Using these two operations, we per-
form pooling along the time step as follows:

hmax = max([h1,h2, · · · ,hL]) (2)

havg =
1

L

L∑
i=1

hi (3)

Moreover, because the last time step state hL and
the first time step state h1 provide complimentary
information, we also exploit them to enrich the fi-
nal output representation of encoder. Formally, the
output representation of encoder consists of four
vectors,

C = [hmax,havg,h1,hL]. (4)

The last time step state hL and the first time step
state h1 provide complimentary information, thus
improve the performance. The compressed rep-
resention C is fixed for the subsequent translation
generation, therefore its quality directly affects the
success of building the Enc-Dec paradigm. In this
work, we mainly focus on how to introduce ag-
gregation layers with capsule networks to accu-
rately produce the compressed representation of
input sentences, of which details will be provided
in Section 3.

LSTM Decoder The goal of the LSTM
is to estimate the conditional proba-
bility p(yt|y<t;x1, x2, · · · , xT ), where
(x1, x2, · · · , xT ) is the input sequence and
(y1, y2, · · · , yT ′) is its corresponding output
sequence.

A simple strategy for general sequence learn-
ing is to map the input sequence to a fixed-
sized vector, and then to map the vector to the
target sequence with a conditional LSTM de-
coder(Sutskever et al., 2014):

st = LSTM(st−1,ut)

ut = ATT(C, st−1) + yt
(5)

where yt is the target word embedding of yt, ut is
the inputs of LSTM at time step t, C is the con-
catenation of the source sentence representation
and ATT(·) is the traditional attention function.

At inference stage, we only utilize the top-most
hidden states st to make the final prediction with a
softmax layer:

p(yt|yt−1,x) = softmax(Wost). (6)

Similar as (Vaswani et al., 2017), we also
employ a residual connection (He et al., 2016)
around each of the sub-layers, followed by layer
normalization (Ba et al., 2016).

3 Aggregation layers with Capsule
Networks

Figure 2: Capsule encoder with dynamic routing by
agreement

The aggregation layers with capsule networks
play a crucial role in our model. As shown
in Figure 2, unlike the traditional linear-time
approaches collecting information in a bottom-
up approach without considering the state of the
whole encoding, our capsule layer is able to itera-
tively decide the information flow, where the part-
whole relationship of the source sentence can be
effectively captured.

3.1 Child-Parent Relationships

To compress the input information into the repre-
sentation with pre-determined size, the central is-
sue we should address is to determine the infor-
mation flow from the input capsules to the output
capsules.

Capsule network is an ideal solution which is
able to address the representational limitation and
exponential inefficiencies of the simple aggrega-
tion pooling method. It allows the networks to au-
tomatically learn child-parent (or part-whole) rela-
tionships. Formally, ui→j denotes the information
be transferred from the child capsule hi into the



806

parent capsule cj :

ui→j = αijf(hi,θj) (7)

where αij ∈ R can be viewed as the voting weight
on the information flow from child capsule to
the parent capsule; f(hi,θj) is the transformation
function and in this paper, we use a single layer
feed forward neural networks:

f(hi,θj) = ReLU(hiWj) (8)

where Wj ∈ Rdc×dc is the transformation matrix
corresponding to the position j of the parent cap-
sule.

Finally, the parent capsule aggregates all the in-
coming messages from all the child capsules:

vi =

L∑
j=1

uj→i (9)

and then squashes vi to ||vi|| ∈ (0, 1) confine.
ReLU or similar non linearity functions work well
with single neurons. However we find that this
squashing function works best with capsules. This
tries to squash the length of output vector of a cap-
sule. It squashes to 0 if it is a small vector and tries
to limit the output vector to 1 if the vector is long.

ci = squash(vi)

=
||vi||2

1 + ||vi||2
vi
||vi||

(10)

3.2 Dynamic Routing by Agreement
The dynamic routing process is implemented via
an EM iterative process of refining the coupling
coefficient αij , which measures proportionally
how much information is to be transferred from
hi to cj .

At iteration t, the coupling coefficient αij is
computed by

αtij =
exp(bt−1ij )∑
k exp(b

t−1
ik )

(11)

where
∑
αjαij. This ensures that all the informa-

tion from the child capsule hi will be transferred
to the parent.

btij = b
t−1
ij + c

t
j · f(hti,θtj) (12)

This coefficient btij is simply a temporary value
that will be iteratively updated with the value bt−1ij

of the previous iteration and the scalar product of
ct−1j and f(h

t−1
j ,θ

t−1
j ), which is essentially the

similarity between the input to the capsule and
the output from the capsule. Likewise, remember
from above, the lower level capsule will send its
output to the higher level capsule with similar out-
put. Particularly, b0ij is initialized with 0. The co-
efficient depends on the location and type of both
the child and the parent capsules, which iteratively
refinement of bij . The capsule network can in-
crease or decrease the connection strength by dy-
namic routing. It is more effective than the previ-
ous routing strategies such as max-pooling which
essentially detects whether a feature is present in
any position of the text, but loses spatial informa-
tion about the feature.

Algorithm 1 Dynamic Routing Algorithm
1: procedure ROUTING([h1,h2, · · · ,hL],T )
2: Initialize b0ij ← 0
3: for each t ∈ range(0 : T ) do
4: Compute the routing coefficients αtij

for all i ∈ [1, L], j ∈ [1,M ] . From Eq.(11)
5: Update all the output capsule ctj for all
j ∈ [1,M ] . From Eq.(7,8,9,10)

6: Update all the coefficient btij for all
i ∈ [1, L], j ∈ [1,M ] . From Eq.(12)

7: end for
8: return [c1, c2, · · · , cM ]
9: end procedure

When an output capsule ctj receives the incom-
ing messages uti→j , its state will be updated and
the coefficient αtij is also re-computed for the in-
put capsule ht−1i . Thus, we iteratively refine the
route of information flowing, towards an instance
dependent and context aware encoding of a se-
quence. After the source input is encoded into M
capsules, we map these capsules into vector rep-
resentation by simply concatenating all capsules:

C = [c1, c2, · · · , cM ] (13)

Finally matrix C will then be fed to the final end to
end NMT model as the source sentence encoder.

In this work, we also explore three strategies to
improve the accuracy of the routing process.

Position-aware Routing strategy The routing
process iteratively decides what and how much in-
formation is to be sent to the final encoding with
considering the state of both the final outputs cap-



807

sule and the inputs capsule. In order to fully ex-
ploit the order of the child and parent capsules
to capture the child-parent relationship more ef-
ficiently, we add “positional encoding” to the rep-
resentations of child and parent capsules. In this
way, some information can be injected accord-
ing to the relative or absolute position of capsules
in the sequence. In this aspect, there are many
choices of positional encoding proposed in many
NLP tasks (Gehring et al., 2017b; Vaswani et al.,
2017). Their experimental results strongly demon-
strate that adding positional information in the text
is more effective than in image since there is some
sequential information in the sentence. In this
work, we follow (Vaswani et al., 2017) to apply
sine and cosine functions of different frequencies.

Non-sharing Weight Strategy Besides, we ex-
plore two types of transformation matrices to gen-
erate the message vector ui→j which has been pre-
viously mentioned Eq.(7,8). The first one shares
parameters θ across different iterations. In the sec-
ond design, we replace the shared parameters with
the non-shared strategy θt where t is the iteration
step during the dynamic process. We will com-
pare the effects of these two strategies in our ex-
periments. In our preliminary, we found that non-
shared weight strategy works slightly better than
the shared one which is in consistent with (Liao
and Poggio, 2016).

Separable Composition and Scoring strategy
The most important idea behind capsule networks
is to measure the input and output similarity. It is
often modeled as a dot product function between
the input and the output capsule, and the routing
coefficient is updated correspondingly. Traditional
capsule networks often resort to a straightforward
strategy in which the “fusion” decisions (e.g., de-
ciding the voting weight ) are made based on the
values of feature-maps. This is essentially a soft
template matching (Lawrence et al., 1997), which
works for tasks like classification, however, is un-
desired for maintaining the composition function-
ality of capsules. Here, we propose to employ
separate functional networks to release the scoring
duty, and let θ defined in Eq.(7) be responsible for
composition. More specifically, we redefined the
iteratively scoring function in Eq.(12) as follow,

btij = b
t−1
ij + g(c

t
j) · g(hti). (14)

Here g(·) is a fully connected feed-forward net-
work, which consists of two linear transformations

with a ReLU activation and is applied to each po-
sition separately.

4 Experiments

4.1 Datasets

We mainly evaluated CAPSNMT on the widely
used WMT English-German and English-French
translation task. The evaluation metric is BLEU.
We tokenized the reference and evaluated the per-
formance with multi-bleu.pl. The metrics are ex-
actly the same as in previous work (Papineni et al.,
2002).

For English-German, to compare with the re-
sults reported by previous work, we used the same
subset of the WMT 2014 training corpus that con-
tains 4.5M sentence pairs with 91M English words
and 87M German words. The concatenation of
news-test 2012 and news-test 2013 is used as the
validation set and news-test 2014 as the test set.

To evaluate at scale, we also report the results
of English-French. To compare with the results re-
ported by previous work on end-to-end NMT, we
used the same subset of the WMT 2014 training
corpus that contains 36M sentence pairs. The con-
catenation of news-test 2012 and news-test 2013
serves as the validation set and news-test 2014 as
the test set.

4.2 Training details

Our training procedure and hyper parameter
choices are similar to those used by (Vaswani
et al., 2017). In more details, For English-German
translation and English-French translation, we use
50K sub-word tokens as vocabulary based on
Byte Pair Encoding(Sennrich et al., 2015). We
batched sentence pairs by approximate length, and
limited input and output tokens per batch to 4096
per GPU.

During training, we employed label smoothing
of value � = 0.1(Pereyra et al., 2017). We used
a beam width of 8 and length penalty α = 0.8
in all the experiments. The dropout rate was set
to 0.3 for the English-German task and 0.1 for the
English-French task. Except when otherwise men-
tioned, NMT systems had 4 layers encoders fol-
lowed by a capsule layer and 3 layers decoders.
We trained for 300,000 steps on 8 M40 GPUs,
and averaged the last 50 checkpoints, saved at 30
minute intervals. For our base model, the dimen-
sions of all the hidden states were set to 512 and



808

SYSTEM Architecture Time EN-Fr BLEU EN-DE BLEU
Buck et al. (2014) Winning WMT14 - 35.7 20.7

Existing Enc-Dec Att NMT systems
Wu et al. (2016) GNMT + Ensemble |S||T | 40.4 26.3
Gehring et al. (2017a) ConvS2S |S||T | 40.5 25.2
Vaswani et al. (2017) Transformer (base) |S||T |+|T ||T | 38.1 27.3
Vaswani et al. (2017) Transformer (large) |S||T |+|T ||T | 41.0 27.9

Existing Enc-Dec NMT systems
Luong et al. (2015) Reverse Enc-Dec |S|+|T | - 14.0
Sutskever et al. (2014) Reverse stack Enc-Dec |S|+|T | 30.6 -
Zhou et al. (2016) Deep Enc-Dec |S|+|T | 36.3 20.6
Kalchbrenner et al. (2016) ByteNet c|S|+c|T | - 23.7

CAPSNMT systems
Base Model Simple Aggregation c|S|+c|T | 37.1 21.3
Base Model CAPSNMT c|S|+c|T | 39.6 25.7
Big Model CAPSNMT c|S|+c|T | 40.0 26.4
Base Model Simple Aggregation + KD c|S|+c|T | 38.6 23.4
Base Model CAPSNMT + KD c|S|+c|T | 40.4 26.9
Big Model CAPSNMT+ KD c|S|+c|T | 40.6 27.6

Table 1: Case-sensitive BLEU scores on English-German and English-French translation. KD indicates knowl-
edge distillation (Kim and Rush, 2016).

for the big model, the dimensions were set to 1024.
The capsule number is set to 6.

Sequence-level knowledge distillation is ap-
plied to alleviate multimodality in the training
dataset, using the state-of-the-art transformer big
models as the teachers(Kim and Rush, 2016).
We decode the entire training set once using the
teacher to create a new training dataset for its re-
spective student.

4.3 Results on English-German and
English-French Translation

The results on English-German and English-
French translation are presented in Table 1. We
compare CAPSNMT with various other systems
including the winning system in WMT’14 (Buck
et al., 2014), a phrase-based system whose lan-
guage models were trained on a huge monolingual
text, the Common Crawl corpus. For Enc-Dec Att
systems, to the best of our knowledge, GNMT
is the best RNN based NMT system. Trans-
former (Vaswani et al., 2017) is currently the
SOTA system which is about 2.0 BLEU points
better than GNMT on the English-German task
and 0.6 BLEU points better than GNMT on the
English-French task. For Enc-Dec NMT, ByteNet
is the previous state-of-the-art system which has

150 convolutional encoder layers and 150 convo-
lutional decoder layers.

On the English-to-German task, our big CAP-
SNMT achieves the highest BLEU score among
all the Enc-Dec approaches which even outper-
form ByteNet, a relative strong competitor, by
+3.9 BLEU score. In the case of the larger
English-French task, we achieves the compara-
ble BLEU score among all the with Big Trans-
form, a relative strong competitor with a gap of
only 0.4 BLEU score. To show the power of
the capsule encoder, we also make a comparison
with the simple aggregation version of the Enc-
Dec model, and again yields a gain of +1.8 BLEU
score on English-German task and +3.5 BLEU
score on English-French task for the base model.
The improvements is in consistent with our intu-
ition that the dynamic routing policy is more effec-
tive than the simple aggregation method. It is also
worth noting that for the small model, the capsule
encoder approach get an improvement of +2.3
BLEU score over the Base Transform approach
on English-French task. Knowledge also helps a
lot to bridge the performance gap between CAP-
SNMT and the state-of-the-art transformer model.

The first column indicates the time complexity
of the network as a function of the length of the



809

sequences and is denoted by Time. The ByteNet,
the RNN Encoder-Decoder are the only networks
that have linear running time (up to the constant
c). The RNN Enc-Dec, however, does not pre-
serve the source sequence resolution, a feature
that aggravates learning for long sequences. The
Enc-Dec Att do preserve the resolution, but at a
cost of a quadratic running time. The ByteNet
overcomes these problem with the convolutional
neural network, however the architecture must be
deep enough to capture the global information of
a sentence. The capsule encoder makes use of
the dynamic routing policy to automatically learn
the part-whole relationship and encode the source
sentence into fixed size representation. With the
capsule encoder, CAPSNMT keeps linear running
time and the constant c is the capsule number
which is set to 6 in our mainly experiments.

4.4 Ablation Experiments

In this section, we evaluate the importance of our
main techniques for training CAPSNMT. We be-
lieve that these techniques are universally applica-
ble across different NLP tasks, and should always
be employed by capsule networks for best perfor-
mance. From Table 2 we draw the following con-

Model BLEU
Base CAPSNMT 24.7
+ Non-weight sharing 25.1
+ Position-aware Routing Policy 25.3
+ Separable Composition and Scoring 25.7
+Knowledge Distillation 26.9

Table 2: English-German task: Ablation experiments
of different technologies.

clusions:

• Non-weight sharing strategy We observed
that the non-weight sharing strategy im-
proves the baseline model leading to an in-
crease of 0.4 BLEU.

• Position-aware Routing strategy Adding
the position embedding to the child capsule
and the parent capsule can obtain an improve-
ment of 0.2 BLEU score.

• Separable Composition and Scoring strat-
egy Redefinition of the dot product function
contributes significantly to the quality of the

model, resulting in an increase of 0.4 BLEU
score.

• Knowledge Distillation Sequence-level
knowledge distillation can still achive an
increase of +1.2 BLEU.

4.5 Model Analysis
In this section, We study the attribution of CAP-
SNMT.

Effects of Iterative Routing We also study how
the iteration number affect the performance of ag-
gregation on the English-German task. Figure 3
shows the comparison of 2−4 iterations in the dy-
namic routing process. The capsule number is set
to 2, 4, 6 and 8 for each comparison respectively.
We found that the performances on several differ-
ent capsule number setting reach the best when it-
eration is set to 3. The results indicate the dynamic
routing is contributing to improve the performance
and a larger capsule number often leads to better
results.

2 3 4 5

23.5

24

24.5

25

25.5

26

Iteration

B
L
E
U

2 caps
4 caps
6 caps
8 caps

Figure 3: Effects of Iterative Routing with different
capsule numbers

Model Num Latency(ms)
Transformer - 225
CAPSNMT 4 146
CAPSNMT 6 153
CAPSNMT 8 168

Table 3: Time required for decoding with the base
model. Num indicates the capsule number. Decoding
indicates the amount of time in millisecond required
for translating one sentence, which is averaged over the
whole English-German newstest2014 dataset.

Analysis on Decoding Speed We show the de-
coding speed of both the transformer and CAP-



810

SNMT in Table 3. Thg results empirically demon-
strates that CAPSNMT can improve the decoding
speed of the transformer approach by +50%.

Performance on long sentences A more de-
tailed comparison between CAPSNMT and Trans-
former can be seen in Figure 4. In particular,
we test the BLEU scores on sentences longer
than {0, 10, 20, 30, 40, 50}. We were surprised
to discover that the capsule encoder did well on
medium-length sentences. There is no degrada-
tion on sentences with less than 40 words, how-
ever, there is still a gap on the longest sentences.
A deeper capsule encoder potentially helps to ad-
dress the degradation problem and we will leave
this in the future work.

0 10 20 30 40 50

26

27

28

Sentence Length

B
L
E
U

CapsNMT
Transformer

Figure 4: The plot shows the performance of our sys-
tem as a function of sentence length, where the x-axis
corresponds to the test sentences sorted by their length.

Orlando Bloom and Miranda Kerr still love each other

Orlando Bloom and Miranda Kerr still love each other

Orlando Bloom and Miranda Kerr still love each other

Orlando Bloom and Miranda Kerr still love each other

Table 4: A visualization to show the perspective of a
sentence from 4 different capsules at the third iteration.

Visualization We visualize how much informa-
tion each child capsule sends to the parent cap-
sules. As shown in Table 4, the color density of
each word denotes the coefficient αij at iteration
3 in Eq.(11). At first iteration, the αij follows
a uniform distribution since bij is initialized to 0,
and αij then will be iteratively fitted with dynamic
routing policy. It is appealing to find that afte 3 it-
erations, the distribution of the voting weightsαij
will converge to a sharp distribution and the val-
ues will be very close to 0 or 1. It is also worth

mentioning that the capsule seems able to capture
some structure information. For example, the in-
formation of phrase still love each other will be
sent to the same capsule. We will make further
exploration in the future work.

5 Related Work

Linear Time Neural Machine Translation
Several papers have proposed to use neural net-
works to directly learn the conditional distribution
from a parallel corpus(Kalchbrenner and Blun-
som, 2013; Sutskever et al., 2014; Cho et al.,
2014; Kalchbrenner et al., 2016). In (Sutskever
et al., 2014), an RNN was used to encode a source
sentence and starting from the last hidden state,
to decode a target sentence. Different the RNN
based approach, Kalchbrenner et al., (2016) pro-
pose ByteNet which makes use of the convolution
networks to build the liner-time NMT system. Un-
like the previous work, the CAPSNMT encodes
the source sentence with an iterative process to
decide the credit attribution between nodes from
lower and higher layers.

Capsule Networks for NLP Currently, much
attention has been paid to how developing a so-
phisticated encoding models to capture the long
and short term dependency information in a se-
quence. Gong et al., (2018) propose an aggre-
gation mechanism to obtain a fixed-size encoding
with a dynamic routing policy. Zhao et al., (2018)
explore capsule networks with dynamic routing
for multi-task learning and achieve the best per-
formance on six text classification benchmarks.
Wang et al., (2018) propose RNN-Capsule, a cap-
sule model based on Recurrent Neural Network
(RNN) for sentiment analysis. To the best of our
knowledge, CAPSNMT is the first work that cap-
sule networks have been empirically investigated
for sequence-to-sequence problems.

6 Conclusion

We have introduced CAPSNMT for linear-time
NMT. Three strategies were proposed to boost the
performance of dynamic routing process. The em-
perical results show that CAPSNMT can achieve
state-of-the-art results with better decoding la-
tency in several benchmark datasets.



811

Acknowledgement

We thank the three anonymous reviewers for their
valuable suggestions. Deyi Xiong was supported
by the National Natural Science Foundation of
China (Grant No. 61622209 and 61861130364)

References
Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hin-

ton. 2016. Layer normalization. arXiv preprint
arXiv:1607.06450.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473.

Christian Buck, Kenneth Heafield, and Bas Van Ooyen.
2014. N-gram counts and language models from the
common crawl. In LREC, volume 2, page 4. Cite-
seer.

David Chiang. 2005. A hierarchical phrase-based
model for statistical machine translation. In Pro-
ceedings of the 43rd Annual Meeting on Association
for Computational Linguistics, pages 263–270. As-
sociation for Computational Linguistics.

Kyunghyun Cho, Bart Van Merriënboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint
arXiv:1406.1078.

Jonas Gehring, Michael Auli, David Grangier, De-
nis Yarats, and Yann N. Dauphin. 2017a. Con-
volutional sequence to sequence learning. CoRR,
abs/1705.03122.

Jonas Gehring, Michael Auli, David Grangier, Denis
Yarats, and Yann N Dauphin. 2017b. Convolu-
tional sequence to sequence learning. arXiv preprint
arXiv:1705.03122.

Jingjing Gong, Xipeng Qiu, Shaojing Wang, and Xuan-
jing Huang. 2018. Information aggregation via dy-
namic routing for sequence encoding. international
conference on computational linguistics.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian
Sun. 2016. Deep residual learning for image recog-
nition. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition, pages
770–778.

Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent
continuous translation models. In Proceedings of
the 2013 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1700–1709.

Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan,
Aaron van den Oord, Alex Graves, and Koray
Kavukcuoglu. 2016. Neural machine translation in
linear time. arXiv preprint arXiv:1610.10099.

Yoon Kim and Alexander M Rush. 2016. Sequence-
level knowledge distillation. arXiv preprint
arXiv:1606.07947.

Philipp Koehn, Franz Josef Och, and Daniel Marcu.
2003. Statistical phrase-based translation. In
Proceedings of the 2003 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics on Human Language Technology-
Volume 1, pages 48–54. Association for Computa-
tional Linguistics.

Steve Lawrence, C Lee Giles, Ah Chung Tsoi, and An-
drew D Back. 1997. Face recognition: A convolu-
tional neural-network approach. IEEE transactions
on neural networks, 8(1):98–113.

Qianli Liao and Tomaso Poggio. 2016. Bridging
the gaps between residual learning, recurrent neu-
ral networks and visual cortex. arXiv preprint
arXiv:1604.03640.

Minh-Thang Luong, Hieu Pham, and Christopher D
Manning. 2015. Effective approaches to attention-
based neural machine translation. arXiv preprint
arXiv:1508.04025.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of
the 40th annual meeting on association for compu-
tational linguistics, pages 311–318. Association for
Computational Linguistics.

Gabriel Pereyra, George Tucker, Jan Chorowski,
Łukasz Kaiser, and Geoffrey Hinton. 2017. Regular-
izing neural networks by penalizing confident output
distributions. arXiv preprint arXiv:1701.06548.

Sara Sabour, Nicholas Frosst, and Geoffrey E Hinton.
2017. Dynamic routing between capsules. neural
information processing systems, pages 3856–3866.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2015. Neural machine translation of rare words with
subword units. CoRR, abs/1508.07909.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2015. Minimum
risk training for neural machine translation. arXiv
preprint arXiv:1512.02433.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 6000–6010.

http://arxiv.org/abs/1705.03122
http://arxiv.org/abs/1705.03122
http://arxiv.org/abs/1508.07909
http://arxiv.org/abs/1508.07909


812

Yequan Wang, Aixin Sun, Jialong Han, Ying Liu, and
Xiaoyan Zhu. 2018. Sentiment analysis by capsules.
In Proceedings of the 2018 World Wide Web Con-
ference on World Wide Web, pages 1165–1174. In-
ternational World Wide Web Conferences Steering
Committee.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, et al. 2016. Google’s neural ma-
chine translation system: Bridging the gap between
human and machine translation. arXiv preprint
arXiv:1609.08144.

Wei Zhao, Jianbo Ye, Min Yang, Zeyang Lei, Suofei
Zhang, and Zhou Zhao. 2018. Investigating capsule
networks with dynamic routing for text classifica-
tion. arXiv: Computation and Language.

Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei
Xu. 2016. Deep recurrent models with fast-forward
connections for neural machine translation. arXiv
preprint arXiv:1606.04199.


