



















































Deep RNNs Encode Soft Hierarchical Syntax


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 14–19
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

14

Deep RNNs Encode Soft Hierarchical Syntax

Terra Blevins, Omer Levy, and Luke Zettlemoyer
Paul G. Allen School of Computer Science & Engineering

University of Washington
Seattle, WA

{blvns, omerlevy, lsz}@cs.washington.edu

Abstract

We present a set of experiments to demon-
strate that deep recurrent neural networks
(RNNs) learn internal representations that
capture soft hierarchical notions of syntax
from highly varied supervision. We con-
sider four syntax tasks at different depths
of the parse tree; for each word, we predict
its part of speech as well as the first (par-
ent), second (grandparent) and third level
(great-grandparent) constituent labels that
appear above it. These predictions are
made from representations produced at
different depths in networks that are pre-
trained with one of four objectives: de-
pendency parsing, semantic role labeling,
machine translation, or language model-
ing. In every case, we find a correspon-
dence between network depth and syntac-
tic depth, suggesting that a soft syntactic
hierarchy emerges. This effect is robust
across all conditions, indicating that the
models encode significant amounts of syn-
tax even in the absence of an explicit syn-
tactic training supervision.

1 Introduction

Deep recurrent neural networks (RNNs) have ef-
fectively replaced explicit syntactic features (e.g.
parts of speech, dependencies) in state-of-the-art
NLP models (He et al., 2017; Lee et al., 2017;
Klein et al., 2017). However, previous work has
shown that syntactic information (in the form of
either input features or supervision) is useful for
a wide variety of NLP tasks (Punyakanok et al.,
2005; Chiang et al., 2009), even in the neural set-
ting (Aharoni and Goldberg, 2017; Chen et al.,
2017). In this paper, we show that the internal rep-
resentations of RNNs trained on a variety of NLP
tasks encode these syntactic features without ex-
plicit supervision.

We consider a set of feature prediction tasks
drawn from different depths of syntactic parse
trees; given a word-level representation, we at-
tempt to predict the POS tag and the parent, grand-
parent, and great-grandparent constituent labels of
that word. We evaluate how well a simple feed-
forward classifier can detect these syntax features
from the word representations produced by the
RNN layers from deep NLP models trained on the
tasks of dependency parsing, semantic role label-
ing, machine translation, and language modeling.
We also evaluate whether a similar classifier can
predict if a dependency arc exists between two
words in a sentence, given their representations.

We find that, across all four types of supervi-
sion, the representations learned by these mod-
els encode syntax beyond the explicit information
they encounter during training; this is seen in both
the word-level tasks and the dependency arc pre-
diction task. Furthermore, we also observe that
features associated with different levels of syntax
tree correlate with word representations produced
by RNNs at different depths. Largely speaking,
we see that deeper layers in each model capture
notions of syntax that are higher-level and more
abstract, in the sense that higher-level constituents
cover a larger span of the underlying sentence.

These findings suggest that models trained on
NLP tasks are able to induce syntax even when di-
rect syntactic supervision is unavailable. Further-
more, the models are able to differentiate this in-
duced syntax into a soft hierarchy across different
layers of the model, perhaps shedding some light
on why deep RNNs are so useful for NLP.

2 Methodology

Given a model that uses multi-layered RNNs, we
collect the vector representation xli of each word i
at each hidden layer l. To determine what syntac-
tic information is stored in each word vector, we
try to predict a series of constituency-based prop-



15

Training Signal Dataset RNN Layers Input HiddenDims Dims

Dependency Parsing English Universal 4 parallel bidirectional 200 400Dependencies LSTMs

Semantic Role Labeling CoNLL-2012 8 alternating-direction 100 300LSTMs with highways

Machine Translation WMT-2014 4 parallel bidirectional 500 500English-German LSTMs

Language Modeling CoNLL-2012 2 sets of 4 unidirectional 1000 1000LSTMs with highways

Table 1: The training data, recurrent architecture, and hyperparameters of each model.

S

VP

PP

NP

NNP

Monday

IN

on

VBD

fell

ADVP

RB

also

NP

NNS

indexes

NN

stock

JJ

Other

Figure 1: Constituency tree with labels for the
word “Monday” for the POS (green), parent con-
stituent (blue), grandparent constituent (orange),
and great-grandparent constituent (red) tasks.

erties from the vector alone. Specifically, we pre-
dict the word’s part of speech (POS), as well as
the first (parent), second (grand-parent), and third
level (great-grandparent) constituent labels of the
given word. Figure 1 shows how these labels cor-
respond to an example constituency tree.

Our methodology follows Shi et al. (2016), who
run syntactic feature prediction experiments over
a number of different shallow machine translation
models, and Belinkov et al. 2017a; 2017b, who
use a similar process to study the morphological,
part-of-speech, and semantic features learned by
deeper machine translation encoders. We extend
upon prior work by considering training signals
for models other than machine translation, and
by applying more stratified word-level syntactic
tasks.

2.1 Experiment Setup

We predict each syntactic property with a sim-
ple feed-forward network with a single 300-

dimensional hidden layer activated by a ReLU:

yli = SoftMax(W2ReLU(W1x
l
i)) (1)

where i is the word index and l is the layer index
within a model. To ensure that the classifiers are
not trained on the same data as the RNNs, we train
the classifier for each layer l separately using the
development set of CoNLL-2012 and evaluate on
the test set (Pradhan et al., 2013).

In addition, we compare performance with
word-level baselines. We report the per-word ma-
jority class baseline; at the POS level, for example,
“cat” will be classified as a noun and “walks” as
a verb. This baseline outperforms the pre-trained
GloVe (Pennington et al., 2014) embeddings on
every task. We also consider a contextual base-
line, in which we concatenate each word’s embed-
ding with the average of its context’s embeddings;
however, this baseline also performed worse that
the reported one.

2.2 Analyzed Models
We consider four different forms of supervision.
Table 1 summarizes the differences in data, archi-
tecture, and hyperparameters.1

Dependency Parsing We train a four-layer ver-
sion of the Stanford dependency parser (Dozat and
Manning, 2017) on the Universal Dependencies
English Web Treebank (Silveira et al., 2014). We
ran the parser with 4 bidirectional LSTM layers
(the default is 3), yielding a UAS of 91.5 and a
weighted LAS of 82.18, consistent with the state
of the art on CoNLL 2017. Since the parser re-
ceives syntactic features as input (POS) and is
trained on an explicit syntactic signal, we expect

1While we control for some variables, we mainly rely on
existing architectures and hyperparameters that were tuned
for the original tasks, limiting the cross-model comparability
of absolute performance levels on our syntactic evaluations.



16

Figure 2: Results of syntax experiments. The best performing layer for each experiment is annotated
with a star, and the per-word majority baseline for each task is shown with a dashed line.

its intermediate representations to contain a high
amount of syntactic information.

Semantic Role Labeling We use the pre-trained
DeepSRL model from (He et al., 2017), which
was trained on the training data from the CoNLL-
2012 dataset. This model is an alternating bidirec-
tional LSTM, where the model consists of eight
total layers that alternate between a forward layer
and backward layer. We concatenate the represen-
tations from each pair of directional layers in the
model for consistency with other models.

Machine Translation We train a machine trans-
lation model using OpenNMT (Klein et al., 2017)
on the WMT-14 English-German dataset. The en-
coder (which we examine in our experiments) is a
4-layer bidirectional LSTM; we use the defaults
for every other setting. The model achieves a
BLEU score of 21.37, which is in the ballpark of
other vanilla encoder-decoder attention models on
this benchmark (Bahdanau et al., 2015).

Language Modeling We train two separate lan-
guage models on CoNLL-2012’s training set, one
going forward and another backward. Each model
is a 4-layer LSTM with highway connections,
variational dropout, and tied input-output embed-
dings. After training, we concatenate the forward
and backward representations for each layer.2

3 Constituency Label Prediction

Figure 2 shows our results (see supplementary ma-
terial for numerical results). We make several ob-
servations:

RNNs can induce syntax. Overall, each model
outperforms the baseline and its respective input
embeddings on every syntax task, indicating that
their internal representations encode some notions

2The model achieved perplexities of 50.56 (forward) and
51.24 (backward) on CoNLL-2012’s test set. Since we
are not familiar with other perplexity results on this data,
we note that retraining the architecture on Penn TreeBank
achieved 64.39 perplexity, which is comparable to other high-
performing language models.



17

of syntax. The only exception to this observation
is POS prediction with dependency parsing rep-
resentations; in this case the parser is provided
gold POS tags as input, and cannot improve upon
them. This result confirms the findings of Shi
et al. (2016) and Belinkov et al. (2017b), who
demonstrate that neural machine translation en-
coders learn syntax, and shows that RNNs trained
on other NLP tasks also induce syntax.

Deeper layers reflect higher-level syntax. In
11 out of 16 cases, performance improves up to
a certain layer and then declines, suggesting that
the deeper layers encode less syntactic informa-
tion that earlier ones in these cases. Strikingly, the
higher-level a syntactic task is, the deeper in the
network the peak performance occurs; for exam-
ple, in SRL we see that the parent constituent task
peaks one layer after POS, and the grand-parent
and great-grandparent tasks peak on the layer af-
ter that. One possible explanation is that each
layer leverages the shallower syntactic informa-
tion learned in the previous layer in order to con-
struct a more abstract syntactic representation. In
SRL and language modeling, it seems as though
the syntactic information is then replaced by task-
specific information (semantic roles, word proba-
bilities), perhaps making it redundant.

This observation may also explain a modeling
decision in ELMo (Peters et al., 2018), where
injecting the contextualized word representations
from a pre-trained language model was shown to
boost performance on a wide variety of NLP tasks.
ELMo represents each word using a task-specific
weighted sum of the language model’s hidden lay-
ers, i.e. rather than use only the top layer, it selects
which of the language model’s internal layers con-
tain the most relevant information for the task at
hand. Our results confirm that, in general, differ-
ent types of information manifest at different lay-
ers, suggesting that post-hoc layer selection can be
beneficial.

Language models learn some syntax. We com-
pare the performance of language model represen-
tations to those learned with dependency parsing
supervision, in order to gauge the amount of syn-
tax induced. While this comparison is not ideal
(the models were trained with slightly different
architectures and hyperparameters), it does pro-
vide evidence that the language model’s repre-
sentations encode some amount of syntax implic-

Figure 3: Comparison between the LM and de-
pendency parser on the parent (blue), grandparent
(yellow), and great-grandparent (red) constituent
prediction tasks.

itly. Specifically, we observe in Figure 3 that the
language model and dependency parser perform
nearly identically on the three constituent predic-
tion tasks in the second layer of their respective
networks. In deeper layers the parser continues to
improve, while the language model peaks at layer
2 and drops off afterwards.

These results may be surprising given the find-
ings of Linzen et al. (2016), which found that
RNNs trained on language modeling perform be-
low baseline levels on the task of subject-verb
agreement. However, the more recent investiga-
tion by Gulordava et al. (2018) are in line with our
results. They find that language models trained
on a number of different languages assign higher
probabilities to valid long-distance dependencies
than to incorrect ones. Therefore, LMs seem able
to induce syntactic information despite being pro-
vided with no linguistic annotation.

4 Dependency Arc Prediction

We run an additional experiment that seeks to clar-
ify if the representations learned by deep NLP
models capture information about syntactic struc-
ture. Using the internal representations from a
deep RNN, we train a classifier to predict whether
two words share an dependency arc (have a parent-
child relationship) in the in the dependency parse
tree over a sentence. We find that, similarly to the
previous set of tasks, deep RNNs trained on var-
ious linguistic signals encode notions of the syn-
tactic relationships between words in a sentence.



18

Source Model GloVe L0 L1 L2 L3 L4

DP 0.50 0.68 0.77 0.81 0.88 0.95
SRL 0.50 0.58 0.69 0.76 0.79 0.74
MT 0.50 0.61 0.73 0.63 0.63 0.63
LM 0.50 0.62 0.74 0.78 0.80 0.73

Table 2: Results of the dependency arc prediction task. L0–L4 denote the different layers of the model.
DP refers to the RNN trained with dependency parsing supervision.

Setup We use the same pretrained deep RNNs
and feed-forward prediction network paradigm.
However, we change the input from the previous
experiments, as this task is not at the word-level,
but rather concerns the relationship between two
words; therefore, given a word pair wc, wp for
which we have a dependency arc label, we input
[wc;wp;wc ◦ wp] into the classifier.

We use the Universal Dependencies dataset for
this task, such that we train each classifier on the
development set of this dataset and evaluate on the
test set. We set up the task by generating two pairs
of examples for each word in the UD dataset: a
positive pair that consists of the word and its par-
ent in the dependency tree, and a negative pair that
matches the word with another randomly chosen
word from the sentence.

Results The results for this prediction task are
given in Table 2. We see the best performance
from the dependency parser, finding that the per-
formance for the dependency parser’s representa-
tions continue to improve in the deepest layers,
with a maximum performance of approximately
95% on the last layer. This result is unsurpris-
ing, as this closely related to the task on which
the model was explicitly trained. In the three other
models, we find peaks that occur 12 to 20 accuracy
points above the input layer’s performance. These
results support the findings from the constituency
label prediction task and show that these findings
hold up across syntactic formalisms.

Similarly to the word-level tasks, we see the
best performance from deeper layers in the mod-
els, with both SRL and LM performance peaking
on the third layer. For the LM, we find that the best
performing layer outperforms the initial layer by
18%. This is consistent with our finding in the pre-
vious set of experiments, that RNNs encode sig-
nificant amounts of syntax information even when
trained on linguistic tasks without any explicit an-
notations.

5 Conclusions

In this paper, we run a series of prediction tasks
on the internal representations of deep NLP mod-
els, and find these RNNs are able to induce syn-
tax without explicit linguistic supervision. We also
observe that the representations taken from deeper
layers of the RNNs perform better on higher-level
syntax tasks than those from shallower layers, sug-
gesting that these recurrent models induce a soft
hierarchy over the encoded syntax. These results
provide some insight as to why deep RNNs are
able to model NLP tasks without annotated lin-
guistic features. Further characterizing the exact
aspects of syntax which these models can capture
(and perhaps more importantly, those they cannot)
is an interesting area for future work.

Acknowledgments

The research was supported in part by the ARO
(W911NF-16-1-0121) and the NSF (IIS-1252835,
IIS-1562364). We also thank Yonatan Bisk, Yoav
Goldberg, and the UW NLP group for helpful con-
versations and comments on the work.

References
Roee Aharoni and Yoav Goldberg. 2017. Towards

string-to-tree neural machine translation. In Pro-
ceedings of the 55th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers). Association for Computational Linguistics,
pages 132–140. https://doi.org/10.18653/v1/P17-
2021.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In Proceedings of the
Third International Conference on Learning Repre-
sentations (ICLR). https://arxiv.org/abs/1409.0473.

Yonatan Belinkov, Nadir Durrani, Fahim Dalvi, Has-
san Sajjad, and James Glass. 2017a. What do neu-
ral machine translation models learn about mor-
phology? In Proceedings of the 55th An-
nual Meeting of the Association for Computational

https://doi.org/10.18653/v1/P17-2021
https://doi.org/10.18653/v1/P17-2021
https://doi.org/10.18653/v1/P17-2021
https://doi.org/10.18653/v1/P17-2021
https://arxiv.org/abs/1409.0473
https://arxiv.org/abs/1409.0473
https://arxiv.org/abs/1409.0473
https://doi.org/10.18653/v1/P17-1080
https://doi.org/10.18653/v1/P17-1080
https://doi.org/10.18653/v1/P17-1080


19

Linguistics (Volume 1: Long Papers). Associa-
tion for Computational Linguistics, pages 861–872.
https://doi.org/10.18653/v1/P17-1080.

Yonatan Belinkov, Lluı́s Màrquez, Hassan Sajjad,
Nadir Durrani, Fahim Dalvi, and James Glass.
2017b. Evaluating layers of representation in neural
machine translation on part-of-speech and seman-
tic tagging tasks. In Proceedings of the Eighth In-
ternational Joint Conference on Natural Language
Processing (Volume 1: Long Papers). Asian Feder-
ation of Natural Language Processing, pages 1–10.
http://aclweb.org/anthology/I17-1001.

Danqi Chen, Adam Fisch, Jason Weston, and Antoine
Bordes. 2017. Reading wikipedia to answer open-
domain questions. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers). Association
for Computational Linguistics, Vancouver, Canada,
pages 1870–1879. http://aclweb.org/anthology/P17-
1171.

David Chiang, Kevin Knight, and Wei Wang.
2009. 11,001 new features for statistical ma-
chine translation. In Proceedings of Human Lan-
guage Technologies: The 2009 Annual Confer-
ence of the North American Chapter of the As-
sociation for Computational Linguistics. Associa-
tion for Computational Linguistics, pages 218–226.
http://www.aclweb.org/anthology/N09-1025.

Timothy Dozat and Christopher D. Manning. 2017.
Deep biaffine attention for neural dependency pars-
ing. In Proceedings of the Fifth International
Conference on Learning Representations (ICLR).
http://arxiv.org/abs/1611.01734.

Kristina Gulordava, Piotr Bojanowski, Edouard
Grave, Tal Linzen, and Marco Baroni. 2018.
Colorless green recurrent networks dream hi-
erarchically. In Proceedings of NAACL-HLT .
https://arxiv.org/pdf/1803.11138.pdf.

Luheng He, Kenton Lee, Mike Lewis, and Luke Zettle-
moyer. 2017. Deep semantic role labeling: What
works and what’s next. In Proceedings of the 55th
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 1: Long Papers). Associ-
ation for Computational Linguistics, pages 473–483.
https://doi.org/10.18653/v1/P17-1044.

Guillaume Klein, Yoon Kim, Yuntian Deng,
Jean Senellart, and Alexander Rush. 2017.
Opennmt: Open-source toolkit for neural ma-
chine translation. In Proceedings of ACL
2017, System Demonstrations. Association
for Computational Linguistics, pages 67–72.
http://www.aclweb.org/anthology/P17-4012.

Kenton Lee, Luheng He, Mike Lewis, and Luke Zettle-
moyer. 2017. End-to-end neural coreference resolu-
tion. In Proceedings of the 2017 Conference on Em-
pirical Methods in Natural Language Processing.
Association for Computational Linguistics, pages
188–197. http://aclweb.org/anthology/D17-1018.

Tal Linzen, Emmanuel Dupoux, and Yoav Goldberg.
2016. Assessing the ability of LSTMs to learn
syntax-sensitive dependencies. Transactions of the
Association of Computational Linguistics 4:521–
535. http://www.aclweb.org/anthology/Q16-1037.

Jeffrey Pennington, Richard Socher, and Christo-
pher Manning. 2014. Glove: Global vectors
for word representation. In Proceedings of the
2014 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP). Association
for Computational Linguistics, pages 1532–1543.
https://doi.org/10.3115/v1/D14-1162.

Matthew E Peters, Mark Neumann, Mohit Iyyer,
Matt Gardner, Christopher Clark, Kenton Lee, and
Luke Zettlemoyer. 2018. Deep contextualized word
representations. In Proceedings of NAACL-HLT .
https://arxiv.org/pdf/1802.05365.pdf.

Sameer Pradhan, Alessandro Moschitti, Nianwen Xue,
Hwee Tou Ng, Anders Björkelund, Olga Uryupina,
Yuchen Zhang, and Zhi Zhong. 2013. Towards ro-
bust linguistic analysis using ontonotes. In Pro-
ceedings of the Seventeenth Conference on Com-
putational Natural Language Learning. Associa-
tion for Computational Linguistics, pages 143–152.
http://www.aclweb.org/anthology/W13-3516.

Vasin Punyakanok, Dan Roth, and Wen-tau
Yih. 2005. The necessity of syntactic pars-
ing for semantic role labeling. In Interna-
tional Joint Conference on Artificial Intelli-
gence (IJCAI). volume 5, pages 1117–1123.
http://cogcomp.org/papers/PunyakanokRoYi05.pdf.

Xing Shi, Inkit Padhi, and Kevin Knight. 2016. Does
string-based neural MT learn source syntax? In
Proceedings of the 2016 Conference on Empirical
Methods in Natural Language Processing. Associ-
ation for Computational Linguistics, pages 1526–
1534. https://doi.org/10.18653/v1/D16-1159.

Natalia Silveira, Timothy Dozat, Marie-Catherine
de Marneffe, Samuel Bowman, Miriam Con-
nor, John Bauer, and Christopher D. Man-
ning. 2014. A gold standard dependency
corpus for English. In Proceedings of the
Ninth International Conference on Language
Resources and Evaluation (LREC-2014).
https://nlp.stanford.edu/pubs/Gold LREC14.pdf.

https://doi.org/10.18653/v1/P17-1080
http://aclweb.org/anthology/I17-1001
http://aclweb.org/anthology/I17-1001
http://aclweb.org/anthology/I17-1001
http://aclweb.org/anthology/I17-1001
http://aclweb.org/anthology/P17-1171
http://aclweb.org/anthology/P17-1171
http://aclweb.org/anthology/P17-1171
http://aclweb.org/anthology/P17-1171
http://www.aclweb.org/anthology/N09-1025
http://www.aclweb.org/anthology/N09-1025
http://www.aclweb.org/anthology/N09-1025
http://arxiv.org/abs/1611.01734
http://arxiv.org/abs/1611.01734
http://arxiv.org/abs/1611.01734
https://arxiv.org/pdf/1803.11138.pdf
https://arxiv.org/pdf/1803.11138.pdf
https://arxiv.org/pdf/1803.11138.pdf
https://doi.org/10.18653/v1/P17-1044
https://doi.org/10.18653/v1/P17-1044
https://doi.org/10.18653/v1/P17-1044
http://www.aclweb.org/anthology/P17-4012
http://www.aclweb.org/anthology/P17-4012
http://www.aclweb.org/anthology/P17-4012
http://aclweb.org/anthology/D17-1018
http://aclweb.org/anthology/D17-1018
http://aclweb.org/anthology/D17-1018
http://www.aclweb.org/anthology/Q16-1037
http://www.aclweb.org/anthology/Q16-1037
http://www.aclweb.org/anthology/Q16-1037
https://doi.org/10.3115/v1/D14-1162
https://doi.org/10.3115/v1/D14-1162
https://doi.org/10.3115/v1/D14-1162
https://arxiv.org/pdf/1802.05365.pdf
https://arxiv.org/pdf/1802.05365.pdf
https://arxiv.org/pdf/1802.05365.pdf
http://www.aclweb.org/anthology/W13-3516
http://www.aclweb.org/anthology/W13-3516
http://www.aclweb.org/anthology/W13-3516
http://cogcomp.org/papers/PunyakanokRoYi05.pdf
http://cogcomp.org/papers/PunyakanokRoYi05.pdf
http://cogcomp.org/papers/PunyakanokRoYi05.pdf
https://doi.org/10.18653/v1/D16-1159
https://doi.org/10.18653/v1/D16-1159
https://doi.org/10.18653/v1/D16-1159
https://nlp.stanford.edu/pubs/Gold_LREC14.pdf
https://nlp.stanford.edu/pubs/Gold_LREC14.pdf
https://nlp.stanford.edu/pubs/Gold_LREC14.pdf

