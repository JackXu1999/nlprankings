




































Proceedings of the 12th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+12), pages 27–37,
Düsseldorf, Germany, June 29 - July 1, 2016.

Interfacing Sentential and Discourse TAG-based Grammars

Laurence Danlos

Université Paris Diderot
ALPAGE

INRIA Paris–Rocquencourt
Institut Universitaire de France

Paris, F-75005, France
laurence.danlos@inria.fr

Aleksandre Maskharashvili Sylvain Pogodalla

INRIA, Villers-lès-Nancy, F-54600, France
Université de Lorraine, CNRS

LORIA, UMR 7503
Vandœuvre-lès-Nancy, F-54500, France

aleksandre.maskharashvili@inria.fr

sylvain.pogodalla@inria.fr

Abstract

Tree-Adjoining Grammars (TAG) have
been used both for syntactic parsing, with
sentential grammars, and for discourse
parsing, with discourse grammars. But the
modeling of discourse connectives (coor-
dinate conjunctions, subordinate conjunc-
tions, adverbs, etc.) in TAG-based for-
malisms for discourse differ from their
modeling in sentential grammars. Because
of this mismatch, an intermediate, not
TAG-related, processing step is required
between the sentential and the discourse
processes, both in parsing and in gener-
ation. We present a method to smoothly
interface sentential and discourse TAG
grammars, without using such an inter-
mediate processing step. This method is
based on Abstract Categorial Grammars
(ACG) and relies on the modularity of the
latter. It also provides the possibility, as in
D-STAG, to build discourse structures that
are direct acyclic graphs (DAG) and not
only trees. All the examples may be run
and tested with the appropriate software.

1 Introduction

It is usually assumed that the internal structure
of a text, typically characterized by discourse or
rhetorical relations, plays an important role in
its overall interpretation. Building this structure
may resort to different techniques such as seg-
menting the discourse into elementary discourse
units and then relating them with appropriate re-
lations (Marcu, 2000; Soricut and Marcu, 2003).
Other techniques use discourse grammars, and a
particular trend relies on tree grammars (Polanyi
and van den Berg, 1996; Gardent, 1997; Schilder,
1997). This trend has been further developed

by integrating the modeling of both clausal syn-
tax and semantics, and discourse syntax and se-
mantics within the framework of Tree-Adjoining
Grammar (TAG, Joshi et al. (1975); Joshi and
Schabes (1997)). This gave rise to the TAG
for Discourse (D-LTAG) formalism (Webber and
Joshi, 1998; Forbes et al., 2003; Webber, 2004;
Forbes-Riley et al., 2006), and to the Discourse
Synchronous TAG (D-STAG) formalism (Danlos,
2009; Danlos, 2011). The latter derives semantic
interpretation using Synchronous Tree-Adjoining
Grammars (STAG, Shieber and Schabes (1990);
Nesson and Shieber (2006); Shieber (2006)).

While one may think that using similar frame-
works for both levels should help to interface
them, it is not as smooth as one can expect. In-
deed, a shared feature of D-LTAG and D-STAG
is that grammatical parsing and discourse parsing
are performed at two different stages. Moreover,
the result of the first stage requires additional, not
TAG-related, processing before being able to enter
the second stage. This intermediary step consists
in discourse relation extraction in D-LTAG and in
dicourse normalization in D-STAG.

The reason for this intermediary step relates to
the mismatch between the syntactic properties and
the discourse properties of discourse markers. For
instance, at the syntactical level, sentences as in
(1) are well-formed.

(1) a. Then, John went to Paris.

b. John then went to Paris.

The discourse marker then, an adverb, is consid-
ered as a modifier, either of the whole clause in
(1a) or of the verb phrase (1b). In TAG, they are
represented as auxiliary trees with S or VP root
nodes (XTAG Research Group, 2001; Abeillé,
2002). Using the elementary trees of Figure 1,
Figure 2 (Figure 4, resp.) shows the TAG analy-
sis of (1a) (of (1b), resp.).

27



NP

Fred

S

NP VP

V

went

PP

Prep

to

NP

NP

Paris

S

Adv

then

S∗

VP

Adv

then

VP∗

Figure 1: Elementary trees of a toy TAG grammar

S

Adv

then

S∗

NP

Fred

S

NP VP

V

went

PP

Prep

to

NP

NP

Paris

Figure 2: TAG analysis of (1a)

S

Adv

then

S

NP

Fred

VP

V

went

PP

Prep

to

NP

Paris

Figure 3: Derived tree for (1a)

NP

Fred

S

NP

VP

Adv

then

VP∗

VP

V

went

PP

Prep

to

NP

NP

Paris

Figure 4: TAG analysis of (1b)

S

NP

Fred

VP

Adv

then

VP

V

went

PP

Prep

to

NP

Paris

Figure 5: Derived tree for (1b)

At the discourse level, it is difficult to interpret
these sentences without referring to preceding sen-
tences. The discourse relation (e.g., Narration) has
two arguments: the discourse unit consisting of the
clause in which the discourse cue appears (the host
clause), and some other discourse unit (it can be a
complex one). D-LTAG and D-STAG propose dif-
ferent models of such adverbials, in particular in
the way the first argument is provided. But in both
accounts, adverbials are fronted (see Figure 6(c)
and Figure 9(a)). Hence sentences with medial
adverbials such as (1b) are excluded without the
intermediary step of discourse relation extraction.

A similar mismatch occurs with subordinate
conjunctions. In a typical TAG analysis, they are
modeled with auxiliary trees because they modify
the matrix clause and are not part of its predicate-
argument structure.1 In D-LTAG, however, they
are modeled with initial trees with two substitu-
tion sites (see Figure 6(a)) for the two discourse
units they are predicating over.

So the question of relating the syntactic mod-
eling and the discourse modeling arises. In par-
ticular, we wish to avoid this relation to rely on
some intermediary step. Indeed, the latter has sev-
eral drawbacks. First, it complicates the model-
ing of connectives that are ambiguous in their syn-
tactic and discourse use, and prevents us from us-
ing standard grammar inference and disambigua-
tion techniques. Second, while most of the syntax-
semantics interfaces, in particular in TAG, aim
at satisfying a compositional assumption (Gardent
and Kallmeyer, 2003; Pogodalla, 2004; Kallmeyer
and Romero, 2008; Nesson and Shieber, 2006),
the syntax-discourse interface seems to escape it.
Third, a better integration of the sentential and of
the discourse components also seems an interest-

1It is not always the case, though. Bernard and Danlos
(2016) propose different elementary trees, depending on the
syntactical, semantic, and discourse properties of the con-
junction.

28



ing feature if we want to better describe the inter-
action between discourse connectives and propo-
sitional attitude predicates (Danlos, 2013; Bernard
and Danlos, 2016).

Finally, when generation instead of parsing is
at stake, this architecture also prevents the re-
versibility of the grammars and requires ad-hoc
post-processing. G-TAG, a TAG-based formalism
dedicated to generation that includes elements of a
discourse grammar, had this requirement (Danlos,
1998; Meunier, 1997; Danlos, 2000).

In this article, we describe how to interface a
sentential and a discourse TAG-based grammar.
We show how to link such two grammars and
their proposed modelings of discourse connec-
tives, overcoming the above mentioned issue. We
use an encoding of TAG into Abstract Catego-
rial Grammar (ACG, de Groote (2001)), a gram-
matical framework based on the simply typed λ-
calculus. As we aim at reusing previous works
such as existing TAG sentential grammars as well
as discourse analysis, our approach relies on two
key features of ACG: the ACG account of the TAG
operations and the ACG-based syntax-semantics
interface for TAG (Pogodalla, 2004; Pogodalla,
2009) on the one hand; and the modular ACG
composition, in order to smoothly integrate the
syntactical and discourse behavior of adverbial
connectives without using a two-step analysis on
the other hand. Note, however, that the operations
we use in the ACG composition are not available
as TAG operations. While the encoding of TAG
into ACG is standard (de Groote, 2002; Pogodalla,
2009), our contribution is to use the interpreting
device of ACG to relate (the ACG encoding of) a
TAG sentential grammar and (the ACG encoding
of) a TAG discourse grammar. The example gram-
mars we use may be run and tested2 on the ACG
development software.3

2 TAG Based Discourse Grammars

As TAG grammars, D-LTAG and D-STAG do not
differ from any other TAG grammar: they define
elementary trees that can be combined using the

2The ACG example files can be downloaded from
http://hal.inria.fr/hal-01328697v3/file/

acg-examples.zip. They also include the semantic
interpretation that generates the expected DAG discourse
structures. But because of lack of space, we cannot present
here the semantic part that builds on the one proposed for
D-STAG (Danlos, 2009; Danlos, 2011) and extends it.

3http://www.loria.fr/equipes/

calligramme/acg/#Software.

operations of substitution and adjunction. How-
ever, if some elementary trees are anchored by lex-
ical items (the discourse markers) as in sentential
grammars, the others are anchored by clauses re-
sulting from the syntactic analysis. Contrary to
sentential grammars that contain a lot of differ-
ent elementary tree families, discourse grammars
have a small set of such families. In this section,
we focus on these elementary trees, anchored by
discourse markers. We show how the structure of
these trees influences the interaction between the
sentential and the discourse grammars, and why
this interaction calls for an intermediary process-
ing step. For an in-depth presentation of these for-
malisms, we refer the reader to (Webber and Joshi,
1998; Forbes et al., 2003; Webber, 2004; Forbes-
Riley et al., 2006) for D-LTAG and to (Danlos,
2009; Danlos, 2011) for D-STAG.

Du

Du↓ although Du↓

(a) D-LTAG initial trees for
subordinate conjunctions

Du

Du∗ and Du↓

(b) D-LTAG auxiliary
trees for coordinating
conjunctions (and and ǫ)

Du

then Du∗

(c) D-LTAG auxiliary
trees for connective
adverbials

Figure 6: D-LTAG elementary tree schemes

D-LTAG D-LTAG proposes three main families
of elementary trees that capture different insights
on discourse structures. Trees for subordinate con-
junctions are modeled using initial trees with two
substitution nodes for each of the arguments as
Figure 6(a) shows. This reflects the predicate-
argument structure of these connectives at the dis-
course level. But this contrasts with the syntac-
tic account of these connectives: because they
are outside the domain of locality of the verbs to
which they can adjoin (at S or VP nodes), they
typically are modeled using auxiliary trees (see
Figure 7).

The second family of connectives is used to ex-
tend or to elaborate on clauses with auxiliary trees
anchored by coordinate conjunctions (or by the
empty connective). The first argument of the con-
nective corresponds to the discourse unit the tree is

29



S

S∗ Punct↓ PP

P

although

S↓

Figure 7: Syntactic modeling of subordinate con-
junctions

adjoined to, and the second, the extending clause,
corresponds to the clause that is substituted at the
substitution node, as Figure 6(b) shows.

The third family also consists of auxiliary trees.
But the latter are associated with a single clause as
Figure 6(c) shows. The second argument comes
from the anaphoric interpretation of the connec-
tives anchoring such trees.

The two-stage process for parsing discourse
proceeds as follows: first, each sentence gets a
TAG analysis (derived and derivation trees) by a
standard TAG. Then, each derivation tree is pro-
cessed in order to identify the possible discourse
connectives and their arguments from a syntactic
point of view. The latter (one or two, depending
on the connective) are added as initial trees with
root Du to the discourse grammar, as well as the
(discourse) elementary tree anchored by the con-
nective. For instance, from the clausal derivation
tree of Figure 8, the two arguments αds1 and α

d
s2 ,

and the connective βds3 are extracted. A similar ex-
traction step takes care of the extraction of clause-
medial adverbial connectives.

D-STAG Contrary to D-LTAG, D-STAG models
all discourse connectives with auxiliary trees that
are adjoined to the discourse unit they extend. The
clause content that serves as second argument of
the connective is substituted within this tree. Fig-
ure 9 shows some of the schemes for the elemen-
tary (auxiliary) trees of a D-STAG. The three inter-
nal Du nodes are available for adjunctions, achiev-
ing different effects on the semantic trees (follow-
ing the principles of synchronous TAG, each dis-
course elementary tree is paired with a semantic
tree). Together with a higher-order type for the se-
mantic trees, this allows D-STAG to structurally
generate DAG discourse structures.4 But as the
focus of this article is on the articulation between
the sentential and the discourse grammar, we do

4Such structures are not easily available with D-LTAG,
and this was a motivation to introduce D-STAG.

αsaw

αshe αdog

βa

βwhile

αeating

αshe βwas αlunch β.

αsaw

αshe αdog

βa

Du↓

s1

Extraction

αds1 =

αeating

αshe βwas αlunch β.

Du↓

s2
αds2 =

βwhile (see Figure 6(a))β
d
s3 =

Figure 8: Discourse elementary tree extraction

not enter the details of the discourse-semantics in-
terface here (see Danlos et al. (2015)).

D-STAG shares with D-LTAG the requirement
of a transformation from the sequence of sentence
analysis with a sentential grammar into a sequence
of clauses and discourse connectives in a “dis-
course normal form”. The reasons are basically
the same as for D-LTAG: discourse connectives
need to be identified in order to anchor their as-
sociated discourse elementary trees, as they differ
from their syntactic elementary trees, and clause-
medial extractions need to be managed at this level
as well.

Medial Adverbial Extraction Looking at the
elementary trees of Figure 9(a) (the problem is
similar for D-LTAG elementary trees), we observe
that the host clause of the adverbial are substi-
tuted into the elementary tree, at the Du ↓ node.
But at the sentential level, it is auxiliary trees an-
chored by the adverbials that adjoin into the host
clause. When the adjunction occurs at the top S
node, we get the same surface form in both cases.
However, whenever the adjunction occurs at the
VP node in the sentential grammar, this is not the
case anymore: the adverbial is not fronted, and
the discourse grammar cannot account for this po-
sition. An intermediary form, such as the dis-
course normal form in D-STAG, or the tree ex-
traction in D-LTAG is then required. In order to
get rid of this intermediary step, we should be

30



Du

Du

Du∗ Punct

.

DC

adv

Du

Du↓

(a) Adverbial connectives

Du

Du

Du∗ (Punct)

,

DC

conj

Du

Du↓

(b) Postposed conjunctions

Du

Du

DC

conj

Du

Du↓

Punct

,

Du∗

(c) Preposed conjunction

Figure 9: D-STAG elementary trees

able to describe an operation that simultaneously
substitutes a clause within the elementary tree of
the discourse connective, and adjoins the auxiliary
tree on the VP node. Figure 10(a) describes such
an operation. The dotted lines would represent a
dominance constraint that the tree to be substituted
at Du ↓ should satisfy. It is also natural then to
use the same approach for fronted discourse ad-
verbials, as in Figure 10(b).

Because the adverb has to adjoin within the tree
that is being substituted, describing such an op-
eration seems not to be possible in TAG nor in
multicomponent TAG (at least in a single step). It
would be possible with D-Tree Substitution Gram-
mars (Rambow et al., 2001), but then the deriva-
tion trees would be different, the synchronous
syntax-semantics interface would have to be rede-
fined, and the reversibility properties (for genera-
tion) would have to be stated. We instead use an
encoding with ACG, where these properties nat-
urally follow the standard encoding of TAG into
ACG.

Du

Du

Du∗ Punct
.

DC

ǫ

Du

VP

adv VP

Du↓

VP

(a)

Du

Du

Du∗ Punct
.

DC

ǫ

Du

S

adv S

Du↓

S

(b)

Figure 10: Auxiliary trees for discourse connec-
tives

3 Abstract Categorial Grammars

ACG derives from type-theoretic grammars.
Rather than a grammatical formalism on its own, it
provides a framework in which several grammat-
ical formalisms may be encoded (de Groote and
Pogodalla, 2004), in particular TAG (de Groote,
2002). The definition of an ACG is based on type-
theory, λ-calculus, and linear logic. In particular,
ACG generates languages of linear λ-terms, which
generalize both string and tree languages.

As key feature, ACG provides the user with a di-
rect control over the parse structures of the gram-
mar, the abstract language. Such structures are
later on interpreted by a morphism, the lexicon, to
get the concrete object language. We use the stan-
dard notations of the typed λ-calculus.

Definition (Types). Let A be a set of atomic types.
The set T (A) of implicative types built upon A is
defined with the following grammar:5

T (A) ::= A|T (A) ⊸ T (A)

Definition (Higher-Order Signatures). A higher-
order signature Σ is a triple Σ = 〈A,C, τ〉 where:

5We use the linear arrow ⊸ of linear logic (Girard, 1987)
for the implication.

31



Λ(ΣD-STAG)

Λ(ΣTAG)

Gdisc.

Λ(Σtrees)
Gderived

Λ(Σstring)
Gyield

Λ(Σlogic)
GTAG sem.

GD-STAG sem.

Figure 11: ACG architecture for a discourse and clause grammar interface

• A is a finite set of atomic types;

• C is a finite set of constants;

• τ : C → T (A) is a function assigning types
to constants.

We note Λ(Σ) the set of typed terms build on Σ.
For t ∈ Λ(Σ) and α ∈ T (A), we denote that t has
type α by t :Σ α (possibly omitting the subscript).

Definition (Lexicon). Let Σ1 = 〈A1, C1, τ1〉 and
Σ2 = 〈A2, C2, τ2〉 be two higher-order signatures.
A lexicon L = 〈F,G〉 from Σ1 to Σ2 is such that:

• F : A1 → T (A2). We also note F :
T (A1) → T (A2) its homomorphic exten-
sion;6

• G : C1 → Λ(Σ2). We also note G :
Λ(Σ1) → Λ(Σ2) its homomorphic exten-
sion;7

• F and G are such that for all c ∈ C1, G(c) is
of type F (τ1(c)) (i.e., G(c) :Σ2 F (τ1(c))).

We also use L instead of F or G.

Definition (Abstract Categorial Grammar and vo-
cabulary). An abstract categorial grammar is a
quadruple G = 〈Σ1,Σ2,L,S〉 where:

• Σ1 = 〈A1, C1, τ1〉 and Σ2 = 〈A2, C2, τ2〉 are
two higher-order signatures. Σ1 (resp. Σ2)
is called the abstract vocabulary (resp. the
object vocabulary) and Λ(Σ1) (resp. Λ(Σ2))
is the set of abstract terms (resp. the set of
object terms).

• L : Σ1 → Σ2 is a lexicon.

• S ∈ T (A1) is the distinguished type of the
grammar.

Given an ACG Gname = 〈Σ1,Σ2,Lname,S〉, we
use the following notational variants for the in-
terpretation β (resp. u) of the type α (resp. of

6Such that F (α ⊸ β) = F (α) ⊸ F (β).
7Such that G(λx.t) = λx.G(t) and G(t u) =

G(t) G(u).

the term t): Gname(α) = β and α:=name β (resp.
Gname(t) = u and t:=name u). The subscript may
be omitted if clear from the context.

Definition (Abstract and Object Languages).
Given an ACG G , the abstract language is defined
by

A(G) = {t ∈ Λ(Σ1) |t :Σ1 S}

The object language is defined by

O(G) = {u ∈ Λ(Σ2) | ∃t ∈ A(G) s.t. u = G (t)}

The process of recovering an abstract structure
from an object term o is called ACG parsing and
consists in finding the inverse image of {o} under
the lexicon (lexicon inversion). In this perspective,
derivation trees of TAG are represented as terms
of an abstract language, while derived trees (and
yields) are represented by terms of some object
languages. It is an object language of trees in the
derived tree case and an object language of strings
in the yield case. The class of second-order ACG
is polynomially parsable with the usual complex-
ity bounds (O(n3) for ACG encoding CFG, O(n6)
for ACG encoding TAG, Kanazawa (2008)).

The lexicon, i.e., the way structures are inter-
preted, plays a crucial role in our proposal in
two different ways. First, two interpretations may
share the same abstract vocabulary, hence map-
ping a single structure into two different ones, typ-
ically a surface form and a semantic form. This
composition, illustrated for instance by Gderived
and GTAG sem. sharing the ΣTAG vocabulary in Fig-
ure 11, allows for the semantic interpretation of
derivation trees. Second, the result of a first in-
terpretation can itself be interpreted by a second
lexicon when the object vocabulary of the first in-
terpretation is the abstract vocabulary of the sec-
ond one. This composition, illustrated for instance
by the Gyield ◦ Gderived composition in Figure 11,
allows for modularity and partial specification of
derivations. This is how we relate the discourse
derivation trees to the clausal derivation trees in
Gdisc..

32



4 Examples

4.1 TAG as ACG

We present the TAG and D-STAG encoding us-
ing examples. This encoding follows (de Groote,
2001; de Groote, 2002; Pogodalla, 2009).

In order to encode a TAG into an ACG, we
use a higher-order signature ΣTAG whose atomic
types include S, VP, NP, SA, VPA. . . where the
X types stand for the categories X of the nodes
where a substitution can occur while the XA types
stand for the categories X of the nodes where an
adjunction can occur. For each elementary tree
γlex. entry, there is a constant Clex. entry whose type
is based on the adjunction and substitution sites as
Table 1 shows. It additionally contains constants
IX : XA that are meant to provide a fake auxiliary
tree on adjunction sites where no adjunction actu-
ally takes place in a TAG derivation. Terms built
on this signature are interpreted by Gderived in the
higher-order signature whose unique atomic type
is τ the type of trees. In this signature, for any
X of arity n belonging to the ranked alphabet de-
scribing the elementary trees of the TAG, we have

a constant Xn :

n times
︷ ︸︸ ︷
τ ⊸ · · · ⊸ τ ⊸ τ . Then Gyield

interprets τ into σ, the type for strings, and Xn as
λx1 · · ·xn.x1 + · · · + xn. For instance, the lexi-
con of Table 1 allows one to interpret two terms of
Λ(ΣTAG) representing a derivation with an adjunc-
tion at the S node (resp. at the VP node) of the
given sentences as the equation (2a) (resp. (2b))
shows.

(2a) Gyield ◦ Gderived(Cwent to C
S
then IVP CFred CParis) =

then + Fred + went + to + Paris

(2b) Gyield ◦ Gderived(Cwent to IS C
VP
then CFred CParis) =

Fred + then + went + to + Paris

4.2 D-STAG as ACG

The ACG encoding of D-STAG follows the above
mentioned principles to encode the derived and the
derivation trees resulting from the D-STAG ele-
mentary trees of Figure 9. As a consequence, we
get the same derivation trees. The main differ-
ences with (Danlos, 2009; Danlos, 2011) lie in the
interpretations:

• Gdisc. implements the interface between the
discourse grammar and the sentential gram-
mar, avoiding the intermediate step of build-

ing a discourse normal form (or the extraction
step in D-LTAG). It is central to our proposal.

• GTAG sem.
8 implements the interpretation of

the discourse structures. It slightly differs
from (Danlos, 2011) in order to allow for a
more unified view on the semantic types and
to deal with the relative scope of quantifiers
and discourse relations.

Sentence-Discourse Interface The higher-
order vocabulary ΣD-STAG includes the usual
atomic types to describe the sentence level (NP,
VP, VPA etc.) and new atomic types to describe
the discourse level: Du, which is the type for dis-
course units, and the corresponding DuA type rep-
resenting adjunction sites. A typical constant in-
troducing a discourse marker such as dSthen has type

DC
∆
= DuA ⊸ DuA ⊸ DuA ⊸ Du ⊸ DuA

that reflects the auxiliary trees of D-STAG (Fig-
ure 9). For comparison, see the encoding of the
CVPthen encoding an auxiliary tree adjoining at a VP
node). We also use a type T for full texts.

The key point to smoothly interface the senten-
tial and the discourse grammar is to have the con-
stant that describes a discourse marker ddm of type
DC at the discourse level interpreted using the cor-
responding auxiliary tree Cdm at the right place,
i.e., as adjoining into the host clause. So, cru-
cially, the interpretation specifies an adjunction of
the auxiliary tree into the tree that is being substi-
tuted (i.e., the argument of Du type that is param-
eter of ddm or, in D-STAG terms, the one plugged
into the Du ↓ node of the auxiliary trees of Fig-
ure 9). This operation mimics the insertion of the
auxiliary tree in Figure 10.

In order to enable this adjunction, we inter-
pret discourse units (with Du type) as missing a
subordinate conjunction, a fronted adverbial, or a
clause-medial adverbial. This corresponds to in-
terpreting the atomic type Du as a second-order
type such as SA ⊸ VPA ⊸ S.9 We actually
rather interpret Du as SA ⊸ (VPA ⊸ VPA) ⊸
S in order to account for clause-medial adverbials
occurring between to other adverbs such as in John
suddenly then passionately kissed her.10 Accord-

8Not discussed here but implemented in the example files.
9Another solution would be to have DC requires a (SA ⊸

VPA ⊸ Du) type as fourth parameter. But the ACG would
not be second-order anymore.

10It should be clear that from a technical point of view,
both fronted and clause-medial missing adverbials could be
dealt with the same way (i.e. with a SA ⊸ VPA ⊸ S or a

33



Constants of ΣTAG Their interpretations by Gderived

CFred : NP
γFred : τ
γFred = NP1 Fred

Cwent to :
SA ⊸ VPA ⊸

NP ⊸ NP ⊸ S
γwent to : (τ ⊸ τ) ⊸ (τ ⊸ τ) ⊸ τ ⊸ τ ⊸ τ
γwent to = λSAsc.S(S2 s (A (VP2 (V1 went) (PP2 (Prep to) c))))

CSthen : SA
γSthen : τ ⊸ τ
γSthen = λx.(S2 (Adv1 then) x)

CVPthen : VPA ⊸ VPA
γVPthen : (τ ⊸ τ) ⊸ τ ⊸ τ
γVPthen = λA x.A (VP2 (Adv1 then) x)

Table 1: Sample ACG lexicon encoding the TAG grammar of Figure 1

ingly, at the discourse level, the type of an in-
transitive verb will be SA ⊸ VPA ⊸ VPA ⊸
NP ⊸ S instead of SA ⊸ VPA ⊸ NP ⊸ S,
allowing to specify the two VPA auxiliary trees
that can adjoin before and after the possible dis-
course marker. This leads us to the interpreta-
tion of Table 2. Note that even though the same
name can occur on both sides of the := symbol,
the atomic types and the constants on the left hand
side belong to ΣD-STAG while the (possibly com-
plex) types and the terms on the right hand side
belong to Λ(ΣTAG).

NPA := NPA NA := NA
VP := VP DuA := SA
VPA := VPA ⊸ VPA T := S
Du := SA ⊸ (VPA ⊸ VPA) ⊸ S NP := NP
S := SA ⊸ (VPA ⊸ VPA) ⊸ S N := N
SA := SA ⊸ SA

IX : XA := λP.P
dFred : NP:= CFred
dwent to : SA ⊸ VPA ⊸ VPA ⊸ S ⊸ S

:= λS a1 a2 s o c m.
Cwent to (S c)(a2(m(a1IVP))) s o

din. anc. : S ⊸ DuA ⊸ Du
:= λs m ds dv.mod (s ds dv) m

danchor : S ⊸ DuA ⊸ Du
:= λs m ds dv.mod (s ds dv) m

dSthen : DuA ⊸ DuA ⊸ DuA ⊸ Du ⊸ DuA
:= λd1 d2 d3 s.cons d1 d2 d3 (s C

S
then (λx.x))

dVPthen : DuA ⊸ DuA ⊸ DuA ⊸ Du ⊸ DuA
:= λd1 d2 d3 s.cons d1 d2 d3 (s IS C

VP
then)

Table 2: Gdisc. interpretation for the sentence-
discourse interface12

We exemplify our approach on the examples
(3). In D-STAG, the associated discourse rep-

(SA ⊸ SA) ⊸ (VPA ⊸ VPA) ⊸ S type). We leave it for
further work to check the adequacy of the same phenomena
occurring for fronted adverbials and how it compares with
discourse connective modification or multiple connectives.

12
mod and cons are two operators that have no other mean-

ing that juxtaposing TAG derivation trees of elementary dis-
course units. They are interpreted as: mod := λs m.m s
(it performs the actual adjunction on the derived tree) and
cons := λs1 s2 s3 s x.s1(s2(S3 x . (s3 s))) (it builds a de-
rived tree, inserting a period between the derived trees corre-
sponding to the elementary discourse units).

dinitial anchor

C6 dbecause

IDu d
S
then

IDu IDu IDu danchor

C8 IDu

IDu danchor

C7 IDu

Figure 12: Discourse derivation trees

resentation is as in Figure 13, and the discourse
derivation trees is the one of Figure 12 where the
Cis correspond to the derivation trees of the brack-
eted discourse units of the examples. In D-STAG,
the discourse derivation tree of course results from
the discourse normal form F6 because F7 then F8
that are the same for (3a) and (3b).
(3) a. [Fred went to the supermarket]6 because

[his fridge is empty]7. Then, [he went to
the movies]8.

b. [Fred went to the supermarket]6 because
[his fridge is empty]7. [He]8 then [went
to the movies]8.

φExpl.

F6 F7

φNarr.

F8

Figure 13: Discourse structure for (3a)

If we define the terms d8 and d′8 as in (4) and (5),
we can compute their interpretations (6)-(11) us-
ing the lexicons of Tables 1 and 2. They show that
both positions for the adverbs are now available
directly from the abstract terms representing dis-
course derivations. Consequently, the two terms
defined in (12) and (13) account for both sentences
of (3). Note that they differ only in the constant
they use for the adverb.

34



S

S∗ . S

Adv

Then

S

NP

Fred

VP

V

went

PP

Prep

to

NP

Det

the

N

movies

(a) Derived tree for d8

S

S∗ . S

NP

Fred

VP

Adv

then

VP

V

went

PP

Prep

to

NP

Det

the

N

movies

(b) Derived tree for d′8

Figure 14: Interpretations as derived trees

d8 = d
S
then IDu IDu IDu (danchor C8 IDu) : DuA(4)

d
′
8 = d

VP
then IDu IDu IDu (danchor C8 IDu) : DuA(5)

5 Related Works

This problem of avoiding an intermediate step
between a sentential and a discourse analysis
has also been addressed within the framework of
Combinatory Categorial Grammar (CCG, Steed-
man (2001); Steedman and Baldridge (2011)) by
Nakatsu and White (2010). They propose a sin-
gle grammar to treat both sentential and discourse
phenomena using Discourse Combinatory Cate-
gorial Grammar (DCCG). This approach intro-
duced “cue threading” where “connectives can be

thought of as percolating from where they take
scope semantically down to the clause in which
they appear” (Nakatsu and White, 2010, p. 19).
Here, the connective at the discourse level takes
scope over its argument, but it is interpreted at
the sentential level as an auxiliary tree adjoining
within the clause.

6 Conclusion

This article shows how to interface TAG-based
sentential and discourse grammars without resort-
ing to a two step process. It relies on the interpre-
tation of abstract terms encoding discourse deriva-
tion trees into terms encoding sentential derivation
trees using ACG. The approach also allows us to
build DAG discourse structures. ACG grammars
have been implemented to compute (and parse) the
surface forms and associate them with the rele-
vant semantic forms. In this article, we only ap-
plied the approach to D-STAG, but it should be
clear that it applies to D-LTAG as well. The ap-
proach is also suitable to model connective mod-
ifications (. . . probably because it rains). Our
future work will concern multiple connectives
(. . . because then he discovered he was broke),
some of them we already account for. It will also
concern the integration of discourse structure con-
straints such as the right frontier principle and the
interaction with pronominal anaphora resolution.

Finally, discourse grammars are highly ambigu-
ous. Hence the ACG we derive from such gram-
mars also are ambiguous. We want to take ad-
vantage of our integrated approach to apply the
disambiguation methods used in syntactic parsing.
Moreover, as the analysis can now be dealt with at
the level of the text, even with polynomial algo-
rithms, the size of the input will be an issue. This
calls for further analysis of discourse structuring,
both in parsing and generation.

Gdisc.(d8) = cons IS IS IS (mod (Cwent to C
S
then IVP CFred (Cthe (Cmovies IN))) IS) : SA(6)

Gderived ◦ Gdisc.(d8) = [see the tree representation in Figure 14(a)](7)

Gyield ◦ Gderived ◦ Gdisc.(d8) = λx.x+ .+ Then + Fred + went + to + the + movies) : σ ⊸ σ(8)

Gdisc.(d
′
8) = cons IS IS IS (mod (Cwent to IS (C

VP
then IVP) CFred (Cthe (Cmovies IN))) IS) : SA(9)

Gderived ◦ Gdisc.(d
′
8) = [see the tree representation in Figure 14(b)](10)

Gyield ◦ Gderived ◦ Gdisc.(d
′
8) = λx.x+ .+ Fred + then + went + to + the + movies) : σ ⊸ σ(11)

d3 = din. anc. C6 (dbecause IDu (d
S
then IDu IDu IDu (danc. C8 IDu)) IDu (danc. C7 IDu))(12)

d
′
3 = din. anc. C6 (dbecause IDu (d

VP
then IDu IDu IDu (danc. C8 IDu)) IDu (danc. C7 IDu))(13)

35



References

Anne Abeillé. 2002. Une grammaire électronique du
français. Sciences du langage. CNRS Éditions.

Timothée Bernard and Laurence Danlos. 2016. Mod-
elling discourse in stag: Subordinate conjunc-
tions and attributing phrases. In David Chiang
and Alexander Koller, editors, Proceedings of the
Twelfth International Workshop on Tree Adjoining
Grammars and Related Framework (TAG+12). HAL
open archive: hal-01329539.

Laurence Danlos, Aleksandre Maskharashvili, and Syl-
vain Pogodalla. 2015. Grammaires phrastiques
et discursives fondées sur les TAG : une approche
de D-STAG avec les ACG. In TALN 2015 -
22e conférence sur le Traitement Automatique des
Langues Naturelles, Actes de TALN 2015, pages
158–169, Caen, France. Association pour le Traite-
ment Automatique des Langues. HAL open archive:
hal-01145994.

Laurence Danlos. 1998. G-TAG : Un formalisme lex-
icalisé pour la génération de textes inspiré de TAG.
Traitement Automatique des Langues, 39(2). HAL
open archive: inria-00098489.

Laurence Danlos. 2000. G-TAG: A lexicalized for-
malism for text generation inspired by Tree Ad-
joining Grammar. In Anne Abeillé and Owen
Rambow, editors, Tree Adjoining Grammars: For-
malisms, Linguistic Analysis, and Processing, vol-
ume 107 of CSLI Lecture Notes, pages 343–370.
CSLI Publications. http://www.linguist.jussieu.fr/
∼danlos/Dossier%20publis/G-TAG-eng’01.pdf.

Laurence Danlos. 2009. D-STAG : un formalisme
d’analyse automatique de discours basé sur les TAG
synchrones. T.A.L., 50(1):111–143. HAL open
archive: inria-00524743.

Laurence Danlos. 2011. D-STAG: a formalism for
discourse analysis based on SDRT and using Syn-
chronous TAG. In Philippe de Groote, Markus
Egg, and Laura Kallmeyer, editors, 14th confer-
ence on Formal Grammar - FG 2009, volume
5591 of LNCS/LNAI, pages 64–84. Springer. DOI:
10.1007/978-3-642-20169-1 5.

Laurence Danlos. 2013. Connecteurs de dis-
cours adverbiaux : Problèmes à l’interface syntaxe-
sémantique. LinguisticæInvestigationes, 36(2):261–
275. HAL open archive: hal-00932184. DOI:
10.1075/li.36.2.05dan.

Philippe de Groote and Sylvain Pogodalla. 2004. On
the expressive power of Abstract Categorial Gram-
mars: Representing context-free formalisms. Jour-
nal of Logic, Language and Information, 13(4):421–
438. HAL open archive: inria-00112956. DOI:
10.1007/s10849-004-2114-x.

Philippe de Groote. 2001. Towards Abstract Catego-
rial Grammars. In Association for Computational

Linguistics, 39th Annual Meeting and 10th Confer-
ence of the European Chapter, Proceedings of the
Conference, pages 148–155. ACL anthology: P01-
1033.

Philippe de Groote. 2002. Tree-Adjoining Gram-
mars as Abstract Categorial Grammars. In Pro-
ceedings of the Sixth International Workshop on
Tree Adjoining Grammars and Related Frameworks
(TAG+6), pages 145–150. Università di Venezia.
URL: http://www.loria.fr/equipes/calligramme/acg/
publications/2002-tag+6.pdf.

Katherine Forbes, Eleni Miltsakaki, Rashmi Prasad,
Anoop Sarkar, Aravind K. Joshi, and Bonnie Lynn
Webber. 2003. D-LTAG system: Discourse parsing
with a Lexicalized Tree-Adjoining Grammar. Jour-
nal of Logic, Language and Information, 12(3):261–
279. Special Issue: Discourse and Information
Structure. DOI: 10.1023/A:1024137719751.

Katherine Forbes-Riley, Bonnie Lynn Webber, and Ar-
avind K. Joshi. 2006. Computing discourse se-
mantics: The predicate-argument semantics of dis-
course connectives in D-LTAG. Journal of Seman-
tics, 23(1):55–106. DOI: 10.1093/jos/ffh032.

Claire Gardent and Laura Kallmeyer. 2003. Semantic
construction in feature-based TAG. In Proceedings
of the 10th Meeting of the European Chapter of the
Association for Computational Linguistics (EACL),
pages 123–130. ACL anthology: E03-1030.

Claire Gardent. 1997. Discourse tree adjoining gram-
mar. CLAUS Report 89, Universit, Saarbr, April.

Jean-Yves Girard. 1987. Linear logic. The-
oretical Computer Science, 50(1):1–102. DOI:
10.1016/0304-3975(87)90045-4.

Aravind K. Joshi and Yves Schabes. 1997. Tree-
adjoining grammars. In Grzegorz Rozenberg and
Arto K. Salomaa, editors, Handbook of formal lan-
guages, volume 3, chapter 2. Springer.

Aravind K. Joshi, Leon S. Levy, and Masako Taka-
hashi. 1975. Tree adjunct grammars. Journal
of Computer and System Sciences, 10(1):136–163.
DOI: 10.1016/S0022-0000(75)80019-5.

Laura Kallmeyer and Maribel Romero. 2008. Scope
and situation binding for LTAG. Research on
Language and Computation, 6(1):3–52. DOI:
10.1007/s11168-008-9046-6.

Makoto Kanazawa. 2008. A prefix-correct earley
recognizer for multiple context-free grammars. In
Proceedings of the Ninth International Workshop on
Tree Adjoining Grammars and Related Formalisms
(TAG+9), pages 49–56, Tuebingen, Germany, June
7–8. http://tagplus9.cs.sfu.ca/papers/Kanazawa.pdf.

Daniel Marcu. 2000. The Theory and Practice of Dis-
course Parsing and Summarization. The MIT Press.

36



Frédéric Meunier. 1997. Implantation du formalisme
de génération G-TAG. Ph.D. thesis, Université Paris
7 — Denis Diderot.

Crystal Nakatsu and Michael White. 2010. Gener-
ating with discourse combinatory categorial gram-
mar. Linguistic Issues in Language Technology,
4. http://journals.linguisticsociety.org/elanguage/
lilt/article/view/1277.html.

Rebecca Nancy Nesson and Stuart M. Shieber. 2006.
Simpler TAG semantics through synchronization.
In Proceedings of the 11th Conference on For-
mal Grammar, Malaga, Spain, 7. CSLI Publica-
tions. http://cslipublications.stanford.edu/FG/2006/
nesson.pdf.

Sylvain Pogodalla. 2004. Computing Semantic Repre-
sentation: Towards ACG Abstract Terms as Deriva-
tion Trees. In Seventh International Workshop on
Tree Adjoining Grammar and Related Formalisms -
TAG+7, pages 64–71, Vancouver, BC, Canada. HAL
open archive: inria-00107768.

Sylvain Pogodalla. 2009. Advances in Abstract Cat-
egorial Grammars: Language Theory and Linguis-
tic Modeling. ESSLLI 2009 Lecture Notes, Part II.
HAL open archive: hal-00749297.

Livia Polanyi and Martin H. van den Berg. 1996.
Discourse structure and discourse interpretation.
In Paul J. E. Dekker and Martin Stokhof, edi-
tors, Proceedings of the Tenth Amsterdam Collo-
quium. ILLC/Department of Philosophy, University
of Amsterdam. http://citeseerx.ist.psu.edu/viewdoc/
summary?doi=10.1.1.56.221.

Owen Rambow, K. Vijay-Shanker, and David Weir.
2001. D-Tree Substitution Grammars. Computa-
tional Linguistics, 27(1):87–121. ACL anthology:
J01-1004. DOI: 10.1162/089120101300346813.

Frank Schilder. 1997. Tree discourse grammar
or how to get attached to a discourse? In In
Proceedings of the Tilburg Conference on For-
mal Semantics (IWCS-1997), pages 261–273.
ftp://ftp.informatik.uni-hamburg.de/pub/unihh/
informatik/WSV/schild97a.ps.gz.

Stuart M. Shieber and Yves Schabes. 1990. Syn-
chronous tree-adjoining grammars. In Proceedings
of the 13th International Conference on Compu-
tational Linguistics, volume 3, pages 253–258,
Helsinki, Finland. http://www.eecs.harvard.
edu/∼shieber/Biblio/Papers/synch-tags.pdf. DOI:
10.3115/991146.991191.

Stuart M. Shieber. 2006. Unifying synchronous tree-
adjoining grammars and tree transducers via bimor-
phisms. In Proceedings of the 11th Conference of
the European Chapter of the Association for Com-
putational Linguistics (EACL-06), pages 377–384,
Trento, Italy, 3–7 April. ACL anthology: E06-1048.

Radu Soricut and Daniel Marcu. 2003. Sentence
level discourse parsing using syntactic and lexi-
cal information. In Marti Hearst and Mari Osten-
dorf, editors, Proceedings of the 2003 Human Lan-
guage Technology Conference of the North Ameri-
can Chapter of the Association for Computational
Linguistics (HLT-NAACL 2003), pages 149–156.
ACL anthology: N03-1030.

Mark Steedman and Jason Baldridge. 2011. Combi-
natory categorial grammar. In Robert Borsley and
Kersti Börjars, editors, Non-Transformational Syn-
tax: Formal and Explicit Models of Grammar, chap-
ter 5. Wiley-Blackwell.

Mark Steedman. 2001. The Syntactic Process. MIT
Press.

Bonnie Lynn Webber and Aravind K. Joshi. 1998.
Anchoring a lexicalized tree-adjoining grammar
for discourse. In Manfred Stede, Leo Wanner,
and Eduard Hovy, editors, Proccedings of the
ACL/COLING workshop on Discourse Relations
and Discourse Markers. ACL anthology: W98-
0315.

Bonnie Lynn Webber. 2004. D-LTAG:
extending lexicalized TAG to discourse.
Cognitive Science, 28(5):751–779. DOI:
10.1207/s15516709cog2805 6.

XTAG Research Group. 2001. A Lexicalized Tree
Adjoining Grammar for English. Technical Re-
port IRCS-01-03, IRCS, University of Pennsylva-
nia. ftp://ftp.cis.upenn.edu/pub/xtag/release-2.24.
2001/tech-report.pdf.

37


