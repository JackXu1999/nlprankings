



















































Adapting Meta Knowledge Graph Information for Multi-Hop Reasoning over Few-Shot Relations


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 3376–3381,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

3376

Adapting Meta Knowledge Graph Information for
Multi-Hop Reasoning over Few-Shot Relations

Xin Lv1,2,3, Yuxian Gu1, Xu Han1,2, Lei Hou1,2,3∗ , Juanzi Li1,2,3, Zhiyuan Liu1,2
1Department of Computer Science and Technology, Tsinghua University

2KIRC, Institute for Artificial Intelligence, Tsinghua University
3Beijing National Research Center for Information Science and Technology
{lv-x18,gu-yx17,hanxu17}@mails.tsinghua.edu.cn

{houlei,lijuanzi,liuzy}@tsinghua.edu.cn

Abstract
Multi-hop knowledge graph (KG) reasoning is
an effective and explainable method for pre-
dicting the target entity via reasoning paths
in query answering (QA) task. Most pre-
vious methods assume that every relation in
KGs has enough training triples, regardless
of those few-shot relations which cannot pro-
vide sufficient triples for training robust rea-
soning models. In fact, the performance of
existing multi-hop reasoning methods drops
significantly on few-shot relations. In this
paper, we propose a meta-based multi-hop
reasoning method (Meta-KGR), which adopts
meta-learning to learn effective meta parame-
ters from high-frequency relations that could
quickly adapt to few-shot relations. We eval-
uate Meta-KGR on two public datasets sam-
pled from Freebase and NELL, and the exper-
imental results show that Meta-KGR outper-
forms the current state-of-the-art methods in
few-shot scenarios. Our code and datasets can
be obtained from https://github.com/
THU-KEG/MetaKGR.

1 Introduction

Recently, large-scale knowledge graphs (KGs)
have been demonstrated to be beneficial for many
NLP tasks like query answering (QA). A triple
query for QA is generally formalized as (es, rq, ?),
where es is the source entity and rq is the query
relation. For example, given a language query
“What is the nationality of Mark Twain?”, we
can transform it into (Mark Twain, nationality, ?)
and then search the target entity America from
KGs as the answer. However, as many KGs are
constructed automatically and face serious incom-
pleteness problems (Bordes et al., 2013), it is often
hard to directly get target entities for queries.

To alleviate this issue, some knowledge
graph embedding methods (Bordes et al., 2013;

∗ Corresponding Author

0 2000 4000 6000 8000 10000
Relation frequency

0

200

400

600

800

N
um

be
r

Figure 1: The histogram of relation frequency in the
real-world knowledge graph Wikidata.

Dettmers et al., 2018) have been proposed to em-
bed entities and relations into semantic spaces
to capture inner connections, and then use the
learned embeddings for final predictions. Al-
though these embedding-based methods have
shown strong abilities in predicting target entities
for queries, they only give answers and lack inter-
pretability for their decisions (Lin et al., 2018). In
order to make models more intuitive, Das et al.
(2018) and Lin et al. (2018) propose multi-hop
reasoning methods, which leverage the symbolic
compositionality of relations in KGs to achieve
explainable reasoning results. For example,
when queried with (Mark Twain, nationality, ?),
multi-hop reasoning models can give not only
the target entity America but also multi-hop ex-
plainable paths (Mark Twain, bornIn,Florida) ∧
(Florida, locatedIn,America) as well.

Most previous work assumes that there are
enough triples to train an effective and robust rea-
soning models for each relation in KGs. However,
as shown in Figure 1, a large portion of KG re-
lations are actually long-tail (Xiong et al., 2018;
Han et al., 2018) and only contain few triples,
which can be called few-shot relations. Some
pilot experiments show that the performance of

https://github.com/THU-KEG/MetaKGR
https://github.com/THU-KEG/MetaKGR


3377

previous multi-hop reasoning models, e.g., MIN-
ERVA (Das et al., 2018) and MultiHop (Lin et al.,
2018), on these few-shot relations will drop sig-
nificantly. Note that, there are some knowledge
graph embedding models (Xiong et al., 2018;
Shi and Weninger, 2018; Xie et al., 2016) that
can deal with zero-shot or one-shot relations, but
they still have two main drawbacks: (1) they are
embedding-based models and lack interpretabil-
ity; (2) they focus on zero-shot or one-shot rela-
tions, which is a little far away from real-world
scenes. In fact, even for people, it is hard to grasp
new knowledge with almost no examples. There-
fore, few-shot multi-hop reasoning is a quite im-
portant and practical problem that has not yet been
fully resolved.

In this paper, we propose a meta-based algo-
rithm for multi-hop reasoning (Meta-KGR) to ad-
dress the above problems, which is explainable
and effective for few-shot relations. Specifically,
in Meta-KGR, we regard triple queries with the
same relation r in KGs as a task. For each task,
we adopt reinforcement learning (RL) to train
an agent to search target entities and reasoning
paths. Similar to previous meta-learning method
MAML (Finn et al., 2017), we use tasks of high-
frequency relations to capture meta information,
which includes common features among different
tasks. Then, the meta information can be rapidly
adapted to the tasks of few-shot relations, by pro-
viding a good starting point to train their specific
reasoning agents. In experiments, we evaluate
Meta-KGR on two datasets sampled from Free-
base and NELL, and the experimental results show
that Meta-KGR outperforms the current state-of-
the-art multi-hop reasoning methods in few-shot
scenarios.

2 Problem Formulation

We formally define a KG G = {E ,R,F}, where
E andR denote the entity and relation sets respec-
tively. F = {(es, r, eo)} ⊆ E ×R×E is the triple
set, where es, eo ∈ E are entities and r ∈ R is a re-
lation between them. In this paper, if the number
of triples mentioning a relation r is smaller than
the specific threshold K, r is considered as a few-
shot relation, otherwise, it is a normal relation.

Given a query (es, rq, ?), where es is the source
entity and rq is the few-shot relation, the goal of
few-shot multi-hop reasoning is to predict the right
entity eo for this query. Different from the previ-

ous knowledge graph embedding work, multi-hop
reasoning also gives a reasoning path from es to eo
over G to illustrate the whole reasoning process.

3 Related Work

Knowledge Graph Embedding (Bordes et al.,
2013; Yang et al., 2015; Dettmers et al., 2018)
aims to embed entities and relations into low-
dimensional spaces, and then uses embeddings to
define a score function f(es, r, eo) to evaluate the
probability that a triple is true. Recently, several
models (Xie et al., 2016; Shi and Weninger, 2018)
incorporate additional entity descriptions to learn
embeddings for unseen entities, which can be seen
as zero-shot scenarios. Xiong et al. (2018) predict
new facts under a challenging setting where only
one training triple for a given relation r is avail-
able, which can be seen as a one-shot scenario.
Although these models are effective, they lack in-
terpretability for their decisions.

Multi-Hop Reasoning over KGs aims to learn
symbolic inference rules from relational paths in
G and has been formulated as sequential deci-
sion problems in recent years. DeepPath (Xiong
et al., 2017) first applies RL to search reason-
ing paths in KGs for a given query, which in-
spires much later work (e.g., MINERVA (Das
et al., 2018) and DIVA (Chen et al., 2018)). Be-
cause it is hard to train an RL model, Reinforce-
Walk (Shen et al., 2018) proposes to solve the re-
ward sparsity problem using off-policy learning.
MultiHop (Lin et al., 2018) further extends MIN-
ERVA with reward shaping and action dropout,
achieveing the state-of-the-art performance. These
reasoning methods are intuitive and explainable.
However, all of them have a weak performance in
few-shot scenarios. In addition to multi-hop rea-
soning over KGs, there are also some multi-hop
QA methods in recent years. Yang et al. (2018)
proposes a high quality dataset, which greatly pro-
motes the development of this field. After that,
many methods like CogQA (Ding et al., 2019) and
DFGN (Xiao et al., 2019) are also proposed.

Meta-Learning tries to solve the problem of
“fast adaptation on a new training task”. It has
been proved to be very successful on few-shot task
(Lake et al., 2015; Gu et al., 2018). Previous meta-
learning models mainly focus on computer vision
and imitation learning domains. In this paper, we
propose a new model (Meta-KGR) using the meta-
learning algorithm MAML (Finn et al., 2017) for



3378

Meta-Learning

Fast Adaptation

rLra<latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit>

rLrb
<latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit>

rLrc<latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit>

✓
<latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit>

✓⇤
<latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit>

✓r1<latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit>

✓r2<latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit>

✓r3
<latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit><latexit sha1_base64="(null)">(null)</latexit>

Figure 2: Meta-learning.

few-shot multi-hop reasoning. To the best of our
knowledge, this work is the first research on few-
shot learning for multi-hop reasoning.

4 Model

The main idea of MAML is to use a set of tasks
to learn well-initialized parameters θ∗ for a new
task with few training examples. When applied to
few-shot multi-hop reasoning, triple queries with
the same relation r are considered as a task Tr.
We use triples with normal relations to find well-
initialized parameters θ∗ and train new models on
triples with few-shot relations from the found ini-
tial parameters. As shown in Figure 2, we can eas-
ily fast adapt to new models with parameters θr1 ,
θr2 or θr3 for few-shot relation r1, r2 or r3.

The learning framework of Meta-KGR can be
divided into two parts: (1) relation-specific learn-
ing; (2) meta-learning. Relation-specific learning
aims to learn a REINFORCE model with param-
eters θr for a specific relation r (task) to search
target entities and reasoning paths. Meta-learning
is based on relation-specific learning and is used
to learn a meta-model with parameters θ∗. We will
introduce these two parts in the following sections.

4.1 Relation-Specific Learning
For each query relation rq ∈ R, we learn
a relation-specific multi-hop reasoning agent to
search for reasoning paths and target entities over
G, which is based on the on-policy RL approach
proposed by Lin et al. (2018).

4.1.1 Reinforcement Learning Formulation
The search process over G can be seen as a Markov
Decision Process (MDP): We express G as a di-
rected graph, with entities and relations as nodes
and edges respectively. When given a query and its
answer (es, rq, eo), we expect the agent for rq can
start from the source entity es and walk through
several edges to reach the target entity eo. More
specifically, the MDP is defined as follows.

States The state of the t-th time step is de-
fined as a tuple st = (rq, es, êt), where rq is the

Algorithm 1 Meta-Learning for multi-hop reason-
ing over knowledge graphs
Require: p(R): distribution over relations
Require: α, β: learning rate hyperparameters
1: Randomly initialize θ for meta policy network
2: while not stop training do
3: Sample batch of relations r ∼ p(R)
4: for all relation r do
5: Sample supporting set DS and query set DQ for

task Tr
6: Evaluate∇θLDSr (θ) in Eq. (3)
7: Compute adapted parameters: θ′r = θ −
α∇θLDSr (θ)

8: end for
9: Update θ ← θ − β∇θ

∑
Tr L

DQ
r (θ

′
r)

10: end while

query relation, es is the source entity and êt is the
current entity over G.

Actions The action space At for a given
state st includes all outgoing edges and next en-
tities of êt. Formally, At = {(rt+1, êt+1)|
(êt, rt+1, êt+1) ∈ G}. We add a self-loop edge
to every At, which is similar to a “STOP” action.

Transition For the state st, if the agent se-
lects an action (rt+1, êt+1) ∈ At, the state will be
changed to st+1 = (rq, es, êt+1). The transition
function is defined as δ(st,At) = (rq, es, êt+1).
In this paper, we unroll the search over G up to a
fixed number of time steps T , and finally achieve
the state sT = (rq, es, êT ).

Rewards The reward R(sT |rq, es) will be 1
if the agent finally stops at the right entity, i.e.,
êT = eo, otherwise it will get an embedding-
based reward f(es, rq, êT ), where f is a score
function from knowledge graph embedding meth-
ods to measure the probability over (es, rq, êt).

4.1.2 Policy Network
To solve the above MDP problem, we need a
model which has policy to choose actions at each
state. Specifically, different from normal RL prob-
lems, we apply a policy network considering the
search history over G. Formally, after embedding
all entities and relations in G as e ∈ Rd and r ∈ Rd
respectively, each action at = (rt+1, êt+1) ∈ At
is represented as at = [rt+1; êt+1]. We use an
LSTM to encode the search path,

ht = LSTM(ht−1,at−1). (1)

Then, we represent the action space by stacking
all actions in At as At ∈ R|At|×2d. The parame-
terized policy network is defined as,

πθ(at|st) = softmax(At(W2ReLU(W1[êt;ht; rq]))),
(2)



3379

Model FB15K-237 NELL-995MRR Hits@1 Hits@10 MRR Hits@1 Hits@10

NeuralLP 10.2 7.0 14.8 17.9 4.8 35.1
NTP-λ 21.0 17.4 30.8 15.5 10.2 33.4

MINERVA 30.5 28.4 34.1 20.1 16.2 28.3
MultiHop(DistMult) 38.1 38.1 50.3 20.0 14.5 30.6
MultiHop(ConvE) 42.7 36.7 53.3 23.1 17.8 32.9

Meta-KGR(DistMult) 45.8 40.3 58.0 24.8 19.7 34.5
Meta-KGR(ConvE) 46.9 41.2 58.8 25.3 19.7 34.7

Table 1: Experimental results for link prediction. The MRR, Hits@1 and Hits@10 metrics are multiplied by 100.

where πθ(at|st) is the probability distribution over
all actions in At.
4.1.3 Loss Function
Given a query relation r and a batch of triples set
D with relation r, the overall loss for this relation-
specific policy network is defined as:

LDr (θ) = −E(es,r,eo)∈DEa1,...,aT−1∈πθ [R(sT |es, r)].
(3)

4.2 Meta-Learning
In meta-learning, we aim to learn well-initialized
parameters θ∗, such that small changes in the pa-
rameters will produce significant improvements
on the loss function of any task (Finn et al., 2017).

Formally, we consider a meta policy network
with parameters θ. When adapting to a new task
Tr, the parameters of the model become θ′r. Fol-
lowing MAML, the updated parameter θ′r is com-
puted using one or more gradient descent updates
on task Tr. For example, assuming a single gradi-
ent step is taken with the learning rate α

θ′r = θ − α∇θLDSr (θ), (4)
where DS is a supporting set randomly sampled
from the triples belonging to Tr. After the relation-
specific parameters θ′r is learned, we evaluate θ

′
r

on the query setDQ belonging to Tr, which is sam-
pled like DS . The gradient computed from this
evaluation can be used to update the meta policy
network with parameters θ. Usually, we will go
over many tasks in a batch and update θ as fol-
lows:

θ = θ − β∇θ
∑
Tr

L
DQ
r (θ

′
r), (5)

where β is the meta-learning rate. We detail the
meta-learning algorithm in Algorithm 1.

After previous meta-learning steps, Meta-KGR
can fast adapt to a relation-specific policy network
for every few-shot relation by using θ as well-
initialized parameters θ∗.

Dataset #Ent #Rel #Triples

FB15k-237 (normal) 14,448 200 268,039
FB15k-237 (few-shot) 3,078 37 4,076
NELL-995 (normal) 63,524 170 115,454
NELL-995 (few-shot) 2,951 30 2,680

Table 2: Statistics of datasets.

5 Experiments

5.1 Datasets

We use two typical datasets FB15K-237
(Toutanova et al., 2015) and NELL-995 (Xiong
et al., 2017) for training and evaluation. Specif-
ically, we set K = 137 and K = 114 to select
few-shot relations from FB15K-237 and NELL-
995 respectively. Besides, we rebuild NELL-995
to generate few-shot relations in valid and test set.
Statistics are given separately for normal relations
and few-shot relations in Table 2.

5.2 Baselines

We compare with four multi-hop reasoning mod-
els in experiments: (1) Neural Logical Program-
ming (NerualLP) (Yang et al., 2017); (2) NTP-λ
(Rocktäschel and Riedel, 2017); (3) MINERVA
(Das et al., 2018) and (4) MultiHop (Lin et al.,
2018). For MultiHop and our model, we use both
DistMult (Yang et al., 2015) and ConvE (Dettmers
et al., 2018) as the reward function to create two
different model variations, which are labeled in
parentheses in Table 1.

5.3 Link Prediction

Given a query (es, rq, ?), link prediction for QA
aims to give a ranking list of candidate entities
from the KG. Following previous work (Dettmers
et al., 2018; Lin et al., 2018), we use two evalua-
tion metrics in this task: (1) the mean reciprocal
rank of all correct entities (MRR) and (2) the pro-
portion of correct entities that rank no larger than
N (Hits@N).



3380

Threshold MultiHop Meta-KGRMRR Hits@1 MRR Hits@1

K = 1 20.8 16.9 22.3 19.3
K = 5 25.7 20.8 29.6 26.6
K = 10 29.1 25.0 31.3 27.2
K = max 42.7 36.7 46.9 41.2

Table 3: Experimental results for robustness analysis.

Evaluation results on two datasets are shown in
Table 1. From the table, we can conclude that:
(1) Our models outperform previous work in most
cases, which means meta parameters learned from
high-frequency relations can adapt to few-shot re-
lations well. (2) ConvE is better than DistMult
when used as the reward function in our mod-
els. This indicates that more effective knowl-
edge graph embedding methods may provide fine-
grained rewards for training multi-hop reasoning
models. (3) Compared with NELL-995, FB15K-
237 is denser. Our models perform well on both
datasets, which demonstrates Meta-KGR can ac-
commodate different types of KGs.

5.4 Robustness Analysis

We can use different frequency thresholds K to
select few-shot relations. In this section, we will
study the impact of K on the performance of our
model. In our experiments, some triples will be
removed until every few-shot relation has only
K triples. We do link prediction experiments on
FB15K-237 and use ConvE as our reward func-
tion. The final results are shown in Table 3. K =
max means we use the whole datasets in Table 2
and do not remove any triples. From Table 3 we
can see our model is robust to K and outperforms
MultiHop in every case.

6 Conclusion

In this paper, we propose a meta-learning based
model named Meta-KGR for multi-hop rea-
soning over few-shot relations of knowledge
graphs. Meta-KGR uses training triples with high-
frequency relations to find well-initialized param-
eters and fast adapt to few-shot relations. The meta
information learned from high-frequency relations
is helpful for few-shot relations. In experiments,
our models achieve good performance on few-shot
relations and outperform previous work in most
cases. Some empirical analysis also demonstrates
that our models are robust and generalized to dif-
ferent types of knowledge graphs.

Acknowledgments

The work is supported by NSFC key projects
(U1736204, 61533018, 61661146007), Ministry
of Education and China Mobile Joint Fund
(MCM20170301), and THUNUS NExT Co-Lab.

References
Antoine Bordes, Nicolas Usunier, Alberto Garcia-

Duran, Jason Weston, and Oksana Yakhnenko.
2013. Translating embeddings for modeling multi-
relational data. In NIPS.

Wenhu Chen, Wenhan Xiong, Xifeng Yan, and
William Yang Wang. 2018. Variational knowledge
graph reasoning. In NAACL.

Rajarshi Das, Shehzaad Dhuliawala, Manzil Zaheer,
Luke Vilnis, Ishan Durugkar, Akshay Krishna-
murthy, Alex Smola, and Andrew McCallum. 2018.
Go for a walk and arrive at the answer: Reasoning
over paths in knowledge bases using reinforcement
learning. In ICLR.

Tim Dettmers, Pasquale Minervini, Pontus Stenetorp,
and Sebastian Riedel. 2018. Convolutional 2d
knowledge graph embeddings. In AAAI.

Ming Ding, Chang Zhou, Qibin Chen, Hongxia Yang,
and Jie Tang. 2019. Cognitive graph for multi-hop
reading comprehension at scale. In ACL.

Chelsea Finn, Pieter Abbeel, and Sergey Levine. 2017.
Model-agnostic meta-learning for fast adaptation of
deep networks. In ICML.

Jiatao Gu, Yong Wang, Yun Chen, Victor OK Li, and
Kyunghyun Cho. 2018. Meta-learning for low-
resource neural machine translation. In EMNLP.

Xu Han, Hao Zhu, Pengfei Yu, Ziyun Wang, Yuan
Yao, Zhiyuan Liu, and Maosong Sun. 2018. Fewrel:
A large-scale supervised few-shot relation classifi-
cation dataset with state-of-the-art evaluation. In
EMNLP.

Brenden M Lake, Ruslan Salakhutdinov, and Joshua B
Tenenbaum. 2015. Human-level concept learning
through probabilistic program induction. Science,
350(6266):1332–1338.

Xi Victoria Lin, Richard Socher, and Caiming Xiong.
2018. Multi-hop knowledge graph reasoning with
reward shaping. In EMNLP.

Tim Rocktäschel and Sebastian Riedel. 2017. End-to-
end differentiable proving. In NIPS.

Yelong Shen, Jianshu Chen, Po-Sen Huang, Yuqing
Guo, and Jianfeng Gao. 2018. Reinforcewalk:
Learning to walk in graph with monte carlo tree
search. In ICLR.



3381

Baoxu Shi and Tim Weninger. 2018. Open-world
knowledge graph completion. In AAAI.

Kristina Toutanova, Danqi Chen, Patrick Pantel, Hoi-
fung Poon, Pallavi Choudhury, and Michael Gamon.
2015. Representing text for joint embedding of text
and knowledge bases. In EMNLP.

Yunxuan Xiao, Yanru Qu, Lin Qiu, Hao Zhou, Lei Li,
Weinan Zhang, and Yong Yu. 2019. Dynamically
fused graph network for multi-hop reasoning. In
ACL.

Ruobing Xie, Zhiyuan Liu, Jia Jia, Huanbo Luan, and
Maosong Sun. 2016. Representation learning of
knowledge graphs with entity descriptions. In AAAI.

Wenhan Xiong, Thien Hoang, and William Yang
Wang. 2017. Deeppath: A reinforcement learning
method for knowledge graph reasoning. In EMNLP.

Wenhan Xiong, Mo Yu, Shiyu Chang, Xiaoxiao Guo,
and William Yang Wang. 2018. One-shot relational
learning for knowledge graphs. In EMNLP.

Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng
Gao, and Li Deng. 2015. Embedding entities and
relations for learning and inference in knowledge
bases. In ICLR.

Fan Yang, Zhilin Yang, and William W Cohen. 2017.
Differentiable learning of logical rules for knowl-
edge base reasoning. In NIPS.

Zhilin Yang, Peng Qi, Saizheng Zhang, Yoshua Ben-
gio, William Cohen, Ruslan Salakhutdinov, and
Christopher D Manning. 2018. Hotpotqa: A dataset
for diverse, explainable multi-hop question answer-
ing. In EMNLP.


