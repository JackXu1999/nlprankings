



















































Individuation Criteria, Dot-types and Copredication: A View from Modern Type Theories


Proceedings of the 14th Meeting on the Mathematics of Language (MoL 14), pages 39–50,
Chicago, USA, July 25–26, 2015. c©2015 Association for Computational Linguistics

Individuation Criteria, Dot-types and Copredication:
A View from Modern Type Theories∗

Stergios Chatzikyriakidis
LIRMM

University of Montpellier 2
stergios.chatzikyriakidis@lirmm.fr

Zhaohui Luo
Dept. of Computer Science

Royal Holloway, Univ. of London, U.K.
zhaohui.luo@hotmail.co.uk

Abstract

In this paper we revisit the issue of copredica-
tion from the perspective of modern type the-
ories. Specifically, we look at: a) the counting
properties of dot-types, and b) the case of a
complex dot-type that has remained unsolved
in the literature, i.e. that of newspaper. As re-
gards a), we show that the account proposed
in (Luo, 2010) for dot-types makes the cor-
rect predictions as regards counting. In order
to verify this, we implement the account in the
Coq proof-assistant and check that the desired
inferences follow. Then, we look at the case
of b), the case of a dot-type which is both re-
source and context sensitive. We propose a
further resource sensitive version of the dot-
type, in effect a linear dot-type. This along
with local coercions can account for the be-
haviour attested.

1 Copredication: Dot Types and
Individuation Criteria

One of the issues that should be taken care of when
giving an account of co-predication, concerns cases
of coordination like the one shown below:

(1) John picked up and mastered three books

In the above sentence, the CN book is used in its
physical sense (PHY) with respect to the predicate

∗ This work is partially supported by the research
grants from Leverhulme, Royal Academy of Engineering, the
CAS/SAFEA International Partnership Program for Creative
Research Teams as well as the ANR ContInt Polymnie project
in France.

picked up, while for the predicate mastered it is
rather used in its informational content sense (INFO).
A theory of co-predication should be able to take
care of these facts. This is true for the account
by means of the dot-types proposed by (Luo, 2010;
Luo, 2012b). However, besides capturing this be-
haviour of dot objects, there is an additional prop-
erty that has to be captured. The account provided
must also make the correct predictions as regards in-
dividuation and counting. Let us explain. Consider
the following sentences:

(2) John picked up three books

(3) John mastered three books

(4) John picked up and mastered three books

The first example (2) is true in case John picked
three distinct physical objects. Thus, it is compatible
with a situation where John picked up three copies
of the same book. (3) is true in case three distinct
informational objects are mastered but does not im-
pose any restrictions on whether these three infor-
mational objects should be different physical objects
or not. To the contrary, (4) is only compatible with
an interpretation where three distinct physical ob-
jects as well as three distinct informational objects
is involved.1

Another issue pertaining to dot types concerns
cases of what Retoré (2014) calls rigid and flexi-
ble coercions in co-predication cases. These cases
in contrast to cases like Book where both senses can

1This is basically an issue of how complex objects, i.e. dot-
types, are individuated and stems from the work of (Asher,
2008; Asher, 2011).

39



be coordinated, involve examples where if one of the
senses is used the other one cannot be used anymore:

(5) Liverpool is spread out and voted (last Sun-
day).

(6) # Liverpool voted and won (last Sunday).

Perhaps a better example for such cases is Puste-
jovsky’s newspaper examples. The CN newspaper
is associated with three senses: a) physical object,
b) informational object and c) institution. It is a
strange fact that whereas senses a) and b) can appear
together in a coordinated structure, sense c) cannot
appear with any of the other two (examples taken
from (Antunes and Chaves, 2003)):

(7) # That newspaper is owned by a trust and is
covered with coffee.

(8) # The newspaper fired the reporter and fell off
the table.

(9) # John sued and ripped the newspaper.

Pustejovsky’s proposal (Pustejovsky, 1995) to treat
newspaper as a composite dot object does not ex-
plain the above facts. Likewise, the proposal of us-
ing (ordinary) dot-types in (Luo, 2010) has a simi-
lar problem: one would consider newspaper to be a
subtype of the dot-type INST • (PHY • INFO), which
would not disallow the above bad examples. The
picture gets complicated in the light of examples like
the following, in which it seems that the institutional
sense can be used together with one of the two other
senses in some cases:

(10) The newspaper you are reading is being sued
by Mia.

As far as we know, no satisfactory account has
been provided to these questions yet. In this paper,
following earlier work on dot-types in MTTs (Luo,
2010; Luo, 2012b; Xue and Luo, 2012) and coor-
dination (Chatzikyriakidis and Luo, 2012), we take
up the challenge of providing an account that cor-
rectly predicts the individuation criteria in cases of
co-predication while it furthermore provides a first
look at capturing the behaviour of problematic cases
like newspaper.

2 Formal Semantics in Modern Type
Theories: a Brief Introduction

The term Modern Type Theories (MTTs) refers to
type theories studied and developed within the tradi-
tion of Martin-Löf, which include predicative type
theories such as Martin-Löf’s type theory (Nord-
ström et al., 1990) and impredicative type theories
such as CICp as implemented in Coq (The Coq team,
2007) and UTT (Luo, 1994). Formal semantics in
Modern Type Theories (MTT-semantics for short)
was first studied by Ranta in his pioneering work
(Ranta, 1994).2 It has been further developed in the
last several years, including the crucial employment
of the theory of coercive subtyping (Luo, 1999; Luo,
Soloviev and Xue, 2012) among other developments
and made MTT-semantics a viable and full-blown
alternative to the traditional Montagovian frame-
work. In this paper, we use one such modern type
theory, UTT with Coercive Subtyping (Luo, 1994;
Luo, 1999), whose application to linguistic seman-
tics was first discussed in (Luo, 2010).

Two features of MTTs are worth being men-
tioned, both important for being a foundational lan-
guage for linguistic semantics. The first is that an
MTT has a consistent internal logic according to
the propositions-as-types principle (Curry and Feys,
1958; Howard, 1980).3 For instance, the higher-
order logic is embedded in UTT and it is essentially
used when we employ UTT for linguistic semantics
(just like how higher-order logic is used in Mon-
tague’s semantics.)

The second feature of MTTs is that it has rich type
structures, which have been recognised by many re-
searchers as very useful in formal semantics. In this

2Potentially, even further back, with the work of Sundholm
(Sundholm, 1986; Sundholm, 1989), but Ranta (Ranta, 1994)
was the first systematic study of formal semantics in a modern
type theory.

3Having such an internal logic is a basic requirement for
a type theory to be employed for linguistic semantics and we
need to be careful to keep the internal logic to be consistent
when trying to extend an existing type theory to do linguistic
semantics, for otherwise, we could be in a muddle situation if
the basic requirement is violated. For instance, the framework
of Type Theory with Records (TTR) (Cooper, 2011) is based
on set theory and, as a consequence, TTR does not have such
an internal logic based on the propositions-as-types principle
(to see this, it suffices to note that TTR’s a : A is just the set-
theoretical membership relation a ∈ A and undecidable).

40



section, we shall briefly discuss some of these dis-
tinctive features of MTTs, specifically the ones most
relevant to this paper.

2.1 Type Many-sortedness and CNs as Types

The domain of individuals in MTTs is multi-sorted
and not single-sorted as in Church’s simple type the-
ory (Church, 1940). Instead of using one coarse-
grained domain of entities, like it is done in the Mon-
tague Semantics (MS) (Montague, 1974), MTTs
contain many types that allow one to make fine-
grained distinctions between individuals and further
use those different types to interpret subclasses of
individuals. For example, one can find John :
[[man]] and Mary : [[woman]], where [[man]] and
[[woman]] are different types.

A further difference closely related to type many-
sortedness concerns the interpretation of CNs. In
MS, CNs are interpreted as predicates of type e →
t, whereas in MTTs CNs are interpreted as types.
Thus, in MTTs, CNs man, human, table and book
are interpreted as types [[man]], [[human]], [[table]]
and [[book]], respectively. (Such types may be de-
fined by means of type constructors such as Σ etc
– see below.) Then, individuals are interpreted as
being of one of the types used to interpret CNs.
Such interpretations of CNs as types would not work
without a proper subtyping mechanism that extends
MTTs – coercive subtyping provides us with such a
framework.4

2.2 Rich Typing

Type structures in MTTs are very rich. They can be
used to represent collections of objects (or construc-
tive sets, informally) in a model-theoretic sense, al-
though they are syntactic entities in MTTs. Elabo-
rating on the expressiveness of typing structures of
MTTs, we briefly mention the following type struc-
tures:

• Dependent sum types (Σ-types Σ(A,B) which
have product types A × B as a special case).
Σ-types have been used to interpret intersec-
tive and subsective adjectives without the need

4See (Luo, 1999; Luo, Soloviev and Xue, 2012) for the for-
mal details of coercive subtyping. Also see (Luo, 2012a) and
the next section for further argumentation on interpreting CNs
as types.

of resorting to meaning postulates. The infer-
ences follow directly from typing (Ranta, 1994;
Chatzikyriakidis and Luo, 2013). Note that
subtyping is essential for the Σ-type to work
(Luo, 2012b).

• Dependent product types (Π-types Π(A,B),
which have arrow-types A → B as a special
case). These are basic dependent types that,
together with universes (see below), provide
polymorphism among other things. To give an
example, verb modifying adverbs are typed by
means of dependent Π-types (together with the
universe CN of common nouns) (Luo, 2012b;
Chatzikyriakidis, 2014).

• Disjoint union types (A + B). Disjoint union
types have been proposed to give interpreta-
tions of privative adjectives (Chatzikyriakidis
and Luo, 2013).

• Universes. These are types of types, basi-
cally collections of types. Typical examples
of universes in MTT-semantics include, among
others, the universe Prop of logical proposi-
tions as found in impredicative type theories
and the universe CN of (the interpretations of)
common nouns (Luo, 2012b). Further uses of
universes can be seen in (Chatzikyriakidis and
Luo, 2012) where the universe LType of all
linguistic types is used in order to deal with co-
ordination.

• Dot-types (A • B). These are special types in-
troduced to study co-predication (Luo, 2012b).
It is worth mentioning that coercive subtyping
is essentially employed in the formulation of
dot-types.5

2.3 MTT-semantics is Both Proof-theoretic and
Model-theoretic

It has been noted recently (Luo, 2014) that one of
the advantages of MTT-semantics as compared to
traditional Montagovian approaches is that MTT-
semantics can be seen as being both model-theoretic
and proof-theoretic. NL semantics can first be repre-
sented in an MTT in a model-theoretic way and then

5See (Bassac et al., 2010) for another proposal of using co-
ercions to deal with co-predication.

41



these semantic representations can be understood in-
ferentially in a proof-theoretic way (Luo, 2014).

In particular, since MTTs are proof-theoretically
specified, it is not surprising that many proof as-
sistants implement MTTs. Perhaps, the most ad-
vanced of these proof-assistants is the Coq proof-
assistant (The Coq team, 2007). Coq is a state-of-
the-art proof assistant that has produced a number
of impressive results. Some of these include a com-
plete mechanized proof of the four colour theorem
(Gonthier, 2005), the odd order theorem (Gonthier et
al., 2013) as well as CompCert, a formally verified
compiler for C (Leroy, 2013). Because Coq has a
powerful reasoning ability and that it implements an
MTT, a new avenue of research is opened up – to use
Coq as an NL reasoner. This has been attempted in
(Chatzikyriakidis and Luo, 2014a; Chatzikyriakidis
and Luo, 2014b) with a number of promising results
as regards NL inference. In this paper, we also ex-
emplify the way proof-assistants can be used to help
in checking the inferences that semantic accounts
give rise to.

3 CNs as Types and Individuation Criteria

As already discussed in our introduction to MTTs,
CNs are interpreted as types in MTTs. This pro-
posal has also some nice consequences concerning
what Geach (1962) has called the criterion of iden-
tity, which is pretty much the individuation criterion
that we have been referring to in this paper. Intu-
itively, a CN determines a concept that beside hav-
ing a criterion of application to be employed to de-
termine whether the concept applies to an object,
it further involves a criterion of identity, to be em-
ployed to determine whether two objects of the con-
cept are the same. It has been argued that CNs are
distinctive in this as other lexical terms like verbs
and adjectives do not have such criteria of identity
(cf. the arguments in (Baker, 2003)). There seems
to be a close link between the constructive notion
of a set (Type) and criteria of identity/individuation.
This is because, in constructive mathematics, a set
is a ‘preset’, which involves its application crite-
rion, together with an equality, which further gives
its criterion of identity determining whether two ob-
jects of the set are the same (Bishop, 1967; Beeson,
1985). Modern type theories such as Martin-Löf’s

type theory (Martin-Löf, 1975; Martin-Löf, 1984)
were originally developed for the formalisation of
constructive mathematics, where each type is asso-
ciated with such an equality or criterion of identity.
The identification of CNs as types thus provides CNs
their criteria of application and identity. We cannot
go into the details of how this is to be achieved for-
mally. but the interested reader is directed to (Luo,
2012a) for a detailed exposition of the CNs as Types
idea.

In order to proceed, firstly we have to discuss
the existing account of dot-types as this was given
by (Luo, 2010; Luo, 2012b; Xue and Luo, 2012).
Specifically, we have to see whether this account
predicts the counting criteria correctly in examples
like (4) repeated below:

(11) John picked up and mastered three books

As we have said, the only possible interpretation of
(11) we receive is one where three distinct physical
as well as informational objects are involved. The
sentences cannot be interpreted as involving three
distinct informational objects but one physical ob-
ject or vice versa as involving three distinct physical
objects but one informational object. The question is
whether this account captures that. First of all, let us
say something about coordination, since this would
be needed in discussing the examples in a composi-
tional manner. The approach we suggest for coor-
dination, based on earlier work in (Chatzikyriakidis
and Luo, 2012) involves a type universe of linguistic
types, LType:6

(12) ΠA : LType. A → A → A

As regards typing the above is a natural way to en-
code coordination. However, we need a way to fur-
ther encode the semantics of coordination in each
case. For this paper, we show this for VP coordi-
nation only. In order to define VP coordination, we
first define an auxiliary object AND:

(13) AND : ΠA:LType. Πx, y:A. Σa:A. ∀p:A →
Prop. p(a) ⊃ p(x) ∧ p(y).

The auxiliary entities read as follows: for any type
A in LType and forall x, y:A, AND(A, (x, y)) is a

6See (Chatzikyriakidis and Luo, 2012) for more details on
the universe LType, its motivation as well as (some of) its in-
troduction rules.

42



pair (a, f) such that forall p:A → Prop, f(p) is a
proof that p(a) implies both p(x) and p(y). Then,
and is defined as the first projection π1 of the auxil-
iary object:

(14) and = λA:LType.λx, y, z:A.π1(AND(A, x, y))

With these in mind, let us now look at the ex-
isting proposal as regards dot-types and its proper
formalization as this was provided in (Luo, 2010).
The whole idea of forming a dot-type is informally
based on the fact that to form a dot-type A • B, its
constituent types A and B should not share com-
mon parts/components. For example, the following
two cases cannot be dot-types since they both share
components:

(15) PHY • PHY
(16) PHY • (PHY • INFO)

Definition 3.1 (components) Let T : Type be a
type in the empty context. Then, C(T ), the set of
components of T , is defined as:

C(T ) =df
{

SUP(T ) if the NF of T is not X • Y
C(T1) ∪ C(T2) if the NF of T is T1 • T2

where SUP(T ) = {T ′ | T ≤ T ′}.
The rules for the dot-types are given in Figure 1,

as given in (Luo, 2012b). The notion of dot-type
captures copredication in a nice way: it is both for-
mal and suitable for MTT-semantics. The question
is whether this account gives us correct individua-
tion criteria. In order to test this, we check it against
the Coq proof-assistant (The Coq team, 2007), based
on the formal development as considered in (Luo,
2011). In effect, we define in Coq the dot-type
PHY • INFO and define Book to be the Σ-type that
encodes Pustejovksy’s qualia structure; as a conse-
quence, Book is a subtype of PHY • INFO. We fur-
ther define mastered and picked up to be of type
INFO → Prop and PHY → Prop, respectively, and
further provide a tactic to enhance automation, the
details of which are out of the scope of this paper.
Lastly, the quantifier three is defined.7

7Three is defined as follows: forall A of type CN and given
a predicate P :A → Prop, there exist three elements, x,y and
z, that are different, which are true of P .

Load LibTactics.
Definition CN:=Set.
Parameter Man Human:CN.
Parameter John:Man.
Axiom mh:Man->Human.
Coercion mh:Man>->Human.
(* Phy dot Info *)
Parameter Phy Info : CN.
Record PhyInfo:CN:=mkPhyInfo{phy:>
Phy;info:>Info}.
(*Book as Sigma-type with PhyInfo &
BookQualia*)
Parameter Hold:Phy->Info->Prop.
Parameter R:PhyInfo->Prop.
Parameter W:Human->PhyInfo->Prop.
Record BookQualia (A:PhyInfo):Set:=
mkBookQualia {Formal:Hold A A;

Telic:R A;
Agent:exists
h:Human, W h A }.

Record Book:Set:=mkBook{Arg:>
PhyInfo;Qualia:BookQualia Arg}.
Ltac AUTO:=cbv delta;intuition;try
repeat congruence;jauto;intuition.
Parameter mastered:Human->Info->Prop.
Parameter picked_up:Human->Phy->Prop.
Unset Implicit Arguments.
Parameter AND: forall A:Type, forall
x y:A, sigT(fun a:A=>forall p:A->
Prop,p(a)->p(x) /\p(y)).
Definition and:= fun A:Type, fun x
y:A=>projT1(AND A x y).
Definition Three:=fun(A:CN)(P:A->
Prop)=>exists x:A,P x/\(exists y:A,
P y/\(exists z:A,P z/\x<>y/\y<>z/\
x<>z)).

With these in line, let us see whether the correct
predictions are being made with respect to individ-
uation criteria. What we need to capture is the fol-
lowing entailment:

(17) John picked up and mastered three books ⇒
John picked up three books and John mastered
three books

Basically, what we need to be able to get is a sit-
uation where three distinct informational as well as

43



Formation Rule

Γ valid 〈〉 ` A : Type 〈〉 ` B : Type C(A) ∩ C(B) = ∅
Γ ` A •B : Type

Introduction Rule

Γ ` a : A Γ ` b : B Γ ` A •B : Type
Γ ` 〈a, b〉 : A •B

Elimination Rules
Γ ` c : A •B
Γ ` p1(c) : A

Γ ` c : A •B
Γ ` p2(c) : B

Computation Rules

Γ ` a : A Γ ` b : B Γ ` A •B : Type
Γ ` p1(〈a, b〉) = a : A

Γ ` a : A Γ ` b : B Γ ` A •B : Type
Γ ` p2(〈a, b〉) = b : B

Projections as Coercions

Γ ` A •B : Type
Γ ` A •B <p1 A : Type

Γ ` A •B : Type
Γ ` A •B <p2 B : Type

Coercion Propagation

Γ ` A •B : Type Γ ` A′ •B′ : Type Γ ` A <c1 A′ : Type Γ ` B = B′ : Type
Γ ` A •B <d1[c1] A′ •B′ : Type

where d1[c1](x) = 〈c1(p1(x)), p2(x)〉.

Γ ` A •B : Type Γ ` A′ •B′ : Type Γ ` A = A′ : Type Γ ` B <c2 B′ : Type
Γ ` A •B <d2[c2] A′ •B′ : Type

where d2[c2](x) = 〈p1(x), c2(p2(x))〉.

Γ ` A •B : Type Γ ` A′ •B′ : Type Γ ` A <c1 A′ : Type Γ ` B <c2 B′ : Type
Γ ` A •B <d[c1,c2] A′ •B′ : Type

where d[c1, c2](x) = 〈c1(p1(x)), c2(p2(x))〉.

Figure 1: The rules for dot-types.

44



physical objects are involved. We formulate this as
a theorem to be proven in Coq:

Theorem DT:(Three Book)(and(PhyInfo
->Prop)(picked_up John)(mastered
John))->(Three Book)(picked_up
John)/\(Three Book)(mastered John).

This can be proven in Coq.8 Indeed, what we
need with respect to examples like (22), as Gotham
(2012) mentions, is an interpretation were the two
objects are double distinct, both informationally and
physically. Gotham (2012) shows this in discussing
the account as proposed by (Asher, 2011), which
provides weaker semantics for this example. In
effect, Asher’s (2011) account predicts situations
where three informational and one physical object
are involved (or vice versa) to be possible. The idea
developed is roughly as follows: In every situation
like (22) the hearer has to option to choose between
the physical and the informational individuation cri-
terion. If the former is chosen, then a situation where
three physical objects but one informational object
are involved is possible. If the hearer chooses the
latter criterion, then a situation where three distinct
informational objects but only one physical object
is involved is possible. If this is true, one can in-
deed use (22) to refer to let us say one informa-
tional and three physical objects (or vice versa), then
the double-distinct judgments should be the result
of some pragmatic strengthening and thus should be
cancelable. This is however not the case as the ex-
amples below show (taken from Gotham, 2012):

(18) John picked up and mastered three books, but
he didn’t pick up three books.

(19) John picked up and mastered three books; in
fact, he picked up exactly one book.

(20) John picked up and mastered three books, but
he didn’t master three books.

(21) John picked up and mastered three books; in
fact, he mastered exactly one book.

Most interestingly, what we can further prove is
the entailment that from John picked up and mas-
tered three books, it follows that John picked up

8Those that wish to prove this on their own, the tactics
to prove both of the examples are: compute, intro, destruct
AND, case a with (ThreeBook),AUTO,AUTO.

three physical objects and mastered three informa-
tional objects. In Coq notation:

Theorem DT:(Three Book)(and(PhyInfo
->Prop)(picked_up John)(mastered
John))->(Three Phy)( picked_up John)
/\(Three Info)(mastered John).

This can be proven as well.9

It seems in this respect, that the account gives
the correct predictions as regards individuation cri-
teria and counting. This can be seen as an advan-
tage compared to approaches like Asher’s (2011),
which gives the correct results after some additional
assumptions on accommodation are made (which
really complicate the account), while they further
make it too permissive as to allow the following (see
(Gotham, 2014)):

(22) # Fred picked up and mastered a stone.

On the other hand, the claim made by (Gotham,
2014) that the dot-type account as this is given by
(Luo, 2010) cannot capture the facts, is shown to
be incorrect on the basis of what we have pre-
sented here. Gotham’s account predicts the cor-
rect results as well, but we believe at the expense
of additional complications (e.g. the introduction of
R − compressible pluralities), that the present ac-
count does not introduce.

Thus, the account proposed for dot-types is not
only formally sound but also gives the correct re-
sults with respect to counting and individuation cri-
teria without the need of additional machinery. We
take this to be a clear advantage over the other ac-
counts. On a more general level, it seems that using
the rich typing structures that MTTs have to offer,
provides us with considerable advantages over prob-
lematic issues in lexical semantics.

4 The Case of newspaper: a Proposal for
Linear Dot-types

Cases like book or lunch, being subtypes of dot-
types, seem to have clear properties that are captured

9In order to prove this, one has to add an additional axiom
in Coq that deals with equalities under subtyping. In general,
when X <c Y , we do not have x 6=X y =⇒ (x 6=Y y)
unless c is injective. For the atomic types like Book and PHY,
the equality on a subtype coincides with that of the supertype
and so we can axiomatically assume this. See Appendix A for
the Coq code and some explanation.

45



with the existing formalization given for dot-types.
There is however a more problematic case, famously
exemplified by the word newspaper, which seem to
require a different, more restrictive treatment. First
of all, newspaper is associated with three rather than
two senses, i.e. institution (23), informational object
(24) and physical object (25) as the examples below
illustrate:10

(23) The newspaper was sued on moral grounds.

(24) He read the newspaper.

(25) He picked up the newspaper.

Now, when it comes to the use of two different
senses in the context of the same sentence, a num-
ber of strange restrictions appear. The physical ob-
ject sense can be used along with the informational
sense, in the same way as in the case of book, but the
organizational sense (newspaper as an institution)
cannot be used copredicatively with any of the other
two senses (examples from (Antunes and Chaves,
2003)):11

(26) # That newspaper is owned by a trust and is
covered with coffee.

(27) # The newspaper fired the reporter and fell off
the table.

10An anonymous reviewer asks whether there are other anal-
ogous cases with three-way polysemy. Words similar to news-
paper also exist, e.g. magazine, journal. Other cases with more
than two meaning are mentioned in (Retoré, 2014) but it is
not clear whether they constitute examples of a similar phe-
nomenon. For example, the case of Liverpool, mentioned in
(Retoré, 2014) as having the senses Place, Town and People. It
is not however clear whether the justification for these types is
well-founded. For example the sense Town and People could
be very well reduced into one sense. Unfortunately, this needs
discussion that we cannot perform in this paper. However, this
is an extremely important question and the range of examples
that are similar to newspaper should be investigated in order to
end up with a fuller classification of dot-types according to their
properties.

11As an anonymous reviewer notes, all these examples in-
volve a conjunction of the organizational and the physical as-
pect. He further asks what happens in case we have a conjunc-
tion of the informational and the organizational aspect. These
cases are also infelicitous, e.g. # He mastered and sued the
newspaper or # That newspaper is owned by a trust and is very
badly written, so the pattern described in the paper is not vio-
lated.

(28) # John sued and ripped the newspaper.

Similar words with multiple senses that further in-
volve similar restrictions are also discussed in (Re-
toré, 2014). There, a multi-sorted higher order logic
is used12 and every word is associated with a kind
of basic type along with a number of coercions that
can coerce this basic type into additional types. So in
the case of book one gets the principal lambda-term
λx.const(x):v → t where v stands for event and
two optional lambda-terms, Id:v → v and fa:v → a
where a stands for type artifact, a subtype of physi-
cal objects. The optional terms are declared as rigid,
meaning that if one of the coercions is used, the
other one cannot and vice versa. For the case of
dot-types like book the optional lambda terms are
dubbed as flexible, meaning that the coercions can
be used simultaneously. This is indeed an interest-
ing account. However, the exact nature of the rigid
and flexible coercions are not defined formally, and
it is rather unclear how such a specification can be
made. Furthermore, for cases like newspaper, such
an approach will not work. This is because, in the
case of the coercion from fa:a → i (artifact to in-
formational object), this has to be defined as both
rigid and flexible at the same time. Flexible, because
we want this to be possible with the physical sense,
while rigid because we want this not to be possi-
ble with the organizational sense. Furthermore, the
account is based on the idea that there is always a
principal lambda term. For example, in the case of
Book the physical sense is chosen. How is this sense
chosen is something that it is not explained. The
question of why the physical rather than the infor-
mational aspect is chosen as the principal sense is
something that is left unanswered.

The data with respect to newspaper get further
complicated. As we have seen, the organizational
aspect cannot be used with any of the other two
aspects. However, this is not without exceptions.
There are cases this restriction seems to disappear,
allowing the organizational aspect to appear with
any of the two other senses:

12The meta-language for the system in (Retoré, 2014) is Gi-
rard’s system F rather than the simply typed λ-calculus as in
Church’s simple type theory (Church, 1940) as used by Mon-
tague.

46



(29) The newspaper you are reading is being sued
by Mia.

However, if one looks at the examples that allow
this kind of constructions, it seems that they are of
a specific kind. Most specifically all these cases
involve some kind of modification, e.g. a relative
clause as in the above example, or adjectival modifi-
cation as in (30):

(30) The most provocative newspaper of the year
has been sued by the government.

(31) The newspaper he just grabbed from the news-
stand is doing well in the stock market.

The pattern seems to be the following: the or-
ganizational aspect cannot be used with any of the
other two aspects, unless one aspect is taking part
in a modified CN construction. In case this happens
the organizational aspect can be used along the other
aspects. The account as proposed in (Pustejovsky,
1995) for newspaper cannot deal with these phe-
nomenon and as far as we know, no formal account
has been proposed for these cases. This is what we
want to discuss here. The original account of dot-
types in (Luo, 2010) among others will face similar
problems. The dot-type INST • (PHY • INFO) will
suffer the problem of predicting examples (23)-(25)
to be ok contrary to fact. In what follows, we dis-
cuss a solution to this extent by proposing to treat
these cases by extending the dot-type system to fur-
ther include resource sensitive dot-types, i.e. linear
dot-types.

Linear Dot-types: a Tentative Proposal. It is
clear from what we see from the data that we are
dealing with a situation where the dot-type is re-
source sensitive, in the sense of linear logic (Girard,
1987) or Lambek calculus (Lambek, 1958). For ex-
ample, in linear logic, the rules of weakening and
contraction are not available and this has a num-
ber of consequences. One of them is that one is
has to use an assumption exactly once. An assump-
tion, once used, is not re-usable anymore. It seems
that this idea, is quite close to what we need for the

newspaper case.13 We need an additional version of
the dot-type, more specifically a linear version of the
dot-type. This version will be closed related to the
tenser product in linear logic and the usual dot-type,
one of the important feature being that if one of its
components has been used, the other one cannot be
used any more.

Let us represent this linear dot-type as A	B. We
can further have combinations of regular and linear
dot-types. In the case of newspaper what we need
is the type INST 	 (PHY • INFO). With this type,
we can take care of examples like (23) to (25) (these
are also taken care of with a regular dot-type), while
at the same time excluding examples (26-28) (that
would be predicted to be ok with a regular dot-type).

Note that the examples like (29) can be accounted
for without employing the linear version of dot-
types. For instance, the semantics of (29) can be
given as sue(n) where n : Σ(Newpaper, read)
and sue : Inst → Prop, because we have
Σ(Newpaper, read) < Newspaper < INST •
(PHY • INFO) < INST. The question of course is
when do we use a linear dot-type and when a regular
dot-type. In order to solve this problem, one can use
local coercions, i.e. subtyping assumptions local-
ized in terms (or judgments), as proposed in (Luo,
2010; Luo, 2012b). Local coercions have been used
in (Luo, 2011) to deal with cases of homophony and
in (Asher and Luo, 2012) to give semantics of lin-
guistic coercions in sophisticated situations. Local
coercions are only effective locally for some terms
(expressions in type theory). They may be intro-
duced into terms by the following rule (intuitively,
the coercions declared locally are only effective in
the expressions in the scope of the keyword in):

Γ, A <c B ` J
Γ ` coercion A <c B in J

where J is any of the following four forms of judge-
ment:

k : K, k = k′ : K, K kind, and K = K ′.

For instance, with J ≡ k : K , we have
Γ, A <c B ` k : K

Γ ` coercion A <c B in k : K
13This is based on the fact that in case the organizational as-

pect is used, no other aspect can be used any more within the
same context. This is a kind of resource sensitivity.

47



In the case of newspaper, what we
need is to consider two local coercions:
Newspaper < INST • (PHY • INFO) in inter-
preting the cases where the ordinary dot-type should
be used and Newspaper < INST 	 (PHY • INFO)
in interpreting the cases where the linear dot-type
should be used. For example, the following (32)
will give a correct interpretation of (29):

(32) coercion Newspaper < INST • (PHY •
INFO) in [[(29)]]

while the following would not be accepted:

(33) # coercion Newspaper < INST 	 (PHY •
INFO) in [[(26)]]

We believe that this gives a satisfactory account
of a problem that as far as we know has not received
a treatment up to now.14

However, it has to be kept in mind that we have
not formally treated the linear dot-type A	B. One
of the reasons for this is that, in order to do this, we
need to formally study how to incorporate coercive
subtyping into a resource sensitive logical system.
Put in another way, one needs to study an MTT aug-
mented with resource sensitive contextual segments
and its coercive subtyping extension. We leave this
as future work.

5 Conclusion

We have discussed dot-types with respect to their
counting criteria and have shown that the MTT ac-
count proposed captures the fact correctly. The
proof-assistant Coq was used in order to verify that
the correct inferences are predicted. The account
was shown not only to produce the correct results
but to do so without resorting to serious extra com-
plications of the original account (actually none is

14Another solution that has been proposed to us by an anony-
mous reviewer, is the following: One basically assumes that
the organizational aspect is just a different lexical entry, in
effect as we understand it (even though the reviewer has not
phrased it in this way) a case of homonymy. We have thought
of this possibility. In case this idea is put forth within the
framework discussed in this paper, one will use the account
by (Luo, 2011) for cases of homonymy like bank where local
coercions are used to either use Bank < Institution or the
Bank < Riverside sense. In the case of newspaper, we would
use either Newspaper < INST or Newspaper < PHY • INFO.

needed). Furthermore, the case of newspaper was
discussed and a solution based on the introduction of
linear dot-types combined with local coercions was
provided. The issue of introducing linear dot-types
in a formal way presupposes a linear version of type
theory that at the moment we do not have. Thus, we
leave this issue as a subject of future research. A
related piece of work is that the second author has
recently developed Lambek dependent types (Luo,
2015), with the motivation of studying a uniform ba-
sis for NL analysis: from automated syntactic anal-
ysis to logical reasoning in proof assistants based on
MTT-semantics.

References

S. Antunes and R.P Chaves. On the licensing conditions
of co-predication. In Proc of the 2th Inter. Workshop
on Generative Approaches to the Lexicon (GL 2007),
2003.

N. Asher. A type driven theory of predication with com-
plex types. Fundamenta Informaticae 84 (2), 151-183,
2012.

N. Asher. Lexical Meaning in Context: a Web of Words.
Cambridge University Press, 2012.

N. Asher and Z. Luo. Formalisation of coercions in lexi-
cal semantics. Sinn und Bedeutung 17, Paris, 2012.

Mark C Baker. Lexical categories: Verbs, nouns and
adjectives, volume 102. Cambridge University Press,
2003.

C. Bassac, B. Mery, and C. Retoré. Towards a type-
theoretical account of lexical semantics. Journal of
Logic, Language and Information, 19(2), 2010.

M.J. Beeson. Foundations of Constructive Mathematics.
Springer-Verlag, 1985.

E. Bishop. Foundations of Constructive Analysis.
McGraw-Hill, 1967.

S. Chatzikyriakidis. Adverbs in a modern type theory.
In N. Asher and S. Soloviev, editors, Proceedings of
LACL2014. LNCS 8535, pages 44–56, 2014.

S. Chatzikyriakidis and Z. Luo. An account of natu-
ral language coordination in type theory with coercive
subtyping. In Y. Parmentier and D. Duchier, editors,
Proc. of Constraint Solving and Language Processing
(CSLP12). LNCS 8114, pages 31–51, Orleans, 2012.

S. Chatzikyriakidis and Z. Luo. Adjectives in a modern
type-theoretical setting. In G. Morrill and J.M Neder-
hof, editors, Proceedings of Formal Grammar 2013.
LNCS 8036, pages 159–174, 2013.

S. Chatzikyriakidis and Z. Luo. Natural language reason-
ing using proof-assistant technology: Rich typing and
beyond. In Proceedings of EACL2014, 2014.

48



S. Chatzikyriakidis and Z. Luo. Natural Language Infer-
ence in Coq. Journal of Logic, Language and Infor-
mation, 23(4):441–480, 2014.

A. Church. A formulation of the simple theory of types.
J. Symbolic Logic, 5(1), 1940.

R. Cooper. Type theory and semantics in flux. In
R. Kempson, T. Fernando and N. Asher, editors, Hand-
book of the Philosophy of Science. Elsevier, 2011.

The Coq Team. The Coq Proof Assistant Reference Man-
ual (Version 8.1), INRIA, 2007.

H.B. Curry and R. Feys. Combinatory Logic, volume 1.
North Holland Publishing Company, 1958.

P.T. Geach. Reference and Generality: An examination
of some Medieval and Modern Theories. Cornell Uni-
versity Press, 1962.

J.-Y. Girard. Linear logic. Theoret. Comput. Sci., 50,
1987.

G. Gonthier. A computer checked proof of the four
colour theorem, 2005.

Georges Gonthier, Andrea Asperti, Jeremy Avigad, Yves
Bertot, Cyril Cohen, François Garillot, Stéphane
Le Roux, Assia Mahboubi, Russell OConnor,
Sidi Ould Biha, et al. A machine-checked proof of the
odd order theorem. In Interactive Theorem Proving,
pages 163–179. Springer, 2013.

Gotham, M.: Numeric quantification in copredication.
UCL Working Papers in Linguistics pp. 1–20 (2012)

M. Gotham. Copredication, quantification and individu-
ationy. PhD thesis, University College London, 2014.

W. A. Howard. The formulae-as-types notion of con-
struction. In J. Hindley and J. Seldin, editors, To H.
B. Curry: Essays on Combinatory Logic. Academic
Press, 1980.

J. Lambek. The mathematics of sentence structure. The
American Mathematical Monthly, 65(3), 1958.

X. Leroy. The compcert c verified com-
piler: Documentation and users manual.
http://compcert.inria.fr/man/manual.pdf, 2013.

Z. Luo. Computation and Reasoning: A Type Theory for
Computer Science. Oxford University Press, 1994.

Z. Luo. Coercive subtyping. Journal of Logic and Com-
putation, 9(1):105–130, 1999.

Z. Luo. Type-theoretical semantics with coercive subtyp-
ing. Semantics and Linguistic Theory 20 (SALT20),
Vancouver, 2010.

Z. Luo. Contextual analysis of word meanings in type-
theoretical semantics. Logical Aspects of Computa-
tional Linguistics (LACL’2011). LNAI 6736, 2011.

Z. Luo. Common nouns as types. In D. Bechet and
A. Dikovsky, editors, Logical Aspects of Computa-
tional Linguistics (LACL’2012). LNCS 7351, 2012.

Z. Luo. Formal semantics in modern type theories
with coercive subtyping. Linguistics and Philosophy,
35(6):491–513, 2012.

Z. Luo. Formal Semantics in Modern Type Theories: Is
It Model-theoretic, Proof-theoretic, or Both? Invited
talk at Logical Aspects of Computational Linguistics
2014 (LACL 2014), Toulouse. LNCS 8535, pages 177–
188, 2014.

Z. Luo. A Lambek calculus with dependent types. Types
for Proofs and Programs (TYPES 2015), Tallinn, 2015.

Z. Luo, S. Soloviev, and T. Xue. Coercive subtyping:
theory and implementation. Information and Compu-
tation, 223:18–42, 2012.

P. Martin-Löf. An intuitionistic theory of types: pred-
icative part. In H.Rose and J.C.Shepherdson, editors,
Logic Colloquium’73, 1975.

P. Martin-Löf. Intuitionistic Type Theory. Bibliopolis,
1984.

R. Montague. Formal Philosophy. Yale University Press,
1974. Collected papers edited by R. Thomason.

B. Nordström, K. Petersson, and J. Smith. Programming
in Martin-Löf’s Type Theory: An Introduction. Oxford
University Press, 1990.

J. Pustejovsky. The Generative Lexicon. MIT, 1995.
A. Ranta. Type-Theoretical Grammar. Oxford Univer-

sity Press, 1994.
C. Retore. The montagovian generative lexicon Tyn: a

type theoretical framework for natural language se-
mantics. In R. Matthes and A. Schubert, editors, Proc
of TYPES2013, 2013.

G. Sundholm. Proof theory and meaning. In D. Gabbay
and F. Guenthner, editors, Handbook of Philosophical
Logic III: Alternatives to Classical Logic, pages 471–
506. Reidel, 1986.

G. Sundholm. Constructive generalized quantifiers. Syn-
these, 79(1):1–12, 1989.

T. Xue and Z. Luo. Dot-types and their implementation.
Logical Aspects of Computational Linguistics (LACL
2012). LNCS 7351, 2012.

A Some notes on a Coq proof

In order to prove:

Theorem DT:(Three Book)(and(PhyInfo
->Prop)(picked_up John)(mastered
John))->(Three Phy)( picked_up John)
/\(Three Info)(mastered John)

We first need to introduce the axiom in order to
deal with the subtyping equality problem. We intro-
duce this in a new local context:

Section Book.
Variable PHY:forall x:Book, forall
y:Book, not(x=y:>Book)-> not(x=y:>Phy).
Variable INFO:forall x:Book, forall
y:Book, not(x=y:>Book)-> not(x=y:>Info).

49



We show the proof of:

Theorem DT:(Three Book)(and(PhyInfo
->Prop)(picked_up John)(mastered
John))->(Three Phy)( picked_up John)

We use the following:

compute.intro.destruct AND1.case a with
(Three Book). AUTO. AUTO.destruct H0.
destruct H0.destruct H2.destruct H2.
destruct H3.destruct H3.destruct H4.
destruct H5.exists x0.AUTO.exists x1.
AUTO.

The interested reader can check for him-
self/herself for the other cases.

50


