



















































Hierarchical MT Training using Max-Violation Perceptron


Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 785–790,
Baltimore, Maryland, USA, June 23-25 2014. c©2014 Association for Computational Linguistics

Hierarchical MT Training using Max-Violation Perceptron

Kai Zhao† Liang Huang†

†Graduate Center & Queens College
City University of New York

{kzhao@gc,huang@cs.qc}.cuny.edu

Haitao Mi‡ Abe Ittycheriah‡

‡T. J. Watson Research Center
IBM

{hmi,abei}@us.ibm.com

Abstract

Large-scale discriminative training has be-
come promising for statistical machine
translation by leveraging the huge train-
ing corpus; for example the recent effort
in phrase-based MT (Yu et al., 2013) sig-
nificantly outperforms mainstream meth-
ods that only train on small tuning sets.
However, phrase-based MT suffers from
limited reorderings, and thus its training
can only utilize a small portion of the bi-
text due to the distortion limit. To address
this problem, we extend Yu et al. (2013)
to syntax-based MT by generalizing their
latent variable “violation-fixing” percep-
tron from graphs to hypergraphs. Exper-
iments confirm that our method leads to
up to +1.2 BLEU improvement over main-
stream methods such as MERT and PRO.

1 Introduction

Many natural language processing problems in-
cluding part-of-speech tagging (Collins, 2002),
parsing (McDonald et al., 2005), and event extrac-
tion (Li et al., 2013) have enjoyed great success us-
ing large-scale discriminative training algorithms.
However, a similar success on machine translation
has been elusive, where the mainstream methods
still tune on small datasets.

What makes large-scale MT training so hard
then? After numerous attempts by various re-
searchers (Liang et al., 2006; Watanabe et al.,
2007; Arun and Koehn, 2007; Blunsom et al.,
2008; Chiang et al., 2008; Flanigan et al., 2013;
Green et al., 2013), the recent work of Yu et al.
(2013) finally reveals a major reason: it is the vast
amount of (inevitable) search errors in MT decod-
ing that astray learning. To alleviate this prob-
lem, their work adopts the theoretically-motivated
framework of violation-fixing perceptron (Huang
et al., 2012) tailed for inexact search, yielding
great results on phrase-based MT (outperforming

Collins (02) inexact−→
search

Huang et al. (12) latent−→
variable

Yu et al. (13)

↓ hypergraph ↓
Zhang et al. (13) −→

variable
this work

Figure 1: Relationship with previous work.

small-scale MERT/PRO by a large margin for the
first time). However, the underlying phrase-based
model suffers from limited distortion and thus can
only employ a small portion (about 1/3 in their Ch-
En experiments) of the bitext in training.

To better utilize the large training set, we
propose to generalize from phrase-based MT to
syntax-based MT, in particular the hierarchical
phrase-based translation model (HIERO) (Chiang,
2005), in order to exploit sentence pairs beyond
the expressive capacity of phrase-based MT.

The key challenge here is to extend the latent
variable violation-fixing perceptron of Yu et al.
(2013) to handle tree-structured derivations and
translation hypergraphs. Luckily, Zhang et al.
(2013) have recently generalized the underlying
violation-fixing perceptron of Huang et al. (2012)
from graphs to hypergraphs for bottom-up parsing,
which resembles syntax-based decoding. We just
need to further extend it to handle latent variables.
We make the following contributions:

1. We generalize the latent variable violation-
fixing perceptron framework to inexact
search over hypergraphs, which subsumes
previous algorithms for PBMT and bottom-
up parsing as special cases (see Fig. 1).

2. We show that syntax-based MT, with its bet-
ter handling of long-distance reordering, can
exploit a larger portion of the training set,
which facilitates sparse lexicalized features.

3. Experiments show that our training algo-
rithm outperforms mainstream tuning meth-
ods (which optimize on small devsets) by
+1.2 BLEU over MERT and PRO on FBIS.

785



id rule

r0 S→ 〈X 1 ,X 1 〉
r1 S→ 〈S 1 X 2 ,S 1 X 2 〉
r2 X→ 〈Bùshı́,Bush〉
r3 X→ 〈Shālóng,Sharon〉
r4 X→ 〈huı̀tán, talks〉

r5
X→ 〈yǔ X 1 jǔxı́ng X 2 ,

held X 2 with X 1 〉
r6 X→ 〈yǔ Shālóng, with Sharon〉

r7
X→ 〈X 1 jǔxı́ng X 2 ,

X 1 held X 2 〉

S[0:5]

X[1:5]

X[4:5]

huı̀tán 5jǔxı́ng 4

X[2:3]

Shālóng 3

|

yǔ 2

S[0:1]

X[0:1]

0 Bùshı́ 1

S

X

X

Sharon 5with 4

X

talks 3held 2

S

X

0 Bush 1

S[0:5]

X[1:5]

X[4:5]

huı̀tán 5jǔxı́ng 4

X[1:3]

Shālóng 3yǔ 2

S[0:1]

X[0:1]

0 Bùshı́ 1

S

X

X

talks 5held 4

X

Sharon 3with 2

S

X

0 Bush 1

(a) HIERO rules (b) gold derivation (c) Viterbi derivation

Figure 2: An example of HIERO translation.

X[0:1] X[2:3] X[4:5]

X[1:5]

X[1:3]

S[0:1]

S[0:5]

Figure 3: A −LM hypergraph with two deriva-
tions: the gold derivation (Fig. 2b) in solid lines,
and the Viterbi derivation (Fig. 2c) in dashed lines.

2 Review: Syntax-based MT Decoding

For clarity reasons we will describe HIERO decod-
ing as a two-pass process, first without a language
model, and then integrating the LM. This section
mostly follows Huang and Chiang (2007).

In the first, −LM phase, the decoder parses the
source sentence using the source projection of the
synchronous grammar (see Fig. 2 (a) for an ex-
ample), producing a−LM hypergraph where each
node has a signature N[i:j], where N is the nonter-
minal type (either X or S in HIERO) and [i : j] is
the span, and each hyperedge e is an application
of the translation rule r(e) (see Figure 3).

To incorporate the language model, each node
also needs to remember its target side boundary
words. Thus a −LM node N[i:j] is split into mul-
tiple +LM nodes of signature Na?b[i:j], where a and
b are the boundary words. For example, with a bi-
gram LM, Xheld?Sharon[1:5] is a node whose translation
starts with “held” and ends with “Sharon”.

More formally, the whole decoding process can
be cast as a deductive system. Take the partial
translation of “held talks with Sharon” in Figure 2

(b) for example, the deduction is

XSharon?Sharon[2:3] : s1 X
talks?talks
[4:5] : s2

Xheld?Sharon[1:5] : s1 + s2 + s(r5) + λ
r5,

where s(r5) is the score of rule r5, and the LM
combo score λ is log Plm(talks | held)Plm(with |
talks)Plm(Sharon | with).
3 Violation-Fixing Perceptron for HIERO

As mentioned in Section 1, the key to the success
of Yu et al. (2013) is the adoption of violation-
fixing perceptron of Huang et al. (2012) which
is tailored for vastly inexact search. The general
idea is to update somewhere in the middle of the
search (where search error happens) rather than at
the very end (standard update is often invalid). To
adapt it to MT where many derivations can output
the same translation (i.e., spurious ambiguity), Yu
et al. (2013) extends it to handle latent variables
which correspond to phrase-based derivations. On
the other hand, Zhang et al. (2013) has generalized
Huang et al. (2012) from graphs to hypergraphs
for bottom-up parsing, which resembles HIERO
decoding. So we just need to combine the two
generalizing directions (latent variable and hyper-
graph, see Fig. 1).

3.1 Latent Variable Hypergraph Search
The key difference between bottom-up parsing
and MT decoding is that in parsing the gold tree
for each input sentence is unique, while in MT
many derivations can generate the same reference
translation. In other words, the gold derivation to
update towards is a latent variable.

786



Here we formally define the latent variable
“max-violation” perceptron over a hypergraph for
MT training. For a given sentence pair 〈x, y〉, we
denote H(x) as the decoding hypergraph of HI-
ERO without any pruning. We say D ∈ H(x) if
D is a full derivation of decoding x, and D can be
derived from the hypergraph. Let good(x, y) be
the set of y-good derivations for 〈x, y〉:

good(x, y) ∆= {D ∈ H(x) | e(D) = y},
where e(D) is the translation from derivation D.
We then define the set of y-good partial derivations
that cover x[i:j] with root N[i:j] as

goodN[i:j](x, y)
∆= {d ∈ D | D ∈ good(x, y),

root(d) = N[i:j]}
We further denote the real decoding hypergraph

with beam-pruning and cube-pruning as H ′(x).
The set of y-bad derivations is defined as

badN[i:j](x, y)
∆= {d ∈ D | D ∈ H ′(x, y),

root(d) = N[i:j], d 6∈ goodN[i:j](x, y)}.
Note that the y-good derivations are defined over
the unpruned whole decoding hypergraph, while
the y-bad derivations are defined over the real de-
coding hypergraph with pruning.

The max-violation method performs the update
where the model score difference between the
incorrect Viterbi partial derivation and the best
y-good partial derivation is maximal, by penaliz-
ing the incorrect Viterbi partial derivation and re-
warding the y-good partial derivation.

More formally, we first find the Viterbi partial
derivation d− and the best y-good partial deriva-
tion d+ for each N[i:j] group in the pruned +LM
hypergraph:

d+N[i:j](x, y)
∆= argmax

d∈goodN[i:j] (x,y)
w ·Φ(x, d),

d−N[i:j](x, y)
∆= argmax

d∈badN[i:j] (x,y)
w ·Φ(x, d),

where Φ(x, d) is the feature vector for derivation
d. Then it finds the group N∗[i∗:j∗] with the max-
imal score difference between the Viterbi deriva-
tion and the best y-good derivation:

N∗[i∗:j∗]
∆= argmax

N[i:j]

w ·∆Φ(x, d+N[i:j](x, y), d
−
N[i:j]

(x, y)),

and update as follows:

w← w + ∆Φ(x, d+N∗
[i∗:j∗]

(x, y), d−N∗
[i∗:j∗]

(x, y)),

where ∆Φ(x, d, d′) ∆= Φ(x, d)−Φ(x, d′).

3.2 Forced Decoding for HIERO

We now describe how to find the gold derivations.1

Such derivations can be generated in way similar
to Yu et al. (2013) by using a language model tai-
lored for forced decoding:

Pforced (q | p) =
{

1 if q = p+ 1
0 otherwise

,

where p and q are the indices of the boundary
words in the reference translation. The +LM node
now has signature Np?q[i:j], where p and q are the in-
dexes of the boundary words. If a boundary word
does not occur in the reference, its index is set to
∞ so that its language model score will always be
−∞; if a boundary word occurs more than once in
the reference, its −LM node is split into multiple
+LM nodes, one for each such index.2

We have a similar deductive system for forced
decoding. For the previous example, rule r5 in
Figure 2 (a) is rewritten as

X→ 〈yǔ X 1 jǔxı́ng X 2 , 1 X 2 4 X 1 〉,

where 1 and 4 are the indexes for reference words
“held” and “with” respectively. The deduction for
X[1:5] in Figure 2 (b) is

X5?5[2:3] : s1 X
2?3
[4:5] : s2

X1?5[1:5] : s(r5) + λ+ s1 + s2
r5,

where λ = log
∏

i∈{1,3,4} Pforced (i+ 1 | i) = 0.

4 Experiments

Following Yu et al. (2013), we call our max-
violation method MAXFORCE. Our implemen-
tation is mostly in Python on top of the cdec
system (Dyer et al., 2010) via the pycdec in-
terface (Chahuneau et al., 2012). In addition, we
use minibatch parallelization of (Zhao and Huang,

1We only consider single reference in this paper.
2Our formulation of index-based language model fixes a

bug in the word-based LM of Yu et al. (2013) when a sub-
string appears more than once in the reference (e.g. “the
man...the man...”); thanks to Dan Gildea for pointing it out.

787



2013) to speedup perceptron training. We evalu-
ate MAXFORCE for HIERO over two CH-EN cor-
pora, IWSLT09 and FBIS, and compare the per-
formance with vanilla n-best MERT (Och, 2003)
from Moses (Koehn et al., 2007), Hypergraph
MERT (Kumar et al., 2009), and PRO (Hopkins
and May, 2011) from cdec.

4.1 Features Design
We use all the 18 dense features from cdec, in-
cluding language model, direct translation prob-
ability p(e|f), lexical translation probabilities
pl(e|f) and pl(f |e), length penalty, counts for the
source and target sides in the training corpus, and
flags for the glue rules and pass-through rules.

For sparse features we use Word-Edges fea-
tures (Charniak and Johnson, 2005; Huang, 2008)
which are shown to be extremely effective in
both parsing and phrase-based MT (Yu et al.,
2013). We find that even simple Word-Edges
features boost the performance significantly, and
adding complex Word-Edges features from Yu et
al. (2013) brings limited improvement and slows
down the decoding. So in the following experi-
ments we only use Word-Edges features consisting
of combinations of English and Chinese words,
and Chinese characters, and do not use word clus-
ters nor word types. For simplicity and efficiency
reasons, we also exclude all non-local features.

4.2 Datasets and Preprocessing
Our first corpus, IWSLT09, contains ∼30k
short sentences collected from spoken language.
IWSLT04 is used as development set in MAX-
FORCE training, and as tuning set for n-best
MERT, Hypergraph MERT, and PRO. IWSLT05
is used as test set. Both IWSLT04 and IWSLT05
contain 16 references.We mainly use this corpus
to investigate the properties of MAXFORCE.

The second corpus, FBIS, contains ∼240k sen-
tences. NIST06 newswire is used as development
set for MAXFORCE training, and as tuning set
for all other tuning methods. NIST08 newswire
is used as test set. Both NIST06 newswire
and NIST08 newswire contain 4 references. We
mainly use this corpus to demonstrate the perfor-
mance of MAXFORCE in large-scale training.

For both corpora, we do standard tokeniza-
tion, alignment and rule extraction using the cdec
tools. In rule extraction, we remove all 1-count
rules but keep the rules mapping from one Chi-
nese word to one English word to help balancing

sent. words
phrase-based MT 32% 12%

HIERO 35% 30%
HIERO (all rules) 65% 55%

Table 1: Reachability comparison (on FBIS) be-
tween phrase-based MT reported in Yu et al.
(2013) (without 1-count rules) and HIERO (with
and without 1-count rules).

 0

 0.2

 0.4

 0.6

 0.8

 1

 20  40  60  80  100

fo
rc

e
d
 d

e
c
o
d
a
b
le

 r
a
ti
o

sentence length

loose

tight

Figure 4: Reachability vs. sent. length on FBIS.
See text below for “loose” and “tight”.

between overfitting and coverage. We use a tri-
gram language model trained from the target sides
of the two corpora respectively.

4.3 Forced Decoding Reachability

We first report the forced decoding reachability for
HIERO on FBIS in Table 1. With the full rule set,
65% sentences and 55% words of the whole cor-
pus are forced decodable in HIERO. After pruning
1-count rules, our forced decoding covers signif-
icantly more words than phrase-based MT in Yu
et al. (2013). Furthermore, in phrase-based MT,
most decodable sentences are very short, while
in HIERO the lengths of decodable sentences are
more evenly distributed.

However, in the following experiments, due to
efficiency considerations, we use the “tight” rule
extraction in cdec that is more strict than the
standard “loose” rule extraction, which generates
a reduced rule set and, thus, a reduced reachabil-
ity. We show the reachability distributions of both
tight and loose rule extraction in Figure 4.

4.4 Evaluation on IWSLT

For IWSLT, we first compare the performance
from various update methods in Figure 5. The
max-violation method is more than 15 BLEU

788



 30

 35

 40

 45

 2  4  6  8  10  12  14  16  18  20

B
L
E

U
 o

n
 d

e
v

iteration

Max-Violation
local update

skip
standard update

Figure 5: Comparison of various update methods.

 42

 43

 44

 45

 46

 47

 2  4  6  8  10  12  14  16  18  20

B
L
E

U
 o

n
 d

e
v

iteration

sparse features

dense features

Hypergraph MERT

PRO

n-best MERT

Figure 6: Sparse features (Word-Edges) contribute
∼2 BLEU points, outperforming PRO and MERT.

points better than the standard perceptron (also
known as “bold-update” in Liang et al. (2006))
which updates at the root of the derivation tree.3,4

This can be explained by the fact that in train-
ing ∼58% of the standard updates are invalid (i.e.,
they do not fix any violation). We also use the
“skip” strategy of Zhang et al. (2013) which up-
dates at the root of the derivation only when it fixes
a search error, avoiding all invalid updates. This
achieves ∼10 BLEU better than the standard up-
date, but is still more than ∼5 BLEU worse than
Max-Violation update. Finally we also try the
“local-update” method from Liang et al. (2006)
which updates towards the derivation with the best
Bleu+1 in the root group S[0:|x|]. This method is
about 2 BLEU points worse than max-violation.

We further investigate the contribution of sparse
features in Figure 6. On the development set,
max-violation update without Word-Edges fea-
tures achieves BLEU similar to n-best MERT and

3We find that while MAXFORCE generates translations of
length ratio close to 1 during training, the length ratios on
dev/test sets are significantly lower, due to OOVs. So we
run a binary search for the length penalty weight after each
training iteration to tune the length ratio to ∼0.97 on dev set.

4 We report BLEU with averaged reference lengths.

algorithm # feats dev test
n-best MERT 18 44.9 47.9

Hypergraph MERT 18 46.6 50.7
PRO 18 45.0 49.5

local update perc. 443K 45.6 49.1
MAXFORCE 529K 47.4 51.5

Table 2: BLEU scores (with 16 references) of var-
ious training algorithms on IWSLT09.

algorithm # feats dev test
Hypergraph MERT 18 27.3 23.0

PRO 18 26.4 22.7
MAXFORCE 4.5M 27.7 23.9

Table 3: BLEU scores (with 4 references) of vari-
ous training algorithms on FBIS.

PRO, but lower than Hypergraph MERT. Adding
simple Word-Edges features improves BLEU by
∼2 points, outperforming the very strong Hyper-
graph MERT baseline by∼1 point. See Table 2 for
details. The results of n-best MERT, Hypergraph
MERT, and PRO are averages from 3 runs.

4.5 Evaluation on FBIS
Table 3 shows BLEU scores of Hypergraph MERT,
PRO, and MAXFORCE on FBIS. MAXFORCE ac-
tives 4.5M features, and achieves +1.2 BLEU over
PRO and +0.9 BLEU over Hypergraph MERT. The
training time (on 32 cores) for Hypergraph MERT
and PRO is about 30 min. on the dev set, and is
about 5 hours for MAXFORCE on the training set.

5 Conclusions

We have presented a latent-variable violation-
fixing framework for general structured predic-
tion problems with inexact search over hyper-
graphs. Its application on HIERO brings signif-
icant improvement in BLEU, compared to algo-
rithms that are specially designed for MT tuning
such as MERT and PRO.

Acknowledgment

Part of this work was done during K. Z.’s intern-
ship at IBM. We thank Martin Čmejrek and Lemao
Liu for discussions, David Chiang for pointing
us to pycdec, Dan Gildea for Footnote 2, and
the anonymous reviewers for comments. This
work is supported by DARPA FA8750-13-2-0041
(DEFT), DARPA HR0011-12-C-0015 (BOLT),
and a Google Faculty Research Award.

789



References
Abhishek Arun and Philipp Koehn. 2007. On-

line learning methods for discriminative training of
phrase based statistical machine translation. Proc.
of MT Summit XI, 2(5):29.

Phil Blunsom, Trevor Cohn, and Miles Osborne. 2008.
A discriminative latent variable model for statistical
machine translation. In ACL, pages 200–208.

Victor Chahuneau, Noah Smith, and Chris Dyer. 2012.
pycdec: A python interface to cdec. Prague Bulletin
of Mathematical Linguistics, (98).

Eugene Charniak and Mark Johnson. 2005. Coarse-
to-fine n-best parsing and maxent discriminative
reranking. In Proceedings of ACL, pages 173–180,
Ann Arbor, Michigan, June.

David Chiang, Yuval Marton, and Philip Resnik. 2008.
Online large-margin training of syntactic and struc-
tural translation features. In Proceedings of EMNLP
2008.

David Chiang. 2005. A hierarchical phrase-based
model for statistical machine translation. In Pro-
ceedings of ACL.

Michael Collins. 2002. Discriminative training meth-
ods for hidden markov models: Theory and exper-
iments with perceptron algorithms. In Proceedings
of EMNLP.

Chris Dyer, Adam Lopez, Juri Ganitkevitch, Johnathan
Weese, Ferhan Ture, Phil Blunsom, Hendra Seti-
awan, Vladimir Eidelman, and Philip Resnik. 2010.
cdec: A decoder, alignment, and learning framework
for finite-state and context-free translation models.
In Proceedings of the ACL.

Jeffrey Flanigan, Chris Dyer, and Jaime Carbonell.
2013. Large-scale discriminative training for statis-
tical machine translation using held-out line search.
In Proceedings of NAACL 2013.

Spence Green, Sida Wang, Daniel Cer, and Christo-
pher D Manning. 2013. Fast and adaptive online
training of feature-rich translation models. to ap-
pear) ACL.

Mark Hopkins and Jonathan May. 2011. Tuning as
ranking. In Proceedings of EMNLP.

Liang Huang and David Chiang. 2007. Forest rescor-
ing: Fast decoding with integrated language models.
In Proceedings of ACL, Prague, Czech Rep., June.

Liang Huang, Suphan Fayong, and Yang Guo. 2012.
Structured perceptron with inexact search. In Pro-
ceedings of NAACL.

Liang Huang. 2008. Forest reranking: Discriminative
parsing with non-local features. In Proceedings of
the ACL: HLT, Columbus, OH, June.

P. Koehn, H. Hoang, A. Birch, C. Callison-Burch,
M. Federico, N. Bertoldi, B. Cowan, W. Shen,
C. Moran, R. Zens, C. Dyer, O. Bojar, A. Constantin,
and E. Herbst. 2007. Moses: open source toolkit
for statistical machine translation. In Proceedings
of ACL.

Shankar Kumar, Wolfgang Macherey, Chris Dyer, and
Franz Och. 2009. Efficient minimum error rate
training and minimum bayes-risk decoding for trans-
lation hypergraphs and lattices. In Proceedings of
the Joint Conference of ACL and AFNLP.

Qi Li, Heng Ji, and Liang Huang. 2013. Joint event
extraction via structured prediction with global fea-
tures. In Proceedings of ACL.

Percy Liang, Alexandre Bouchard-Côté, Dan Klein,
and Ben Taskar. 2006. An end-to-end discrimina-
tive approach to machine translation. In Proceed-
ings of COLING-ACL, Sydney, Australia, July.

Ryan McDonald, Koby Crammer, and Fernando
Pereira. 2005. Online large-margin training of de-
pendency parsers. In Proceedings of the 43rd ACL.

Franz Joseph Och. 2003. Minimum error rate training
in statistical machine translation. In Proceedings of
ACL, pages 160–167.

Taro Watanabe, Jun Suzuki, Hajime Tsukada, and
Hideki Isozaki. 2007. Online large-margin training
for statistical machine translation. In Proceedings of
EMNLP-CoNLL.

Heng Yu, Liang Huang, Haitao Mi, and Kai Zhao.
2013. Max-violation perceptron and forced decod-
ing for scalable MT training. In Proceedings of
EMNLP.

Hao Zhang, Liang Huang, Kai Zhao, and Ryan Mc-
Donald. 2013. Online learning with inexact hyper-
graph search. In Proceedings of EMNLP.

Kai Zhao and Liang Huang. 2013. Minibatch and par-
allelization for online large margin structured learn-
ing. In Proceedings of NAACL 2013.

790


