



















































Embedding Text in Hyperbolic Spaces


Proceedings of the Twelfth Workshop on Graph-Based Methods for Natural Language Processing (TextGraphs-12), pages 59–69
New Orleans, Louisiana, June 6, 2018. c©2018 Association for Computational Linguistics

Embedding Text in Hyperbolic Spaces

Bhuwan Dhingra∗1 Christopher J. Shallue2 Mohammad Norouzi2
Andrew M. Dai2 George E. Dahl2

1Carnegie Mellon University
2Google Brain

bdhingra@cs.cmu.edu, {shallue, mnorouzi, adai, gdahl}@google.com

Abstract

Natural language text exhibits hierarchical
structure in a variety of respects. Ideally, we
could incorporate our prior knowledge of this
hierarchical structure into unsupervised learn-
ing algorithms that work on text data. Recent
work by Nickel and Kiela (2017) proposed us-
ing hyperbolic instead of Euclidean embed-
ding spaces to represent hierarchical data and
demonstrated encouraging results when em-
bedding graphs. In this work, we extend their
method with a re-parameterization technique
that allows us to learn hyperbolic embeddings
of arbitrarily parameterized objects. We ap-
ply this framework to learn word and sen-
tence embeddings in hyperbolic space in an
unsupervised manner from text corpora. The
resulting embeddings seem to encode certain
intuitive notions of hierarchy, such as word-
context frequency and phrase constituency.
However, the implicit continuous hierarchy in
the learned hyperbolic space makes interrogat-
ing the model’s learned hierarchies more diffi-
cult than for models that learn explicit edges
between items. The learned hyperbolic em-
beddings show improvements over Euclidean
embeddings in some – but not all – down-
stream tasks, suggesting that hierarchical or-
ganization is more useful for some tasks than
others.

1 Introduction

Many real-world datasets exhibit hierarchical
structure, either explicitly in ontologies like Word-
Net, or implicitly in social networks (Adcock
et al., 2013) and natural language sentences (Ev-
eraert et al., 2015). When learning representations
of such datasets, hyperbolic spaces have recently
been advocated as alternatives to the standard Eu-
clidean spaces in order to better represent the hier-
archical structure (Nickel and Kiela, 2017; Cham-

∗Work done while interning at Google Brain.

Figure 1: Two examples of hierarchical structure in natural
language. Left: A constituent parse tree. Right: A frag-
ment of WordNet. Arrows represent the direction in which
the nodes become semantically more specific.

berlain et al., 2017). Hyperbolic spaces are non-
Euclidean geometric spaces that naturally repre-
sent hierarchical relationships; for example, they
can be viewed as continuous versions of trees (Kri-
oukov et al., 2010). Indeed, Nickel and Kiela
(2017) showed improved reconstruction error and
link prediction when embedding WordNet and sci-
entific collaboration networks into a hyperbolic
space of small dimension compared to a Euclidean
space of much larger dimension.

In this work, we explore the use of hyper-
bolic spaces for embedding natural language data,
which has natural hierarchical structure in terms
of specificity. For example, sub-phrases in a sen-
tence can be arranged into a consituency-based
parse tree where each node is semantically more
specific than its parent (Figure 1 left). This hier-
archical structure is not usually annotated in text
corpora. Instead, we hypothesize that this struc-
ture is implicitly encoded in the range of natural
language contexts in which a concept appears: se-
mantically general concepts will occur in a wider
range of contexts than semantically specific ones.
We use this intuition to formulate unsupervised
objectives for learning hyperbolic embeddings of
text objects. By contrast, Nickel and Kiela (2017)
only embedded graphs with an explicit hierarchi-
cal structure.

59



Further, Nickel and Kiela (2017) only consid-
ered the non-parametric case where each object to
be embedded is assigned its representation from
a lookup table1. This approach is impractical for
embedding natural language because there are too
many sentences and phrases for such a table to
fit in memory. For natural language, we must
adopt a parametric approach where we learn the
parameters θ of an encoder function fθ that maps
sequences of text to their embeddings. When
training their non-parametric model, Nickel and
Kiela (2017) relied on a projection step to keep
their embeddings within their model of hyper-
bolic space. Specifically, they embedded their data
in the Poincaré ball model of hyperbolic space,
which consists of points in the unit ballBd = {x ∈
Rd : ‖x‖ < 1}, but their Reimannian gradient-
descent algorithm was not guaranteed to keep their
embeddings within the unit ball. To address this
issue, they applied a projection step after each gra-
dient step to force the embeddings back into the
unit ball, but this projection is not possible when
the representations are the output of an encoder fθ.

Our main contribution is to propose a simpler
parametrization of hyperbolic embeddings that al-
lows us to train parametric encoders. We avoid
the need for a projection step by separately pa-
rameterizing the direction and norm of each em-
bedding and applying a sigmoid activation func-
tion to the norm. This ensures that embeddings al-
ways satisfy ‖e‖ < 1 (as required by the Poincaré
ball model of hyperbolic space), even after arbi-
trary gradient steps. Once the embeddings are
constrained in this way, all that is needed to in-
duce hyperbolic embeddings is an appropriate dis-
tance metric (see Equation 1) in the loss function
in place of the commonly used Euclidean or cosine
distance metrics. In addition to allowing paramet-
ric encoders, this parameterization has an added
benefit that instead of Riemannian-SGD (as used
in Nickel and Kiela, 2017), we can use any of
the popular optimization methods in deep learn-
ing, such as Adam (Kingma and Ba, 2014). We
show that re-parameterizing in this manner leads
to comparable reconstruction error to the method
of Nickel and Kiela (2017) when learning non-
parametric embeddings of WordNet.

We test our framework by learning unsuper-

1Note that the term “non-parametric” has a different
meaning here than in the case of Bayesian non-parametric
statistics. Here it refers to the fact that the embeddings are
not output by a parameterized function.

vised embeddings for two types of natural lan-
guage data. First, we embed a graph of word
co-occurrences extracted from a large text corpus.
The resulting embeddings are hierarchically orga-
nized such that words occurring in many contexts
are placed near the origin and words occurring in
few contexts are placed near the boundary of the
space. Using these embeddings, we see improved
performance on a lexical entailment task, which
supports our hypothesis that co-occurrence fre-
quency is indicative of semantic specificity. How-
ever, this improvement comes at the cost of worse
performance on a word similarity task. In the
second experiment, we learn embeddings of sen-
tences (and sub-sentence sequences) by applying
the hyperbolic metric to a modified version of
the Skip-Thoughts model (Kiros et al., 2015) that
uses embeddings to predict local context in a text
corpus. Since most sentences are unique, there
is no clear notion of co-occurrence frequency in
this case. However, we find a high correlation
(0.67) between the norms of embedded constituent
phrases from Penn Treebank (Marcus et al., 1993)
and the height at which those phrases occur in
their parse trees. We conclude that hyperbolic sen-
tence embeddings encode some of the hierarchical
structure represented by parse trees, without being
trained to do so. However, experiments on down-
stream tasks do not show consistent improvements
over baseline Euclidean embeddings.

2 Background – Poincaré Embeddings

In this section we give an overview of the
Poincaré embeddings method from Nickel and
Kiela (2017). A similar formulation was also pre-
sented in Chamberlain et al. (2017).

A hyperbolic space is a non-Euclidean geomet-
ric space obtained by replacing Euclid’s parallel
postulate with an alternative axiom. The parallel
postulate asserts that for every line L and point P
not on L, there is a unique line co-planar with P
and L that passes through P and does not inter-
sect L. In hyperbolic geometry, this axiom is re-
placed with the assertion that there are at least two
such lines passing through P that do not intersect
L (from which one can prove that there must be in-
finitely many such lines). In this geometry, some
familiar properties of Euclidean space no longer
hold; for example, the sum of interior angles in a
triangle is less than 180 degrees. Like Euclidean
geometry, hyperbolic geometry can be extended to

60



d-dimensions. d-dimensional hyperbolic space is
unique up to a “curvature” constant K<0 that sets
the length scale. Without loss of generality we as-
sume K=−1.

In hyperbolic space, circle circumference
(2π sinh r) and disc area (2π(cosh r − 1)) grow
exponentially with radius, as opposed to Euclidean
space where they only grow linearly and quadrati-
cally. This makes it particularly efficient to embed
hierarchical structures like trees, where the num-
ber of nodes grows exponentially with depth (Kri-
oukov et al., 2010). We hope that such embed-
dings will simultaneously capture both the similar-
ity between objects (in their distances), and their
relative depths in the hierarchy (in their norms).

There are several ways to model hyperbolic
space within the more familiar Euclidean space.
Of these, the Poincaré ball model is most suited
for use with neural networks because its dis-
tance function is differentiable and it imposes
a relatively simple constraint on the representa-
tions (Nickel and Kiela, 2017). Specifically, the
Poincaré ball model consists of points within the
unit ball Bd, in which the distance between two
points u,v ∈ Bd is

d(u,v) = cosh−1
(
1 + 2

‖u− v‖2
(1− ‖u‖2)(1− ‖v‖2)

)
. (1)

Notice that, as ‖u‖ approaches 1, its distance
to almost all other points increases exponentially.
Hence, an effective tree representation will place
root nodes near the origin and leaf nodes near the
boundary to ensure that root nodes are relatively
close to all points while leaf nodes are relatively
distant from most other leaf nodes.

In order to learn representations Θ = {θi}ni=1
for a set of objects S = {si}ni=1, we must define
a loss function L(Θ, d) that minimizes the hyper-
bolic distance between embeddings of similar ob-
jects and maximizes the hyperbolic distance be-
tween embeddings of different objects. Then we
can solve the following optimization problem

Θ̂ = arg min
Θ

L(Θ, d) s.t. ‖θi‖ < 1 ∀θi ∈ Θ
(2)

Nickel and Kiela (2017) use Riemannian-SGD
to optimize Equation 2. This involves computing
the Riemannian gradient (which is a scaled ver-
sion of the Euclidean gradient) with respect to the
loss, performing a gradient-descent step, and pro-
jecting any embeddings that move out of Bd back
within its boundary. In the following section, we

propose a re-parametrization of Poincaré embed-
dings that removes the need for the projection step
and allows the use of any of the popular optimiza-
tion techniques in deep learning, such as Adam.

3 Parametric Poincaré Embeddings

Our goal is to learn a function f : S → Bd
that maps objects from a set S to the Poincaré
ball Bd. However, the encoders typically used in
deep learning, such as LSTMs, GRUs, and feed-
forward networks, may produce representations in
arbitrary subspaces of Rd′ . We introduce a re-
parameterization technique that maps Rd′ to Bd
and can be used on top of any existing encoder. Let
e(s) ∈ Rd′ denote the output of the original en-
coder for a given s ∈ S. The re-parameterization
involves computing a direction vector v and a
norm magnitude p from e(s) as follows:

v̄ = φdir(e(s)), v =
v̄

‖v̄‖ ,

p̄ = φnorm(e(s)), p = σ(p̄),

where φdir : Rd
′ → Rd, φnorm : Rd′ → R can

be arbitrary parametric functions, whose parame-
ters will be optimized during training, and σ is the
sigmoid function that ensures the resulting norm
p ∈ (0, 1). We will introduce specific instanti-
ations of φdir and φnorm in the subsections be-
low. The re-parameterized embedding is defined
as θ = pv, which lies in Bd.

Let w denote the model parameters in e(s),
φdir, and φnorm. We wish to optimize a loss func-
tion L(w, d) that minimizes the hyperbolic dis-
tance d between embeddings of similar objects
and maximizes the hyperbolic distance between
embeddings of dissimilar objects. Since the em-
beddings θ are guaranteed to lie in Bd, we can use
any of the optimization methods popular in deep
learning – we use Adam (Kingma and Ba, 2014).

Next we discuss specific instantiations of en-
coders, re-parameterization functions and loss
functions for three types of problems.

3.1 Non-Parametric Supervised Embeddings
First, we test our re-parametrization by embed-
ding the WordNet hierarchy with a non-parametric
encoder – the same task considered by Nickel
and Kiela (2017). The dataset is represented by
a set of tuples D = {(u, v)}, where each pair
(u, v) denotes that u is a parent of v. Since u
and v come from a fixed vocabulary of objects,

61



we use a lookup table L as the base encoder, i.e,
e(u) = L(u) ∈ Rd+1. We set φdir = x1:d and
φnorm = xd+1 to be slicing functions that extract
the first d and the (d + 1)-th dimensions respec-
tively.

We use the same loss function as Nickel
and Kiela (2017), which uses negative samples
N (u) = {v : (u, v) /∈ D, v 6= u} to maximize dis-
tance between embeddings of unrelated objects:

L(w, d) = −
∑

(u,v)∈D
log

e−d(u,v)∑
v′∈N (u)∪{v} e

−d(u,v′) .

Note that this loss function makes no use of
the direction of the edge (u, v), because d(u, v) is
symmetric. Nevertheless, we expect it to recover
the hierarchical structure of D.

3.2 Non-Parametric Unsupervised Word
Embeddings

Next, we consider the problem of embedding
words from a vocabulary SV given a text corpus
T = (w1, . . . , w|T |), where wi ∈ SV .

Traditional unsupervised methods, like
word2vec (Mikolov et al., 2013b) and GloVe
(Pennington et al., 2014), are optimized for
preserving semantic similarity: the embeddings
of similar words should be close, and the embed-
dings of semantically different words should be
distant. Remarkably, these unsupervised embed-
dings also exhibit structural regularities, such as
vector offsets corresponding to male-to-female
or singular-to-plural transformations (Mikolov
et al., 2013c,b). In this work, by embedding
in hyperbolic space, we hope to encode both
semantic similarity (in the hyperbolic distances
between embeddings) and semantic specificity
(in the hyperbolic norms of embeddings). Our
hypothesis is that words denoting more general
concepts will appear in varied contexts and hence
will be placed closer to the origin – similar to how
nodes close to the root in WordNet are placed
close to the origin in Nickel and Kiela (2017).
Tasks that rely on a hierarchical relationship
between words might benefit from embeddings
with these properties.

The idea of using specialized vector space mod-
els for encoding various lexical relations was pre-
viously explored by Henderson and Popa (2016).
While they looked exclusively at the entailment re-
lation, the notion we study here is that of semantic
specificity, which is more general but also difficult

to define formally. One example is that “musician”
is related to “music” and more specific than it, but
not necessarily entailed by it.

Both word2vec and GloVe embed words using
co-occurrences of pairs of words occur within a
fixed window size in T . Here, we construct a co-
occurrence graph G = {(w, v)} that consists of all
pairs of words that occur within a fixed window of
each other. Certain pairs co-occur more frequently
than others, and we preserve this information by
allowing repeated edges in G: each pair (w, v) oc-
curs f c times in G, where f is the frequency of that
pair in T and c < 1 is a downsampling constant.
We embed G in the Poincaré ball in the manner
described in Section 3.1.

3.3 Parametric Unsupervised Sentence
Embeddings

Finally, we consider embedding longer units of
text such as sentences and phrases. We denote
the set of all multi-word expressions of interest
as SZ . Our goal is to learn an encoder function
f : SZ → Bd in an unsupervised manner from a
text corpus T = (s1, . . . , s|T |), where si ∈ SZ .

Sentence embeddings are motivated by the phe-
nomenal success of word embeddings as general
purpose feature representations for a variety of
downstream tasks. The desiderata of multi-word
embeddings are similar to those of word embed-
dings: semantically similar units should be close
to each other in embedding space, and complex se-
mantic properties should map to geometric proper-
ties in the embedding space. Our hypothesis is that
embedding multi-word units in hyperbolic space
will capture the hierarchical structure of speci-
ficity of the meanings of these units.

We start with Skip-Thoughts (Kiros et al.,
2015), an unsupervised model for sentence em-
beddings that is trained to predict sentences sur-
rounding a source sentence from its representa-
tion. Skip-Thoughts consists of an encoder and
two decoders, all of which are parameterized as
Gated Recurrent Units (GRUs) (Cho et al., 2014).
The encoder produces a fixed-size representation
fθ(si) for si ∈ SZ , and the two decoders recon-
struct the previous sentence si−1 and the next sen-
tence si+1 in an identical manner, as follows:

ht = GRU(w<t, fθ(si)),

P (wt|w<t, fθ(si)) ∝ exp(vTwtht),

where (w1, . . . , wT ) is the sequence of words

62



in si−1 or si+1 and vw denotes an out-
put embedding for w. The loss minimizes
−∑t logP (wt|w<t, fθ(si)).

In order to learn hyperbolic embeddings, the
loss must depend directly on the hyperbolic dis-
tance between the source and target embeddings.
As an intermediate step, we present a modified
version of Skip-Thoughts where we remove the
GRU from the decoding step and instead directly
predict a bag-of-words surrounding the source
sentence, as follows:

ct =
1

2K

K∑

k=1

v′wt−k + v
′
wt+k

,

P (wt|w 6=t, fθ(si)) ∝ exp (vTwtfθ(si) + vTwtct).

Here, ct is an average word embedding of the bi-
directional local context around the word to be
predicted. We found it was important to condi-
tion the prediction on ct in order to learn a good
quality encoder model fθ, since it can take care
of uninteresting language modeling effects. Em-
pirically, the sentence encoder trained in this man-
ner gives around 1% lower average performance
on downstream tasks (discussed in Section 4.3)
than the original Skip-Thoughts model, while be-
ing considerably faster. More importantly, the pre-
diction probability now directly depends on the in-
ner product between vwt and fθ(si). We can now
introduce a hyperbolic version of the likelihood as
follows:

P (wt|w 6=t, fθ(si)) ∝
exp (−λ1d(vwt , fθ(si))− λ2d(vwt , ct)).

Here, d is the hyperbolic distance function (Equa-
tion 1) and λ1, λ2 are learned coefficients that con-
trol the importance of the two terms. After train-
ing, we observed that λ2 > λ1, which supports
our intuition that local context is more important
in predicting a word.

To ensure that vwt , fθ(si), ct ∈ Bd, we use the
following parameterization:

φdir(x) = W
T
1 x, φnorm(x) = W

T
2 x,

where x = {v̂wt , ĉt, f̂θ(si)}; v̂wt is the Euclidean
output embedding for word wt, obtained from a
lookup table; ĉt is the Euclidean local context em-
bedding, obtained by averaging Euclidean word
vectors from a window aroundwt; and f̂θ is a bidi-

Method Dim

5 20 100

From Nickel and Kiela (2017)

Euclidean Rank 3542.3 1685.9 1187.3MAP 0.024 0.087 0.162

Poincaré Rank 4.9 3.8 3.9MAP 0.823 0.855 0.857

This work

Poincaré (re-parameterized) Rank 10.7 6.3 5.5MAP 0.736 0.875 0.818

Table 1: Reconstruction errors for various embedding di-
mensions on WordNet.

rectional GRU encoder over the words of si:

hfT =
−−→
GRU(si), hb1 =

←−−
GRU(si)

f̂θ(si) = h
f
T ‖hb1

Similar to Skip-Thoughts, the loss minimizes
−∑t logP (wt|w 6=t, fθ(si)).

4 Experiments & Results

4.1 WordNet

The WordNet noun hierarchy is a collection of
tuples D = {(u, v)}, where each pair (u, v)
denotes that u is a hypernym of v. Following
Nickel and Kiela (2017), we learned embeddings
using the transitive closure D+, which consists
of 82,114 nouns and 743,241 hypernym-hyponym
edges. We compared our results to the original
method from Nickel and Kiela (2017) across three
different embedding sizes. In each case, we evalu-
ated the embeddings by attempting to reconstruct
the WordNet tree using the nearest neighbors of
the nodes. For each node, we retrieved a ranked
list of its nearest neighbors in embedding space
and computed the mean rank of its ground truth
children, and also computed the Mean Average
Precision (MAP), which is the average precision
at the threshold of each correctly retrieved child.
Results are presented in Table 1.

The re-parameterized Poincaré embeddings
method has comparable reconstruction error to
the original Poincaré method, whereas both are
significantly superior to the Euclidean embed-
dings method. Figure 2 shows reconstruction er-
ror after each epoch when training the original
and re-parameterized Poincaré embeddings, along
with the elapsed wall time in minutes2. The

2For the original method we used the official code release
at https://github.com/facebookresearch/

63



0 5 10 15 20 25 30 35
Epoch

100

101

102

103

104

105

M
ea

n 
R

an
k 15m

6m

30m

12m

45m

18m

60m

25m

75m

31m

43m

Original
Re­parameterized

Figure 2: Mean Rank for reconstructing the WordNet graph
after each training epoch (up to epoch 35) for the original
Poincaré embeddings method (Nickel and Kiela, 2017) and
our re-parameterized version. Wall time elapsed in minutes
is also shown against the curves. Dimension d = 10.

Word Nearest neighbors

vapor boiling, melting, evaporation, cooling, vapour

towering eruptions, tsunamis, hotspots, himalayas, volcanic

mercedes dmg, benz, porsche, clk, mclaren

forties twenties, thirties, roaring, koniuchy, inhabitant

eruption caldera, vents, calderas, limnic, volcano

palladium boron, anion, uranium, ceric, hexafluoride

employment incentives, benefits, financial, incentive, investment

weighed tonnes, weigh, weighs, kilograms, weighing

Table 2: Nearest Neighbors in terms of cosine distance for
Poincaré embeddings of words (d = 20).

re-parameterized method converges much faster,
with its best error achieved around epoch 20,
compared to the original method that reaches its
best error after hundreds of epochs. This is de-
spite using a larger batch size of 1024 for the re-
parameterized method than the original method,
which uses batch size 50. We hypothesize that
the speed-up is largely due to using the Adam op-
timizer which is made possible by the fact that
the re-parameterization ensures the embeddings
always lie within the Poincaré ball.

4.2 Word Embeddings

We used the TEXT8 corpus3 to evaluate our tech-
nique for learning non-parametric unsupervised
word embeddings (Section 3.2). Though small
(17M tokens), the TEXT8 corpus is a useful bench-
mark for quickly comparing embedding methods.

For hyperbolic embeddings, the nearest neigh-

poincare-embeddings with the recommended hy-
perparameter settings. Our re-parameterized model is
implemented in TensorFlow (Abadi et al., 2016). Wall time
was recorded on a CPU with 8-core AMD Opteron 6376
Processor.

3http://mattmahoney.net/dc/text8.zip

bors of most words by hyperbolic distance (Equa-
tion 1) are all uninteresting common words (e.g.
numbers, quantifiers, etc), because points near the
origin are relatively close to all points, whereas
distances between points increases exponentially
as the points approach the boundary of Bd. In-
stead, we find nearest neighbors in hyperbolic
space using cosine distance, which is motivated
by the fact that the Poincaré ball model is confor-
mal: angles between vectors are identical to their
Euclidean counterparts. Some nearest neighbors
of hyperbolic word embeddings are shown in Ta-
ble 2. The closest neighbors typically represent
one of several semantic relations with the query
word. For example, “boiling” produces “vapor”,
“towering” is a quality of “eruptions”, “dmg” is
the parent company of “mercedes”, “tonnes” is a
measure of “weighed”, and so on. This is a con-
sequence of embedding the word-cooccurrence
graph, which implicitly represents these relations.

Table 3 shows lists of related words that contain
a particular substring in order of increasing hyper-
bolic norm. We also show the counts in the corpus
of these words, which are correlated to the num-
ber of contexts they occur in. As expected, words
occurring in fewer contexts have higher hyperbolic
norm, and this corresponds to increased specificity
as we move down the list; for example “bulldogs”
has a higher norm than “dog”, and “greatest” has
a higher norm than “great”. The Spearman corre-
lation between 1/f , where f is the frequency of a
word in the corpus, and the norm of the embedding
is 0.77.

We quantitatively evaluate hyperbolic embed-
dings on two tasks against the baseline Skip-
Gram with Negative Sampling (SGNS) embed-
dings (Mikolov et al., 2013a)4. The first task
is Word-Similarity on the WordSim-353 dataset
(Finkelstein et al., 2001), which measures whether
the embeddings preserve semantic similarity be-
tween words as judged by humans. We compute
Spearman’s correlation between ground truth sim-
ilarity scores and cosine distances in embedding
space between all pairs of words in the dataset.
The second task is HyperLex (Vulić et al., 2017),
which measures the extent to which embeddings
preserve lexical entailment relationships of the
form “X is a type of Y”. These are precisely the

4We use the code available at https://github.
com/tensorflow/models/tree/master/
tutorials/embedding, which was tuned for the
TEXT8 corpus.

64



“bank” “music” “dog” “great”

Word Count Norm Word Count Norm Word Count Norm Word Count Norm

bank 1076 2.56 music 4470 1.58 dog 566 3.21 great 4784 2.11
bankruptcy 106 4.61 musical 1265 2.56 dogs 184 4.27 greater 1502 2.51

banking 185 5.92 musicians 435 4.07 dogme 16 6.52 greatest 753 2.97
bankrupt 28 5.93 musician 413 4.32 bulldogs 8 7.08 greatly 530 3.46

banks 407 6.45 musicals 38 5.76 endogenous 5 7.55 greatness 12 6.41
banknote 13 6.62 musicology 18 6.38 sheepdog 5 7.73

Table 3: Words in order of increasing hyperbolic norm which contain the substring indicated in the top row. Their counts in
the TEXT8 corpus are also shown. Dimension size d = 20.

Task Method Dimension

5 20 50 100

WordSim-353 SGNS 0.350 0.566 0.676 0.689Poincaré 0.305 0.451 0.451 0.455

HyperLex SGNS -0.002 0.093 0.124 0.140Poincaré 0.259 0.246 0.246 0.248

Table 4: Spearman’s ρ correlation coefficient for Word Simi-
larity and Lexical Entailment tasks using SGNS and Poincaré
embeddings of various sizes.

kind of relations we hope to capture in the norm
of hyperbolic embeddings. Given a pair (x, y) of
words, we compute the score for the relationship
is-a(x, y) in the same way as Nickel and Kiela
(2017):

score(is-a(x, y)) = −(1 + α(‖y‖ − ‖x‖))d(x, y).

If x and y are close and ‖y‖<‖x‖, the above score
will be positive, implying x is a type of y.

Table 4 shows the scores on these two tasks for
both SGNS and Poincaré embeddings for various
embedding sizes. SGNS embeddings are superior
for preserving word similarities, while Poincaré
embeddings are superior for preserving lexical en-
tailment. However, the best score for Poincaré
embeddings is only 0.259, which is quite low. In
comparison to the unsupervised baselines studied
in Vulić et al. (2017), Poincaré embeddings rank
second behind the simple Frequency Ratio base-
line which, achieves 0.2795.

4.3 Sentence Embeddings

We use the BookCorpus (Zhu et al., 2015) to learn
sentence and phrase embeddings. We pre-process
the data into triples of the form (si−1, si, si+1)
consisting of both full sentences, as in the orig-
inal Skip-Thoughts model, and sub-sentence se-
quences of words sampled according to the same
lengths as sentences in the corpus. We found that

5This does not include baselines that use extra informa-
tion like WordNet while learning the embeddings.

Sentence Norm

a creaky staircase gothic . 6.21
it ’s a rare window on an artistic collaboration . 6.32
a dopey movie clothed in excess layers of hipness . 6.35
an imponderably stilted and self-consciously arty movie . 6.65
there’s a delightfully quirky movie ... , but brooms isn’t it . 6.83
a trifle of a movie, with a few laughs ... unremarkable soft center . 6.86

Table 5: Sentences from Movie Reviews dataset with their
norms. Each row represents a nearest neighbor to and with a
greater norm than the sentence in the row above.

augmenting the dataset in this manner led to con-
sistent improvements on downstream tasks.

Similar to word embeddings, we expect that
sentence (phrase) embeddings will be organized
in a hierarchical manner such that sentences
(phrases) that appear in a variety of contexts are
closer to the origin. However, unlike word embed-
dings where we could compare hyperbolic norm to
frequency in the corpus, this effect is hard to mea-
sure directly for sentences (phrases) because most
only appear a small number of times in the corpus.
Instead, we check whether the embeddings exhibit
a known hierarchical structure: constituent parses
of sentences. We take Section 23 from the Wall
Street Journal subset of Penn Treebank (Marcus
et al., 1993), which is annotated with gold stan-
dard constituent parse tree structures, and embed
each node from each tree using the learned para-
metric encoder fθ. The Spearman correlation be-
tween the norm of the resulting embedding and the
height of the node in its tree, computed over all
nodes in the set, is 0.671. Figure 3 shows some
example parses with the hyperbolic norm at each
node. The norms generally increase as we move
upwards, indicating that the learned embeddings
encode some of this particular form of hierarchi-
cal structure. Table 5 shows examples from the
Movie Review corpus (Pang et al., 2002), in which
we generated a chain of sentences with increas-
ing norm by iteratively searching for the nearest
neighbor with norm greater than the previous sen-
tence.

65



4.0

2.9

3.3

2.5

operations

1.7

UNK

1.6

big

1.6

have

4.3

3.0

2.5

2.2

10

1.7

the

1.9

of

1.9

Most

2.5

2.4

2.2

1.9

Monday

2.8

Black

2.4

n’t

2.5

was

1.5

it

1.8

,

1.7

No

7.7

2.7

2.2

2.0

2.4

2.1

worms

1.9

of

1.8

1.8

can

1.7

a

2.0

open

1.9

would

1.5

It

Figure 3: Constituent parse trees from the Penn Treebank with hyperbolic norms of the phrase embeddings at each node.

Encoder Dim Word Dim Method Perplexity CR SUBJ MPQA MR MultiNLI SNLI

10 100 Euclidean 117 0.639 0.582 0.689 0.546 0.419 0.483Poincaré 110 0.640 0.623 0.769 0.534 0.417 0.480

100 200 Euclidean 61 0.719 0.882 0.823 0.694 0.534 0.692Poincaré 53 0.722 0.890 0.848 0.696 0.537 0.684

1000 620 Euclidean 61 0.804 0.925 0.860 0.742 0.617 0.741Poincaré 46 0.792 0.921 0.880 0.746 0.620 0.746

2400 620 Skip-Thoughts –∗ 0.836 0.938 0.889 0.795 0.650 0.766

Table 6: Held out set perplexity and downstream task performance for sentence embeddings of various sizes. ∗Perplexity of
the Skip-Thoughts model is not comparable to our methods since it only uses uni-directional local context.

Next, following common practice for evaluating
sentence representations, we evaluate the trained
Poincaré encoder as a black-box feature extrac-
tor for downstream tasks. We choose four binary
classification benchmarks from the original Skip-
Thoughts evaluation – CR, MR, MPQA and SUBJ
– and two entailment tasks – MultiNLI (Williams
et al., 2017) and SNLI (Bowman et al., 2015).
For the binary classification tasks we train SVM
models with a kernel based on hyperbolic dis-
tance between sentences, and for the entailment
tasks we train multi-layer perceptrons on top of
the premise and hypothesis embeddings and their
element-wise products and differences. As a base-
line, we compare to embeddings trained using the
Euclidean distance metric. Table 6 reports the re-
sults of these evaluations for various embedding
dimensions. Poincaré embeddings achieve a lower
perplexity in each case, suggesting a more efficient
use of the embedding space. However, both sets
of embeddings perform similarly on downstream
tasks, except for the MPQA opinion polarity task
where Poincaré embeddings do significantly bet-
ter. Training with embedding sizes greater than
1000 did not show any further improvements in
our experiments.

4.4 Discussion
The goal of this work was to explore whether hy-
perbolic spaces are useful for learning embeddings
of natural language data. Ultimately, the useful-

ness of an embedding method depends on its per-
formance on downstream tasks of interest. In that
respect we found mixed results in our evaluation.
For word embeddings, we found that hyperbolic
embeddings preserve co-occurrence frequency in-
formation in their norms, and this leads to im-
proved performance on a lexical entailment task.
However, decreased performance on a word sim-
ilarity task means that these embeddings may not
be useful across all tasks. In general, this suggests
that different architectures are needed for captur-
ing different types of lexical relations. We ex-
perimented with several other loss functions, pre-
processing techniques and hyper-parameter set-
tings, which we did not describe in this paper due
to space constraints, but the conclusions remained
the same.

For sentence embeddings, we found evidence
that hyperbolic embeddings preserve phrase con-
stituency information in their norms. A deeper
investigation of the learned hierarchy is difficult
since our encoder is a parametric function over a
(practically) infinite set and there is no clear notion
of edges in the learned embeddings. On down-
stream tasks, we saw a small improvement over
the Euclidean baseline in some cases and a small
degradation in others, again highlighting the need
for specialized embeddings for different tasks. We
hope that our initial study can pave the way for
more work on the applicability of the hyperbolic

66



metric for learning useful embeddings of natural
language data.

5 Related Work

Tay et al. (2018) used the hyperbolic distance met-
ric to learn question and answer embeddings on
the Poincaré ball for question-answer retrieval.
The main difference to our work is that we ex-
plore unsupervised objectives for learning generic
word and sentence representations from a text cor-
pus. Furthermore, we show that by using re-
parameterization instead of projection to constrain
the embeddings, we can view the distance metric
as any other non-linear layer in a deep network and
remove the need for Riemannian-SGD.

Several works have attempted to learn hierarchi-
cal word embeddings. Order Embeddings (Ven-
drov et al., 2015) and LEAR (Vulić and Mrkšić,
2017) are supervised methods that also encode hi-
erarchy information in the norm of the embed-
dings by adding regularization terms to the loss
function. In comparison, our method is unsuper-
vised. HyperVec (Nguyen et al., 2017) is a su-
pervised method which ensures that the hyper-
nymy relation is assigned a higher similarity score
in the learned embeddings than other relations
such as synonymy. The vector space model for
distribution semantics introduced by Henderson
and Popa (2016) is unsupervised and re-interprets
word2vec embeddings to predict entailment rela-
tions between pairs of words. DIVE (Chang et al.,
2017) is also unsupervised, and achieves a score of
32.6% on the lexical entailment task, but it is un-
clear how well the embeddings preserve semantic
similarity.

For sentence embeddings, several works have
looked at improved loss functions for Skip-
Thoughts to make the model faster and light-
weight (Tang et al., 2017c,a,b). Ba et al. (2016) in-
troduced a layer normalization method that shows
consistent improvements when included in the
GRU layers in Skip-Thoughts, and we used this
in our encoder. More recently, improved sen-
tence representations were obtained using dis-
course based objectives (Jernite et al., 2017; Nie
et al., 2017) and using supervision from natural
language inference data (Conneau et al., 2017).

6 Conclusion

We presented a re-parameterization method that
allows us to learn Poincaré embeddings on top

of arbitrary encoder modules using arbitrary
distance-based loss functions. We showed that
this re-parameterization leads to comparable per-
formance to the original method from Nickel and
Kiela (2017) when explicit hierarchical structure
is present in the data. When we applied this
method to natural language data at the word- and
sentence-level, we found evidence of intuitive no-
tions of hierarchy in the learned embeddings. This
led to improvements on some – but not all – down-
stream tasks. Future work could either focus on
alternative formulations for unsupervised hyper-
bolic embeddings, or alternative downstream tasks
where hierarchical organization may be more use-
ful.

References
Martı́n Abadi, Paul Barham, Jianmin Chen, Zhifeng

Chen, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Geoffrey Irving, Michael Isard,
et al. 2016. Tensorflow: A system for large-scale
machine learning. In OSDI, volume 16, pages 265–
283.

Aaron B Adcock, Blair D Sullivan, and Michael W
Mahoney. 2013. Tree-like structure in large social
and information networks. In Data Mining (ICDM),
2013 IEEE 13th International Conference on, pages
1–10. IEEE.

Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hin-
ton. 2016. Layer normalization. arXiv preprint
arXiv:1607.06450.

Samuel R. Bowman, Gabor Angeli, Christopher Potts,
and Christopher D. Manning. 2015. A large an-
notated corpus for learning natural language infer-
ence. In Proceedings of the 2015 Conference on
Empirical Methods in Natural Language Processing
(EMNLP). Association for Computational Linguis-
tics.

Benjamin Paul Chamberlain, James Clough, and
Marc Peter Deisenroth. 2017. Neural embeddings
of graphs in hyperbolic space. arXiv preprint
arXiv:1705.10359.

Haw-Shiuan Chang, ZiYun Wang, Luke Vilnis, and
Andrew McCallum. 2017. Distributional inclusion
vector embedding for unsupervised hypernymy de-
tection. arXiv preprint arXiv:1710.00880.

Kyunghyun Cho, Bart van Merriënboer, Çalar
Gülçehre, Dzmitry Bahdanau, Fethi Bougares, Hol-
ger Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder–decoder
for statistical machine translation. In Proceedings of
the 2014 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP), pages 1724–

67



1734, Doha, Qatar. Association for Computational
Linguistics.

Alexis Conneau, Douwe Kiela, Holger Schwenk, Loı̈c
Barrault, and Antoine Bordes. 2017. Supervised
learning of universal sentence representations from
natural language inference data. In Proceedings of
the 2017 Conference on Empirical Methods in Nat-
ural Language Processing, pages 670–680. Associ-
ation for Computational Linguistics.

Martin BH Everaert, Marinus AC Huybregts, Noam
Chomsky, Robert C Berwick, and Johan J Bolhuis.
2015. Structures, not strings: linguistics as part of
the cognitive sciences. Trends in cognitive sciences,
19(12):729–743.

Lev Finkelstein, Evgeniy Gabrilovich, Yossi Matias,
Ehud Rivlin, Zach Solan, Gadi Wolfman, and Ey-
tan Ruppin. 2001. Placing search in context: The
concept revisited. In Proceedings of the 10th inter-
national conference on World Wide Web, pages 406–
414. ACM.

James Henderson and Diana Popa. 2016. A vector
space for distributional semantics for entailment. In
Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), pages 2052–2062. Association for
Computational Linguistics.

Yacine Jernite, Samuel R Bowman, and David Son-
tag. 2017. Discourse-based objectives for fast un-
supervised sentence representation learning. arXiv
preprint arXiv:1705.00557.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. In Proceed-
ings of the 3rd International Conference on Learn-
ing Representations (ICLR).

Ryan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,
Richard Zemel, Raquel Urtasun, Antonio Torralba,
and Sanja Fidler. 2015. Skip-thought vectors. In
Advances in neural information processing systems,
pages 3294–3302.

Dmitri Krioukov, Fragkiskos Papadopoulos, Maksim
Kitsak, Amin Vahdat, and Marián Boguná. 2010.
Hyperbolic geometry of complex networks. Phys-
ical Review E, 82(3):036106.

Mitchell P Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. 1993. Building a large annotated
corpus of english: The penn treebank. Computa-
tional linguistics, 19(2):313–330.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013a. Efficient estimation of word
representations in vector space. arXiv preprint
arXiv:1301.3781.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013b. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111–3119.

Tomas Mikolov, Wen-tau Yih, and Geoffrey Zweig.
2013c. Linguistic regularities in continuous space
word representations. In Proceedings of the 2013
Conference of the North American Chapter of the
Association for Computational Linguistics: Human
Language Technologies, pages 746–751.

Kim Anh Nguyen, Maximilian Köper, Sabine
Schulte im Walde, and Ngoc Thang Vu. 2017.
Hierarchical embeddings for hypernymy detection
and directionality. In Proceedings of the 2017
Conference on Empirical Methods in Natural
Language Processing, pages 233–243. Association
for Computational Linguistics.

Maximillian Nickel and Douwe Kiela. 2017. Poincaré
embeddings for learning hierarchical representa-
tions. In I. Guyon, U. V. Luxburg, S. Bengio,
H. Wallach, R. Fergus, S. Vishwanathan, and R. Gar-
nett, editors, Advances in Neural Information Pro-
cessing Systems 30, pages 6338–6347. Curran As-
sociates, Inc.

Allen Nie, Erin D Bennett, and Noah D Goodman.
2017. Dissent: Sentence representation learning
from explicit discourse relations. arXiv preprint
arXiv:1710.04334.

Bo Pang, Lillian Lee, and Shivakumar Vaithyanathan.
2002. Thumbs up?: sentiment classification using
machine learning techniques. In Proceedings of the
ACL-02 conference on Empirical methods in natural
language processing-Volume 10, pages 79–86. As-
sociation for Computational Linguistics.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP), pages 1532–1543.

Shuai Tang, Hailin Jin, Chen Fang, Zhaowen Wang,
and Virginia de Sa. 2017a. Rethinking skip-thought:
A neighborhood based approach. In Proceedings
of the 2nd Workshop on Representation Learning
for NLP, pages 211–218. Association for Compu-
tational Linguistics.

Shuai Tang, Hailin Jin, Chen Fang, Zhaowen Wang,
and Virginia R de Sa. 2017b. Exploring asym-
metric encoder-decoder structure for context-based
sentence representation learning. arXiv preprint
arXiv:1710.10380.

Shuai Tang, Hailin Jin, Chen Fang, Zhaowen Wang,
and Virginia R de Sa. 2017c. Trimming and
improving skip-thought vectors. arXiv preprint
arXiv:1706.03148.

Yi Tay, Luu Anh Tuan, and Siu Cheung Hui. 2018.
Hyperbolic representation learning for fast and ef-
ficient neural question answering. In Proceedings of
the Eleventh ACM International Conference on Web
Search and Data Mining, WSDM ’18, pages 583–
591, New York, NY, USA. ACM.

68



Ivan Vendrov, Ryan Kiros, Sanja Fidler, and Raquel
Urtasun. 2015. Order-embeddings of images and
language. arXiv preprint arXiv:1511.06361.

Ivan Vulić, Daniela Gerz, Douwe Kiela, Felix Hill,
and Anna Korhonen. 2017. Hyperlex: A large-scale
evaluation of graded lexical entailment. Computa-
tional Linguistics, 43(4):781–835.

Ivan Vulić and Nikola Mrkšić. 2017. Specialising
word vectors for lexical entailment. arXiv preprint
arXiv:1710.06371.

Adina Williams, Nikita Nangia, and Samuel R Bow-
man. 2017. A broad-coverage challenge corpus for
sentence understanding through inference. arXiv
preprint arXiv:1704.05426.

Yukun Zhu, Ryan Kiros, Rich Zemel, Ruslan Salakhut-
dinov, Raquel Urtasun, Antonio Torralba, and Sanja
Fidler. 2015. Aligning books and movies: Towards
story-like visual explanations by watching movies
and reading books. In Proceedings of the IEEE
international conference on computer vision, pages
19–27.

A Implementation Details

A.1 WordNet Experiments

For our re-parameterized Poincaré embeddings we
used a batch size 1024, learning rate 0.005, and no
burn-in period. The loss was optimized using the
Adam optimizer. Embeddings were initialized in
U [−0.001, 0.001]. We sampled 10 negatives on
the fly during training independently for each pos-
itive sample. We clipped gradients to a norm of
5. Embeddings were initialized to a small norm
around σ(−5).

A.2 Word Embedding Experiments

The TEXT8 corpus contains around 17M tokens
preprocessed such that all tokens are lowercase,
numbers are spelled out, and any characters not
in a-z are replaced by whitespace. We removed
stopwords and constructed the word-cooccurrence
graph G by adding an edge between words ap-
pearing within 5 tokens of each other in the re-
sulting corpus. We used c = 0.25 for subsam-
pling frequent edges, and trained our embedding
model using the Adam optimizer with batch size
512 and learning rate 0.005. We sampled 50 nega-
tives per step for the loss. We initialized the norms
of the word embeddings around σ(−5). All hyper-
parameters were tuned to maximize performance
on the word similarity task.

A.3 Sentence Embedding Experiments
During preprocessing, only the top 20,000 most
frequent types were retained and the rest were re-
placed with the UNK type. We optimized the loss
function using Adam optimizer with a batch size
of 64. The initial learning rate was tuned be-
tween 0.005, 0.0008, 0.0001 which was then de-
cayed exponentially to half its value in 100,000
steps. When decoding we utilize a local context
from a window of K = 2 words around the tar-
get word. The embedding norms are initialized
around σ(−2).

69


