



















































Are We Modeling the Task or the Annotator? An Investigation of Annotator Bias in Natural Language Understanding Datasets


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 1161–1166,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

1161

Are We Modeling the Task or the Annotator? An Investigation of
Annotator Bias in Natural Language Understanding Datasets

Mor Geva
Tel Aviv University,
Allen Institute for AI

morgeva@mail.tau.ac.il

Yoav Goldberg
Bar-Ilan University,

Allen Institute for AI
yoav.goldberg@gmail.com

Jonathan Berant
Tel Aviv University,
Allen Institute for AI

joberant@cs.tau.ac.il

Abstract

Crowdsourcing has been the prevalent
paradigm for creating natural language under-
standing datasets in recent years. A common
crowdsourcing practice is to recruit a small
number of high-quality workers, and have
them massively generate examples. Having
only a few workers generate the majority of
examples raises concerns about data diversity,
especially when workers freely generate
sentences. In this paper, we perform a series
of experiments showing these concerns are
evident in three recent NLP datasets. We
show that model performance improves when
training with annotator identifiers as features,
and that models are able to recognize the most
productive annotators. Moreover, we show
that often models do not generalize well to ex-
amples from annotators that did not contribute
to the training set. Our findings suggest that
annotator bias should be monitored during
dataset creation, and that test set annotators
should be disjoint from training set annotators.

1 Introduction

Generating large datasets has become one of the
main drivers of progress in natural language un-
derstanding (NLU). The prevalent method for
creating new datasets is through crowdsourcing,
where examples are generated by workers (Zaidan
and Callison-Burch, 2011; Richardson et al., 2013;
Bowman et al., 2015; Rajpurkar et al., 2016;
Trischler et al., 2017). A common recent practice
is to choose a small group of workers who produce
high-quality annotations, and massively generate
examples using these workers.

Having only a few workers annotate the major-
ity of dataset examples raises concerns about data
diversity and the ability of models to generalize,
especially when the crowdsourcing task is to gen-
erate free text. If an annotator consistently uses
language patterns that correlate with the labels, a

neural model can pick up on those, which can lead
to an over-estimation of model performance.

In this paper, we continue recent efforts to un-
derstand biases that are introduced during the pro-
cess of data creation (Levy et al., 2015; Schwartz
et al., 2017; Gururangan et al., 2018; Glockner
et al., 2018; Poliak et al., 2018; Tsuchiya, 2018;
Aharoni and Goldberg, 2018; Paun et al., 2018).
We investigate this form of bias, termed annotator
bias, and perform multiple experiments over three
recent NLU datasets: MNLI (Williams et al.,
2018), OPENBOOKQA. (Mihaylov et al., 2018),
and COMMONSENSEQA (Talmor et al., 2019).

First, we establish that annotator information
improves model performance by supplying anno-
tator IDs as part of the input features. Second,
we show that models are able to recognize an-
notators that generated many examples, illustrat-
ing that annotator information is captured by the
model. Last, we test whether models generalize to
annotators that were not seen at training time. We
observe that often generalization to new annota-
tors fails, and that augmenting the training set with
a small number of examples from these annotators
substantially increases performance.

Taken together, our experiments show that an-
notator bias exists in current NLU datasets, which
can lead to problems in model generalization to
new users. Hence, we propose that annotator bias
should be monitored at data collection time and to
tackle it by having the test set include examples
from a disjoint set of annotators.

2 Crowdsourcing Practice

Crowdsourcing has become the prominent
paradigm for creating NLP datasets (Callison-
Burch et al., 2015; Sabou et al., 2014). It has been
used for various NLU tasks, including Question
Answering (Rajpurkar et al., 2018; Mihaylov



1162

et al., 2018; Dua et al., 2019), commonsense and
visual reasoning (Talmor et al., 2019; Zellers
et al., 2019; Suhr et al., 2018), and Natural
Language Inference (NLI) (Williams et al., 2018).

In a typical process, annotators are recruited and
screened (Sabou et al., 2014), often resulting in a
small group that creates most of the dataset exam-
ples. Mihaylov et al. (2018) recruited a few dozens
of qualified workers that wrote 5,957 questions.
Suhr et al. (2018) recruited 99 workers for a sen-
tence writing task, who created more than 100,000
examples. Williams et al. (2018) recruited 387
workers for writing over 400,000 sentences, while
Krishna et al. (2017) had 33,000 workers con-
tributing 1.7 million examples.

These examples demonstrate that datasets are
often constructed using a small number of anno-
tators, approximately 1 annotator per 102–103 ex-
amples. Furthermore, (see Section 3), the anno-
tator distribution is skewed with a few annotators
creating the vast majority of the dataset. In tasks
that involve creative language writing, this may
have implications on data diversity, and lead to an
over-estimation of model performance.

3 Experimental Setup

We focus on crowdsourcing tasks where workers
produce full-length sentences. We first describe
the datasets we test our hypothesis on, and then
provide details on the model and training.

Datasets We consider recent NLU datasets, for
which the annotator IDs are available.

• MNLI (matched) (Williams et al., 2018): A
NLI dataset. Each example was created by in-
troducing an annotator with a premise sentence
and asking her to write a hypothesis sentence
that is either entailed, contradicted or is neutral
with respect to the premise.

• OPENBOOKQA (Mihaylov et al., 2018): A
multiple-choice question answering dataset,
focusing on multi-hop reasoning. Each ques-
tion and its answer distractors were written by
a worker, based on a given scientific fact.

• COMMONSENSEQA (Talmor et al., 2019):
A multiple-choice question answering dataset,
focused on commonsense knowledge. Ques-
tions were written by crowdworkers, who try
to bridge between two concepts extracted from
CONCEPTNET (Speer et al., 2017)

# examples # annotators
MNLI (matched) 402,517 380
OPENBOOKQA 5,457 84
COMMONSENSEQA 11,096 132

Table 1: Statistics for datasets used in our experiments.

0 20 40 60 80 120 160 200 240
number of annotators

0
10
20
30
40
50
60
70
80
90

100

ex
am

pl
e 

co
ve

ra
ge

 (%
)

CommonsenseQA
OpenBookQA
MNLI

Figure 1: Proportion of examples covered by number
of annotators (sorted by number of annotations).

Table 1 summarizes the size and number of an-
notators who worked on each dataset. Figure 1
shows the fraction of examples covered by the
number of annotators, sorted by the number of
examples they annotated. In all datasets, and
specifically in OPENBOOKQA and COMMON-
SENSEQA, most of the examples were generated
by a small number of annotators.

Model We use the pretrained BERT-base (De-
vlin et al., 2018), a strong model obtaining close to
state-of-the-art performance on all three datasets.
We add a single linear layer over BERT outputs
and apply the same fine-tuning procedure in all ex-
periments: fine-tuning for 3 epochs, using batch
size 10, learning rate 2× 10−5, and maximum se-
quence length of 128 word pieces.

4 Experiments and Results

We now describe a series of experiments for quan-
tifying annotator bias, aiming to answer the fol-
lowing questions: 1) Do models perform better
when exposed to the annotator ID? 2) Can models
detect the annotators from their generated exam-
ples? 3) Do models generalize across annotators?

The utility of annotator information Our first
experiment aims to determine whether models
perform better given perfect information on the
annotator ID. To this end, we follow the stan-
dard way of feeding input to BERT (Devlin
et al., 2018) and concatenate the annotator ID as
an additional feature to every example in every
dataset. Formally, we replace every example (x =



1163

(w1, ..., w|x|), y) created by annotator z, with the
example ((z, w1, ..., w|x|), y), where z is a textual
unique annotator identifier, x is the input sequence
and y is the gold label.

We compare performance on the original
datasets and their new version. Adding the anno-
tator ID improves model performance across all
datasets (Table 2), showing that perfect annotator
information is useful for prediction, and there is
incentive for the model to capture this information.

Without ID With ID p-value
OPENBOOKQA 52.2 56.4 1.83e−2

COMMONSENSEQA 53.6 55.3 11.98e−2

MNLI 82.9 84.5 5.13e−7

Table 2: Model development performance, after train-
ing with/without annotator IDs as additional inputs.
Following Dror et al. (2018), p-values were calculated
using the McNemar’s test (McNemar, 1947) for MNLI
and the Bootstrap test (Berg-Kirkpatrick et al., 2012)
for OPENBOOKQA and COMMONSENSEQA.

Annotator recognition Perfect annotator infor-
mation improves performance, but it is possible
that a model can recognize the annotators from the
input sequence only, even without being exposed
to the annotator ID explicitly. In the next experi-
ment, we investigate the ability of models to rec-
ognize the annotators from the input.

To this end, we fine-tune BERT-base to predict
annotator IDs from examples. We limit the task
to 6 labels of the top-5 most productive annotators
of each dataset and an OTHER label for all other
annotators. Formally, we replace every example
(x, y) created by annotator z, with the example
(x, z̄), where z̄ = z if z is in the top-5 annotators
and z̄ = OTHER otherwise.

Figure 2 shows the F1-score for the top-5 an-
notators of every dataset (y-axis), and the frac-
tion of dataset examples created by each annotator
(x-axis). Overall, annotators who write many ex-
amples are recognized better by the model: The
model struggles to recognize MNLI annotators
with F1 scores below 0.5, and excels at recog-
nizing annotators from COMMONSENSEQA with
scores between 0.76–0.91. For the top annota-
tor of OPENBOOKQA, who created 24% of the
dataset examples, the model obtains a high F1
score of 0.8. To conclude the first two experi-
ments, annotator ID information is useful for the
downstream task, and also can be predicted with
high probability from the input for a large fraction

of the examples.

5 10 15 20 25
fraction of examples written by annotator

0.2

0.4

0.6

0.8

an
no

ta
to

r r
ec

og
ni

tio
n 

 F
1-

sc
or

e

CommonsenseQA
OpenBookQA
MNLI

Figure 2: Annotator recognition F1-scores for the top-
5 annotators of each dataset. For OPENBOOKQA only
4 data points are plotted, as the second annotator is not
in the original development set.

Generalization across annotators In our final
experiment, we examine whether trained models
generalize to new annotators. To address this
question, we re-split each dataset, creating a train-
ing and development set with disjoint annotators:
Given a dataset with example set S, we denote by
Sz ⊂ S the subset of examples created by an-
notator z. Similarly, for a set of annotators Z ,
let SZ =

⋃
z∈Z Sz . We rank annotators by the

number of examples they generated, and for each
dataset S, we create two types of data splits. For
each annotator z in the top-5 annotators, we cre-
ate a single-annotator data split with S\Sz and
Sz as the train and development sets, respectively.
Namely, we consider the examples created by an-
notator z as the development set, while using all
other examples for training. In addition, we pick 5
sets of 5 annotators, who annotated a small num-
ber of examples, and for each such set Z , we
create a multi-annotator split with S\SZ and SZ
as the train and development sets, respectively.
Namely, we consider the examples created by the
5 annotators Z as the development set, while us-
ing all other examples for training. Overall, there
are 5 single-annotator splits and 5 multi-annotator
splits for each dataset.

We fine-tune BERT-base and evaluate it on the
development set, and compare the results to a ran-
dom data split of identical size. We repeat ev-
ery experiment 3 times, except for multi-annotator
experiments on OPENBOOKQA and COMMON-
SENSEQA which we repeat 9 times due to high
variance. Table 3 shows the mean and standard de-
viation of performance difference (p.d.) between
each annotator(s) split and its corresponding ran-



1164

dom split, where negative numbers indicate that
performance on the annotator split was lower.

Our clearest finding is that in OPENBOOKQA
performance on the the multi-annotator split is
dramatically lower than on a random split in all
5 annotator sets, where performance drops by
up to 23 accuracy points. This shows that the
model does not generalize to examples generated
by unseen annotators. In the other datasets, re-
sults on the multi-annotator split are more var-
ied, where performance drops in roughly half the
cases, sometimes substantially – up to 10 accuracy
points in COMMONSENSEQA and 5 in MNLI.

In the single-annotator splits, in roughly half
the cases performance on the annotator split was
lower than the random split. However, measuring
p.d. only for single annotators might be mislead-
ing, because specific annotators vary in the diffi-
culty of examples they produce. Thus, running a
model on a new annotator that produces easy ex-
amples will not result in decreased performance.
Next, we propose a more fine-grained experiment
that controls for these two confounding factors.

COMMONSENSEQA-single COMMONSENSEQA-multi

4.2± 0.7 17.1% −9.5± 8.3 0.9%
7.7± 1.9 14.5% 6.5± 7.0 0.6%
−2.8± 1.3 13.8% −6.1± 8.5 0.5%
−3.8± 0.9 13.6% 1.6± 10.8 0.4%
1.6± 2.7 10.8% 1.8± 10.5 0.4%
OPENBOOKQA-single OPENBOOKQA-multi

−0.9± 2.7 24% −14.7± 6.2 2.4%
−13.5± 1.7 7.8% −19.4± 8.5 1.7%
−5.8± 0.7 7.3% −12.4± 5.5 1.2%
8.2± 5.2 7.1% −13.7± 8.5 1%
3.1± 1.1 6.6% −23.3± 7.8 0.8%

MNLI-single MNLI-multi

−2.5± 0.5 9.6% 2.5± 0.8 1.8%
−3.0± 0.6 4.5% −1.1± 0.9 1.5%
2.9± 0.2 2.8% −4.6± 0.8 1.5%
0.8± 0.7 2.7% −1.5± 0.2 1.5%
4.6± 0.2 2.4% 0.5± 0.2 1.5%

Table 3: Performance difference (p.d.) between single-
and multi- annotator splits and random splits of identi-
cal size. Each cell shows the p.d. mean and standard
deviation, as well as the development set relative size.

Separating annotator bias from annotator dif-
ficulty To mitigate the effect of annotator dif-
ficulty, we perform an augmentation experiment.
Assume a development set Sdev, for which per-
formance is low. Our hypothesis is that if Sdev
is inherently difficult, then moving a small por-
tion of examples from Sdev to the training set Strain
should not change performance on Sdev substan-

0 10 20 30

10

0

10

20
OpenBookQA

0 10 20 30

0

10

20

CommonsenseQA

0 10 20 30
4

2

0

2

4

MNLI

augmentation ratio (%)

Figure 3: Performance difference between single-
annotator splits and random splits of identical size. The
x-axis indicates the fraction of examples taken from the
development set to augment the training set.

tially. However, if performance on Sdev is low due
to annotator bias, then moving examples to Strain
would expose the model to the annotator and per-
formance should go up.

For every single-annotator data split Strain, Sdev,
we perform a series of augmentation experiments,
where we move a random fraction of k examples
from Sdev to Strain, for k = 0.1, 0.2, 0.3. We keep
the size of Strain constant by randomly removing
examples from it before augmentation. We repeat
experiments multiple times as before, and report
the p.d mean and standard deviation in Figure 3.

Results for both COMMONSENSEQA and
OPENBOOKQA show a rapid increase of 10-
20 accuracy point for all top-5 annotators, given
only a small number of their generated exam-
ples. This shows that the examples generated
by these annotators are not inherently difficult,
and that the model can substantially improve per-
formance by being exposed to the language that
the annotators generate. Conversely, performance
changes are marginal for MNLI, suggesting gen-
eralization patterns are mostly due to example
difficulty. The different results for MNLI com-
pared to those observed for OPENBOOKQA and
COMMONSENSEQA may be attributed to the less-
skewed annotator distribution and large number of
examples in MNLI (see Figure 1 and Table 1),
which make the model more robust to small per-
turbations in the data distribution.



1165

5 Discussion and Conclusions

This study set out to investigate whether preva-
lent crowdsourcing practices for building NLU
datasets introduce an annotator bias in the data that
leads to an over-estimation of model performance.
We established that perfect annotator information
can improve model performance, and that the lan-
guage generated by annotators often reveals their
identity. Moreover, we tested the ability of mod-
els to generalize to unseen annotators in three re-
cent NLU datasets, and found that in two of these
datasets annotator bias is evident. These findings
may be explained by the annotator distributions
and the size of these datasets. Skewed annotator
distributions with only a few annotators creating
the vast majority of examples are more prone to
biases.

Our results suggest that annotator bias should be
monitored in crowdsourcing tasks involving free
text generation by annotators. This can be done
by testing model performance on new annotators
during data collection. Moreover, to tackle anno-
tator bias, we propose that training set annotators
should be separated from test-set annotators.

Acknowledgments

This research was partially supported by The Is-
rael Science Foundation grant 942/16, The Blavat-
nik Computer Science Research Fund and The
Yandex Initiative for Machine Learning. We thank
Sam Bowman from NYU University and Alon
Talmor from Tel Aviv University for providing
us the annotation information of the MNLI and
COMMONSENSEQA datasets. This work was
completed in partial fulfillment for the Ph.D de-
gree of the first author.

References
Roee Aharoni and Yoav Goldberg. 2018. Split and

rephrase: Better evaluation and stronger baselines.
In Proceedings of the 56th Annual Meeting of the
Association for Computational Linguistics (Volume
2: Short Papers), pages 719–724. Association for
Computational Linguistics.

Taylor Berg-Kirkpatrick, David Burkett, and Dan
Klein. 2012. An empirical investigation of statistical
significance in nlp. In Proceedings of the 2012 Joint
Conference on Empirical Methods in Natural Lan-
guage Processing and Computational Natural Lan-
guage Learning, pages 995–1005. Association for
Computational Linguistics.

S. Bowman, G. Angeli, C. Potts, and C. D. Manning.
2015. A large annotated corpus for learning natural
language inference. In Empirical Methods in Natu-
ral Language Processing (EMNLP).

Chris Callison-Burch, Lyle Ungar, and Ellie Pavlick.
2015. Crowdsourcing for NLP. In Proceedings of
the 2015 Conference of the North American Chap-
ter of the Association for Computational Linguistics:
Tutorial Abstracts, pages 2–3.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805.

Rotem Dror, Gili Baumer, Segev Shlomov, and Roi Re-
ichart. 2018. The hitchhikers guide to testing statis-
tical significance in natural language processing. In
Proceedings of the 56th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), pages 1383–1392.

Dheeru Dua, Yizhong Wang, Pradeep Dasigi, Gabriel
Stanovsky, Sameer Singh, and Matt Gardner. 2019.
DROP: A reading comprehension benchmark re-
quiring discrete reasoning over paragraphs. In Proc.
of NAACL.

Max Glockner, Vered Shwartz, and Yoav Goldberg.
2018. Breaking NLI systems with sentences that re-
quire simple lexical inferences. In Proceedings of
the 56th Annual Meeting of the Association for Com-
putational Linguistics (Volume 2: Short Papers),
pages 650–655, Melbourne, Australia. Association
for Computational Linguistics.

S. Gururangan, S. Swayamdipta, O. Levy, R. Schwartz,
S. R. Bowman, and N. A. Smith. 2018. Annotation
artifacts in natural language inference data. arXiv
preprint arXiv:1803.02324.

Ranjay Krishna, Yuke Zhu, Oliver Groth, Justin John-
son, Kenji Hata, Joshua Kravitz, Stephanie Chen,
Yannis Kalantidis, Li-Jia Li, David A Shamma,
et al. 2017. Visual Genome: Connecting language
and vision using crowdsourced dense image anno-
tations. International Journal of Computer Vision,
123(1):32–73.

Omer Levy, Steffen Remus, Chris Biemann, and Ido
Dagan. 2015. Do supervised distributional meth-
ods really learn lexical inference relations? In Pro-
ceedings of the 2015 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
970–976.

Quinn McNemar. 1947. Note on the sampling error
of the difference between correlated proportions or
percentages. Psychometrika, 12(2):153–157.

Todor Mihaylov, Peter Clark, Tushar Khot, and Ashish
Sabharwal. 2018. Can a suit of armor conduct elec-
tricity? A new dataset for open book question an-
swering. In In proceedings of the 2018 Conference

https://www.aclweb.org/anthology/P18-2103
https://www.aclweb.org/anthology/P18-2103


1166

on Empirical Methods in Natural Language Pro-
cessing (EMNLP).

Silviu Paun, Bob Carpenter, Jon Chamberlain, Dirk
Hovy, Udo Kruschwitz, and Massimo Poesio. 2018.
Comparing bayesian models of annotation. Trans-
actions of the Association for Computational Lin-
guistics, 6:571–585.

A. Poliak, J. Naradowsky, A. Haldar, R. Rudinger,
and B. V. Durme. 2018. Hypothesis only base-
lines in Natural Language Inference. arXiv preprint
arXiv:1805.01042.

P. Rajpurkar, J. Zhang, K. Lopyrev, and P. Liang. 2016.
SQuAD: 100,000+ questions for machine compre-
hension of text. In Empirical Methods in Natural
Language Processing (EMNLP).

Pranav Rajpurkar, Robin Jia, and Percy Liang. 2018.
Know what you don’t know: Unanswerable ques-
tions for squad. In Association for Computational
Linguistics (ACL).

M. Richardson, C. J. Burges, and E. Renshaw. 2013.
MCTest: A challenge dataset for the open-domain
machine comprehension of text. In Empirical Meth-
ods in Natural Language Processing (EMNLP),
pages 193–203.

Marta Sabou, Kalina Bontcheva, Leon Derczynski,
and Arno Scharl. 2014. Corpus annotation through
crowdsourcing: Towards best practice guidelines. In
LREC, pages 859–866.

R. Schwartz, M. Sap, Y. Konstas, L. Zilles, Y. Choi,
and N. A. Smith. 2017. The effect of different writ-
ing tasks on linguistic style: A case study of the
ROC story cloze task. In Computational Natural
Language Learning (CoNLL).

Robyn Speer, Joshua Chin, and Catherine Havasi.
2017. Conceptnet 5.5: An open multilingual graph
of general knowledge. In Thirty-First AAAI Confer-
ence on Artificial Intelligence.

Alane Suhr, Stephanie Zhou, Iris Zhang, Huajun Bai,
and Yoav Artzi. 2018. A corpus for reasoning about
natural language grounded in photographs. CoRR,
abs/1811.00491.

A. Talmor, J. Herzig, N. Lourie, and J. Berant.
2019. CommonsenseQA: A question answering
challenge targeting commonsense knowledge. In
North American Association for Computational Lin-
guistics (NAACL).

A. Trischler, T. Wang, X. Yuan, J. Harris, A. Sordoni,
P. Bachman, and K. Suleman. 2017. NewsQA: A
machine comprehension dataset. In Workshop on
Representation Learning for NLP.

Masatoshi Tsuchiya. 2018. Performance impact
caused by hidden bias of training data for recog-
nizing textual entailment. In Proceedings of the

Eleventh International Conference on Language Re-
sources and Evaluation (LREC 2018), Miyazaki,
Japan.

Adina Williams, Nikita Nangia, and Samuel Bowman.
2018. A broad-coverage challenge corpus for sen-
tence understanding through inference. In Proceed-
ings of the 2018 Conference of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies, Volume 1
(Long Papers), pages 1112–1122. Association for
Computational Linguistics.

Omar F. Zaidan and Chris Callison-Burch. 2011.
Crowdsourcing translation: Professional quality
from non-professionals. In Proceedings of the 49th
Annual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies.

Rowan Zellers, Yonatan Bisk, Ali Farhadi, and Yejin
Choi. 2019. From recognition to cognition: Vi-
sual commonsense reasoning. In The IEEE Confer-
ence on Computer Vision and Pattern Recognition
(CVPR).

https://doi.org/10.1162/tacl_a_00040
http://aclweb.org/anthology/N18-1101
http://aclweb.org/anthology/N18-1101

