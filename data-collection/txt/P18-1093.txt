



















































Reasoning with Sarcasm by Reading In-Between


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 1010–1020
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

1010

Reasoning with Sarcasm by Reading In-between

Yi Tay†, Luu Anh Tuanψ, Siu Cheung Huiφ, Jian Suδ
†ytay017@e.ntu.edu.sg

ψat.luu@i2r.a-star.edu.sg
φasschui@ntu.edu.sg

δsujian@i2r.a-star.edu.sg
†,φSchool of Computer Science and Engineering, Nanyang Technological University

ψ,δA*Star, Institute for Infocomm Research, Singapore

Abstract

Sarcasm is a sophisticated speech act
which commonly manifests on social
communities such as Twitter and Reddit.
The prevalence of sarcasm on the social
web is highly disruptive to opinion min-
ing systems due to not only its tendency
of polarity flipping but also usage of figu-
rative language. Sarcasm commonly man-
ifests with a contrastive theme either be-
tween positive-negative sentiments or be-
tween literal-figurative scenarios. In this
paper, we revisit the notion of model-
ing contrast in order to reason with sar-
casm. More specifically, we propose an
attention-based neural model that looks in-
between instead of across, enabling it to
explicitly model contrast and incongruity.
We conduct extensive experiments on six
benchmark datasets from Twitter, Reddit
and the Internet Argument Corpus. Our
proposed model not only achieves state-
of-the-art performance on all datasets but
also enjoys improved interpretability.

1 Introduction

Sarcasm, commonly defined as ‘An ironical taunt
used to express contempt’, is a challenging NLP
problem due to its highly figurative nature. The us-
age of sarcasm on the social web is prevalent and
can be frequently observed in reviews, microblogs
(tweets) and online forums. As such, the battle
against sarcasm is also regularly cited as one of the
key challenges in sentiment analysis and opinion
mining applications (Pang et al., 2008). Hence, it
is both imperative and intuitive that effective sar-
casm detectors can bring about numerous benefits
to opinion mining applications.

Sarcasm is often associated to several linguis-
tic phenomena such as (1) an explicit contrast be-
tween sentiments or (2) disparity between the con-
veyed emotion and the author’s situation (context).
Prior work has considered sarcasm to be a contrast
between a positive and negative sentiment (Riloff
et al., 2013). Consider the following examples:

1. I absolutely love to be ignored!

2. Yay!!! The best thing to wake up to is my
neighbor’s drilling.

3. Perfect movie for people who can’t fall
asleep.

Given the examples, we make a crucial obser-
vation - Sarcasm relies a lot on the semantic rela-
tionships (and contrast) between individual words
and phrases in a sentence. For instance, the rela-
tionships between phrases {love, ignored}, {best,
drilling} and {movie, asleep} (in the examples
above) richly characterize the nature of sarcasm
conveyed, i.e., word pairs tend to be contradictory
and more often than not, express a juxtaposition
of positive and negative terms. This concept is
also explored in (Joshi et al., 2015) in which the
authors refer to this phenomena as ‘incongruity’.
Hence, it would be useful to capture the relation-
ships between selected word pairs in a sentence,
i.e., looking in-between.

State-of-the-art sarcasm detection systems
mainly rely on deep and sequential neural net-
works (Ghosh and Veale, 2016; Zhang et al.,
2016). In these works, compositional encoders
such as gated recurrent units (GRU) (Cho et al.,
2014) or long short-term memory (LSTM)
(Hochreiter and Schmidhuber, 1997) are often
employed, with the input document being parsed
one word at a time. This has several shortcomings
for the sarcasm detection task. Firstly, there is



1011

no explicit interaction between word pairs, which
hampers its ability to explicitly model contrast, in-
congruity or juxtaposition of situations. Secondly,
it is difficult to capture long-range dependencies.
In this case, contrastive situations (or sentiments)
which are commonplace in sarcastic language
may be hard to detect with simple sequential
models.

To overcome the weaknesses of standard se-
quential models such as recurrent neural networks,
our work is based on the intuition that model-
ing intra-sentence relationships can not only im-
prove classification performance but also pave the
way for more explainable neural sarcasm detec-
tion methods. In other words, our key intuition
manifests itself in the form of an attention-based
neural network. While the key idea of most neu-
ral attention mechanisms is to focus on relevant
words and sub-phrases, it merely looks across and
does not explicitly capture word-word relation-
ships. Hence, it suffers from the same shortcom-
ings as sequential models.

In this paper, our aim is to combine the effec-
tiveness of state-of-the-art recurrent models while
harnessing the intuition of looking in-between. We
propose a multi-dimensional intra-attention recur-
rent network that models intricate similarities be-
tween each word pair in the sentence. In other
words, our novel deep learning model aims to cap-
ture ‘contrast’ (Riloff et al., 2013) and ‘incon-
gruity’ (Joshi et al., 2015) within end-to-end neu-
ral networks. Our model can be thought of self-
targeted co-attention (Xiong et al., 2016), which
allows our model to not only capture word-word
relationships but also long-range dependencies.
Finally, we show that our model produces inter-
pretable attention maps which aid in the explain-
ability of model outputs. To the best of our knowl-
edge, our model is the first attention model that
can produce explainable results in the sarcasm de-
tection task.

Briefly, the prime contributions of this work can
be summarized as follows:

• We propose a new state-of-the-art method for
sarcasm detection. Our proposed model, the
Multi-dimensional Intra-Attention Recurrent
Network (MIARN) is strongly based on the
intuition of compositional learning by lever-
aging intra-sentence relationships. To the
best of our knowledge, none of the existing
state-of-the-art models considered exploiting

intra-sentence relationships, solely relying on
sequential composition.

• We conduct extensive experiments on mul-
tiple benchmarks from Twitter, Reddit and
the Internet Argument Corpus. Our proposed
MIARN achieves highly competitive perfor-
mance on all benchmarks, outperforming ex-
isting state-of-the-art models such as GRNN
(Zhang et al., 2016) and CNN-LSTM-DNN
(Ghosh and Veale, 2016).

2 Related Work

Sarcasm is a complex linguistic phenomena that
have long fascinated both linguists and NLP re-
searchers. After all, a better computational un-
derstanding of this complicated speech act could
potentially bring about numerous benefits to ex-
isting opinion mining applications. Across the
rich history of research on sarcasm, several theo-
ries such as the Situational Disparity Theory (Wil-
son, 2006) and the Negation Theory (Giora, 1995)
have emerged. In these theories, a common theme
is a motif that is strongly grounded in contrast,
whether in sentiment, intention, situation or con-
text. (Riloff et al., 2013) propagates this premise
forward, presenting an algorithm strongly based
on the intuition that sarcasm arises from a juxta-
position of positive and negative situations.

2.1 Sarcasm Detection
Naturally, many works in this area have treated
the sarcasm detection task as a standard text clas-
sification problem. An extremely comprehensive
overview can be found at (Joshi et al., 2017). Fea-
ture engineering approaches were highly popular,
exploiting a wide diverse range of features such
as syntactic patterns (Tsur et al., 2010), senti-
ment lexicons (González-Ibánez et al., 2011), n-
gram (Reyes et al., 2013), word frequency (Barbi-
eri et al., 2014), word shape and pointedness fea-
tures (Ptáček et al., 2014), readability and flips
(Rajadesingan et al., 2015), etc. Notably, there
have been quite a reasonable number of works
that propose features based on similarity and con-
trast. (Hernández-Farı́as et al., 2015) measured
the Wordnet based semantic similarity between
words. (Joshi et al., 2015) proposed a framework
based on explicit and implicit incongruity, utiliz-
ing features based on positive-negative patterns.
(Joshi et al., 2016) proposed similarity features
based on word embeddings.



1012

2.2 Deep Learning for Sarcasm Detection

Deep learning based methods have recently gar-
nered considerable interest in many areas of NLP
research. In our problem domain, (Zhang et al.,
2016) proposed a recurrent-based model with a
gated pooling mechanism for sarcasm detection
on Twitter. (Ghosh and Veale, 2016) proposed
a convolutional long-short-term memory network
(CNN-LSTM-DNN) that achieves state-of-the-art
performance.

While our work focuses on document-only sar-
casm detection, several notable works have pro-
posed models that exploit personality information
(Ghosh and Veale, 2017) and user context (Amir
et al., 2016). Novel methods for sarcasm de-
tection such as gaze / cognitive features (Mishra
et al., 2016, 2017) have also been explored. (Peled
and Reichart, 2017) proposed a novel framework
based on neural machine translation to convert a
sequence from sarcastic to non-sarcastic. (Felbo
et al., 2017) proposed a layer-wise training scheme
that utilizes emoji-based distant supervision for
sentiment analysis and sarcasm detection tasks.

2.3 Attention Models for NLP

In the context of NLP, the key idea of neural
attention is to soft select a sequence of words
based on their relative importance to the task at
hand. Early innovations in attentional paradigms
mainly involve neural machine translation (Luong
et al., 2015; Bahdanau et al., 2014) for aligning
sequence pairs. Attention is also commonplace
in many NLP applications such as sentiment clas-
sification (Chen et al., 2016; Yang et al., 2016),
aspect-level sentiment analysis (Tay et al., 2018s,
2017b; Chen et al., 2017) and entailment classifi-
cation (Rocktäschel et al., 2015). Co-attention /
Bi-Attention (Xiong et al., 2016; Seo et al., 2016)
is a form of pairwise attention mechanism that was
proposed to model query-document pairs. Intra-
attention can be interpreted as a self-targetted co-
attention and is seeing a lot promising results in
many recent works (Vaswani et al., 2017; Parikh
et al., 2016; Tay et al., 2017a; Shen et al., 2017).
The key idea is to model a sequence against itself,
learning to attend while capturing long term de-
pendencies and word-word level interactions. To
the best of our knowledge, our work is not only
the first work that only applies intra-attention to
sarcasm detection but also the first attention model
for sarcasm detection.

3 Our Proposed Approach

In this section, we describe our proposed model.
Figure 1 illustrates our overall model architecture.

3.1 Input Encoding Layer
Our model accepts a sequence of one-hot encoded
vectors as an input. Each one-hot encoded vec-
tor corresponds to a single word in the vocabulary.
In the input encoding layer, each one-hot vector is
converted into a low-dimensional vector represen-
tation (word embedding). The word embeddings
are parameterized by an embedding layer W ∈
Rn×|V |. As such, the output of this layer is a se-
quence of word embeddings, i.e., {w1, w2, · · ·w`}
where ` is a predefined maximum sequence length.

3.2 Multi-dimensional Intra-Attention
In this section, we describe our multi-dimensional
intra-attention mechanism for sarcasm detec-
tion. We first begin by describing the standard
single-dimensional intra-attention. The multi-
dimensional adaptation will be introduced later in
this section. The key idea behind this layer is
to look in-between, i.e., modeling the semantics
between each word in the input sequence. We
first begin by modeling the relationship of each
word pair in the input sequence. A simple way to
achieve this is to use a linear1 transformation layer
to project the concatenation of each word embed-
ding pair into a scalar score as follows:

sij =Wa([wi;wj ]) + ba (1)

where Wa ∈ R2n×1, ba ∈ R are the parameters
of this layer. [.; .] is the vector concatenation op-
erator and sij is a scalar representing the affinity
score between word pairs (wi, wj). We can easily
observe that s is a symmetrical matrix of `× ` di-
mensions. In order to learn attention vector a, we
apply a row-wise max-pooling operator on matrix
s.

a = softmax(max
row

s) (2)

where a ∈ R` is a vector representing the
learned intra-attention weights. Then, the vector
a is employed to learn weighted representation of
{w1, w2 · · ·w`} as follows:

va =
∑̀
i=1

wiai (3)

1Early experiments found that adding nonlinearity here
may degrade performance.



1013

where v ∈ Rn is the intra-attentive representa-
tion of the input sequence. While other choices
of pooling operators may be also employed (e.g.,
mean-pooling over max-pooling), the choice of
max-pooling is empirically motivated. Intuitively,
this attention layer learns to pay attention based on
a word’s largest contribution to all words in the se-
quence. Since our objective is to highlight words
that might contribute to the contrastive theories of
sarcasm, a more discriminative pooling operator
is desirable. Notably, we also mask values of s
where i = j such that we do not allow the rela-
tionship scores of a word with respect to itself to
influence the overall attention weights.

Furthermore, our network can be considered as
an ‘inner’ adaptation of neural attention, model-
ing intra-sentence relationships between the raw
word representations instead of representations
that have been compositionally manipulated. This
allows word-to-word similarity to be modeled ‘as
it is’ and not be influenced by composition. For
example, when using the outputs of a composi-
tional encoder (e.g., LSTM), matching words n
and n + 1 might not be meaningful since they
would be relatively similar in terms of semantic
composition. For relatively short documents (such
as tweets), it is also intuitive that attention typi-
cally focuses on the last hidden representation.

Intuitively, the relationships between two words
is often not straightforward. Words are complex
and often hold more than one meanings (or word
senses). As such, it might be beneficial to model
multiple views between two words. This can be
modeled by representing the word pair interac-
tion with a vector instead of a scalar. As such,
we propose a multi-dimensional adaptation of the
intra-attention mechanism. The key idea here is
that each word pair is projected down to a low-
dimensional vector before we compute the affin-
ity score, which allows it to not only capture one
view (one scalar) but also multiple views. A mod-
ification to Equation (1) constitutes our Multi-
Dimensional Intra-Attention variant.

sij =Wp(ReLU(Wq([wi;wj ]) + bq)) + bp (4)

where Wq ∈ Rn×k,Wp ∈ Rk×1, bq ∈ Rk, bp ∈ R
are the parameters of this layer. The final intra-
attentive representation is then learned with Equa-
tion (2) and Equation (3) which we do not repeat
here for the sake of brevity.

Word 
Embeddings

I

absolutely

love

to

ignored

be

Multi-Dimensional 
Intra-Attention

I absolutely love to be ignored

Dense Layer

Compositional
Representation

Softmax / Attention

I
ab

so
lu

te
ly

lo
ve

to
be

ig
no

re
d

Dense Layer

Softmax

Intra-Attentive
Representation

LSTM
Encoder

Figure 1: High level overview of our proposed MIARN ar-
chitecture. MIARN learns two representations, one based
on intra-sentence relationships (intra-attentive) and another
based on sequential composition (LSTM). Both views are
used for prediction.

3.3 Long Short-Term Memory Encoder
While we are able to simply use the learned repre-
sentation v for prediction, it is clear that v does not
encode compositional information and may miss
out on important compositional phrases such as
‘not happy’. Clearly, our intra-attention mecha-
nism simply considers a word-by-word interaction
and does not model the input document sequen-
tially. As such, it is beneficial to use a separate
compositional encoder for this purpose, i.e., learn-
ing compositional representations. To this end,
we employ the standard Long Short-Term Mem-
ory (LSTM) encoder. The output of an LSTM en-
coder at each time-step can be briefly defined as:

hi = LSTM(w, i), ∀i ∈ [1, . . . `] (5)

where ` represents the maximum length of the se-
quence and hi ∈ Rd is the hidden output of the
LSTM encoder at time-step i. d is the size of the
hidden units of the LSTM encoder. LSTM en-
coders are parameterized by gating mechanisms
learned via nonlinear transformations. Since



1014

LSTMs are commonplace in standard NLP appli-
cations, we omit the technical details for the sake
of brevity. Finally, to obtain a compositional rep-
resentation of the input document, we use vc = h`
which is the last hidden output of the LSTM en-
coder. Note that the inputs to the LSTM en-
coder are the word embeddings right after the in-
put encoding layer and not the output of the intra-
attention layer. We found that applying an LSTM
on the intra-attentively scaled representations do
not yield any benefits.

3.4 Prediction Layer
The inputs to the final prediction layer are two
representations, namely (1) the intra-attentive rep-
resentation (va ∈ Rn) and (2) the compositional
representation (vc ∈ Rd). This layer learns a joint
representation of these two views using a nonlin-
ear projection layer.

v = ReLU(Wz([va; vc]) + bz) (6)

where Wz ∈ R(d+n)×d and bz ∈ Rd. Finally, we
pass v into a Softmax classification layer.

ŷ = Softmax(Wf v + bf ) (7)

where Wf ∈ Rd×2, bf ∈ R2 are the parameters
of this layer. ŷ ∈ R2 is the output layer of our
proposed model.

3.5 Optimization and Learning
Our network is trained end-to-end, optimizing the
standard binary cross-entropy loss function.

J = −
N∑
i=1

[yi log ŷi + (1− yi) log(1− ŷi)] +R (8)

where J is the cost function, ŷ is the output of the
network, R = ||θ||L2 is the L2 regularization and
λ is the weight of the regularizer.

4 Empirical Evaluation

In this section, we describe our experimental setup
and results. Our experiments were designed to an-
swer the following research questions (RQs).

• RQ1 - Does our proposed approach outper-
form existing state-of-the-art models?

• RQ2 - What are the impacts of some
of the architectural choices of our model?
How much does intra-attention contribute

to the model performance? Is the Multi-
Dimensional adaptation better than the
Single-Dimensional adaptation?

• RQ3 - What can we interpret from the intra-
attention layers? Does this align with our hy-
pothesis about looking in-between and mod-
eling contrast?

4.1 Datasets
We conduct our experiments on six publicly avail-
able benchmark datasets which span across three
well-known sources.

• Tweets - Twitter2 is a microblogging plat-
form which allows users to post statuses
of less than 140 characters. We use two
collections for sarcasm detection on tweets.
More specifically, we use the dataset ob-
tained from (1) (Ptáček et al., 2014) in which
tweets are trained via hashtag based semi-
supervised learning, i.e., hashtags such as
#not, #sarcasm and #irony are marked as sar-
castic tweets and (2) (Riloff et al., 2013) in
which Tweets are hand annotated and manu-
ally checked for sarcasm. For both datasets,
we retrieve. Tweets using the Twitter API us-
ing the provided tweet IDs.

• Reddit - Reddit3 is a highly popular social
forum and community. Similar to Tweets,
sarcastic posts are obtained via the tag ‘/s’
which are marked by the authors themselves.
We use two Reddit datasets which are ob-
tained from the subreddits /r/movies and
/r/technology respectively. Datasets are sub-
sets from (Khodak et al., 2017).

• Debates - We use two datasets4 from the In-
ternet Argument Corpus (IAC) (Lukin and
Walker, 2017) which have been hand anno-
tated for sarcasm. This dataset, unlike the
first two, is mainly concerned with long text
and provides a diverse comparison from the
other datasets. The IAC corpus was designed
for research on political debates on online fo-
rums. We use the V1 and V2 versions of the
sarcasm corpus which are denoted as IAC-V1
and IAC-V2 respectively.

The statistics of the datasets used in our experi-
ments is reported in Table 1.

2https://twitter.com
3https://reddit.com
4https://nlds.soe.ucsc.edu/sarcasm1

https://twitter.com
https://reddit.com
https://nlds.soe.ucsc.edu/sarcasm1


1015

Dataset Train Dev Test Avg `
Tweets (Ptáček et al.) 44017 5521 5467 18
Tweets (Riloff et al.) 1369 195 390 14
Reddit (/r/movies) 5895 655 1638 12

Reddit (/r/technology) 16146 1793 4571 11
Debates IAC-V1 3716 464 466 54
Debates IAC-V2 1549 193 193 64

Table 1: Statistics of datasets used in our experiments.

4.2 Compared Methods
We compare our proposed model with the follow-
ing algorithms.

• NBOW is a simple neural bag-of-words
baseline that sums all the word embeddings
and passes the summed vector into a simple
logistic regression layer.

• CNN is a vanilla Convolutional Neural Net-
work with max-pooling. CNNs are con-
sidered as compositional encoders that cap-
ture n-gram features by parameterized sliding
windows. The filter width is 3 and number of
filters f = 100.

• LSTM is a vanilla Long Short-Term Memory
Network. The size of the LSTM cell is set to
d = 100.

• ATT-LSTM (Attention-based LSTM) is a
LSTM model with a neural attention mecha-
nism applied to all the LSTM hidden outputs.
We use a similar adaptation to (Yang et al.,
2016), albeit only at the document-level.

• GRNN (Gated Recurrent Neural Network)
is a Bidirectional Gated Recurrent Unit
(GRU) model that was proposed for sarcasm
detection by (Zhang et al., 2016). GRNN
uses a gated pooling mechanism to aggregate
the hidden representations from a standard
BiGRU model. Since we only compare on
document-level sarcasm detection, we do not
use the variant of GRNN that exploits user
context.

• CNN-LSTM-DNN (Convolutional LSTM
+ Deep Neural Network), proposed by
(Ghosh and Veale, 2016), is the state-of-the-
art model for sarcasm detection. This model
is a combination of a CNN, LSTM and Deep
Neural Network via stacking. It stacks two
layers of 1D convolution with 2 LSTM lay-
ers. The output passes through a deep neural
network (DNN) for prediction.

Both CNN-LSTM-DNN (Ghosh and Veale, 2016)
and GRNN (Zhang et al., 2016) are state-of-
the-art models for document-level sarcasm de-
tection and have outperformed numerous neu-
ral and non-neural baselines. In particular, both
works have well surpassed feature-based mod-
els (Support Vector Machines, etc.), as such we
omit comparisons for the sake of brevity and fo-
cus comparisons with recent neural models in-
stead. Moreover, since our work focuses only on
document-level sarcasm detection, we do not com-
pare against models that use external information
such as user profiles, context, personality informa-
tion (Ghosh and Veale, 2017) or emoji-based dis-
tant supervision (Felbo et al., 2017).

For our model, we report results on both
multi-dimensional and single-dimensional intra-
attention. The two models are named as MIARN
and SIARN respectively.

4.3 Implementation Details and Metrics

We adopt standard the evaluation metrics for
the sarcasm detection task, i.e., macro-averaged
F1 and accuracy score. Additionally, we also
report precision and recall scores. All deep
learning models are implemented using Tensor-
Flow (Abadi et al., 2015) and optimized on a
NVIDIA GTX1070 GPU. Text is preprocessed
with NLTK5’s Tweet tokenizer. Words that only
appear once in the entire corpus are removed and
marked with the UNK token. Document lengths
are truncated at 40, 20, 80 tokens for Twitter, Red-
dit and Debates dataset respectively. Mentions of
other users on the Twitter dataset are replaced by
‘@USER’. Documents with URLs (i.e., contain-
ing ‘http’) are removed from the corpus. Docu-
ments with less than 5 tokens are also removed.
The learning optimizer used is the RMSProp with
an initial learning rate of 0.001. The L2 regu-
larization is set to 10−8. We initialize the word
embedding layer with GloVe (Pennington et al.,
2014). We use the GloVe model trained on 2B
Tweets for the Tweets and Reddit dataset. The
Glove model trained on Common Crawl is used
for the Debates corpus. The size of the word em-
beddings is fixed at d = 100 and are fine-tuned
during training. In all experiments, we use a de-
velopment set to select the best hyperparameters.
Each model is trained for a total of 30 epochs
and the model is saved each time the performance

5https://nltk.org

https://nltk.org


1016

Tweets (Ptáček et al., 2014) Tweets (Riloff et al., 2013)
Model P R F1 Acc P R F1 Acc
NBOW 80.02 79.06 79.43 80.39 71.28 62.37 64.13 79.23
Vanilla CNN 82.13 79.67 80.39 81.65 71.04 67.13 68.55 79.48
Vanilla LSTM 84.62 83.21 83.67 84.50 67.33 67.20 67.27 76.27
Attention LSTM 84.16 85.10 83.67 84.40 68.78 68.63 68.71 77.69
GRNN (Zhang et al.) 84.06 83.02 83.43 84.20 66.32 64.74 65.40 76.41
CNN-LSTM-DNN (Ghosh and Veale) 84.06 83.45 83.74 84.39 69.76 66.62 67.81 78.72
SIARN (this paper) 85.02 84.27 84.59 85.24 73.82 73.26 73.24 82.31
MIARN (this paper) 86.13 85.79 86.00 86.47 73.34 68.34 70.10 80.77

Table 2: Experimental Results on Tweets datasets. Best result in is boldface and second best is underlined. Best performing
baseline is in italics.

Reddit (/r/movies) Reddit (/r/technology)
Model P R F1 Acc P R F1 Acc
NBOW 67.33 66.56 66.82 67.52 65.45 65.62 65.52 66.55
Vanilla CNN 65.97 65.97 65.97 66.24 65.88 62.90 62.85 66.80
Vanilla LSTM 67.57 67.67 67.32 67.34 66.94 67.22 67.03 67.92
Attention LSTM 68.11 67.87 67.94 68.37 68.20 68.78 67.44 67.22
GRNN (Zhang et al.) 66.16 66.16 66.16 66.42 66.56 66.73 66.66 67.65
CNN-LSTM-DNN (Ghosh and Veale) 68.27 67.87 67.95 68.50 66.14 66.73 65.74 66.00
SIARN (this paper) 69.59 69.48 69.52 69.84 69.35 70.05 69.22 69.57
MIARN (this paper) 69.68 69.37 69.54 69.90 68.97 69.30 69.09 69.91

Table 3: Experimental results on Reddit datasets. Best result in is boldface and second best is underlined. Best performing
baseline is in italics.

Debates (IAC-V1) Debates (IAC-V2)
Model P R F1 Acc P R F1 Acc
NBOW 57.17 57.03 57.00 57.51 66.01 66.03 66.02 66.09
Vanilla CNN 58.21 58.00 57.95 58.55 68.45 68.18 68.21 68.56
Vanilla LSTM 54.87 54.89 54.84 54.92 68.30 63.96 60.78 62.66
Attention LSTM 58.98 57.93 57.23 59.07 70.04 69.62 69.63 69.96
GRNN (Zhang et al.) 56.21 56.21 55.96 55.96 62.26 61.87 61.21 61.37
CNN-LSTM-DNN (Ghosh and Veale) 55.50 54.60 53.31 55.96 64.31 64.33 64.31 64.38
SIARN (this paper) 63.94 63.45 62.52 62.69 72.17 71.81 71.85 72.10
MIARN (this paper) 63.88 63.71 63.18 63.21 72.92 72.93 72.75 72.75

Table 4: Experimental results on Debates datasets. Best result in is boldface and second best is underlined. Best performing
baseline is in italics.

on the development set is topped. The batch size
is tuned amongst {128, 256, 512} for all datasets.
The only exception is the Tweets dataset from
(Riloff et al., 2013), in which a batch size of 16 is
used in lieu of the much smaller dataset size. For
fair comparison, all models have the same hidden
representation size and are set to 100 for both re-
current and convolutional based models (i.e., num-
ber of filters). For MIARN, the size of intra-
attention hidden representation is tuned amongst
{4, 8, 10, 20}.

4.4 Experimental Results

Table 2, Table 3 and Table 4 reports a perfor-
mance comparison of all benchmarked models on
the Tweets, Reddit and Debates datasets respec-
tively. We observe that our proposed SIARN and
MIARN models achieve the best results across

all six datasets. The relative improvement differs
across domain and datasets. On the Tweets dataset
from (Ptáček et al., 2014), MIARN achieves about
≈ 2% − 2.2% improvement in terms of F1 and
accuracy score when compared against the best
baseline. On the other Tweets dataset from (Riloff
et al., 2013), the performance gain of our pro-
posed model is larger, i.e., 3%− 5% improvement
on average over most baselines. Our proposed
SIARN and MIARN models achieve very compet-
itive performance on the Reddit datasets, with an
average of ≈ 2% margin improvement over the
best baselines. Notably, the baselines we compare
against are extremely competitive state-of-the-art
neural network models. This further reinforces
the effectiveness of our proposed approach. Ad-
ditionally, the performance improvement on De-
bates (long text) is significantly larger than short



1017

text (i.e., Twitter and Reddit). For example, MI-
ARN outperforms GRNN and CNN-LSTM-DNN
by ≈ 8%− 10% on both IAC-V1 and IAC-V2. At
this note, we can safely put RQ1 to rest.

Overall, the performance of MIARN is often
marginally better than SIARN (with some ex-
ceptions, e.g., Tweets dataset from (Riloff et al.,
2013)). We believe that this is attributed to the
fact that more complex word-word relationships
can be learned by using multi-dimensional values
instead of single-dimensional scalars. The per-
formance brought by our additional intra-attentive
representations can be further observed by com-
paring against the vanilla LSTM model. Clearly,
removing the intra-attention network reverts our
model to the standard LSTM. The performance
improvements are encouraging, leading to almost
10% improvement in terms of F1 and accuracy.
On datasets with short text, the performance im-
provement is often a modest ≈ 2% − 3% (RQ2).
Notably, our proposed models also perform much
better on long text, which can be attributed to the
intra-attentive representations explicitly modeling
long range dependencies. Intuitively, this is prob-
lematic for models that only capture sequential de-
pendencies (e.g., word by word).

Finally, the relative performance of competitor
methods are as expected. NBOW performs the
worse, since it is just a naive bag-of-words model
without any compositional or sequential informa-
tion. On short text, LSTMs are overall better than
CNNs. However, this trend is reversed on long
text (i.e., Debates) since the LSTM model may
be overburdened by overly long sequences. On
short text, we also found that attention (or the
gated pooling mechanism from GRNN) did not re-
ally help make any significant improvements over
the vanilla LSTM model and a qualitative expla-
nation to why this is so is deferred to the next
section. However, attention helps for long text
(such as debates), resulting in Attention LSTMs
becoming the strongest baseline on the Debates
datasets. However, our proposed intra-attentive
model is both effective on short text and long text,
outperforming Attention LSTMs consistently on
all datasets.

4.5 In-depth Model Analysis

In this section, we present an in-depth analysis
of our proposed model. More specifically, we
not only aim to showcase the interpretability of

our model but also explain how representations
are formed. More specifically, we test our model
(trained on Tweets dataset by (Ptáček et al., 2014))
on two examples. We extract the attention maps of
three models, namely MIARN, Attention LSTM
(ATT-LSTM) and applying Attention mechanism
directly on the word embeddings without using a
LSTM encoder (ATT-RAW). Table 5 shows the vi-
sualization of the attention maps.

Label Model Sentence

True
MIARN I totally love being ignored !!

ATT-LSTM I totally love being ignored !!
ATT-RAW I totally love being ignored !!

False
MIARN Being ignored sucks big time

ATT-LSTM Being ignored sucks big time
ATT-RAW Being ignored sucks big time

Table 5: Visualization of normalized attention weights on
three different attention models (Best viewed in color). The
intensity denotes the strength of the attention weight on the
word.

In the first example (true label), we notice that
the attention maps of MIARN are focusing on the
words ‘love’ and ‘ignored’. This is in concert with
our intuition about modeling contrast and incon-
gruity. On the other hand, both ATT-LSTM and
ATT-RAW learn very different attention maps. As
for ATT-LSTM, the attention weight is focused
completely on the last representation - the token
‘!!’. Additionally, we also observed that this is
true for many examples in the Tweets and Red-
dit dataset. We believe that this is the reason why
standard neural attention does not help as what the
attention mechanism is learning is to select the
last representation (i.e., vanilla LSTM). Without
the LSTM encoder, the attention weights focus on
‘love’ but not ‘ignored’. This fails to capture any
concept of contrast or incongruity.

Next, we consider the false labeled example.
This time, the attention maps of MIARN are not
as distinct as before. However, they focus on
sentiment-bearing words, composing the words
‘ignored sucks’ to form the majority of the intra-
attentive representation. This time, passing the
vector made up of ‘ignored sucks’ allows the sub-
sequent layers to recognize that there is no con-
trasting situation or sentiment. Similarly, ATT-
LSTM focuses on the last word time which is to-
tally non-interpretable. On the other hand, ATT-
RAW focuses on relatively non-meaningful words
such as ‘big’.

Overall, we analyzed two cases (positive and
negative labels) and found that MIARN produces



1018

very explainable attention maps. In general, we
found that MIARN is able to identify contrast and
incongruity in sentences, allowing our model to
better detect sarcasm. This is facilitated by model-
ing intra-sentence relationships. Notably, the stan-
dard vanilla attention is not explainable or inter-
pretable.

5 Conclusion

Based on the intuition of intra-sentence similar-
ity (i.e., looking in-between), we proposed a new
neural network architecture for sarcasm detection.
Our network incorporates a multi-dimensional
intra-attention component that learns an intra-
attentive representation of the sentence, enabling
it to detect contrastive sentiment, situations and
incongruity. Extensive experiments over six pub-
lic benchmarks confirm the empirical effective-
ness of our proposed model. Our proposed MI-
ARN model outperforms strong state-of-the-art
baselines such as GRNN and CNN-LSTM-DNN.
Analysis of the intra-attention scores shows that
our model learns highly interpretable attention
weights, paving the way for more explainable neu-
ral sarcasm detection methods.

References
Martı́n Abadi, Ashish Agarwal, Paul Barham, Eugene

Brevdo, Zhifeng Chen, Craig Citro, Greg S. Cor-
rado, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Ian Goodfellow, Andrew Harp,
Geoffrey Irving, Michael Isard, Yangqing Jia, Rafal
Jozefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh
Levenberg, Dan Mané, Rajat Monga, Sherry Moore,
Derek Murray, Chris Olah, Mike Schuster, Jonathon
Shlens, Benoit Steiner, Ilya Sutskever, Kunal Tal-
war, Paul Tucker, Vincent Vanhoucke, Vijay Vasude-
van, Fernanda Viégas, Oriol Vinyals, Pete Warden,
Martin Wattenberg, Martin Wicke, Yuan Yu, and Xi-
aoqiang Zheng. 2015. TensorFlow: Large-scale ma-
chine learning on heterogeneous systems. Software
available from tensorflow.org.

Silvio Amir, Byron C Wallace, Hao Lyu, and Paula
Carvalho Mário J Silva. 2016. Modelling context
with user embeddings for sarcasm detection in so-
cial media. arXiv preprint arXiv:1607.00976 .

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473 .

Francesco Barbieri, Horacio Saggion, and Francesco
Ronzano. 2014. Modelling sarcasm in twitter, a

novel approach. In Proceedings of the 5th Work-
shop on Computational Approaches to Subjectivity,
Sentiment and Social Media Analysis. pages 50–58.

Huimin Chen, Maosong Sun, Cunchao Tu, Yankai Lin,
and Zhiyuan Liu. 2016. Neural sentiment classifi-
cation with user and product attention. In Proceed-
ings of the 2016 Conference on Empirical Methods
in Natural Language Processing. pages 1650–1659.

Peng Chen, Zhongqian Sun, Lidong Bing, and Wei
Yang. 2017. Recurrent attention network on mem-
ory for aspect sentiment analysis. In Proceedings of
the 2017 Conference on Empirical Methods in Nat-
ural Language Processing. pages 452–461.

Kyunghyun Cho, Bart Van Merriënboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint
arXiv:1406.1078 .

Bjarke Felbo, Alan Mislove, Anders Søgaard, Iyad
Rahwan, and Sune Lehmann. 2017. Using millions
of emoji occurrences to learn any-domain represen-
tations for detecting sentiment, emotion and sar-
casm. arXiv preprint arXiv:1708.00524 .

Aniruddha Ghosh and Tony Veale. 2016. Frack-
ing sarcasm using neural network. In Proceed-
ings of the 7th Workshop on Computational Ap-
proaches to Subjectivity, Sentiment and Social Me-
dia Analysis, WASSA@NAACL-HLT 2016, June 16,
2016, San Diego, California, USA. pages 161–
169. http://aclweb.org/anthology/W/W16/W16-
0425.pdf.

Aniruddha Ghosh and Tony Veale. 2017. Magnets
for sarcasm: Making sarcasm detection timely, con-
textual and very personal. In Proceedings of the
2017 Conference on Empirical Methods in Natural
Language Processing, EMNLP 2017, Copenhagen,
Denmark, September 9-11, 2017. pages 482–491.

Rachel Giora. 1995. On irony and negation. Discourse
processes 19(2):239–264.

Roberto González-Ibánez, Smaranda Muresan, and
Nina Wacholder. 2011. Identifying sarcasm in twit-
ter: a closer look. In Proceedings of the 49th
Annual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies:
Short Papers-Volume 2. Association for Computa-
tional Linguistics, pages 581–586.

Irazú Hernández-Farı́as, José-Miguel Benedı́, and
Paolo Rosso. 2015. Applying basic features from
sentiment analysis for automatic irony detection. In
Iberian Conference on Pattern Recognition and Im-
age Analysis. Springer, pages 337–344.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation
9(8):1735–1780.

http://aclweb.org/anthology/W/W16/W16-0425.pdf
http://aclweb.org/anthology/W/W16/W16-0425.pdf
http://aclweb.org/anthology/W/W16/W16-0425.pdf
http://aclweb.org/anthology/W/W16/W16-0425.pdf


1019

Aditya Joshi, Pushpak Bhattacharyya, and Mark J Car-
man. 2017. Automatic sarcasm detection: A survey.
ACM Computing Surveys (CSUR) 50(5):73.

Aditya Joshi, Vinita Sharma, and Pushpak Bhat-
tacharyya. 2015. Harnessing context incongruity for
sarcasm detection. In Proceedings of the 53rd An-
nual Meeting of the Association for Computational
Linguistics and the 7th International Joint Confer-
ence on Natural Language Processing (Volume 2:
Short Papers). volume 2, pages 757–762.

Aditya Joshi, Vaibhav Tripathi, Kevin Patel, Pushpak
Bhattacharyya, and Mark Carman. 2016. Are word
embedding-based features useful for sarcasm detec-
tion? arXiv preprint arXiv:1610.00883 .

Mikhail Khodak, Nikunj Saunshi, and Kiran Vodra-
halli. 2017. A large self-annotated corpus for sar-
casm. arXiv preprint arXiv:1704.05579 .

Stephanie Lukin and Marilyn Walker. 2017. Really?
well. apparently bootstrapping improves the perfor-
mance of sarcasm and nastiness classifiers for online
dialogue. arXiv preprint arXiv:1708.08572 .

Minh-Thang Luong, Hieu Pham, and Christopher D
Manning. 2015. Effective approaches to attention-
based neural machine translation. arXiv preprint
arXiv:1508.04025 .

Abhijit Mishra, Kuntal Dey, and Pushpak Bhat-
tacharyya. 2017. Learning cognitive features from
gaze data for sentiment and sarcasm classification
using convolutional neural network. In Proceedings
of the 55th Annual Meeting of the Association for
Computational Linguistics, ACL 2017, Vancouver,
Canada, July 30 - August 4, Volume 1: Long Papers.
pages 377–387. https://doi.org/10.18653/v1/P17-
1035.

Abhijit Mishra, Diptesh Kanojia, Seema Nagar, Kuntal
Dey, and Pushpak Bhattacharyya. 2016. Harness-
ing cognitive features for sarcasm detection. In Pro-
ceedings of the 54th Annual Meeting of the Associ-
ation for Computational Linguistics, ACL 2016, Au-
gust 7-12, 2016, Berlin, Germany, Volume 1: Long
Papers. http://aclweb.org/anthology/P/P16/P16-
1104.pdf.

Bo Pang, Lillian Lee, et al. 2008. Opinion mining and
sentiment analysis. Foundations and Trends R© in In-
formation Retrieval 2(1–2):1–135.

Ankur P. Parikh, Oscar Täckström, Dipanjan Das, and
Jakob Uszkoreit. 2016. A decomposable attention
model for natural language inference. In Proceed-
ings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP 2016,
Austin, Texas, USA, November 1-4, 2016. pages
2249–2255.

Lotem Peled and Roi Reichart. 2017. Sarcasm SIGN:
interpreting sarcasm with sentiment based monolin-
gual machine translation. In Proceedings of the 55th

Annual Meeting of the Association for Computa-
tional Linguistics, ACL 2017, Vancouver, Canada,
July 30 - August 4, Volume 1: Long Papers. pages
1690–1700. https://doi.org/10.18653/v1/P17-1155.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors for
word representation. In Proceedings of the 2014
Conference on Empirical Methods in Natural Lan-
guage Processing, EMNLP 2014, October 25-29,
2014, Doha, Qatar, A meeting of SIGDAT, a Special
Interest Group of the ACL. pages 1532–1543.

Tomáš Ptáček, Ivan Habernal, and Jun Hong. 2014.
Sarcasm detection on czech and english twitter. In
Proceedings of COLING 2014, the 25th Interna-
tional Conference on Computational Linguistics:
Technical Papers. pages 213–223.

Ashwin Rajadesingan, Reza Zafarani, and Huan Liu.
2015. Sarcasm detection on twitter: A behavioral
modeling approach. In Proceedings of the Eighth
ACM International Conference on Web Search and
Data Mining. ACM, pages 97–106.

Antonio Reyes, Paolo Rosso, and Tony Veale. 2013.
A multidimensional approach for detecting irony
in twitter. Language resources and evaluation
47(1):239–268.

Ellen Riloff, Ashequl Qadir, Prafulla Surve, Lalin-
dra De Silva, Nathan Gilbert, and Ruihong Huang.
2013. Sarcasm as contrast between a positive
sentiment and negative situation. In Proceedings
of the 2013 Conference on Empirical Methods in
Natural Language Processing, EMNLP 2013, 18-
21 October 2013, Grand Hyatt Seattle, Seattle,
Washington, USA, A meeting of SIGDAT, a Spe-
cial Interest Group of the ACL. pages 704–714.
http://aclweb.org/anthology/D/D13/D13-1066.pdf.

Tim Rocktäschel, Edward Grefenstette, Karl Moritz
Hermann, Tomáš Kočiskỳ, and Phil Blunsom. 2015.
Reasoning about entailment with neural attention.
arXiv preprint arXiv:1509.06664 .

Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2016. Bidirectional attention
flow for machine comprehension. arXiv preprint
arXiv:1611.01603 .

Tao Shen, Tianyi Zhou, Guodong Long, Jing Jiang,
Shirui Pan, and Chengqi Zhang. 2017. Disan:
Directional self-attention network for rnn/cnn-
free language understanding. arXiv preprint
arXiv:1709.04696 .

Yi Tay, Anh Tuan Luu, and Siu Cheung Hui. 2018s.
Learning to attend via word-aspect associative fu-
sion for aspect-based sentiment analysis. In In Pro-
ceedings of the AAAI 2018, 5956-5963.

Yi Tay, Luu Anh Tuan, and Siu Cheung Hui. 2017a.
A compare-propagate architecture with alignment
factorization for natural language inference. arXiv
preprint arXiv:1801.00102 .

https://doi.org/10.18653/v1/P17-1035
https://doi.org/10.18653/v1/P17-1035
https://doi.org/10.18653/v1/P17-1035
https://doi.org/10.18653/v1/P17-1035
https://doi.org/10.18653/v1/P17-1035
http://aclweb.org/anthology/P/P16/P16-1104.pdf
http://aclweb.org/anthology/P/P16/P16-1104.pdf
http://aclweb.org/anthology/P/P16/P16-1104.pdf
http://aclweb.org/anthology/P/P16/P16-1104.pdf
https://doi.org/10.18653/v1/P17-1155
https://doi.org/10.18653/v1/P17-1155
https://doi.org/10.18653/v1/P17-1155
https://doi.org/10.18653/v1/P17-1155
http://aclweb.org/anthology/D/D13/D13-1066.pdf
http://aclweb.org/anthology/D/D13/D13-1066.pdf
http://aclweb.org/anthology/D/D13/D13-1066.pdf


1020

Yi Tay, Luu Anh Tuan, and Siu Cheung Hui.
2017b. Dyadic memory networks for aspect-
based sentiment analysis. In Proceedings of
the 2017 ACM on Conference on Information
and Knowledge Management, CIKM 2017, Singa-
pore, November 06 - 10, 2017. pages 107–116.
https://doi.org/10.1145/3132847.3132936.

Oren Tsur, Dmitry Davidov, and Ari Rappoport. 2010.
Icwsm-a great catchy name: Semi-supervised recog-
nition of sarcastic sentences in online product re-
views.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems. pages 6000–6010.

Deirdre Wilson. 2006. The pragmatics of verbal irony:
Echo or pretence? Lingua 116(10):1722–1743.

Caiming Xiong, Victor Zhong, and Richard Socher.
2016. Dynamic coattention networks for question
answering. CoRR abs/1611.01604.

Zichao Yang, Diyi Yang, Chris Dyer, Xiaodong He,
Alexander J Smola, and Eduard H Hovy. 2016. Hi-
erarchical attention networks for document classifi-
cation.

Meishan Zhang, Yue Zhang, and Guohong Fu. 2016.
Tweet sarcasm detection using deep neural net-
work. In COLING 2016, 26th International Con-
ference on Computational Linguistics, Proceed-
ings of the Conference: Technical Papers, Decem-
ber 11-16, 2016, Osaka, Japan. pages 2449–2460.
http://aclweb.org/anthology/C/C16/C16-1231.pdf.

https://doi.org/10.1145/3132847.3132936
https://doi.org/10.1145/3132847.3132936
https://doi.org/10.1145/3132847.3132936
http://aclweb.org/anthology/C/C16/C16-1231.pdf
http://aclweb.org/anthology/C/C16/C16-1231.pdf
http://aclweb.org/anthology/C/C16/C16-1231.pdf

