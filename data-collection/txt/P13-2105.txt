



















































Iterative Transformation of Annotation Guidelines for Constituency Parsing


Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 591–596,
Sofia, Bulgaria, August 4-9 2013. c©2013 Association for Computational Linguistics

Iterative Transformation of Annotation Guidelines for
Constituency Parsing

Xiang Li 1, 2 Wenbin Jiang 1 Yajuan Lü 1 Qun Liu 1, 3

1Key Laboratory of Intelligent Information Processing
Institute of Computing Technology, Chinese Academy of Sciences

{lixiang, jiangwenbin, lvyajuan}@ict.ac.cn
2University of Chinese Academy of Sciences

3Centre for Next Generation Localisation
Faculty of Engineering and Computing, Dublin City University

qliu@computing.dcu.ie

Abstract
This paper presents an effective algorith-
m of annotation adaptation for constituen-
cy treebanks, which transforms a treebank
from one annotation guideline to anoth-
er with an iterative optimization proce-
dure, thus to build a much larger treebank
to train an enhanced parser without in-
creasing model complexity. Experiments
show that the transformed Tsinghua Chi-
nese Treebank as additional training da-
ta brings significant improvement over the
baseline trained on Penn Chinese Tree-
bank only.

1 Introduction

Annotated data have become an indispensable
resource for many natural language processing
(NLP) applications. On one hand, the amount of
existing labeled data is not sufficient; on the other
hand, however there exists multiple annotated da-
ta with incompatible annotation guidelines for the
same NLP task. For example, the People’s Daily
corpus (Yu et al., 2001) and Chinese Penn Tree-
bank (CTB) (Xue et al., 2005) are publicly avail-
able for Chinese segmentation.

An available treebank is a major resource for
syntactic parsing. However, it is often a key bottle-
neck to acquire credible treebanks. Various tree-
banks have been constructed based on differen-
t annotation guidelines. In addition to the most
popular CTB, Tsinghua Chinese Treebank (TC-
T) (Zhou, 2004) is another real large-scale tree-
bank for Chinese constituent parsing. Figure 1 il-
lustrates some differences between CTB and TCT
in grammar category and syntactic structure. Un-
fortunately, these heterogeneous treebanks can not

be directly merged together for training a parsing
model. Such divergences cause a great waste of
human effort. Therefore, it is highly desirable to
transform a treebank into another compatible with
another annotation guideline.

In this paper, we focus on harmonizing het-
erogeneous treebanks to improve parsing perfor-
mance. We first propose an effective approach to
automatic treebank transformation from one an-
notation guideline to another. For convenience
of reference, a treebank with our desired anno-
tation guideline is named as target treebank, and
a treebank with a differtn annotation guideline is
named as source treebank. Our approach proceeds
in three steps. A parser is firstly trained on source
treebank. It is used to relabel the raw sentences
of target treebank, to acquire parallel training da-
ta with two heterogeneous annotation guidelines.
Then, an annotation transformer is trained on the
parallel training data to model the annotation in-
consistencies. In the last step, a parser trained on
target treebank is used to generate k-best parse
trees with target annotation for source sentences.
Then the optimal parse trees are selected by the an-
notation transformer. In this way, the source tree-
bank is transformed to another with our desired
annotation guideline. Then we propose an op-
timization strategy of iterative training to further
improve the transformation performance. At each
iteration, the annotation transformation of source-
to-target and target-to-source are both performed.
The transformed treebank is used to provide better
annotation guideline for the parallel training da-
ta of next iteration. As a result, the better paral-
lel training data will bring an improved annotation
transformer at next iteration.

We perform treebank transformation from TC-

591



zjXXXXXEE
�����

dj
HHH

���
np
ZZ��

n

情报

n

专家

v

认为

,

,

dj
b

bb
"

""
n

敌人

vp
ll,,

d

将

v

投降

IPXXXXX
�����

NP
ZZ��

NN

情报

NN

专家

VP
PPPPP��

�����
VV

认为

PU

,

IP
HHH

���
NP

NN

敌人

VP
cc##

AD

将

VV

投降

Figure 1: Example heterogeneous trees with TCT (left) and CTB (rigth) annotation guidelines.

T to CTB, in order to obtain additional tree-
bank to improve a parser. Experiments on Chi-
nese constituent parsing show that, the iterative
training strategy outperforms the basic annotation
transformation baseline. With addidional trans-
formed treebank, the improved parser achieves an
F-measure of 0.95% absolute improvement over
the baseline parser trained on CTB only.

2 Automatic Annotation Transformation

In this section, we present an effective approach
that transforms the source treebank to another
compatible with the target annotation guideline,
then describe an optimization strategy of itera-
tive training that conducts several rounds of bidi-
rectional annotation transformation and improves
the transformation performance gradually from a
global view.

2.1 Principle for Annotation Transformation
In training procedure, the source parser is used to
parse the sentences in the target treebank so that
there are k-best parse trees with the source anno-
tation guideline and one gold tree with the target
annotation guideline for each sentence in the tar-
get treebank. This parallel data is used to train
a source-to-target tree transformer. In transfor-
mation procedure, the source k-best parse trees
are first generated by a parser trained on the tar-
get treebank. Then the optimal source parse trees
with target annotation are selected by the annota-
tion transformer with the help of gold source parse
trees. By combining the target treebank with the
transformed source treebank, it can improve pars-
ing accuracy using a parser trained on the enlarged
treebank.

Algorithm 1 shows the training procedure of
treebank annotation transformation. treebanks

and treebankt denote the source and target tree-
bank respectively. parsers denotes the source
parser. transformers→t denotes the annota-
tion transformer. treebanknm denotes m treebank
re-labeled with n annotation guideline. Func-
tion TRAIN invokes the Berkeley parser (Petro-
v et al., 2006; Petrov and Klein, 2007) to
train the constituent parsing models. Function
PARSE generates k-best parse trees. Function
TRANSFORMTRAIN invokes the perceptron algo-
rithm (Collins, 2002) to train a discriminative an-
notation transformer. Function TRANSFORM se-
lects the optimal transformed parse trees with the
target annotation.

2.2 Learning the Annotation Transformer

To capture the transformation information from
the source treebank to the target treebank, we use
the discriminative reranking technique (Charniak
and Johnson, 2005; Collins and Koo, 2005) to
train the annotation transformer and to score k-
best parse trees with some heterogeneous features.

In this paper, the averaged perceptron algorithm
is used to train the treebank transformation model.
It is an online training algorithm and has been suc-
cessfully used in many NLP tasks, such as pars-
ing (Collins and Roark, 2004) and word segmen-
tation (Zhang and Clark, 2007; Zhang and Clark,
2010).

In addition to the target features which closely
follow Sun et al. (2010). We design the following
quasi-synchronous features to model the annota-
tion inconsistencies.

• Bigram constituent relation For two con-
secutive fundamental constituents si and sj
in the target parse tree, we find the minimum
categories Ni and Nj of the spans of si and
sj in the source parse tree respectively. Here

592



Algorithm 1 Basic treebank annotation transformation.
1: function TRANSFORM-TRAIN(treebanks, treebankt)
2: parsers ← TRAIN(treebanks)
3: treebankst ← PARSE(parsers, treebankt)
4: transformers→t ← TRANSFORMTRAIN(treebankt, treebankst )
5: treebankts ← TRANSFORM(transformers→t, treebanks)
6: return treebankts ∪ treebankt

Algorithm 2 Iterative treebank annotation transformation.
1: function TRANSFORM-ITERTRAIN(treebanks, treebankt)
2: parsers ← TRAIN(treebanks)
3: parsert ← TRAIN(treebankt)
4: treebankst ← PARSE(parsers, treebankt)
5: treebankts ← PARSE(parsert, treebanks)
6: repeat
7: transformers→t ← TRANSFORMTRAIN(treebankt,treebankst )
8: transformert→s ← TRANSFORMTRAIN(treebanks,treebankts)
9: treebankts ← TRANSFORM(transformers→t, treebanks)

10: treebankst ← TRANSFORM(transformert→s, treebankt)
11: parsert ← TRAIN(treebankts ∪ treebankt)
12: until EVAL(parsert) converges
13: return treebankts ∪ treebankt

a fundamental constituent is defined to be a
pair of word and its POS tag. If Ni is a sibling
of Nj or each other is identical, we regard the
relation between si and sj as a positive fea-
ture.

• Consistent relation If the span of a target
constituent can be also parsed as a constituent
by the source parser, the combination of tar-
get rule and source category is used.

• Inconsistent relation If the span of a tar-
get constituent cannot be analysed as a con-
stituent by the source parser, the combination
of target rule and corresponding treelet in the
source parse tree is used.

• POS tag The combination of POS tags of
same words in the parallel data is used.

2.3 Iterative Training for Annotation
Transformation

Treebank annotation transformation relies on the
parallel training data. Consequently, the accuracy
of source parser decides the accuracy of annota-
tion transformer. We propose an iterative training
method to improve the transformation accuracy by
iteratively optimizing the parallel parse trees. At
each iteration of training, the treebank transfor-
mation of source-to-target and target-to-source are
both performed, and the transformed treebank pro-
vides more appropriate annotation for subsequent
iteration. In turn, the annotation transformer can
be improved gradually along with optimization of
the parallel parse trees until convergence.

Algorithm 2 shows the overall procedure of it-
erative training, which terminates when the per-
formance of a parser trained on the target treebank
and the transformed treebank converges.

3 Experiments

3.1 Experimental Setup

We conduct the experiments of treebank transfor-
mation from TCT to CTB. CTB 5.1 is used as
the target treebank. We follow the convention-
al corpus splitting of CTB 5.1: articles 001-270
and 400-1151 are used for training, articles 271-
300 are used as test data and articles 301-325 are
used as developing data. We use slightly modi-
fied version of CTB 5.1 by deleting all the function
tags and empty categories, e.g., *OP*, using Tsur-
geon (Levy and Andrew, 2006). The whole TCT
1.0 is taken as the source treebank for training the
annotation transformer.

The Berkeley parsing model is trained with 5
split-merge iterations. And we run the Berkeley
parser in 100-best mode and construct the 20-fold
cross validation training as described in Charni-
ak and Johnson (2005). In this way, we acquire
the parallel parse trees for training the annotation
transformer.

In this paper, we use bracketing F1 as the Par-
seVal metric provided by EVALB 1 for all experi-
ments.

1http://nlp.cs.nyu.edu/evalb/

593



Model F-Measure (≤ 40 words) F-Measure (all)
Self-training 86.11 83.81

Base Annotation Transformation 86.56 84.23
Iterative Annotation Transformation 86.75 84.37

Baseline 85.71 83.42

Table 1: The performance of treebank annotation transformation using iterative training.

 74

 76

 78

 80

 82

 84

0.2 0.4 0.6 0.8              1×18,104

F
 s

co
re

Size of CTB training data

Directly parsing

Self-training

Annotation transformation

Figure 2: Parsing accuracy with different amounts
of CTB training data.

3.2 Basic Transformation
We conduct experiments to evaluate the effect of
the amount of target training data on transforma-
tion accuracy, and how much constituent parser-
s can benefit from our approach. An enhanced
parser is trained on the CTB training data with
the addition of transformed TCT by our anno-
tation transformer. As comparison, we build a
baseline system (direct parsing) using the Berke-
ley parser only trained on the CTB training data.
In this experiment, the self-training method (M-
cClosky et al., 2006a; McClosky et al., 2006b)
is also used to build another strong baseline sys-
tem, which uses unlabelled TCT as additional da-
ta. Figure 2 shows that our approach outperform-
s the two strong baseline systems. It achieves a
0.69% absolute improvement on the CTB test da-
ta over the direct parsing baseline when the whole
CTB training data is used for training. We also can
find that our approach further extends the advan-
tage over the two baseline systems as the amount
of CTB training data decreases in Figure 2. The
figure confirms our approach is effective for im-
proving parser performance, specially for the sce-
nario where the target treebank is scarce.

3.3 Iterative Transformation
We use the iterative training method for annota-
tion transformation. The CTB developing set is
used to determine the optimal training iteration.
After each iteration, we test the performance of
a parser trained on the combined treebank. Fig-

 85.4

 85.6

 85.8

 86

 86.2

 86.4

0 1 2 3 4 5 6 7 8 9 10

F
 s

co
re

Training iterations

Figure 3: Learning curve of iterative transforma-
tion training.

ure 3 shows the performance curve with iteration
ranging from 1 to 10. The performance of basic
annotation transformation is also included in the
curve when iteration is 1. The curve shows that
the maximum performance is achieved at iteration
5. Compared to the basic annotation transforma-
tion, the iterative training strategy leads to a bet-
ter parser with higher accuracy. Table 1 reports
that the final optimized parsing results on the CTB
test set contributes a 0.95% absolute improvement
over the directly parsing baseline.

4 Related Work

Treebank transformation is an effective strategy to
reuse existing annotated data. Wang et al. (1994)
proposed an approach to transform a treebank in-
to another with a different grammar using their
matching metric based on the bracket information
of original treebank. Jiang et al. (2009) proposed
annotation adaptation in Chinese word segmenta-
tion, then, some work were done in parsing (Sun
et al., 2010; Zhu et al., 2011; Sun and Wan, 2012).
Recently, Jiang et al. (2012) proposed an advanced
annotation transformation in Chinese word seg-
mentation, and we extended it to the more com-
plicated treebank annotation transformation used
for Chinese constituent parsing.

Other related work has been focused on semi-
supervised parsing methods which utilize labeled
data to annotate unlabeled data, then use the ad-
ditional annotated data to improve the original
model (McClosky et al., 2006a; McClosky et

594



al., 2006b; Huang and Harper, 2009). The self-
training methodology enlightens us on getting an-
notated treebank compatibal with another annota-
tion guideline. Our approach places extra empha-
sis on improving the transformation performance
with the help of source annotation knowledge.

Apart from constituency-to-constituency tree-
bank transformation, there also exists some re-
search on dependency-to-constituency treebank
transformation. Collins et al. (1999) used trans-
formed constituency treebank from Prague De-
pendency Treebank for constituent parsing on
Czech. Xia and Palmer (2001) explored different
algorithms that transform dependency structure to
phrase structure. Niu et al. (2009) proposed to con-
vert a dependency treebank to a constituency one
by using a parser trained on a constituency tree-
bank to generate k-best lists for sentences in the
dependency treebank. Optimal conversion results
are selected from the k-best lists. Smith and Eisner
(2009) and Li et al. (2012) generated rich quasi-
synchronous grammar features to improve parsing
performance. Some work has been done from the
other direction (Daum et al., 2004; Nivre, 2006;
Johansson and Nugues, 2007).

5 Conclusion

This paper propose an effective approach to trans-
form one treebank into another with a different
annotation guideline. Experiments show that our
approach can effectively utilize the heterogeneous
treebanks and significantly improve the state-of-
the-art Chinese constituency parsing performance.
How to exploit more heterogeneous knowledge to
improve the transformation performance is an in-
teresting future issue.

Acknowledgments

The authors were supported by National Nat-
ural Science Foundation of China (Contracts
61202216), National Key Technology R&D Pro-
gram (No. 2012BAH39B03), and Key Project
of Knowledge Innovation Program of Chinese A-
cademy of Sciences (No. KGZD-EW-501). Qun
Liu’s work was partially supported by Science
Foundation Ireland (Grant No.07/CE/I1142) as
part of the CNGL at Dublin City University. Sin-
cere thanks to the three anonymous reviewers for
their thorough reviewing and valuable suggestion-
s!

References
E. Charniak and M. Johnson. 2005. Coarse-to-fine

n-best parsing and maxent discriminative reranking.
In Proceedings of ACL, pages 173–180.

M. Collins and T. Koo. 2005. Discriminative reranking
for natural language parsing. Computational Lin-
guistics, 31(1):25–70.

M. Collins and B. Roark. 2004. Incremental parsing
with the perceptron algorithm. In Proceedings of
ACL, volume 2004.

M. Collins, L. Ramshaw, J. Hajič, and C. Tillmann.
1999. A statistical parser for czech. In Proceedings
of ACL, pages 505–512.

M. Collins. 2002. Discriminative training method-
s for hidden markov models: Theory and experi-
ments with perceptron algorithms. In Proceedings
of EMNLP, pages 1–8.

M. Daum, K. Foth, and W. Menzel. 2004. Automat-
ic transformation of phrase treebanks to dependency
trees. In Proceedings of LREC.

Z. Huang and M. Harper. 2009. Self-training pcfg
grammars with latent annotations across languages.
In Proceedings of EMNLP, pages 832–841.

W. Jiang, L. Huang, and Q. Liu. 2009. Automatic
adaptation of annotation standards: Chinese word
segmentation and pos tagging: a case study. In Pro-
ceedings of ACL, pages 522–530.

Wenbin Jiang, Fandong Meng, Qun Liu, and Yajuan
Lü. 2012. Iterative annotation transformation with
predict-self reestimation for chinese word segmen-
tation. In Proceedings of EMNLP, pages 412–420.

R. Johansson and P. Nugues. 2007. Extended
constituent-to-dependency conversion for english.
In Proc. of the 16th Nordic Conference on Compu-
tational Linguistics.

R. Levy and G. Andrew. 2006. Tregex and tsur-
geon: tools for querying and manipulating tree data
structures. In Proceedings of the fifth international
conference on Language Resources and Evaluation,
pages 2231–2234.

Zhenghua Li, Ting Liu, and Wanxiang Che. 2012. Ex-
ploiting multiple treebanks for parsing with quasi-
synchronous grammars. In Proceedings of ACL,
pages 675–684.

D. McClosky, E. Charniak, and M. Johnson. 2006a.
Effective self-training for parsing. In Proceedings
of NAACL, pages 152–159.

D. McClosky, E. Charniak, and M. Johnson. 2006b.
Reranking and self-training for parser adaptation. In
Proceedings of ACL, pages 337–344.

Zheng-Yu Niu, Haifeng Wang, and Hua Wu. 2009.
Exploiting heterogeneous treebanks for parsing. In
Proceedings of ACL, pages 46–54.

595



J. Nivre. 2006. Inductive dependency parsing.
Springer Verlag.

S. Petrov and D. Klein. 2007. Improved inference for
unlexicalized parsing. In Proceedings of NAACL,
pages 404–411.

S. Petrov, L. Barrett, R. Thibaux, and D. Klein. 2006.
Learning accurate, compact, and interpretable tree
annotation. In Proceedings of ACL, pages 433–440.

David A Smith and Jason Eisner. 2009. Parser adap-
tation and projection with quasi-synchronous gram-
mar features. In Proceedings of EMNLP, pages
822–831.

W. Sun and X. Wan. 2012. Reducing approximation
and estimation errors for chinese lexical processing
with heterogeneous annotations. In Proceedings of
ACL.

W. Sun, R. Wang, and Y. Zhang. 2010. Discriminative
parse reranking for chinese with homogeneous and
heterogeneous annotations. In Proceedings of CIPS-
SIGHAN.

J.N. Wang, J.S. Chang, and K.Y. Su. 1994. An au-
tomatic treebank conversion algorithm for corpus
sharing. In Proceedings of ACL, pages 248–254.

F. Xia and M. Palmer. 2001. Converting dependen-
cy structures to phrase structures. In Proceedings
of the first international conference on Human lan-
guage technology research, pages 1–5.

N. Xue, F. Xia, F.D. Chiou, and M. Palmer. 2005. The
penn chinese treebank: Phrase structure annotation
of a large corpus. Natural Language Engineering,
11(02):207–238.

S. Yu, J. Lu, X. Zhu, H. Duan, S. Kang, H. Sun,
H. Wang, Q. Zhao, and W. Zhan. 2001. Processing
norms of modern chinese corpus. Technical Report.

Y. Zhang and S. Clark. 2007. Chinese segmentation
with a word-based perceptron algorithm. In Pro-
ceedings of ACL, pages 840–847.

Y. Zhang and S. Clark. 2010. A fast decoder for joint
word segmentation and pos-tagging using a single
discriminative model. In Proceedings of EMNLP,
pages 843–852.

Q. Zhou. 2004. Annotation scheme for chinese tree-
bank. Journal of Chinese Information Processing,
18(4).

M. Zhu, J. Zhu, and M. Hu. 2011. Better automatic
treebank conversion using a feature-based approach.
In Proceedings of ACL, pages 715–719.

596


