



















































A Synopsis of Morphoid Type Theory


Proceedings of the 14th Meeting on the Mathematics of Language (MoL 14), pages 75–86,
Chicago, USA, July 25–26, 2015. c©2015 Association for Computational Linguistics

A Synopsis of Morphoid Type Theory

David McAllester
TTI-Chicago

mcallester@ttic.edu

Abstract

Morphoid type theory (MTT) is a type-
theoretic foundation for mathematics support-
ing the concept of isomorphism and the substi-
tution of isomorphics. Unlike homotopy type
theory (HoTT), which also supports isomor-
phism, morphoid type theory is a direct exten-
sion of classical predicate calculus and avoids
the intuitionistic constructs of propositions-
as-types, path induction and squashing. Al-
though HoTT is capable of supporting clas-
sical inference, MTT’s thoroughly classical
treatment is expected to be more comfortable
for those who take a Platonic or realist ap-
proach to the practice of mathematics.

1 Introduction

The central issue in both homotopy type theory
(HoTT-Authors, 2013) and morphoid type theory
(McAllester, 2014) is isomorphism. The notion
of isomorphism in mathematics seems related to
the notion of an application programming interface
(API) in computer software. An API specifies what
information and behavior an object provides. Two
different implementations can produce identical be-
havior when interaction is restricted to that allowed
by the API. For example, textbooks on real analy-
sis typically start from axioms involving multipli-
cation, addition, and ordering. Addition, multipli-
cation and ordering define an abstract interface —
the well formed statements about real numbers are
limited to those that can be defined in terms of the
operations of the interface. We can implement real
numbers in different ways — as Dedekind cuts or

Cauchy sequences. However, these different im-
plementations provide identical behavior as viewed
through the interface — the different implementa-
tions are isomorphic as ordered fields. The axioms
of real analysis specify the reals up to isomorphism
for ordered fields. Peano’s axioms (the second order
version) similarly specify the structure of the natural
numbers up to isomorphism.

The general notion of isomorphism is best il-
lustrated by considering dependent pair types.
Here we will write a dependent pair type as
PairOf (x :σ, y :τ [x]) where the instances of this
type are the pairs Pair(x, y) where x is an in-
stance of the type σ and y is an instance of τ [x].
The type of directed graphs can be written as
PairOf (N :type, P : (N ×N )→ Bool) where
N is a type representing the set of nodes of the graph
and P is a binary predicate on the nodes giving the
edge relation. Two directed graphs Pair(N , P ) and
Pair(M, Q) are isomorphic if there exists a bijec-
tion from N to M that carries P to Q. Some bi-
jections will carry P to Q while others will not.
Two pairs Pair(x, y) and Pair(u,w) of a general
dependent pair type PairOf (x :σ, y :τ [x]) are iso-
morphic if there is a σ-isomorphism from x to u that
carries y to w. Some σ-isomorphisms from x to u
will carry y to w while others will not. This im-
plies that to define isomorphism at general depen-
dent pairs types we need that for any type σ, and
for any two isomorphic values x and u of type σ,
we can define the full set of σ-isomorphisms from
x to u. An interesting special case is the full set of
σ-isomorphisms from x to x. This is the symmetry
group of x.

75



Both Homotopy type theory (HoTT) and mor-
phoid type theory (MTT) are intended as type-
theoretic foundations for mathematics supporting
a concept of isomorphism. HoTT is an exten-
sion of constructive logic while MTT is an exten-
sion of classical predicate calculus. More specif-
ically, HoTT is a version of Martin Löf type the-
ory (Martin-Löf, 1971; Coquand and Huet, 1988;
Sambin and Smith, 1998) extended to includes Vo-
evodsky’s univalence axiom (HoTT-Authors, 2013).
Martin-Löf type theory involves propositions-as-
types and path induction, neither of which are used
in MTT. To accommodate classical (nonconstruc-
tive) inference, HoTT can be extended with a ver-
sion of the law of the excluded middle. However,
even in the classical version propositions continue to
be represented as types rather than Boolean-valued
expressions. To accommodate classical inference
HoTT also includes squashing — a technicality re-
quired to allow propositions-types to be treated more
like Boolean-valued expressions. In MTT all propo-
sitions are Boolean-valued and there is no need for
squashing.

Perhaps the most significant difference between
HoTT and MTT involves the abstraction barrier
imposed on types. In MTT two types are type-
isomorphic if there exists a bijection between them.
In MTT two types with the same cardinality (num-
ber of equivalence classes) cannot be distinguished
by well-typed predicates on types. In HoTT, how-
ever, types with the same cardinality can still be dis-
tinguished by well-typed predicates. In HoTT two
types are equivalent only when they have the same
higher-order groupoid structure. For example, two
graphs fail to be isomorphic unless the node types
have the same higher order groupoid structure. This
can be interpreted as implementation details of a
type leaking from the abstraction barrier on types.
This leakage interpretation is discussed more explic-
itly in section 3.

HoTT allows one to block the leakage of type im-
plementations by squashing types to “sets”. A set
is a type whose internal groupoid structure is effec-
tively suppressed. One can construct the type of
topological space whose point types are sets. In
this case we get the familiar notion isomorphism
(homeomorphism) where two topological spaces are
homeomorphic if there is any bijection between their

points that identifies their open sets. We can then
define the groupoid of topological spaces to be the
category consisting of the topological spaces and
the homeomorphisms between them. This is the
“first order” groupoid of topological spaces. If we
take the point types of topological spaces to be first
order groupoids rather than sets, and restrict the
point bijections to functors, we get the second order
groupoid of topological spaces. We can then define
a third order groupoid and so on. In HoTT we can
even have ω-order groupoids.

In MTT the internal structure of types is ap-
proached in a different way. In MTT natural map-
pings are distinguished from general functions. For
example, there is an isomorphism (a linear bijection)
from a finite dimensional vector space to its dual.
However, there is no natural isomorphism. Although
not covered in this synopsis, MTT takes a function
to be natural if it can be written as a lambda expres-
sion. Lambda expressions (natural functions) have
commutation properties not shared by general func-
tions. Two types σ and τ are cryptomorphic (in the
sense of Birkoff or Rota) if there exists a pair of nat-
ural functions (lambda expressions) f : σ → τ and
g :τ → σ such that f ◦ g and g ◦ f are both identity
functions (viewed as functions on the isomorphism
classes of σ and τ respectively). MTT does not at-
tempt to handle higher order groupoid structure.

This synopsis of MTT is preliminary and many
of the features described here go beyond the fea-
tures covered by soundness proofs in version 4
of (McAllester, 2014). This synopsis should be
viewed as a plan, or program, for the next version
of (McAllester, 2014).

2 The Core Rules of Morphoid Type
Theory

Morphoid type theory starts from the syntax and se-
mantics of classical predicate calculus. In sorted first
order logic every term has a sort and each function
symbol f specifies the sorts of its arguments and the
sort of its value. We write f : σ1 × · · · × σn → τ
to indicate that f is a function that takes n argu-
ments of sort σ1, . . ., σn respectively and which pro-
duces a value of sort τ . The syntax of sorted first or-
der logic can be defined by the following grammar
where function and predicate applications must sat-

76



� ` typej :typei for j < i
Σ ` τ :typei
x not declared in Σ

Σ; x :τ ` x :τ

Σ ` τ :typei
Σ ` σ :typei

Σ ` (τ → σ) :typei

Σ ` f :σ → τ
Σ ` e :σ

Σ ` f(e) :τ

� ` Bool :typei
Σ ` Φ:Bool

Σ; Φ ` Φ

Σ; Θ ` Θ
Σ ` Ψ

Σ; Θ ` Ψ

Σ ` Φ:Bool
Σ ` Ψ:Bool

Σ ` (Φ ∨Ψ):Bool

Σ ` Φ:Bool

Σ ` ¬Φ:Bool

Σ; x :τ ` Φ[x] :Bool

Σ ` (∀x :τ Φ[x]) :Bool

Σ ` w :τ
Σ ` u :τ

Σ ` (w =τ u) :Bool

Figure 1: Predicate Calculus Expressions. Here type0, type1, type2, . . . are distinct constants and � is a constant
denoting the empty context. The first two rules of the first row allow us to derive �;α : typej ` α : typej thereby
declaring primitive types. We can then declare additional symbols such as c :α or P :α → Bool. The requirement
of j < i in the first rule is needed to avoid Russel’s paradox. The second rule of the second row allows Boolean
assumptions to be introduced into contexts.

isfy the sort constraints associated with the function
and predicate symbols.

t ::= x | c | f(t1, . . . , tn)
Φ ::= P (t1, . . . , tn) | t1 =σ t2

| Φ1 ∨ Φ2 | ¬Φ | ∀x :σ Φ[x]

Note that in the above grammar the equality symbol
=σ is subscripted with a sort σ to which it applies.
The labeling of equality with sorts is important for
the treatment of isomorphism.

Given this basic grammar of terms and formulas it
is standard to introduce the following abbreviations.

Φ ∧Ψ ≡ ¬(¬Φ ∨ ¬Ψ)
Φ⇒ Ψ ≡ ¬Φ ∨Ψ

∃x :σ Φ[x] ≡ ¬∀x :σ ¬Φ[x]

∃!x :σ Φ[x] ≡




∃x :σ Φ[x]
∧∀x, y :σ

Φ[x] ∧ Φ[y]⇒ x =σ y
(∃x :σ) ≡ ∃x :σ x =σ x

We now replace the word “sort” with the word
“type”. To define the set of well formed terms and
formulas we need to specify primitive types and a set
of constant and function symbols each with specified

argument and value types. In formal type systems
this is done with symbol declarations. We write Σ `
t : σ to indicate that the symbol declarations in Σ
imply that t is a well-formed expression of type σ.
For example we have the following.

α :type;
β :type;
c :α;
f :α→ β




` f(c) :β

α :type;
c :α;
f :α→ α;
P :α→ Bool




` P (f(f(c))) :Bool

An expression of the form Σ ` Θ is called a se-
quent where Σ is called the context and Θ is called
the judgement. The sequent Σ ` Θ says that judge-
ment Θ holds in context Σ. We allow a context to
contain both symbol declarations and Boolean as-
sumptions. For example we have

α :type; a :α; b :α;
f :α× α→ α;
∀x :α ∀y :α
f(x, y) =α f(y, x)




` f(a, b) =α f(b, a)

77



Σ ` Φ:Bool
Σ ` Ψ:Bool
Σ; Φ ` Ψ
Σ;¬Φ ` Ψ

Σ ` Ψ

Σ ` Φ:Bool
Σ ` Ψ:Bool
Σ ` Φ

Σ ` Φ ∨Ψ
Σ ` ¬¬Φ

Σ ` Φ:Bool
Σ ` Ψ:Bool
Σ ` Ψ

Σ ` Φ ∨Ψ

Σ ` Φ:Bool
Σ ` Ψ:Bool
Σ ` ¬Ψ
Σ ` ¬Φ

Σ ` ¬(Φ ∨Ψ)

Σ ` ∀x :τ Φ[x]
Σ ` e :τ

Σ ` Φ[e]

Σ;x :τ ` Φ[x] :Bool
Σ;x :τ ` Φ[x]

Σ ` ∀x :τ Φ[x]

Σ ` ∃!x :σ Φ[x]

Σ ` The(x :σ, Φ[x]) :σ
Σ ` Φ[The(x :σ, Φ[x])]

Σ ` e :τ

Σ ` e =τ e

Σ ` u =τ w

Σ ` w =τ u

Σ ` u =τ w
Σ ` w =τ s

Σ ` u =τ s

Σ ` τ :typei
Σ; x :σ ` e[x] :τ
Σ ` w =σ u
Σ, σ, τ and e[x] are pure

Σ ` e[w] =τ e[u]

Σ ` f, g :σ → τ
Σ ` ∀x :σ f(x) =τ g(x)

Σ ` f =σ→τ g

Σ ` τ :typei
Σ ` ∀x :σ ∃y :τ Φ[x, y]
Σ, σ, τ and Φ[x, y] are pure

Σ ` ∃f :σ → τ ∀x :σ Φ[x, f(x)]

Figure 2: Predicate Calculus Inference Rules. The first row is a complete set of rules for Boolean logic. A rule
with two conclusions abbreviates two rules each with the same antecedents. The third rule in the second row handles
definite descriptions (Hilbert’s ι-operator). An expression is “pure” if does not involve any of the constructs introduced
in figure 6. The last row gives the axioms of extensionality and choice.

In higher order predicate calculus the type system
is extended to include not only primitive types but
also function types and we can write, for example,
P (f) where we have f :σ → τ and P : (σ → τ) →
Bool. In the higher order case we can use the fol-
lowing standard abbreviations due to Curry.

σ1 × σ2 → τ ≡ σ1 → (σ2 → τ)
f(a, b) ≡ f(a)(b)

This extends in the obvious way to abbreviations of
the form σ1 × · · · × σn → τ . Without loss of gen-
erality we then need consider only single argument
functions.

Figure 1 gives a set of inference rules for forming
the expressions of higher order predicate calculus.
Each rule allows for the derivation of the sequent be-
low the line provided that the sequents above the line

are derivable. A rule with no antecedents is written
as a single derivable sequent.

Figure 2 gives inference rules for predicate cal-
culus including definite descriptions of the form
The(x : σ, Φ[x]) (Hilbert’s ι-operator) and rules
representing the axiom of extensionality and the ax-
iom of choice.

Figure 3 gives inference rules for dependent pair
types, subtypes, and existential types. A dependent
pair type has the form PairOf (x :σ, y :τ [x]) and
is the type whose instances are the pairs Pair(x, y)
where x is an instance of σ and y is an in-
stance of τ [x]. A subtype expression has the form
SubType(x : σ, Φ[x]) where Φ[x] is a Boolean
expression. This expression denotes the type whose
elements are those elements x in σ such that Φ[x]
holds. We let PairOf(x : σ, y : τ [x] s. t. Φ[x, y])

78



Σ ` σ :typei
Σ; x :σ ` τ [x] :typei

Σ ` PairOf (x :σ, y :τ [x]) :typei

Σ ` PairOf (x :σ, y :τ [x]) :typei
Σ ` u :σ
Σ ` w :τ [u]

Σ ` Pair(u,w) :PairOf (x :σ, y :τ [x])
Σ ` π1(Pair(u,w)) .= u
Σ ` π2(Pair(u,w)) .= w

Σ ` p :PairOf (x :σ, y :τ [x])

Σ ` π1(p) :σ
Σ ` π2(p) :τ [π1(p)]
Σ ` p .= Pair(π1(p), π2(p))

Σ ` e .= e Σ ` u
.
= w

Σ ` w .= u

Σ ` u .= w
Σ ` w .= s

Σ ` u .= s

Σ ` u .= w
Σ ` Θ[u]

Σ ` Θ[w]

Σ ` τ :typei
Σ; x :τ ` Φ[x] :Bool

Σ ` SubType (x :τ, Φ[x]) :typei

Σ ` SubType (x :τ, Φ[x]) :typei
Σ ` e :τ
Σ ` Φ[e]

Σ ` e :SubType (x :τ, Φ[x])

Σ ` e :SubType (x :τ, Φ[x])

Σ ` e :τ
Σ ` Φ[e]

Σ ` σ :typei
Σ; x :σ ` τ [x] :typei

Σ ` (∃x :σ τ [x]) :typei

Σ ` (∃x :σ τ [x]) :typei
Σ ` w :σ
Σ ` e :τ [w]

Σ ` e : (∃x :σ τ [x])

Σ ` e : (∃x :σ τ [x])
Σ; y :σ; z :τ [y] ` Θ[z]
y does not occur free in Θ[z]

Σ ` Θ[e]

Figure 3: Pair Types, Subtypes and Existential Types. Note the use of absolute equality (judgemental equality) .=
in the rules for pair types. We can have two distinct but isomorphic things — we can have a =σ b with a 6 .= b. It
is important that absolute equalities are not Boolean expressions — otherwise the substitution of isomorphics would
yield that a =σ b implies a

.
= b.

abbreviate

SubType

(
z :PairOf (x :σ, y :τ [x]) ,
Φ[π1(z), π2(z)]

)
.

The type of groups, abbreviated Group, can then
be written as

PairOf (α :type, f : (α× α)→ α s. t. Φ[α, f ])
where Φ[α, f ] states the group axioms. For example,
the group axiom that an identity element exists can
be written as

∃x :α ∀y :α f(x, y) =α y ∧ f(y, x) =α y.
The type of topological spaces, denoted TOP, can
be written as

PairOf




α :type,
Open : (α→ Bool)→ Bool,
s. t. Ψ[α,Open]




where Ψ[α,Open] states the topology axioms.
Here the open sets of the topological space are rep-
resented by predicates. Note that the types Group
and TOP are closed type expressions — these type
expressions do not contain free variables.

We should note that subtypes are literally subsets
and, for example, we can derive the sequent

G :AbelianGroup ` G :Group.

Existential types have the form ∃x :σ τ [x] where
τ [x] is a type expression. This is the type whose
members are those values v such that there exists a
value u : σ such that v is in the type τ [u]. Existen-
tial types allow one to express the type of permuta-
tion groups as distinct from the type of groups. A
permutation group is a group whose group elements
are permutations of an underlying set. The type of
permutation groups, denoted PermGroup, has the

79



form

∃α :type ∃P : (Permutation[α]→ Bool) τ [α, P ].

Here the predicate P represents a set of permu-
tations on the type α and τ [α, P ] is a pair type
specifying a group whose elements are the permu-
tations of α satisfying P and where the group op-
eration is functional composition. Again note that
PermGroup is a closed type expression. The rules
for existential types then allow the derivation of the
sequent

G :PermGroup ` G :Group.

We also have the representation theorem

` ∀G :Group ∃H :PermGroup G =Group H.

However, the isomorphism relations =Group and
=PermGroup are different. Two permutation groups
can be group-isomorphic while operating on un-
derlying sets of different sizes. Such permutation
groups are group-isomorphic but not permutation-
group-isomorphic.

3 Observational Equivalence

Our intention now is to interpret an equation such as
G =Group H as stating that G and H are group-
isomorphic. The significance of isomorphism arises
from the substitution rule of figure 2. The rules
of equality — reflexivity, symetry, transitivity and
substitution — support the congruence closure algo-
rithm for reasoning about equality. The ability to ap-
ply congruence closure to the isomorphism relation
should be of great value in automated reasoning.1

The core rules define a notion of “observational
equivalence” — two closed terms a and b of type σ
are observationally σ-equivalent if for every predi-
cate expression P :σ → Bool (typable by the core
rules) we have P (a) if and only if P (b). We want
=σ to be as course as possible subject to the con-
straint that a =σ b implies that a and b are observa-
tionally σ-equivalent.

The desire to be as coarse as possible while
staying within observational equivalence motivates
the interpretation of type-isomorphism as same-
cardinality. Predicates on types that are well formed

1It is tempting to suggest that congruence closure is of great
value in subconscious human thought.

under the core rules cannot distinguish between
types of the same cardinality.

4 Morphoids

The semantics of morphoid type theory is developed
within a meta-theory of Platonic mathematics — we
adopt the position that it is meaningful to discuss
actual (Platonic) mathematical objects.

The semantics of morphoid type theory is based
on a class of values called morphoids. A rigorous
definition of a class of morphoids for a subset of the
language can be found in (McAllester, 2014) version
4. Here we give some intuition for morphoids and
state some formal properties.

Morphoids are built from “points”. Morphoid
points are analogous to the ur-elements of some
early versions of set theory. General morphoids are
built from points in a manner analogous to the way
that sets are constructed from ur-elements.

A morphoid point has the form Point(i, j) where
i is called the left index and j is the right index of
the point. We define the operations of Left, Right,
inverse and composition on points as follows.

Left(Point(i, j)) = Point(i, i)

Right(Point(i, j)) = Point(j, j)

Point(i, j)−1 = Point(j, i)

Point(i, j) ◦Point(j, k) = Point(i, k)

Here we have that x ◦ y is defined only in the case
where Right(x) = Left(y).

Every morphoid value is either a Boolean value
(True or False), a point, a morphoid type, a pair
of morphoid values, or a morphoid function. The
operations of Left, Right, inverse and composition
are defined recursively on all morphoid values where
x ◦ y is defined when Right(x) = Left(y). We
consider each kind of value in turn.

A morphoid type is a set σ of morphoid values
satisfying certain properties defined in (McAllester,
2014). A fundamental property is the following.

(M) For x, y, x ∈ σ with x◦y−1◦z defined we have
x ◦ y−1 ◦ z ∈ σ.

The following equations define the morphoid op-
erations on types where σ ◦ τ is defined only when

80



σ Left(σ) Right(σ)





Point(a,A), Point(a, Ã),

Point(ã, A), Point(ã, Ã),

Point(b,B), Point(b, B̃),

Point(b̃, B), Point(b̃, B̃),

Point(c, C), Point(c, C̃),

Point(c̃, C), Point(c̃, C̃)









Point(a, a), Point(a, ã),
Point(ã, a), Point(ã, ã),

Point(b, b), Point(b, b̃),

Point(b̃, b), Point(b̃, b̃),

Point(c, c), Point(c, c̃),
Point(c̃, c), Point(c̃, c̃)









Point(A,A), Point(A, Ã),

Point(Ã, A), Point(Ã, Ã),

Point(B,B), Point(B, B̃),

Point(B̃, B), Point(B̃, B̃),

Point(C,C), Point(C, C̃),

Point(C̃, C), Point(C̃, C̃)





σ−1 τ σ ◦ τ




Point(A, a), Point(Ã, a),

Point(Ã, a), Point(Ã, ã),

Point(B, b), Point(B̃, b),

Point(B̃, b), Point(B̃, b̃),

Point(C, c), Point(C̃, c),

Point(C̃, c), Point(C̃, c̃)









Point(A,AA), Point(A, ÃA),

Point(Ã, AA), Point(Ã, ÃA),

Point(B,BB), Point(B, B̃B),

Point(B̃, BB), Point(B̃, B̃B),

Point(C,CC), Point(C, C̃C),

Point(C̃, CC), Point(C̃, C̃C)









Point(a,AA), Point(a, ÃA),

Point(ã, AA), Point(ã, ÃA),

Point(b,BB), Point(b, B̃B),

Point(b̃, BB), Point(b̃, B̃B),

Point(c, CC), Point(c, C̃C),

Point(c̃, CC), Point(c̃, C̃C)





Figure 4: The operations of Left, Right, inverse and composition on point types.

G Left(G) Right(G)

Point(a,A) Point(a,a) Point(A,A)
\ \ \

Point(b,B) Point(b,b) Point(B,B)
/ / /

Point(c,C) Point(c,c) Point(C,C)

G−1 H G ◦H

Point(A,a) Point(A,AA) Point(a,AA)
\ \ \

Point(B,b) Point(B,BB) Point(b,BB)
/ / /

Point(C,c) Point(C,CC) Point(c,CC)

Figure 5: The operations of Left, Right, inverse and composition on abstract morphoid graphs.

81



Right(σ) = Left(τ).

Left(σ) =

{
x1 ◦ x−12 : x1, x2 ∈ σ,
Right(x1) = Right(x2)

}

Right(σ) =

{
x−11 ◦ x2 : x1, x2 ∈ σ,
Left(x1) = Left(x2)

}

σ ◦ τ =
{
x ◦ y : x ∈ σ, y ∈ τ,
Right(x) = Left(y)

}

σ−1 = {x−1 : x ∈ σ}

A morphoid type whose elements are points is
called a point type. Figure 4 gives examples of mor-
phoid point types and examples of the morphoid op-
erations applied to point types. The morphoid clo-
sure condition (M) implies that for any morphoid
type σ we have that Left(σ) and Right(σ) are
equivalence relations (see figure 4). Note that mor-
phoid types are not required to be closed under in-
verse. This allows types to be directed from left to
right. Again consider the types in figure 4. Fur-
thermore, property (M) implies that any morphoid
type σ defines a bijection between the equivalence
classes of Left(σ) and the equivalence classes of
Right(σ).

A morphoid pair is simply a pair of morphoids.
The morphoid operations on pairs are defined as
follows where again x ◦ y is defined only when
Right(x) = Left(y).

Left(Pair(x, y)) = Pair(Left(x),Left(y))

Right(Pair(x, y)) = Pair(Right(x),Right(y))

Pair(x, y)−1 = Pair(x−1, y−1)

Pair(x, y) ◦Pair(z, w) = Pair(x ◦ z, y ◦ w)

The treatment of morphoid functions involves
subtleties. In this synopsis we note only that for
any two morphoid types σ and τ we can define the
type σ → τ such that for f ∈ σ → τ and x ∈ σ
we can define the application f(x) so that we have
f(x) ∈ τ . Furthermore, these definitions are such
that the elements of the type σ → τ represents all
functions from the equivalence classes of σ to the
equivalence classes of τ . Details, including the defi-
nitions of the morphoid operations on functions, can
be found in (McAllester, 2014).

It is possible to prove that morphoids satisfy the
following properties where properties (G4), (G5),

(G6), and (G9) apply when the compositions are de-
fined.

(G1) For any morphoid x we have that Left(x),
Right(x) and x−1 are also morphoids.

(G2) For any morphoids x and y we have that x ◦ y
is defined if and only if Right(x) = Left(y)
and when x ◦ y is defined we have that x ◦ y is
a morphoid.

(G3) Left(x−1) = Right(x) and Right(x−1) =
Left(x)

(G4) Left(x ◦ y) = Left(x) and Right(x ◦ y) =
Right(y).

(G5) (x ◦ y) ◦ z = x ◦ (y ◦ z).

(G6) x−1 ◦ x ◦ y = y and x ◦ y ◦ y−1 = x.

(G7) Right(x) = x−1 ◦ x and Left(x) = x ◦ x−1.

(G8) (x−1)−1 = x.

(G9) (x ◦ y)−1 = y−1 ◦ x−1.

Properties (G1) through (G9) state that the class
of morphoids forms a groupoid under the morphoid
operations. Figure 5 shows morphoid operations on
graphs whose nodes are points.

5 Abstraction and Isomorphism

The semantic definition of isomorphism relies on an
additional operation on morphoids — the operation
of abstraction. As an example we consider vector
spaces. In morphoid type theory an abstract vector
space is one in which the vectors are points. The
space Rn is a vector space whose vectors are n-
tuples of real numbers. A tuple of real numbers is an
implementation of a vector — a tuple of real num-
bers is not a point. However, we can define an ab-
straction operation such that for any morphoid value
x we have that x@Point is a point. Details can be
found in (McAllester, 2014).

There is an abstraction ordering on morphoids
where x � y if x can be converted to y by ab-
stracting parts of x to points. For every type there
is a set of maximally abstract elements of that type.
The maximally abstract graphs are the graphs whose
nodes are points. The maximally abstract vector

82



spaces are those vector spaces in which the vectors
are points. The maximally abstract types are the
point types. For each morphoid type σ it is possible
to define an abstraction operation mapping x ∈ σ to
x@σ where x@σ is a maximally abstract member of
σ. For example, for any morphoid type σ ∈ typei
we have that σ@typei is the point type whose mem-
bers are the points of the form x@Point for x ∈ σ.
Details can be found in (McAllester, 2014).

The isomorphism relation x =σ y is defined to
mean that x ∈ σ, y ∈ σ, and there exists z ∈ σ
such that (x@σ) ◦ z−1 ◦ (y@σ) is defined. Condi-
tion (M) on morphoid types guarantees that this is
an equivalence relation on the elements of σ.

6 The Semantic Value Function

The semantics of morphoid type theory is an exten-
sion of the sementics of predicate calculus. The
semantics involves three concepts — variable in-
terpretations, semantic entailment, and a semantic
value function. These three concepts are defined
by mutual recursion where the recursion reduces the
size of the expressions involved. A variable inter-
pretation assigns a value to each variable declared
in a given context. More formally, for any well-
formed context Σ we write V JΣK for the set of vari-
able interpretations consistent with declarations and
Boolean assertions in Σ. We define V JΣK by the
following rules where this is undefined if no rule ap-
plies.

• We define V J�K to be the set containing the
empty variable interpretation.

• V JΣ;x :τK is defined if V JΣK is defined, x is
not declared in Σ, and Σ |= τ : typei in which
case V JΣ;x :τK is defined to be the set of vari-
able interpretations of the form ρ[x ← v] for
ρ ∈ V JΣK and v ∈ VΣ JτK ρ.
• V JΣ; ΦK is defined if V JΣK is defined and Σ |=

Φ : Bool in which case V JΣ; ΦK is defined to
be the set of all ρ ∈ V JΣK such that VΣ JΦK ρ =
True.

A semantic entailment is written as Σ |= Θ and
this holds if V JΣK is defined and Θ holds under all
variable interpretations in V JΣK. The entailment re-
lation Σ |= Θ holds if one of the following clauses
applies.

• The entailment Σ |= e :τ holds if V JΣK, VΣ JeK
and VΣ JτK are all defined and for all ρ ∈ V JΣK
we have that VΣ JτK ρ is a morphoid type and
VΣ JeK ρ ∈ VΣ JτK ρ.

• For a Boolean expression Φ, i.e., for Σ |= Φ :
Bool, we have that Σ |= Φ holds if for all ρ ∈
V JΣK we have VΣ JΦK ρ = True.

• We write Σ |= e1 .= e2 if V JΣK, VΣ Je1K and
VΣ Je2K are all defined and for ρ ∈ V JΣK we
have that VΣ Je1K ρ and VΣ Je2K ρ are the same
value.

For V JΣK defined and for an expression e that is
well-formed in the context Σ, we have a semantic
value function VΣ JeK. The semantic value function
VΣ JeK maps a variable interpretation ρ ∈ V JΣK to
a morphoid value VΣ JeK ρ. For V JΣK defined, the
following clauses state when VΣ JeK is defined and,
when it is defined, define the value VΣ JeK ρ for ρ ∈
V JΣK.
• x. For x declared in Σ and for ρ ∈ V JΣK we have
that VΣ JxK is defined with VΣ JxK ρ = ρ(x).
• Bool. We have that VΣ JBoolK ρ is the type con-
taining the two Boolean values True and False.

• typei. We have VΣ JtypeiK ρ is the type whose
members are all morphoid types in the set-theoretic
universe Vκi where κi is the ith inaccessible cardi-
nal.

• σ → τ. If Σ |= σ : typei, and Σ |= τ : typei,
then VΣ Jσ → τK is defined with VΣ Jσ → τK ρ =
(VΣ JσK ρ)→ (VΣ JτK ρ).
• f(e). If VΣ JfK and VΣ JeK are defined and for
all ρ ∈ V JΣK we have that VΣ JfK ρ can be ap-
plied to VΣ JeK ρ then VΣ Jf(e)K is defined with
VΣ Jf(e)K ρ = (VΣ JfK ρ)(VΣ JeK ρ).
• ∀ x : τ Φ[x]. If Σ; y : τ |= Φ[y] : Bool then
VΣ J∀ x :τ Φ[x]K is defined with VΣ J∀ x :τ Φ[x]K ρ
being True if for all v ∈ VΣ JτK ρ we have
VΣ;y :τ JΦ[y]K ρ[y ← v] = True.
• Φ ∨ Ψ. If Σ |= Φ : Bool and Σ |= Ψ : Bool
then VΣ JΦ ∨ΨK is defined with VΣ JΦ ∨ΨK ρ =
VΣ JΦK ρ ∨ VΣ JρK ρ.
• ¬Φ. If Σ |= Φ : Bool then VΣ J¬ΦK is defined
with VΣ J¬ΦK ρ = ¬VΣ JΦK ρ.

83



Bijection[σ, τ ] ≡ SubType(f :σ → τ, ∀y :τ ∃!x :σ f(x) =τ y) a;σ b ≡ ∃z : iso(σ, a, b)

Σ ` σ :typei
Σ ` a :τ
Σ ` b :η

Σ ` iso(σ, a, b) :typei

Σ ` σ, τ :typei
Σ ` f :Bijection[σ, τ ]

Σ `l(σ, τ, f) : iso(typei, σ, τ)
Σ ` ∀x :σ x ;l(σ,τ,f) f(x)

Σ ` η : iso(typei, σ, τ)

Σ `↑η→σ :Bijection[η, σ]
Σ `↓η→τ :Bijection[η, τ ]

Σ `





∀x :σ ∀y :τ
(x;η y) ⇔
∃z :η ↑η→σ(z) =σ x ∧

↓η→τ (z) =τ y

Σ ` c : iso(σ, a, b)

Σ ` c :σ

Σ ` a :σ, b :σ
Σ ` c : iso(σ, a, b)

Σ ` a =σ c
Σ ` b =σ c

Σ ` a =σ b

Σ ` a;σ b

Σ;x :σ; y :γ[x] ` e[x, y] :τ [x, y]
Σ ` a1 :σ, a2 :σ, a3 : iso(σ, a1, a2)
Σ ` b1 :γ[a1], b2 :γ[a2], b3 : iso(γ[a3], b1, b2)

Σ ` e[a3, b3] : iso(τ [a3, b3], e[a1, b1], e[a2, b2])

Σ ` σ3 : iso(typei, σ1, σ2)
Σ ` f1 :σ1 → τ1, f2 :σ2 → τ2, f3 :σ3 → τ3
Σ; z :σ3 ` f3(z) : iso(τ3, f1(↑σ3→σ1(z)), f2(↓σ3→σ2(z)))

Σ ` f3 : iso(σ3 → τ3, f1, f2)

Σ ` c : iso(σ, a, b)
Σ ` Φ[c]

Σ ` c : iso(SubType(x :σ, Φ[x]), a, b)

Σ ` c : iso(τ [d], a, b)
Σ ` d :σ

Σ ` c : iso(∃x :σ τ [x], a, b)

Figure 6: Internalizing Isomorphism. Here iso(σ, x, y) is the type whose elements are the σ-isomorphisms from x
to y. The fourth row gives the rules of iso-substition and iso-extensionality.

• s =σ w. If Σ |= s : σ and Σ |= w : σ then
VΣ Js =σ wK is defined with VΣ Js =σ wK ρ being
True if VΣ JsK ρ =VΣJσKρ VΣ JwK ρ.
• The(x :σ, Φ[x]). If Σ |= ∃!y :σ Φ[y] then

VΣ JThe(x :σ, Φ[x])K ρ =
The(VΣ JSubType(x :σ, Φ[x])K ρ).

• PairOf (x :σ, y :τ [x]) . If Σ |= σ :
typei and Σ; z : σ |= τ [z] : typei
then VΣ JPairOf (x :σ, y :τ [x])K is defined with
VΣ JPairOf (x :σ, y :τ [x])K ρ being the type con-
taining the pairs Pair(v, w) for v ∈ VΣ JσK ρ and
w ∈ VΣ; z :σ Jτ [z]K ρ[z ← v].
• Pair(u,w). If VΣ JuK and VΣ JwK are de-
fined then VΣ JPair(u,w)K is defined with
VΣ JPair(u,w)K ρ = Pair(VΣ JuK ρ, VΣ JwK ρ).

• πi(e). If VΣ JeK is defined and for all ρ ∈ V JΣK
we have that VΣ JeK ρ is a pair then VΣ Jπi(e)K is
defined with VΣ Jπi(e)K ρ = πi(VΣ JeK ρ).
• SubType (x :σ, Φ[x]) . If Σ |= σ : typei
and Σ; y : σ |= Φ[y] : Bool then
VΣ JSubType(x :σ, Φ[x])K is defined with
VΣ JSubType (x :σ, Φ[x])K ρ being the type
whose members are those values v ∈ VΣ JσK ρ with
VΣ; y :σ JΦ[y]K ρ[y ← v] = True.
• ∃x : σ τ [x]. If Σ; y : σ |= τ [y] : typei then
VΣ J∃x :σ τ [x]K is defined with VΣ J∃x :σ τ [x]K ρ
being the type containing those values w such that
there exists u ∈ VΣ JσK ρ with w ∈ VΣ Jτ [y]K ρ[y ←
u].

The morphoid operations can also be defined on
variable interpretations. For ρ ∈ V JΣK we have

84



Σ;α :typei ` γ[α] :typei
Σ ` σ :typei, τ :typei, f :Bijection[σ, τ ]
Σ ` a :γ[σ], b :γ[τ ], a;γ[l(σ,τ,f)] b

Σ ` Pair(σ, a) =PairOf(α :typei, y :γ[α]) Pair(τ, b)

Σ; α :typei ` δ[α], η[α] :typei
Σ ` σ, τ :typei
Σ ` f :Bijection[σ, τ ]
Σ ` a :PairOf(δ[σ], η[σ])
Σ ` b :PairOf(δ[τ ], η[τ ])

Σ `





(a;PairOf(δ[l(σ,τ,f)], η[l(σ,τ,f)]) b)
⇔

π1(a) ;δ[l(σ,τ,f)] π1(b) ∧
π2(a) ;η[l(σ,τ,f)] π2(b)

Σ; α :typei ` δ[α], η[α] :typei
Σ ` σ, τ :typei
Σ ` f :Bijection[σ, τ ]
Σ ` g :δ[σ]→ η[σ]
Σ ` h :δ[τ ]→ η[τ ]

Σ `





(g ;δ[l(σ,τ,f)]→η[l(σ,τ,f)] h)
⇔
∀x1 :δ[σ]
∀x2 :δ[τ ]
(x1 ;δ[l(σ,τ,f)] x2)
⇒ g(x1) ;η[l(σ,τ,f)] h(x2)

Figure 7: Some Derived Rules. The rules in this figure can be derived from the rules in figure 6. The first rule
constructs isomorphism relations at types of the form PairOf(α :typei, y :γ[α]). The rule states that Pair(σ, a) is
isomorphic to Pair(τ, b) if there exists a bijection f from σ to τ that carries a to b. The rules in the second row allow
one to determine whether f carries a to b in the case where γ[α] is a simple type over α (see the text). There are two
base cases not listed in the figure. For γ[α] = α we have that a ;l(σ,τ,f) b if and only if f(a) =τ b. If γ[α] does not
depend on α we have a;γ b if and only if a =γ b.

that Left(ρ) is the variable interpretation that maps
x to Left(ρ(x)). Right(ρ) is defined similarly. For
ρ ∈ V JΣK we have that ρ−1 maps x to ρ(x)−1. For
ρ, γ ∈ V JΣK we have that ρ◦γ is defined if and only
if Right(ρ) = Left(γ) in which case ρ ◦ γ is the
variable interpretation mapping x to ρ(x) ◦ γ(x).

A fundamental property of Morphoid type theory
is that if V JΣK is defined then it is closed under in-
verse and composition — for ρ ∈ V JΣK we have
ρ−1 ∈ V JΣK and for ρ, γ ∈ V JΣK with ρ◦γ defined
we have (ρ ◦ γ) ∈ V JΣK. Furthermore for VΣ JeK
defined and for ρ, γ ∈ V JΣK we have

VΣ JeK (ρ ◦ γ) = (VΣ JeK ρ) ◦ (VΣ JeK γ)
and

VΣ JeK (ρ−1) = (VΣ JeK ρ)−1.
Another fundamental property of the value func-

tion involves the abstraction ordering. The abstrac-
tion ordering can be extended to variable interpreta-
tions where we have ρ � γ if ρ and γ are defined on

the same set of variables and for each variable x we
have ρ(x) � γ(x). The value function is monotone
with respect to the abstraction ordering — for ρ � γ
we have VΣ JeK ρ � VΣ JeK γ.

7 Internalizing Isomorphism

Figure 6 gives inference rules for isomorphism. Fig-
ure 7 gives rules which can be derived from the
rules in figure 6. The first rule in figure 7 de-
rives isomorphisms at types of the form PairOf(α :
typei, τ [α]). We note that types Group and
TOP as defined in section 2 can be written as sub-
types of pair types of this form. The rule states
that two objects Pair(σ, a) and Pair(τ, b) of type
PairOf(α : typei, τ [α]) are isomorphic if there
exists a bijection f from σ to τ which carries a to
b. The two rules in the second row of figure 7 al-
low one to determine whether or not f carries a to
b in the case where τ [α] is a “simple type” over

85



α. To define the simple types we first introduce
the notation PairOf(γ, η) as an abbreviation for
PairOf(x : γ, y : η) in the case where x does not
occur in η. A simple type expression γ[α] over the
type variable α is then defined to be either the vari-
able α itself, a type γ not containing α, or a type
of the form PairOf(δ[α], η[α]) or δ[α] → η[α]
where δ[α] and η[α] are recursively simple type ex-
pressions over α. Subtypes of pair types of the form
PairOf(α : typei, γ[α]) where γ[α] is a simple
type over α covers the types Group and TOP as
well as many other mathematical concepts. We leave
the derivation of the rules in the second row of fig-
ure 7 as a (tricky and tedious) exercise for the reader.

While the rules in figure 7 are adequate in many
situations, they do not cover types such as

Pairof(p :Pairof(typei, typei), y :γ[p])

or
Pairof(G :Group, H :τ [G])

or

Pairof(f :typei → typei, A :τ [f ]).

For the general case we need the rules of figure 6.

8 Summary

Morphoid type theory is a type-theoretic foundation
for mathematics supporting the concept of isomor-
phism and the substitution of isomorphics. Mor-
phoid type theory is an extension of classical predi-
cate calculus that avoids the use of propositions-as-
types, path induction or squashing. Morphoid type
theory may be more comfortable for mathemticians
who take a realist or Platonic approach to the prac-
tice of mathematics.

References

Thierry Coquand and Gerard Huet. 1988. The calcu-
lus of constructions. Information and computation,
76(2):95–120.

Martin Hofmann and Thomas Streicher. 1994. The
groupoid model refutes uniqueness of identity proofs.
In Logic in Computer Science, 1994. LICS’94. Pro-
ceedings., Symposium on, pages 208–212. IEEE.

HoTT-Authors. 2013. Homotopy type the-
ory, univalent foundations of mathematics.
http://hottheory.files.wordpress.com/2013/03/hott-
online-611-ga1a258c.pdf.

Per Martin-Löf. 1971. A theory of types.
David McAllester. 2014. Morphoid type theory. CoRR,

abs/1407.7274.
John C. Reynolds. 1983. Types, abstraction and para-

metric polymorphism. In IFIP Congress, pages 513–
523.

Giovanni Sambin and Jan M Smith. 1998. Twenty Five
Years of Constructive Type Theory, volume 36. Oxford
University Press.

86


