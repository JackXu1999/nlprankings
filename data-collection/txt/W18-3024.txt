



















































LSTMs Exploit Linguistic Attributes of Data


Proceedings of the 3rd Workshop on Representation Learning for NLP, pages 180–186
Melbourne, Australia, July 20, 2018. c©2018 Association for Computational Linguistics

180

LSTMs Exploit Linguistic Attributes of Data

Nelson F. Liu♠♦ Omer Levy♠ Roy Schwartz♠♣ Chenhao Tan♥ Noah A. Smith♠
♠Paul G. Allen School of Computer Science & Engineering, University of Washington, Seattle, WA, USA

♦Department of Linguistics, University of Washington, Seattle, WA, USA
♣Allen Institute for Artificial Intelligence, Seattle, WA, USA

♥Department of Computer Science, University of Colorado, Boulder, CO, USA
{nfliu,omerlevy,roysch,nasmith}@cs.washington.edu,

chenhao.tan@colorado.edu

Abstract

While recurrent neural networks have
found success in a variety of natural lan-
guage processing applications, they are
general models of sequential data. We
investigate how the properties of natural
language data affect an LSTM’s ability to
learn a nonlinguistic task: recalling ele-
ments from its input. We find that models
trained on natural language data are able to
recall tokens from much longer sequences
than models trained on non-language se-
quential data. Furthermore, we show that
the LSTM learns to solve the memoriza-
tion task by explicitly using a subset of
its neurons to count timesteps in the in-
put. We hypothesize that the patterns and
structure in natural language data enable
LSTMs to learn by providing approximate
ways of reducing loss, but understanding
the effect of different training data on the
learnability of LSTMs remains an open
question.

1 Introduction

Recurrent neural networks (RNNs; Elman, 1990),
especially variants with gating mechanisms such
as long short-term memory units (LSTM; Hochre-
iter and Schmidhuber, 1997) and gated recurrent
units (GRU; Cho et al., 2014), have significantly
advanced the state of the art in many NLP tasks
(Mikolov et al., 2010; Vinyals et al., 2015; Bah-
danau et al., 2015, among others). However,
RNNs are general models of sequential data; they
are not explicitly designed to capture the unique
properties of language that distinguish it from
generic time series data.

In this work, we probe how linguistic proper-
ties such as the hierarchical structure of language

(Everaert et al., 2015), the dependencies between
tokens, and the Zipfian distribution of token fre-
quencies (Zipf, 1935) affect the ability of LSTMs
to learn. To do this, we define a simple memoriza-
tion task where the objective is to recall the iden-
tity of the token that occurred a fixed number of
timesteps in the past, within a fixed-length input.
Although the task itself is not linguistic, we use
it because (1) it is a generic operation that might
form part of a more complex function on arbitrary
sequential data, and (2) its simplicity allows us to
unfold the mechanism in the trained RNNs.

To study how linguistic properties of the train-
ing data affect an LSTM’s ability to solve the
memorization task, we consider several training
regimens. In the first, we train on data sampled
from a uniform distribution over a fixed vocab-
ulary. In the second, the token frequencies have
a Zipfian distribution, but are otherwise indepen-
dent of each other. In another, the token frequen-
cies have a Zipfian distribution but we add Marko-
vian dependencies to the data. Lastly, we train the
model on natural language sequences. To ensure
that the models truly memorize, we evaluate on
uniform samples containing only rare words.1

We observe that LSTMs trained to perform the
memorization task on natural language data or
data with a Zipfian distribution are able to memo-
rize from sequences of greater length than LSTMs
trained on uniformly-sampled data. Interestingly,
increasing the length of Markovian dependencies
in the data does not significantly help LSTMs to
learn the task. We conclude that linguistic prop-
erties can help or even enable LSTMs to learn the
memorization task. Why this is the case remains
an open question, but we propose that the addi-
tional structure and patterns within natural lan-
guage data provide additional noisy, approximate

1This distribution is adversarial with respect to the Zipfian
and natural language training sets.



181

paths for the model to minimize its loss, thus of-
fering more training signal than the uniform case,
in which the only way to reduce the loss is to learn
the memorization function.

We further inspect how the LSTM solves the
memorization task, and find that some hidden
units count the number of inputs. Shi et al. (2016a)
analyzed LSTM encoder-decoder translation mod-
els and found that similar counting neurons reg-
ulate the length of generated translations. Since
LSTMs better memorize (and thus better count)
on language data than on non-language data, and
counting plays a role in encoder-decoder models,
our work could also lead to improved training for
sequence-to-sequence models in non-language ap-
plications (e.g., Schwaller et al., 2017).

2 The Memorization Task

To assess the ability of LSTMs to retain and use
information, we propose a simple memorization
task. The model is presented with a sequence of
tokens and is trained to recall the identity of the
middle token.2 We predict the middle token since
predicting items near the beginning or the end
might enable the model to avoid processing long
sequences (e.g., to perfectly memorize the last to-
ken, simply set the forget gate to 0 and the input
gate to 1).3 All input sequences at train and test
time are of equal length. To explore the effect of
sequence length on LSTM task performance, we
experiment with different input sequence lengths
(10, 20, 40, 60, . . . , 300).

3 Experimental Setup

We modify the linguistic properties of the train-
ing data and observe the effects on model perfor-
mance. Further details are found in Appendix A,
and we release code for reproducing our results.4

Model. We train an LSTM-based sequence pre-
diction model to perform the memorization task.
The model embeds input tokens with a randomly
initialized embedding matrix. The embedded in-
puts are encoded by a single-layer LSTM and the
final hidden state is passed through a linear projec-
tion to produce a probability distribution over the

2Or the (n
2
+ 1)th token if the sequence length n is even.

3We experimented with predicting tokens at a range of
positions, and our results are not sensitive to the choice of
predicting exactly the middle token.

4http://nelsonliu.me/papers/
lstms-exploit-linguistic-attributes/

vocabulary.
Our goal is to evaluate the memorization abil-

ity of the LSTM, so we freeze the weights of the
embedding matrix and the linear output projection
during training. This forces the model to rely on
the LSTM parameters (the only trainable weights),
since it cannot gain an advantage in the task by
shifting words favorably in either the (random) in-
put or output embedding vector spaces. We also
tie the weights of the embeddings and output pro-
jection so the LSTM can focus on memorizing the
timestep of interest rather than also transforming
input vectors to the output embedding space.5 Fi-
nally, to examine the effect of model capacity on
memorization ability, we experiment with differ-
ent hidden state size values.

Datasets. We experiment with several distribu-
tions of training data for the memorization task.
In all cases, a 10K vocabulary is used.

• In the uniform setup, each token in the train-
ing dataset is randomly sampled from a uni-
form distribution over the vocabulary.

• In the unigram setup, we modify the uniform
data by integrating the Zipfian token frequen-
cies found in natural language data. The in-
put sequences are taken from a modified ver-
sion of the Penn Treebank (Marcus et al.,
1993) with randomly permuted tokens.

• In the 5gram, 10gram, and 50gram settings,
we seek to augment the unigram setting with
Markovian dependencies. We generate the
dataset by grouping the tokens of the Penn
Treebank into 5, 10, or 50-length chunks and
randomly permuting these chunks.

• In the language setup, we assess the effect
of using real language. The input sequences
here are taken from the Penn Treebank, and
thus this setup further extends the 5gram,
10gram, and 50gram datasets by adding the
remaining structural properties of natural lan-
guage.

We evaluate each model on a test set of uni-
formly sampled tokens from the 100 rarest words
in the vocabulary. This evaluation setup ensures
that, regardless of the data distribution the models
were trained on, they are forced to generalize in

5Tying these weights constrains the embedding size to al-
ways equal the LSTM hidden state size.

http://nelsonliu.me/papers/lstms-exploit-linguistic-attributes/
http://nelsonliu.me/papers/lstms-exploit-linguistic-attributes/


182

order to perform well on the test set. For instance,
in a test on data with a Zipfian token distribution,
the model may do well by simply exploiting the
training distribution (e.g., by ignoring the long tail
of rare words).

4 Results

We first observe that, in every case, the LSTM is
able to perform the task perfectly (or nearly so),
up to some input sequence length threshold. Once
the input sequence length exceeds this threshold,
performance drops rapidly.

How does the training data distribution af-
fect performance on the memorization task?
Figure 1 compares memorization performance of
an LSTM with 50 hidden units on various input
sequence lengths when training on each of the
datasets. Recall that the test set of only rare words
is fixed for each length, regardless of the training
data. When trained on the uniform dataset, the
model is perfect up to length 10, but does no better
than the random baseline with lengths above 10.
Training on the unigram setting enables the model
to memorize from longer sequences (up to 20), but
it begins to fail with input sequences of length 40;
evaluation accuracy quickly falls to 0.6 Adding
Markovian dependencies to the unigram dataset
leads to small improvements, enabling the LSTM
to successfully learn on inputs of up to length 40
(in the case of 5gram and 10gram) and inputs of
up to length 60 (in the case of 50gram). Lastly,
training on language significantly improves model
performance, and it is able to perfectly memorize
with input sequences of up to 160 tokens before
any significant degradation. These results clearly
indicate that training on data with linguistic prop-
erties helps the LSTM learn the non-linguistic task
of memorization, even though the test set has an
adversarial non-linguistic distribution.

How does adding hidden units affect mem-
orization performance? Figure 2 compares
memorization performance on each dataset for
LSTMs with 50, 100, and 200 hidden units. When
training on the uniform dataset, increasing the
number of LSTM hidden units (and thus also the
embedding size) to 100 or 200 does not help it
memorize longer sequences. Indeed, even at 400

6Manual inspection of the trained models reveals that they
predict the most frequent words in the corpus. Since the eval-
uation set has only the 100 rarest types, performance (0%
accuracy) is actually worse than in the uniform setting.

0 100 200 300
Input Sequence Length

0

20

40

60

80

100

A
cc

ur
ac

y

Uniform
Unigram
5gram
10gram
50gram
Language

Figure 1: Test set accuracy of LSTMs with
50 hidden units trained on the uniform, ∗gram,
and language datasets with various input sequence
lengths. 5gram and 10gram perform nearly identi-
cally, so the differences may not be apparent in the
figure. unigram accuracy plateaus to 0, and uni-
form accuracy plateaus to ≈0.01% (random base-
line). Best viewed in color.

0 100 200 300
0

25
50
75

100

A
cc

ur
ac

y

Uniform

0 100 200 300

Unigram

0 100 200 300

5gram

0 100 200 300
0

25
50
75

100

A
cc

ur
ac

y

10gram

0 100 200 300

50gram

0 100 200 300

Language

Input Sequence Length

50d 100d 200d

Figure 2: Test set accuracy of LSTMs with 50,
100 or 200 hidden units trained on each dataset
with various input sequence lengths.

and 800 we saw no improvement (not shown in
Figure 2). When training on any of the other
datasets, adding more hidden units eventually
leads to perfect memorization for all tested input
sequence lengths. We take these results as a sug-
gestion that successful learning for this task re-
quires sufficiently high capacity (dimensionality
in the LSTM). The capacity need is diminished
when the training data is linguistic, but LSTMs
trained on the uniform set cannot learn the memo-
rization task even given high capacity.



183

5 Analysis

Throughout this section, we analyze an LSTM
with 100 hidden units trained with the language
setting with an input sequence length of 300. This
setting is a somewhat closer simulation of current
NLP models, since it is trained on real language
and recalls perfectly with input sequence lengths
of 300 (the most difficult setting tested).

How do LSTMs solve the memorization task?
A simple way to solve the memorization task is
by counting. Since all of the input sequences are
of equal length and the timestep to predict is con-
stant throughout training and testing, a successful
learner could maintain a counter from the start of
the input to the position of the token to be pre-
dicted (the middle item). Then, it discards its pre-
vious cell state, consumes the label’s vector, and
maintains this new cell state until the end of the
sequence (i.e., by setting its forget gate near 1 and
its input gate near 0).

While LSTMs clearly have the expressive
power needed to count and memorize, whether
they can learn to do so from data is another mat-
ter. Past work has demonstrated that the LSTMs
in an encoder-decoder machine translation model
learn to increment and decrement a counter to
generate translations of proper length (Shi et al.,
2016a) and that representations produced by auto-
encoding LSTMs contain information about the
input sequence length (Adi et al., 2017). Our ex-
periments isolate the counting aspect from other
linguistic properties of translation and autoencod-
ing (which may indeed be correlated with count-
ing), and also test this ability with an adversarial
test distribution and much longer input sequences.

We adopt the method of Shi et al. (2016a) to in-
vestigate whether LSTMs solve the memorization
task by learning to count. We identify the neu-
rons that best predict timestep information by fit-
ting a linear regression model to predict the num-
ber of inputs seen from the hidden unit activation.
When evaluating on the test set, we observe that
the LSTM cell state as a whole is very predictive
of the timestep, with R2 = 0.998.

While no single neuron perfectly records the
timestep, several of them are strongly correlated.
In our model instance, neuron 77 has the highest
correlation (R2 = 0.919), and neuron 61 is next
(R2 = 0.901). The activations of these neurons
over time for a random correctly classified test in-

0 50 100 150 200 250 300
Timestep

0

10

20

A
ct

iv
at

io
n 

V
al

ue

Neuron 77
Neuron 61

Figure 3: Activations of the neurons at indices 77
and 61 over time, showing counter-like behavior
up to the target timestep to be remembered.

put linearly increase up to the target token, after
which the activations falls to nearly 0 (Figure 3).

One hypothesis for why linguistic data helps.
During training, the LSTM must: (1) determine
what the objective is (here, “remember the mid-
dle token”) and (2) adjust its weights to minimize
loss. We observed that adding hidden units to
LSTMs trained on unigram or language sets im-
proves their ability to learn from long input se-
quences, but does not affect LSTMs trained on the
uniform dataset. One explanation for this disparity
is that LSTMs trained on uniform data are simply
not learning what the task is—they do not real-
ize that the label always matches the token in the
middle of the input sequence, and thus they can-
not properly optimize for the task, even with more
hidden units. On the other hand, models trained on
unigram or language can determine that the label
is always the middle token, and can thus learn the
task. Minimizing training loss ought to be easier
with more parameters, so adding hidden units to
LSTMs trained on data with linguistic attributes
increases the length of input sequences that they
can learn from.

But why might LSTMs trained on data with lin-
guistic attributes be able to effectively learn the
task for long input sequences, whereas LSTMs
trained on the uniform dataset cannot? We conjec-
ture that linguistic data offers more reasonable, if
approximate, pathways to loss minimization, such
as counting frequent words or phrases. In the uni-
form setting, the model has only one path to suc-
cess: true memorization, and it cannot find an ef-
fective way to reduce the loss. In other words, lin-
guistic structure and the patterns of language may
provide additional signals that correlate with the
label and facilitate learning the memorization task.



184

0 10 20 30 40 50
# Epochs

0
10
20
30
40
50
60
70
80
90

100
A

cc
ur

ac
y

Validation
Test

Figure 4: Model validation and test accuracy over
time during training. Validation improves faster
than test, indicating that the model exploits lin-
guistic properties of the data during training.

Figure 4 shows that models trained on the uni-
gram and language datasets converge to high val-
idation accuracy faster than high test accuracy.
This suggests that models trained on data with lin-
guistic attributes first learn to do well on the train-
ing data by exploiting the properties of language
and not truly memorizing. Perhaps the model gen-
eralizes to actually recalling the target token later,
as it refines itself with examples from the long tail
of infrequent tokens.

Figure 4 may show this shift from exploiting
linguistic properties to true memorization. The
validation and test accuracy curves are quite syn-
chronized from epoch 37 onward, indicating that
the model’s updates affect both sets identically.
The model clearly learns a strategy that works
well on both datasets, which strongly suggests that
it has learned to memorize. In addition, when
the model begins to move toward true memoriza-
tion, we’d expect validation accuracy to momen-
tarily falter as it moves away from the crutches
of linguistic features—this may be the dip at
around epoch 35 from perfect validation accuracy
to around 95% accuracy.

6 Related Work

To our knowledge, this work is the first to study
how linguistic properties in training data affect the
ability of LSTMs to learn a general, non-linguistic,
sequence processing task.

Previous studies have sought to better under-
stand the empirical capabilities of LSTMs trained
on natural language data. Linzen et al. (2016)
measured the ability of LSTMs to learn syntac-
tic long range dependencies commonly found in
language, and Gulordava et al. (2018) provide evi-
dence that LSTMs can learn the hierarchical struc-

ture of language. Blevins et al. (2018) show that
the internal representations of LSTMs encode syn-
tactic information, even when trained without ex-
plicit syntactic supervision.

Also related is the work of Weiss et al. (2018),
who demonstrate that LSTMs are able to count
infinitely, since their cell states are unbounded,
while GRUs cannot count infinitely since the ac-
tivations are constrained to a finite range. One
avenue of future work could compare the perfor-
mance of LSTMs and GRUs on the memorization
task.

Past studies have also investigated what infor-
mation RNNs encode by directly examining hid-
den unit activations (Karpathy et al., 2016; Li
et al., 2016; Shi et al., 2016a, among others) and
by training an auxiliary classifier to predict vari-
ous properties of interest from hidden state vectors
(Shi et al., 2016b; Adi et al., 2017; Belinkov et al.,
2017, among others).

7 Conclusion

In this work, we examine how linguistic attributes
in training data can affect an LSTM’s ability to
learn a simple memorization task. We find that
LSTMs trained on uniformly sampled data are
only able to learn the task with the sequence length
of 10, whereas LSTMs trained with language data
are able to learn on sequences of up to 300 tokens.

We further investigate how the LSTM learns to
solve the task, and find that it uses a subset of
its hidden units to track timestep information. It
is still an open question why LSTMs trained on
linguistic data are able to learn the task whereas
LSTMs trained on uniformly sampled data cannot;
based on our observations, we hypothesize that
the additional patterns and structure in language-
based data may provide the model with approx-
imate paths of loss minimization, and improve
LSTM trainability as a result.

Acknowledgments

We thank the ARK as well as the anonymous re-
viewers for their valuable feedback. NL is sup-
ported by a Washington Research Foundation Fel-
lowship and a Barry M. Goldwater Scholarship.
This work was supported in part by a hardware gift
from NVIDIA Corporation and a UW High Per-
formance Computing Club Cloud Credit Award.



185

References
Yossi Adi, Einat Kermany, Yonatan Belinkov, Ofer

Lavi, and Yoav Goldberg. 2017. Fine-grained anal-
ysis of sentence embeddings using auxiliary predic-
tion tasks. In Proc. of ICLR.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In Proc. of ICLR.

Yonatan Belinkov, Nadir Durrani, Fahim Dalvi, Hassan
Sajjad, and James Glass. 2017. What do neural ma-
chine translation models learn about morphology?
In Proc. of ACL.

Terra Blevins, Omer Levy, and Luke Zettlemoyer.
2018. Deep RNNs learn hierarchical syntax. In
Proc. of ACL.

Kyunghyun Cho, Bart van Merrienboer, Çaglar
Gülçehre, Dzmitry Bahdanau, Fethi Bougares, Hol-
ger Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using RNN encoder-decoder
for statistical machine translation. In Proc. of
EMNLP.

Jeffrey L. Elman. 1990. Finding structure in time.
Cognitive Science, 14:179–211.

Martin B.H. Everaert, Marinus A.C. Huybregts, Noam
Chomsky, Robert C. Berwick, and Johan J. Bolhuis.
2015. Structures, not strings: linguistics as part
of the cognitive sciences. Trends in Cognitive Sci-
ences, 19(12):729–743.

Kristina Gulordava, Piotr Bojanowski, Edouard Grave,
Tal Linzen, and Marco Baroni. 2018. Colorless
green recurrent networks dream hierarchically. In
Proc. of NAACL.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural Computation, 9
8:1735–80.

Andrej Karpathy, Justin Johnson, and Li Fei-Fei. 2016.
Visualizing and understanding recurrent networks.
In Proc. of ICLR.

Diederik P. Kingma and Jimmy Ba. 2015. Adam:
a method for stochastic optimization. In Proc. of
ICLR.

Jiwei Li, Xinlei Chen, Eduard Hovy, and Dan Jurafsky.
2016. Visualizing and understanding neural models
in NLP. In Proc. of NAACL.

Tal Linzen, Emmanuel Dupoux, and Yoav Goldberg.
2016. Assessing the ability of LSTMs to learn
syntax-sensitive dependencies. Transactions of the
Association of Computational Linguistics, 4(1):521–
535.

Mitchell P. Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. 1993. Building a large annotated
corpus of English: the Penn Treebank. Computa-
tional Linguistics, 19(2):313–330.

Tomáš Mikolov, Martin Karafiát, Lukás Burget, Jan
Cernocký, and Sanjeev Khudanpur. 2010. Recur-
rent neural network based language model. In Proc.
of INTERSPEECH.

Tomáš Mikolov, Stefan Kombrink, Lukáš Burget, Jan
Černockỳ, and Sanjeev Khudanpur. 2011. Exten-
sions of recurrent neural network language model.
In Proc of. ICASSP.

Philippe Schwaller, Theophile Gaudin, David Lanyi,
Costas Bekas, and Teodoro Laino. 2017. “found
in translation”: predicting outcomes of complex or-
ganic chemistry reactions using neural sequence-to-
sequence models. In Proc. of NIPS Machine Learn-
ing for Molecules and Materials Workshop.

Xing Shi, Kevin Knight, and Deniz Yuret. 2016a. Why
neural translations are the right length. In Proc. of
EMNLP.

Xing Shi, Inkit Padhi, and Kevin Knight. 2016b. Does
string-based neural MT learn source syntax? In
Proc. of EMNLP.

Oriol Vinyals, Lukasz Kaiser, Terry Koo, Slav Petrov,
Ilya Sutskever, and Geoffrey E. Hinton. 2015.
Grammar as a foreign language. In Proc. of NIPS.

Gail Weiss, Yoav Goldberg, and Eran Yahav. 2018. On
the practical computational power of finite precision
RNNs for language recognition. In Proc. of ACL.

George Kingsley Zipf. 1935. The Psycho-biology of
Language. Houghton, Mifflin.



186

Appendices
A Experimental Setup Details

Penn Treebank Processing Our experiments
use a preprocessed version of the Penn Treebank
commonly used in the language modeling commu-
nity and first introduced by Mikolov et al. (2011).
This dataset has 10K types, hence why we use this
vocabulary size for all experiments. We generate
examples by concatenating the sentences together
and taking subsequences of the desired input se-
quence length.

Training The model is trained end-to-end to di-
rectly predict the tokens at a particular timestep in
the past; it is optimized with Adam (Kingma and
Ba, 2015) with an initial learning rate of 0.001,
which is halved whenever the validation dataset
(a held-out portion of the training dataset) loss
fails to improve for three consecutive epochs. The
model is trained for a maximum of 240 epochs
or until it converges to perfect validation perfor-
mance. We do not use dropout; we included it
in initial experiments, but it severely hampered
model performance and does not make much sense
for a task where the goal is to explicitly memo-
rize. We ran each experiment three times with dif-
ferent random seeds and evaluate the model with
the highest validation accuracy on the test set. We
take the best since we are interested in whether the
LSTMs can be trained for the task.


