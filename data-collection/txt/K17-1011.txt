



















































Top-Rank Enhanced Listwise Optimization for Statistical Machine Translation


Proceedings of the 21st Conference on Computational Natural Language Learning (CoNLL 2017), pages 90–99,
Vancouver, Canada, August 3 - August 4, 2017. c©2017 Association for Computational Linguistics

Top-Rank Enhanced Listwise Optimization
for Statistical Machine Translation

Huadong Chen,† Shujian Huang,†∗ David Chiang,‡ Xinyu Dai,† Jiajun Chen†
†State Key Laboratory for Novel Software Technology, Nanjing University
{chenhd,huangsj,daixinyu,chenjj}@nlp.nju.edu.cn

‡Department of Computer Science and Engineering, University of Notre Dame
dchiang@nd.edu

Abstract

Pairwise ranking methods are the basis
of many widely used discriminative train-
ing approaches for structure prediction
problems in natural language processing
(NLP). Decomposing the problem of rank-
ing hypotheses into pairwise comparisons
enables simple and efficient solutions.
However, neglecting the global ordering
of the hypothesis list may hinder learning.
We propose a listwise learning framework
for structure prediction problems such as
machine translation. Our framework di-
rectly models the entire translation list’s
ordering to learn parameters which may
better fit the given listwise samples. Fur-
thermore, we propose top-rank enhanced
loss functions, which are more sensitive to
ranking errors at higher positions. Exper-
iments on a large-scale Chinese-English
translation task show that both our list-
wise learning framework and top-rank en-
hanced listwise losses lead to significant
improvements in translation quality.

1 Introduction

Discriminative training methods for structured
prediction in natural language processing (NLP)
aim to estimate the parameters of a model that as-
signs a score to each hypothesis in the (possibly
very large) search space. For example, in statisti-
cal machine translation (SMT), the model assigns
a score to each possible translation, and in syn-
tactic parsing, the function assigns a score to each
possible syntactic tree. Ideally, the model should
assign scores that rank hypotheses according to
their true quality. In this paper, we consider the
problem of discriminative training for SMT.

∗Corresponding author.

Traditional SMT systems use log-linear models
with only about a dozen features, such as trans-
lation probabilities and language model probabil-
ities (Yamada and Knight, 2001; Koehn et al.,
2003; Chiang, 2005; Liu et al., 2006). These mod-
els can be tuned by minimum error rate training
(MERT) (Och, 2003), which directly optimizes
BLEU using coordinate ascent combined with a
global line search.

To enable training of modern SMT systems,
which can have thousands of features or more,
many research efforts have been made towards
scalable discriminative training methods (Chiang
et al., 2008; Hopkins and May, 2011; Bazrafshan
et al., 2012). Most of these methods either de-
fine loss functions that push the model to correctly
compare pairs of hypotheses, or use approximate
optimization methods that effectively do the same.
For practical reasons, only a subset of the pairs are
considered; these pairs are selected by either sam-
pling (Hopkins and May, 2011) or heuristic meth-
ods (Watanabe et al., 2007; Chiang et al., 2008).

But this pairwise approach neglects the global
ordering of the list of hypotheses, which may
lead to problems trying to learn good parameter
values. Inspired by research in information re-
trieval (IR) (Cao et al., 2007; Xia et al., 2008),
we propose to directly model the ordering of the
whole translation list, instead of decomposing it
into translation pairs.

Previous research has tried to integrate listwise
methods into SMT, but almost all of them focus
on the reranking task, which aims to rescore the
fixed translation lists generated by a baseline sys-
tem. They try to either use listwise approaches
to training the reranking model (Li et al., 2013;
Niehues et al., 2015) or replace the pointwise
ranking function, i.e. the log-linear model, with
a listwise ranking function by introducing listwise
features (Zhang et al., 2016). In this paper, we

90



focus on listwise approaches that can learn bet-
ter discriminative models for SMT. We present a
listwise learning framework for tuning translation
systems that uses two listwise ranking objectives
originally developed for IR, ListNet (Cao et al.,
2007) and ListMLE (Xia et al., 2008). But un-
like standard IR problems, structured prediction
problems usually have a huge search space, and
at each training iteration, the list of search results
can vary. The usual strategy is to form the union
of all lists of search results, but this can lead to a
“patchy” list that doesn’t represent the full search
space well. The listwise approaches always based
on the permutation probability distribution over
the list. Modeling the distribution over a “patchy”
list, whose elements were generated by different
parameters will affect listwise approaches’ per-
formance. To address this issue, we design an
instance-aggregating method: Instead of treating
the data as a fixed-size set of lists that each grow
over time as new translations are added at each it-
eration, we treat the data as a growing set of lists;
each time a sentence is translated, the k-best list of
translations is added as a new list.

We also extend standard listwise training by
considering the importance of different instances
in the list. Based on the intuition that instances
at the top may be more important for ranking, we
propose top-rank enhanced loss functions, which
incorporate a position-dependent cost that penal-
izes errors occurring at the top of the list more
strongly.

We conduct large-scale Chinese-to-English
translation experiments showing that our top-rank
enhanced listwise learning methods significantly
outperform other tuning methods with high di-
mensional feature sets. Additionally, even with
a small basic feature set, our methods still obtain
better results than MERT.

2 Background

2.1 Log-linear models
In this paper, we assume a log-linear model, which
defines a scoring function on target translation hy-
potheses e, given a source sentence f :

Pr(e | f) = exp s(e, f)∑
e′ exp s(e′, f)

(1)

s(e, f) = w · h(e | f) (2)
where h(e | f) is the feature vector and w is the
feature weight vector.

𝑓𝑖  𝑓𝑖+1 𝑓𝑖+2 𝑓𝑖+3 

𝑒𝑗  𝑒𝑗+1 𝑒𝑗+2 𝑒𝑗+3 𝑒𝑗+4 

Figure 1: An example of word-phrase features for
a phrase translation. The fi and ej represent the i-
th in the source phrase and j-th word in the target
phrase, respectively.

The process of training a SMT system includes
both learning the sub-models, which are included
in the feature vector h, and learning the weight
vector w.

Then the decoding of SMT systems can be for-
mulated as a search for the translation ê with the
highest model score:

ê = arg max
e∈E

s(e, f) (3)

where E is the set of all reachable hypotheses.
2.2 SMT Features
In this paper, we use a hierarchical phrase based
translation system (Chiang, 2005). For convenient
comparison, we divide features of SMT into the
following three sets.

Basic Features: The basic features are those
commonly used in hierarchical phrase based trans-
lation systems, including a language model, four
translation model features, word, phrase and rule
penalties, and penalties for unknown words, the
glue rule and null translations.

Extended Features: Inspired by Chen et al.
(2013), we manually group the parallel training
data into 15 sets, according to their genre and ori-
gin. The translation models trained on each set are
used as separate features. We also add an indica-
tor feature for each individual training set to mark
where the translation rule comes from. The ex-
tended features provide additional 60 translation
model features and 16 indicator features, which is
too many to be tuned with MERT.

Sparse Features: We use word-phrase pair
features as our sparse features, which reflect
the word-phrase correspondence in a hierarchical
phrase (Watanabe et al., 2007). Figure 1 illustrates
an example of word-phrase pair features for a
phrase translation pair fi, ..., fi+3 and ej , ..., ej+4.
Word-phrase pair features (fi, ej+1), (fi+1, ej),
(fi+2, ej+2ej+3), (fi+3, ej+4) will be fired for the
translation rule with the given word alignment. In

91



practice, these feature only fire when all the source
and target words in the feature are both in the top
100 most frequent words.

2.3 Tuning via Pairwise Ranking

The beam search strategy for SMT decoding pro-
cess makes it convenient to get a k-best transla-
tion list for each source sentence. Given a set of
source sentences and their corresponding transla-
tion lists, the tuning problem could be regarded
as a ranking task. Many recently proposed SMT
tuning methods are based on the pairwise rank-
ing framework (Chiang et al., 2008; Hopkins and
May, 2011; Bazrafshan et al., 2012).

Pairwise ranking optimization (PRO) (Hopkins
and May, 2011) is a commonly used tuning
method. The idea of PRO is to sample pairs (e, e′)
from the k-best list, and train a linear binary clas-
sifier to predict whether eval(e) > eval(e′) or
eval(e) < eval(e′), where eval(·) is an extrinsic
metric like BLEU. In this paper, we use sentence-
level BLEU with add-one smoothing (Lin and
Och, 2004).

The method gets a comparable BLEU score to
MERT and MIRA (Chiang et al., 2008), and scales
well on large feature sets. Other pairwise ranking
methods employ similar procedures.

3 Listwise Learning Framework

Although ranking methods have shown their effec-
tiveness in tuning for SMT systems (Hopkins and
May, 2011; Watanabe, 2012; Dreyer and Dong,
2015), most proposed ranking approaches view
tuning as pairwise ranking. These approaches de-
compose the ranking of the hypothesis list into
pairs, which might limit the training method’s
ability to learn better parameters. To preserve the
ranking information, we first formulate training as
an instance of the listwise ranking problem. Then
we propose a learning method based on the iter-
ative learning framework of SMT tuning and fur-
ther investigate the top-rank enhanced losses.

3.1 Training Objectives

3.1.1 The Permutation Probability Model
In order to directly model the translation list,
we first introduce a probabilistic model proposed
by Guiver and Snelson (2009). A ranking of a list
of k translations can be thought of as a function π
from [1, k] to translations, where each π(t) is the
t-th translation candidate in the ranking. A scoring

function z (which could be either the model score,
s, or the BLEU score, eval) induces a probability
distribution over rankings:

Pz(π) =
k∏
j=1

exp z(π(j))∑k
t=j exp z(π(t))

. (4)

3.1.2 Loss Functions
Based on the probabilistic model above, the loss
function can be defined as the difference between
the distribution over the ranking according to
eval(·) and s(·). Thus, we introduce the follow-
ing two standard listwise losses.

ListNet: The ListNet loss is the cross entropy
between the distributions calculated from eval(·)
and s(·), respectively, over all permutations.

Due to the exponential number of permutations,
Cao et al. (2007) propose a top-one loss instead.
Given the function eval(·) and s(·), the top-one
loss is defined as:

LNet-T = −
k∑
j=1

P ′eval(ej) logP
′
s(ej)

P ′z(ej) =
exp z(ej)∑k
i=1 exp z(ei)

where ej is the j-th element in the k-best list,
and P ′z(ej) is the probability that translation ej is
ranked at the top by the function z.

ListMLE: The ListMLE loss is the negative
log-likelihood of the permutation probability of
the correct ranking πeval, calculated according
to s(·) (Xia et al., 2008):
LMLE = − logPs(πeval)

= −
k∑
j=1

log
exp s(πeval(j))∑k
t=j exp s(πeval(t))

.
(5)

The training objective, which we want to min-
imize, is simply the total loss over all the lists in
the tuning set.

3.2 Training with Instance Aggregating
Because there can be exponentially many possi-
ble translations of a sentence, it’s only feasible to
rank the k best translations rather than all of them;
because the feature weights change at each itera-
tion, we have a different k-best list to rank at each
iteration. This is different from standard ranking
problems in which the training instances stay the
same each iteration.

92



Algorithm 1 MERT-like tuning algorithm
Require: Training sentences {f}, maximum

number of iterations I , randomly initialized
model parameters w0.

1: for i = 0 to I do
2: for source sentences f do
3: Decode f : E if = KbestDecoder(f ,wi)
4: T ← T ∪ {E if}
5: end for
6: Training: wi+1 = Optimization(T,wi)
7: end for

Many previous tuning methods address this
problem by merging the k-best list at the current
iteration with the k-best lists at all previous itera-
tions into a single list (Hopkins and May, 2011).
We call this k-best merging. More formally, if E if
is the k-best list of source sentence f at iteration i,
then at each iteration, the model is trained on the
set of lists:

Ef =
i⋃

j=0

Ejf

T = {Ef | ∀f}
For each source sentence f , T has only one train-
ing sample, which is a better and better approxi-
mation to the full hypothesis set of f as more iter-
ations pass.

Unlike previous tuning methods, our tuning
method focuses on the distribution over permuta-
tion of the whole list. Moreover, unlike with list-
wise optimization methods used in IR, the k-best
list produced for a source sentence at one iteration
can differ dramatically from the k-best list pro-
duced at the next iteration. Merging k-best lists
across iterations, each of which represents only a
tiny fraction of the full search space, will lead to
a “patchy” list that may hurt the learning perfor-
mance of the listwise optimization algorithms.

To address this challenge, we propose instance
aggregating: instead of merging k-best lists across
different iterations, we view the translation lists
from different iterations as individual training in-
stances:

T = {Ejf | ∀f , 0 ≤ j ≤ i}.
With this method, each source sentence f has i
training instances at the i-th training iteration. In
this way, we avoid “patchy” lists and obtain a bet-
ter set of instances for tuning.

Algorithm 2 Listwise Optimization Algorithm
Require: Training instances T , model parameters

w, maximum number of epochs J , batch size
b, number of batches B

1: for j = 0 to J do
2: for i = 0 to B do
3: Sample a minibatch of b lists from T

without replacement
4: Calculate loss function L
5: Calculate gradient∇L
6: wt+1 = AdaDelta(wt, L,∆w)
7: end for
8: end for
9: w = BestBLEU([E ]m1 )

The above instance aggregating method can be
used in a MERT-like iterative tuning algorithm as
shown in Algorithm 1, which can be easily inte-
grated into current open source systems. The two
standard listwise losses can be easily optimized
using gradient-based methods (Algorithm 2); both
losses are convex, so convergence to a global opti-
mum is guaranteed. The gradients of ListNET and
ListMLE with respect to the parameters w for a
single sentence are:

∂LNet-T
∂w

= −
k∑
j=1

P ′eval(ej)

(
∂s(ej)
∂w

−
k∑
j=1

exp s(ej)∑k
j′=1 exp s(ej′)

∂s(ej)
∂w

)

∂LMLE
∂w

= −
k∑
j=1

(
∂s(πeval(j))

∂w

−
k∑
t=j

exp s(πeval(t))∑k
t′=j exp s(πeval(t′))

∂s(πeval(t))
∂w

)

For optimization, we use a mini-batch stochas-
tic gradient descent (SGD) algorithm together
with AdaDelta (Zeiler, 2012) algorithm to adap-
tively set the learning rate.

4 Top-Rank Enhanced Losses

In evaluating an SMT system, one naturally cares
much more about the top-ranked results than the
lower-ranked results. Therefore, we think that get-
ting the ranking right at the top of a list is more rel-
evant for tuning. Therefore, we should pay more

93



attention to the top-ranked translations instead of
forcing the model to rank the entire list correctly.

Position-dependent Attention: To do this, we
assign a higher cost to ranking errors that occur at
the top and a lower cost to errors at the bottom. To
make the cost sensitive to position, we define it as:

c(j) =
k − j + 1∑k

t=1 t
(6)

where j is the position in the ranking and k is the
size of the list.

Based on this cost function, we propose simple
top-rank enhanced listwise losses as extensions of
both the ListNet loss and the ListMLE loss. The
loss functions are defined as follows:

LMLE-TE = −
k∑
j=1

c(j) log
exp s(πeval(j))∑k
t=j exp s(πeval(t))

LNet-TE = −
∑
∀π∈Ωk

P ′′eval (π)
k∑
j=1

c(j) log qj(π)

qj(π) =
exp z(π(j))∑k
t=j exp z(π(t))

.

Along similar lines, Xia et al. (2008) also pro-
posed a top-n ranking method, which assumes
that only the correct ranking of top-n hypothe-
ses is useful. Compared to our top-rank enhanced
losses, it may be too harsh to discard informa-
tion about the rest of the ordering altogether; our
method retains the whole ordering but weights it
by position.

5 Experiments and Results

5.1 Data and Preparation

We conduct experiments on a large scale Chinese-
English translation task. The parallel data comes
from LDC corpora1, which consists of 8.2 million
of sentence pairs. Monolingual data includes Xin-
hua portion of Gigaword corpus. We use NIST
MT03 evaluation test data as the development set,
MT02, MT04 and MT05 as the test set.

The Chinese side of the corpora is word seg-
mented using ICTCLAS2. Word alignments of the

1The corpora include LDC2002E18, LDC2003E14,
LDC2004E12, LDC2004T08, LDC2005T10 and
LDC2007T09

2http://ictclas.nlpir.org/

Data Usage Sents.
LDC TM train 8,260,093

Gigaword LM train 14,684,074
MT03 train 919
MT02 test 878
MT04 test 1,788
MT05 test 1,082

Table 1: Experimental data and statistics.

parallel data are learned by running GIZA++ (Och
and Ney, 2003) in both directions and refined un-
der the “grow-diag-final-and” method. We train a
5-gram language model on the monolingual data
with Modified Kneser-Ney smoothing(Chen and
Goodman, 1999). Throughout the experiments,
our translation system is an in-house implemen-
tation of the hierarchical phrase-based translation
system (Chiang, 2005). The translation quality is
evaluated by 4-gram case-insensitive BLEU (Pa-
pineni et al., 2002). Statistical significance test-
ing between systems is conducted by bootstrap re-
sampling implemented by Clark et al. (2011).

5.2 Tuning Settings

We build baselines for extended and sparse fea-
ture sets with two different tuning methods. First,
we tune with PRO (Hopkins and May, 2011). As
reported by Cherry and Foster (2012), it’s hard
to find the setting that performs well in general.
We use MegaM version (Daumé III, 2004) with
30 iterations for basic feature set and 100 itera-
tions for extended and sparse feature sets. Second,
we run the k-best batch MIRA (KB-MIRA) which
shows comparable results with online version of
MIRA (Cherry and Foster, 2012; Green et al.,
2013). In our experiments, we run KB-MIRA with
standard settings in Moses3. For the basic feature
set, the baseline is tuned with MERT (Och, 2003).

For all our listwise tuning methods, we set batch
size to 10. In our experiments, we can’t find
a epoch size perform well in general, so we set
epoch size to 100 for ListMLE with basic features,
200 for ListMLE with extended and sparse fea-
tures, and 300 for ListNet. These values are set to
achieve the best performance on the development
set.

We set beam size to 20 throughout our exper-
iments unless otherwise noted. Following Clark
et al. (2011), we run the same training procedure
3 times and present the average results for stabil-
ity. All tuning methods are executed for 40 iter-

3http://www.statmt.org/moses/

94



Methods MT02 MT04 MT05 AVG
Netm 40.36 38.30 37.93 38.86(+0.00)
ListNet 40.75 38.69 38.31 39.25(+0.39)
MLEm 39.82 37.88 37.65 38.45(+0.00)
ListMLE 40.40 38.21 38.04 38.88(+0.43)

Table 2: The comparison of instances aggre-
gating and k-best merging on the extended fea-
ture set.(Netm and MLEm denote ListNet and
ListMLE with k-best merging respectively.)

1 2 3 4 5 6 7 8 9
Top-n

38.0

38.5

39.0

39.5

40.0

40.5

41.0

41.5

BL
EU

Dev03

Test02

Test03

Test04

Figure 2: Effect of different n for Top-n ListMLE.
We investigate the effect on the extended feature
set.

ations of the outer loop and returned the weights
that achieve the best development BLEU scores.
For all tuning methods on sparse feature set, we
use the weight vector tuned by PRO on the ex-
tended feature set as initial weights.

5.3 Experiments of Listwise Learning
Framework

We first investigate the effectiveness of our in-
stance aggregating training procedure. The results
are presented in Table 2. The table compare train-
ing with instance aggregating and k-best merging.
As the result suggested, with the instance aggre-
gating method, the performance improves on both
listwise tuning approaches. For the rest of this pa-
per, we use the instance aggregating as standard
setting for listwise tuning approaches.

To verify the performance of our proposed list-
wise learning framework, we first compare sys-
tems with standard listwise losses to the baseline
systems. The first four rows in Table 3 show
the results. ListNet can outperform PRO by 0.55
BLEU score and 0.26 BLEU score on extended
feature set and sparse feature set, respectively. Its
main reason is that our listwise methods can obtain
structured order information when we take com-

plete translation list as instance.
We also observe that ListMLE can only get

a modest performance compare to ListNet. We
think the objective function of standard ListMLE
which forces the whole list ranking in a correct or-
der is too hard. ListNet mainly benefits from its
top one permutation probability which only con-
cerns the permutation with the best object ranked
first.

5.4 Effect of Top-rank Enhanced Losses

To verify our assumption that the correct rank in
the top portion of a list is more informative, we
conduct this set of experiments. Figure 2 shows
the results of top-n ListMLE with different n.
Compared to ListMLE in Table 2, we find top-
n ListMLE can make significant improvements,
which means that the top rank is more important.
We can observe an improvement in all test sets
when we set n from 1 to 5, but when we further
increase n, the results dropped. This situation in-
dicates that the correct ranking at the top of the list
is more informative and forcing the model to rank
the bottom correctly as important as the top will
sacrifice the ability to guide better search.

In Table 3, top-5 ListMLE which only aims to
rank the top five translations correctly can out-
perform the baseline and standard ListMLE. With
our position-dependent attention, the top-rank en-
hanced ListMLE can make further improvement
over the baseline system(+1.07 and +0.73 on ex-
tended and sparse feature sets, respectively.) and
achieves the best performance.

The top-n loss might be too loose as an approxi-
mation of the measure of BLEU. Compared to top-
n ListMLE, our top-rank enhanced ListMLE can
further utilize the different portions of the list by
different weights. To verify the claim, we further
examined the learning processes of the two losses.
For simplicity, the experiment is conducted on a
translation list generated by random parameters.
The results are shown in Figure 3. We can see that
our top-rank enhanced loss almost completely in-
versely correlates with BLEU after iteration 70. In
contrast, after iteration 150, although top-5 loss is
still decreasing, BLEU starts to drop.

Due to the high computation cost of ListNet, we
only perform the top-rank enhanced ListMLE in
this paper. Our preliminary experiments indicate
that the performance of ListNet can be further im-
proved with a top-2 loss. We think our top-rank

95



Method Extended Features Sparse FeaturesMT02 MT04 MT05 AVG MT02 MT04 MT05 AVG
PRO 40.30 38.12 37.69 38.70(+0.00) 40.63 38.46 38.24 39.11(+0.00)
KB-MIRA 40.48 37.71 37.37 38.52(-0.18) 40.67 38.48 38.21 39.12(+0.01)
ListNet 40.75∗ 38.69+ 38.31∗ 39.25(+0.55) 40.91∗ 38.77∗ 38.42 39.37(+0.26)
ListMLE 40.40 38.21 38.04 38.88(+0.18) 40.63 38.68 38.24 39.18(+0.07)
ListMLE-T5 41.02∗ 38.84+ 38.79+ 39.55(+0.85) 41.12∗ 38.91∗ 38.89∗ 39.64(+0.53)
ListMLE-TE 41.15+ 39.01+ 39.16+ 39.77(+1.07) 41.25+ 39.00+ 39.27+ 39.84(+0.73)

Table 3: BLEU4 in percentage for comparing of baseline systems and systems with listwise losses. +, ∗

marks results that are significant better than the baseline system with p < 0.01 and p < 0.05. (ListMLE-
T5 and ListMLE-TE refer to top-5 LisMLE and our top-rank enhanced ListMLE, respectively.)

0 50 100 150 200

Epoch number

26.0

26.1

26.2

26.3

26.4

26.5

26.6

26.7

BL
EU

BLEU

40.4

40.5

40.6

40.7

40.8

40.9

41.0

41.1

41.2

41.3

Lo
ss

Loss

(a)

0 50 100 150 200

Epoch number

25.4

25.6

25.8

26.0

26.2

26.4

26.6

26.8

BL
EU

BLEU

13.2

13.4

13.6

13.8

14.0

Lo
ss

Loss

(b)

Figure 3: Listwise losses v.s. BLEU in (a) top-5 ListMLE and (b) top-rank enhanced ListMLE

Methods MT02 MT04 MT05 AVG
PRO 40.90 38.84 38.64 39.64(+0.00)
KB-MIRA 41.09 38.49 38.62 39.40(-0.06)
ListNet 41.49+ 39.25∗ 39.17∗ 39.97(+0.51)
ListMLE-T5 41.26∗ 39.63+ 39.32∗ 40.07(+0.61)
ListMLE-TE 41.85+ 39.96+ 39.88+ 40.56(+1.10)

Table 4: Comparison of baselines and listwise ap-
proaches with a larger k-best list on extended fea-
ture set.

enhanced method is also useful for ListNet, but
due to its computational demands it needs to be
further investigated.

5.5 Impact of the Size of Candidate Lists

Our listwise tuning methods directly model the or-
der of the translation list, it is clear that the choice
of the translation list size k has an impact on our
methods. A larger candidate list size may result in
the availability of more information during tuning.
In order to verify our tuning methods’ capability of
handling the larger translation list, we increase k
from 20 to 100. The comparison results are shown
in Table 4. With a larger size k, our tuning meth-
ods also perform better than baselines. For List-

Net and top-5 ListMLE, we observe that the im-
provements over baseline is smaller than size 20.
This results show that the order information loss
caused by directly drop the bottom is aggravated
with larger list size. However, our top-rank en-
hanced method still get a slight better result than
size 20 and significant improvement over baseline
by 1.1 BLEU score. This indicate that our top-
rank enhanced method is more stable and can still
effectively exploit the larger size translation list.

5.6 Performance on Basic Feature Set

Since the effectiveness of high dimensional fea-
ture set, recent work pays more attention to this
scenario. Although previous discriminative tun-
ing methods can effectively handle high dimen-
sional feature set, MERT is still the dominant tun-
ing method for basic features. Here, we investigate
our top-rank enhanced tuning methods’ capabil-
ity of handling basic feature set. Table 5 summa-
rizes the comparison results. Firstly, we observe
that ListNet and ListMLE can perform compara-
ble with MERT. With our top-ranked enhanced
method, we can get a better performance than

96



Methods MT02 MT04 MT05 AVG
MERT 37.72 37.13 36.77 37.21(+0.00)
PRO 37.85 37.21 36.68 37.24(+0.03)
KB-MIRA 37.97 37.28 36.58 37.28(+0.07)
ListNet 37.71 37.47∗ 36.78 37.32(+0.11)
ListMLE 37.54 37.54 36.65 37.24(+0.03)
ListMLE-T5 37.90 37.32 36.84 37.35(+0.14)
ListMLE-TE 38.03 37.49∗ 36.85 37.46(+0.25)

Table 5: Comparison of baseline and liswise ap-
proaches on basic feature set.

MERT by 0.25 BLEU score. These results show
that our top-ranked enhanced tuning method can
learn more informations of translation list even
with a basic feature set.

6 Related Work

The ranking problem is well studied in IR com-
munity. There are many methods been pro-
posed, including pointwise (Nallapati, 2004), pair-
wise (Herbrich et al., 1999; Burges et al., 2005)
and listwise (Cao et al., 2007; Xia et al., 2008) al-
gorithms. Experiment results show that listwise
methods deliver better performance than point-
wise and pairwise methods in general (Liu, 2010).

Most NLP researches take ranking as an extra
step after searching from its output space (Char-
niak and Johnson, 2005; Collins and Terry Koo,
2005; Duh, 2008). In SMT research, listwise ap-
proaches also have been employed for the rerank-
ing tasks. For example, Li et al. (2013) uti-
lized two listwise approaches to rerank the trans-
lation outputs and achieved the best segment-
level correlation with human judgments. Niehues
et al. (2015) employed ListNet to rescore the k-
best translations, which significantly outperforms
MERT, KB-MIRA and PRO. Zhang et al. (2016)
viewed the log-linear model as a pointwise rank-
ing function and shifted it to listwise ranking func-
tion by introducing listwise features and outper-
formed the log-linear model. Compared to these
efforts, our method takes a further step by inte-
grating listwise ranking methods into the iterative
training.

There are also some researches use ranking
methods for tuning to guide better search. In SMT,
previous attempts on using ranking as a tuning
methods usually perform pairwise comparisons on
a subset of translation pairs (Chiang et al., 2008;
Hopkins and May, 2011; Watanabe, 2012; Bazraf-
shan et al., 2012; Guzmán et al., 2015). Dreyer
and Dong (2015) even took all translation pairs of
the k-best list as training instances, which only ob-

tained a comparable result with PRO and the im-
plementation is more complicate. In this paper,
we model the entire list as a whole unit, and pro-
pose training objectives that are sensitive to differ-
ent parts of the list.

7 Conclusion

In this paper, we propose a listwise learning
framework for statistical machine translation. In
order to adapt listwise approaches, we use an iter-
ative training framework in which instances from
different iterations are aggregated into the train-
ing set. To emphasize the top order of the list, we
further propose top-rank enhanced listwise learn-
ing losses. Compared to previous efforts in SMT
tuning, our method directly models the order in-
formation of the complete translation list. Experi-
ments show our method could lead to significant
improvements of translation quality in different
feature sets and beam size.

Our current work focuses on the traditional
SMT task. For future work, it will be interesting to
integrate our methods to modern neural machine
translation systems or other structure prediction
problems. It may also be interesting to explore
more methods on listwise tuning framework, such
as investigating different methods to enhance top
order of translation list directly w.r.t a given eval-
uation metric.

Acknowledgments

The authors would like to thank the anonymous re-
viewers for their valuable comments. This work is
supported by the National Science Foundation of
China (No. 61672277, 61300158 and 61472183).
Part of Huadong Chen’s contribution was made
while visiting University of Notre Dame. His visit
was supported by the joint PhD program of China
Scholarship Council.

References
Marzieh Bazrafshan, Tagyoung Chung, and Daniel

Gildea. 2012. Tuning as linear regression. In Pro-
ceedings of the 2012 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies. Asso-
ciation for Computational Linguistics, pages 543–
547. http://aclweb.org/anthology/N12-1062.

Chris Burges, Tal Shaked, Erin Renshaw, Ari Lazier,
Matt Deeds, Nicole Hamilton, and Greg Hul-
lender. 2005. Learning to rank using gradient

97



descent. In Proceedings of the 22Nd Interna-
tional Conference on Machine Learning. ACM,
New York, NY, USA, ICML ’05, pages 89–96.
https://doi.org/10.1145/1102351.1102363.

Zhe Cao, Tao Qin, Tie-Yan Liu, Ming-Feng Tsai,
and Hang Li. 2007. Learning to rank: From
pairwise approach to listwise approach. In
Proceedings of the 24th International Con-
ference on Machine Learning. ACM, New
York, NY, USA, ICML ’07, pages 129–136.
https://doi.org/10.1145/1273496.1273513.

Eugene Charniak and Mark Johnson. 2005. Coarse-
to-fine n-best parsing and maxent discrimina-
tive reranking. In Proceedings of the 43rd
Annual Meeting of the Association for Com-
putational Linguistics (ACL’05). Association
for Computational Linguistics, pages 173–180.
http://aclweb.org/anthology/P05-1022.

Boxing Chen, Roland Kuhn, and George Foster. 2013.
Vector space model for adaptation in statistical ma-
chine translation. In Proceedings of the 51st An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers). Association
for Computational Linguistics, pages 1285–1293.
http://aclweb.org/anthology/P13-1126.

Stanley F Chen and Joshua Goodman. 1999. An
empirical study of smoothing techniques for lan-
guage modeling. Computer Speech & Language
13(4):359–394.

Colin Cherry and George Foster. 2012. Batch tuning
strategies for statistical machine translation. In Pro-
ceedings of the 2012 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies. Asso-
ciation for Computational Linguistics, pages 427–
436. http://aclweb.org/anthology/N12-1047.

David Chiang. 2005. A hierarchical phrase-based
model for statistical machine translation. In Pro-
ceedings of the 43rd Annual Meeting of the Associ-
ation for Computational Linguistics (ACL’05). As-
sociation for Computational Linguistics, pages 263–
270. http://aclweb.org/anthology/P05-1033.

David Chiang, Yuval Marton, and Philip Resnik.
2008. Online large-margin training of syntac-
tic and structural translation features. In Pro-
ceedings of the 2008 Conference on Empirical
Methods in Natural Language Processing. Associa-
tion for Computational Linguistics, pages 224–233.
http://aclweb.org/anthology/D08-1024.

H. Jonathan Clark, Chris Dyer, Alon Lavie, and
A. Noah Smith. 2011. Better hypothesis testing for
statistical machine translation: Controlling for opti-
mizer instability. In Proceedings of the 49th Annual
Meeting of the Association for Computational Lin-
guistics: Human Language Technologies. Associa-
tion for Computational Linguistics, pages 176–181.
http://aclweb.org/anthology/P11-2031.

Collins and Michael Terry Koo. 2005. Discrimina-
tive reranking for natural language parsing. Compu-
tational Linguistics, Volume 31, Number 1, March
2005 http://aclweb.org/anthology/J05-1003.

Hal Daumé III. 2004. Notes on CG and LM-BFGS
optimization of logistic regression.

Markus Dreyer and Yuanzhe Dong. 2015. Apro: All-
pairs ranking optimization for mt tuning. In Pro-
ceedings of the 2015 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies. Asso-
ciation for Computational Linguistics, pages 1018–
1023. https://doi.org/10.3115/v1/N15-1106.

Kevin Duh. 2008. Ranking vs. regression in machine
translation evaluation. In Proceedings of the
Third Workshop on Statistical Machine Transla-
tion. Association for Computational Linguistics,
Stroudsburg, PA, USA, StatMT ’08, pages 191–194.
http://dl.acm.org/citation.cfm?id=1626394.1626425.

Spence Green, Sida Wang, Daniel Cer, and D. Christo-
pher Manning. 2013. Fast and adaptive online train-
ing of feature-rich translation models. In Proceed-
ings of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers). Association for Computational Linguistics,
pages 311–321. http://aclweb.org/anthology/P13-
1031.

John Guiver and Edward Snelson. 2009. Bayesian
inference for plackett-luce ranking models. In
Proceedings of the 26th Annual International
Conference on Machine Learning. ACM, New
York, NY, USA, ICML ’09, pages 377–384.
https://doi.org/10.1145/1553374.1553423.

Francisco Guzmán, Preslav Nakov, and Stephan
Vogel. 2015. Analyzing optimization for sta-
tistical machine translation: Mert learns ver-
bosity, pro learns length. In Proceedings of the
Nineteenth Conference on Computational Natu-
ral Language Learning. Association for Compu-
tational Linguistics, Beijing, China, pages 62–72.
http://www.aclweb.org/anthology/K15-1007.

Ralf Herbrich, Thore Graepel, and Klaus Obermayer.
1999. Support vector learning for ordinal regres-
sion. In Artificial Neural Networks, 1999. ICANN
99. Ninth International Conference on (Conf. Publ.
No. 470). IET, volume 1, pages 97–102.

Mark Hopkins and Jonathan May. 2011. Tun-
ing as ranking. In Proceedings of the 2011
Conference on Empirical Methods in Nat-
ural Language Processing. Association for
Computational Linguistics, pages 1352–1362.
http://aclweb.org/anthology/D11-1125.

Philipp Koehn, Franz J. Och, and Daniel Marcu.
2003. Statistical phrase-based translation. In Pro-
ceedings of the 2003 Human Language Technol-
ogy Conference of the North American Chapter

98



of the Association for Computational Linguistics.
http://aclweb.org/anthology/N03-1017.

Maoxi Li, Aiwen Jiang, and Mingwen Wang. 2013.
Listwise approach to learning to rank for automatic
evaluation of machine translation. Proceedings of
the XIV Machine Translation Summit .

Chin-Yew Lin and Franz Josef Och. 2004. ORANGE:
A method for evaluating automatic evaluation met-
rics for machine translation. In Proceedings of
the 20th International Conference on Computational
Linguistics.

Tie-Yan Liu. 2010. Learning to rank for informa-
tion retrieval. In Proceedings of the 33rd In-
ternational ACM SIGIR Conference on Research
and Development in Information Retrieval. ACM,
New York, NY, USA, SIGIR ’10, pages 904–904.
https://doi.org/10.1145/1835449.1835676.

Yang Liu, Qun Liu, and Shouxun Lin. 2006. Tree-
to-string alignment template for statistical ma-
chine translation. In Proceedings of the 21st
International Conference on Computational Lin-
guistics and 44th Annual Meeting of the Asso-
ciation for Computational Linguistics. Associa-
tion for Computational Linguistics, pages 609–616.
http://aclweb.org/anthology/P06-1077.

Ramesh Nallapati. 2004. Discriminative models for in-
formation retrieval. In Proceedings of the 27th An-
nual International ACM SIGIR Conference on Re-
search and Development in Information Retrieval.
ACM, New York, NY, USA, SIGIR ’04, pages 64–
71. https://doi.org/10.1145/1008992.1009006.

Jan Niehues, Quoc-Khanh DO, Alexandre Allauzen,
and Alex Waibel. 2015. Listnet-based mt rescor-
ing. In Proceedings of the Tenth Workshop
on Statistical Machine Translation. Association
for Computational Linguistics, pages 248–255.
http://aclweb.org/anthology/W15-3030.

Franz Josef Och. 2003. Minimum error rate train-
ing in statistical machine translation. In ACL
’03: Proceedings of the 41st Annual Meeting
on Association for Computational Linguis-
tics. Association for Computational Linguis-
tics, Morristown, NJ, USA, pages 160–167.
https://doi.org/http://dx.doi.org/10.3115/1075096.1075117.

Franz Josef Och and Hermann Ney. 2003. A
systematic comparison of various statistical
alignment models. Comput. Linguist. 29(1):19–51.
https://doi.org/http://dl.acm.org/citation.cfm?id=778824.

Kishore Papineni, Salim Roukos, Todd Ward, and
Wei-Jing Zhu. 2002. Bleu: a method for au-
tomatic evaluation of machine translation. In
Proceedings of the 40th Annual Meeting of
the Association for Computational Linguistics.
http://aclweb.org/anthology/P02-1040.

Taro Watanabe. 2012. Optimized online rank learn-
ing for machine translation. In Proceedings of
the 2012 Conference of the North American Chap-
ter of the Association for Computational Linguis-
tics: Human Language Technologies. Associa-
tion for Computational Linguistics, pages 253–262.
http://aclweb.org/anthology/N12-1026.

Taro Watanabe, Jun Suzuki, Hajime Tsukada, and
Hideki Isozaki. 2007. Online large-margin train-
ing for statistical machine translation. In Proceed-
ings of the 2007 Joint Conference on Empirical
Methods in Natural Language Processing and Com-
putational Natural Language Learning (EMNLP-
CoNLL). http://aclweb.org/anthology/D07-1080.

Fen Xia, Tie-Yan Liu, Jue Wang, Wensheng
Zhang, and Hang Li. 2008. Listwise ap-
proach to learning to rank: Theory and algo-
rithm. In Proceedings of the 25th International
Conference on Machine Learning. ACM, New
York, NY, USA, ICML ’08, pages 1192–1199.
https://doi.org/10.1145/1390156.1390306.

Kenji Yamada and Kevin Knight. 2001. A
syntax-based statistical translation model. In
Proceedings of the 39th Annual Meeting of
the Association for Computational Linguistics.
http://aclweb.org/anthology/P01-1067.

Matthew D Zeiler. 2012. Adadelta: An adaptive learn-
ing rate method. arXiv preprint arXiv:1212.5701 .

M. Zhang, Y. Liu, H. Luan, and M. Sun. 2016. Listwise
ranking functions for statistical machine transla-
tion. IEEE/ACM Transactions on Audio, Speech,
and Language Processing 24(8):1464–1472.
https://doi.org/10.1109/TASLP.2016.2560527.

99


