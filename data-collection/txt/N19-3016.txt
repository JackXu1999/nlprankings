



















































Gating Mechanisms for Combining Character and Word-level Word Representations: an Empirical Study


Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Student Research Workshop, pages 110–124
Minneapolis, Minnesota, June 3 - 5, 2019. c©2017 Association for Computational Linguistics

110

Gating Mechanisms for Combining Character and Word-level Word
Representations: An Empirical Study

Jorge A. Balazs and Yutaka Matsuo
Graduate School of Engineering

The University of Tokyo
{jorge, matsuo}@weblab.t.u-tokyo.ac.jp

Abstract

In this paper we study how different ways
of combining character and word-level rep-
resentations affect the quality of both final
word and sentence representations. We pro-
vide strong empirical evidence that model-
ing characters improves the learned represen-
tations at the word and sentence levels, and
that doing so is particularly useful when repre-
senting less frequent words. We further show
that a feature-wise sigmoid gating mechanism
is a robust method for creating representa-
tions that encode semantic similarity, as it per-
formed reasonably well in several word sim-
ilarity datasets. Finally, our findings suggest
that properly capturing semantic similarity at
the word level does not consistently yield im-
proved performance in downstream sentence-
level tasks. Our code is available at https:
//github.com/jabalazs/gating.

1 Introduction

Incorporating sub-word structures like substrings,
morphemes and characters to the creation of word
representations significantly increases their qual-
ity as reflected both by intrinsic metrics and
performance in a wide range of downstream
tasks (Bojanowski et al., 2017; Luong and Man-
ning, 2016; Wu et al., 2016; Ling et al., 2015).

The reason for this improvement is related to
sub-word structures containing information that is
usually ignored by standard word-level models.
Indeed, when representing words as vectors ex-
tracted from a lookup table, semantically related
words resulting from inflectional processes such
as surf, surfing, and surfed, are treated as being
independent from one another1. Further, word-
level embeddings do not account for derivational

1Unless using pre-trained embeddings with a notion of sub-
word information such as fastText (Bojanowski et al.,
2017)

processes resulting in syntactically-similar words
with different meanings such as break, break-
able, and unbreakable. This causes derived words,
which are usually less frequent, to have lower-
quality (or no) vector representations.

Previous works have successfully combined
character-level and word-level word representa-
tions, obtaining overall better results than using
only word-level representations. For example Lu-
ong and Manning (2016) achieved state-of-the-art
results in a machine translation task by represent-
ing unknown words as a composition of their char-
acters. Botha and Blunsom (2014) created word
representations by adding the vector representa-
tions of the words’ surface forms and their mor-
phemes (

−−−−−→
perfectly =

−−−−−−→
perfectly +

−−−−−→
perfect+

−→
ly ),

obtaining significant improvements on intrinsic
evaluation tasks, word similarity and machine
translation. Lample et al. (2016) concatenated
character-level and word-level representations for
creating word representations, and then used them
as input to their models for obtaining state-of-the-
art results in Named Entity Recognition on several
languages.

What these works have in common is that the
models they describe first learn how to repre-
sent subword information, at character (Luong and
Manning, 2016), morpheme (Botha and Blunsom,
2014), or substring (Bojanowski et al., 2017) lev-
els, and then combine these learned representa-
tions at the word level. The incorporation of in-
formation at a finer-grained hierarchy results in
higher-quality modeling of rare words, morpho-
logical processes, and semantics (Avraham and
Goldberg, 2017).

There is no consensus, however, on which com-
bination method works better in which case, or
how the choice of a combination method affects
downstream performance, either measured intrin-
sically at the word level, or extrinsically at the sen-

https://github.com/jabalazs/gating
https://github.com/jabalazs/gating


111

tence level.
In this paper we aim to provide some intuitions

about how the choice of mechanism for combining
character-level with word-level representations in-
fluences the quality of the final word representa-
tions, and the subsequent effect these have in the
performance of downstream tasks. Our contribu-
tions are as follows:

• We show that a feature-wise sigmoidal gating
mechanism is the best at combining represen-
tations at the character and word-level hierar-
chies, as measured by word similarity tasks.

• We provide evidence that this mechanism
learns that to properly model increasingly in-
frequent words, it has to increasingly rely on
character-level information.

• We finally show that despite the increased ex-
pressivity of word representations it offers,
it has no clear effect in sentence represen-
tations, as measured by sentence evaluation
tasks.

2 Background

We are interested in studying different ways of
combining word representations, obtained from
different hierarchies, into a single word represen-
tation. Specifically, we want to study how combin-
ing word representations (1) taken directly from a
word embedding lookup table, and (2) obtained
from a function over the characters composing
them, affects the quality of the final word repre-
sentations.

Let W be a set, or vocabulary, of words
with |W| elements, and C a vocabulary of
characters with |C| elements. Further, let
x = w1, . . . , wn; wi ∈ W be a sequence of
words, and ci = ci1, . . . , c

i
m; c

i
j ∈ C be the se-

quence of characters composing wi. Each token
wi can be represented as a vector v

(w)
i ∈ Rd ex-

tracted directly from an embedding lookup table
E(w) ∈ R|W|×d, pre-trained or otherwise, and as
a vector v(c)i ∈ Rd built from the characters that
compose it; in other words, v(c)i = f(c

i), where f
is a function that maps a sequence of characters to
a vector.

The methods for combining word and character-
level representations we study, are of the form
G(v

(w)
i ,v

(c)
i ) = vi where vi is the final word rep-

resentation.

2.1 Mapping Characters to Character-level
Word Representations

The function f is composed of an embedding
layer, an optional context function, and an aggre-
gation function.

The embedding layer transforms each char-
acter cij into a vector r

i
j of dimension dr,

by directly taking it from a trainable embed-
ding lookup table E(c) ∈ R|C|×dr . We de-
fine the matrix representation of word wi as
Ci = [ri1, . . . , r

i
m], C

i ∈ Rm×dr .
The context function takes Ci as input and

returns a context-enriched matrix representation
H i = [hi1, . . . ,h

i
m], H

i ∈ Rm×dh , in which
each hij contains a measure of information about
its context, and interactions with its neighbors.
In particular, we chose to do this by feeding Ci

to a Bidirectional LSTM (BiLSTM) (Graves and
Schmidhuber, 2005; Graves et al., 2013)2.

Informally, we can think of a Long Short-
Term Memory Network (LSTM) (Hochre-
iter and Schmidhuber, 1997) as a func-
tion Rm×dr → Rm×dh that takes a matrix
C = [r1, . . . , rm] as input and returns
a context-enriched matrix representation
H = [h1, . . . ,hm], where each hj encodes
information about the previous elements
h1, . . . ,hj−1

3.
A BiLSTM is simply composed of 2 LSTMs,

one that reads the input from left to right (for-
ward), and another that does so from right to
left (backward). The output of the forward
and backward LSTMs are

−→
H = [

−→
h 1, . . . ,

−→
hm]

and
←−
H = [

←−
h 1, . . . ,

←−
hm] respectively. In the

backward case the LSTM reads rm first and r1
last, therefore

←−
h j will encode the context from←−

h j+1, . . . ,
←−
hm.

The aggregation function takes the context-
enriched matrix representation of wordwi for both

directions,
−→
H i and

←−
H i, and returns a single vector

v
(c)
i ∈ Rdh . To do so we followed Miyamoto and

Cho (2016), and defined the character-level repre-
sentation v(c)i of wordwi as the linear combination
of the forward and backward last hidden states re-

2Other methods for encoding the characters’ context, such as
CNNs (Kim et al., 2016), could also be used.

3In terms of implementation, the LSTM is applied iteratively
to each element of the input sequence regardless of dimen-
sion m, which means it accepts inputs of variable length, but
we will use this notation for the sake of simplicity.



112

s

GloVe

GloVe

f

Linear (d x 1)

g x c + (1 - g) x w

GloVe

f

GloVe

Linear (d x d)

g    c + (1 - g)     w

w

c

c

w

w

c c

w

c a t s

c a t

c a t s c
c a t s

a t s

w

c

Character vector representation
Pre-trained word vector representation
Character-level word representation
Gated word-character representation

f
f

Figure 1: Character and Word-level combination methods.

turned by the context function:

v
(c)
i = W

(c)[
−→
him;

←−
hi1] + b

(c) (1)

where W (c) ∈ Rdh×2dh and b(c) ∈ Rdh are train-
able parameters, and [◦; ◦] represents the concate-
nation operation between two vectors.

2.2 Combining Character and Word-level
Representations

We tested three different methods for combining
v
(c)
i with v

(w)
i : simple concatenation, a learned

scalar gate (Miyamoto and Cho, 2016), and a
learned vector gate (also referred to as feature-
wise sigmoidal gate). Additionally, we compared
these methods to two baselines: using pre-trained
word vectors only, and using character-only fea-
tures for representing words. See fig. 1 for a visual
description of the proposed methods.
word-only (w) considers only v(w)i and ig-
nores v(c)i :

vi = v
(w)
i (2)

char-only (c) considers only v(c)i and ig-
nores v(w)i :

vi = v
(c)
i (3)

concat (cat) concatenates both word and
character-level representations:

vi = [v
(c)
i ;v

(w)
i ] (4)

scalar gate (sg) implements the scalar
gating mechanism described by Miyamoto and
Cho (2016):

gi = σ(w
>v

(w)
i + b) (5)

vi = giv
(c)
i + (1− gi)v

(w)
i (6)

where w ∈ Rd and b ∈ R are trainable parameters,
gi ∈ (0, 1), and σ is the sigmoid function.
vector gate (vg):

gi = σ(Wv
(w)
i + b) (7)

vi = gi � v(c)i + (1− gi)� v
(w)
i (8)

where W ∈ Rd×d and b ∈ Rd are trainable pa-
rameters, gi ∈ (0, 1)d, σ is the element-wise sig-
moid function, � is the element-wise product for
vectors, and 1 ∈ Rd is a vector of ones.

The vector gate is inspired by Miyamoto and
Cho (2016) and Yang et al. (2017), but is different
to the former in that the gating mechanism acts
upon each dimension of the word and character-
level vectors, and different to the latter in that it
does not rely on external sources of information
for calculating the gating mechanism.

Finally, note that word only and char
only are special cases of both gating mecha-
nisms: gi = 0 (scalar gate) and gi = 0 (vec-
tor gate) correspond to word only; gi = 1 and
gi = 1 correspond to char only.

2.3 Obtaining Sentence Representations

To enable sentence-level classification we need to
obtain a sentence representation from the word
vectors vi. We achieved this by using a BiLSTM
with max pooling, which was shown to be a good
universal sentence encoding mechanism (Conneau
et al., 2017).

Let x = w1, . . . , wn, be an input sentence and
V = [v1, . . . ,vn] its matrix representation, where
each vi was obtained by one of the methods de-
scribed in section 2.2. S = [s1, . . . , sn] is the



113

context-enriched matrix representation of x ob-
tained by feeding V to a BiLSTM of output di-
mension ds4. Lastly, s ∈ Rds is the final sen-
tence representation of x obtained by max-pooling
S along the sequence dimension.

Finally, we initialized the word representations
v
(w)
i using GloVe embeddings (Pennington et al.,

2014), and fine-tuned them during training. Refer
to appendix A for details on the other hyperparam-
eters we used.

3 Experiments

3.1 Experimental Setup
We trained our models for solving the Nat-
ural Language Inference (NLI) task in two
datasets, SNLI (Bowman et al., 2015) and
MultiNLI (Williams et al., 2018), and validated
them in each corresponding development set (in-
cluding the matched and mismatched development
sets of MultiNLI).

For each dataset-method combination we
trained 7 models initialized with different random
seeds, and saved each when it reached its best val-
idation accuracy5. We then evaluated the quality
of each trained model’s word representations vi in
10 word similarity tasks, using the system created
by Jastrzebski et al. (2017)6.

Finally, we fed these obtained word vectors to a
BiLSTM with max-pooling and evaluated the final
sentence representations in 11 downstream trans-
fer tasks (Conneau et al., 2017; Subramanian et al.,
2018).

3.2 Datasets
Word-level Semantic Similarity A desirable
property of vector representations of words is that
semantically similar words should have similar
vector representations. Assessing whether a set of
word representations possesses this quality is re-
ferred to as the semantic similarity task. This is
the most widely-used evaluation method for eval-
uating word representations, despite its shortcom-
ings (Faruqui et al., 2016).

This task consists of comparing the similar-
ity between word vectors measured by a distance

4si = [
−→si ;←−si ] for each i, and both −→si and←−si ∈ R

ds
2 .

5We found that models validated on the matched development
set of MultiNLI, rather than the mismatched, yielded best
results, although the differences were not statistically signif-
icant.

6
https://github.com/kudkudak/word-embeddings-benchmarks/

tree/8fd0489

metric (usually cosine distance), with a similarity
score obtained from human judgements. High cor-
relation between these similarities is an indicator
of good performance.

A problem with this formulation though, is that
the definition of “similarity” often confounds the
meaning of both similarity and relatedness. For
example, cup and tea are related but dissimilar
words, and this type of distinction is not always
clear (Agirre et al., 2009; Hill et al., 2015).

To face the previous problem, we tested our
methods in a wide variety of datasets, including
some that explicitly model relatedness (WS353R),
some that explicitly consider similarity (WS353S,
SimLex999, SimVerb3500), and some where
the distinction is not clear (MEN, MTurk287,
MTurk771, RG, WS353). We also included the
RareWords (RW) dataset for evaluating the qual-
ity of rare word representations. See appendix B
for a more complete description of the datasets we
used.

Sentence-level Evaluation Tasks Unlike word-
level representations, there is no consensus on
the desirable properties sentence representations
should have. In response to this, Conneau et al.
(2017) created SentEval7, a sentence representa-
tion evaluation benchmark designed for assessing
how well sentence representations perform in vari-
ous downstream tasks (Conneau and Kiela, 2018).

Some of the datasets included in SentEval cor-
respond to sentiment classification (CR, MPQA,
MR, SST2, and SST5), subjectivity classification
(SUBJ), question-type classification (TREC), rec-
ognizing textual entailment (SICK E), estimating
semantic relatedness (SICK R), and measuring
textual semantic similarity (STS16, STSB). The
datasets are described by Conneau et al. (2017),
and we provide pointers to their original sources
in the appendix table B.2.

To evaluate these sentence representations
SentEval trained a linear model on top of them,
and evaluated their performance in the validation
sets accompanying each dataset. The only excep-
tion was the STS16 task, in which our representa-
tions were evaluated directly.

4 Word-level Evaluation

4.1 Word Similarity
Table 1 shows the quality of word representations
in terms of the correlation between word similarity
7
https://github.com/facebookresearch/SentEval/tree/906b34a

https://github.com/kudkudak/word-embeddings-benchmarks/tree/8fd0489
https://github.com/kudkudak/word-embeddings-benchmarks/tree/8fd0489
https://github.com/facebookresearch/SentEval/tree/906b34a


114

MEN MTurk287 MTurk771 RG65 RW SimLex999 SimVerb3500 WS353 WS353R WS353S

SNLI w 71.78 35.40 49.05 61.80 18.43 19.17 10.32 39.27 28.01 53.42
c 9.85 -5.65 0.82 -5.28 17.81 0.86 2.76 -2.20 0.20 -3.87
cat 71.91 35.52 48.84 62.12 18.46 19.10 10.21 39.35 28.16 53.40
sg 70.49 34.49 46.15 59.75 18.24 17.20 8.73 35.86 23.48 50.83
vg 80.00 32.54 62.09 68.90 20.76 37.70 20.45 54.72 47.24 65.60

MNLI w 68.76 50.15 68.81 65.83 18.43 42.21 25.18 61.10 58.21 70.17
c 4.84 0.06 1.95 -0.06 12.18 3.01 1.52 -4.68 -3.63 -3.65
cat 68.77 50.40 68.77 65.92 18.35 42.22 25.12 61.15 58.26 70.21
sg 67.66 49.58 68.29 64.84 18.36 41.81 24.57 60.13 57.09 69.41
vg 76.69 56.06 70.13 69.00 25.35 48.40 35.12 68.91 64.70 77.23

Table 1: Word-level evaluation results. Each value corresponds to average Pearson correlation of 7 identical models
initialized with different random seeds. Correlations were scaled to the [−100; 100] range for easier reading. Bold
values represent the best method per training dataset, per task; underlined values represent the best-performing
method per task, independent of training dataset. For each task and dataset, every best-performing method was
significantly different to other methods (p < 0.05), except for w trained in SNLI at the MTurk287 task. Statistical
significance was obtained with a two-sided Welch’s t-test for two independent samples without assuming equal
variance (Welch, 1947).

scores obtained by the proposed models and word
similarity scores defined by humans.

First, we can see that for each task,
character only models had significantly
worse performance than every other model trained
on the same dataset. The most likely explanation
for this is that these models are the only ones that
need to learn word representations from scratch,
since they have no access to the global semantic
knowledge encoded by the GloVe embeddings.

Further, bold results show the overall trend that
vector gates outperformed the other meth-
ods regardless of training dataset. This implies
that learning how to combine character and word-
level representations at the dimension level pro-
duces word vector representations that capture a
notion of word similarity and relatedness that is
closer to that of humans.

Additionally, results from the MNLI row in gen-
eral, and underlined results in particular, show
that training on MultiNLI produces word repre-
sentations better at capturing word similarity. This
is probably due to MultiNLI data being richer than
that of SNLI. Indeed, MultiNLI data was gath-
ered from various sources (novels, reports, let-
ters, and telephone conversations, among others),
rather than the single image captions dataset from
which SNLI was created.

Exceptions to the previous rule are models eval-
uated in MEN and RW. The former case can be
explained by the MEN dataset8 containing only
words that appear as image labels in the ESP-

8
https://staff.fni.uva.nl/e.bruni/MEN

Game9 and MIRFLICKR-1M10 image datasets
(Bruni et al., 2014), and therefore having data
that is more closely distributed to SNLI than to
MultiNLI.

More notably, in the RareWords dataset (Lu-
ong et al., 2013), the word only, concat,
and scalar gate methods performed equally,
despite having been trained in different datasets
(p > 0.1), and the char only method
performed significantly worse when trained in
MultiNLI. The vector gate, however, per-
formed significantly better than its counterpart
trained in SNLI. These facts provide evidence
that this method is capable of capturing linguis-
tic phenomena that the other methods are unable
to model.

4.2 Word Frequencies and Gating Values

Figure 2 shows that for more common words the
vector gate mechanism tends to favor only a
few dimensions while keeping a low average gat-
ing value across dimensions. On the other hand,
values are greater and more homogeneous across
dimensions in rarer words. Further, fig. 3 shows
this mechanism assigns, on average, a greater gat-
ing value to less frequent words, confirming the
findings by Miyamoto and Cho (2016), and Yang
et al. (2017).

In other words, the less frequent the word, the
more this mechanism allows the character-level
representation to influence the final word repre-
sentation, as shown by eq. (8). A possible inter-
pretation of this result is that exploiting charac-

9
http://www.cs.cmu.edu/˜biglou/resources/

10
http://press.liacs.nl/mirflickr/

https://staff.fni.uva.nl/e.bruni/MEN
http://www.cs.cmu.edu/~biglou/resources/
http://press.liacs.nl/mirflickr/


115

about
out
up

people
think

sustainable
adversely

immensely
juvenile

nominated
immoderate

inheritor
misbehave

picket
portioned

Common

Uncommon

Rare

mean

max

m
ea

n

m
ax

0.0

0.2

0.4

0.6

0.8

1.0

Figure 2: Visualization of gating values for 5 common words (freq. ∼ 20000), 5 uncommon words (freq. ∼ 60),
and 5 rare words (freq. ∼ 2), appearing in both the RW and MultiNLI datasets.

0 250 500 750 1000 1250 1500 1750
Frequency Rank

0.25

0.30

0.35

0.40

0.45

0.50

0.55

Av
er

ag
e 

Ga
tin

g 
Va

lu
e

Figure 3: Average gating values for words appearing in
both RW and MultiNLI. Words are sorted by decreas-
ing frequency in MultiNLI.

ter information becomes increasingly necessary as
word-level representations’ quality decrease.

Another observable trend in both figures is that
gating values tend to be low on average. Indeed, it
is possible to see in fig. 3 that the average gating
values range from 0.26 to 0.56. This result corrob-
orates the findings by Miyamoto and Cho (2016),
stating that setting g = 0.25 in eq. (6), was better
than setting it to higher values.

In summary, the gating mechanisms learn how
to compensate the lack of expressivity of under-
represented words by selectively combining their
representations with those of characters.

5 Sentence-level Evaluation

Table 2 shows the impact that different methods
for combining character and word-level word rep-
resentations have in the quality of the sentence
representations produced by our models.

We can observe the same trend mentioned
in section 4.1, and highlighted by the differ-
ence between bold values, that models trained in
MultiNLI performed better than those trained in

SNLI at a statistically significant level, confirm-
ing the findings of Conneau et al. (2017). In other
words, training sentence encoders on MultiNLI
yields more general sentence representations than
doing so on SNLI.

The two exceptions to the previous trend,
SICKE and SICKR, benefited more from models
trained on SNLI. We hypothesize this is again due
to both SNLI and SICK (Marelli et al., 2014) hav-
ing similar data distributions11.

Additionally, there was no method that signifi-
cantly outperformed the word only baseline in
classification tasks. This means that the added ex-
pressivity offered by explicitly modeling charac-
ters, be it through concatenation or gating, was
not significantly better than simply fine-tuning the
pre-trained GloVe embeddings for this type of
task. We hypothesize this is due to the conflation
of two effects. First, the fact that morphological
processes might not encode important information
for solving these tasks; and second, that SNLI and
MultiNLI belong to domains that are too dissimi-
lar to the domains in which the sentence represen-
tations are being tested.

On the other hand, the vector gate signif-
icantly outperformed every other method in the
STSB task when trained in both datasets, and in
the STS16 task when trained in SNLI. This again
hints at this method being capable of modeling
phenomena at the word level, resulting in im-
proved semantic representations at the sentence
level.

6 Relationship Between Word- and
Sentence-level Evaluation Tasks

It is clear that the better performance the vector
gate had in word similarity tasks did not trans-

11SICK was created from Flickr-8k (Rashtchian et al., 2010),
and SNLI from its expanded version: Flickr30k (Young
et al., 2014).



116

Classification Entailment Relatedness Semantic Textual Similarity

CR MPQA MR SST2 SST5 SUBJ TREC SICKE SICKR† STS16† STSB†

SNLI w 80.50 84.59 74.18 78.86 42.33 90.38 86.83 86.37 88.52 59.90∗ 71.29∗
c 74.90∗ 78.86∗ 65.93∗ 69.42∗ 35.56∗ 82.97∗ 83.31∗ 84.13∗ 83.89∗ 59.33∗ 67.20∗

cat 80.44 84.66 74.31 78.37 41.34∗ 90.28 85.80∗ 86.40 88.44 59.90∗ 71.24∗
sg 80.59 84.60 74.49 79.04 41.63∗ 90.16 86.00 86.10∗ 88.57 60.05∗ 71.34∗
vg 80.42 84.66 74.26 78.87 42.38 90.07 85.97 85.67 88.31∗ 60.92 71.99

MNLI w 83.80 89.13 79.05 83.38 45.21 91.79 89.23 84.92 86.33 66.08 71.96∗
c 70.23∗ 72.19∗ 62.83∗ 64.55∗ 32.47∗ 79.49∗ 74.74∗ 81.53∗ 75.92∗ 51.47∗ 61.74∗

cat 83.96 89.12 79.23 83.70 45.08∗ 91.92 90.03 85.06 86.45 66.17 71.82∗
sg 83.88 89.06 79.22 83.71 45.26 91.66∗ 88.83∗ 84.96 86.40 65.49∗ 71.87∗

vg 83.45∗ 89.05 79.13 83.87 45.88 91.55∗ 89.49 84.82 86.50 65.75 72.82

Table 2: Experimental results. Each value shown in the table is the average result of 7 identical models initialized
with different random seeds. Values represent accuracy (%) unless indicated by †, in which case they represent
Pearson correlation scaled to the range [−100, 100] for easier reading. Bold values represent the best method
per training dataset, per task; underlined values represent the best-performing method per task, independent of
training dataset. Values marked with an asterisk (∗) are significantly different to the average performance of the
best model trained on the same dataset (p < 0.05). Results for every best-performing method trained on one
dataset are significantly different to the best-performing method trained on the other. Statistical significance was
obtained in the same way as described in table 1.

late into overall better performance in downstream
tasks. This confirms previous findings indicating
that intrinsic word evaluation metrics are not good
predictors of downstream performance (Tsvetkov
et al., 2015; Chiu et al., 2016; Faruqui et al., 2016;
Gladkova and Drozd, 2016).

Figure 4(b) shows that the word representa-
tions created by the vector gate trained in
MultiNLI had positively-correlated results within
several word-similarity tasks. This hints at the
generality of the word representations created by
this method when modeling similarity and relat-
edness.

However, the same cannot be said about
sentence-level evaluation performance; there is no
clear correlation between word similarity tasks
and sentence-evaluation tasks. This is clearly il-
lustrated by performance in the STSBenchmark,
the only in which the vector gate was signif-
icantly superior, not being correlated with perfor-
mance in any word-similarity dataset. This can be
interpreted simply as word-level representations
capturing word-similarity not being a sufficient
condition for good performance in sentence-level
tasks.

In general, fig. 4 shows that there are no gen-
eral correlation effects spanning both training
datasets and combination mechanisms. For exam-
ple, fig. 4(a) shows that, for both word-only and
concat models trained in SNLI, performance
in word similarity tasks correlates positively with
performance in most sentence evaluation tasks,
however, this does not happen as clearly for the

same models trained in MultiNLI (fig. 4(b)).

7 Related Work

7.1 Gating Mechanisms for Combining
Characters and Word Representations

To the best of our knowledge, there are only two
recent works that specifically study how to com-
bine word and subword-level vector representa-
tions.

Miyamoto and Cho (2016) propose to use
a trainable scalar gating mechanism capable
of learning a weighting scheme for combin-
ing character-level and word-level representations.
They compared their proposed method to manu-
ally weighting both levels; using characters only;
words only; or their concatenation. They found
that in some datasets a specific manual weight-
ing scheme performed better, while in others the
learned scalar gate did.

Yang et al. (2017) further expand the gating
concept by making the mechanism work at a finer-
grained level, learning how to weight each vector’s
dimensions independently, conditioned on exter-
nal word-level features such as part-of-speech and
named-entity tags. Similarly, they compared their
proposed mechanism to using words only, charac-
ters only, and a concatenation of both, with and
without external features. They found that their
vector gate performed better than the other meth-
ods in all the reported tasks, and beat the state of
the art in two reading comprehension tasks.

Both works showed that the gating mechanisms
assigned greater importance to character-level rep-



117

M
EN

M
T2

87
M

T7
71

RG
65 RW

SL
99

9
SV

35
00

W
S3

53
W

S3
53

R
W

S3
53

S CR
M

PQ
A

M
R

SI
CK

E
SI

CK
R

SS
T2

SS
T5

ST
S1

6
ST

SB
SU

BJ
TR

EC

MEN
MT287
MT771

RG65
RW

SL999
SV3500
WS353

WS353R
WS353S

CR
MPQA

MR
SICKE
SICKR
SST2
SST5

STS16
STSB
SUBJ
TREC

Word Only

M
EN

M
T2

87
M

T7
71

RG
65 RW

SL
99

9
SV

35
00

W
S3

53
W

S3
53

R
W

S3
53

S CR
M

PQ
A

M
R

SI
CK

E
SI

CK
R

SS
T2

SS
T5

ST
S1

6
ST

SB
SU

BJ
TR

EC

MEN
MT287
MT771

RG65
RW

SL999
SV3500
WS353

WS353R
WS353S

CR
MPQA

MR
SICKE
SICKR
SST2
SST5

STS16
STSB
SUBJ
TREC

Char Only

M
EN

M
T2

87
M

T7
71

RG
65 RW

SL
99

9
SV

35
00

W
S3

53
W

S3
53

R
W

S3
53

S CR
M

PQ
A

M
R

SI
CK

E
SI

CK
R

SS
T2

SS
T5

ST
S1

6
ST

SB
SU

BJ
TR

EC
MEN

MT287
MT771

RG65
RW

SL999
SV3500
WS353

WS353R
WS353S

CR
MPQA

MR
SICKE
SICKR
SST2
SST5

STS16
STSB
SUBJ
TREC

Concat

M
EN

M
T2

87
M

T7
71

RG
65 RW

SL
99

9
SV

35
00

W
S3

53
W

S3
53

R
W

S3
53

S CR
M

PQ
A

M
R

SI
CK

E
SI

CK
R

SS
T2

SS
T5

ST
S1

6
ST

SB
SU

BJ
TR

EC

MEN
MT287
MT771

RG65
RW

SL999
SV3500
WS353

WS353R
WS353S

CR
MPQA

MR
SICKE
SICKR
SST2
SST5

STS16
STSB
SUBJ
TREC

Scalar Gate

M
EN

M
T2

87
M

T7
71

RG
65 RW

SL
99

9
SV

35
00

W
S3

53
W

S3
53

R
W

S3
53

S CR
M

PQ
A

M
R

SI
CK

E
SI

CK
R

SS
T2

SS
T5

ST
S1

6
ST

SB
SU

BJ
TR

EC

MEN
MT287
MT771

RG65
RW

SL999
SV3500
WS353

WS353R
WS353S

CR
MPQA

MR
SICKE
SICKR
SST2
SST5

STS16
STSB
SUBJ
TREC

Word-level Sentence-level

Vector Gate

1.00

0.75

0.50

0.25

0.00

0.25

0.50

0.75

1.00

(a) Models trained in SNLI.

M
EN

M
T2

87
M

T7
71

RG
65 RW

SL
99

9
SV

35
00

W
S3

53
W

S3
53

R
W

S3
53

S CR
M

PQ
A

M
R

SI
CK

E
SI

CK
R

SS
T2

SS
T5

ST
S1

6
ST

SB
SU

BJ
TR

EC

MEN
MT287
MT771

RG65
RW

SL999
SV3500
WS353

WS353R
WS353S

CR
MPQA

MR
SICKE
SICKR
SST2
SST5

STS16
STSB
SUBJ
TREC

Word Only

M
EN

M
T2

87
M

T7
71

RG
65 RW

SL
99

9
SV

35
00

W
S3

53
W

S3
53

R
W

S3
53

S CR
M

PQ
A

M
R

SI
CK

E
SI

CK
R

SS
T2

SS
T5

ST
S1

6
ST

SB
SU

BJ
TR

EC

MEN
MT287
MT771

RG65
RW

SL999
SV3500
WS353

WS353R
WS353S

CR
MPQA

MR
SICKE
SICKR
SST2
SST5

STS16
STSB
SUBJ
TREC

Char Only

M
EN

M
T2

87
M

T7
71

RG
65 RW

SL
99

9
SV

35
00

W
S3

53
W

S3
53

R
W

S3
53

S CR
M

PQ
A

M
R

SI
CK

E
SI

CK
R

SS
T2

SS
T5

ST
S1

6
ST

SB
SU

BJ
TR

EC

MEN
MT287
MT771

RG65
RW

SL999
SV3500
WS353

WS353R
WS353S

CR
MPQA

MR
SICKE
SICKR
SST2
SST5

STS16
STSB
SUBJ
TREC

Concat

M
EN

M
T2

87
M

T7
71

RG
65 RW

SL
99

9
SV

35
00

W
S3

53
W

S3
53

R
W

S3
53

S CR
M

PQ
A

M
R

SI
CK

E
SI

CK
R

SS
T2

SS
T5

ST
S1

6
ST

SB
SU

BJ
TR

EC

MEN
MT287
MT771

RG65
RW

SL999
SV3500
WS353

WS353R
WS353S

CR
MPQA

MR
SICKE
SICKR
SST2
SST5

STS16
STSB
SUBJ
TREC

Scalar Gate

M
EN

M
T2

87
M

T7
71

RG
65 RW

SL
99

9
SV

35
00

W
S3

53
W

S3
53

R
W

S3
53

S CR
M

PQ
A

M
R

SI
CK

E
SI

CK
R

SS
T2

SS
T5

ST
S1

6
ST

SB
SU

BJ
TR

EC

MEN
MT287
MT771

RG65
RW

SL999
SV3500
WS353

WS353R
WS353S

CR
MPQA

MR
SICKE
SICKR
SST2
SST5

STS16
STSB
SUBJ
TREC

Word-level Sentence-level

Vector Gate

1.00

0.75

0.50

0.25

0.00

0.25

0.50

0.75

1.00

(b) Models trained in MultiNLI.

Figure 4: Spearman correlation between performances in word and sentence level evaluation tasks.

resentations in rare words, and to word-level rep-
resentations in common ones, reaffirming the pre-
vious findings that subword structures in gen-
eral, and characters in particular, are beneficial for
modeling uncommon words.

7.2 Sentence Representation Learning
The problem of representing sentences as fixed-
length vectors has been widely studied.

Zhao et al. (2015) suggested a self-adaptive hi-
erarchical model that gradually composes words
into intermediate phrase representations, and
adaptively selects specific hierarchical levels for
specific tasks. Kiros et al. (2015) proposed an
encoder-decoder model trained by attempting to
reconstruct the surrounding sentences of an en-
coded passage, in a fashion similar to Skip-gram
(Mikolov et al., 2013). Hill et al. (2016) over-
came the previous model’s need for ordered train-
ing sentences by using autoencoders for creating
the sentence representations. Jernite et al. (2017)
implemented a model simpler and faster to train
than the previous two, while having competitive
performance. Similar to Kiros et al. (2015), Gan
et al. (2017) suggested predicting future sentences
with a hierarchical CNN-LSTM encoder.

Conneau et al. (2017) trained several sentence
encoding architectures on a combination of the
SNLI and MultiNLI datasets, and showed that a
BiLSTM with max-pooling was the best at pro-
ducing highly transferable sentence representa-
tions. More recently, Subramanian et al. (2018)
empirically showed that sentence representations
created in a multi-task setting (Collobert and We-
ston, 2008), performed increasingly better the
more tasks they were trained in. Zhang et al.
(2018) proposed using an autoencoder that relies
on multi-head self-attention over the concatena-
tion of the max and mean pooled encoder outputs

for producing sentence representations. Finally,
Wieting and Kiela (2019) show that modern sen-
tence embedding methods are not vastly superior
to random methods.

The works mentioned so far usually evaluate
the quality of the produced sentence representa-
tions in sentence-level downstream tasks. Com-
mon benchmarks grouping these kind of tasks in-
clude SentEval (Conneau and Kiela, 2018), and
GLUE (Wang et al., 2019). Another trend, how-
ever, is to probe sentence representations to un-
derstand what linguistic phenomena they encode
(Linzen et al., 2016; Adi et al., 2017; Conneau
et al., 2018; Perone et al., 2018; Zhu et al., 2018).

7.3 General Feature-wise Transformations

Dumoulin et al. (2018) provide a review on
feature-wise transformation methods, of which the
mechanisms presented in this paper form a part of.
In a few words, the g parameter, in both scalar
gate and vector gate mechanisms, can be
understood as a scaling parameter limited to the
(0, 1) range and conditioned on word representa-
tions, whereas adding the scaled v(c)i and v

(w)
i rep-

resentations can be seen as biasing word represen-
tations conditioned on character representations.

The previous review extends the work by Perez
et al. (2018), which describes the Feature-wise
Linear Modulation (FiLM) framework as a gener-
alization of Conditional Normalization methods,
and apply it in visual reasoning tasks. Some of
the reported findings are that, in general, scaling
has greater impact than biasing, and that in a set-
ting similar to the scalar gate, limiting the
scaling parameter to (0, 1) hurt performance. Fu-
ture decisions involving the design of mechanisms
for combining character and word-level represen-
tations should be informed by these insights.



118

8 Conclusions

We presented an empirical study showing the ef-
fect that different ways of combining character
and word representations has in word-level and
sentence-level evaluation tasks.

We showed that a vector gate performed consis-
tently better across a variety of word similarity and
relatedness tasks. Additionally, despite showing
inconsistent results in sentence evaluation tasks, it
performed significantly better than the other meth-
ods in semantic similarity tasks.

We further showed through this mechanism,
that learning character-level representations is al-
ways beneficial, and becomes increasingly so with
less common words.

In the future it would be interesting to study how
the choice of mechanism for combining subword
and word representations affects the more recent
language-model-based pretraining methods such
as ELMo (Peters et al., 2018), GPT (Radford et al.,
2018, 2019) and BERT (Devlin et al., 2018).

Acknowledgements

Thanks to Edison Marrese-Taylor and Pablo Loy-
ola for their feedback on early versions of this
manuscript. We also gratefully acknowledge the
support of the NVIDIA Corporation with the do-
nation of one of the GPUs used for this research.
Jorge A. Balazs is partially supported by the
Japanese Government MEXT Scholarship.

References

Yossi Adi, Einat Kermany, Yonatan Belinkov, Ofer
Lavi, and Yoav Goldberg. 2017. Fine-grained Anal-
ysis of Sentence Embeddings Using Auxiliary Pre-
diction Tasks. In Proceedings of the 5th Inter-
national Conference on Learning Representations
(ICLR), Toulon, France.

Eneko Agirre, Enrique Alfonseca, Keith Hall, Jana
Kravalova, Marius Pasca, and Aitor Soroa. 2009. A
Study on Similarity and Relatedness Using Distribu-
tional and WordNet-based Approaches. In Proceed-
ings of Human Language Technologies: The 2009
Annual Conference of the North American Chap-
ter of the Association for Computational Linguis-
tics, pages 19–27, Boulder, Colorado. Association
for Computational Linguistics.

Eneko Agirre, Carmen Banea, Daniel Cer, Mona Diab,
Aitor Gonzalez-Agirre, Rada Mihalcea, German
Rigau, and Janyce Wiebe. 2016. SemEval-2016
Task 1: Semantic Textual Similarity, Monolingual
and Cross-Lingual Evaluation. In Proceedings of
the 10th International Workshop on Semantic Eval-
uation (SemEval-2016), pages 497–511, San Diego,
California. Association for Computational Linguis-
tics.

Sanjeev Arora, Yingyu Liang, and Tengyu Ma. 2017.
A Simple but Tough-to-Beat Baseline for Sentence
Embeddings. In International Conference on Learn-
ing Representations.

Oded Avraham and Yoav Goldberg. 2017. The Inter-
play of Semantics and Morphology in Word Embed-
dings. arXiv preprint arXiv:1704.01938.

Piotr Bojanowski, Edouard Grave, Armand Joulin, and
Tomas Mikolov. 2017. Enriching Word Vectors with
Subword Information. Transactions of the Associa-
tion for Computational Linguistics, 5:135–146.

Jan Botha and Phil Blunsom. 2014. Compositional
Morphology for Word Representations and Lan-
guage Modelling. In Proceedings of the 31st In-
ternational Conference on Machine Learning, vol-
ume 32 of Proceedings of Machine Learning Re-
search, pages 1899–1907, Bejing, China. PMLR.

Samuel R. Bowman, Gabor Angeli, Christopher Potts,
and Christopher D. Manning. 2015. A Large An-
notated Corpus for Learning Natural Language In-
ference. In Proceedings of the 2015 Conference on
Empirical Methods in Natural Language Process-
ing, pages 632–642, Lisbon, Portugal. Association
for Computational Linguistics.

Elia Bruni, Nam-Khanh Tran, and Marco Baroni. 2014.
Multimodal Distributional Semantics. Journal of
Artificial Intelligence Research, 49:1–47.

Daniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-
Gazpio, and Lucia Specia. 2017. SemEval-2017
Task 1: Semantic Textual Similarity Multilingual
and Crosslingual Focused Evaluation. In Proceed-
ings of the 11th International Workshop on Seman-
tic Evaluation (SemEval-2017), pages 1–14, Van-
couver, Canada. Association for Computational Lin-
guistics.

Billy Chiu, Anna Korhonen, and Sampo Pyysalo. 2016.
Intrinsic Evaluation of Word Vectors Fails to Predict
Extrinsic Performance. In Proceedings of the 1st
Workshop on Evaluating Vector-Space Representa-
tions for NLP, pages 1–6, Berlin, Germany. Associ-
ation for Computational Linguistics.

Ronan Collobert and Jason Weston. 2008. A Uni-
fied Architecture for Natural Language Processing:
Deep Neural Networks with Multitask Learning. In
Proceedings of the 25th Annual International Con-
ference on Machine Learning (ICML 2008), pages
160–167, Helsinki, Finland.

https://openreview.net/pdf?id=BJh6Ztuxl
https://openreview.net/pdf?id=BJh6Ztuxl
https://openreview.net/pdf?id=BJh6Ztuxl
http://aclweb.org/anthology/N09-1003
http://aclweb.org/anthology/N09-1003
http://aclweb.org/anthology/N09-1003
http://www.aclweb.org/anthology/S16-1081
http://www.aclweb.org/anthology/S16-1081
http://www.aclweb.org/anthology/S16-1081
https://openreview.net/pdf?id=SyK00v5xx
https://openreview.net/pdf?id=SyK00v5xx
https://arxiv.org/abs/1704.01938
https://arxiv.org/abs/1704.01938
https://arxiv.org/abs/1704.01938
https://transacl.org/ojs/index.php/tacl/article/view/999
https://transacl.org/ojs/index.php/tacl/article/view/999
http://proceedings.mlr.press/v32/botha14.html
http://proceedings.mlr.press/v32/botha14.html
http://proceedings.mlr.press/v32/botha14.html
http://aclweb.org/anthology/D15-1075
http://aclweb.org/anthology/D15-1075
http://aclweb.org/anthology/D15-1075
https://www.jair.org/index.php/jair/article/view/10857/25905
https://doi.org/10.18653/v1/S17-2001
https://doi.org/10.18653/v1/S17-2001
https://doi.org/10.18653/v1/S17-2001
http://anthology.aclweb.org/W16-2501
http://anthology.aclweb.org/W16-2501
https://icml.cc/Conferences/2008/papers/391.pdf
https://icml.cc/Conferences/2008/papers/391.pdf
https://icml.cc/Conferences/2008/papers/391.pdf


119

Alexis Conneau and Douwe Kiela. 2018. SentEval: An
Evaluation Toolkit for Universal Sentence Represen-
tations. In Proceedings of the Eleventh International
Conference on Language Resources and Evaluation
(LREC-2018), Miyazaki, Japan. European Language
Resource Association.

Alexis Conneau, Douwe Kiela, Holger Schwenk, Loı̈c
Barrault, and Antoine Bordes. 2017. Supervised
Learning of Universal Sentence Representations
from Natural Language Inference Data. In Proceed-
ings of the 2017 Conference on Empirical Methods
in Natural Language Processing, pages 670–680,
Copenhagen, Denmark. Association for Computa-
tional Linguistics.

Alexis Conneau, Germán Kruszewski, Guillaume
Lample, Loı̈c Barrault, and Marco Baroni. 2018.
What you can cram into a single $&!#* vector:
Probing sentence embeddings for linguistic proper-
ties. In Proceedings of the 56th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers), pages 2126–2136, Melbourne,
Australia. Association for Computational Linguis-
tics.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. BERT: Pre-training of
Deep Bidirectional Transformers for Language Un-
derstanding. CoRR, abs/1810.04805.

Vincent Dumoulin, Ethan Perez, Nathan Schucher, Flo-
rian Strub, Harm de Vries, Aaron Courville, and
Yoshua Bengio. 2018. Feature-wise transforma-
tions. Distill.

Manaal Faruqui, Yulia Tsvetkov, Pushpendre Rastogi,
and Chris Dyer. 2016. Problems With Evaluation
of Word Embeddings Using Word Similarity Tasks.
In Proceedings of the 1st Workshop on Evaluating
Vector-Space Representations for NLP, pages 30–
35, Berlin, Germany. Association for Computational
Linguistics.

Christiane Fellbaum, editor. 1998. WordNet: an Elec-
tronic Lexical Database. MIT Press.

Lev Finkelstein, Evgeniy Gabrilovich, Yossi Matias,
Ehud Rivlin, Zach Solan, Gadi Wolfman, and Ey-
tan Ruppin. 2002. Placing Search in Context: The
Concept Revisited. ACM Transactions on Informa-
tion Systems, 20(1):116–131.

Zhe Gan, Yunchen Pu, Ricardo Henao, Chunyuan Li,
Xiaodong He, and Lawrence Carin. 2017. Learning
Generic Sentence Representations Using Convolu-
tional Neural Networks. In Proceedings of the 2017
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 2390–2400, Copenhagen,
Denmark. Association for Computational Linguis-
tics.

Daniela Gerz, Ivan Vulić, Felix Hill, Roi Reichart, and
Anna Korhonen. 2016. SimVerb-3500: A Large-
Scale Evaluation Set of Verb Similarity. In Proceed-
ings of the 2016 Conference on Empirical Methods
in Natural Language Processing, pages 2173–2182,
Austin, Texas. Association for Computational Lin-
guistics.

Anna Gladkova and Aleksandr Drozd. 2016. Intrinsic
Evaluations of Word Embeddings: What Can We Do
Better? In Proceedings of the 1st Workshop on Eval-
uating Vector-Space Representations for NLP, pages
36–42, Berlin, Germany. Association for Computa-
tional Linguistics.

Alex Graves, Abdel-rahman Mohamed, and Geoffrey
Hinton. 2013. Speech Recognition with Deep Re-
current Neural Networks. In Proceedings of the
2013 International Conference on Acoustics, Speech
and Signal Processing (ICASSP), pages 6645–6649,
Vancouver, Canada. IEEE.

Alex Graves and Jürgen Schmidhuber. 2005. Frame-
wise Phoneme Classification with Bidirectional
LSTM and Other Neural Network Architectures.
Neural Networks, 18(5-6):602–610.

Guy Halawi, Gideon Dror, Evgeniy Gabrilovich, and
Yehuda Koren. 2012. Large-scale Learning of Word
Relatedness with Constraints. In Proceedings of
the 18th ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining, KDD ’12,
pages 1406–1414, Beijing, China. ACM.

Felix Hill, Kyunghyun Cho, and Anna Korhonen.
2016. Learning Distributed Representations of Sen-
tences from Unlabelled Data. In Proceedings of
the 2016 Conference of the North American Chap-
ter of the Association for Computational Linguis-
tics: Human Language Technologies, pages 1367–
1377, San Diego, California. Association for Com-
putational Linguistics.

Felix Hill, Roi Reichart, and Anna Korhonen. 2015.
SimLex-999: Evaluating Semantic Models With
(Genuine) Similarity Estimation. Computational
Linguistics, 41(4):665–695.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long Short-Term Memory. Neural Computation,
9(8):1735–1780.

Minqing Hu and Bing Liu. 2004. Mining and Sum-
marizing Customer Reviews. In Proceedings of the
Tenth ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining, KDD ’04,
pages 168–177, Seattle, Washington. ACM.

Stanisław Jastrzebski, Damian Leśniak, and Woj-
ciech Marian Czarnecki. 2017. How to evaluate
word embeddings? on importance of data effi-
ciency and simple supervised tasks. arXiv preprint
arXiv:1702.02170.

http://aclweb.org/anthology/L18-1269
http://aclweb.org/anthology/L18-1269
http://aclweb.org/anthology/L18-1269
https://www.aclweb.org/anthology/D17-1070
https://www.aclweb.org/anthology/D17-1070
https://www.aclweb.org/anthology/D17-1070
https://www.aclweb.org/anthology/P18-1198
https://www.aclweb.org/anthology/P18-1198
https://www.aclweb.org/anthology/P18-1198
http://arxiv.org/abs/1810.04805
http://arxiv.org/abs/1810.04805
http://arxiv.org/abs/1810.04805
https://doi.org/undefined
https://doi.org/undefined
http://anthology.aclweb.org/W16-2506
http://anthology.aclweb.org/W16-2506
https://doi.org/10.1145/503104.503110
https://doi.org/10.1145/503104.503110
https://doi.org/10.18653/v1/D17-1254
https://doi.org/10.18653/v1/D17-1254
https://doi.org/10.18653/v1/D17-1254
https://aclweb.org/anthology/D16-1235
https://aclweb.org/anthology/D16-1235
http://anthology.aclweb.org/W16-2507
http://anthology.aclweb.org/W16-2507
http://anthology.aclweb.org/W16-2507
https://ieeexplore.ieee.org/document/6638947/
https://ieeexplore.ieee.org/document/6638947/
https://www.sciencedirect.com/science/article/pii/S0893608005001206
https://www.sciencedirect.com/science/article/pii/S0893608005001206
https://www.sciencedirect.com/science/article/pii/S0893608005001206
https://doi.org/10.1145/2339530.2339751
https://doi.org/10.1145/2339530.2339751
https://doi.org/10.18653/v1/N16-1162
https://doi.org/10.18653/v1/N16-1162
https://doi.org/10.1162/COLI_a_00237
https://doi.org/10.1162/COLI_a_00237
https://doi.org/10.1162/neco.1997.9.8.1735
https://doi.org/10.1145/1014052.1014073
https://doi.org/10.1145/1014052.1014073
https://arxiv.org/abs/1702.02170
https://arxiv.org/abs/1702.02170
https://arxiv.org/abs/1702.02170


120

Yacine Jernite, Samuel R. Bowman, and David Sontag.
2017. Discourse-Based Objectives for Fast Unsu-
pervised Sentence Representation Learning. CoRR,
abs/1705.00557.

John D. Hunter. 2007. Matplotlib: A 2D Graphics En-
vironment. Computing in Science & Engineering,
9(3):90–95.

Eric Jones, Travis Oliphant, Pearu Peterson, et al.
2001–. SciPy: Open source scientific tools for
Python.

Yoon Kim, Yacine Jernite, David Sontag, and Alexan-
der Rush. 2016. Character-Aware Neural Language
Models. In Proceedings of the 30th AAAI Con-
ference on Artificial Intelligence, pages 2741–2749,
Phoenix, Arizona.

Karin Kipper, Anna Korhonen, Neville Ryant, and
Martha Palmer. 2008. A large-scale classification of
English verbs. Language Resources and Evaluation,
42(1):21–40.

Ryan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,
Richard Zemel, Raquel Urtasun, Antonio Torralba,
and Sanja Fidler. 2015. Skip-Thought Vectors. In
C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama,
and R. Garnett, editors, Advances in Neural Infor-
mation Processing Systems 28, pages 3294–3302.
Curran Associates, Inc.

Guillaume Lample, Miguel Ballesteros, Sandeep Sub-
ramanian, Kazuya Kawakami, and Chris Dyer. 2016.
Neural Architectures for Named Entity Recognition.
In Proceedings of the 2016 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 260–270, San Diego, California. Association
for Computational Linguistics.

Xin Li and Dan Roth. 2002. Learning Question Clas-
sifiers. In COLING 2002: The 19th International
Conference on Computational Linguistics.

Wang Ling, Chris Dyer, Alan W Black, Isabel Tran-
coso, Ramon Fermandez, Silvio Amir, Luis Marujo,
and Tiago Luis. 2015. Finding Function in Form:
Compositional Character Models for Open Vocab-
ulary Word Representation. In Proceedings of the
2015 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1520–1530, Lis-
bon, Portugal. Association for Computational Lin-
guistics.

Tal Linzen, Emmanuel Dupoux, and Yoav Gold-
berg. 2016. Assessing the Ability of LSTMs to
Learn Syntax-Sensitive Dependencies. Transac-
tions of the Association for Computational Linguis-
tics, 4(1):521–535.

Minh-Thang Luong and Christopher D. Manning.
2016. Achieving Open Vocabulary Neural Machine
Translation with Hybrid Word-Character Models. In
Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), pages 1054–1063, Berlin, Germany.
Association for Computational Linguistics.

Thang Luong, Richard Socher, and Christopher D.
Manning. 2013. Better Word Representations with
Recursive Neural Networks for Morphology. In
Proceedings of the Seventeenth Conference on Com-
putational Natural Language Learning, pages 104–
113, Sofia, Bulgaria. Association for Computational
Linguistics.

Marco Marelli, Stefano Menini, Marco Baroni, Luisa
Bentivogli, Raffaella bernardi, and Roberto Zampar-
elli. 2014. A SICK cure for the evaluation of com-
positional distributional semantic models. In Pro-
ceedings of the Ninth International Conference on
Language Resources and Evaluation (LREC-2014),
Reykjavik, Iceland. European Language Resources
Association (ELRA).

Wes McKinney. 2010. Data Structures for Statistical
Computing in Python. In Proceedings of the 9th
Python in Science Conference, pages 51 – 56.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed Representa-
tions of Words and Phrases and their Composition-
ality. In C. J. C. Burges, L. Bottou, M. Welling,
Z. Ghahramani, and K. Q. Weinberger, editors, Ad-
vances in Neural Information Processing Systems
26, pages 3111–3119. Curran Associates, Inc.

Yasumasa Miyamoto and Kyunghyun Cho. 2016.
Gated Word-Character Recurrent Language Model.
In Proceedings of the 2016 Conference on Empiri-
cal Methods in Natural Language Processing, pages
1992–1997, Austin, Texas. Association for Compu-
tational Linguistics.

Douglas L. Nelson, Cathy L. McEvoy, and Thomas A.
Schreiber. 2004. The University of South Florida
free association, rhyme, and word fragment norms.
Behavior Research Methods, Instruments, & Com-
puters, 36(3):402–407.

Travis E. Oliphant. 2015. Guide to NumPy, 2nd edi-
tion. CreateSpace Independent Publishing Platform,
USA.

Bo Pang and Lillian Lee. 2004. A Sentimental Educa-
tion: Sentiment Analysis Using Subjectivity Sum-
marization Based on Minimum Cuts. In Proceed-
ings of the 42nd Annual Meeting of the Association
for Computational Linguistics (ACL-04).

Bo Pang and Lillian Lee. 2005. Seeing Stars: Ex-
ploiting Class Relationships for Sentiment Catego-
rization with Respect to Rating Scales. In Proceed-
ings of the 43rd Annual Meeting of the Association
for Computational Linguistics (ACL’05), pages 115–
124, Ann Arbor, Michigan. Association for Compu-
tational Linguistics.

http://arxiv.org/abs/1705.00557
http://arxiv.org/abs/1705.00557
https://doi.org/10.1109/MCSE.2007.55
https://doi.org/10.1109/MCSE.2007.55
http://www.scipy.org/
http://www.scipy.org/
https://www.aaai.org/ocs/index.php/AAAI/AAAI16/paper/view/12489/12017
https://www.aaai.org/ocs/index.php/AAAI/AAAI16/paper/view/12489/12017
https://doi.org/10.1007/s10579-007-9048-2
https://doi.org/10.1007/s10579-007-9048-2
http://papers.nips.cc/paper/5950-skip-thought-vectors.pdf
https://doi.org/10.18653/v1/N16-1030
http://aclweb.org/anthology/C02-1150
http://aclweb.org/anthology/C02-1150
http://aclweb.org/anthology/D15-1176
http://aclweb.org/anthology/D15-1176
http://aclweb.org/anthology/D15-1176
https://www.aclweb.org/anthology/Q16-1037
https://www.aclweb.org/anthology/Q16-1037
http://www.aclweb.org/anthology/P16-1100
http://www.aclweb.org/anthology/P16-1100
http://www.aclweb.org/anthology/W13-3512
http://www.aclweb.org/anthology/W13-3512
http://www.lrec-conf.org/proceedings/lrec2014/pdf/363_Paper.pdf
http://www.lrec-conf.org/proceedings/lrec2014/pdf/363_Paper.pdf
https://conference.scipy.org/proceedings/scipy2010/pdfs/mckinney.pdf
https://conference.scipy.org/proceedings/scipy2010/pdfs/mckinney.pdf
http://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf
http://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf
http://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf
https://aclweb.org/anthology/D16-1209
https://doi.org/10.3758/BF03195588
https://doi.org/10.3758/BF03195588
http://web.mit.edu/dvp/Public/numpybook.pdf
http://aclweb.org/anthology/P04-1035
http://aclweb.org/anthology/P04-1035
http://aclweb.org/anthology/P04-1035
http://aclweb.org/anthology/P05-1015
http://aclweb.org/anthology/P05-1015
http://aclweb.org/anthology/P05-1015


121

Adam Paszke, Sam Gross, Soumith Chintala, Gre-
gory Chanan, Edward Yang, Zachary DeVito, Zem-
ing Lin, Alban Desmaison, Luca Antiga, and Adam
Lerer. 2017. Automatic differentiation in PyTorch.
In NeurIPS Autodiff Workshop, Long Beach, Cali-
fornia.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global Vectors for Word
Representation. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 1532–1543, Doha,
Qatar. Association for Computational Linguistics.

Ethan Perez, Florian Strub, Harm de Vries, Vincent
Dumoulin, and Aaron Courville. 2018. FiLM: Vi-
sual Reasoning with a General Conditioning Layer.
In AAAI Conference on Artificial Intelligence, New
Orleans, Louisiana.

Christian S. Perone, Roberto Silveira, and Thomas S.
Paula. 2018. Evaluation of sentence embeddings
in downstream and linguistic probing tasks. CoRR,
abs/1806.06259.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In Proceedings of the 2018 Confer-
ence of the North American Chapter of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies, Volume 1 (Long Papers), pages
2227–2237, New Orleans, Louisiana. Association
for Computational Linguistics.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving Language Under-
standing by Generative Pre-Training. Technical re-
port, OpenAI.

Alec Radford, Jeffrey Wu, Rewon Child, David Luan,
Dario Amodei, and Ilya Sutskever. 2019. Language
Models are Unsupervised Multitask Learners. Tech-
nical report, OpenAI.

Kira Radinsky, Eugene Agichtein, Evgeniy
Gabrilovich, and Shaul Markovitch. 2011. A
Word at a Time: Computing Word Relatedness
Using Temporal Semantic Analysis. In Proceedings
of the 20th International Conference on World Wide
Web, WWW ’11, pages 337–346, Hyderabad, India.

Cyrus Rashtchian, Peter Young, Micah Hodosh, and
Julia Hockenmaier. 2010. Collecting Image Anno-
tations Using Amazon’s Mechanical Turk. In Pro-
ceedings of the NAACL HLT 2010 Workshop on Cre-
ating Speech and Language Data with Amazon’s
Mechanical Turk, pages 139–147, Los Angeles, Cal-
ifornia. Association for Computational Linguistics.

Guido van Rossum. 1995. Python Tutorial. Techni-
cal Report CS-R9526, Department of Computer Sci-
ence, CWI, Amsterdam, The Netherlands.

Herbert Rubenstein and John B. Goodenough. 1965.
Contextual Correlates of Synonymy. Communica-
tions of the ACM, 8(10):627–633.

Richard Socher, Alex Perelygin, Jean Wu, Jason
Chuang, Christopher D. Manning, Andrew Ng, and
Christopher Potts. 2013. Recursive Deep Models for
Semantic Compositionality Over a Sentiment Tree-
bank. In Proceedings of the 2013 Conference on
Empirical Methods in Natural Language Process-
ing, pages 1631–1642, Seattle, Washington. Asso-
ciation for Computational Linguistics.

Sandeep Subramanian, Adam Trischler, Yoshua Ben-
gio, and Christopher J Pal. 2018. Learning Gen-
eral Purpose Distributed Sentence Representations
via Large Scale Multi-task Learning. In Interna-
tional Conference on Learning Representations.

Yulia Tsvetkov, Manaal Faruqui, Wang Ling, Guil-
laume Lample, and Chris Dyer. 2015. Evaluation
of Word Vector Representations by Subspace Align-
ment. In Proceedings of the 2015 Conference on
Empirical Methods in Natural Language Process-
ing, pages 2049–2054, Lisbon, Portugal. Associa-
tion for Computational Linguistics.

Alex Wang, Amanpreet Singh, Julian Michael, Fe-
lix Hill, Omer Levy, and Samuel R. Bowman.
2019. GLUE: A Multi-Task Benchmark and Anal-
ysis Platform for Natural Language Understanding.
In Proceedings of the 7th International Conference
on Learning Representations (ICLR), New Orleans,
Louisiana.

Sida Wang and Christopher Manning. 2012. Baselines
and Bigrams: Simple, Good Sentiment and Topic
Classification. In Proceedings of the 50th Annual
Meeting of the Association for Computational Lin-
guistics (Volume 2: Short Papers), pages 90–94, Jeju
Island, Korea. Association for Computational Lin-
guistics.

Michael Waskom, Olga Botvinnik, Drew O’Kane,
Paul Hobson, Joel Ostblom, Saulius Lukauskas,
David C Gemperline, Tom Augspurger, Yaroslav
Halchenko, John B. Cole, Jordi Warmenhoven, Ju-
lian de Ruiter, Cameron Pye, Stephan Hoyer, Jake
Vanderplas, Santi Villalba, Gero Kunter, Eric Quin-
tero, Pete Bachant, Marcel Martin, Kyle Meyer,
Alistair Miles, Yoav Ram, Thomas Brunner, Tal
Yarkoni, Mike Lee Williams, Constantine Evans,
Clark Fitzgerald, Brian, and Adel Qalieh. 2018.
mwaskom/seaborn: v0.9.0 (july 2018).

Bernard Lewis Welch. 1947. The Generalization of
“Student’s” Problem When Several Different Pop-
ulation Variances are Involved. Biometrika, 34(1-
2):28–35.

Janyce Wiebe, Theresa Wilson, and Claire Cardie.
2005. Annotating Expressions of Opinions and
Emotions in Language. Language Resources and
Evaluation, 39(2):165–210.

John Wieting and Douwe Kiela. 2019. No Training
Required: Exploring Random Encoders for Sen-
tence Classification. In Proceedings of the 7th Inter-
national Conference on Learning Representations
(ICLR), New Orleans, Louisiana.

https://openreview.net/pdf?id=BJJsrmfCZ
https://doi.org/10.3115/v1/D14-1162
https://doi.org/10.3115/v1/D14-1162
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16528
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16528
http://arxiv.org/abs/1806.06259
http://arxiv.org/abs/1806.06259
https://doi.org/10.18653/v1/N18-1202
https://doi.org/10.18653/v1/N18-1202
https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf
https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf
https://d4mucfpksywv.cloudfront.net/better-language-models/language-models.pdf
https://d4mucfpksywv.cloudfront.net/better-language-models/language-models.pdf
http://wwwconference.org/proceedings/www2011/proceedings/p337.pdf
http://wwwconference.org/proceedings/www2011/proceedings/p337.pdf
http://wwwconference.org/proceedings/www2011/proceedings/p337.pdf
http://www.aclweb.org/anthology/W10-0721
http://www.aclweb.org/anthology/W10-0721
https://ir.cwi.nl/pub/5007
https://doi.org/10.1145/365628.365657
http://aclweb.org/anthology/D13-1170
http://aclweb.org/anthology/D13-1170
http://aclweb.org/anthology/D13-1170
https://openreview.net/pdf?id=B18WgG-CZ
https://openreview.net/pdf?id=B18WgG-CZ
https://openreview.net/pdf?id=B18WgG-CZ
http://aclweb.org/anthology/D15-1243
http://aclweb.org/anthology/D15-1243
http://aclweb.org/anthology/D15-1243
http://aclweb.org/anthology/P12-2018
http://aclweb.org/anthology/P12-2018
http://aclweb.org/anthology/P12-2018
https://doi.org/10.5281/zenodo.1313201
https://doi.org/10.1093/biomet/34.1-2.28
https://doi.org/10.1093/biomet/34.1-2.28
https://doi.org/10.1093/biomet/34.1-2.28
https://doi.org/10.1007/s10579-005-7880-9
https://doi.org/10.1007/s10579-005-7880-9
https://openreview.net/pdf?id=BkgPajAcY7
https://openreview.net/pdf?id=BkgPajAcY7
https://openreview.net/pdf?id=BkgPajAcY7


122

Adina Williams, Nikita Nangia, and Samuel Bow-
man. 2018. A Broad-Coverage Challenge Corpus
for Sentence Understanding through Inference. In
Proceedings of the 2018 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
Volume 1 (Long Papers), pages 1112–1122, New
Orleans, Louisiana. Association for Computational
Linguistics.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V.
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, Jeff Klingner, Apurva Shah, Melvin
Johnson, Xiaobing Liu, Lukasz Kaiser, Stephan
Gouws, Yoshikiyo Kato, Taku Kudo, Hideto
Kazawa, Keith Stevens, George Kurian, Nishant
Patil, Wei Wang, Cliff Young, Jason Smith, Jason
Riesa, Alex Rudnick, Oriol Vinyals, Greg Corrado,
Macduff Hughes, and Jeffrey Dean. 2016. Google’s
Neural Machine Translation System: Bridging the
Gap between Human and Machine Translation.
arXiv preprint arXiv:1609.08144.

Zhilin Yang, Bhuwan Dhingra, Ye Yuan, Junjie Hu,
William W. Cohen, and Ruslan Salakhutdinov. 2017.
Words or Characters? Fine-grained Gating for Read-
ing Comprehension. In Proceedings of the 5th Inter-
national Conference on Learning Representations
(ICLR), Toulon, France.

Peter Young, Alice Lai, Micah Hodosh, and Julia
Hockenmaier. 2014. From image descriptions to vi-
sual denotations. Transactions of the Association for
Computational Linguistics, 2:67–78.

Minghua Zhang, Yunfang Wu, Weikang Li, and Wei Li.
2018. Learning Universal Sentence Representations
with Mean-Max Attention Autoencoder. In Pro-
ceedings of the 2018 Conference on Empirical Meth-
ods in Natural Language Processing, pages 4514–
4523, Brussels, Belgium. Association for Computa-
tional Linguistics.

Han Zhao, Zhengdong Lu, and Pascal Poupart. 2015.
Self-Adaptive Hierarchical Sentence Model. In Pro-
ceedings of the 24th International Joint Conference
on Artificial Intelligence, pages 4069–4076, Buenos
Aires, Argentina. AAAI Press.

Xunjie Zhu, Tingfeng Li, and Gerard de Melo. 2018.
Exploring Semantic Properties of Sentence Embed-
dings. In Proceedings of the 56th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 2: Short Papers), pages 632–637, Melbourne,
Australia. Association for Computational Linguis-
tics.

A Hyperparameters

We only considered words that appear at least
twice, for each dataset. Those that appeared
only once were considered UNK. We used
the Treebank Word Tokenizer as implemented in

NLTK12 for tokenizing the training and develop-
ment datasets.

In the same fashion as Conneau et al. (2017),
we used a batch size of 64, an SGD optmizer with
an initial learning rate of 0.1, and at each epoch
divided the learning rate by 5 if the validation ac-
curacy decreased. We also used gradient clipping
when gradients where > 5.

We defined character vector representations as
50-dimensional vectors randomly initialized by
sampling from the uniform distribution in the
(−0.05; 0.05) range.

The output dimension of the character-level
BiLSTM was 300 per direction, and remained of
such size after combining forward and backward
representations as depicted in eq. 1.

Word vector representations where initialized
from the 300-dimensional GloVe vectors (Pen-
nington et al., 2014), trained in 840B tokens from
the Common Crawl13, and finetuned during train-
ing. Words not present in the GloVe vocabulary
where randomly initialized by sampling from the
uniform distribution in the (−0.05; 0.05) range.

The input size of the word-level LSTM was 300
for every method except concat in which it was
600, and its output was always 2048 per direc-
tion, resulting in a 4096-dimensional sentence rep-
resentation.

B Datasets

B.1 Word Similarity

Table B.1 lists the word-similarity datasets and
their corresponding reference. As mentioned in
section 3.2, all the word-similarity datasets con-
tain pairs of words annotated with similarity or re-
latedness scores, although this difference is not al-
ways explicit. Below we provide some details for
each.

MEN contains 3000 annotated word pairs with
integer scores ranging from 0 to 50. Words cor-
respond to image labels appearing in the ESP-
Game14 and MIRFLICKR-1M15 image datasets.

MTurk287 contains 287 annotated pairs with
scores ranging from 1.0 to 5.0. It was created from
words appearing in both DBpedia and in news ar-
ticles from The New York Times.

12
https://www.nltk.org/

13
https://nlp.stanford.edu/projects/glove/

14
http://www.cs.cmu.edu/˜biglou/resources/

15
http://press.liacs.nl/mirflickr/

http://www.aclweb.org/anthology/N18-1101
http://www.aclweb.org/anthology/N18-1101
http://arxiv.org/abs/1609.08144
http://arxiv.org/abs/1609.08144
http://arxiv.org/abs/1609.08144
https://openreview.net/pdf?id=B1hdzd5lg
https://openreview.net/pdf?id=B1hdzd5lg
http://aclweb.org/anthology/Q14-1006
http://aclweb.org/anthology/Q14-1006
http://aclweb.org/anthology/D18-1481
http://aclweb.org/anthology/D18-1481
https://www.aaai.org/ocs/index.php/IJCAI/IJCAI15/paper/view/10828
https://www.aclweb.org/anthology/P18-2100
https://www.aclweb.org/anthology/P18-2100
https://www.nltk.org/
https://nlp.stanford.edu/projects/glove/
http://www.cs.cmu.edu/~biglou/resources/
http://press.liacs.nl/mirflickr/


123

Dataset Reference URL

MEN Bruni et al. (2014) https://staff.fnwi.uva.nl/e.bruni/MEN
MTurk287 Radinsky et al. (2011) https://git.io/fhQA8 (Unofficial)
MTurk771 Halawi et al. (2012) http://www2.mta.ac.il/˜gideon/mturk771.html
RG Rubenstein and Goodenough (1965) https://git.io/fhQAB (Unofficial)
RareWords (RW) Luong et al. (2013) https://nlp.stanford.edu/˜lmthang/morphoNLM/
SimLex999 Hill et al. (2015) https://fh295.github.io/simlex.html
SimVerb3500 Gerz et al. (2016) http://people.ds.cam.ac.uk/dsg40/simverb.html
WS353 Finkelstein et al. (2002) http://www.cs.technion.ac.il/˜gabr/resources/data/wordsim353/
WS353R Agirre et al. (2009) http://alfonseca.org/eng/research/wordsim353.html
WS353S Agirre et al. (2009) http://alfonseca.org/eng/research/wordsim353.html

Table B.1: Word similarity and relatedness datasets.

MTurk771 contains 771 annotated pairs with
scores ranging from 1.0 to 5.0, with words having
synonymy, holonymy or meronymy relationships
sampled from WordNet (Fellbaum, 1998).

RG contains 65 annotated pairs with scores
ranging from 0.0 to 4.0 representing “similarity of
meaning”.

RW contains 2034 pairs of words annotated
with similarity scores in a scale from 0 to 10.
The words included in this dataset were ob-
tained from Wikipedia based on their frequency,
and later filtered depending on their WordNet
synsets, including synonymy, hyperonymy, hy-
ponymy, holonymy and meronymy. This dataset
was created with the purpose of testing how well
models can represent rare and complex words.

SimLex999 contains 999 word pairs annotated
with similarity scores ranging from 0 to 10. In this
case the authors explicitly considered similarity
and not relatedness, addressing the shortcomings
of datasets that do not, such as MEN and WS353.
Words include nouns, adjectives and verbs.

SimVerb3500 contains 3500 verb pairs anno-
tated with similarity scores ranging from 0 to 10.
Verbs were obtained from the USF free association
database (Nelson et al., 2004), and VerbNet (Kip-
per et al., 2008). This dataset was created to
address the lack of representativity of verbs in
SimLex999, and the fact that, at the time of cre-
ation, the best performing models had already sur-
passed inter-annotator agreement in verb similar-
ity evaluation resources. Like SimLex999, this
dataset also explicitly considers similarity as op-
posed to relatedness.

WS353 contains 353 word pairs annotated with
similarity scores from 0 to 10.

WS353R is a subset of WS353 containing 252
word pairs annotated with relatedness scores.
This dataset was created by asking humans to
classify each WS353 word pair into one of the
following classes: synonyms, antonyms, identical,

hyperonym-hyponym, hyponym-hyperonym,
holonym-meronym, meronym-holonym, and
none-of-the-above. These annotations were
later used to group the pairs into: similar pairs
(synonyms, antonyms, identical, hyperonym-
hyponym, and hyponym-hyperonym), related
pairs (holonym-meronym, meronym-holonym,
and none-of-the-above with a human similarity
score greater than 5), and unrelated pairs (classi-
fied as none-of-the-above with a similarity score
less than or equal to 5). This dataset is composed
by the union of related and unrelated pairs.

WS353S is another subset of WS353 containing
203 word pairs annotated with similarity scores.
This dataset is composed by the union of similar
and unrelated pairs, as described previously.

B.2 Sentence Evaluation Datasets
Table B.2 lists the sentence-level evaluation
datasets used in this paper. The provided URLs
correspond to the original sources, and not neces-
sarily to the URLs where SentEval16 got the data
from17.

The version of the CR, MPQA, MR, and SUBJ
datasets used in this paper were the ones prepro-
cessed by Wang and Manning (2012)18. Both
SST2 and SST5 correspond to preprocessed ver-
sions of the Stanford Sentiment Treebank (SST)
dataset by Socher et al. (2013)19. SST2 corre-
sponds to a subset of SST used by Arora et al.
(2017) containing flat representations of sentences
annotated with binary sentiment labels, and SST5
to another subset annotated with more fine-grained
sentiment labels (very negative, negative, neutral,
positive, very positive).

16
https://github.com/facebookresearch/SentEval/tree/906b34a

17A list of the data used by SentEval can be found in its data
setup script: https://git.io/fhQpq

18
https://nlp.stanford.edu/˜sidaw/home/projects:nbsvm

19
https://nlp.stanford.edu/sentiment/

https://staff.fnwi.uva.nl/e.bruni/MEN
https://git.io/fhQA8
http://www2.mta.ac.il/~gideon/mturk771.html
https://git.io/fhQAB
https://nlp.stanford.edu/~lmthang/morphoNLM/
https://fh295.github.io/simlex.html
http://people.ds.cam.ac.uk/dsg40/simverb.html
http://www.cs.technion.ac.il/~gabr/resources/data/wordsim353/
http://alfonseca.org/eng/research/wordsim353.html
http://alfonseca.org/eng/research/wordsim353.html
https://github.com/facebookresearch/SentEval/tree/906b34a
https://git.io/fhQpq
https://nlp.stanford.edu/~sidaw/home/projects:nbsvm
https://nlp.stanford.edu/sentiment/


124

Dataset Reference URL

CR Hu and Liu (2004) https://www.cs.uic.edu/˜liub/FBS/sentiment-analysis.html#datasets
MPQA Wiebe et al. (2005) https://mpqa.cs.pitt.edu/corpora/mpqa_corpus/
MR Pang and Lee (2005) http://www.cs.cornell.edu/people/pabo/movie-review-data/
SST2 Arora et al. (2017) https://github.com/PrincetonML/SIF/tree/master/data
SST5 See caption. https://git.io/fhQAV
SUBJ Pang and Lee (2004) http://www.cs.cornell.edu/people/pabo/movie-review-data/
TREC Li and Roth (2002) http://cogcomp.org/Data/QA/QC/
SICKE Marelli et al. (2014) http://clic.cimec.unitn.it/composes/sick.html
SICKR Marelli et al. (2014) http://clic.cimec.unitn.it/composes/sick.html
STS16 Agirre et al. (2016) http://ixa2.si.ehu.es/stswiki/index.php/Main_Page
STSB Cer et al. (2017) http://ixa2.si.ehu.es/stswiki/index.php/STSbenchmark

Table B.2: Sentence representation evaluation datasets. SST5 was obtained from a GitHub repository with no
associated peer-reviewed work.

https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html#datasets
https://mpqa.cs.pitt.edu/corpora/mpqa_corpus/
http://www.cs.cornell.edu/people/pabo/movie-review-data/
https://github.com/PrincetonML/SIF/tree/master/data
https://git.io/fhQAV
http://www.cs.cornell.edu/people/pabo/movie-review-data/
http://cogcomp.org/Data/QA/QC/
http://clic.cimec.unitn.it/composes/sick.html
http://clic.cimec.unitn.it/composes/sick.html
http://ixa2.si.ehu.es/stswiki/index.php/Main_Page
http://ixa2.si.ehu.es/stswiki/index.php/STSbenchmark

