



















































Investigating Capsule Networks with Dynamic Routing for Text Classification


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 3110–3119
Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics

3110

Investigating Capsule Networks with Dynamic Routing for
Text Classification

Wei Zhao1,2, Jianbo Ye3, Min Yang1
∗
, Zeyang Lei4, Soufei Zhang5, Zhou Zhao6

1 Shenzhen Institutes of Advanced Technology, Chinese Academy of Sciences
2 Tencent 3 Pennsylvania State University
4 Graduate School at Shenzhen, Tsinghua University

5 Nanjing University of Posts and Telecommunications 6 Zhejiang University

Abstract

In this study, we explore capsule networks
with dynamic routing for text classifica-
tion. We propose three strategies to sta-
bilize the dynamic routing process to al-
leviate the disturbance of some noise cap-
sules which may contain “background” in-
formation or have not been successfully
trained. A series of experiments are con-
ducted with capsule networks on six text
classification benchmarks. Capsule net-
works achieve competitive results over the
compared baseline methods on 4 out of
6 datasets, which shows the effectiveness
of capsule networks for text classifica-
tion. We additionally show that capsule
networks exhibit significant improvement
when transfer single-label to multi-label
text classification over the competitors. To
the best of our knowledge, this is the first
work that capsule networks have been em-
pirically investigated for text modeling1.

1 Introduction

Modeling articles or sentences computationally is
a fundamental topic in natural language process-
ing. It could be as simple as a keyword/phrase
matching problem, but it could also be a nontrivial
problem if compositions, hierarchies, and struc-
tures of texts are considered. For example, a news
article which mentions a single phrase “US elec-
tion” may be categorized into the political news
with high probability. But it could be very diffi-
cult for a computer to predict which presidential
candidate is favored by its author, or whether the

∗ Corresponding author (min.yang@siat.ac.cn)
1Codes are publicly available at: https:

//github.com/andyweizhao/capsule_text_
classification.

author’s view in the article is more liberal or more
conservative.

Earlier efforts in modeling texts have achieved
limited success on text categorization using a sim-
ple bag-of-words classifier (Joachims, 1998; Mc-
Callum et al., 1998), implying understanding the
meaning of the individual word or n-gram is a
necessary step towards more sophisticated mod-
els. It is therefore not a surprise that distributed
representations of words, a.k.a. word embeddings,
have received great attention from NLP commu-
nity addressing the question “what” to be modeled
at the basic level (Mikolov et al., 2013; Penning-
ton et al., 2014). In order to model higher level
concepts and facts in texts, an NLP researcher has
to think cautiously the so-called “what” question:
what is actually modeled beyond word meanings.
A common approach to the question is to treat
the texts as sequences and focus on their spatial
patterns, whose representatives include convolu-
tional neural networks (CNNs) (Kim, 2014; Zhang
et al., 2015; Conneau et al., 2017) and long short-
term memory networks (LSTMs) (Tai et al., 2015;
Mousa and Schuller, 2017). Another common ap-
proach is to completely ignore the order of words
but focus on their compositions as a collection,
whose representatives include probabilistic topic
modeling (Blei et al., 2003; Mcauliffe and Blei,
2008) and Earth Mover’s Distance based model-
ing (Kusner et al., 2015; Ye et al., 2017).

Those two approaches, albeit quite different
from the computational perspective, actually fol-
low a common measure to be diagnosed regarding
their answers to the “what” question. In neural
network approaches, spatial patterns aggregated at
lower levels contribute to representing higher level
concepts. Here, they form a recursive process to
articulate what to be modeled. For example, CNN
builds convolutional feature detectors to extract lo-
cal patterns from a window of vector sequences

https://github.com/andyweizhao/capsule_text_classification
https://github.com/andyweizhao/capsule_text_classification
https://github.com/andyweizhao/capsule_text_classification


3111

and uses max-pooling to select the most promi-
nent ones. It then hierarchically builds such pat-
tern extraction pipelines at multiple levels. Being
a spatially sensitive model, CNN pays a price for
the inefficiency of replicating feature detectors on
a grid. As argued in (Sabour et al., 2017), one
has to choose between replicating detectors whose
size grows exponentially with the number of di-
mensions, or increasing the volume of the labeled
training set in a similar exponential way. On the
other hand, methods that are spatially insensitive
are perfectly efficient at the inference time regard-
less of any order of words or local patterns. How-
ever, they are unavoidably more restricted to en-
code rich structures presented in a sequence. Im-
proving the efficiency to encode spatial patterns
while keeping the flexibility of their representation
capability is thus a central issue.

A recent method called capsule network intro-
duced by Sabour et al. (2017) possesses this at-
tractive potential to address the aforementioned is-
sue. They introduce an iterative routing process to
decide the credit attribution between nodes from
lower and higher layers. A metaphor (also as an
argument) they made is that human visual system
intelligently assigns parts to wholes at the infer-
ence time without hard-coding patterns to be per-
spective relevant. As an outcome, their model
could encode the intrinsic spatial relationship be-
tween a part and a whole constituting viewpoint
invariant knowledge that automatically general-
izes to novel viewpoints. In our work, we follow
a similar spirit to use this technique in modeling
texts. Three strategies are proposed to stabilize
the dynamic routing process to alleviate the distur-
bance of some noise capsules which may contain
“background” information such as stop words and
the words that are unrelated to specific categories.
We conduct a series of experiments with capsule
networks on top of the pre-trained word vectors
for six text classification benchmarks. More im-
portantly, we show that capsule networks achieves
significant improvement when transferring single-
label to multi-label text classifications over the
compared baseline methods.

2 Our Methodology

Our capsule network, depicted in Figure 1, is
a variant of the capsule networks proposed in
Sabour et al. (2017). It consists of four layers: n-
gram convolutional layer, primary capsule layer,

convolutional capsule layer, and fully connected
capsule layer. In addition, we explore two capsule
frameworks to integrate these four components in
different ways. In the rest of this section, we elab-
orate the key components in detail.

2.1 N -gram Convolutional Layer

This layer is a standard convolutional layer which
extracts n-gram features at different positions of a
sentence through various convolutional filters.

Suppose x ∈ RL×V denotes the input sentence
representation where L is the length of the sen-
tence and V is the embedding size of words. Let
xi ∈ RV be the V -dimensional word vector cor-
responding to the i-th word in the sentence. Let
W a ∈ RK1×V be the filter for the convolution op-
eration, where K1 is the N -gram size while sliding
over a sentence for the purpose of detecting fea-
tures at different positions. A filter W a convolves
with the word-window xi:i+K1−1 at each possible
position (with stride of 1) to produce a column fea-
ture map ma ∈ RL−K1+1, each element mai ∈ R
of the feature map is produced by

mai = f(xi:i+K1−1 ◦W a + b0) (1)

where ◦ is element-wise multiplication, b0 is a
bias term, and f is a nonlinear activate function
(i.e., ReLU). We have described the process by
which one feature is extracted from one filter.
Hence, for a = 1, . . . , B, totally B filters with
the same N -gram size, one can generate B feature
maps which can be rearranged as

M = [m1,m2, ...,mB] ∈ R(L−K1+1)×B (2)

2.2 Primary Capsule Layer

This is the first capsule layer in which the cap-
sules replace the scalar-output feature detectors of
CNNs with vector-output capsules to preserve the
instantiated parameters such as the local order of
words and semantic representations of words.

Suppose pi ∈ Rd denotes the instantiated pa-
rameters of a capsule, where d is the dimension of
the capsule. Let W b ∈ RB×d be the filter shared in
different sliding windows. For each matrix multi-
plication, we have a window sliding over each N -
gram vector denoted as Mi ∈ RB , then the corre-
sponding N -gram phrases in the form of capsule
are produced with pi = (W b)TMi.

The filter W b multiplies each N -gram vector
in {Mi}L−K1+1i=1 with stride of 1 to produce a



3112

B X C X dK1 X V X B K2 X C X D X d X d H X E X d X d

Conv1 PrimaryCaps ConvCaps

CB D

1

K2

= d-dimension

FCCaps

E

Flatten

PrimCaps K2 x C x D x d

D x d

ConvCapsCapsule

Probability
(L−K1-K2+2) x D (L−K1+1) x C 

K2 x C x D x d x d  

Matrix Transformation

Routing

Local Spatial Routing (PrimCaps>ConvCaps)

Routing
Routing

Figure 1: The Architecture of Capsule network for text classification. The processes of dynamic routing
between consecutive layers are shown in the bottom.

column-list of capsules p ∈ R(L−K1+1)×d, each
capsule pi ∈ Rd in the column-list is computed as

pi = g(W
bMi + b1) (3)

where g is nonlinear squash function through the
entire vector, b1 is the capsule bias term. For all
C filters, the generated capsule feature maps can
be rearranged as

P = [p1,p2, ...,pC] ∈ R(L−K1+1)×C×d, (4)

where totally (L − K1 + 1) × C d-dimensional
vectors are collected as capsules in P.

2.2.1 Child-Parent Relationships
As argued in (Sabour et al., 2017), capsule net-
work tries to address the representational limita-
tion and exponential inefficiencies of convolutions
with transformation matrices. It allows the net-
works to automatically learn child-parent (or part-
whole) relationships constituting viewpoint invari-
ant knowledge that automatically generalizes to
novel viewpoints.

In this paper, we explore two different types
of transformation matrices to generate prediction
vector (vote) ûj|i ∈ Rd from its child capsule i to
the parent capsule j. The first one shares weights
W t1 ∈ RN×d×d across child capsules in the layer
below, where N is the number of parent capsules
in the layer above. Formally, each corresponding
vote can be computed by:

ûj|i = W
t1
j ui + b̂j|i ∈ R

d (5)

where ui is a child-capsule in the layer below and
b̂j|i is the capsule bias term.

In the second design, we replace the shared
weight matrix W t1j with non-shared weight ma-
trix W t2i,j , where the weight matrices W

t2 ∈
RH×N×d×d and H is the number of child capsules
in the layer below.

2.3 Dynamic Routing

The basic idea of dynamic routing is to construct
a non-linear map in an iterative manner ensuring
that the output of each capsule gets sent to an ap-
propriate parent in the subsequent layer:{

ûj|i ∈ Rd
}
i=1,...,H,j=1...,N

7→
{
vj ∈ Rd

}N
j=1

.

For each potential parent, the capsule network can
increase or decrease the connection strength by
dynamic routing, which is more effective than the
primitive routing strategies such as max-pooling in
CNN that essentially detects whether a feature is
present in any position of the text, but loses spatial
information about the feature. We explore three
strategies to boost the accuracy of routing process
by alleviating the disturbance of some noisy cap-
sules:

Orphan Category Inspired by Sabour et al.
(2017), an additional “orphan” category is added
to the network, which can capture the “back-
ground” information of the text such as stop words
and the words that are unrelated to specific cat-
egories, helping the capsule network model the
child-parent relationship more efficiently. Adding
“orphan” category in the text is more effective than
in image since there is no single consistent “back-
ground” object in images, while the stop words are



3113

consistent in texts such as predicate “s”, “am” and
pronouns “his”, “she”.

Leaky-Softmax We explore Leaky-Softmax
Sabour et al. (2017) in the place of standard soft-
max while updating connection strength between
the children capsules and their parents. Despite
the orphan category in the last capsule layer, we
also need a light-weight method between two
consecutive layers to route the noise child cap-
sules to extra dimension without any additional
parameters and computation consuming.

Coefficients Amendment We also attempt to
use the probability of existence of child capsules
in the layer below to iteratively amend the con-
nection strength as Eq.6.

Algorithm 1: Dynamic Routing Algorithm
1 procedure ROUTING(ûj|i, âj|i, r, l)
2 Initialize the logits of coupling coefficients

bj|i = 0

3 for r iterations do
4 for all capsule i in layer l and capsule j in

layer l + 1:
cj|i = âj|i · leaky-softmax(bj|i)

5 for all capsule j in layer l + 1:
vj = g(

∑
i cj|iûj|i), aj = |vj |

6 for all capsule i in layer l and capsule j in
layer l + 1: bj|i = bj|i + ûj|i · vj

7 return vj ,aj

Given each prediction vector ûj|i and its prob-
ability of existence âj|i, where âj|i = âi, each it-
erative coupling coefficient of connection strength
cj|i is updated by

cj|i = âj|i · leaky-softmax(bj|i) (6)

where bj|i is the logits of coupling coefficients.
Each parent capsule vj in the layer above is a
weighted sum over all prediction vectors ûj|i:

vj = g(
∑
i

cj|iûj|i), aj = |vj | (7)

where aj is the probabilities of parent capsules, g
is nonlinear squash function Sabour et al. (2017)
through the entire vector. Once all of the parent
capsules are produced, each coupling coefficient
bj|i is updated by:

bj|i = bj|i + ûj|i · vj (8)

For simplicity of notation, the parent capsules and
their probabilities in the layer above are denoted
as

v, a = Routing(û) (9)

where û denotes all of the child capsules in the
layer below, v denotes all of the parent-capsules
and their probabilities a.

Our dynamic routing algorithm is summarized
in Algorithm 1.

2.4 Convolutional Capsule Layer

In this layer, each capsule is connected only to
a local region K2 × C spatially in the layer be-
low. Those capsules in the region multiply trans-
formation matrices to learn child-parent relation-
ships followed by routing by agreement to produce
parent capsules in the layer above.

Suppose W c1 ∈ RD×d×d and W c2 ∈
RK2×C×D×d×d denote shared and non-shared
weights, respectively, where K2 · C is the number
of child capsules in a local region in the layer be-
low, D is the number of parent capsules which the
child capsules are sent to. When the transforma-
tion matrices are shared across the child capsules,
each potential parent-capsule ûj|i is produced by

ûj|i = W
c1
j ui + b̂j|i (10)

where b̂j|i is the capsule bias term, ui is a child
capsule in a local region K2 × C and W c1j is the
jth matrix in tensor W c1 . Then, we use routing-
by-agreement to produce parent capsules feature
maps totally (L−K1−K2+2)×D d-dimensional
capsules in this layer. When using the non-shared
weights across the child capsules, we replace the
transformation matrix W c1j in Eq. (10) with W

c2
j .

2.5 Fully Connected Capsule Layer

The capsules in the layer below are flattened into
a list of capsules and fed into fully connected
capsule layer in which capsules are multiplied by
transformation matrix W d1 ∈ RE×d×d or W d2 ∈
RH×E×d×d followed by routing-by-agreement to
produce final capsule vj ∈ Rd and its probability
aj ∈ R for each category. Here, H is the number
of child capsules in the layer below, E is the num-
ber of categories plus an extra orphan category.

2.6 The Architectures of Capsule Network

We explore two capsule architectures (denoted as
Capsule-A and Capsule-B) to integrate these four



3114

Class Probablity

Text

Lookup Table, 300

3 x 300 Conv, B

B x C x d
PrimCap

K2 x C x D x d x d 
ConvCap

H x E x d x d 
FCCap

Capsule-A

Class Probablity

Text

Lookup Table, 300

4 x 300 Conv, B 5 x 300 Conv, B3 x 300 Conv, B

Capsule Average Pooling

B x C x d
PrimCap

B x C x d
PrimCap

B x C x d
PrimCap

K2 x C x D x d x d 
ConvCap

K2 x C x D x d x d 
ConvCap

K2 x C x D x d x d 
ConvCap

H x E x d x d 
FCCap

H x E x d x d 
FCCap

H x E x d x d 
FCCap

Capsule-B

Figure 2: Two architectures of capsule networks.

components in different ways, as depicted in Fig-
ure 2.

Capsule-A starts with an embedding layer
which transforms each word in the corpus to a
300-dimensional (V = 300) word vector, fol-
lowed by a 3-gram (K1 = 3) convolutional layer
with 32 filters (B = 32) and a stride of 1 with
ReLU non-linearity. All the other layers are cap-
sule layers starting with a B × d primary cap-
sule layer with 32 filters (C = 32), followed by
a 3 × C × d × d (K2 = 3) convolutional capsule
layer with 16 filters (D = 16) and a fully con-
nected capsule layer in sequence.

Each capsule has 16-dimensional (d = 16) in-
stantiated parameters and their length (norm) can
describe the probability of the existence of cap-
sules. The capsule layers are connected by the
transformation matrices, and each connection is
also multiplied by a routing coefficient that is
dynamically computed by routing by agreement
mechanism.

The basic structure of Capsule-B is similar to
Capsule-A except that we adopt three parallel net-
works with filter windows (N ) of 3, 4, 5 in the
N -gram convolutional layer (see Figure 2). The
final output of the fully connected capsule layer is
fed into the average pooling to produce the final re-
sults. In this way, Capsule-B can learn more mean-
ingful and comprehensive text representation.

3 Experimental Setup

3.1 Experimental Datasets

In order to evaluate the effectiveness of our model,
we conduct a series of experiments on six bench-

marks including: movie reviews (MR) (Pang and
Lee, 2005), Stanford Sentiment Treebankan exten-
sion of MR (SST-2) (Socher et al., 2013), Subjec-
tivity dataset (Subj) (Pang and Lee, 2004), TREC
question dataset (TREC) (Li and Roth, 2002), cus-
tomer review (CR) (Hu and Liu, 2004), and AG’s
news corpus (Conneau et al., 2017). These bench-
marks cover several text classification tasks such
as sentiment classification, question categoriza-
tion, news categorization. The detailed statistics
are presented in Table 1.

Dataset Train Dev Test Classes Classification Task

MR 8.6k 0.9k 1.1k 2 review classification
SST-2 8.6k 0.9k 1.8k 2 sentiment analysis
Subj 8.1k 0.9k 1.0k 2 opinion classification
TREC 5.4k 0.5k 0.5k 6 question categorization
CR 3.1k 0.3k 0.4k 2 review classification
AG’s news 108k 12.0k 7.6k 4 news categorization

Table 1: Characteristics of the datasets.

3.2 Implementation Details
In the experiments, we use 300-dimensional
word2vec (Mikolov et al., 2013) vectors to ini-
tialize embedding vectors. We conduct mini-batch
with size 50 for AG’s news and size 25 for other
datasets. We use Adam optimization algorithm
with 1e-3 learning rate to train the model. We use
3 iteration of routing for all datasets since it opti-
mizes the loss faster and converges to a lower loss
at the end.

3.3 Baseline methods
In the experiments, we evaluate and compare our
model with several widely used baseline methods
including: LSTM/Bi-LSTM (Cho et al., 2014),
tree-structured LSTM (Tree-LSTM) (Tai et al.,
2015), LSTM regularized by linguistic knowl-
edge (LR-LSTM) (Qian et al., 2016), CNN-
rand/CNN-static/CNN-non-static (Kim, 2014),
very deep convolutional network (VD-CNN)
(Conneau et al., 2017), and character-level convo-
lutional network (CL-CNN) (Zhang et al., 2015).

4 Experimental Results

4.1 Quantitative Evaluation
In our experiments, the evaluation metric is classi-
fication accuracy. We summarize the experimental
results in Table 2. From the results, we observe
that the capsule networks achieve best results on
4 out of 6 benchmarks, which verifies the effec-
tiveness of the capsule networks. In particular, our
model substantially and consistently outperforms



3115

MR SST2 Subj TREC CR AG’s

LSTM 75.9 80.6 89.3 86.8 78.4 86.1
BiLSTM 79.3 83.2 90.5 89.6 82.1 88.2
Tree-LSTM 80.7 85.7 91.3 91.8 83.2 90.1
LR-LSTM 81.5 87.5 89.9 - 82.5 -

CNN-rand 76.1 82.7 89.6 91.2 79.8 92.2
CNN-static 81.0 86.8 93.0 92.8 84.7 91.4
CNN-non-static 81.5 87.2 93.4 93.6 84.3 92.3
CL-CNN - - 88.4 85.7 - 92.3
VD-CNN - - 88.2 85.4 - 91.3

Capsule-A 81.3 86.4 93.3 91.8 83.8 92.1
Capsule-B 82.3 86.8 93.8 92.8 85.1 92.6

Table 2: Comparisons of our capsule networks and
baselines on six text classification benchmarks.

Dataset Train Dev Test Description

Reuters-Multi-label 5.8k 0.6k 0.3k only multi-label data in test
Reuters-Full 5.8k 0.6k 3.4k full data in test

Table 3: Characteristics of Reuters-21578 corpus.

the simple deep neural networks such as LSTM,
Bi-LSTM and CNN-rand by a noticeable margin
on all the experimental datasets. Capsule net-
work also achieves competitive results against the
more sophisticated deep learning models such as
LR-LSTM, Tree-LSTM, VC-CNN and CL-CNN.
Note that Capsule-B consistently performs better
than Capsule-A since Capsule-B allows to learn
more meaningful and comprehensive text repre-
sentation. For example, a combination of N-gram
convolutional layer with filter windows of {3,4,5}
can capture the 3/4/5-gram features of the text
which play a crucial role in text modeling.

4.2 Ablation Study

To analyze the effect of varying different compo-
nents of our capsule architecture for text classifica-
tion, we also report the ablation test of the capsule-
B model in terms of using different setups of the
capsule network. The experimental results are
summarized in Table 5. Generally, all three pro-
posed dynamic routing strategies contribute to the
effectiveness of Capsule-B by alleviating the dis-
turbance of some noise capsules which may con-
tain “background” information such as stop words
and the words that are unrelated to specific cate-
gories.

5 Single-Label to Multi-Label Text
Classification

Capsule network demonstrates promising perfor-
mance in single-label text classification which as-
signs a label from a predefined set to a text (see Ta-
ble 2). Multi-label text classification is, however, a

more challenging practical problem. From single-
label to multi-label (with n category labels) text
classification, the label space is expanded from n
to 2n, thus more training is required to cover the
whole label space. For single-label texts, it is prac-
tically easy to collect and annotate the samples.
However, the burden of collection and annotation
for a large scale multi-label text dataset is gener-
ally extremely high. How deep neural networks
(e.g., CNN and LSTM) best cope with multi-label
text classification still remains a problem since ob-
taining large scale of multi-label dataset is a time-
consuming and expensive process. In this section,
we investigate the capability of capsule network
on multi-label text classification by using only the
single-label samples as training data. With fea-
ture property as part of the information extracted
by capsules, we may generalize the model better
to multi-label text classification without an over
extensive amount of labeled data.

The evaluation is carried on the Reuters-21578
dataset (Lewis, 1992). This dataset consists
of 10,788 documents from the Reuters financial
newswire service, where each document contains
either multiple labels or a single label. We re-
process the corpus to evaluate the capability of
capsule networks of transferring from single-label
to multi-label text classification. For dev and train-
ing, we only use the single-label documents in the
Reuters dev and training sets. For testing, Reuters-
Multi-label only uses the multi-label documents
in testing dataset, while Reuters-Full includes all
documents in test set. The characteristics of these
two datasets are described in Table 3.

Following (Sorower, 2010), we adopt Micro
Averaged Precision (Precision), Micro Averaged
Recall (Recall) and Micro Averaged F1 scores
(F1) as the evaluation metrics for multi-label text
classification. Any of these scores are firstly com-
puted on individual class labels and then averaged
over all classes, called label-based measures. In
addition, we also measure the Exact Match Ratio
(ER) which considers partially correct prediction
as incorrect and only counts fully correct samples.

The experimental results are summarized in Ta-
ble 4. From the results, we can observe that the
capsule networks have substantial and significant
improvement in terms of all four evaluation met-
rics over the compared baseline methods on the
test sets in both Reuters-Multi-label and Reuters-
Full datasets. In particular, larger improvement



3116

Reuters-Multi-label Reuters-Full

ER Precision Recall F1 ER Precision Recall F1

LSTM 23.3 86.7 54.7 63.5 62.5 78.6 72.6 74.0
BiLSTM 26.4 82.3 55.9 64.6 65.8 83.7 75.4 77.8

CNN-rand 22.5 88.6 56.4 67.1 63.4 78.7 71.5 73.6
CNN-static 27.1 91.1 59.1 69.7 63.3 78.5 71.2 73.3
CNN-non-static 27.4 92.0 59.7 70.4 64.1 80.6 72.7 75.0

Capsule-A 57.2 88.2 80.1 82.0 66.0 83.9 80.5 80.2
Capsule-B 60.3 95.4 82.0 85.8 67.7 86.4 80.1 81.4

Table 4: Comparisons of the capability for transferring from single-label to multi-label text classification
on Reuters-Multi-label and Reuters-Full datasets. For fair comparison, we use margin-loss for our model
and other baselines.

Iteration Accuracy

Capsule-B + Sabour’s routing 3 81.4

Capsule-B + our routing 1 81.4
Capsule-B + our routing 3 82.3
Capsule-B + our routing 5 81.6
w/o Leaky-softmax 3 81.7
w/o Orphan Category 3 81.9
w/o Amendent Coeffient 3 82.1

Table 5: Ablation study of Capsule-B on MR
dataset. The standard routing is routing-by-
agreement algorithm without leaky-softmax and
orphan category in the last capsule layer. More
ablations are discussed in Appendix.

is achieved on Reuters-Multi-label dataset which
only contains the multi-label documents in the test
set. This is within our expectation since the cap-
sule network is capable of preserving the instanti-
ated parameters of the categories trained by single-
label documents. The capsule network has much
stronger transferring capability than the conven-
tional deep neural networks. In addition, the good
results on Reuters-Full also indicate that the cap-
sule network has robust superiority over competi-
tors on single-label documents.

5.1 Connection Strength Visualization

To visualize the connection strength between cap-
sule layers clearly, we remove the convolutional
capsule layer and make the primary capsule layer
followed by the fully connected capsule layer di-
rectly, where the primary capsules denote N-gram
phrases in the form of capsules. The connection
strength shows the importance of each primary
capsule for text categories, acting like a parallel
attention mechanism. This should allow the cap-
sule networks to recognize multiple categories in

the text even though the model is trained on single-
label documents.

Due to space reasons, we choose a multi-
label document from Reuters-Multi-label test set
whose category labels (i.e., Interest Rates and
Money/Foreign Exchange) are correctly predicted
(fully correct) by our model with high confidence
(p > 0.8) to report in Table 6. The category-
specific phrases such as “interest rates” and “for-
eign exchange” are highlighted with red color. We
use the tag cloud to visualize the 3-gram phrases
for Interest Rates and Money/Foreign Exchange
categories. The stronger the connection strength,
the bigger the font size. From the results, we ob-
serve that capsule networks can correctly recog-
nize and cluster the important phrases with respect
to the text categories. The histograms are used
to show the intensity of connection strengths be-
tween primary capsules and the fully connected
capsules, as shown in Table 6 (bottom line).
Due to space reasons, five histograms are demon-
strated. The routing procedure correctly routes the
votes into the Interest Rates and Money/Foreign
Exchange categories.

To experimentally verify the convergence of the
routing algorithm, we also plot learning curve to
show the training loss over time with different it-
erations of routing. From Figure 3, we observe
that the Capsule-B with 3 or 5 iterations of routing
optimizes the loss faster and converges to a lower
loss at the end than the capsule network with 1 it-
eration.

6 Related Work

Early methods for text classification adopted the
typical features such as bag-of-words, n-grams,
and their TF-IDF features (Zhang et al., 2008) as



3117

U.K. MONEY RATES FIRM ON LAWSON STERLING TARGETS Interest Rates Money/Foreign Exchange

Interest rates on the London money market were slightly firmer on news U.K.
Chancellor of the Exchequer Nigel Lawson had stated target rates for sterling
against the dollar and mark, dealers said. They said this had come as a surprise
and expected the targets, 2.90 marks and 1.60 dlrs, to be promptly tested in the
foreign exchange markets. Sterling opened 0.3 points lower in trade weighted
terms at 71.3. Dealers noted the chancellor said he would achieve his goals
on sterling by a combination of intervention in currency markets and interest
rates. Operators feel the foreign exchanges are likely to test sterling on the
downside and that this seems to make a fall in U.K. Base lending rates even
less likely in the near term, dealers said. The feeling remains in the market,
however, that fundamental factors have not really changed and that a rise in
U.K. Interest rates is not very likely. The market is expected to continue at
around these levels, reflecting the current 10 pct base rate level, for some time.
The key three months interbank rate was 1/16 point firmer at 10 9-7/8 pct.

Orphan Mergers/AcquisitionsMoney/Foreign Exchange Trade Interest Rates

Table 6: Visualization of connection strength between primary capsules and the FC capsules by 3-gram
phrases cloud and histogram of the their intensities. x axis denotes primary capsules (3-gram phrases)
selected for demonstration, y axis denotes intensity of connection strength. The results are retrieved from
Capsule-B trained with 3 routing iterations. The category-specific key-phrases in red color in raw text
(first column) are annotated manually for reference.

0 200 400 600 800 1000
Training Step

0.00

0.01

0.02

0.03

0.04

0.05

Tr
ai

ni
ng

 L
os

s

5 iteration
3 iteration
1 iteration

Figure 3: Training loss of Capsule-B on Reuters-
Multi-label dataset.

input of machine learning algorithms such as sup-
port vector machine (SVM) (Joachims, 1998), lo-
gistic regression (Genkin et al., 2007), naive Bayes
(NB) (McCallum et al., 1998) for classification.
However, these models usually heavily relied on
laborious feature engineering or massive extra lin-
guistic resources.

Recent advances in deep neural networks and
representation learning have substantially im-
proved the performance of text classification tasks.
The dominant approaches are recurrent neural net-
works, in particular LSTMs and CNNs. (Kim,
2014) reported on a series of experiments with
CNNs trained on top of pre-trained word vectors
for sentence-level classification tasks. The CNN

models improved upon the state of the art on 4
out of 7 tasks. (Zhang et al., 2015) offered an
empirical exploration on the use of character-level
convolutional networks (Convnets) for text classi-
fication and the experiments showed that Convnets
outperformed the traditional models. (Joulin et al.,
2016) proposed a simple and efficient text classi-
fication method fastText, which could be trained
on a billion words within ten minutes. (Conneau
et al., 2017) proposed a very deep convolutional
networks (with 29 convolutional layers) for text
classification. (Tai et al., 2015) generalized the
LSTM to the tree-structured network topologies
(Tree-LSTM) that achieved best results on two text
classification tasks.

Recently, a novel type of neural network is pro-
posed using the concept of capsules to improve
the representational limitations of CNN and RNN.
Hinton et al. (2011) firstly introduced the con-
cept of “capsules” to address the representational
limitations of CNNs and RNNs. Capsules with
transformation matrices allowed networks to au-
tomatically learn part-whole relationships. Conse-
quently, Sabour et al. (2017) proposed capsule net-
works that replaced the scalar-output feature de-
tectors of CNNs with vector-output capsules and
max-pooling with routing-by-agreement. The cap-
sule network has shown its potential by achiev-
ing a state-of-the-art result on MNIST data. Un-
like max-pooling in CNN, however, Capsule net-



3118

work do not throw away information about the
precise position of the entity within the region. For
lowlevel capsules, location information is place-
coded by which capsule is active. (Xi et al., 2017)
further tested out the application of capsule net-
works on CIFAR data with higher dimensionality.
(Hinton et al., 2018) proposed a new iterative rout-
ing procedure between capsule layers based on the
EM algorithm, which achieves significantly bet-
ter accuracy on the smallNORB data set. (Zhang
et al., 2018) generalized existing routing methods
within the framework of weighted kernel density
estimation. To date, no work investigates the per-
formance of capsule networks in NLP tasks. This
study herein takes the lead in this topic.

7 Conclusion

In this paper, we investigated capsule networks
with dynamic routing for text classification. Three
strategies were proposed to boost the performance
of the dynamic routing process to alleviate the dis-
turbance of noisy capsules. Extensive experiments
on six text classification benchmarks show the ef-
fectiveness of capsule networks in text classifi-
cation. More importantly, capsule networks also
show significant improvement when transferring
single-label to multi-label text classifications over
the co baseline methods.

References
David M Blei, Andrew Y Ng, and Michael I Jordan.

2003. Latent dirichlet allocation. Journal of ma-
chine Learning research, 3(Jan):993–1022.

Kyunghyun Cho, Bart Van Merriënboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint
arXiv:1406.1078.

Alexis Conneau, Holger Schwenk, Loı̈c Barrault, and
Yann Lecun. 2017. Very deep convolutional net-
works for text classification. In Proceedings of the
15th Conference of the European Chapter of the As-
sociation for Computational Linguistics: Volume 1,
Long Papers, volume 1, pages 1107–1116.

Alexander Genkin, David D Lewis, and David Madi-
gan. 2007. Large-scale bayesian logistic regression
for text categorization. Technometrics, 49(3):291–
304.

Geoffrey Hinton, Sara Sabour, and Nicholas
Frosst. 2018. Matrix capsules with em routing.
https://openreview.net/forum?id=HJWLfGWRb.

Geoffrey E Hinton, Alex Krizhevsky, and Sida D
Wang. 2011. Transforming auto-encoders. In Inter-
national Conference on Artificial Neural Networks,
pages 44–51. Springer.

Minqing Hu and Bing Liu. 2004. Mining and summa-
rizing customer reviews. In Proceedings of the tenth
ACM SIGKDD international conference on Knowl-
edge discovery and data mining, pages 168–177.
ACM.

Thorsten Joachims. 1998. Text categorization with
support vector machines: Learning with many rel-
evant features. In European conference on machine
learning, pages 137–142. Springer.

Armand Joulin, Edouard Grave, Piotr Bojanowski, and
Tomas Mikolov. 2016. Bag of tricks for efficient text
classification. In Annual meeting on Association for
Computational Linguistics, pages 427–431.

Yoon Kim. 2014. Convolutional neural networks for
sentence classification. In Proceedings of the 42nd
annual meeting on Association for Computational
Linguistics, pages 1746–1751. Association for Com-
putational Linguistics.

Matt Kusner, Yu Sun, Nicholas Kolkin, and Kilian
Weinberger. 2015. From word embeddings to docu-
ment distances. In International Conference on Ma-
chine Learning, pages 957–966.

David D. Lewis. 1992. An evaluation of phrasal and
clustered representations on a text categorization
task. In Fifteenth Annual International ACM SIGIR
Conference on Research and Development in Infor-
mation Retrieval, pages 37–50.

Xin Li and Dan Roth. 2002. Learning question clas-
sifiers. In Proceedings of the 19th international
conference on Computational linguistics-Volume 1,
pages 1–7. Association for Computational Linguis-
tics.

Jon D Mcauliffe and David M Blei. 2008. Supervised
topic models. In Advances in neural information
processing systems, pages 121–128.

Andrew McCallum, Kamal Nigam, et al. 1998. A com-
parison of event models for naive bayes text classi-
fication. In AAAI-98 workshop on learning for text
categorization, volume 752, pages 41–48. Citeseer.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111–3119.

Amr Mousa and Björn Schuller. 2017. Contextual bidi-
rectional long short-term memory recurrent neural
network language models: A generative approach to
sentiment analysis. In Proceedings of the 15th Con-
ference of the European Chapter of the Association
for Computational Linguistics: Volume 1, Long Pa-
pers, volume 1, pages 1023–1032.



3119

Bo Pang and Lillian Lee. 2004. A sentimental educa-
tion: Sentiment analysis using subjectivity summa-
rization based on minimum cuts. In Proceedings of
the 42nd annual meeting on Association for Compu-
tational Linguistics, page 271. Association for Com-
putational Linguistics.

Bo Pang and Lillian Lee. 2005. Seeing stars: Exploit-
ing class relationships for sentiment categorization
with respect to rating scales. In Proceedings of the
43rd annual meeting on association for computa-
tional linguistics, pages 115–124. Association for
Computational Linguistics.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP), pages 1532–1543.

Qiao Qian, Minlie Huang, Jinhao Lei, and Xi-
aoyan Zhu. 2016. Linguistically regularized
lstms for sentiment classification. arXiv preprint
arXiv:1611.03949.

Sara Sabour, Nicholas Frosst, and Geoffrey E Hinton.
2017. Dynamic routing between capsules. In Ad-
vances in Neural Information Processing Systems,
pages 3859–3869.

Richard Socher, Alex Perelygin, Jean Wu, Jason
Chuang, Christopher D Manning, Andrew Ng, and
Christopher Potts. 2013. Recursive deep models
for semantic compositionality over a sentiment tree-
bank. In Proceedings of the 2013 conference on
empirical methods in natural language processing,
pages 1631–1642.

Mohammad S Sorower. 2010. A literature survey on
algorithms for multi-label learning. Oregon State
University, Corvallis, 18.

Kai Sheng Tai, Richard Socher, and Christopher D
Manning. 2015. Improved semantic representations
from tree-structured long short-term memory net-
works. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Linguis-
tics, pages 1556–1566.

Edgar Xi, Selina Bing, and Yang Jin. 2017. Cap-
sule network performance on complex data. arXiv
preprint arXiv:1712.03480.

Jianbo Ye, Yanran Li, Zhaohui Wu, James Z Wang,
Wenjie Li, and Jia Li. 2017. Determining gains ac-
quired from word embedding quantitatively using
discrete distribution clustering. In Proceedings of
the 55th Annual Meeting of the Association for Com-
putational Linguistics (Volume 1: Long Papers),
volume 1, pages 1847–1856.

Suofei Zhang, Wei Zhao, Xiaofu Wu, and Quan
Zhou. 2018. Fast dynamic routing based on
weighted kernel density estimation. arXiv preprint
arXiv:1805.10807.

Wen Zhang, Taketoshi Yoshida, and Xijin Tang. 2008.
Tfidf, lsi and multi-word in information retrieval and
text categorization. In IEEE International Confer-
ence on Systems, Man and Cybernetics, pages 108–
113. IEEE.

Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015.
Character-level convolutional networks for text clas-
sification. In Advances in neural information pro-
cessing systems, pages 649–657.


