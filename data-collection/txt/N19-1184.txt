



















































Combining Distant and Direct Supervision for Neural Relation Extraction


Proceedings of NAACL-HLT 2019, pages 1858–1867
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

1858

Combining Distant and Direct Supervision for Neural Relation Extraction

Iz Beltagy Kyle Lo Waleed Ammar
Allen Institute for Artificial Intelligence, Seattle, WA, USA
{beltagy,kylel,waleeda}@allenai.org

Abstract

In relation extraction with distant supervision,
noisy labels make it difficult to train quality
models. Previous neural models addressed this
problem using an attention mechanism that at-
tends to sentences that are likely to express
the relations. We improve such models by
combining the distant supervision data with an
additional directly-supervised data, which we
use as supervision for the attention weights.
We find that joint training on both types of
supervision leads to a better model because it
improves the model’s ability to identify noisy
sentences. In addition, we find that sigmoidal
attention weights with max pooling achieves
better performance over the commonly used
weighted average attention in this setup. Our
proposed method1 achieves a new state-of-the-
art result on the widely used FB-NYT dataset.

1 Introduction

Early work in relation extraction from text used
directly supervised methods, e.g., Bunescu and
Mooney (2005), which motivated the development
of relatively small datasets with sentence-level an-
notations such as ACE 2004/2005, BioInfer and
SemEval 2010 Task 8. Recognizing the difficulty
of annotating text with relations, especially when
the number of relation types of interest is large,
others (Mintz et al., 2009; Craven and Kumlien,
1999) introduced the distant supervision approach
of relation extraction, where a knowledge base
(KB) and a text corpus are used to automatically
generate a large dataset of labeled bags of sen-
tences (a set of sentences that might express the
relation) which are then used to train a relation
classifier. The large number of labeled instances
produced with distant supervision make it a prac-
tical alternative to manual annotations.

1https://github.com/allenai/comb_dist_
direct_relex/

However, distant supervision implicitly as-
sumes that all the KB facts are mentioned in the
text (at least one of the sentences in each bag
expresses the relation) and that all relevant facts
are in the KB (use entities that are not related
in the KB as negative examples). These two as-
sumptions are generally not true, which introduces
many noisy examples in the training set. Although
many methods have been proposed to deal with
such noisy training data (e.g., Hoffmann et al.,
2011; Surdeanu et al., 2012; Roth et al., 2013;
Fan et al., 2014; Zeng et al., 2015; Jiang et al.,
2016; Liu et al., 2017), a rather obvious approach
has been understudied: combine distant supervi-
sion data with additional direct supervision. Intu-
itively, directly supervising the model can improve
its performance by helping it identify which of the
input sentences for a given pair of entities are more
likely to express a relation.

A straightforward way to combine distant and
direct supervision is to concatenate instances from
both datasets into one large dataset. We show
in Section 4.2 that this approach doesn’t help the
model. Pershina et al. (2014) also observed sim-
ilar results; instead, they train a graphical model
on the distantly supervised instances while using
the directly labeled instances to supervise a sub-
component of the model. We discuss prior work
in more detail in Section 5.

In our paper, we demonstrate a similar approach
with neural networks. Specifically, our neural
model attends over sentences to distinguish be-
tween sentences that are likely to express some
relation between the entities and sentences that
do not. We use the additional direct supervi-
sion to supervise these attention weights. We
train this model jointly on both types of supervi-
sion in a multitask learning setup. In addition,
we experimentally find that sigmoidal attention
weights with max pooling achieves better perfor-

https://github.com/allenai/comb_dist_direct_relex/
https://github.com/allenai/comb_dist_direct_relex/


1859

sentence encoder sentence encodersentence encoder

Sentence-level supervision Bag-level supervision

Entity 1 (e1) Entity 2 (e2) Relation type

Steve Jobs Apple founder_of

Steve Jobs Apple ceo_of

> Jobs and Wozniak co-founded Apple in 1976 to sell 
Wozniak's Apple I personal computer.

> Jobs and Apple co-founder Steve Wozniak are widely 
recognized as pioneers of the microcomputer revolution.

> Apple merged with NeXT in 1997, and Jobs became CEO of 
Apple within a few months.

> Jobs was forced out of Apple in 1985 after a 
long power struggle.

no_relation

sentence encoder

Bag encoder

<e1>Jobs</e1> was forced out 
of <e2>Apple</e2> in 1985 
after a long power struggle .

<e1>Jobs</e1> and Wozniak 
co-founded <e2>Apple</e2> in 
1976 to sell Wozniak 
's Apple I personal computer 
.

<e1>Jobs</e1> and <e2>Apple</e2> 
co-founder Steve Wozniak are 
widely recognized as pioneers of 
the microcomputer revolution . 

<e2>Apple</e2> merged with 
NeXT in 1997 , and 
<e1>Jobs</e1> became CEO 
of Apple within a few 
months . 

sentence
encoding P(e1~e2 | s)

0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0

0

P(ri = true| e1, e2)

s

+
unlabeled 
sentences

KB
labeled sentences

Figure 1: An overview of our approach for combining distant and direct supervision. The left side shows one
sentence in the labeled data and how it is used to provide direct supervision for the sentence encoder. The right
side shows snippets of the text corpus and the knowledge base, which are then combined to construct one training
instance for the model, with a bag of three input sentences and two active relations: ‘founder of’ and ‘ceo of’.

mance in this model setup than the commonly
used weighted average attention.

The contributions of this paper are as follows:

• We propose an effective neural network model
for improving distant supervision by combining
it with a directly supervised data in the form
of sentence-level annotations. The model is
trained jointly on both types of supervision in
a multitask learning setup, where the direct su-
pervision data is employed as supervision for at-
tention weights.

• We show experimentally that our model setup
benefits from sigmoidal attention weights with
max pooling over the commonly used softmax-
based weighted averaging attention.

• Our best model achieves a new state-of-the-art
result on the FB-NYT dataset, previously used
by Lin et al. (2016); Vashishth et al. (2018).
Specifically, combining both forms of supervi-
sion achieves a 4.4% relative AUC increase than
our baseline without the additional supervision.

The following section defines the notation we use,
describes the problem and provides an overview of
our approach.

2 Overview

Our goal is to predict which relation types are ex-
pressed between a pair of entities (e1, e2), given
all sentences in which both entities are mentioned
in a large collection of unlabeled documents.

Following previous work on distant supervi-
sion, we use known tuples (e1, r, e2) in a knowl-
edge base K to automatically annotate sentences

where both entities are mentioned with the rela-
tion type r. In particular, we group all sentences
s with one or more mentions of an entity pair
(e1, e2) into a bag of sentences Be1,e2 , then au-
tomatically annotate this bag with the set of rela-
tion types Ldistant = {r ∈ R : (e1, r, e2) ∈ K},
whereR is the set of relations we are interested in.
We use ‘positive instances’ to refer to cases where
|L| > 0, and ‘negative instances’ when |L| = 0.

In this paper, we leverage an existing dataset of
direct supervision for relations. Each direct super-
vision instance consists of a token sequence s con-
taining mentions of an entity pair (e1, e2) and one
relation type (or ‘no relation’). We do not require
that the entities or relation types in the direct su-
pervision annotations align with those in the KB.
Furthermore, we replace the relation label associ-
ated with each sentence with a binary indicator of
1 if the sentence expresses one of the relationships
of interest and 0 otherwise.

Figure 1 illustrates how we modify neural ar-
chitectures commonly used in distant supervision,
e.g., Lin et al. (2016); Liu et al. (2017) to effec-
tively incorporate direct supervision. The model
consists of two components: 1) A sentence en-
coder (displayed in blue) reads a sequence of to-
kens and their relative distances from e1 and e2,
and outputs a vector s representing the sentence
encoding, as well as P (e1 ∼ e2 | s) represent-
ing the probability that the two entities are related
given this sentence. 2) The bag encoder (dis-
played in green) reads the encoding of each sen-
tence in the bag for the pair (e1, e2) and predicts
P (r = 1 | e1, e2), ∀r ∈ R.

We combine both types of supervision in



1860

a multi-task learning setup by minimizing the
weighted sum of the cross entropy losses for
P (e1 ∼ e2 | s) and P (r = 1 | e1, e2). By sharing
the parameters of sentence encoders used to com-
pute either loss, the sentence encoders become less
susceptible to the noisy bag labels. The bag en-
coder also benefits from the direct supervision by
using the supervised distribution P (e1 ∼ e2 | s)
to decide the weight of each sentence in the bag.

3 Model

The model predicts a set of relation types
Lpred ⊂ R given a pair of entities e1, e2 and a bag
of sentences Be1,e2 . In this section, we first de-
scribe the sentence encoder part of the model (Fig-
ure 2, bottom), then describe the bag encoder (Fig-
ure 2, top), then we explain how the two types of
supervision are jointly used for training the model
end-to-end.

3.1 Sentence Encoder Architecture
Given a sequence of words w1, . . . , w|s| in a sen-
tence s, a sentence encoder translates this se-
quence into a fixed length vector s.

Input Representation. The input representation
is illustrated graphically with a table at the bottom
of Figure 2. We map word token i in the sentence
wi to a pre-trained word embedding vector wi.2

Another crucial input signal is the position of en-
tity mentions in each sentence s ∈ Be1,e2 . Fol-
lowing Zeng et al. (2014), we map the distance
between each word in the sentence and the entity
mentions3 to a small vector of learned parameters,
namely de1i and d

e2
i .

We find that adding a dropout layer with a small
probability (p = 0.1) before the sentence encoder
reduces overfitting and improves the results. To
summarize, the input layer for a sentence s is a
sequence of vectors:

vi = [wi;d
e1
i ;d

e2
i ], for i ∈ 1, . . . , |s|

Word Composition. Word composition is illus-
trated with the block CNN in the bottom part of
Figure 2, which represents a convolutional neu-
ral network (CNN) with multiple filter sizes. The
outputs of the max pool operations for different

2Following Lin et al. (2016), we do not update the word
embeddings while training the model.

3If an entity is mentioned more than once in the sentence,
we use the distance from the word to the closest entity men-
tion. Distances greater than 30 are mapped to the embedding
for distance = 30.

Jobs pos:0 pos:5
was pos:1 pos:4

forced pos:2 pos:3
out pos:3 pos:2
of pos:4 pos:1

Apple pos:5 pos:0
… … …

CNN

scalar mult.

ReLU

sigmoid

Jobs pos:0 pos:2
and pos:1 pos:1

Apple pos:2 pos:0
co-founder pos:3 pos:1

Steve pos:4 pos:2
Wozniak pos:5 pos:3

… … …

scalar mult.

max pool

Jo
bs

Ap
pl

e

pointwise mult.

ReLUReLU

sigmoidsigmoid sigmoid

P(r1 | e1, e2) P(r2 | e1, e2) P(r3 | e1, e2)

ReLU

sigmoid

ReLU

sigmoid

P(e1~e2|s1) = p P(e1~e2|s2)

CNN ReLU

sigmoids1

t

u1

s2

u2

g
m

aggregating 
sentences

attention 
weights

bag 
encoder

se
nt

 2
 e

nc
od

er

se
nt

 1
 e

nc
od

er
Figure 2: Blue box is the sentence encoder, it maps
a sentence to a fixed length vector (CNN output) and
the probability it expresses a relation between e1 and
e2 (sigmoid output). Green box is the bag en-
coder, it takes encoded sentences and their weights and
produces a fixed length vector (max pool output),
concatenates it with entity embeddings (pointwise
mult. output) then outputs a probability for each re-
lation type r. White boxes contain parameters that the
model learns while gray boxes do not have learnable
parameters. Directly supervised annotations provide
supervision for P (e1 ∼ e2 | s). Distantly supervised
annotations provide supervision for P (r = 1 | e1, e2).

filter sizes are concatenated then projected into a
smaller vector using one feed forward linear layer.

Sentence encoding s is computed as follows:

cx = CNNx(v1, . . . ,v|s|), for x ∈ {2, 3, 4, 5}
s = W1 [c2; c3; c4; c5] + b1,

where CNNx is a standard convolutional neural
network with filter size x, W1 and b1 are model
parameters and s is the sentence encoding.

We feed the sentence encoding s into a ReLU
layer followed by a sigmoid layer with output size
1, representing P (e1 ∼ e2 | s), as illustrated in
Figure 2 (bottom):

P (e1 ∼ e2 | s) = (1)
p = σ(W3ReLU(W2s+ b2) + b3),



1861

where σ is the sigmoid function and
W2,b2,W3,b3 are model parameters.

3.2 Bag Encoder Architecture

Given a bag Be1,e2 of n ≥ 1 sentences, we com-
pute their encodings s1, . . . , sn as described ear-
lier and feed them into the bag encoder, which
combines the information in all of the sentence en-
codings and predicts the probability P (r = 1 |
e1, e2),∀r ∈ R. The bag encoder also incorpo-
rates the signal p = P (e1 ∼ e2 | s) from Equa-
tion 1 as an estimate of the degree to which sen-
tence s expresses “some” relation between e1 and
e2.

Attention. To aggregate the sentence encodings
s1, . . . , sn into a fixed length vector that captures
the important features in the bag, we use attention.
Attention has two steps: (1) computing weights
for the sentences and (2) aggregating the weighted
sentences. Weights can be uniform, or computed
using a sigmoid or softmax. Weighted sentences
can be aggregated using average pooling or max
pooling. Prior work (Jiang et al., 2016; Lin et al.,
2016; Ji and Smith, 2017) have explored some of
these combinations but not all of them. In the ab-
lation experiments, we try all combinations and
we find that the (sigmoid, max pooling) attention
gives the best result. We discuss the intuition be-
hind this in Section 4.2. For the rest of this section,
we will explain the architecture of our network as-
suming a (sigmoid, max pooling) attention.

Given the encoding sj and an unnormalized
weight uj for each sentence sj ∈ Be1,e2 , the
bag encoding g is a vector with the same dimen-
sionality as sj . With (sigmoid, max pooling) at-
tention, each sentence vector is multiplied by the
corresponding weight, then we do a “dimension-
wise” max pooling (taking the maximum of each
dimension across all sentences, not the other way
around). The k-th element of the bag encoding g
is computed as:

gj [k] = maxj∈1,...,n{sj [k]× σ(uj)}.
As shown in Figure 2, we do not directly use

the p from Equation 1 as attention weights. In-
stead, we found it useful to feed it into more non-
linearities. The unnormalized attention weight for
sj is computed as:

uj = W7 ReLU(W6 p+ b6) + b7.

Entity Embeddings. Following Ji et al. (2017),
we use entity embeddings to improve our model

of relations in the distant supervision setting, al-
though our formulation is closer to that of Yang
et al. (2015) who used point-wise multiplication
of entity embeddings: m = e1 � e2, where � is
point-wise multiplication, and e1 and e2 are the
embeddings of e1 and e2, respectively. In order
to improve the coverage of entity embeddings, we
use pretrained GloVe vectors (Pennington et al.,
2014) (same embeddings used in the input layer).
For entities with multiple words, like “Steve Jobs”,
the vector for the entity is the average of the GloVe
vectors of its individual words. If the entity is ex-
pressed differently across sentences, we average
the vectors of the different mentions. As discussed
in Section 4.2, this leads to big improvement in the
results, and we believe there is still big room for
improvement from having better representation for
entities. We feed the output m as additional input
to the last block of our model.

Output Layer. The final step is to use the bag
encoding g and the entity pair encoding m to pre-
dict a set of relations Lpred which is a standard
multilabel classification problem. We concatenate
g and m and feed them into a feedforward layer
with ReLU non-linearity, followed by a sigmoid
layer with an output size of |R|:

t = ReLU(W4[g;m] + b4)

P (r = 1 | e1, e2) = σ(W5t+ b5),
where r is a vector of Bernoulli variables each of
which corresponds to one of the relations in R.
This is the final output of the model.

3.3 Model Training

To train the model on the distant supervision
data, we use binary cross-entropy loss between the
model predictions and the labels obtained with dis-
tant supervision, i.e.,

DistSupLoss =
∑

Be1,e2

− logP (r = rdistant | e1, e2)

where rdistant[k] = 1 indicates that the tuple
(e1, rk, e2) is in the knowledge base.

In addition to the distant supervision, we want
to improve the results by incorporating an addi-
tional direct supervision. A straightforward way
to combine them is to create singleton bags for di-
rect supervision labels, and add the bags to those
obtained with distant supervision. However, re-
sults in Section 4.2 show that this approach does
not improve the results. Instead, a better use of
the direct supervision is to improve the model’s



1862

ability to predict the potential usefulness of a sen-
tence. According to our analysis of baseline mod-
els, distinguishing between positive and negative
examples is the real bottleneck in the task. There-
fore, we use the direct supervision data to super-
vise P (e1 ∼ e2 | s). This supervision serves two
purposes: it improves our encoding of each sen-
tence, and improves the weights used by the atten-
tion to decide which sentences should contribute
more to the bag encoding. It also has the side ben-
efit of not requiring the same set of relation types
as that of the distant supervision data, because we
only care about if there exists some relevant rela-
tion or not between the entities.

We minimize log loss of gold labels in the di-
rect supervision dataD according to the model de-
scribed in Equation 1:

DirectSupLoss =
∑

s,lgold∈D

− logP (l = lgold | s)

where D is all the direct supervision data and all
distantly-supervised negative examples.4

We jointly train the model on both types of su-
pervision. The model loss is a weighted sum of the
direct supervision and distant supervision losses,

loss =
1

λ+ 1
DistSupLoss+

λ

λ+ 1
DirectSupLoss

(2)
where λ is a parameter that controls the contribu-
tion of each loss, tuned on a validation set.

4 Experiments

4.1 Data and Setup
This section discusses datasets, metrics, configu-
rations and the models we are comparing with.

Distant Supervision Dataset (DistSup). The
FB-NYT dataset5 introduced in Riedel et al.
(2010) was generated by aligning Freebase facts
with New York Times articles. The dataset has
52 relations with the most common being “loca-
tion”, “nationality”, “capital”, “place lived” and
“neighborhood of”. They used the articles of
2005 and 2006 for training, and 2007 for test-
ing. Recent prior work (Lin et al., 2016; Liu et al.,
2017; Huang and Wang, 2017) changed the origi-
nal dataset. They used all articles for training ex-
cept those from 2007, which they left for testing as
in Riedel et al. (2010). We use the modified dataset

4We note that the distantly supervised negative examples
may still be noisy. However, given that relations tend to be
sparse, the signal to noise is high.

5http://iesl.cs.umass.edu/riedel/ecml/

which was made available by Lin et al. (2016).6

The table below shows the dataset size.

Train Test

Positive bags 16,625 1,950
Negative bags 236,811 94,917

Sentences 472,963 172,448

Direct Supervision Dataset (DirectSup). Our
direct supervision dataset was made available by
Angeli et al. (2014) and it was collected in an
active learning framework. The dataset consists
of sentences annotated with entities and their re-
lations. It has 22,766 positive examples for 41
relation types in addition to 11,049 negative ex-
amples. To use this dataset as supervision for
P (e1 ∼ e2 | s), we replace the relation types of
positive examples with 1s and label negative ex-
amples with 0s.

Metrics. Prior work used precision-recall (PR)
curves to show results on the FB-NYT dataset. In
this multilabel classification setting, the PR curve
is constructed using the model predictions on all
entity pairs in the test set for all relation types
sorted by the confidence scores from highest to
lowest. Different thresholds correspond to differ-
ent points on the PR curve. We use the area un-
der the PR curve (AUC) for early stopping and
hyperparameter tuning. Following previous work
on this dataset, we only keep points on the PR
curve with recall below 0.4, focusing on the high-
precision low-recall part of the PR curve. As a
result, the largest possible value for AUC is 0.4.

Configurations. The FB-NYT dataset does not
have a validation set for hyperparameter tuning
and early stopping. Liu et al. (2017) use the test
set for validation, Lin et al. (2016) use 3-fold cross
validation, and Vashishth et al. (2018) split the
training set into 80% training and 20% testing. In
our experiments, we use 90% of the training set
for training and keep the other 10% for validation.
The main hyperparameter we tune is lambda (sec-
tion 4.3).

The pre-trained word embeddings we use are
300-dimensional GloVe vectors, trained on 42B
tokens. Since we do not update word embeddings
while training the model, we define our vocabulary
as any word which appears in the training, valida-
tion or test sets with frequency greater than two.
When a word with a hyphen (e.g., ‘five-star’) is not

6https://github.com/thunlp/NRE

http://iesl.cs.umass.edu/riedel/ecml/
https://github.com/thunlp/NRE


1863

in the GloVe vocabulary, we average the embed-
dings of its subcomponents. Otherwise, all OOV
words are assigned the same random vector (nor-
mal with mean 0 and standard deviation 0.05).

Our model is implemented using PyTorch and
AllenNLP (Gardner et al., 2017) and trained on
machines with P100 GPUs. Each run takes five
hours on average. We train for a maximum of 50
epoch, and use early stopping with patience = 3.
Each dataset is split into minibatches of size 32
and randomly shuffled before every epoch. We
use the Adam optimizer with its default PyTorch
parameters. We run every configuration with three
random seeds and report the PR curve for the run
with the best validation AUC. In the controlled ex-
periments, we report the mean and standard devi-
ation of the AUC across runs.

Compared Models. Our best model (Section 3)
is trained on the DistSup and DirectSup datasets
in our multitask setup and it uses (sigmoid, max
pooling) attention. Baseline is the same model de-
scribed in Section 3 but trained only on the Dist-
Sup dataset and uses the more common (softmax,
average pooling) attention. This baseline is our
implementation of the PCNN+ATT model (Lin
et al., 2016) with two main differences; they use
piecewise convolutional neural networks (PC-
NNs Pennington et al., 2014) instead of CNNs,
and we add entity embeddings before the output
layer.7 We also compare our results to the state of
the art model RESIDE (Vashishth et al., 2018),
which uses graph convolution over dependency
parse trees, OpenIE extractions and entity type
constraints.

4.2 Main Results
Figure 3 summarizes the main results of our ex-
periments. First, we note that “our baseline” out-
performs PCNN+ATT (Lin et al., 2016) despite
using the same training data (DistSup) and the
same form of attention (softmax, average pooling),
which confirms that we are building on a strong
baseline. The improved results in our baseline are
due to using CNNs instead of PCNNs, and using
entity embeddings.

7Contrary to the results in Pennington et al. (2014), we
found CNNs to give better results than PCNNs in our experi-
ments. Lin et al. (2016) also compute unnormalized attention
weights as oj = sj ×A× q where sj is the sentence encod-
ing, A is a diagonal matrix and q is the query vector. In our
experiments, we found that implementing it as a feedforward
layer with output size = 1 works better. All our results use
the feedforward implementation.

0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40
recall

0.4

0.5

0.6

0.7

0.8

0.9

1.0

pr
ec

isi
on

This work
Baseline
RESIDE (Vashishth et al., 2018)
PCNN+ATT (Lin et al., 2016)

Model AUC

PCNN+ATT (Lin et al., 2016) 0.247
RESIDE (Vashishth et al., 2018) 0.271

Our baseline 0.272±0.005
This work 0.283±0.007

Figure 3: Precision-recall curves and their AUC com-
paring our model with the baseline and existing mod-
els. Baseline is trained on DistSup and uses (softmax,
average pooling) attention. Our best model is trained
using multitask learning on DistSup and DirectSup and
uses (sigmoid, max pooling) attention. Results of Lin
et al. (2016) and Vashishth et al. (2018) are copied from
their papers.

pooling
type

supervision signal attention weight computation

uniform softmax sigmoid

average
pooling

DistSup 0.244± 0.008 0.272± 0.005 0.258± 0.020
DistSup + DirectSup 0.224± 0.009 0.272± 0.009 0.256± 0.009
MultiTask (our model) 0.220± 0.012 0.262± 0.014 0.258± 0.015

max
pooling

DistSup 0.277± 0.009 0.278± 0.001 0.274± 0.004
DistSup + DirectSup 0.269± 0.003 0.269± 0.005 0.277± 0.012
MultiTask (our model) 0.266± 0.007 0.280± 0.004 0.283± 0.007

Table 1: Controlled experiments for a) how the su-
pervised data is used in the model, b) which function
is used to compute attention weights, c) how sentence
embeddings are aggregated

A new state-of-the-art. Adding DirectSup in
our multitask learning setup and using (sig-
moid, max pooling) attention gives us the best
result, outperforming our baseline that doesn’t
use either by 4.4% relative AUC increase, and
achieves a new state-of-the-art result outperform-
ing (Vashishth et al., 2018).

We note that the improved results reported here
conflate additional supervision and model im-
provements. Next, we report the results of con-
trolled experiments to tease apart the contributions
of different components.

Table 1 summarizes results of our controlled ex-
periments showing the impact of how the training
data is used, and the impact of different config-
urations of the attention (computing weights and
aggregating vectors). The model can be trained



1864

on DistSup only, DistSup + DirectSup together as
one dataset with DirectSup expressed as single-
ton bags, or DistSup + DirectSup in our multi-
task setup. Attention weights can be uniform, or
computed using softmax or sigmoid.8 Sentence
vectors are aggregated by weighting them then av-
eraging (average pooling) or weighting them then
taking the max of each dimension (max pooling).
(Uniform weights, average pooling) and (softmax,
average pooling) were used by Lin et al. (2016),
(sigmoid, average pooling) was proposed by Ji and
Smith (2017) but for a different task, and (uni-
form weights, max pooling) is used by Jiang et al.
(2016). To the best of our knowledge, (softmax,
max pooling) and (sigmoid, max pooling) have not
been explored before.

Pooling type. Results in Table 1 show that ag-
gregating sentence vectors using max pooling gen-
erally works better than average pooling. This is
because max pooling might be better at picking
out useful features (dimensions) from each sen-
tence.

Supervision signal. The second dimension of
comparison is the use of the supervision signal
used to train the model. The table shows that train-
ing on DistSup + DirectSup, where the DirectSup
dataset is simply used as additional bags, can hurt
the performance. We hypothesize that this is be-
cause the DirectSup data change the distribution of
relation types in the training set from the test set.
However, using DirectSup as supervision for the
attention weights in our multitask learning setup
leads to considerable improvements (1% and 3%
relative AUC increase using softmax and sigmoid
respectively) because it leads to better attention
weights and improves the model’s ability to filter
noisy sentences.

Attention weight computation. Finally, com-
paring uniform weights, softmax and sigmoid. We
found the result to depend on the available level of
supervision. With DistSup only, the results of all
three are comparable with softmax being slightly
better. However, when we have good attention
weights (as provided by the multitask learning),
softmax and sigmoid work better than uniform
weights where sigmoid gives the best result with
6% relative AUC increase. Sigmoid works better

8We also tried normalizing sigmoid weights as suggested
in (Rei and Søgaard, 2018), but this did not work better than
regular sigmoid or softmax.

2^- 2^-1.0 2^0.0 2^1.0 2^2.0 2^3.0 2^4.0 2^5.0 2^6.0

0.255

0.260

0.265

0.270

0.275

0.280

0.285

0.290

AP

AUC

Figure 4: AUC at different λ. X-axis is in log-scale.

than softmax, because softmax assumes that ex-
actly one sentence is correct by forcing the prob-
abilities to sum to 1. This assumption is not cor-
rect for this task, because zero or many sentences
could potentially be relevant. On the other hand,
sigmoidal attention weights does not make this as-
sumption, which gives rise to more informative at-
tention weights in cases where all sentences are
not useful, or when multiple ones are. This makes
the sigmoidal attention weights a better model-
ing for the problem (assuming reliable attention
weights).

4.3 Selecting Lambda.

Although we did not spend much time tuning hy-
perparameters, we made sure to carefully tune λ
(Equation 2) which balances the contribution of
the two losses of the multitask learning. Early ex-
periments showed that DirectSupLoss is typically
smaller than DistSupLoss, so we experimented
with λ ∈ {0, 0.5, 1, 2, 4, 8, 16, 32, 64}. Figure 4
shows AUC results for different values of λ, where
each point is the average of three runs. It is clear
that picking the right value for λ has a big impact
on the final result.

4.4 Qualitative Analysis.

An example of a positive bag is shown in Ta-
ble 2. Our best model (Multitask, sigmoid, max
pooling) assigns the most weight to the first sen-
tence while the baseline (DistSup, softmax, aver-
age pooling) assigns the most weight to the last
sentence (which is less informative for the rela-
tion between the two entities). Also, the baseline
does not use the other two sentences because their
weights are dominated by the last one.

5 Related Work

Distant Supervision. The term ‘distant supervi-
sion’ was coined by Mintz et al. (2009) who used
relation instances in a KB to identify sentences in



1865

Baseline This work Sentences

0.00 0.029 You can line up along the route to cheer for the 32,000 riders, whose 42-mile trip will start in battery park and end with a festival at Fort
Wadsworth on Staten Island .

0.00 0.026 Gateway is a home to the nation’s oldest continuing operating lighthouse, Sandy Hook lighthouse, built in 1764; Floyd Bennett field in
Brooklyn, which was the city’s first municipal airfield; Fort Wadsworth on Staten Island, which predates the revolutionary war.

0.99 0.027 home energy smart fair, gateway national recreation area, Fort Wadsworth visitor center, bay street and school road, Staten Island.

Table 2: Weights assigned to sentences by our baseline and our best model. The baseline incorrectly predicts
“no relation”, while our best model correctly predicts “neighbourhood of” for this bag.

a text corpus where two related entities are men-
tioned, then developed a classifier to predict the
relation. Researchers have since extended this ap-
proach further (e.g., Takamatsu et al., 2012; Min
et al., 2013; Riedel et al., 2013; Koch et al., 2014).

A key source of noise in distant supervision
is that sentences may mention two related enti-
ties without expressing the relation between them.
Hoffmann et al. (2011) used multi-instance learn-
ing to address this problem by developing a graph-
ical model for each entity pair which includes a
latent variable for each sentence to explicitly indi-
cate the relation expressed by that sentence, if any.
Our model can be viewed as an extension of Hoff-
mann et al. (2011) where the sentence-bound la-
tent variables can also be directly supervised in
some of the training examples.

Neural Models for Distant Supervision. More
recently, neural models have been effectively used
to model textual relations (e.g., Hashimoto et al.,
2013; Zeng et al., 2014; Nguyen and Grishman,
2015). Focusing on distantly supervised models,
Zeng et al. (2015) proposed a neural implemen-
tation of multi-instance learning to leverage mul-
tiple sentences which mention an entity pair in
distantly supervised relation extraction. However,
their model picks only one sentence to represent
an entity pair, which wastes the information in
the neglected sentences. Jiang et al. (2016) ad-
dresses this limitation by max pooling the vec-
tor encodings of all input sentences for a given
entity pair. Lin et al. (2016) independently pro-
posed to use attention to address the same limita-
tion, and Du et al. (2018) improved by using mul-
tilevel self-attention. To account for the noise in
distant supervision labels, Liu et al. (2017); Luo
et al. (2017); Wang et al. (2018) suggested differ-
ent ways of using “soft labels” that do not nec-
essarily agree with the distant supervision labels.
Ye et al. (2017) proposed a method for leveraging
dependencies between different relations in a pair-
wise ranking framework, while Han et al. (2018)
arranged the relation types in a hierarchy aiming

for better generalization for relations that do not
have enough training data. To improve using addi-
tional resources, Vashishth et al. (2018) used graph
convolution over dependency parse, OpenIE ex-
tractions and entity type constraints, and Liu et al.
(2018) used parse trees to prune irrelevant infor-
mation from the sentences.

Combining Direct and Distant Supervision.
Despite the substantial amount of work on both
directly and distantly supervised relation extrac-
tion, the question of how to combine both sig-
nals has not received the same attention. Per-
shina et al. (2014) trained MIML-RE from (Sur-
deanu et al., 2012) on both types of supervision
by locking the latent variables on the sentences
to the supervised labels. Angeli et al. (2014) and
Liu et al. (2016) presented active learning mod-
els that select sentences to annotate and incorpo-
rate in the same manner. Pershina et al. (2014)
and Liu et al. (2016) also tried simple baseline of
including the labeled sentences as singleton bags.
Pershina et al. (2014) did not find this beneficial,
which agrees with our results in Section 4.2, while
Liu et al. (2016) found the addition of singleton
bags to work well.

Our work is addressing the same problem, but
combining both signals in a state-of-the-art neu-
ral network model, and we do not require the two
datasets to have the same set of relation types.

6 Conclusion

We improve neural network models for relation
extraction by combining distant and direct super-
vision data. Our network uses attention to attend
to relevant sentences, and we use the direct su-
pervision to improve attention weights, thus im-
proving the model’s ability to find sentences that
are likely to express a relation. We also found
that sigmoidal attention weights with max pooling
achieves better performance than the commonly
used weighted average attention. Our model com-
bining both forms of supervision achieves a new
state-of-the-art result on the FB-NYT dataset with



1866

a 4.4% relative AUC increase than our baseline
without the additional supervision.

Acknowledgments

All experiments were performed on beaker.
org. Computations on beaker.org were sup-
ported in part by credits from Google Cloud.

References
Gabor Angeli, Julie Tibshirani, Jean Wu, and Christo-

pher D Manning. 2014. Combining distant and par-
tial supervision for relation extraction. In EMNLP.

Razvan C. Bunescu and Raymond J. Mooney. 2005. A
shortest path dependency kernel for relation extrac-
tion. In HLT/EMNLP.

Mark Craven and Johan Kumlien. 1999. Constructing
biological knowledge bases by extracting informa-
tion from text sources. In ISMB.

Jinhua Du, Jingguang Han, Andy Way, and Dadong
Wan. 2018. Multi-level structured self-attentions for
distantly supervised relation extraction. In EMNLP.

Miao Fan, Deli Zhao, Qiang Zhou, Zhiyuan Liu,
Thomas Fang Zheng, and Edward Y. Chang. 2014.
Distant supervision for relation extraction with ma-
trix completion. In ACL.

Matt Gardner, Joel Grus, Mark Neumann, Oyvind
Tafjord, Pradeep Dasigi, Nelson F. Liu, Matthew
Peters, Michael Schmitz, and Luke S. Zettlemoyer.
2017. Allennlp: A deep semantic natural language
processing platform.

Xu Han, Pengfei Yu, Zhiyuan Liu, Maosong Sun, and
Peng Li. 2018. Hierarchical relation extraction with
coarse-to-fine grained attention. In EMNLP.

Kazuma Hashimoto, Makoto Miwa, Yoshimasa Tsu-
ruoka, and Takashi Chikayama. 2013. Simple cus-
tomization of recursive neural networks for semantic
relation classification. In EMNLP.

Raphael Hoffmann, Congle Zhang, Xiao Ling,
Luke S. Zettlemoyer, and Daniel S. Weld. 2011.
Knowledge-based weak supervision for information
extraction of overlapping relations. In ACL.

Yi Yao Huang and William Yang Wang. 2017. Deep
residual learning for weakly-supervised relation ex-
traction. In EMNLP.

Guoliang Ji, Kang Liu, Shizhu He, and Jun Zhao.
2017. Distant supervision for relation extraction
with sentence-level attention and entity descriptions.
In AAAI.

Yangfeng Ji and Noah A. Smith. 2017. Neural dis-
course structure for text categorization. In ACL.

Xiaotian Jiang, Quan Wang, Peng Li, and Bin Wang.
2016. Relation extraction with multi-instance multi-
label convolutional neural networks. In COLING.

Mitchell Koch, John Gilmer, Stephen Soderland, and
Daniel S. Weld. 2014. Type-aware distantly super-
vised relation extraction with linked arguments. In
EMNLP.

Yankai Lin, Shiqi Shen, Zhiyuan Liu, Huanbo Luan,
and Maosong Sun. 2016. Neural relation extraction
with selective attention over instances. In ACL.

Angli Liu, Stephen Soderland, Jonathan Bragg,
Christopher H. Lin, Xiao Ling, and Daniel S. Weld.
2016. Effective crowd annotation for relation ex-
traction. In NAACL.

Tian Yu Liu, Kexiang Wang, Baobao Chang, and Zhi-
fang Sui. 2017. A soft-label method for noise-
tolerant distantly supervised relation extraction. In
EMNLP.

Tianyi Liu, Xinsong Zhang, Wanhao Zhou, and Wei-
jia Jia. 2018. Neural relation extraction via inner-
sentence noise reduction and transfer learning. In
EMNLP.

Bingfeng Luo, Yansong Feng, Zheng Wang, Zhanxing
Zhu, Songfang Huang, Rui Yan, and Dongyan Zhao.
2017. Learning with noise: Enhance distantly su-
pervised relation extraction with dynamic transition
matrix. In ACL.

Bonan Min, Ralph Grishman, Li Wan, Chang Wang,
and David Gondek. 2013. Distant supervision for
relation extraction with an incomplete knowledge
base. In HLT-NAACL.

Mike Mintz, Steven Bills, Rion Snow, and Daniel Ju-
rafsky. 2009. Distant supervision for relation extrac-
tion without labeled data. In ACL.

Thien Huu Nguyen and Ralph Grishman. 2015. Rela-
tion extraction: Perspective from convolutional neu-
ral networks. In VS@HLT-NAACL.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors for
word representation. In EMNLP.

Maria Pershina, Bonan Min, Wei Xu, and Ralph Gr-
ishman. 2014. Infusion of labeled data into distant
supervision for relation extraction. In ACL.

Marek Rei and Anders Søgaard. 2018. Zero-shot se-
quence labeling: Transferring knowledge from sen-
tences to tokens. In NAACL-HLT.

Sebastian Riedel, Limin Yao, and Andrew D McCal-
lum. 2010. Modeling relations and their mentions
without labeled text. In ECML/PKDD.

Sebastian Riedel, Limin Yao, Andrew D McCallum,
and Benjamin M. Marlin. 2013. Relation extraction
with matrix factorization and universal schemas. In
HLT-NAACL.

beaker.org
beaker.org
beaker.org
http://arxiv.org/abs/arXiv:1803.07640
http://arxiv.org/abs/arXiv:1803.07640


1867

Benjamin Roth, Tassilo Barth, Michael Wiegand, and
Dietrich Klakow. 2013. A survey of noise reduction
methods for distant supervision. In AKBC@CIKM.

Mihai Surdeanu, Julie Tibshirani, Ramesh Nallap-
ati, and Christopher D. Manning. 2012. Multi-
instance multi-label learning for relation extraction.
In EMNLP-CoNLL.

Shingo Takamatsu, Issei Sato, and Hiroshi Nakagawa.
2012. Reducing wrong labels in distant supervision
for relation extraction. In ACL.

Shikhar Vashishth, Rishabh Joshi, Sai Suman Prayaga,
Chiranjib Bhattacharyya, and Partha Talukdar. 2018.
Reside: Improving distantly-supervised neural rela-
tion extraction using side information. In EMNLP.

Guanying Wang, Wen Zhang, Ruoxu Wang, Yalin
Zhou, Xi Chen, Wei Zhang, Hai Zhu, and Huajun
Chen. 2018. Label-free distant supervision for rela-
tion extraction via knowledge graph embedding. In
EMNLP.

Bishan Yang, Wen tau Yih, Xiaodong He, Jianfeng
Gao, and Li Deng. 2015. Embedding entities and
relations for learning and inference in knowledge
bases. In ICLR.

Hai Ye, Wen-Han Chao, Zhunchen Luo, and Zhoujun
Li. 2017. Jointly extracting relations with class ties
via effective deep ranking. In ACL.

Daojian Zeng, Kang Liu, Yubo Chen, and Jun Zhao.
2015. Distant supervision for relation extraction
via piecewise convolutional neural networks. In
EMNLP.

Daojian Zeng, Kang Liu, Siwei Lai, Guangyou Zhou,
and Jun Zhao. 2014. Relation classification via con-
volutional deep neural network. In COLING.


