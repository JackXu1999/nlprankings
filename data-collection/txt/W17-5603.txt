



















































Learning Phrase Embeddings from Paraphrases with GRUs


Proceedings of the Workshop on Curation and Applications of Parallel and Comparable Corpora, pages 16–23,
Taipei, Taiwan, November 27–December 1, 2017. c©2017 AFNLP

Learning Phrase Embeddings from Paraphrases with GRUs

Zhihao Zhou and Lifu Huang and Heng Ji

Rensselaer Polytechnic Institute
{zhouz5, huangl7, jih}@rpi.edu

Abstract

Learning phrase representations has been
widely explored in many Natural Lan-
guage Processing (NLP) tasks (e.g.,
Sentiment Analysis, Machine Transla-
tion) and has shown promising improve-
ments. Previous studies either learn non-
compositional phrase representations with
general word embedding learning tech-
niques or learn compositional phrase rep-
resentations based on syntactic structures,
which either require huge amounts of hu-
man annotations or cannot be easily gen-
eralized to all phrases. In this work,
we propose to take advantage of large-
scaled paraphrase database and present a
pair-wise gated recurrent units (pairwise-
GRU) framework to generate composi-
tional phrase representations. Our frame-
work can be re-used to generate represen-
tations for any phrases. Experimental re-
sults show that our framework achieves
state-of-the-art results on several phrase
similarity tasks.

1 Introduction

Continuous vector representations of words, also
known as word embeddings, have been used as
features for all kinds of NLP tasks such as In-
formation Extraction (Lample et al., 2016; Zeng
et al., 2014; Feng et al., 2016; Huang et al.,
2016), Semantic Parsing (Chen and Manning,
2014; Zhou and Xu, 2015; Konstas et al., 2017),
Sentiment Analysis (Socher et al., 2013b; Kalch-
brenner et al., 2014; Kim, 2014; Tai et al., 2015),
Question Answering (Tellex et al., 2003; Kumar
et al., 2015) and machine translation (Cho et al.,
2014; Zhang et al., 2014) and have yielded state-
of-the-art results. However, single word embed-

dings are not enough to express natural languages.
In many applications, we need embeddings for
phrases. For example, in Information Extrac-
tion, we need representations for multi-word en-
tity mentions, and in Question Answering, we may
need representations for even longer question and
answer phrases.

Generally, there are two types of models to
learn phrase emmbeddings: noncompositional
models and compositional models. Noncompo-
sitional models treat phrases as single informa-
tion units while ignoring their components and
structures. Embeddings of phrases can thus be
learned with general word embedding learning
techniques (Mikolov et al., 2013; Yin and Schütze,
2014; Yazdani et al., 2015), however, such meth-
ods are not scalable to all English phrases and suf-
fer from data sparsity.

On the other hand, compositional models de-
rives a phrase’s embedding from the embeddings
of its component words (Socher et al., 2012;
Mikolov et al., 2013; Yu and Dredze, 2015; Po-
liak et al., 2017). Previous work have shown good
results from compositional models which simply
used predefined functions such as element-wise
addition (Mikolov et al., 2013). However, such
methods ignore word orders and cannot capture
complex linguistic phenomena. Other studies on
compositional models learn complex composition
functions from data. For instance, the Recur-
sive Neural Network (Socher et al., 2012) finds
all linguistically plausible phrases in a sentence
and recursively compose phrase embedding from
subphrase embeddings with learned matrix/tensor
transformations.

Since compositional models can derive embed-
dings for unseen phrases from word embeddings,
they suffer less from data sparsity. However,
the difficulty of training such complex composi-
tional models lies in the choice of training data.

16



Although compositional models can be trained
unsupervisedly with auto encoders such as the
Recursive Auto Encoder (Socher et al., 2011),
such models ignore contexts and actual usages of
phrases and thus cannot fully capture the seman-
tics of phrases. Some previous work train compo-
sitional models for a specific task, such as Senti-
ment Analysis (Socher et al., 2013b; Kalchbren-
ner et al., 2014; Kim, 2014) or syntactic pars-
ing (Socher et al., 2010). But these methods
require large amounts of human annotated data.
Moreover, the embeddings obtained will be biased
to a specific task and thus will not be applicable
for other tasks. A more general source of training
data which does not require human annotation is
plain text through language modeling. For exam-
ple, Yu and Dredze (2015) trained compositional
models on bigram noun phrases with the language
modeling objective. However, using the language
modeling objective to train compositional models
to compose every phrase in plain text would be
impractical for large corpus.

In this work, we are aiming to tackle these
challenges and generate more general and high-
quality phrase embeddings. While it’s impossible
to provide “gold” annotation for the semantics of a
phrase, we propose to take advantage of the large-
scaled paraphrases, since the only criteria of deter-
mining two phrases are parallel is that they express
the same meaning. This property can be naturally
used as a training objective.

Considering this, we propose a general frame-
work to train phrase embeddings on paraphrases.
We designed a pairwise-GRU architecture, which
consists of a pair of GRU encoders on two para-
phrases. Our framework has much better gen-
eralizability. Although in this work, we only
trained and tested our framework on short para-
phrases, our model can be further applied to any
longer phrases. We demonstrate the effective-
ness of our framework on various phrase similar-
ity tasks. Results show that our model can achieve
state-of-the-art performance on capturing seman-
tics of phrases.

2 Approach

In this section, we first introduce a large-scaled
paraphrase database, the ParaPhrase DataBase
(PPDB). Then, we show the basic GRU encoder
and our pairwise-GRU based neural architecture.
Finally, we provide the training details.

2.1 Paraphrase Database

PPDB (Ganitkevitch et al., 2013) is a database
which contains hundreds of millions of English
paraphrase pairs extracted from bilingual parallel
corpora. It is constructed with the bilingual pivot-
ing method (Bannard and Callison-Burch, 2005).
Namely if two English phrases are translated to
the same foreign phrase, then the two English
phrases are considered to be paraphrases. PPDB
comes with 6 pre-packaged sizes: S to XXXL 1. In
our work, to ensure efficiency and correctness, we
only used the smallest and most accurate S pack-
age. To generate training data, we filtered out the
paraphrases (p1, p2) where

1. p1 is identical to p2

2. p1 or p2 contains any non-letter characters ex-
cept spaces

3. p1 or p2 contains words which are not con-
tained in our trained word embeddings

4. p1 and p2 are both single words

After such a filtering step, we obtained a total
number of 406,170 paraphrase pairs.

2.2 GRU Encoder

Recurrent neural networks have been proved to
be very powerful models to encode natural lan-
guage sequences. Because of the difficulty to train
such networks on long sequences, extensions to
the RNN architecture such as the long short-term
memory (LSTM) (Hochreiter and Schmidhuber,
1997) and the gated recurrent units (GRU) (Cho
et al., 2014) have been subsequently designed,
which yielded even stronger performances. Gated
structures allow models like the LSTM and the
GRU to remember and forget inputs based on the
gates’ judgment of the inputs’ importances, which
in turn help the neural networks to maintain a more
persistent memory.

The properties of such gated structures also
make these models especially suitable for deriving
phrase embeddings: for a compositional model to
derive phrase embeddings from word embeddings,
it is important that the model recognize words in
each phrase which have more impact on the mean-
ing of the phrase. For example, the embedding of
“black cat” should be very close to the embedding
of “cat”. Thus the model should partially ignore

1http://paraphrase.org/

17



the word “black” and let the word “cat” dominate
the final phrase embedding.

In this work, we chose our compositional model
to be the GRU, since it was not only faster to train
than the LSTM, but also slightly better-performing
on our evaluation tasks. Mathematically, the j’th
activation of the GRU at time step t, hjt , is given
by:

hjt = (1− zjt )hjt−1 + zjt h̃jt
where h̃jt is the current candidate activation and
zjt is an update gate which dictates the extend to
which the current activation is influenced by the
current candidate activation and to which it main-
tains previous activation.

The candidate activation is given by:

h̃jt = tanh(Wxt + U(rt � ht−1))j

where U and W are transformation matrices, xt is
the current input vector, and rt is a vector of reset
gates which controls how much the model forgets
the previous activations.

The update gates and reset gates are both calcu-
lated based on the previous activations and current
inputs:

zjt = σ(Wzxt + Uzht−1)
j

rjt = σ(Wrxt + Urht−1)
j

Concretely, given the phrase “black cat”, when
it reads the word “cat”, the GRU can learn to for-
get the word “black” by setting the update gates
zt close to 1 and setting the reset gates rt close to
0. In this way the final phrase representation of
the phrase will mostly be influenced by the word
“cat”.

2.3 PGRU: Pairwise-GRU

In order to train GRUs on paraphrases, we propose
a Pairwise-GRU (PGRU) architecture, which con-
tains two GRUs sharing the same weights, to en-
code each phrase in the paraphrase pair. Figure 1
shows the overview of our framework. Given a
phrase pair (p1, p2), e.g., p1 =“chairman of the
European observatory” and p2 =“president of the
European monitoring center”, we first initialize
each token in each phrase with a pre-trained word
embedding, then the two sequence of word em-
beddings are taken as input to two GRUs. We take
the last hidden layers of the GRUs as the phrase
embeddings of p1 and p2, and measure their simi-
larity using cosine similarity with dot product.

Unlike the Recursive Neural Network (Tree-
RNN) which maps phrases to the word embed-
ding space (Socher et al., 2013b), the PGRU maps
every phrase, including single words, to a sepa-
rate phrase embedding space. This characteristic
is very important for training the model on para-
phrases. For example, given a paraphrase pair
“America” and “the United States”, the Tree-RNN
only performs matrix/tensor transformations on
the embeddings of “the United States”, and gen-
erates a new vector representation which would
ideally be close to the embedding of “Amer-
ica”. However, since the embedding of “America”
is kept constant, transformations on “the United
States” has to be very complex.On the other hand,
the PGRU uses GRUs to encode both “America”
and “the United States” and make their phrase em-
beddings to be close to each other. Since nei-
ther embedding is aimed to be a predefined vector,
the transformations can be much simpler and thus
much easier to train.

2.4 Negative Sampling and Training
Objectives

It is not enough for a model to map paraphrases to
similar embeddings, since it is also important that
it maps semantically different phrases to differ-
ent embeddings. Thus we need to train the model
to distinguish paraphrases from non-paraphrases.
Similar to word embedding learning, we use neg-
ative sampling (Mikolov et al., 2013) to achieve
this learning outcome. For each paraphrase pair
(p1, p2), we select k contrast phrases c1, c2, ..., ck
uniformly at random from the whole paraphrase
database regardless of their frequencies of occur-
rence in the original corpora. Thus the goal of our
model is, given the phrase p1, correctly predict that
p2 is a paraphrase of p1 and all contrast phrases
c1, c2, ..., ck are not.

We chose our loss function to be the contrastive
max-margin loss (Socher et al., 2013a). The main
reasoning behind using this training objective is
that while we want the cosine similarity of p1 to
its paraphrase p2 to be high, it only has to be
higher than the similarity of p1 to any contrast
phrase ci by a certain margin so that the model can
make correct predictions. Following Socher et al.
(2013a), we set the margin to 1.

The contrastive max-margin loss for each train-

18



Figure 1: PGRU encodes phrase pairs with two GRUs which share the same parameters regardless of
phrase lengths. Similarity is calculated by multiplying the two last hidden states with dot product.

ing example is defined as:

Jt(θ) =
k∑

i=1

max(0, 1− pT1 p2 + pT1 ci)

where p1, p2 and ci are the embeddings of
the paraphrases and contrast phrases respectively.
And k is the number of contrast phrases.

And the overall loss is calculated by averaging
objectives for all training examples:

J(θ) =
1
T

T∑
t=1

Jt(θ)

where T is the number of training examples.
It is worth noting that, although previous em-

bedding training work has predominantly used
the negative sampling objective (Mikolov et al.,
2013), the contrastive max-margin loss achieved
much superior performances in our experiments.

2.5 Hyperparameters and Training Details
We used 200-dimensional word embeddings pre-
trained with word2vec (Mikolov et al., 2013). We
set the number of hidden units of the GRU cell to
200 while using dropout (Hinton et al., 2012) with
a dropout rate of 0.5 on the GRU cells to prevent
overfitting. We also used gradient clipping (Pas-
canu et al., 2013; Graves, 2013) with maximum
gradient norm set to 5. Training was accomplished
with stochastic gradient descent (SGD) with a
learning rate of 0.3, a minibatch size of 128 and
a total number of epochs of 150.

3 Experiments

3.1 PPDB experiments
We randomly split the paraphrase pairs chosen
from PPDB (as described in Section 2.1) to 80%,

10% and 10% as training, development and test
sets. To see how the size of training data af-
fects training results, we experimented training
with 1%, 10% and 100% of our training set. We
also experimented setting the number of contrast
phrases k to 9, 29 and 99 for each training set size
(which correspond to a 10/30/100 choose 1 task
for the model). Finally, we evaluated the models
trained under each configuration on our test set,
where we set k to 99 and computed the accuracy of
the model choosing a phrase’s paraphrase among
contrast phrases. More formally, for a test exam-
ple {p1, p2, c1, c2, ..., ck}, the models were given
the phrase p1 and asked to choose its paraphrase
p2 from the set {p2, c1, c2, ..., ck}.

To demonstrate the effectiveness of this training
procedure, we also included the performance of
the commonly used average encoder (AVG) on our
test set. AVG simply takes the element-wise aver-
age of a phrase’s component word embeddings as
the phrase’s embedding.

As shown in Figure 2, the commonly used AVG
encoder achieved a score of 88%, which sug-
gests that it is indeed a rather effective compo-
sitional model. But after adequate training on
PPDB, PGRU is able to significantly improve
upon AVG. This shows that AVG is not complex
enough to fully capture semantics of phrases com-
pared to complex compositional models like the
GRU. It also suggests that, during PPDB train-
ing, our model can learn useful information about
the meaning of phrases which were not learned by
word embedding models during word embedding
training. From the figure, we can also see con-
sistent performance gain from adding more train-
ing data. This again proves that a large paraphrase
database is useful for training compositional mod-

19



Figure 2: Performances of PGRU trained under
different configurations as well as the performance
of AVG.

els. Moreover, for each training set size, while we
observe obvious performance gain from increas-
ing k from 9 to 29, the gain from further increasing
k to 99 is more moderate. Considering the amount
of additional computation required, we conclude
that it is not worth the computation efforts to in-
crease k even further.

3.2 Phrase Similarity Tasks

Datasets

Following Yu and Dredze (2015), we evaluated
our model on human annotated datasets includ-
ing SemEval2013 Task 5(a) (SemEval2013) (Ko-
rkontzelos et al., 2013) and the noun-modifer
problem in Turney2012 (Turney2012) (Turney,
2012). SemEval2013 is a task to classify a phrase
pair as either semantically similar or dissimilar.
Turney2012(5) is a task to select the most seman-
tically similar word to the given bigram phrase
among 5 candidate words. In order to test the
model’s sensitivity to word orders, extended from
Turney2012(5), Turney2012(10) reverse the bi-
gram and add it to the original bigram side. Thus
the model needs to choose a bigram from these
two bigrams and also choose the most semanti-
cally similar word from 5 candidates. Examples
for these tasks are shown in Table 2.

Both tasks include separate training and eval-
uation sets. Note that although both tasks only
contain unigram and bigram noun phrases, our ap-
proach of learning phrase embeddings can be ap-
plied to n-grams of any kind. We tested the perfor-
mances of the GRU trained on the provided train-
ing set for each task (GRU) as well as the GRU

trained only on the PPDB data (GRU(PPDB)), as
described in Section 2. For task-unspecific train-
ing (GRU(PPDB)), we used the training set of
each task as development set and applied early
stopping.

Baselines
We compare our results against baseline results
reported by Yu and Dredze (2015). The base-
line method SUM is the commonly used element-
wise addition method (Mitchell and Lapata, 2010).
RAE is the recursive auto encoder (Socher et al.,
2011) which is unsupervisedly trained to compose
phrase embeddings such that the resulting phrase
embeddings can be used predict the phrase’s com-
posing word embeddings. FCT (Yu and Dredze,
2015) is a compositional model which calculates a
phrase’s embeddings as a per-dimension weighted
average of the component word embeddings while
taking into consideration linguistic features such
as part of speech tags. FCT(LM) (Yu and Dredze,
2015) is the FCT model trained on news corpus
with language modeling objective instead of on
the provided training sets for each task. Tree-
RNN is the recursive neural network (Socher et al.,
2011, 2013b) which builds up phrase embeddings
from composing word embeddings with matrix
transformations while also taking advantage of
POS tags and parse tree structures.

We divide our results to comparisons of
task-specific models and comparisons of task-
unspecific ones, where for task-specific models,
we remove scores from Yu and Dredze (2015)
which require fine-tuning word embeddings since
we are only comparing compositional models. For
the sake of comparison, we use the same word em-
beddings used by Yu and Dredze (2015), although
better scores can be achieved by using word em-
beddings of larger vocabulary size.

Results
As shown in table 1, GRU performs the best
among all task-specific models in all three tasks,
which proves that GRU is a very powerful com-
positional model and suggests that it is a suit-
able model to learn compositional phrase embed-
dings. GRU’s much superior performances on
Turney2012(5) and Turney2012(10) can also be
attributed to the fact that we used the contrastive
max-margin loss (as described in Section 2.4) as
training objective, which proved to be more effec-
tive in our experiments than the negative sampling

20



Model Task Specific SemEval2013 Turney2012(5) Turney2012(10)
SUM False 65.46 39.58 19.79
RAE False 51.75 22.99 14.81
FCT(LM) False 67.22 42.59 27.55
GRU(PPDB) False 71.29 41.44 26.37
Tree-RNN True 71.50 40.95 27.20
FCT True 68.84 41.90 33.80
GRU True 73.44 48.88 39.23

Table 1: Performances of our models and baselines on SemEval2013, Turney2012(5) and Tur-
ney2012(10). Models are split into task-specific ones and task-unspecific ones for comparison.

Data Set Input Output train/eval size
SemEval2013 (bomb, explosive device) True 11722/7814
Turney2012 air current , {wind, gas, sedum, sudorific, bag} wind 680/1500

Table 2: Examples for SemEval2013 and Turney2012 as well as the number of training and evaluation
examples for each task.

objective used by Yu and Dredze (2015).
Among task-unspecific models, GRU(PPDB)

also achieves strong performances. In all three
tasks, GRU(PPDB) outperforms SUM, suggesting
that the compositional model learned from PPDB
can indeed be used for other domains and tasks.
In particular, on Turney2012(10), GRU(PPDB)
improves upon SUM by a large margin. This is
because unlike SUM, GRUs can capture the or-
der of words in natural language. It also suggests
that on tasks where word order plays an impor-
tant role, using GRUs trained on PPDB can be
more appropriate than using SUM. GRU(PPDB)
also outperforms FCT(LM) on SemEval2013 and
achieves very close performances to FCT(LM) on
Turney2012(5) and Turney2012(5) despite the
fact that FCT(LM) is specifically designed and
trained to compose noun phrases, which are the
only type of phrases present in these three tasks,
whereas our model works for all types of phrases.
In addition, unlike the FCT, our method of training
GRUs on paraphrases do not need any linguistic
features produced by parsers which can be prone
to errors.

4 Related Work

Phrase embeddings can be learned from either
compositional or noncompositional models. Non-
compositional models learn phrase embeddings by
treating phrases as single units while ignoring their
components and structures. But such methods are
not scalable to all English phrases and suffer from
data sparsity.

Compositional models build phrase embed-
dings from the embeddings of its component
words. Previous work has shown that simple pre-
defined composition functions such as element-
wise addition (Mikolov et al., 2013) are relatively
effective. However, such methods ignore word or-
ders and are thus inadequate to capture complex
linguistic phenomena.

One way to capture word order and other lin-
guistic phenomena is to learn more complex com-
position functions from data. For instance, Re-
cursive Neural Networks (Socher et al., 2011,
2013b) recursively compose embeddings of all
linguistically plausible phrases in a parse tree
with complex matrix/tensor transformation func-
tions. However, models like this are very hard
to train. When there are no human-annotations,
we can train each phrase embedding to recon-
struct the embeddings of it subphrases in the parse
tree (Socher et al., 2011), but this objective does
not capture the meaning of the phrase. When
there are human-annotations, for example, if we
have annotated sentiment score for each phrase,
we can train the embeddings of phrases to predict
their sentiment scores. However, in most cases,
we do not have so much human-annotated data.
Moreover, since these phrase embeddings are only
trained to capture sentiment, they cannot be di-
rectly applied to other tasks. Our model also falls
under this category, but by training our model on
a large paraphrase database, we do not need ad-
ditional human-annotations and the composition
functions learned are not restricted to any specific

21



tasks.
There has also been work on integrating anno-

tation features to improve composition. For exam-
ple, FCT (Yu and Dredze, 2015) uses annotation
features such as POS tags and head word locations
as additional features and compose word vectors
with element-wise weighted average. While us-
ing such features makes sense linguistically, the
assumption that phrase embeddings have to be
element-wise weighted average of word embed-
dings is artificial. Also, the annotation features
used by such methods might not be accurate due
to parser errors.

Finally, our work also share similarity with neu-
ral machine translation. For example Cho et al.
(2014) showed phrase embeddings can be learned
with the RNN Encoder-Decoder from bilingual
phrase pairs. Our model differs from their model
in that our model only has the encoder part and
it relates two phrases in a phrase pair with co-
sine similarity instead of conditional probability.
We also do not only consider true paraphrase pairs
but leverage negative sampling to make the model
more robust. In addition, our model is trained
on English paraphrases instead of bilingual phrase
pairs.

5 Conclusion

In this paper, we introduced the idea of training
complex compositional models for phrase embed-
dings on paraphrase databases. We designed a
pairwise-GRU framework to encode each phrase
with a GRU encoder. Compared with previous
non-compositional and compositional phrase em-
bedding methods, our framework has much better
generalizability and can be re-used for any length
of phrases. In addition, the experimental results
on various phrase similarity tasks showed that our
framework can also better capture phrase seman-
tics and achieve state-of-the-art performances.

Acknowledgments

We would thank all the reviewers for the valu-
able suggestions. This project was supported by
the DARPA DEFT and U.S. ARL NS-CTA. The
views and conclusions contained in this document
are those of the authors and should not be inter-
preted as representing the official policies, either
expressed or implied, of the U.S. Government.
The U.S. Government is authorized to reproduce
and distribute reprints for Government purposes

notwithstanding any copyright notation here on.

References
Colin Bannard and Chris Callison-Burch. 2005. Para-

phrasing with bilingual parallel corpora. In Pro-
ceedings of the 43rd Annual Meeting on Association
for Computational Linguistics, pages 597–604. As-
sociation for Computational Linguistics.

Danqi Chen and Christopher D Manning. 2014. A fast
and accurate dependency parser using neural net-
works. In Emnlp, pages 740–750.

Kyunghyun Cho, Bart Van Merriënboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint
arXiv:1406.1078.

Xiaocheng Feng, Lifu Huang, Duyu Tang, Bing
Qin, Heng Ji, and Ting Liu. 2016. A language-
independent neural network for event detection. In
The 54th Annual Meeting of the Association for
Computational Linguistics, page 66.

Juri Ganitkevitch, Benjamin Van Durme, and Chris
Callison-Burch. 2013. Ppdb: The paraphrase
database. In HLT-NAACL, pages 758–764.

Alex Graves. 2013. Generating sequences with
recurrent neural networks. arXiv preprint
arXiv:1308.0850.

Geoffrey E Hinton, Nitish Srivastava, Alex Krizhevsky,
Ilya Sutskever, and Ruslan R Salakhutdinov. 2012.
Improving neural networks by preventing co-
adaptation of feature detectors. arXiv preprint
arXiv:1207.0580.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Lifu Huang, Taylor Cassidy, Xiaocheng Feng, Heng
Ji, Clare R Voss, Jiawei Han, and Avirup Sil. 2016.
Liberal event extraction and event schema induction.
In ACL (1).

Nal Kalchbrenner, Edward Grefenstette, and Phil
Blunsom. 2014. A convolutional neural net-
work for modelling sentences. arXiv preprint
arXiv:1404.2188.

Yoon Kim. 2014. Convolutional neural net-
works for sentence classification. arXiv preprint
arXiv:1408.5882.

Ioannis Konstas, Srinivasan Iyer, Mark Yatskar, Yejin
Choi, and Luke Zettlemoyer. 2017. Neural amr:
Sequence-to-sequence models for parsing and gen-
eration. arXiv preprint arXiv:1704.08381.

22



Ioannis Korkontzelos, Torsten Zesch, Fabio Massimo
Zanzotto, and Chris Biemann. 2013. Semeval-2013
task 5: Evaluating phrasal semantics. In Second
Joint Conference on Lexical and Computational Se-
mantics (* SEM), volume 2, pages 39–47.

Ankit Kumar, Ozan Irsoy, Jonathan Su, James Brad-
bury, Robert English, Brian Pierce, Peter Ondruska,
Ishaan Gulrajani, and Richard Socher. 2015. Ask
me anything: Dynamic memory networks for natu-
ral language processing. CoRR, abs/1506.07285.

Guillaume Lample, Miguel Ballesteros, Sandeep Sub-
ramanian, Kazuya Kawakami, and Chris Dyer. 2016.
Neural architectures for named entity recognition.
arXiv preprint arXiv:1603.01360.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111–3119.

Jeff Mitchell and Mirella Lapata. 2010. Composition
in distributional models of semantics. Cognitive sci-
ence, 34(8):1388–1429.

Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio.
2013. On the difficulty of training recurrent neural
networks. In International Conference on Machine
Learning, pages 1310–1318.

Adam Poliak, Pushpendre Rastogi, M Patrick Martin,
and Benjamin Van Durme. 2017. Efficient, compo-
sitional, order-sensitive n-gram embeddings. EACL
2017, page 503.

Richard Socher, Danqi Chen, Christopher D Manning,
and Andrew Ng. 2013a. Reasoning with neural ten-
sor networks for knowledge base completion. In
Advances in neural information processing systems,
pages 926–934.

Richard Socher, Brody Huval, Christopher D Manning,
and Andrew Y Ng. 2012. Semantic compositional-
ity through recursive matrix-vector spaces. In Pro-
ceedings of the 2012 joint conference on empirical
methods in natural language processing and com-
putational natural language learning, pages 1201–
1211. Association for Computational Linguistics.

Richard Socher, Christopher D Manning, and An-
drew Y Ng. 2010. Learning continuous phrase
representations and syntactic parsing with recursive
neural networks. In Proceedings of the NIPS-2010
Deep Learning and Unsupervised Feature Learning
Workshop, pages 1–9.

Richard Socher, Jeffrey Pennington, Eric H Huang,
Andrew Y Ng, and Christopher D Manning. 2011.
Semi-supervised recursive autoencoders for predict-
ing sentiment distributions. In Proceedings of the
conference on empirical methods in natural lan-
guage processing, pages 151–161. Association for
Computational Linguistics.

Richard Socher, Alex Perelygin, Jean Y Wu, Jason
Chuang, Christopher D Manning, Andrew Y Ng,
Christopher Potts, et al. 2013b. Recursive deep
models for semantic compositionality over a senti-
ment treebank. In Proceedings of the conference on
empirical methods in natural language processing
(EMNLP), volume 1631, page 1642. Citeseer.

Kai Sheng Tai, Richard Socher, and Christopher D
Manning. 2015. Improved semantic representations
from tree-structured long short-term memory net-
works. arXiv preprint arXiv:1503.00075.

Stefanie Tellex, Boris Katz, Jimmy Lin, Aaron Fernan-
des, and Gregory Marton. 2003. Quantitative eval-
uation of passage retrieval algorithms for question
answering. In Proceedings of the 26th annual inter-
national ACM SIGIR conference on Research and
development in informaion retrieval, pages 41–47.
ACM.

Peter D Turney. 2012. Domain and function: A dual-
space model of semantic relations and compositions.
Journal of Artificial Intelligence Research, 44:533–
585.

Majid Yazdani, Meghdad Farahmand, and James Hen-
derson. 2015. Learning semantic composition to de-
tect non-compositionality of multiword expressions.
In EMNLP, pages 1733–1742.

Wenpeng Yin and Hinrich Schütze. 2014. An explo-
ration of embeddings for generalized phrases. In
ACL (Student Research Workshop), pages 41–47.

Mo Yu and Mark Dredze. 2015. Learning composition
models for phrase embeddings. Transactions of the
Association for Computational Linguistics, 3:227–
242.

Daojian Zeng, Kang Liu, Siwei Lai, Guangyou Zhou,
Jun Zhao, et al. 2014. Relation classification via
convolutional deep neural network. In COLING,
pages 2335–2344.

Jiajun Zhang, Shujie Liu, Mu Li, Ming Zhou,
Chengqing Zong, et al. 2014. Bilingually-
constrained phrase embeddings for machine trans-
lation. In ACL (1), pages 111–121.

Jie Zhou and Wei Xu. 2015. End-to-end learning of
semantic role labeling using recurrent neural net-
works. In ACL (1), pages 1127–1137.

23


