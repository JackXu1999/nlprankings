



















































Jointly Learning Entity and Relation Representations for Entity Alignment


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 240–249,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

240

Jointly Learning Entity and Relation Representations
for Entity Alignment

Yuting Wu1, Xiao Liu1, Yansong Feng1,2∗, Zheng Wang3 and Dongyan Zhao1,2
1Wangxuan Institute of Computer Technology, Peking University, China

2The MOE Key Laboratory of Computational Linguistics, Peking University, China
3School of Computing, University of Leeds, U.K.

{wyting,lxlisa,fengyansong,zhaodongyan}@pku.edu.cn
z.wang5@leeds.ac.uk

Abstract

Entity alignment is a viable means for inte-
grating heterogeneous knowledge among dif-
ferent knowledge graphs (KGs). Recent devel-
opments in the field often take an embedding-
based approach to model the structural infor-
mation of KGs so that entity alignment can
be easily performed in the embedding space.
However, most existing works do not explic-
itly utilize useful relation representations to
assist in entity alignment, which, as we will
show in the paper, is a simple yet effective
way for improving entity alignment. This
paper presents a novel joint learning frame-
work for entity alignment. At the core of our
approach is a Graph Convolutional Network
(GCN) based framework for learning both en-
tity and relation representations. Rather than
relying on pre-aligned relation seeds to learn
relation representations, we first approximate
them using entity embeddings learned by the
GCN. We then incorporate the relation ap-
proximation into entities to iteratively learn
better representations for both. Experiments
performed on three real-world cross-lingual
datasets show that our approach substantially
outperforms state-of-the-art entity alignment
methods.

1 Introduction

Knowledge graphs (KGs) transform unstructured
knowledge into simple and clear triples of <head
entity, relation, tail entity> for rapid response
and reasoning of knowledge. They are an effec-
tive way for supporting various NLP-enabled tasks
like machine reading (Yang and Mitchell, 2017),
information extraction (Wang et al., 2018a), and
question-answering (Zhang et al., 2018b).

Even though many KGs originate from the same
resource, e.g., Wikipedia, they are usually created
independently. Therefore, different KGs often use

∗Corresponding author.

different expressions and surface forms to indicate
equivalent entities and relations – let alone those
built from different resources or languages. This
common problem of heterogeneity makes it diffi-
cult to integrate knowledge among different KGs.
A powerful technique to address this issue is En-
tity Alignment, the task of linking entities with the
same real-world identity from different KGs.

Classical methods for entity alignment typically
involve a labor-intensive and time-consuming pro-
cess of feature construction (Mahdisoltani et al.,
2013) or rely on external information constructed
by others (Suchanek et al., 2011). Recently, efforts
have been devoted to the so-called embedding-
based approaches. Representative works of this
direction include JE (Hao et al., 2016), MTransE
(Chen et al., 2017), JAPE (Sun et al., 2017), IP-
TransE (Zhu et al., 2017), and BootEA (Sun et al.,
2018). More recent work (Wang et al., 2018b) uses
the Graph Convolutional Network (GCN) (Kipf
and Welling, 2017) to jointly embed multiple KGs.

Most of the recent works (e.g., JE, MTransE,
JAPE, IPTransE and BootEA) rely on the
translation-based models, such as TransE (Bordes
et al., 2013), which enable these approaches to en-
code both entities and relations of KGs. These
methods often put more emphasis on the entity
embeddings, but do not explicitly utilize relation
embeddings to help with entity alignment. An-
other drawback of such approaches is that they
usually rely on pre-aligned relations (JAPE and
IPTransE) or triples (MTransE). This limits the
scale at which the model can be effectively per-
formed due to the overhead for constructing seed
alignments for large KGs. Alternative meth-
ods like GCN-based models, unfortunately, can-
not directly obtain relation representations, leav-
ing much room for improvement.

Recent studies have shown that jointly model-
ing entities and relations in a single framework can



241

improve tasks like information extraction (Miwa
and Bansal, 2016; Bekoulis et al., 2018). We hy-
pothesize that this will be the case for entity align-
ment too; that is, the rich relation information
could be useful for improving entity alignment as
entities and their relations are usually closely re-
lated. Our experiments show that this is even a
conservative target: by jointly learning entity and
relation representations, we can promote the re-
sults of both entity and relation alignment.

In this work, we aim to build a learning frame-
work that jointly learns entity and relation repre-
sentations for entity alignment; and we want to
achieve this with only a small set of pre-aligned
entities but not relations. Doing so will allow us
to utilize relation information to improve entity
alignment without paying extra cost for construct-
ing seed relation alignments.

Our work is enabled by the recent breakthrough
effectiveness of GCNs (Kipf and Welling, 2017) in
extracting useful representations from graph struc-
tures. Although GCNs provide a good starting
point, applying it to develop a practical and effi-
cient framework to accurately capture relation in-
formation across KGs is not trivial. Because a
vanilla GCN operates on the undirected and un-
labeled graphs, a GCN-based model like (Wang
et al., 2018b) would ignore the useful relation in-
formation of KGs. While the Relational Graph
Convolutional Network (R-GCN) (Schlichtkrull
et al., 2018) can model multi-relational graphs, ex-
isting R-GCNs use a weight matrix for each rela-
tion. This means that an R-GCN would require
an excessive set of parameters to model thousands
of relations in a typical real-world KG, making it
difficult to learn an effective model on large KGs.

A key challenge of our joint learning framework
is how to generate useful relation representations
at the absence of seed relation alignments, and to
ensure the framework can scale to a large number
of types of relations. We achieve this by first ap-
proximating the relation representations using en-
tity embeddings learned through a small amount
of seed entity alignments. We go further by con-
structing a new joint entity representation consist-
ing of both relation information and neighboring
structural information of an entity. The joint rep-
resentations allow us to iteratively improve the
model’s capability of generating better entity and
relation representations, which lead to not only
better entity alignment, but also more accurate re-

lation alignment as a by-product.
We evaluate our approach by applying it to three

real-world datasets. Experimental results show
that our approach delivers better and more robust
results when compared with state-of-the-art meth-
ods for entity and relation alignments. The key
contribution of this paper is a novel joint learning
model for entity and relation alignments. Our ap-
proach reduces the human involvement and the as-
sociated cost in constructing seed alignments, but
yields better performance over prior works.

2 Related Work

2.1 Entity Alignment

Until recently, entity alignment would require
intensive human participation (Vrandečić and
Krötzsch, 2014) to design hand-crafted features
(Mahdisoltani et al., 2013), rules, or rely on exter-
nal sources (Wang et al., 2017). In a broader con-
text, works in schema and ontology matching also
seek help from additional information by using
e.g., extra data sources (Nguyen et al., 2011), en-
tity descriptions (Lacoste-Julien et al., 2013; Yang
et al., 2015), or semantics of the web ontology
language (Hu et al., 2011). Performance of such
schemes is bounded by the quality and availability
of the extra information about the target KG, but
obtaining sufficiently good-quality annotated data
could be difficult for large KGs.

Recently, embedding-based entity alignment
methods were proposed to reduce human involve-
ment. JE (Hao et al., 2016) was among the first
attempts in this direction. It learns embeddings of
different KGs in a uniform vector space where en-
tity alignment can be performed. MTransE (Chen
et al., 2017) encodes KGs in independent em-
beddings and learns transformation between KGs.
BootEA (Sun et al., 2018) exploits a bootstrap-
ping process to learn KG embeddings. SEA (Pei
et al., 2019) proposes a degree-aware KG embed-
ding model to embed KGs. KDCoE (Chen et al.,
2018) is a semi-supervised learning approach for
co-training embeddings for multilingual KGs and
entity descriptions. They all use translation-based
models as the backbone to embed KGs.

Non-translational embedding-based methods
include recent works on a GCN-based model
(Wang et al., 2018b) and NTAM (Li et al., 2018).
Additionally, most recent work, RDGCN (Wu
et al., 2019), introduces the dual relation graph to
model the relation information of KGs. Through



242

multiple rounds of interactions between the primal
and dual graphs, RDGCN can effectively incorpo-
rate more complex relation information into entity
representations and achieve promising results for
entity alignment. However, existing methods only
focus on entity embeddings and ignore the help
that relation representations can provide on this
task.

MTransE and NTAM are two of a few meth-
ods that try to perform both relation and entity
alignments. However, both approaches require
high-quality seed alignments, such as pre-aligned
triples or relations, for relation alignment. Our ap-
proach advances prior works by jointly modeling
entities and relations by using only a small set of
pre-aligned entities (but not relations) to simulta-
neously perform entity and relation alignments.

2.2 Graph Convolutional Networks

GCNs (Duvenaud et al., 2015; Kearnes et al.,
2016; Kipf and Welling, 2017) are neural networks
operating on unlabeled graphs and inducing fea-
tures of nodes based on the structures of their
neighborhoods. Recently, GCNs have demon-
strated promising performance in tasks like node
classification (Kipf and Welling, 2017), relation
extraction (Zhang et al., 2018a), semantic role la-
beling (Marcheggiani and Titov, 2017), etc. As
an extension of GCNs, the R-GCNs (Schlichtkrull
et al., 2018) have recently been proposed to model
relational data for link prediction and entity classi-
fication. However, R-GCNs usually require a large
number of parameters that are often hard to train,
when applied to multi-relational graphs.

In this work, we choose to use GCNs to first
encode KG entities and to approximate relation
representations based on entity embeddings. Our
work is the first to utilize GCNs for jointly align-
ing entities and relations for heterogeneous KGs.

3 Problem Formulation

We now introduce the notations used in this paper
and define the scope of this work.

A KG is formalized as G = (E,R, T ), where
E,R, T are the sets of entities, relations and
triples, respectively. Let G1 = (E1, R1, T1) and
G2 = (E2, R2, T2) be two different KGs. Usu-
ally, some equivalent entities between KGs are
already known, defined as alignment seeds L =
{(ei1 , ei2)|ei1 ∈ E1, ei2 ∈ E2}.

We define the task of entity or relation align-

ment as automatically finding more equivalent en-
tities or relations based on known alignment seeds.
In our model, we only use known aligned entity
pairs as training data for both entity and relation
alignments. The process of relation alignment in
our framework is unsupervised, which does not
need pre-aligned relation pairs for training.

4 Our Approach

Given two target KGs, G1 and G2, and a set of
known aligned entity pairs L, our approach uses
GCNs (Kipf and Welling, 2017) with highway net-
work (Srivastava et al., 2015) gates to embed en-
tities of the two KGs and approximate relation se-
mantics based on entity representations. By link-
ing entity representations with relation representa-
tions, they promote each other in our framework
and ultimately achieve better alignment results.

4.1 Overall Architecture

As illustrated in Figure 1, our approach consists
of three stages: (1) preliminary entity alignment,
(2) approximating relation representations, and (3)
joint entity and relation alignment.

In the first stage, we utilize GCNs to embed en-
tities of various KGs in a unified vector space for
preliminary entity alignment. Next, we use the en-
tity embeddings to approximate relation represen-
tations which can be used to align relations across
KGs. In the third stage, we incorporate the rela-
tion representations into entity embeddings to ob-
tain the joint entity representations, and continue
using GCNs to iteratively integrate neighboring
structural information to achieve better entity and
relation representations.

4.2 Preliminary Entity Alignment

As shown in Figure 1, we put G1 and G2 in one
graph Ga = (Ea, Ra, Ta) to form our model’s in-
put. We utilize pre-aligned entity pairs to train our
model and then discover latent aligned entities.

Graph Convolutional Layers. Our entity
alignment model utilizes GCNs to embed en-
tities in Ga. Our model consists of multiple
stacked GCN layers so that it can incorporate
higher degree neighborhoods. The input for
GCN layer l is a node feature matrix, X(l) =
{x(l)1 ,x

(l)
2 , ...,x

(l)
n |x(l)i ∈ Rd

(l)}, where n is the
number of nodes (entities) of Ga, and d(l) is the
number of features in layer l. X(l) is updated us-



243

G1

G2

Ga

Highway 
GCN

Highway 
GCN

Entity 
Embeddings

Calculating 
Relation 

Representations

Relation 
Representations

Calculating Joint 
Entity Representations

Joint Entity 
Representations

Joint Loss 
highway 

gates

 Seed Entity 
Alignments

Newly 
Aligned 
Entity 
Pairs

Back Propagation (Joint) 

Preliminary Loss preL

jointL

1
r 2r

3
r 2r

1r

3r

4
r 5r

6
r

4r
5r

6r  Back Propagation (Pre.)

Preliminary 
Entity Alignment

Relation 
Alignment

Entity Alignment

Figure 1: Overall architecture of our model. The blue dotted lines denote the process of preliminary entity align-
ment and preliminary relation alignment using approximate relation representations, and the black solid lines
denote the process of continuing using GCNs to iteratively learn better entity and relation representations.

ing forward propagation as:

X(l+1) = ReLU(D̃−
1
2 ÃD̃−

1
2 X(l)W(l)), (1)

where Ã = A + I is the adjacency matrix of
Ga with self-connections, I is an identity matrix,
D̃jj =

∑
k Ãjk, and W

(l) ∈ Rd(l)×d(l+1) is a layer-
specific trainable weight matrix.

Inspired by (Rahimi et al., 2018) that uses high-
way gates (Srivastava et al., 2015) to control the
noise propagation in GCNs for geographic local-
ization, we also employ layer-wise highway gates
to build a Highway-GCN (HGCN) model. Our
layer-wise gates work as follow:

T (X(l)) = σ(X(l)W(l)T + b
(l)
T ), (2)

X(l+1) = T (X(l))·X(l+1)+(1−T (X(l)))·X(l) (3)

where X(l) is the input to layer l + 1; σ is a sig-
moid function; · is element-wise multiplication;
W(l)T and b

(l)
T are the weight matrix and bias vector

for the transform gate T (X(l)), respectively.
Alignment. In our work, entity alignment is
performed by simply measuring the distance be-
tween two entity nodes on their embedding space.
With the output entity representations X′ =
{x′1,x′2, ...,x′n|x′i ∈ Rd̃}, for entities e1 from G1
and e2 from G2, their distance is calculated as:

d(e1, e2) = ‖x′e1 − x
′
e2‖L1 . (4)

Training. We use a margin-based scoring func-
tion as the training objective, to make the distance

between aligned entity pairs to be as close as pos-
sible, and the distance between positive and nega-
tive alignment pairs to be as large as possible. The
loss function is defined as:

L =
∑

(p,q)∈L

∑
(p′,q′)∈L′

max{0, d(p, q)−d(p′, q′)+γ},

(5)
where γ > 0 is a margin hyper-parameter; L′
stands for the negative alignment set of L.

Rather than simply random sampling for nega-
tive instances, we look for more challenging neg-
ative samples, e.g., those with subtle differences
from the positive ones, to train our model. Given
a positive aligned pair (p, q), we choose the K-
nearest entities of p (or q) according to Eq. 4 in the
embedding space to replace q (or p) as the negative
instances.

4.3 Approximating Relation Representations

At this stage, we expect to obtain relation repre-
sentations, which can be used in the next stage for
constructing joint representations and can also be
used for preliminary relation alignment. Since we
are unable to explicitly modeling relations within
our GCN-based framework, we thus approximate
the relation representations based on their head
and tail entity representations produced by the
entity alignment model described in Section 4.2.
This strategy is based on our observation that the
statistical information of the head and tail entities
of a relation can more or less reflect the shallow
semantics of the relation itself, such as the head or
tail entities’ type requirements of a relation. Our



244

experiments in Section 6 suggest that this is a rea-
sonable assumption.

Given a relation r ∈ Ra, there is a set of triples
of r, Tr = {(hi, r, tj)|hi ∈ Hr, tj ∈ Tr}, where
Hr and Tr are the sets of head entities and tail en-
tities of relation r, respectively. For a relation r,
its representation can be approximated as:

r = f(Hr,Tr), (6)

where r is the approximated representation of re-
lation r. Hr and Tr are the sets of HGCN-output
embeddings of head entities and tail entities of re-
lation r. f(·) is a function to produce relation rep-
resentations with input entity vectors, which can
take many forms such as mean, adding, concate-
nation or more complex models. In our model,
we compute the relation representation for r by
first concatenating its averaged head and tail en-
tity representations, and then introducing a matrix
WR ∈ R2d̃×m as a learnable shared linear trans-
formation on relation vectors. Here, d̃ is the num-
ber of features in each HGCN-output entity em-
bedding and m is the number of features in each
relation representation.

With the relation representations in place, rela-
tion alignment can be performed by measuring the
similarity between two relation vectors. For rela-
tion r1 from G1 and r2 from G2, their similarity is
computed as:

s(r1, r2) = ‖r1−r2‖L1−β
|Pr1r2 |

|HTr1 ∪HTr2 |
, (7)

where r1 and r2 are the relation representations
for r1 and r2. In addition to calculating the dis-
tance between the two relation vectors, we believe
that the more aligned entities exist in the entities
that are connected to the two relations, the more
likely the two relations are equivalent. Thus, for
r1 and r2, we collect the pre-aligned entities exist-
ing in the head/tail entities of these two relations
as the set Pr1r2 = {(ei1 , ei2)|ei1 ∈ HTr1 , ei2 ∈
HTr2 , (ei1 , ei2) ∈ L}. HTr1 and HTr2 are the
sets of head/tail entities for relation r1 and r2 re-
spectively. β is a hyper-parameter for balance.

In our framework, relation alignment is ex-
plored in an unsupervised fashion, in which we do
not have any pre-aligned relations as training data.

4.4 Joint Entity and Relation Alignment
The first two stages of our approach could already
produce a set of entity and relation alignments, but

we do not stop here. Instead, we attentively fuse
the entity and relation representations and further
jointly optimize them using the seed entity align-
ments. Our key insight is that entity and rela-
tion alignment tasks are inherently closely related.
This is because aligned entities tend to have some
relations in common, and similar relations should
have similar categories of head and tail entities.

Specifically, we first pre-train the entity align-
ment model (Section 4.2) until its entity alignment
performance has converged to be stable. We as-
sume that both the pre-trained entity and approxi-
mate relation representations can provide rich in-
formation for themselves. Next, for each entity,
we aggregate the representations of its relevant re-
lations into a relation context vector, which is fur-
ther combined with its pre-trained entity represen-
tation to form a new joint entity representation.

Formally, for each entity e ∈ Ea, its new joint
representation ejoint can be calculated as:

ejoint = g(e,Re), (8)

where e is the HGCN-output representation of en-
tity e. Re is the set of relation representations of
e’s relevant relations. g(·) is a function to pro-
duce the new joint entity representation by taking
e and Re as input, which can also take many forms
of operations. In our model, we calculate ejoint
by first summing all relation representations in Re
and then concatenating e with the summed rela-
tion context vector.

After getting the new joint entity representa-
tions, Xjoint, we continue optimizing our model
against the seed entity alignments, where we use
the joint entity representations to calculate the
training loss according to Eq. 5 to continue up-
dating HGCNs1. Note that the joint entity repre-
sentations are composed of entity embeddings and
relation representations, while the relation repre-
sentations are also constructed based on the en-
tity embeddings. Hence, after backpropagation of
the loss calculated using the joint entity represen-
tations, we optimize the entity embeddings.

5 Experimental Setup

5.1 Datasets

We use DBP15K datasets from (Sun et al., 2017)
to evaluate our approach. DBP15K contains three

1The training procedure is detailed in Appendix A.



245

DBP15K #Ent. #Rel. #Rel tr. Alignments#Ent. #Rel.

ZH-EN ZH 66,469 2,830 153,929 1,5000 890EN 98,125 2,317 237,674

JA-EN JA 65,744 2,043 164,373 1,5000 529EN 95,680 2,096 233,319

FR-EN FR 66,858 1,379 192,191 1,5000 212EN 105,889 2,209 278,590

Table 1: Summary of the DBP15K datasets.

cross-lingual datasets that were built from the En-
glish version to Chinese, Japanese and French ver-
sions of DBpedia. Each contains data from two
KGs in different languages and provides 15K pre-
aligned entity pairs. Besides, each dataset also
provides some pre-aligned relations. We manually
aligned more relations from the three datasets and
removed the ambiguously aligned relation pairs to
construct the test sets for relation alignment. Ta-
ble 1 shows the statistics of the three datasets. We
stress that our approach achieves entity and rela-
tion alignments simultaneously using only a small
number of pre-aligned entities, and relation align-
ments are only used for testing. Following the pre-
vious works (Sun et al., 2017; Wang et al., 2018b;
Sun et al., 2018), we use 30% of the pre-aligned
entity pairs as training data and 70% for testing.
Our source code and datasets are freely available
online2.

5.2 Implementation Details

We set γ = 1, β = 20, and learning rate to
0.001. We sample K = 125 negative pairs every
50 epochs. We use entity names in different KGs
for better model initialization. We translate non-
English entity names to English via Google Trans-
late, and the entity features are initialized with pre-
trained English word vectors glove.840B.300d3

in our model. Note that Google Translate does
not always give accurate translations for named
entities. We inspected 100 English translations
for Japanese and Chinese entity names, and dis-
covered that around 20% of the translations are
wrong. The errors are mainly attributed to the
missing of titles/modifications and wrong interpre-
tations for person/location names. The inaccurate
translation poses further challenges for our model.

5.3 Competitive Approaches

Entity Alignment. For entity alignment, we com-
pare our approach against six embedding-based

2https://github.com/StephanieWyt/HGCN-JE-JR
3http://nlp.stanford.edu/projects/glove/

entity alignment methods discussed in Section 1:
JE (Hao et al., 2016), MTransE (Chen et al., 2017),
JAPE (Sun et al., 2017)4, IPTransE (Zhu et al.,
2017), BootEA (Sun et al., 2018) and GCN (Wang
et al., 2018b). Among those, BootEA is the best-
performing model on DBP15K.

Relation Alignment. For relation alignment, we
compare our approach with the state-of-the-art
BootEA (denoted by BootEA-R), and MTransE
(denoted by MTransE-R). Note that MTransE pro-
vides five implementation variants for its align-
ment model. To provide a fair comparison, we
choose the one that does not use pre-aligned re-
lations but gives the best performance for a triple-
wise alignment verification (Chen et al., 2017) - a
closely related task for relation alignment. Since
BootEA and MTransE are translation-based mod-
els that encode both entities and relations, re-
lation alignment can be done by measuring the
similarities between two relation representations.
Furthermore, to evaluate the effectiveness of our
proposed relation approximation method, we also
build BootEA-PR and MTransE-PR for relation
alignment according to Section 4.3.

5.4 Evaluation Methodology

Model Variants. To evaluate our design choices,
we provide different implementation variants with
the following denotations. HGCN is our base
GCN model with highway gates and entity name
initialization. It has several variants, described as
follows. HGCN-PE (Section 4.2) and HGCN-PR
(Section 4.3) are our preliminary models for en-
tity and relation alignments, respectively. HGCN-
JE and HGCN-JR are our complete models that
use joint representations to further improve en-
tity alignment and relation alignment (Section
4.4). Finally, GCN-PE and GCN-PR are the pre-
liminary GCN-based models for entity and re-
lation alignments respectively, which use entity
name initialization but no highway gates; GCN-JE
and GCN-JR are the corresponding joint learning
models; and GCN-JE-r is the randomly initialized
version of GCN-JE without entity name initializa-
tion.

4We note that (Sun et al., 2017) also provides analysis by
considering the outputs of a machine translator and JAPE,
and using a theoretically perfect oracle predictor to correctly
choose in between the results given by the machine transla-
tor and JAPE. As this only serves as an interesting up-bound
analysis, but does not reflect the capability of JAPE (because
it is impossible to build such a perfect predictor in the first
place), we do not compare to this oracle implementation.



246

Metrics. Like prior works (Sun et al., 2017; Wang
et al., 2018b; Sun et al., 2018), we use Hits@k as
our evaluation metric. A Hits@k score is com-
puted by measuring the proportion of correctly
aligned entities ranked in the top k list. Hence,
we prefer higher Hits@k scores that indicate bet-
ter performance.

6 Experiment Results

In this section, we first show that our com-
plete model consistently outperforms all alterna-
tive methods across datasets, metrics and align-
ment tasks. We then analyze the impact of prior
alignment data size on model performance, show-
ing that our approach requires significantly less
training data but achieves better performance over
the best-performing prior method. Finally, we use
a concrete example to discuss how jointly learned
entity and relation representations can be used to
improve both entity and relation alignments.

6.1 Entity Alignment

Table 2 reports the performance for entity align-
ment of all compared approaches. The top part
of the table shows the performance of prior ap-
proaches. By using a bootstrapping process to
expand the training data, BootEA clearly out-
performs all prior methods. By capturing the
rich neighboring structural information, GCN out-
performs all other translation-based models on
Hits@1, and over IPTransE, MTransE and JE on
Hits@10.

The bottom part of Table 2 shows how our pro-
posed techniques, i.e., entity name initialization,
joint embeddings and layer-wise highway gates,
can be used within a GCN framework to im-
prove entity alignment. After initialized with the
machine-translated entity names, GCN-PE con-
siderably improves GCN on all datasets. The im-
provement suggests that even rough translations
of entity names (see Section 5.2) can still pro-
vide important evidence for entity alignment and
finally boost the performance. By employing
layer-wise highway gates, HGCN-PE further im-
proves GCN-PE, giving a 34.31% improvement
on Hits@1 on DBP15KFR−EN , and also outper-
forms the strongest baseline BootEA. This sub-
stantial improvement indicates that highway gates
can effectively control the propagation of noisy
information. Our complete framework HGCN-
JE gives the best performance across all metrics

Models ZH-EN JA-EN FR-EN
Hits@1 Hits@10 Hits@1 Hits@10 Hits@1 Hits@10

JE 21.27 42.77 18.92 39.97 15.38 38.84
MTransE 30.83 61.41 27.86 57.45 24.41 55.55
JAPE 41.18 74.46 36.25 68.50 32.39 66.68
IPTransE 40.59 73.47 36.69 69.26 33.30 68.54
BootEA 62.94 84.75 62.23 85.39 65.30 87.44
GCN 41.25 74.38 39.91 74.46 37.29 74.49

GCN-JE-r 45.92 72.91 46.62 74.57 48.27 77.82
GCN-PE 50.70 79.23 53.01 82.83 54.42 84.65
GCN-JE 54.89 81.30 56.35 83.73 58.30 86.34
HGCN-PE 69.67 82.56 75.50 87.89 88.73 95.52
HGCN-JE 72.03 85.70 76.62 89.73 89.16 96.11

Table 2: Performance on entity alignment.

Models ZH-EN JA-EN FR-EN
Hits@1 Hits@10 Hits@1 Hits@10 Hits@1 Hits@10

MTransE-R 3.03 8.88 2.65 10.21 3.30 14.62
MTransE-PR 32.81 57.64 31.00 56.14 18.87 44.34
BootEA-R 55.17 70.00 47.83 67.67 36.79 58.49
BootEA-PR 45.28 85.37 41.40 79.77 30.19 60.38

GCN-PR 66.18 82.81 60.87 81.47 38.21 52.83
GCN-JR 70.22 82.81 63.89 81.10 41.98 53.77
HGCN-PR 69.33 84.49 63.14 81.26 41.51 54.25
HGCN-JR 70.34 85.39 65.03 83.55 42.45 56.60

Table 3: Performance on relation alignment.

and datasets. Comparing HGCN-JE with HGCN-
PE and GCN-JE with GCN-PE (2.36% and 4.19%
improvements of Hits@1 on DBP15KZH−EN re-
spectively), we observe that joining entity and
relation alignments improves the model perfor-
mance. Even without entity name initialization,
GCN-JE-r still has obvious advantages over JE,
MTransE, JAPE, IPTransE and GCN. The results
reinforce our claim that merging the relation infor-
mation into entities can produce better entity rep-
resentations. We stress that our proposed meth-
ods are not restricted to GCNs or HGCNs, but can
be flexibly integrated with other KG representa-
tion models as well.

6.2 Relation Alignment

Table 3 reports the results of relation alignment.
Directly using the relation embeddings learned by
MTransE to perform relation alignment leads to
rather poor performance for MTransE-R, less than
4% for Hits@1 for all datasets. This is because the
translation assumption, head + relation ≈ tail,
used by MTransE focuses on modeling the overall
relationship among heads, tails, and relations, but
capturing little neighboring information and rela-
tion semantics. After approximating the relation
representations using entity embeddings accord-
ing to Eq 6, MTransE-PR substantially improves
MTransE-R. This confirms our assumption that it
is feasible to approximate a relation using the in-



247

Figure 2: (a)-(c) report the performance for entity alignment of HGCN-JE and BootEA when they are trained with
different proportions of seed entity alignments on the three DBP15K datasets. (d)-(f) show the relation alignment
performance of HGCN-JR and BootEA-R under corresponding conditions. The x-axes are the proportions of seed
alignments, and the y-axes are Hits@1 scores.

formation of its head and tail entities.
The strong entity alignment model BootEA also

performs well for relation alignment. Using the re-
lation embeddings from BootEA, BootEA-R de-
livers the best Hits@1 in MTransE and BootEA
variants. Using our approximation strategy hurts
BootEA-R in Hits@1, but we see improvements
on Hits@10 across all datasets. This suggests that
our approximation method can bring more related
candidates, but may lack precision to select top-
ranked candidates, comparing to explicitly rela-
tion modeling in translation-based models.

Our framework, HGCN-JR, delivers the best re-
lation alignment results across datasets and met-
rics, except for Hits@10 on DBP15KFR−EN .
Like entity alignment, we also observe that join-
ing entity and relation alignments improves rela-
tion alignment, as evidenced by the better perfor-
mance of HGCN-JR and GCN-JR over HGCN-PR
and GCN-PR, respectively. That is, joint modeling
produces better entity representations, which in
turn provide better relation approximations. This
can promote the results of both alignment tasks.

6.3 Analysis

Impact of Available Seed Alignments. To ex-
plore the impact of the size of seed alignments on
our model, we compare our HGCN with BootEA
by varying the proportion of pre-aligned entities
from 10% to 40% with a step of 10%. Figure 2
(a-c) illustrate the Hits@1 for entity alignment of
HGCN-JE and BootEA on three datasets. As the

amount of seed alignments increases, the perfor-
mances of both models on all three data sets grad-
ually improve. HGCN-JE consistently obtains su-
perior results compared to BootEA, and seems to
be insensitive to the proportion of seed alignments.
For example, HGCN-JE still achieves 86.40% for
Hits@1 on DBP15KFR−EN when only using 10%
of training data. This Hits@1 score is 17.84%
higher than that of BootEA when BootEA uses
40% of seed alignments.

Figure 2 (d-f) show the Hits@1 for relation
alignment of HGCN-JR and BootEA-R. HGCN-
JR also consistently outperforms BootEA-R, and
gives more stable results with different ratios of
seed entity alignments. These results further con-
firm the robustness of our model, especially with
limited seed entity alignments.

Case Study. Figure 3 shows an example from
DBP15KFR−EN . In the stages of preliminary en-
tity alignment and relation alignment, our model
correctly predicts the aligned entity pair (v2, v5)
and relation pair (r2, r5). After examining the full
experimental data5, we find that the entities with
more neighbors, such as v2 and v5 (indicating Nor-
way), and the high-frequency relations, such as r2
and r5 (indicating country), are easier to align,
since such entities and relations have rich struc-
tural information that can be exploited by a GCN.
After jointly learning entity and relation represen-
tations, the extra neighboring relation information

5A more detailed analysis of our experimental results can
be found in Appendix B in the supplementary material.



248

pa
ys

[Gare_de_Hauketo]

[Norvège]

[Hauketo_Station]

co
un
try

[Norway][Ligne_d'Østfold]

lignes

[Østfold_Line]

line

ville

[Oslo] [Holmlia_Station]

pre
stat
ion

…… 

FRv ENv

1v 2v

3v

5v

6v

4v

1r 2r

3r

5r

6r

4r

…… 

Figure 3: A real-world example from
DBP15KFR−EN . [v2; v5] and [r2; r5] are re-
spectively the aligned entities and aligned relations
after performing preliminary entity and relation align-
ments. [vFR; vEN ] and [v1; v4] are the newly aligned
entity pairs, and r1 and r4 are the newly aligned
relations, which are discovered using jointly learned
entity and relation representations. Jointly optimizing
alignment tasks leads to the sucessful discovery of new
aligned relation and entity pairs.

(e.g., the aligned relations (r2, r5)) enables our
model to successfully align vFR and vEN . If we
keep updating the model to learn better entity and
relation representations, our alignment framework
can successfully uncover more entity and relation
alignments such as (v1, v4) and (r1, r4). This
shows that joint representations can improve both
entity and relation alignments.

7 Conclusions

This paper presents a novel framework for entity
alignment by jointly modeling entities and rela-
tions of KGs. Our approach does not require pre-
aligned relations as training data, yet it can simul-
taneously align entities and relations of heteroge-
neous KGs. We achieve this by employing gated
GCNs to automatically learn high-quality entity
and relation representations. As a departure from
prior work, our approach constructs joint entity
representations that contain both relation informa-
tion and entity information. We demonstrate that
the whole is greater than the sum of its parts, as
the joint representations allow our model to itera-
tively improve the learned representations for both
entities and relations. Extensive experiments on
three real-world datasets show that our approach
delivers better and more robust performance when
compared to state-of-the-art methods.

Acknowledgments

This work is supported in part by the Na-
tional Hi-Tech R&D Program of China (No.
2018YFB1005100), the NSFC Grants (No.
61672057, 61672058, 61872294), and a UK

Royal Society International Collaboration Grant
(IE161012). For any correspondence, please
contact Yansong Feng.

References
Giannis Bekoulis, Johannes Deleu, Thomas Demeester,

and Chris Develder. 2018. Adversarial training for
multi-context joint entity and relation extraction. In
Proceedings of the 2018 Conference on Empirical
Methods in Natural Language Processing, pages
2830–2836.

Antoine Bordes, Nicolas Usunier, Alberto Garcia-
Duran, Jason Weston, and Oksana Yakhnenko.
2013. Translating embeddings for modeling multi-
relational data. In Advances in neural information
processing systems, pages 2787–2795.

Muhao Chen, Yingtao Tian, Kai-Wei Chang, Steven
Skiena, and Carlo Zaniolo. 2018. Co-training em-
beddings of knowledge graphs and entity descrip-
tions for cross-lingual entity alignment. In Proceed-
ings of the Twenty-Seventh International Joint Con-
ference on Artificial Intelligence, IJCAI-18.

Muhao Chen, Yingtao Tian, Mohan Yang, and Carlo
Zaniolo. 2017. Multilingual knowledge graph em-
beddings for cross-lingual knowledge alignment. In
Proceedings of the 26th International Joint Confer-
ence on Artificial Intelligence (IJCAI).

David K Duvenaud, Dougal Maclaurin, Jorge Ipar-
raguirre, Rafael Bombarell, Timothy Hirzel, Alan
Aspuru-Guzik, and Ryan P Adams. 2015. Convolu-
tional networks on graphs for learning molecular fin-
gerprints. In Advances in Neural Information Pro-
cessing Systems 28, pages 2224–2232.

Yanchao Hao, Yuanzhe Zhang, Shizhu He, Kang Liu,
and Jian Zhao. 2016. A joint embedding method for
entity alignment of knowledge bases. In Proceed-
ings of China Conference on Knowledge Graph and
Semantic Computing (CCKS2016), pages 3–14.

Wei Hu, Jianfeng Chen, and Yuzhong Qu. 2011. A
self-training approach for resolving object corefer-
ence on the semantic web. In Proceedings of the
20th international conference on World wide web.

Steven Kearnes, Kevin Mccloskey, Marc Berndl, Vi-
jay Pande, and Patrick Riley. 2016. Molecular graph
convolutions: moving beyond fingerprints. Journal
of Computer-Aided Molecular Design, 30(8):1–14.

Thomas N. Kipf and Max Welling. 2017. Semi-
supervised classification with graph convolutional
networks. In International Conference on Learning
Representations (ICLR).

Simon Lacoste-Julien, Konstantina Palla, Alex Davies,
Gjergji Kasneci, Thore Graepel, and Zoubin
Ghahramani. 2013. Sigma: Simple greedy matching
for aligning large knowledge bases. In Proceedings



249

of the 19th ACM SIGKDD international conference
on Knowledge discovery and data mining.

Shengnan Li, Xin Li, Rui Ye, Mingzhong Wang, Haip-
ing Su, and Yingzi Ou. 2018. Non-translational
alignment for multi-relational networks. In Pro-
ceedings of the Twenty-Seventh International Joint
Conference on Artificial Intelligence, IJCAI-18,
pages 4180–4186.

Farzaneh Mahdisoltani, Joanna Biega, and Fabian M
Suchanek. 2013. Yago3: A knowledge base from
multilingual wikipedias. In CIDR.

Diego Marcheggiani and Ivan Titov. 2017. Encoding
sentences with graph convolutional networks for se-
mantic role labeling. In Proceedings of the 2017
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 1506–1515.

Makoto Miwa and Mohit Bansal. 2016. End-to-end
relation extraction using LSTMs on sequences and
tree structures. In Proceedings of the 54th Annual
Meeting of the Association for Computational Lin-
guistics, pages 1105–1116.

Thanh Nguyen, Viviane Moreira, Huong Nguyen, Hoa
Nguyen, and Juliana Freire. 2011. Multilingual
schema matching for wikipedia infoboxes. Proc.
VLDB Endow.

Shichao Pei, Lu Yu, Robert Hoehndorf, and Xiangliang
Zhang. 2019. Semi-supervised entity alignment via
knowledge graph embedding with awareness of de-
gree difference. In The World Wide Web Conference,
WWW ’19, pages 3130–3136.

Afshin Rahimi, Trevor Cohn, and Timothy Baldwin.
2018. Semi-supervised user geolocation via graph
convolutional networks. In Proceedings of the 56th
Annual Meeting of the Association for Computa-
tional Linguistics, pages 2009–2019.

Michael Schlichtkrull, Thomas N Kipf, Peter Bloem,
Rianne Van Den Berg, Ivan Titov, and Max Welling.
2018. Modeling relational data with graph convolu-
tional networks. In European Semantic Web Confer-
ence, pages 593–607.

Rupesh Kumar Srivastava, Klaus Greff, and Jürgen
Schmidhuber. 2015. Highway networks. arXiv
preprint arXiv:1505.00387.

Fabian M. Suchanek, Serge Abiteboul, and Pierre
Senellart. 2011. Paris: Probabilistic alignment of re-
lations, instances, and schema. Proc. VLDB Endow.,
5(3):157–168.

Zequn Sun, Wei Hu, and Chengkai Li. 2017.
Cross-lingual entity alignment via joint attribute-
preserving embedding. In International Semantic
Web Conference, pages 628–644.

Zequn Sun, Wei Hu, Qingheng Zhang, and Yuzhong
Qu. 2018. Bootstrapping entity alignment with
knowledge graph embedding. In Proceedings of the

Twenty-Seventh International Joint Conference on
Artificial Intelligence, IJCAI-18, pages 4396–4402.

Denny Vrandečić and Markus Krötzsch. 2014. Wiki-
data: A free collaborative knowledgebase. Commu-
nications of the ACM, 57:78–85.

Guanying Wang, Wen Zhang, Ruoxu Wang, Yalin
Zhou, Xi Chen, Wei Zhang, Hai Zhu, and Huajun
Chen. 2018a. Label-free distant supervision for re-
lation extraction via knowledge graph embedding.
In Proceedings of the 2018 Conference on Empiri-
cal Methods in Natural Language Processing, pages
2246–2255.

Xuepeng Wang, Kang Liu, Shizhu He, Shulin Liu,
Yuanzhe Zhang, and Jun Zhao. 2017. Multi-
source knowledge bases entity alignment by lever-
aging semantic tags. Chinese Journal of Computers,
40(3):701–711.

Zhichun Wang, Qingsong Lv, Xiaohan Lan, and
Yu Zhang. 2018b. Cross-lingual knowledge graph
alignment via graph convolutional networks. In Pro-
ceedings of the 2018 Conference on Empirical Meth-
ods in Natural Language Processing, pages 349–
357.

Yuting Wu, Xiao Liu, Yansong Feng, Zheng Wang, Rui
Yan, and Dongyan Zhao. 2019. Relation-aware en-
tity alignment for heterogeneous knowledge graphs.
In Proceedings of the Twenty-Eighth International
Joint Conference on Artificial Intelligence, IJCAI-
19, pages 5278–5284.

Bishan Yang and Tom Mitchell. 2017. Leveraging
knowledge bases in lstms for improving machine
reading. In Proceedings of the 55th Annual Meeting
of the Association for Computational Linguistics.

Yang Yang, Yizhou Sun, Jie Tang, Bo Ma, and Juanzi
Li. 2015. Entity matching across heterogeneous
sources. In Proceedings of the 21th ACM SIGKDD
International Conference on Knowledge Discovery
and Data Mining.

Yuhao Zhang, Peng Qi, and Christopher D. Man-
ning. 2018a. Graph convolution over pruned de-
pendency trees improves relation extraction. In Em-
pirical Methods in Natural Language Processing
(EMNLP).

Yuyu Zhang, Hanjun Dai, Zornitsa Kozareva, Alexan-
der J Smola, and Le Song. 2018b. Variational
reasoning for question answering with knowledge
graph. In Thirty-Second AAAI Conference on Ar-
tificial Intelligence.

Hao Zhu, Ruobing Xie, Zhiyuan Liu, and Maosong
Sun. 2017. Iterative entity alignment via joint
knowledge embeddings. In Proceedings of the
Twenty-Sixth International Joint Conference on Ar-
tificial Intelligence, IJCAI-17, pages 4258–4264.


