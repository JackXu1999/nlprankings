



















































Is Attention Interpretable?


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 2931–2951
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

2931

Is Attention Interpretable?

Sofia Serrano∗ Noah A. Smith∗†
∗Paul G. Allen School of Computer Science & Engineering,

University of Washington, Seattle, WA, USA
†Allen Institute for Artificial Intelligence, Seattle, WA, USA
{sofias6,nasmith}@cs.washington.edu

Abstract

Attention mechanisms have recently boosted
performance on a range of NLP tasks. Because
attention layers explicitly weight input compo-
nents’ representations, it is also often assumed
that attention can be used to identify informa-
tion that models found important (e.g., specific
contextualized word tokens). We test whether
that assumption holds by manipulating atten-
tion weights in already-trained text classifica-
tion models and analyzing the resulting differ-
ences in their predictions. While we observe
some ways in which higher attention weights
correlate with greater impact on model predic-
tions, we also find many ways in which this
does not hold, i.e., where gradient-based rank-
ings of attention weights better predict their ef-
fects than their magnitudes. We conclude that
while attention noisily predicts input compo-
nents’ overall importance to a model, it is by
no means a fail-safe indicator.1

1 Introduction

Interpretability is a pressing concern for many
current NLP models. As they become increas-
ingly complex and learn decision-making func-
tions from data, ensuring our ability to understand
why a particular decision occurred is critical.

Part of that development has been the incorpo-
ration of attention mechanisms (Bahdanau et al.,
2015) into models for a variety of tasks. For
many different problems—to name a few, ma-
chine translation (Luong et al., 2015), syntactic
parsing (Vinyals et al., 2015), reading comprehen-
sion (Hermann et al., 2015), and language model-
ing (Liu and Lapata, 2018)—incorporating atten-
tion mechanisms into models has proven benefi-
cial for performance. While there are many vari-
ants of attention (Vaswani et al., 2017), each for-

1Code is available at https://github.com/
serrano-s/attn-tests.

mulation consists of the same high-level goal: cal-
culating nonnegative weights for each input com-
ponent (e.g., word) that together sum to 1, multi-
plying those weights by their corresponding repre-
sentations, and summing the resulting vectors into
a single fixed-length representation.

Since attention calculates a distribution over in-
puts, prior work has used attention as a tool for in-
terpretation of model decisions (Wang et al., 2016;
Lee et al., 2017; Lin et al., 2017; Ghaeini et al.,
2018). The existence of so much work on visual-
izing attention weights is a testament to attention’s
popularity in this regard; to name just a few ex-
amples of these weights being examined to under-
stand a model, recent work has focused on goals
from explaining and debugging the current sys-
tem’s decision (Lee et al., 2017; Ding et al., 2017)
to distilling important traits of a dataset (Yang
et al., 2017; Habernal et al., 2018).

Despite this, existing work on interpretability
is only beginning to assess what computed atten-
tion weights actually communicate. In an indepen-
dent and contemporaneous study, Jain and Wallace
(2019) explore whether attention mechanisms can
identify the relative importance of inputs to the full
model, finding them to be highly inconsistent pre-
dictors. In this work, we apply a different analy-
sis based on intermediate representation erasure to
assess whether attention weights can instead be re-
lied upon to explain the relative importance of the
inputs to the attention layer itself. We find sim-
ilar cause for concern: attention weights are only
noisy predictors of even intermediate components’
importance, and should not be treated as justifica-
tion for a decision.

2 Testing for Informative Interpretability

We focus on five- and ten-class text classification
models incorporating attention, as explaining the

https://github.com/serrano-s/attn-tests
https://github.com/serrano-s/attn-tests


2932

Figure 1: Our method for calculating the importance
of representations corresponding to zeroed-out atten-
tion weights, in a hypothetical setting with four output
classes .

reasons for text classification has been a particular
area of interest for recent work in interpretability
(Yang et al., 2016; Ribeiro et al., 2016; Lei et al.,
2016; Feng et al., 2018).

In order for a model to be interpretable, it must
not only suggest explanations that make sense to
people, but also ensure that those explanations ac-
curately represent the true reasons for the model’s
decision. Note that this type of analysis does not
rely on the true labels of the data; if a model pro-
duces an incorrect output, but a faithful explana-
tion for which factors were important in that cal-
culation, we still consider it interpretable.

We take the implied explanation provided by vi-
sualizing attention weights to be a ranking of im-
portance of the attention layer’s input representa-
tions, which we denote I: if the attention allocated
to item i ∈ I is higher than that allocated to item
j ∈ I, then i is presumed “more important” than
j to the model’s output. In this work, we focus
on whether the attention weights’ suggested im-
portance ranking of I faithfully describes why the
model produced its output, echoing existing work
on explanation brittleness for other model compo-
nents (Ghorbani et al., 2017).

2.1 Intermediate Representation Erasure

We are interested in the impact of some contex-
tualized inputs to an attention layer, I ′ ⊂ I, on
the model’s output. To examine the importance
of I ′, we run the classification layer of the model
twice (Figure 1): once without any modification,
and once after renormalizing the attention distri-
bution with I ′’s attention weights zeroed out, sim-

ilar to other erasure-based work (Li et al., 2016;
Feng et al., 2018). We then observe the result-
ing effects on the model’s output. We erase at the
attention layer to isolate the effects of the atten-
tion layer from the encoder preceding it. Our rea-
soning behind renormalizing is to keep the output
document representation from artificially shrink-
ing closer to 0 in a way never encountered during
training, which could make subsequent measure-
ments unrepresentative of the model’s behavior in
spaces to which it does map inputs.

One point worth noting is the facet of inter-
pretability that our tests are designed to capture.
By examining only how well attention represents
the importance of intermediate quantities, which
may themselves already have changed uninter-
pretably from the model’s inputs, we are testing
for a relatively low level of interpretability. So
far, other work looking at attention has examined
whether attention suffices as a holistic explanation
for a model’s decision (Jain and Wallace, 2019),
which is a higher bar. We instead focus on the low-
est standard of interpretability that attention might
be expected to meet, ignoring prior model layers.

We denote the output distributions (over labels)
as p (the original) and qI′ (where we erase atten-
tion for I ′). The question now becomes how to op-
erationalize “importance” given p and qI′ . There
are many quantities that could arguably capture in-
formation about importance. We focus on two: the
Jensen-Shannon (JS) divergence between output
distributions p and qI′ , and whether the argmaxes
of p and qI′ differ, indicating a decision flip.

3 Data and Models

We investigate four model architectures on a topic
classification dataset (Yahoo Answers; Zhang
et al., 2015) and on three review ratings datasets:
IMDB (Diao et al., 2014),2 Yelp 2017,3 and Ama-
zon (Zhang et al., 2015). Statistics for each dataset
are listed in Table 1.

Our model architectures are inspired by the hi-
erarchical attention network (HAN; Yang et al.,
2016), a text classification model with two lay-
ers of attention, first to the word tokens in each
sentence and then to the resulting sentence repre-
sentations. The layer that classifies the document
representation is linear with a softmax at the end.

We conduct our tests on the softmax formula-
2downloaded from github.com/nihalb/JMARS
3from www.yelp.com/dataset_challenge

github.com/nihalb/JMARS
www.yelp.com/dataset_challenge


2933

Dataset Av. # Words (s.d.) Av. # Sents. (s.d.) # Train. + Dev. # Test # Classes
Yahoo Answers 104 (114) 6.2 (5.9) 1,400,000 50,000 10
IMDB 395 (259) 16.2 (10.7) 122,121 13,548 10
Amazon 73 (48) 4.3 (2.6) 3,000,000 650,000 5
Yelp 125 (109) 7.0 (5.6) 650,000 50,000 5

Table 1: Dataset statistics.

Figure 2: Flat attention network (FLAN) demonstrat-
ing a convolutional encoder. Each contextualized word
representation is the concatenation of two sizes of con-
volutions: one applied over the input representation
and its two neighbors to either side, and the other ap-
plied over the input representation and its single neigh-
bor to either side. For details, see Appendix A.1.

tion of attention,4 which is used by most models,
including the HAN. Specifically, we use the ad-
ditive formulation originally defined in Bahdanau
et al. (2015). Given attention layer `’s learned pa-
rameters, element i of a sequence, and its encoded
representation hi, the attention weight αi is com-
puted using `’s learned context vector c` as fol-
lows:

ui = tanh(W`hi + b`)

αi =
expu>i c`∑
i expu

>
i c`

We evaluate on the original HAN architecture, but
we also vary that architecture in two key ways:

1. Number of attention layers: besides explor-
ing models with a final layer of attention over
sentence representations (which we denote
with a “HAN” prefix), we also train “flat” at-
tention networks with only one layer of at-
tention over all contextualized word tokens

4Alternatives such as sparse attention (Martins and As-
tudillo, 2016) and unnormalized attention (Ji and Smith,
2017) have been proposed.

(which we denote with a “FLAN” prefix). In
either case, though, we only run tests on mod-
els’ final layer of attention.

2. Reach of encoder contextualization: The
original HAN uses recurrent encoders to con-
textualize input tokens prior to an attention
layer (specifically, bidirectional GRUs run-
ning over the full sequence). Aside from
biRNNs, we also experiment with models
that instead contextualize word vectors by
convolutions on only a token’s close neigh-
bors, inspired by Kim (2014). See Figure 2
for a diagram of the FLAN architecture using
a convolutional encoder. We denote this vari-
ant of an architecture with a “conv” suffix.
Finally, we also test models that are trained
with no contextualizing encoder at all; we de-
note these with a “noenc” suffix.

The classification accuracy of each of our trained
models is listed in Table 3 in the appendix, along
with training details for the different models.

4 Single Attention Weights’ Importance

As a starting point for our tests, we investigate the
relative importance of attention weights when only
one weight is removed. Let i∗ ∈ I be the compo-
nent with the highest attention and let αi∗ be its
attention. We compare i∗’s importance to some
other attended item’s importance in two ways.

4.1 JS Divergence of Model Output
Distributions

We wish to compare how i∗’s impact on the
model’s output distribution compares to the im-
pact corresponding to a random attended item r
drawn uniformly from I. Our first approach to this
will be to calculate two JS divergences—one being
the JS divergence of the model’s original output
distribution from its output distribution after re-
moving only i∗, and the other after removing only
r—and compare them to each other. We subtract



2934

the output JS divergence after removing r from the
output JS divergence after removing i∗:

∆JS = JS(p, q{i∗})− JS(p, q{r}) (1)

We plot this quantity against the difference ∆α =
αi∗−αr in Figure 3. We show results on the HAN-
rnn, as the trends for the other models are very
similar; see Figures 7–8 and the tables in Figure 9
in the Appendix for full results.

Figure 3: Difference in attention weight magnitudes
versus ∆JS for HANrnns, comparable to results for the
other architectures; for their plots, see Appendix A.2.

Figure 4: These are the counts of test instances for
the HANrnn models for which i∗’s JS divergence was
smaller, binned by ∆α. These counts comprise a small
fraction of the test set sizes listed in Table 1.

Intuitively, if i∗ is truly the most important, then
we would expect Eq. 1 to be positive, and that is
what we find the vast majority of the time. In ad-
dition, examining Figure 3, we see that nearly all

negative ∆JS values are close to 0. By binning oc-
currences of negative ∆JS values by the difference
between αi∗ and αr in Figure 4, we also see that
in the cases where i∗ had a smaller effect, the gap
between i∗’s attention and r’s tends to be small.
This is encouraging, indicating that in these cases,
i∗ and r are nearly “tied” in attention.

However, the picture of attention’s interpretabil-
ity grows somewhat more murky when we begin
to consider the magnitudes of positive ∆JS values
in Figure 3. We notice across datasets that even
for quite large differences in attention weights like
0.4, many of the positive ∆JS are still quite close
to zero. Although we do finally see an upward
swing in ∆JS values once ∆α gets even larger,
indicating only one very high attention weight in
the distribution, this still leaves many open ques-
tions about exactly how much difference in impact
i∗ and r can typically be expected to have.

4.2 Decision Flips Caused by Zeroing
Attention

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 0.5 8.7 Yes 2.2 12.2
No 1.3 89.6 No 1.4 84.2

Amazon Yelp
Yes No Yes No

Yes 2.7 7.6 Yes 1.5 8.9

R
em

ov
e
i∗

:D
ec

is
io

n
fli

p?

No 2.7 87.1 No 1.9 87.7

Table 2: Percent of test instances in each decision-flip
indicator variable category for each HANrnn.

Since attention weights are often interpreted as
an explanation for a model’s argmax decision, our
second test looks at another, more immediately
visible change in model outputs: decision flips.
For clarity, we limit our discussion to results for
the HANrnns, which reflect the same patterns ob-
served for the other architectures. (Results for all
other models are in Appendix A.2.)

Table 2 shows, for each dataset, a contingency
table for the two binary random variables (i) does
zeroing αi∗ (and renormalizing) result in a deci-
sion flip? and (ii) does doing the same for a dif-
ferent randomly chosen weight αr result in a de-
cision flip? To assess the comparative importance
of i∗ and r, we consider when exactly one era-
sure changes the decision (off-diagonal cells). For



2935

attention to be interpretable, the blue, upper-right
values (i∗, not r, flips a decision) should be much
larger than the orange, lower-left values (r, not i∗,
flips a decision), which should be close to zero.5

Although for some datasets in Table 2, the “or-
ange” values are non-negligible, we mostly see
that their fraction of total off-diagonal values mir-
rors the fraction of negative occurrences of Eq. 1
in Figure 4. However, it’s somewhat startling that
in the vast majority of cases, erasing i∗ does not
change the decision (“no” row of each table). This
is likely explained in part by the signal pertinent
to the classification being distributed across a doc-
ument (e.g., a “Sports” question in the Yahoo An-
swers dataset could signal “sports” in a few sen-
tences, any one of which suffices to correctly cate-
gorize it). However, given that these results are for
the HAN models, which typically compute atten-
tion over ten or fewer sentences, this is surprising.

Altogether, examining importance from a
single-weight angle paints a tentatively positive
picture of attention’s interpretability, but also
raises several questions about the many cases
where the difference in impacts between i∗ and r
is almost identical (i.e., ∆JS values close to 0 or
the many cases where neither i∗ nor r cause a de-
cision flip). To answer these questions, we require
tests with a broader scope.

5 Importance of Sets of Attention
Weights

Often, we care about determining the collective
importance of a set of components I ′. To address
that aspect of attention’s interpretability and close
gaps left by single-weight tests, we introduce tests
to determine how multiple attention weights per-
form together as importance predictors.

5.1 Multi-Weight Tests

For a hypothesized ranking of importance, such as
that implied by attention weights, we would ex-
pect the items at the top of that ranking to func-
tion as a concise explanation for the model’s deci-
sion. The less concise these explanations get, and
the farther down the ranking that the items truly
driving the model’s decision fall, the less likely it
becomes for that ranking to truly describe impor-
tance. In other words, we expect that the top items

5We see this pattern especially strongly for FLANs (see
Appendix), which is unsurprising since I is all words in the
input text, so most attention weights are very small.

in a truly useful ranking of importance would com-
prise a minimal necessary set of information for
making the model’s decision.

The idea of a minimal set of inputs necessary
to uphold a decision is not new; Li et al. (2016)
use reinforcement learning to attempt to construct
such a minimal set of words, Lei et al. (2016) train
an encoder to constrain the input prior to clas-
sification, and much of the work that has been
done on extractive summarization takes this con-
cept as a starting point (Lin and Bilmes, 2011).
However, such work has focused on approximat-
ing minimal sets, instead of evaluating the ability
of other importance-determining “shortcuts” (such
as attention weight orderings) to identify them.
Nguyen (2018) leveraged the idea of minimal sets
in a much more similar way to our work, compar-
ing different input importance orderings.

Concretely, to assess the validity of an impor-
tance ranking method (e.g., attention), we begin
erasing representations from the top of the rank-
ing downward until the model’s decision changes.
Ideally, we would then enumerate all possible
subsets of that instance’s components, observe
whether the model’s decision changed in response
to removing each subset, and then report whether
the size of the minimal decision-flipping subset
was equal to the number of items that had needed
to be removed to achieve a decision flip by follow-
ing the ranking. However, the exponential num-
ber of subsets for any given instance’s sequence of
components (word or sentence representations, in
our case) makes such a strategy computationally
prohibitive, and so we adopt a different approach.

Instead, in addition to our hypothesized impor-
tance ranking (attention weights), we consider al-
ternative rankings of importance; if, using those,
we repeatedly discover cases where removing a
smaller subset of items would have sufficed to
change the decision, this signals that our candidate
ranking is a poor indicator of importance.

5.2 Alternative Importance Rankings

Exhaustively searching the space of component
subsets would be far too time-consuming in prac-
tice, so we introduce three other ranking schemes.

The first is to randomly rank importance. We
expect that this ranking will perform quite poorly,
but it provides a point of comparison by which
to validate that ranking by descending attention
weights is at least somewhat informative.



2936

The second ranking scheme, inspired by Li et al.
(2015) and Feng et al. (2018), is to order the at-
tention weights by the gradient of the decision
function with respect to each calculated attention
weight, in descending order. Since each of the
datasets on which we evaluate has either five or
ten output classes, we take the decision function
given a real-valued model output vector to be

d(x) =
exp (maxi (xi))∑

i expxi
.

Unlike the last two proposed rankings, our third
ranking scheme uses attention weights, but sup-
plements them with information about the gradi-
ent. For this ranking, we multiply each of our
calculated gradients from our previous proposed
ranking scheme by their corresponding attention
weight magnitude. Under this ordering, attended
items that have both a high attention weight and
a high calculated gradient with respect to their at-
tention weight will be ranked most important.

We introduce these last two rankings as an at-
tempt to discover smaller sets not produced by the
attention weight ranking. Note, however, that we
still do not take either as a gold-standard indicator
of importance to the model, as with the gradient in
Ross et al. (2017) and Melis and Jaakkola (2018),
but merely as an alternative ordering method. The
“gold standard” in our case would be the minimal
set of attention weights to zero out for the decision
to change, which none of our ordering methods
will necessarily find for a particular instance.

5.3 Instances Excluded from Analysis

In cases where removing all but one input to the
attention layer still does not produce a decision
flip, we finish the process of removing compo-
nents by removing the final representation and re-
placing the output of the attention layer with an ar-
bitrary vector; we use the zero vector for our tests.
Even so, since every real-valued vector output by
the attention layer is mapped to an output distribu-
tion, removing this final item will still not change
the classification decision for instances that the
model happened to originally map to that same
class. We exclude such instances for which the
decision never changed from all subsequent anal-
yses.

We also set aside any test instances with a se-
quence length of 1 for their final attention layer, as
there is only one possible ordering for such cases.

5.4 Attention Does Not Optimally Describe
Model Decisions

Examining our results in Figure 5, we immediately
see that ranking importance by descending atten-
tion weights is not optimal for our models with
encoders. While removing intermediate represen-
tations in decreasing order by attention weights
often leads to a decision flip faster than a ran-
dom ranking, it also clearly falls short of match-
ing (or even approaching) the decision-flipping ef-
ficiency of either the gradient ordering or gradient-
attention-product ordering in many cases.

In addition, although the product-based ranking
often (but not always) requires slightly fewer re-
moved items than the gradient ranking, we see that
the purely gradient-based ranking ignoring atten-
tion magnitudes comes quite close to it, far outper-
forming purely attention-based orderings. For ten
of our 16 models with encoders, removing by gra-
dient found a smaller decision-flipping set of items
than attention for over 50% of instances in that
model’s test set, with that percentage often being
much higher. In fact, for every model with an en-
coder that we tested, there were at least 1.6 times
as many test instances where the purely gradient-
based ranking managed a decision flip faster than
the attention-based ranking than vice versa.

We do not claim that ranking importance by ei-
ther descending gradients or descending gradient-
attention products is optimal, but in many cases
they discover much smaller decision-flipping sets
of items than attention weights. Therefore, rank-
ing representations in descending order by atten-
tion weight clearly fails to uncover a minimal set
of decision-flipping information much of the time,
which is a warning sign that we should be skepti-
cal of trusting groups of attention weight magni-
tudes as importance indicators.

5.5 Decision Flips Often Occur Late

For all ordering schemes we tried, we were struck
by the large fraction of items that had to be re-
moved to achieve a decision flip in many models.
This is slightly less surprising for the HANs, as
they compute attention over shorter sequences of
sentences (see Table 1). For the FLAN models,
though, this result is highly unexpected. The se-
quences across which FLANs compute attention
are usually hundreds of tokens in length, meaning
most attention weights will likely be minuscule.

The distributions of tokens removed by our dif-



2937

Figure 5: The distribution of fractions of items removed before first decision flips on three model architectures
under different ranking schemes. Boxplot whiskers represent the highest/lowest data point within 1.5 IQR of the
higher/lower quartile, and dataset names at the bottom apply to their whole column. In several of the plots, the
median or lower quartile aren’t visible; in these cases, the median/lower quartile is either 1 or very close to 1.

ferent orderings that we see for the FLANrnns in
Figure 5 are therefore remarkably high, especially
given that all of our classification tasks have at
least five output classes. We also note that due
to the exponential nature of the softmax, softmax
attention distributions typically contain only a few
high-weighted items before the calculated weights
become quite small, which can be misleading. In
many cases, flipping the model’s original deci-
sion requires digging deep into the small attention
weights, with the high-weighted components not
actually being the reason for the decision.

For several of our models, especially the
FLANs (which typically compute attention over
hundreds of tokens), this fact is concerning from
an explainability perspective. Lipton (2016) de-
scribes a model as “transparent” if “a person can
contemplate the entire model at once.” Applying
this insight to the explanations suggested by at-
tention, if an explanation rests on simultaneously
considering hundreds of attended tokens necessary
for a decision– even if that set were minimal—that
would still raise serious transparency concerns.

5.6 Effects of Contextualization Scope on
Attention’s Interpretability

One last question we consider is whether the large
number of items that are removed before deci-
sion flips can be explained in part by the scope of
each model’s contextualization. In machine trans-
lation, prior work has observed that recurrent en-
coders over a full sequence can “shift” tokens’ sig-
nal in ways that cause subsequent attention lay-
ers to compute unintuitive off-by-one alignments
(Koehn and Knowles, 2017). We hypothesize that
in our text classification setting, the bidirectional
recurrent structure of the HANrnn and FLANrnn
encoders might instead be redistributing operative
signal from a few informative input tokens across
many others’ contextualized representations.

Comparing the decision flip results for the
FLANconvs in Figure 5 to those for the FLAN-
rnns supports this theory. We notice decision
flips happening much faster than for either of the
RNN-based model architectures, indicating that
the biRNN effectively does learn to widely redis-



2938

Figure 6: The distribution of fractions of items removed before decision flips on the encoderless model architec-
tures under different ranking schemes. The Amazon FLANnoenc results have a very long tail; using the legend’s
order of rankings, the percentage of test instances with a removed fraction above 0.50 for that model is 12.4%,
2.8%, 0.9%, and 0.5%, respectively.

tribute the classification signal. In contrast, the
convolutional encoders only allow contextualiza-
tion with respect to an input token’s two neighbors
to either side. We see similar results when compar-
ing the two HAN architectures, albeit much more
weakly (see Figure 10 in Appendix A.2); this is
likely due to the smaller number of tokens being
contextualized by the HANs (sentence representa-
tions instead of words), so that contextualization
with respect to a token’s close neighbors encom-
passes a much larger fraction of the full sequence.

We see this difference even more strongly when
we compare to the encoderless model architec-
tures, as shown in Figure 6. Compared to both
other model architectures, we see the fraction of
necessary items to erase for flipping the decision
plummet. We also see random orderings mostly do
better than before, indicating more brittle decision
boundaries, especially on the Amazon dataset.6 In
this situation, we see attention magnitudes gen-
erally indicate importance on par with (or better
than) gradients, but that the product-based order-

6This is likely due to the fact that with no contextualiza-
tion, the final attended representations are just a linear com-
bination of the input embeddings, so the embeddings them-
selves are responsible for learning to directly encode a deci-
sion. Since Amazon has the largest ratio of documents (which
probably vary in their label) to unique word embeddings by
a factor of more than two times any other dataset’s, and the
final attended representations in the FLANnoencs are unag-
gregated word embeddings, it stands to reason that the lack
of encoders would be a much bigger obstacle in its case.

ing is still often a more efficient explanation.
While these differences themselves are not

an argument against attention’s interpretability,
they highlight the distinction between attention’s
weighting of intermediate, contextualized repre-
sentations and the model’s use of the original input
tokens themselves. Our RNN-based models’ abil-
ity to maintain their original decision well past the
point at which models using only local or no con-
text have lost the signal driving their original de-
cisions confirms that attention weights for a con-
textualized representation do not necessarily map
neatly back to the original tokens. This might at
least partly explain the striking near-indifference
of the model’s decision to the contributions of
particular contextualized representations in both
our RNN-based models and in Jain and Wallace
(2019), who also use recurrent encoders.

However, the results from almost all models
continue to support that ranking importance by
attention is still not optimal; our non-random al-
ternative rankings still uncover many cases where
fewer items could be removed to achieve a deci-
sion flip than the attention weights imply.

6 Limitations

There are important limitations to the work we de-
scribe here, perhaps the most important of which is
our focus on text classification. By choosing to fo-



2939

cus on this task, we use the fact that decision flips
are often not trivially achieved to ground our judg-
ments of importance in model decision changes.
However, for a task with a much larger output
space (such as language modeling or machine
translation) where almost anything might flip the
decision, decision flips are likely too coarse a sig-
nal to identify meaningful differences. Determin-
ing an analogous informative threshold in changes
to model outputs would be key to expanding this
sort of analysis to other groups of models.

A related limitation is our reliance in many of
these tests on a fairly strict definition of impor-
tance tied to the output’s argmax; an alternative
definition of importance might assert that the high-
est attention weights should identify the most in-
fluential representations in pushing towards any
output class, not just the argmax. Two of the
core challenges that would need to be solved to
test for how well attention meets this relaxed cri-
terion would be meaningfully evaluating a sin-
gle attended item’s “importance” to multiple out-
put classes for comparison to other attended items
and, once again, determining what would truly in-
dicate being “most influential” in the absence of
decision flips as a guide to the output space.

Also, while we explore several model architec-
tures in this work, there exist other attention func-
tions such as multi-headed and scaled dot-product
(Vaswani et al., 2017), as well as cases where a
single attention layer is responsible for producing
more than one attended representation, such as in
self-attention (Cheng et al., 2016). These vari-
ants could have different interpretability proper-
ties. Likewise, we only evaluate on final layers of
attention here; in large models, lower-level layers
of attention might learn to work differently.

7 Related and Future Work

We have adopted an erasure-based approach to
probing the interpretability of computed attention
weights, but there are many other possible ap-
proaches. For example, recent work has focused
on which training instances (Koh and Liang, 2017)
or which human-interpretable features were most
relevant for a particular decision (Ribeiro et al.,
2016; Arras et al., 2016). Others have explored al-
ternative ways of comparing the behavior of pro-
posed explanation methods (Adebayo et al., 2018).
Yet another line of work focuses on aligning mod-
els with human feedback for what is interpretable

(Fyshe et al., 2015; Subramanian et al., 2017),
which could refine our idea of what defines a high-
quality explanation derived from attention.

Finally, another direction for future work would
be to extend the importance-ranking comparisons
that we deploy here for evaluation purposes into a
method for deriving better, more informative rank-
ings, which in turn could be useful for the devel-
opment of new, more interpretable models.

8 Conclusion

It is frequently assumed that attention is a tool
for interpreting a model, but we find that atten-
tion does not necessarily correspond to impor-
tance. In some ways, the two correlate: comparing
the highest attention weight to a lower weight, the
high attention weight’s impact on the model is of-
ten larger. However, the picture becomes bleaker
when we consider the many cases where the high-
est attention weights fail to have a large impact.
Examining these cases through multi-weight tests,
we see that attention weights often fail to iden-
tify the sets of representations most important to
the model’s final decision. Even in cases when
an attention-based importance ranking flips the
model’s decision faster than an alternative rank-
ing, the number of zeroed attended items is often
too large to be helpful as an explanation. We also
see a marked effect of the contextualization scope
preceding the attention layer on the number of at-
tended items affecting the model’s decision; while
attention magnitudes do seem more helpful in un-
contextualized cases, their lagging performance in
retrieving decision rationales elsewhere is cause
for concern. What is clear is that in the settings we
have examined, attention is not an optimal method
of identifying which attended elements are respon-
sible for an output. Attention may yet be inter-
pretable in other ways, but as an importance rank-
ing, it fails to explain model decisions.

Acknowledgments

This research was supported in part by a grant
from the Allstate Corporation; findings do not nec-
essarily represent the views of the sponsor. We
thank R. Andrew Kreek, Paul Koester, Kourtney
Traina, and Rebecca Jones for early conversa-
tions leading to this work. We also thank Omer
Levy, Jesse Dodge, Sarthak Jain, Byron Wallace,
and Dan Weld for helpful conversations, and our
anonymous reviewers for their feedback.



2940

References

Julius Adebayo, Justin Gilmer, Michael Muelly, Ian
Goodfellow, Moritz Hardt, and Been Kim. 2018.
Sanity checks for saliency maps. In Advances in
Neural Information Processing Systems.

Leila Arras, Franziska Horn, Grégoire Montavon,
Klaus-Robert Müller, and Wojciech Samek. 2016.
Explaining predictions of non-linear classifiers in
NLP. arXiv preprint arXiv:1606.07298.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In Proceedings of
the International Conference on Learning Represen-
tations.

Jianpeng Cheng, Li Dong, and Mirella Lapata. 2016.
Long short-term memory-networks for machine
reading. In Proceedings of the Conference on Em-
pirical Methods in Natural Language Processing.

Qiming Diao, Minghui Qiu, Chao-Yuan Wu, Alexan-
der J. Smola, Jing Jiang, and Chong Wang. 2014.
Jointly modeling aspects, ratings and sentiments for
movie recommendation (JMARS). In Proceedings
of the ACM SIGKDD International Conference on
Knowledge Ciscovery and Data mining.

Yanzhuo Ding, Yang Liu, Huanbo Luan, and Maosong
Sun. 2017. Visualizing and understanding neural
machine translation. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers).

Shi Feng, Eric Wallace, Alvin Grissom II, Mohit Iyyer,
Pedro Rodriguez, and Jordan Boyd-Graber. 2018.
Pathologies of neural models make interpretation
difficult. In Proceedings of the Conference on Em-
pirical Methods in Natural Language Processing.

Alona Fyshe, Leila Wehbe, Partha P. Talukdar, Brian
Murphy, and Tom M. Mitchell. 2015. A composi-
tional and interpretable semantic space. In Proceed-
ings of the Conference of the North American Chap-
ter of the Association for Computational Linguistics:
Human Language Technologies.

Reza Ghaeini, Xiaoli Z. Fern, and Prasad Tadepalli.
2018. Interpreting recurrent and attention-based
neural models: a case study on natural language in-
ference. arXiv preprint arXiv:1808.03894.

Amirata Ghorbani, Abubakar Abid, and James Zou.
2017. Interpretation of Neural Networks is Fragile.
arXiv preprint arXiv:1710.10547.

Ivan Habernal, Henning Wachsmuth, Iryna Gurevych,
and Benno Stein. 2018. Before Name-calling:
Dynamics and Triggers of Ad Hominem Fal-
lacies in Web Argumentation. arXiv preprint
arXiv:1802.06613.

Karl Moritz Hermann, Tomas Kocisky, Edward
Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su-
leyman, and Phil Blunsom. 2015. Teaching ma-
chines to read and comprehend. In Advances in Neu-
ral Information Processing Systems.

Sarthak Jain and Byron C. Wallace. 2019. Attention is
not Explanation. In Proceedings of the 2019 Con-
ference of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies, Volume 1 (Long and Short Pa-
pers).

Yangfeng Ji and Noah A. Smith. 2017. Neural dis-
course structure for text categorization. In Proceed-
ings of the Annual Meeting of the Association for
Computational Linguistics.

Yoon Kim. 2014. Convolutional neural networks for
sentence classification. In Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Philipp Koehn and Rebecca Knowles. 2017. Six chal-
lenges for neural machine translation. In Pro-
ceedings of the First Workshop on Neural Machine
Translation.

Pang Wei Koh and Percy Liang. 2017. Understanding
black-box predictions via influence functions. arXiv
preprint arXiv:1703.04730.

Jaesong Lee, Joong-Hwi Shin, and Jun-Seok Kim.
2017. Interactive Visualization and Manipulation
of Attention-based Neural Machine Translation. In
Proceedings of the 2017 Conference on Empirical
Methods in Natural Language Processing: System
Demonstrations, pages 121–126.

Tao Lei, Regina Barzilay, and Tommi Jaakkola. 2016.
Rationalizing neural predictions. In Proceedings of
the Conference on Empirical Methods in Natural
Language Processing.

Jiwei Li, Xinlei Chen, Eduard Hovy, and Dan Jurafsky.
2015. Visualizing and understanding neural models
in NLP. arXiv preprint arXiv:1506.01066.

Jiwei Li, Will Monroe, and Dan Jurafsky. 2016. Un-
derstanding neural networks through representation
erasure. arXiv preprint arXiv:1612.08220.

Hui Lin and Jeff Bilmes. 2011. A class of submodu-
lar functions for document summarization. In Pro-
ceedings of the Annual Meeting of the Association
for Computational Linguistics: Human Language
Technologies-Volume 1.

Zhouhan Lin, Minwei Feng, Cicero Nogueira dos San-
tos, Mo Yu, Bing Xiang, Bowen Zhou, and Yoshua
Bengio. 2017. A structured self-attentive sentence
embedding. arXiv preprint arXiv:1703.03130.

https://www.aclweb.org/anthology/N19-1357
https://www.aclweb.org/anthology/N19-1357


2941

Zachary C Lipton. 2016. The mythos of model inter-
pretability. arXiv preprint arXiv:1606.03490.

Yang Liu and Mirella Lapata. 2018. Learning struc-
tured text representations. Transactions of the Asso-
ciation of Computational Linguistics, 6:63–75.

Minh-Thang Luong, Hieu Pham, and Christopher D.
Manning. 2015. Effective approaches to attention-
based neural machine translation. arXiv preprint
arXiv:1508.04025.

André Martins and Ramón Astudillo. 2016. From soft-
max to sparsemax: A sparse model of attention and
multi-label classification. In International Confer-
ence on Machine Learning.

David Alvarez Melis and Tommi Jaakkola. 2018. To-
wards robust interpretability with self-explaining
neural networks. In Advances in Neural Information
Processing Systems.

Dong Nguyen. 2018. Comparing automatic and human
evaluation of local explanations for text classifica-
tion. In Proceedings of the Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
Volume 1 (Long Papers).

Marco Tulio Ribeiro, Sameer Singh, and Carlos
Guestrin. 2016. “Why should I trust you?”: Ex-
plaining the predictions of any classifier. In Pro-
ceedings of the ACM SIGKDD International Con-
ference on Knowledge Discovery and Data mining.

Andrew Slavin Ross, Michael C. Hughes, and Finale
Doshi-Velez. 2017. Right for the right reasons:
Training differentiable models by constraining their
explanations. In Proceedings of the International
Joint Conference on Artificial Intelligence.

Anant Subramanian, Danish Pruthi, Harsh Jhamtani,
Taylor Berg-Kirkpatrick, and Eduard Hovy. 2017.
SPINE: Sparse interpretable neural embeddings.
arXiv preprint arXiv:1711.08792.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N. Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems.

Oriol Vinyals, Łukasz Kaiser, Terry Koo, Slav Petrov,
Ilya Sutskever, and Geoffrey Hinton. 2015. Gram-
mar as a foreign language. In Advances in Neural
Information Processing Systems.

Yequan Wang, Minlie Huang, Li Zhao, et al. 2016.
Attention-based LSTM for aspect-level sentiment
classification. In Proceedings of the 2016 Confer-
ence on Empirical Methods in Natural Language
Processing, pages 606–615.

Fan Yang, Arjun Mukherjee, and Eduard Dragut. 2017.
Satirical news detection and analysis using attention
mechanism and linguistic features. arXiv preprint
arXiv:1709.01189.

Zichao Yang, Diyi Yang, Chris Dyer, Xiaodong He,
Alex Smola, and Eduard Hovy. 2016. Hierarchical
attention networks for document classification. In
Proceedings of the Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies.

Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015.
Character-level convolutional networks for text clas-
sification. In Advances in Neural Information Pro-
cessing Systems.



2942

A Appendices

A.1 Model Hyperparameters and
Performance

We lowercased all tokens during preprocessing
and used all hyperparameters specified in (Yang
et al., 2016), except for those related to the opti-
mization algorithm or, in the case of the convo-
lutional or no-encoder models, the encoder. For
each convolutional encoder, we trained two con-
volutions: one sweeping over five tokens, and one
sweeping over three. As the output representation
of token x, we then concatenated the outputs of the
five-token and three-token convolutions centered
on x. Unless otherwise noted, to train each model,
we used Adam (Kingma and Ba, 2014) with gra-
dient clipping of 10.0 and a patience value of 5,
so we would stop training a model if five epochs
elapsed without any improvement in validation set
accuracy. In addition, for each model, we speci-
fied a learning rate for training, and dropout be-
fore each encoder layer (or attention layer, for the
encoderless models) and also within the classifi-
cation layer. For the HAN models, these are the
values we used:

• Yahoo Answers HANrnn, Yahoo Answers
HANconv

– Pre-sentence-encoder dropout: 0.4445
– Pre-document-encoder dropout: 0.2202
– Classification layer dropout: 0.3749
– Learning rate: 0.0004

• IMDB HANrnn

– Pre-sentence-encoder dropout: 0.4445
– Pre-document-encoder dropout: 0.2202
– Classification layer dropout: 0.2457
– Learning rate: 0.0004

• Amazon HANrnn, Amazon HANconv

– Pre-sentence-encoder dropout: 0.6
– Pre-document-encoder dropout: 0.2
– Classification layer dropout: 0.4
– Learning rate: 0.0002

• Amazon HANnoenc

– Pre-sentence-encoder dropout: 0.6
– Pre-document-encoder dropout: 0.2
– Classification layer dropout: 0.4
– Learning rate: 0.0002

– Patience: 10

• Yelp HANrnn, Yelp HANconv

– Pre-sentence-encoder dropout: 0.7
– Pre-document-encoder dropout: 0.1
– Classification layer dropout: 0.7
– Learning rate: 0.0001

• Yelp HANnoenc

– Pre-sentence-encoder dropout: 0.7
– Pre-document-encoder dropout: 0.1
– Classification layer dropout: 0.7
– Learning rate: 0.0001
– Patience: 10

• Yahoo Answer HANnoenc

– Pre-sentence-encoder dropout: 0.4445
– Pre-document-encoder dropout: 0.2202
– Classification layer dropout: 0.3749
– Learning rate: 0.0004
– Patience: 10

• IMDB HANconv

– Pre-sentence-encoder dropout: 0.4445
– Pre-document-encoder dropout: 0.2202
– Classification layer dropout: 0.2457
– Learning rate: 0.0004

• IMDB HANnoenc

– Pre-sentence-encoder dropout: 0.4445
– Pre-document-encoder dropout: 0.2202
– Classification layer dropout: 0.2457
– Learning rate: 0.0004
– Patience: 10

For the FLAN models, these are the values we
used:

• Yahoo Answers FLANrnn, Yahoo Answers
FLANconv

– Pre-document-encoder dropout: 0.4445
– Classification layer dropout: 0.4457
– Learning rate: 0.0004

• IMDB FLANrnn, IMDB FLANconv

– Pre-document-encoder dropout: 0.4445
– Classification layer dropout: 0.3457
– Learning rate: 0.0004



2943

Dataset HANrnn HANconv HANnoenc FLANrnn FLANconv FLANnoenc
Yahoo Answers 74.6 72.8 73.1 75.5 73.1 72.3
IMDB 50.3 48.9 46.1 49.1 48.2 45.4
Amazon 56.9 55.3 51.2 56.6 54.4 50.2
Yelp 63.0 61.0 58.6 62.3 60.7 58.2

Table 3: Classification accuracy of the different trained models on their respective test sets

• Amazon FLANrnn, Amazon FLANconv

– Pre-document-encoder dropout: 0.6
– Classification layer dropout: 0.4
– Learning rate: 0.0002

• Amazon FLANnoenc

– Pre-document-encoder dropout: 0.6
– Classification layer dropout: 0.4
– Learning rate: 0.0002
– Patience: 10

• Yelp FLANrnn, Yelp FLANconv

– Pre-document-encoder dropout: 0.7
– Classification layer dropout: 0.7
– Learning rate: 0.0001

• Yelp FLANnoenc

– Pre-document-encoder dropout: 0.7
– Classification layer dropout: 0.7
– Learning rate: 0.0001
– Patience: 10

• Yahoo Answers FLANnoenc

– Pre-document-encoder dropout: 0.4445
– Classification layer dropout: 0.4457
– Learning rate: 0.0004
– Patience: 10

• IMDB FLANnoenc

– Pre-document-encoder dropout: 0.4445
– Classification layer dropout: 0.3457
– Learning rate: 0.0004
– Patience: 10

Trained model classification accuracies are re-
ported in Table 3. We note that our IMDB data and
Yelp data are different sets of reviews from those
used by Yang et al. (2016), so our reported per-
formances are not directly comparable to theirs.

We were unable to reach a comparable perfor-
mance for the Amazon dataset (and Yelp dataset,
although different) to that in (Yang et al., 2016).
We suspect that this is due to not pretraining
the word2vec embeddings used by the model for
long enough, combined with memory limitations
on our hardware that necessitated decreasing our
batch size in many cases. However, as noted in
section 3, the analysis that we perform does not
depend on model accuracy. It’s also worth noting
that for the datasets for which we are able to get
results that either pass or come close to the accura-
cies listed in the original HAN paper, the patterns
we see in the results for the tests that we run are
the same as the patterns that we see for the others.

A.2 Full Sets of Plots

Here we include the full sets of result plots for all
models for all tests we describe in the paper, in
order of appearance.

In Figure 7, we see that the majority of ∆JS
values continue to fall above 0, and that most
are still close to 0. One point not stated in the
paper, though, is that the upswing in ∆JS val-
ues as the difference between i∗’s weight and a
randomly chosen weight increases tends to occur
slightly earlier for models with less contextualiza-
tion, implying that the improving efficiency of the
attention-based ranking at flipping the decision as
contextualization scope shrinks is also reflected in
single-weight test results.

Looking at where negative ∆JS values tend to
occur in Figure 8, we once again see that they
tend to cluster around cases where the difference
between the highest and randomly chosen atten-
tion weights is close to 0. There are some ex-
ceptions, however; perhaps the most obvious are
the fat tails of these counts for the Yahoo Answer
HAN models. Considering the highest-attention-
weight ranking of importance for all Yahoo An-
swers HAN models in Figure 10 struggle in flip-
ping the decision quickly, it may be that attention
is less helpful than usual in identifying importance



2944

in its case, which could explain this discrepancy.
In Figure 9, we list contingency tables for all i∗-

versus-random single-weight decision-flip tests.
We continue to see higher values overall in our
blue cells than orange, as described in section
4.2. The most general change we notice across
all the tables is that in the encoderless case, there
are more test instances (often many more) where
at least one of i∗ or our random attended item
flipped the decision than for any other architec-
ture, except in the case of the Yahoo Answers
FLAN. Thinking about why this might be, we re-
call that in the encoderless case, word embeddings
are much more directly responsible for encoding a
decision. Yahoo Answers is our only topic classi-
fication dataset, where keywords like “computer”
or “basketball” might be much clearer indicators
of a topic than, say, “like” or “love” would be in-
dicators of a rating of 8 versus 9. This likely leads
to much less certain decisions being encoded in
the word embeddings of the non-Yahoo Answers
datasets. For all other models, and in the case
where potentially contradictory Yahoo Answers
word embeddings are blended together before the
final layer of attention (its HANnoenc), it is likely
that decisions are simply more brittle overall.

Finally, in Figure 10, we include the full set
of fraction-removed distributions for the first deci-
sion flips reached under the different rankings we
explored.

A.3 Additional Tests

Besides the tests we describe in the main paper,
some of the other tests that we ran provide addi-
tional insights into our results. We briefly describe
those here.

In Figure 11, we provide the distributions of
the original attention probability distributions that
were zeroed at the point when different ranking
schemes achieved their first decision flips. (Equiv-
alently, these are the distributions of the sums of
the zeroed attention weights described in Figure
10, only without repeated normalization.) We in-
clude these results to give a sense of which at-
tention magnitudes the different rankings typically
place towards the top. We notice that this proba-
bility mass required to change a decision is often
quite high, which is unsurprising for the attention-
based ranking, given that it frequently requires re-
moving many items to flip decisions and attention
distributions tend to have just a few high weights.

Besides that, the main takeaway that we see
here is that for most models, the distribution of at-
tention probability masses zeroed by our gradient-
based ranking or our product-based ranking is of-
ten shifted down by around 0.25 or more com-
pared to the corresponding attention probability
mass distribution for the attention-based ranking,
which is a fairly large difference. This would seem
to imply that these alternative rankings (which
usually flip decisions faster) tend to differ in rel-
atively substantial ways from the rankings sug-
gested by the pure attention weights, not just in
the long tail of their orderings, which is another
warning sign against attention’s interpretability.

The final set of tests that we include in Fig-
ures 12 and 13 consist of rerunning our single-
weight decision-flip tests on the single “most im-
portant” attention weights in their respective atten-
tion distributions as suggested by our alternative
rankings (gradient-based and product-based rank-
ings) instead of attention magnitudes. These re-
sults serve two functions: first, they imply still
more information about when the top weight sug-
gested by an alternative, faster-decision-flipping
ranking differs from the top attention weight. In-
tuitively, if we observe large differences between
the sum of the “yes” row for one contingency table
and the “yes” rows for the other rankings’ tables
on that same model, this is likely due to differ-
ences in the frequencies with which the highest-
ranked items achieve a decision flip, indicating
differences in highest-ranked items (“likely” be-
cause of the noise added by the random sampling).

The second piece of information that these tests
provide is a lower bound (via the sum of the “yes”
rows) for the number of cases where rankings flip
a decision as quickly as possible (i.e., in the first
item). For context, the sum of the “yes” row is
higher than the corresponding sum in Figure 9 for
all contingency tables using our product-based or-
dering. For the gradient-based ordering, however,
this sum is actually lower than for the attention-
based ranking’s tables in 14 out of our 24 models.
This tells us that our gradient-based method of-
ten finds fewer single-item ways of flipping deci-
sions than the attention-based ranking, so in order
to achieve its more efficient overall distribution of
flips that we see for many models in Figure 10,
it must usually flip decisions faster than attention
in cases where both its ranking and the attention-
based ranking require multiple removed weights.



2945

Figure 7: Differences in attention weight magnitude plotted against ∆JS for all datasets and architectures



2946

Figure 8: Counts of negatives ∆JS values grouped by the difference in their corresponding attention weights for
all datasets and architectures.



2947

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 0.5 8.7 Yes 2.2 12.2
No 1.3 89.6 No 1.4 84.2

Amazon Yelp
Yes No Yes No

Yes 2.7 7.6 Yes 1.5 8.9

R
em

ov
e
i∗

:D
ec

is
io

n
fli

p?

No 2.7 87.1 No 1.9 87.7

(a) HANrnns

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 0.3 9.0 Yes 0.1 14.5
No 0.3 90.3 No 0.1 85.3

Amazon Yelp
Yes No Yes No

Yes 0.6 7.3 Yes 0.3 8.0

R
em

ov
e
i∗

:D
ec

is
io

n
fli

p?

No 0.5 91.6 No 0.3 91.4

(b) FLANrnns

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 1.2 3.3 Yes 3.4 14.7
No 2.1 93.4 No 2.6 79.3

Amazon Yelp
Yes No Yes No

Yes 4.4 13.1 Yes 3.3 11.1

R
em

ov
e
i∗

:D
ec

is
io

n
fli

p?

No 5.4 77.0 No 4.0 81.6

(c) HANconvs

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 0.4 6.8 Yes 0.2 17.3
No 0.8 91.9 No 0.3 82.2

Amazon Yelp
Yes No Yes No

Yes 1.3 6.8 Yes 0.8 12.1

R
em

ov
e
i∗

:D
ec

is
io

n
fli

p?

No 1.6 90.2 No 0.7 86.3

(d) FLANconvs

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 2.5 18.2 Yes 6.7 34.7
No 3.7 75.7 No 3.2 55.4

Amazon Yelp
Yes No Yes No

Yes 13.8 25.8 Yes 8.4 18.0

R
em

ov
e
i∗

:D
ec

is
io

n
fli

p?

No 6.0 54.3 No 5.2 68.4

(e) HANnoencs

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 0.7 5.8 Yes 0.3 27.6
No 1.1 92.4 No 0.3 71.8

Amazon Yelp
Yes No Yes No

Yes 2.5 24.8 Yes 1.4 14.1

R
em

ov
e
i∗

:D
ec

is
io

n
fli

p?

No 1.6 71.0 No 1.3 83.2

(f) FLANnoencs

Figure 9: Using the definition of i∗ given in section 4 (the highest-attention-weight attended item) and comparing
to a different randomly selected attended item, these were the percentages of test instances that fell into each
decision-flip indicator variable category for each of the four test sets on all models. Since we require our random
item not to be i∗, we exclude any instances with a final sequence length of 1 (one sentence for the HANs, one word
for the FLANs) from analysis.



2948

Figure 10: Distribution of fraction of attention weights that had to be removed by different ranking schemes
to change each model architecture’s decisions for each of the four datasets. The different rankings (aside from
“Attention”, which corresponds to the attention weight magnitudes in descending order) are described in section
5.2.



2949

Figure 11: Distribution of probability masses that had to be removed by different ranking schemes to change each
model architecture’s decisions for each of the four datasets. While we do not discuss these in the paper due to space
constraints, we notice that in most cases, a high fraction of the original attention distribution’s probability mass
must be zeroed before the (renormalized) modified attended representation results in a changed decision using the
Attention ranking.



2950

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 1.6 7.9 Yes 2.8 13.7
No 0.2 90.3 No 0.6 82.9

Amazon Yelp
Yes No Yes No

Yes 4.9 10.2 Yes 3.0 10.0

R
em

ov
e
i∗ g

:D
ec

is
io

n
fli

p?

No 0.4 84.5 No 0.4 86.6

(a) HANrnns

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 0.5 7.2 Yes 0.1 10.9
No 0.2 92.2 No 0.1 88.9

Amazon Yelp
Yes No Yes No

Yes 0.9 7.1 Yes 0.4 7.4

R
em

ov
e
i∗ g

:D
ec

is
io

n
fli

p?

No 0.2 91.8 No 0.1 92.1

(b) FLANrnns

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 2.8 3.0 Yes 5.0 17.8
No 0.3 93.8 No 1.2 75.9

Amazon Yelp
Yes No Yes No

Yes 9.1 16.7 Yes 6.2 13.2

R
em

ov
e
i∗ g

:D
ec

is
io

n
fli

p?

No 0.8 73.5 No 1.0 79.6

(c) HANconvs

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 0.9 12.7 Yes 0.4 16.6
No 0.3 86.1 No 0.2 82.8

Amazon Yelp
Yes No Yes No

Yes 2.0 15.4 Yes 1.2 11.3

R
em

ov
e
i∗ g

:D
ec

is
io

n
fli

p?

No 1.0 81.6 No 0.4 87.2

(d) FLANconvs

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 5.3 15.7 Yes 7.4 30.5
No 0.8 78.2 No 2.9 59.3

Amazon Yelp
Yes No Yes No

Yes 18.1 32.0 Yes 11.8 26.2

R
em

ov
e
i∗ g

:D
ec

is
io

n
fli

p?

No 1.7 48.2 No 1.6 60.4

(e) HANnoencs

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 0.7 4.1 Yes 0.3 11.1
No 1.1 94.1 No 0.4 88.2

Amazon Yelp
Yes No Yes No

Yes 2.9 17.0 Yes 1.2 6.2

R
em

ov
e
i∗ g

:D
ec

is
io

n
fli

p?

No 1.2 78.8 No 1.4 91.2

(f) FLANnoencs

Figure 12: Let i∗g be the highest-ranked attended item using our purely gradient-based ranking of importance
described in section 5.2. We rerun our single-weight decision flip tests using this new i∗g , comparing to a different
randomly selected attended item. These were the percentages of test instances that fell into each decision-flip
indicator variable category for each of the four test sets on all models. Since we require our random item not to
be i∗g , we exclude any instances with a final sequence length of 1 (one sentence for the HANs, one word for the
FLANs) from analysis.



2951

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 1.3 9.5 Yes 2.9 15.5
No 0.5 88.7 No 0.6 81.0

Amazon Yelp
Yes No Yes No

Yes 4.5 10.5 Yes 2.7 11.3

R
em

ov
e
i∗ p

:D
ec

is
io

n
fli

p?

No 0.8 84.2 No 0.8 85.3

(a) HANrnns

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 0.6 13.2 Yes 0.2 18.3
No 0.0 86.2 No 0.1 81.5

Amazon Yelp
Yes No Yes No

Yes 0.9 10.5 Yes 0.4 10.6

R
em

ov
e
i∗ p

:D
ec

is
io

n
fli

p?

No 0.1 88.5 No 0.1 88.9

(b) FLANrnns

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 2.8 5.1 Yes 5.0 20.5
No 0.4 91.7 No 0.9 73.6

Amazon Yelp
Yes No Yes No

Yes 8.8 18.2 Yes 6.3 16.0

R
em

ov
e
i∗ p

:D
ec

is
io

n
fli

p?

No 1.0 72.0 No 0.8 76.9

(c) HANconvs

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 1.1 19.3 Yes 0.5 26.7
No 0.0 79.6 No 0.0 72.8

Amazon Yelp
Yes No Yes No

Yes 2.7 32.7 Yes 1.3 20.4

R
em

ov
e
i∗ p

:D
ec

is
io

n
fli

p?

No 0.2 64.3 No 0.2 78.1

(d) FLANconvs

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 5.6 23.1 Yes 9.2 42.9
No 0.6 70.7 No 0.8 47.1

Amazon Yelp
Yes No Yes No

Yes 18.4 33.9 Yes 11.9 27.8

R
em

ov
e
i∗ p

:D
ec

is
io

n
fli

p?

No 1.5 46.2 No 1.6 58.7

(e) HANnoencs

Remove random: Decision flip?
Yahoo IMDB

Yes No Yes No
Yes 1.8 19.4 Yes 0.6 36.2
No 0.0 78.8 No 0.1 63.1

Amazon Yelp
Yes No Yes No

Yes 3.8 35.9 Yes 2.3 26.3

R
em

ov
e
i∗ p

:D
ec

is
io

n
fli

p?

No 0.3 60.0 No 0.3 71.1

(f) FLANnoencs

Figure 13: Let i∗p be the highest-ranked attended item using our attention-gradient product ranking of importance
described in section 5.2. Once again, we rerun our single-weight decision flip tests using this new i∗p, comparing
to a different randomly selected attended item. These were the percentages of test instances that fell into each
decision-flip indicator variable category for each of the four test sets on all models. Since we require our random
item not to be i∗p, we exclude any instances with a final sequence length of 1 (one sentence for the HANs, one word
for the FLANs) from analysis.


