



















































Exact Hard Monotonic Attention for Character-Level Transduction


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 1530–1537
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

1530

Exact Hard Monotonic Attention for Character-Level Transduction

Shijie Wu@ and Ryan Cotterell@,H
@Department of Computer Science, Johns Hopkins University

HDepartment of Computer Science and Technology, University of Cambridge
shijie.wu@jhu.edu, rdc42@cam.ac.uk

Abstract

Many common character-level, string-to-
string transduction tasks, e.g. grapheme-
to-phoneme conversion and morphological
inflection, consist almost exclusively of
monotonic transduction. Neural sequence-to-
sequence models with soft attention, which
are non-monotonic, often outperform popular
monotonic models. In this work, we ask the
following question: Is monotonicity really
a helpful inductive bias in these tasks? We
develop a hard attention sequence-to-sequence
model that enforces strict monotonicity and
learns a latent alignment jointly while learning
to transduce. With the help of dynamic pro-
gramming, we are able to compute the exact
marginalization over all monotonic align-
ments. Our models achieve state-of-the-art
performance on morphological inflection. Fur-
thermore, we find strong performance on two
other character-level transduction tasks. Code
is available at https://github.com/
shijie-wu/neural-transducer.

1 Introduction

Many tasks in natural language can be treated as
character-level, string-to-string transduction. The
current dominant method is the neural sequence-
to-sequence model with soft attention (Bahdanau
et al., 2015; Luong et al., 2015). This method has
achieved state-of-the-art results in a plethora of
tasks, for example, grapheme-to-phoneme conver-
sion (Yao and Zweig, 2015), named-entity translit-
eration (Rosca and Breuel, 2016) and morpholog-
ical inflection generation (Cotterell et al., 2016).
While soft attention is very similar to a traditional
alignment between the source characters and tar-
get characters in some regards, it does not explic-
itly a distribution over alignments. On the other
hand, neural sequence-to-sequence models with
hard alignment (Xu et al., 2015; Wu et al., 2018)

are analogous to the latent alignment in the clas-
sic IBM models for machine translation, which do
model the alignment distribution explicitly (Brown
et al., 1993).

The standard versions of both soft and hard at-
tention are non-monotonic. However, if we look
at the data in grapheme-to-phoneme conversion,
named-entity transliteration, and morphological
inflection—examples are shown in Fig. 1—we see
that the tasks require almost exclusively monotonic
transduction. Yet, counterintuitively, the state of the
art in high resource morphological inflection is held
by non-monotonic models (Cotterell et al., 2017)!
Indeed, in a recent controlled experiment, Wu et al.
(2018) found non-monotonic models (with either
soft attention or hard alignment) outperform pop-
ular monotonic models (Aharoni and Goldberg,
2017) in the three above mentioned tasks. How-
ever, the inductive bias of monotonicity, if correct,
should help learn a better model or, at least, learn
the same model.

In this paper, we hypothesize that the underper-
formance of monotonic models stems from the lack
of joint training of the alignments with the trans-
duction. Generalizing the model of Wu et al. (2018)
to enforce monotonic alignments, we show that, for
all three tasks considered, monotonicity is a good
inductive bias and jointly learning a monotonic
alignment improves performance. We provide
an exact, cubic-time, dynamic-programming
inference algorithm to compute the log-likelihood
and an approximate greedy decoding scheme.
Empirically, our results indicate that, rather than
the pipeline systems of Aharoni and Goldberg
(2017) and Makarov et al. (2017), we should jointly
train monotonic alignments with the transduction
model, and, indeed, we set the single model state
of the art on the task of morphological inflection.1

1The state of the art for morphological inflection is held
by ensemble systems, much like parsing and other structured

https://github.com/shijie-wu/neural-transducer
https://github.com/shijie-wu/neural-transducer


1531

l i p u k e

Morphological Inflection

l i p u k k e e l l e

Transliteration

A A C H E N

Grapheme-to-phoneme

a c t i o n

AE K SH AH N

Task

Source

Target

N AT+ALL SGTag

Figure 1: Example of source and target string for each task. Tag guides transduction in morphological inflection.

2 Hard Attention

2.1 Preliminary
We assume the source string x ∈ Σ∗x and the
target string y ∈ Σ∗y have finite vocabularies
Σx = {x1, . . . , x|Σx|} and Σy = {y1, . . . , y|Σy|},
respectively. In tasks where the tag is provided, i.e.,
labeled transduction (Zhou and Neubig, 2017), we
denote the tag as an ordered set t ∈ Σ∗t with a finite
tag vocabulary Σt = {t1, . . . , t|Σt|}. We define the
set A = {1, . . . , |x|}|y| to be set of all alignments
from x to y where an alignment aligns each target
character yi to exactly one source character in x. In
other words, it allows zero-to-one2 or many-to-one
alignments between x and y. For an a ∈ A, ai = j
refers to the event that yi is aligned to xj , the ith

character of y and the jth character of x.

2.2 0th-order Hard Attention
Hard attention was first introduced to the literature
by Xu et al. (2015). We, however, follow Wu et al.
(2018) and use a tractable variant of hard attention
and model the probability of a target string y given
an input string x as the following:

p(y | x) =
∑

a∈A(x,y)

p(y,a | x)

=
∑
a∈A

|y|∏
i=1

p(yi | ai,y<i,x) p(ai | y<i,x)︸ ︷︷ ︸
exponential number of terms

=

|y|∏
i=1

|x|∑
ai=1

p(yi | ai,y<i,x) p(ai | y<i,x)︸ ︷︷ ︸
polynomial number of terms

(1)

where we show how one can rearrange the terms
to compute the function in polynomial time.

prediction tasks. We present the new best individual system.
2Zero in the sense of non-character like BOS or EOS

The model above is exactly an 0th-order neural-
ized hidden Markov model (HMM). Specifically,
p(yi | ai,y<i,x) can be regarded as an emission
distribution and p(ai | y<i,x) can be regarded as a
transition distribution, which does not condition on
the previous alignment. Hence, we will refer to this
model as 0th-order hard attention. The likelihood
can be computed in O(|x| · |y| · |Σy|) time.

2.3 1st-order Hard Attention

To enforce monotonicity, hard attention with
conditionally independent alignment decisions is
not enough: The model needs to know the previous
alignment position when determining the current
alignment position. Thus, we allow the transition
distribution to condition on previous one alignment
p(ai | ai−1,y<i,x) and it becomes a 1st-order
neuralized HMM. We display this model as a
graphical model in Fig. 2. We will refer to it as
1st-order hard attention. Generalizing the 0th-order
model, we define 1st-order extension as:

p(y | x) =
∑

a∈A(x,y)

p(y,a | x)

=
∑
a∈A

|y|∏
i=1

p(yi | ai,y<i,x) p(ai | ai−1,y<i,x)︸ ︷︷ ︸
exponential number of terms

=

|y|∏
i=1

|x|∑
ai−1=1

|x|∑
ai=1

p(yi | ai) p(ai | ai−1)α(ai−1)︸ ︷︷ ︸
polynomial number of terms

(2)

where α(ai−1) is the forward probability, calcu-
lated using the forward algorithm (Rabiner, 1989)
with α(a0,y0) = 1, and p(a1 | a0) = p(a1 |
<BOS>,x) is the initial alignment distribution. For
simplicity, we drop y<i and x in p(yi | ai) and
p(ai | ai−1). For completeness, we include the



1532

recursive definition of the forward probability:

α(ai) = p(yi | ai)
|x|∑

ai−1=1

p(ai | ai−1)α(ai−1)

α(a1) = p(y1 | a1) p(a1 | a0)α(a0)

Thus, computation of the likelihood in our 1st-order
hard attention model is O(|x|2 · |y| · |Σy|).

Decoding at test time, however, is hard and we
resort to a greedy scheme, described in Alg. 1. To
see why it is hard, note that the dependence on
y<i means that we have a neural language model
scoring the target string as it is being transduced.
Because the dependence is unbounded, there will
be no dynamic program that allows for efficient
computation.

3 A Neural Parameterization with
Enforced Monotonicity

The goal of this section is to take the 1st-order
model of §2 and show how we can straight-
forwardly enforce monotonic alignments. We will
achieve this by adding structural zeros to the dis-
tribution, which will still allow us to perform effi-
cient inference with dynamic programming. We
follow the neural parameterization of Wu et al.
(2018). The source string x is represented by a se-
quence of character embeddings vectors, which are
fed into an encoder bidirectional LSTM (Hochre-
iter and Schmidhuber, 1997) to produce hidden
state representations hej . The emission distribution
p(yi | ai,y<i,x) depends on these encodings hej
and the decoder hidden states hdi , produced by

hdi = LSTM([e
d(yi−1);h

t],hdi−1)

where ed encodes target characters into character
embeddings. The tag embedding ht is produced by

ht = ReLU(Y [et(t1); . . . ; et(t|Σt|)])

where et maps the tag tk into tag embedding htk ∈
Rdt or zero vector 0 ∈ Rdt , depends on whether
the tag tk is presented. Note that Y ∈ Rdt×|Σt| dt
is a learned parameter. Also hej ∈ R2dh , hdi ∈ Rdh
and ht ∈ Rdt are hidden states.

The Emission Distributon. All of our hard-
attention models employ the same emission dis-
tribution parameterization, which we define below

p(yi | ai,y<i,x) = softmax
(
Wf(hdi ,h

e
ai)
)

f(hdi ,h
e
ai) = tanh

(
V [hdi ;h

e
ai ]
)

x

a1 a2 a3 a4

hd1 h
d
2 h

d
3 h

d
4

y1 y2 y3 y4

Figure 2: Our monotonic hard-attention model viewed
as a graphical model. The circular nodes are random
variables and the diamond nodes deterministic vari-
ables. We have omitted arcs from x to y1, y2, y3 and
y4 for clarity (to avoid crossing arcs).

where V ∈ R3dh×3dh and W ∈ R|Σy|×3dh are
learned parameters.

0th-order Hard Attention. In the case of the 0th-
order model, the distribution is computed by a bi-
linear attention function with eq. (1)

p(ai = j | y<i,x) =
exp(hdi

>
Thej)∑|x|

j′=1 exp(h
d
i
>
Thej′)

where T ∈ Rdh×2dh is a learned parameter.

0th-order Hard Monotonic Attention. We may
enforce string monotonicity by zeroing out any
non-monotonic alignment without adding any ad-
ditional parameters, which can be done through
adding structural zeros to the distribution as follows

p(ai = j |ai−1 = j′,y<i,x) =

1{j ≥ j′} exp(hdi
>
Thej)∑|x|

j′=1 1{j ≥ j′} exp(hdi
>
Thej′)

These structural zeros prevent the alignments
from jumping backwards during transduction and,
thus, enforce monotonicity. The parameterization
is identical to the 0th-order model up to the
enforcement of the hard constraint with eq. (2).

1st-order Hard Monotonic Attention. We may
also generalize the 0th-order case by adding more
parameters. This will equip the model with a more
expressive transition function. In this case, we take



1533

Algorithm 1 Greedy decoding. (N is the maximum length of target string.)
1: for i = 1, · · · , N do
2: if i = 1 then
3: y∗i = argmaxyi

∑|x|
ai=1

p(yi | ai)p(ai | ai−1)α(a0) . Greedy decoding
4: α(a1) = p(y

∗
1 | a1) p(a1 | a0)α(a0) . Forward probability

5: else
6: y∗i = argmaxyi

∑|x|
ai=1

p(yi | ai)
∑|x|

ai−1=1
p(ai | ai−1)α(ai−1) . Greedy decoding

7: α(ai) = p(y
∗
i | ai)

∑|x|
ai−1=1

p(ai | ai−1)α(ai−1) . Forward probability

8: if y∗i = EOS then
9: returny∗

the 1st-order hard attention to be an offset-based
transition distribution similar to Wang et al. (2018):

p(ai | ai−1,y<i,x)

=

{
softmax(U[hdi ;Th

e
ai−1 ])) 0 ≤ ∆ ≤ w

0 otherwise

where ∆ = ai − ai−1 is relative distance to
previous attention position and U ∈ R(w+1)×2dh ,
a learned parameter. Note that, as before, we also
enforce monotonicity as a hard constraint in this
parameterization.

4 Related Work

There have been previous attempts to look at mono-
tonicity in neural transduction. Graves (2012) first
introduced the monotonic neural transducer for
speech recognition. Building on this, Yu et al.
(2016) proposes using a separated shift/emit
transition distribution to allow more expressive
model. Like us, they also consider morphological
inflection and outperform a (weaker) soft attention
baseline. Rastogi et al. (2016) offer a neural param-
eterization of a finite-state transducer, which im-
plicitly encodes monotonic alignments. Instead of
learning the alignments directly, Aharoni and Gold-
berg (2017) take the monotonic alignments from
an external model (Sudoh et al., 2013) and train
the neural model with these alignments. In follow-
up work, Makarov et al. (2017) show this two-
stage approach to be effective, winning the CoNLL-
SIGMORPHON 2017 shared task on morpholog-
ical inflection (Cotterell et al., 2017). Raffel et al.
(2017) propose a stochastic monotonic transition
process to allow sample-based online decoding.

5 Experiments

5.1 Experiments Design

Tasks. We consider three character-level trans-
duction tasks: grapheme-to-phoneme conversion
(Weide, 1998; Sejnowski and Rosenberg, 1987),
named-entity transliteration (Zhang et al., 2015)
and morphological inflection in high-esource set-
ting (Cotterell et al., 2017).

Empirical Comparison. We compare (i) soft at-
tention without input-feeding (SOFT) (Luong et al.,
2015), (ii) 0th-order hard attention (0-HARD) (Wu
et al., 2018), (iii) 0th-order monotonic hard atten-
tion (0-MONO) and (iv) 1st-order monotonic hard
attention (1-MONO). The SOFT, 0-HARD and 0-
MONO models have an identical number of param-
eters, but the 1-MONO has more. All of them have
approximately 8.6M parameters. Experimental de-
tails and hyperparameters may be found in App. A.

5.2 Experimental Findings

Finding #1: Morphological Inflection. The
first empirical finding in our study is that we
achieve single-model, state-of-the-art performance
on the CoNLL-SIGMORPHON 2017 shared task
dataset. The results are shown in Tab. 2. We find
that the 1-MONO ties with the 0-MONO system,
indicating the additional parameters do not add
much. Both of these monotonic systems surpass
the non-monotonic system 0-HARD and SOFT. We
also report comparison to other top systems at the
task in Tab. 1. The previous state-of-the-art model,
Bergmanis et al. (2017), is a non-monotonic sys-
tem that outperformed the monotonic system of
Makarov et al. (2017). However, Makarov et al.
(2017) is a pipeline system that took alignments
from an existing aligner; such a system has no
manner, by which it can recover from poor initial



1534

Morphological Inflection ACC

Silfverberg et al. (2017) 93.0
SOFT 93.4
Makarov et al. (2017) 93.9
0-HARD 94.5
Bergmanis et al. (2017) 94.6
Makarov and Clematide (2018) 94.6
0-MONO 94.8
1-MONO 94.8

Table 1: Average dev performance on morphological in-
flection of our models against single models from the
2017 shared task. All systems are single model, i.e.,
without ensembling. Why dev? No participants submit-
ted single-model systems for evaluation on test and the
best systems were not open-sourced, constraining our
comparison. Note we report numbers from their paper.3

alignment. We show that jointly learning mono-
tonic alignments lead to improved results.

Finding #2: Effect of Strict Monotonicity. The
second finding is that by comparing SOFT, 0-HARD,
0-MONO in Tab. 2, we observe 0-MONO outper-
forms 0-HARD and 0-HARD in turns outperforms
SOFT in all three tasks. This shows that monotonic-
ity should be enforced strictly since strict mono-
tonicity does not hurt the model. We contrast this to
the findings of Wu et al. (2018), who found the non-
monotonic models outperform the monotonic ones;
this suggests strict monotonicity is more helpful
when the model is allowed to learn the alignment
distribution jointly.

Finding #3: Do Additional Parameters Help?
The third finding is that 1-MONO has a more expres-
sive transition distribution and, thus, outperforms
0-MONO and 0-HARD in G2P. However, it per-
forms as well as or worse on the other tasks. This
tells us that the additional parameters are not al-
ways necessary for improved performance. Rather,
it is the hard constraint that matters—not the more
expressive distribution. However, we remark that
enforcing the monotonic constraint does come at an
additional computational cost: an additional factor
O(|x|).

6 Conclusion

We expand the hard-attention neural sequence-
to-sequence model of Wu et al. (2018) to en-
force monotonicity. We show, empirically, that en-
forcing monotonicity in the alignments found by

3Some numbers are obtained by contacting authors.

Trans G2P MorInf

ACC MFS WER PER ACC MLD

SOFT 40.4 0.893 29.3 0.071 92.9 0.157
0-HARD 41.1? 0.894 29.2? 0.070 93.8? 0.126
0-MONO 41.2? 0.895 29.0?× 0.072 94.4?× 0.113

1-MONO 40.8 0.893 28.2?×† 0.069 94.4?× 0.116

Table 2: Average test performance of namded-entity
transliteration (Trans), grapheme-to-phoneme conver-
sion (G2P) and morphological inflection (MorInf).
First group has exactly same number of parameter
while the second group has slightly more parameter.
?, × and † indicate statistical significant improvement
against SOFT, 0-HARD and 0-MONO on language-level
paired permutation test (p < 0.05).

hard attention models helps significantly, and we
achieve state-of-the-art performance on the mor-
phological inflection using data from the CoNLL-
SIGMORPHON 2017 shared task. We isolate the
effect of monotonicity in a controlled experiment
and show monotonicity is a useful hard constraint
for three tasks, and speculate previous underperfor-
mance is due to a lack of joint training.

Acknowledgments

The final author acknowledges a Facebook Fellow-
ship.

References
Roee Aharoni and Yoav Goldberg. 2017. Morphologi-

cal inflection generation with hard monotonic atten-
tion. In Proceedings of the 55th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers), pages 2004–2015, Vancouver,
Canada. Association for Computational Linguistics.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In International Con-
ference on Learning Representations (ICLR), vol-
ume abs/1409.0473.

Toms Bergmanis, Katharina Kann, Hinrich Schütze,
and Sharon Goldwater. 2017. Training data aug-
mentation for low-resource morphological inflection.
In Proceedings of the CoNLL SIGMORPHON 2017
Shared Task: Universal Morphological Reinflection,
pages 31–39, Vancouver. Association for Computa-
tional Linguistics.

Peter F. Brown, Vincent J. Della Pietra, Stephen
A. Della Pietra, and Robert L. Mercer. 1993. The
mathematics of statistical machine translation: Pa-
rameter estimation. Computational Linguistics,
19(2):263–311.

http://aclweb.org/anthology/P17-1183
http://aclweb.org/anthology/P17-1183
http://aclweb.org/anthology/P17-1183
https://arxiv.org/abs/1409.0473
https://arxiv.org/abs/1409.0473
http://www.aclweb.org/anthology/K17-2002
http://www.aclweb.org/anthology/K17-2002


1535

Ryan Cotterell, Christo Kirov, John Sylak-Glassman,
Géraldine Walther, Ekaterina Vylomova, Patrick
Xia, Manaal Faruqui, Sandra Kübler, David
Yarowsky, Jason Eisner, and Mans Hulden. 2017.
The CoNLL-SIGMORPHON 2017 shared task: Uni-
versal morphological reinflection in 52 languages.
In Proceedings of the CoNLL-SIGMORPHON 2017
Shared Task: Universal Morphological Reinflection,
Vancouver, Canada. Association for Computational
Linguistics.

Ryan Cotterell, Christo Kirov, John Sylak-Glassman,
David Yarowsky, Jason Eisner, and Mans Hulden.
2016. The SIGMORPHON 2016 shared task—
morphological reinflection. In Proceedings of the
14th SIGMORPHON Workshop on Computational
Research in Phonetics, Phonology, and Morphology,
pages 10–22. Association for Computational Lin-
guistics.

Alex Graves. 2012. Sequence transduction with
recurrent neural networks. arXiv preprint
arXiv:1211.3711.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Neu-
ral Computation, 9(8):1735–1780.

Diederick P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In International
Conference on Learning Representations (ICLR).

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1412–1421, Lis-
bon, Portugal. Association for Computational Lin-
guistics.

Peter Makarov and Simon Clematide. 2018. Imita-
tion learning for neural morphological string trans-
duction. In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Processing,
pages 2877–2882.

Peter Makarov, Tatiana Ruzsics, and Simon Clematide.
2017. Align and copy: UZH at SIGMORPHON
2017 shared task for morphological reinflection.
Proceedings of the CoNLL SIGMORPHON 2017
Shared Task: Universal Morphological Reinflection,
pages 49–57.

Lawrence R. Rabiner. 1989. A tutorial on hidden
Markov models and selected applications in speech
recognition. Proceedings of the IEEE, 77(2):257–
286.

Colin Raffel, Minh-Thang Luong, Peter J. Liu, Ron J.
Weiss, and Douglas Eck. 2017. Online and linear-
time attention by enforcing monotonic alignments.
In International Conference on Machine Learning
(ICML), pages 2837–2846.

Pushpendre Rastogi, Ryan Cotterell, and Jason Eisner.
2016. Weighting finite-state transductions with neu-
ral context. In Proceedings of the 2016 Confer-
ence of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies, pages 623–633, San Diego, Cal-
ifornia. Association for Computational Linguistics.

Mihaela Rosca and Thomas Breuel. 2016. Sequence-
to-sequence neural network models for translitera-
tion. arXiv preprint arXiv:1610.09565.

Terrence J. Sejnowski and Charles R. Rosenberg. 1987.
Parallel networks that learn to pronounce english
text. Complex Systems, 1.

Miikka Silfverberg, Adam Wiemerslage, Ling Liu, and
Lingshuang Jack Mao. 2017. Data augmentation for
morphological reinflection. In Proceedings of the
CoNLL SIGMORPHON 2017 Shared Task: Univer-
sal Morphological Reinflection, pages 90–99, Van-
couver. Association for Computational Linguistics.

Katsuhito Sudoh, Shinsuke Mori, and Masaaki Nagata.
2013. Noise-aware character alignment for boot-
strapping statistical machine transliteration from
bilingual corpora. In Proceedings of the 2013 Con-
ference on Empirical Methods in Natural Language
Processing, pages 204–209.

Weiyue Wang, Derui Zhu, Tamer Alkhouli, Zixuan
Gan, and Hermann Ney. 2018. Neural hidden
Markov model for machine translation. In Proceed-
ings of the 56th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers), pages 377–382. Association for Computa-
tional Linguistics.

R.L. Weide. 1998. The Carnegie Mellon pronouncing
dictionary.

Shijie Wu, Pamela Shapiro, and Ryan Cotterell. 2018.
Hard non-monotonic attention for character-level
transduction. In Proceedings of the 2018 Confer-
ence on Empirical Methods in Natural Language
Processing, pages 4425–4438. Association for Com-
putational Linguistics.

Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun
Cho, Aaron C. Courville, Ruslan Salakhutdinov,
Richard S. Zemel, and Yoshua Bengio. 2015. Show,
attend and tell: Neural image caption generation
with visual attention. In Proceedings of the
32nd International Conference on Machine Learn-
ing, ICML, pages 2048–2057.

Kaisheng Yao and Geoffrey Zweig. 2015. Sequence-
to-sequence neural net models for grapheme-to-
phoneme conversion. In INTERSPEECH 2015,
pages 3330–3334, Dresden, Germany.

Lei Yu, Jan Buys, and Phil Blunsom. 2016. Online seg-
ment to segment neural transduction. In Proceed-
ings of the 2016 Conference on Empirical Methods
in Natural Language Processing, pages 1307–1316.

https://doi.org/10.18653/v1/W16-2002
https://doi.org/10.18653/v1/W16-2002
http://aclweb.org/anthology/D15-1166
http://aclweb.org/anthology/D15-1166
http://www.aclweb.org/anthology/N16-1076
http://www.aclweb.org/anthology/N16-1076
http://www.aclweb.org/anthology/K17-2010
http://www.aclweb.org/anthology/K17-2010
http://aclweb.org/anthology/P18-2060
http://aclweb.org/anthology/P18-2060
http://www.speech.cs.cmu.edu/cgi-bin/cmudict
http://www.speech.cs.cmu.edu/cgi-bin/cmudict
http://aclweb.org/anthology/D18-1473
http://aclweb.org/anthology/D18-1473
http://jmlr.org/proceedings/papers/v37/xuc15.html
http://jmlr.org/proceedings/papers/v37/xuc15.html
http://jmlr.org/proceedings/papers/v37/xuc15.html
http://www.isca-speech.org/archive/interspeech_2015/i15_3330.html
http://www.isca-speech.org/archive/interspeech_2015/i15_3330.html
http://www.isca-speech.org/archive/interspeech_2015/i15_3330.html


1536

Min Zhang, Haizhou Li, Rafael E. Banchs, and A. Ku-
maran. 2015. Whitepaper of news 2015 shared task
on machine transliteration. In NEWS@ACL.

Chunting Zhou and Graham Neubig. 2017. Multi-
space variational encoder-decoders for semi-
supervised labeled sequence transduction. In
Proceedings of the 55th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), pages 310–320, Vancouver, Canada.
Association for Computational Linguistics.

http://aclweb.org/anthology/P17-1029
http://aclweb.org/anthology/P17-1029
http://aclweb.org/anthology/P17-1029


1537

A Experimental Details

A.1 Tasks.
We ask the authors of Wu et al. (2018) for the split
data of grapheme-to-phoneme conversion (CMU-
Dict (Weide, 1998) and NetTalk (Sejnowski and
Rosenberg, 1987)) and NEWS 2015 shared task
on named-entity transliteration. In named-entity
transliteration, we only run experiments on 11 lan-
guage pairs.4

Grapheme-to-Phoneme Conversion is evaluated
by word error rate (WER) and phoneme error rate
(PER) (Yao and Zweig, 2015), where PER is the
edit distance divided by the length of the phonemes.
Named-entity transliteration is evaluated by word
accuracy (ACC) and mean F-score (MFS) (Zhang
et al., 2015). F-score is computed by

LCS(c, r) =
1

2
(|c|+ |r| − ED(c, r))

Ri =
LCS(ci, ri)
|ri|

Pi =
LCS(ci, ri)
|ci|

FSi = 2
Ri × Pi
Ri + Pi

where ri and ci is the i-th reference and prediction
and ED(c, r) is the edit distance between c and
r. Morphological inflection is evaluated by word
accuracy (ACC) and average edit distance (MLD)
(Cotterell et al., 2017).

A.2 Parameterization.
For completeness, we also include the parameteri-
zation of soft attention.

p(yi | y<i,x) = softmax
(
Wf(hdi , ci)

)
ci =

|x|∑
j=1

αij h
e
j

αij =
exp(eij)∑|x|
j=1 exp(eij)

eij = h
d
i
>
Thej

The dimension of character and tag embedding
are 200 and 40, respectively. The encoder and de-
coder LSTM both have 400 hidden dimensions
(dh). We also have a 2 layer encoder LSTM. We
have 0.4 dropout in embedding and encoder LSTM.

4Ar–En, En–Ba, En–Hi, En–Ja, En–Ka, En–Ko, En–Pe,
En–Ta, En–Th, Jn–Jk and Th–En.

The w in 1st-order hard monotonic attention model
is 4.

A.3 Optimization.
The model is trained with Adam (Kingma and Ba,
2015) and the learning rate is 0.001. We halve
the learning rate whenever the development log-
likelihood increase and we stop early when the
learning rate reaches 0.00001. We apply gradient
clipping with maximum gradient norm 5. The mod-
els are selected by development evaluation met-
ric and decoded greedily since no improvements
are observed when using beam search (Wu et al.,
2018).


