



















































SNU_IDS at SemEval-2018 Task 12: Sentence Encoder with Contextualized Vectors for Argument Reasoning Comprehension


Proceedings of the 12th International Workshop on Semantic Evaluation (SemEval-2018), pages 1083–1088
New Orleans, Louisiana, June 5–6, 2018. ©2018 Association for Computational Linguistics

SNU IDS at SemEval-2018 Task 12: Sentence Encoder with
Contextualized Vectors for Argument Reasoning Comprehension

Taeuk Kim, Jihun Choi and Sang-goo Lee
Department of Computer Science and Engineering,

Seoul National University, Seoul, Korea
{taeuk,jhchoi,sglee}@europa.snu.ac.kr

Abstract

We present a novel neural architecture for the
Argument Reasoning Comprehension task of
SemEval 2018. It is a simple neural network
consisting of three parts, collectively judging
whether the logic built on a set of given sen-
tences (a claim, reason, and warrant) is plau-
sible or not. The model utilizes contextual-
ized word vectors pre-trained on large machine
translation (MT) datasets as a form of trans-
fer learning, which can help to mitigate the
lack of training data. Quantitative analysis
shows that simply leveraging LSTMs trained
on MT datasets outperforms several baselines
and non-transferred models, achieving accura-
cies of about 70% on the development set and
about 60% on the test set.

1 Introduction

The Argument Reasoning Comprehension Task
(Habernal et al., 2018) is a newly released task
that tackles the core of reasoning in natural lan-
guage argumentation, highlighting the importance
of implicit warrants.

Even though the task could be regarded as sim-
ple binary classification, it is quite challenging
in several perspectives. First, the task requires
human-level reasoning to judge whether a claim
supported by a reason and a warrant is logically
correct. Second, common knowledge, which is
not present in the input sentences themselves, is
often required to solve the problem. Third, even
though each instance of the data is helpful, the
number of training data is relatively small to train
prevailing complex neural models such as con-
volutional neural networks (Kim, 2014; Kalch-
brenner et al., 2014) and recurrent neural net-
works (Hochreiter and Schmidhuber, 1997; Chung
et al., 2014) with (or without) attention mecha-
nisms (Liu et al., 2016; Lin et al., 2017).

In this paper, we propose a new architec-
ture named SECOVARC1(Sentence Encoder with
COnextualized Vectors for Argument Reasoning
Comprehension) to deal with the complicated task.
The main idea behind our model is that transfer
learning can be a remedy to resolve the difficulties
we face. With experimental results and analysis,
we show that the simple neural model enhanced by
transferred knowledge can be competitive, com-
pared to complex models trained on the given data
only.

2 Related Work

2.1 Argument Reasoning Comprehension

The argument reasoning comprehension task is a
new dataset whose goal is to choose the correct
implicit reasoning from two warrants, given a nat-
ural language argument with a reason and a claim.
It consists of about 2K crowdsourced instances,
each of which has a title and a short description
of the debate from which the claim, reason, and
two candidates arose. For more details, refer to
Habernal et al. (2018).

2.2 Transfer Learning in NLP

Transfer learning is a classic technique in machine
learning, which seeks to transfer beneficial knowl-
edge from external resources to target models. It
is well-known to be effective especially when one
suffers from the lack of training data.

An important example showing the successful-
ness of transfer learning in natural language pro-
cessing (NLP) is pre-trained word representations
such as Word2Vec (Mikolov et al., 2013) and
GloVe (Pennington et al., 2014), on which most
of the modern models for NLP have been built.

1The implementation of our model is available at
https://github.com/galsang/SemEval2018-task12

1083



Furthermore, there are some recent works (Col-
lobert et al., 2011; Mou et al., 2016; Min et al.,
2017) that concentrate on pre-training more so-
phisticated neural modules over word embed-
dings, proving that transfer learning can be a key
to boost the performance of NLP systems.

2.3 Unsupervised Sentence Representation

Following the success of unsupervised word repre-
sentations, there arises another line of research to
facilitate transfer learning in sentence-level. The
idea is that a generic sentence encoder, which is
pre-trained in an unsupervised way, can generate
sentence representations suitable for downstream
tasks.

For instance, Kiros et al. (2015) propose an ap-
proach called Skip-Thoughts vectors that abstracts
the skip-gram of Word2Vec (Mikolov et al., 2013)
to the sentence-level. Moreover, many other un-
supervised methods (Le and Mikolov, 2014; Dai
and Le, 2015; Hill et al., 2016; Gan et al., 2017;
Chen, 2017) are also introduced as a way of build-
ing sentence representations.

2.4 Supervised Sentence Representation

Despite several attempts at learning sentence rep-
resentations in an unsupervised manner, there has
been no consensus established thus far, on which
is the best method and can be adopted as a stan-
dard.

Meanwhile, sentence encoders trained on la-
beled datasets are proposed as an alternative,
showing that they outperform the previous mod-
els even with the limited number of data. Conneau
et al. (2017) suggest a method named InferSent,
which uses a simple bidirectional LSTM (Long
Short Term Memory, Hochreiter and Schmidhu-
ber (1997)) with max-pooling trained on the Stan-
ford Natural Language Inference (SNLI, Bowman
et al. (2015)). And McCann et al. (2017) propose
CoVe and demonstrate that the encoder part of
the trained sequence-to-sequence (Sutskever et al.,
2014) model for machine translation can be reused
as a generic sentence encoder.

In the paper, we focus on supervised pre-
training with external data as an instantiation of
transfer learning.

3 Model

In this section, We describe SECOVARC (Figure
1) which takes a set of 3 sentences, i.e. a claim,

reason, and warrant, as input and outputs a score
between 0 and 1, indicating how reasonable the
claim is when it is based on the reason and the
warrant.

3.1 Model Design

Before jumping into the details, we explain about
our motivation upon which the decisions on model
design were made.

First, we let the model accept only one warrant
instead of two candidates. This decision comes
from the intuition that it may learn how to reason
better when it judges whether the logic constructed
on a set of a claim, reason, and warrant is plausi-
ble, instead of just choosing the more probable one
between the two candidates.

Second, as mentioned earlier, one of the main
concerns behind the model design is the lack of
training data. To alleviate this problem, we de-
cide to utilize transfer learning while maintaining
the model as simple as possible (e.g. without in-
troducing complex architectures such as attention
mechanism).

3.2 Model Specification

In this part, we describe the details of the proposed
model, which is composed of three layers.

3.2.1 Encoding Layer
The encoding layer is the first part of our model,
which is in charge of encoding three input sen-
tences to corresponding sentence representations.
In detail, it accepts the sequence of n words
(w1, w2, . . . , wn) in a sentence at a time and out-
puts a fixed-length sentence representation s. Note
that the same generic encoder is used to encode
each input sentence.

Formally, each one-hot encoded word wi ∈ RV
of the input sentence is converted into the corre-
sponding word vector xi ∈ Rdw by a word em-
bedding matrix E ∈ Rdw×V . Then, a sequence
of the word vectors x = [x1,x2, . . . ,xn] is com-
bined into s ∈ Rds by an encoder. While a wide
range of selection for the encoder is possible, in
our case we utilize CoVe2 (McCann et al., 2017)
(with pooling operation), which is a two-layered
Bi-LSTM pre-trained on large MT datasets, to ob-
tain meaningful and contextualized sentence rep-
resentations that would not be achieved if we train
the encoder from scratch.

2Available at https://github.com/salesforce/cove

1084



As a result, each representation for the claim
(sc), reason (sr), and warrant (sw) is derived from
xc,xr and xw as follows.

sc = Pooling(CoVe(xc))

sr = Pooling(CoVe(xr))

sw = Pooling(CoVe(xw))

From various options for the pooling operation,
we use max-pooling, which selects the maximum
value over each dimension of the output, and last-
pooling that just selects the last state of the out-
put. We call the CoVe encoder with max-pooling
as SECOVARC-max and the encoder with last-
pooling as SECOVARC-last.

3.2.2 Localization Layer
Although all of the input sentences (i.e. the claim,
reason, and warrant) are encoded by the univer-
sal encoder, there is a need to make a difference
among them so that each of the sentence repre-
sentations keeps its own role. For this reason, the
localization layer is introduced to project (or ‘lo-
calize’) each s onto its own semantic space.

We implement this layer simply in the form
of three separate fully-connected layers, pursu-
ing the intuition that our model should be simple.
Therefore, a set of the sentence representations
{sc, sr, sw} is converted into {vc,vr,vw} ∈ Rdf
as follows.

vc = tanh(Wcsc + bc)

vr = tanh(Wrsr + br)

vw = tanh(Wwsw + bw)

3.2.3 Output Layer
The output layer collects all features extracted
from the previous layer and computes a final score
between 0 and 1. To help the model make correct
decisions, we introduce heuristic methods such as
|vw − vr − vc| and vw � vr � vc3, inspired from
the work of Mou et al. (2015) for the SNLI task.

In the end, a final feature vf for computing a
score y ∈ R (0 ≤ y ≤ 1) becomes a concatenation
of the five vectors,

vf =




vc
vr
vw

|vw − vr − vc|
vw � vr � vc




3�: element-wise multiplication

Encoding

Localization

Output

wc1 . . . wcn

Claim

wr1 . . . wrm

Reason

ww1 . . . wwp

Warrant

xc1 . . . xcn

x̂c1 . . . x̂cn

sc

vc

xr1 . . . xrm

x̂r1 . . . x̂rm

sr

vr

xw1 . . . xwp

x̂w1 . . . x̂wp

sw

vw

vc vr vw vd vm

y

GloVe

CoVe

Pooling

FC FC FC

Sigmoid

Figure 1: The architecture of SECOVARC. Dotted
boxes represent the elements computed by parameter-
shared modules (GloVe and CoVe) for all inputs. Note
that vd : |vw − vc − vr| and vm : vw � vc � vr. FC
means a fully connected layer.

where vf ∈ R5df . Then, logistic regression (for
simplicity) is performed on vf to compute the fi-
nal score.

y = σ(Wfvf + bf )

During training, the score can be directly uti-
lized to optimize the model. At test time, on the
other hand, we derive y1 and y2 from the trained
model with the input sentences such that

y1 = SECOVARC(c, r,w1)

y2 = SECOVARC(c, r,w2)

where c, r,w1 and w2 is the claim, the reason, the
first warrant, and the second warrant respectively.
Then, we select the warrant whose score is greater
than that of the other as a final decision.

4 Experiment and Discussion

4.1 Data Manipulation
As our model requires only one warrant at a time,
data preprocessing is inevitable before training.
We manipulate the original data so that the correct
warrant has a score of 1 and the opposite warrant
has 0. Note that this pre-processing procedure has
a side effect of doubling the original training data.

4.2 Training Details
The dimension of a word vector (de) is fixed to
300. And hyper-parameters for other vectors are

1085



Approach Dev (±) Test (±)
Human average - - .798 .162
Human w/ training in reasoning - - .909 .114
Random baseline .473 .039 .491 .031
Language model .617 - .500 -
Attention .488 .006 .513 .012
Attention w/ context .502 .031 .512 .014
Intra-warrant attention .638 .024 .556 .016
Intra-warrant attent. w/ context .637 .040 .560 .055

SECOVARC (official record) .731 - .565 -
SECOVARC-last (w/o heuristics) .701 .011 .559 .019
SECOVARC-last (w/ heuristics) .706 .014 .554 .015
SECOVARC-max (w/o heuristics) .680 .007 .591 .016
SECOVARC-max (w/ heuristics) .684 .008 .592 .016

Table 1: Comparison of baselines and variants of our
model on the development set and the test set.

set to ds = 600, df = 300. We use 840B GloVe
to initialize a word embedding matrix. Other
model weights are randomly sampled from uni-
form distribution(-0.005, 0.005), except for the
CoVe encoder, and biases are initialized with 0.

Our model is trained using Adam (Kingma and
Ba, 2014) optimizer with a learning rate 0.001 and
a batch size 64. The maximum number of train-
ing epoch is limited to 10 and we choose the best
model based on development accuracy. All param-
eters in the model, including the word vectors, are
fine-tuned during training.

For regularization, L2-norm of the parameters
is added to the Cross Entropy objective with the
weight of 1e-5, and Dropout (Srivastava et al.,
2014) technique is also applied with p = 0.1.

4.3 Experimental Results
Table 1 shows the accuracies of variants of our
model and baselines (Habernal et al., 2018) on
the development set and the test set. Due to the
instability of results caused by random initializa-
tion, we report the mean and standard deviation
of 20 experimental runs (with the same hyper-
parameters) for each model.

The reported results show that SECOVARC-last
(w/ heuristics) outperforms all the baselines on the
development set, with a mean accuracy of 70.6%.
However, it is SECOVARC-max (w/ heuristics)
that performs best on the test set, with a mean ac-
curacy of 59.2%. We submitted an instance ob-
tained from SECOVARC-last (w/ heuristics) and
achieved the official result of 56.5% on the leader-
board. Table 1 also demonstrates that our model
benefits from the heuristics applied in the output

Approach Dev (±) Test (±)
BoW .677 .006 .502 .014
Bi-LSTM-last .678 .010 .554 .024
Bi-LSTM-max .670 .011 .543 .027
SECOVARC-last .706 .014 .554 .015
SECOVARC-max .684 .008 .592 .016

Table 2: Experiment on the possibility of transfer learn-
ing in case of the argument reasoning comprehension
task. Note that the heuristic methods are employed for
all models.

layer, except for the test accuracy of SECOVARC-
last.

4.3.1 Does transfer learning really work?
Even with the promising outcome presented by
SECOVARC, an issue remains regarding how to
show the effectiveness of transfer learning for the
task. For this objective, we conduct additional
experiments with three baselines called BoW, Bi-
LSTM-last, and Bi-LSTM-max. Bi-LSTM-last
and Bi-LSTM-max have the same architecture
with SECOVARC, but the Bi-LSTMs in the en-
coding layer are randomly initialized rather than
pre-trained. BoW is different from our proposed
model in that it leverages the average of word vec-
tors as a sentence representation instead of using
CoVe with pooling.

Table 2 reports the comparison of the baselines
and the variants of our model. The results show
that our model consistently outperforms the base-
lines which are trained from scratch. Moreover,
the smaller deviations of SECOVARCs demon-
strate that transfer learning can lead to more stable
and successful training of models.

5 Conclusion

In this paper, we present a novel neural archi-
tecture called SECOVARC, that utilizes a two-
layered Bi-LSTM trained first on a large amount
of machine translation data. And we demonstrate
that the neural model for the argument reason-
ing comprehension task can benefit from transfer
learning when it is properly designed.

As a future work, there is a way to apply con-
temporary works for generic sentence encoders
such as Subramanian et al. (2018) and Peters et al.
(2018) instead of CoVe. On the other hand, we can
consider expanding the data itself directly with so-
phisticated rules or heuristics.

1086



Acknowledgments

This work was supported by the National
Research Foundation of Korea (NRF) grant
funded by the Korea government (MSIT) (NRF-
2016M3C4A7952587).

References
Samuel R Bowman, Gabor Angeli, Christopher Potts,

and Christopher D Manning. 2015. A large anno-
tated corpus for learning natural language inference.
arXiv preprint arXiv:1508.05326.

Minmin Chen. 2017. Efficient vector representation
for documents through corruption. arXiv preprint
arXiv:1707.02377.

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. arXiv preprint arXiv:1412.3555.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. Journal of Machine Learning Research,
12(Aug):2493–2537.

Alexis Conneau, Douwe Kiela, Holger Schwenk, Loic
Barrault, and Antoine Bordes. 2017. Supervised
learning of universal sentence representations from
natural language inference data. arXiv preprint
arXiv:1705.02364.

Andrew M Dai and Quoc V Le. 2015. Semi-supervised
sequence learning. In Advances in Neural Informa-
tion Processing Systems, pages 3079–3087.

Zhe Gan, Yunchen Pu, Ricardo Henao, Chunyuan Li,
Xiaodong He, and Lawrence Carin. 2017. Learning
generic sentence representations using convolutional
neural networks. In Proceedings of the 2017 Con-
ference on Empirical Methods in Natural Language
Processing, pages 2380–2390.

Ivan Habernal, Henning Wachsmuth, Iryna Gurevych,
and Benno Stein. 2018. The argument reasoning
comprehension task: Identification and reconstruc-
tion of implicit warrants. In Proceedings of the
2018 Conference of the North American Chapter of
the Association for Computational Linguistics: Hu-
man Language Technologies, page (to appear), New
Orleans, LA, USA. Association for Computational
Linguistics.

Felix Hill, Kyunghyun Cho, and Anna Korhonen.
2016. Learning distributed representations of
sentences from unlabelled data. arXiv preprint
arXiv:1602.03483.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Nal Kalchbrenner, Edward Grefenstette, and Phil
Blunsom. 2014. A convolutional neural net-
work for modelling sentences. arXiv preprint
arXiv:1404.2188.

Yoon Kim. 2014. Convolutional neural net-
works for sentence classification. arXiv preprint
arXiv:1408.5882.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Ryan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,
Richard Zemel, Raquel Urtasun, Antonio Torralba,
and Sanja Fidler. 2015. Skip-thought vectors. In
Advances in neural information processing systems,
pages 3294–3302.

Quoc Le and Tomas Mikolov. 2014. Distributed rep-
resentations of sentences and documents. In Inter-
national Conference on Machine Learning, pages
1188–1196.

Zhouhan Lin, Minwei Feng, Cicero Nogueira dos San-
tos, Mo Yu, Bing Xiang, Bowen Zhou, and Yoshua
Bengio. 2017. A structured self-attentive sentence
embedding. arXiv preprint arXiv:1703.03130.

Yang Liu, Chengjie Sun, Lei Lin, and Xiaolong Wang.
2016. Learning natural language inference using
bidirectional lstm model and inner-attention. arXiv
preprint arXiv:1605.09090.

Bryan McCann, James Bradbury, Caiming Xiong, and
Richard Socher. 2017. Learned in translation: Con-
textualized word vectors. In Advances in Neural In-
formation Processing Systems, pages 6297–6308.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013. Efficient estimation of word
representations in vector space. arXiv preprint
arXiv:1301.3781.

Sewon Min, Minjoon Seo, and Hannaneh Hajishirzi.
2017. Question answering through transfer learn-
ing from large fine-grained supervision data. arXiv
preprint arXiv:1702.02171.

Lili Mou, Rui Men, Ge Li, Yan Xu, Lu Zhang, Rui
Yan, and Zhi Jin. 2015. Natural language inference
by tree-based convolution and heuristic matching.
arXiv preprint arXiv:1512.08422.

Lili Mou, Zhao Meng, Rui Yan, Ge Li, Yan Xu,
Lu Zhang, and Zhi Jin. 2016. How transferable are
neural networks in nlp applications? arXiv preprint
arXiv:1603.06111.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP), pages 1532–1543.

1087



Matthew E Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. arXiv preprint arXiv:1802.05365.

Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: A simple way to prevent neural networks
from overfitting. The Journal of Machine Learning
Research, 15(1):1929–1958.

Sandeep Subramanian, Adam Trischler, Yoshua Ben-
gio, and Christopher J Pal. 2018. Learning gen-
eral purpose distributed sentence representations via
large scale multi-task learning. In International
Conference on Learning Representations.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

1088


