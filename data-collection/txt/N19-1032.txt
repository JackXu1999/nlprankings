




































BAG: Bi-directional Attention Entity Graph Convolutional Network for Multi-hop Reasoning Question Answering


Proceedings of NAACL-HLT 2019, pages 357–362
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

357

BAG: Bi-directional Attention Entity Graph Convolutional Network for
Multi-hop Reasoning Question Answering

Yu Cao1 Meng Fang2 Dacheng Tao1
1UBTECH Sydney AI Center, School of Computer Science, FEIT, The University of Sydney

2Tencent Robotics X, China
ycao8647@uni.sydney.edu.au, mfang@tencent.com,

dacheng.tao@sydney.edu.au

Abstract

Multi-hop reasoning question answering re-
quires deep comprehension of relationships
between various documents and queries. We
propose a Bi-directional Attention Entity
Graph Convolutional Network (BAG), lever-
aging relationships between nodes in an en-
tity graph and attention information between
a query and the entity graph, to solve this task.
Graph convolutional networks are used to ob-
tain a relation-aware representation of nodes
for entity graphs built from documents with
multi-level features. Bidirectional attention is
then applied on graphs and queries to gener-
ate a query-aware nodes representation, which
will be used for the final prediction. Experi-
mental evaluation shows BAG achieves state-
of-the-art accuracy performance on the QAn-
garoo WIKIHOP dataset.

1 Introduction

Question Answering (QA) and Machine Com-
prehension (MC) tasks have drawn significant
attention during the past years. The proposal
of large-scale single-document-based QA/MC
datasets, such as SQuAD (Rajpurkar et al., 2016),
CNN/Daily mail (Hermann et al., 2015), makes
training available for end-to-end deep neural mod-
els, such as BiDAF (Seo et al., 2016), DCN (Xiong
et al., 2016) and SAN (Liu et al., 2017). How-
ever, gaps still exist between these datasets and
real-world applications. For example, reasoning is
constrained to a single paragraph, or even part of
it. Extended work was done to meet practical de-
mand, such as DrQA (Chen et al., 2017) answering
a SQuAD question based on the whole Wikipedia
instead of single paragraph. Besides, latest large-
scale datasets, e.g. TriviaQA (Joshi et al., 2017)
and NarrativeQA (Kočiskỳ et al., 2018), address
this limitation by introducing multiple documents,
ensuring reasoning cannot be done within local in-
formation. Although those datasets are fairly chal-
lenging, reasoning are within one document.

In many scenarios, we need to comprehend the
relationships of entities across documents before
answering questions. Therefore, reading compre-
hension tasks with multiple hops were proposed
to make it available for machine to tackle such
problems, e.g. QAngaroo task (Welbl et al., 2018).
Each sample in QAngaroo contains multiple sup-
porting documents, and the goal is selecting the
correct answer from a set of candidates for a query.
Most queries cannot be answered depending on a
single document, and multi-step reasoning chains
across documents are needed. Therefore, it is pos-
sible that understanding a part of paragraphs loses
effectiveness for multi-hop inference, which posts
a huge challenge for previous models. Some base-
line models, e.g. BiDAF (Seo et al., 2016) and
FastQA (Weissenborn et al., 2017), which are pop-
ular for single-document QA, suffer dramatical ac-
curacy decline in this task.

In this paper, we propose a new graph-based
QA model, named Bi-directional Attention Entity
Graph convolutional network (BAG). Documents
are transformed into a graph in which nodes are
entities and edges are relationships between them.
The graph is then imported into graph convolu-
tional networks (GCNs) to learn relation-aware
representation of nodes. Furthermore, we intro-
duce a new bi-directional attention between the
graph and a query with multi-level features to de-
rive the mutual information for final prediction.

Experimental results demonstrate that BAG
achieves state-of-the-art performance on the WIK-
IHOP dataset. Ablation test also shows BAG ben-
efits from the bi-directional attention, multi-level
features and graph convolutional networks.

Our contributions can be summarized as:
• Applying a bi-directional attention between

graphs and queries to learn query-aware rep-
resentation for reading comprehension.
• Multi-level features are involved to gain com-

prehensive relationship representation for
graph nodes during processing of GCNs.



358

S={S1, ,SN}

q=q1,...,qM

C={C1, ,CZ}
Candidates

Documents

Query

Graph 

Construction

(1) Entity graph 

construction

ELMo

GLoVe

NER

POS

1-Layer 

Linear 

Network

P
re

d
ictio

n
s

C
o
n
caten

ate

ELMo

GLoVe

NER

POS

Bi-

LSTM

C
o
n
caten

ate

(2) Multi-level feature

R-GCN

L-layer 

GCN

R-GCN

R-GCN

...

Nodes2query 

and 

query2nodes 

attention

2-Layer 

Feed-

forward 

Network

(3) GCN layer (4) Bi-directional 

attention layer

(5) Output 

layer

Graph feature

Query feature

Nodes

Nodes feature

Query feature

Relation-

aware 

nodes 

Query-

aware 

nodes 

Edges

Figure 1: Framework of BAG model.

2 Related Work

Recently coreference and graph-based models are
studied for multi-hop QA (Dhingra et al., 2018;
Santoro et al., 2017). Coref-GRU (Dhingra et al.,
2018) uses coreferences among tokens in docu-
ments. However, it is still limited by the long-
distance relation propagation capability of RNNs.
Besides, graph is proved to be an efficient way
to represent complex relationships among objects
and derive relational information (Santoro et al.,
2017). MHQA-GRN (Song et al., 2018) and
Entity-GCN (De Cao et al., 2018) construct entity
graphs based on documents to learn more compact
representation for multi-hop reasoning and derive
answers from graph networks. However, both of
them care less about input features and the atten-
tion between queries and graph nodes.

Attention has been proven to be an essen-
tial mechanism to promote the performance of
NLP tasks in previous work (Bahdanau et al.,
2014; Sukhbaatar et al., 2015). In addition, bi-
directional attention (Seo et al., 2016) shows its
superiority to vanilla mutual attention because it
provides complementary information to each other
for both contexts and queries. However, little work
exploits the attention between graphs and queries.

3 BAG Model

We first formally define the multiple-hop QA task,
taking QAngaroo (Welbl et al., 2018) WIKIHOP
data as an example, There is a set S contain-
ing N supporting documents, a query q with M
tokens and a set of answer candidates C. Our
goal is to find the correct answer index a. Giv-
ing a triple-style query q = (country, kepahiang),

it means which country does kepahiang belongs
to. Then answer candidates are provided, e.g.
C = {Indonesia,Malaysia}. There are multiple
supporting documents but not all of them are re-
lated to reasoning, e.g. Kephiang is a regency in
Bengkulu, Bengkulu is one of provinces of Indone-
sia, Jambi is a province of Indonesia. We can de-
rive the correct candidate is Indonesia, i.e. a = 0,
based on reasoning hops in former two documents.

We show the proposed BAG model in Figure 1.
It contains five modules: (1) entity graph construc-
tion, (2) multi-level feature layer, (3) GCN layer,
(4) bi-directional attention and (5) output layer.

3.1 Entity Graph Construction

We construct an entity graph based on Entity-
GCN (De Cao et al., 2018), which means all men-
tions of candidates found out in documents are
used as nodes in the graph. Undirected edges are
defined according to positional properties of every
node pair. There are two kinds of edges included:
1) cross-document edge, for every node pair with
the same entity string located in different docu-
ments; 2) within-document edge, for every node
pair located in the same document.

Nodes in an entity graph can be found out via
simple string matching. This approach can sim-
plify calculation as well as make sure all rele-
vant entities are included in the graph. Picked
out along possible reasoning chains during dataset
generating (Welbl et al., 2018), answer candi-
dates have contained all related entities for an-
swering. Finally, We can obtain a set of T nodes
{ni}, 1 ≤ i ≤ T and corresponding edges among
these nodes via above procedures.



359

3.2 Multi-level Features

We represent both nodes and queries using multi-
level features as shown in Figure 1(2). We first use
pretrained word embeddings to represent tokens,
such as GLoVe (Pennington et al., 2014) because
nodes and queries are composed of tokens. Then
contextual-level feature is used to offset the defi-
ciency of GLoVe. Note that only part of tokens
are remained during graph construction because
we only extract entities as nodes. Thus contextual
information around these entities in original doc-
ument becomes essential for indicating relations
between tokens and we use higher-level informa-
tion for nodes except for token-level feature.

We use ELMo (Peters et al., 2018) as contextu-
alized word representations, modeling both com-
plex word characteristics and contextual linguistic
conditions. It should be noted that ELMo features
for nodes are calculated based on original docu-
ments, then truncated according to the position in-
dices of nodes. Token-level and context-level fea-
tures will be concatenated and encoded to make a
further comprehension. Since a node may contain
more than one token, we average features among
tokens to generate a feature vector for each node
before encoding it. It will be transformed into the
encoded node feature via a 1-layer linear network.

Different from nodes, we represent a query by
directly using a bidirectional LSTM (Bi-LSTM)
whose output in each step is used as encoded query
features. And both linear network and LSTM have
the same output dimension d̂.

In addition, we add two manual features to
reflect the semantic properties of tokens, which
are named-entity recognition (NER) and part-of-
speech (POS). The complete feature fn ∈ RT×d,
fq ∈ RM×d for both nodes and queries will be the
concatenation of corresponding encoded features,
NER embedding and POS embedding, where d =
d̂+ dPOS + dNER.

3.3 GCN Layer

In order to realize multi-hop reasoning, we use
a Relational Graph Convolutional Network (R-
GCN) (Schlichtkrull et al., 2018) that can prop-
agate message across different entity nodes in
graphs and generate transformed representation of
original ones. The R-GCN is employed to han-
dle high-relational data characteristics and make
use of different edge types. At lth layer, given the
hidden state hli ∈ Rd of node i, the hidden states

hlj ∈ Rd, j ∈ {Ni} and relations RNi of all its
neighbors (d is the hidden state dimension), the
hidden state in the next layer can be obtained via

hl+1i = σ(
∑

r∈RNi

∑
j∈Ni

1

ci,r
W lrh

l
j +W

l
0h

l
i), (1)

where ci,r is a normalization constant |Ni|, W lr ∈
Rd×d stands a relation-specific weight matrix and
W l0 ∈ Rd×d stands a general weight.

Similar to Entity-GCN (De Cao et al., 2018), we
apply a gate on update vector uli and hidden state
hli of current node by a linear transformation fs,

wli = σ(fs(concat(u
l
i, h

l
i)), (2)

in which uli can be obtained via (1) without sig-
moid function. Then it will be used for updating
weights for the hidden state hl+1i of the same node
in next layer,

hl+1i = w
l
i � tanh(uli) + (1− wli)� hli. (3)

We stack such networks for L layers in which
all parameters are shared. The information of each
node will be propagated up to L-node distance
away, generating L-hop-reasoning relation-aware
representation of nodes. The initial input will be
mutli-level nodes features fn = {fni}, 0 ≤ i ≤ T
and edges e = {eij} in the graph.

3.4 Bi-directional Attention Between a
Graph and a Query

Bi-directional attention is responsible for generat-
ing the mutual information between a graph and
a query. In BiDAF (Seo et al., 2016), attention is
applied to sequence data in QA tasks such as sup-
porting texts. However, we also find it works well
between graph nodes and queries. It generates
query-aware node representations that can provide
more reasoning information for prediction.

What differs in BAG is that attention is applied
for graphs as shown in Figure 1(4). The similarity
matrix S ∈ RT×M is calculated via

S= avg−1fa(concat(hn, fq, hn ◦ fq)), (4)

in which hn ∈ RT×d is all node representations
obtained from the last GCN layer, fq ∈ RM×d is
the query feature matrix after encoding, d is the
dimension for both query feature and transformed
node representation, fa is a linear transformation,
avg−1 stands for the average operation in last di-
mension, and ◦ is element-wise multiplication.



360

Unlike the context-to-query attention in BiDAF,
we introduce a node-to-query attention ãn2q ∈
RT×d, which signifies the query tokens that have
the highest relevancy for each node using

ãn2q = softmaxcol(S) · fq, (5)

where softmaxcol means performing softmax
function across the column, and · stands for ma-
trix multiplication.

At the same time, we also design query-to-node
attention ãq2n ∈ RM×d which signifies the nodes
that are most related to each token in the query via

ãq2n = dup(softmax(maxcol(S)))
> · fn , (6)

in which maxcol is the maximum function applied
on across column of a matrix, which will trans-
form S into R1×M . Then function dup will dupli-
cate it for T times into shape RT×M . fn ∈ RT×d
is the original node feature before GCN layer.

Our bi-directional attention layer is the con-
catenation of the original nodes feature, nodes-to-
query attention, the element-wise multiplication of
nodes feature and nodes-to-query attention, and
multiplication of nodes feature and query-to-nodes
attention. It should be noted that the relation-
aware nodes representation from GCN layer is just
used to calculate the similarity matrix, and origi-
nal node feature is used in rest calculation to ob-
tain more general complementary information be-
tween graph and query. Edges are not taken in ac-
count because they are discrete and combined with
nodes in GCN layer. The output is defined as

ã = concat(fn, ãn2q, fn ◦ ãn2q, fn ◦ ãq2n). (7)

3.5 Output layer
A 2-layer fully connect feed-forward network is
employed to generate the final prediction, with
tanh as the activation function in each layer. Soft-
max will be applied among the output. It uses
query-aware representation of nodes from the at-
tention layer as input, and its output is regarded
as the probability of each node becoming answer.
Since each candidate may appear several times in
the graph, the probability of each candidate is the
sum of all corresponding nodes. The loss function
is defined as the cross entropy between the gold
answer and its predicted probability.

4 Experiment

We used both unmasked and masked versions of
the QAngaroo WIKIHOP dataset (Welbl et al.,

2018) and followed its basic setting, in which
masked version used specific tokens such as

MASK1 to replace original candidates tokens in
documents. There are 43,738, 5,129 and 2,451 ex-
amples in the training set, the development set and
the test set respectively, and test set is not public.

In the implementation1, we used standard
ELMo with a 1024 dimension representation. Be-
sides, 300-dimension GLoVe pre-trained embed-
dings from 840B Web crawl data were used as
token-level features. We used spaCy to provide
additional 8-dimension NER and POS features.
The dimension of the 1-layer linear network for
nodes in multi-level feature module was 512 with
tanh as activation function. A 2-layer Bi-LSTM
was employed for queries whose hidden state size
is 256. Then the feature dimension is d = 512 +
8+8 = 528. The GCN layer number L was set as
5. And the unit number of intermediate layers in
output layer was 256.

In addition, the number of nodes and the query
length were truncated as 500 and 25 respectively
for normalized computation. Dropout with rate
0.2 was applied before GCN layer. Adam opti-
mizer is employed with initial learning rate 2 ×
10−4, which will be halved for every 5 epochs,
With batch size 32. It took about 14 hours for
50-epoch training on two GTX1080Ti GPUs us-
ing pre-built and pre-processed graph data gener-
ated from original corpus, which can significantly
decrease the training time.

We consider the following baseline models:
FastQA (Weissenborn et al., 2017), BiDAF (Seo
et al., 2016), Coref-GRU (Dhingra et al.,
2018), MHQA-GRN (Song et al., 2018), Entity-
GCN (De Cao et al., 2018). Former three mod-
els are RNN-based models, while coreference re-
lationship is involved in Coref-GRU. The last two
models are graph-based models specially designed
for multi-hop QA tasks.

As shown in Table 1, we collected three kinds of
results. The dev and test results stand for the origi-
nal validation and test sets respectively, noting that
the test set is not public. In addition, we divide the
original validation set of masked version into two
parts evenly, one as a split validation set for tun-
ing model and the other one as a split test set. The
test1 results are for the split test set.

Our BAG model achieves state-of-the art per-

1Source code is available on https://github.com/
caoyu1991/BAG.



361

formance on both unmasked and masked data2,
with accuracy 69.0% on the test set, which is 1.4%
higher in value than previous best model Entity-
GCN. It is significant superior than FastQA and
BiDAF due to leveraging of relationship informa-
tion given by the graph and abandoning some dis-
tracting context in multiple documents. Although
Coref-GRU extends GRU with coreference rela-
tionships, it is still not enough for multi-hop be-
cause hop relationships are not limited to coref-
erence, entities with the same strings also existed
across documents which can be used for reason-
ing. Both MHQA-GRN and Entity-GCN utilize
graph networks to resolve relations among entities
in documents. However, the lack of attention and
complementary features limits their performance.
Therefore our BAG model achieves the best per-
formance under all data configurations. It is no-
ticed that BAG only gets a small promotion on
masked data. We argue that the reason is the at-
tention between masks and queries generating less
useful information compared to unmasked ones.

Moreover, ablation experimental results on un-
masked version of the WIKIHOP dev set are given
in Table 2. Once we remove the bi-directional
attention and put the concatenation of nodes and
queries directly into the output layer, it shows
significant performance drop with more than 3%,
proving the necessity of attention for reasoning
in multi-hop QA. If we use linear-transformation-
based single attention a = hnWafq given in (Lu-
ong et al., 2015) instead of our bi-directional at-
tention, the accuracy drops with 2%, which means
attention bi-directionality also contributes to the
performance improvement. The similar condition
will appear if we remove GCN, but use raw nodes
as input for the attention layer.

In addition, if edge types are no longer con-
sidered, which makes R-GCN degraded to vanilla
GCN, noticeable accuracy loss about 2% appears.
The absence of multi-level features will also cause
degradation. The removal of semantic-level fea-
tures causes slight decline on the performance, in-
cluding NER and POS features. Further removal
of ELMo feature will causes a dramatical drop,
which reflects the insufficiency of only using word
embeddings as features for nodes and that contex-
tual information is very important.

2The paper was written on early Dec. 2018, during that
time Entity-GCN is the best public model, and only one
anonymous model is better than it.

Models Unmasked Masked
dev test dev test1

FastQA 27.2∗ 25.7 38.0∗ 48.3
BiDAF 49.7∗ 42.9 59.8∗ 57.5
Coref-GRU† 56.0∗ 59.3 - -
MHQA-GRN‡ 62.8∗ 65.4 - -
Entity-GCN 64.8∗ 67.6 70.5∗ 68.1
BAG 66.5 69.0 70.9 68.9

Table 1: The performance of different models on both
masked and unmasked version of WIKIHOP dataset.
([*] Results reported in original papers, others are ob-
tained by official code. [†] Masked data is not suitable
for coreference parsing. [‡] Some results are missing
due to unavailability of source code.)

Models Unmasked
Without Attention 63.1
Using Single Attention 64.5
Without GCN 63.3
Without edge type 63.9
Without NER, POS 66.0

+Without ELMo 60.5
Full Model 66.5

Table 2: Ablation test results of BAG model on the
unmasked validation set of the WIKIHOP dataset.

5 Conclusion

We propose a Bi-directional Attention entity
Graph convolutional network (BAG) for multi-
hop reasoning QA tasks. Regarding task char-
acteristics, graph convolutional networks (GCNs)
are efficient to handle relationships among enti-
ties in documents. We demonstrate that both bi-
directional attention between nodes and queries
and multi-level features are necessary for such
tasks. The former one aims to obtain query-aware
node representation for answering, while the lat-
ter one provides contextual comprehension of iso-
lated nodes in graphs. Our experimental results
not only demonstrate the effectiveness of two pro-
posed modules, but also show BAG achieves state-
of-the-art performance on the WIKIHOP dataset.

Our future work will be making use of more
complex relations between entities and building
graphs in more general way without candidates.

Acknowledgements

This work was supported by Australian Research
Council Projects under grants FL-170100117, DP-
280103424.



362

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473.

Danqi Chen, Adam Fisch, Jason Weston, and An-
toine Bordes. 2017. Reading wikipedia to an-
swer open-domain questions. arXiv preprint
arXiv:1704.00051.

Nicola De Cao, Wilker Aziz, and Ivan Titov. 2018.
Question answering by reasoning across documents
with graph convolutional networks. arXiv preprint
arXiv:1808.09920.

Bhuwan Dhingra, Qiao Jin, Zhilin Yang, William W
Cohen, and Ruslan Salakhutdinov. 2018. Neural
models for reasoning over multiple mentions using
coreference. arXiv preprint arXiv:1804.05922.

Karl Moritz Hermann, Tomas Kocisky, Edward
Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su-
leyman, and Phil Blunsom. 2015. Teaching ma-
chines to read and comprehend. In Advances in Neu-
ral Information Processing Systems, pages 1693–
1701.

Mandar Joshi, Eunsol Choi, Daniel S Weld, and Luke
Zettlemoyer. 2017. Triviaqa: A large scale distantly
supervised challenge dataset for reading comprehen-
sion. arXiv preprint arXiv:1705.03551.

Tomáš Kočiskỳ, Jonathan Schwarz, Phil Blunsom,
Chris Dyer, Karl Moritz Hermann, Gáabor Melis,
and Edward Grefenstette. 2018. The narrativeqa
reading comprehension challenge. Transactions
of the Association of Computational Linguistics,
6:317–328.

Xiaodong Liu, Yelong Shen, Kevin Duh, and Jian-
feng Gao. 2017. Stochastic answer networks for
machine reading comprehension. arXiv preprint
arXiv:1712.03556.

Minh-Thang Luong, Hieu Pham, and Christopher D
Manning. 2015. Effective approaches to attention-
based neural machine translation. arXiv preprint
arXiv:1508.04025.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP), pages 1532–1543.

Matthew E Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. arXiv preprint arXiv:1802.05365.

Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and
Percy Liang. 2016. Squad: 100,000+ questions
for machine comprehension of text. arXiv preprint
arXiv:1606.05250.

Adam Santoro, David Raposo, David G Barrett, Ma-
teusz Malinowski, Razvan Pascanu, Peter Battaglia,
and Timothy Lillicrap. 2017. A simple neural net-
work module for relational reasoning. In Advances
in neural information processing systems, pages
4967–4976.

Michael Schlichtkrull, Thomas N Kipf, Peter Bloem,
Rianne van den Berg, Ivan Titov, and Max Welling.
2018. Modeling relational data with graph convolu-
tional networks. In European Semantic Web Confer-
ence, pages 593–607. Springer.

Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2016. Bidirectional attention
flow for machine comprehension. arXiv preprint
arXiv:1611.01603.

Linfeng Song, Zhiguo Wang, Mo Yu, Yue Zhang,
Radu Florian, and Daniel Gildea. 2018. Exploring
graph-structured passage representation for multi-
hop reading comprehension with graph neural net-
works. arXiv preprint arXiv:1809.02040.

Sainbayar Sukhbaatar, Jason Weston, Rob Fergus, et al.
2015. End-to-end memory networks. In Advances
in neural information processing systems, pages
2440–2448.

Dirk Weissenborn, Georg Wiese, and Laura Seiffe.
2017. Fastqa: A simple and efficient neu-
ral architecture for question answering. CoRR,
abs/1703.04816.

Johannes Welbl, Pontus Stenetorp, and Sebastian
Riedel. 2018. Constructing datasets for multi-hop
reading comprehension across documents. Transac-
tions of the Association of Computational Linguis-
tics, 6:287–302.

Caiming Xiong, Victor Zhong, and Richard Socher.
2016. Dynamic coattention networks for question
answering. arXiv preprint arXiv:1611.01604.


