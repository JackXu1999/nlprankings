




































On Calculus of Displacement∗

Glyn Morrill

Departament de LSI

Universitat Politècnica de Catalunya

Oriol Valent́ın

Barcelona Media, Centre d’Innovació

Universitat Pompeu Fabra

1 Introduction

The calculus of Lambek (1958) did not make
much impact until the 1980s, but for more than
twenty years now it has constituted the foun-
dation of type logical categorial grammar. It
has occupied such a central position because of
its good logical properties, but it has also been
clear, even from the start of its renaissance, that
the Lambek calculus suffers from fundamental
shortcomings, which we shall mention below.

Certainly it seems that the way ahead in log-
ical categorial grammar is to enrich the Lam-
bek calculus with additional connectives. Thus
it was proposed to add intersection and union
as far back as Lambek (1961), and such exten-
sion is what is meant by type logical categorial
grammar. Particular inspiration came from lin-
ear logic. Propositional linear connectives di-
vide into additives, multiplicatives, and expo-
nentials. Technically, the Lambek connectives
are (noncommutative) linear multiplicatives, so
it is natural to consider enrichment of Lambek
calculus with (noncommutative) additives and
exponentials as well. Quantifiers may also be
added (Morrill, 1994, ch. 6) and unary modali-
ties (Morrill 1990, 1992; Moortgat 1995).

However, none of these extensions address
the essential limitation of the Lambek basis,
which is as follows. The Lambek calculus is
a sequence logic of concatenation. This is all
well and good in that words are arranged se-
quentially, however natural language exhibits
action at a distance: dependencies which are
discontinuous. The Lambek calculus can cap-
ture some discontinuous dependencies, namely
those in which the discontinuous dependency

∗The research reported in the present paper was
supported by DGICYT project SESAAME-BAR
(TIN2008-06582-C03-01).

is peripheral. But it cannot capture the same
kinds of dependencies when they are nonperiph-
eral, i.e. medial. In this respect the foundation
provided by the Lambek calculus is fundamen-
tally imperfect.

A major proposal to refound categorial gram-
mar was made in Moortgat (1997). Observing
that the binary Lambek connectives form resid-
uated triples, and unary modalities residuated
pairs, Moortgat proposed to multiply such con-
nective families, defining each family with re-
spect to a different primitive mode of compo-
sition represented in the metalinguistic sequent
punctuation in the inference rules for the con-
nectives of the family. In such multimodal type
logical grammar the modes are interrelated by
structural rules defining equations and inclu-
sions on the sequent configurations formed by
their composition. This constitutes a power-
ful methodology and has been the inspiration
of type logical grammar for a generation, but
the addition of structural rules makes deriva-
tion laborious to hand and eye, and creates a
problematic search space computationally. No
single calculus developed according to these de-
sign principles particularly stands out for the
breadth and elegance of its empirical applica-
tion. Indeed, it might be remarked that the
motto of substructural logic is to drop struc-
tural rules, not to introduce more of them.

It is in this context that Morrill and Valent́ın
(2010) offers the displacement calculus. Sure
enough this multiplies residuated triple con-
nective families, as in multimodal type logical
grammar, but it has a unique primitive mode
of composition, concatenation, like the Lam-
bek calculus, and it has a unimodal sequent
calculus, like the Lambek calculus. Thus, im-
portantly, it is entirely free of structural rules,
and apparently preserves all the other good

On Calculus of Displacement

45



proof-theoretic properties of the Lambek calcu-
lus. Linguistically, and as illustrated in Morrill
and Valent́ın (2010), it is the generalization of
the Lambek calculus which has the widest and
most economical coverage that we are aware of.
The present paper enters into technical consid-
eration of the displacement calculus given this
state of affairs. We define this generalization of
the Lambek calculus and consider some of the
non-context free properties it characterizes.

2 Displacement calculus

The Lambek calculus (Lambek 1958) forms the
basis of type logical categorial grammar (Mor-
rill 1994, Moortgat 1997, Morrill forthcoming).
It is a sequence logic without structural rules
which enjoys Cut-elimination, the subformula
property, and decidability. It is intuitionistic,
and so supports the standard Curry-Howard
type-logical categorial semantics. In this con-
nection it has the finite reading property. But
as a logic of concatenation, the Lambek calcu-
lus can only analyse displacement when the de-
pendencies happen to be peripheral. As a con-
sequence it cannot account for the syntax and
semantics of:

(1) • Discontinuous idioms (Mary gave the
man the cold shoulder).

• Quantification (John gave every book
to Mary ; Mary thinks someone left ;
Everyone loves someone).

• VP ellipsis (John slept before Mary
did ; John slept and Mary did too).

• Medial extraction (dog that Mary saw
today).

• Pied-piping (mountain the painting
of which by Cezanne John sold for

$10,000,000.

• Appositive relativization (John, who
jogs, sneezed).

• Parentheticals (Fortunately, John has
perseverance; John, fortunately, has
perseverance; John has, fortunately,
perseverance; John has perseverance,
fortunately).

• Gapping (John studies logic, and
Charles, phonetics).

• Comparative subdeletion (John ate
more donuts than Mary bought bagels).

• Reflexivization (John sent himself
flowers).

Furthermore, the Lambek calculus is context-
free in generative power (Pentus 1992) and so
cannot generate cross-serial dependencies as in
Dutch and Swiss-German (Sheiber 1985).
The calculus of displacement, like the Lam-

bek calculus, is a sequence logic without struc-
tural rules which enjoys Cut-elimination, the
subformula property, and decidability (Morrill
and Valent́ın 2010). Moreover, like the Lambek
calculus it is intuitionistic, and so supports the
standard categorial Curry-Howard type-logical
semantics. In this relation it has the finite read-
ing property. It is a logic not only of concatena-
tion but also of intercalation and provides ba-
sic analyses of all of the phenomena itemized in
(1) (Morrill and Valent́ın 2010). Furthermore
it analyses verb raising and cross-serial depen-
dencies (Morrill, Valent́ın and Fadda 2009).
The types of the calculus of displacement D

classify strings over a vocabulary including a
distinguished placeholder 1 called the separator.
The sort i ∈ N of a (discontinuous) string is
the number of separators it contains and these
punctuate it into i + 1 continuous substrings.
The types of D are sorted into types Fi of sort
i as follows:

(2)
Fj := Fi\Fi+j under
Fi := Fi+j/Fj over

Fi+j := Fi·Fj product
F0 := I product unit
Fj := Fi+1↓kFi+j , 1 ≤ k ≤ i+1 infix

Fi+1 := Fi+j↑kFj , 1 ≤ k ≤ i+1 extract
Fi+j := Fi+1⊙kFj , 1 ≤ k ≤ i+1 disc. product

F1 := J disc. prod. unit

Where A is a type we call its sort sA. We
present the calculus using a special kind of se-
quent calculus which we call hypersequent cal-
culus. The set O of hyperconfigurations is de-
fined as follows, where Λ is the empty string
and [ ] is the metalinguistic separator:

(3) O ::= Λ | [ ] | F0 | Fi+1{O : . . . : O︸ ︷︷ ︸
i+1 O′s

} | O,O

Note that the hyperconfigurations are of a new
kind in which some type formulas, namely
the type formulas of sort greater than one,
label mother nodes rather than leaves, and
have a number of immediate subhypercon-
figurations equal to their sort. This signi-
fies a discontinuous type intercalated by these
subhyperconfigurations. Thus A{∆1 : . . . :
∆n} interpreted syntactically is formed by
strings α0+β1+α1+ · · ·+αn−1+βn+αn where
α0+1+α1+ · · ·+αn−1+1+αn ∈ A and β1 ∈

Glyn Morrill, Oriol Valentín

46



∆1, . . . , βn ∈ ∆n. We call these types
hyperleaves since in multimodal calculus they
would be leaves. The sort of a hyperconfigura-
tion is the number of separators it contains. A
hypersequent Γ ⇒ A comprises an antecedent
hyperconfiguration Γ of sort i and a succedent
type A of sort i. The vector

−→
A of a type A is

defined by:

(4)
−→
A =





A if sA = 0
A{[ ] : . . . : [ ]︸ ︷︷ ︸

sA [ ]
′

s

} if sA > 0

Where Γ1 is a hyperconfiguration of sort at least
k and Γ2 is a hyperconfiguration, Γ1|kΓ2 sig-
nifies the hyperconfiguration which is the re-
sult of replacing by Γ2 the kth separator in
Γ1. Where Γ is a hyperconfiguration of sort
i and Φ1, . . . ,Φi are hyperconfigurations, the
generalized wrap Γ ⊗ 〈Φ1, . . . ,Φi〉 is the result
of simultaneously replacing the successive sep-
arators in Γ by Φ1, . . . ,Φi respectively. In the
hypersequent calculus the discontinuous distin-
guished hyperoccurrence notation ∆〈Γ〉 refers
to a hyperconfiguration ∆ and continuous sub-
hyperconfigurations ∆1, . . . ,∆i and a discon-
tinuous subhyperconfiguration Γ of sort i such
that Γ⊗〈∆1, . . . ,∆i〉 is a continuous subhyper-
configuration. Technically, whereas the usual
distinguished occurrence notation ∆(Γ) refers
to a context containing a hole which is a leaf,
in hypersequent calculus the distinguished hy-
peroccurrence notation ∆〈Γ〉 refers to a context
containing a hole which may be a hyperleaf, a
hyperhole. The hypersequent calculus for the
calculus of displacement is given in Figure 1.

3 Displacement grammars

We now turn to D-grammars and the languages
they generate.

Given a vocabulary V = Σ∪{1} a lexical as-
signment α: A comprises a type A and a string
α ∈ V + − {1 + · · ·+ 1︸ ︷︷ ︸

n

: n > 0} of sort sA. A

lexicon is a finite set of lexical assignments.

We define a labelling σ of a hyperconfigu-
ration ∆ as a mapping sending each type oc-
currence A in ∆ to a string of sort sA. A
labelled hyperconfiguration ∆σ comprises a hy-
perconfiguration ∆ and a labelling σ of ∆. We
define the yield of a labelled hyperconfiguration
∆σ as follows:

id
−→
A ⇒ A

Γ ⇒ A ∆〈
−→
A〉 ⇒ B

Cut

∆〈Γ〉 ⇒ B

Γ ⇒ A ∆〈
−→
C 〉 ⇒ D

\L

∆〈Γ,
−−→
A\C〉 ⇒ D

−→
A,Γ ⇒ C

\R

Γ ⇒ A\C

Γ ⇒ B ∆〈
−→
C 〉 ⇒ D

/L

∆〈
−−→
C/B,Γ〉 ⇒ D

Γ,
−→
B ⇒ C

/R

Γ ⇒ C/B

∆〈
−→
A,

−→
B 〉 ⇒ D

·L

∆〈
−−→
A·B〉 ⇒ D

Γ1 ⇒ A Γ2 ⇒ B

·R

Γ1,Γ2 ⇒ A·B

∆〈Λ〉 ⇒ A

IL

∆〈
−→
I 〉 ⇒ A

IR

Λ ⇒ I

Γ ⇒ A ∆〈
−→
C 〉 ⇒ D

↓kL

∆〈Γ|k
−−−−→
A↓kC〉 ⇒ D

−→
A |kΓ ⇒ C

↓kR

Γ ⇒ A↓kC

Γ ⇒ B ∆〈
−→
C 〉 ⇒ D

↑kL

∆〈
−−−−→
C↑kB|kΓ〉 ⇒ D

Γ|k
−→
B ⇒ C

↑kR

Γ ⇒ C↑kB

∆〈
−→
A |k

−→
B 〉 ⇒ D

⊙kL

∆〈
−−−−→
A⊙kB〉 ⇒ D

Γ1 ⇒ A Γ2 ⇒ B

⊙kR

Γ1|kΓ2 ⇒ A⊙kB

∆〈[ ]〉 ⇒ A

JL

∆〈
−→
J 〉 ⇒ A

JR

[ ] ⇒ J

Figure 1: Calculus of displacement D

(5) yield(Λσ) = Λ
yield([ ]σ) = 1
yield((∆,Γ)σ) = yield(∆σ) + yield(Γσ)
yield(Aσ) = σ(A) for A of sort0
yield((A{∆1 : · · · : ∆sA})

σ) =
a1 + yield(∆

σ
1 ) + a2 + yield(∆

σ
2 ) + · · ·+

asA−1 + yield(∆
σ
sA) + asA

where in the last line of the definition A is of
sort greater than 0 and σ(A) is a1 + 1 + a2 +
· · ·+ asA−1 + 1 + asA.
A labelling σ of a hyperconfiguation ∆ is

compatible with a lexicon Lex if and only if
σ(A): A ∈ Lex for every A in ∆. The language
L(Lex, A) generated from lexicon Lex for type
A is defined as follows:

(6) L(Lex, A) = {yield(∆σ)| such that
∆ ⇒ A is a theorem of D and σ is com-
patible with Lex}

Theorem 1 The problem of recognition in the
class of D-grammars is decidable.

Proof. Since for every labelling σ compatible
with a lexicon for every type A, σ(A) contains
at least one symbol different from 1, the set
of labelled hyperconfigurations such that their
yield equals a given α is finite. Now as theorem-
hood in the D is decidable we have then that

On Calculus of Displacement

47



the problem of recognition is decidable since it
reduces to a finite number of tests of theorem-
hood. �

A Prolog parser/theorem-prover for the cal-
culus of displacement has been implemented. It
operates by Cut-free backward-chaining hyper-
sequent proof search.

4 Some non-context free

D-languages

Computer-generated output for the lexicon and
analyses of Dutch verb raising and cross-serial
dependencies are given in Appendix A. (We ab-
breviate ↓1, ⊙1 and ↑1 as ↓, ⊙ and ↑; only dis-
continuities with a single separator are consid-
ered in this paper.)

The non-context free language {anbncn| n >
0} is generated by the following assignments
where sA = sB = sC = 1 and the distinguished
type is A⊙I.

(7) b: J\B, J\(A↓B)
c: B\C
a: A/C

The assignment b: J\B generates 1+b: B.
Then combination with the assignment for c
generates 1+b+c: C and combination of this
with the assignment for a gives a+1+b+c: A.
Wrapping this around the product unit
gives a+b+c: A⊙I; alternatively b: J\(A↓B)
which gives 1+b: A↓B can infix to form
a+1+b+b+c: B which combines with c and a
again, and so on.

The non-context free copy lan-
guage {ww| w ∈ {a, b}+} is generated by the
following assignments where sA = sB = 0 and
sS = 1 and the distinguished type is S⊙I.

(8) a: J\(A\S), J\(S↓(A\S)), A
b: J\(B\S), J\(S↓(B\S)), B

Let G be a rewrite grammar containing pro-
ductions of the form A→ a and B → cD | Dc.
Replacing the former by a: A and the lat-
ter by c: (D↑I)↓B gives a displacement gram-
mar which generates the permutation closure
of L(G). It follows that there is a displacement
grammar for every language Mixn of strings
with equal numbers of symbols a1, . . . , an.
In particular, the non context-free language
Mix = {w ∈ {a, b, c}| |w|a = |w|b = |w|c > 0}
is generated by the following assignments:

(9) a: a, (S↑I)↓a
b: (a↑I)↓b
c: (b↑I)↓S

Here sA = sB = sC = 0 and the distin-
guished type is S. Appendix B contains a sam-
ple derivation of this displacement grammar for
Mix.

5 A lower bound on the

recognizing power of

D-grammars

In this section we prove that D-grammars rec-
ognize the permutation closures of context-free
languages.

This result is obtained using a restricted
fragment of the calculus. We define
the set T = {A| A is an atomic type} ∪
{(A↑I)↓B| A and B are atomic types}. A
T-hypersequent is a hypersequent such that the
types of the antecedent belong to T and the
succedent is an atomic type.

Lemma 2 (Rearrangement lemma) Let
∆ ⇒ S be a provable T-hypersequent. Then,
where D is a derivation of ∆ ⇒ S, D can be
rearranged into a new derivation D⋆ of ∆ ⇒ S
in such a way that the height of D is preserved,
and the last rule of D⋆ has an axiom S ⇒ S as
the right premise, i.e.:

D ⊢

...
↓L

∆ ⇒ S

❀ D⋆ ⊢
Γ([ ]) ⇒ ˇA S ⇒ S

↓L
∆ ⇒ S

where ∆ = Γ(ˇA↓S) for some atomic type A.
Proof.

Γ([ ]) ⇒ ˇP

∆(Q; [ ]) ⇒ ˇR S ⇒ S
↓L

∆(Q; ˇR↓S) ⇒ S
↓L

∆(Γ(ˇP↓Q); ˇR↓S) ⇒ S

❀

Γ([ ]) ⇒ ˇP ∆(Q; [ ]) ⇒ ˇR
↓L

∆(Γ(ˇP↓Q); [ ]) ⇒ ˇR S ⇒ S
↓L

∆(Γ(ˇP↓Q); ˇR↓S) ⇒ S
�

Lemma 3 (Fronting lemma) Let
∆(A) ⇒ S be a provable T -hypersequent with
a distinguished occurrence of type A. Then:

⊢ A,∆(Λ) ⇒ S

Glyn Morrill, Oriol Valentín

48



Proof. We proceed by induction on the
length of hypersequents. We shall write
A1, · · · , Aj , · · · , An ⇒ S for ∆(A) where we
consider Aj as the distinguished occurrence
we want to be displaced to the left of
the antecedent. By the previous lemma,
A1, · · · , Aj , · · · , An ⇒ S has a derivation with
last rule:1

A1, · · · , Ai−1, [ ], Ai+1 · · · , Aj , · · · , An ⇒ R↑I S ⇒ S
↓L

A1, · · · , Ai−1, (R↑I)↓S,Ai+1 · · · , Aj , · · · , An ⇒ S

Two cases are considered:
• Case Aj 6= (R↑I)↓S:
We have (R↑I)⊙I ⇒ R is provable. By ap-

plying the Cut rule to the left premise of the
last rule, we derive:

A1, · · · , Ai−1,Λ, Ai+1 · · · , Aj , · · · , An ⇒ R

Hence by induction hypothesis:

⊢ Aj , A1, · · · , Ai−1,Λ, Ai+1 · · · ,Λ, · · · , An ⇒ R

We apply now the ↑ right rule after the intro-
duction of the unit I:

Aj , A1, · · · , Ai−1, I, Ai+1 · · · ,Λ, · · · , An ⇒ R
↑R

Aj , A1, · · · , Ai−1, [ ], Ai+1 · · · ,Λ, · · · , An ⇒ R↑I

By the ↓ left rule:
Aj , A1, · · · , Ai−1, [ ], Ai+1 · · · ,Λ, · · · , An ⇒ R↑I S ⇒ S

↓L

Aj , A1, · · · , Ai−1, (R↑I)↓S,Ai+1 · · · ,Λ, · · · , An ⇒ S↑I

In this case, we have proved the fronting lemma.
• Case Aj = (R↑I)↓S:
As before we have the following provable hy-

persequent:

A1, · · · , Ai−1,Λ, Ai+1, · · · , An ⇒ R

By the right ↑ rule after the introduction of I,
we derive:

[ ], A1, · · · , Ai−1,Λ, Ai+1 · · · , Aj , · · · , An ⇒ R↑I

By the left ↓ rule:
[ ], A1, · · · , Ai−1,Λ, Ai+1, · · · , An ⇒ R↑I S ⇒ S

↓L
(R↑I)↓S,A1, · · · , Ai−1,Λ, Ai+1, · · · , An ⇒ S

We have proved the fronting lemma in case
Aj = (R↑I)↓S. In both cases then, the lemma
is proved. �

1Without loss of generality we write Aj to the
right of (R↑I)↓S.

We now show how the permutation closure
of any regular language (excluding the empty
string) can be recognized by a D-grammar. Let
G = (N,Σ, P, S) be a regular grammar. Sup-
pose G is right-linear. We define a D-grammar
comprising a lexicon LexG with atomic types
the nonterminals N of G. The vocabulary of
LexG is Σ ∪ {1}. For every production of the
form A→ c with A nonterminal and c ∈ Σ, we
stipulate that c: A ∈ LexG. And for every pro-
duction of the form B → cA (with A,B ∈ N
and c ∈ Σ), we stipulate c: (A↑I)↓B ∈ LexG.
We want to prove that the language recognized
by LexG with distinguished symbol S is the
permutation closure of the language generated
by G: L(LexG, S) = Perm(L(G,S)). The fol-
lowing lemmas prove the equation.

Lemma 4 L(G,S) ⊆ L(LexG, S).
The proof of this lemma proceeds by a sim-
ple induction on the length of the derivations
of G. The base case is obvious. For the in-
ductive case, suppose we have the derivation
whose rewritten string is a1 · · · anA such that
A → cB ∈ P . Then by induction hypoth-
esis a1 + · · · + an ∈ L(G,B) ⊆ L(LexG, B).
Hence there exists a labeled hyperconfiguration
∆σ whose types belong to the types of LG,
⊢ ∆ ⇒ B and the yield of ∆σ is a1 + · · ·+ an;
after the introduction of the unit:

I,∆ ⇒ B
↑R

[ ],∆ ⇒ B↑I A ⇒ A
↓L

(B↑I)↓A,∆ ⇒ A

Now, c: (B↑I)↓A ∈ LexG. Hence c+a1+ · · ·+
an ∈ L(LexG,A).
Lemma 5 Perm(L(G,S)) ⊆ L(LexG, S)
Proof. Let ∆ ⇒ S be a provable hyperse-
quent with a compatible labelling such that the
yield of ∆ is w ∈ L(G,S) and the types occur-
ring in ∆ belong to the set of types of LexG:

a1 : A1, · · · , an : An ⇒ S, w = a1 + · · ·+ an
By the fronting lemma, any type Ai can be
fronted, i.e.: ⊢ ai : Ai, a1 : A1, · · · , ai−1 :
Ai−1,Λ, ai+1 : Ai+1, · · · , an : An ⇒ S. By re-
peating this process via the fronting lemma, any
permutation of the initial w can be obtained.
�

Lemma 6 L(LexG, S) ⊆ Perm(L(G,S))

On Calculus of Displacement

49



Proof. We prove that for every atomic
type A ∈ N , L(LexG, A) ⊆ Perm(L(G,A)).
This entails in particular L(LexG, S) ⊆
Perm(L(G,S)) where S ∈ N is the distin-
guished nonterminal symbol. The proof goes by
induction on the height of derivations of hyper-
sequents ∆ ⇒ A such that the types of ∆ be-
long to the types of LexG. Case that the height
is 0: let A ∈ N be such that A→ a is a produc-
tion of G and a ∈ V . Then a : A ∈ Lex. Case
that the height is greater than 0: suppose we
have a LexG-derivation of ∆ ⇒ A with height
n+1. By the rearrangement lemma, the deriva-
tion of ∆ ⇒ A can modified in such a way that
the height of the derivation is preserved and one
of the premises is an axiom:

∆([ ]) ⇒ A↑I S ⇒ S
↓L

∆((A↑I)↓S) ⇒ S

By a simple reasoning we have ∆(Λ) ⇒ A
with height lesser or equal than the height of
∆([ ]) ⇒ A↑I. Since the types of ∆(Λ) be-
long to the types of LexG we can apply the
induction hypothesis, and then we have that
L(LexG, A) ⊆ Perm(L(G,A)). Now, every
w ∈ L(LexG, A) is the permutation of some
w̃ ∈ L(G,A). If we apply the rule S → cA we
get c+ w̃ ∈ L(G,S). But c: (A↑I)↓S. Hence, if
we insert c in w we get a permutation of c+ w̃.
�

Theorem 7 For every regular grammar G we
have L(LexG, S) = Perm(L(G,S))

Corollary 8 For every context-free language
L, the permutation closure of L Perm(L) is rec-
ognized by a D-grammar.

Proof. By an argument invoking properties of
semi-linear sets,2 we know that any permuta-
tion closure of a context-free language is equal
to the permutation closure of some regular lan-
guage. This reduces the proof of this corollary
to the class of regular languages. The previous
theorem proves it. �

2See van Benthem (1991).

Appendix A. Computer-generated
output for Dutch verb raising and
cross-serial dependencies
boeken : N : books
cecilia : N : c
de : N/CN : ι
jan : N : j
helpen : J\((N\Si)↓(N\(N\Si))) : λAλBλCλD((help D) (B C))
henk : N : h
kan : (N\Si)↓(N\S) : λAλB((isable B) (A B))
kunnen : J\((N\Si)↓(N\Si)) : λAλBλC((beable C) (B C))
las : N\(N\S) : reads
lezen : J\(N\(N\Si)) : λAread
nijlpaarden : CN : hippos
voeren : J\(N\(N\Si)) : λAfeed
wil : (N\Si)↓(N\S) : λAλB((wants B) (A B))
zag : (N\Si)↓(N\(N\S)) : λAλBλC((saw C) (A B))

(1) jan+boeken+las : S

N : j , N : books, N\(N\S) : reads ⇒ S

N ⇒ N

N ⇒ N S ⇒ S

\L

N,N\S ⇒ S

\L

N,N,N\(N\S) ⇒ S

((reads books) j)

(2) jan+boeken+kan+lezen : S

N : j , N : books, (N\Si)↓(N\S) :
λAλB((isable B) (A B)), J\(N\(N\Si)) : λAread ⇒ S

J
R

[
]

⇒
J

N
⇒

N

N
⇒

N
S
i{

[
]}

⇒
S
i

\
L

N
,
N

\
S
i{

[
]}

⇒
S
i

\
L

N
,
N

,
N

\
(N

\
S
i){

[
]}

⇒
S
i

\
L

N
,
N

,
[
],
J
\
(N

\
(N

\
S
i))

⇒
S
i

\
R

N
,
[
],
J
\
(N

\
(N

\
S
i))

⇒
N

\
S
i

N
⇒

N
S

⇒
S

\
L

N
,
N

\
S

⇒
S

↓
L

N
,
N

,
(N

\
S
i)↓

(N
\
S
),

J
\
(N

\
(N

\
S
i))

⇒
S

((isable j) ((read books) j))

(3) jan+boeken+wil+kunnen+lezen : S

N : j , N : books, (N\Si)↓(N\S) :
λAλB((wants B) (A B)), J\((N\Si)↓(N\Si)) :
λAλBλC((beable C) (B C)), J\(N\(N\Si)) : λAread ⇒ S

Glyn Morrill, Oriol Valentín

50



JR
[ ] ⇒ J

JR
[ ] ⇒ J

N ⇒ N

N ⇒ N Si{[ ]} ⇒ Si
\L

N,N\Si{[ ]} ⇒ Si
\L

N,N,N\(N\Si){[ ]} ⇒ Si
\L

N,N, [ ], J\(N\(N\Si)) ⇒ Si
\R

N, [ ], J\(N\(N\Si)) ⇒ N\Si

N ⇒ N Si{[ ]} ⇒ Si
\L

N,N\Si{[ ]} ⇒ Si
↓L

N,N, (N\Si)↓(N\Si){[ ]}, J\(N\(N\Si)) ⇒ Si
\L

N,N, [ ], J\((N\Si)↓(N\Si)), J\(N\(N\Si)) ⇒ Si
\R

N, [ ], J\((N\Si)↓(N\Si)), J\(N\(N\Si)) ⇒ N\Si

N ⇒ N S ⇒ S
\L

N,N\S ⇒ S
↓L

N,N, (N\Si)↓(N\S), J\((N\Si)↓(N\Si)), J\(N\(N\Si)) ⇒ S

((wants j) ((beable j) ((read books) j)))

(4) jan+cecilia+henk+de+nijlpaarden+zag+helpen+voeren : S

N : j , N : c, N : h, N/CN : ι,CN : hippos, (N\Si)↓(N\(N\S)) : λAλBλC((saw C) (A B)), J\((N\Si)↓(N\(N\Si))) :
λAλBλCλD((help D) (B C)), J\(N\(N\Si)) : λAfeed ⇒ S

CN ⇒ CN

JR

[ ] ⇒ J

JR

[ ] ⇒ J

N ⇒ N

N ⇒ N Si{[ ]} ⇒ Si

\L

N,N\Si{[ ]} ⇒ Si

\L

N,N,N\(N\Si){[ ]} ⇒ Si

\L

N,N, [ ], J\(N\(N\Si)) ⇒ Si

\R

N, [ ], J\(N\(N\Si)) ⇒ N\Si

N ⇒ N

N ⇒ N Si{[ ]} ⇒ Si

\L

N,N\Si{[ ]} ⇒ Si

\L

N,N,N\(N\Si){[ ]} ⇒ Si

↓L

N,N,N, (N\Si)↓(N\(N\Si)){[ ]}, J\(N\(N\Si)) ⇒ Si

\L

N,N,N, [ ], J\((N\Si)↓(N\(N\Si))), J\(N\(N\Si)) ⇒ Si

/L

N,N,N/CN ,CN , [ ], J\((N\Si)↓(N\(N\Si))), J\(N\(N\Si)) ⇒ Si

\R

N,N/CN ,CN , [ ], J\((N\Si)↓(N\(N\Si))), J\(N\(N\Si)) ⇒ N\Si

N ⇒ N

N ⇒ N S ⇒ S

\L

N,N\S ⇒ S

\L

N,N,N\(N\S) ⇒ S

↓L

N,N,N,N/CN ,CN , (N\Si)↓(N\(N\S)), J\((N\Si)↓(N\(N\Si))), J\(N\(N\Si)) ⇒ S

((saw j) ((help c) ((feed (ι hippos)) h)))

Appendix B. Computer generated derivation of accbab in Mix

a ⇒ a
IL

a, I ⇒ a
IL

a, I, I ⇒ a
IL

a, I, I, I ⇒ a
↑R

a, I, I, [ ] ⇒ a↑I b ⇒ b
↓L

a, I, I, (a↑I)↓b ⇒ b
↑R

a, I, [ ], (a↑I)↓b ⇒ b↑I

S ⇒ S
IL

S, I ⇒ S
↑R

S, [ ] ⇒ S↑I

a ⇒ a
IL

a, I ⇒ a
↑R

a, [ ] ⇒ a↑I b ⇒ b
↓L

a, (a↑I)↓b ⇒ b
↓L

S, (S↑I)↓a, (a↑I)↓b ⇒ b
↓L

a, I, (b↑I)↓S, (a↑I)↓b, (S↑I)↓a, (a↑I)↓b ⇒ b
↑R

a, [ ], (b↑I)↓S, (a↑I)↓b, (S↑I)↓a, (a↑I)↓b ⇒ b↑I S ⇒ S
↓L

a, (b↑I)↓S, (b↑I)↓S, (a↑I)↓b, (S↑I)↓a, (a↑I)↓b ⇒ S

On Calculus of Displacement

51



References

Joachim Lambek. 1958. The mathemat-
ics of sentence structure. American Math-
ematical Monthly, 65:154–170. Reprinted
in Buszkowski, Wojciech, Wojciech Mar-
ciszewski, and Johan van Benthem, editors,
1988, Categorial Grammar, Linguistic & Lit-
erary Studies in Eastern Europe volume 25,
John Benjamins, Amsterdam, 153–172.

J. Lambek. 1961. On the Calculus of Syntactic
Types. In Roman Jakobson, editor, Struc-
ture of Language and its Mathematical As-
pects, Proceedings of the Symposia in Applied
Mathematics XII, pages 166–178. American
Mathematical Society, Providence, Rhode Is-
land.

Michael Moortgat. 1995. Multimodal linguistic
inference. Journal of Logic, Language and
Information, 5:349–385. Also in Bulletin of
the IGPL, 3(2,3):371–401, 1995.

Michael Moortgat. 1997. Categorial Type Log-
ics. In Johan van Benthem and Alice ter
Meulen, editors, Handbook of Logic and Lan-
guage, pages 93–177. Elsevier Science B.V.
and The MIT Press, Amsterdam and Cam-
bridge, Massachusetts.

Glyn Morrill and Oriol Valent́ın. 2010. Dis-
placement Calculus. To appear in the Lam-
bek Festschrift, special issue of Linguistic
Analysis. http://arxiv.org/abs/1004.4181.

Glyn Morrill, Oriol Valent́ın, and Mario Fadda.
2009. Dutch Grammar and Processing: A
Case Study in TLG. In Peter Bosch, David
Gabelaia, and Jérôme Lang, editors, Logic,
Language, and Computation: 7th Interna-
tional Tbilisi Symposium, Revised Selected
Papers, number 5422 in Lecture Notes in
Artificial Intelligence, pages 272–286, Berlin.
Springer.

Glyn Morrill. 1990. Intensionality and
Boundedness. Linguistics and Philosophy,
13(6):699–726.

Glyn Morrill. 1992. Categorial Formalisa-
tion of Relativisation: Pied Piping, Islands,
and Extraction Sites. Technical Report LSI-
92-23-R, Departament de Llenguatges i Sis-
temes Informàtics, Universitat Politècnica de
Catalunya.

Glyn V. Morrill. 1994. Type Logical Grammar:
Categorial Logic of Signs. Kluwer Academic
Press, Dordrecht.

Glyn V. Morrill. forthcoming. Categorial
Grammar: Logical Syntax, Semantics, and
Processing. Oxford University Press.

M. Pentus. 1992. Lambek grammars are
context-free. Technical report, Dept. Math.
Logic, Steklov Math. Institute, Moskow.
Also published as ILLC Report, University of
Amsterdam, 1993, and in Proceedings Eighth
Annual IEEE Symposium on Logic in Com-
puter Science, Montreal, 1993.

Stuart Shieber. 1985. Evidence Against the
Context-Freeness
of Natural Language. Linguistics and Phi-
losophy, 8:333–343. Reprinted in Walter J.
Savitch, Emmon Bach, William Marsh and
Gila Safran-Naveh, editors, 1987, The Formal
Complexity of Natural Language, D. Reidel,
Dordrecht, 320–334.

J. van Benthem. 1991. Language in Action:
Categories, Lambdas, and Dynamic Logic.
Number 130 in Studies in Logic and the
Foundations of Mathematics. North-Holland,
Amsterdam. Revised student edition printed
in 1995 by MIT Press.

Glyn Morrill, Oriol Valentín

52


