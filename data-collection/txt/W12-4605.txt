



















































A Logical Characterization of Extended TAGs


Proceedings of the 11th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+11), pages 37–45,
Paris, September 2012.

A Logical Characterization of Extended TAGs

Uwe Mönnich
Theoretische Computerlinguistik

Universität Tübingen
Wilhelmstr. 19

72074 Tübingen
uwe.moennich@uni-tuebingen.de

Abstract

Context-free tree grammars, originally in-
troduced by Rounds ((Rounds, 1970)), are
powerful grammar devices for the defini-
tion of tree languages. In the present pa-
per, we consider a subclass of the class
of context-free tree languages, namely the
class of monadic simple context-free tree
languages. For this class of context-free
tree languages, a faithful rendering of ex-
tended TAGs, we show that it can be given
a simple logical characterization in terms of
monadic second-order transductions.

1 Introduction

The monadic simple context-free tree languages
belong to the class of mildly context-sensitive lan-
guages. The intuitive notion of mild context-
sensitivity has led to two competing candidates
claiming to be an exact formal rendering of
the intentions Joshi (1985) was trying to cap-
ture when introducing this concept. On the one
hand multiple context-free grammars and their
equivalents exhibiting a variety of wildly different
specifications provide impressive evidence that
this precise counterpart of the informal descrip-
tion of mild context-sensitivity constitutes a nat-
ural class. On the other hand the well-nested
subclass of the multiple context-free grammars
has recently been advertised as a formalization
more in accordance with Joshi’s original inten-
tions ((Kanazawa, 2009; Kuhlmann, 2007)). Both
candidates have counterparts in the realm of tree
languages and it is in this context that they are eas-
ily recognized to provide a mathematically pre-
cise framework for the characterization of two
leading linguistic models, minimalist syntax and

tree adjoining grammars (cf. (Harkema, 2001),
(Michaelis, 2001), (Kepser and Rogers, 2007),
(Mönnich, 1997; Mönnich, 2007)).

The tree languages in question are the multi-
ple regular tree languages ((Raoult, 1997)) and
the simple context-free tree languages ((Engel-
friet and Maneth, 2000)). Both language fami-
lies are proper subfamilies of the tree languages
generated by context-free hyperedge-replacement
graph grammars and the latter family is iden-
tical with the output languages of logical tree-
to-tree transductions applied to regular tree lan-
guages. The obvious question that poses it-
self is whether the two restricted rule formats
or their corresponding tree transducers, finite-
copying top-down tree transducers and simple
macro/attributed tree transducers, respectively,
can be given an equivalent logical characteriza-
tion in terms of restrictions on the logical formu-
las defining the relations in the target structures of
logical transductions. This is indeed the case. A
central result in a paper by Bloem and Engelfriet
(2000) states that the tree languages which are the
output of finite-copying top-down tree transduc-
ers applied to regular tree languages are exactly
the output tree languages of logical tree transduc-
ers which are direction preserving in the sense
that edges in the output trees correspond to di-
rected paths in the input trees. As a first step
towards an analogous result for simple context-
free tree languages the main theorem of the pa-
per shows that their monadic subclass, which pro-
vides a formalization of the extended version of
classical tree adjoining grammars (TAGs), has
indeed an easy logical characterization that puts
them on the same footing as their multiple regu-
lar counterparts and thereby closes the gap that

37



has remained with respect to a model-theoretic
description of TAGs.

The logical approach to the specification of lan-
guage classes involves a lot of advantageous prop-
erties that have paved the way to its application
to linguistic issues. Of particular importance in
the present context is the restricted translational
power of logical transductions. Monadic second-
order definable tree translations are, by definition,
of linear size increase. An output tree is at most k
times as large as its input tree where k denotes the
cardinality of the set of copy names. This bound
on the copying power of transduction devices that
are motivated by the model-theoretic idea of se-
mantic interpretation is the main reason why the
output languages of tree transductions definable
in terms of monadic second-order logic satisfy
in a particular perspicuous way the crucial crite-
ria Joshi has suggested for the family of mildly
context-sensitive languages.

One of our reviewers pointed out that there are
recent attempts at relaxing the linearity condition
of multiple context-free grammars and thus ar-
riving at a larger class of languages for which
it is claimed that they are still in accordance
with the intuitions behind the notions of mild
context-sensitivity. This extended class allows for
a limited amount of copying (Cf.(Bourreau et al.,
To appear; Kallmeyer, 2010)). Whether such a
formalization violates the criterion that poses a
bound on cross-serial dependencies seems to be
an open question. We favor a strong interpretation
of this criterion and therefore are inclined to con-
sider the realm of languages covered by logical
translations as the the currently leading contender
for an exact specification of Joshi’s proposal.

There are two main sources that have influ-
enced the ideas reported in this paper. Apart
from the fundamental work on graph structure and
monadic second-order logic due to Courcelle and
Engelfriet (2012) we have to mention a previous
attempt at giving a logical description of linear
inside-out context-free tree languages (cf. (Kolb
et al., 2000; Kolb et al., 2003)). This attempt
relied on a particular technique of regularizing
context-free tree grammars and does not lend it-
self to a treatment of arbitrary regular tree lan-
guages as input. The other principal source is pro-
vided by the characterization of tree transductions
that are specifiable in monadic second-order logic
in terms of attributed tree transducers with look-

ahead. This result was established by Bloem and
Engelfriet (2000) and constitutes together with
our own earlier proof of the equivalence between
simple context-free tree grammars and simple at-
tributed tree transducers (Mönnich, 2010) the ba-
sis for the main result of the present paper.

We have been at pains to expound the central
notions of this paper in an informal way. Our em-
phasis has been on motivating examples and con-
nections with recent work on syntax-directed se-
mantics. We hope not to have traded formal rigour
for transparency in the proof sketches below.

2 Preliminaries

This section defines familiar notions from the the-
ory of syntax-directed semantics together with
its model-theoretic counterpart, the theory of
monadic second-order transductions.

For any setA,A∗ is the set of all strings overA.
ε is the empty string, |w| is the length of a string
w. N denotes the set {0, 1, 2, 3, . . . } of nonnega-
tive integers.

A single-sorted or ranked alphabet is a finite
set Σ given with a mapping rank : Σ → N (the
rank mapping). We usually write Σ(n) to denote
the (unique) set of operators of rank n ∈ N ; we
also write σ(n) to indicate that rank(σ) = n.
The elements of Σ(0) are also called constants.
The set of trees TΣ is defined recursively as fol-
lows. Each constant of Σ, i.e., each symbol of
rank 0, is a tree. If σ is of rank k and t1, . . . , tk
are trees, then σ(t1, . . . , tk) is a tree. A tree
language L ⊆ TΣ over Σ is a subset of TΣ.
With each tree t ∈ TΣ we can associate a string
s ∈ Σ(0)∗ by reading the leaves of t from left
to right. This string is called the yield of t, de-
noted by yd(t). More formally, yd(t) = t if
t ∈ Σ(0), and yd(t) = yd(t1) · · · yd(tk) when-
ever t = σ(t1, . . . , tk) with k ≥ 1. The yield
of tree language L is defined straightforwardly as
yd(L) = {yd(t)|t ∈ L}.

If A is a set (of symbols) disjoint from Σ,
then TΣ(A) (alternatively T (Σ, A)) denotes the
set of trees TΣ∪A where all elements of A are
taken as constants. Let X = {x1, x2, x3, . . . }
be a fixed denumerable set of input variables
and Y = {y1, y2, y3, . . . } be a fixed denumer-
able set of parameters. Let X0 = Y0 = ∅
and, for k ≥ 1, Xk = {x1, . . . , xk} ⊂ X , and
Yk = {y1, . . . , yk} ⊂ Y . For k ≥ 0,m ≥ 0, t ∈
TΣ(Xk), and t1, . . . , tk ∈ TΣ(Xm), we denote by

38



t[t1, . . . , tk] the result of substituting ti for xi in
t. Note that t[t1, . . . , tk] is in TΣ(Xm). Note also
that for k = 0, t[t1, . . . , tk] = t.

Definition 1. A context-free tree (CFT ) gram-
mar is a tuple G = (F ,Ω, S, P ) where F and Ω
are ranked alphabets of non-terminals and termi-
nals, respectively, S ∈ F (0) is the start symbol
and P is a finite set of productions of the form

F (y1, . . . , ym)→ ξ

where F ∈ F and ξ is a tree over F , Ω and Ym.
If for every F ∈ F (m) each y ∈ Ym occurs

exactly once on the right-hand side of the cor-
responding rule then the context-free tree gram-
mar is called simple in the parameters (sp). The
family of tree languages which is generated by
context-free tree grammars which are simple in
their parameters is designated as CFTsp. Of par-
ticular interest to us is the situation where all the
non-terminals in a simple context-free tree gram-
mar are at most of arity 1. We call this class of
grammars monadic simple context-free grammars
CFTmon,sp.

Attributed tree transducers are a variant of at-
tribute grammars in which all attribute values are
trees. Besides meaning names which transmit in-
formation in a top-down manner, attributed tree
transducers contain explicit context names which
allow information to be passed up from a node to
its mother. Consequently, arbitrary tree walks can
be realized by attributed tree transducers.

Definition 2. An attributed tree transducer (ATT )
is a tuple

A = (Syn, Inh,Σ,Ω, αm, R),

where Syn and Inh are disjoint alphabets of syn-
thesized and inherited attributes, respectively, Σ
and Ω are ranked alphabets of input and out-
put symbols, respectively, αm is a synthesized at-
tribute, and R is a finite set of rules of the fol-
lowing form: For every σ ∈ Σ(m), for every
(γ, ρ) ∈ insσ (the set of inside attributes of σ),
there is exactly one rule in Rσ:

(γ, ρ)→ ξ

where ξ ∈ TΩ∪outσ and outσ is the set of outside
attributes of σ. Rules where ξ is (γ′, ρ′) are called
copy rules.

Definition 3. For every σ ∈ Σ(m), the set of
inside attributes is the set insσ = {(α, π)|α ∈
Syn} ∪ {(β, πi)|β ∈ Inh, i ≤ m} and the set of
outside attributes is the set outσ = {(β, π)|β ∈
Inh} ∪ {(α, πi)|α ∈ Syn, i ≤ m}. π and ρ are
path variables ranging over node occurrences in
the input tree.
ATTs with rules Rσ at an input symbol σ in

which each outside attribute occurs exactly once
are called simple attributed tree transducers. We
denote this class by ATTss,si.

The dependencies between attribute occur-
rences in an input tree s can be represented with
the help of Rσ. An instance of an attribute oc-
currence (α′, π′) depends on another occurrence
(α, π) if σ labels node u in s,Rσ contains the rule
(α′, π′)→ ξ and (α, π) labels one of the leaves in
ξ. The dependency graph D(s) of an input tree
s ∈ TΣ consists of the set of attribute occurrences
together with the dependencies according to the
rules in R. Reversing the direction of these de-
pendencies leads to the notion of a semantic graph
S(s) of an input tree s ∈ TΣ.

An attributed tree transducer is noncircular if
the paths of attribute dependencies are noncircu-
lar. It is well known that noncircular ATT s have
unique decorations dec, functions which assign
each attribute occurrence a tree over Ω ∪ outσ in
accordance with the productions Rσ.
Definition 4. The transduction realized by a non-
circular attributed tree transducer A is the func-
tion

τA = {(s, t)|s ∈ Tσ, t ∈ TΩ, t = decs(αm, �)}
Declarative tree transductions are inspired by

the model-theoretic technique of semantic inter-
pretation (Rabin, 1965). The idea is to define a re-
lational structure inside another structure in terms
of monadic second-order formulas. Both the input
and the output structures are finite trees regarded
as finite models.

The language to be used for the specification
of properties and relations satisfied by finite tree
structures is a straightforward extension of first-
order logic: monadic second-order logic (MSO).
The language of this logic contains variables that
range over subsets of the universe of discourse
and quantifiers that bind these (monadic) predi-
cate variables.

Given a ranked signature Σ the monadic
second-order language over trees in TΣ uses

39



atomic formulas labσ(x) (σ ∈ Σ), childi(x, y),
x = y and x ∈ X to convey the idea that node x
has label σ, that node y is the i-th child of node x,
that x and y are the same node and that node x is
a member of the set of nodes X .

Besides this extension of the classical first-
order logic the concept of a monadic second-order
definable tree transducer (MSOTT ) differs in
two further aspects from the method of semantic
interpretation as originally introduced by Rabin.
First, an MSO formula φ serves to define the do-
main of the transducer. The second modification
of the original method of semantic interpretation
provides for a fixed number k of disjoint copies
of the input tree. It is inside these disjoint copies
that the output tree is to be defined.

Definition 5. Given two ranked alphabets Σ and
Ω and a finite set C of copy names, a monadic
second-order definable tree transducer T from TΣ
to TΩ is specified by the following formulas of the
monadic second-order language over Σ:

(i) a closed formula ϕ, the domain formula

(ii) formulas νc(x) with c ∈ C, the node formu-
las

(iii) formulas ψδ,c(x) with c ∈ C and δ ∈ Ω, the
labelling formulas

(iv) formulas χi,c,d(x, y) with c, d ∈ C and i ≤
maximal arity of symbols in Ω, the edge for-
mulas

In sharp contrast with the syntax-directed trans-
formation devices a logic based tree transducer T
does not translate its input trees in a recursive top-
down manner. The translation τT realized by such
a declarative transducer has to be defined in terms
of the familiar ingredients of a relational structure.

Definition 6. The tree translation τT realized by
a monadic second-order definable tree transducer
T from TΣ to TΩ is a partial function τT : TΣ →
TΩ defined as follows. The domain of τT is {s ∈
TΣ | s |= ϕ}. For every s ∈ TΣ in its domain
τT (s) is the tree structure t ∈ TΩ such that:

Dt = {(c, x) ∈ C ×Ds | s |= νc(x)}
is the tree domain of t
Et = {((c, x), i, (d, y)) ∈ Dt × ar(Ω)×Dt |
s |= χi,c,d(x, y)} is the edge relation of t
where ar(Ω) denotes the rank of Ω
Lt = {((c, x), δ) ∈ Dt × Ω | s |= ψc,δ(x)}
is the labeling function of t

Logic based transducers are called relabeling
if they just relabel the nodes of an input tree.
Of particular interest regarding the logical anal-
ysis of monadic simple context-free tree gram-
mars are logic based tree transducers that pre-
serve or reverse the direction of the paths in the
input tree in their definitions of edges of output
trees. This family of tree transducers is designated
by MSOTTdir,rev. We depart slightly from this
definition in allowing defining upwards paths be-
tween a leaf node and the daughter of a dominat-
ing branching node. In this situation we speak of
a slight modification of MSOTTdir,rev.

3 From CFTmon,sp to 1S, 1I − ATTss,si
The proof of the logical characterization of
monadic simple context-free tree languages is
based on a procedural characterization of sim-
ple context-free tree languages as the output lan-
guages of simple attributed tree transducers with
one synthesized attribute only (Cf. Mönnich,
2010). The simulation of attributed tree trans-
ducers by monadic second-order tree transducers
along the lines of Bloem and Engelfriet (2000)
then leads to the logical characterization of the
( formal representation of ) extended TAGs in
terms of extremely simple edge definitions on the
input trees.

The translation below of a given CFTmon,spG
into an equivalent ATTspA is inspired by the
proofs of Lemma 5.11 in (Fülöp and Vogler,
1998) and of Lemma 6.1 in (Engelfriet and
Maneth, 1999).

Example 1. Consider the CFTmon,spG =
〈{S, S′, S, E, a, b, c, d}, {a, b, c, d, ε, St, S0t }, S′, P 〉
with P given as follows:

S′ −→ St(a, S(S(E)), d) a −→ a
S(y) −→ St(a, S(S(y)), d) b −→ b
S(y) −→ S0t (y) c −→ c
S(y) −→ St(b, y, c) d −→ d

E −→ ε

This grammar generates the language L =
{anbn, cn, dn}. A derivation of the string
aabbccdd is shown in figure 1. We simplified the
presentation in the sense that the last step involves
the simultaneous application of several expansion
rules.

40



S’ =⇒

St

dS

S

E

a
=⇒

St

dSt

dS

S

S

E

a

a

=⇒

St

dSt

dS

St

cS

E

b

a

a

=⇒

St

dSt

dS0t

St

cSt

cεb

b

a

a

Figure 1: Derivation of yield aabbccdd
.

Inspecting the rules of the example grammar
it turns out that they exhibit a particular nor-
mal form with a terminal symbol as head and a
possibly empty string of non-terminals. This is
not an accidental feature of our grammar, but a
general characteristic of monadic simple context-
free tree grammars. Context-free tree grammars
in which the root of the right-hand side of each
rule is labelled with a terminal symbol are in
Greibach normal form. It is well known that there
are context-free tree languages that do not admit
grammars in Greibach normal form. In the case
of tree languages generated by monadic simple
context-free tree grammars, however, the classi-
cal proof for context-free word grammars goes
through without any modification because of the
isomorphism between strings and monadic trees.
The preceding considerations lead to the follow-
ing lemma:

Lemma 1. For any monadic context-free tree
grammar G, there is a monadic context-free tree
grammar G′ in Greibach normal form such that

L(G′) = L(G)

Given these preparations we arrive at the fol-
lowing translation procedure from monadic sim-
ple context-free tree grammars to simple at-
tributed tree transducers.

Lemma 2. For every CFTmon,sp G, there is an
1S, 1I − ATTss,si AG that outputs the same lan-
guage when applied to the derivation trees of G.

Proof For a given CFGmon,sp G =
(F ,Ω, S, P ) an 1S, 1I − ATTss,si =
(Syn, Inh,Σ,Ω, αm, R)AG that outputs the
same language is defined from the rules of G in
the following way.

• Syn = {0, 1} with α = αm at the root node

• Inh = {y}

• Every symbol in the derivation trees is as-
signed one synthesized attribute.

• If p : N → ξ is an element of P then R′p is
specified for both the synthesized and inher-
ited attributes by structural induction on the
right-hand side ξ:

(q, π)→ ϑ(ξ),

where q = 0 or q = 1 depending on the arity
of N and ϑ substitutes a non-terminal M in
ξ by (q, πi) if the non-terminal M occurs in
the i-th non-terminal position in ξ and y by
(y, π)

(yj , πi)→ ϑ′(ξ′),
where ξ′ occurs in the argument position of
some non-terminal L in ξ that itself occupies
the i-th non-terminal position on the right-
hand side of p and ϑ′ is identical with ϑ ex-
cept for erasing every y in ξ′.

a
Example 2. Applying the construction just out-
lined to the context-free tree grammar of the last
example we obtain the following attributed tree
transducer A = (Syn, Inh,Σ,Ω, q0, R′):

• Syn = {0, 1}

• Inh = {y}

• Σ = {p0, . . . , p9}

• Ω = {a, b, c, d, ε, St, S0t }

41



• q0 = 0

• R′ = ⋃
pi

R′pi

R′p1 = {(0, π)→ St((0, π1), (1, π2), (0, π4)),
(y, π2)→ (1, π3)}

R′p2 = {(1, π)→ St((0, π1), (1, π2), (0, π4)),
(y, π2)→ (1, π3),
(y, π3)→ (y, π)}

R′p3 = {(1, π)→ S0t ((y, π))}
R′p4 = {|1, π)→ St((0, π1), (y, π)(0, π2))}
R′p5 = {(0, π)→ a}
R′p6 = {(0, π)→ b}
R′p7 = {(0, π)→ c}
R′p8 = {(0, π)→ d}
R′p9 = {(1, π)→ ε}

Given the constructed attributed tree transducer
A that is equivalent to the previously considered
monadic simple context-free tree grammar G we
can now repeat the example derivation displayed
in figure 1. We follow the conventional graphical
representation for drawing attributed derivation
trees together with the dependencies obtaining be-
tween synthesized and inherited attributes. Oc-
currences of synthesized and inherited attributes
in conjunction with their tree values appear to the
right and left, respectively, of the labelled nodes
of the input tree. Dependencies among the at-
tribute occurrences are indicated by arrows. Since
dependency graphs indicate the connection be-
tween an attribute leaf and the tree which is to
be substituted for it by building the output tree
bottom-up we will depart from the conventional
graphical representation in this respect and adopt
instead the tradition of semantic graphs which
construct the output tree top-down and therefore
are direction preserving as far as relations be-
tween attribute values are concerned.

Under the stated conventions the graphical rep-
resentation of the information transport in terms
of the constructed attributed tree transducerA that
corresponds to the example derivation of figure 1
looks as shown in figure 2. We have again sim-
plified the presentation in the sense that the appli-
cation of the “barred” rules is contracted into one
single step.

4 Equivalence of CFTmon,sp with (a
slight modification of) Non-Copying
MSOTTdir,rev

It was mentioned above that attributed tree trans-
ducers are attribute grammars with all their at-
tribute values restricted to trees and their seman-
tic functions to substitution of trees for depen-
dent leaves. Second–order substitution for inter-
nal nodes of trees is achieved through the upward
information transport that is made possible by the
inherited attributes. An analysis of the paths in
the semantic dependency graph of the attributed
tree transducer that corresponds to a monadic sim-
ple context-free tree grammar in Greibach normal
form reveals that these paths are either direction
preserving as in the case of minimalist grammars
or direction reversing.

Lemma 3. For every CFTmon,spG there is (a
slight modification of) an equivalent non-copying
reduced MSOTTdir,rev T .

Proof (Sketch) The main idea of the proof is a
careful case analysis of the translation procedure
that produces an equivalent attributed tree trans-
ducer from a given monadic simple context-free
tree grammar G. Inspection of this translation
procedure in the proof of Lemma 2 reveals the fol-
lowing types of right-hand sides in the rules of a
monadic simple context-free tree grammar. W.l.g
we consider only terminals with at most arity one:

• F −→ a The synthetic meaning at-
tribute gets the value a at the node corre-
sponding to the application of this rule.

• F −→ a(N) The synthetic meaning
attribute gets the value a(α, π) establishing
a dependency on the synthetic value of the
daughter.

• F −→ a(N(M)) In addition to the
previous case a further dependency is estab-
lished on the value of the sibling node corre-
sponding to the application of a production
with left-hand side M . This dependency is
mediated by a copy rule at the inherited con-
text attribute of the node corresponding to
an application of a production with left-hand
side N .

Iteration of the second case leads to further top-
down semantic dependencies. If monadic instead

42



p1,5,8
0

St(a,(1,1),d)

p9
0
ε

y
(1,3)

p4,6,7
1

St(b,(y,2),c)
y

(1,2)
p2,5,8

1
St(a,1,11),d)

y
(y,1)

p4,6,7
1

St(b,(y,12),c)
y

(1,12)
p3

1
S0t (y,11)

Figure 2: Attributed derivation tree with semantic dependency relations

of nullary non-terminals F (y) are rewritten the
parameter y mediates an one-step upwards infor-
mation transport by means of inherited copy rules.

From this case analysis it follows immediately
that all inherited rules are copy rules whereas all
synthetic rules add material to the output tree.
Furthermore, all upwards dependencies are me-
diated by an inherited rule establishing a depen-
dency on the synthetic value of a sibling node.

Based on this intermediate simpleATT we can
now define the equivalentMSO tree transducer T
by specifying the edge formulas χ1,γ,γ′(x, y) that
represent the dependencies between the attributes
and the node formulas ψd,γ(x) that define the la-
bels of the output tree. We assume again for sim-
plicity that the terminals of the given grammar G
are of arity at most one and that the copy rules in-
troduce a new output symbol id. The set of copy
nodes consists of the synthetic and the inherited
attribute. The edge formulas mirror the informa-
tion transport of rules of the form

(∗) (γ, ρ)→ a(γ′, ρ′)

where (γ, ρ) is an inside, (γ′, ρ′) an outside
attribute and a an output symbol or the new
symbol id. Such an edge formula χ1,γ,γ′(x, y)
is the disjunction of all formulas ∃z(labσ(z) ∧
edgej(z, x) ∨ edgej′(z, y)) for all input symbols
σ with j, j′ equal to 0 or 1 and (γ, πj) depending
on (γ′, πj′) inRσ. In the situation where j, j′ = 0
edge0(x, y) is shorthand for x = y.

The node formula ψd,γ(x) is the disjunction of
all formulas ∃z(labσ(z) ∧ edgej(z, x)) for all in-
put symbols σ where the same stipulations hold

as for the edge formulas and Rσ contains the rule
(*).

This easy transfer of the translation technique
developed by Bloem and Engelfriet (2000) to the
context of simple tree transducers with only one
synthesised and one inherited attribute reveals im-
mediately that the defined monadic second-order
tree translation fulfills the condition of being di-
rection preserving/reversing apart from the infor-
mation flow to and fro between the the synthetic
and inherited copies of the input trees.

Bloem and Engelfriet show how to prune all oc-
currences of these transitions. Since this makes
the ”inherited” copy of the input tree superflu-
ous we can erase it completely and arrive thus at
a reduced non-copying MSO-transduction in the
sense that every node is the head or tail of an edge.
The pruning step has introduced a slight modifica-
tion of the upward paths by linking some leafs to
the first daughter of a dominating branching node.

a
Applying the construction just outlined to the

information transport illustrated by figure 2 we
obtain the defined edges in the output of an MSO-
transduction shown in figure 3.

Lemma 4. For every (slight modification of a)
non-copying reduced MSOTTdir,rev T there is
an equivalent CFTmon,spGT .

Proof (Sketch) We adapt again to the present
situation the method of proof developed by Bloem
and Engelfriet (2000). We assume with them that
the root of the defined output tree of a given di-
rection preserving/reversing MSO tree transducer
T is identical to the root of the input tree. We as-

43



p1,5,8 St(a, x, d)

p9 εp4,6,7 St(b, x, c)p2,5,8 St(a, x, d)

p4,6,7 St(b, x, c)p3 S
0
t (x)

Figure 3: MSO-defined edges

sume furthermore that edges originate or end at
every node of the input tree. For nodes occurring
between endpoints of edges that correspond to di-
rection preserving paths this assumption could be
avoided by eliminating spurious rules like N −→
M from the equivalent context-free tree grammar.
Finally we observe that the upward edges of the
output tree may still be established between nodes
that are not immediate neighbours.

This non-local feature can be excluded by ap-
plying the inverse of the pruning action of the
previous lemma. If there is a non-local upward
edge from the leaf of the input tree to a sibling of
the first daughter of a dominating branching node
then we define a local path on an ”inherited” copy
of the input tree that connects the endpoints of the
original non-local upward edge.

The specification of the equivalent ATT re-
lies on information about the configuration of
the (local) edges in its immediate neighbourhood.
This information can be stored in the node la-
bels by means of a relabeling MSOTT T ′ that
extends each label by a vector of truth values of
the formulas for top-down and bottom-up edges
and for edges between nodes and their twins in
the other copy. To illustrate the simplest case
for a unary output symbol a and a ”synthesized”
copy name γ : If the formula ψa,γ(x) is true at
a node with extended label σ′ and the only true
edge formula is χ1,γ,γ(x, y) thenRσ′ contains just
(γ, ρ)→ a(γ, ρ1).

From this intermediate attributed tree trans-
ducer the equivalent monadic simple context-free
tree grammarGT is then defined as follows where
we use the notational conventions introduced in
the preliminary section (cf. (Mönnich, 2010)):

• F = Σ where the arity of non-terminals
is either zero or one depending on the oc-
currence of an inherited attribute assigned to
them in the input tree.

• Ω = Ω

• S = {σ(0)} with σ ∈ Σ labeling the root of
an input tree.

• For every σ ∈ Σ we construct a rule

σ(y1, . . . , yn)→ t

where t = COMP (ξ) and ξ is the right-
hand side of the only synthesized attribute α
in Rσ. The right-hand sides of rules in Rσ
are designated by rhs(γπ, σ) in the follow-
ing:

(i) If ξ = απi then

σ(y1, . . . , yn)→ t

where t = COMP (ξ) and ξ is the right-
hand side of the only synthesized attribute α
in Rσ. The right-hand sides of rules in Rσ
are designated by rhs(γπ, σ) in the follow-
ing:

(i) If ξ = απi then

COMP (ξ) = ρ(t)

where ρ labels the ith daughter of σ and

t = COMP (rhs(βπi, σ))

(ii) If ξ = βπ then

COMP (ξ) = y

44



(iii) If ξ = f(ξ1, . . . , ξr) for f ∈ Ω(r)

COMP(ξ) = f(COMP (ξ1), . . . , COMP (ξr))

By a routine inspection it is easy to verify that
the resulting grammar GA is indeed simple and
that it generates exactly the output language of T .

a
By lemmas 4 and 4 we obtain our main result.

Theorem 1. The monadic simple context-free tree
languages are exactly the output languages (of a
slight modification) of non-copying direction pre-
serving/reversing MSO definable tree transduc-
tions.

5 Envoi

The question of how to extend the logical char-
acterization given in the present paper to the full
class of simple context-free languages or to the
family of well-nested tree languages, for that mat-
ter, is still open. Our conjecture is that a similar
characterization holds for these languages. The
main step towards such a result would consist
in establishing a Greibach normal form for this
larger class of languages.

References
Roderick Bloem and Joost Engelfriet. 2000. A Com-

parison of Tree Transductions Defined by Monadic
Second-Order Logic and by Attribute Grammars. J.
Comp. System Sci., 61:1–50.

Pierre Bourreau, Sylvain Salvati, and Laura
Kallmeyer. To appear. On io-copying and
mildly context-sensitive formalisms. In Proceed-
ings of Formal Grammar 2012. Lecture Notes in
Computer Science.

Bruno Courcelle and Joost Engelfriet. 2012. Graph
Structure and Monadic Second-Order Logic. A
Language-Theoretic Approach. Cambridge Univer-
sity Press.

Joost Engelfriet and Sebastian Maneth. 1999. Macro
Tree Transducers, Attribute Grammars, and MSO
Definable Tree Translations. Information and Com-
putation, 154:34–91.

Joost Engelfriet and Sebastian Maneth. 2000.
Tree Languages Generated by Context-Free Graph
Grammars. In Hartmut Ehrig et al., editor, Graph
Transformation, number 1764 in LNCS, pages 15–
29. Springer.

Zoltán Fülöp and Heiko Vogler. 1998. Syntax-
Directed Semantics - Formal Models Based on Tree
Transducers. Springer, New York and Berlin.

Hendrik Harkema. 2001. Parsing Minimalist Lan-
guages. Ph.D. thesis, University of California at
Los Angeles.

Laura Kallmeyer. 2010. On mildly-context-sensitive
non-linear rewriting. Research on Language and
Computation, 8:341–363.

Makoto Kanazawa. 2009. The convergence of
well-nested mildly context-sensitive grammar for-
malisms. In 14th Conference on Formal Grammar.
Slides available at http://research.nii.jp/˜kanazawa/.

Stephan Kepser and James Rogers. 2007. The equiv-
alence of tree adjoining grammars and monadic
linear context-free tree grammars. In M. Kracht,
G. Penn, and E. Stabler, editors, Mathematics of
Language 10.

Hans-Peter Kolb, Uwe Mönnich, and Frank Morawi-
etz. 2000. Descriptions of cross-serial dependen-
cies. Grammars, 3(2/3):189–216.

Hans-Peter Kolb, Jens Michaelis, Uwe Mönnich, and
Frank Morawietz. 2003. An operational and deno-
tational approach to non-context-freeness. Theoret-
ical Computer Science, 293:261–289.

Marco Kuhlmann. 2007. Dependency Structures and
and Lexicalized Grammars. Ph.D. thesis, Saarland
University.

Jens Michaelis. 2001. On Formal Properties of Mini-
malist Grammar, volume 13 of Linguistics in Pots-
dam. Universität Potsdam.

Uwe Mönnich. 1997. Adjunction as substitution. In
G-J. M. Kruijff, G. Morill, and R. Oehrle, editors,
Formal Grammar ’97, pages 169–178.

Uwe Mönnich. 2007. Minimalist syntax, multiple
regular tree grammars and direction preserving tree
transductions. In J. Rogers and S. Kepser, editors,
Proceedings Model Theoretic Syntax at 10.

Uwe Mönnich. 2010. Well-nested tree languages
and attributed tree transducers. In Srinivas Ban-
galore, Robert Frank, and Maribel Romero, ed-
itors, TAG+10. Proceedings of the 10th Interna-
tional Workshop on Tree Adjoining Grammars and
Related Formalims.

Michael O. Rabin. 1965. A simple method for unde-
cidability proofs and some applications. In Y. Bar-
Hillel, editor, Logic Methodology and Philosophy
of Science II, pages 58–68. North-Holland, Amster-
dam.

Jean-Claude Raoult. 1997. Rational Tree Relations.
Bull. Belg. Math. Soc., 4:149–176.

William C. Rounds. 1970. Tree-oriented proofs of
some theorems on context-free and indexed lan-
guages. In 2nd Annual ACM Symposium on Theory
of Computing, pages 109–116.

45


