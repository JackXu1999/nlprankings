



















































Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics


Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 136–145
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-1013

Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 136–145
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-1013

Deep Neural Machine Translation with Linear Associative Unit

Mingxuan Wang1 Zhengdong Lu2 Jie Zhou2 Qun Liu4,5
1Mobile Internet Group, Tencent Technology Co., Ltd

wangmingxuan@ict.ac.cn
2DeeplyCurious.ai

3 Insititute of Deep Learning Research, Baidu Co., Ltd
4 Institute of Computing Technology, Chinese Academy of Sciences

5ADAPT Centre, School of Computing, Dublin City University

Abstract

Deep Neural Networks (DNNs) have
provably enhanced the state-of-the-art
Neural Machine Translation (NMT)
with their capability in modeling com-
plex functions and capturing com-
plex linguistic structures. However
NMT systems with deep architecture
in their encoder or decoder RNNs of-
ten suffer from severe gradient diffu-
sion due to the non-linear recurrent ac-
tivations, which often make the opti-
mization much more difficult. To ad-
dress this problem we propose novel
linear associative units (LAU) to re-
duce the gradient propagation length
inside the recurrent unit. Different
from conventional approaches (LSTM
unit and GRU), LAUs utilizes lin-
ear associative connections between in-
put and output of the recurrent unit,
which allows unimpeded information
flow through both space and time di-
rection. The model is quite simple,
but it is surprisingly effective. Our
empirical study on Chinese-English
translation shows that our model with
proper configuration can improve by
11.7 BLEU upon Groundhog and the
best reported results in the same set-
ting. On WMT14 English-German task
and a larger WMT14 English-French
task, our model achieves comparable
results with the state-of-the-art.

1 Introduction

Neural Machine Translation (NMT) is an end-
to-end learning approach to machine transla-

tion which has recently shown promising re-
sults on multiple language pairs (Luong et al.,
2015; Shen et al., 2015; Wu et al., 2016; Zhang
et al., 2016; Tu et al., 2016; Zhang and Zong,
2016; Jean et al., 2015; Meng et al., 2015). Un-
like conventional Statistical Machine Transla-
tion (SMT) systems (Koehn et al., 2003; Chi-
ang, 2005; Liu et al., 2006; Xiong et al., 2006;
Mi et al., 2008) which consist of multiple sep-
arately tuned components, NMT aims at build-
ing upon a single and large neural network
to directly map input text to associated output
text. Typical NMT models consists of two re-
current neural networks (RNNs), an encoder to
read and encode the input text into a distributed
representation and a decoder to generate trans-
lated text conditioned on the input representa-
tion (Sutskever et al., 2014; Bahdanau et al.,
2014).

Driven by the breakthrough achieved in
computer vision (He et al., 2015; Srivastava
et al., 2015), research in NMT has recently
turned towards studying Deep Neural Net-
works (DNNs). Wu et al. (2016) and Zhou et
al. (2016) found that deep architectures in both
the encoder and decoder are essential for cap-
turing subtle irregularities in the source and tar-
get languages. However, training a deep neu-
ral network is not as simple as stacking lay-
ers. Optimization often becomes increasingly
difficult with more layers. One reasonable ex-
planation is the notorious problem of vanish-
ing/exploding gradients which was first studied
in the context of vanilla RNNs (Pascanu et al.,
2013b). Most prevalent approaches to solve
this problem rely on short-cut connections be-
tween adjacent layers such as residual or fast-
forward connections (He et al., 2015; Srivas-
tava et al., 2015; Zhou et al., 2016). Differ-

136

https://doi.org/10.18653/v1/P17-1013
https://doi.org/10.18653/v1/P17-1013


ent from previous work, we choose to reduce
the gradient path inside the recurrent units and
propose a novel Linear Associative Unit (LAU)
which creates a fusion of both linear and non-
linear transformations of the input. Through
this design, information can flow across sev-
eral steps both in time and in space with lit-
tle attenuation. The mechanism makes it easy
to train deep stack RNNs which can efficiently
capture the complex inherent structures of sen-
tences for NMT. Based on LAUs, we also pro-
pose a NMT model , called DEEPLAU, with
deep architecture in both the encoder and de-
coder.

Although DEEPLAU is fairly simple, it
gives remarkable empirical results. On the
NIST Chinese-English task, DEEPLAU with
proper settings yields the best reported result
and also a 4.9 BLEU improvement over a
strong NMT baseline with most known tech-
niques (e.g, dropout) incorporated. On WMT
English-German and English-French tasks, it
also achieves performance superior or compa-
rable to the state-of-the-art.

2 Neural machine translation

A typical neural machine translation system
is a single and large neural network which
directly models the conditional probability
p(y|x) of translating a source sentence x =
{x1, x2, · · · , xTx} to a target sentence y =
{y1, y2, · · · , yTy}.

Attention-based NMT, with RNNsearch as
its most popular representative, generalizes the
conventional notion of encoder-decoder in us-
ing an array of vectors to represent the source
sentence and dynamically addressing the rele-
vant segments of them during decoding. The
process can be explicitly split into an encoding
part, a decoding part and an attention mech-
anism. The model first encodes the source
sentence x into a sequence of vectors c =
{h1, h2, · · · , hTx}. In general, hi is the anno-
tation of xi from a bi-directional RNN which
contains information about the whole sentence
with a strong focus on the parts of xi. Then, the
RNNsearch model decodes and generates the
target translation y based on the context c and
the partial traslated sequence y<t by maximiz-
ing the probability of p(yi|y<i, c). In the atten-

tion model, c is dynamically obtained accord-
ing to the contribution of the source annotation
made to the word prediction. This is called au-
tomatic alignment (Bahdanau et al., 2014) or
attention mechanism (Luong et al., 2015), but
it is essentially reading with content-based ad-
dressing defined in (Graves et al., 2014). With
this addressing strategy the decoder can attend
to the source representation that is most rele-
vant to the stage of decoding.

Deep neural models have recently achieved
a great success in a wide range of problems. In
computer vision, models with more than 100
convolutional layers have outperformed shal-
low ones by a big margin on a series of im-
age tasks (He et al., 2015; Srivastava et al.,
2015). Following similar ideas of building
deep CNNs, some promising improvements
have also been achieved on building deep NMT
systems. Zhou et al. (2016) proposed a new
type of linear connections between adjacent
layers to simplify the training of deeply stacked
RNNs. Similarly, Wu et al. (2016) introduced
residual connections to their deep neural ma-
chine translation system and achieve great im-
provements. However the optimization of deep
RNNs is still an open problem due to the mas-
sive recurrent computation which makes the
gradient propagation path extremely tortuous.

3 Model Description

In this section, we discuss Linear Associative
Unit (LAU) to ease the training of deep stack
of RNNs. Based on this idea, we further pro-
pose DEEPLAU, a neural machine translation
model with a deep encoder and decoder.

3.1 Recurrent Layers

A recurrent neural network (Williams and
Zipser, 1989) is a class of neural network
that has recurrent connections and a state (or
its more sophisticated memory-like extension).
The past information is built up through the
recurrent connections. This makes RNN ap-
plicable for sequential prediction tasks of ar-
bitrary length. Given a sequence of vectors
x = {x1,x2, · · · ,xT } as input, a standard
RNN computes the sequence hidden states h =
{h1,h2, · · · ,hT } by iterating the following

137



equation from t = 1 to t = T :

ht = φ(xt,ht−1) (1)

φ is usually a nonlinear function such as com-
position of a logistic sigmoid with an affine
transformation.

3.2 Gated Recurrent Unit
It is difficult to train RNNs to capture long-
term dependencies because the gradients tend
to either vanish (most of the time) or ex-
plode. The effect of long-term dependencies is
dropped exponentially with respect to the gra-
dient propagation length. The problem was ex-
plored in depth by (Hochreiter and Schmidhu-
ber, 1997; Pascanu et al., 2013b). A successful
approach is to design a more sophisticated acti-
vation function than a usual activation function
consisting of gating functions to control the
information flow and reduce the propagation
path. There is a long thread of work aiming
to solve this problem, with the long short-term
memory units (LSTM) being the most salient
examples and gated recurrent unit (GRU) being
the most recent one (Hochreiter and Schmidhu-
ber, 1997; Cho et al., 2014). RNNs employing
either of these recurrent units have been shown
to perform well in tasks that require capturing
long-term dependencies.

GRU can be viewed as a slightly more dra-
matic variation on LSTM with fewer parame-
ters. The activation function is armed with two
specifically designed gates called update and
reset gates to control the flow of information
inside each hidden unit. Each hidden state at
time-step t is computed as follows

ht = (1− zt)� ht−1 + zt � h̃t (2)
where � is an element-wise product, zt is the
update gate, and h̃t is the candidate activation.

h̃t = tanh(Wxhxt +Whh(rt � ht−1)) (3)
where rt is the reset gate. Both reset and update
gates are computed as :

rt = σ(Wxrxt +Whrht−1) (4)

zt = σ(Wxzxt +Whzht−1) (5)

This procedure of taking a linear sum between
the existing state and the newly computed state
is similar to the LSTM unit.

3.3 Linear Associative Unit
GRU can actually be viewed as a non-linear ac-
tivation function with gating mechanism. Here
we propose LAU which extends GRU by hav-
ing an additional linear transformation of the
input in its dynamics. More formally, the state
update function becomes

ht =((1− zt)� ht−1 + zt � h̃t)� (1− gt)
+ gt �H(xt).

(6)

Here the updated ht has three sources: 1) the
direct transfer from previous state ht−1, 2) the
candidate update h̃t, and 3) a direct contribu-
tion from the input H(xt). More specifically,
h̃t contains the nonlinear information of the in-
put and the previous hidden state.

h̃t = tanh(ft� (Wxhxt)+rt� (Whhht−1)),
(7)

where ft and rt express how much of the non-
linear abstraction are produced by the input xt
and previous hidden state ht, respectively. For
simplicity, we set ft = 1 − rt in this paper
and find that this works well in our experi-
ments. The term H(xt) is usually an affine
linear transformation of the input xt to mach
the dimensions of ht, where H(xt) = Wxxt.
The associated term gt (the input gate) decides
how much of the linear transformation of the
input is carried to the hidden state and then the
output. The gating function rt (reset gate) and
zt (update gate) are computed following Equa-
tion (4) and (5) while gt is computed as

gt = σ(Wxgxt +Whght−1). (8)

The term gt � H(xt) therefore offers a di-
rect way for input xt to go to later hidden lay-
ers, which can eventually lead to a path to the
output layer when applied recursively. This
mechanism is potentially very useful for trans-
lation where the input, no matter whether it is
the source word or the attentive reading (con-
text), should sometimes be directly carried to
the next stage of processing without any sub-
stantial composition or nonlinear transforma-
tion. To understand this, imagine we want to
translate a English sentence containing a rela-
tive rare entity name such as “Bahrain” to Chi-
nese: LAU is potentially able to retain the em-
bedding of this word in its hidden state, which

138



will otherwise be prone to serious distortion
due to the scarcity of training instances for it.

3.4 DEEPLAU

••• 

••• 

••• 

••• 

••• 

••• 

𝑥1 𝑥2 𝑥𝑛 <s> 𝑦1 𝑦𝑚 

Attention 

••• 

••• 

••• 

softmax 
𝑦1 𝑦2 </s> 

𝑐𝑡 

𝑠𝑖 

Encoder Decoder 

Figure 1: DEEPLAU: a neural machine trans-
lation model with deep encoder and decoder.

Graves et al. (2013) explored the advantages
of deep RNNs for handwriting recognition and
text generation. There are multiple ways of
combining one layer of RNN with another.
Pascanu et al. (2013a) introduced Deep Tran-
sition RNNs with Skip connections (DT(S)-
RNNs). Kalchbrenner et al. (2015) proposed to
make a full connection of all the RNN hidden
layers. In this work we employ vertical stack-
ing where only the output of the previous layer
of RNN is fed to the current layer as input. The
input at recurrent layer ` (denoted as x`t) is ex-
actly the output of the same time step at layer
` − 1 (denoted as h`−1t ). Additionally, in or-
der to learn more temporal dependencies, the
sequences can be processed in different direc-
tions. More formally, given an input sequence
x = (x1, ...,xT ), the output on layer ` is

h
(`)
t =

{
xt, ` = 1

φ`(h
(`)
t+d,h

(`−1)
t ), ` > 1

(9)

where

• h(`)t gives the output of layer ` at location
t.

• φ is a recurrent function and we choose
LAUs in this work.

• The directions are marked by a direction
term d ∈ {−1, 1}. If we fixed d to −1,
the input will be processed in forward di-
rection, otherwise backward direction.

The deep architecture of DEEPLAU, as
shown in Figure 1, consists of three parts: a
stacked LAU-based encoder, a stacked LAU-
based decoder and an improved attention
model.

Encoder One shortcoming of conventional
RNNs is that they are only able to make use
of previous context. In machine translation,
where whole source utterances are transcribed
at once, there is no reason not to exploit fu-
ture context as well. Thus bi-directional RNNs
are proposed to integrate information from the
past and the future. The typical bidirectional
approach processes the raw input in backward
and forward direction with two separate lay-
ers, and then concatenates them together. Fol-
lowing Zhou et al. (2016), we choose another
bidirectional approach to process the sequence
in order to learn more temporal dependencies
in this work. Specifically, an RNN layer pro-
cesses the input sequence in forward direction.
The output of this layer is taken by an upper
RNN layer as input, processed in reverse direc-
tion. Formally, following Equation (9), we set
d = (−1)`. This approach can easily build a
deeper network with the same number of pa-
rameters compared to the classical approach.
The final encoder consists of Lenc layers and
produces the output hLenc to compute the con-
ditional input c to the decoder.

Attention Model The alignment model αt,j
scores how well the output at position t
matches the inputs around position j based on
s1t−1 and h

Lenc
j where h

Lenc
j is the top-most layer

of the encoder at step j and s1t−1 is the first
layer of decoder at step t − 1. It is intu-
itively beneficial to exploit the information of
yt−1 when reading from the source sentence
representation, which is missing from the im-
plementation of attention-based NMT in (Bah-
danau et al., 2014). In this work, we build a
more effective alignment path by feeding both
the previous hidden state s1t−1 and the context
word yt−1 to the attention model, inspired by
the recent implementation of attention-based

139



NMT1. The conditional input cj is a weighted
sum of attention score αt,j and encoder output
hLenc . Formally, the calculation of cj is

cj =

t=Lx∑

t=1

αt,jh
Lenc
t (10)

where

et,j = v
T
a σ(Was

1
t−1 +Uah

Lenc
j +Wyyt−1)

αt,j = softmax(et,j).
(11)

σ is a nonlinear function with the informa-
tion of yt−1 (its word embedding being yt−1)
added. In our preliminary experiments, we
found that GRU works slightly better than tanh
function, but we chose the latter for simplicity.

Decoder The decoder follows Equation (9)
with fixed direction term d = −1. At the first
layer, we use the following input:

xt = [ct,yt−1]

where yt−1 is the target word embedding at
time step t, ct is dynamically obtained follows
Equation (10). There are Ldec layers of RNNs
armed with LAUs in the decoder. At infer-
ence stage, we only utilize the top-most hidden
states sLdec to make the final prediction with a
softmax layer:

p(yi|y<i,x) = softmax(WosLdeci ) (12)
.

4 Experiments

4.1 Setup

We mainly evaluated our approaches on the
widely used NIST Chinese-English translation
task. In order to show the usefulness of our
approaches, we also provide results on other
two translation tasks: English-French, English-
German. The evaluation metric is BLEU2 (Pa-
pineni et al., 2002).

For Chinese-English, our training data con-
sists of 1.25M sentence pairs extracted from

1github.com/nyu-dl/dl4mt-tutorial/
tree/master/session2

2 For Chinese-English task, we apply case-insensitive
NIST BLEU. For other tasks, we tokenized the reference
and evaluated the performance with multi-bleu.pl. The
metrics are exactly the same as in previous work.

LDC corpora3, with 27.9M Chinese words and
34.5M English words respectively. We choose
NIST 2002 (MT02) dataset as our development
set, and the NIST 2003 (MT03), 2004 (MT04)
2005 (MT05) and 2006 (MT06) datasets as our
test sets.

For English-German, to compare with the
results reported by previous work (Luong et al.,
2015; Zhou et al., 2016; Jean et al., 2015), we
used the same subset of the WMT 2014 train-
ing corpus that contains 4.5M sentence pairs
with 91M English words and 87M German
words. The concatenation of news-test 2012
and news-test 2013 is used as the validation set
and news-test 2014 as the test set.

To evaluate at scale, we also report the re-
sults of English-French. To compare with the
results reported by previous work on end-to-
end NMT (Sutskever et al., 2014; Bahdanau
et al., 2014; Jean et al., 2015; Luong et al.,
2014; Zhou et al., 2016), we used the same sub-
set of the WMT 2014 training corpus that con-
tains 12M sentence pairs with 304M English
words and 348M French words. The concate-
nation of news-test 2012 and news-test 2013
serves as the validation set and news-test 2014
as the test set.

4.2 Training details
Our training procedure and hyper parameter
choices are similar to those used by (Bahdanau
et al., 2014). In more details, we limit the
source and target vocabularies to the most fre-
quent 30K words in both Chinese-English and
English-French. For English-German, we set
the source and target vocabularies size to 120K
and 80K, respectively.

For all experiments, the dimensions of word
embeddings and recurrent hidden states are
both set to 512. The dimension of ct is also
of size 512. Note that our network is more
narrow than most previous work where hidden
states of dimmention 1024 is used. we initial-
ize parameters by sampling each element from
the Gaussian distribution with mean 0 and vari-
ance 0.042.

Parameter optimization is performed using
stochastic gradient descent. Adadelta (Zeiler,

3The corpora include LDC2002E18, LDC2003E07,
LDC2003E14, Hansards portion of LDC2004T07,
LDC2004T08 and LDC2005T06.

140



SYSTEM MT03 MT04 MT05 MT06 AVE.
Existing systems

Moses 31.61 33.48 30.75 30.85 31.67
Groundhog 31.92 34.09 31.56 31.12 32.17
COVERAGE 34.49 38.34 34.91 34.25 35.49
MEMDEC 36.16 39.81 35.91 35.98 36.95

Our deep NMT systems
DEEPGRU 33.21 36.76 33.05 33.30 34.08
DEEPLAU 39.35 41.15 38.07 37.29 38.97
DEEPLAU +Ensemble + PosUnk 42.21 43.85 44.75 42.58 43.35

Table 1: Case-insensitive BLEU scores on Chinese-English translation.

2012) is used to automatically adapt the learn-
ing rate of each parameter (� = 10−6 and
ρ = 0.95). To avoid gradient explosion, the
gradients of the cost function which had `2
norm larger than a predefined threshold τ were
normalized to the threshold (Pascanu et al.,
2013a). We set τ to 1.0 at the beginning and
halve the threshold until the BLEU score does
not change much on the development set. Each
SGD is a mini-batch of 128 examples. We train
our NMT model with the sentences of length
up to 80 words in the training data, while for
the Moses system we use the full training data.
Translations are generated by a beam search
and log-likelihood scores are normalized by
sentence length. We use a beam width of 10
in all the experiments. Dropout was also ap-
plied on the output layer to avoid over-fitting.
The dropout rate is set to 0.5. Except when
otherwise mentioned, NMT systems are have 4
layers encoders and 4 layers decoders.

4.3 Results on Chinese-English
Translation

Table 1 shows BLEU scores on Chinese-
English datasets. Clearly DEEPLAU leads to
a remarkable improvement over their competi-
tors. Compared to DEEPGRU, DEEPLAU is
+4.89 BLEU score higher on average four test
sets, showing the modeling power gained from
the liner associative connections. We suggest it
is because LAUs apply adaptive gate function
conditioned on the input which make it able to
automatically decide how much linear informa-
tion should be transferred to the next step.

To show the power of DEEPLAU, we also
make a comparison with previous work. Our

best single model outperforms both a phrased-
based MT system (Moses) as well as an open
source attention-based NMT system (Ground-
hog) by +7.3 and +6.8 BLEU points respec-
tively on average. The result is also bet-
ter than some other state-of-the-art variants of
attention-based NMT mode with big margins.
After PosUnk and ensemble, DEEPLAU seizes
another notable gain of +4.38 BLEU and out-
perform Moses by +11.68 BLEU.

4.4 Results on English-German
Translation

The results on English-German translation are
presented in Table 2. We compare our NMT
systems with various other systems including
the winning system in WMT14 (Buck et al.,
2014), a phrase-based system whose language
models were trained on a huge monolingual
text, the Common Crawl corpus. For end-to-
end NMT systems, to the best of our knowl-
edge, Wu et al. (2016) is currently the SOTA
system and about 4 BLEU points on top of pre-
viously best reported results even though Zhou
et al. (2016) used a much deeper neural net-
work4.

Following Wu et al. (2016), the BLEU score
represents the averaged score of 8 models we
trained. Our approach achieves comparable re-
sults with SOTA system. As can be seen from
the Table 2, DeepLAU performs better than the
word based model and even not much worse
than the best wordpiece models achieved by
Wu et al. (2016). Note that DEEPLAU are sim-

4It is also worth mentioning that the result reported
by Zhou et al. (2016) does not include PosUnk, and this
comparison is not fair enough.

141



SYSTEM Architecture Voc. BLEU
Existing systems

Buck et al. (2014) Winning WMT14 system phrase-based + large LM - 20.7
Jean et al. (2015) gated RNN with search + LV + PosUnk 500K 19.4
Luong et al. (2015) LSTM with 4 layers + dropout + local att. + PosUnk 80K 20.9
Shen et al. (2015) gated RNN with search + PosUnk + MRT 80K 20.5
Zhou et al. (2016) LSTM with 16 layers + F-F connections 80K 20.6
Wu et al. (2016) LSTM with 8 laysrs + RL-refined Word 80K 23.1
Wu et al. (2016) LSTM with 8 laysrs + RL-refined WPM-32K - 24.6
Wu et al. (2016) LSTM with 8 laysrs + RL-refined WPM-32K + Ensemble - 26.3

Our deep NMT systems
this work DEEPLAU 80K 22.1(±0.3)
this work DEEPLAU + PosUnk 80K 23.8(±0.3)
this work DEEPLAU + PosUnk + Ensemble 8 models 80K 26.1

Table 2: Case-sensitive BLEU scores on German-English translation.

ple and easy to implement, as opposed to previ-
ous models reported in Wu et al. (2016), which
dependends on some external techniques to
achieve their best performance, such as their
introduction of length normalization, coverage
penalty, fine-tuning and the RL-refined model.

4.5 Results on English-French Translation

SYSTEM BLEU
Enc-Dec (Luong et al., 2014) 30.4
RNNsearch (Bahdanau et al., 2014) 28.5
RNNsearch-LV (Jean et al., 2015) 32.7
Deep-Att (Zhou et al., 2016) 35.9
DEEPLAU 35.1

Table 3: English-to-French task: BLEU scores
of single neural models.

To evaluate at scale, we also show the re-
sults on an English-French task with 12M sen-
tence pairs and 30K vocabulary in Table 3.
Luong et al. (2014) achieves BLEU score of
30.4 with a six layers deep Encoder-Decoder
model. The two attention models, RNNSearch
and RNNsearch-LV achieve BLEU scores of
28.5 and 32.7 respectively. The previous best
single NMT Deep-Att model with an 18 layers
encoder and 7 layers decoder achieves BLEU
score of 35.9. For DEEPLAU, we obtain the
BLEU score of 35.1 with a 4 layers encoder
and 4 layers decoder, which is on par with
the SOTA system in terms of BLEU. Note that

Zhou et al. (2016) utilize a much larger depth
as well as external alignment model and exten-
sive regularization to achieve their best results.

4.6 Analysis
Then we will study the main factors that in-
fluence our results on NIST Chinese-English
translation task. We also compare our approach
with two SOTA topologies which were used in
building deep NMT systems.

• Residual Networks (ResNet) are among
the pioneering works (Szegedy et al.,
2016; He et al., 2016) that utilize extra
identity connections to enhance informa-
tion flow such that very deep neural net-
works can be effectively optimized. Share
the similar idea, Wu et al. (2016) intro-
duced to leverage residual connections to
train deep RNNs.

• Fast Forward (F-F) connections were pro-
posed to reduce the propagation path
length which is the pioneer work to sim-
plify the training of deep NMT model
(Zhou et al., 2016). The work can be
viewed as a parametric ResNet with short
cut connections between adjacent layers.
The procedure takes a linear sum between
the input and the newly computed state.

LAU vs. GRU Table 4 shows the effect of
the novel LAU. By comparing row 3 to row 7,
we see that when LEnc and LDec are set to 2,

142



SYSTEM (Lenc,LDec) width AVE.
1 DEEPGRU (2,1) 512 33.59
2 DEEPGRU (2,2) 1024 34.68
3 DEEPGRU (2,2) 512 34.91
4 DEEPGRU (4,4) 512 34.08
5 4+ResNet (4,4) 512 36.40
6 4+F-F (4,4) 512 37.62
7 DEEPLAU (2,2) 512 37.65
8 DEEPLAU (4,4) 512 38.97
9 DEEPLAU (8,6) 512 39.01
10 DEEPLAU (8,6) 256 38.91

Table 4: BLEU scores of DEEPLAU and
DEEPGRU with different model sizes.

the average BLEU scores achieved by DEEP-
GRU and DEEPLAU are 34.68 and 37.65, re-
spectively. LAU can bring an improvement of
2.97 in terms of BLEU. After increasing the
model depth to 4 (row 4 and row 6), the im-
provement is enlarged to 4.91. When DEEP-
GRU is trained with larger depth (say, 4), the
training becomes more difficult and the perfor-
mance falls behind its shallow partner. While
for DEEPLAU, as can be see in row 9, with
increasing the depth even to LEnc = 8 and
LDec = 6 we can still obtain growth by 0.04
BLEU score. Compared to previous short-
cut connection methods (row 5 and row 6),
The LAU still achieve meaningful improve-
ments over F-F connections and Residual con-
nections by +1.35 and +2.57 BLEU points re-
spectively.

DEEPLAU introduces more parameters than
DEEPGRU. In order to figure out the effect of
DEEPLAU comparing models with the same
parameter size, we increase the hidden size of
DEEPGRU model. Row 3 shows that, after us-
ing a twice larger GRU layer, the BLEU score
is 34.68, which is still worse than the corre-
sponding DEEPLAU model with fewer param-
eters.

Depth vs. Width Next we will study the
model size. In Table 4, starting from LEnc = 2
and LDec = 2 and gradually increasing the
model depth, we can achieve substantial im-
provements in terms of BLEU. With LEnc = 8
and LDec = 6, our DEEPLAU model yields
the best BLEU score. We tried to increase

the model depth with the same hidden size but
failed to see further improvements.

We then tried to increase the hidden size. By
comparing row 2 and row 3, we find the im-
provements is relative small with a wider hid-
den size. It is also worth mentioning that a deep
and thin network with fewer parameters can
still achieve comparable results with its shal-
low partner. This suggests that depth plays a
more important role in increasing the complex-
ity of neural networks than width and our de-
liberately designed LAU benefit from the opti-
mizing of such a deep model.

 26

 28

 30

 32

 34

 36

 38

 40

 42

 44

10 20 30 40 50 60

B
L

E
U

(%
)

sentence length (Merge)

LAU(4/4)
LAU(2/2)
GRU(4/4)

Figure 2: The BLEU scores of generated trans-
lations on the merged four test sets with respect
to the lengths of source sentences.

About Length A more detailed comparison
between DEEPLAU (4 layers encoder and 4
layers decoder), DEEPLAU(2 layer encoder
and 2 layer decoder) and DEEPGRU (4 lay-
ers encoder and 4 layers decoder), suggest
that with deep architectures are essential to
the superior performance of our system. In
particular, we test the BLEU scores on sen-
tences longer than {10, 20, 30, 40, 50, 60} on
the merged test set. Clearly, in all curves,
performance degrades with increased sentence
length. However, DEEPLAU models yield
consistently higher BLEU scores than the
DEEPGRU model on longer sentences. These
observations are consistent with our intuition
that very deep RNN model is especially good
at modeling the nested latent structures on rel-
atively complicated sentences and LAU plays
an important role on optimizing such a com-
plex deep model.

143



5 Conclusion

We propose a Linear Associative Unit (LAU)
which makes a fusion of both linear and non-
linear transformation inside the recurrent unit.
On this way, gradients decay much slower
compared to the standard deep networks which
enable us to build a deep neural network
for machine translation. Our empirical study
shows that it can significantly improve the per-
formance of NMT.

6 acknowledge

We sincerely thank the anonymous reviewers
for their thorough reviewing and valuable sug-
gestions. Wang’s work is partially supported
by National Science Foundation for Deep Se-
mantics Based Uighur to Chinese Machine
Translation (ID 61662077). Qun Liu’s work is
partially supported by Science Foundation Ire-
land in the ADAPT Centre for Digital Content
Technology (www.adaptcentre.ie) at Dublin
City University funded under the SFI Research
Centres Programme (Grant 13/RC/2106) co-
funded under the European Regional Develop-
ment Fund.

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua

Bengio. 2014. Neural machine translation by
jointly learning to align and translate. arXiv
preprint arXiv:1409.0473 .

Christian Buck, Kenneth Heafield, and Bas
Van Ooyen. 2014. N-gram counts and language
models from the common crawl. In LREC. Cite-
seer, volume 2, page 4.

David Chiang. 2005. A hierarchical phrase-based
model for statistical machine translation. In Pro-
ceedings of the 43rd Annual Meeting on Associ-
ation for Computational Linguistics. Association
for Computational Linguistics, pages 263–270.

Kyunghyun Cho, Bart Van Merriënboer, Caglar
Gulcehre, Dzmitry Bahdanau, Fethi Bougares,
Holger Schwenk, and Yoshua Bengio. 2014.
Learning phrase representations using rnn
encoder-decoder for statistical machine transla-
tion. arXiv preprint arXiv:1406.1078 .

Alex Graves. 2013. Generating sequences with
recurrent neural networks. arXiv preprint
arXiv:1308.0850 .

Alex Graves, Greg Wayne, and Ivo Danihelka.
2014. Neural turing machines. arXiv preprint
arXiv:1410.5401 .

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and
Jian Sun. 2015. Deep residual learning for image
recognition. arXiv preprint arXiv:1512.03385 .

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and
Jian Sun. 2016. Deep residual learning for image
recognition. In Proceedings of the IEEE Confer-
ence on Computer Vision and Pattern Recogni-
tion. pages 770–778.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation
9(8):1735–1780.

Sébastien Jean, Kyunghyun Cho, Roland Memise-
vic, and Yoshua Bengio. 2015. On using very
large target vocabulary for neural machine trans-
lation. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Lin-
guistics and the 7th International Joint Con-
ference on Natural Language Processing (Vol-
ume 1: Long Papers). Association for Compu-
tational Linguistics, Beijing, China, pages 1–10.
http://www.aclweb.org/anthology/P15-1001.

Nal Kalchbrenner, Ivo Danihelka, and Alex Graves.
2015. Grid long short-term memory. arXiv
preprint arXiv:1507.01526 .

Philipp Koehn, Franz Josef Och, and Daniel Marcu.
2003. Statistical phrase-based translation. In
Proceedings of the 2003 Conference of the
North American Chapter of the Association for
Computational Linguistics on Human Language
Technology-Volume 1. Association for Computa-
tional Linguistics, pages 48–54.

Yang Liu, Qun Liu, and Shouxun Lin. 2006. Tree-
to-string alignment template for statistical ma-
chine translation. In Proceedings of the 21st
International Conference on Computational Lin-
guistics and the 44th annual meeting of the As-
sociation for Computational Linguistics. Associ-
ation for Computational Linguistics, pages 609–
616.

Minh-Thang Luong, Hieu Pham, and Christo-
pher D Manning. 2015. Effective approaches
to attention-based neural machine translation.
arXiv preprint arXiv:1508.04025 .

Minh-Thang Luong, Ilya Sutskever, Quoc V
Le, Oriol Vinyals, and Wojciech Zaremba.
2014. Addressing the rare word problem in
neural machine translation. arXiv preprint
arXiv:1410.8206 .

Fandong Meng, Zhengdong Lu, Zhaopeng Tu,
Hang Li, and Qun Liu. 2015. Neural transforma-
tion machine: A new architecture for sequence-
to-sequence learning. CoRR abs/1506.06442.
http://arxiv.org/abs/1506.06442.

144



Haitao Mi, Liang Huang, and Qun Liu. 2008.
Forest-based translation. In ACL. pages 192–
199.

Kishore Papineni, Salim Roukos, Todd Ward, and
Wei-Jing Zhu. 2002. Bleu: a method for auto-
matic evaluation of machine translation. In Pro-
ceedings of the 40th annual meeting on associ-
ation for computational linguistics. Association
for Computational Linguistics, pages 311–318.

Razvan Pascanu, Caglar Gulcehre, Kyunghyun
Cho, and Yoshua Bengio. 2013a. How to con-
struct deep recurrent neural networks. arXiv
preprint arXiv:1312.6026 .

Razvan Pascanu, Tomas Mikolov, and Yoshua Ben-
gio. 2013b. On the difficulty of training recur-
rent neural networks. ICML (3) 28:1310–1318.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He,
Hua Wu, Maosong Sun, and Yang Liu. 2015.
Minimum risk training for neural machine trans-
lation. arXiv preprint arXiv:1512.02433 .

Rupesh K Srivastava, Klaus Greff, and Jürgen
Schmidhuber. 2015. Training very deep net-
works. In Advances in neural information pro-
cessing systems. pages 2377–2385.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le.
2014. Sequence to sequence learning with neu-
ral networks. In Advances in neural information
processing systems. pages 3104–3112.

Christian Szegedy, Sergey Ioffe, Vincent Van-
houcke, and Alex Alemi. 2016. Inception-
v4, inception-resnet and the impact of resid-
ual connections on learning. arXiv preprint
arXiv:1602.07261 .

Zhaopeng Tu, Zhengdong Lu, Yang Liu, Xiaohua
Liu, and Hang Li. 2016. Modeling coverage for
neural machine translation. ArXiv eprints, Janu-
ary .

Ronald J Williams and David Zipser. 1989. A
learning algorithm for continually running fully
recurrent neural networks. Neural computation
1(2):270–280.

Yonghui Wu, Mike Schuster, Zhifeng Chen,
Quoc V Le, Mohammad Norouzi, Wolfgang
Macherey, Maxim Krikun, Yuan Cao, Qin Gao,
Klaus Macherey, et al. 2016. Google’s neural
machine translation system: Bridging the gap
between human and machine translation. arXiv
preprint arXiv:1609.08144 .

Deyi Xiong, Qun Liu, and Shouxun Lin. 2006.
Maximum entropy based phrase reordering
model for statistical machine translation. In Pro-
ceedings of the 21st International Conference on
Computational Linguistics and the 44th annual

meeting of the Association for Computational
Linguistics. Association for Computational Lin-
guistics, pages 521–528.

Matthew D Zeiler. 2012. Adadelta: an adap-
tive learning rate method. arXiv preprint
arXiv:1212.5701 .

Biao Zhang, Deyi Xiong, and Jinsong Su. 2016.
Variational neural machine translation. arXiv
preprint arXiv:1605.07869 .

Jiajun Zhang and Chengqing Zong. 2016. Exploit-
ing source-side monolingual data in neural ma-
chine translation. In Proceedings of EMNLP.

Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and
Wei Xu. 2016. Deep recurrent models with fast-
forward connections for neural machine transla-
tion. arXiv preprint arXiv:1606.04199 .

145


	Deep Neural Machine Translation with Linear Associative Unit

