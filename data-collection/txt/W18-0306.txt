








































A bidirectional mapping between English and CNF-based reasoners

Steven Abney
University of Michigan
abney@umich.edu

Abstract
If language is a transduction between sound
and meaning, the target of semantic interpreta-
tion should be the meaning representation ex-
pected by general cognition. Automated rea-
soners provide the best available fully-explicit
proxies for general cognition, and they com-
monly expect Clause Normal Form (CNF) as
input. There is a well-known algorithm for
converting from unrestricted predicate calcu-
lus to CNF, but it is not invertible, leaving us
without a means to transduce CNF back to En-
glish. I present a solution, with possible reper-
cussions for the overall framework of seman-
tic interpretation.

1 Overview

1.1 The problem
I would like to address a problem that illustrates
how considerations of the place of semantic inter-
pretation in the larger cognitive system, even very
schematic considerations, can have consequences
for the manner and target of interpretation.

Let us take seriously the idea that language is a
mapping between sound and meaning—which is to
say, essentially, an input-output device for general
cognition—and let us provisionally accept current
automated reasoners as the best available fully ex-
plicit models of general cognition. Then an impor-
tant goal for a semantics of English is to define an in-
vertible transduction between English sentences and
a meaning representation that is suitable for use with
an automated reasoner. Model-theoretic interpreta-
tion is good and useful, but it does not provide us
with a transducer.

Standard accounts are easily recast as defining a
mapping f from English sentences to predicate cal-
culus. However, the mapping does not appear to
be invertible. For one thing, not every predicate-
calculus expression is in the range of f . If general
cognition produces an arbitrary predicate-calculus
expression φ to render into English, we must find a
logically equivalent expression φ′ such that f−1(φ′)
is defined, but logical equivalence is undecideable,
a problem pointed out by Shieber (1993). Even if
f−1(φ) is defined, it is unclear how to compute it.

In addition, the most common choice of meaning
representation for automated reasoners is not gen-
eral predicate calculus, but a normal form known
as Clause Normal Form (CNF). Reasoners that re-
quire CNF input include systems based on resolu-
tion (McCune, 2003b), some model-building algo-
rithms (McCune, 2003a), probabilistic reasoners us-
ing weighted model-counting (Gogate and Domin-
gos, 2011), and more general cognitive architectures
that incorporate such reasoners.

CNF is a genuine normal form, in the sense that
for every expression of first-order predicate calculus
(FOPC), there is a unique logically-equivalent CNF
expression. Fortuitously, by mapping to CNF, we
eliminate a significant part of the variation that leads
to Shieber’s logical-equivalence problem. But there
is a catch. There is a well-known algorithm that con-
verts FOPC expressions to CNF, but it is not invert-
ible. That is the problem: once we have interpreted a
sentence, converted the meaning to CNF, and passed
it to an automated reasoner, we do not have a way of
taking the CNF expressions that the reasoner pro-
duces as output and mapping them to English.

55
Proceedings of the Society for Computation in Linguistics (SCiL) 2018, pages 55-63.

Salt Lake City, Utah, January 4-7, 2018



S:∨

DP1:

every: NP:∨

stray:−S(x) NP:

cat:−C(x)

S:

DP:

Kim:

VP:

feeds:F (k, x) t1:

Figure 1: A tree that serves simultaneously as English LF and
parse tree for the CNF translation−S(x) ∨ −C(x) ∨ F (k, x).

1.2 A solution

The solution I propose can be stated briefly as fol-
lows. (1) Use CNF as the target of semantic trans-
lation. (2) Instead of assembling the translation in
a bottom-up pass through the parse tree, creating
larger and larger partial translations at each step, let
us label selected nodes in the parse tree with CNF
operators. In other words, take the English parse tree
to be the CNF parse tree, albeit with some extrane-
ous nodes and labels. The resulting tree is symmet-
ric between English and CNF (e.g., Figure 1). In
particular, the leaf nodes are labeled symmetrically
with English words and CNF literals. Define a stan-
dard grammar with features to generate such trees.
(3) Given a CNF expression as input from general
cognition, use the grammar to parse the sequence of
literals, constructing an English/CNF parse tree, and
read off the English sentence.

Figure 1 provides an illustration of a combined
English/CNF parse tree. The English portion is the
LF for the sentence Kim feeds every stray cat, and
the CNF portion represents the translation −S(x) ∨
−C(x) ∨ F (k, x). Each node has a label pair α:β.
For the purposes of the grammar, the label pairs
are simply complex categories; we construct a sin-
gle grammar that generates the pairs. When pars-
ing English, the input consists of the English labels
of leaf nodes (Kim feeds every stray cat) and when
parsing CNF, the input consists of the CNF labels
−S(x),−C(x), F (k, x).

A few complications must be addressed, but they
have known solutions. We must convert the tree
from LF to SS before parsing English, creating a
necessity for two different versions of the grammar,
one for LF and one for SS. However, both versions
generate the same labels, and the two-step process
of parsing and converting to LF is standard and fa-

miliar. In the CNF-to-English direction, the CNF
input will actually be partially parsed input: for ex-
ample, [∨−S(x),−C(x), F (k, x)]. We do not pass
the nonterminal nodes directly as input to the parser,
but rather use them to constrain the operation of
the parser. In our example, the constraint prevents
the parser from constructing a node whose right la-
bel is not ∨. Further, CNF is a “free word order”
language. Unordered inputs make for less efficient
parsing, but they are manageable, and the partial-
parse constraints actually ameliorate the problem.
There are also more empty nodes in the CNF-to-
English direction than in the other direction—for
example, in Figure 1, the nodes labeled “every:,”
“Kim:,” and “t1:” are all empty nodes in the CNF-to-
English direction—but parsers routinely deal with
empty nodes, and dealing with many of them is no
harder than dealing with a few. In short, handling
these issues requires some care in implementation
but no novel parsing techniques.

The main question I will address in the rest of
the paper is how we systematically design the gram-
mar, that is, how we determine what the CNF labels
should be.

2 Direct translation constrained by feature
propagation

2.1 Assigning FOPC labels

To assign CNF operators to LF nodes, I propose (at
least conceptually) that we first label the tree with
the usual FOPC translation, and then apply the stan-
dard conversion to CNF. I adopt the particularly di-
rect form of translation sketched in the previous sec-
tion. A key desideratum is that the assignment of se-
mantic operators and atomic formulae to parse-tree
nodes should be constrained by local feature con-
straints of the usual sort. The full power of feature
grammars will not be required; features with atomic
values will suffice.

Let us construct the LF tree for the sentence Kim
feeds every stray cat and annotate it with the obvious
FOPC translation (Figure 2). I have made one un-
usual assumption in the LF tree: the determiner ev-
ery has been raised to become head of the quantifier-
raising structure. This is not essential, but it will
simplify the statement of certain constraints in what
follows.

56



S:∀x

every1: S:→

DP1:

e1: NP:∧

stray:S(x) NP:

cat:C(x)

S:

DP:

Kim:

VP:

feeds:F (k, x) t1:

Figure 2: The LF tree labeled with the standard FOPC transla-
tion.

How do we specify this labeling within the gram-
mar? Constraining the occurrence of semantic oper-
ators and predicates is generally straightforward and
local. For our example, we may state as a general
rule that an NP representing adjectival modification
translates as ∧, that an S headed by a (raised) univer-
sal determiner translates as ∀ (we return shortly to
the question of the variable), and that an S that is sib-
ling of a universal determiner translates as→. In the
leaf-node translations, the predicates obviously rep-
resent the lexical translations of the corresponding
English words (S for stray, C for cat, F for feed). It
is less obvious how to constrain the choice of vari-
ables.

2.2 Index propagation

The standard approach relies heavily on lambda ex-
pressions to specify which variable goes in which
position. This is a major cause of difficulty in in-
version: the inverse of beta-reduction is infinitely
ambiguous. Instead of using lambda expressions, let
us replace numeric syntactic indices with the seman-
tic variables themselves and propagate them through
the tree by syntactic feature-passing. We can then
use the syntactic indices to determine the choice of
variables in the atomic formulae.

In our example, let us use the variable k for the
subject DP and x for the raised object DP. Let us
propagate the DP index throughout the DP, and use
it to determine the variables in the atomic formulae
S(x) and C(x), as in Figure 3. (I give a more rigor-
ous characterization of the spreading in Constraint 2
below.)

As for the variables in F (k, x), let us assume a
form of syntactic concord in which the subject’s in-
dex k is shared with the VP and then, because V is

Sx:∀

everyx S:→

DPx

ex NPx:∧

Adjx

stray:S(x)

NPx

Nx

cat:C(x)

S

DPk

Kim

VPk

Vk,x

feeds:F (k, x)

tx

Figure 3: The results of index propagation.

S

DPa

Ann

VPa:¬

doesa not VPa:∨

VPa

sing:S(a)

or VPa

dance:D(a)

Figure 4: Negation and VP disjunction; the translation is
¬(S(a) ∨D(a)).

the head of VP, with the V. Let us also impose an
object-agreement constraint on the verb, requiring
its second subscript to match the object.

Only two minor items remain: traces obtain their
indices from their antecedents in the usual way, and
the variable associated with ∀ is now written as an
index. Figure 3 shows the final result. Henceforth I
omit colons when the semantic label is empty. I also
usually omit preterminal nodes—Adj, N, V—to save
space, but I include them when needed for clarity.

Let us consider some more examples (adapted
from Heim and Kratzer (1997)). These will motivate
additions to the index propagation rules, and will il-
lustrate at least a small range of cases in which index
propagation can be used in lieu of lambda expres-
sions. The tree in Figure 4 illustrates negation and
disjunction, and the trees in Figure 5 illustrate the
handling of “case-marking” versus “lexical” prepo-
sitions. Relative clauses and multiple quantifiers are
illustrated in later trees.

Note that Figure 4 includes an extension of the in-
dex propagation rules: the auxiliary (namely, does)
shares its index with its complement (the disjunc-
tive VP). In Figure 5 we have extended the object-
agreement rule to apply to the two-place adjective
fond, and we have treated of like an auxiliary in the

57



S

DPj

Joe

VPj

isj AdjPj

Adjj,`

fond:F (j, `)

PP`

of` DP`

Kaline

S

DPj

Joe

VPj

isj PPj

Pj,t

in:I(j, t)

DPt

Texas

Figure 5: Differing treatments of case-marking (left) and lexi-
cal (right) prepositions.

sense that it shares its index with its complement. In
the right-hand tree, in is treated like a transitive verb,
sharing its first index with its parent and sharing its
second index with its object.

2.3 Constraints on indices

Based on the examples we have considered, we may
hazard a general statement of the index propagation
rules. Indices are present only as required by the
following two constraints.

Constraint 1 (Intrinsic Indices) Every DP has an
index (excluding pleonastics). A leaf node labeled
with atomic formula π(α1, . . . , αn) must be child of
a preterminal with syntactic indices α1, . . . , αn.

Constraint 2 (Index Propagation) Syntactic in-
dices are propagated as necessary to satisfy the
following requirements.

1. A trace has the same index as its antecedent.

2. A modifier has the same index as the node it
modifies.

3. A function word (e.g., auxiliary, case marker)
has the same index as its complement.

4. An argument-taker’s last index is the same as
the argument’s index. In this case and this case
only, the index is discharged.

5. A parent inherits its head’s undischarged in-
dices.

“Head” includes X heads, as well as the head in
an adjunction structure, all heads in a coordina-
tion structure, and the relative pronoun in a relative
clause.

+¬
−∨

−P −∧

−Q −¬

+R

Figure 6: Local propagation of node polarity substitutes for
negation lowering.

3 Conversion to CNF

The standard conversion from unrestricted FOPC to
CNF involves a sequence of tree transformations:
(1) rewriting conditionals, (2) lowering negation,
(3) Skolemization, and (4) distribution (of disjunc-
tion over conjunction). We would like to consider
how to implement the conversion via feature con-
straints, without altering the basic structure of our
LF trees.

3.1 Negation lowering
Let us begin with negation lowering. Its effect is to
eliminate the negation operator in favor of literals,
consisting of an atomic formula and a sign (posi-
tive or negative). By adding polarity as an attribute
of all nodes, not just terminal nodes, we can give
a succinct characterization of negation lowering in
the form of a local constraint that is readily imple-
mented in a feature grammar.

Constraint 3 (Polarity) (a) The polarity of the root
node is positive. (b) The polarity of a child node is
the same as the polarity of its parent, unless the par-
ent node is labeled with an operator that is polarity-
reversing for the child in question, in which case the
child’s polarity is the opposite of the parent’s.

For our purposes there are two polarity-reversing op-
erators: negation and the conditional →, which is
polarity-reversing for its first child.

As an example, the FOPC expression ¬(P ∨ (Q∧
¬R)) has the parse tree in Figure 6. Polarities have
been added in accordance with Constraint 3. In par-
ticular, ¬ has inverse polarity to that of its child,
but otherwise parent and child always have the same
polarity. We achieve the effect of negation lower-
ing by interpreting signed operators as specified in
Table 1. Replacing the signed operators with their
unsigned equivalents for readability, Figure 6 corre-
sponds to the expression −P ∧ (−Q ∨ R), which

58



+¬ = � −¬ = �
+∧ = ∧ −∧ = ∨
+∨ = ∨ −∨ = ∧
+→ = ∨ −→ = ∧
+∀ = � −∀ = �
+∃ = � −∃ = �

Table 1: The interpretations of signed operators.

S:+→

CP−

if S−

Anna VPa:−∧

VP−a

dancesa:−D(a)

and VP−a

singsa:−S(a)

S+

Bettyb VP+b

isb AdjP+b

happyb:+H(b)

Figure 7: An LF tree illustrating polarity reversal under→.

is indeed logically equivalent to ¬(P ∨ (Q ∧ ¬R)).
Note that � indicates deletion of the operator.

3.2 Rewriting conditionals

In the standard conversion to CNF, rewriting con-
ditionals precedes negation lowering. We can deal
with conditionals as follows. We define the signed
operator +→ to be a synonym for ∨ and −→ to
be a synonym for ∧. However, unlike ∨ or ∧,
±→ reverses the polarity of its first child. Con-
sider the example of Figure 7. The → opera-
tor inverts the polarity of its first child, but other-
wise polarities are passed unchanged from parent
to child. Accordingly, Figure 7 is equivalent to
−D(a) ∨ −S(a) ∨+H(b), which is indeed equiva-
lent to D(a)∧S(a)→ H(b), the natural translation
for if Ann dances and sings, Betty is happy.

Note that Table 1 is used in the process of “read-
ing off” the CNF expression for input to the rea-
soner; it is not used to eliminate signed operators
from the LF tree. The signed operators do serve
a purpose beyond the truth function they represent.
For one thing, even though +→ is equivalent to ∨,
the former reverses its first child’s polarity whereas
the latter does not. The signed operators also permit
us to use local constraints to define the assignment of
translations. An example of such a local constraint
is the following: a node has semantic operator→ if

it is headed by a CP headed by “if.” Such a state-
ment remains valid whether the polarity of the node
is positive or negative, though in the former case the
signed operator +→ is interpreted as ∨ and in the
latter case the signed operator −→ is interpreted as
∧.

3.3 Skolemization

The third step of the conversion to CNF is Skolem-
ization. As usually formulated, one replaces existen-
tially bound variables with Skolem terms consisting
of a Skolem function applied to the list of outscoping
universal variables, then one deletes all quantifiers.
The deletion is already reflected in Table 1—though,
as already mentioned, the signed operators remain in
the LF tree and are not actually deleted until we read
off the CNF expression for input to the reasoner.

I will use the term variable to refer loosely to both
universal variables (that is, implicitly universally-
bound variables) and Skolem terms. I write Skolem
functions with a dot, e.g., ẋ, to make it easy to dis-
tinguish them from universal variables. Whether a
variable should be a universal variable or a Skolem
term is determined by the signed operator at the vari-
able’s home, which I define to be the node labeled
with the quantifier that originally bound it. Specifi-
cally:

Constraint 4 (Variable type determination)
(a) The syntactic index of a node whose signed
operator is +∀ or −∃ must be a universal variable,
and (b) the syntactic index of a node whose signed
operator is +∃ or −∀ must be a Skolem term.
This constraint determines the type of variable, and
the variable is then propagated to other nodes by
Constraint 2. See Figure 8 for an example.

The variable ẏ in Figure 8 is a shorthand for the
Skolem term ẏ(x). To avoid clutter, I have sup-
pressed the argument list, but it does need to be com-
puted in a complete implementation. One may use a
feature ouvwhose value for a given node ν is the list
of outscoping universal variables, that is, the list of
universal variables whose home position dominates
ν. It is straightforward but tedious to write out the
feature constraints that determine the correct value
for ouv; I omit the details.

Figure 8 provides an example with two quanti-
fiers. Note that there are two polarity reversals, both

59



Sx:+∀

everyx S:+→

DP−x

ex NPx:−∧

NP−x

dog:−D(x)

RC−x

RP−x

that

Sẏ:−∀

everyẏ S:−→

DP+ẏ

eẏ NP+ẏ

cat:+C(ẏ)

S−

tx VP−x

avoids:−A(x, ẏ) tẏ

S+

tx VP+x

isx Adj+x

happyx:+H(x)

Figure 8: A complex example. The boxed nodes are the home
nodes for the variables x and ẏ.

occurring at the first child of a node with operator
→. The boxed nodes are the homes of the two quan-
tifiers. Because the upper one has signed operator
+∀, the variable is a universal, and because the lower
one has signed operator −∀, the variable is a Skolem
term.

Reading off the CNF, we obtain the following.
For readability, I have again replaced the signed op-
erators with their more familiar unsigned equiva-
lents; I also indicate the Skolem argument lists ex-
plicitly.

−D(x) ∨ [C(ẏ(x)) ∧ −A(x, ẏ(x))] ∨H(x).

In words: either x is not a dog, or else x’s ẏ is a cat
that x fails to avoid, or else x is happy. That is in-
ferentially equivalent to the original sentence every
dog that avoids every cat is happy.

3.4 Donkey anaphora

A pleasant side effect of the lack of explicit quanti-
fiers in CNF is that donkey anaphora becomes avail-
able without any stipulations. The structure of ev-
ery farmer that owns a donkey beats it is essen-
tially the same as that in Figure 8 except for the
choice of lower quantifier: see Figure 9. I assume
that the pronoun it picks up the index of its an-
tecedent a donkey. The resulting CNF translation
is −F (x) ∨ −D(y) ∨ −O(x, y) ∨ B(x, y), which

Sx:+∀

everyx S:+→

DP−x

ex NPx:−∧

NP−x

farmer:−F (x)

RC−x

RP−x

that

Sy:−∃

ay S:−∧

DP−y

ey NP−y

donkey:−D(y)

S−

tx VP−x

owns:−O(x, y) ty

S+

tx VP+x

V+x,y

beats:B(x, y)

DP+y

it

Figure 9: Donkey anaphora is covered without stipulation.

correctly captures the strong reading.1

3.5 Distribution

The final step in the conversion to CNF is distri-
bution of disjunction over conjunction. Distribu-
tion unavoidably involves a structural transforma-
tion of the tree, so we will not attempt to incorpo-
rate it into the LF structure. Although distribution
is not uniquely invertible, the degree of ambiguity
that arises in inversion is limited. When translating
from CNF to English, let us assume the inverse of
distribution, which we may call consolidation, as a
preprocessing step.

To fix ideas, let us consider the following exam-
ple:

φ = P ∨ (Q ∧R)
The result of distribution is ψ:

ψ = (P ∨Q) ∧ (P ∨R)

In general, whenever distribution is non-trivial, it
has the effect of introducing copies of existing
atomic formulae, as with P in ψ. Hence invert-
ing distribution (consolidation) involves recombin-
ing copies. Consolidation is ambiguous. For exam-
ple, φ is not the only undistributed expression that

1I suggest that the weak reading is spurious; the use of the
singular “a donkey” presupposes that the set of owned donkeys
is a singleton, in which case the strong and weak readings are
equivalent.

60



may give rise to ψ: ψ itself might have been the
source. More generally, every way of combining
copies produces a form that constitutes a possible
undistributed source.

On the other hand, the amount of ambiguity is
limited by the number of duplicates in the input (go-
ing from CNF to English). Moreover, each possible
result of consolidation does give rise to a valid En-
glish sentence. The choice among them is not one of
well-formedness but of stylistic preference. Since
each duplicate atomic formula gives rise to dupli-
cated words, it seems natural to prefer to do as much
consolidation as possible, and we may adopt that as
a heuristic.

In most cases, there is a unique most-consolidated
form, though it is possible to construct exam-
ples with multiple distinct maximally-consolidated
forms. For example, given the CNF expression
(P ∨Q)∧ (Q∨R)∧ (R∨P ), we may eliminate any
one of the three duplicate pairs, but only one, leav-
ing us with three different maximally-consolidated
forms. This is not likely to be a major problem in
practice.

4 Discussion

4.1 Generalized quantifiers
Important questions remain. Perhaps the most ur-
gent is how generalized quantifiers are to be ac-
commodated in the proposed approach. Generalized
quantifiers are relations between sets, so the ques-
tion can be rephrased as accommodating phrases
(namely, NPs) that define sets.

One can include sets in a first-order account by
reification. That is, introduce a membership predi-
cate M and define a set such as ṡ = λx . φ[x] as:

M(x, ṡ)↔ φ[x].
The problem is that converting an LF tree that con-
tains ↔ to CNF involves a substantial structural
change. For example, M(x, ṡ) ↔ F (x) ∧ G(x),
converted to CNF, expands out as:

[−M(x, ṡ) ∨ F (x)]∧
[−M(x, ṡ) ∨G(x)]∧
[−F (x) ∨ −G(x) ∨M(x, ṡ)].

(1)

My proposal relies crucially on the conversion to
CNF being structure-preserving, but this is a case
in which it emphatically does not preserve structure.

One possibility is to permit ↔ in the LF tree as
a primitive operator, and to handle it much as we
handled distribution. Going from the LF tree to the
reasoner, an expression containing ↔ is expanded
out as in (1). In the opposite direction, as a pre-
processing step one seeks instances of the pattern
illustrated in (1) and replaces them with M(x, ṡ)↔
F (x) ∧G(x), much as we recognize the repetitions
that may be consolidated. A more ambitious alter-
native is to incorporate the replacement into the rea-
soner as an inference rule, much as reasoners often
include primitive support for an equality predicate
and substitution of equals. I leave this as a question
for future research.

4.2 Related work

There have been proposals in the literature for re-
versible grammars, which support both interpre-
tation and generation (Appelt, 1987; de Kok et
al, 2011; Copestake et al, 1996; Melamed, 2003;
Shieber, 1988; Shieber and Schabes, 1990; Shieber
et al, 1990; Strzalkowski, 1991; Strzalkowski,
1994). Reversibility was indeed one of the original
motivations for unification grammars (Kay, 1975;
Kay, 1996), though the translational target was
predicate-argument structure rather than FOPC. The
present paper can be seen as extending that work to
map bidirectionally between English and CNF using
a feature grammar.

For general unification grammars, it was proposed
that one define an interpretation relation I(s, φ) in
Prolog: to parse, provide the sentence s and solve for
the meaning φ, and to generate, provide φ and solve
for s (Shieber, 1988; Shieber et al, 1990). Unfortu-
nately, solving for s proved to be beyond Prolog’s
abilities, and much work went into elaborate meth-
ods for helping Prolog along (Strzalkowski, 1991;
Strzalkowski, 1994). In additional, the usual uni-
fication grammars were susceptible to the logical-
equivalence problem that Shieber pointed out: the
range of φ in I(s, φ) is typically not the entire space
of FOPC expressions but only a subset of the space,
and given an arbitrary input ψ one must seek a log-
ically equivalent ψ′ for which I(s, ψ′) is defined;
but logical equivalence is not decideable (Shieber,
1993).

These difficulties led to an interest in flat seman-
tic languages, which, one hoped, reduce the number

61



of logically equivalent expressions corresponding to
a given semantic input (Whitelock, 1992; Trujillo,
1995). Perhaps the best known current approach is
Minimal Recursion Semantics (MRS) (Copestake et
al, 2005). However, MRS expressions are not “flat”
in the right way—an MRS expression is actually a
meta-logical description of a standard FOPC parse
tree—and the use of MRS does not ameliorate the
logical equivalence problem. The main attraction of
MRS is not that it addresses the problems of inter-
est here, but that it supports a transparent and com-
pact representation of certain ambiguities, particu-
larly quantifier-scope ambiguities.

When genuinely flat semantic languages have
been proposed (Whitelock, 1992; Trujillo, 1995),
they usually have severely limited expressivity, per-
mitting only conjunctions of ground clauses, and ex-
cluding disjunction and quantification. By contrast,
CNF represents a flat semantic language with the
full expressive power of FOPC. It is flat in the sense
that no CNF expression has depth greater than three:
the most complex CNF expression is a conjunction
of clauses, each clause being a disjunction of literals.
There are no explicit quantifiers, but their expres-
sive capacity is preserved via the distinction between
universal variables and Skolem terms. The use of
CNF for semantic translations does ameliorate the
logical equivalence problem. A CNF expression is
the normal form for an (infinite) equivalence class of
unrestricted FOPC expressions, and the commonest
sorts of logically equivalent pairs fall together when
we map to CNF.

I build also on a line of inquiry into reversibil-
ity that involves simultaneous grammars, in which
a single derivation constructs two parse trees. Si-
multaneous grammars have been used both for ma-
chine translation (Melamed, 2003) and for transla-
tion between English and FOPC (Shieber and Sch-
abes, 1990). However, previous work has not con-
sidered the further conversion from FOPC to CNF.
Moreover, the simultaneous grammars considered in
this paper are unusually simple: the two syntax trees
are homomorphic, allowing them to be treated as a
single tree with paired labels.

4.3 Conclusion

I have described a method of translating between
English and CNF whose advantages are as follows:

it provides a direct connection to automated reason-
ers; it is fully invertible; it is arguably simpler than
simultaneous-tree or standard direct-interpretation
approaches; it ameliorates the logical-equivalence
problem by virtue of CNF’s status as normal form; it
is computable using an atomic-valued feature gram-
mar, enabling efficient parsing/generation; and it
predicts the existence of donkey anaphora as a side
effect of Skolemization, which is an essential step
in the conversion to CNF. To the extent that the pro-
posal has merit, it illustrates how considerations of
the role of interpretation in the larger cognitive sys-
tem can influence the form of the semantic account
in fundamental ways.

Acknowledgements

I have benefited greatly from discussions with Ezra
Keshet and joint work we have done on seman-
tic consequences of using CNF as metalanguage.
The paper has also benefited from the comments of
anonymous reviewers. Obviously, they bear no re-
sponsibility for any remaining shortcomings of the
work.

References
James Allen. 1995. Natural Language Understanding

(Second edition). Benjamin Cummings, Menlo Park,
CA.

Douglas E. Appelt. 1987. Bidirectional grammars and
the design of natural language generation systems. In:
Theoretical Issues in NLP 3.

Patrick Blackburn and Johan Bos. 2005. Representa-
tion and Inference for Natural Language. CSLI Publi-
cations, Stanford, CA.

Ann Copestake, Dan Flickinger, Robert Malouf, Susanne
Riehemann, and Ivan Sag. 1996. Translation using
minimal recursion semantics. Proceedings of the Sixth
International Conference on Theoretical and Method-
ological Issues in MT.

Ann Copestake, Dan Flickinger, Carl Pollard, and Ivan
Sag. 2005. Minimal Recursion Semantics: An in-
troduction. Research on Language and Computation
3:281–332.

Daniël de Kok, Barbara Plank, and Gertjan van Noord.
2011. Reversible Stochastic Attribute-Value Gram-
mars. Proceedings of the Conference of the Associ-
ation for Computational Linguistics (ACL).

Vibhav Gogate and Pedro Domingos. 2011. Probabilistic
Theorem Proving, Proceedings of UAI.

62



Irene Heim and Angelika Kratzer. 1997. Semantics in
generative grammar. Blackwell Publishers.

Daniel Jurafsky and James H. Martin. 2009. Speech
and Language Processing (2nd edition). Prentice Hall,
Upper Saddle River, NJ.

Martin Kay. 1975. Syntactic processing and functional
sentence perspective. Proceedings of TINLAP.

Martin Kay. 1996. Chart generation. Proceedings of
the Conference of the Association for Computational
Linguistcs (ACL).

John E. Laird. 2012. The Soar Cognitive Architecture.
The MIT Press, Cambridge, MA and London, Eng-
land.

William McCune. 2003a. Mace4 Reference Manual and
Guide. Tech. Memo ANL/MCS-TM-264, Mathemat-
ics and Computer Science Division, Argonne National
Laboratory, Argonne, IL.

William McCune. 2003b. Otter 3.3 Reference Manual.
Tech. Memo ANL/MCS-TM-263, Mathematics and
Computer Science Division, Argonne National Labo-
ratory, Argonne, IL.

Dan Melamed. 2003. Multitext Grammars and Syn-
chronous Parsers, Proceedings of NAACL.

Robert C. Moore. 1989. Unification-based semantic in-
terpretation. Proceedings of the 27th Meeting of the
Association for Computational Linguistics.

Fernando Pereira and Yves Schabes. 1992. Inside-
outside reestimation from partially bracketed corpora.
Proceedings of the Association for Computational
Linguistics 30th Annual Meeting, 128–135. Newark,
Delaware.

Stuart J. Russell and Peter Norvig. 2002. Artificial Intel-
ligence: A Modern Approach (2nd edition). Prentice
Hall, Upper Saddle River, NJ.

Stuart Shieber. 1988. A uniform architecture for pars-
ing and generation. Proceedings of the 12th Confer-
ence on Computational Linguistics (COLING), vol. 2,
pp. 614–619.

Stuart Shieber. 1993. The problem of logical-form
equivalence. Computational Linguistics 19(1), 179–
190.

Stuart Shieber and Yves Schabes. 1990. Synchronous
Tree-Adjoining Grammars. Proceedings of the Con-
ference on Computational Linguistics (COLING).

Stuart Shieber, Gertjan van Noord, Fernando Pereira, and
Robert Moore. 1990. Semantic head-driven genera-
tion. Computational Linguistics 16(1):30–42.

Tomek Strzalkowski. 1991. A general computational
method for grammar inversion. Proceedings of the
ACL Workshop on Reversible Grammar in Natural
Language Processing.

Tomek Strzalkowski (ed.) 1994. Reversible Grammar
in Natural Language Processing. Kluwer Academic
Publishers.

Indalecio Arturo Trujillo. 1995. Lexicalist Machine
Translation of Spatial Prepositions. PhD dissertation,
University of Cambridge.

P. Whitelock. 1992. Shake-and-bake translation. Pro-
ceedings of the Conference on Computational Linguis-
tics (COLING).

63


