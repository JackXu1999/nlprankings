



















































Natural Language Reasoning Using Proof-Assistant Technology: Rich Typing and Beyond


Proceedings of the EACL 2014 Workshop on Type Theory and Natural Language Semantics (TTNLS), pages 37–45,
Gothenburg, Sweden, April 26-30 2014. c©2014 Association for Computational Linguistics

Natural Language Reasoning Using proof-assistant technology: Rich
Typing and beyond∗

Stergios Chatzikyriakidis
Dept of Computer Science,

Royal Holloway, Univ of London
Egham, Surrey TW20 0EX, U.K; Open

University of Cyprus
stergios.chatzikyriakidis@cs.rhul.ac.uk

Zhaohui Luo
Dept of Computer Science,

Royal Holloway, Univ of London
Egham, Surrey TW20 0EX, U.K;
zhaohui@cs.rhul.ac.uk

Abstract

In this paper, we study natural language
inference based on the formal semantics
in modern type theories (MTTs) and their
implementations in proof-assistants such
as Coq. To this end, the type theory
UTT with coercive subtyping is used as
the logical language in which natural lan-
guage semantics is translated to, followed
by the implementation of these semantics
in the Coq proof-assistant. Valid infer-
ences are treated as theorems to be proven
via Coq’s proof machinery. We shall em-
phasise that the rich typing mechanisms in
MTTs (much richer than those in the sim-
ple type theory as used in the Montagovian
setting) provide very useful tools in many
respects in formal semantics. This is ex-
emplified via the formalisation of various
linguistic examples, including conjoined
NPs, comparatives, adjectives as well as
various linguistic coercions. The aim of
the paper is thus twofold: a) to show that
the use of proof-assistant technology has
indeed the potential to be developed into
a new way of dealing with inference, and
b) to exemplify the advantages of having a
rich typing system to the study of formal
semantics in general and natural language
inference in particular.

1 Introduction

Natural Language Inference (NLI), i.e. the task of
determining whether an NL hypothesis can be in-
ferred from an NL premise, has been an active re-
search theme in computational semantics in which
various approaches have been proposed (see, for
example (MacCartney, 2009) and some of the ref-
erences therein). In this paper, we study NLI based

∗This work is supported by the research grant F/07-
537/AJ of the Leverhulme Trust in the U.K.

on formal semantics in MTTs with coercive sub-
typing (Luo, 2012b) and its implementation in the
proof assistant Coq (Coq, 2007).

A Modern Type Theory (MTT) is a dependent
type theory consisting of an internal logic, which
follows the propositions-as-types principle. This
latter feature along with the availability of power-
ful type structures make MTTs very useful for for-
mal semantics. The use of MTTs for NL semantics
has been proposed with exciting results as regards
various issues of NL semantics, ranging from
quantification and anaphora to adjectival modifi-
cation, co-predication, belief and context formal-
ization. (Sundholm, 1989; Ranta, 1994; Boldini,
2000; Cooper, 2005; Fox and Lappin, 2005; Re-
toré, 2013; Ginzburg and Cooper, forthcoming;
Luo, 2011a; Luo, 2012b; Chatzikyriakidis and
Luo, 2012; Chatzikyriakidis and Luo, 2013a). Re-
cently, there has been a systematic study of MTT
semantics using Luo’s UTT with coercive subtyp-
ing (type theory with coercive subtyping, hence-
forth TTCS) (Luo, 2010; Luo, 2011a; Luo, 2012b;
Chatzikyriakidis and Luo, 2012; Chatzikyriakidis
and Luo, 2013a; Chatzikyriakidis and Luo, 2013b;
Chatzikyriakidis and Luo, 2014). This is the ver-
sion of MTT used in this paper. More specifically,
the paper concentrates on one of the key differ-
ences between MTTs and simple typed ones, i.e.
rich typing. Rich typing will be shown to be a
key ingredient for both formal semantics in gen-
eral and the study of NLI in particular.

A proof assistant is a computer system that as-
sists the users to develop proofs of mathemati-
cal theorems. A number of proof assistants im-
plement MTTs. For instance, the proof assistant
Coq (Coq, 2007) implements pCIC, the predica-
tive Calculus of Inductive Constructions1 and sup-

1pCIC is a type theory that is rather similar to UTT, es-
pecially after its universe Set became predicative since Coq
8.0. A main difference is that UTT does not have co-inductive
types. The interested reader is directed to Goguen’s PhD the-

37



ports some very useful tactics that can be used to
help the users to automate (parts of) their proofs.
Proof assistants have been used in various applica-
tions in computer science (e.g., program verifica-
tion) and formalised mathematics (e.g., formalisa-
tion of the proof of the 4-colour theorem in Coq).

The above two developments, the use of MTT
semantics on the one hand and the implementa-
tion of MTTs in proof assistants on the other, has
opened a new research avenue: the use of existing
proof assistants in dealing with NLI. In this pa-
per, two different goals are to be achieved: a) on a
more practical level, to show how proof-assistant
technology can be used in order to deal with NLI
and b) on a theoretical level, the significance of
rich typing for formal semantics and NLI in par-
ticular. These two different aspects of the paper
will be studied on a par, by concentrating on a
number of NLI cases (quite a lot actually) that
are adequately dealt with on a theoretical level via
rich typing and the implementation of the account
making use of rich type structures in Coq on a
more practical level. We shall also consider how to
employ dependent typing in the coercive subtyp-
ing framework to formalise linguistic coercions.

2 Rich typing in MTTs

A Modern Type Theory (MTT) is a variant of
a class of type theories in the tradition initiated
by the work of Martin-Löf (Martin-Löf, 1975;
Martin-Löf, 1984), which have dependent and
inductive types, among others. We choose to
call them Modern Type Theories in order to dis-
tinguish them from Church’s simple type theory
(Church, 1940) that is commonly employed within
the Montagovian tradition in formal semantics.

Among the variants of MTTs, we are going to
employ the Unified Theory of dependent Types
(UTT) (Luo, 1994) with the addition of the co-
ercive subtyping mechanism (see, for example,
(Luo, 1999; Luo et al., 2012) and below). UTT is
an impredicative type theory in which a type Prop
of all logical propositions exists.2 This stands
as part of the study of linguistic semantics using
MTTs rather than simply typed ones. In particu-
lar, in this paper we discuss a number of key issues
as regards the typing system, which will be shown
to allow more fine-grained distinctions and expres-

sis (Goguen, 1994) as regards the meta-theory of UTT.
2This is similar to simple type theory where a type t of

truth values exists.

sivity compared to classical simple typed systems
as these are used in mainstream Montagovian se-
mantics.

2.1 Type many-sortedness and CNs as types

In Montague semantics (Montague, 1974), the
underlying logic (Church’s simple type theory
(Church, 1940)) can be seen as ‘single-sorted’ in
the sense that there is only one type e of all enti-
ties. The other types such as t of truth values and
the function types generated from e and t do not
stand for types of entities. In this respect, there are
no fine-grained distinctions between the elements
of type e and as such all individuals are interpreted
using the same type. For example, John and Mary
have the same type in simple type theories, the
type e of individuals. An MTT, on the other hand,
can be regarded as a ‘many-sorted’ logical system
in that it contains many types and as such one can
make fine-grained distinctions between individu-
als and further use those different types to interpret
subclasses of individuals. For example, one can
have John : [[man]] and Mary : [[woman]], where
[[man]] and [[woman]] are different types.

An important trait of MTT-based semantics is
the interpretation of common nouns (CNs) as types
(Ranta, 1994) rather than sets or predicates (i.e.,
objects of type e → t) as it is the case within
the Montagovian tradition. The CNs man, human,
table and book are interpreted as types [[man]],
[[human]], [[table]] and [[book]], respectively. Then,
individuals are interpreted as being of one of the
types used to interpret CNs. The interpretation of
CNs as Types is also a prerequisite in order for the
subtyping mechanism to work. This is because,
assuming CNs to be predicates, subtyping would
go wrong given contravariance of function types.3

2.2 Subtyping

Coercive subtyping (Luo, 1999; Luo et al., 2012)
provides an adequate framework to be employed
for MTT-based formal semantics (Luo, 2010; Luo,
2012b).4 It can be seen as an abbreviation mech-
anism: A is a (proper) subtype of B (A < B) if

3See (Chatzikyriakidis and Luo, 2013b) for more infor-
mation. See also (Luo, 2012a) for further philosophical argu-
mentation on the choosing to represent CNs as types.

4It is worth mentioning that subsumptive subtyping, i.e.
the traditional notion of subtyping that adopts the subsump-
tion rule (if A ≤ B, then every object of type A is also of
type B), is inadequate for MTTs in the sense that it would
destroy some important metatheoretical properties of MTTs
(see, for example, §4 of (Luo et al., 2012) for details).

38



there is a unique implicit coercion c from type A
to type B and, if so, an object a of type A can be
used in any context CB[ ] that expects an object of
type B: CB[a] is legal (well-typed) and equal to
CB[c(a)].

As an example, assuming that both [[man]] and
[[human]] are base types, one may introduce the
following as a basic subtyping relation:

(1) [[man]] < [[human]]

In case that [[man]] is defined as a compos-
ite Σ-type (see §2.3 below for details), where
male : [[human]] → Prop:
(2) [[man]] = Σh : [[human]]. male(h)

we have that (1) is the case because the above Σ-
type is a subtype of [[human]] via the first projec-
tion π1:

(3) (Σh : [[human]]. male(h)) <π1 [[human]]
We will see in the next section the importance of

the coercive subtyping mechanism when dealing
with NLI.

2.3 Dependent typing and universes

One of the basic features of MTTs is the use of
Dependent Types. A dependent type is a family of
types depending on some values. Here we explain
two basic constructors for dependent types, Σ and
Π, both highly relevant for the study of linguistic
semantics.

The constructor/operator Σ is a generaliza-
tion of the Cartesian product of two sets that
allows the second set to depend on values of
the first. For instance, if [[human]] is a type
and male : [[human]] → Prop, then the Σ-type
Σh : [[human]]. male(h) is intuitively the type of
humans who are male.

More formally, if A is a type and B is an A-
indexed family of types, then Σ(A,B), or some-
times written as Σx : A.B(x), is a type, consist-
ing of pairs (a, b) such that a is of type A and b
is of type B(a). When B(x) is a constant type
(i.e., always the same type no matter what x is),
the Σ-type degenerates into product type A×B of
non-dependent pairs. Σ-types (and product types)
are associated projection operations π1 and π2 so
that π1(a, b) = a and π2(a, b) = b, for every (a, b)
of type Σ(A,B) or A×B.

The linguistic relevance of Σ-types can be di-
rectly appreciated once we understand that in its

dependent case, Σ-types can be used to interpret
linguistic phenomena of central importance, like
for example adjectival modification (Ranta, 1994).
For example, handsome man is interpreted as a
Σ-type (4), the type of handsome men (or more
precisely, of those men together with proofs that
they are handsome):

(4) Σm : [[man]]. [[handsome]](m)

where [[handsome]](m) is a family of proposi-
tions/types that depends on the man m.5

The other basic constructor for dependent types
is Π. Π-types can be seen as a generalization of the
normal function space where the second type is a
family of types that might be dependent on the val-
ues of the first. A Π-type degenerates to the func-
tion type A → B in the non-dependent case. In
more detail, when A is a type and P is a predicate
over A, Πx : A.P (x) is the dependent function
type that, in the embedded logic, stands for the
universally quantified proposition ∀x : A.P (x).
For example, the following sentence (5) is inter-
preted as (6):

(5) Every man walks.

(6) Πx : [[man]].[[walk]](x)

Type Universes. An advanced feature of MTTs,
which will be shown to be very relevant in inter-
preting NL semantics, is that of universes. Infor-
mally, a universe is a collection of (the names of)
types put into a type (Martin-Löf, 1984).6 For ex-
ample, one may want to collect all the names of
the types that interpret common nouns into a uni-
verse CN : Type. The idea is that for each type A
that interprets a common noun, there is a name A
in CN. For example,

[[man]] : CN and TCN([[man]]) = [[man]].

5Adjectival modification is a notoriously difficult issue
and as such not all cases of adjectives can be captured via
using a Σ type analysis. For a proper treatment of adjecti-
val modification within this framework, see (Chatzikyriakidis
and Luo, 2013a).

6There is quite a long discussion on how these universes
should be like. In particular, the debate is largely concen-
trated on whether a universe should be predicative or im-
predicative. A strongly impredicative universe U of all types
(with U : U and Π-types) is shown to be paradoxical (Gi-
rard, 1971) and as such logically inconsistent. The theory
UTT we use here has only one impredicative universe Prop
(representing the world of logical formulas) together with in-
finitely many predicative universes which as such avoids Gi-
rard’s paradox (see (Luo, 1994) for more details).

39



In practice, we do not distinguish a type in CN and
its name by omitting the overlines and the operator
TCN by simply writing, for instance, [[man]] : CN.
Thus, the universe includes the collection of the
names that interpret common nouns. For example,
in CN, we shall find the following types:

(7) [[man]], [[woman]], [[book]], ...
(8) Σm : [[man]].[[handsome]](m)
(9) GR + GF

where the Σ-type in (8 is the proposed inter-
pretation of ‘handsome man’ and the disjoint sum
type in (9) is that of ‘gun’ (the sum of real guns
and fake guns – see above).7 Interesting appli-
cations of the use of universes can be proposed
like for example, their use in giving the types for
quantifiers and VP adverbs as extending over the
universe CN (Luo, 2011b) as well as coordination
extending over the universe of all linguistic types
LType (Chatzikyriakidis and Luo, 2012).

3 NL Inference in Coq

Coq is a dependently typed interactive theorem
prover implementing the calculus of Inductive
Constructions (pCiC, see (Coq, 2007)). Coq, and
in general proof-assistants, provide assistance in
the development of formal proofs. The idea is sim-
ple: you use Coq in order to see whether state-
ments as regards anything that has been either pre-
defined or user-defined (definitions, parameters,
variables) can be proven or not. In the case of NLI,
the same idea applies: once the semantics of NL
words are defined, then these semantics can be rea-
soned about by using Coq’s proof mechanism. In
this sense, valid NLIs can be seen as theorems, or
better valid NLIs must be theorems.

A very simple case of semantic entailment, that
of example (10), will therefore be formulated as
the following theorem in Coq (11):

(10) John walks ⇒ some man walks
(11) Theorem x: John walks → some man walks

Now, depending on the semantics of the indi-
vidual lexical items one may or may not prove the
theorem that needs to be proven in each case. In-
ferences like the one shown in (11) are easy cases
in Coq. Assuming the semantics of some which
specify that given any A of type CN and a predi-
cate of type A → Prop, there exists an x : A such

7The use of disjoint sum types was proposed by
(Chatzikyriakidis and Luo, 2013a) in order to deal with priva-
tive modification. The interested reader is directed there for
details.

that P (x) : Prop, such cases are straightforwardly
proven.

3.1 The FraCas test suite

In this section we present how implementing MTT
NL semantics in Coq can deal with various cases
of NLI inference. For this reason, we use exam-
ples from the FraCas test suite. The FraCas Test
Suite (Cooper et al., 1996) arose out of the FraCas
Consortium, a huge collaboration with the aim to
develop a range of resources related to computa-
tional semantics. The FraCas test suite is specifi-
cally designed to reflect what an adequate theory
of NL inference should be able to capture. It com-
prises NLI examples formulated in the form of a
premise (or premises) followed by a question and
an answer. For instance,

(12) Either Smith, Jones and Anderson signed the
contract.
Did Jones sign the contract? [Yes]

The examples are quite simple in format but are
designed to cover a very wide spectrum of seman-
tic phenomena, e.g. generalized quantifiers, con-
joined plurals, tense and aspect related phenom-
ena, adjectives and ellipsis, among others. In what
follows, we show how the use of a rich type sys-
tem can deal with NLI adequately (at least for the
cases looked at) from both a theoretical and an im-
plementational point of view.

3.2 Rich typing and NLI

3.2.1 Quantifiers

A great deal of the FraCas examples are cases of
inference that result from the monotone properties
of quantifiers. Examples concerning monotonic-
ity on the first argument are very easily treated in
a system encoding an MTT with coercive subtyp-
ing, by employing the subtyping relations between
CNs. To put this claim in context, let us look at
the following example (3.55) from the FraCas test
suite:

(13) Some Irish delegates finished the survey on
time.
Did any delegate finish the report on time

[Yes]

Treating adjectival modification as involving a
Σ type where the first projection is always a coer-
cion as in (Luo, 2011a), we get Irish delegate to
be a subtype of delegate, i.e. [[Irishdelegate]] <

40



[[delegate]]. This is basically all that Coq needs in
order to prove the inference.8

Moving on to quantifier cases involving mono-
tonicity on the second argument, we notice that
these are more difficult to get since an adjunct (e.g.
a PP) is involved in deriving the inference:

(14) Some delegates finished the survey on time.
Did any delegate finish the survey? [Yes]

The type proposed for VP adverbs by Luo (Luo,
2011b) is based on the idea of a type universe of
CNs. As already said in the introduction, type uni-
verses a universe is a collection of (the names of)
types put into a type. In this respect, one can form
the universe CN which basically stands for the
collection of names interpreting common nouns.
The type proposed for VP adverbs makes use of
this CN universe and assumes quantification over
it (Chatzikyriakidis and Luo, 2013a; Chatzikyri-
akidis and Luo, 2012):

(15) ΠA : CN. (A → Prop) → (A → Prop)
However, in order to derive the inference

needed in cases of monotonicity on the second ar-
gument cases, this typing alone is not enough. Σ
types can be used in order to slightly modify the
typing. In order to do this, we first introduce an
auxiliary object ADV as follows:

(16) ADV : ΠA : CN.Πv : A → Prop.Σp : A →
Prop.∀x : A.p(x) ⊃ v(x)

This reads as follows: for any common noun A
and any predicate v over A, ADV (A, v) is a pair
(p,m) such that for any x : A, p(x) implies v(x).
Taking the sentence (14) as an example, for the
CN delegate and predicate [[finish]]9, we define
on time to be the first projection of the auxiliary
object (16) which is of type (15):

(17) on time = λA : CN.λv : A → Prop.
π1(ONTIME(A, v))

As a consequence, for instance, any delegate
who finished the survey on time (p(x)) in (16) did
finish the survey (v(x)).

8For details on the semantics of the other lexical items like
e.g. VP adverbs in the sentence, see the following discussion.
Also, following Luo (Luo, 2011a) we implement Σ-types as
dependent record types in Coq. Again, see (Chatzikyriakidis
and Luo, 2013b) for details.

9Note that [[finish]] : [[human]] → Prop <
[[delegate]] → Prop.

3.2.2 Conjoined NPs

Inference involving conjoined NPs concerns cases
like the one shown below:

(18) Smith, Jones and Anderson signed the con-
tract.
Did Jones sign the contract? [Yes]

In (Chatzikyriakidis and Luo, 2012), a polymor-
phic type for binary coordinators that extends over
the constructed universe LType, the universe of
linguistic types was proposed. This can be ex-
tended to n-ary coordinators. For example, the
coordinator and may take three arguments, as in
the premise of (18). In such cases, the type of the
coordinator, denoted as and3 in semantics, is:

(19) and3 : ΠA : LType.A → A → A → A.
Intuitively, we may write this type as

ΠA : LType.A3 → A. For instance, the
semantics of (18) is (20), where c is ‘the contract’:

(20) [[sign]](and3(s, j, a), c)

In order to consider such coordinators in rea-
soning, we consider the following auxiliary object
(similarly to the auxiliary object ADV ) and define
and3 as follows:

(21) AND3 : ΠA : LType. Πx, y, z : A. Σa :
A. ∀p : A → Prop. p(a) ⊃ p(x) ∧ p(y) ∧
p(z).

(22) and3 = λA : LType.λx, y, z : A.
π1(AND3(A, x, y, z))

Having defined the coordinators such as and in
such a way, we can get the desired inferences. For
example, from the semantics (20), we can infer
that ‘Jones signed the contract’, the hypothesis in
(18).10 Coordinators such as or can be defined in
a similar way.

3.2.3 Comparatives

Inference with comparatives can also be treated by
using Σ types. Two ways of doing this will be pro-
posed, one not involving and one involving mea-
sures. We shall consider shorter than as a typi-
cal example. Intuitively, shorter than should be

10A note about Coq is in order here: building new uni-
verses is not an option in Coq (or, put in another way, Coq
does not support building of new universes). Instead, we shall
use an existing universe in Coq in conducting our examples
for coordination.

41



of type Human → Human → Prop as in the
following example:

(23) Mary is shorter than John.

We assume that there be a predicate
short : Human → Prop, expressing that a
human is short. Intuitively, if Mary is shorter
than John and John is short, then so is Mary.
Furthermore, one should be able to take care of
the transitive properties of comparatives. Thus,
if A is COMP than B and B is COMP than
C , then A is also COMP than C . All these
can be captured by considering COMP of the
following Σ-type and define shorter than to be its
first projection:

(24) COMP : Σp : Human → Human →
Prop.∀h1, h2, h3 : Human.
p(h1, h2) ∧ p(h2, h3) ⊃ p(h1, h3) ∧
∀h1, h2 : Human.p(h1, h2) ⊃ short(h2) ⊃
short(h1).

(25) [[shorter than]] = π1(COMP )
With the above, we can easily show that the in-

ferences like (26) can be obtained as expected.11

(26) John is shorter than George.
George is shorter than Stergios.

Is John shorter than Stergios? [Yes]

Given the definition in COMP according to
which if two elements stand in a COMP relation
(meaning that the first argument is shorter than
the second one), and there is also a third element
standing in a COMP relation with the second,
then by transitivity defined in COMP , this third
element also stands in a COMP relation with the
first, i.e. the third element is shorter than the first.

3.2.4 Factive/Implicative verbs

This section concerns inference cases with various
types of verbs that presuppose the truth of their
complement like for example factive or implica-
tive verbs. Example (27) is an example of such a
verb, while (28) is not:

(27) Smith knew that Itel had won the contract
1991.
Did Itel win the contract in 1991? [Yes]

11In giving a full analysis of compratives, one may further
consider measures. Such an account is also possible using Σ
types, in effect extending the account just proposed for com-
paratives. The idea is basically to extend the above account
using dependent typing over measures. Such an account can
be found in (Chatzikyriakidis and Luo, 2013b)

(28) Smith believed that Itel had won the contract
1991.
Did Itel win the contract in 1991? [Don’t

know]

What we need is to encode that verbs like know
presuppose their argument’s truth while verbs like
believe do not. For instance, know belongs to the
former class and its semantics is given as follows:

(29) KNOW = Σp : Human → Prop →
Prop. ∀h : Human∀P : Prop. p(h, P ) ⊃
P

(30) [[know]] = π1(KNOW )
In effect, a similar reasoning to the one used in

dealing with VP adverbs is proposed. In effect,
an auxiliary object is firstly used, followed by the
definition of know as the first projection of the Σ
type involved in the auxiliary object. With this, the
inference (27) can be obtained as expected. In-
tensional verbs like believe on the other hand do
not imply their arguments and inferences like (28)
cannot be shown to be valid inferences.

3.2.5 Adjectival inference

As a last example of the use of rich typing in order
to deal with NLI, we discuss NLI cases involving
adjectives. In (Chatzikyriakidis and Luo, 2013a)
we have shown that the use of subtyping, Σ types
and universes can give us a correct account of at
least intersective and subsective adjectives. Note
that the original Σ type analysis proposed by re-
searchers like Ranta (Ranta, 1994) is inadequate to
capture the inferential properties of either intersec-
tive or subsective adjectives. The FraCas test suite
has a rather different classification. One major dis-
tinction is between affirmative and non-affirmative
adjectives shown below:

(31) Affirmative: Adj(N) ⇒ (N)
(32) Non-affirmative: Adj(N) ; (N)

Concentrating on affirmative adjectives for the
moment, we see that a Σ type analysis is enough
in these cases.Cases of affirmative adjectives are
handled well with the existing record mechanism
already used for adjectives. The following infer-
ence as well as similar inferences are correctly
captured, given that a CN modified by an inter-
sective adjective is interpreted as a Σ-type which
is a subtype of the CN via means of the first pro-
jection.

Cases of subsective adjectives are discussed
in the section dubbed as extensional comparison

42



classes in the FraCas test suite. There, cases of
adjectival inference involving adjectives like small
and large are discussed. Cases like these can be
handled using a typing which quantifies over a uni-
verse. In the case of large and small this universe
is the universe CN:12

(33) ΠA : CN. (A → Prop)
With this typing, cases like the one shown be-

low are correctly treated:

(34) All mice are small animals.
Mickey is a large mouse.
Is Mickey a large animal? [No]

Lastly, one should be able to take care of infer-
ences associated with intersective adjectives like
the one shown below:

(35) Adjinter man ⇒ Adjinter human
A concrete example would be black man im-

plying black human. Given that coercions ac-
cording to Luo’s MTT propagate via the various
type constructors, we have: Σ([[man]], black) <
Σ([[human]], black). 13

4 Linguistic Coercions in MTTs with
Coercive Subtyping

Besides being crucial for MTT-semantics, coer-
cive subtyping (Luo, 1999; Luo et al., 2012) also
provides us a framework to interpret various lin-
guistic coercions (Asher and Luo, 2012). Besides
explaining the basic mechanisms, we shall also
show (in §4.3) that dependent types have interest-
ing applications in dealing with situations with so-
phisticated coercions in MTT-semantics.

4.1 Basic coercions

The basic coercive subtyping mechanism that co-
erces f(a) into f(c(a)) by inserting the coercion
c into a gap between f and a, suffices to represent
many linguistic coercions. For example, consider

(36) Julie enjoyed a book.

12Other more restricted universes will be needed for adjec-
tives like skilful given that we may want to avoid construc-
tions like skilful table. Universe subtyping can take care of
these issues. In effect, one can introduce a subuniverse of CN
containing the names of the types [[human]] and its subtypes
only. Let us call this universe CNH , which is a subtype of
CN: CNH < CN. Now skillful extends over this more re-
stricted universe. See (Chatzikyriakidis and Luo, 2013a) for
more detalis.

13Cases of non-committal and privative adjectives will not
be dealt with in this paper for reasons of space. The interested
reader is directed to (Chatzikyriakidis and Luo, 2013a) for a
treatment of these types of adjectives within the MTT setting
discussed in this paper.

The MTT-semantics of (36) is (37):

(37) ∃x : [[book]]. [[enjoy]](j, x)

where

(38) [[enjoy]] : Human → Event → Prop.

However, the domain type of [[enjoy]](j) is
Event, which is different from Book! Then, how
can [[enjoy]](j, x) in (37) be well-typed? The an-
swer is that, in the framework of coercive subtyp-
ing and, in particular, under the assumption of the
following coercion:

(39) Book <reading Event

[[enjoy]](j, x) is coerced into (and, formally, equal
to) [[enjoy]](j, reading(x)) and hence well-typed.
Informally, the sentence (36) is coerced into (40):

(40) Julie enjoyed reading a book.

Note that, in the above, we have considered
only one possible coercion (39): from ‘enjoy a
book’ to ‘enjoy reading a book’. As we noted
in the previous section, however, there are in fact
context-dependent ‘multiple coercions’: e.g., (36)
could have meant ‘Julie enjoyed writing a book’;
there could also be several reading events of that
book. Coercive subtyping requires contextual
uniqueness of coercions14, we must restrict the
scope/context using local coercions (Luo, 2011a).

4.2 Local Coercions

In many situations, it is necessary to limit the
scope of a coercion. (36) furnishes an example:
with the formal coercion (39), (37) is the correct
interpretation of (36). However, there may be sev-
eral possible coercions and hence (36) may have
several meanings: which one to use can only be
decided contextually. But note that coherence in
coercive subtyping (contextual uniqueness of co-
ercions) is necessary for formal semantics to deal
with ambiguity. In such situations, we use local
coercions to limit the scope of applicability of co-
ercions. For instance, if (36) is used to mean (40)
or ‘Julie enjoyed writing a book’, we exploit the
following two coercions for (36):

(41) coercion Book <reading Event in (37)

14This refers to the notion of coherence, the requirement
that any two coercions between the same two types (in the
same context) be the same. See (Luo, 1999; Luo et al., 2012)
for its formal definition.

43



(42) coercion Book <writing Event in (37)

Note that such interpretations involve different lo-
cal coercions and can be used in the same context.
There is no ambiguity or confusion as to which co-
ercion is to be employed, but we must make clear
the scope of each one of the coercions, over what
terms they are operative.

Local coercions have a dual notion – coer-
cion contexts, which are contexts (in type theory)
which may contain coercion entries of the form
A <c B as well as entries of the usual form x : A.
Coercion contexts occur left to the `-sign. One
can move a coercion entry in a coercion context
to the right-hand side of the `-sign to form a lo-
cal coercion, while the inversion of this moves
the coercion in a local coercion to the left. These
constructs are governed by the relevant inference
rules, some of which are discussed in, for exam-
ple, (Luo, 2011a).

4.3 Dependent Types in Coercion Semantics

Sometimes, a simple scoping restriction is not
enough. For example, consider

(43) Jill just started War and Peace, which Tol-
stoy finished after many years of hard work.
But that won’t last because she never gets
through long novels.

It is not difficult to see that in (43) the scopes of the
reading and writing coercions overlap intertwin-
ingly, and so restrictions on the scopes of coer-
cions will not be sufficient here to ensure unique-
ness to eliminate ambiguity.

In many such cases, dependent typing proves to
be useful. Indeed, this is the first time in the litera-
ture, as far as we know, that dependent types have
been shown to be useful directly in the formal se-
mantics of linguistic coercions.

For example, for the above sentences (43), in-
stead of Event, we may consider the family of
types

Evt : Human → Type;
intuitively, for any h : Human, the depen-
dent type Evt(h) is the type of events con-
ducted by h. Now, we can assume that
the verbs start, finish and last have type
Πh : Human. (Evt(h) → Prop) and read
and write have type Πh : Human. (Book →
Evt(h)). Furthermore, we can consider the
following parameterised coercions, for any
h : Human,

Book <c(h) Evt(h),

where the coercion c(h) is the function from Book
to Evt(h) defined as follows: for any b : Book,

c(h, b) =

{
write(h, b) if h wrote b,

read(h, b) otherwise.

where we have simplified the second case by as-
suming that one would read a book if he/she has
not written it. (One may think of other actions to
consider more subcases here.) Having the above,
we can now interpret (43) as follows (in a simpli-
fied form):

(44) start(j, wp)
& finish(t, wp)
& ¬last(j, wp)
& ∀lb : LBook.finish(j, π1(lb))

where LBook ≡ Σb : Book.long(b) is the type
that interprets the CN ‘long book’ and π1 is the
first projection operator that takes a long book and
returns the book itself. In the coercive subtyping
framework, (44) is coerced into (and equal to) the
following:

(45) start(j, c(j, wp))
& finish(t, c(t, wp))
& ¬last(j, c(j, wp))
& ∀lb : LBook. finish(j, c(j, π1(lb)))

which is (equal to)

(46) start(j, read(j, wp))
& finish(t, write(t, wp))
& ¬last(j, read(j, wp))
& ∀lb : LBook. finish(j, c(j, π1(lb)))

Note that, in the last conjunct, the coercion c is
still present – c(j, π1(lb)) cannot be reduced fur-
thermore because lb is a variable.

5 Conclusions

In this paper we proposed to deal with NLI by
making use of proof-assistant technology, in par-
ticular the proof-assistant Coq. It was shown that
the combination of MTT semantics as well as the
use of a proof-assistant that ‘understands’ so to say
MTT semantics can provide us with encouraging
results as regards the computational treatment of
NLI. More specifically, the paper has concentrated
on the importance and expressivity of MTTs as re-
gards typing by exemplifying the use of a rich typ-
ing system in order to deal with a number of infer-
ence cases ranging from adjectival and adverbial

44



modification to conjoined/disjoined NPs, compar-
atives as well as factive/implicative verbs and type
coercions.

References

N. Asher and Z. Luo. 2012. Formalisation of coercions
in lexical semantics. Sinn und Bedeutung 17, Paris,
223.

P. Boldini. 2000. Formalizing context in intuitionistic
type theory. Fundamenta Informaticae, 42(2):1–23.

S. Chatzikyriakidis and Z. Luo. 2012. An ac-
count of natural language coordination in type the-
ory with coercive subtyping. In Y. Parmentier and
D. Duchier, editors, Proc. of Constraint Solving and
Language Processing (CSLP12). LNCS 8114, pages
31–51, Orleans.

S. Chatzikyriakidis and Z. Luo. 2013a. Adjectives
in a modern type-theoretical setting. In G. Morrill
and J.M Nederhof, editors, Proceedings of Formal
Grammar 2013. LNCS 8036, pages 159–174.

S. Chatzikyriakidis and Z. Luo. 2013b. Natural lan-
guage inference in coq. Submitted.

S. Chatzikyriakidis and Z. Luo. 2014. Hyperin-
tensionality in modern type theories. Submitted
manuscript.

A. Church. 1940. A formulation of the simple theory
of types. J. Symbolic Logic, 5(1).

R. Cooper, D. Crouch, J. van Eijck, C. Fox, J. van Gen-
abith, J. Jaspars, H. Kamp, D. Milward, M. Pinkal,
M. Poesio, and S. Pulman. 1996. Using
the framework. Technical Report LRE 62-051r.
http://www.cogsci.ed.ac.uk/ fracas/.

R. Cooper. 2005. Records and record types in semantic
theory. J. Logic and Compututation, 15(2).

The Coq Development Team, 2007. The Coq Proof
Assistant Reference Manual (Version 8.1), INRIA.

C. Fox and S. Lappin. 2005. Foundations of Inten-
sional Semantics. Blackwell.

J. Ginzburg and R. Cooper. forthcoming. Ttr for nat-
ural language semantics. In C. Fox and S. Lappin,
editors, Handbook of Contemporary Semantic The-
ory. Blackwell.

J.-Y. Girard. 1971. Une extension de l’interpretation
fonctionelle de gödel à l’analyse et son application
à l’élimination des coupures dans et la thèorie des
types’. Proc. 2nd Scandinavian Logic Symposium.
North-Holland.

H. Goguen. 1994. A Typed Operational Semantics for
Type Theory. Ph.D. thesis, University of Edinburgh.

Z. Luo, S. Soloviev, and T. Xue. 2012. Coercive
subtyping: theory and implementation. Information
and Computation, 223:18–42.

Z. Luo. 1994. Computation and Reasoning: A Type
Theory for Computer Science. Oxford Univ Press.

Z. Luo. 1999. Coercive subtyping. Journal of Logic
and Computation, 9(1):105–130.

Z. Luo. 2010. Type-theoretical semantics with coer-
cive subtyping. Semantics and Linguistic Theory 20
(SALT20), Vancouver, 84(2):28–56.

Z. Luo. 2011a. Contextual analysis of word meanings
in type-theoretical semantics. In Logical Aspects
of Computational Linguistics (LACL’2011). LNAI
6736, pages 159–174.

Zhaohui Luo. 2011b. Adjectives and adverbs in type-
theoretical semantics. Notes.

Z. Luo. 2012a. Common nouns as types. In D. Bechet
and A. Dikovsky, editors, Logical Aspects of Com-
putational Linguistics (LACL’2012). LNCS 7351,
pages 173–185.

Z. Luo. 2012b. Formal semantics in modern type the-
ories with coercive subtyping. Linguistics and Phi-
losophy, 35(6):491–513.

B. MacCartney. 2009. Natural Language Inference.
Ph.D. thesis, Stanford Universisty.

P. Martin-Löf. 1975. An intuitionistic theory of types:
predicative part. In H.Rose and J.C.Shepherdson,
editors, Logic Colloquium’73.

P. Martin-Löf. 1984. Intuitionistic Type Theory. Bib-
liopolis.

R. Montague. 1974. Formal Philosophy. Yale Univer-
sity Press.

A. Ranta. 1994. Type-Theoretical Grammar. Oxford
University Press.

C. Retoré. 2013. The Montagovian generative lexicon
λTyn: an integrated type-theoretical framework for
compositional semantics and lexical pragmatics.

G. Sundholm. 1989. Constructive generalized quanti-
fiers. Synthese, 79(1):1–12.

45


