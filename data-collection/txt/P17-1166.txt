



















































Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics


Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1810‚Äì1820
Vancouver, Canada, July 30 - August 4, 2017. c¬©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-1166

Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1810‚Äì1820
Vancouver, Canada, July 30 - August 4, 2017. c¬©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-1166

Jointly Extracting Relations with Class Ties
via Effective Deep Ranking

Hai Ye1, Wenhan Chao1, Zhunchen Luo2‚àó, Zhoujun Li1
1School of Computer Science and Engineering, Beihang University, Beijing 100191, China

{yehai, chaowenhan, lizj}@buaa.edu.cn
2China Defense Science and Technology Information Center, Beijing 100142, China

zhunchenluo@gmail.com

Abstract

Connections between relations in relation
extraction, which we call class ties, are
common. In distantly supervised scenario,
one entity tuple may have multiple relation
facts. Exploiting class ties between rela-
tions of one entity tuple will be promising
for distantly supervised relation extrac-
tion. However, previous models are not ef-
fective or ignore to model this property. In
this work, to effectively leverage class ties,
we propose to make joint relation extrac-
tion with a unified model that integrates
convolutional neural network (CNN) with
a general pairwise ranking framework, in
which three novel ranking loss functions
are introduced. Additionally, an effective
method is presented to relieve the severe
class imbalance problem from NR (not re-
lation) for model training. Experiments on
a widely used dataset show that leverag-
ing class ties will enhance extraction and
demonstrate the effectiveness of our model
to learn class ties. Our model outperforms
the baselines significantly, achieving state-
of-the-art performance.

1 Introduction

Relation extraction (RE) aims to classify the
relations between two given named entities from
natural-language text. Supervised machine learn-
ing methods require numerous labeled data to
work well. With the rapid growth of volume of
relation types, traditional methods can not keep
up with the step for the limitation of labeled data.
In order to narrow down the gap of data spar-
sity, Mintz et al. (2009) propose distant supervi-
sion (DS) for relation extraction, which automati-

‚àó Corresponding author.

place lived (Patsy Ramsey, Atlanta)
place of birth (Patsy Ramsey, Atlanta)

Sentence Latent Label
#1 Patsy Ramsey has been living in

Atlanta since she was born.
place of birth

#2 Patsy Ramsy always loves At-
lanta since it is her hometown.

place lived

Table 1: Training instances generated by freebase.

cally generates training data by aligning a knowl-
edge facts database (ie. Freebase (Bollacker et al.,
2008)) with texts.

Class ties mean the connections between rela-
tions in relation extraction. In general, we con-
clude that class ties can have two types: weak
class ties and strong class ties. Weak class ties
mainly involve the co-occurrence of relations such
as place of birth and place lived, CEO of and
founder of. On the contrary, strong class ties
mean that relations have latent logical entailments.
Take the two relations of capital of and city of
for example, if one entity tuple has the rela-
tion of capital of, it must express the relation
fact of city of, because the two relations have the
entailment of capital of ‚áí city of. Obviously
the opposite induction is not correct. Further
take the sentence of ‚ÄúJonbenet told me that her
mother [Patsy Ramsey]e1 never left [Atlanta]e2
since she was born.‚Äù in DS scenario for exam-
ple. This sentence expresses two relation facts
which are place of birth and place lived. How-
ever, the word ‚Äúborn‚Äù is a strong bios to extract
place of birth, so it may not be easy to predict the
relation of place lived, but if we can incorporate
the weak ties between the two relations, extracting
place of birth will provide evidence for prediction
of place lived.

Exploiting class ties is necessary for DS based
relation extraction. In DS scenario, there is a chal-
lenge that one entity tuple can have multiple rela-

1810

https://doi.org/10.18653/v1/P17-1166
https://doi.org/10.18653/v1/P17-1166


tion facts as shown in Table 1, which is called rela-
tion overlapping (Hoffmann et al., 2011; Surdeanu
et al., 2012). However, the relations of one entity
tuple can have class ties mentioned above which
can be leveraged to enhance relation extraction
for it narrowing down potential searching spaces
and reducing uncertainties between relations when
predicting unknown relations. If one pair entities
has CEO of, it will contain founder of with high
possibility.

To exploit class ties between relations, we pro-
pose to make joint extraction for all positive labels
of one entity tuple with considering pairwise con-
nections between positive and negative labels in-
spired by (FuÃàrnkranz et al., 2008; Zhang and Zhou,
2006). As the two relations with class ties shown
in Table 1, by joint extraction of two relations, we
can maintain the class ties (co-occurrence) of them
from training samples to be learned by potential
model, and then leverage this learned information
to extract instances with unknown relations, which
can not be achieved by separated extraction for
it dividing labels apart losing information of co-
occurrence. To classify positive labels from nega-
tive ones, we adopt pairwise ranking to rank pos-
itive ones higher than negative ones, exploiting
pairwise connections between them. In a word,
joint extraction exploits class ties between rela-
tions and pairwise ranking classify positive labels
from negative ones. Furthermore, combining in-
formation across sentences will be more appropri-
ate for joint extraction which provides more infor-
mation from other sentences to extract each rela-
tion (Zheng et al., 2016; Lin et al., 2016). In Table
1, sentence #1 is the evidence for place of birth,
but it also expresses the meaning of ‚Äúliving in
someplace‚Äù, so it can be aggregated with sentence
#2 to extract place lived. Meanwhile, the word of
‚Äúhometown‚Äù in sentence #2 can provide evidence
for place of birth which should be combined with
sentence #1 to extract place of birth.

In this work, we propose a unified model that
integrates pairwise ranking with CNN to exploit
class ties. Inspired by the effectiveness of deep
learning for modeling sentences (LeCun et al.,
2015), we use CNN to encode sentences. Simi-
lar to (Santos et al., 2015; Lin et al., 2016), we
use class embeddings to represent relation classes.
The whole model architecture is presented in Fig-
ure 1. We first use CNN to embed sentences, then
we introduce two variant methods to combine the

x2x1 xn

s1 s2 sn

s

c1 c2 cm

ùëä[#$] & ùë†
class	

embedding

encoded	by	CNN

sentence	
embedding

bag	representation	
vector combine	

sentences

Figure 1: The main architecture of our model.

embedded sentences into one bag representation
vector aiming to aggregate information across sen-
tences, after that we measure the similarity be-
tween bag representation and relation class in real-
valued space. With two variants for combining
sentences, three novel pairwise ranking loss func-
tions are proposed to make joint extraction. Be-
sides, to relieve the bad impact of class imbalance
from NR (not relation) (Japkowicz and Stephen,
2002) for training our model, we cut down loss
propagation from NR class during training.

Our experimental results on dataset of Riedel
et al. (2010) are evident that: (1) Our model is
much more effective than the baselines; (2) Lever-
aging class ties will enhance relation extraction
and our model is efficient to learn class ties by
joint extraction; (3) A much better model can be
trained after relieving class imbalance from NR.

Our contributions in this paper can be encapsu-
lated as follows:
‚Ä¢ We propose to leverage class ties to enhance

relation extraction. An effective deep ranking
model which integrates CNN and pairwise rank-
ing framework is introduced to exploit class ties.
‚Ä¢ We propose an effective method to relieve

the impact of data imbalance from NR for model
training.
‚Ä¢ Our method achieves state-of-the-art perfor-

mance.

2 Related Work

We summarize related works on two main as-
pects:

2.1 Distant Supervision Relation Extraction
Previous works on DS based RE ignore or are

not effective to leverage class ties between rela-

1811



tions.
Riedel et al. (2010) introduce multi-instance

learning to relieve the wrong labelling problem,
ignoring class ties. Afterwards, Hoffmann et al.
(2011) and Surdeanu et al. (2012) model this prob-
lem by multi-instance multi-label learning to ex-
tract overlapping relations. Though they also pro-
pose to make joint extraction of relations, they
only use information from single sentence losing
information from other sentences. Han and Sun
(2016) try to use Markov logic model to capture
consistency between relation labels, on the con-
trary, our model leverages deep ranking to learn
class ties automatically.

With the remarkable success of deep learning in
CV and NLP (LeCun et al., 2015), deep learning
has been applied to relation extraction (Zeng et al.,
2014, 2015; Santos et al., 2015; Lin et al., 2016),
the specific deep learning architecture can be CNN
(Zeng et al., 2014), RNN (Zhou et al., 2016), etc.
Zeng et al. (2015) propose a piecewise convolu-
tional neural network with multi-instance learning
for DS based relation extraction, which improves
the precision and recall significantly. Afterwards,
Lin et al. (2016) introduce the mechanism of at-
tention (Luong et al., 2015; Bahdanau et al., 2014)
to select the sentences to relieve the wrong la-
belling problem and use all the information across
sentences. However, the two deep learning based
models only make separated extraction thus can
not model class ties between relations.

2.2 Deep Learning to Rank

Deep learning to rank has been widely used in
many problems to serve as a classification model.
In image retrieval, Zhao et al. (2015) apply deep
semantic ranking for multi-label image retrieval.
In text matching, Severyn and Moschitti (2015)
adopt learning to rank combined with deep CNN
for short text pairs matching. In traditional super-
vised relation extraction, Santos et al. (2015) de-
sign a pairwise loss function based on CNN for
single label relation extraction. Based on the ad-
vantage of deep learning to rank, we propose pair-
wise learning to rank (LTR) (Liu, 2009) combined
with CNN in our model aiming to jointly extract
multiple relations.

3 Proposed Model

In this section, we first conclude the notations
used in this paper, then we introduce the used

CNN for sentence embedding, afterwards, we
present our algorithm of how to learn class ties be-
tween relations of one entity tuple.

3.1 Notation
We define the relation classes as L =
{1, 2, ¬∑ ¬∑ ¬∑ , C}, entity tuples as T = {ti}Mi=1 and
mentions1 as X = {xi}Ni=1. Dataset is constructed
as follows: for entity tuple ti ‚àà T and its rela-
tion class set Li ‚äÜ L, we collect all the men-
tions Xi that contain ti, the dataset we use is D =
{(ti, Li, Xi)}Hi=1. Given a data (tk, Lk, Xk) ‚àà
{(ti, Li, Xi)}Hi=1, the sentence embeddings of Xk
encoded by CNN are defined as Sk = {si}|Xk|i=1 and
we use class embeddingsW ‚àà R|L|√ód to represent
the relation classes.

3.2 CNN for Sentence Embedding
We take the effective CNN architecture adopted

from (Zeng et al., 2015; Lin et al., 2016) to encode
sentence and we briefly introduce CNN in this sec-
tion. More details of our CNN can be obtained
from previous work.

3.2.1 Words Representations
‚Ä¢ Word Embedding Given a word embedding
matrix V ‚àà Rlw√ód1 where lw is the size of
word dictionary and d1 is the dimension of
word embedding, the words of a mention x =
{w1, w2, ¬∑ ¬∑ ¬∑ , wn} will be represented by real-
valued vectors from V .
‚Ä¢ Position Embedding The position embedding
of a word measures the distance from the word
to entities in a mention. We add position em-
beddings into words representations by append-
ing position embedding to word embedding for
every word. Given a position embedding matrix
P ‚àà Rlp√ód2 where lp is the number of distances
and d2 is the dimension of position embeddings,
the dimension of words representations becomes
dw = d1 + d2 √ó 2.
3.2.2 Convolution, Piecewise max-pooling

After transforming words in x to real-valued
vectors, we get the sentence q ‚àà Rn√ódw . The set
of kernels K is {Ki}dsi=1 where ds is the number
of kernels. Define the window size as dwin and
given one kernel Kk ‚àà Rd

win√ódw , the convolution
operation is defined as follows:

m[i] = q[i:i+dwin‚àí1] ÔøΩKk + b[k] (1)
1The sentence containing one certain entity is called men-

tion.

1812



where m is the vector after conducting convolu-
tion along q for n ‚àí dwin + 1 times and b ‚àà Rds
is the bias vector. For these vectors whose indexes
out of range of [1, n], we replace them with zero
vectors.

By piecewise max-pooling, when pooling, the
sentence is divided into three parts: m[p0:p1],
m[p1:p2] andm[p2:p3] (p1 and p2 are the positions of
entities, p0 is the beginning of sentence and p3 is
the end of sentence). This piecewise max-pooling
is defined as follows:

z[j] = max(m[pj‚àí1:pj ]) (2)

where z ‚àà R3 is the result of mention x processed
by kernel Kk; 1 ‚â§ j ‚â§ 3. Given the set of kernels
K, following the above steps, the mention x can
be embedded to o where o ‚àà Rds‚àó3.

3.2.3 Non-Linear Layer, Regularization
To learn high-level features of mentions, we ap-

ply a non-linear layer after pooling layer. After
that, a dropout layer is applied to prevent over-
fitting. We define the final fixed sentence repre-
sentation as s ‚àà Rdf (df = ds ‚àó 3).

s = g(o) ‚ó¶ h (3)

where g(¬∑) is a non-linear function and we use
tanh(¬∑) in this paper; h is a Bernoulli random vec-
tor with probability p to be 1.

3.3 Learning Class Ties by Joint Extraction
with Pairwise Ranking

As mentioned above, to learn class ties, we
propose to make joint extraction with consider-
ing pairwise connections between positive labels
and negative ones. Pairwise ranking is applied to
achieve this goal. Besides, combining informa-
tion across sentences is necessary for joint extrac-
tion. More specifically, as shown in Figure 2, from
down to top, all information from sentences is
pre-propagated to provide enough information for
joint extraction. From top to down, pairwise rank-
ing jointly extracting positive relations by combin-
ing losses, which are back-propagated to CNN to
learn class ties.

3.3.1 Combining Information across
Sentences

We propose two options to combine sentences
to provide enough information for joint extraction.

1 2

x1 x2 xn

c1 c2 cm

s

Class	Ties

Combine	
information	from		
all	sentences

Joint	extraction	
by	combining	

losses

Figure 2: Illustration of mechanism of our model
to model class ties between relations.

‚Ä¢ AVE The first option is average method. This
method regards all the sentences equally and di-
rectly average the values in all dimensions of sen-
tence embedding. This AVE function is defined as
follows:

s =
1

n

‚àë

si‚ààSk
si (4)

where n is the number of sentences and s is the
representation vector combining all sentence em-
beddings. Because it weights the importance of
sentences equally, this method may bring much
noise data from two aspects: (1) the wrong la-
belling data; (2) irrelated mentions for one relation
class, for all sentences containing the same entity
tuple being combined together to construct the bag
representation.
‚Ä¢ ATT The second one is a sentence-level atten-
tion algorithm used by Lin et al. (2016) to mea-
sure the importance of sentences aiming to relieve
the wrong labelling problem. For every sentence,
ATT will calculate a weight by comparing the sen-
tence to one relation. We first calculate the similar-
ity between one sentence embedding and relation
class as follows:

ej = a ¬∑W[c] ¬∑ sj (5)

where ej is the similarity between sentence em-
bedding sj and relation class c and a is a bias fac-
tor. In this paper, we set a as 0.5. Then we apply
Softmax to rescale e (e = {ei}|Xk|i=1 ) to [0, 1]. We
get the weight Œ±j for sj as follows:

Œ±j =
exp(ej)‚àë
ei‚ààe exp(ei)

(6)

so the function to merge s with ATT is as follows:

1813



s =

|Xk|‚àë

i=1

Œ±i ¬∑ si (7)

3.3.2 Joint Extraction by Combining Losses
to Learn Class Ties

Firstly, we have to present the score function to
measure the similarity between s and relation c.
‚Ä¢ Score Function We use dot function to produce
score for s to be predicted as relation c. The score
function is as follows:

F(s, c) =W[c] ¬∑ s (8)

There are other options for score function. In
Wang et al. (2016), they propose a margin based
loss function that measures the similarity between
s and W[c] by distance. Because score function is
not an important issue in our model, we adopt dot
function, also used by Santos et al. (2015) and Lin
et al. (2016), as our score function.

Now we start to introduce the ranking loss func-
tion.

Pairwise ranking aims to learn the score func-
tion F(s, c) that ranks positive classes higher than
negative ones. This goal can be summarized as
follows:

‚àÄc+ ‚àà Lk, ‚àÄc‚àí ‚àà L‚àíLk : F(s, c+) > F(s, c‚àí)+Œ≤
(9)

where Œ≤ is a margin factor which controls the min-
imum margin between the positive scores and neg-
ative scores.

To learn class ties between relations, we extend
the formula (9) to make joint extraction and we
propose three ranking loss functions with variants
of combining sentences. Followings are the pro-
posed loss functions:
‚Ä¢ with AVE (Variant-1) We define the margin-
based loss function with option of AVE to aggre-
gate sentences as follows:

G[ave] =
‚àë

c+‚ààLk
œÅ[0, œÉ+ ‚àíF(s, c+)]+

+œÅ|Lk|[0, œÉ‚àí + F(s, c‚àí)]+ (10)

where [0, ¬∑ ]+ = max(0, ¬∑ ); œÅ is the rescale fac-
tor, œÉ+ is positive margin and œÉ‚àí is negative mar-
gin. Similar to Santos et al. (2015) and Wang et al.
(2016), this loss function is designed to rank pos-
itive classes higher than negative ones controlled
by the margin of œÉ+ ‚àí œÉ‚àí. In reality, F(s, c+)
will be higher than œÉ+ and F(s, c‚àí) will be lower

than œÉ‚àí. In our work, we set œÅ as 2, œÉ+ as 2.5 and
œÉ‚àí as 0.5 adopted from Santos et al. (2015).

Similar to Weston et al. (2011) and Santos et al.
(2015), we update one negative class at every
training round but to balance the loss between
positive classes and negative ones, we multiply
|Lk| before the right term in function (10) to ex-
pand the negative loss. We apply mini-bach based
stochastic gradient descent (SGD) to minimize the
loss function. The negative class is chosen as the
one with highest score among all negative classes
(Santos et al., 2015), i.e.:

c‚àí = argmax
c‚ààL‚àíLk

F(s, c) (11)

‚Ä¢ with ATT (Variant-2) Now we define the loss
function for the option of ATT to combine sen-
tences as follows:

G[att] =
‚àë

c+‚ààLk
(œÅ[0, œÉ+ ‚àíF(sc+ , c+)]+

+œÅ[0, œÉ‚àí + F(sc+ , c‚àí)]+) (12)

where sc means the attention weights of represen-
tation s are merged by comparing sentence embed-
dings with relation class c and c‚àí is chosen by the
following function:

c‚àí = argmax
c‚ààL‚àíLk

F(sc+ , c) (13)

which means we update one negative class in ev-
ery training round. We keep the values of œÅ, œÉ+

and œÉ‚àí same as values in function (10).
According to this loss function, we can see

that: for each class c+ ‚àà Lk, it will capture the
most related information from sentences to merge
sc

+
, then rank F(sc+ , c+) higher than all negative

scores which each is F(sc+ , c‚àí) (c‚àí ‚àà L ‚àí Lk).
We use the same update algorithm to minimize this
loss.
‚Ä¢ Extended with ATT (Variant-3) According to
function (12), for each c+, we only select one neg-
ative class to update the parameters, which only
considers the connections between positive classes
and negative ones, ignoring connections between
positive classes, so we extend function (12) to bet-
ter exploit class ties by considering the connec-
tions between positive classes. We give out the
extended loss function as follows:

G[Exatt] =
‚àë

c‚àó‚ààLk
(
‚àë

c+‚ààLk
œÅ[0, œÉ+ ‚àíF(sc‚àó , c+)]+

+œÅ[0, œÉ‚àí + F(sc‚àó , c‚àí)]+) (14)

1814



Pro. Training Test
SemE. 17.63% 16.71%
Riedel 72.52% 96.26%

Table 2: The proportions of NR samples from
SemEval-2010 Task 8 dataset and Riedel dataset.

Similar to function (13), we select c‚àí as follows:

c‚àí = argmax
c‚ààL‚àíLk

F(sc‚àó , c) (15)

and we use the same method to update this loss
function as discussed above. From the function
(14), we can see that: for c‚àó ‚àà Lk, after merging
the bag representation s with c‚àó, we share s with
all the other positive classes and update the class
embeddings of other positive classes with s, in this
way, the connections between positive classes can
be captured and learned by our model.

In loss function (10), (12) and (14), we com-
bine losses from all positive labels to make joint
extraction to capture the class ties among rela-
tions. Suppose we make separated extraction, the
losses from positive labels will be divided apart
and will not get enough information of connec-
tions between positive labels, comparing to joint
extraction. Connections between positive labels
and negative ones are exploited by controlling
margins: œÉ+ and œÉ‚àí.

3.4 Relieving Impact of NR
In relation extraction, the dataset will always

contain certain negative samples which do not ex-
press relations classified as NR (not relation). Ta-
ble 2 presents the proportion of NR samples in
SemEval-2010 Task 8 dataset2 (Erk and Strappa-
rava, 2010) and dataset from Riedel et al. (2010),
which shows almost data is about NR in the latter
dataset. Data imbalance will severely affect the
model training and cause the model only sensitive
to classes with high proportion (He and Garcia,
2009).

In order to relieve the impact of NR in DS based
relation extraction, we cut the propagation of loss
from NR, which means if relation c is NR, we set
its loss as 0. Our method is similar to Santos et al.
(2015) with slight variance. Santos et al. (2015)
directly omit the NR class embedding, but we keep
it. If we use ATT method to combine informa-
tion across sentences, we can not omit NR class

2This is a dataset for relation extraction in traditional su-
pervision framework.

Algorithm 1: Merging loss function of
Variant-3
input : L, (tk, Lk, Xk) and Sk;
output: G[Exatt];

1 G[Exatt] ‚Üê 0;
2 for c‚àó ‚àà Lk do
3 Merge representation sc

‚àó
by function (5),

(6), (7);
4 for c+ ‚àà Lk do
5 if c+ is not NR then
6 G[Exatt] ‚Üê G[Exatt] + œÅ[0, œÉ+ ‚àí

F(sc‚àó , c+)]+;

7 c‚àí ‚Üê argmaxc‚ààL‚àíLk F(sc
‚àó
, c);

8 G[Exatt] ‚Üê
G[Exatt] + œÅ[0, œÉ

‚àí + F(sc‚àó , c‚àí)]+;
9 return G[Exatt];

embedding according to function (6) and (7), on
the contrary, it will be updated from the negative
classes‚Äô loss.

In Algorithm 1, we give out the pseudocodes
of merging loss with Variant-3 and considering to
relieve the impact of NR.

4 Experiments

4.1 Dataset and Evaluation Criteria

We conduct our experiments on a widely used
dataset, developed by Riedel et al. (2010) and has
been used by Hoffmann et al. (2011), Surdeanu
et al. (2012), Zeng et al. (2015) and Lin et al.
(2016). The dataset aligns Freebase relation facts
with the New York Times corpus, in which train-
ing mentions are from 2005-2006 corpus and test
mentions from 2007.

Following Mintz et al. (2009), we adopt held-
out evaluation framework in all experiments. Ag-
gregated precision/recall curves are drawn and
precision@N (P@N) is reported to illustrate the
model performance.

4.2 Experimental Settings

Word Embeddings. We use a word2vec tool
that is gensim3 to train word embeddings on NYT
corpus. Similar to Lin et al. (2016), we keep the
words that appear more than 100 times to construct
word dictionary and use ‚ÄúUNK‚Äù to represent the
other ones.

3http://radimrehurek.com/gensim/models/word2vec.html

1815



Parameter Name Symbol Value
Window size dwin 3
Sentence. emb. dim. df 690
Word. emb. dim. d1 50
Position. emb. dim. d2 5
Batch size B 160
Learning rate Œª 0.03
Dropout pos. p 0.5

Table 3: Hyper-parameter settings.

Hyper-parameter Settings. Three-fold valida-
tion on the training dataset is adopted to tune the
parameters following Surdeanu et al. (2012). We
use grid search to determine the optimal hyper-
parameters. We select word embedding size from
{50, 100, 150, 200, 250, 300}. Batch size is tuned
from {80, 160, 320, 640}. We determine learning
rate among {0.01, 0.02, 0.03, 0.04}. The window
size of convolution is tuned from {1, 3, 5}. We
keep other hyper-parameters same as Zeng et al.
(2015): the number of kernels is 230, position em-
bedding size is 5 and dropout rate is 0.5. Table 3
shows the detailed parameter settings.

4.3 Comparisons with Baselines

Baseline. We compare our model with the fol-
lowing baselines:
‚Ä¢ Mintz (Mintz et al., 2009) the original dis-

tantly supervised model.
‚Ä¢ MultiR (Hoffmann et al., 2011) a multi-

instance learning based graphical model which
aims to address overlapping relation problem.
‚Ä¢ MIML (Surdeanu et al., 2012) also solv-

ing overlapping relations in a multi-instance multi-
label framework.
‚Ä¢ PCNN+ATT (Lin et al., 2016) the state-of-

the-art model in dataset of Riedel et al. (2010)
which applies ATT to combine the sentences.
Results and Discussion. We compare our three
variants of loss functions with the baselines and
the results are shown in Figure 3. From the re-
sults we can see that: (1) Rank + AVE (Variant-
1) achieves comparable results with PCNN+ATT;
(2) Rank + ATT (Variant-2) and Rank + ExATT
(Variant-3) significantly outperform PCNN + ATT
with much higher precision and slightly higher re-
call in whole view; (3) Rank + ExATT (Variant-3)
exhibits the best performances comparing with all
the other methods including PCNN + ATT, Rank
+ AVE and Rank + ATT.

Recall
0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45

P
re

ci
si

on

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

Mintz
MultiR
MIML
PCNN+ATT
Rank+AVE
Rank+ATT
Rank+ExATT

Figure 3: Performance comparison of our model
and the baselines.

Recall

0 0.1 0.2 0.3 0.4

P
re

ci
si

on

0.4

0.5

0.6

0.7

0.8

0.9

1

Rank+AVE+Sep.
Rank+AVE+Joint

Recall
0 0.1 0.2 0.3 0.4

P
re

ci
si

on

0.4

0.5

0.6

0.7

0.8

0.9

1

Rank+ATT+Sep.
Rank+ATT+Joint

Recall
0 0.1 0.2 0.3 0.4

P
re

ci
si

on

0.4

0.5

0.6

0.7

0.8

0.9

1

Rank+ExATT+Sep.
Rank+ExATT+Joint

Figure 4: Results for impact of joint extraction and
class ties with methods of Rank + AVE, Rank +
ATT and Rank + ExATT under the setting of re-
lieving impact of NR.

4.4 Impact of Joint Extraction and Class Ties

In this section, we conduct experiments to re-
veal the effectiveness of our model to learn class
ties with three variant loss functions mentioned
above, and the impact of class ties for relation ex-
traction. As mentioned above, we make joint ex-
traction to learn class ties, so to achieve the goal
of this set of experiments, we compare joint ex-
traction with separated extraction. To make sep-
arated extraction, we divide the labels of entity
tuple into single label and for one relation label
we only select the sentences expressing this rela-
tion, then we use this dataset to train our model
with the three variant loss functions. We conduct
experiments with Rank + AVE (Variant-1), Rank
+ ATT (Variant-2) and Rank + ExATT (Variant-
3) relieving impact of NR. Aggregated P/R curves
are drawn and precisions@N (100, 200, ¬∑ ¬∑ ¬∑ , 500)
are reported to show the model performances.

1816



P@N(%) 100 200 300 400 500 Ave.
R.+AVE+J. 81.3 76.4 74.6 69.6 66.0 73.6
R.+AVE+S. 82.4 79.6 74.6 74.4 69.9 76.2
R.+ATT+J. 87.9 84.3 78.0 74.9 70.3 79.1
R.+ATT+S. 82.4 79.1 75.9 71.9 69.5 75.7
R.+ExATT+J. 83.5 82.2 78.7 77.2 73.1 79.0
R.+ExATT+S. 82.4 82.7 79.4 74.2 69.2 77.6

Table 4: Precisions for top 100, 200, 300, 400, 500
and average of them for impact of joint extraction
and class ties.

Recall
0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45

P
re

ci
si

on

0.4

0.5

0.6

0.7

0.8

0.9

1

Rank+AVE
Rank+ATT
Rank+ExATT

Figure 5: Results for comparisons of variant joint
extractions.

Experimental results are shown in Figure 4 and
Table 4. From the results we can see that: (1) For
Rank + ATT and Rank + ExATT, joint extraction
exhibits better performance than separated extrac-
tion, which demonstrates class ties will improve
relation extraction and the two methods are effec-
tive to learn class ties; (2) For Rank + AVE, sur-
prisingly joint extraction does not keep up with
separated extraction. For the second phenomenon,
the explanation may lie in the AVE method to ag-
gregate sentences will incorporate noise data con-
sistent with the finding in Lin et al. (2016). When
make joint extraction, we will combine all sen-
tences containing the same entity tuple no matter
which class type is expressed, so it will engender
much noise if we only combine them equally.

4.5 Comparisons of Variant Joint Extractions

To make joint extraction, we have proposed
three variant loss functions including Rank + AVE,
Rank + ATT and Rank + ExATT in the above dis-
cussion and Figure 3 shows that the three vari-
ants achieve different performances. In this ex-
periment, we aim to compare the three variants
in detail. We conduct the experiments with the
three variants under the setting of relieving im-

P@N(%) 100 200 300 400 500 Ave.
R.+AVE 81.3 76.4 74.6 69.6 66.0 73.6
R.+ATT 87.9 84.3 78.0 74.9 70.3 79.1
R.+ExATT 83.5 82.2 78.7 77.2 73.1 79.0

Table 5: Precisions for top 100, 200, 300, 400, 500
and average of them for Rank + AVE, Rank + ATT
and Rank + ExATT.

Recall
0 0.1 0.2 0.3 0.4

P
re

ci
si

on

0.4

0.5

0.6

0.7

0.8

0.9

1

Rank+AVE+NR
Rank+AVE

Recall
0 0.1 0.2 0.3 0.4

P
re

ci
si

on

0.4

0.5

0.6

0.7

0.8

0.9

1

Rank+AVE+NR
Rank+AVE

Recall
0 0.1 0.2 0.3 0.4

P
re

ci
si

on

0.4

0.5

0.6

0.7

0.8

0.9

1

Rank+ExATT+NR
Rank+ExATT

Figure 6: Results for impact of relation NR with
methods of Rank + AVE, Rank + ATT and Rank +
ExATT. ‚Äú+NR‚Äù means not relieving impact of NR.

pact of NR and joint extraction. We draw the P/R
curves and report the top N (100, 200, ¬∑ ¬∑ ¬∑ , 500)
precisions to compare model performance with the
three variants.

From the results as shown in Figure 5 and Ta-
ble 5 we can see that: (1) Comparing Rank + AVE
with Rank + ATT, from the whole view, they can
achieve the similar maximal recall point, but Rank
+ ATT exhibits higher precision in all range of
recall; (2) Comparing Rank + ATT with Rank +
ExATT, Rank + ExATT achieves much better per-
formance with broader range of recall and higher
precision in almost range of recall.

4.6 Impact of NR Relation
The goal of this experiment is to inspect how

much relation of NR can affect the model perfor-
mance. We use Rank + AVE, Rank + ATT, Rank
+ ExATT under the setting of relieving impact of
NR or not to conduct experiments. We draw the
aggregated P/R curves as shown in Figure 6, from
which we can see that after relieving the impact
of NR, the model performance can be improved
significantly.

Then we further evaluate the impact of NR for
convergence behavior of our model in model train-

1817



n-epoch
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

F
-m

ea
su

re

0.2

0.25

0.3

0.35

0.4

0.45

AVE+NR
AVE-NR

n-epoch
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

F
-m

ea
su

re

0.2

0.25

0.3

0.35

0.4

0.45

ATT+NR
ATT-NR

n-epoch
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

F
-m

ea
su

re

0.2

0.25

0.3

0.35

0.4

0.45

ExATT+NR
ExATT-NR

Figure 7: Impact of NR for model convergence.
‚Äú+NR‚Äù means not relieving NR impact; ‚Äú-NR‚Äù is
opposite.

ing. Also with the three variant loss functions, in
each iteration, we record the maximal value of F-
measure 4 to represent the model performance at
current epoch. Model parameters are tuned for
15 times and the convergence curves are shown in
Figure 7. From the result, we can find out: ‚Äú+NR‚Äù
converges quicker than ‚Äú-NR‚Äù and arrives to the fi-
nal score at the around 11 or 12 epoch. In general,
‚Äú-NR‚Äù converges more smoothly and will achieve
better performance than ‚Äú+NR‚Äù in the end.

4.7 Case Study

Joint vs. Sep. Extraction (Class Ties). We
randomly select an entity tuple (Cuyahoga County,
Cleveland) from test set to see its scores for every
relation class with the method of Rank + ATT un-
der the setting of relieving impact of NR with joint
extraction and separated extraction. This entity tu-
ple have two relations: /location/./county seat and
/location/./contains, which derive from the same
root class and they have weak class ties for they
all relating to topic of ‚Äúlocation‚Äù. We rescale the
scores by adding value 10. The results are shown
in Figure 8, from which we can see that: un-
der joint extraction setting, the two gold relations
have the highest scores among the other relations
but under separated extraction setting, only /loca-
tion/./contains can be distinguished from the neg-
ative relations, which demonstrates that joint ex-
traction is better than separated extraction by cap-
turing the class ties between relations.

4F = 2 ‚àó P ‚àóR/(P +R)

class-id
5 10 15 20 25 30 35 40 45 50

va
lu

e

6

8

10

12

14

16

18

20

Joint

class-id
5 10 15 20 25 30 35 40 45 50

va
lu

e

6

8

10

12

14
15

Sep.

/l./l./contains

/l./us./county-seat

/l./us./county-seat

/l./l./contains

Figure 8: The output scores for every relation
with method of Rank + ATT. The top is under joint
extraction setting; the bottom is under separated
extraction.

5 Conclusion and Future Works

In this paper, we leverage class ties to enhance
relation extraction by joint extraction using pair-
wise ranking combined with CNN. An effective
method is proposed to relieve the impact of NR for
model training. Experimental results on a widely
used dataset show that leveraging class ties will
enhance relation extraction and our model is ef-
fective to learn class ties. Our method significantly
outperforms the baselines.

In the future, we will focus on two aspects: (1)
Our method in this paper considers pairwise inter-
sections between labels, so to better exploit class
ties, we will extend our method to exploit all other
labels‚Äô influences on each relation for relation ex-
traction, transferring second-order to high-order
(Zhang and Zhou, 2014); (2) We will focus on
other problems by leveraging class ties between
labels, specially on multi-label learning problems
(Zhou et al., 2012) such as multi-category text cat-
egorization (Rousu et al., 2005) and multi-label
image categorization (Zha et al., 2008).

Acknowledgments

Firstly, we would like to thank Xianpei Han and
Kang Liu for their valuable suggestions on the ini-
tial version of this paper, which have helped a lot
to improve the paper. Secondly, we also want
to express gratitudes to the anonymous review-
ers for their hard work and kind comments, which
will further improve our work in the future. This
work was supported by the National High-tech Re-
search and Development Program (863 Program)
(No. 2014AA015105) and National Natural Sci-
ence Foundation of China (No. 61602490).

1818



References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473 .

Kurt D. Bollacker, Colin Evans, Praveen Paritosh, Tim
Sturge, and Jamie Taylor. 2008. Freebase: a col-
laboratively created graph database for structuring
human knowledge. In Proceedings of KDD. pages
1247‚Äì1250.

Katrin Erk and Carlo Strapparava, editors. 2010. Pro-
ceedings of SemEval. The Association for Computer
Linguistics.

Johannes FuÃàrnkranz, Eyke HuÃàllermeier, Eneldo Loza
Mencƒ±ÃÅa, and Klaus Brinker. 2008. Multilabel classi-
fication via calibrated label ranking. Machine learn-
ing 73(2):133‚Äì153.

Xianpei Han and Le Sun. 2016. Global distant supervi-
sion for relation extraction. In Proceedings of AAAI.
pages 2950‚Äì2956.

Haibo He and Edwardo A. Garcia. 2009. Learning
from imbalanced data. IEEE Trans. Knowl. Data
Eng. 21(9):1263‚Äì1284.

Raphael Hoffmann, Congle Zhang, Xiao Ling, Luke
Zettlemoyer, and Daniel S Weld. 2011. Knowledge-
based weak supervision for information extraction
of overlapping relations. In Proceedings of ACL-
HLT . Association for Computational Linguistics,
pages 541‚Äì550.

Nathalie Japkowicz and Shaju Stephen. 2002. The
class imbalance problem: A systematic study. In-
telligent data analysis 6(5):429‚Äì449.

Yann LeCun, Yoshua Bengio, and Geoffrey Hinton.
2015. Deep learning. Nature 521(7553):436‚Äì444.

Yankai Lin, Shiqi Shen, Zhiyuan Liu, Huanbo Luan,
and Maosong Sun. 2016. Neural relation extraction
with selective attention over instances. In Proceed-
ings of ACL. volume 1, pages 2124‚Äì2133.

Tie-Yan Liu. 2009. Learning to rank for information
retrieval. Foundations and Trends in Information
Retrieval 3(3):225‚Äì331.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-
based neural machine translation. In Proceedings
of EMNLP. pages 1412‚Äì1421.

Mike Mintz, Steven Bills, Rion Snow, and Dan Ju-
rafsky. 2009. Distant supervision for relation ex-
traction without labeled data. In Proceedings of
ACL-IJCNLP. Association for Computational Lin-
guistics, pages 1003‚Äì1011.

Sebastian Riedel, Limin Yao, and Andrew McCallum.
2010. Modeling relations and their mentions with-
out labeled text. In Proceedings of ECML-PKDD.
Springer, pages 148‚Äì163.

Juho Rousu, Craig Saunders, Sandor Szedmak, and
John Shawe-Taylor. 2005. Learning hierarchical
multi-category text classification models. In Pro-
ceeding of ICML. ACM, pages 744‚Äì751.

Cicero Nogueira dos Santos, Bing Xiang, and Bowen
Zhou. 2015. Classifying relations by ranking with
convolutional neural networks. In Proceeding of
ACL. pages 626‚Äì634.

Aliaksei Severyn and Alessandro Moschitti. 2015.
Learning to rank short text pairs with convolutional
deep neural networks. In Proceedings of the 38th
International ACM SIGIR Conference on Research
and Development in Information Retrieval. ACM,
pages 373‚Äì382.

Mihai Surdeanu, Julie Tibshirani, Ramesh Nallapati,
and Christopher D Manning. 2012. Multi-instance
multi-label learning for relation extraction. In Pro-
ceedings of EMNLP. Association for Computational
Linguistics, pages 455‚Äì465.

Linlin Wang, Zhu Cao, Gerard de Melo, and Zhiyuan
Liu. 2016. Relation classification via multi-level
attention cnns. In Proceedings of ACL, Volume 1:
Long Papers.

Jason Weston, Samy Bengio, and Nicolas Usunier.
2011. WSABIE: scaling up to large vocabulary
image annotation. In Proceedings of IJCAI. pages
2764‚Äì2770.

Daojian Zeng, Kang Liu, Yubo Chen, and Jun Zhao.
2015. Distant supervision for relation extraction via
piecewise convolutional neural networks. In Pro-
ceedings of EMNLP. pages 17‚Äì21.

Daojian Zeng, Kang Liu, Siwei Lai, Guangyou Zhou,
Jun Zhao, et al. 2014. Relation classification via
convolutional deep neural network. In Proceeding
of COLING. pages 2335‚Äì2344.

Zheng-Jun Zha, Xian-Sheng Hua, Tao Mei, Jingdong
Wang, Guo-Jun Qi, and Zengfu Wang. 2008. Joint
multi-label multi-instance learning for image classi-
fication. In CVPR. IEEE, pages 1‚Äì8.

Min-Ling Zhang and Zhi-Hua Zhou. 2006. Multilabel
neural networks with applications to functional ge-
nomics and text categorization. IEEE transactions
on Knowledge and Data Engineering 18(10):1338‚Äì
1351.

Min-Ling Zhang and Zhi-Hua Zhou. 2014. A re-
view on multi-label learning algorithms. IEEE
transactions on knowledge and data engineering
26(8):1819‚Äì1837.

Fang Zhao, Yongzhen Huang, Liang Wang, and Tieniu
Tan. 2015. Deep semantic ranking based hashing
for multi-label image retrieval. In Proceedings of
CVPR. pages 1556‚Äì1564.

1819



Hao Zheng, Zhoujun Li, Senzhang Wang, Zhao Yan,
and Jianshe Zhou. 2016. Aggregating inter-sentence
information to enhance relation extraction. In Thir-
tieth AAAI Conference on Artificial Intelligence.

Peng Zhou, Wei Shi, Jun Tian, Zhenyu Qi, Bingchen
Li, Hongwei Hao, and Bo Xu. 2016. Attention-
based bidirectional long short-term memory net-
works for relation classification. In Proceeding of
ACL. page 207.

Zhi-Hua Zhou, Min-Ling Zhang, Sheng-Jun Huang,
and Yu-Feng Li. 2012. Multi-instance multi-label
learning. Artificial Intelligence 176(1):2291‚Äì2320.

1820


	Jointly Extracting Relations with Class Ties via Effective Deep Ranking

