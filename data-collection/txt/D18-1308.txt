



















































Structured Multi-Label Biomedical Text Tagging via Attentive Neural Tree Decoding


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 2837–2842
Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics

2837

Structured Multi-Label Biomedical Text Tagging
via Attentive Neural Tree Decoding

Gaurav Singh
University College London
gaurav.singh.15@ucl.ac.uk

James Thomas
University College London
james.thomas@ucl.ac.uk

Iain J. Marshall
King’s College London

iain.marshall@kcl.ac.uk

John Shawe-Taylor
University College London
j.shawe-taylor@ucl.ac.uk

Byron C. Wallace
Northeastern University

b.wallace@northeastern.edu

Abstract

We propose a model for tagging unstructured
texts with an arbitrary number of terms drawn
from a tree-structured vocabulary (i.e., an on-
tology). We treat this as a special case of
sequence-to-sequence learning in which the
decoder begins at the root node of an onto-
logical tree and recursively elects to expand
child nodes as a function of the input text, the
current node, and the latent decoder state. In
our experiments the proposed method outper-
forms state-of-the-art approaches on the im-
portant task of automatically assigning MeSH
terms to biomedical abstracts.

1 Introduction

We consider the task of multilabel text anno-
tation, where labels are drawn from an ontol-
ogy. We are motivated by problems in biomed-
ical NLP (Zweigenbaum et al., 2007; Demner-
Fushman et al., 2016). Specifically, scientific ab-
stracts in this domain are typically associated with
multiple Medical Subject Heading (MeSH) terms.
MeSH is a controlled, hierarchically structured vo-
cabulary that facilitates semantic labeling of texts
at varying levels of granularity. This in turn sup-
ports semantic indexing of biomedical literature,
thus facilitating improved search and retrieval.1

At present, MeSH annotation is largely per-
formed manually by highly skilled annotators
employed by the National Library of Medicine
(NLM). Automating this annotation task is thus
highly desirable, and there have been considerable
efforts to do so. The BIOASQ2 challenge, in par-
ticular, concerns MeSH annotation, and competi-
tive systems have emerged from this in past years
(Liu et al., 2014; Tsoumakas et al., 2013); these
constitute baseline approaches in the present work.

1This problem also resembles tagging clinical notes with
ICD codes (Mullenbach et al., 2018).

2http://bioasq.org/

…  

In this trial we enrolled 100 diabetics, 
aged 20-50.  Patients received insulin or 
placebo. The primary outcome was 
blood pressure.

…  

…  

Diastolic 
pressure

Diabetes

y0

y1

y2 y3 y4

y5

yl

xi

In
this
trial

…

pressure

…

blood

ym

Figure 1: Illustration of the proposed Neural Tree
Decoding (NTD) model. Input text is encoded,
and a decoder then conditionally traverses the la-
bel tree to select all relevant nodes to apply, with
node-wise attention induced over the input text.

More generally, MeSH annotation is a specific
instance of multi-label classification, which has
received substantial attention in general (Elisseeff
and Weston, 2002; Fürnkranz et al., 2008; Read
et al., 2011; Bhatia et al., 2015; Daumé III et al.,
2017; Chen et al., 2017; Jernite et al., 2016). Our
work differs from these prior efforts in that MeSH
tagging involves structured multi-label classifica-
tion: the label space is a tree3 in which nodes
represent nested semantic concepts, and the speci-
ficity of these increases with depth.

Past efforts in multi-label classification have
considered hierarchical and tree-based approaches
for tagging (Jernite et al., 2016; Beygelzimer et al.,
2009; Daumé III et al., 2017), but these have not
assumed a given structured label space; instead,
these efforts have attempted to induce trees to im-
prove inference efficiency. By contrast, we pro-
pose to explicitly capitalize on a known output
structure codified here by the target ontology from
which tags are drawn. We realize this by recur-
sively traversing the tree to make (conditional) bi-

3Technically, MeSH comprises multiple trees, but we join
these by insertion of an overarching root node.

http://bioasq.org/


2838

nary tag application predictions.
The contribution of this work is a neural

sequence-to-sequence (seq2seq) model (Bahdanau
et al., 2014) for structured multi-label classifica-
tion. Our approach entails encoding the input text
to be tagged using an RNN, and then decoding into
the ontological output space. This involves a tree
traversal beginning at the root of the tree. At each
step, the decoder decides whether to ‘expand’ chil-
dren as a function of a hidden state vector, node
embeddings, and induced attention weights over
the input text. This approach is schematized in
Figure 1. Expanded nodes are added to the pre-
dicted tag set. This process is repeated recursively
until either leaf nodes are reached or no children
are selected for expansion. This neural tree de-
coding (NTD) model outperforms state-of-the-art
models for MeSH tagging.

2 Model

Overview. Our model is an instance of an
encoder-decoder architecture. For the encoder,
we adopt a standard Gated Recurrent Unit (GRU)
network (Cho et al., 2014a), which yields hidden
states for the tokens comprising an input docu-
ment. The decoder network consumes these out-
puts and begins at the root of the ontological tree.
It induces an attention distribution over encoder
states, which is used together with the current de-
coder state vector to inform which (if any) of its
immediate children are applicable to the input text
(Figure 1). This decoding process proceeds recur-
sively for all children deemed relevant. Below we
provide more in-depth technical detail regarding
the constituent modules.

The encoder (ENC) consumes as input a raw
sequence of words, here composing an abstract.
These are passed through an embedding layer, pro-
ducing a sequence of word embeddings x (for clar-
ity we omit a document index here), which are
then passed through a GRU (Cho et al., 2014b)
to obtain a sequence of hidden vectors h =
{h0, · · · , h|x|−1}, where ht = GRU(xt, ht−1).

These are then passed to our neural tree decoder,
which is responsible for tagging the encoded text
with an arbitrary number of terms from the label
tree, i.e., sequences in the structured output space.
This module traverses the label space top-down,
beginning at the root, thus exploiting the concept
hierarchy codified by the tree structure.

At each step in the decoding process, the de-

coder will be positioned at a particular node in
the tree n. Children — immediate descendents —
of this node are then considered for expansion in
turn, based on a hidden state vector sn, and a con-
text vector cn. Both of these are initialized to zero
vectors and recursively updated during traversal,
i.e., as nodes are selected for expansion (and hence
added to the predicted tag set). More specifically,
the context vector that informs the decision to ex-
pand node v in the label hierarchy from its parent
node n is a weighted sum of the encoder hidden
states h, where weights reflect induced attention
over inputs, conditioned on n. That is:

cn =
∑
j

αnjhj (1)

where

αnj =
exp{a(sn, hj)|θn}∑
l exp{a(sn, hl)|θn}

(2)

and a is a simple multi-layer perceptron (MLP),
with node-specific parameters θn. Here both sums
range over the length of the input text.

Given cn, we then estimate the probability that
child label v is applicable to the current input text
as a function of the decoder state vector (sn), the
current context vector (cn) and the decoder pa-
rameters. In particular, this is realized via a stan-
dard linear layer with sigmoid activations, param-
eterized by a weight matrix W comprising inde-
pendent weight vectors for each output node v.
Thus the score for a particular output node v is
σ(Wv · [sn, cn]), where Wv denotes the weight
vector for output node v.

Pseudocode for the training and decoding pro-
cedures are presented in Algorithm 1. In the
NODELOSS function, n denotes a particular node.
The set of hidden vectors induced by the encoder
(corresponding to the inputs) are denoted by h, s
is the hidden state of the decoder, and y is the
reference label (this encodes a path in the output
tree). We assume the decoder, DEC, consumes
input representations, a node index and a hidden
state and yields a context vector for n, cn and an
updated state vector sn; in our case the latter is
implemented via a GRU. The advantage of using
an RNN during decoding is that this allows the ex-
ploitation of learned, distributed hidden represen-
tations of partial tree paths, which inform node-
wise attention and subsequent predictions.



2839

Algorithm 1 RECURSIVETREEDECODING
1: function NODELOSS(n, h, s, y)
2: ln← 0
3: cn, sn← DEC(h, n, s)
4: for each child v ∈ children(n) do
5: ŷv ← σ(Wv · [sn, cn])
6: pv ←∝ depth in tree
7: Bv ∼ Ber(pv)
8: if Bv then
9: ln← ln + L(ŷv, y)

10: if ŷv > τ then
11: ln← ln + NODELOSS(v, h, sn, y)

return ln
12: function TRAIN(x, y, α, epochs)
13: θ ← INIT(θ)
14: e← 0
15: while e < epochs do
16: for each instance xi ∈ x do
17: hi ← ENC(xi)
18: s0 ← 0
19: li ← NODELOSS(ROOT, hi, s0, yi)
20: ∆θ ← BACKPROP(li)
21: θ ← θ + α∆θ
22: e← e+ 1

return θ

Incurring loss for all nodes along the path spec-
ified by y would place a disproportionate amount
of emphasis on correctly applying terms that are
‘higher’ in the ontology, as loss will be propagated
for the initial predictions concerning the applica-
tion of these and then also, due to recursive appli-
cation, for all of their children (and so on). Thus
we only incur (and hence backpropagate) loss for
a node v stochastically, according to a Bernoulli
distribution B with parameter pv. We set pv to
be proportional to the depth of node v in the tree
such that we are likely to incur larger loss for
deeper (rarely occurring) nodes. We operational-
ize this as: pv = min(1, 0.5 + mfv ), where m is
the count corresponding to the least frequently ob-
served node in the training corpus and fv is the
count for node v. In Section 4 we demonstrate the
benefit of this approach.

At train time we use teacher forcing (Williams
and Zipser, 1989) during decoding. That is, we
revert the model back to the correct (training) tree
subsequence when it goes off-course, and continue
decoding from there. We have elided this detail
from the pseudocode for clarity.

3 Experimental setup

Below we describe experimental details concern-
ing our implementation, datasets and baselines.
Code and data to reproduce our results is available
at https://github.com/gauravsc/NTD.

3.1 Implementation Details

We limited the vocabulary to the 50, 000 most fre-
quent words. Word embeddings were initialized to
pre-trained vectors induced via word2vec, trained
over a large set of abstracts indexed on PubMed.4

Ontology node embeddings were pre-trained using
DeepWalk (Perozzi et al., 2014), fit over PubMed.

3.2 Dataset

Our dataset comprises abstracts of articles de-
scribing randomized controlled trials (RCTs) from
PubMed along with their MeSH terms. The MeSH
annotations were manually applied by profession-
als at the National Library of Medicine (NLM).
The label space underlying MeSH terms is codi-
fied by a publicly available ontology.5

We split this dataset into disjoint sets for train-
ing/development and final evaluation (Table 1).
We further separated the former into train, vali-
dation and development test subsets, to refine our
approach. For our final evaluation we used a held-
out set of 10,000 abstracts that were not seen in
any way during model development and/or hyper-
parameter tuning. We performed extensive hyper-
parameter tuning for the baseline models to ensure
fair comparison; details regarding this tuning are
provided in the Appendix.

3.3 Baselines

We compare our proposed approach to three base-
lines, including two prior winners of the annual
BioASQ challenge, which includes an automated
MeSH annotation task. However, it is important
to note that we used a different (and considerably
smaller) dataset in the current work, as compared
to the corpus used in the BioASQ challenge.

LSSI (Tsoumakas et al., 2013) use an approach
that involves predicting both the number of terms
and which to apply to a given abstract. They use
linear models for both tasks, which operate over
TF-IDF representations of abstracts. Specifically,
they train a regressor to predict k, the number of
MeSH terms to be applied to an abstract. Simul-
taneously, a binary linear SVM is trained indepen-
dently for each MeSH term appearing in the train
set. At test time, these SVMs provide scores for
each term and the top k̂ terms are applied, where k̂
is the estimate from the aforementioned regressor.

4A repository of biomedical literature.
5https://meshb-prev.nlm.nih.gov/

treeView

https://github.com/gauravsc/NTD
https://meshb-prev.nlm.nih.gov/treeView
https://meshb-prev.nlm.nih.gov/treeView


2840

Train 20000
Validation 4000
Dev test 18884
Test (held-out) 10000
Mean MeSH terms per article 15.33
Total unique MeSH terms 27892
Unique MeSH terms in dataset 3781

Table 1: Dataset statistics.

UIUC (Liu et al., 2014) uses a learning-to-rank
model to identify the top MeSH terms for an ab-
stract from a candidate set of terms, which is ob-
tained from the nearest neighbours of the abstract.
Additionally, one SVM classifier is trained for
each of the MeSH terms (similar to the above ap-
proach), and scores for each are used to obtain ad-
ditional terms to be added to the candidate set. In
the end, a threshold (tuned on the validation set) is
used to select the final set of terms to be assigned.
Finally, we consider a deep multilabel classifica-
tion model DML (Rios and Kavuluru, 2015) that
takes as input unstructured abstracts and activates
the output nodes corresponding to the relevant
MeSH terms. In brief, embedded tokens are fed
through a CNN to induce a vector representation,
which is then passed on to the dense output layer.
Finally, this is passed through a sigmoid activation
function. Note that this model exploits the same
pre-trained word embeddings as our model does.

3.4 Evaluation metrics
We first evaluate model performance via output
node-wise precision, recall and F1 measure. How-
ever, these metrics are overly strict in the sense
that a model will be penalized equally for all mis-
takes, regardless of whether they are nearby or far
from the target in the label tree. This is problem-
atic because whether to apply a specific MeSH
term or its immediate parent may be somewhat
subjective in practice. To quantify this, and to ex-
plore the extent to which explicitly decoding into
the target label space yields improved predictions,
we also consider a measure that we refer to as se-
mantic distance (SD):

SD =
1

|Y|
∑
u∈Y

min
v∈Ŷ

dist(u, v) (3)

where Y and Ŷ are the sets of target and predicted
terms respectively, and dist is a function that re-
turns the shortest distance between two nodes in

Method Precision Recall F1 SD
LSSI 0.326 0.293 0.309 1.518
UIUC 0.236 0.388 0.291 1.433
DML 0.378 0.223 0.275 1.516

NTD-d 0.434 0.235 0.299 1.209
NTD-s 0.425 0.265 0.327 1.130

Table 2: Results on the held-out test dataset. SD
refers to semantic distance, defined in Eq. 3.

the label ontology tree. The idea is that this penal-
izes less for ‘near misses’. Thus if a model fails to
apply a particular tag t, but does apply one near to
t in the label tree, then it is penalized less.6 We
hypothesize that our model will improve results
markedly with respect to this metric, given our ex-
ploitation of the tree structure.

As in the case of recall, SD can be ‘gamed’: one
can achieve a perfect score by predicting that all
nodes apply to a given abstract. Thus this is only
meaningful alongside complementary metrics like
F1.

4 Results

Results on the test set (which was completely
held out during development) are reported in Ta-
ble 2. The proposed Neural Tree Decoding model
with stochastic backpropagation (NTD-s) bests the
most competitive baseline (LSSI) in F1 score by
over 2 points.

To explore the effect of backpropagating loss
from nodes in proportion to their depth in the on-
tology, we also include results for a deterministic
variant that does not do this, NTD-d. This version
does not perform as well, demonstrating the utility
of the proposed training approach.

The metrics reported thus far do not account of
the structure in the output space. We thus addi-
tionally report results with respect to the the se-
mantic distance (SD) metric (Eq. 3). We ob-
serve a marked performance increase of ∼21%
over the best performing baseline. This is intuitive
given that we are explicitly decoding into the label
tree structure, and demonstrates the ability of our
model to learn the ontological structure, thereby
predicting semantically appropriate terms.

6This metric is equivalent to the sum of two metrics (”di-
vergent path to gold standard” and ”divergent path to predic-
tion”) defined in (Perotte et al., 2013).



2841

5 Conclusions, Discussion & Limitations

We developed a neural attentive sequence tree de-
coding model for structured multilabel classifica-
tion where labels are drawn from a known ontol-
ogy. The proposed method can decode an input
text into a tree of labels, effectively using the struc-
ture in the output space. We demonstrated that
this model outperformed SOTA approaches for
the important task of tagging biomedical abstracts
with Medical Subject Heading (MeSH) terms on a
modestly sized training corpus. Code and data to
reproduce these results are available at https:
//github.com/gauravsc/NTD.

One limitation of our model is that it is com-
paratively slow, due to having to traverse the tree
structure during decoding. Prediction speed may
not be a major issue in practice, as articles on
PubMed could be batch tagged nightly as they ar-
rive. However, slow decoding also means lengthy
training (see Appendix, section A.2 for details).
For this reason we have here used a modest train-
ing set of ∼20k abstracts, which is smaller than
corpora used in prior work on this task. Given the
relative expressiveness of our model, we expect
it to benefit substantially from additional training
data, moreso than the simpler baseline architec-
tures. But at present this is only a conjecture.

In future work we thus hope to apply this model
to larger datasets, and to address the efficiency is-
sue. Concerning the latter, sibling subtrees may
be traversed in parallel, conditioned on the hidden
state of their parent. Another promising direction
would be to move to convolutional encoder and
decoder architectures, designing the latter in a way
similarly capitalizes on the label space tree struc-
ture.

6 Acknowledgements

JT and GS acknowledge support from Cochrane
via the Transform project. BCW was supported
by the National Library of Medicine (NLM) of
the National Institutes of Health (NIH), grant
R01LM012086. IJM acknowledges support from
the MRC (UK), through its grant MR/N015185/1.

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua

Bengio. 2014. Neural machine translation by
jointly learning to align and translate. CoRR,
abs/1409.0473.

Alina Beygelzimer, John Langford, Yuri Lifshits, Gre-
gory Sorkin, and Alex Strehl. 2009. Conditional
probability tree estimation analysis and algorithms.
In Proceedings of the Conference on Uncertainty in
Artificial Intelligence. AUAI Press.

Kush Bhatia, Himanshu Jain, Purushottam Kar, Manik
Varma, and Prateek Jain. 2015. Sparse local embed-
dings for extreme multi-label classification. In Ad-
vances in Neural Information Processing Systems.

Sheng Chen, Akshay Soni, Aasish Pappu, and Yashar
Mehdad. 2017. Doctag2vec: An embedding based
multi-label learning approach for document tagging.
In Proceedings of the Workshop on Representation
Learning for NLP. Association for Computational
Linguistics.

Kyunghyun Cho, Bart van Merrienboer, Çaglar
Gülçehre, Dzmitry Bahdanau, Fethi Bougares, Hol-
ger Schwenk, and Yoshua Bengio. 2014a. Learning
phrase representations using RNN encoder-decoder
for statistical machine translation. In Empirical
Methods in Natural Language Processing.

Kyunghyun Cho, Bart Van Merriënboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014b. On the proper-
ties of neural machine translation: Encoder-decoder
approaches. arXiv preprint arXiv:1409.1259.

Hal Daumé III, Nikos Karampatziakis, John Langford,
and Paul Mineiro. 2017. Logarithmic time one-
against-some. In International Conference on Ma-
chine Learning.

D Demner-Fushman, N Elhadad, et al. 2016. Aspir-
ing to unintended consequences of natural language
processing: A review of recent developments in clin-
ical and consumer-generated text processing. IMIA
Yearbook.

André Elisseeff and Jason Weston. 2002. A kernel
method for multi-labelled classification. In Ad-
vances in Neural Information Processing Systems.

Johannes Fürnkranz, Eyke Hüllermeier, Eneldo Loza
Mencı́a, and Klaus Brinker. 2008. Multilabel classi-
fication via calibrated label ranking. Machine learn-
ing, 73(2).

Yacine Jernite, Anna Choromanska, and David Son-
tag. 2016. Simultaneous learning of trees and
representations for extreme classification, with ap-
plication to language modeling. arXiv preprint
arXiv:1610.04658.

Ke Liu, Junqiu Wu, Shengwen Peng, Chengxiang Zhai,
and Shanfeng Zhu. 2014. The fudan-uiuc participa-
tion in the bioasq challenge task 2a: The antinomyra
system. Risk, 129816.

James Mullenbach, Sarah Wiegreffe, Jon Duke, Jimeng
Sun, and Jacob Eisenstein. 2018. Explainable pre-
diction of medical codes from clinical text. In North
American Chapter of the Association for Computa-
tional Linguistics.

https://github.com/gauravsc/NTD
https://github.com/gauravsc/NTD


2842

Adler Perotte, Rimma Pivovarov, Karthik Natarajan,
Nicole Weiskopf, Frank Wood, and Noémie El-
hadad. 2013. Diagnosis code assignment: models
and evaluation metrics. Journal of the American
Medical Informatics Association, 21(2).

Bryan Perozzi, Rami Al-Rfou, and Steven Skiena.
2014. Deepwalk: Online learning of social repre-
sentations. In Proceedings of the ACM SIGKDD in-
ternational conference on Knowledge discovery and
data mining. ACM.

Jesse Read, Bernhard Pfahringer, Geoff Holmes, and
Eibe Frank. 2011. Classifier chains for multi-label
classification. Machine learning, 85(3).

Anthony Rios and Ramakanth Kavuluru. 2015. Convo-
lutional neural networks for biomedical text classifi-
cation: application in indexing biomedical articles.
In Proceedings of the ACM Conference on Bioin-
formatics, Computational Biology and Health Infor-
matics. ACM.

Grigorios Tsoumakas, Manos Laliotis, Nikos Markan-
tonatos, and Ioannis Vlahavas. 2013. Large-scale
semantic indexing of biomedical publications at
BioASQ. In BioASQ Workshop.

Ronald J Williams and David Zipser. 1989. A learn-
ing algorithm for continually running fully recurrent
neural networks. Neural computation, 1(2).

Pierre Zweigenbaum, Dina Demner-Fushman, Hong
Yu, and Kevin B Cohen. 2007. Frontiers of biomedi-
cal text mining: current progress. Briefings in bioin-
formatics, 8(5).


