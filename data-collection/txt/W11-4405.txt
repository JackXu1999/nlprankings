



















































Compiling Simple Context Restrictions with Nondeterministic Automata


Proceedings of the 9th International Workshop on Finite State Methods and Natural Language Processing, pages 30–38,
Blois (France), July 12-15, 2011. c©2011 Association for Computational Linguistics

Compiling Simple Context Restrictions with Nondeterministic Automata

Anssi Yli-Jyrä
The Department of Modern Languages, PO Box 3, 00014 University of Helsinki, Finland

anssi.yli-jyra@helsinki.fi

Abstract

This paper describes a non-conventional
method for compiling (phonological or
morpho-syntactic) context restriction (CR)
constraints into non-deterministic automata in
finite-state tools and surface parsing systems.
The method reduces any CR into a simple
one that constraints the occurrences of the
empty string and represents right contexts
with co-determististic states. In cases where
a fully deterministic representation would be
exponentially larger, this kind of inward de-
terminism in contexts can bring benefits over
various De Morgan approaches where full
determinization is necessary. In the method,
an accepted word gets a unique path that is
a projection of a ladder-shaped structure in
the context recognizer. This projection is
computed in time that is polynomial to the
number of context states. However, it may be
difficult to take advantage of the method in a
finite-state library that coerces intermediate
results into canonical automata and whose
intersection operation assumes deterministic
automata.

1 Introduction

Context restriction (CR) constraints and the related
extended regular expression operator (⇒) are in-
cluded in some widely used finite state compilers
(such as XFST, SFST, and FOMA) and is a stan-
dard part of Two Level Morphology (Koskenniemi,
1983). In addition, context-sensitive rewriting (e.g.
XFST replace rules) have an inherent connection
to CR constraints and their implementation can be

based on them (Yli-Jyrä, 2008a). Optimized CR
compilation methods can thus bring advantage to a
wide range of applications.

The current work presents a complement-free
method that has some advantages and disadvantages
in comparison with the commonly used De Morgan
implementations of the inherent universal quantifi-
cation of CRs. It expresses the universal quantifica-
tion positively, by recognizing ladder-shaped struc-
tures between deterministic left contexts and co-
deterministic right contexts and by projecting them
to accepted words. The complexity of the method
is analyzed here, but a fuller evaluation remains for
further work.

1.1 The Use of CR Constraints

Let Σ be the (pair symbol) alphabet over which all
the words are defined. A context restriction (CR)
constraint checks the occurrences of a pattern in
the words. For example, a phonological constraint
(Koskenniemi, 1983) such as

p:m⇒ Σ∗n:m Σ∗, (1)
specifies a formal language L ⊆ Σ∗ where the
(pair) symbol p:m may occur only when immedi-
ately preceded by the symbol n:m. The left hand
side (p:m) describes the constrained pattern while
the right hand side (Σ∗n:m Σ∗) specifies the con-
texts to which the pattern occurrences are restricted.

More generally, the CR constraints have the form
α⇒λ1 ρ1, ..., λk ρk, where k is the number of
contexts, the variable α stands for the pattern, and
the variables λ1, ..., λk, ρ1, ..., ρk constitute k con-
texts in pairs. Each variable is a recognizable subset

30



of Σ∗ and is usually given through a regular expres-
sion. We assume that every context (λ ρ) is total
i.e. it reaches the word boundaries although most
implementations (e.g. FOMA) require word bound-
ary markers (.#. λ ρ .#.) in this case.

In the original use scenario – Two Level Mor-
phology – CRs typically restrict allophonemes or
allomorphophonemes to a relatively small number
of contexts. More recently, CR has been used to
express complete morphological lexicons in which
case the total number of contexts can be in thousands
(Yli-Jyrä, 2009).

CR constraints can also be applied to mor-
phosyntax and surface syntax where the total num-
ber of conjunctive CR constraints can be signif-
icantly higher than in phonology. In an early
manifestation of Finite State Intersection Grammar
(FSIG) (Koskenniemi et al., 1992; Yli-Jyrä, 2003),
both the patterns and the contexts were linguisti-
cally informed but quite complicated. More recent
FSIG formalisms focus on local bracketed tree con-
straints (Yli-Jyrä, 2005) that are motivated by the
well-known succinctness characteristics of packed
forests.

Some of the decision problems for extended regu-
lar expressions and CRs in particular (Måns Hulden,
pers.comm. 2010) are intractable and the state com-
plexity of a compiled CR can be prohibitively large
in the worst case scenarios. Therefore, the basic re-
search on CR compilation algorithms increasingly
tries to identify islands of tractability for the CR
compilation problem so that larger systems could
exploit CR and context-sensitive constraints without
efficiency bottlenecks.

1.2 Prior Compilation Techniques

There are six important approaches (SF, GR, FO, IC,
PF, WL) to the compilation of the CR constraints.
Let us describe each of them in turn.

1. SF: Star-Free Regular Expressions

The closure of the empty set ∅ and the single-
ton languages {w} (w ∈ Σ∗) under the op-
erations of concatenation (·), intersection (∩)
and complement ( ) defines the star-free i.e.
counter-free languages (McNaughton and Pa-
pert, 1971). Note that α ∩ β = α ∪ β (by De

Morgan’s laws) and ∅ = Σ∗. The star-free op-
erators (·, ∩, ∪, ) give a compilation formula
for CRs with k = 1 (Koskenniemi, 1983, 106):

λ1α∅∩∅αρ1 (2)

However, the length of the formula grows ex-
ponentially when k grows, being already high
for two bilateral contexts (Yli-Jyrä, 2003):

λ2αρ1∩λ1αρ2∩(λ1∩λ2)α∅∩∅α(ρ1∩ρ2). (3)

2. IC: Indexed Contexts

Karttunen et al. (1987) observe that when the
pattern language α consists of atomic symbols,
a multi context CR can be decomposed into
simple CRs. This is done by indexing every
atomic symbol in α by the context pairs λi ρi.
The idea has two implementations:

(a) In Karttunen et al. (1987) and Kaplan and
Kay (1994), the atomic symbols are sur-
rounded by indexed brackets. The method
needs an extended alphabet such as Σ ∪
{〈1, ..., 〈k} ∪ {〉1, ..., 〉k}.

(b) In Koskenniemi and Silfverberg (2010),
the atomic symbols are themselves in-
dexed. This method needs an extended
alphabet such as Σ × {1, ..., k}. Thus,
each symbol in α is divided into k differ-
ent variants, α1, ..., αk.

In order to reflect the extended alphabet Σ′, lan-
guages λ1, ..., λk, ρ1, ..., ρk have to be replaced
with the expanded ones λ′1, ..., λ′k, ρ

′
1, ..., ρ

′
k.

The indexing is later cancelled by an appropri-
ate homomorphism g : Σ′∗ → Σ∗ and the CR
semantics is finally given by the formula

g(∩ki=1αi ⇒ λ′i ρ′i). (4)

The recognizer for the result is nondeterminis-
tic, but it is unclear if the result is ever smaller
than a canonical automaton. Nevertheless, the
extended alphabet has an undesirable effect on
the number of transitions in various stages of
the compilation process.

The approach has been generalized beyond the
atomic symbols to a slightly larger family of

31



patterns languages: a modified IC formula ap-
plies to the case where, for all w, w′ ∈ α, the
words w and w′ are overlap-free or equivalent
(Yli-Jyrä and Koskenniemi, 2004, formula 16
on page 18). The formula resembles an im-
plementation of replace rules Kempe and Kart-
tunen (1996) and is related to a former imple-
mentation of the CR operator in Xerox Finite
State Tool (XFST) (Yli-Jyrä, 2003; Yli-Jyrä and
Koskenniemi, 2004; Karttunen, 2004).

3. GR: SF with a Restricted Homomorphism

The generalized restriction (GR) operation
(Yli-Jyrä and Koskenniemi, 2004) increases the
compactness of star-free expressions by using
a marker alphabet ∆, such that ∆ ∩ Σ = ∅,
and an operation that removes a finite number
of markers from words.

Let Σ∆ = Σ ∪ {∆} and let f : Σ∗∆ → Σ∗ be
a string homomorphism defined by h(a) = a,
h(⋄) = ǫ, h(ǫ) = ǫ, h(x·y) = h(x)·h(y) for all
a ∈ Σ, ⋄ ∈ ∆. Within the method, the homo-
morphism h can be replaced with its restriction
hd = h|(∅(∆∅)d) where d ∈ N. Since star-free
languages are closed under the restriction of hd,
it extends star-free regular expressions.

For all d ∈ N, the GR operation is syntacti-
cally represented by the operator

d∆=⇒ whose
semantics is defined over d-marker languages
W, W ′ ⊆ ∅(∆∅)d by

W
d∆=⇒W ′ = hd(W −W ′). (5)

We will call the left side, W , the pattern (lan-
guage) and the opposite side, W ′, the context
(language). Let ∆ = {⋄}. The semantics of a
CR constraint is expressed by:

(∅⋄α⋄∅) 2∆=⇒ ∪ki=1(λn⋄α⋄ρn). (6)

Note that (5) requires a deterministic or co-
deterministic recognizer for W ′.

4. FO: A Fragment of Second-Order Logic

Various logical formalisms have been used
for defining the semantics of the CR opera-
tion exactly (Koskenniemi, 1983; Yli-Jyrä and

Koskenniemi, 2004; Vaillette, 2004; Hulden,
2008). Koskenniemi (1983, 36) defines a CR
with k = 1 through a logical expression (7) but
did not explicate any model-theoretic seman-
tics of the logic itself.

{w|(w = vxy ∧ x ∈ α)
→ (v ∈ Σ∗λ1 ∧ y ∈ ρ1Σ∗)}. (7)

In finite model theory, the semantics of the
CR operation can be defined precisely through
monadic second-order logic (MSO) or, if the
operands are star-free, in its first-order (FO)
fragment. In both cases, the formula is in-
terpreted over finite words. The semantics of
MSO relies on automata over an extended al-
phabet, reflecting the power set of the vari-
ables in the formula. For example, variables
v and y would induce the extended alphabet
Σ′ = Σ× 2{v,y}.
In Yli-Jyrä and Koskenniemi (2004) and
Hulden (2008), the semantics of FO variables
has been defined with markers. The markers
are often cheaper than the set-based encoding
of FO variables as they extend the alphabet
only by one new symbol per variable.

Customized predicate logics (Vaillette, 2004;
Hulden, 2008) add syntactic sugar to the
usual MSO logic through substring variables
x, y, z, .... In addition, regular expressions α,
λ1, ρ1 etc. can be used in the predicates. With
these extensions, the model theoretic semantics
of CR can be expressed through such elegant
formulas as

(∀x)(matches(x, α)→btw(x, λ1, ρ1)). (8)

5. PF: Prefix-Free Patterns

If we assume that that the pattern α (as a set of
strings) does not contain proper prefixes (sym-
metrically: proper suffixes), one marker in the
GR pattern language becomes redundant. This
observation helps to reduce the 2-marker GR
approach to a 1-marker GR approach whenever
the assumption holds for the patttern α:

(∅⋄α∅) 1∆=⇒ ∪ki=1(λn⋄αρn).

32



CRs with prefix-free patterns occur naturally
inside the XFST-style replace rules (Yli-Jyrä,
2008b), bracketed FSIGs (Yli-Jyrä, 2008a),
and partition-based grammars (Grimley-Evans
et al., 1996). In these applications, each pattern
match can be unambiguously marked with one
marker only.

The assumption of prefix-freeness is trivially
true when α ⊆ Σ. This assumption was used
in Yli-Jyrä (2009), where also an optimized
compilation algorithm for the 1-marker GR was
presented.

A variant of this approach is in place in Parti-
tion Based Two Level Morphology (Grimley-
Evans et al., 1996) where multi character pat-
terns form adjacent blocks into which the
whole word is implicitly partitioned. As each
of the block is bracketed, the blocks cannot be
prefixes or suffixes of one another.

6. WL: Weighted Logic

The weighted MSO logic (Droste and Gastin,
2009) can be used to define the characteristic
series 1L ∈ B〈〈Σ∗〉〉 of any recognizable lan-
guage L ∈ Σ∗ and, in particular, of the lan-
guage of the constraint α⇒λ1 ρ1, ..., λk ρk.
For any word w ∈ c1...cn ∈ Σ∗, assume
that α′(v, y), λ′1(v), ..., λ′k(v), ρ

′
1(y), ..., ρ

′
k(y)

are appropriate wMSO(B, Σ) formulas defin-
ing the membership tests (cv...cy ∈ α),
(c1...cv−1 ∈ λ1), ..., (c1...cv−1 ∈ λk),
(cy+1...cn ∈ λ1), ..., (cy+1...cn ∈ λk). Then
the formula

∀v.∀y.(α′(v, y)→ ∨ki=1λ′i(v) ∧ ρ′i(y))

defines the characteristic series 1L for the con-
straint α⇒ λ1 ρ1, ..., λk ρk.
Each universally quantified variable must be
eliminated separately because each elimination
asserts that the quantifier’s scope is express-
ing a recognizable step function (Droste and
Gastin, 2009). This is contrasted to the (un-
weighted) predicate logic of Hulden (2008)
where the quantified variables are defined over
position pairs. The elimination of the weighted
universal quantifiers has been described in the

proof of Lemma 5.4 in Droste and Gastin
(2009)

In sum, the prior CR compilation methods can be
characterized, on average, by the following proper-
ties:

1. a product alphabet (IC, (FO,) WL)

2. the pattern-context contrast (all)

3. substring quantification (all but PF, WL)

4. relies on deterministic automata (all)

5. uses De Morgan duals (nearly all)

6. unavoidable DFA result (SF, GR, FO, PF).

1.3 The Overview of the Unconventional
Approach

The method presented in the following sections is
nonconventional in many respects as it takes advan-
tage of the following observations:

1. O(1) Markers. The GR method has demon-
strated that adding O(1) markers to the alpha-
bet is enough. We will thus use markers in-
stead of a heavily extended alphabet. This also
means that we start our thinking from the GR
operation.

2. Patternless GR. One of the operands of the
GR operation can be eliminated as the pattern
W ⊆ ∅⋄∅ can be moved to the right side of
the GR without any effect on the semantics:(
W

1∆=⇒W ′
)

=
(
∅⋄∅ 1∆=⇒ (W ′ ∪W )

)
. The

resulting patternless GR can be viewed as a
form of a universal quantifier:(

∅⋄∅ 1∆=⇒W ′′
)

= {c1...cn |
∀i∈{0, ..., n}.c1...ci⋄ci+1...cn ∈W ′′}. (9)

3. One Position. The quantified positions can be
eliminated one by one. A patternless 2-marker
GR where ∆ = {⋄1, ⋄2} and W ′ ⊆ W =
∅⋄1∅⋄2∅ reduces to a pair of nested 1-marker
GRs:(

W
2∆=⇒W ′

)
=

(
∅⋄∅ 1{⋄1}=⇒

(
∅⋄∅ 1{⋄2}=⇒ W ′

))
. (10)

33



The approach is comparable to weighted logic
where one cannot generally remove two univer-
sally quantified variables at once because the
resulting weighted automaton is not necessar-
ily finite.

4. Determinism and Co-determinism. Combi-
nations of left and right sequential transduc-
ers (Johnson, 1972; Skut et al., 2004; Peikov,
2006) have been applied in the compilation
of context-dependent rewriting rules. Analo-
gously, the recognizer for the context language
W ′ can be determinized and co-determinized
“inwards”, towards the marker (Section 2.3).

5. No Complementations. The local structure of
the “inward” deterministic recognizer for the
pattern language W ′ can be used directly as
if it were a readily compiled constraint (Sec-
tion 3). Thus, the “double complementation”
needed by many prior methods is avoided.

6. NFA Result. The compilation can result into
a nondeterministic automaton (NFA). In appli-
cations, NFAs can be used as constraints since
they are closed under the intersection opera-
tion.

The rest of the paper is committed to the realiza-
tion of the new core operation: the patternless GR

(∅⋄∅ 1{⋄2}=⇒ W ′). A patternless GR operation can
express a CR or even a combination of CRs. This
operation is described in Section 3.

Before the section, some prerequisites are given
(Section 2), and after the section, the paper is con-
cluded with complexity analysis and remarks (Sec-
tion 4).

2 The Prerequisites

2.1 Automata

For overviews and the terminology of finite au-
tomata, the reader is referred to a text book such as
Hopcroft et al. (2006).

A (nondeterministic) finite automaton (fa) is a 5-
tuple A=(Q, I, F, Σ, δ) with states Q, initial states
I , final states F , input alphabet Σ and the transition
relation δ ⊆ Q × Σ × Q. For every state q ∈ Q
and letter a ∈ Σ, the set of states {r|(q, a, r) ∈ δ}

Algorithm 1 BARRIERDET(A, ∆): Determiniza-
tion until ∆-barrier
Require: A fa A = (Q, I, F, Σ∆, δ)

1: done← F ′ ← δ′ ← ∅; Q′ ← {(0, I)}
2: while Q′ 6= done do
3: Pick a state (s, P ) from Q′ − done;

Insert the state (s, P ) to done
4: for all a ∈ Σ∆ with Pa 6= ∅ do
5: if s = 0 and a ∈ Σ then
6: Insert the state (0, Pa) to Q′;

Insert the triplet ((0, P ), a, (0, Pa)) to δ′

7: else
8: for all r ∈ Pa do
9: insert ((s, P ), a, (1, {r})) to δ′, and

(1, {r}) to Q′
10: end for
11: end if
12: end for
13: end while
14: returnA′=(Q′, {(0, I)}, Q′∩({1}×F ), Σ∆, δ′)
Ensure: (see the referrence in the text)

reached by input a is denoted by qa. Extend the
notation to a state set P ⊆ Q and a word w =
a1...an ∈ Σ∗ in such a way that Pa = {q | p ∈
P, (p, a, q) ∈ δ} and Pa1...a2 = (Pa1)a2...an. The
automaton recognizes the language ||A|| = {w ∈
Σ∗ | Iw ∩ P 6= ∅}.

Let A = (Q, I, F, Σ, δ) be a fa. Denote its struc-
tural reversal (Q, F, I, Σ, δ′) where δ′ = {(r, a, q) |
(q, a, r) ∈ δ} by AR. Denote by Σ∆ = Σ ∪ ∆ an
alphabet such that ∆ ∩ Σ = ∅.

2.2 Barrier Deterministic Automata

Definition 2.1. Let A = (Q, I, F, Σ∆, δ). The fa A
is barrier deterministic with respect to the marker set
∆ if

1. there is at most one initial state, i.e. |I| ≤ 1

2. the states Q can be divided into the sets of left
and right states Q1 and Q2 in such a way that
δ ⊆ (Q1×∆×Q2)∪ (Q1×Σ×Q1)∪ (Q2×
Σ×Q2)

3. the left states are deterministic i.e. |qa| ≤ 1 for
every state q ∈ Q1 and letter a ∈ Σ.

34



Let A=(Q, I, F, Σ∆, δ) be a fa. Algorithm
1 implements a function called BARRIERDET.
BARRIERDET(A, ∆) is a barrier deterministic au-
tomaton A′ = (Q1 ∪Q2, I ′, F ′, Σ∆, δ′) with
• |I| ≤ 1, Q1 ∩Q2 = ∅, δ ⊆ (Q1 ×∆ ×Q2) ∪

(Q1×Σ×Q1)∪ (Q2×Σ×Q2), and |qa| ≤ 1
for every state q ∈ Q1 and letter a ∈ Σ.
• Q2 ⊆ {1}×Q and δ′ ∩ (Q2 × Σ × Q2) =

({1}×δ) ∩ (Q2 × Σ×Q2)
• ||A′|| = ||A|| ∩ Σ∗∆Σ∗.

2.3 Inward Deterministic Automata

Definition 2.2. Let A = (Q, I, F, Σ∆, δ). The au-
tomaton A is inward deterministic with respect to
the marker set ∆ if both A and AR are barrier de-
terministic with respect to the marker set ∆.

An inward deterministic automaton A′′ =
INWARDDET(A, M) with ||A′′|| = ||A|| ∩ Σ∗∆Σ∗
is given by

INWARDDET(A, M) =
BARRIERDET(BARRIERDET(A, ∆)R, ∆)R. (11)

Note that A′′ has at most one path for every v⋄y ∈
Σ∗∆Σ∗ where ⋄ ∈ ∆. The definition is illustrated
in Figure 1.

3 Compiling Patternless GR Constraints

Let A = (Q, I, F, Σ{⋄}, δ) be an automaton that
is inward deterministic with respect to {⋄}. This
section describes how a recognizer for the language
Σ∗ − h1(Σ∗⋄Σ∗ − ||A||) of the patternless GR con-
straint (∅⋄∅ 1{⋄}=⇒ W ′) with W ′ = ||A|| is con-
structed.

The language L = Σ∗ − h1(Σ∗⋄Σ∗ −W ′) is de-
scribed either through a double complement or pos-
itively:

• Any word w ∈ Σ∗ such that h−11 (w) 6⊆ W ′ is
“nogood” i.e. w /∈ L
• Any word w ∈ Σ∗ such that h−11 (w) ⊆ W ′ is

“good” i.e. w ∈ L.
The positive description for L has an interpreta-

tion in an inward deterministic recognizer A. Let
w = c1...cn ∈ Σ∗. If w ∈ L then A has two disjoint
w-labeled (incomplete) paths:

0

1

2

3

4

5

6 7

8

9

a

a

c ⋄

b
c ⋄

e

f

f

g

0

1

2

3 4

5

6

7
c

a

c

a

b

⋄
f

f

g

e

e

0,1

0,2

3

4

5

6

7

7,8

8,9
a

a

b

c

c

⋄
⋄

e

f

e

f

g

0 1,2

1,3 4,5

5,6

3 4

7c

a

a

b

⋄

⋄
⋄⋄

f

f

g
e

Figure 1: The lower two automata are inward determin-
istic (with ∆ = {⋄}), while the upper two automata are
not inward deterministic.

1. An initial left context path πl = 〈l0, l1, ..., ln〉
that starts from the initial state l0 = i and ends
at the state ln.

2. A final right context path πr = 〈r0, r1, ..., rn〉
that starts from the final state rn = f and pro-
ceeds left-deterministically to the state r0.

These two paths in the automaton A are connected
with n+1 transitions on the ⋄-marker, and they thus
form n+1 complete runs, one for each n+1 marked
word in the language h−11 (w). They constitute a
ladder-shaped substructure as illustrated in Figure 2.

Let Z ⊆ Σ∗⋄Σ∗ be a marked language. Then Z is
closed under variant markings, if Z = h−11 (h1(Z)).
In this sense, the largest closed subset of ||A||
is LADDER(||A||) = Σ∗⋄Σ∗ − h−11 (h1(Σ∗⋄Σ∗ −
||A||)). We now have the equivalence between the
double complement description and the positive de-
scription for the language L:

Σ∗ − h1(Σ∗⋄Σ∗ −W ′) = h1(LADDER(||A||)).
SUPERPOSE(A, ⋄) (Algorithm 2) detects the sub-
language LADDER(||A||) from A and constructs

35



l0 l1 l2 ln−2 ln−1 ln

r0 r1 r2 rn−2 rn−1 rn

⋄ ⋄ ⋄ ⋄ ⋄ ⋄

c1 c2

c3...cn−2
cn−1 cn

c1 c2

c3...cn−2

cn−1 cn

Figure 2: The ladder-shaped substructure of A corresponding to the word c1...cn.

a recognizer A′′ for its homomorphic image
h1(LADDER(||A||). The lines 3-6 optimize the al-
gorithm by restricting its state set to the accessible
part. In practice, this optimization can be easily in-
corporated to the main construction that is on lines 1
and 2.

Algorithm 2 SUPERPOSE(A,⋄)
Require: Inward deterministic NFA
A = (Q, {i}, {f}, δ) with L(A) ⊆ Σ∗⋄Σ∗

1: Q′ ← {(l, r) | (l, ⋄, r) ∈ δ};
I ′ ← {(l, r) ∈ Q′ | l ∈ I};
F ′ ← {(l, r) ∈ Q′ | r ∈ F}

2: δ′ ← {((l, r), a, (l′, r′)) |
(l, r), (l′, r′) ∈ Q′, l′ ∈ la, r′ ∈ ra}

3: A′ = (Q′, I ′, F ′, Σ, δ′); P ← I ′
4: while PΣ− P 6= ∅ do
5: P ← P ∪ PΣ
6: end while
7: return A′′=(P, I ′, F ′∩P, Σ, δ′(∩P×Σ×P ))

Ensure: ||A′′|| = h1(LADDER(||A||))

4 Evaluation

4.1 The Worst-Case Complexity Analysis

The complexity of INWARDDET (Algorithm 1)
alone is similar to the general determinization algo-
rithms: exponential to the size of the input. Let l
and r be the size of the left-context component and
the right-context component of the automaton that
is an input to the inward determinization algorithm.
Denote the left-context and right-context state sets
of the result of INWARDDET, respectively, by Q and
R. The respective sizes of the Q and R components
of the inward deterministic result are then O(2l) and
O(2r).

The SUPERPOSE algorithm (Algorithm 2) as-
sumes a nondeterministic automaton that is inward

deterministic with respect to the marker ⋄. Such
an automaton contains O(|Q||R|) marker transi-
tions and O((|Q| + |R|)|Σ|) normal transitions be-
cause the states have only one transition per a letter.
The size of the projection of the inward determin-
istic automaton is polynomial to the size of the in-
ward deterministic automaton. Namely, it contains
O(|Q||R|) states that corresponds to ⋄-transitions
in the input. Since the result is nondeterministic,
a state (q, r) can have, for every letter a ∈ Σ,
a transition to any of the states {(q′, r′)|δ(q, a) =
{q′}, r′ ∈ δ(r, a)}. The total number of transitions
is O(|Q||R|2|Σ|). Based on this, the time complex-
ity of the SUPERPOSE is O(|Q||R|2|Σ|) if we as-
sume that each of result transitions can be created in
constant time.

The worst case nondeterministic state complex-
ity of the output of the INWARDDET and SUPER-
POSE methods is O(2l(2r)2|Σ|) i.e. O(2s) where
s = l + r. Recall that this is applicable to pattern-
less GRs only. The patternless GR is directly usable
when the pattern language α of the CR constraint
is prefix-free or suffix-free. In all other cases, the
compilation of CRs requires more general, but less
efficient methods that involve two markers (possibly
through nested patternless GRs).

4.2 Updating the Best Practice

The comparative sizes of minimal deterministic, co-
deterministic and inward deterministic representa-
tions of the context language W ′ may differ sig-
nificantly. For example, the deterministic or co-
deterministic automaton recognizing the language
ΣnaΣ∗⋄Σ∗aΣn (for any large enough n ∈ N) is ex-
ponentially larger than the corresponding inward de-
terministic automaton. The comparative size differ-
ence means that using (INWARDDET+)SUPERPOSE
to compile this patternless GR would be an es-

36



smallest representation recommendation
for λ for ρ for λ⋄ρ method
determ. determ. determ. GR with DFAs
determ. co-det. inw.det. SUPERPOSE
co-det. co-det. co-det. GR with r-DFAs

Table 1: The choice for the compilation method when
other known methods cause immediate blow-up in the
representation of contexts.

sential improvement over the state-of-the-art meth-
ods where determinization (GR with DFAs) or co-
determinization (GR with reverse DFAs) is the first
step of the compilation. There are also oppo-
site situations where (INWARDDET+)SUPERPOSE
is less likely the most appropriate method (Table 1).
Clearly, this kind of rules of thumb will be refined
when we can evaluate the predictions with additional
practical experiments.

The differences between the efficiency of the
methods are often less dramatic in practice. The
initial experiments with some 1100 CR constraints
from a syntactic FSIG grammar (Voutilainen, 1997)
indicate that the size of the inward deterministic
automaton is typically very close (1.0 - 4.0 ×) to
the corresponding minimal deterministic automaton.
More careful implementation and experiments are
needed in order to find significant differences in ef-
ficiency.

According to the author’s experiences, it is com-
plicated to add the barrier and inward determiniza-
tion algorithms to the existing finite-state libraries
and tools. Namely, many finite state tools, such as
XFST, FOMA, and SFST, typically store the interme-
diate results as canonical automata. Therefore, the
current work suggests that the tools should handle
also nondeterministic and co-deterministic automata
as full citizens of the finite-state calculus.

Perhaps the cleanest way to add the currently pre-
sented algorithms to finite state libraries is to encap-
sulate the barrier determinization, the reversal and
the SUPERPOSE algorithm into one routine where
they can store and optimize the nondeterministic au-
tomata as needed. However, this seems to be coun-
terproductive from the perspective of reusability.

Perhaps the best practice for using the currently
presented method is to use multiple methods and

avoid expensive determinizations whenever possi-
ble.

4.3 Further Work

There are some possibilities for optimizations and
extensions in the presented algorithms: (1) The in-
ward determinization can be optimized by adding
some filtering for states that cannot be used by the
SUPERPOSE algorithm. (2) A notion of minimal-
ity can be adapted to inward deterministic automata
and the minimized inward deterministic automata
can help reduce the size of the compiled result. (3)
The current method for CR compilation could be
embedded in methods that compile replace rules or
methods where the constraints or rules are compiled
on “the fly”. (4) a weighted variant of the cur-
rent method should be compared against Droste and
Gastin (2009).

Acknowledgments

This work was supported by the Academy of Fin-
land grant number 128536 “Open and Language
Independent Automata-Based Resource Production
Methods for Common Language Research Infras-
tructure”. I am also indebted to Måns Hulden,
Andreas Maletti and Jacques Sakarovitch and the
anonymous reviewers for their critical and construc-
tive remarks.

References

Manfred Droste and Paul Gastin. 2009. Weighted
automata and weighted logics. In Manfred Droste,
Werner Kuich, and Heiko Vogler, editors, Handbook of
Weighted Automata, Monographs in Theoretical Com-
puter Science, chapter 5, pages 175–211. Springer-
Verlag, Berlin Heidelberg.

Edmund Grimley-Evans, George Anton Kiraz, and
Stephen G. Pulman. 1996. Compiling a partition-
based two-level formalism. In 16th International
Conference on Computational Linguistics (COLING
1996), volume 1, pages 454–459, Center for Sprogte-
knologi, Copenhagen, Denmark.

John E. Hopcroft, Rajeev Motwani, and Jeffrey D. Ull-
man. 2006. Introduction to Automata Theory, Lan-
guages, and Computation (3rd Edition). Addison-
Wesley Longman Publishing Co., Inc., Boston, MA,
USA.

Måns Hulden. 2008. Regular expressions and predicate
logic in finite-state processing. In Jakub Piskorski,

37



Bruce Watson, and Anssi Yli-Jyrä, editors, Finite-state
methods and natural language processing. IOS Press,
Amsterdam, The Netherlands.

C. Douglas Johnson. 1972. Formal Aspects of Phono-
logical Description. Number 3 in Monographs on lin-
guistic analysis. Mouton, The Hague.

Ronald M. Kaplan and Martin Kay. 1994. Regular mod-
els of phonological rule systems. Computational Lin-
guistics, 20(3):331–378.

Lauri Karttunen, Kimmo Koskenniemi, and Ronald M.
Kaplan. 1987. A compiler for two-level phonological
rules. Report CSLI-87-108, Center for Study of Lan-
guage and Information, Stanford University, CA.

Lauri Karttunen. 2004. Restriction opera-
tor error: Technical note. Web page http:
//www.stanford.edu/˜laurik/fsmbook/
errata/restriction-operator.html read
on Oct 7, 2011.

André Kempe and Lauri Karttunen. 1996. Paral-
lel replacement in finite state calculus. In 16th In-
ternational Conference on Computational Linguistics
(COLING 1996), volume 2, pages 622–627, Center for
Sprogteknologi, Copenhagen, Denmark.

Kimmo Koskenniemi and Miikka Silfverberg. 2010. A
method for compiling two-level rules with multiple
contexts. In Proceedings of the 11th Meeting of the
ACL Special Interest Group on Computational Mor-
phology and Phonology, SIGMORPHON ’10, pages
38–45, Stroudsburg, PA, USA. Association for Com-
putational Linguistics.

Kimmo Koskenniemi, Pasi Tapanainen, and Atro Vouti-
lainen. 1992. Compiling and using finite-state
syntactic rules. In Proceedings of the 15th Inter-
national Conference on Computational Linguistics,
COLING’92, volume 1, pages 156–162. International
Committee on Computational Linguistics, Nantes,
France.

Kimmo Koskenniemi. 1983. Two-level morphol-
ogy: a general computational model for word-form
recognition and production. Number 11 in Publica-
tions. Department of General Linguistics, University
of Helsinki, Helsinki.

Robert McNaughton and Seymour Papert. 1971.
Counter-Free Automata. Number 65 in Research
Monograph. MIT Press, Cambridge, Massachusetts.

Ivan Petrov Peikov. 2006. Direct construction of a bi-
machine for context-sensitive rewrite rule. Master’s
thesis, Sofia University St. Kliment Ohridski, Faculty
of Mathematics and Computer Science, Department of
Mathematical Logic and Applications, Sofia, Bulgaria.

Wojciech Skut, Stefan Ulrich, and Kathrine Hammer-
vold. 2004. A bimachine compiler for ranked tagging

rules. In Proceedings of the 20th International Con-
ference on Computational Linguistics, COLING ’04,
Stroudsburg, PA, USA.

Nathan Vaillette. 2004. Logical Specification of Finite-
State Transductions for Natural Language Processing.
Ph.D. thesis, Department of Linguistics, Ohio State
University.

Atro Voutilainen. 1997. Designing a (finite-state) pars-
ing grammar. In Emmanuel Roche and Yves Schabes,
editors, Finite-State Language Processing, chapter 9,
pages 283–310. A Bradford Book, the MIT Press,
Cambridge, MA, USA.

Anssi Yli-Jyrä and Kimmo Koskenniemi. 2004. Com-
piling contextual restrictions on strings into finite-state
automata. In The Eindhoven FASTAR Days, Proceed-
ings, number 04/40 in Computer Science Reports, The
Netherlands. Technische Universiteit Eindhoven.

Anssi Yli-Jyrä. 2003. Describing syntax with star-
free regular expressions. In Proceedings of the tenth
conference on European chapter of the Association
for Computational Linguistics - Volume 1, EACL ’03,
pages 379–386, Stroudsburg, PA, USA. Association
for Computational Linguistics.

Anssi Yli-Jyrä. 2005. Contributions to the Theory of
Finite-State Based Grammars. Number 38 in Publica-
tions. Department of General Linguistics, University
of Helsinki.

Anssi Yli-Jyrä. 2008a. Applications of diamonded dou-
ble negation. In Thomas Hanneforth and Kay-Michael
Würzner, editors, Finite-State Methods and Natural
Language Proceedings. 6th International Workshop,
FSMNLP 2007, Potsdam, Germany, September 14-
16. Revised Papers, pages 6–30. Potsdam University
Press, Potsdam, Germany.

Anssi Yli-Jyrä. 2008b. Transducers from parallel re-
placement rules and modes with generalized lenient
composition. In Thomas Hanneforth and Kay-Michael
Würzner, editors, Finite-State Methods and Natural
Language Proceedings. 6th International Workshop,
FSMNLP 2007, Potsdam, Germany, September 14-16.
Revised Papers, pages 196–212. Potsdam University
Press, Potsdam, Germany.

Anssi Yli-Jyrä. 2009. An efficient double complemen-
tation algorithm for superposition-based finite-state
morphology. In Kristiina Jokinen and Eckhard Bick,
editors, Proceedings of the 17th Nordic Conference
of Computational Linguistics, NODALIDA 2009, May
14-16, 2009, volume 4 of NEALT Proceedings Series,
Odense, Danmark. Northern European Association for
Language Technology.

38


