



















































Deep Reinforcement Learning with a Natural Language Action Space


Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 1621–1630,
Berlin, Germany, August 7-12, 2016. c©2016 Association for Computational Linguistics

Deep Reinforcement Learning with a Natural Language Action Space

Ji He∗, Jianshu Chen†, Xiaodong He†, Jianfeng Gao†, Lihong Li†
Li Deng† and Mari Ostendorf∗

∗Department of Electrical Engineering, University of Washington, Seattle, WA 98195, USA
{jvking, ostendor}@uw.edu

†Microsoft Research, Redmond, WA 98052, USA
{jianshuc, xiaohe, jfgao, lihongli, deng}@microsoft.com

Abstract

This paper introduces a novel architec-
ture for reinforcement learning with deep
neural networks designed to handle state
and action spaces characterized by natural
language, as found in text-based games.
Termed a deep reinforcement relevance
network (DRRN), the architecture repre-
sents action and state spaces with sepa-
rate embedding vectors, which are com-
bined with an interaction function to ap-
proximate the Q-function in reinforce-
ment learning. We evaluate the DRRN
on two popular text games, showing su-
perior performance over other deep Q-
learning architectures. Experiments with
paraphrased action descriptions show that
the model is extracting meaning rather
than simply memorizing strings of text.

1 Introduction

This work is concerned with learning strategies
for sequential decision-making tasks, where a sys-
tem takes actions at a particular state with the goal
of maximizing a long-term reward. More specifi-
cally, we consider tasks where both the states and
the actions are characterized by natural language,
such as in human-computer dialog systems, tutor-
ing systems, or text-based games. In a text-based
game, for example, the player (or system, in this
case) is given a text string that describes the cur-
rent state of the game and several text strings that
describe possible actions one could take. After se-
lecting one of the actions, the environment state is
updated and revealed in a new textual description.
A reward is given either at each transition or in the
end. The objective is to understand, at each step,
the state text and all the action texts to pick the
most relevant action, navigating through the se-

quence of texts so as to obtain the highest long-
term reward. Here the notion of relevance is based
on the joint state/action impact on the reward: an
action text string is said to be “more relevant” (to
a state text string) than the other action texts if
taking that action would lead to a higher long-
term reward. Because a player’s action changes
the environment, reinforcement learning (Sutton
and Barto, 1998) is appropriate for modeling long-
term dependency in text games.

There is a large body of work on reinforcement
learning. Of most interest here are approaches
leveraging neural networks because of their suc-
cess in handling a large state space. Early work —
TD-gammon — used a neural network to approxi-
mate the state value function (Tesauro, 1995). Re-
cently, inspired by advances in deep learning (Le-
Cun et al., 2015; Hinton et al., 2012; Krizhevsky
et al., 2012; Dahl et al., 2012), significant progress
has been made by combining deep learning with
reinforcement learning. Building on the approach
of Q-learning (Watkins and Dayan, 1992), the
“Deep Q-Network” (DQN) was developed and ap-
plied to Atari games (Mnih et al., 2013; Mnih et
al., 2015) and shown to achieve human level per-
formance by applying convolutional neural net-
works to the raw image pixels. Narasimhan et
al. (2015) applied a Long Short-Term Memory
network to characterize the state space in a DQN
framework for learning control policies for parser-
based text games. More recently, Nogueira and
Cho (2016) have also proposed a goal-driven web
navigation task for language based sequential de-
cision making study. Another stream of work fo-
cuses on continuous control with deep reinforce-
ment learning (Lillicrap et al., 2016), where an
actor-critic algorithm operates over a known con-
tinuous action space.

Inspired by these successes and recent work us-
ing neural networks to learn phrase- or sentence-

1621



level embeddings (Collobert and Weston, 2008;
Huang et al., 2013; Le and Mikolov, 2014;
Sutskever et al., 2014; Kiros et al., 2015), we
propose a novel deep architecture for text under-
standing, which we call a deep reinforcement rele-
vance network (DRRN). The DRRN uses separate
deep neural networks to map state and action text
strings into embedding vectors, from which “rel-
evance” is measured numerically by a general in-
teraction function, such as their inner product. The
output of this interaction function defines the value
of the Q-function for the current state-action pair,
which characterizes the optimal long-term reward
for pairing these two text strings. The Q-function
approximation is learned in an end-to-end manner
by Q-learning.

The DRRN differs from prior work in that ear-
lier studies mostly considered action spaces that
are bounded and known. For actions described by
natural language text strings, the action space is
inherently discrete and potentially unbounded due
to the exponential complexity of language with re-
spect to sentence length. A distinguishing aspect
of the DRRN architecture — compared to sim-
ple DQN extensions — is that two different types
of meaning representations are learned, reflecting
the tendency for state texts to describe scenes and
action texts to describe potential actions from the
user. We show that the DRRN learns a continuous
space representation of actions that successfully
generalize to paraphrased descriptions of actions
unseen in training.

2 Deep Reinforcement Relevance
Network

2.1 Text Games and Q-learning

We consider the sequential decision making prob-
lem for text understanding. At each time step
t, the agent will receive a string of text that de-
scribes the state st (i.e., “state-text”) and several
strings of text that describe all the potential ac-
tions at (i.e., “action-text”). The agent attempts to
understand the texts from both the state side and
the action side, measuring their relevance to the
current context st for the purpose of maximizing
the long-term reward, and then picking the best
action. Then, the environment state is updated
st+1 = s′ according to the probability p(s′|s, a),
and the agent receives a reward rt for that partic-
ular transition. The policy of the agent is defined
to be the probability π(at|st) of taking action at

at state st. Define the Q-function Qπ(s, a) as the
expected return starting from s, taking the action
a, and thereafter following policy π(a|s) to be:

Qπ(s, a) = E

{
+∞∑
k=0

γkrt+k

∣∣∣∣st = s, at = a
}

where γ denotes a discount factor. The optimal
policy and Q-function can be found by using the
Q-learning algorithm (Watkins and Dayan, 1992):

Q(st, at)← Q(st, at)+ (1)
ηt ·
(
rt + γ ·max

a
Q(st+1, a)−Q(st, at)

)
where ηt is the learning rate of the algorithm. In
this paper, we use a softmax selection strategy as
the exploration policy during the learning stage,
which chooses the action at at state st according
to the following probability:

π(at = ait|st) =
exp(α ·Q(st, ait))∑|At|
j=1 exp(α ·Q(st, ajt ))

, (2)

where At is the set of feasible actions at state st,
ait is the i-th feasible action in At, | · | denotes the
cardinality of the set, and α is the scaling factor in
the softmax operation. α is kept constant through-
out the learning period. All methods are initialized
with small random weights, so initial Q-value dif-
ferences will be small, thus making the Q-learning
algorithm more explorative initially. As Q-values
better approximate the true values, a reasonable α
will make action selection put high probability on
the optimal action (exploitation), but still maintain
a small exploration probability.

2.2 Natural language action space
Let S denote the state space, and let A denote the
entire action space that includes all the unique ac-
tions over time. A vanilla Q-learning recursion (1)
needs to maintain a table of size |S| × |A|, which
is problematic for a large state/action space. Prior
work using a DNN in Q-function approximation
has shown high capacity and scalability for han-
dling a large state space, but most studies have
used a network that generates |A| outputs, each
of which represents the value of Q(s, a) for a par-
ticular action a. It is not practical to have a DQN
architecture of a size that is explicitly dependence
on the large number of natural language actions.
Further, in many text games, the feasible action
set At at each time t is an unknown subset of the
unbounded action space A that varies over time.

1622



For the case where the maximum number of
possible actions at any point in time (maxt |At|)
is known, the DQN can be modified to simply use
that number of outputs (“Max-action DQN”), as
illustrated in Figure 1(a), where the state and ac-
tion vectors are concatenated (i.e., as an extended
state vector) as its input. The network computes
the Q-function values for the actions in the current
feasible set as its outputs. For a complex game,
maxt |At| may be difficult to obtain, because At
is usually unknown beforehand. Nevertheless, we
will use this modified DQN as a baseline.

An alternative approach is to use a function ap-
proximation using a neural network that takes a
state-action pair as input, and outputs a single Q-
value for each possible action (“Per-action DQN”
in Figure 1(b)). This architecture easily handles a
varying number of actions and represents a second
baseline.

We propose an alternative architecture for han-
dling a natural language action space in sequential
text understanding: the deep reinforcement rele-
vance network (DRRN). As shown in Figure 1(c),
the DRRN consists of a pair of DNNs, one for
the state text embedding and the other for action
text embeddings, which are combined using a pair-
wise interaction function. The texts used to de-
scribe states and actions could be very different
in nature, e.g., a state text could be long, contain-
ing sentences with complex linguistic structure,
whereas an action text could be very concise or
just a verb phrase. Therefore, it is desirable to use
two networks with different structures to handle
state/action texts, respectively. As we will see in
the experimental sections, by using two separate
deep neural networks for state and action sides, we
obtain much better results.

2.3 DRRN architecture: Forward activation

Given any state/action text pair (st, ait), the DRRN
estimates the Q-function Q(st, ait) in two steps.
First, map both st and ait to their embedding vec-
tors using the corresponding DNNs, respectively.
Second, approximate Q(st, ait) using an interac-
tion function such as the inner product of the em-
bedding vectors. Then, given a particular state st,
we can select the optimal action at among the set
of actions via at = arg maxait Q(st, a

i
t).

More formally, let hl,s and hl,a denote the l-th
hidden layer for state and action side neural net-
works, respectively. For the state side, Wl,s and

bl,s denote the linear transformation weight ma-
trix and bias vector between the (l− 1)-th and l-th
hidden layers. Wl,a and bl,a denote the equivalent
parameters for the action side. In this study, the
DRRN has L hidden layers on each side.

h1,s = f(W1,sst + b1,s) (3)

hi1,a = f(W1,aa
i
t + b1,a) (4)

hl,s = f(Wl−1,shl−1,s + bl−1,s) (5)

hil,a = f(Wl−1,ah
i
l−1,a + bl−1,a) (6)

where f(·) is the nonlinear activation function at
the hidden layers, which, for example, could be
chosen as tanh (x), and i = 1, 2, 3, ..., |At| is
the action index. A general interaction function
g(·) is used to approximate the Q-function values,
Q(s, a), in the following parametric form:

Q(s, ai; Θ) = g
(
hL,s, h

i
L,a

)
(7)

where Θ denotes all the model parameters. The in-
teraction function could be an inner product, a bi-
linear operation, or a nonlinear function such as a
deep neural network. In our experiments, the inner
product and bilinear operation gave similar results.
For simplicity, we present our experiments mostly
using the inner product interaction function.

The success of the DRRN in handling a natu-
ral language action space A lies in the fact that
the state-text and the action-texts are mapped into
separate finite-dimensional embedding spaces.
The end-to-end learning process (discussed next)
makes the embedding vectors in the two spaces
more aligned for “good” (or relevant) action texts
compared to “bad” (or irrelevant) choices, result-
ing in a higher interaction function output (Q-
function value).

2.4 Learning the DRRN: Back propagation
To learn the DRRN, we use the “experience-
replay” strategy (Lin, 1993), which uses a fixed
exploration policy to interact with the environment
to obtain a sample trajectory. Then, we randomly
sample a transition tuple (sk, ak, rk, sk+1), com-
pute the temporal difference error for sample k:

dk = rk+γmax
a

Q(sk+1, a; Θk−1)−Q(sk, ak; Θk−1),
and update the model according to the recursions:

Wv,k = Wv,k−1 + ηkdk · ∂Q(sk, ak; Θk−1)
∂Wv

(8)

bv,k = bv,k−1 + ηkdk · ∂Q(sk, ak; Θk−1)
∂bv

(9)

1623



𝑠 𝑎

ℎ

ℎ

𝑠 𝑎

ℎ

ℎ

𝑄 (𝑠, 𝑎 )

𝑎

𝑄 (𝑠, 𝑎 )𝑄 (𝑠, 𝑎 )

(a) Max-action DQN

𝑠 𝑎

ℎ

ℎ

𝑠 𝑎

ℎ

ℎ

𝑄 (𝑠, 𝑎 )

𝑎

𝑄 (𝑠, 𝑎 )𝑄 (𝑠, 𝑎 )

(b) Per-action DQN

𝑠

pairwise interaction function 
(e.g. inner product)

𝑎

ℎ ,

ℎ ,

𝑄 (𝑠, 𝑎 )

ℎ ,

ℎ ,

(c) DRRN

Figure 1: Different deep Q-learning architectures: Max-action DQN and Per-action DQN both treat
input text as concantenated vectors and compute output Q-values with a single NN. DRRN models text
embeddings from state/action sides separately, and use an interaction function to compute Q-values.

Figure 2: PCA projections of text embedding vectors for state and associated action vectors after 200,
400 and 600 training episodes. The state is “As you move forward, the people surrounding you suddenly
look up with terror in their faces, and flee the street.” Action 1 (good choice) is “Look up”, and action 2
(poor choice) is “Ignore the alarm of others and continue moving forward.”

for v ∈ {s, a}. Expressions for ∂Q∂Wv ,
∂Q
∂bv

and
other algorithm details are given in supplementary
materials. Random sampling essentially scram-
bles the trajectory from experience-replay into a
“bag-of-transitions”, which has been shown to
avoid oscillations or divergence and achieve faster
convergence in Q-learning (Mnih et al., 2015).
Since the models on the action side share the same
parameters, models associated with all actions are
effectively updated even though the back propaga-
tion is only over one action. We apply back prop-
agation to learn how to pair the text strings from
the reward signals in an end-to-end manner. The
representation vectors for the state-text and the
action-text are automatically learned to be aligned
with each other in the text embedding space from
the reward signals. A summary of the full learning
algorithm is given in Algorithm 1.

Figure 2 illustrates learning with an inner
product interaction function. We used Principal
Component Analysis (PCA) to project the 100-
dimension last hidden layer representation (before
the inner product) to a 2-D plane. The vector em-
beddings start with small values, and after 600
episodes of experience-replay training, the embed-
dings are very close to the converged embedding
(4000 episodes). The embedding vector of the op-
timal action (Action 1) converges to a positive in-
ner product with the state embedding vector, while
Action 2 converges to a negative inner product.

3 Experimental Results

3.1 Text games
Text games, although simple compared to video
games, still enjoy high popularity in online com-
munities, with annual competitions held online

1624



Algorithm 1 Learning algorithm for DRRN
1: Initialize replay memory D to capacity N .
2: Initialize DRRN with small random weights.
3: Initialize game simulator and load dictionary.
4: for episode = 1, . . . ,M do
5: Restart game simulator.
6: Read raw state text and a list of action text from the simulator, and convert them to representation

s1 and a11, a
2
1, . . . , a

|A1|
1 .

7: for t = 1, . . . , T do
8: Compute Q(st, ait; Θ) for the list of actions using DRRN forward activation (Section 2.3).
9: Select an action at based on probability distribution π(at = ait|st) (Equation 2)

10: Execute action at in simulator
11: Observe reward rt. Read the next state text and the next list of action texts, and convert them to

representation st+1 and a1t+1, a
2
t+1, . . . , a

|At+1|
t+1 .

12: Store transition (st, at, rt, st+1, At+1) in D.
13: Sample random mini batch of transitions (sk, ak, rk, sk+1, Ak+1) from D.
14: Set yk =

{
rk if sk+1 is terminal
rk + γmaxa′∈Ak+1 Q(sk+1, a

′; Θ)) otherwise
15: Perform a gradient descent step on (yk−Q(sk, ak; Θ))2 with respect to the network parameters

Θ (Section 2.4). Back-propagation is performed only for ak even though there are |Ak| actions
at time k.

16: end for
17: end for

since 1995. Text games communicate to players
in the form of a text display, which players have
to understand and respond to by typing or click-
ing text (Adams, 2014). There are three types
of text games: parser-based (Figure 3(a)), choice-
based (Figure 3(b)), and hypertext-based (Figure
3(c)). Parser-based games accept typed-in com-
mands from the player, usually in the form of
verb phrases, such as “eat apple”, “get key”, or
“go east”. They involve the least complex ac-
tion language. Choice-based and hypertext-based
games present actions after or embedded within
the state text. The player chooses an action, and
the story continues based on the action taken at
this particular state. With the development of web
browsing and richer HTML display, choice-based
and hypertext-based text games have become more
popular, increasing in percentage from 8% in 2010
to 62% in 2014.1

For parser-based text games, Narasimhan et
al. (2015) have defined a fixed set of 222 actions,
which is the total number of possible phrases the
parser accepts. Thus the parser-based text game is
reduced to a problem that is well suited to a fixed-

1Statistics obtained from http://www.ifarchive.
org

Game Saving John Machine of
Death

Text game type Choice Choice &
Hypertext

Vocab size 1762 2258
Action vocab size 171 419
Avg. words/description 76.67 67.80
State transitions Deterministic Stochastic
# of states (underlying) ≥ 70 ≥ 200

Table 1: Statistics for the games “Saving John”
and and “Machine of Death”.

action-set DQN. However, for choice-based and
hypertext-based text games, the size of the action
space could be exponential with the length of the
action sentences, which is handled here by using a
continuous representation of the action space.

In this study, we evaluate the DRRN with two
games: a deterministic text game task called “Sav-
ing John” and a larger-scale stochastic text game
called “Machine of Death” from a public archive.2

The basic text statistics of these tasks are shown in
Table 1. The maximum value of feasible actions
(i.e., maxt |At|) is four in “Saving John”, and nine
in “Machine of Death”. We manually annotate fi-

2Simulators are available at https://github.com/
jvking/text-games

1625



(a) Parser-based (b) Choiced-based (c) Hypertext-based

Figure 3: Different types of text games

nal rewards for all distinct endings in both games
(as shown in supplementary materials). The mag-
nitude of reward scores are given to describe sen-
timent polarity of good/bad endings. On the other
hand, each non-terminating step we assign with a
small negative reward, to encourage the learner to
finish the game as soon as possible. For the text
game “Machine of Death”, we restrict an episode
to be no longer than 500 steps.

In “Saving John” all actions are choice-based,
for which the mapping from text strings to at are
clear. In “Machine of Death”, when actions are
hypertext, the actions are substrings of the state.
In this case st is associated with the full state de-
scription, and at are given by the substrings with-
out any surrounding context. For text input, we
use raw bag-of-words as features, with different
vocabularies for the state side and action side.

3.2 Experiment setup

We apply DRRNs with both 1 and 2 hidden layer
structures. In most experiments, we use dot-
product as the interaction function and set the
hidden dimension to be the same for each hid-
den layer. We use DRRNs with 20, 50 and
100-dimension hidden layer(s) and build learn-
ing curves during experience-replay training. The
learning rate is constant: ηt = 0.001. In testing, as
in training, we apply softmax selection. We record
average final rewards as performance of the model.

The DRRN is compared to multiple baselines:
a linear model, two max-action DQNs (MA DQN)
(L = 1 or 2 hidden layers), and two per-action
DQNs (PA DQN) (again, L = 1, 2). All base-
lines use the same Q-learning framework with dif-
ferent function approximators to predict Q(st, at)
given the current state and actions. For the lin-
ear and MA DQN baselines, the input is the text-
based state and action descriptions, each as a bag
of words, with the number of outputs equal to
the maximum number of actions. When there are
fewer actions than the maximum, the highest scor-
ing available action is used. The PA DQN baseline

Eval metric Average reward
hidden dimension 20 50 100
Linear 4.4 (0.4)
PA DQN (L = 1) 2.0 (1.5) 4.0 (1.4) 4.4 (2.0)
PA DQN (L = 2) 1.5 (3.0) 4.5 (2.5) 7.9 (3.0)
MA DQN (L = 1) 2.9 (3.1) 4.0 (4.2) 5.9 (2.5)
MA DQN (L = 2) 4.9 (3.2) 9.0 (3.2) 7.1 (3.1)
DRRN (L = 1) 17.1 (0.6) 18.3 (0.2) 18.2 (0.2)
DRRN (L = 2) 18.4 (0.1) 18.5 (0.3) 18.7 (0.4)

Table 2: The final average rewards and standard
deviations on “Saving John”.

takes each pair of state-action texts as input, and
generates a corresponding Q-value.

We use softmax selection, which is widely
applied in practice, to trade-off exploration vs.
exploitation. Specifically, for each experience-
replay, we first generate 200 episodes of data
(about 3K tuples in “Saving John” and 16K tuples
in “Machine of Death”) using the softmax selec-
tion rule in (2), where we set α = 0.2 for the first
game and α = 1.0 for the second game. The α is
picked according to an estimation of range of the
optimal Q-values. We then shuffle the generated
data tuples (st, at, rt, st+1) update the model as
described in Section 2.4. The model is trained with
multiple epochs for all configurations, and is eval-
uated after each experience-replay. The discount
factor γ is set to 0.9. For DRRN and all baselines,
network weights are initialized with small random
values. To prevent algorithms from “remember-
ing” state-action ordering and make choices based
on action wording, each time the algorithm/player
reads text from the simulator, we randomly shuffle
the list of actions.3 This will encourage the algo-
rithms to make decisions based on the understand-
ing of the texts that describe the states and actions.

3.3 Performance

In Figure 4, we show the learning curves of dif-
ferent models, where the dimension of the hid-

3When in a specific state, the simulator presents the pos-
sible set of actions in random order, i.e. they may appear in a
different order the next time a player is in this same state.

1626



0 500 1000 1500 2000 2500 3000 3500
Number of episodes

-10

-5

0

5

10

15

20
Av

er
ag

e 
re

w
ar

d

DRRN (2-hidden)
DRRN (1-hidden)
PA DQN (2-hidden)
MA DQN (2-hidden)

(a) Game 1: “Saving John”

0 500 1000 1500 2000 2500 3000 3500 4000
Number of episodes

-15

-10

-5

0

5

10

15

Av
er

ag
e 

re
w

ar
d

DRRN (2-hidden)
DRRN (1-hidden)
PA DQN (2-hidden)
MA DQN (2-hidden)

(b) Game 2: “Machine of Death”

Figure 4: Learning curves of the two text games.

Eval metric Average reward
hidden dimension 20 50 100
Linear 3.3 (1.0)
PA DQN (L = 1) 0.9 (2.4) 2.3 (0.9) 3.1 (1.3)
PA DQN (L = 2) 1.3 (1.2) 2.3 (1.6) 3.4 (1.7)
MA DQN (L = 1) 2.0 (1.2) 3.7 (1.6) 4.8 (2.9)
MA DQN (L = 2) 2.8 (0.9) 4.3 (0.9) 5.2 (1.2)
DRRN (L = 1) 7.2 (1.5) 8.4 (1.3) 8.7 (0.9)
DRRN (L = 2) 9.2 (2.1) 10.7 (2.7) 11.2 (0.6)

Table 3: The final average rewards and standard
deviations on “Machine of Death”.

den layers in the DQNs and DRRN are all set
to 100. The error bars are obtained by running
5 independent experiments. The proposed meth-
ods and baselines all start at about the same per-
formance (roughly -7 average rewards for Game
1, and roughly -8 average rewards for Game 2),
which is the random guess policy. After around
4000 episodes of experience-replay training, all
methods converge. The DRRN converges much
faster than the other three baselines and achieves a
higher average reward. We hypothesize this is be-
cause the DRRN architecture is better at capturing
relevance between state text and action text. The
faster convergence for “Saving John” may be due
to the smaller observation space and/or the deter-
ministic nature of its state transitions (in contrast
to the stochastic transitions in the other game).

The final performance (at convergence) for both
baselines and proposed methods are shown in Ta-
bles 2 and 3. We test for different model sizes with
20, 50, and 100 dimensions in the hidden layers.
The DRRN performs consistently better than all
baselines, and often with a lower variance. For

Game 2, due to the complexity of the underly-
ing state transition function, we cannot compute
the exact optimal policy score. To provide more
insight into the performance, we averaged scores
of 8 human players for initial trials (novice) and
after gaining experience, yielding scores of −5.5
and 16.0, respectively. The experienced players
do outperform our algorithm. The converged per-
formance is higher with two hidden layers for all
models. However, deep models also converge
more slowly than their 1 hidden layer versions, as
shown for the DRRN in Figure 4.

Besides an inner-product, we also experimented
with more complex interaction functions: a) a bi-
linear operation with different action side dimen-
sions; and b) a non-linear deep neural network us-
ing the concatenated state and action space embed-
dings as input and trained in an end-to-end fash-
ion to predict Q values. For different configura-
tions, we fix the state side embedding to be 100
dimensions and vary the action side embedding
dimensions. The bilinear operation gave similar
results, but the concatenation input to a DNN de-
graded performance. Similar behaviors have been
observed on a different task (Luong et al., 2015).

3.4 Actions with paraphrased descriptions

To investigate how our models handle actions
with “unseen” natural language descriptions, we
had two people paraphrase all actions in the
game “Machine of Death” (used in testing phase),
except a few single-word actions whose syn-
onyms are out-of-vocabulary (OOV). The word-
level OOV rate of paraphrased actions is 18.6%,

1627



Figure 5: Scatterplot and strong correlation be-
tween Q-values of paraphrased actions versus
original actions

and standard 4-gram BLEU score between the
paraphrased and original actions is 0.325. The re-
sulting 153 paraphrased action descriptions are as-
sociated with 532 unique state-action pairs.

We apply a well-trained 2-layer DRRN model
(with hidden dimension 100), and predict Q-
values for each state-action pair with fixed model
parameters. Figure 5 shows the correlation be-
tween Q-values associated with paraphrased ac-
tions versus original actions. The predictive R-
squared is 0.95, showing a strong positive corre-
lation. We also run Q-value correlation for the
NN interaction and pR2 = 0.90. For baseline
MA-DQN and PA-DQN, their corresponding pR2

is 0.84 and 0.97, indicating they also have some
generalization ability. This is confirmed in the
paraphrasing-based experiments too, where the
test reward on the paraphrased setup is close to
the original setup. This supports the claim that
deep learning is useful in general for this language
understanding task, and our findings show that a
decoupled architecture most effectively leverages
that approach.

In Table 4 we provide examples with predicted
Q-values of original descriptions and paraphrased
descriptions. We also include alternative action
descriptions with in-vocabulary words that will
lead to positive / negative / irrelevant game devel-
opment at that particular state. Table 4 shows ac-
tions that are more likely to result in good endings
are predicted with high Q-values. This indicates
that the DRRN has some generalization ability and
gains a useful level of language understanding in

the game scenario.
We use the baseline models and proposed

DRRN model trained with the original action de-
scriptions for “Machine of Death”, and test on
paraphrased action descriptions. For this game,
the underlying state transition mechanism has not
changed. The only change to the game interface is
that during testing, every time the player reads the
actions from the game simulator, it reads the para-
phrased descriptions and performs selection based
on these paraphrases. Since the texts in test time
are “unseen” to the player, a good model needs to
have some level of language understanding, while
a naive model that memorizes all unique action
texts in the original game will do poorly. The re-
sults for these models are shown in Table 5. All
methods have a slightly lower average reward in
this setting (10.5 vs. 11.2 for the original actions),
but the DRRN still gives a high reward and sig-
nificantly outperforms other methods. This shows
that the DRRN can generalize well to “unseen”
natural language descriptions of actions.

4 Related Work

There has been increasing interest in applying
deep reinforcement learning to a variety problems,
but only a few studies address problems with nat-
ural language state or action spaces. In language
processing, reinforcement learning has been ap-
plied to a dialogue management system that con-
verses with a human user by taking actions that
generate natural language (Scheffler and Young,
2002; Young et al., 2013). There has also been in-
terest in extracting textual knowledge to improve
game control performance (Branavan et al., 2011),
and mapping text instructions to sequences of ex-
ecutable actions (Branavan et al., 2009). In some
applications, it is possible to manually design fea-
tures for state-action pairs, which are then used
in reinforcement learning to learn a near-optimal
policy (Li et al., 2009). Designing such features,
however, require substantial domain knowledge.

The work most closely related to our study in-
olves application of deep reinforcement to learn-
ing decision policies for parser-based text games.
Narasimhan et al. (2015) applied a Long Short-
Term Memory DQN framework, which achieves
higher average reward than the random and Bag-
of-Words DQN baselines. In this work, actions
are constrained to a set of known fixed command
structures (one action and one argument object),

1628



Text (with predicted Q-values)
State As you move forward, the people surrounding you suddenly look up with terror

in their faces, and flee the street.
Actions in the original game Ignore the alarm of others and continue moving forward. (-21.5) Look up. (16.6)
Paraphrased actions (not original) Disregard the caution of others and keep pushing ahead. (-11.9) Turn up and

look. (17.5)
Positive actions (not original) Stay there. (2.8) Stay calmly. (2.0)
Negative actions (not original) Screw it. I’m going carefully. (-17.4) Yell at everyone. (-13.5)
Irrelevant actions (not original) Insert a coin. (-1.4) Throw a coin to the ground. (-3.6)

Table 4: Predicted Q-value examples

Eval metric Average reward
hidden dimension 20 50 100
PA DQN (L = 2) 0.2 (1.2) 2.6 (1.0) 3.6 (0.3)
MA DQN (L=2) 2.5 (1.3) 4.0 (0.9) 5.1 (1.1)
DRRN (L = 2) 7.3 (0.7) 8.3 (0.7) 10.5 (0.9)

Table 5: The final average rewards and stan-
dard deviations on paraphrased game “Machine of
Death”.

based on a limited action-side vocabulary size.
The overall action space is defined by the action-
argument product space. This pre-specified prod-
uct space is not feasible for the more complex text
strings in other forms of text-based games. Our
proposed DRRN, on the other hand, can handle
the more complex text strings, as well as parser-
based games. In preliminary experiments with the
parser-based game from (Narasimhan et al., 2015),
we find that the DRRN using a bag-of-words
(BOW) input achieves results on par with their
BOW DQN. The main advantage of the DRRN is
that it can also handle actions described with more
complex language.

The DRRN experiments described here lever-
age only a simple bag-of-words representa-
tion of phrases and sentences. As observed
in (Narasimhan et al., 2015), more complex
sentence-based models can give further improve-
ments. In preliminary experiments with “Machine
of Death”, we did not find LSTMs to give im-
proved performance, but we conjecture that they
would be useful in larger-scale tasks, or when the
word embeddings are initialized by training on
large data sets.

As mentioned earlier, other work has applied
deep reinforcement learning to a problem with a
continuous action space (Lillicrap et al., 2016). In
the DRRN, the action space is inherently discrete,
but we learn a continuous representation of it. As
indicated by the paraphrasing experiment, the con-
tinuous space representation seems to generalize

reasonably well.

5 Conclusion

In this paper we develop a deep reinforcement
relevance network, a novel DNN architecture for
handling actions described by natural language in
decision-making tasks such as text games. We
show that the DRRN converges faster and to a
better solution for Q-learning than alternative ar-
chitectures that do not use separate embeddings
for the state and action spaces. Future work in-
cludes: (i) adding an attention model to robustly
analyze which part of state/actions text correspond
to strategic planning, and (ii) applying the pro-
posed methods to more complex text games or
other tasks with actions defined through natural
language.

Acknowledgments

We thank Karthik Narasimhan and Tejas Kulka-
rni for providing instructions on setting up their
parser-based games.

References
E. Adams. 2014. Fundamentals of game design. Pear-

son Education.

S.R.K. Branavan, H. Chen, L. Zettlemoyer, and
R. Barzilay. 2009. Reinforcement learning for map-
ping instructions to actions. In Proc. of the Joint
Conference of the 47th Annual Meeting of the ACL
and the 4th IJCNLP, pages 82–90, August.

S.R.K. Branavan, D. Silver, and R. Barzilay. 2011.
Learning to win by reading manuals in a monte-carlo
framework. In Proc. of the Annual Meeting of the
Association for Computational Linguistics: Human
Language Technologies-Volume 1, pages 268–277.
Association for Computational Linguistics.

R. Collobert and J. Weston. 2008. A unified archi-
tecture for natural language processing: Deep neu-
ral networks with multitask learning. In Proc. of the
25th International Conference on Machine learning,
pages 160–167. ACM.

1629



G. E Dahl, D. Yu, L. Deng, and A. Acero. 2012.
Context-dependent pre-trained deep neural networks
for large-vocabulary speech recognition. Audio,
Speech, and Language Processing, IEEE Transac-
tions on, 20(1):30–42.

G. Hinton, L. Deng, D. Yu, G. E. Dahl, A. Mohamed,
N. Jaitly, A. Senior, V. Vanhoucke, P. Nguyen, T. N.
Sainath, and B. Kingsbury. 2012. Deep neural net-
works for acoustic modeling in speech recognition:
The shared views of four research groups. IEEE Sig-
nal Process. Mag., 29(6):82–97.

P-S. Huang, X. He, J. Gao, L. Deng, A. Acero, and
L. Heck. 2013. Learning deep structured semantic
models for web search using clickthrough data. In
Proc. of the ACM International Conference on In-
formation & Knowledge Management, pages 2333–
2338. ACM.

R. Kiros, Y. Zhu, R. R Salakhutdinov, R. Zemel, R. Ur-
tasun, A. Torralba, and S. Fidler. 2015. Skip-
thought vectors. In Advances in Neural Information
Processing Systems, pages 3276–3284.

A. Krizhevsky, I. Sutskever, and G. E Hinton. 2012.
Imagenet classification with deep convolutional neu-
ral networks. In Advances in neural information
processing systems, pages 1097–1105.

Q. V Le and T. Mikolov. 2014. Distributed representa-
tions of sentences and documents. In International
Conference on Machine Learning.

Y. LeCun, Y. Bengio, and G. Hinton. 2015. Deep
learning. Nature, 521(7553):436–444.

L. Li, J. D. Williams, and S. Balakrishnan. 2009. Re-
inforcement learning for spoken dialog management
using least-squares policy iteration and fast feature
selection. In Proceedings of the Tenth Annual Con-
ference of the International Speech Communication
Association (INTERSPEECH-09), page 24752478.

T. P Lillicrap, J. J Hunt, A. Pritzel, N. Heess, T. Erez,
Y. Tassa, D. Silver, and D. Wierstra. 2016. Contin-
uous control with deep reinforcement learning. In
International Conference on Learning Representa-
tions.

L-J. Lin. 1993. Reinforcement learning for robots us-
ing neural networks. Technical report, DTIC Docu-
ment.

M-T. Luong, H. Pham, and C. D. Manning. 2015.
Effective approaches to attention-based neural ma-
chine translation. In Proc. of the 2015 Conference
on Empirical Methods in Natural Language Pro-
cessing, pages 1412–1421, September.

V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves,
I. Antonoglou, D. Wierstra, and M. Riedmiller.
2013. Playing Atari with Deep Reinforcement
Learning. NIPS Deep Learning Workshop, Decem-
ber.

V. Mnih, K. Kavukcuoglu, D. Silver, A. A Rusu, J. Ve-
ness, M. G Bellemare, A. Graves, M. Riedmiller,
A. K Fidjeland, G. Ostrovski, et al. 2015. Human-
level control through deep reinforcement learning.
Nature, 518(7540):529–533.

K. Narasimhan, T. Kulkarni, and R. Barzilay. 2015.
Language understanding for text-based games using
deep reinforcement learning. In Proc. of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 1–11, September.

R. Nogueira and K. Cho. 2016. Webnav: A new large-
scale task for natural language based sequential de-
cision making. arXiv preprint arXiv:1602.02261.

K. Scheffler and S. Young. 2002. Automatic learning
of dialogue strategy using dialogue simulation and
reinforcement learning. In Proc. of the second In-
ternational Conference on Human Language Tech-
nology Research, pages 12–19.

I. Sutskever, O. Vinyals, and Q. V Le. 2014. Sequence
to sequence learning with neural networks. In Ad-
vances in Neural Information Processing Systems,
pages 3104–3112.

R. S Sutton and A. G Barto. 1998. Reinforcement
learning: An introduction, volume 1. MIT press
Cambridge.

G. Tesauro. 1995. Temporal difference learning
and td-gammon. Communications of the ACM,
38(3):58–68.

C. JCH Watkins and P. Dayan. 1992. Q-learning. Ma-
chine learning, 8(3-4):279–292.

S. Young, M. Gasic, B. Thomson, and J. D Williams.
2013. Pomdp-based statistical spoken dialog sys-
tems: A review. Proceedings of the IEEE,
101(5):1160–1179.

1630


