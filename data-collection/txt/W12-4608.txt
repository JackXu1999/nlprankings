



















































Incremental Neo-Davidsonian semantic construction for TAG


Proceedings of the 11th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+11), pages 64–72,
Paris, September 2012.

Incremental Neo-Davidsonian semantic construction for TAG

Asad Sayeed and Vera Demberg
Department of Computational Linguistics/MMCI Cluster of Excellence

Saarland University
66123 Saarbrücken, Saarland, Germany

{asayeed,vera}@coli.uni-saarland.de

Abstract

We propose a Neo-Davidsonian semantics
approach as a framework for constructing
a semantic interpretation simultaneously
with a strictly incremental syntactic deriva-
tion using the PLTAG formalism, which
supports full connectedness of all words un-
der a single node at each point in time.
This paper explains why Neo-Davidsonian
semantics is particularly suitable for in-
cremental semantic construction and out-
lines how the semantic construction process
works. We focus also on quantifier scope,
which turns out to be a particularly interest-
ing question in the context of incremental
TAG.

1 Introduction

Incremental processing formalisms have increas-
ing importance due to the growing ubiquity of
spoken dialogue systems that require understand-
ing and generation in real-time using rich, robust
semantics. Dialogue systems benefit from incre-
mental processing in terms of shorter response
time to the user’s requests when the dialogue sys-
tem can start interpreting and serving the request
(e.g. by consulting databases, doing reference res-
olution, backchannelling or starting to generate
an answer (Aist et al., 2007; Schuler et al., 2009;
Skantze and Schlangen, 2009)) before the request
is fully stated. Another use of formalisms that
support strict incrementality is psycholinguistic
modelling: As there is a substantial amount of ev-
idence that human sentence processing is highly
incremental, computational models of human sen-
tence processing should be incremental to the
same degree. Such models can then be used to

calculate measures of human sentence process-
ing difficulty, such as surprisal, which have been
demonstrated to correspond to reading times (e.g.,
Levy, 2008; Mitchell et al., 2010).

Two strictly incremental versions of tree-
adjoining grammar (TAG; Joshi et al., 1975)
which have been proposed in recent years are DV-
TAG (Mazzei et al., 2007) and PLTAG (Demberg-
Winterfors, 2010). Incremental syntax is how-
ever only of limited interest without a correspond-
ing mechanism for calculating the incremental
semantic interpretation. And for that semantic
model to be practically useful in psycholinguis-
tic modelling or NLP applications such as speech
recognition or dialogue systems, we believe that
the semantic representation should ideally be sim-
ple, flat and usefully underspecified, in order to be
used in the future in a context of compositional
distributional semantics. We propose a frame-
work in which semantic expressions are built syn-
chronously with the syntactic tree. Simple rules
are used to integrate an elementary tree’s seman-
tic expression with the semantic expression of the
prefix tree at each stage. The semantic contribu-
tion of the new elementary tree is thereby added
to the semantic output expression in a manner that
reflects closely the order in which semantic ma-
terial has arrived. The necessary semantic anno-
tation of elementary trees can be obtained from
subcategorization frame information (PropBank,
FrameNet). We use a Neo-Davidsonian event-
based semantics with minimal recursion.

Integrating incremental syntactic analysis with
a framework of incremental semantic interpreta-
tion will allow one to model processing phenom-
ena such as the decreased processing difficulty
(1-b) (after Steedman, 2000) in comparison to

64



(1-a) by downranking the main verb analysis of
sent when the subject (like flowers) is unlikely to
fill the sender role.

(1) a. The doctor sent for the patient arrived.
b. The flowers sent for the patient arrived.

Incrementally generating the semantic interpreta-
tion requires the underspecification of the output
semantics given the syntax, such as underspeci-
fying the number of arguments of a verb or (to
a greater extent than for non-incremental devia-
tions, as we will discuss below) the scope of quan-
tifiers.

This paper sets forth the initial proposal for
this semantic formalism in terms of underlying
desiderata, principles, and basic use cases. It pro-
vides one example derivation, and it outlines a
way of dealing with the question of scope ambi-
guities, an issue which affects a number of aspects
of the theoretical plausibility of a semantic for-
malism.

2 PLTAG Syntax

PLTAG (Demberg-Winterfors, 2010; Demberg
and Keller, 2009, 2008) is a strictly incremental
version of TAG. In order to achieve the strict in-
crementality (i.e., all words are always connected
under a single root), the formalism uses predic-
tion trees, which are usually not lexicalized. Each
node of a prediction tree carries markers (see in-
dices k and k in Figure 1(c)) which indicate that
the predicted node has to be verified by a canon-
ical (= non-predictive) TAG tree with matching
structure at a later point in the derivation, in or-
der to yield a valid derived tree.

This verification operation applies when an el-
ementary tree arrives that structurally matches
nodes in the prefix tree which are marked with
the prediction markers. A structural match is
thereby defined as the verification tree containing
all nodes with identical index (i.e. all nodes that
were contributed by a specific prediction tree).
Additionally, the verification tree can have further
nodes to the right of the spine (= the path from the
root to the anchor). The prediction markers are re-
moved, and the lexical item in the elementary tree
is placed in the head of the prediction tree as in
Figure 4, and any additional nodes of the verifica-
tion tree which were not part of the prediction tree
are inserted into the prefix tree. For more details

see Demberg-Winterfors (2010).

3 Semantic PLTAG

Consider the following ways of stating a com-
mand to a hypothetical restaurant reservation sys-
tem:

(2) a. Send every restaurant a reservation request.
b. Send a reservation request to every restau-

rant.

A system that derives syntax and semantics in-
crementally and simultaneously can partially dis-
ambiguate the ambiguity between the two ele-
mentary trees of “send” (see Figure 1(a)) by tak-
ing into account that restaurants are better recip-
ients than reservation requests, while reservation
requests are more typically sent. The following
sections outline how we decorate the syntactic
PLTAG trees with semantic annotations, how se-
mantic expressions are composed, and how we
deal with quantifier scope.

4 Neo-Davidsonian semantics

Neo-Davidsonian semantics (Parsons, 1990) is a
form of first-order logic that uses existentially-
bound event variables (∃e) to connect verb pred-
icates and their subcategorized arguments and
separates predicate arguments into their own,
separate event-modifying predicates connected
through conjunctions. This permits a flexible
means to underspecify function composition and
argument structure (Hunter, 2009) by greatly lim-
iting recursion (Example (3-a)) in semantic ex-
pressions.

(3) a. Happily(Eating(Candy))
b. ∃x1∃eCandy(x1)&Eaten(e, x1)&

Eating(e)&Happily(e)

The Neo-Davidsonian approach has been imple-
mented in formalisms such as Robust Minimal
Recursion Semantics (RMRS; Copestake, 2007).
We use a variant exemplified in (3-b).

Neo-Davidsonian semantics has some advan-
tages in the case of a strictly incremental parsing
process: in incremental PLTAG parsing, the pre-
diction trees do not always specify the full sub-
categorization frame of a predicate. For exam-
ple, when processing the words Peter often, the
NP tree for Peter and the auxiliary tree for often
(see Fig. 1(b)) will be connected with a prediction

65



S
{∃e}

� VP

V

send
{Send(e)}

NP↓
{Qx1Recipient(e, x1)}

NP↓
{Qx2Sent(e, x2)}

S
{∃e}

� VP

V

send
{Send(e)}

NP↓
{Qx2Sent(e, x2)}

PPk2
{Qx1Recipient(e, x1)}

TOk2k2

tok2k2
(a) Ditransitive alternation of imperative send.

DT

every
{∀x}

DT

a
{∃x}

NP
{Qx}

DT↓ NN

restaurant
{Restaurant(x)}

NP
{Qx}

DT↓ NN

request
{Request(x)}

NN

NN

reservation
{Reservation(x)}

NN*

PP

TO

to

NP↓
{Qx (e, x)}

VP

RB

often
{often(e)}

VP*

(b) Canonical elementary trees for nominals, determiners, to-PP, adverbial.
NPk
{Qx}

DT↓k NNkk
{ (x)}

Sk
{∃e}

NP↓k VPkk

(c) Prediction trees

Figure 1: Example Lexicon

tree, expressing that a verb phrase is expected and
that the structure is going to root in S, see right
hand tree in Fig. 1(c). It does however not spec-
ify the subcategorization frame of the verb that is
going to be the head of the predicted verb phrase.
Neo-Davidsonian semantics allows us to keep the
same level of underspecification in the semantics,
such that the verb-phrase prediction tree only in-
troduces the event variable ∃e, which is then avail-
able to be unified with the unbound variable of of-
ten. Furthermore, the breaking up of n-ary pred-
icates into an event predicate and a binary rela-
tion for each thematic role in Neo-Davidsonian
semantics allows us to calculate the semantic con-
tribution of a verb’s argument before having seen
all arguments.

The minimally-recursive nature of the formal-
ism also permits the order of predicates in the
formalism to reflect approximately the order in
which their corresponding syntactic fragments
were incorporated into the structure. In our
PLTAG-based formalism, we tie each elemen-
tary tree to a neo-Davidsonian expression frag-
ment which will be appended to the end of a se-
mantic structure that grows along with the parse
tree. This incorporates a notion of recency di-
rectly into our semantic expression construction, a
characteristic relevant to semantic enhancements
of PLTAG’s syntactic prediction component.

This enables the produced expressions to be
used directly in statistical prediction techniques
where order may matter, including composi-
tional distributional semantics (Mitchell and Lap-
ata, 2010) or HMM-style sequence learning tech-
niques. Its trade-off is that the semantic expres-
sions are not always guaranteed to be immediately
well-formed, particularly in the order of scopes.
However, in the later sections we discuss ways
to identify structure that needs to be rearranged,
ways that can be applied at every incremental
step.

4.1 Lexical construction and derivation

These are some relevant aspects of the lexicon’s
construction:

Verb trees are annotated at the root with an
existentially-quantified event variable. The head
node contains the verb’s own predicate, and
the nodes representing arguments have argument
predicates with entity variables. The argument
predicates correspond to thematic roles.

The semantic expressions associated with ele-
mentary trees consist of four types of variables,
entity variables, written as xn, first-order predi-
cate variables, written as , quantifier variables,
written as Qn, and event variables, written as en.

variables are associated with the predictive com-
ponent of PLTAG-based parsing and achieve their

66



Sentence: Send ‖ every restaurant a reservation request
S

{∃e}

� VP

V

send
{Send(e)}

NPk
{Qx1Recipient(e, x1)}

DT↓k NNkk
{ (x1)}

NP↓
{Qx2Sent(e, x2)}

S
{∃e}

� VP

V

send
{Send(e)}

NPk
{Qx2Sent(e, x2)}

DT↓k NNkk
{ (x2)}

PPk2
{Qx1Recipient(e, x1)}

TOk2k2

tok2k2

Semantics: ∃eQx1Recipient(e, x1)& (x1)&Qx2Sent(e, x2) Semantics: ∃eQx2Sent(e, x2)& (x2)&Qx2Recipient(e, x1)
&Send(e) &Send(e)

Figure 2: Ambiguous derivation when ditransitive Send is received.

values whenever a verification occurs that unifies
a prediction tree with an elementary tree. Qn vari-
ables are given concrete quantifier values when-
ever an elementary tree with a quantifier is sub-
stituted into a noun elementary tree that has the
Qn variable. en variables represent events and
their connections to event participants through
role predicates.

Determiners represent their own appropriate
quantifier (e.g. ∀x). NP-rooted elementary trees
for nouns have an unspecified Q quantifier at the
root and a semantic predicate corresponding to
the noun. Nominal adjuncts (such as the example
reservation auxiliary tree) contain a correspond-
ing predicate over an unbound entity variable.

4.2 Composition rules

We describe our procedure for incremental se-
mantic parsing in terms of triggered procedures
for the incorporation of the semantic expressions
residing on nodes of the most recently attached
elementary tree. We first describe some common
characteristics of the composition procedure, and
then we describe how some frequent types of el-
ementary trees are semantically processed on ar-
rival. One aspect of our approach is that most of
the “work” in building the semantic expression is
defined in terms of the derived tree, in contrast
to other TAG semantics approaches that use the
derivation tree. We found this the simplest way to
align the verification step’s role in giving values to
prediction trees and the valuation of variables in
the semantic expressions. Expressions and vari-
ables in the derived tree are indexed to their cor-
responding forms in the semantic expression, so
that they grow in parallel.

The semantic component proceeds through

rules for unification and predicate emission. Se-
mantic predicates are emitted as conjuncts from
left to right, normally revising previous seman-
tic structure based on unification events during
PLTAG operations. Whenever an elementary tree
is either substituted, adjoined, or predicted, the se-
mantic expressions on that tree’s nodes are emit-
ted as conjuncts, once all unifications have been
resolved.1

When an unbound variable joins the structure,
it is unified with the nearest compatible variable
the shortest distance above it in the structure. (Un-
bound variables generally appear in elementary
trees representing adjunct structures like adjec-
tives.) For the xn entity variables, when they are
unified, they will be assigned the same variable
subscript. For Q quantifier variables, they will
search for the nearest quantifier or quantifier vari-
able, by the same standard of nearness. variables
are predictive and only bound during verification.

By default, all predicates are joined with con-
junction operators, except in the case where a ∀xn
is called for. Then a → conditional operator must
be inserted when the universally-quantified NP is
complete, with all adjuncts in the restrictor of the
quantifier. We describe later a procedure to iden-
tify NP adjuncts directly from the semantic ex-
pression in order to insert the conditional operator
as needed.

4.2.1 Example derivation

Figures 2-6 represent an example derivation
based on the sentence Send every restaurant a
reservation request using the lexicon in figure 1.

1We use the word “unification” in the sense of establish-
ing strict structural identity and variable coindexation as in
the Prolog programming language.

67



Sentence: Send every ‖ restaurant a reservation request
S

{∃e}

� VP

V

send
{Send(e)}

NPk
{∀x1Recipient(e, x1)}

DTk

every
{∀x1}

NNkk
{ (x1)}

NP↓
{Qx2Sent(e, x2)}

S
{∃e}

� VP

V

send
{Send(e)}

NPk
{∀x2Sent(e, x2)}

DTk

every
{∀x2}

NNkk
{ (x2)}

PPk2
{Qx1Recipient(e, x1)}

TOk2k2

tok2k2

Semantics: ∃e∀x1Recipient(e, x1)& (x1)&Qx2Sent(e, x2) Semantics: ∃e∀x2Sent(e, x2)& (x2)&Qx2Recipient(e, x1)
&Send(e) &Send(e)

Figure 3: Derivation remains ambiguous after every is received.

Sentence: Send every restaurant ‖ a reservation
request

S
{∃e}

� VP

V

send
{Send(e)}

NP
{∀x1Recipient(e, x1)}

DT

every
{∀x1}

NN

restaurant
{Restaurant(x1)}

NPk
{Qx2Sent(e, x2)}

DT↓k NNkk
{ (x2)}

Semantics:∃e∀x1Recipient(e, x1)&Restaurant(x1)
&Qx2Sent(e, x2)&Send(e)& (x2)

Figure 4: The prediction NP tree is verified through
unification with the tree for restaurant.

In figure 2, the two possible trees for send are in-
troduced from the lexicon, and the semantic ex-
pressions associated with the nodes are emitted.

In figure 3, the derivation remains ambiguous
after every is received. However, the quantifier ∀
unifies with the quantifier variable represented as
Q in both the trees and in the resulting semantics.

Next, the prediction NP tree is verified through
unification with the tree for restaurant (figure 4).
The empty predicate is also filled. Semantic se-
lectional constraints abolish the second parallel
derivation. The derivation is also now ready for
the next NP prediction tree.

Prediction of a determiner and verification with
a proceeds in analogy to the first NP. We then ad-
join the noun reservation (figure 5). For brevity,

we omit the ambiguity created by the possible in-
terpretation of reservation as an argument; we are
illustrating the effect of adjunction. The variable
in Reservation(x) unifies with the nearest quan-
tified variable along the spine of the tree; nomi-
nal adjuncts generally do not bring entity variable
bindings with them. The predicate is literally ap-
pended to the semantic expression as another con-
junct.

Finally (figure 6), the prediction tree is verified
by the arrival of request, which fills out the last

predicate variable. We demonstrate in this step
an adjustment of the semantics to a form in which
the event is quantified in the lowest position and
the restrictor of ∀ is correctly placed before an in-
serted →. We outline how to make this work in
the next section.

4.3 Adjuncts and arguments
It is sometimes important to identify the parts
of the output semantic expression that pertain
to adjuncts, especially when interpreting the po-
sitions of variable scope bindings and satisfy-
ing the semantic conditions thereon. The or-
der of strict incremental appearance of predi-
cates and variables may be subject to further in-
terpretive conditions that require limited reorder-
ing of sub-expressions, depending on the appli-
cation. For example, Champollion (2011) notes
that existentially-quantified events should be in-
terpreted in the lowest possible position relative
to the bindings of the event’s arguments. This re-
quires some ability to distinguish between argu-
ment and adjunct predicates. Similarly, in order
to handle scope ambiguities soundly, the system

68



must also have the capacity to distinguish between
the restrictor and the nuclear scope of a quantifier.

There are multiple ways to do this, including
from the structure of the derived tree and the or-
der in which the derivation proceeded, but we ar-
gue that most of the work can be done within the
semantic expression itself. Most trivially, nominal
adjuncts can be identified by the lack of an event
argument to their predicates. Relative clause ad-
juncts will contain their own event variables, but
will not refer to the exterior event directly. As an
illustration:

(4) a. Some flower that some bride holds wilts.
b. ∃x1Flower(x1)&[∃x2Bride(x2)

&∃e2Hold(e2)&Holder(e2, x2)
&Held(e2, x1)]&∃e1Wilt(e1)&Wilter(e1, x1)

Since e1 is the root event, we know that the rela-
tive clause “that the bride holds” does not directly
refer to it in its semantic expression and is an ad-
junct only of “the flower”. We can even deduce
from the expression that “the flower” is the host
NP for the relative clause, because “the bride” is
not directly connected to the root event as an ar-
gument. We can therefore correctly insert the →
if the matrix subject had a universal quantifier.

(5) a. Every flower that some bride holds wilts.
b. ∀x1Flower(x1)&[∃x2Bride(x2)

&∃e2Hold(e2)&Holder(e2, x2)&Held(e2, x1)]
→ ∃e1Wilt(e1)&Wilter(e1, x1)

A similar procedure can be applied to the distinc-
tion between argument clauses that appear after
verbs like “say” and adjunct clauses heralded by
“because.” Argument clauses are heralded by an
event variable that itself becomes an argument of
a role predicate of the matrix argument, as here:

(6) a. Some professor says some student failed.
b. ∃x1Professor(x1)&∃e1Say(e1)

&Speaker(e1, x1)&[∃x2Student(x2)
&∃e2Spoken(e1, e2)&Fail(e2)&Failer(e2, x2)]

In the case of an adjunct clause introduced with
“because”, there is no role predicate connecting
the subordinate event to the matrix event, which
is practically the definition of an adjunct.

4.4 Scope and Underspecification

Our example derivation in Figures 2 to 6 shows
how a syntactic tree and semantic interpretation

Sentence: Send every restaurant a reservation ‖
request S

. . . NPk
{∃x2Sent(e, x2)}

DTk

a
{∃x2}

NNk

NN

reservation
{Reservation(x2)}

NNk
{ (x2)}

Semantics:∃e∀x1Recipient(e, x1)&Restaurant(x1)
&∃x2Sent(e, x2)&Send(e)& (x2)&Reservation(x2)

Figure 5: Prediction of a determiner and verification
with a proceeds in analogy to the first NP. We then
adjoin the noun reservation.

Sentence: Send every restaurant a reservation re-
quest ‖ S

. . . NP
{∃x2Sent(e, x2)}

DT

a
{∃x2}

NN

NN

reservation
{Reservation(x2)}

NN
{Request(x2)}

Semantics:∀x1Restaurant(x1) → ∃x2Request(x2)
&Reservation(x2)&∃eRecipient(e, x1)
Sent(e, x2)&Send(e)

Figure 6: Finally, the prediction tree is verified by the
arrival of request, which fills out the last predicate
variable.

can be constructed for the sentences in (2-a).
However, it only derives one possible reading for
the sentence ∃ > ∀, i.e. there exists a single reser-
vation request, and that it is to be sent indiscrimi-
nately to all restaurants. This reading reflects the
linear order that quantifiers occurred in. It misses
the other interpretation ∀ > ∃ (which was likely
intended by the user). When sentences are derived
incrementally, we cannot choose in the derivation
to first substitute the second NP in order to get the
other reading. Therefore, we need to systemati-
cally use underspecification to get both readings.
Note that this problem also exists to a certain ex-
tent in standard LTAG (Joshi et al., 2007; Barker,
2010).

However, not all quantifier orderings are per-
missible given the syntax. Joshi et al. (2007) and
Romero and Kallmeyer (2005) present an exam-
ple of what can be seen as a challenge for current
TAG-based and movementless approaches:

69



(7) Two politicians spied on some person from
every city.

They describe a situation where syntactic con-
straints prevent some readings out of all possi-
ble permutations of quantifiers. In order to for-
bid their hypothetical widest matrix scope read-
ing of every city, we use dominance constraints
(Koller et al., 2003) to implement restrictions
based on the argument-adjunct distinction in pre-
venting quantifier-raising.

Ruys and Winter (2010) describe two major
approaches to developing a formal treatment of
scope ambiguities. One of these approaches is
the covert movement approach that comes from
the Chomskyan generative tradition, sometimes
known as Quantifier Raising (QR). In this ap-
proach, alternative scope readings are found by
applying highly constrained operators over an in-
termediate representation. The other approach in-
volves directly embedding the mechanism for the
observed scope readings in the logical representa-
tion of the semantics, typically assisted by type-
raising operators.

The QR approach stems from the observation
that there appears to be a close relationship be-
tween wh-movement islands and the restrictions
on scope readings, with wh-islands partially ex-
hibited through restrictions on overt movement as
well as covert movement. In other words, where
an inverse scope reading is impossible, it is the
case in languages that are not wh in situ that the
overt wh-movement is also generally difficult or
impossible.

This insight is difficult to capture in highly
lexicalized, movement-less formalisms. Since
wh-movement is overt, it is possible to lexical-
ize these types of structures and analyse them
in a movement-less way, mostly from the sur-
face structure. Quantifier scope ambiguity, how-
ever, “lives after the syntax” in some sense: fur-
ther stipulations must be made in order to enable
readings that do not come directly from the sur-
face order. Multi-component TAG (MCTAG) for-
malisms achieve this by permitting TAG struc-
tures with ambiguous syntactic attachments for
quantifiers; then it is possible to achieve scope
ambiguity through the underspecification of the
position of the quantifiers in the semantics (Joshi
et al., 2007).

If, on the other hand, we need an explicit

representation of the quantifier positions in syn-
tax and semantics—for example, at every step in
statistically-guided predictive parsing—then we
need also to make the operations that convert se-
mantic expressions from surface to inverse scope
readings a little more explicit. Champollion
(2011) presents a means of enabling quantifier
raising in a Neo-Davidsonian semantic formalism
without movement by optionally applying a type-
shifting operator to quantified items. The change
in type is propagated up the syntactic tree via
lambda-calculus operations in order to provide an
expression with the intended scope.

However, the potential bottom-up recalculation
of the entire semantic expression is also not par-
ticularly friendly to a parsing technique that is
striving to be meaningfully incremental and pre-
dictive. Instead, we propose to bring back, in a
very limited fashion, a movement-based analysis
of QR.

For the object noun phrase in example (7), both
scopal readings are possible: there was a sin-
gle person whose origin at some point has been
every city (∃ > ∀), or for every city, there is
a person from that city (∀ < ∃)—they are in-
terchangeable. For the whole sentence, one of
several available readings is that for every city,
there is a person whom two politicians spied on
(∀ > ∃ < 2). However, a reading that is not avail-
able is *∀ > 2 > ∃—that every city has its own
pair of politicians who are spying on some person
in that city.2

2We can find a parallel for this distinction in wh-
movement islands. Consider the following question, anal-
ogous to the *∀ > 2 > ∃:

(i) *From which cities did two politicians spy on some per-
son? (with the interpretation that “from which cities”
semantically applies to “some person”).

Adjunct phrases are islands for wh-movement, leading to the
ungrammaticality of the reading. However, it is possible to
ask a highly emphatic multiple question:

(ii) Which people from which cities did two politicians spy
on?

It is possible to bring the adjunct wh along with the argu-
ment wh in this case of overt movement. In fact, many
languages (Boškovič, 2002) permit multiple wh-movement,
constrained only by island restrictions such as adjunct is-
lands. Multiple wh-movement by pied-piping is permitted in
English when the lower question is a syntactic adjunct (Re-
ich, 2002).

Furthermore, Romero and Kallmeyer (2005) present an

70



Focusing specifically on relations between
quantifiers, we can define a representation and a
set of constraints that limit the possible readings
by looking at the relationships between variables
in our semantic expression formalism. We con-
struct a minimal spanning tree of variables con-
nected to the event variable of the predicate in the
main clause, which is then the root of the tree.
Each edge in the variable tree, which is roughly
analogous to a very stripped-down TAG deriva-
tion tree, represents a pair of arguments present in
a binary predicate in the expression; parent-child
relationships between event variables and entity
variables are only permitted through role predi-
cates to prevent the events of adjunct clauses from
participating in scope relations. Each xn variable
would be annotated in the tree by its associated
quantifier. For example, consider the following
interpretation of example (7) in our formalism, af-
ter the lowering of the event scope and insertion
of →:

(8) 2x1Politician(x1)&∃x2Person(x2)&∀x3
City(x3)&From(x2, x3) →
∃eSpyer(e, x1)&SpiedUpon(e, x2)&Spy(e)

The variable tree for this would be:

(9) e

2x1∃x2

∀x3
We interpret surface scope order left to right and
top down. Then we can express the interchange-
ability of ∃ and ∀ by declaring that variables in a
additional non-surface reading, ∃ > ∀, 2, where ∀ is in the
restrictor of ∃ (not surprising due to the adjunct status of
“from every city”). While the requirement for pied-piping
in English requires both wh-phrases to be fronted, this is a
restriction that belongs to the syntax. Many analyses show
that pied-piping restrictions do not necessarily hold at the
level of logical form (von Stechow, 1996; Reich, 2002), even
if island constraints do. Consequently, the additional valid
reading is not ruled out by a QR analysis based in covert
movement.

Given this parallelism, one could reasonably be tempted
to advocate for the re-adoption of movement-based analy-
ses in movementless grammatical formalisms, but at least
in the case of TAG, actually doing so would break many of
the properties of the formalism. Consequently, we only pro-
pose a form of movement-equivalent operation that focuses
on representing ambiguities in semantic structure that are not
easily accommodated in a monotonic, movementless incre-
mental parsing system.

parent-child relationship can be interpreted inter-
changeably. Another important stipulation over
variable trees is that only the immediate children
of an event variable can change their relation-
ship to the other descendants of the event variable,
which would rule out ∀ immediately taking scope
over 2 and ∃. This represents adjunct island re-
strictions on covert movement. The ∀ > ∃ >
2 reading can be licensed by actually allowing
movement to occur in a manner somewhat analo-
gous to the move operator in Minimalist accounts
with no traces.

(10) e

∃x2 e

2x1∀x3

⇒ e

∀x3 e

∃x2 e

2x1

The last step is permissible because ∀x3 is an im-
mediate child of e in the previous step. Extend-
ing this analysis to, e.g., forbid QR from caus-
ing subjacency violations can be accomplished in
approximately the following way: no entity vari-
able can rise above its own nearest ancestor event
variable except in the circumstance that the event
variable is itself a child of another event vari-
able (equivalent to successive-cyclic movement).
These scope order changes can be reflected in the
semantics, if necessary, by explicitly reordering
the affected variable bindings in the expression.
We leave a fuller exploration of the details of this
proposal to future work.

5 Concluding remarks

We have proposed here a semantic extension to
PLTAG, a syntactic formalism intended to en-
able robust, psychologically-plausible incremen-
tal parsing. This presented us the challenge of
reconciling potentially conflicting goals, such as
strict incrementality, semantic well-formedness,
psycholinguistic plausiblity, and engineering ap-
plicability. Our solution consists of a variant of
neo-Davidsonian semantics adjusted to support a
close synchronisation between the composition of
output semantic expressions and PLTAG opera-
tions such as the prediction/verification mecha-
nism.

We illustrated the formalism with an example
parse, and we described a way in which our ap-

71



proach can be adapted to handle ambiguous scope
phenomena that constitute a challenge for robust
semantic representation. Potential extensions of
this work include semantic PLTAG lexicon ex-
traction from treebanks and further formalisation
of our variable tree representation of scope phe-
nomena.

References

Aist, G., Allen, J., Campana, E., Gallo, C.,
Stoness, S., Swift, M., and Tanenhaus, M.
(2007). Incremental dialogue system faster
than and preferred to its nonincremental coun-
terpart. pages 761–766.

Barker, C. (2010). Cosubstitution, derivational lo-
cality, and quantifier scope.

Boškovič, Ž. (2002). On multiple wh-fronting.
Linguistic inquiry, 33:351–383.

Champollion, L. (2011). Quantification and nega-
tion in event semantics. The Baltic interna-
tional yearbook of cognition, logic, and com-
munication, 6(0).

Copestake, A. (2007). Semantic composition with
(robust) minimal recursion semantics. In Proc.
of the Workshop on Deep Linguistic Process-
ing.

Demberg, V. and Keller, F. (2008). A psy-
cholinguistically motivated version of TAG. In
Proc. of the 9th International Workshop on Tree
Adjoining Grammars and Related Formalisms
(TAG+9), Tübingen, Germany.

Demberg, V. and Keller, F. (2009). A computa-
tional model of prediction in human parsing:
Unifying locality and surprisal effects.

Demberg-Winterfors, V. (2010). A broad-
coverage model of prediction in human sen-
tence processing. PhD thesis, School of Infor-
matics, The University of Edinburgh.

Hunter, T. (2009). Deriving syntactic properties of
arguments and adjuncts from neo-davidsonian
semantics. In Proc. of MOL 2009, Los Angeles,
CA, USA.

Joshi, A., Kallmeyer, L., and Romero, M. (2007).
Flexible composition in ltag: quantifier scope
and inverse linking. Computing meaning, pages
233–256.

Joshi, A., Levy, L., and Takahashi, M. (1975).
Tree adjunct grammars. Journal of the Com-
puter and System Sciences, 10.

Koller, A., Niehren, J., and Thater, S. (2003).
Bridging the gap between underspecification
formalisms: Hole semantics as dominance con-
straints. In Proc. of EACL 2003, pages 367–
374.

Levy, R. (2008). Expectation-based syntactic
comprehension. Cognition, 106(3):1126–1177.

Mazzei, A., Lombardo, V., and Sturt, P. (2007).
Dynamic tag and lexical dependencies. Re-
search on Language and Computation, Foun-
dations of Natural Language Grammar, pages
309–332.

Mitchell, J. and Lapata, M. (2010). Composition
in distributional models of semantics. Cogni-
tive Science, 34(8):1388–1429.

Mitchell, J., Lapata, M., Demberg, V., and Keller,
F. (2010). Syntactic and semantic factors in
processing difficulty: An integrated measure.
In Proc. of the 48th Annual Meeting of the As-
sociation for Computational Linguistics, pages
196–206, Uppsala, Sweden.

Parsons, T. (1990). Events in the semantics of En-
glish. MIT Press, Cambridge, MA, USA.

Reich, I. (2002). Pied piping and the syntax and
semantics of wh-phrases. In Mauck, S. and
Mittelstaedt, J., editors, Georgetown University
working papers in theoretical linguistics, vol-
ume 2, pages 263–286.

Romero, M. and Kallmeyer, L. (2005). Scope and
situation binding in ltag using semantic unifica-
tion. In Proc. of the 7th international workshop
on computational semantics (IWCS).

Ruys, E. and Winter, Y. (2010). Scope ambigu-
ities in formal syntax and semantics. In Gab-
bay, D. and Guenthner, F., editors, Handbook
of Philosophical Logic, volume 16, pages 159–
225.

Schuler, W., Wu, S., and Schwartz, L. (2009). A
framework for fast incremental interpretation
during speech decoding. Computational Lin-
guistics, 35(3):313–343.

Skantze, G. and Schlangen, D. (2009). Incremen-
tal dialogue processing in a micro-domain. In
Proc. of the 12th Conference of the European
Chapter of the Association for Computational
Linguistics, pages 745–753.

Steedman, M. (2000). The syntactic process. MIT
Press.

von Stechow, A. (1996). Against LF pied-piping.
Natural Language Semantics, 4(1):57–110.

72


