



















































Joint Extraction of Events and Entities within a Document Context


Proceedings of NAACL-HLT 2016, pages 289–299,
San Diego, California, June 12-17, 2016. c©2016 Association for Computational Linguistics

Joint Extraction of Events and Entities within a Document Context

Bishan Yang
Carnegie Mellon University

5000 Forbes Avenue
Pittsburgh, PA, 15213

bishan@cs.cmu.edu

Tom Mitchell
Carnegie Mellon University

5000 Forbes Avenue
Pittsburgh, PA, 15213

tom.mitchell@cs.cmu.edu

Abstract

Events and entities are closely related; entities
are often actors or participants in events and
events without entities are uncommon. The
interpretation of events and entities is highly
contextually dependent. Existing work in in-
formation extraction typically models events
separately from entities, and performs infer-
ence at the sentence level, ignoring the rest
of the document. In this paper, we propose
a novel approach that models the dependen-
cies among variables of events, entities, and
their relations, and performs joint inference
of these variables across a document. The
goal is to enable access to document-level
contextual information and facilitate context-
aware predictions. We demonstrate that our
approach substantially outperforms the state-
of-the-art methods for event extraction as well
as a strong baseline for entity extraction.

1 Introduction

Events are things that happen or occur; they in-
volve entities (people, objects, etc.) who perform
or are affected by the events and spatio-temporal as-
pects of the world. Understanding events and their
descriptions in text is necessary for any generally-
applicable machine reading systems. It is also essen-
tial in facilitating practical applications such as news
summarization, information retrieval, and knowl-
edge base construction.

The interpretation of event descriptions is highly
contextually dependent. To make correct predic-
tions, a model needs to account for mentions of

events and entities together with the discourse con-
text. Consider, for example, the following excerpt
from a news report:

“On Thursday, there was a massive
U.S. aerial bombardment in which more
than 300 Tomahawk cruise missiles rained
down on Baghdad. Earlier Saturday,
Baghdad was again targeted. ...”

The excerpt describes two U.S. attacks on Baghdad.
The two event anchors (triggers) are boldfaced and
the mentions of entities and spatio-temporal infor-
mation are italicized. The first event anchor “aerial
bombardment” along with its surrounding entity
mentions — “U.S.”, “Tomahawk cruise missiles”,
and “Baghdad”, describe an attack from the U.S. on
Baghdad with Tomahawk cruise missiles being the
weapon. The second sentence on its own contains
little event-related information, but together with the
context of the previous sentence, it indicates another
U.S. attack on Baghdad.

State-of-the-art event extraction systems have dif-
ficulties inferring such information due to two main
reasons. First, they extract events and entities in
separate stages: entities such as people, organiza-
tion, and locations are first extracted by a named
entity tagger, and then these extracted entities are
used as inputs for extracting events and their argu-
ments (Li et al., 2013). This often causes errors to
propagate. In the above example, if the entity tagger
mistakenly identifies “Baghdad” as a person, then
the event extractor will fail to extract “Baghdad” as
the place where the attack happened. In fact, previ-
ous work (Li et al., 2013) observes that using previ-
ously extracted entities in event extraction results in

289



a substantial decrease in performance compared to
using gold-standard entity information.

Second, most existing work extracts events in-
dependently from each individual sentence, ignor-
ing the rest of the document (Li et al., 2013; Judea
and Strube, 2015; Nguyen and Grishman, 2015).
Very few attempts have been made to incorporate
document context for event extraction. Ji and Gr-
ishman (2008) model the information flow in two
stages: the first stage trains classifiers for event
triggers and arguments within each sentence; the
second stage applies heuristic rules to adjust the
classifiers’ outputs to satisfy document-wide (or
document-cluster-wide) consistency. Liao and Gr-
ishman (2010) further improved the rule-based in-
ference by training additional classifiers for event
triggers and arguments using document-level infor-
mation. Both approaches only propagate the highly
confident predictions from the first stage to the sec-
ond stage. To the best of our knowledge, there is no
unified model that jointly extracts events from sen-
tences across the whole document.

In this paper, we propose a novel approach that
simultaneously extracts events and entities within a
document context.1 We first decompose the learn-
ing problem into three tractable subproblems: (1)
learning the dependencies between a single event
and all of its potential arguments, (2) learning the co-
occurrence relations between events across the doc-
ument, and (3) learning for entity extraction. Then
we combine the learned models for these subprob-
lems into a joint optimization framework that simul-
taneously extracts events, semantic roles, and enti-
ties in a document. In summary, our main contribu-
tions are:

1. We propose a structured model for learning
within-event structures that can effectively cap-
ture the dependencies between an event and its
arguments, and between the semantic roles and
entity types for the arguments.

2. We introduce a joint inference framework that
combines probabilistic models of within-event
structures, event-event relations, and entity ex-

1The code for our system is available
at https://github.com/bishanyang/
EventEntityExtractor.

traction for joint extraction of the set of entities
and events over the whole document.

3. We conduct extensive experiments on the Au-
tomatic Content Extraction (ACE) corpus, and
show that our approach significantly outper-
forms the state-of-the-art methods for event ex-
traction and a strong baseline for entity extrac-
tion.

2 Task Definition

We adopt the ACE definition for entities ((LDC),
2005a) and events ((LDC), 2005b):

• Entity mention: An entity is an object or set
of objects in the world. An entity mention is
a reference to an entity in the form of a noun
phrase or a pronoun.

• Event trigger: the word or phrase that clearly
expresses its occurrence. Event triggers can be
verbs, nouns, and occasionally adjectives like
“dead” or “bankrupt”.

• Event argument: event arguments are entities
that fill specific roles in the event. They mainly
include participants (i.e., the entities that are in-
volved in the event) and general event attributes
such as place and time, and some event-type-
specific attributes that have certain values (e.g.,
JOB-TITLE, CRIME).

We are interested in extracting entity mentions,
event triggers, and event arguments. We consider
ACE entity types PER, ORG, GPE, LOC, FAC,
VEH, WEA and ACE VALUE and TIME expres-
sions2, and focus on 33 ACE event subtypes, each
of which has its own set of semantic roles for the
potential arguments. There are 35 such roles in to-
tal, but we collapse 8 of them that are time-related
(e.g., TIME-HOLDS, TIME-AT-END) into one, be-
cause most of these roles have very few training ex-
amples. Figure 2 shows an example of ACE anno-
tations for events and entities in a sentence. Note
that not every entity mention in the sentence is in-
volved in events and a single entity mention can be
associated with multiple events.

2To simplify notation, we include values and times when
referring to entities in the rest of the paper.

290



Figure 1: An example of ACE annotations of events and entities. The event triggers and the entity mentions are marked in different
colors. Each event trigger has an event subtype marked above it and each entity mention has an entity type marked above it. Each

event trigger evokes an event with semantic roles that are filled by entity mentions. The roles are marked on the links between event

trigger and entity mentions. For example, “conviction” evokes a CONVICT event, and has the CRIME and DEFENDANT roles filled

by “blasphemy” and “Christian man” respectively.

3 Approach

In this section, we describe our approach for joint
extraction of events and entities within a document
context. We first decompose the learning problem
into three tractable subproblems: learning within-
event structures, learning event-event relations, and
learning for entity extraction. We will describe the
probabilistic models for learning these subproblems.
Then we present a joint inference framework that in-
tegrates these learned models into a single model to
jointly extract events and entities across a document.

3.1 Learning Within-event Structures

As described in Section 2, a mention of an event con-
sists of an event trigger and a set of event arguments.
Each event argument is also an entity mention with
an entity type. In the following, we develop a proba-
bilistic model to learn such dependency structure for
each individual event mention.

Given a document x, we first generate a set of
event trigger candidates T and a set of entity can-
didates N .3 For each trigger candidate i ∈ T , we
associate it with a discrete variable ti that takes val-
ues from the 33 ACE event types and a NONE class
indicating other events or no events. Denote the set
of entity candidates that are potential arguments for
trigger candidate i as Ni.4 For each j ∈ Ni, we as-
sociate it with a discrete variable rij which models
the event-argument relation between trigger candi-
date i and entity candidate j. It takes values from 28
semantic roles and a NONE class indicating invalid

3We describe how to extract these candidates in Section 4.
4In this paper we only consider entity mentions that are in

the same sentence as the trigger to be potential event arguments
due to the ACE annotations. However, our model is general
and can handle event-argument relations across sentences with
appropriate features.

… 

… 

ti

ri1 ri2 rim

a1 a2 am

Figure 2: A factor graph representation of the within-event
model, relating the event type ti of trigger candidate i to the

role type rij of each argument candidate j along with its entity

type aj .

roles. Each argument candidate j is also associated
with an entity type variable aj , which takes values
from 9 entity types and a NONE class indicating in-
valid entity types.

We define the joint distribution of variables ti,
ri· = {rij}j∈Ni , and a· = {aj}j∈Ni conditioned on
the observations, which can be factorized according
to the factor graph shown in Figure 2:

pθ(ti, ri·,a·|i,Ni, x) ∝ exp
(

θT1 f1(ti, i, x)+∑
j∈Ni

θT2 f2(rij , i, j, x) +
∑
j∈Ni

θT3 f3(ti, rij , i, j, x)+

∑
j∈Ni

θT4 f4(aj , j, x) +
∑
j∈Ni

θT5 f5(rij , aj , j, x)
)

(1)

where θ1, ...,θ5 are vectors of parameters that need
to be estimated, and f1, ..., f5 are different forms of
feature functions which we will describe later.

Note that not all configurations of the variables
are valid in our model. Based on the definitions
in Section 2, each event type takes arguments with
certain semantic roles. For example, the arguments
of the event MARRY can only play the roles of

291



PERSON, TIME, and PLACE. In addition, a NONE
event type should not take any arguments. Similarly,
each semantic role should be filled with entities with
compatible types. For example, the PERSON role
type can only be filled with an entity of type PER.
However, a NONE role type can be filled with an
entity of any type. To account for these compati-
bility constraints, we enforce the probabilities of all
invalid configurations to be zero.

Features. f1, f2, and f4 are unary feature func-
tions that depend on trigger variable ti, argument
variable rij , and entity variable aj respectively. We
construct a set of features for each feature function
(see Table 1). Many of these features overlap with
those used in previous work (Li et al., 2013; Li
et al., 2014), except for the word embedding fea-
tures for triggers and the features for entities which
are derived from multiple entity resources. f3 and
f5 are pairwise feature functions that depend on
trigger-argument pair (ti, rij) and argument-entity
pair (rij , aj) respectively. We consider simple in-
dicator functions 1t,r and 1r,a as features (1y(x)
equals 1 when x = y and 0 otherwise).

Training. For model training, we find the opti-
mal parameters θ using the maximum-likelihood es-
timates with an L2 regularization:

θ∗ = arg max
θ
L(θ)− λ||θ||22

L(θ) =
∑
i

log p(ti, ri·,a·|i,Ni, x)

We use L-BFGS to optimize the training objective.
To calculate the gradient, we use the sum-product
algorithm to compute the exact marginals for the
unary cliques ti, rij , aj and the pairwise cliques
(ti, rij), (rij , aj). Typically the training complex-
ity for graphical models with unary and pairwise
cliques is quadratic in the size of the label set. How-
ever, the complexity of our model is much lower
than that since we only need to compute the joint
distributions over valid variable configurations. De-
note the number of event subtypes as T , the num-
ber of event argument roles as N , the average num-
ber of argument roles for each event subtype as k1,
the average number of entity types for each event
argument as k2, and the average number of argu-
ment candidates for each trigger candidate as M .
The complexity of computing the joint distribution

isO(M×(k1T+k2N)), and k1 and k2 are expected
to be small in practice (k1 = 6, k2 = 3 in ACE).

3.2 Learning Event-Event Relations
So far we have described a model for learning struc-
tures for a single event. However, the inference of
the event types for individual events may depend on
other events that are mentioned in the document. For
example, an ATTACK event is more likely to occur
with INJURE and DIE events than with life events
like MARRY and BORN. In order to capture this in-
tuition, we develop a pairwise model of event-event
relations in a document.

Our training data consists of all pairs of trigger
candidates that co-occur in the same sentence or are
connected by a coreferent subject/object if they are
in different sentences.5 We want to propagate in-
formation between these trigger pairs since they are
more likely to be related.

Formally, given a trigger candidate pair (i, i′),
we estimate the probabilities for their event types
(ti, ti′) as

pφ(ti, ti′ |x, i, i′) ∝ exp
(
φT g(ti, ti′ , x, i, i′)

)
(2)

where φ is a vector of parameters and g is a feature
function that depends on the trigger candidate pair
and their context. We consider both trigger-specific
features and relational features. For trigger-specific
features, we use the same trigger features listed in
Table 1. For relational features, we consider for each
pair of trigger candidates: (1) whether they are con-
nected by a conjunction dependency relation (based
on dependency parsing); (2) whether they share a
subject or an object (based on dependency pars-
ing and coreference resolution); (3) whether they
have the same head word lemma; (4) whether they
share a semantic frame based on FrameNet. During
training, we use L-BFGS to compute the maximum-
likelihood estimates of φ.

3.3 Entity Extraction
For entity extraction, we trained a standard linear-
chain Conditional Random Field (CRF) (Lafferty et
al., 2001) using the BIO scheme (i.e., identifying
the Beginning, the Inside and the Outside of the

5We use the Stanford coreference system (Lee et al., 2013)
for within-document entity coreference.

292



Category Type Features

Trigger

Lexical resources:
WordNet
Nomlex
FrameNet
Word2Vec

1. lemmas of the words in the trigger mention
2. nominalization of the words based on Nomlex (Macleod et al., 1998)
3. context words within a window of size 2
4. similarity features between the head word and a list of trigger seeds based on
WordNet (Bronstein et al., 2015)
5. semantic frames that associate with the head word and its p-o-s tag based on
FrameNet (Li et al., 2014)
6. pre-trained vector for the head word (Mikolov et al., 2013)

Syntactic resources:
Stanford parser

7. dependency edges involving the head word, both lexicalized and unlexical-
ized
8. whether the head word is a pronoun

Argument

Lexical resources:
WordNet

1. lemmas of the words in the entity mention
2. lemmas of the words in the trigger mention
3. words between the entity mention and the trigger mention

Syntactic resources:
Stanford parser

4. the relative position of the entity mention to the trigger mention (before, after,
or contain)
5. whether the entity mention and the trigger mention are in the same clause
6. the shortest dependency paths between the entity mention and the trigger
mention

Entity
Entity resources:
Stanford NER
NELL KB

1. Gender and animacy attributes of the entity mention
2. Stanford NER type for the entity mention
3. Semantic type for the entity mention based on the NELL knowledge
base (Mitchell et al., 2015)
4. Predicted entity type and confidence score for the entity mention output by
the entity extractor described in Section 3.3

Table 1: Features for event triggers, event arguments, and entity mentions.

text segments). We use features that are similar to
those from previous work (Ratinov and Roth, 2009):
(1) current words and part-of-speech tags; (2) con-
text words in a window of size 2; (3) word type
such as all-capitalized, is-capitalized, and all-digits;
(4) Gazetteer-based entity type if the current word
matches an entry in the gazetteers collected from
Wikipedia (Ratinov and Roth, 2009). In addition,
we consider pre-trained word embeddings (Mikolov
et al., 2013) as dense features for each word in order
to improve the generalizability of the model.

3.4 Joint Inference

Our end goal is to extract coherent event mentions
and entity mentions across a document. To achieve
this, we propose a joint inference approach that al-
lows information flow among the three local models
and finds globally-optimal assignments of all vari-
ables, including the trigger variables t, the argument
role variables r, and the entity variables a. Specifi-
cally, we define the following objective:

max
t,r,a

∑
i∈T

E(ti, ri·,a·)+
∑
i,i′∈T

R(ti, ti′)+
∑
j∈N

D(aj)

(3)

The first term is the sum of confidence scores for in-
dividual event mentions based on the parameter es-
timates from the within-event model. E(ti, ri·,a·)
can be further decomposed into three parts.

E(ti, ri·,a·) =

log pθ(ti|i,Ni, x) +
∑
j∈Ni

log pθ(ti, rij |i,Ni, x)

+
∑
j∈Ni

log pθ(rij , aj |i,Ni, x)

The second term is the sum of confidence scores
for event relations based on the parameter estimates
from the pairwise event model, where R(ti, ti′) =
log pφ(ti, ti′ |i, i′, x). The third term is the sum
of confidence scores for entity mentions, where
D(aj) = log pψ(aj |j, x) and pψ(aj |j, x) is the
marginal probability derived from the linear-chain
CRF described in Section 3.3. The optimization is
subjected to agreement constraints that enforce the
overlapping variables among the three components
to agree on their values.

The joint inference problem can be formulated
as an integer linear program (ILP). To solve it ef-
ficiently, we find solutions for the relaxation of

293



the problem using a dual decomposition algorithm
AD3 (Martins et al., 2011). AD3 has been shown
to be orders of magnitude faster than a general pur-
pose ILP solver in practice (Das et al., 2012). It is
also particularly suitable for our problem since it in-
volves decompositions that have many overlapping
simple factors. We observed that AD3 recovers the
exact solutions for all the test documents in our ex-
periments and the runtime for labeling each docu-
ment is only three seconds in average in a 64-bit ma-
chine with two 2GHz CPUs and 8GB of RAM.

4 Experiments

We conduct experiments on the ACE2005 corpus.6

It contains text documents from a variety of sources
such as newswire reports, weblogs, and discussion
forums. We use the same data split as in Li et
al. (2013). Table 2 shows the data statistics.

We adopt the evaluation metrics for events as de-
fined in Li et al. (2013). An event trigger is cor-
rectly identified if its offsets match those of a gold-
standard trigger; and it is correctly classified if its
event subtype (33 in total) also match the subtype
of the gold-standard trigger. An event argument is
correctly identified if its offsets and event subtype
match those of any of the reference argument men-
tions in the document; and it is correctly classified if
its semantic role (28 in total) is also correct. For en-
tities, a predicted mention is correctly extracted if its
head offsets and entity type (9 in total) match those
of the reference entity mention.

Note that our approach requires entity mention
candidates and event trigger candidates as input. In-
stead of enumerating all possible text spans, we
generate high-quality entity mentions from the k-
best predictions of our CRF entity extractor (in Sec-
tion 3.3).7 Similarly, we train a CRF for event trig-
ger extraction using the same features except for the
gazetteers, and generate trigger candidates based on
the k-best predictions. We set k = 50 for enti-
ties and k = 10 for event triggers based on perfor-
mance on the development set. They cover 92.3% of
the gold-standard entity mentions and 96.3% of the
gold-standard event triggers in the test set.

6http://www.itl.nist.gov/iad/mig/tests/
ace/2005/

7During training, we randomly split the training data into 10

Train Dev Test
Documents 529 40 30
Sentences 14,837 863 672
Triggers 4,337 497 438

Arguments 7,768 933 911
Entity Mentions 48,797 3,917 4,184

Table 2: Statistics of the ACE2005 dataset.

4.1 Results

Event Extraction. We compare the proposed
models WITHINEVENT (in Section 3.1) and JOIN-
TEVENTENTITY (in Section 3.4) with two strong
baselines. One is JOINTBEAM (Li et al., 2013), a
state-of-the-art event extractor that uses a structured
perceptron with beam search for sentence-level joint
extraction of event triggers and arguments. The
other is STAGEDMAXENT, a typical two-stage ap-
proach that detects event triggers first and then event
arguments. We use the same event trigger candidates
and entity mention candidates as input to all the
comparing models except for JOINTBEAM, because
JOINTBEAM only extracts event mentions and as-
sumes entity mentions are given. We consider a re-
alistic experimental setting where no gold-standard
annotations are available for entities during testing.
To obtain results from JOINTBEAM, we ran the ac-
tual system8 used in Li et al. (2013) using the entity
mentions output by our CRF-based entity extractor.

Table 3 shows the average9 precision, recall, and
F1 score for event triggers and event arguments. We
can see that our WITHINEVENT model, which ex-
plicitly models the trigger-argument dependencies
and argument-role-entity-type dependencies, out-
performs the MaxEnt pipeline, especially in event
argument extraction. This shows that modeling the
trigger-argument dependencies is effective in reduc-
ing error propagation.

Comparing to the state-of-the-art event extrac-
tor JOINTBEAM, the improvements introduced by
WITHINEVENT are substantial in both event triggers
and event arguments. We believe there are two main
reasons: (1) WITHINEVENT considers all possible
joint trigger/argument label assignments, whereas

parts and consider the k-best predictions for each part.
8https://github.com/oferbr/

BIU-RPI-Event-Extraction-Project
9We report the micro-average scores as in previous work (Li

et al., 2013).

294



Event Trigger
Identification

Event Trigger
Classification

Event Argument
Identification

Argument Role
Classification

Model P R F1 P R F1 P R F1 P R F1
JOINTBEAM (Li et al., 2013) 76.6 58.7 66.5 74.0 56.7 64.2 74.6 25.5 38.0 68.8 23.5 35.0

STAGEDMAXENT 73.9 66.5 70.0 70.4 63.3 66.7 75.7 20.2 31.9 71.2 19.0 30.0
WITHINEVENT 76.9 63.8 69.7 74.7 62.0 67.7 72.4 37.2 49.2 69.9 35.9 47.4

JOINTEVENTENTITY 77.6 65.4 71.0∗ 75.1 63.3 68.7 73.7 38.5 50.6∗ 70.6 36.9 48.4∗

Table 3: Event extraction results on the ACE2005 test set. ∗ indicates that the difference in F1 compared to the second best model
(WITHINEVENT) is statistically significant (p < 0.05).

Model Trigger Arg
CROSS-DOC (Ji and Grishman, 2008) 67.3 42.6
CNN (Nguyen and Grishman, 2015) 67.6 -

JOINTEVENTENTITY 68.7 48.4

Table 4: Comparison of the results (F1 score) of JOINTEVEN-
TENTITY and the best known results on ACE event trigger clas-

sification and argument role classification.

Model P R F1
CRFENTITY 85.5 73.5 79.1

JOINTEVENTENTITY 82.4 79.2 80.7∗

Table 5: Entity extraction results on the ACE2005 test set. ∗
indicates statistical significance (p < 0.05).

JOINTBEAM considers only a subset of the possi-
ble assignments based on a heuristic beam search.
More specifically, when predicting labels for token
i, JointBeam considers only the K-best (K = 4
in their paper) partial trigger/argument label con-
figurations for the previous i − 1 tokens. As the
length of the sentence increases, a large amount
of information will be thrown away. (2) WITH-
INEVENT models argument-role-entity-type depen-
dencies, whereas JOINTBEAM assumes the entity
types are given. This can cause error propagation.

JOINTEVENTENTITY provides the best perfor-
mance among all the models on all evaluation cate-
gories. It boosts both precision and recall compared
to WITHINEVENT.10 This demonstrates the advan-
tages of JOINTEVENTENTITY in allowing informa-
tion propagation across event mentions and entity
mentions and making more context-aware and se-
mantically coherent predictions.

We also compare the results of JOINTEVENTEN-
TITY with the best known results on the ACE event

10All significance tests reported in this paper were computed
using the paired bootstrap procedure (Berg-Kirkpatrick et al.,
2012) with 10,000 samples of the test documents.

Model PER GPE ORG TIME
CRFENTITY 85.1 87.0 65.4 78.4

JOINTEVENTENTITY 87.1 87.0 70.2 80.2

Table 6: Entity extraction results (F1 score) per entity type.

extraction task in Table 4. CROSS-DOC (Ji and Gr-
ishman, 2008) performs cross-document inference
of events using document clustering information,
and CNN (Nguyen and Grishman, 2015) is a convo-
lutional neural network for extracting event triggers
at the sentence level. We see that JOINTEVENTEN-
TITY outperforms both models and achieves new
state-of-the-art results for event trigger and argu-
ment extraction in an end-to-end evaluation setting.

Entity Extraction. In addition to extracting event
mentions, JOINTEVENTENTITY also extracts entity
mentions. We compare its output with the output of
a strong entity extraction baseline CRFENTITY (de-
scribed in Section 3.3). Table 5 shows the (micro-
)average precision, recall, and F1 score. We see that
JOINTEVENTENTITY introduces a significant im-
provement in recall and F1. Table 6 further shows
the F1 score for four major entity types PER, GPE,
ORG, and TIME in ACE. The promising improve-
ments indicate that joint modeling of events and en-
tities allows for more accurate predictions about not
only events but also entities.

4.2 Error Analysis

Table 7 divides the errors made by JOINTEVEN-
TENTITY based on different subtasks and the clas-
sification error types in each task. For event trig-
gers, the majority of the errors relates to missing
triggers and only 3.7% involves misclassified event
types (e.g., a DEMONSTRATION event is mistaken
for a TRANSPORT event). Among the missing trig-
gers, we examine the cases where the event types
are correctly identified in a sentence but with in-

295



Error Type Missing Spurious Misclassified
TRIGGER 62.1% 34.2% 3.7%

ARGUMENT 71.2% 24.7% 4.1%
ENTITY 43.4% 30.5% 26.1%

Table 7: Classification of errors made by JOINTEVENTEN-
TITY.

correct triggers and find that there are only 5% of
such cases. For event arguments, the majority of the
errors relates to missing arguments and only 4.1%
is about misclassified argument roles. Among the
missing event arguments, 10% of them has correctly
identified entity types.

In general, the errors for event extraction are com-
monly due to three reasons: (1) Lexical sparsity.
For example, in the sentence “At least three mem-
bers of a family ... were hacked to death ...”, our
model fails to detect that “hacked” triggers an AT-
TACK event, because it has never seen “hacked” with
this sense during training. Using WordNet and pre-
trained word vectors may alleviate the sparsity issue.
It is also important to disambiguate word senses in
context. (2) Shallow understanding of context, es-
pecially long-range context. For example, given the
sentence “She is being held on 50,000 dollars bail
on a charge of first-degree reckless homicide ...”,
the model detects that “homicide” triggers an event,
but fails to detect that “She” refers to the AGENT
who committed the homicide. This is mainly due
to the complex long-distance dependency between
the trigger and the argument. (3) Use of complex
language such as metaphor, idioms, and sarcasm.
Addressing these phenomena is in general difficult
since it requires richer background knowledge and
more sophisticated inference.

For entity extraction, we find that integrating
event information into entity extraction successfully
improves recall and F1. However, since the ACE
dataset is restricted to a limited set of events, a large
portion of the sentences does not contain any event
triggers and event arguments that are of interest. For
these sentences, there is little or no benefit of joint
modeling. We also find that some entity misclassifi-
cation errors can be avoided if entity coreference in-
formation is available. We plan to investigate coref-
erence resolution as an additional component to our
joint model in future work.

5 Related Work

Event extraction has been mainly studied using the
ACE data (Doddington et al., 2004) and biomedi-
cal data for the BioNLP shared tasks (Kim et al.,
2009). To reduce task complexity, early work em-
ploys a pipeline of classifiers that extracts event trig-
gers first, and then determines their arguments (Ahn,
2006; Björne et al., 2009). Recently, Convolutional
Neural Networks have been used to improve the
pipeline classifiers (Nguyen and Grishman, 2015;
Chen et al., 2015). As pipeline approaches suf-
fer from error propagation, researchers have pro-
posed methods for joint extraction of event trig-
gers and arguments, using either structured percep-
tron (Li et al., 2013), Markov Logic (Poon and
Vanderwende, 2010), or dependency parsing algo-
rithms (McClosky et al., 2011). However, exist-
ing joint models largely rely on heuristic search
to aggressively shrink the search space. One ex-
ception is work in Riedel and McCallum (2011),
which uses dual decomposition to solve joint infer-
ence with runtime guarantees. Our work is similar
to Riedel and McCallum (2011). However, there
are two main differences: first, our model extracts
both event mentions and entity mentions; second, it
performs joint inference across sentence boundaries.
Although our approach is evaluated on ACE, it can
be easily adapted to BioNLP data by using appropri-
ate features for events triggers, argument roles, and
entities. We consider this as future work.

There has been work on improving event extrac-
tion by exploiting document-level context. Berant et
al. (2014) exploits event-event relations, e.g., causal-
ity, inhibition, which frequently occur in biological
texts. For general texts most work focuses on ex-
ploiting temporal event relations (Chambers and Ju-
rafsky, 2008; Do et al., 2012; McClosky and Man-
ning, 2012). For the ACE domain, there is work on
utilizing event type co-occurrence patterns to prop-
agation event classification decisions (Ji and Grish-
man, 2008; Liao and Grishman, 2010). Our model
is similar to their work. It models the co-occurrence
relations between event types (e.g., a DIE event
tends to co-occur with ATTACK events and TRANS-
PORT events). It can be extended to handle other
types of event relations (e.g., causal and temporal)
by designing appropriate features. Chambers and

296



Jurafsky (2009; 2011) learn narrative schemas by
linking event verbs that have coreferring syntactic
arguments. Our model also adopts this intuition to
relate event triggers across sentences. In addition,
each event argument is grounded by its entity type
(e.g., an entity mention of type PER can only fill
roles that can be played by a person).

6 Conclusion

In this paper, we introduce a new approach for auto-
matic extraction of events and entities across a docu-
ment. We first decompose the learning problem into
three tractable subproblems: learning within-event
structures, learning event-event relations, and learn-
ing for entity extraction. We then integrate these
learned models into a single model that performs
joint inference of all event triggers, semantic roles
for events, and entities across the whole document.
Experimental results demonstrate that our approach
outperforms the state-of-the-art event extractors by a
large margin and substantially improves a strong en-
tity extraction baseline. For future work, we plan to
integrate entity and event coreference as additional
components into the joint inference framework. We
are also interested in investigating the integration of
more sophisticated event-event relation models of
causality and temporal ordering.

Acknowledgments

This work was supported in part by NSF grant IIS-
1250956, and in part by the DARPA DEFT program
under contract FA87501320005. We would like to
thank members of the CMU NELL group for helpful
comments. We also thank the anonymous reviewers
for insightful suggestions.

References

David Ahn. 2006. The stages of event extraction. In
Proceedings of the Workshop on Annotating and Rea-
soning about Time and Events, pages 1–8. Association
for Computational Linguistics.

Jonathan Berant, Vivek Srikumar, Pei-Chun Chen, Brad
Huang, Christopher D Manning, Abby Vander Lin-
den, Brittany Harding, and Peter Clark. 2014. Mod-
eling biological processes for reading comprehension.
In Proceedings of the 2014 Conference on Empirical
Methods in Natural Language Processing (EMNLP),

pages 1499–1510. Association for Computational Lin-
guistics.

Taylor Berg-Kirkpatrick, David Burkett, and Dan Klein.
2012. An empirical investigation of statistical signifi-
cance in nlp. In Proceedings of the 2012 Joint Confer-
ence on Empirical Methods in Natural Language Pro-
cessing and Computational Natural Language Learn-
ing (EMNLP-CoNLL), pages 995–1005. Association
for Computational Linguistics.

Jari Björne, Juho Heimonen, Filip Ginter, Antti Airola,
Tapio Pahikkala, and Tapio Salakoski. 2009. Extract-
ing complex biological events with rich graph-based
feature sets. In Proceedings of the Workshop on Cur-
rent Trends in Biomedical Natural Language Process-
ing: Shared Task, pages 10–18. Association for Com-
putational Linguistics.

Ofer Bronstein, Ido Dagan, Qi Li, Heng Ji, and Anette
Frank. 2015. Seed-based event trigger labeling: How
far can event descriptions get us? In ACL Volume 2:
Short Papers, pages 372–376. Association for Compu-
tational Linguistics.

Nathanael Chambers and Dan Jurafsky. 2008. Jointly
combining implicit constraints improves temporal or-
dering. In Proceedings of the Conference on Em-
pirical Methods in Natural Language Processing
(EMNLP), pages 698–706. Association for Computa-
tional Linguistics.

Nathanael Chambers and Dan Jurafsky. 2009. Unsu-
pervised learning of narrative schemas and their par-
ticipants. In Proceedings of the Joint Conference of
the 47th Annual Meeting of the ACL and the 4th Inter-
national Joint Conference on Natural Language Pro-
cessing of the AFNLP: Volume 2-Volume 2, pages 602–
610. Association for Computational Linguistics.

Nathanael Chambers and Dan Jurafsky. 2011. Template-
based information extraction without the templates. In
Proceedings of the 49th Annual Meeting of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies-Volume 1, pages 976–986. Asso-
ciation for Computational Linguistics.

Yubo Chen, Liheng Xu, Kang Liu, Daojian Zeng, and
Jun Zhao. 2015. Event extraction via dynamic multi-
pooling convolutional neural networks. In Proceed-
ings of the 53rd Annual Meeting of the Association
for Computational Linguistics and the 7th Interna-
tional Joint Conference on Natural Language Process-
ing (ACL-IJCNLP), volume 1, pages 167–176. Associ-
ation for Computational Linguistics.

Dipanjan Das, André FT Martins, and Noah A Smith.
2012. An exact dual decomposition algorithm for
shallow semantic parsing with constraints. In Pro-
ceedings of the First Joint Conference on Lexical and
Computational Semantics-Volume 1: Proceedings of
the main conference and the shared task, and Volume

297



2: Proceedings of the Sixth International Workshop on
Semantic Evaluation, pages 209–217. Association for
Computational Linguistics.

Quang Xuan Do, Wei Lu, and Dan Roth. 2012. Joint
inference for event timeline construction. In Proceed-
ings of the 2012 Joint Conference on Empirical Meth-
ods in Natural Language Processing and Computa-
tional Natural Language Learning (EMNLP-CoNLL),
pages 677–687. Association for Computational Lin-
guistics.

George R Doddington, Alexis Mitchell, Mark A Przy-
bocki, Lance A Ramshaw, Stephanie Strassel, and
Ralph M Weischedel. 2004. The automatic content
extraction (ace) program-tasks, data, and evaluation.
In Proceedings of the Fourth International Conference
on Language Resources and Evaluation (LREC-2004).
European Language Resources Association (ELRA).

Heng Ji and Ralph Grishman. 2008. Refining event ex-
traction through cross-document inference. In Pro-
ceedings of ACL-08: HLT, pages 254–262. Associa-
tion for Computational Linguistics.

Alex Judea and Michael Strube. 2015. Event extraction
as frame-semantic parsing. Proceedings of the Fourth
Joint Conference on Lexical and Computational Se-
mantics (*SEM 2015), pages 159–164.

Jin-Dong Kim, Tomoko Ohta, Sampo Pyysalo, Yoshi-
nobu Kano, and Jun’ichi Tsujii. 2009. Overview of
bionlp’09 shared task on event extraction. In Proceed-
ings of the Workshop on Current Trends in Biomedical
Natural Language Processing: Shared Task, pages 1–
9. Association for Computational Linguistics.

John Lafferty, Andrew McCallum, and Fernando CN
Pereira. 2001. Conditional random fields: Probabilis-
tic models for segmenting and labeling sequence data.
In Proc. 18th International Conf. on Machine Learn-
ing (ICML), pages 282–289.

Linguistic Data Consortium (LDC). 2005a.
English annotation guidelines for enti-
ties. https://www.ldc.upenn.edu/
sites/www.ldc.upenn.edu/files/
english-entities-guidelines-v5.6.
6.pdf.

Linguistic Data Consortium (LDC). 2005b.
English annotation guidelines for events.
https://www.ldc.upenn.edu/
sites/www.ldc.upenn.edu/files/
english-events-guidelines-v5.4.3.
pdf.

Heeyoung Lee, Angel Chang, Yves Peirsman, Nathanael
Chambers, Mihai Surdeanu, and Dan Jurafsky. 2013.
Deterministic coreference resolution based on entity-
centric, precision-ranked rules. Computational Lin-
guistics, 39(4):885–916.

Qi Li, Heng Ji, and Liang Huang. 2013. Joint event ex-
traction via structured prediction with global features.
In Proceedings of the 51st Annual Meeting of the As-
sociation for Computational Linguistics (ACL), pages
73–82. Association for Computational Linguistics.

Qi Li, Heng Ji, Yu Hong, and Sujian Li. 2014. Construct-
ing information networks using one single model. In
Proceedings of the Conference on Empirical Meth-
ods on Natural Language Processing (EMNLP), pages
1846–1851. Association for Computational Linguis-
tics.

Shasha Liao and Ralph Grishman. 2010. Using docu-
ment level cross-event inference to improve event ex-
traction. In Proceedings of the 48th Annual Meeting of
the Association for Computational Linguistics (ACL),
pages 789–797. Association for Computational Lin-
guistics.

Catherine Macleod, Ralph Grishman, Adam Meyers,
Leslie Barrett, and Ruth Reeves. 1998. Nomlex: A
lexicon of nominalizations. In Proceedings of EU-
RALEX, volume 98, pages 187–193. Citeseer.

André FT Martins, Mario AT Figeuiredo, Pedro MQ
Aguiar, Noah A Smith, and Eric P Xing. 2011. An
augmented lagrangian approach to constrained map in-
ference. In Proceedings of the International Confer-
ence on Machine Learning (ICML).

David McClosky and Christopher D Manning. 2012.
Learning constraints for consistent timeline extraction.
In Proceedings of the 2012 Joint Conference on Em-
pirical Methods in Natural Language Processing and
Computational Natural Language Learning (EMNLP-
CoNLL), pages 873–882. Association for Computa-
tional Linguistics.

David McClosky, Mihai Surdeanu, and Christopher D
Manning. 2011. Event extraction as dependency pars-
ing. In Proceedings of the 49th Annual Meeting of
the Association for Computational Linguistics: Hu-
man Language Technologies (ACL), pages 1626–1635.
Association for Computational Linguistics.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositionality.
In Advances in neural information processing systems
(NIPS), pages 3111–3119.

T. Mitchell, W. Cohen, E. Hruschka, P. Talukdar, J. Bet-
teridge, A. Carlson, B. Dalvi, M. Gardner, B. Kisiel,
J. Krishnamurthy, N. Lao, K. Mazaitis, T. Mohamed,
N. Nakashole, E. Platanios, A. Ritter, M. Samadi,
B. Settles, R. Wang, D. Wijaya, A. Gupta, X. Chen,
A. Saparov, M. Greaves, and J. Welling. 2015. Never-
ending learning. In Proceedings of the Twenty-Ninth
AAAI Conference on Artificial Intelligence (AAAI-15).

Thien Huu Nguyen and Ralph Grishman. 2015. Event
detection and domain adaptation with convolutional

298



neural networks. In Proceedings of ACL-IJCNLP
2015 Volume 2: Short Papers, pages 365–371. Associ-
ation for Computational Linguistics.

Hoifung Poon and Lucy Vanderwende. 2010. Joint infer-
ence for knowledge extraction from biomedical litera-
ture. In Human Language Technologies: The 2010 An-
nual Conference of the North American Chapter of the
Association for Computational Linguistics (NAACL),
pages 813–821. Association for Computational Lin-
guistics.

Lev Ratinov and Dan Roth. 2009. Design challenges
and misconceptions in named entity recognition. In
Proceedings of the Thirteenth Conference on Compu-
tational Natural Language Learning, pages 147–155.
Association for Computational Linguistics.

Sebastian Riedel and Andrew McCallum. 2011. Fast and
robust joint models for biomedical event extraction. In
Proceedings of the Conference on Empirical Methods
in Natural Language Processing (EMNLP), pages 1–
12. Association for Computational Linguistics.

299


