



















































How to Best Use Syntax in Semantic Role Labelling


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 5338–5343
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

5338

How to best use Syntax in Semantic Role Labelling

Yufei Wang1 and Mark Johnson1 and Stephen Wan2 and Yifang Sun3 and Wei Wang3
Macquarie University, Sydney, Australia1

CSIRO Data61, Sydney, Australia2

The University of New South Wales, Sydney, Australia3

yufei.wang@students.mq.edu.au, mark.johnson@mq.edu.au
stephen.wan@data61.csiro.au
{yifangs,weiw}@cse.unsw.edu.au

Abstract

There are many different ways in which exter-
nal information might be used in an NLP task.
This paper investigates how external syntac-
tic information can be used most effectively
in the Semantic Role Labeling (SRL) task.
We evaluate three different ways of encod-
ing syntactic parses and three different ways
of injecting them into a state-of-the-art neural
ELMo-based SRL sequence labelling model.
We show that using a constituency represen-
tation as input features improves performance
the most, achieving a new state-of-the-art for
non-ensemble SRL models on the in-domain
CoNLL’05 and CoNLL’12 benchmarks.1

1 Introduction

Properly integrating external information into neu-
ral networks has received increasing attention re-
cently (Wu et al., 2018; Li et al., 2017; Strubell
et al., 2018). Previous research on this topic can
be roughly categorized into three classes: i) In-
put: The external information are presented as ad-
ditional input features (i.e., dense real-valued vec-
tors) to the neural network (Collobert et al., 2011).
ii) Output: The neural network is trained to pre-
dict the main task and the external information in a
multi-task approach (Changpinyo et al., 2018). iii)
Auto-encoder: This approach, recently proposed
by Wu et al. (2018), simultaneously combines the
Input and Output during neural models training.
The simplicity of these methods allow them to ap-
ply to many NLP sequence tasks and various neu-
ral model architectures.

However, previous studies often focus on inte-
grating word-level shallow features such as POS
or chunk tags into the sequence labelling tasks.
Syntactic information, which encodes the long-
range dependencies and global sentence structure,
has not been studied as carefully. This paper fills

1Our model source code is available in https://
github.com/GaryYufei/bestParseSRL

this gap by integrating syntactic information to the
sequence labelling task. We address three ques-
tions: 1) How should syntactic information be en-
coded as word-level features? 2) What is the best
way of integrating syntactic information? and 3)
What effect does the choice of syntactic represen-
tation have on the performance?

We study these questions in the context of Se-
mantic Role Labelling (SRL). A SRL system ex-
tracts the predicate-argument structure of a sen-
tence.2 Syntax was an essential component of
early SRL systems (Xue and Palmer, 2004; Pun-
yakanok et al., 2008). The state-of-the-art neu-
ral SRL systems use a neural sequence labelling
model without any syntax knowledge (He et al.,
2018, 2017; Tan et al., 2018). We show below that
injecting external syntactic knowledge into a neu-
ral SRL sequence labelling model can improve the
performance, and our best model sets a new state-
of-the-art for a non-ensemble SRL system.

In this paper we express the external syntac-
tic information as vectors of discrete features, be-
cause this enables us to explore different ways of
injecting the syntactic information into the neural
SRL model. Specifically, we propose three dif-
ferent syntax encoding methods: a) a full con-
stituency tree representation (Full-C); b) an SRL-
specific span representation (SRL-C); and c) a
dependency tree representation (Dep). For (a)
we adapt the constituency parsing representation
from (Gómez-Rodrı́guez and Vilares, 2018) and
encode the tree structure as a set of features for
word pairs. For (b), we use a categorical repre-
sentation of the constituency spans that are most
relevant to SRL tasks based on (Xue and Palmer,
2004). Finally, (c) we propose a discrete vector
representation that encodes the head-modifier re-
lationships in the dependency trees.

We evaluate the effectiveness of these encod-
ings using three different integration methods on

2who did what to whom, where and when

https://github.com/GaryYufei/bestParseSRL
https://github.com/GaryYufei/bestParseSRL


5339

the SRL CoNLL’05 and CoNLL’12 benchmarks.
We show that using either of the constituency
representations in either the Input or the Auto-
Encoder configurations produces the best perfor-
mance. These results are noticeably better than a
strong baseline and set a new state-of-the-art for
non-ensemble SRL systems.

2 Related Work

Semantic Role Labeling (SRL) generally refers to
the PropBank style of annotation (Palmer et al.,
2005). Broadly speaking, prior work on SRL
makes use of syntactic information in two differ-
ent ways. Carreras and Màrquez (2005); Prad-
han et al. (2013) incorporate constituent-structure
span-based information, while Hajič et al. (2009)
incorporate dependency-structure information.

This information can be incorporated into
an SRL system in several different ways.
Swayamdipta et al. (2018) use span information
from constituency parse trees as an additional
training target in a multi-task learning approach,
similar to one of the approaches we evaluate here.
Roth and Lapata (2016) use an LSTM model to
represent the dependency paths between predi-
cates and arguments and feed the output as the in-
put features to their SRL system. Marcheggiani
and Titov (2017) use Graph Convolutional Net-
work (Niepert et al., 2016) to encode the depen-
dency parsing trees into their LSTM-based SRL
system. Xia et al. (2019) represent dependency
parses using position-based categorical features of
tree structures in a neural model. Strubell et al.
(2018) use dependency trees as a supervision sig-
nal to train one of attention heads in a self-attentive
neural model.

3 Syntactic Representation

This section introduces our representations of con-
stituency and dependency syntax trees.

3.1 Full-C: Full Constituency Representation

Gómez-Rodrı́guez and Vilares (2018) propose a
full representation of constituency parsing trees
where the string position between wi and wi+1 is
associated with the pair (n(wi)− n(wi−1), l(wi))
where n(wi) is the number of common ancestors
between (wi, wi+1) and l(wi) is the non-terminal
label at the lowest common ancestor3. For sim-

3The full constituency trees can be reconstructed from
this representation, details refer to (Gómez-Rodrı́guez and

Figure 1: Examples of Full-C (n(w), r(w) and l(w))
and SRL-C (SRL-Cons). reported is the predicate
word. The blue non-terminals are candidate con-
stituents in the SRL-C. The circled number is the ex-
traction order.

plicity, we define r(wi) = n(wi) − n(wi−1)
throughout this paper. 4

This encoding method transforms the whole
constituency parsing tree into n−1 (r(wi), l(wi))
feature pairs for a length-n sentence. We assign
(r(wi), l(wi)) to the wi (0 < i ≤ n−1) and leave
a padding symbol N to the wn. We treat r(wi) and
l(wi) as two separate categorical features for each
word. We refer this representation as the Full-C
(Figure 1).

3.2 SRL-C: SRL Span Representation

Xue and Palmer (2004) show only a small frac-
tion of the constituents in the parse trees are use-
ful for the SRL task given the predicate word. That
means encoding the full constituency parsing tree
may introduce redundant information.

Therefore, we preserve the constituent spans
that are most likely to be useful for the predicate
word in the trees. We re-use the pruning algorithm
in (Xue and Palmer, 2004). Their algorithm col-
lects the potential argument constituents by walk-
ing up the tree to the root node recursively, which
filters out many irrelevant constituents from the
syntax trees with 99.3% of the ground truth argu-
ments preserved.

We encode the output of this rule-based pruning
algorithm using a standard BIO (Begin-Inside-
Outside) annotation scheme. The words that are

Vilares, 2018)
4In (Gómez-Rodrı́guez and Vilares, 2018), both r(wi)

and n(wi) is applicable for this encoding method. Our pi-
lot experiments show that r(wi) works much better than the
absolute representation n(wi).



5340

outside any candidate constituent receive the tag
O. The words that are beginning of a candidate
constituent receive the tag B, and the words that
are inside a candidate constituent receive the tag I.
We use the tag A to label words in prepositional
phrases. We refer this representation as the SRL-
C (Figure 1).

3.3 Dep: Dependency Tree Representation

The seeds already are in the script
Left 0 1 0 2 0 0 1

Right 0 0 0 1 1 0 0
RG 1 2 1 4 -1 1 -2

Edge L L N R R L R
DL det nsubj dep root prep det pobj

root

det

nsubj

dep prep det
pobj

Figure 2: Features from Dependency Tree.

The dependency tree representation encodes
key aspects of the head-modifier relationships
within the sentence. We also consider encod-
ing constituent edge information. The following
word-level features have been proposed:

a) #left/right Dependents (Left / Right). The
number of dependents a word has on the left
and right side.

b) Right/Left-most Dependent (Edge). Whether
the word is the Right/Left/None-most depen-
dent of its governor.

c) Relative Distance to Governor (RG). The
relative distance between the word and its
governor.

d) Dependency Label (DL). The label describ-
ing the relationship between each pair of de-
pendent and governor.

We refer this representation as the Dep (Figure
25).

4 Injecting External Information

In this section, we introduce three different meth-
ods for integrating external syntactic information
into the neural SRL system (Figure 3):

5In this example, we assume the “root” is the first word of
the sentence from the left.

Figure 3: Model Architecture. Blue indicates the base-
line model; Red indicates the multi-task output compo-
nent; Green indicates the external feature component.

Baseline Our baseline system is a stacked bi-
LSTM architecture (He et al., 2017). We use
ELMo (Peters et al., 2018) as word embeddings
and a CRF output decoder on the top of LSTM, as
shown in Figure 3.

Input This approach represents the external cat-
egorical features as trainable, high dimensional
dense vector token embeddings, which are con-
catenated with the representation vectors of ELMo
in the baseline model. The syntactic parse trees
that are used as the input features are produced
by Kitaev and Klein (2018) (for constituency pars-
ing). The dependency trees are produced by
transforming the constituency trees using Stan-
ford CoreNLP toolkit. This ensures that the con-
stituency and dependency parses have a similar
error distribution, helping to control for parsing
quality. Our constituency and dependency parses
score a state-of-the-art 95.4 F1 and 96.4% UAS on
the WSJ test set respectively. We used a 20-fold
cross-validation procedure to produce the data for
the external syntactic input.

Output In this approach, our model predicts
both SRL sequence tags and syntactic features (en-
coded as the word-level features above) simultane-
ously. We use a log loss for each categorical fea-
ture. The final training loss is the multi-task objec-
tive LSRL−

∑m
f=1 log pf (y

?
f ), where pf (yf ) is the

probability of generating yf as the f th feature (m
features in total, m = 1, 2, 5 for SRL-C, Full-C
and Dep respectively) and y?f is the ground truth
for the f th feature. Gold training data was used
as the external syntactic information for the multi-
task output setting, as this external information is
not required at test time.

Auto-encoder Following Wu et al. (2018), we
use external information as input features and as
a multi-task training objective simultaneously, so
the system is behaving somewhat like an auto-
encoder. This auto-encoder has to reproduce the
syntactic information in its output that it is fed in



5341

its input, encouraging it to incorporate this infor-
mation in its internal representations. The input
and output representations are the same as above.

5 Experiments

We evaluate 10 different models (the 3 ways
of using external information by 3 different en-
codings of syntax and a baseline model) on
CoNLL’05 (Carreras and Màrquez, 2005) and
CoNLL’12 (Pradhan et al., 2013) benchmarks, un-
der the evaluation setting where the gold predicate
is given. The CoNLL’05 benchmark uses WSJ
and Brown test as in-domain and out-domain eval-
uation respectively.

5.1 Main Results

Table 1 shows the effect of using the three different
kinds of external syntactic information in the three
different ways just described. When used as input
features, all three representations improve over our
baseline system. This shows that syntactic repre-
sentations provide additional useful information,
which is beyond the dynamic context embeddings
from ELMo, to SRL task.

Syntax Representations Models using con-
stituency representations are 0.3% - 0.6% bet-
ter than the models using the dependency repre-
sentations. This might be because constituents
align more directly with SRL arguments and con-
stituency information is easier to use.

Inject. Model
CoNLL’05 CoNLL’12

WSJ Brown Test

- Baseline 87.7 78.1 85.8

Input
Full-C 88.1 78.9 86.4
SRL-C 88.2 79.3 86.4

Dep 87.9 78.4 86.1

Output
Full-C 87.7 78.4 85.9
SRL-C 87.9 78.5 85.9

Dep 87.6 78.9 85.8
Auto

Encoder

Full-C 88.2 77.7 86.3
SRL-C 88.2 79.0 86.4

Dep 87.6 78.1 85.7

Table 1: Injecting External Syntax Information. Bold
number is the best performance in each column, same
below.

The SRL-C is slightly better than the Full-C
for in-domain evaluation. The advantages of the
SRL-C approach are greater on the out-of-domain

(Brown) evaluation, with a margin of 0.4%. This
could be because Full-C is more sensitive to pars-
ing errors than SRL-C. When we compare gold
and automatic parser representations in Brown de-
vice data, 10.5% of the words get different Full-C
features while this only 7.9% get different SRL-C
features.

External Information Injection Table 1 shows
at least on this task, multi-task learning does not
perform as well as adding external information
as additional input features. Both the Input and
Auto-Encoder methods work equally well. We
conclude that the extra complexity of the auto-
encoder model is not justified. In particular, Dep
with auto-encoder hurts SRL accuracy (0.6% be-
hind the model with the constituency features).

5.2 Comparison with existing systems

We compare our best system (SRL-C used as
Input) with previous work in Table 2. We im-
prove upon the state-of-the-art results for non-
ensemble SRL models on in-domain test by 0.6%
and 0.2% on CoNLL’05 and CoNLL’12 respec-
tively. Our model also achieves a competitive re-
sult on CoNLL’05 Brown Test. Comparing with
the strong ensemble model in (Ouchi et al., 2018),
our model is only 0.3% and 0.6% lower in two
benchmarks respectively.

Model
CoNLL’05 CoNLL’12

WSJ Brown Test

ELMo Baseline 87.7 78.1 85.8
Strubell et al. (2018) 86.0 76.5 -

Xia et al. (2019) 86.9 76.8 -
He et al. (2018) 87.4 80.4 85.5

Ouchi et al. (2018) 87.6 78.7 86.2
Our best model 88.2 79.3 86.4

Xia et al. (2019)§ 87.8 78.8 -
Ouchi et al. (2018)§ 88.5 79.6 87.0

Table 2: Comparison with existing systems. § indicates
ensemble models.

5.3 Using Gold Parse Trees

Finally, we conduct an oracle experiment where all
syntactic features are derived from gold trees. Our
model performance improves by around 3% - 4%
F1 score (see Table 3). This bounds the improve-
ment in SRL that one can expect with improved
syntactic parses.



5342

Model
CoNLL’05 CoNLL’12

WSJ Brown Test

Our best model 88.2 79.3 86.4
Full-C 92.2 83.5 91.4
SRL-C 91.7 83.4 90.3

Dep 91.9 83.3 91.1

Table 3: SRL Performance with Gold Trees

6 Conclusion and Future Work

This paper evaluated three different ways of repre-
senting external syntactic parses, and three differ-
ent ways of injecting that information into a state-
of-the-art SRL system. We showed that repre-
senting the external syntactic information as con-
stituents was most effective. Using the exter-
nal syntactic information as input features was
far more effective than a multi-task learning ap-
proach, and just as effective as an auto-encoder
approach. Our best system sets a new state-of-the-
art for non-ensemble SRL systems on in-domain
data.

In future work we will explore how external in-
formation is best used in ensembles of models for
SRL and other tasks. For example, is it better for
all the models in an ensemble to use the same ex-
ternal information, or is it more effective if they
make use of different kinds of information? We
will also investigate whether the choice of method
for injecting external information has the same im-
pact on other NLP tasks as it does on SRL.

Acknowledgments

This research was supported by the Australian
Research Councils Discovery Projects fund-
ing scheme (project number DPs 160102156,
170103710, 180103411), D2DCRC (DC25002,
DC25003), and in part by CSIRO Data61.

References
Xavier Carreras and Lluı́s Màrquez. 2005. Intro-

duction to the conll-2005 shared task: Semantic
role labeling. In Proceedings of the Ninth Confer-
ence on Computational Natural Language Learn-
ing (CoNLL-2005), pages 152–164. Association for
Computational Linguistics.

Soravit Changpinyo, Hexiang Hu, and Fei Sha. 2018.
Multi-task learning for sequence tagging: An em-
pirical study. In Proceedings of the 27th Inter-
national Conference on Computational Linguistics,

pages 2965–2977. Association for Computational
Linguistics.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel P. Kuksa.
2011. Natural language processing (almost) from
scratch. Journal of Machine Learning Research,
12:2493–2537.

Carlos Gómez-Rodrı́guez and David Vilares. 2018.
Constituent parsing as sequence labeling. In Pro-
ceedings of the 2018 Conference on Empirical Meth-
ods in Natural Language Processing, pages 1314–
1324. Association for Computational Linguistics.

Jan Hajič, Massimiliano Ciaramita, Richard Johans-
son, Daisuke Kawahara, Maria Antònia Martı́, Lluı́s
Màrquez, Adam Meyers, Joakim Nivre, Sebastian
Padó, Jan Štěpánek, Pavel Straňák, Mihai Surdeanu,
Nianwen Xue, and Yi Zhang. 2009. The CoNLL-
2009 shared task: Syntactic and semantic depen-
dencies in multiple languages. In Proceedings of
the Thirteenth Conference on Computational Nat-
ural Language Learning (CoNLL 2009): Shared
Task, pages 1–18, Boulder, Colorado. Association
for Computational Linguistics.

Luheng He, Kenton Lee, Omer Levy, and Luke Zettle-
moyer. 2018. Jointly predicting predicates and ar-
guments in neural semantic role labeling. In Pro-
ceedings of the 56th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers), pages 364–369. Association for Computa-
tional Linguistics.

Luheng He, Kenton Lee, Mike Lewis, and Luke Zettle-
moyer. 2017. Deep semantic role labeling: What
works and what’s next. In Proceedings of the 55th
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 1: Long Papers), pages
473–483. Association for Computational Linguis-
tics.

Nikita Kitaev and Dan Klein. 2018. Constituency
parsing with a self-attentive encoder. In Proceed-
ings of the 56th Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Pa-
pers), pages 2676–2686. Association for Computa-
tional Linguistics.

Junhui Li, Deyi Xiong, Zhaopeng Tu, Muhua Zhu, Min
Zhang, and Guodong Zhou. 2017. Modeling source
syntax for neural machine translation. In Proceed-
ings of the 55th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 688–697. Association for Computa-
tional Linguistics.

Diego Marcheggiani and Ivan Titov. 2017. Encoding
sentences with graph convolutional networks for se-
mantic role labeling. In Proceedings of the 2017
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 1506–1515, Copenhagen,
Denmark. Association for Computational Linguis-
tics.

http://aclweb.org/anthology/W05-0620
http://aclweb.org/anthology/W05-0620
http://aclweb.org/anthology/W05-0620
http://aclweb.org/anthology/C18-1251
http://aclweb.org/anthology/C18-1251
http://dl.acm.org/citation.cfm?id=2078186
http://dl.acm.org/citation.cfm?id=2078186
http://aclweb.org/anthology/D18-1162
https://www.aclweb.org/anthology/W09-1201
https://www.aclweb.org/anthology/W09-1201
https://www.aclweb.org/anthology/W09-1201
http://aclweb.org/anthology/P18-2058
http://aclweb.org/anthology/P18-2058
https://doi.org/10.18653/v1/P17-1044
https://doi.org/10.18653/v1/P17-1044
http://aclweb.org/anthology/P18-1249
http://aclweb.org/anthology/P18-1249
https://doi.org/10.18653/v1/P17-1064
https://doi.org/10.18653/v1/P17-1064
https://doi.org/10.18653/v1/D17-1159
https://doi.org/10.18653/v1/D17-1159
https://doi.org/10.18653/v1/D17-1159


5343

Mathias Niepert, Mohamed Ahmed, and Konstantin
Kutzkov. 2016. Learning convolutional neural net-
works for graphs. In Proceedings of the 33nd In-
ternational Conference on Machine Learning, ICML
2016, New York City, NY, USA, June 19-24, 2016,
volume 48 of JMLR Workshop and Conference Pro-
ceedings, pages 2014–2023. JMLR.org.

Hiroki Ouchi, Hiroyuki Shindo, and Yuji Matsumoto.
2018. A span selection model for semantic role la-
beling. In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Process-
ing, pages 1630–1642. Association for Computa-
tional Linguistics.

Martha Palmer, Daniel Gildea, and Paul Kingsbury.
2005. The proposition bank: An annotated cor-
pus of semantic roles. Computational Linguistics,
31(1):71–106.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word repre-
sentations. In Proceedings of the 2018 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, Volume 1 (Long Papers), pages 2227–
2237. Association for Computational Linguistics.

Sameer Pradhan, Alessandro Moschitti, Nianwen Xue,
Hwee Tou Ng, Anders Björkelund, Olga Uryupina,
Yuchen Zhang, and Zhi Zhong. 2013. Towards ro-
bust linguistic analysis using ontonotes. In Proceed-
ings of the Seventeenth Conference on Computa-
tional Natural Language Learning, pages 143–152.
Association for Computational Linguistics.

Vasin Punyakanok, Dan Roth, and Wen-tau Yih. 2008.
The importance of syntactic parsing and inference in
semantic role labeling. Computational Linguistics,
34(2):257–287.

Michael Roth and Mirella Lapata. 2016. Neural se-
mantic role labeling with dependency path embed-
dings. In Proceedings of the 54th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 1192–1202, Berlin,
Germany. Association for Computational Linguis-
tics.

Emma Strubell, Patrick Verga, Daniel Andor,
David Weiss, and Andrew McCallum. 2018.
Linguistically-informed self-attention for semantic
role labeling. In Proceedings of the 2018 Confer-
ence on Empirical Methods in Natural Language
Processing, pages 5027–5038. Association for
Computational Linguistics.

Swabha Swayamdipta, Sam Thomson, Kenton Lee,
Luke Zettlemoyer, Chris Dyer, and Noah A. Smith.
2018. Syntactic scaffolds for semantic structures.
In Proceedings of the 2018 Conference on Empiri-
cal Methods in Natural Language Processing, pages
3772–3782. Association for Computational Linguis-
tics.

Zhixing Tan, Mingxuan Wang, Jun Xie, Yidong Chen,
and Xiaodong Shi. 2018. Deep semantic role label-
ing with self-attention. In Proceedings of the Thirty-
Second AAAI Conference on Artificial Intelligence,
(AAAI-18), New Orleans, Louisiana, USA, February
2-7, 2018, pages 4929–4936.

Minghao Wu, Fei Liu, and Trevor Cohn. 2018. Evalu-
ating the utility of hand-crafted features in sequence
labelling. In Proceedings of the 2018 Conference
on Empirical Methods in Natural Language Pro-
cessing, pages 2850–2856. Association for Compu-
tational Linguistics.

Qingrong Xia, Zhenghua Li, Min Zhang, Meishan
Zhang, Guohong Fu, Rui Wang, and Luo Si.
2019. Syntax-aware neural semantic role labeling.
In Proceedings of the Thirty-Third AAAI Confer-
ence on Artificial Intelligence, (AAAI-19), Honolulu,
Hawaii, USA, Jan 27-Feb 1, 2019.

Nianwen Xue and Martha Palmer. 2004. Calibrating
features for semantic role labeling. In Proceedings
of the 2004 Conference on Empirical Methods in
Natural Language Processing, pages 88–94.

http://jmlr.org/proceedings/papers/v48/niepert16.html
http://jmlr.org/proceedings/papers/v48/niepert16.html
http://aclweb.org/anthology/D18-1191
http://aclweb.org/anthology/D18-1191
https://doi.org/10.1162/0891201053630264
https://doi.org/10.1162/0891201053630264
https://doi.org/10.18653/v1/N18-1202
https://doi.org/10.18653/v1/N18-1202
http://aclweb.org/anthology/W13-3516
http://aclweb.org/anthology/W13-3516
https://doi.org/10.1162/coli.2008.34.2.257
https://doi.org/10.1162/coli.2008.34.2.257
https://doi.org/10.18653/v1/P16-1113
https://doi.org/10.18653/v1/P16-1113
https://doi.org/10.18653/v1/P16-1113
http://aclweb.org/anthology/D18-1548
http://aclweb.org/anthology/D18-1548
http://aclweb.org/anthology/D18-1412
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16725
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16725
http://aclweb.org/anthology/D18-1310
http://aclweb.org/anthology/D18-1310
http://aclweb.org/anthology/D18-1310
https://www.aaai.org/Papers/AAAI/2019/AAAI-XiaQ.7468.pdf
http://aclweb.org/anthology/W04-3212
http://aclweb.org/anthology/W04-3212

