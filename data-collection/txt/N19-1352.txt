




































How Large a Vocabulary Does Text Classification Need? A Variational Approach to Vocabulary Selection


Proceedings of NAACL-HLT 2019, pages 3487‚Äì3497
Minneapolis, Minnesota, June 2 - June 7, 2019. c¬©2019 Association for Computational Linguistics

3487

How Large a Vocabulary Does Text Classification Need?
A Variational Approach to Vocabulary Selection

Wenhu Chen‚Ä†, Yu Su¬∂, Yilin Shen‚Ä°, Zhiyu Chen‚Ä†, Xifeng Yan‚Ä†, William Wang‚Ä†
University of California, Santa Barbara‚Ä†

Ohio State University, Columbus¬∂

Samsung Research, Moutain View‚Ä°

{wenhuchen,zhiyuchen,xyan,william}@cs.ucsb.edu
su.809@osu.edu yilin.shen@samsung.com

Abstract

With the rapid development in deep learn-
ing, deep neural networks have been widely
adopted in many real-life natural language ap-
plications. Under deep neural networks, a pre-
defined vocabulary is required to vectorize text
inputs. The canonical approach to select pre-
defined vocabulary is based on the word fre-
quency, where a threshold is selected to cut
off the long tail distribution. However, we
observed that such a simple approach could
easily lead to under-sized vocabulary or over-
sized vocabulary issues. Therefore, we are
interested in understanding how the end-task
classification accuracy is related to the vocab-
ulary size and what is the minimum required
vocabulary size to achieve a specific perfor-
mance. In this paper, we provide a more
sophisticated variational vocabulary dropout
(VVD) based on variational dropout to per-
form vocabulary selection, which can intelli-
gently select the subset of the vocabulary to
achieve the required performance. To eval-
uate different algorithms on the newly pro-
posed vocabulary selection problem, we pro-
pose two new metrics: Area Under Accuracy-
Vocab Curve and Vocab Size under X% Ac-
curacy Drop. Through extensive experiments
on various NLP classification tasks, our varia-
tional framework is shown to significantly out-
perform the frequency-based and other selec-
tion baselines on these metrics.

1 Introduction

Over the past decade, deep neural networks have
become arguably the most popular model choice
for a vast number of natural language processing
(NLP) tasks and have constantly been delivering
state-of-the-art results. Because neural network
models assume continuous data, to apply a neu-
ral network on any text data, the first step is to

Cutoff
Freq. Vocab

Remain
Vocab #Emb #CNN

#Emb
Ratio

1 60K 100% 15M 0.36M 97.6%

5 40K 21.7% 10M 0.36M 95.6%

10 24K 13% 6M 0.36M 94.3%

20 14K 9.4% 3.5M 0.36M 90%

100 4K 2.7% 1M 0.36M 73%

Table 1: Illustration of the frequency-based vocabulary
selection heuristic on a typical CNN-based document
classification model (Section 4.1). #Emb is the num-
ber of parameters in the word embedding matrix (256
dimensions), and #CNN is that in the CNN model.

vectorize the discrete text input with a word em-
bedding matrix through look-up operation, which
in turn assumes a pre-defined vocabulary set. For
many NLP tasks, the vocabulary size can easily go
up to the order of tens of thousands, which poten-
tially makes the word embedding the largest por-
tion of the trainable parameters. For example, a
document classification task like AG-news (Zhang
et al., 2015) can include up to 60K unique words,
with the embedding matrix accounting for 97.6%
of the trainable parameters (Table 1), which leads
to under-representation of the neural networks‚Äô
own parameters.

Intuitively, using the full or very large vo-
cabulary are neither economical, as it limits
model applicability on computation- or memory-
constrained scenarios (Yogatama et al., 2015;
Faruqui et al., 2015), nor necessary, as many
words may contribute little to the end task and
could have been safely removed from the vocab-
ulary. Therefore, how to select the best vocabu-
lary is a problem of both theoretical and practical
interests. Somewhat surprisingly, this vocabulary
selection problem is largely under-addressed in the
literature: The de facto standard practice is to do



3488

frequency-based cutoff (Luong et al., 2015; Kim,
2014), and only retain the words more frequent
than a certain threshold (Table 1). Although this
simple heuristic has demonstrated strong empiri-
cal performance, its task-agnostic nature implies
that likely it is not the optimal strategy for many
tasks (or any task). Task-aware vocabulary selec-
tion strategies and a systematic comparison of dif-
ferent strategies are still lacking.

In this work, we present the first systematic
study of the vocabulary selection problem. Our
study will be based on text classification tasks,
a broad family of NLP tasks including docu-
ment classification (DC), natural language infer-
ence (NLI), natural language understanding in di-
alog systems (NLU), etc. Specifically, we aim to
answer the following questions:

1. How important a role does the vocabulary se-
lection algorithm play in text classification?

2. How to dramatically reduce the vocabulary
size while retaining the accuracy?

The rest of the paper is organized as follows:
We first formally define the vocabulary selection
problem (subsection 2.1) and present a quantita-
tive study on classification accuracy with differ-
ent vocabulary selections to showcase its impor-
tance in the end task (subsection 2.2). We also
propose two new metrics for evaluating the per-
formance of vocabulary selection in text classifi-
cation tasks (subsection 2.3). We then propose a
novel, task-aware vocabulary selection algorithm
called Varitional Vocabulary Dropout (VVD) (sec-
tion 3) which draws on the idea of variational
dropout (Kingma et al., 2015): If we learn a
dropout probability pw for each given word w
in the vocabulary V during the model training
on a given task, the learned dropout probabilities
pw will imply the importance of word w to the
end task and can, therefore, be leveraged for vo-
cabulary selection. We propose to infer the la-
tent dropout probabilities under a Bayesian infer-
ence framework. During test time, we select the
sub vocabulary VÃÇ by only retaining words with
dropout probability lower than a certain thresh-
old. For any words deselected using VVD, we will
simply regard them as a special token with null
vector representation [0, 0, ¬∑ ¬∑ ¬∑ , 0]. Please note
that our proposed algorithm needs to re-train a
word embedding matrix, thus it is tangential to
the research of pre-trained word embedding like
Word2Vec (Mikolov et al., 2013) or Glove (Pen-

nington et al., 2014) though we can use them to
initialize our embedding.

We conduct comprehensive experiments to
evaluate the performance of VVD (section 4) on
different end classification tasks. Specifically, we
compare against an array of strong baseline se-
lection algorithms, including the frequency-based
algorithm (Luong et al., 2015), TF-IDF algo-
rithm (Ramos et al., 2003), and structure lasso al-
gorithm (Friedman et al., 2010), and demonstrate
that it can consistently outperform these compet-
ing algorithms by a remarkable margin. To show
that the conclusions are widely held, our evalua-
tion is based on a wide range of text classifica-
tion tasks and datasets with different neural net-
works including Convolutional Neural Network
(CNN) (Kim, 2014), Bi-directional Long-Short
Term Memory (BiLSTM) (Bahdanau et al., 2014)
and Enhanced LSTM (ESIM) (Chen et al., 2017).
In summary, our contributions are three-fold:

1. We formally define the vocabulary selection
problem, demonstrate its importance, and
propose new evaluation metrics for vocabu-
lary selection in text classification tasks.

2. We propose a novel vocabulary selection
algorithm based on variational dropout by
re-formulating text classification under the
Bayesian inference framework. The code
will be released in Github1.

3. We conduct comprehensive experiments to
demonstrate the superiority of the proposed
vocabulary selection algorithm over a num-
ber of strong baselines.

2 Vocabulary Selection

2.1 Problem Definition
We now formally define the problem setting and
introduce the notations for our problem. Conven-
tionally, we assume the neural classification model
vectorizes the discrete language input into a vec-
tor representation via an embedding matrix W ‚àà
RV ‚àóD, where V denotes the size of the vocabu-
lary, andD denotes the vector dimension. The em-
bedding is associated with a pre-defined word-to-
index dictionary V = {wi : i|1 ‚â§ i ‚â§ V } where
wi denotes a literal word corresponding to ith row
in the embedding matrix. The embedding matrix
W covers the subset of a vocabulary of interests
for a particular NLP task, note that the value of V

1https://github.com/wenhuchen/
Variational-Vocabulary-Selection.git



3489

ùë®ùëºùë™

5% Vocab@‚àí5%

42.5

85.1
80.1

33.2

Document Classification Natural Language Understanding Evaluation Metrics

Figure 1: Monte-Carlo simulation on vocabulary selection. Left: CNN-based document classification on AG-news
dataset. Middle: Natural language understanding on Snips dataset. Right: Metrics for vocabulary selection.

is known to be very large due to the rich variations
in human languages. Here we showcase the em-
bedding matrix size of a popular text classification
model2 on AG-news dataset (Zhang et al., 2015)
in Table 1. From which we can easily observe
that the embedding matrix is commonly occupy-
ing most of the parameter capacity, which could
be the bottleneck in many real-world applications
with limited computation resources.

In order to alleviate such redundancy problem
and make embedding matrix as efficient as possi-
ble, we are particularly interested in discovering
the minimum row-sized embedding WÃÇ to achieve
nearly promising performance as using the full
row-sized embedding W . More formally, we de-
fine the our problem as follows:

argmin
WÃÇ ,Œ∏ÃÇ

#Row(WÃÇ )

s.t. Acc(fŒ∏ÃÇ(x; WÃÇ ), y)‚àíAcc(fŒ∏(x;W ), y) ‚â§ ÔøΩ
(1)

where #Row is a the number of rows in the matrix
WÃÇ , fŒ∏ is the learned neural model with parame-
ter Œ∏ to predict the class given the inputs x, Acc
is the function which measure accuracy between
model prediction and y (reference output), and ÔøΩ
is the tolerable performance drop after vocabulary
selection. It is worth noting that here Œ∏ includes all
the parameter set of the neural network except em-
bedding matrix W . For each vocabulary selection
algorithm A, we propose to draw its characteristic
curveAcc(fŒ∏ÃÇ(x; WÃÇ ), y) = gA(#Row(WÃÇ )) to un-
derstand the relationship between the vocabulary
capacity and classification accuracy, which we call
as (characteristic) accuracy-vocab curve through-
out our paper.

2.2 Importance of Vocabulary Selection
In order to investigate the importance of the role
played by the vocabulary selection algorithm,

2https://github.com/dennybritz/
cnn-text-classification-tf

we design a Monte-Carlo simulation strategy to
approximate accuracy‚Äôs lower bound and upper
bound of a given vocabulary size reached by a
possible selection algorithm A. More specifi-
cally, for a given vocabulary size of VÃÇ , there exist(V
VÃÇ

)
algorithms which can select distinct vocab-

ulary subset VÃÇ from the full vocabulary V. Di-
rectly enumerating these possibilities are impos-
sible, we instead propose to use a Monte-Carlo
vocabulary selection strategy which can randomly
pick vocabulary subset VÃÇ to simulate the possi-
ble selection algorithms by running it N times.
After simulation, we obtain various point estima-
tions (Acc1, ¬∑ ¬∑ ¬∑ , AccN |VÃÇ ) at each given VÃÇ and
depict the point estimates in Figure 1 to approx-
imately visualize the upper and lower bound of
the accuracy-vocab curve. From Figure 1, we
can easily observe that the accuracy range under
a limited-vocabulary is extremely large, when the
budget VÃÇ increases, the gap gradually shrinks. For
example, for document classification with a bud-
get of 1000, a selection algorithm A can yield
a potential accuracy ranging from 42.5 to 85.1,
while for natural language understanding task with
a budget of 27, a selection algorithm A can yield
a potential accuracy ranging from 33.2 to 80.1.
Such a Monte-Carlo simulation study has demon-
strated the significance of vocabulary selection
strategy in NLP tasks and also implicate the enor-
mous potential of an optimal vocabulary selection
algorithm.

2.3 Evaluation Metrics

In order to evaluate how well a given selection al-
gorithm A performs, we propose evaluation met-
rics as depicted in Figure 1 by quantitatively
studying its characteristic accuracy-vocab curve.
These metrics namely Area Under Curve (AUC)
and Vocab@-X% separately measure the vocab-
ulary selection performance globally and locally.



3490

Specifically, AUC computes enclosed area by the
curve, which gives an overview of how well the
vocabulary selection algorithm performs. In com-
parison, Vocab@-X% computes the minimum vo-
cabulary size required if X% performance drop is
allowed, which straightforwardly represents how
large vocabulary is required to achieve a given ac-
curacy. For the local evaluation metric, we mainly
consider Vocab@-3% and Vocab@-5%. However,
we observe that directly computing AUC lays too
much emphasis on the large-vocabulary region,
thus unable to represent an algorithm‚Äôs selection
capability under the low-vocabulary conditions.
Therefore, we propose to take the logarithm of the
vocabulary size and then compute the normalized
enclosed area by:

AUC =

‚à´
VÃÇ
Acc(log(VÃÇ ))d log(VÃÇ )‚à´
VÃÇ
Acc(V )d log(VÃÇ )

(2)

It is worth noting that Vocab@-X% takes value
from range [0, V ] with smaller values indicate bet-
ter performance. Since AUC is normalized by
Acc(V), it takes value from range [0, 1] regardless
of the classification error.

3 Our Method

Inspired by DNN dropout (Srivastava et al., 2014;
Wang and Manning, 2013), we propose to tackle
the vocabulary selection problem from word-level
dropout perspective, where we assume each word
wi (an integer index) is associated with its charac-
teristic dropout rate pi, which represents the prob-
ability of being replaced with an empty place-
holder, specifically, higher dropout probability in-
dicates less loss suffered from removing it from
the vocabulary. Hence, the original optimization
problem in Equation 1 can be thought of as in-
ferring the latent dropout probability vector p =
[p1, ¬∑ ¬∑ ¬∑ , pV ]. The overview of our philosophy is
depicted in Figure 2, where we associate with each
row of the embedding matrix a dropout probabil-
ity and then re-train the complete system, which
grasps how much contribution each word from the
vocabulary makes to the end NLP task and remove
those ‚Äúless contributory‚Äù words from the vocabu-
lary without hurting the performance.

3.1 Bernouli Dropout

Here we first assume that the neural network vec-
torizes the discrete inputs with an embedding ma-
trix W to project given words x into vector space

What

New

Genre

ùëù" = 0.85

ùëù( = 0.20

ùëù* = 0.98

ùëù, = 0.12‚úì

‚úï

Band‚úì

‚úï
Music     Sport     News

Figure 2: Variational dropout in classification mod-
els, ‚ÄúNew‚Äù and ‚ÄúWhat‚Äù can be safely removed without
harming performance due to large dropout probability.

RD, and then propose to add random dropout
noise into the embedding input to simulate the
dropout process as follows:

E(x|b) = (bÔøΩ OneHot(x)) ¬∑W (3)

where OneHot is a function to transform a word
x into its one-hot form OneHot(x) ‚àà RV , and
b ‚àà RV is the Bernouli dropout noise with
bi ‚àº Bern(1 ‚àí pi). The embedding output vec-
tor E(x|b) is computed with a given embedding
matrix W under a sampled Bernouli vector b.
In order to infer the latent Bernouli distribution
with parameters p under the Bayesian framework
where training pairs (x = x1 ¬∑ ¬∑ ¬∑xn, y) are given
as the evidence, we first define an objective func-
tion asL(fŒ∏(x), y) and then derive its lower bound
as follows (with pÃÑ = 1‚àí p):

logL(fŒ∏(x), y) = log
‚à´

b

L(fŒ∏(E(x|b)), y)P(b)db

‚â• E
b‚àºBern(pÃÑ)

[logL(fŒ∏(E(x|b)), y)]‚àíKL(Bern(pÃÑ)||P(b))

=L(W ; Œ∏)

where P(b) is the prior distribution, andBern(pÃÑ)
denotes the Bernouli approximate posterior with
parameter p. Here we use E(x) as the simplied
form of {E(x1), ¬∑ ¬∑ ¬∑ , E(xn)}, we separate the text
classification model‚Äôs parameters Œ∏ with the em-
bedding parameters W and assume the classifica-
tion model fŒ∏ directly takes embeddingE as input.

3.2 Gaussian Relaxation
However, the Bernouli distribution is hard to repa-
rameterize, where we need to enumerate 2V dif-
ferent values to compute the expectation over the
stochastic dropout vector b. Therefore, we fol-
low Wang and Manning (2013) to use a continu-
ous Gaussian approximation, where the Bernouli
noise b is replaced by a Gaussian noise z:

E(x|z) = (zÔøΩ OneHot(x)) ¬∑W (4)

where z ‚àà RV follows Gaussian distribution
zi ‚àº N (1, Œ±i = pi1‚àípi ). It is worth noting that



3491

Œ± and p are one-to-one corresponded, and Œ± is a
monotonously increasing function of p. For more
details, please refer to Wang and Manning (2013).
Based on such approximation, we can use Œ± as
dropout criteria, e.g. throw away words with Œ±
above a certain given threshold Œ±T . We further
follow Louizos et al. (2017); Kingma et al. (2015);
Molchanov et al. (2017) to re-interpret the input
noise as the intrinsic stochasticity in the embed-
ding weights B itself as follows:

E(x|z) = OneHot(x) ¬∑B (5)

where B ‚àà RV ‚àóD follows a multi-variate Gaus-
sian distribution Bij ‚àº N (¬µij = Wij , œÉ2ij =
Œ±iW

2
ij), where the random weights in each row

has a tied variance/mean ratio Œ±i. Thus, we re-
write the evidence lower bound as follows:

logL(fŒ∏(x), y)) = log
‚à´
B

L(fŒ∏(E(x|z)), y))P(B)dB

‚â• E
B‚àºN (¬µ,œÉ)

[logL(fŒ∏(E(x|z)), y)]‚àíKL(N (¬µ, œÉ)||P(B))

=L(B, Œ∏)

where P(B) is the prior distribution and N (¬µ, œÉ)
denotes the Gaussian approximate posterior with
parameters ¬µ and œÉ. L(B, Œ∏) is used as the relaxed
evidence lower bound of marginal log likelihood
logL(fŒ∏(x), y)). Here, we follow Kingma et al.
(2015); Louizos et al. (2017) to choose the prior
distributionP(B) as the ‚Äúimproper log-scaled uni-
form distribution‚Äù to guarantee that the regulariza-
tion term DKL(N (¬µ, œÉ)||P(B)) only depends on
dropout ratio Œ±, i.e. irrelevant to ¬µ. Formally, we
write the prior distribution as follows:

P(log |Bij |) = const‚Üí P(|Bij |) ‚àù
1

|Bij | (6)

Since there exists no closed-form expression for
such KL-divergence, we follow Louizos et al.
(2017) to approximate it by the following formula
with minimum variance:

DKL = ‚àík1œÉ(k2 + k3 logŒ±) +
1

2
log(1 +

1

Œ±
) + k1

k1 = 0.63576 k2 = 1.87320 k3 = 1.48695
(7)

By adopting the improper log-uniform prior, more
weights are compressed towards zero, and the KL-
divergence is negatively correlated with dropout
ratio Œ±. Intuitively, the dropout ratio Œ±i is an
redundancy indicator for ith word in the vocab-
ulary, with larger Œ±i meaning less performance
loss caused by dropping ith word. During train-
ing, we use re-parameterization trick (Kingma and

Welling, 2013) to sample embedding weights from
the normal distribution to reduce the Monte-Carlo
variance in Bayesian training.

3.3 Vocabulary Selection

After optimization, we can obtain the dropout ratio
Œ±i associated with each word wi. We propose to
select vocabulary subset based on the dropout ratio
by using a threshold Œ±T . Therefore, the remaining
vocabulary subset is described as follows:

VÃÇ = {wi ‚àà V |Œ±i < Œ±T } (8)

where we use VÃÇ to denote the subset vocabulary of
interest, by adjusting Œ±T we are able to control the
selected vocabulary size.

4 Experiments

We compare the proposed vocabulary selection al-
gorithm against several strong baselines on a wide
range of text classification tasks and datasets.

4.1 Datasets & Architectures

The main datasets we are using are listed in Ta-
ble 2, which provides an overview of its descrip-
tion and capacities. Specifically, we follow (Zhang
et al., 2015; Goo et al., 2018; Williams et al.,
2018) to pre-process the document classification
datasets, natural language understanding dataset
and natural language inference dataset. We ex-
actly replicate their experiment settings to make
our method comparable with theirs. Our mod-
els is implemented with TensorFlow (Abadi et al.,
2015). In order to evaluate the generalization abil-
ity of VVD selection algorithm in deep learning
architectures, we study its performance under dif-
ferent established architectures (depicted in Fig-
ure 3). In natural language understanding, we
use the most recent attention-based model for in-
tention tracking (Goo et al., 2018), this model
first uses BiLSTM recurrent network to leverage
left-to-right and right-to-left context information
to form the hidden representation, then computes
self-attention weights to aggregate the hidden rep-
resentation and predicts user intention. In doc-
ument classification, we mainly follow the CNN
architecture (Kim, 2014) to extract n-gram fea-
tures and then aggregate these features to pre-
dict document category. In natural language in-
ference, we follow the popular ESIM architec-
ture (Williams et al., 2018; Chen et al., 2017) us-



3492

Datasets Task Description #Class #Train #Test

ATIS-flight (Tur et al., 2010) NLU Classify Airline Travel dialog 21 4,478 893Snips (Coucke et al., 2018) Classify inputs to personal voice assistant 7 13,084 700

AG-news (Zhang et al., 2015)

DC

Categories: World, Sports, etc 4 120,000 7,600
DBPedia (Lehmann et al., 2015) Categories: Company, Athlete, Album, etc 14 560,000 70,000
Sogou-news (Zhang et al., 2015) Categories: Sports, Technology, etc 5 450,000 60,000
Yelp-review (Zhang et al., 2015) Categories: Review Ratings (1-5) 5 650,000 50,000

SNLI (Bowman et al., 2015) NLI Entailment: Contradict, Neutral,Entail 3 550,152 10,000MNLI (Williams et al., 2018) Multi-Genre Entailment 3 392,702 10,000

Table 2: An overview of different datasets under different classification tasks including description and sizes.

‚Ñé" ‚Ñé# ‚Ñé$ ‚Ñé%

Intent	Attention

ùë•" ùë•# ùë•$ ùë•%

+

Intent ùë¶

ùë•" ùë•# ùë•$ ùë•%

Convolution	 Network

Pooling/Flatten

Category ùë¶

ùëù" ùëù# ùëù$ ùëù%‚Ñé" ‚Ñé# ‚Ñé$ ‚Ñé%

Natural Language Understanding Document Classification Natural Language Inference

Local	Inference

Inference	Composition Entailment ùë¶

ùëö" ùëö# ùëö$ ùëö%

Figure 3: The neural network architecture overview of different NLP tasks.

ing the Github implementation3. In this structure,
three main components input encoding, local in-
ference modeling, and inference composition are
used to perform sequential inference and composi-
tion to simulate the interaction between premises
and hypothesis. Note that, we do not apply the
syntax-tree based LSTM proposed in (Chen et al.,
2017) because we lost the parse tree (Klein and
Manning, 2003) after the vocabulary compression,
instead, we follow the simpler sequential LSTM
framework without any syntax parse as input. Be-
sides, the accuracy curve is obtained using the
publicly available test split rather than the official
online evaluation because we need to evaluate lots
of times at different vocabulary capacity.

4.2 Baselines

Here we mainly consider the following baselines:

Frequency-based (task-agnostic) This ap-
proach is already extensively talked about
in section 1, its basic idea is to rank the word
based on its frequency and then set a threshold to
cut off the long tail distribution.

TF-IDF (task-agnostic) This algorithm views
the vocabulary selection as a retrieval prob-
lem (Ramos et al., 2003), where term frequency
is viewed as the word frequency and document

3https://github.com/coetaur0/ESIM

frequency is viewed as the number of sentences
where such word appears. Here we follow the
canonical TF-IDF approach to compute the re-
trieval score as follows:

tfidf(w,D) = tf(w)Œª ‚àó (log N
nw

)1‚àíŒª (9)

where tf(w) denotes the word frequency, Œª is the
balancing factor, N denotes the number of sen-
tences and nw denotes the number of sentences in
which w appears. We rank the whole vocabulary
based on the tfidf and cut off at given threshold.

Group Lasso (task-aware) This baseline aims
to find intrinsic sparse structures (Liu et al., 2015;
Park et al., 2016; Wen et al., 2016) by grouping
each row of word embedding. The regularization
objective is described as follows, which aims at
finding the row-wise sparse structure:

Lreg =
‚àë
i

(
‚àë
j

W 2ij)
1
2 (10)

After optimized with the above regularization, we
use a threshold-based selection strategy on the
row-norm of embedding matrix, the selected vo-
cabulary is described as VÃÇ = {wi ‚àà V|||Wi||2 >
Œ≤T }, where Œ≤T is the threshold.

4.3 Experimental Results
Here we demonstrate our results in natural lan-
guage understanding, document classification, and



3493

Datasets / Reported Accuracy Accuracy Vocab Methods AUC Vocab@-3% Vocab@-5%

Snips / 96.7 (Liu and Lane, 2016)

95.9

11000

Frequency 77.4 81 61
95.9 TF-IDF 77.6 81 62
95.6 Group Lasso 82.1 77 52
96.0 VVD 82.5 52 36

ATIS-Flight / 94.1 (Goo et al., 2018)

93.8

724

Frequency 70.1 33 28
93.8 TF-IDF 70.5 34 28
93.8 Group Lasso 72.9 30 26
94.0 VVD 74.8 29 26

AG-news / 91.1 (Zhang et al., 2015)

91.6

61673

Frequency 67.1 2290 1379
91.6 TF-IDF 67.8 2214 1303
91.2 Group Lasso 68.3 1867 1032
91.6 VVD 70.5 1000 673

DBPedia / 98.3 (Zhang et al., 2015)

98.4

563355

Frequency 69.7 1000 743
98.4 TF-IDF 71.7 1703 804
97.9 Group Lasso 71.9 768 678
98.5 VVD 72.2 427 297

Sogou-news / 95.0 (Zhang et al., 2015)

93.7

254495

Frequency 70.9 789 643
93.7 TF-IDF 71.3 976 776
93.6 Group Lasso 73.4 765 456
94.0 VVD 75.5 312 196

Yelp-review / 58.0 (Zhang et al., 2015)

56.3

252712

Frequency 74.0 1315 683
56.3 TF-IDF 74.1 1630 754
56.5 Group Lasso 75.4 934 463
57.4 VVD 77.9 487 287

SNLI / 86.7 (Williams et al., 2018)

84.1

42392

Frequency 72.2 2139 1362
84.1 TF-IDF 72.8 2132 1429
84.6 Group Lasso 73.6 1712 1093
85.5 VVD 75.0 1414 854

MNLI / 72.3 (Williams et al., 2018)

69.2

100158

Frequency 78.5 1758 952
69.2 TF-IDF 78.7 1656 934
70.1 Group Lasso 79.2 1466 711
71.2 VVD 80.1 1323 641

Table 3: Experimental Results on various NLP tasks and datasets on the proposed metrics in subsection 2.3. Bold
accuracy means the result is statistically significantly better than the competitors.

natural language inference separately in Table 3.
From these tables, first of all, we can observe that
VVD is able to maintain or even improve the re-
ported accuracy on DC and NLU tasks, the accu-
racy of VVD is reported under dropping out the
words with dropout rate larger than 0.95. The ex-
ception is in NLI (Williams et al., 2018), where the
common approach uses GloVe (Pennington et al.,
2014) for initialization, and we use random initial-
ization, which makes our model fall slightly be-
hind. It is worth noting that Frequency-based/TF-
IDF methods are based on the model trained with
cross entropy, while both Group-Lasso and VVD
modify the objective function by adding additional
regularization. It can be seen that VVD is per-
forming very similar to the baseline models on DC
and NLU tasks, while consistently outperform-
ing the baseline methods (with random initialized
embedding) on more challenging NLI and Yelp-

Review tasks, that said, VVD can also be viewed
as a generally effective regularization technique
to sparsify features and alleviate the over-fitting
problem in NLP tasks. In terms of the vocabulary
selection capability, our proposed VVD is demon-
strated to outperform the competing algorithms in
terms of both AUC and Vocab@-X% metrics con-
sistently over different datasets as shown in Ta-
ble 3. In order to better understand the margin
between VVD and frequency-based method, we
plot their accuracy-vocab curves in Figure 4, from
which we can observe that the accuracy curves
start from nearly the same accuracy with the full
vocabulary, by gradually decreasing the budget
VÃÇ , VVD decreases at a much lower rate than the
competing algorithms, which clearly reflects its
superiority under limited-budget scenario. From
the empirical result, we can conclude that: 1)
the retrieval-based selection algorithm can yield



3494

Figure 4: The accuracy-vocab curve of VVD, TF-IDF and frequency-based baseline, the datasets used are AG-
news, DBPedia and Yelp-review respectively.

Natural Language Understanding

Document Classification

Natural Language Inference

Figure 5: The vocabulary selection spectrum of our
proposed VVD algorithm on different NLP tasks.

picture,	search,	neighborhood,	 look,	 theatre,	closest,
when,	showing,	 use,	watch,	photograph,	 eat,	

soundtrack,	 hear,	painting,	 tell,	trailer

easy,	d,	zero,	people,	 series,	am,	three,	serves,	 one,	
area,	five,	textbook,	 new,	get,	with,	two,	she

+

-

Figure 6: The vocabulary selected (+)/unselected (-) by
VVD compared to frequency-based baseline.

marginal improvement over the AUC metric, but
the vocab@-X% metric deteriorates. 2) group-
lasso and VVD algorithm directly considers the
connection between each word and end classifi-
cation accuracy; such task-awareness can greatly
in improving both evaluation metrics. Here we
show that NLU datasets are relatively simpler,
which only involves detecting key words from hu-

Figure 7: The vocabulary cloud of Snips NLU dataset.

man voice inputs to make decent decisions, a key-
word vocabulary within 100 is already enough for
promising accuracy. For DC datasets, which in-
volve better inner-sentence and inter-sentence un-
derstanding, hundred-level vocabulary is required
for most cases. NLI datasets involve more compli-
cated reasoning and interaction, which requires a
thousand-level vocabulary.

Case Study To provide an overview of what
words are selected, we depict the selection spec-
trum over different NLP tasks in Figure 5, from
which we observe that most of the selected vo-
cabulary are still from the high-frequency area
to ensure coverage, which also explains why the
frequency-based algorithm is already very strong.
Furthermore, we use the Snips dataset (Coucke
et al., 2018) to showcase the difference be-
tween the vocabularies selected by VVD and
by frequency-based baseline. The main goal
of this dataset is to understand the speaker‚Äôs
intention such as ‚ÄúBookRestaurant‚Äù, ‚ÄúPlayMu-
sic‚Äù, and ‚ÄúSearchLocalEvent‚Äù. We show the se-
lected/unselected words by our algorithm in Fig-
ure 6 under a vocabulary budget of 100, it is
observed that many non-informative but frequent
functional words like ‚Äúget‚Äù, ‚Äúwith‚Äù, and ‚Äúfive‚Äù are
unselected while more task-related but less fre-
quent words like ‚Äúneighborhood‚Äù, ‚Äúsearch‚Äù, ‚Äúthe-
atre‚Äù are selected. More vividly, we demon-
strate the word cloud of the selected vocabulary
of Snips (Coucke et al., 2018) in Figure 7.

4.4 Discussion
Here we will talk about some potential issues
posed when training and evaluating VVD.

Training Speed Due to the stochasticity of
VVD, the training of text classification takes
longer than canonical cross entropy objective.
More importantly, we observe that with the in-



3495

crease the full vocabulary size, the convergence
time of VVD also increases sub-linearly but the
convergence time of Cross Entropy remains quite
consistent. We conjecture that this is due to the
fact that the VVD algorithm has a heavier bur-
den to infer the drop out the probability of the
long tail words. Therefore, we propose to use a
two-step vocabulary reduction to dramatically de-
crease VVD‚Äôs training time, in the first step, we
cut off the rare words without having any harm on
the final accuracy, then we continue training with
VVD on the shrunk vocabulary. By applying such
a hybrid methodology, we are able to decrease the
training time dramatically.

Evaluation Speed As we know, at each vocab-
ulary point, the network needs to perform once
evaluation on the whole test set. Therefore, it is
not practical to draw each vocabulary size from 1
to V and perform V times of evaluation. Given
the limited computational resources, we need to
sample some vocabulary size and estimate the area
under curve relying on only these points. Uni-
formly sampling the data points are proved waste-
ful, since when the accuracy curve will converge
to a point very early, most of the sampled point
is actually getting equivalent accuracy. Therefore,
we propose to increase the interval exponentially
to cover more samples at extremely low vocabu-
lary size. For example, given the total vocabulary
of 60000, the interval will be split into 1, 2, 4,
8, 24, 56, ..., 60K. Using such sampling method
achieve a reasonably accurate estimation of ROC
with only O(log(|V |)) sample points, which is af-
fordable under many cases.

5 Related Work

Neural Network Compression In order to bet-
ter apply the deep neural networks under limited-
resource scenarios, much recent research has
been performed to compress the model size and
decrease the computation resources. In sum-
mary, there are mainly three directions, weight
matrices approximation (Le et al., 2015; Tjan-
dra et al., 2017), reducing the precision of the
weights (Hubara et al., 2017; Han et al., 2015)
and sparsification of the weight matrix (Wen et al.,
2016). Another group of sparsification relies on
the Bayesian inference framework (Molchanov
et al., 2017; Neklyudov et al., 2017; Louizos et al.,
2017). The main advantage of the Bayesian spar-
sification techniques is that they have a small

number of hyperparameters compared to pruning-
based methods. As stated in (Chirkova et al.,
2018), Bayesian compression also leads to a
higher sparsity level (Molchanov et al., 2017; Nek-
lyudov et al., 2017; Louizos et al., 2017). Our
proposed VVD is inspired by these predecessors
to specifically tackle the vocabulary redundancy
problem in NLP tasks.

Vocabulary Reduction An orthogonal line of
research for dealing similar vocabulary redun-
dancy problem is the character-based approaches
to reduce vocabulary sise (Kim et al., 2016; Zhang
et al., 2015; Costa-JussaÃÄ and Fonollosa, 2016; Lee
et al., 2017), which decomposes the words into its
characters forms for better handling open world
inputs. However, these approaches are not ap-
plicable to character-free languages like Chinese
and Japanese. Moreover, splitting words into char-
acters incurs potential lose of word-level surface
form, and thus needs more parameters at the neu-
ral network level to recover it to maintain the end
task performance (Zhang et al., 2015), which con-
tradicts with our initial motivation of compress-
ing the neural network models for computation-
or memory-constrained scenarios.

6 Conclusion

In this paper, we propose a vocabulary selection
algorithm which can find sparsity in the vocabu-
lary and dynamically decrease its size to contain
only the useful words. Through our experiments,
we have empirically demonstrated that the com-
monly adopted frequency-based vocabulary selec-
tion is already a very strong mechanism, further
applying our proposed VVD can further improve
the compression ratio. However, due to the time
and memory complexity issues, our algorithm and
evaluation are more suitable for classification-
based application. In the future, we plan to in-
vestigate broader applications like summarizaion,
translation, question answering, etc.

Acknowledgements

The authors would like to thank the anonymous
reviewers for their thoughtful comments. This re-
search was sponsored in part by NSF 1528175.
Any opinions, findings, and conclusions or rec-
ommendations expressed in this material are those
of the author(s) and do not necessarily reflect the
views of the National Science Foundation.



3496

References
Martƒ±ÃÅn Abadi, Ashish Agarwal, Paul Barham, Eugene

Brevdo, Zhifeng Chen, Craig Citro, Greg S. Cor-
rado, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Ian Goodfellow, Andrew Harp,
Geoffrey Irving, Michael Isard, Yangqing Jia, Rafal
Jozefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh
Levenberg, Dandelion ManeÃÅ, Rajat Monga, Sherry
Moore, Derek Murray, Chris Olah, Mike Schus-
ter, Jonathon Shlens, Benoit Steiner, Ilya Sutskever,
Kunal Talwar, Paul Tucker, Vincent Vanhoucke,
Vijay Vasudevan, Fernanda VieÃÅgas, Oriol Vinyals,
Pete Warden, Martin Wattenberg, Martin Wicke,
Yuan Yu, and Xiaoqiang Zheng. 2015. TensorFlow:
Large-scale machine learning on heterogeneous sys-
tems. Software available from tensorflow.org.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
learning to align and translate. International Con-
ference on Learning Representations.

Samuel R. Bowman, Gabor Angeli, Christopher Potts,
and Christopher D. Manning. 2015. A large an-
notated corpus for learning natural language infer-
ence. In Proceedings of the 2015 Conference on
Empirical Methods in Natural Language Process-
ing, EMNLP 2015, Lisbon, Portugal, September 17-
21, 2015, pages 632‚Äì642.

Qian Chen, Xiaodan Zhu, Zhen-Hua Ling, Si Wei, Hui
Jiang, and Diana Inkpen. 2017. Enhanced LSTM for
natural language inference. In Proceedings of the
55th Annual Meeting of the Association for Compu-
tational Linguistics, ACL 2017, Vancouver, Canada,
July 30 - August 4, Volume 1: Long Papers, pages
1657‚Äì1668.

Nadezhda Chirkova, Ekaterina Lobacheva, and
Dmitry Vetrov. 2018. Bayesian compression
for natural language processing. arXiv preprint
arXiv:1810.10927.

Marta R. Costa-JussaÃÄ and JoseÃÅ A. R. Fonollosa. 2016.
Character-based neural machine translation. In Pro-
ceedings of the 54th Annual Meeting of the Associ-
ation for Computational Linguistics, ACL 2016, Au-
gust 7-12, 2016, Berlin, Germany, Volume 2: Short
Papers.

Alice Coucke, Alaa Saade, Adrien Ball, TheÃÅodore
Bluche, Alexandre Caulier, David Leroy, CleÃÅment
Doumouro, Thibault Gisselbrecht, Francesco Calt-
agirone, Thibaut Lavril, MaeÃàl Primet, and Joseph
Dureau. 2018. Snips voice platform: an embedded
spoken language understanding system for private-
by-design voice interfaces. CoRR, abs/1805.10190.

Manaal Faruqui, Yulia Tsvetkov, Dani Yogatama, Chris
Dyer, and Noah A. Smith. 2015. Sparse over-
complete word vector representations. In Proceed-
ings of the 53rd Annual Meeting of the Association
for Computational Linguistics and the 7th Interna-
tional Joint Conference on Natural Language Pro-
cessing of the Asian Federation of Natural Language

Processing, ACL 2015, July 26-31, 2015, Beijing,
China, Volume 1: Long Papers, pages 1491‚Äì1500.

Jerome Friedman, Trevor Hastie, and Robert Tibshi-
rani. 2010. A note on the group lasso and a sparse
group lasso. arXiv preprint arXiv:1001.0736.

Chih-Wen Goo, Guang Gao, Yun-Kai Hsu, Chih-Li
Huo, Tsung-Chieh Chen, Keng-Wei Hsu, and Yun-
Nung Chen. 2018. Slot-gated modeling for joint slot
filling and intent prediction. In Proceedings of the
2018 Conference of the North American Chapter of
the Association for Computational Linguistics: Hu-
man Language Technologies, Volume 2 (Short Pa-
pers), volume 2, pages 753‚Äì757.

Song Han, Huizi Mao, and William J Dally. 2015.
Deep compression: Compressing deep neural net-
works with pruning, trained quantization and huff-
man coding. International Conference on Learning
Representations.

Itay Hubara, Matthieu Courbariaux, Daniel Soudry,
Ran El-Yaniv, and Yoshua Bengio. 2017. Quantized
neural networks: Training neural networks with low
precision weights and activations. The Journal of
Machine Learning Research, 18(1):6869‚Äì6898.

Yoon Kim. 2014. Convolutional neural networks for
sentence classification. In Proceedings of the 2014
Conference on Empirical Methods in Natural Lan-
guage Processing, EMNLP 2014, October 25-29,
2014, Doha, Qatar, A meeting of SIGDAT, a Special
Interest Group of the ACL, pages 1746‚Äì1751.

Yoon Kim, Yacine Jernite, David Sontag, and Alexan-
der M Rush. 2016. Character-aware neural language
models. In AAAI, pages 2741‚Äì2749.

Diederik P Kingma, Tim Salimans, and Max Welling.
2015. Variational dropout and the local reparame-
terization trick. In Advances in Neural Information
Processing Systems, pages 2575‚Äì2583.

Diederik P Kingma and Max Welling. 2013. Auto-
encoding variational bayes. International Confer-
ence on Learning Representations.

Dan Klein and Christopher D Manning. 2003. Fast ex-
act inference with a factored model for natural lan-
guage parsing. In Advances in neural information
processing systems, pages 3‚Äì10.

Quoc V. Le, Navdeep Jaitly, and Geoffrey E. Hinton.
2015. A simple way to initialize recurrent networks
of rectified linear units. CoRR, abs/1504.00941.

Jason Lee, Kyunghyun Cho, and Thomas Hofmann.
2017. Fully character-level neural machine trans-
lation without explicit segmentation. TACL, 5:365‚Äì
378.

Jens Lehmann, Robert Isele, Max Jakob, Anja
Jentzsch, Dimitris Kontokostas, Pablo N Mendes,
Sebastian Hellmann, Mohamed Morsey, Patrick
Van Kleef, SoÃàren Auer, et al. 2015. Dbpedia‚Äìa



3497

large-scale, multilingual knowledge base extracted
from wikipedia. Semantic Web, 6(2):167‚Äì195.

Baoyuan Liu, Min Wang, Hassan Foroosh, Marshall
Tappen, and Marianna Pensky. 2015. Sparse con-
volutional neural networks. In Proceedings of the
IEEE Conference on Computer Vision and Pattern
Recognition, pages 806‚Äì814.

Bing Liu and Ian Lane. 2016. Attention-based recur-
rent neural network models for joint intent detection
and slot filling. In Interspeech 2016, 17th Annual
Conference of the International Speech Communica-
tion Association, San Francisco, CA, USA, Septem-
ber 8-12, 2016, pages 685‚Äì689.

Christos Louizos, Karen Ullrich, and Max Welling.
2017. Bayesian compression for deep learning.
In Advances in Neural Information Processing Sys-
tems, pages 3288‚Äì3298.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natural
Language Processing, EMNLP 2015, Lisbon, Portu-
gal, September 17-21, 2015, pages 1412‚Äì1421.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111‚Äì3119.

Dmitry Molchanov, Arsenii Ashukha, and Dmitry P.
Vetrov. 2017. Variational dropout sparsifies deep
neural networks. In Proceedings of the 34th Inter-
national Conference on Machine Learning, ICML
2017, Sydney, NSW, Australia, 6-11 August 2017,
pages 2498‚Äì2507.

Kirill Neklyudov, Dmitry Molchanov, Arsenii
Ashukha, and Dmitry P Vetrov. 2017. Structured
bayesian pruning via log-normal multiplicative
noise. In Advances in Neural Information Process-
ing Systems, pages 6775‚Äì6784.

Jongsoo Park, Sheng Li, Wei Wen, Ping Tak Peter
Tang, Hai Li, Yiran Chen, and Pradeep Dubey.
2016. Faster cnns with direct sparse convolutions
and guided pruning. International Conference on
Learning Representations.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP), pages 1532‚Äì1543.

Juan Ramos et al. 2003. Using tf-idf to determine word
relevance in document queries. In Proceedings of
the first instructional conference on machine learn-
ing, volume 242, pages 133‚Äì142.

Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. The Journal of Machine Learning
Research, 15(1):1929‚Äì1958.

Andros Tjandra, Sakriani Sakti, and Satoshi Naka-
mura. 2017. Compressing recurrent neural network
with tensor train. In 2017 International Joint Con-
ference on Neural Networks, IJCNN 2017, Anchor-
age, AK, USA, May 14-19, 2017, pages 4451‚Äì4458.

Gokhan Tur, Dilek Hakkani-TuÃàr, and Larry Heck.
2010. What is left to be understood in atis? In Spo-
ken Language Technology Workshop (SLT), 2010
IEEE, pages 19‚Äì24. IEEE.

Sida Wang and Christopher Manning. 2013. Fast
dropout training. In international conference on ma-
chine learning, pages 118‚Äì126.

Wei Wen, Chunpeng Wu, Yandan Wang, Yiran Chen,
and Hai Li. 2016. Learning structured sparsity in
deep neural networks. In Advances in Neural Infor-
mation Processing Systems, pages 2074‚Äì2082.

Adina Williams, Nikita Nangia, and Samuel R. Bow-
man. 2018. A broad-coverage challenge corpus
for sentence understanding through inference. In
Proceedings of the 2018 Conference of the North
American Chapter of the Association for Compu-
tational Linguistics: Human Language Technolo-
gies, NAACL-HLT 2018, New Orleans, Louisiana,
USA, June 1-6, 2018, Volume 1 (Long Papers), pages
1112‚Äì1122.

Dani Yogatama, Manaal Faruqui, Chris Dyer, and
Noah A. Smith. 2015. Learning word representa-
tions with hierarchical sparse coding. In Proceed-
ings of the 32nd International Conference on Ma-
chine Learning, ICML 2015, Lille, France, 6-11 July
2015, pages 87‚Äì96.

Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015.
Character-level convolutional networks for text clas-
sification. In Advances in neural information pro-
cessing systems, pages 649‚Äì657.


