



















































A Re-ranking Model for Dependency Parser with Recursive Convolutional Neural Network


Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics
and the 7th International Joint Conference on Natural Language Processing, pages 1159–1168,

Beijing, China, July 26-31, 2015. c©2015 Association for Computational Linguistics

A Re-ranking Model for Dependency Parser
with Recursive Convolutional Neural Network

Chenxi Zhu, Xipeng Qiu∗, Xinchi Chen, Xuanjing Huang
Shanghai Key Laboratory of Intelligent Information Processing, Fudan University

School of Computer Science, Fudan University
825 Zhangheng Road, Shanghai, China

{czhu13,xpqiu,xinchichen13,xjhuang}@fudan.edu.cn

Abstract

In this work, we address the prob-
lem to model all the nodes (words or
phrases) in a dependency tree with the
dense representations. We propose a
recursive convolutional neural network
(RCNN) architecture to capture syntac-
tic and compositional-semantic represen-
tations of phrases and words in a depen-
dency tree. Different with the original re-
cursive neural network, we introduce the
convolution and pooling layers, which can
model a variety of compositions by the
feature maps and choose the most infor-
mative compositions by the pooling lay-
ers. Based on RCNN, we use a discrimina-
tive model to re-rank a k-best list of can-
didate dependency parsing trees. The ex-
periments show that RCNN is very effec-
tive to improve the state-of-the-art depen-
dency parsing on both English and Chi-
nese datasets.

1 Introduction

Feature-based discriminative supervised models
have achieved much progress in dependency pars-
ing (Nivre, 2004; Yamada and Matsumoto, 2003;
McDonald et al., 2005), which typically use mil-
lions of discrete binary features generated from a
limited size training data. However, the ability of
these models is restricted by the design of features.
The number of features could be so large that the
result models are too complicated for practical use
and prone to overfit on training corpus due to data
sparseness.

Recently, many methods are proposed to learn
various distributed representations on both syn-
tax and semantics levels. These distributed repre-
sentations have been extensively applied on many

∗Corresponding author.

a,Det red,JJ bike,NN

Convolution

Pooling

a red bike,NN

a bike,NN red bike,NN

Figure 1: Illustration of a RCNN unit.

natural language processing (NLP) tasks, such as
syntax (Turian et al., 2010; Mikolov et al., 2010;
Collobert et al., 2011; Chen and Manning, 2014)
and semantics (Huang et al., 2012; Mikolov et al.,
2013). Distributed representations are to represent
words (or phrase) by the dense, low-dimensional
and real-valued vectors, which help address the
curse of dimensionality and have better general-
ization than discrete representations.

For dependency parsing, Chen et al. (2014)
and Bansal et al. (2014) used the dense vectors
(embeddings) to represent words or features and
found these representations are complementary
to the traditional discrete feature representation.
However, these two methods only focus on the
dense representations (embeddings) of words or
features. These embeddings are pre-trained and
keep unchanged in the training phase of parsing
model, which cannot be optimized for the specific
tasks.

Besides, it is also important to represent the
(unseen) phrases with dense vector in dependency
parsing. Since the dependency tree is also in re-
cursive structure, it is intuitive to use the recur-
sive neural network (RNN), which is used for con-
stituent parsing (Socher et al., 2013a). However,
recursive neural network can only process the bi-
nary combination and is not suitable for depen-
dency parsing, since a parent node may have two
or more child nodes in dependency tree.

In this work, we address the problem to rep-

1159



resent all level nodes (words or phrases) with
dense representations in a dependency tree. We
propose a recursive convolutional neural net-
work (RCNN) architecture to capture syntac-
tic and compositional-semantic representations of
phrases and words. RCNN is a general architec-
ture and can deal with k-ary parsing tree, there-
fore it is very suitable for dependency parsing. For
each node in a given dependency tree, we first use
a RCNN unit to model the interactions between it
and each of its children and choose the most infor-
mative features by a pooling layer. Thus, we can
apply the RCNN unit recursively to get the vector
representation of the whole dependency tree. The
output of each RCNN unit is used as the input of
the RCNN unit of its parent node, until it outputs a
single fixed-length vector at root node. Figure 1 il-
lustrates an example how a RCNN unit represents
the phrases “a red bike” as continuous vectors.

The contributions of this paper can be summa-
rized as follows.

• RCNN is a general architecture to model the
distributed representations of a phrase or sen-
tence with its dependency tree. Although
RCNN is just used for the re-ranking of the
dependency parser in this paper, it can be
regarded as semantic modelling of text se-
quences and handle the input sequences of
varying length into a fixed-length vector. The
parameters in RCNN can be learned jointly
with some other NLP tasks, such as text clas-
sification.

• Each RCNN unit can model the complicated
interactions of the head word and its children.
Combined with a specific task, RCNN can
capture the most useful semantic and struc-
ture information by the convolution and pool-
ing layers.

• When applied to the re-ranking model for
parsing, RCNN improve the accuracy of base
parser to make accurate parsing decisions.
The experiments on two benchmark datasets
show that RCNN outperforms the state-of-
the-art models.

2 Recursive Neural Network

In this section, we briefly describe the recur-
sive neural network architecture of (Socher et al.,
2013a).

a,Det red,JJ bike,NN

red bike,NP

a red bike,NP

Figure 2: Illustration of a RNN unit.

The idea of recursive neural networks (RNN)
for natural language processing (NLP) is to train a
deep learning model that can be applied to phrases
and sentences, which have a grammatical structure
(Pollack, 1990; Socher et al., 2013c). RNN can be
also regarded as a general structure to model sen-
tence. At every node in the tree, the contexts at the
left and right children of the node are combined
by a classical layer. The weights of the layer are
shared across all nodes in the tree. The layer com-
puted at the top node gives a representation for the
whole sentence.

Following the binary tree structure, RNN can
assign a fixed-length vector to each word at the
leaves of the tree, and combine word and phrase
pairs recursively to create intermediate node vec-
tors of the same length, eventually having one fi-
nal vector representing the whole sentence. Multi-
ple recursive combination functions have been ex-
plored, from linear transformation matrices to ten-
sor products (Socher et al., 2013c). Figure 2 illus-
trates the architecture of RNN.

The binary tree can be represented in the form
of branching triplets (p→ c1c2). Each such triplet
denotes that a parent node p has two children and
each ck can be either a word or a non-terminal
node in the tree.

Given a labeled binary parse tree,
((p2 → ap1), (p1 → bc)), the node represen-
tations are computed by

p1 = f(W
[

b
c

]
),p2 = f(W

[
a
p1

]
), (1)

where (p1,p2,a,b, c) are the vector representa-
tion of (p1, p2, a, b, c) respectively, which are de-
noted by lowercase bold font letters; W is a matrix
of parameters of the RNN.

Based on RNN, Socher et al. (2013a) intro-
duced a compositional vector grammar, which
uses the syntactically untied weights W to learn
the syntactic-semantic, compositional vector rep-
resentations. In order to compute the score of

1160



how plausible of a syntactic constituent a parent
is, RNN uses a single-unit linear layer for all pi:

s(pi) = v · pi, (2)

where v is a vector of parameters that need to be
trained. This score will be used to find the high-
est scoring tree. For more details on how standard
RNN can be used for parsing, see (Socher et al.,
2011).

Costa et al. (2003) applied recursive neural net-
works to re-rank possible phrase attachments in an
incremental constituency parser. Their work is the
first to show that RNNs can capture enough in-
formation to make the correct parsing decisions.
Menchetti et al. (2005) used RNNs to re-rank dif-
ferent constituency parses. For their results on full
sentence parsing, they re-ranked candidate trees
created by the Collins parser (Collins, 2003).

3 Recursive Convolutional Neural
Network

The dependency grammar is a widely used syntac-
tic structure, which directly reflects relationships
among the words in a sentence. In a dependency
tree, all nodes are terminal (words) and each node
may have more than two children. Therefore, the
standard RNN architecture is not suitable for de-
pendency grammar since it is based on the binary
tree. In this section, we propose a more general
architecture, called recursive convolutional neu-
ral network (RCNN), which borrows the idea of
convolutional neural network (CNN) and can deal
with to k-ary tree.

3.1 RCNN Unit

For ease of exposition, we first describe the ba-
sic unit of RCNN. A RCNN unit is to model a
head word and its children. Different from the
constituent tree, the dependency tree does not have
non-terminal nodes. Each node consists of a word
and its POS tags. Each node should have a differ-
ent interaction with its head node.

Word Embeddings Given a word dictionaryW ,
each word w ∈ W is represented as a real-valued
vector (word embedding) w ∈ Rm where m is the
dimensionality of the vector space. The word em-
beddings are then stacked into a embedding ma-
trix M ∈ Rm|W|. For a word w ∈ W , its cor-
responding word embedding Embed(w) ∈ Rm is
retrieved by the lookup table layer. The matrix M

xh =

xKx2x1

wh

d
(h,ci)

Convolution

Max pooling

···

···

···tanh

···
Phrase Representations of Children

Word Embedding

Distance Embedding

Figure 3: Architecture of a RCNN unit.

is initialized with pre-training embeddings and up-
dated by back-propagation.

Distance Embeddings Besides word embed-
dings, we also use distributed vector to represent
the relative distance of a head word h and one of
its children c. For example, as shown in Figure 1,
the relative distances of “bike” to “a” and “red” are
-2 and -1, respectively. The relative distances also
are mapped to a vector of dimension md (a hy-
perparameter); this vector is randomly initialized.
Distance embedding is a usual way to encode the
distance information in neural model, which has
been proven effectively in several tasks. Our ex-
perimental results also show that the distance em-
bedding gives more benefits than the traditional
representation. The relative distance can encode
the structure information of a subtree.

Convolution The word and distance embed-
dings are subsequently fed into the convolution
component to model the interactions between two
linked nodes.

Different with standard RNN, there are no non-
terminal nodes in dependency tree. Each node h
in dependency tree has two associated distributed
representations:

1. word embedding wh ∈ Rm, which is denoted
as its own information according to its word
form;

1161



2. phrase representation xh ∈ Rm, which is de-
noted as the joint representation of the whole
subtree rooted at h. In particular, when h is
leaf node, xh = wh.

Given a subtree rooted at h in dependency tree,
we define ci, 0 < i ≤ L as the i-th child node of
h, where L represents the number of children.

For each pair (h, ci), we use a convolutional
hidden layer to compute their combination repre-
sentation zi.

zi = tanh(W(h,ci)pi), 0 < i ≤ K, (3)

where W(h,ci) ∈ Rm×n is the linear composition
matrix, which depends on the POS tags of h and
ci; pi ∈ Rn is the concatenated representation of
h and the i-th child, which consists of the head
word embeddings wh, the child phrase represen-
tation xci and the distance embeddings d

h,ci of h
and ci,

pi = xh ⊕ xci ⊕ d(h,ci), (4)
where ⊕ represents the concatenation operation.

The distances dh,ci is the relative distance of h
and ci in a given sentence. Then, the relative dis-
tances also are mapped to m-dimensional vectors.
Different from constituent tree, the combination
should consider the order or position of each child
in dependency tree.

In our model, we do not use the POS tags em-
beddings directly. Since the composition matrix
varies on the different pair of POS tags of h and
ci, it can capture the different syntactic combina-
tions. For example, the combination of adjective
and noun should be different with that of verb and
noun.

After the composition operations, we use tanh
as the non-linear activation function to get a hid-
den representation z.

Max Pooling After convolution, we get Z(h) =
[z1, z2, · · · , zK ], where K is dynamic and de-
pends on the number of children of h. To trans-
form Z to a fixed length and determine the most
useful semantic and structure information, we per-
form a max pooling operation to Z on rows.

x(h)j = maxi
Z(h)j,i , 0 < j ≤ m. (5)

Thus, we obtain the vector representation xh ∈
Rm of the whole subtree rooted at node h.

Figure 3 shows the architecture of our proposed
RCNN unit.

root

eat

sashimiI with

chopsticks

RCNN Unitw(eat)

w(I) w(sashimi) x(with)

x(eat)

RCNN Unit

x(root)

w(root)

RCNN Unitw(with)

w(chopsticks)

Figure 4: Example of a RCNN unit

Given a whole dependency tree, we can apply
the RCNN unit recursively to get the vector rep-
resentation of the whole sentence. The output of
each RCNN unit is used as the input of the RCNN
unit of its parent node.

Thus, RCNN can be used to model the dis-
tributed representations of a phrase or sentence
with its dependency tree and applied to many NLP
tasks. The parameters in RCNN can be learned
jointly with the specific NLP tasks. Each RCNN
unit can model the complicated interactions of the
head word and its children. Combined with a spe-
cific task, RCNN can select the useful semantic
and structure information by the convolution and
max pooling layers.

Figure 4 shows an example of RCNN to model
the sentence “I eat sashimi with chopsitcks”.

4 Parsing

In order to measure the plausibility of a subtree
rooted at h in dependency tree, we use a single-
unit linear layer neural network to compute the
score of its RCNN unit.

For constituent parsing, the representation of a
non-terminal node only depends on its two chil-
dren. The combination is relative simple and its
correctness can be measured with the final repre-
sentation of the non-terminal node (Socher et al.,
2013a).

However for dependency parsing, all combina-
tions of the head h and its children ci(0 < i ≤ K)
are important to measure the correctness of the
subtree. Therefore, our score function s(h) is
computed on all of hidden layers zi(0 < i ≤ K):

s(h) =
K∑
i=1

v(h,ci) · zi, (6)

where v(h,ci) ∈ Rm×1 is the score vector, which

1162



also depends on the POS tags of h and ci.
Given a sentence x and its dependency tree y,

the goodness of a complete tree is measured by
summing the scores of all the RCNN units.

s(x, y,Θ) =
∑
h∈y

s(h), (7)

where h ∈ y is the node in tree y; Θ =
{ΘW,Θv,Θw,Θd} including the combination
matrix set ΘW, the score vector set Θv, the word
embeddings Θw and distance embeddings Θd.

Finally, we can predict dependency tree ŷ with
highest score for sentence x.

ŷ = arg max
y∈gen(x)

s(x, y,Θ), (8)

where gen(x) is defined as the set of all possible
trees for sentence x. When applied in re-ranking,
gen(x) is the set of the k-best outputs of a base
parser.

5 Training

For a given training instance (xi, yi), we use the
max-margin criterion to train our model. We first
predict the dependency tree ŷi with the highest
score for each xi and define a structured margin
loss ∆(yi, ŷi) between the predicted tree ŷi and
the given correct tree yi. ∆(yi, ŷi) is measured
by counting the number of nodes yi with an incor-
rect span (or label) in the proposed tree (Goodman,
1998).

∆(yi, ŷi) =
∑
d∈ŷi

κ1{d /∈ yi} (9)

where κ is a discount parameter and d represents
the nodes in trees.

Given a set of training dependency parses D,
the final training objective is to minimize the loss
function J(Θ), plus a l2-regulation term:

J(Θ) =
1
|D|

∑
(xi,yi)∈D

ri(Θ) +
λ

2
‖Θ‖22, (10)

where

ri(Θ) = max
ŷi∈Y (xi)

( 0, st(xi, ŷi,Θ)

+ ∆(yi, ŷi)− st(xi, yi,Θ) ) . (11)
By minimizing this object, the score of the cor-

rect tree yi is increased and the score of the highest
scoring incorrect tree ŷi is decreased.

We use a generalization of gradient descent
called subgradient method (Ratliff et al., 2007)
which computes a gradient-like direction. The
subgradient of equation is:

∂J

∂Θ
=

1
|D|

∑
(xi,yi)∈D

(
∂st(xi, ŷi,Θ)

∂Θ
−

∂st(xi, yi,Θ)
∂Θ

) + λΘ. (12)

To minimize the objective, we use the diagonal
variant of AdaGrad (Duchi et al., 2011). The pa-
rameter update for the i-th parameter Θt,i at time
step t is as follows:

Θt,i = Θt−1,i − ρ√∑t
τ=1 g

2
τ,i

gt,i, (13)

where ρ is the initial learning rate and gτ ∈ R|θi|
is the subgradient at time step τ for parameter θi.

6 Re-rankers

Re-ranking k-best lists was introduced by Collins
and Koo (2005) and Charniak and Johnson (2005).
They used discriminative methods to re-rank the
constituent parsing. In the dependency parsing,
Sangati et al. (2009) used a third-order generative
model for re-ranking k-best lists of base parser.
Hayashi et al. (2013) used a discriminative for-
est re-ranking algorithm for dependency parsing.
These re-ranking models achieved a substantial
raise on the parsing performances.

Given T (x), the set of k-best trees of a sentence
x from a base parser, we use the popular mixture
re-ranking strategy (Hayashi et al., 2013; Le and
Mikolov, 2014), which is a combination of the our
model and the base parser.

ŷi = arg max
y∈T (xi)

αst(xi, y,Θ) + (1− α)sb(xi, y)
(14)

where α ∈ [0, 1] is a hyperparameter; st(xi, y,Θ)
and sb(xi, y) are the scores given by RCNN and
the base parser respectively.

To apply RCNN into re-ranking model, we first
get the k-best outputs of all sentences in train
set with a base parser. Thus, we can train the
RCNN in a discriminative way and optimize the
re-ranking strategy for a particular base parser.

Note that the role of RCNN is not fully valued
when applied in re-ranking model since that the
gen(x) in Eq.(8) is just the k-best outputs of a base

1163



parser, not the set of all possible trees for sentence
x. The parameters of RCNN could overfit to k-
best outputs of training set.

7 Experiments

7.1 Datasets
To empirically demonstrate the effectiveness of
our approach, we use two datasets in different lan-
guages (English and Chinese) in our experimen-
tal evaluation and compare our model against the
other state-of-the-art methods using the unlabeled
attachment score (UAS) metric ignoring punctua-
tion.

English For English dataset, we follow the stan-
dard splits of Penn Treebank (PTB), using
sections 2-21 for training, section 22 as de-
velopment set and section 23 as test set. We
tag the development and test sets using an au-
tomatic POS tagger (at 97.2% accuracy), and
tag the training set using four-way jackknif-
ing similar to (Collins and Koo, 2005).

Chinese For Chinese dataset, we follow the same
split of the Penn Chinese Treeban (CTB5)
as described in (Zhang and Clark, 2008) and
use sections 001-815, 1001-1136 as training
set, sections 886-931, 1148- 1151 as devel-
opment set, and sections 816-885, 1137-1147
as test set. Dependencies are converted by us-
ing the Penn2Malt tool with the head-finding
rules of (Zhang and Clark, 2008). And fol-
lowing (Zhang and Clark, 2008) (Zhang and
Nivre, 2011), we use gold segmentation and
POS tags for the input.

We use the linear-time incremental parser
(Huang and Sagae, 2010) as our base parser and
calculate the 64-best parses at the top cell of the
chart. Note that we optimize the training settings
for base parser and the results are slightly im-
proved on (Huang and Sagae, 2010). Then we use
max-margin criterion to train RCNN. Finally, we
use the mixture strategy to re-rank the top 64-best
parses.

For initialization of parameters, we train
word2vec embeddings (Mikolov et al., 2013) on
Wikipedia corpus for English and Chinese respec-
tively. For the combination matrices and score
vectors, we use the random initialization within
(0.01, 0.01). The parameters which achieve the
best unlabeled attachment score on the develop-
ment set will be chosen for the final evaluation.

7.2 English Dataset

We first evaluate the performances of the RCNN
and re-ranker (Eq. (14)) on the development set.
Figure 5 shows UASs of different models with
varying k. The base parser achieves 92.45%.
When k = 64, the oracle best of base parser
achieves 97.34%, while the oracle worst achieves
73.30% (-19.15%) . RCNN achieves the maxi-
mum improvement of 93.00%(+0.55%) when k =
6. When k > 6, the performance of RCNN de-
clines with the increase of k but is still higher
than baseline (92.45%). The reason behind this
is that RCNN could require more negative sam-
ples to avoid overfitting when k is large. Since the
negative samples are limited in the k-best outputs
of a base parser, the learnt parameters could easily
overfits to the training set.

The mixture re-ranker achieves the maximum
improvement of 93.50%(+1.05%) when k = 64.
In mixture re-ranker, α is optimised by searching
with the step-size 0.005.

Therefore, we use the mixture re-ranker in the
following experiments since it can take the advan-
tages of both the RCNN and base models.

Figure 6 shows the accuracies on the top ten
POS tags of the modifier words with the largest
improvements. We can see that our re-ranker
can improve the accuracies of CC and IN, and
therefore may indirectly result in rising the the
well-known coordinating conjunction and PP-
attachment problems.

The final experimental results on test set are
shown in Table 1. The hyperparameters of our
model are set as in Table 2. Our re-ranker achieves
the maximum improvement of 93.83%(+1.48%)
on test set. Our system performs slightly better
than many state-of-the-art systems such as Zhang
and Clark (2008) and Huang and Sagae (2010).
It outperforms Hayashi et al. (2013) and Le and
Zuidema (2014), which also use the mixture re-
ranking strategy.

Since the result of ranker is conditioned to k-
best results of base parser, we also do an experi-
ment to avoid this limitation by adding the oracle
to k-best candidates. With including oracle, the
re-ranker can achieve 94.16% on UAS, which is
shown in the last line (“our re-ranker (with ora-
cle)”) of Table 1.

1164



1 2 3 4 5 6 7 8 9 10 32 64
92

93

94

95

96

97

k

U
A

S(
%

)

Oracle Best
RCNN

Re-ranker

1 2 3 4 5 6 7 8 9 10 32 64

75

80

85

90

95

k

U
A

S(
%

)

Oracle Best
RCNN

Re-ranker
Oracle Worst

(a) without the oracle worst result (b) with the oracle worst result

Figure 5: UAS with varying k on the development set. Oracle best: always choosing the best result in the
k-best of base parser; Oracle worst: always choosing the worst result in the k-best of base parser; RCNN:
choosing the most probable candidate according to the score of RCNN; Re-ranker: a combination of the
RCNN and base parser.

WRB JJR WDT VBG VBP JJS RB CC MD IN

75

80

85

90

95

U
A

S(
%

)

Base Paser Re-ranker

Figure 6: Accuracies on the top ten POS tags of
the modifier words with the largest improvements
on the development set.

7.3 Chinese Dataset

We also make experiments on the Penn Chinese
Treebank (CTB5). The hyperparameters is the
same as the previous experiment on English except
that α is optimised by searching with the step-size
0.005.

The final experimental results on the test set
are shown in Table 3. Our re-ranker achieves the
performance of 85.71%(+0.25%) on the test set,
which also outperforms the previous state-of-the-
art methods. With adding oracle, the re-ranker can
achieve 87.43% on UAS, which is shown in the
last line (“our re-ranker (with oracle)”) of Table 3.

UAS
Traditional Methods
Zhang and Clark (2008) 91.4
Huang and Sagae (2010) 92.1
Distributed Representations
Stenetorp (2013) 86.25
Chen et al. (2014) 93.74
Chen and Manning (2014) 92.0
Re-rankers
Hayashi et al. (2013) 93.12
Le and Zuidema (2014) 93.12
Our baseline 92.35
Our re-ranker 93.83(+1.48)
Our re-ranker (with oracle) 94.16

Table 1: Accuracy on English test set. Our base-
line is the result of base parser; our re-ranker uses
the mixture strategy on the 64-best outputs of base
parser; our re-ranker(with oracle) is to add the or-
acle to k-best outputs of base parser.

Compared with the re-ranking model of Hayashi et
al. (2013), that use a large number of handcrafted
features, our model can achieve a competitive per-
formance with the minimal feature engineering.

7.4 Discussions

The performance of the re-ranking model is af-
fected by the base parser. The small divergence of
the dependency trees in the output list also results
to overfitting in training phase. Although our re-

1165



Word embedding size m = 25
Distance embedding size md = 25
Initial learning rate ρ = 0.1
Margin loss discount κ = 2.0
Regularization λ = 10−4

k-best k = 64

Table 2: Hyperparameters of our model

UAS
Traditional Methods
Zhang and Clark (2008) 84.33
Huang and Sagae (2010) 85.20
Distributed Representations
Chen et al. (2014) 82.94
Chen and Manning (2014) 83.9
Re-rankers
Hayashi et al. (2013) 85.9
Our baseline 85.46
Our re-ranker 85.71(+0.25)
Our re-ranker (with oracle) 87.43

Table 3: Accuracy on Chinese test set.

ranker outperforms the state-of-the-art methods, it
can also benefit from improving the quality of the
candidate results. It was also reported in other re-
ranking works that a larger k (eg. k > 64) results
the worse performance. We think the reason is that
the oracle best increases when k is larger, but the
oracle worst decrease with larger degree. The er-
ror types increase greatly. The re-ranking model
requires more negative samples to avoid overfit-
ting. When k is larger, the number of negative
samples also needs to multiply increase for train-
ing. However, we just can obtain at most k neg-
ative samples from the k-best outputs of the base
parser.

The experiments also show that the our model
can achieves significant improvements by adding
the oracles into the output lists of the base parser.
This indicates that our model can be boosted by
a better set of the candidate results, which can be
implemented by combining the RCNN in the de-
coding algorithm.

8 Related Work

There have been several works to use neural net-
works and distributed representation for depen-
dency parsing.

Σ

a,Det red,JJ bike,NN

a red bike,NN

Figure 7: Example of a DT-RNN unit

Stenetorp (2013) attempted to build recursive
neural networks for transition-based dependency
parsing, however the empirical performance of his
model is still unsatisfactory. Chen and Manning
(2014) improved the transition-based dependency
parsing by representing all words, POS tags and
arc labels as dense vectors, and modeled their in-
teractions with neural network to make predictions
of actions. Their methods aim to transition-based
parsing and can not model the sentence in seman-
tic vector space for other NLP tasks.

Socher et al. (2013b) proposed a composi-
tional vectors computed by dependency tree RNN
(DT-RNN) to map sentences and images into a
common embedding space. However, there are
two major differences as follows. 1) They first
summed up all child nodes into a dense vector vc
and then composed subtree representation from vc
and vector parent node. In contrast, our model
first combine the parent and each child and then
choose the most informative features with a pool-
ing layer. 2) We represent the relative position
of each child and its parent with distributed rep-
resentation (position embeddings), which is very
useful for convolutional layer. Figure 7 shows an
example of DTRNN to illustrates how RCNN rep-
resents phrases as continuous vectors.

Specific to the re-ranking model, Le and
Zuidema (2014) proposed a generative re-ranking
model with Inside-Outside Recursive Neural Net-
work (IORNN), which can process trees both
bottom-up and top-down. However, IORNN
works in generative way and just estimates the
probability of a given tree, so IORNN cannot fully
utilize the incorrect trees in k-best candidate re-
sults. Besides, IORNN treats dependency tree as a
sequence, which can be regarded as a generaliza-
tion of simple recurrent neural network (SRNN)
(Elman, 1990). Unlike IORNN, our proposed
RCNN is a discriminative model and can opti-
mize the re-ranking strategy for a particular base

1166



parser. Another difference is that RCNN computes
the score of tree in a recursive way, which is more
natural for the hierarchical structure of natural lan-
guage. Besides, the RCNN can not only be used
for the re-ranking, but also be regarded as general
model to represent sentence with its dependency
tree.

9 Conclusion

In this work, we address the problem to rep-
resent all level nodes (words or phrases) with
dense representations in a dependency tree. We
propose a recursive convolutional neural net-
work (RCNN) architecture to capture the syntac-
tic and compositional-semantic representations of
phrases and words. RCNN is a general architec-
ture and can deal with k-ary parsing tree, there-
fore RCNN is very suitable for many NLP tasks
to minimize the effort in feature engineering with
a external dependency parser. Although RCNN
is just used for the re-ranking of the dependency
parser in this paper, it can be regarded as seman-
tic modelling of text sequences and handle the in-
put sequences of varying length into a fixed-length
vector. The parameters in RCNN can be learned
jointly with some other NLP tasks, such as text
classification.

For the future research, we will develop an inte-
grated parser to combine RCNN with a decoding
algorithm. We believe that the integrated parser
can achieve better performance without the limi-
tation of base parser. Moreover, we also wish to
investigate the ability of our model for other NLP
tasks.

Acknowledgments

We would like to thank the anonymous review-
ers for their valuable comments. This work
was partially funded by the National Natural Sci-
ence Foundation of China (61472088, 61473092),
the National High Technology Research and De-
velopment Program of China (2015AA015408),
Shanghai Science and Technology Development
Funds (14ZR1403200), Shanghai Leading Aca-
demic Discipline Project (B114).

References
Mohit Bansal, Kevin Gimpel, and Karen Livescu.

2014. Tailoring continuous word representations for
dependency parsing. In Proceedings of the Annual

Meeting of the Association for Computational Lin-
guistics.

Eugene Charniak and Mark Johnson. 2005. Coarse-
to-fine n-best parsing and maxent discriminative
reranking. In Proceedings of the 43rd Annual Meet-
ing of the Association for Computational Linguis-
tics (ACL’05), pages 173–180, Ann Arbor, Michi-
gan, June. Association for Computational Linguis-
tics.

Danqi Chen and Christopher D Manning. 2014. A fast
and accurate dependency parser using neural net-
works. In Proceedings of the 2014 Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 740–750.

Wenliang Chen, Yue Zhang, and Min Zhang. 2014.
Feature embedding for dependency parsing. In Pro-
ceedings of COLING 2014, the 25th International
Conference on Computational Linguistics: Techni-
cal Papers, pages 816–826, Dublin, Ireland, August.
Dublin City University and Association for Compu-
tational Linguistics.

Michael Collins and Terry Koo. 2005. Discriminative
reranking for natural language parsing. Computa-
tional Linguistics, 31(1):25–70.

Michael Collins. 2003. Head-driven statistical mod-
els for natural language parsing. Computational lin-
guistics, 29(4):589–637.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. The Journal of Machine Learning Re-
search, 12:2493–2537.

Fabrizio Costa, Paolo Frasconi, Vincenzo Lombardo,
and Giovanni Soda. 2003. Towards incremental
parsing of natural language using recursive neural
networks. Applied Intelligence, 19(1-2):9–25.

John Duchi, Elad Hazan, and Yoram Singer. 2011.
Adaptive subgradient methods for online learning
and stochastic optimization. The Journal of Ma-
chine Learning Research, 12:2121–2159.

Jeffrey L Elman. 1990. Finding structure in time.
Cognitive science, 14(2):179–211.

Joshua Goodman. 1998. Parsing inside-out. arXiv
preprint cmp-lg/9805007.

Katsuhiko Hayashi, Shuhei Kondo, and Yuji Mat-
sumoto. 2013. Efficient stacked dependency pars-
ing by forest reranking. TACL, 1:139–150.

Liang Huang and Kenji Sagae. 2010. Dynamic pro-
gramming for linear-time incremental parsing. In
Proceedings of the 48th Annual Meeting of the Asso-
ciation for Computational Linguistics, pages 1077–
1086. Association for Computational Linguistics.

1167



Eric Huang, Richard Socher, Christopher Manning,
and Andrew Ng. 2012. Improving word represen-
tations via global context and multiple word proto-
types. In Proceedings of the 50th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers), pages 873–882, Jeju Island,
Korea, July. Association for Computational Linguis-
tics.

Quoc V. Le and Tomas Mikolov. 2014. Distributed
representations of sentences and documents. In Pro-
ceedings of ICML.

Phong Le and Willem Zuidema. 2014. The inside-
outside recursive neural network model for depen-
dency parsing. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 729–739, Doha, Qatar,
October. Association for Computational Linguistics.

Ryan McDonald, Koby Crammer, and Fernando
Pereira. 2005. Online large-margin training of de-
pendency parsers. In Proceedings of the 43rd An-
nual Meeting on Association for Computational Lin-
guistics, ACL ’05, pages 91–98.

Sauro Menchetti, Fabrizio Costa, Paolo Frasconi, and
Massimiliano Pontil. 2005. Wide coverage natural
language processing using kernel methods and neu-
ral networks for structured data. Pattern Recogni-
tion Letters, 26(12):1896–1906.

Tomas Mikolov, Martin Karafiát, Lukas Burget, Jan
Cernockỳ, and Sanjeev Khudanpur. 2010. Recur-
rent neural network based language model. In IN-
TERSPEECH.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in Neural Information Processing
Systems.

Joakim Nivre. 2004. Incrementality in deterministic
dependency parsing. In Proceedings of the Work-
shop on Incremental Parsing: Bringing Engineering
and Cognition Together, pages 50–57. Association
for Computational Linguistics.

Jordan B Pollack. 1990. Recursive distributed repre-
sentations. Artificial Intelligence, 46(1):77–105.

Nathan D Ratliff, J Andrew Bagnell, and Martin A
Zinkevich. 2007. (online) subgradient methods
for structured prediction. In Eleventh International
Conference on Artificial Intelligence and Statistics
(AIStats).

Federico Sangati, Willem Zuidema, and Rens Bod.
2009. A generative re-ranking model for depen-
dency parsing. In Proceedings of the 11th Interna-
tional Conference on Parsing Technologies, pages
238–241. Association for Computational Linguis-
tics.

Richard Socher, Cliff C Lin, Chris Manning, and An-
drew Y Ng. 2011. Parsing natural scenes and nat-
ural language with recursive neural networks. In
Proceedings of the 28th International Conference on
Machine Learning (ICML-11), pages 129–136.

Richard Socher, John Bauer, Christopher D Manning,
and Andrew Y Ng. 2013a. Parsing with compo-
sitional vector grammars. In In Proceedings of the
ACL conference. Citeseer.

Richard Socher, Q Le, C Manning, and A Ng. 2013b.
Grounded compositional semantics for finding and
describing images with sentences. In NIPS Deep
Learning Workshop.

Richard Socher, Alex Perelygin, Jean Wu, Jason
Chuang, Christopher D. Manning, Andrew Ng, and
Christopher Potts. 2013c. Recursive deep models
for semantic compositionality over a sentiment tree-
bank. In EMNLP.

Pontus Stenetorp. 2013. Transition-based dependency
parsing using recursive neural networks. In NIPS
Workshop on Deep Learning.

Joseph Turian, Lev Ratinov, and Yoshua Bengio. 2010.
Word representations: a simple and general method
for semi-supervised learning. In ACL.

H. Yamada and Y. Matsumoto. 2003. Statistical de-
pendency analysis with support vector machines. In
Proceedings of the International Workshop on Pars-
ing Technologies (IWPT), volume 3.

Yue Zhang and Stephen Clark. 2008. A tale of
two parsers: investigating and combining graph-
based and transition-based dependency parsing us-
ing beam-search. In Proceedings of the Conference
on Empirical Methods in Natural Language Pro-
cessing, pages 562–571. Association for Computa-
tional Linguistics.

Yue Zhang and Joakim Nivre. 2011. Transition-based
dependency parsing with rich non-local features. In
Proceedings of the 49th Annual Meeting of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies: short papers-Volume 2, pages
188–193. Association for Computational Linguis-
tics.

1168


