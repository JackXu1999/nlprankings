




































An Integrated Approach for Keyphrase Generation via Exploring the Power of Retrieval and Extraction


Proceedings of NAACL-HLT 2019, pages 2846–2856
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

2846

An Integrated Approach for Keyphrase Generation via Exploring the
Power of Retrieval and Extraction

Wang Chen1, Hou Pong Chan1, Piji Li2, Lidong Bing3, Irwin King1
1The Chinese University of Hong Kong, Shatin, N.T., Hong Kong

2Tencent AI Lab
3R&D Center Singapore, Machine Intelligence Technology, Alibaba DAMO Academy

1{wchen, hpchan, king}@cse.cuhk.edu.hk
2pijili@tencent.com, 3l.bing@alibaba-inc.com

Abstract

In this paper, we present a novel integrated ap-
proach for keyphrase generation (KG). Unlike
previous works which are purely extractive
or generative, we first propose a new multi-
task learning framework that jointly learns
an extractive model and a generative model.
Besides extracting keyphrases, the output of
the extractive model is also employed to rec-
tify the copy probability distribution of the
generative model, such that the generative
model can better identify important contents
from the given document. Moreover, we re-
trieve similar documents with the given doc-
ument from training data and use their asso-
ciated keyphrases as external knowledge for
the generative model to produce more accu-
rate keyphrases. For further exploiting the
power of extraction and retrieval, we propose
a neural-based merging module to combine
and re-rank the predicted keyphrases from
the enhanced generative model, the extractive
model, and the retrieved keyphrases. Experi-
ments on the five KG benchmarks demonstrate
that our integrated approach outperforms the
state-of-the-art methods.

1 Introduction

Keyphrases are short text pieces that can quickly
express the key ideas of a given document. The
keyphrase generation task aims at automatically
generating a set of keyphrases given a docu-
ment. As shown in the upper part of Figure 1,
the input is a document and the output is a set
of keyphrases. Due to the concise and precise
expression, keyphrases are beneficial to exten-
sive downstream applications such as text sum-
marization (Zhang et al., 2004; Wang and Cardie,
2013), sentiment analysis (Wilson et al., 2005;
Berend, 2011), and document clustering (Hulth
and Megyesi, 2006; Hammouda et al., 2005).

Existing methods on keyphrase generation

Document:
Futility-Based Offspring Sizing.  Parameter control in evolutionary algorithms 
(EAs) has been shown to be beneficial; however, the control of offspring size has so far 
received very little attention. This paper introduces Futility-Based Offspring Sizing 
(FuBOS), a method for controlling offspring size on a per generation basis without 
even requiring the user to set an initial offspring size value. . . 
Keyphrases:
{evolutionary algorithm; parameterless evolutionary algorithm;                                                                          
parameter control; offspring sizing; optimization}

Retrieved Document:
An Exploration into Dynamic Population Sizing. Traditional evolutionary algorithms
are powerful problem solvers that have several fixed parameters which require prior 
specification. . . While many methods of parameter control have been published that 
focus on removing the population size parameter, µ, all hampered by a variety of 
problems. This paper investigates the benefits of making µ a dynamic parameter and 
introduces two novel methods for population control. . . 
Retrieved Keyphrases:
{evolutionary algorithm; parameterless evolutionary algorithm; 
parameter control; population sizing; optimization}

Figure 1: An example of keyphrase generation and re-
trieval. The present keyphrases are bold.

can be divided into two categories: extractive
and generative. Extractive methods (Medelyan
et al., 2009; Mihalcea and Tarau, 2004; Zhang
et al., 2016; Luan et al., 2017) identify present
keyphrases that appear in the source text like
“parameter control” in Figure 1. Although extrac-
tive methods are simple to implement, they cannot
predict absent keyphrases which are not in the doc-
ument like “optimization” in Figure 1. Generative
methods (Meng et al., 2017; Chen et al., 2018a; Ye
and Wang, 2018; Yuan et al., 2018) adopt the well-
known encoder-decoder generative model (Luong
et al., 2015; Bahdanau et al., 2014) with copy
mechanism (Gu et al., 2016; See et al., 2017) to
produce keyphrases. In a generative model, the de-
coder generates keyphrases word by word through
either selecting from a predefined vocabulary ac-
cording to a language model or copying from the
source text according to the copy probability dis-
tribution computed by a copy mechanism. Thus,
these generative methods are capable of generat-
ing both present and absent keyphrases.

From a high-level perspective, extractive meth-
ods directly locate essential phrases in the docu-



2847

ment while generative models try to understand
the document first and then produce keyphrases.
To the best of our knowledge, these two kinds
of methods have been developing independently
without any combinations among them.

However, when human annotators are asked to
assign keyphrases to a document, they usually first
obtain a global sense about which parts of the
document are important and then write down the
keyphrases word by word based on a more detailed
understanding. To achieve such a goal, we propose
a multi-task learning framework to take advan-
tage of both extractive and generative models. For
keyphrase extraction, we adopt a neural sequence
labeling model to output the likelihood of each
word in the source text to be a keyphrase word
(or the importance score of each word). These
importance scores are then employed to rectify
the copy probability distribution of the generative
model. Since the extractive model is explicitly
trained to identify keyphrases from the source text,
its importance scores can help the copy mecha-
nism to identify important source text words more
accurately. Different from the copy probability
distribution which is dynamic at each generation
step, these importance scores are static. There-
fore, they can provide a global sense about which
parts of the document are important. In addition,
these scores are also utilized to extract present
keyphrases which will be exploited by the merg-
ing module.

Moreover, human annotators can also in-
corporate relevant external knowledge like the
keyphrases of similar documents that they read be-
fore to assign more appropriate keyphrases. Cor-
respondingly, to incorporate external knowledge,
we propose a retriever to retrieve similar docu-
ments of the given document from training data.
For instance, as shown in Figure 1, we retrieve
a document from the KP20k training dataset that
has the highest similarity with the upper docu-
ment. The retrieved document is assigned with
almost the same keyphrases as the upper docu-
ment. Therefore, keyphrases from similar docu-
ments (i.e., retrieved keyphrases) can give useful
knowledge to guide the generation of keyphrases
for the given document. More concretely, we en-
code the retrieved keyphrases as vector represen-
tations and use them as an external memory for
the decoder of the generative model in our multi-
task learning framework. Besides providing ex-

ternal knowledge, the retrieved keyphrases them-
selves are regarded as a kind of keyphrase predic-
tion and can be utilized by the merging module.

Finally, to imitate the integrated keyphrase as-
signment process of humans more comprehen-
sively, we further exploit the extractive model and
the retrieved keyphrases by proposing a merg-
ing module. This merging module collects and
re-ranks the predictions from our aforementioned
components. First, keyphrase candidates are col-
lected from three different sources: (1) keyphrases
generated by the enhanced generative model; (2)
keyphrases extracted by the extractive model; and
(3) the retrieved keyphrases. Then, we design
a neural-based merging algorithm to merge and
re-rank all the keyphrase candidates, and conse-
quently return the top-ranked candidates as our fi-
nal keyphrases.

We extensively evaluate the performance of our
proposed approach on five popular benchmarks.
Experimental results demonstrate the effective-
ness of the extractive model and the retrieved
keyphrases in our multi-task learning framework.
Furthermore, after introducing the merging mod-
ule, our integrated approach consistently outper-
forms all the baselines and becomes the new state-
of-the-art approach for keyphrase generation.

In summary, our main contributions include: (1)
a new multi-task learning framework that lever-
ages an extractive model and external knowledge
to improve keyphrase generation; (2) a novel
neural-based merging module that combines the
predicted keyphrases from extractive, generative,
and retrieval methods to further improve the per-
formance; and (3) the new state-of-the-art perfor-
mance on five real-world benchmarks.

2 Related Work

2.1 Automatic Keyphrase Extraction

Keyphrase extraction focuses on predicting the
keyphrases that are present in the source text.
Existing methods can mainly be categorized into
two-step extraction approaches and sequence la-
beling models. Two-step extraction approaches
first identify a set of candidate phrases from the
document using different heuristics, such as the
phrases that match specific part-of-speech (POS)
tags (Liu et al., 2011; Wang et al., 2016; Le et al.,
2016). Then, they learn a score for each candi-
date and select the top-ranked candidates as pre-
dicted keyphrases. The scores can be learned by



2848

either supervised methods with hand-crafted tex-
tual features (Medelyan et al., 2009; Witten et al.,
1999; Nguyen and Kan, 2007; Frank et al., 1999;
Hulth, 2003) or unsupervised graph ranking meth-
ods (Mihalcea and Tarau, 2004; Grineva et al.,
2009; Wan and Xiao, 2008). Sequence labeling
models are built on a recurrent neural network to
sequentially go through a source text and learn
the likelihood of each word in the source text to
be a keyphrase word (Zhang et al., 2016; Luan
et al., 2017; Gollapalli et al., 2017). In contrast to
these extractive methods, our approach can gener-
ate both absent and present keyphrases.

2.2 Automatic Keyphrase Generation

Keyphrase generation aims at predicting both
present and absent keyphrases for a source
text. Meng et al. (2017) proposed CopyRNN,
which is built on the attentional encoder-decoder
model (Bahdanau et al., 2014) with copy mech-
anism (Gu et al., 2016) to generate keyphrases.
CorrRNN (Chen et al., 2018a), an extension of
CopyRNN, was proposed to model the correla-
tions among keyphrases. This model utilizes hid-
den states and attention vectors of previously gen-
erated keyphrases to avoid generating repetitive
keyphrases. The title information of the source
text was explicitly exploited by Ye and Wang
(2018) and Chen et al. (2018b) to further improve
the performance. Ye and Wang (2018) first consid-
ered a semi-supervised setting for keyphrase gen-
eration. In contrast, inspired by Hsu et al. (2018)
and Cao et al. (2018), we enhance existing gener-
ative methods by adopting an extractive model to
assist the copy mechanism and exploiting external
knowledge from retrieved keyphrases to help the
generation. Furthermore, we also design a merg-
ing module to combine the predictions from dif-
ferent components.

3 Our Methodology

As shown in Figure 2, our integrated framework
consists of a retriever, two encoders, an extrac-
tor, a decoder, and a merging module. Given a
document x, the retriever returns the keyphrases
r retrieved from the training corpus. In addition
to acting as keyphrase candidates, these retrieved
keyphrases are also exploited to provide external
guidance for the decoder. Then keyphrase extrac-
tion and generation are jointly conducted by the
extractor and the decoder through sharing an en-

Encoder1

Decoder

Extractor

Merging Module

The source text 𝐱

The retrieved keyphrases 𝐫

Encoder2

Extracted 
Candidates

Generated
Candidates

Retrieved 
Candidates

𝐔

𝐔

𝐕

𝜷

Final
Predictions

Retriever

Figure 2: Our integrated framework. The “Encoder1”
and the “Extractor” compose our extractive model. Our
generative model mainly includes the “Encoder1”, the
“Encoder2”, and the “Decoder”.

coder. Besides extracting keyphrase candidates,
the importance scores of the source text words,
β, predicted by the extractor are also employed
to rescale the original copy probability distribu-
tion of the decoder. Thus, they can help the copy
mechanism to detect important words more accu-
rately. Finally, the merging module merges the
candidates from three different sources (i.e., the
retrieved, extracted, and generated candidates) and
output the final predictions.

3.1 Retriever

Given a document x, the retriever module re-
trieves top K (document, keyphrases) pairs from
the training corpus. The retrieval is based on the
Jaccard similarities of the non-stop-word sets be-
tween x and the corpus documents. After that,
the keyphrases of the top K pairs are returned and
used in the later modules in two ways. First, these
retrieved keyphrases are regarded as the keyphrase
candidates of x and directly fed into the final
merging module. In addition, these keyphrases
are concatenated together as a guidance input r
for the decoder to provide useful external knowl-
edge for the generation process. A separator token
is inserted among keyphrases when concatenating
them together.

3.2 Joint Extraction and Generation

We propose a multi-task learning framework
which simultaneously learns to extract keyphrases
from the source text and generate keyphrases word



2849

by word with external knowledge. Before describ-
ing in detail, we first define the tasks of the extrac-
tion and the generation.

3.2.1 Problem Definition
The inputs of the multi-task learning frame-
work are the source text x and the concatenated
retrieved keyphrases r. Both x and r are a se-
quence of tokens (i.e., x = [x1, ..., xLx ], r =
[r1, ..., rLr ]), where Lx and Lr are the length of x
and r respectively. The output of the extractor is a
sequence of importance scores β = [β1, ..., βLx ],
where βi is the probability of the i-th source word
of being a keyphrase word. The output of the gen-
erator is a set of keyphrases Y = {yi}i=1,..,N ,
where N is the keyphrase number of x and yi =
[yi1, ..., y

i
Lyi

] is a token sequence with length Lyi .
To fit the encoder-decoder framework, N tuples
{(x, r,β∗, (yi)∗)}i=1,...,N are split during train-
ing, where β∗ and (yi)∗ are the gold binary im-
portance scores and one of the gold keyphrases
of x correspondingly. For simplicity, we adopt
(x, r,β∗,y∗) to represent such a tuple.

3.2.2 Encoders
Two encoders are employed in our multi-task
learning framework. One is for the source text
encoding (i.e., “Encoder1” in Figure 2) and the
other is for retrieved keyphrases encoding (i.e.,
“Encoder2” in Figure 2). Both of them employ
a bidirectional GRU (Cho et al., 2014) layer to ob-
tain a context-aware representation of each word:

ui = BiGRU1(xi,−→u i−1,←−u i+1), (1)
vj = BiGRU2(rj ,−→v j−1,←−v j+1), (2)

where i = 1, 2, ..., Lx and j = 1, 2, ..., Lr. xi
and rj are the de-dimensional embedding vectors
of the i-th source text word xi and j-th retrieved
keyphrases word rj respectively. ui = [−→u i;←−u i] ∈
Rd and vj = [−→v j ;←−v j ] ∈ Rd are regarded as
the corresponding context-aware representations,
where d is the hidden size of the biderectional
GRU layer. Finally, we obtain the internal mem-
ory bank U = [u1, ...,uLx ] for later extraction
and generation, and the external memory bank
V = [v1, ...,vLr ] for later generation.

3.2.3 Extractor
Based on the internal memory bank, we use the
following sequence identifier as our extractor to
identify whether the word is a keyphrase word in

the source text. We denote the importance score
P (βj = 1|uj , sj ,d) as βj for simplicity:

βj = sigmoid(Wcuj + uTj Wsd

− uTj Wntanh(sj) + b),
(3)

where d = tanh(Wd[
−→u Lx ;

←−u 1]+b) is the global
document representation and sj =

∑j−1
i=1 uiβi is

current summary representation. Wc,Ws, and
Wn are the content, salience and novelty weights
respectively. Although this extractor is inspired
by Nallapati et al. (2017), our extractor identifies
important words instead of sentences within the
source text.

3.2.4 Decoder
In addition to the internal memory bank
[u1, ...,uLx ], our decoder employs the exter-
nal memory bank [v1, ...,vLr ] to provide external
guidance for the generation process. We exploit
a decoder equipped with attention and copy
mechanisms (Luong et al., 2015; See et al., 2017)
to generate keyphrases. This decoder mainly
consists of a forward GRU layer:

ht =
−−→
GRU([et−1; h̃t−1],ht−1), (4)

cint = attn(ht, [u1, ...,uLx ],Win), (5)

cext = attn(ht, [v1, ...,vLr ],Wex), (6)

h̃t = tanh(W1[cint ; c
ex
t ];ht), (7)

where et−1 is the embedding vector of the (t −
1)-th predicted word. The “attn” operation in
Eq. (5) is defined as cint =

∑Lx
i=1 α

in
t,iui, where

αint,i = exp(st,i)/
∑Lx

j=1 exp(st,j) and st,i =
(ht)

TWinui. Similarly, we can obtain the exter-
nal aggregated vector cext .

Then, the final predicted probability distribution
at the current time step is:

P (yt) = (1− gt)Pv(yt) + gtPc(yt), (8)

where gt = σ(wTg h̃t + bg) ∈ R is the soft
switch between generating from the predefined
vocabulary V and copying from X that are all
words appearing in the source text. Pv(yt) =
softmax(W2h̃t + bv) ∈ R|V | is the generat-
ing probability distribution over V and Pc(yt) =∑

i:xi=yt
αct,i ∈ R|X| is the copying probability

distribution over X . Previous work either directly
uses the internal attention scores as the copy prob-
abilities (i.e., αct,i = α

in
t,i) or employs extra neural

network layers to calculate new copy scores. But



2850

we employ the rescaled internal attention scores
αint by the importance scores [β1, ..., βLx ] from the
extractor as the final copy probabilities:

αct,i =
αint,i ∗ βi∑Lx
j=1 α

in
t,j ∗ βj

. (9)

The purpose of this rescaling is to provide extra
guidance that which words within the source text
are important and thus should obtain more atten-
tion when copying.

3.2.5 Joint Training
Finally, the summation of the following extraction
loss and generation loss is used to train the whole
joint framework in an end-to-end way.

Extraction Loss. We choose the source text
words appearing in the assigned keyphrases as
the gold important words and use the weighted
cross-entropy loss for the extraction training i.e.,
Le = − 1Lx

∑Lx
j=1wβ

∗
j logβj+(1−β∗j )log(1−βj),

where β∗j ∈ {0, 1} is the ground-truth label for the
j-th word and w is the loss weight for the positive
training samples.

Generation Loss. The negative log likelihood
loss is utilized for the generation training i.e.,
Lg = −

∑Ly∗
t=1 logP (y

∗
t |yt−1,x, r), where yt =

[y1, ..., yt−1] is the previously predicted word se-
quence, Ly∗ is the length of target keyphrase y∗,
and y∗t is the t-th target word in y

∗.

3.3 Merging Module

In this module, the retrieved, extracted and gener-
ated keyphrases are collected and then merged to
produce the final keyphrase predictions.

3.3.1 Keyphrase Candidate Collection
Retrieved Candidate Collection. The retrieved
keyphrases from the retriever are regarded as the
retrieved candidates. Each retrieved candidate
(rk) obtains a retrieval score (rs) that is the Jac-
card similarity between the corresponding docu-
ment and x. The duplicates with lower retrieval
scores are removed. Finally, we get Nrk retrieved
keyphrase candidates rk = [rk1, . . . , rkNrk ] and
their retrieval scores rs = [rs1, . . . , rsNrk ].

Extracted Candidate Collection. The ex-
tracted keyphrase candidates are from the extrac-
tor. We select the word xj as a keyword if its
importance score βj is larger or equal than a
threshold � (i.e., βj ≥ �). The adjacent key-
words compound a keyphrase candidate. If no

other adjacent keywords, the keyword itself be-
comes a single-word keyphrase candidate. Each
extracted keyphrase candidate (ek) is accompa-
nied by an extraction score (es) that is the mean
of the importance scores of the words within this
candidate. Similarly, duplicates with lower ex-
traction scores are removed. Consequently, we
obtain Nek extracted keyphrase candidates ek =
[ek1, . . . , ekNek ] and the corresponding extraction
scores es = [es1, . . . , esNek ].

Generated Candidate Collection. The gen-
erated keyphrase candidates directly come from
the beam search process of the decoder. Each
generated phrase is a keyphrase candidate. The
beam search score of the generated candidate
(gk) represents its generation score (gs). Dupli-
cates with lower generation scores are removed.
Then, we get Ngk generated candidates gk =
[gk1, . . . , gkNgk ] and their generation scores gs =
[gs1, . . . , gsNgk ].

3.3.2 Merging

In addition to the original importance scores
(i.e., rs, es,gs), we also employ an auxiliary
scorer to assign an auxiliary importance score to
each keyphrase candidate. Given a document-
candidate pair (x, candidate), the scorer should
output the probability that the candidate is one
of the keyphrases of x. That means the scorer
should determine the relationship between the
given document x and the candidate, which is sim-
ilar to a natural language inference (NLI) prob-
lem. Therefore, we adapt the most popular NLI
model (Parikh et al., 2016) as our scorer. Differ-
ent from typical natural language inference which
is a multi-class classification problem, we use a
binary classification setting to train the scorer. Be-
sides, we learn the word embeddings and use two
bi-directional GRU to obtain the input representa-
tions. The positive samples are the ground-truth
keyphrases. The negative samples come from ei-
ther the phrases in the document or the retrieved
candidates. Notably, the ground-truth keyphrases
are filtered when selecting negative samples. Con-
sequently, a cross-entropy loss is utilized to train
the scorer. Finally, the trained scorer is used to
help the merging process as shown in Algorithm 1.
The ugsurs and

ugs
ues

factors are used to enforce the av-
erage of rs and es to be the same with the average
of gs and thus these three scores become compa-
rable.



2851

Algorithm 1 Merging Algorithm
Require: The retrieved, extracted and generated candidates

rk, ek,gk. The retrieval, extraction and generation
scores rs, es,gs; The average of each kind of score:
urs, ues, ugs; The trained scorer; The document x.

1: Adjust gs: gsi = gsi × scorer(x, gki) where i =
1, . . . , Ngk.

2: Adjust rs: rsi = rsi × ugsurs × scorer(x, rki) where
i = 1, . . . , Nrk.

3: Adjust es: esi = esi × ugsues × scorer(x, eki) where
i = 1, . . . , Nek.

4: Merge rk, ek,gk: the final importance score of a candi-
date is the summation of its adjusted retrieval, extraction
and generation scores. If not in rk, ek or gk, the corre-
sponding scores are set to 0.

5: Sort all the candidates based on the final importance
scores and then output the final predictions.

4 Experiment Settings

4.1 Datasets

Similar to Meng et al. (2017), we use KP20k
dataset (Meng et al., 2017) to train our mod-
els. The released dataset contains 530,809 arti-
cles for training, 20,000 for validation, and the
other 20,000 for testing. However, there exist du-
plicates in the KP20k training dataset with itself,
the KP20k validation dataset, the KP20k testing
dataset, and other four popular testing datasets
(i.e., Inspec (Hulth, 2003), Krapivin (Krapivin
et al., 2009), NUS (Nguyen and Kan, 2007), and
SemEval (Kim et al., 2010)). After removing
these duplicates, we maintain 509,818 articles
in the training dataset. As for testing, follow-
ing Meng et al. (2017), we employ five popular
testing datasets from scientific publications as our
testbeds for the baselines and our methods, which
include Inspec, Krapivin, NUS, SemEval, and
KP20k.

4.2 Baseline Models and Evaluation Metrics

For a comprehensive evaluation, we compare
our methods with the traditional extractive base-
lines and the state-of-the-art generative methods.
The extractive baselines include two unsupervised
methods (i.e., TF-IDF and TextRank (Mihalcea
and Tarau, 2004)) and one supervised method
Maui (Medelyan et al., 2009). The generative
baselines consist of CopyRNN (Meng et al., 2017)
and CorrRNN (Chen et al., 2018a). We also con-
duct several ablation studies as follows:

• KG-KE. The joint extraction and generation
model without using the retrieved keyphrases
and merging process.

• KG-KR. The encoder-decoder generative
model with retrieved keyphrases as external
knowledge, but without combining with the
extractive model and using the merging process.

• KG-KE-KR. The joint extraction and genera-
tion model with the retrieved keyphrases with-
out using the merging process.

All the above ablation models directly use the gen-
erated candidates as the final predictions. We de-
note our final integrated method which combines
all the proposed modules as KG-KE-KR-M.

Similar to CopyRNN and CorrRNN, we adopt
macro-averaged recall (R) and F-measure (F1) as
our evaluation metrics. In addition, we also ap-
ply Porter Stemmer before determining whether
two keyphrases are identical. Duplications are re-
moved after stemming.

4.3 Implementation Details

We apply similar preprocessing procedures
with Meng et al. (2017) including lowercasing,
tokenizing and replacing digits with 〈digit〉
symbol. The title and the abstract of each article
are concatenated as the source text input. We
use the KP20k training dataset as the retrieval
corpus. The implementations of our models are
based on the OpenNMT system (Klein et al.,
2017). The encoders, the decoder, and the scorer
have the same vocabulary V with 50,000 tokens.
The multi-task learning model and the scorer are
trained separately.

The embedding dimension de and the hidden
size d are set to 100 and 300 respectively. The ini-
tial state of the decoder GRU cell (i.e., h0) is set to
[−→u Lx ;

←−u 1]. The other GRU cells are set to zero.
The retrieval number K is set to 3 after evaluating
the retrieved keyphrases on the evaluation dataset.
When concatenating the retrieved keyphrases to-
gether as an external knowledge input, we use ‘;’
as the separator among them. During training,
all the trainable parameters including the embed-
dings are randomly initialized with uniform distri-
bution in [-0.1, 0.1]. We engage Adam (Kingma
and Ba, 2014) as the optimizer with positive ex-
traction loss weightw=9.0, batch size=64, dropout
rate=0.1, max gradient norm=1.0, initial learning
rate=0.001. The training is early stopped when
the validation perplexity stops dropping for several
continuous evaluations. While testing, the beam
search depth, and beam size are set as 6 and 200



2852

Model Inspec Krapivin NUS SemEval KP20kF1@5 F1@10 F1@5 F1@10 F1@5 F1@10 F1@5 F1@10 F1@5 F1@10
TF-IDF 0.188 0.269 0.092 0.120 0.103 0.142 0.076 0.135 0.087 0.113

TextRank 0.194 0.244 0.142 0.128 0.147 0.153 0.107 0.130 0.151 0.132
Maui 0.037 0.032 0.196 0.181 0.205 0.234 0.032 0.036 0.223 0.204

CorrRNN* 0.2297 0.2489 0.2552 0.2384 0.2735 0.2654 0.1973 0.2215 0.2912 0.2642
CopyRNN* 0.2517 0.2793 0.2684 0.2431 0.2752 0.2682 0.1906 0.2145 0.3061 0.2730

KG-KE 0.2544 0.2812 0.2653 0.2401 0.2784 0.2731 0.2074 0.2277 0.3070 0.2740
KG-KR 0.2442 0.2751 0.2665 0.2471 0.2782 0.2762 0.1897 0.2157 0.3111 0.2780

KG-KE-KR 0.2451 0.2784 0.2673 0.2462 0.2859 0.2794 0.1944 0.2202 0.3140 0.2800
KG-KE-KR-M 0.2572 0.2843 0.2723 0.2502 0.2894 0.2864 0.2026 0.2233 0.3170 0.2820

Table 1: Total keyphrase prediction results on all testing datasets. The best results are bold and the second best
results are underlined. The subscripts are corresponding standard deviations for neural-based models (e.g. 0.2572
means 0.257±0.002). The ‘*’ indicates our implementations based on Luong et al. (2015) attention and See et al.
(2017) copying. The implementations of our proposed models are based on “CopyRNN*”.

Model Inspec Krapivin NUS SemEval KP20k
TF-IDF 0.141 0.069 0.069 0.043 0.064

TextRank 0.158 0.110 0.094 0.062 0.110
Maui 0.024 0.162 0.161 0.012 0.196

CorrRNN* 0.1726 0.2176 0.2124 0.1253 0.2683
CopyRNN* 0.1957 0.2293 0.2168 0.1208 0.2851

KG-KE 0.1973 0.2253 0.2193 0.1355 0.2870
KG-KR 0.1901 0.2285 0.2227 0.1206 0.2930

KG-KE-KR 0.1913 0.2293 0.2245 0.1275 0.2951
KG-KE-KR-M 0.2012 0.2342 0.2346 0.1314 0.2990

Table 2: MAP@10 scores of total keyphrase predic-
tions. The best results are bold and the second best
results are underlined. The meanings of the subscripts
and the ‘*’ are the same as in Table 1.

correspondingly. The extraction threshold � is set
to 0.7 after evaluating the extracted keyphrases on
the evaluation dataset. Notably, the stemmer is not
applied to the gold keyphrases of SemEval test-
ing dataset since they have already been stemmed.
We do not remove any single-word predictions for
KP20k but only keep one single-word prediction
for other testing datasets. The averaged results of
three different random seed are reported1.

5 Results and Analysis

5.1 Total Keyphrase Prediction

Unlike the previous works which only separately
analyze the present and absent keyphrase predic-
tion ability, we also compare the whole keyphrase
prediction ability regardless of the presence or ab-
sence of keyphrases, which is more reasonable in
real applications. We show the F1 scores at the top
5 and 10 predictions on Table 1.

This table displays our KG-KE-KR-M method
consistently outperforms the state-of-the-art mod-

1Our code is available at https://github.com/Chen-Wang-
CUHK/KG-KE-KR-M

Inspec Krapivin NUS SemEval KP20k

0.300

0.325

0.350

0.375

0.400

(a
) P

re
se

nt
 F

1@
5 

M
ea

su
re CorrRNN

CopyRNN
KG-KE
KG-KR
KG-KE-KR
KG-KE-KR-M

Inspec Krapivin NUS SemEval KP20k
0.000

0.025

0.050

0.075

0.100

0.125

(b
) A

bs
en

t R
@

10
 M

ea
su

re

Figure 3: The present and absent keyphrase prediction
performance of all neural-based methods.

els CopyRNN and CorrRNN demonstrating the ef-
fectiveness of our method. Moreover, we also ob-
serve that the KG-KE model exceeds CopyRNN
and CorrRNN on most datasets, which indicates
the strength of our combination with the extractive
model. Besides, we also see the KG-KR model
perform comparably or better than the baselines,
suggesting the effective guidance ability of the re-
trieved keyphrases. In addition, after combining
these two ideas, the KG-KE-KR model surpasses
both or one of KG-KE and KG-KR on all datasets,
which shows the effectiveness of the combination
with extraction model and the retrieved keyphrases
again. Finally, the performance gap between KG-
KE-KR and KG-KE-KR-M implies the power of
our merging module. For mean average precision
(MAP) metric which considers prediction orders,
we obtain similar conclusions as shown in Table 2.

5.2 Present and Absent Keyphrase Prediction

In this section, we analyze the performance of
present and absent keyphrase prediction. Only



2853

Candidate Sources Total F1@10 Present F1@5 Absent R@10
gk, ek, rk 0.250±0.002 0.330±0.002 0.172±0.002
gk, ek 0.249±0.003 0.328±0.003 0.154±0.002
gk, rk 0.249±0.002 0.329±0.002 0.172±0.002
gk 0.248±0.003 0.327±0.003 0.154±0.002

gk, no merging 0.246±0.002 0.324±0.002 0.158±0.002
ek, no merging 0.152±0.005 0.226±0.010 N/A
rk, no merging 0.093±0.000 0.121±0.000 0.107±0.000

Table 3: Ablation study of the candidate sources of Al-
gorithm 1 on Krapivin dataset. “no merging” means we
do not use the merging algorithm.

the present (absent) predictions and gold present
(absent) keyphrases are preserved for the corre-
sponding evaluation. We use F1@5 metric for
present predictions and R@10 for absent predic-
tions. Since the neural-based baselines are the
state-of-the-art models, we focus on the compar-
ison with them in this section. The results are de-
picted on Figure 3.

The main observations are similar to the con-
clusions of total keyphrase prediction. Be-
sides, we also note that after incorporating re-
trieved keyphrases, KG-KR model achieves sub-
stantial improvement gains over baselines on ab-
sent keyphrase prediction on Krapivin, NUS, and
KP20k. These results demonstrate that the re-
trieved keyphrases indeed help the model to un-
derstand the main topics of the given document
since generating absent keyphrase is an abstrac-
tive process and requires more powerful text un-
derstanding abilities. We notice that the KG-
KE-KR-M method does not outperform the KG-
KE-KR model on absent keyphrase prediction
on Inspec dataset. One potential reason is that
the merging module only merges two sources
for absent keyphrases (i.e., the generated and re-
trieved keyphrases) instead of three sources like
the present keyphrases do. Hence, the improve-
ment for the absent keyphrases from the merg-
ing module is less stable than that for the present
keyphrases. Moreover, we find that after combin-
ing with the extraction model, the KG-KE model
achieves a huge improvement gain over Copy-
RNN on present keyphrase prediction on SemEval
dataset, which manifests such a combination can
improve the keyphrase extraction ability of the
generative model.

5.3 Ablation Study on Merging Module
We also conduct in-depth ablation studies on our
merging module. The objectives of these ablation
studies are to (1) evaluate the effects of different

Scoring Method Total F1@10 Present F1@5 Absent R@10
Combined 0.250±0.002 0.330±0.002 0.172±0.002

Only gs, es, rs 0.248±0.003 0.325±0.003 0.166±0.003
Only scorer 0.210±0.005 0.291±0.006 0.106±0.005

Table 4: Ablation study of the scoring method of Algo-
rithm 1 on Krapivin dataset. “Only gs, es, rs” means
we do not use the scorer. “Only scorer” represents we
directly use the scores predicted by the scorer as the
final importance scores.

candidate sources (i.e., what kinds of candidates
are merged), and (2) analyze the effects of differ-
ent final importance score calculating methods.

Concerning candidate sources, we show the ab-
lation study results on Table 3. When comparing
“gk” with “gk, no merging”, we can see that the
merging algorithm improves the performance of
total and present keyphrase predictions, but it de-
grades the performance of absent keyphrase pre-
diction. These results indicate the trained scorer
performs better on scoring present keyphrases than
scoring absent keyphrases. One possible rea-
son is that scoring absent keyphrases requires a
stronger text understanding ability than scoring
present keyphrases. However, as shown in the
row of “gk, rk” on Table3, this problem can be
solved by incorporating the retrieved keyphrases
which provide external information to this mod-
ule. Besides absent keyphrase prediction, it is ob-
served that the retrieved keyphrases can also ben-
efit the present keyphrase prediction. For the ex-
tracted keyphrases, as shown in the “gk, ek” row,
they only improve the present keyphrase predic-
tion ability and do not affect absent keyphrases as
we anticipated.

Regarding the scoring method, we further ex-
plore the effects of not using or only using the
scorer in Algorithm 1. We show the results on Ta-
ble 4. From this table, we note that after removing
the scorer (i.e., “Only gs, es, rs”), both present
and absent keyphrase prediction performance be-
come worse, which demonstrates the effectiveness
of the combination with the scorer. Moreover,
if we totally ignore the previously obtained re-
trieval, extraction and generation scores, and only
use the scorer to predict the final keyphrase impor-
tance score (i.e., “Only scorer”), we find the per-
formance decreases dramatically, which indicates
the indispensability of the previously obtained re-
trieval, extraction, and generation scores.



2854

Approximating minimum power covers of intersecting families and directed edge connectivity problems .  Given a ( directed ) graph with costs on 
the edges , the power of a node is the maximum cost of an edge leaving it , and the power of the graph is the sum of the powers of its nodes . . . We 
consider problems that seek to find a min power spanning subgraph G of g that satisfies a prescribed edge connectivity property . . . We give 
approximation algorithms with ratio o ( k ln vertical bar v vertical bar ) . Our algorithms are based on a more general o ( ln vertical bar v vertical 
bar ) approximation algorithm for the problem of finding a min power directed edge cover of an intersecting set family . . .

(a) Present Keyphrases {approximation algorithms; edge connectivity; intersecting families}
CopyRNN:      1. approximation algorithms, 2. edge connectivity, 3. algorithms, 4. set cover, 5. connectivity, . . .
Retrieved:      1. power, 2. graphs, 3. approximation, 4. edge connectivity, 5. approximation algorithms, . . .
KG-KE-KR:      1. approximation algorithms, 2. edge connectivity, 3. power, 4. set cover, 5. minimum power, . . . 7. intersecting families, . . .
KG-KE-KR-M: 1. approximation algorithms, 2. edge connectivity, 3. minimum power, . . . 6. intersecting families, . . .

(b) Absent Keyphrases {wireless networks; power minimization; directed graphs}
CopyRNN:      1. graph algorithms, 2. combinatorial problems, 3. computational complexity, 4. directed graphs, 5. randomized algorithms, . . .
Retrieved:      1. wireless, 2. degree, 3. k connectivity, 4. tree augmentation, . . . 7. power assignment, 8. wireless networks
KG-KE-KR:      1. graph algorithms, 2. directed graphs, 3. graph theory, 4. randomized algorithms, 5. spanning tree, 6. wireless networks, . . .
KG-KE-KR-M: 1. graph algorithms, 2. directed graphs, 3. power assignment, 4. graph theory, 5. wireless networks, . . .

Figure 4: A keyphrase prediction example of CopyRNN, KG-KE-KR, and KG-KE-KR-M. “Retrieved” is the
retrieved keyphrases. The extracted keyphrases by the extractor of KG-KE-KR are underlined in the source text.
Top 10 present and absent predictions are compared and some incorrect predictions are omitted for simplicity. The
correct predictions are bold and italic.

5.4 Case Study

To illustrate the advantages of our proposed meth-
ods, we show an example of the present and absent
keyphrase predictions in Figure 4. For fairness, we
only compare with CopyRNN since our models
are based on its implementation. From the results
of the present keyphrase prediction, we find the
extractor of the KG-KE-KR model successfully
extracts all the present keyphrases from the source
text, which shows the power of the extractor. With
the help of the copy probability rescaling from
the extractor, the KG-KE-KR model correctly pre-
dicts the keyphrase “intersecting families” which
is not successfully predicted by CopyRNN and re-
trieved by the retriever. Moreover, by merging
the extracted keyphrases into the final predictions,
the KG-KE-KR-M model assigns a higher rank to
this keyphrase (i.e., from 7 to 6). As for absent
keyphrase prediction, we note that KG-KE-KR
successfully predicts the keyphrase “wireless net-
works” while CopyRNN fails. Since the retriever
successfully retrieves this absent keyphrase, it
shows that the retrieved keyphrases can provide
effective external guidance for the generation pro-
cess. Furthermore, the KG-KE-KR-M method as-
signs a higher rank to this keyphrase after merging
the retrieved keyphrases into the final predictions
(i.e., from 6 to 5). The overall results demonstrate
the effectiveness of our proposed methods.

6 Conclusion and Future Work

In this paper, we propose a novel integrated ap-
proach for keyphrase generation. First, an end-to-
end multi-task learning framework is introduced,

which not only combines the keyphrase extrac-
tion and generation but also leverages the retrieved
keyphrases from similar documents to guide the
generation process. Furthermore, we introduce a
neural-based merging algorithm to merge the can-
didates from three different components. Com-
prehensive empirical studies demonstrate the ef-
fectiveness of our approach. One interesting fu-
ture work is to incorporate the similar documents
themselves into keyphrase generation.

Acknowledgments

The work described in this paper was partially
supported by the Research Grants Council of the
Hong Kong Special Administrative Region, China
(No. CUHK 14208815 of the General Research
Fund) and Meitu (No. 7010445). We would like
to thank Jiani Zhang for her comments.

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2014. Neural machine translation by jointly
learning to align and translate. In International Con-
ference on Learning Representations (ICLR).

Gábor Berend. 2011. Opinion expression mining
by exploiting keyphrase extraction. In Fifth In-
ternational Joint Conference on Natural Language
Processing, IJCNLP 2011, Chiang Mai, Thailand,
November 8-13, 2011, pages 1162–1170.

Ziqiang Cao, Wenjie Li, Furu Wei, and Sujian Li. 2018.
Retrieve, rerank and rewrite: Soft template based
neural summarization. In Proceedings of the 56th
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 1: Long Papers), pages



2855

152–161. Association for Computational Linguis-
tics.

Jun Chen, Xiaoming Zhang, Yu Wu, Zhao Yan, and
Zhoujun Li. 2018a. Keyphrase generation with cor-
relation constraints. In Proceedings of the 2018
Conference on Empirical Methods in Natural Lan-
guage Processing, Brussels, Belgium, October 31 -
November 4, 2018, pages 4057–4066.

Wang Chen, Yifan Gao, Jiani Zhang, Irwin King, and
Michael R. Lyu. 2018b. Title-guided encoding for
keyphrase generation. CoRR, abs/1808.08575.

Kyunghyun Cho, Bart van Merrienboer, Çaglar
Gülçehre, Dzmitry Bahdanau, Fethi Bougares, Hol-
ger Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using RNN encoder-decoder
for statistical machine translation. In Proceedings of
the 2014 Conference on Empirical Methods in Nat-
ural Language Processing, EMNLP 2014, October
25-29, 2014, Doha, Qatar, A meeting of SIGDAT,
a Special Interest Group of the ACL, pages 1724–
1734.

Eibe Frank, Gordon W. Paynter, Ian H. Witten,
Carl Gutwin, and Craig G. Nevill-Manning. 1999.
Domain-specific keyphrase extraction. In Proceed-
ings of the Sixteenth International Joint Conference
on Artificial Intelligence, IJCAI 99, Stockholm, Swe-
den, July 31 - August 6, 1999. 2 Volumes, 1450
pages, pages 668–673.

Sujatha Das Gollapalli, Xiaoli Li, and Peng Yang.
2017. Incorporating expert knowledge into
keyphrase extraction. In Proceedings of the Thirty-
First AAAI Conference on Artificial Intelligence,
February 4-9, 2017, San Francisco, California,
USA., pages 3180–3187.

Maria P. Grineva, Maxim N. Grinev, and Dmitry Li-
zorkin. 2009. Extracting key terms from noisy
and multitheme documents. In Proceedings of the
18th International Conference on World Wide Web,
WWW 2009, Madrid, Spain, April 20-24, 2009,
pages 661–670.

Jiatao Gu, Zhengdong Lu, Hang Li, and Victor O. K.
Li. 2016. Incorporating copying mechanism in
sequence-to-sequence learning. In Proceedings of
the 54th Annual Meeting of the Association for
Computational Linguistics, ACL 2016, August 7-12,
2016, Berlin, Germany, Volume 1: Long Papers.

Khaled M. Hammouda, Diego N. Matute, and Mo-
hamed S. Kamel. 2005. Corephrase: Keyphrase ex-
traction for document clustering. In Machine Learn-
ing and Data Mining in Pattern Recognition, 4th In-
ternational Conference, MLDM 2005, Leipzig, Ger-
many, July 9-11, 2005, Proceedings, pages 265–274.

Wan-Ting Hsu, Chieh-Kai Lin, Ming-Ying Lee, Kerui
Min, Jing Tang, and Min Sun. 2018. A unified
model for extractive and abstractive summarization
using inconsistency loss. In Proceedings of the 56th

Annual Meeting of the Association for Computa-
tional Linguistics (Volume 1: Long Papers), pages
132–141. Association for Computational Linguis-
tics.

Anette Hulth. 2003. Improved automatic keyword ex-
traction given more linguistic knowledge. In Pro-
ceedings of the Conference on Empirical Methods in
Natural Language Processing, EMNLP 2003, Sap-
poro, Japan, July 11-12, 2003.

Anette Hulth and Beáta Megyesi. 2006. A study on
automatically extracted keywords in text categoriza-
tion. In ACL 2006, 21st International Conference on
Computational Linguistics and 44th Annual Meet-
ing of the Association for Computational Linguis-
tics, Proceedings of the Conference, Sydney, Aus-
tralia, 17-21 July 2006.

Su Nam Kim, Olena Medelyan, Min-Yen Kan, and
Timothy Baldwin. 2010. Semeval-2010 task 5 : Au-
tomatic keyphrase extraction from scientific articles.
In Proceedings of the 5th International Workshop
on Semantic Evaluation, SemEval@ACL 2010, Upp-
sala University, Uppsala, Sweden, July 15-16, 2010,
pages 21–26.

Diederik P. Kingma and Jimmy Ba. 2014. Adam:
A method for stochastic optimization. CoRR,
abs/1412.6980.

Guillaume Klein, Yoon Kim, Yuntian Deng, Jean
Senellart, and Alexander M. Rush. 2017. Open-
nmt: Open-source toolkit for neural machine trans-
lation. In Proceedings of the 55th Annual Meeting of
the Association for Computational Linguistics, ACL
2017, Vancouver, Canada, July 30 - August 4, Sys-
tem Demonstrations, pages 67–72.

Mikalai Krapivin, Aliaksandr Autaeu, and Maurizio
Marchese. 2009. Large dataset for keyphrases ex-
traction. Technical report, University of Trento.

Tho Thi Ngoc Le, Minh Le Nguyen, and Akira Shi-
mazu. 2016. Unsupervised keyphrase extraction:
Introducing new kinds of words to keyphrases. In AI
2016: Advances in Artificial Intelligence - 29th Aus-
tralasian Joint Conference, Hobart, TAS, Australia,
December 5-8, 2016, Proceedings, pages 665–671.

Zhiyuan Liu, Xinxiong Chen, Yabin Zheng, and
Maosong Sun. 2011. Automatic keyphrase extrac-
tion by bridging vocabulary gap. In Proceedings of
the Fifteenth Conference on Computational Natural
Language Learning, CoNLL 2011, Portland, Ore-
gon, USA, June 23-24, 2011, pages 135–144.

Yi Luan, Mari Ostendorf, and Hannaneh Hajishirzi.
2017. Scientific information extraction with semi-
supervised neural tagging. In Proceedings of the
2017 Conference on Empirical Methods in Natural
Language Processing, EMNLP 2017, Copenhagen,
Denmark, September 9-11, 2017, pages 2641–2651.



2856

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natural
Language Processing, EMNLP 2015, Lisbon, Portu-
gal, September 17-21, 2015, pages 1412–1421.

Olena Medelyan, Eibe Frank, and Ian H. Witten.
2009. Human-competitive tagging using automatic
keyphrase extraction. In Proceedings of the 2009
Conference on Empirical Methods in Natural Lan-
guage Processing, EMNLP 2009, 6-7 August 2009,
Singapore, A meeting of SIGDAT, a Special Interest
Group of the ACL, pages 1318–1327.

Rui Meng, Sanqiang Zhao, Shuguang Han, Daqing
He, Peter Brusilovsky, and Yu Chi. 2017. Deep
keyphrase generation. In Proceedings of the 55th
Annual Meeting of the Association for Computa-
tional Linguistics, ACL 2017, Vancouver, Canada,
July 30 - August 4, Volume 1: Long Papers, pages
582–592.

Rada Mihalcea and Paul Tarau. 2004. Textrank: Bring-
ing order into text. In Proceedings of the 2004 Con-
ference on Empirical Methods in Natural Language
Processing , EMNLP 2004, A meeting of SIGDAT, a
Special Interest Group of the ACL, held in conjunc-
tion with ACL 2004, 25-26 July 2004, Barcelona,
Spain, pages 404–411.

Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017.
Summarunner: A recurrent neural network based se-
quence model for extractive summarization of doc-
uments. In Proceedings of the Thirty-First AAAI
Conference on Artificial Intelligence, February 4-9,
2017, San Francisco, California, USA., pages 3075–
3081.

Thuy Dung Nguyen and Min-Yen Kan. 2007.
Keyphrase extraction in scientific publications. In
Asian Digital Libraries. Looking Back 10 Years
and Forging New Frontiers, 10th International Con-
ference on Asian Digital Libraries, ICADL 2007,
Hanoi, Vietnam, December 10-13, 2007, Proceed-
ings, pages 317–326.

Ankur P. Parikh, Oscar Täckström, Dipanjan Das, and
Jakob Uszkoreit. 2016. A decomposable attention
model for natural language inference. In Proceed-
ings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP 2016,
Austin, Texas, USA, November 1-4, 2016, pages
2249–2255.

Abigail See, Peter J. Liu, and Christopher D. Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics, ACL 2017, Vancouver, Canada, July 30
- August 4, Volume 1: Long Papers, pages 1073–
1083.

Xiaojun Wan and Jianguo Xiao. 2008. Single doc-
ument keyphrase extraction using neighborhood

knowledge. In Proceedings of the Twenty-Third
AAAI Conference on Artificial Intelligence, AAAI
2008, Chicago, Illinois, USA, July 13-17, 2008,
pages 855–860.

Lu Wang and Claire Cardie. 2013. Domain-
independent abstract generation for focused meet-
ing summarization. In Proceedings of the 51st An-
nual Meeting of the Association for Computational
Linguistics, ACL 2013, 4-9 August 2013, Sofia, Bul-
garia, Volume 1: Long Papers, pages 1395–1405.

Minmei Wang, Bo Zhao, and Yihua Huang. 2016.
PTR: phrase-based topical ranking for automatic
keyphrase extraction in scientific publications. In
Neural Information Processing - 23rd International
Conference, ICONIP 2016, Kyoto, Japan, October
16-21, 2016, Proceedings, Part IV, pages 120–128.

Theresa Wilson, Janyce Wiebe, and Paul Hoffmann.
2005. Recognizing contextual polarity in phrase-
level sentiment analysis. In HLT/EMNLP 2005, Hu-
man Language Technology Conference and Confer-
ence on Empirical Methods in Natural Language
Processing, Proceedings of the Conference, 6-8 Oc-
tober 2005, Vancouver, British Columbia, Canada,
pages 347–354.

Ian H. Witten, Gordon W. Paynter, Eibe Frank, Carl
Gutwin, and Craig G. Nevill-Manning. 1999. KEA:
practical automatic keyphrase extraction. In Pro-
ceedings of the Fourth ACM conference on Digital
Libraries, August 11-14, 1999, Berkeley, CA, USA,
pages 254–255.

Hai Ye and Lu Wang. 2018. Semi-supervised learning
for neural keyphrase generation. In Proceedings of
the 2018 Conference on Empirical Methods in Natu-
ral Language Processing, Brussels, Belgium, Octo-
ber 31 - November 4, 2018, pages 4142–4153.

Xingdi Yuan, Tong Wang, Rui Meng, Khushboo
Thaker, Daqing He, and Adam Trischler. 2018.
Generating diverse numbers of diverse keyphrases.
CoRR, abs/1810.05241.

Qi Zhang, Yang Wang, Yeyun Gong, and Xuanjing
Huang. 2016. Keyphrase extraction using deep re-
current neural networks on twitter. In Proceed-
ings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP 2016,
Austin, Texas, USA, November 1-4, 2016, pages
836–845.

Yongzheng Zhang, A. Nur Zincir-Heywood, and Evan-
gelos E. Milios. 2004. World wide web site sum-
marization. Web Intelligence and Agent Systems,
2(1):39–53.


