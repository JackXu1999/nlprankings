



















































Spectral Unsupervised Parsing with Additive Tree Metrics


Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 1062‚Äì1072,
Baltimore, Maryland, USA, June 23-25 2014. c¬©2014 Association for Computational Linguistics

Spectral Unsupervised Parsing with Additive Tree Metrics
Ankur P. Parikh

School of Computer Science
Carnegie Mellon University
apparikh@cs.cmu.edu

Shay B. Cohen
School of Informatics

University of Edinburgh
scohen@inf.ed.ac.uk

Eric P. Xing
School of Computer Science
Carnegie Mellon University
epxing@cs.cmu.edu

Abstract

We propose a spectral approach for un-
supervised constituent parsing that comes
with theoretical guarantees on latent struc-
ture recovery. Our approach is grammar-
less ‚Äì we directly learn the bracketing
structure of a given sentence without us-
ing a grammar model. The main algorithm
is based on lifting the concept of additive
tree metrics for structure learning of la-
tent trees in the phylogenetic and machine
learning communities to the case where
the tree structure varies across examples.
Although finding the ‚Äúminimal‚Äù latent tree
is NP-hard in general, for the case of pro-
jective trees we find that it can be found
using bilexical parsing algorithms. Empir-
ically, our algorithm performs favorably
compared to the constituent context model
of Klein and Manning (2002) without the
need for careful initialization.

1 Introduction
Solutions to the problem of grammar induction
have been long sought after since the early days of
computational linguistics and are interesting both
from cognitive and engineering perspectives. Cog-
nitively, it is more plausible to assume that chil-
dren obtain only terminal strings of parse trees and
not the actual parse trees. This means the unsu-
pervised setting is a better model for studying lan-
guage acquisition. From the engineering perspec-
tive, training data for unsupervised parsing exists
in abundance (i.e. sentences and part-of-speech
tags), and is much cheaper than the syntactically
annotated data required for supervised training.

Most existing solutions treat the problem of un-
supervised parsing by assuming a generative pro-
cess over parse trees e.g. probabilistic context
free grammars (Jelinek et al., 1992), and the con-
stituent context model (Klein and Manning, 2002).
Learning then reduces to finding a set of parame-
ters that are estimated by identifying a local max-
imum of an objective function such as the likeli-

hood (Klein and Manning, 2002) or a variant of it
(Smith and Eisner, 2005; Cohen and Smith, 2009;
Headden et al., 2009; Spitkovsky et al., 2010b;
Gillenwater et al., 2010; Golland et al., 2012). Un-
fortunately, finding the global maximum for these
objective functions is usually intractable (Cohen
and Smith, 2012) which often leads to severe lo-
cal optima problems (but see Gormley and Eisner,
2013). Thus, strong experimental results are often
achieved by initialization techniques (Klein and
Manning, 2002; Gimpel and Smith, 2012), incre-
mental dataset use (Spitkovsky et al., 2010a) and
other specialized techniques to avoid local optima
such as count transforms (Spitkovsky et al., 2013).
These approaches, while empirically promising,
generally lack theoretical justification.

On the other hand, recently proposed spectral
methods approach the problem via restriction of
the PCFG model (Hsu et al., 2012) or matrix com-
pletion (Bailly et al., 2013). These novel perspec-
tives offer strong theoretical guarantees but are not
designed to achieve competitive empirical results.

In this paper, we suggest a different approach,
to provide a first step to bridging this theory-
experiment gap. More specifically, we approach
unsupervised constituent parsing from the per-
spective of structure learning as opposed to pa-
rameter learning. We associate each sentence with
an undirected latent tree graphical model, which is
a tree consisting of both observed variables (corre-
sponding to the words in the sentence) and an ad-
ditional set of latent variables that are unobserved
in the data. This undirected latent tree is then di-
rected via a direction mapping to give the final
constituent parse.

In our framework, parsing reduces to finding the
best latent structure for a given sentence. How-
ever, due to the presence of latent variables, struc-
ture learning of latent trees is substantially more
complicated than in observed models. As before,
one solution would be local search heuristics.

Intuitively, however, latent tree models en-
code low rank dependencies among the observed
variables permitting the development of ‚Äúspec-

1062



tral‚Äù methods that can lead to provably correct
solutions. In particular we leverage the con-
cept of additive tree metrics (Buneman, 1971;
Buneman, 1974) in phylogenetics and machine
learning that can create a special distance met-
ric among the observed variables as a function
of the underlying spectral dependencies (Choi et
al., 2011; Song et al., 2011; Anandkumar et al.,
2011; Ishteva et al., 2012). Additive tree met-
rics can be leveraged by ‚Äúmeta-algorithms‚Äù such
as neighbor-joining (Saitou and Nei, 1987) and
recursive grouping (Choi et al., 2011) to provide
consistent learning algorithms for latent trees.

Moreover, we show that it is desirable to learn
the ‚Äúminimal‚Äù latent tree based on the tree metric
(‚Äúminimum evolution‚Äù in phylogenetics). While
this criterion is in general NP-hard (Desper and
Gascuel, 2005), for projective trees we find that a
bilexical parsing algorithm can be used to find an
exact solution efficiently (Eisner and Satta, 1999).

Unlike in phylogenetics and graphical models,
where a single latent tree is constructed for all the
data, in our case, each part of speech sequence is
associated with its own parse tree. This leads to a
severe data sparsity problem even for moderately
long sentences. To handle this issue, we present
a strategy that is inspired by ideas from kernel
smoothing in the statistics community (Zhou et al.,
2010; Kolar et al., 2010b; Kolar et al., 2010a).
This allows principled sharing of samples from
different but similar underlying distributions.

We provide theoretical guarantees on the re-
covery of the correct underlying latent tree and
characterize the associated sample complexity un-
der our technique. Empirically we evaluate our
method on data in English, German and Chi-
nese. Our algorithm performs favorably to Klein
and Manning‚Äôs (2002) constituent-context model
(CCM), without the need for careful initialization.
In addition, we also analyze CCM‚Äôs sensitivity to
initialization, and compare our results to Seginer‚Äôs
algorithm (Seginer, 2007).

2 Learning Setting and Model
In this section, we detail the learning setting and a
conditional tree model we learn the structure for.

2.1 Learning Setting

Let w = (w1, ..., w`) be a vector of words corre-
sponding to a sentence of length `. Each wi is rep-
resented by a vector in Rp for p ‚àà N. The vector
is an embedding of the word in some space, cho-

VBD DT NN VBD DT NN

Figure 2: Candidate constituent parses for x = (VBD, DT, NN)
(left-correct, right -incorrect)

sen from a fixed dictionary that maps word types
to Rp. In addition, let x = (x1, ..., x`) be the as-
sociated vector of part-of-speech (POS) tags (i.e.
xi is the POS tag of wi).

In our learning algorithm, we assume that ex-
amples of the form (w(i),x(i)) for i ‚àà [N ] =
{1, . . . , N} are given, and the goal is to predict
a bracketing parse tree for each of these examples.
The word embeddings are used during the learn-
ing process, but the final decoder that the learning
algorithm outputs maps a POS tag sequence x to
a parse tree. While ideally we would want to use
the word information in decoding as well, much of
the syntax of a sentence is determined by the POS
tags, and relatively high level of accuracy can be
achieved by learning, for example, a supervised
parser from POS tag sequences.

Just like our decoder, our model assumes that
the bracketing of a given sentence is a function
of its POS tags. The POS tags are generated
from some distribution, followed by a determin-
istic generation of the bracketing parse tree. Then,
latent states are generated for each bracket, and
finally, the latent states at the yield of the bracket-
ing parse tree generate the words of the sentence
(in the form of embeddings). The latent states are
represented by vectors z ‚àà Rm where m < p.

2.2 Intuition

For intuition, consider the simple tag sequence
x = (VBD, DT, NN). Two candidate constituent
parse structures are shown in Figure 2 and the cor-
rect one is boxed in green (the other in red). Re-
call that our training data contains word phrases
that have the tag sequence x e.g. w(1) =
(hit, the, ball), w(2) = (ate, an, apple).

Intuitively, the words in the above phrases ex-
hibit dependencies that can reveal the parse struc-
ture. The determiner (w2) and the direct object
(w3) are correlated in that the choice of deter-
miner depends on the plurality of w3. However,
the choice of verb (w1) is mostly independent of
the determiner. We could thus conclude that w2
and w3 should be closer in the parse tree than w1

1063



The bear ate the fish

ùë§1 , ùë§2 , ùë§3 , ùë§4 , ùë§5 , ùëß1, ùëß2, ùëß3

ùíô = (ùê∑ùëá,ùëÅùëÅ, ùëâùêµùê∑, ùê∑ùëá,ùëÅùëÅ)

ùë¢(ùíô)

((DT NN) (VBD (DT NN)))

w1 w2 w3

z3

z1

w4 w5

z2

w1 w2 w3

z3z1

w4 w5

z2

Figure 1: Example for the tag
sequence (DT, NN, VBD, DT, NN)
showing the overview of our
approach. We first learn a undi-
rected latent tree for the se-
quence (left). We then ap-
ply a direction mapping hdir to
direct the latent tree (center).
This can then easily be con-
verted into a bracketing (right).

andw2, giving us the correct structure. Informally,
the latent state z corresponding to the (w2, w3)
bracket would store information about the plural-
ity of z, the key to the dependence betweenw2 and
w3. It would then be reasonable to assume that w2
and w3 are independent given z.

2.3 A Conditional Latent Tree Model
Following this intuition, we propose to model the
distribution over the latent bracketing states and
words for each tag sequence x as a latent tree
graphical model, which encodes conditional inde-
pendences among the words given the latent states.

Let V := {w1, ..., w`, z1, ..., zH}, with wi rep-
resenting the word embeddings, and zi represent-
ing the latent states of the bracketings. Then, ac-
cording to our base model it holds that:

p(w, z|x) =
H‚àè
i=1

p(zi|œÄx(zi), Œ∏(x))

√ó
`(x)‚àè
i=1

p(wi|œÄx(wi), Œ∏(x)) (1)

where œÄx(¬∑) returns the parent node index of the
argument in the latent tree corresponding to tag
sequence x.1 If z is the root, then œÄx(z) = ‚àÖ.
All the wi are assumed to be leaves while all the
zi are internal (i.e. non-leaf) nodes. The param-
eters Œ∏(x) control the conditional probability ta-
bles. We do not commit to a certain parametric
family, but see more about the assumptions we
make about Œ∏ in ¬ß3.2. The parameter space is de-
noted Œò. The model assumes a factorization ac-
cording to a latent-variable tree. The latent vari-
ables can incorporate various linguistic properties,
such as head information, valence of dependency
being generated, and so on. This information is
expected to be learned automatically from data.

Our generative model deterministically maps a
POS sequence to a bracketing via an undirected

1At this point, œÄ refers to an arbitrary direction of the
undirected tree u(x).

latent-variable tree. The orientation of the tree is
determined by a direction mapping hdir(u), which
is fixed during learning and decoding. This means
our decoder first identifies (given a POS sequence)
an undirected tree, and then orients it by applying
hdir on the resulting tree (see below).

Define U to be the set of undirected latent trees
where all internal nodes have degree exactly 3 (i.e.
they correspond to binary bracketing), and in addi-
tion hdir(u) for any u ‚àà U is projective (explained
in the hdir section). In addition, let T be the set
of binary bracketings. The complete generative
model that we follow is then:

‚Ä¢ Generate a tag sequence x = (x1, . . . , x`)
‚Ä¢ Decide on u(x) ‚àà U , the undirected latent tree

that x maps to.
‚Ä¢ Set t ‚àà T by computing t = hdir(u).
‚Ä¢ Set Œ∏ ‚àà Œò by computing Œ∏ = Œ∏(x).
‚Ä¢ Generate a tuple v = (w1, . . . , w`, z1, ..., zH)

where wi ‚àà Rp, zj ‚àà Rm according to Eq. 1.
See Figure 1 (left) for an example.

The Direction Mapping hdir. Generating a
bracketing via an undirected tree enables us to
build on existing methods for structure learning
of latent-tree graphical models (Choi et al., 2011;
Anandkumar et al., 2011). Our learning algorithm
focuses on recovering the undirected tree based
for the generative model that was described above.
This undirected tree is converted into a directed
tree by applying hdir. The mapping hdir works in
three steps:

‚Ä¢ It first chooses a top bracket ([1, R ‚àí 1], [R, `])
where R is the mid-point of the bracket and ` is
the length of the sentence.
‚Ä¢ It marks the edge ei,j that splits the tree accord-

ing to the top bracket as the ‚Äúroot edge‚Äù (marked
in red in Figure 1(center))
‚Ä¢ It then creates t from u by directing the tree out-

ward from ei,j as shown in Figure 1(center)

1064



The resulting t is a binary bracketing parse tree.
As implied by the above definition of hdir, se-
lecting which edge is the root can be interpreted
as determining the top bracket of the constituent
parse. For example, in Figure 1, the top bracket
is ([1, 2], [3, 5]) = ([DT, NN], [VBD, DT, NN]). Note
that the ‚Äúroot‚Äù edge ez1,z2 partitions the leaves
into precisely this bracketing. As indicated in the
above section, we restrict the set of undirected
trees to be those such that after applying hdir the
resulting t is projective i.e. there are no crossing
brackets. In ¬ß4.1, we discuss an effective heuristic
to find the top bracket without supervision.

3 Spectral Learning Algorithm based on
Additive Tree Metrics

Our goal is to recover t ‚àà T for tag sequence x
using the data D = [(w(i),x(i))]Ni=1. To get an in-
tuition about the algorithm, consider a partition of
the set of examplesD intoD(x) = {(w(i),x(i)) ‚àà
D|x(i) = x}, i.e. each section in the partition has
an identical sequence of part of speech tags. As-
sume for this section |D(x)| is large (we address
the data sparsity issue in ¬ß3.4).

We can then proceed by learning how to map a
POS sequence x to a tree t ‚àà T (through u ‚àà U)
by focusing only on examples in D(x).

Directly attempting to maximize the likelihood
unfortunately results in an intractable optimiza-
tion problem and greedy heuristics are often em-
ployed (Harmeling and Williams, 2011). Instead
we propose a method that is provably consistent
and returns a tree that can be mapped to a bracket-
ing using hdir.

If all the variables were observed, then the
Chow-Liu algorithm (Chow and Liu, 1968) could
be used to find the most likely tree structure u ‚àà
U . The Chow-Liu algorithm essentially computes
the distances among all pairs of variables (the neg-
ative of the mutual information) and then finds the
minimum cost tree. However, the fact that the zi
are latent variables makes this strategy substan-
tially more complicated. In particular, it becomes
challenging to compute the distances among pairs
of latent variables. What is needed is a ‚Äúspecial‚Äù
distance function that allows us to reverse engineer
the distances among the latent variables given the
distances among the observed variables. This is
the key idea behind additive tree metrics that are
the basis of our approach.

In the following sections, we describe the key
steps to our method. ¬ß3.1 and ¬ß3.2 largely describe

existing background on additive tree metrics and
latent tree structure learning, while ¬ß3.3 and ¬ß3.4
discuss novel aspects that are unique to our prob-
lem.

3.1 Additive Tree Metrics
Let u(x) be the true undirected tree of sentence x
and assume the nodes V to be indexed by [M ] =
{1, . . . ,M} such that M = |V| = H + `. Fur-
thermore, let v ‚àà V refer to a node in the undi-
rected tree (either observed or latent). We assume
the existence of a distance function that allows us
to compute distances between pairs of nodes. For
example, as we see in ¬ß3.2 we will define the dis-
tance d(i, j) to be a function of the covariance ma-
trix E[viv>j |u(x), Œ∏(x)]. Thus if vi and vj are both
observed variables, the distance can be directly
computed from the data.

Moreover, the metrics we construct are such
that they are tree additive, defined below:

Definition 1 A function du(x) : [M ]√ó[M ]‚Üí R is
an additive tree metric (ErdoÃÉs et al., 1999) for the
undirected tree u(x) if it is a distance metric,2 and
furthermore, ‚àÄi, j ‚àà [M ] the following relation
holds:

du(x)(i, j) =
‚àë

(a,b)‚ààpathu(x)(i,j)
du(x)(a, b) (2)

where pathu(x)(i, j) is the set of all the edges in
the (undirected) path from i to j in the tree u(x).

As we describe below, given the tree structure,
the additive tree metric property allows us to com-
pute ‚Äúbackwards‚Äù the distances among the latent
variables as a function of the distances among the
observed variables.

Define D to be the M √ó M distance matrix
among the M variables, i.e. Dij = du(x)(i, j).
Let DWW , DZW (equal to D>WZ), and DZZ indi-
cate the word-word, latent-word and latent-latent
sub-blocks of D respectively. In addition, since
u(x) is assumed to be known from context, we
denote du(x)(i, j) just by d(i, j).

Given the fact that the distance between a pair
of nodes is a function of the random variables
they represent (according to the true model), only
DWW can be empirically estimated from data.
However, if the underlying tree structure is known,
then Definition 1 can be leveraged to compute
DZZ and DZW as we show below.

2This means that it satisfies d(i, j) = 0 if and only if
i = j, the triangle inequality and is also symmetric.

1065



vj

viei,j

(a)

vi
ei,j

vj

(b)

Figure 3: Two types of edges in general undirected latent
trees. (a) leaf edge, (b) internal edge

We first show how to compute d(i, j) for all i, j
such that i and j are adjacent to each other in u(x),
based only on observed nodes. It then follows that
the other elements of the distance matrix can be
computed based on Definition 1. To show how to
compute distances between adjacent nodes, con-
sider the two cases: (1) (i, j) is a leaf edge; (2)
(i, j) is an internal edge.

Case 1 (leaf edge, figure 3(a)) Assume without
loss of generality that j is the leaf and i is an in-
ternal latent node. Then i must have exactly two
other neighbors a ‚àà [M ] and b ‚àà [M ]. Let A
denote the set of nodes that are closer to a than
i and similarly let B denote the set of nodes that
are closer to b than i. Let A‚àó and B‚àó denote all
the leaves (word nodes) in A and B respectively.
Then using path additivity (Definition 1), it can be
shown that for any a‚àó ‚àà A‚àó, b‚àó ‚àà B‚àó it holds that:

d(i, j) =
1
2

(d(j, a‚àó) + d(j, b‚àó)‚àí d(a‚àó, b‚àó)) (3)

Note that the right-hand side only depends on
distances between observed random variables.

Case 2 (internal edge, figure 3(b)) Both i and
j are internal nodes. In this case, i has exactly
two other neighbors a ‚àà [M ] and b ‚àà [M ], and
similarly, j has exactly other two neighbors g ‚àà
[M ] and h ‚àà [M ]. Let A denote the set of nodes
closer to a than i, and analogously for B, G, and
H . Let A‚àó, B‚àó, G‚àó, and H‚àó refer to the leaves in
A,B,G, and H respectively. Then for any a‚àó ‚àà
A‚àó, b‚àó ‚àà B‚àó, g‚àó ‚àà G‚àó, and h‚àó ‚àà H‚àó it can be
shown that:

d(i, j) = 14

(
d(a‚àó, g‚àó) + d(a‚àó, h‚àó) + d(b‚àó, g‚àó)

+d(b‚àó, h‚àó)‚àí 2d(a‚àó, b‚àó)‚àí 2d(g‚àó, h‚àó)
)

(4)

Empirically, one can obtain a more robust em-
pirical estimate dÃÇ(i, j) by averaging over all valid

choices of a‚àó, b‚àó in Eq. 3 and all valid choices of
a‚àó, b‚àó, g‚àó, h‚àó in Eq. 4 (Desper and Gascuel, 2005).

3.2 Constructing a Spectral Additive Metric
In constructing our distance metric, we begin with
the following assumption on the distribution in
Eq. 1 (analogous to the assumptions made in
Anandkumar et al., 2011).

Assumption 1 (Linear, Rank m, Means)

E[zi|œÄx(zi),x] = A(zi|zœÄx(zi),x)œÄx(zi) ‚àÄi ‚àà [H]
where A(zi|œÄx(zi),x) ‚àà Rm√óm has rank m.
E[wi|œÄx(wi),x] = C(wi|œÄx(wi),x)œÄx(wi) ‚àÄi ‚àà [`(x)]
where C(wi|œÄx(wi),x) ‚àà Rp√óm has rank m.

Also assume that E[ziz>i |x] has rank m ‚àÄi ‚àà
[H].

Note that the matrices A and C are a direct
function of Œ∏(x), but we do not specify a model
family for Œ∏(x). The only restriction is in the form
of the above assumption. If wi and zi were dis-
crete, represented as binary vectors, the above as-
sumption would correspond to requiring all con-
ditional probability tables in the latent tree to have
rankm. Assumption 1 allows for the wi to be high
dimensional features, as long as the expectation
requirement above is satisfied. Similar assump-
tions are made with spectral parameter learning
methods e.g. Hsu et al. (2009), Bailly et al. (2009),
Parikh et al. (2011), and Cohen et al. (2012).

Furthermore, Assumption 1 makes it explicit
that regardless of the size of p, the relationships
among the variables in the latent tree are restricted
to be of rank m, and are thus low rank since p >
m. To leverage this low rank structure, we propose
using the following additive metric, a normalized
variant of that in Anandkumar et al. (2011):

dspectral(i, j) = ‚àí log Œõm(Œ£x(i, j))
+12 log Œõm(Œ£x(i, i)) +

1
2 log Œõm(Œ£x(j, j)) (5)

where Œõm(A) denotes the product of the top m
singular values of A and Œ£x(i, j) := E[viv>j |x],
i.e. the uncentered cross-covariance matrix.

We can then show that this metric is additive:

Lemma 1 If Assumption 1 holds then, dspectral is
an additive tree metric (Definition 1).

A proof is in the supplementary for completeness.
From here, we use d to denote dspectral, since that
is the metric we use for our learning algorithm.

1066



3.3 Recovering the Minimal Projective
Latent Tree

It has been shown (Rzhetsky and Nei, 1993) that
for any additive tree metric, u(x) can be recovered
by solving arg minu‚ààU c(u) for c(u):

c(u) =
‚àë

(i,j)‚ààEu
d(i, j). (6)

where Eu is the set of pairs of nodes which are
adjacent to each other in u and d(i, j) is computed
using Eq. 3 and Eq. 4.

Note that the metric d we use in defining c(u)
is based on the expectations from the true distri-
bution. In practice, the true distribution is un-
known, and therefore we use an approximation for
the distance metric dÃÇ. As we discussed in ¬ß3.1
all elements of the distance matrix are functions
of observable quantities if the underlying tree u is
known. However, only the word-word sub-block
DWW can be directly estimated from the data
without knowledge of the tree structure.

This subtlety makes solving the minimization
problem in Eq. 6 NP-hard (Desper and Gascuel,
2005) if u is allowed to be an arbitrary undirected
tree. However, if we restrict u to be in U , as we do
in the above, then maximizing cÃÇ(u) over U can be
solved using the bilexical parsing algorithm from
Eisner and Satta (1999). This is because the com-
putation of the other sub-blocks of the distance
matrix only depend on the partitions of the nodes
shown in Figure 3 into A, B, G, and H , and not
on the entire tree structure.

Therefore, the procedure to find a bracketing
for a given POS tag x is to first estimate the dis-
tance matrix sub-block DÃÇWW from raw text data
(see ¬ß3.4), and then solve the optimization prob-
lem arg minu‚ààU cÃÇ(u) using a variant of the Eisner-
Satta algorithm where cÃÇ(u) is identical to c(u) in
Eq. 6, with d replaced with dÃÇ.

Summary. We first defined a generative model
that describes how a sentence, its sequence of POS
tags, and its bracketing is generated (¬ß2.3). First
an undirected u ‚àà U is generated (only as a func-
tion of the POS tags), and then u is mapped to
a bracketing using a direction mapping hdir. We
then showed that we can define a distance met-
ric between nodes in the undirected tree, such that
minimizing it leads to a recovery of u. This dis-
tance metric can be computed based only on the
text, without needing to identify the latent infor-
mation (¬ß3.2). If the true distance metric is known,

Algorithm 1 The learning algorithm for find-
ing the latent structure from a set of examples
(w(i),x(i)), i ‚àà [N ].
Inputs: Set of examples (w(i),x(i)) for i ‚àà [N ],
a kernel KŒ≥(j, k, j‚Ä≤, k‚Ä≤|x,x‚Ä≤), an integer m
Data structures: For each i ‚àà [N ], j, k ‚àà
`(x(i)) there is a (uncentered) covariance matrix
Œ£ÃÇx(i)(j, k) ‚àà Rp√óp, and a distance dÃÇspectral(j, k).
Algorithm:
(Covariance estimation) ‚àÄi ‚àà [N ], j, k ‚àà `(x(i))

‚Ä¢ Let Cj‚Ä≤,k‚Ä≤|i‚Ä≤ = w(i
‚Ä≤)

j‚Ä≤ (w
(i‚Ä≤)
k‚Ä≤ )

>, kj,k,j‚Ä≤,k‚Ä≤,i,i‚Ä≤ =
KŒ≥(j, k, j‚Ä≤, k‚Ä≤|x(i),x(i‚Ä≤)) and `i‚Ä≤ = `(x(i‚Ä≤)),
and estimate each p√ó p covariance matrix as:

Œ£ÃÇx(j, k) =‚àëN
i‚Ä≤=1

‚àë`i‚Ä≤
j‚Ä≤=1

‚àë`i‚Ä≤
k‚Ä≤=1 kj,k,j‚Ä≤,k‚Ä≤,i,i‚Ä≤Cj‚Ä≤,k‚Ä≤|i‚Ä≤‚àëN

i‚Ä≤=1
‚àë`i‚Ä≤

j‚Ä≤=1
‚àë`i‚Ä≤

k‚Ä≤=1 kj,k,j‚Ä≤,k‚Ä≤,i,i‚Ä≤

‚Ä¢ Compute dÃÇspectral(j, k) ‚àÄj, k ‚àà `(x(i)) using
Eq. 5.

(Uncover structure) ‚àÄi ‚àà [N ]
‚Ä¢ Find uÃÇ(i) = arg minu‚ààU cÃÇ(u), and for the ith

example, return the structure hdir(uÃÇ(i)).

with respect to the true distribution that generates
the words in a sentence, then u can be fully recov-
ered by optimizing the cost function c(u). How-
ever, in practice the distance metric must be esti-
mated from data, as discussed below.

3.4 Estimation of d from Sparse Data

We now address the data sparsity problem, in par-
ticular that D(x) can be very small, and therefore
estimating d for each POS sequence separately can
be problematic.3

In order to estimate d from data, we need to es-
timate the covariance matrices Œ£x(i, j) (for i, j ‚àà
{1, . . . , `(x)}) from Eq. 5.

To give some motivation to our solu-
tion, consider estimating the covariance
matrix Œ£x(1, 2) for the tag sequence
x = (DT1, NN2, VBD3, DT4, NN5). D(x) may
be insufficient for an accurate empirical es-

3This data sparsity problem is quite severe ‚Äì for example,
the Penn treebank (Marcus et al., 1993) has a total number
of 43,498 sentences, with 42,246 unique POS tag sequences,
averaging |D(x)| to be 1.04.

1067



timate. However, consider another sequence
x‚Ä≤ = (RB1, DT2, NN3, VBD4, DT5, ADJ6, NN7).
Although x and x‚Ä≤ are not identical, it is likely
that Œ£x‚Ä≤(2, 3) is similar to Œ£x(1, 2) because the
determiner and the noun appear in similar syn-
tactic context. Œ£x‚Ä≤(5, 7) also may be somewhat
similar, but Œ£x‚Ä≤(2, 7) should not be very similar
to Œ£x(1, 2) because the noun and the determiner
appear in a different syntactic context.

The observation that the covariance matrices
depend on local syntactic context is the main driv-
ing force behind our solution. The local syntactic
context acts as an ‚Äúanchor,‚Äù which enhances or re-
places a word index in a sentence with local syn-
tactic context. More formally, an anchor is a func-
tion G that maps a word index j and a sequence of
POS tags x to a local context G(j,x). The anchor
we use is G(j,x) = (j, xj). Then, the covariance
matrices Œ£x are estimated using kernel smooth-
ing (Hastie et al., 2009), where the smoother tests
similarity between the different anchors G(j,x).

The full learning algorithm is given in Figure 1.
The first step in the algorithm is to estimate the
covariance matrix block Œ£ÃÇx(i)(j, k) for each train-
ing example x(i) and each pair of preterminal po-
sitions (j, k) in x(i). Instead of computing this
block by computing the empirical covariance ma-
trix for positions (j, k) in the data D(x), the al-
gorithm uses all of the pairs (j‚Ä≤, k‚Ä≤) from all of
N training examples. It averages the empirical
covariance matrices from these contexts using a
kernel weight, which gives a similarity measure
for the position (j, k) in x(i) and (j‚Ä≤, k‚Ä≤) in an-
other example x(i

‚Ä≤). Œ≥ is the kernel ‚Äúbandwidth‚Äù,
a user-specified parameter that controls how in-
clusive the kernel will be with respect to exam-
ples in D (see ¬ß 4.1 for a concrete example). Note
that the learning algorithm is such that it ensures
that Œ£ÃÇx(i)(j, k) = Œ£ÃÇx(i‚Ä≤)(j

‚Ä≤, k‚Ä≤) if G(j,x(i)) =
G(j‚Ä≤,x(i‚Ä≤)) and G(k,x(i)) = G(k‚Ä≤,x(i‚Ä≤)).

Once the empirical estimates for the covariance
matrices are obtained, a variant of the Eisner-Satta
algorithm is used, as mentioned in ¬ß3.3.

3.5 Theoretical Guarantees

Our main theoretical guarantee is that Algorithm 1
will recover the correct tree u ‚àà U with high prob-
ability, if the given top bracket is correct and if
we obtain enough examples (w(i),x(i)) from the
model in ¬ß2. We give the theorem statement be-
low. The constants lurking in the O-notation and

the full proof are in the supplementary.
Denote œÉx(j, k)(r) as the rth singu-

lar value of Œ£x(j, k). Let œÉ‚àó(x) :=
minj,k‚àà`(x) min

(
œÉx(j, k)(m)

)
.

Theorem 1 Define uÃÇ as the estimated tree for tag
sequence x and u(x) as the correct tree. Let

4(x) := min
u‚Ä≤‚ààU :u‚Ä≤ 6=u(x)

(c(u(x))‚àí c(u‚Ä≤))/(8|`(x)|)

Assume that

N ‚â• O
Ô£´Ô£≠ m2 log

(
p2`(x)2

Œ¥

)
min(œÉ‚àó(x)24(x)2, œÉ‚àó(x)2)ŒΩx(Œ≥)2

Ô£∂Ô£∏
Then with probability 1‚àí Œ¥, uÃÇ = u(x).
where ŒΩx(Œ≥), defined in the supplementary, is a
function of the underlying distribution over the tag
sequences x and the kernel bandwidth Œ≥.

Thus, the sample complexity of our approach
depends on the dimensionality of the latent and
observed states (m and p), the underlying singu-
lar values of the cross-covariance matrices (œÉ‚àó(x))
and the difference in the cost of the true tree com-
pared to the cost of the incorrect trees (4(x)).
4 Experiments
We report results on three different languages: En-
glish, German, and Chinese. For English we use
the Penn treebank (Marcus et al., 1993), with sec-
tions 2‚Äì21 for training and section 23 for final
testing. For German and Chinese we use the Ne-
gra treebank and the Chinese treebank respectively
and the first 80% of the sentences are used for
training and the last 20% for testing. All punc-
tuation from the data is removed.4

We primarily compare our method to the
constituent-context model (CCM) of Klein and
Manning (2002). We also compare our method to
the algorithm of Seginer (2007).

4.1 Experimental Settings
Top bracket heuristic Our algorithm requires
the top bracket in order to direct the latent tree.
In practice, we employ the following heuristic to
find the bracket using the following three steps:

‚Ä¢ If there exists a comma/semicolon/colon at in-
dex i that has at least a verb before i and both
a noun followed by a verb after i, then return
([0, i ‚àí 1], [i, `(x)]) as the top bracket. (Pick
the rightmost comma/semicolon/colon if multi-
ple satisfy the criterion).
4We make brief use of punctuation for our top bracket

heuristic detailed below before removing it.

1068



Length CCM CCM-U CCM-OB CCM-UB
‚â§ 10 72.5 57.1 58.2 62.9
‚â§ 15 54.1 36 24 23.7
‚â§ 20 50 34.7 19.3 19.1
‚â§ 25 47.2 30.7 16.8 16.6
‚â§ 30 44.8 29.6 15.3 15.2
‚â§ 40 26.3 13.5 13.9 13.8

Table 1: Comparison of different CCM variants on English
(training). U stands for universal POS tagset, OB stands for
conjoining original POS tags with Brown clusters and UB
stands for conjoining universal POS tags with Brown clusters.
The best setting is just the vanilla setting, CCM.

‚Ä¢ Otherwise find the first non-participle verb (say
at index j) and return ([0, j ‚àí 1], [j, `(x)]).
‚Ä¢ If no verb exists, return ([0, 1], [1, `(x)]).

Word embeddings As mentioned earlier, each
wi can be an arbitrary feature vector. For all lan-
guages we use Brown clustering (Brown et al.,
1992) to construct a log(C) + C feature vector
where the first log(C) elements indicate which
mergable cluster the word belongs to, and the last
C elements indicate the cluster identity. For En-
glish, more sophisticated word embeddings are
easily obtainable, and we experiment with neural
word embeddings Turian et al. (2010) of length
50. We also explored two types of CCA embed-
dings: OSCCA and TSCCA, given in Dhillon et
al. (2012). The OSCCA embeddings behaved bet-
ter, so we only report its results.

Choice of kernel For our experiments, we use
the kernel

KŒ≥(j, k, j‚Ä≤, k‚Ä≤|x,x‚Ä≤)

= max
{

0, 1‚àí Œ∫(j, k, j
‚Ä≤, k‚Ä≤|x,x‚Ä≤)
Œ≥

}
where Œ≥ denotes the user-specified bandwidth,

and Œ∫(j, k, j‚Ä≤, k‚Ä≤|x,x‚Ä≤) = |j ‚àí k| ‚àí |j
‚Ä≤ ‚àí k‚Ä≤|

|j ‚àí k|+ |j‚Ä≤ ‚àí k‚Ä≤| if
x(j) = x(j‚Ä≤) and x(k‚Ä≤) = x(k), and sign(j ‚àí
k) = sign(j‚Ä≤ ‚àí k‚Ä≤) (and‚àû otherwise).

The kernel is non-zero if and only if the tags at
position j and k in x are identical to the ones in
position j‚Ä≤ and k‚Ä≤ in x‚Ä≤, and if the direction be-
tween j and k is identical to the one between j‚Ä≤

and k‚Ä≤. Note that the kernel is not binary, as op-
posed to the theoretical kernel in the supplemen-
tary material. Our experiments show that using a
non-zero value different than 1 that is a function
of the distance between j and k compared to the
distance between j‚Ä≤ and k‚Ä≤ does better in practice.

Choice of data For CCM, we found that if the
full dataset (all sentence lengths) is used in train-
ing, then performance degrades when evaluating
on sentences of length ‚â§ 10. We therefore restrict
the data used with CCM to sentences of length
‚â§ `, where ` is the maximal sentence length being
evaluated. This does not happen with our algo-
rithm, which manages to leverage lexical informa-
tion whenever more data is available. We therefore
use the full data for our method for all lengths.

We also experimented with the original POS
tags and the universal POS tags of Petrov et al.
(2011). Here, we found out that our method
does better with the universal part of speech tags.
For CCM, we also experimented with the origi-
nal parts of speech, universal tags (CCM-U), the
cross-product of the original parts of speech with
the Brown clusters (CCM-OB), and the cross-
product of the universal tags with the Brown clus-
ters (CCM-UB). The results in Table 1 indicate
that the vanilla setting is the best for CCM.

Thus, for all results, we use universal tags for
our method and the original POS tags for CCM.
We believe that our approach substitutes the need
for fine-grained POS tags with the lexical informa-
tion. CCM, on the other hand, is fully unlexical-
ized.

Parameter Selection Our method requires two
parameters, the latent dimension m and the band-
width Œ≥. CCM also has two parameters, the num-
ber of extra constituent/distituent counts used for
smoothing. For both methods we chose the best
parameters for sentences of length ` ‚â§ 10 on the
English Penn Treebank (training) and used this
set for all other experiments. This resulted in
m = 7, Œ≥ = 0.4 for our method and 2, 8 for
CCM‚Äôs extra constituent/distituent counts respec-
tively. We also tried letting CCM choose differ-
ent hyperparameters for different sentence lengths
based on dev-set likelihood, but this gave worse
results than holding them fixed.

4.2 Results

Test I: Accuracy Table 2 summarizes our re-
sults. CCM is used with the initializer proposed
in Klein and Manning (2002).5 NN, CC, and BC
indicate the performance of our method for neural
embeddings, CCA embeddings, and Brown clus-
tering respectively, using the heuristic for hdir de-

5We used the implementation available at
http://tinyurl.com/lhwk5n6.

1069



` English German Chinese
NN-O NN CC-O CC BC-O BC CCM BC-O BC CCM BC-O BC CCM

tr
ai

n ‚â§ 10 70.9 69.2 70.4 68.7 71.1 69.3 72.5 64.6 59.9 62.6 64.9 57.3 46.1‚â§ 20 55.1 53.5 53.2 51.6 53.0 51.5 50 52.7 48.7 47.9 51.4 46 22.4
‚â§ 40 46.1 44.5 43.6 41.9 43.3 41.8 26.3 46.7 43.6 19.8 42.6 38.6 15

te
st

‚â§ 10 69.2 66.7 68.3 65.5 68.9 66.1 70.5 66.4 61.6 64.7 58.0 53.2 40.7
‚â§ 15 60.3 58.3 58.6 56.4 58.6 56.5 53.8 57.5 53.5 49.6 54.3 49.4 35.9
‚â§ 20 54.1 52.3 52.3 50.3 51.9 50.2 50.4 52.8 49.2 48.9 49.7 45.5 20.1
‚â§ 25 50.8 49.0 48.6 46.6 48.3 46.6 47.4 50.0 46.8 45.6 46.7 42.7 17.8
‚â§ 30 48.1 46.3 45.6 43.7 45.4 43.8 44.9 48.3 45.4 21.9 44.6 40.7 16.1
‚â§ 40 45.5 43.8 43.0 41.1 42.7 41.1 26.1 46.9 44.1 20.1 42.2 38.6 14.3

Table 2: F1 bracketing measure for the test sets and train sets in three languages. NN, CC, and BC indicate the performance of
our method for neural embeddings, CCA embeddings, and Brown clustering respectively, using the heuristic for hdir described
in ¬ß 4.1. NN-O, CC-O, and BC-O indicate that the oracle (i.e. true top bracket) was used for hdir.

0

5

10

15

20

25

30

35

20-30 31-40 41-50 51-60 61-70 71-80

Fr
e

q
u

e
n

cy
 

Bracketing F1 

CCM Random Restarts (Length <= 10) 

Figure 4: Histogram showing performance of CCM across
100 random restarts for sentences of length ‚â§ 10.

scribed in ¬ß 4.1. NN-O, CC-O, and BC-O indicate
that the oracle (i.e. true top bracket) was used for
hdir. For our method, test set results can be ob-
tained by using Algorithm 1 (except the distances
are computed using the training data).

For English, while CCM behaves better for
short sentences (` ‚â§ 10), our algorithm is more
robust with longer sentences. This is especially
noticeable for length ‚â§ 40, where CCM breaks
down and our algorithm is more stable. We find
that the neural embeddings modestly outperform
the CCA and Brown cluster embeddings.

The results for German are similar, except CCM
breaks down earlier at sentences of ` ‚â§ 30. For
Chinese, our method substantially outperforms
CCM for all lengths. Note that CCM performs
very poorly, obtaining only around 20% accu-
racy even for sentences of ` ‚â§ 20. We didn‚Äôt
have neural embeddings for German and Chinese
(which worked best for English) and thus only
used Brown cluster embeddings.

For English, the disparity between NN-O (ora-
cle top bracket) and NN (heuristic top bracket) is
rather low suggesting that our top bracket heuris-
tic is rather effective. However, for German and
Chinese note that the ‚ÄúBC-O‚Äù performs substan-
tially better, suggesting that if we had a better top
bracket heuristic our performance would increase.

Test II: Sensitivity to initialization The EM al-
gorithm with the CCM requires very careful ini-
tialization, which is described in Klein and Man-
ning (2002). If, on the other hand, random ini-
tialization is used, the variance of the performance
of the CCM varies greatly. Figure 4 shows a his-
togram of the performance level for sentences of
length ‚â§ 10 for different random initializers. As
one can see, for some restarts, CCM obtains ac-
curacies lower than 30% due to local optima. Our
method does not suffer from local optima and thus
does not require careful initialization.

Test III: Comparison to Seginer‚Äôs algorithm
Our approach is not directly comparable to
Seginer‚Äôs because he uses punctuation, while we
use POS tags. Using Seginer‚Äôs parser we were
able to get results on the training sets. On English:
75.2% (` ‚â§ 10), 64.2% (` ‚â§ 20), 56.7% (` ‚â§ 40).
On German: 57.8% (` ‚â§ 10), 45.0% (` ‚â§ 20), and
39.9% (` ‚â§ 40). On Chinese: 56.6% (` ‚â§ 10),
45.1% (` ‚â§ 20), and 38.9% (` ‚â§ 40).

Thus, while Seginer‚Äôs method performs better
on English, our approach performs 2-3 points bet-
ter on German, and both methods give similar per-
formance on Chinese.

5 Conclusion
We described a spectral approach for unsu-
pervised constituent parsing that comes with
theoretical guarantees on latent structure recovery.
Empirically, our algorithm performs favorably to
the CCM of Klein and Manning (2002) without
the need for careful initialization.

Acknowledgements: This work is supported
by NSF IIS1218282, NSF IIS1111142, NIH
R01GM093156, and the NSF Graduate Research
Fellowship Program under Grant No. 0946825
(NSF Fellowship to APP).

1070



References
A. Anandkumar, K. Chaudhuri, D. Hsu, S. M. Kakade,

L. Song, and T. Zhang. 2011. Spectral methods
for learning multivariate latent tree structure. arXiv
preprint arXiv:1107.1283.

R. Bailly, F. Denis, and L. Ralaivola. 2009. Gram-
matical inference as a principal component analysis
problem. In Proceedings of ICML.

R. Bailly, X. Carreras, F. M. Luque, and A. Quattoni.
2013. Unsupervised spectral learning of WCFG
as low-rank matrix completion. In Proceedings of
EMNLP.

P. F. Brown, P.V. Desouza, R.L. Mercer, V.J.D. Pietra,
and J.C. Lai. 1992. Class-based n-gram mod-
els of natural language. Computational linguistics,
18(4):467‚Äì479.

O. P. Buneman. 1971. The recovery of trees from mea-
sures of dissimilarity. Mathematics in the archaeo-
logical and historical sciences.

P. Buneman. 1974. A note on the metric properties of
trees. Journal of Combinatorial Theory, Series B,
17(1):48‚Äì50.

M.J. Choi, V. YF Tan, A. Anandkumar, and A.S. Will-
sky. 2011. Learning latent tree graphical mod-
els. The Journal of Machine Learning Research,
12:1771‚Äì1812.

C. K. Chow and C. N. Liu. 1968. Approximating
Discrete Probability Distributions With Dependence
Trees. IEEE Transactions on Information Theory,
IT-14:462‚Äì467.

S. B. Cohen and N. A. Smith. 2009. Shared logistic
normal distributions for soft parameter tying in un-
supervised grammar induction. In Proceedings of
HLT-NAACL.

S. B. Cohen and N. A. Smith. 2012. Empirical risk
minimization for probabilistic grammars: Sample
complexity and hardness of learning. Computa-
tional Linguistics, 38(3):479‚Äì526.

S. B. Cohen, K. Stratos, M. Collins, D. P. Foster, and
L. Ungar. 2012. Spectral learning of latent-variable
PCFGs. In Proceedings of ACL.

R. Desper and O. Gascuel. 2005. The minimum evo-
lution distance-based approach to phylogenetic in-
ference. Mathematics of evolution and phylogeny,
pages 1‚Äì32.

P. S. Dhillon, J. Rodu, D. P. Foster, and L. H. Ungar.
2012. Two step cca: A new spectral method for es-
timating vector models of words. In Proceedings of
ICML.

J. Eisner and G. Satta. 1999. Efficient parsing for
bilexical context-free grammars and head automaton
grammars. In Proceedings of ACL.

P. ErdoÃÉs, M. Steel, L. SzeÃÅkely, and T. Warnow. 1999.
A few logs suffice to build (almost) all trees: Part ii.
Theoretical Computer Science, 221(1):77‚Äì118.

J. Gillenwater, K. Ganchev, J. GracÃßa, F. Pereira, and
B. Taskar. 2010. Sparsity in dependency grammar
induction. In Proceedings of ACL.

K. Gimpel and N.A. Smith. 2012. Concavity and ini-
tialization for unsupervised dependency parsing. In
Proceedings of NAACL.

D. Golland, J. DeNero, and J. Uszkoreit. 2012. A
feature-rich constituent context model for grammar
induction. In Proceedings of ACL.

M. Gormley and J. Eisner. 2013. Nonconvex global
optimization for latent-variable models. In Proceed-
ings of ACL.

S. Harmeling and C. KI Williams. 2011. Greedy
learning of binary latent trees. Pattern Analysis
and Machine Intelligence, IEEE Transactions on,
33(6):1087‚Äì1097.

T. Hastie, R. Tibshirani, and J. Friedman. 2009. The
Elements of Statistical Learning: Data Mining, In-
ference, and Prediction. Springer Series in Statis-
tics. Springer Verlag.

W. P. Headden, M. Johnson, and D. McClosky. 2009.
Improving unsupervised dependency parsing with
richer contexts and smoothing. In Proceedings of
NAACL-HLT.

D. Hsu, S. Kakade, and T. Zhang. 2009. A spectral
algorithm for learning hidden Markov models. In
Proceedings of COLT.

D. Hsu, S. M. Kakade, and P. Liang. 2012. Identi-
fiability and unmixing of latent parse trees. arXiv
preprint arXiv:1206.3137.

M. Ishteva, H. Park, and L. Song. 2012. Unfolding
latent tree structures using 4th order tensors. arXiv
preprint arXiv:1210.1258.

F. Jelinek, J. D. Lafferty, and R. L. Mercer. 1992. Ba-
sic methods of probabilistic context free grammars.
Springer.

D. Klein and C. D. Manning. 2002. A generative
constituent-context model for improved grammar in-
duction. In Proceedings of ACL.

M. Kolar, A. P. Parikh, and E. P. Xing. 2010a. On
sparse nonparametric conditional covariance selec-
tion. In Proceedings of ICML.

M. Kolar, L. Song, A. Ahmed, and E. P. Xing. 2010b.
Estimating time-varying networks. The Annals of
Applied Statistics, 4(1):94‚Äì123.

M. P. Marcus, B. Santorini, and M. A. Marcinkiewicz.
1993. Building a large annotated corpus of En-
glish: The Penn treebank. Computational Linguis-
tics, 19:313‚Äì330.

1071



A.P. Parikh, L. Song, and E.P. Xing. 2011. A spectral
algorithm for latent tree graphical models. In Pro-
ceedings of ICML.

S. Petrov, D. Das, and R. McDonald. 2011. A univer-
sal part-of-speech tagset. ArXiv:1104.2086.

A. Rzhetsky and M. Nei. 1993. Theoretical founda-
tion of the minimum-evolution method of phyloge-
netic inference. Molecular Biology and Evolution,
10(5):1073‚Äì1095.

N. Saitou and M. Nei. 1987. The neighbor-joining
method: a new method for reconstructing phylo-
genetic trees. Molecular biology and evolution,
4(4):406‚Äì425.

Y. Seginer. 2007. Fast unsupervised incremental pars-
ing. In Proceedings of ACL.

N. A. Smith and J. Eisner. 2005. Contrastive estima-
tion: Training log-linear models on unlabeled data.
In Proceedings of ACL.

L. Song, A.P. Parikh, and E.P. Xing. 2011. Kernel
embeddings of latent tree graphical models. In Pro-
ceedings of NIPS.

V. I. Spitkovsky, H. Alshawi, and D. Jurafsky. 2010a.
From baby steps to leapfrog: how less is more in
unsupervised dependency parsing. In Proceedings
of NAACL.

V. I. Spitkovsky, H. Alshawi, D. Jurafsky, and C. D.
Manning. 2010b. Viterbi training improves un-
supervised dependency parsing. In Proceedings of
CoNLL.

V. I. Spitkovsky, H. Alshawi, and D. Jurafsky. 2013.
Breaking out of local optima with count transforms
and model recombination: A study in grammar in-
duction. In Proceedings of EMNLP.

J. P. Turian, L.-A. Ratinov, and Y. Bengio. 2010. Word
representations: A simple and general method for
semi-supervised learning. In Proceedings of ACL.

S. Zhou, J. Lafferty, and L. Wasserman. 2010. Time
varying undirected graphs. Machine Learning,
80(2-3):295‚Äì319.

1072


