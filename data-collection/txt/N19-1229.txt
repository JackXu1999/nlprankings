




































Simple Attention-Based Representation Learning for Ranking Short Social Media Posts


Proceedings of NAACL-HLT 2019, pages 2212‚Äì2217
Minneapolis, Minnesota, June 2 - June 7, 2019. c¬©2019 Association for Computational Linguistics

2212

Simple Attention-Based Representation Learning for
Ranking Short Social Media Posts

Peng Shi,1 Jinfeng Rao,2‚àó and Jimmy Lin1
1 David R. Cheriton School of Computer Science, University of Waterloo

2 Facebook AI
{peng.shi, jimmylin}@uwaterloo.ca, raojinfeng@fb.com

Abstract
This paper explores the problem of ranking
short social media posts with respect to user
queries using neural networks. Instead of start-
ing with a complex architecture, we proceed
from the bottom up and examine the effective-
ness of a simple, word-level Siamese architec-
ture augmented with attention-based mecha-
nisms for capturing semantic ‚Äúsoft‚Äù matches
between query and post tokens. Extensive
experiments on datasets from the TREC Mi-
croblog Tracks show that our simple models
not only achieve better effectiveness than ex-
isting approaches that are far more complex
or exploit a more diverse set of relevance sig-
nals, but are also much faster. Implemen-
tations of our samCNN (Simple Attention-
based Matching CNN) models are shared with
the community to support future work.1

1 Introduction

Despite a large body of work on neural rank-
ing models for ‚Äútraditional‚Äù ad hoc retrieval over
web pages and newswire documents (Huang et al.,
2013; Shen et al., 2014; Guo et al., 2016; Xiong
et al., 2017; Mitra et al., 2017; Pang et al., 2017;
Dai et al., 2018; McDonald et al., 2018), there has
been surprisingly little work (Rao et al., 2017) on
applying neural networks to searching short social
media posts such as tweets on Twitter. Rao et al.
(2019) identified short document length, informal-
ity of language, and heterogeneous relevance sig-
nals as main challenges in relevance modeling,
and proposed the first neural model specifically
designed to handle these characteristics. Eval-
uation on a number of datasets from the TREC
Microblog Tracks demonstrates state-of-the-art ef-
fectiveness as well as the necessity of different
model components to capture a multitude of rel-
evance signals.

‚àóWork done at the University of Maryland, College Park.
1https://github.com/Impavidity/samCNN

Query 
Embeddings

Post 
Embeddings

ùëî" ùëî#

‚Ñé%

ùë£

General Sentence Encoder : 
QAtt or PAtt :
Avg Aggregation : 

ùëú

Figure 1: Our model architecture: a general sentence
encoder is applied on query and post embeddings to
generate gq and gp; an attention encoder is applied
on post embeddings to generate variable-length query-
aware features hi. These features are further aggre-
gated to yield v, which feeds into the final prediction.

In this paper, we also examine the problem of
modeling relevance for ranking short social me-
dia posts, but from a complementary perspective.
As Weissenborn et al. (2017) notes, most sys-
tems are built in a top-down process: authors pro-
pose a complex architecture and then validate de-
sign decisions with ablation experiments. How-
ever, such experiments often lack comparisons to
strong baselines, which raises the question as to
whether model complexity is empirically justified.
As an alternative, they advocate a bottom-up ap-
proach where architectural complexity is gradu-
ally increased. We adopt exactly such an ap-
proach, focused exclusively on word-level model-
ing. As shown in Figure 1, we examine variants of
a simple, generic architecture that has emerged as
‚Äúbest practices‚Äù in the NLP community for tack-
ling modeling problems on two input sequences: a
Siamese CNN architecture for learning representa-
tions over both inputs (a query and a social media
post in our case), followed by fully-connected lay-
ers that produce a final relevance prediction (Sev-
eryn and Moschitti, 2015; He et al., 2016; Rao



2213

hacked

Evernote

has

been

Evernote

hacked

Your

password

Query

Social Media Post

PAtt Kernel

cosine similarity 

‚Ñé"

has

been

Evernote

hacked

Your

password

Query

Social Media Post

QAtt Kernel

‚Ñé"

hacked

Evernote

Figure 2: The Query-Aware Attention (QAtt) architecture on the left and the Position-Aware Attention (PAtt)
architecture on the right. In both, we construct F convolutional kernels for each query token (here, one kernel for
the query token ‚ÄòEvernote‚Äô is visualized). In QAtt, the query token embedding is directly ‚Äúinjected‚Äù into the kernel
via element-wise product (blue dotted arrows). In PAtt, cosine similarity between the query token and tokens in
the post within the convolution window are used as attention weights in the kernel.

et al., 2016), which we refer to as a General Sen-
tence Encoder in Section 2.1. Further adopting
best practices, we incorporate query-aware convo-
lutions with an average aggregation layer in the
representation learning process.

Recently, a number of researchers (Conneau
et al., 2017; Mohammed et al., 2018) have started
to reexamine simple baselines and found them to
be highly competitive with the state of the art, es-
pecially with proper tuning. For example, the In-
ferSent approach (Conneau et al., 2017) uses a
simple BiLSTM with max pooling that achieves
quite impressive accuracy on several classifica-
tion benchmarks. Our contribution is along sim-
ilar lines, where we explore simple yet highly ef-
fective models for ranking social media posts, to
gain insights into query‚Äìpost relevance matching
using standard neural architectures. Experiments
with TREC Microblog datasets show that our best
model not only achieves better effectiveness than
existing approaches that leverage more signals,
but also demonstrates 4√ó speedup in model train-
ing and inference compared to a recently-proposed
neural model.

2 Model

Our model comprises a representation learning
layer with convolutional encoders and another
simple aggregation layer. These architectural
components are described in detail below.

2.1 Representation Learning Layer

General Sentence Encoder: The general sen-
tence encoder uses a standard convolutional layer

with randomly initialized kernels to learn seman-
tic representations for text. More formally, given
query q and post p as sentence inputs, we first con-
vert them to embedding matrices Q and P through
an embedding lookup layer, where Q ‚àà Rn√ód and
P ‚àà Rm√ód, d is the dimension of embeddings,
and n and m are the number of tokens in q and
p, respectively. Then we apply a standard convo-
lution operation with kernel window size k over
the embedding matrix Q and P. The convolu-
tion operation is parameterized by a weight term
W ‚àà RF√ók√ód and a bias term bw ‚àà RF , where F
is the number of convolutional kernels. This gen-
erates semantic representation Oq ‚àà Rn√óF and
Op ‚àà Rm√óF , on which max pooling and an MLP
are applied to obtain query representation gq ‚àà Rd

and post representation gp ‚àà Rd.
The weakness of the kernels in the general

sentence encoder is that they do not incorporate
knowledge from the query when attempting to
capture feature patterns from the post. Inspired
by attention mechanisms (Bahdanau et al., 2014),
we propose two novel approaches to incorporate
query information when encoding the post repre-
sentation, which we introduce below.

Query-Aware Attention Encoder (QAtt): In
QAtt (Figure 2, left), for each query token, we
construct a token-specific convolutional kernel to
‚Äúinject‚Äù the query information. Unlike methods
that apply attention mechanisms after the sentence
representations are generated (Bahdanau et al.,
2014; Seo et al., 2016), our approach aims to
model the representation learning process jointly
with an attention mechanism.



2214

Formally, for each query token tq, the QAtt ker-
nel WtqQAtt is composed as follows:

W
tq
QAtt = U‚äóQtq (1)

where U ‚àà RF√ók√ód represents trainable parame-
ters, Qtq is the embedding of token tq with size Rd

and WtqQAtt ‚àà RF√ók√ód. The element-wise product
‚äó is applied between the token embedding Qtq
and the last dimension of kernel weights U. In
other words, we create F convolutional kernels
for each query token, where each kernel is ‚Äúin-
jected‚Äù with the embedding of that query token via
element-wise product. Figure 2 (left) illustrates
one kernel for the query token ‚ÄòEvernote‚Äô, where
element-wise product is represented by blue dot-
ted arrows. When a QAtt token-specific kernel is
applied, a window slides across the post embed-
dings P and learns soft matches to each query to-
ken to generate query-aware representations.

On top of the QAtt kernels, we apply max-
pooling and an MLP to produce a set of post rep-
resentations {hi}, with each hi ‚àà Rd standing for
the representation learned from query token tqi .
Position-Aware Attention Encoder (PAtt): In
the QAtt encoder, token-specific kernels learn soft
matches to the query. However, they still ignore
positional information when encoding the post se-
mantics, which has been shown to be effective
for sequence modeling (Gehring et al., 2017). To
overcome this limitation, we propose an alterna-
tive attention encoder that captures positional in-
formation through interactions between query em-
beddings and post embeddings.

Given a query token tq and the j-th position in
post p, we compute the interaction scores by tak-
ing the cosine similarity between the word embed-
dings of token tq and post tokens tpj:j+k‚àí1 from
position j to j + k ‚àí 1:

Sj = [cos(tq, tpj ); ...; cos(tq, tpj+k‚àí1)] (2)

where Sj ‚àà Rk√ó1 and k is the width of the convo-
lutional kernel we are learning. That is, for each
token in the post within the window, we compute
its cosine similarity with query token tq. We then
convert the similarity vector Sj into a matrix:

SÃÇj = Sj ¬∑ 1, SÃÇj ‚àà Rk√ód (3)

where 1 ‚àà R1√ód with each element set to 1. Fi-
nally, the PAtt convolutional kernel for query to-
ken tq at the j-th position is constructed as:

W
tq ,j
PAtt = V ‚äó SÃÇj (4)

where V ‚àà RF√ók√ód represents the trainable pa-
rameters. The element-wise product ‚äó is applied
between the attention weights SÃÇj and the last two
dimensions of kernel weights V.

Conceptually, this operation can be thought as
adding a soft attention weight (with values in the
range of [0, 1]) to each convolutional kernel, where
the weight is determined by the cosine similarity
between the token from the post and a particular
query token; since cosine similarity is a scalar, we
fill in the value in all d dimensions of the ker-
nel, where d is the size of the word embedding.
This is illustrated in Figure 2 (right), where we
show one kernel of width two for the query to-
ken ‚ÄòEvernote‚Äô. The brown (green) arrows capture
cosine similarity between the query token ‚ÄòEver-
note‚Äô and the first (second) token from the post in
the window. These values then serve as weights
in the kernels, shown as the hatched areas. Sim-
ilar to QAtt, the PAtt encoder with max-pooling
and an MLP generates a set of post representations
{hi}, with each hi standing for the representation
learned from query token tqi .

It is worth noting that both the QAtt and PAtt
encoders have no extra parameters over a gen-
eral sentence encoder. However, incorporating the
query-aware and position-aware information en-
ables more effective representation learning, as
our experiments show later. The QAtt and PAtt en-
coders can also be used as plug-in modules in any
standard convolutional architecture to learn query-
biased representations.

2.2 Aggregation Layer

After the representation layer, a set of vectors
{gq, gp, {hi}} is obtained. Because our model
yields different numbers of hi with queries of dif-
ferent lengths, further aggregation is needed to
output a global feature v. We directly average all
vectors v = 1Nq

‚àë
hi as the aggregated feature,

where Nq is the length of the query.

2.3 Training

To obtain a final relevance score, the feature vec-
tors gq, gp, and v are concatenated and fed into
an MLP with ReLU activation for dimensionality
reduction to obtain o, followed by batch normal-
ization and fully-connected layer and softmax to
output the final prediction. The model is trained
end-to-end with a Stochastic Gradient Decent op-
timizer using negative log-likelihood loss.



2215

Year 2011 2012 2013 2014
# queries 49 60 60 55
# tweets 39,780 49,879 46,192 41,579
# relevant 1,940 4,298 3,405 6,812
%relevant 4.87 8.62 7.37 16.38

Table 1: Statistics of TREC MB 2011‚Äì2014 datasets.

Param Value Param Value
Embedding size 300 k 0.05
Hidden size 200 Final hidden size 100
Kernel number 250 Dropout ratio 0.5
Kernel size 2 Learning rate 0.03

Table 2: Hyperparameters for our models. GloVe (Pen-
nington et al., 2014) embeddings are used and fine-
tuned during training. Unknown words are initialized
from a uniform distribution [‚àík, k].

3 Experimental Setup

Datasets and Hyperparameters. Our models are
evaluated on four tweet test collections from the
TREC 2011‚Äì2014 Microblog (MB) Tracks (Ou-
nis et al., 2011; Soboroff et al., 2012; Lin and
Efron, 2013; Lin et al., 2014). Each dataset con-
tains around 50‚Äì60 queries; detailed statistics are
shown in Table 1. As with Rao et al. (2019), we
evaluated our models in a reranking task, where
the inputs are up to the top 1000 tweets retrieved
from ‚Äúbag of words‚Äù ranking using query likeli-
hood (QL). We ran four-fold cross-validation split
by year (i.e., train on three years‚Äô data, test on
one year‚Äôs data) and followed Rao et al. (2019)
for sampling validation sets. For metrics, we used
average precision (AP) and precision at rank 30
(P30). We conducted Fisher‚Äôs two-sided, paired
randomization tests (Smucker et al., 2007) to as-
sess statistical significance at p < 0.05. The best
model hyperparameters are shown in Table 2.

Baselines. On top of QL, RM3 (Abdul-Jaleel
et al., 2004) provides strong non-neural results us-
ing pseudo-relevance feedback. We also compared
against MP-HCNN (Rao et al., 2019), the first neu-
ral model that captures specific characteristics of
social media posts, which improves over many
previous neural models, e.g., K-NRM (Xiong
et al., 2017) and DUET (Mitra et al., 2017), by
a significant margin. To the best of our knowl-
edge, Rao et al. (2019) is the most effective neural
model to date. We compared against two variants
of MP-HCNN; MP-HCNN+QL includes a linear
interpolation with QL scores.

Figure 3: Per-query AP differences between PAtt and
QL on TREC 2013 (queries 111‚Äì170).

4 Results and Discussion

Table 3 shows the effectiveness of all variants
of our model, compared against previous results
copied from Rao et al. (2019). Model 1 illustrates
the effectiveness of the basic BiCNN model with
a kernel window size of two; combining different
window sizes (Kim, 2014) doesn‚Äôt yield any im-
provements. It appears that this model performs
worse than the QL baseline.

Comparing Model 2 to Model 1, we find
that query-aware kernels contribute significant im-
provements, achieving effectiveness comparable
to the QL baseline. With Model 3, which captures
positional information with the position-aware en-
coder, we obtain competitive effectiveness com-
pared to Model 8, the full MP-HCNN model that
includes interpolation with QL. Note that Model
8 leverages additional signals, including URL in-
formation, character-level encodings, and external
term features such as tf‚Äìidf. With Model 4, which
interpolates the position-aware encoder with QL,
we obtain state-of-the-art effectiveness.

Per-Query Analysis. In Figure 3, we show per-
query AP differences between the PAtt model and
the QL baseline on the TREC 2013 dataset. As
we can see, PAtt improves on most of the queries.
For the best-performing query 164 ‚Äúlindsey vonn
sidelined‚Äù, we project the hidden states o into a
low-dimensional space using t-SNE (Maaten and
Hinton, 2008), shown in Figure 4. We observe
that with the basic BiCNN model (left), relevant
posts are scattered. With the addition of an at-
tention mechanism (either QAtt in the middle or
PAtt on the right), most of the relevant posts are
clustered together and separated from the non-
relevant posts. With PAtt, there appears to be
tighter clustering and better separation of the rele-
vant posts from the non-relevant posts, giving rise
to a better ranking. We confirmed similar behav-
ior in many queries, which illustrates the ability of
our position-aware attention encoder to learn bet-
ter query-biased representations compared to the
other two models.



2216

2011 2012 2013 2014
P30 AP P30 AP P30 AP P30 AP

Our Models
1 BiCNN 0.2129 0.1634 0.2028 0.1176 0.2367 0.1284 0.3788 0.2557
2 BiCNN+QAtt 0.39661 0.35861 0.39041 0.23761 0.48611 0.26961 0.63881 0.42261

3 BiCNN+PAtt 0.44691,2 0.41351,25 0.4017
1
5 0.2413

1,5 0.51671,25 0.2817
1,2 0.66421,2 0.43511,25

4 BiCNN+PAtt+QL 0.47351-35-7 0.43461-35,6 0.41641,25,6 0.2516
1-3
5 0.5256

1-3
5,6 0.29651-35 0.67521,2 0.45221-35,7

Existing Models
5 QL 0.40001 0.35761 0.33111 0.20911 0.44501 0.25321 0.61821 0.39241

6 RM3 0.42111 0.38241 0.34521 0.23421 0.47331 0.27661 0.63391 0.44801

7 MP-HCNN(+URL) 0.40751,2 0.38321,2 0.36891,5 0.23371,5 0.52221,25 0.2818
1,2
5 0.6297

1 0.43041

8 MP-HCNN(+URL)+QL 0.42931,25 0.4043
1,2
5,6 0.3791

1,5
6 0.2460

1,5 0.52941-35,6 0.28961,25 0.6394
1 0.44201,5

Table 3: Results of various models on the TREC Microblog Tracks datasets. Models 5‚Äì8 are copied from Rao
et al. (2019); note that MP-HCNN exploits URL information (+URL). Models with +QL include interpolation
with the QL baseline. BiCNN denotes our general sentence encoder architecture, with either query-aware attention
(QAtt) or position-aware attention (PAtt). Superscripts and subscripts indicate the row indexes for which a metric
difference is statistically significant at p < 0.05.

Figure 4: t-SNE visualizations of hidden states for the best-performing query 164 ‚Äúlindsey vonn sidelined‚Äù from
the BiCNN (left), QAtt (middle), and PAtt (right). Black circle (grey cross) represents relevant (non-relevant) post.

Match Count
Oscars 28
snub 20
Affleck 25
Oscars snub 18
snub Affleck 15
Oscars Affleck 23
Oscars snub Affleck 13

Table 4: Matching patterns for the worst-performing
query 127 ‚ÄúOscars snub Affleck‚Äù.

For the worst-performing query 125 ‚ÄúOscars
snub Affleck‚Äù, the PAtt model lost 0.47 in AP
and 0.11 in P30. To diagnose what went wrong,
we sampled the top 30 posts ranked by the PAtt
model and counted the number of posts that con-
tain different combinations of the query terms in
Table 4. The PAtt model indeed captures matching
patterns, mostly on Oscars and Affleck. However,
from the relevance judgments we see that snub is
the dominant term in most relevant posts, while
Oscars is often expressed implicitly. For example,
QL assigns more weight to the term snub in the
relevant post ‚Äúargo wins retributions for the snub

of ben affleck‚Äù because of the term‚Äôs rarity; in con-
trast, the position-aware encoder places emphasis
on the wrong query terms.

Model Performance. Finally, in terms of training
and inference speed, we compared the PAtt model
with MP-HCNN on a machine with a GeForce
GTX 1080 GPU (batch size: 300). In addition to
being more effective (as the above results show),
PAtt is also approximately 4√ó faster.

5 Conclusions

In this paper, we proposed two novel attention-
based convolutional encoders to incorporate
query-aware and position-aware information with
minimal additional model complexity. Results
show that our model is simpler, faster, and more
effective than previous neural models for search-
ing social media posts.

Acknowledgments

This research was supported in part by the Nat-
ural Sciences and Engineering Research Council
(NSERC) of Canada.



2217

References
Nasreen Abdul-Jaleel, James Allan, W. Bruce Croft,

Fernando Diaz, Leah Larkey, Xiaoyan Li, Don-
ald Metzler, Mark D. Smucker, Trevor Strohman,
Howard Turtle, and Courtney Wade. 2004. UMass
at TREC 2004: Novelty and HARD. In TREC.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv:1409.0473.

Alexis Conneau, Douwe Kiela, Holger Schwenk, Loƒ±Ãàc
Barrault, and Antoine Bordes. 2017. Supervised
learning of universal sentence representations from
natural language inference data. In EMNLP, pages
670‚Äì680.

Zhuyun Dai, Chenyan Xiong, Jamie Callan, and
Zhiyuan Liu. 2018. Convolutional neural networks
for soft-matching n-grams in ad-hoc search. In
WSDM, pages 126‚Äì134.

Jonas Gehring, Michael Auli, David Grangier, Denis
Yarats, and Yann N. Dauphin. 2017. Convolutional
sequence to sequence learning. arXiv:1705.03122.

Jiafeng Guo, Yixing Fan, Qingyao Ai, and W. Bruce
Croft. 2016. A deep relevance matching model for
ad-hoc retrieval. In CIKM, pages 55‚Äì64.

Hua He, John Wieting, Kevin Gimpel, Jinfeng Rao, and
Jimmy Lin. 2016. UMD-TTIC-UW at SemEval-
2016 task 1: Attention-based multi-perspective con-
volutional neural networks for textual similarity
measurement. In SemEval-2016, pages 1103‚Äì1108.

Po-Sen Huang, Xiaodong He, Jianfeng Gao, Li Deng,
Alex Acero, and Larry Heck. 2013. Learning deep
structured semantic models for web search using
clickthrough data. In CIKM, pages 2333‚Äì2338.

Yoon Kim. 2014. Convolutional neural networks for
sentence classification. In EMNLP, pages 1746‚Äì
1751.

Jimmy Lin and Miles Efron. 2013. Overview of the
TREC-2013 Microblog Track. In TREC.

Jimmy Lin, Miles Efron, Yulu Wang, and Garrick Sher-
man. 2014. Overview of the TREC-2014 Microblog
Track. In TREC.

Laurens van der Maaten and Geoffrey Hinton. 2008.
Visualizing data using t-SNE. Journal of machine
learning research, 9:2579‚Äì2605.

Ryan McDonald, George Brokos, and Ion Androut-
sopoulos. 2018. Deep relevance ranking using en-
hanced document-query interactions. In EMNLP,
pages 1849‚Äì1860.

Bhaskar Mitra, Fernando Diaz, and Nick Craswell.
2017. Learning to match using local and distributed
representations of text for web search. In WWW,
pages 1291‚Äì1299.

Salman Mohammed, Peng Shi, and Jimmy Lin. 2018.
Strong baselines for simple question answering over
knowledge graphs with and without neural net-
works. In NAACL, pages 291‚Äì296.

Iadh Ounis, Craig Macdonald, Jimmy Lin, and Ian
Soboroff. 2011. Overview of the TREC-2011 Mi-
croblog Track. In TREC.

Liang Pang, Yanyan Lan, Jiafeng Guo, Jun Xu, Jing-
fang Xu, and Xueqi Cheng. 2017. DeepRank: A
new deep architecture for relevance ranking in in-
formation retrieval. In CIKM, pages 257‚Äì266.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. GloVe: Global vectors for word
representation. In EMNLP, pages 1532‚Äì1543.

Jinfeng Rao, Hua He, and Jimmy Lin. 2016. Noise-
contrastive estimation for answer selection with
deep neural networks. In CIKM, pages 1913‚Äì1916.

Jinfeng Rao, Hua He, Haotian Zhang, Ferhan Ture,
Royal Sequiera, Salman Mohammed, and Jimmy
Lin. 2017. Integrating lexical and temporal signals
in neural ranking models for searching social media
streams. arXiv:1707.07792.

Jinfeng Rao, Wei Yang, Yuhao Zhang, Ferhan Ture,
and Jimmy Lin. 2019. Multi-perspective relevance
matching with hierarchical ConvNets for social me-
dia search. In AAAI.

Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi,
and Hannaneh Hajishirzi. 2016. Bidirectional
attention flow for machine comprehension.
arXiv:1611.01603.

Aliaksei Severyn and Alessandro Moschitti. 2015.
Learning to rank short text pairs with convolutional
deep neural networks. In SIGIR, pages 373‚Äì382.

Yelong Shen, Xiaodong He, Jianfeng Gao, Li Deng,
and GreÃÅgoire Mesnil. 2014. Learning semantic rep-
resentations using convolutional neural networks for
web search. In WWW, pages 373‚Äì374.

Mark D. Smucker, James Allan, and Ben Carterette.
2007. A comparison of statistical significance tests
for information retrieval evaluation. In CIKM, pages
623‚Äì632.

Ian Soboroff, Iadh Ounis, Craig Macdonald, and
Jimmy Lin. 2012. Overview of the TREC-2012 Mi-
croblog Track. In TREC.

Dirk Weissenborn, Georg Wiese, and Laura Seiffe.
2017. Making neural QA as simple as possible but
not simpler. In CoNLL, pages 271‚Äì280.

Chenyan Xiong, Zhuyun Dai, Jamie Callan, Zhiyuan
Liu, and Russell Power. 2017. End-to-end neural
ad-hoc ranking with kernel pooling. In SIGIR, pages
55‚Äì64.


