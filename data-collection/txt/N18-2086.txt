



















































The Computational Complexity of Distinctive Feature Minimization in Phonology


Proceedings of NAACL-HLT 2018, pages 542–547
New Orleans, Louisiana, June 1 - 6, 2018. c©2018 Association for Computational Linguistics

The Computational Complexity of Distinctive Feature Minimization in
Phonology

Hubie Chen
Computer Science and Information Systems

Birkbeck, University of London
hubie@dcs.bbk.ac.uk

Mans Hulden
Department of Linguistics

University of Colorado
mans.hulden@colorado.edu

Abstract

We analyze the complexity of the problem of
determining whether a set of phonemes forms
a natural class and, if so, that of finding the
minimal feature specification for the class. A
standard assumption in phonology is that find-
ing a minimal feature specification is an au-
tomatic part of acquisition and generalization.
We find that the natural class decision problem
is tractable (i.e. is in P), while the minimiza-
tion problem is not; the decision version of the
problem which determines whether a natural
class can be defined with k features or less
is NP-complete. We also show that, empir-
ically, a greedy algorithm for finding minimal
feature specifications will sometimes fail, and
thus cannot be assumed to be the basis for hu-
man performance in solving the problem.

1 Introduction

The distinctive feature is held by many phonol-
ogists, independently of theoretical orientation,
to be the fundamental unit of analysis of sound
patterns in language. The underlying working
assumption of most phonological approaches is
that a single sound or a set of sounds is ex-
pressed through a combination of positive or neg-
ative features and that these features are in some
sense universal across languages (Mielke, 2008a).
The exact makeup of the feature set employed
has varied over time, ranging from the limited,
more acoustic-oriented features of Jakobson et al.
(1951), to the richer model presented in Chom-
sky and Halle (1968), to more complex hierarchi-
cally organized features in Clements (1985). The
concept of natural class is intimately tied to such
feature systems and is taken to be any set of seg-
ments that share some number of distinctive fea-
tures. Furthermore, phonological alternations that
do not target natural classes are hypothesized not
to occur.

Another assumption that is found in phonolog-
ical literature—often less explicit—is that when-
ever a phonological process targets a group of
sounds, that group is to be expressed nonredun-
dantly by the minimum number of features re-
quired to do so. In general, one can find a mul-
titude of ways in which a set of phonemes can be
specified using positive or negative features. For
example, using the feature system shown in Ta-
ble 1, the set {m,n} has the obvious minimal de-
scription [+nas], since m and n are the only nasals.
But that set could also be specified non-minimally
as:




+cons
-cnt
-hi
-bk
+voi
+son




(1)

The potential complexity of this problem, find-
ing a minimal specification, is not addressed in the
phonological literature. Yet, finding such a min-
imal specification is not trivial. Using more re-
alistic feature systems such as the ones given in
Hayes (2011), there are, for example, 208 dis-
tinct solutions to specifying the set {e,i} in En-
glish, only four of which have the minimum length
of 3 features. While such modern feature sys-
tems work with 25–30 features, one can actually
assume more features are needed to cover more
cross-linguistically exotic contrasts such as those
produced by including click consonants (Miller,
2011). The P-base 3 resource (Mielke, 2008b) lists
398 features over 8 feature systems, covering 629
languages.

The general notion of feature economy has a
long tradition in phonology (Jakobson, 1942; Mar-
tinet, 1955; Clements, 2003), mostly targeting en-
tire feature systems in a language, i.e. advocating

542



that on the grammar level, individual languages
make maximal use of the feature inventory avail-
able (Fant, 1966). Equally prominent is the as-
sumption that any specification of phonological al-
ternations be made with the minimal number of
features necessary: “one should use the minimum
number of features required to specify all and only
the sounds in the class.” (Zsiga, 2012, p.282).
Hayes (2011), among others, argues, following
Ockham’s Razor, that this is how generalization
can take place and that phonological hypotheses
are made in precisely this way—witnessing alter-
nations that target a set of sounds, learners find
the minimal feature specification that is consis-
tent with the alternating sounds, generalizing from
there to other sounds that may enter the language.
Halle (1962) also proposes a mechanism of “fea-
ture counting” as a methodology to rule out spuri-
ous generalizations one might propose—a process
which implicitly includes the capability of feature
minimization.

Similar arguments of feature minimization are
used to perform an optimization of an entire
phonological grammar. In Radical Underspecifi-
cation, Archangeli (1984) refers to what is termed
FEATURE MINIMIZATION PRINCIPLE: “A gram-
mar is most highly valued when underlying repre-
sentations include the minimal number of features
necessary to make the different phonemes of the
language” (Archangeli, 1984, p. 48).

Given such claims concerning acquisition and
phonological analysis, it is of some interest to as-
sess the actual computational complexity of fea-
ture minimization. This entails answering how
difficult it is in the worst case to determine whether
a set of segments represents a natural class, and
also how to find the minimal feature specification.

2 Overview

We will assume a set of phonemes P—the
phoneme inventory—and another set Q, our tar-
get set that we want to express through a combi-
nation of features, and a feature system F such
as the one shown in Table 1. The first problem
we address is that of determining whether a set of
phonemes Q forms a natural class, which we call
the feature description problem. We show that this
is decidable in polynomial time. Further, we will
show that a minimization version of the problem,
which we call the feature minimization problem is
NP-complete (Garey and Johnson, 1979; Sipser,

cons son syl voi cnt nas lat ant cor hi bk lo rd
p + - - - - - - + - - - - -
t + - - - - - - + + - - - -
k + - - - - - - - - + + - -
b + - - + - - - + - - - - -
d + - - + - - - + + - - - -
g + - - + - - - - - + + - -
f + - - - + - - + - - - - -
s + - - - + - - + + - - - -
x + - - - + - - - - + + - -
v + - - + + - - + - - - - -
G + - - + + - - - - + + - -
w - + - + + - - - - + + - +
j - + - + + - - - - + - - -
l + + - + + - + + + - - - -

m + + - + - + - + - - - - -
n + + - + - + - + + - - - -
a - + + + + - - - - - + + -
e - + + + + - - - - - - - -
i - + + + + - - - - + - - -
o - + + + + - - - - - + - +
u - + + + + - - - - + + - +
y - + + + + - - - - + - - +

Table 1: An example typical feature system (truncated
to 13 features).

2013). We will show this by reduction from the
well known set covering problem (Karp, 1972).

Many phonologists espouse a combination of
binary (equipollent) and privative (univalent) fea-
tures (Trubetzkoy, 1969; Ewen and van der Hulst,
1985; Goldsmith, 1985). The rationale is that, for
example, the feature [±labial] has rarely, if ever,
been found to play a role in a phonological system
as [−labial], i.e. phonological processes that tar-
get non-labials seem to be absent. Hence, many
phonologists favor the use of a single possibility
[LABIAL] in a specification that includes the labi-
als. For this reason, we analyze separately both the
complexity of using only such privative features
(positive features only), which we call the positive
feature description problem (is Q a natural class
if we only use positive features?) and the corre-
sponding positive feature minimization problem.

3 Notation and terms

Throughout, when A is a set, we use ℘(A) to de-
note the power set of A.

Relative to a set P of phonemes, we define a
feature system to be a subset F ⊆ ℘(P ). When
Q ⊆ P , we define a F-description of Q to be a
sequence G1, . . . , Gm ⊆ P such that there ex-
ist pairwise distinct elements F1, . . . , Fm ∈ F
where:

543



• each Gi is equal to either Fi or P \ Fi, and

• Q = G1 ∩ · · · ∩Gm.

We refer to m as the size of the description. We
say that such a description is positive if each Gi is
an element of F .

We define the feature description problem as
follows. An instance consists of a set P of
phonemes, a feature system F , and a non-empty
subset Q ⊆ P ; the problem is to decide whether
or not there exists a F-description of Q.

We define the feature minimization problem
as follows. An instance consists of a tuple
(P,F , Q, k) where P , F , and Q are an instance
of the feature description problem, and k ≥ 1 is a
natural number. The problem is to decide whether
or not there exists aF-description of Q having size
less than or equal to k.

We define the positive feature description prob-
lem to have the same instances as the feature de-
scription problem, but where the problem is to
decide whether or not there exists a positive F-
description of Q. Analogously, we define the posi-
tive feature minimization problem to have the same
instances as the feature minimization problem, but
where the problem is to decide whether or not
there exists a positive F-description of Q obeying
the size restriction.

3.1 The feature description problems
We will first show that the feature description
problems are decidable in polynomial time.

Proposition 1. The feature description problem
and the positive feature description problem are
each polynomial-time decidable.

Proof. The algorithm for the feature descrip-
tion problem is as follows. Given an instance
(P,F , Q), compute a set C ⊆ ℘(P ) as follows.
For each F ∈ F , place F in C if Q ⊆ F , and
place P \ F in C if Q ⊆ P \ F . Then, check if⋂ C = Q; if so, accept, otherwise, reject. It suf-
fices to argue that if there exists a F-description
of Q, then the elements of C constitute such a de-
scription. If there exists a F-description of Q, say,
G1, . . . , Gm, we have Q ⊆ Gi for each i; thus,
G1, . . . , Gm ∈ C and we have

Q ⊆
⋂
C ⊆ G1 ∩ · · · ∩Gm = Q,

implying that the elements of C provide a F-
description of Q.

For the positive feature description problem, the
algorithm computes C+ to contain each F ∈ F
such that Q ⊆ F , and accepts if and only if⋂ C+ = Q. The proof of correctness is similar to
that given for the general feature description prob-
lem.

3.2 The minimization problems
An instance (U,S, k) of the set cover problem
consists of a non-empty set U , a subset S ⊆
℘(U), and a natural number k ≥ 1. A set cover
S1, . . . , Sm is a sequence of sets from S such that
S1 ∪ · · · ∪ Sm = U ; m is said to be its size. The
problem is to decide whether or not there exists
a set cover of size less than or equal to k (Karp,
1972). We prove that both the feature minimiza-
tion problem and the positive feature minimization
problem are NP-complete, by reducing from set
cover.

The reduction is the same for both of these
problems, and is as follows. Given an instance
(U,S, k) of set cover, let x be a fresh element not
in U .

Define

P = U ∪ {x}
F = {(U \ S) ∪ {x} | S ∈ S}
Q = {x}

The resulting instance is (P,F , Q, k).
The following establishes the correctness of this

reduction.

Proposition 2. The following are equivalent:

1. There exists a size m set cover of U .

2. The set Q = {x} has a positiveF-description
of size m.

3. The set Q = {x} has a F-description of size
m.

Proof. 1 ⇒ 2: Let (Si) be such a set cover, so
that S1 ∪ · · · ∪ Sm = U . Then, by DeMorgan’s
laws, (U \ S1) ∩ · · · ∩ (U \ Sm) = ∅, and so
((U \S1)∪{x})∩ · · · ∩ ((U \Sm)∪{x}) = {x}.

2⇒ 3 is immediate.
3⇒ 1: Suppose that G1, . . . , Gm is such a de-

scription. Since x ∈ Gi for each i, it follows that
each Gi is an element of F . Define S1, . . . , Sm to
be the sets such that Gi = (U \ Si) ∪ {x}. By
reversing the argumentation in the 1⇒ 2 case, we
obtain that S1, . . . , Sm is a set cover of U .

544



In the just-given reduction, the parameter k is
not changed. We show that there in fact exists
a reduction in the other direction, from set cover
to each of the minimization problems, that like-
wise does not change the parameter k. This indi-
cates a tight relationship between these minimiza-
tion problems and the set cover problem.

Proposition 3. Let (P,F , Q, k) be an instance of
the feature minimization problem; let C be the set
(from Proposition 1). The mapping which, upon
being given this instance, returns (U,S, k) where
U = P \ Q and S = {G \Q | G ∈ C}, is a
reduction to the set cover problem; here, the com-
plement is with respect to U . Likewise, one obtains
a reduction from the positive feature minimization
problem to the set cover problem, by using C+ in
place of C.
Proof. We argue this for the feature minimiza-
tion problem as follows (the positive minimiza-
tion case is analogous). It was seen in the proof
of Proposition 1 that (P,F , Q, k) is a ‘yes’ in-
stance if and only if there exist G1, . . . , Gm ∈ C,
with m ≤ k, such that G1 ∩ · · · ∩ Gm = Q.
This equality holds if and only if (G1 \ Q) ∩
· · · ∩ (Gm \ Q) = ∅, which holds if and only if
(G1 \Q) ∪ · · · ∪ (Gm \Q) = U .
Parametrized complexity The set cover prob-
lem, with the value k taken to be parameter,
is known to be W[2]-complete in parameterized
complexity theory (Cygan et al., 2015, Theorem
13.21). As we have given polynomial-time reduc-
tions between set cover and each of the minimiza-
tion problems that do not change the value k, we
obtain the following.

Proposition 4. Both the feature minimization
problem and the positive feature minimization
problem are W[2]-complete, when viewed as pa-
rameterized problems with k taken to be the pa-
rameter.

4 Empirical concerns

Many NP-hard problems can in practice often
be solved by either a greedy algorithm (Chvatal,
1979) or a branch-and-bound algorithm (Land and
Doig, 1960) that recursively explores the search
space, terminating search branches as soon as
some defined limit is exceeded.

Greedy Search We have implemented a greedy
search strategy that starts with no features, and

S = {{a,b,c},{b,d},{c,d},{d,e}}, U = {a,b,c,d,e}, k = 2

F1 = {d,e,x} 
F2 ={a,c,e,x} 
F3 ={a,b,e,x} 
F4 ={a,b,c,x}

+F1 
+F4

SETCOVERING

MINPHONFEAT

“yes”

P = U ∪ {x} Q = {x}

= Q

k = 2

Figure 1: Illustration of the reduction from SETCOVER-
ING: we can solve an instance of the set cover problem
(SETCOVERING) by a call to a solver for the feature
minimization problem (MINPHONFEAT). There are re-
ductions both from and to the set cover problem.

then picks a single (±) feature from the known,
possibly non-minimal description C discussed in
§3.1 in such a way as to rule out the majority of
phonemes not in the desired set Q. Features are
added to the description until only the set Q is de-
scribed. For example, in describing the set {m}
using the example in Table 1, the greedy approach
would first pick the feature [+nas] since this cuts
down the number of corresponding phonemes to
just two (m and n), less than any other feature
choice. This is essentially an analogue to the
well-known greedy approximation algorithm for
set cover (Chvatal, 1979).

This greedy algorithm, however, in many prac-
tical cases fails to find the correct minimal speci-
fication, and is therefore not a viable candidate for
efficient feature minimization. A simple example
is finding the featural specification for the set {@}
in English under the fairly standard featural sys-
tem provided in Hayes (2011) and van Vugt and
Hayes (2012): the algorithm recovers the features
[-tense, -back, -front, -coronal] while the minimal
specification is [-back, -front, -coronal].

Branch & Bound We also implemented a
branch-and-bound algorithm with a recursive
component that explores, exhaustively, all combi-
nations of features in the full description C, bound-
ing the search whenever the current search tree
contains more features than in the shortest solu-
tion found so far. The branch-and-bound algo-
rithm is efficient in practice in finding minimal
feature specifications, but still needs to explore a
reasonably large search space (see Table 2).

545



Set {h} {i, e} {r} {j} {m,n} {p, t, k}
BF 32,768 262,144 131,072 524,288 2048 4,096
B&B 3,432 11,482 3,444 4,790 1,450 1,315

Table 2: The number of search nodes explored during a brute-force search (BF) for finding a minimal solution for
various sets of phonemes, or a branch-and-bound search (B&B). The feature inventory is one used for English (van
Vugt and Hayes, 2012; Hayes, 2011).

5 Discussion

Humans have been noted to outperform sim-
ple, low-polynomial time heuristic algorithms for
some intractable problems such as the travel-
ing salesman problem (MacGregor and Ormerod,
1996) using intuition and visual inspection of the
problem structure. It is, however, unclear if such
performance carries over to other problems of
a different structure, such as MINPHONFEAT, or
whether the hypothesis that a phonological acqui-
sition process should include this type of mini-
mization is too strong.

An important point to address in the complex-
ity analysis is whether we are operating in a
bounded domain. With a fixed, finite set of fea-
tures to choose from and a fixed finite phoneme
inventory, the problem can be considered static
and solvable in constant time by memorizing or
pre-calculating all the possible patterns of feature
combinations and their corresponding phoneme
sets. Such counter-arguments have been leveled
(Kornai, 2006) at other NP-completeness analy-
ses, such as those that have shown that Optimality
Theory is potentially intractable (Eisner, 2000; Id-
sardi, 2006). In the case at hand, however, such
an argument has less traction since the domain in
question is rather large (potentially hundreds of
features) and it seems inevitable that some search
method must be used by speakers (or phonolo-
gists) to discover the minimum number of features
required. The fact that simple greedy algorithms
do not always find the minimum specification, and
that branch-and-bound algorithms, while efficient
for practical computational use, still need to ex-
plore a large search space, prompts the question
whether some alternative strategy would work par-
ticularly well with phonological feature structures
proposed in the literature. This could address the
problem that this intractability poses to phonolog-
ical learning.

6 Conclusion

We have shown that one of the commonly
assumed subtasks of acquisition of phono-
logical generalizations—distinctive feature
minimization—is computationally intractable.
The decision version of the minimization problem
is NP-complete, and it follows that the optimiza-
tion version NP-hard. This is true even if one
limits oneself to using only positive features, i.e.
a privative feature system. Furthermore, a simple
greedy strategy for solving the problem can not
be attributed to purported human performance
in finding minimal feature specifications since
such a strategy will sometimes fail to find a
minimal description with commonly proposed
feature systems and phonological inventories.
The problem of simply deciding whether a set of
phonemes constitutes a natural class—the feature
description problem—is solvable in polynomial
time.

Reproducibility

Our feature systems data and code for the feature
description and minimization problems is avail-
able at https://github.com/mhulden/
minphonfeat.

Acknowledgements

Chen was partially supported by the Span-
ish Project TIN2017-86727-C2-2-R. We wish to
thank Miikka Silfverberg for comments on an ear-
lier version on the paper. Thanks also to partici-
pants in LING 5410 (Phonology) and LING 7410
(Phonological Theory) at The University of Col-
orado, whose work and feedback on various fea-
ture minimization problems prompted part of this
research.

546



References
Diana Bennett Archangeli. 1984. Underspecification

in Yawelmani phonology and morphology. Ph.D.
thesis, Massachusetts Institute of Technology.

Noam Chomsky and Morris Halle. 1968. The Sound
Pattern of English. Harper & Row.

Vasek Chvatal. 1979. A greedy heuristic for the set-
covering problem. Mathematics of operations re-
search, 4(3):233–235.

George N. Clements. 1985. The geometry of phono-
logical features. Phonology, 2(1):225–252.

George N Clements. 2003. Feature economy in sound
systems. Phonology, 20(03):287–333.

Marek Cygan, Fedor V. Fomin, Lukasz Kowalik,
Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk,
Michal Pilipczuk, and Saket Saurabh. 2015. Param-
eterized Algorithms. Springer.

Jason Eisner. 2000. Easy and hard constraint ranking in
optimality theory. In Proceedings of the 5th Work-
shop of the ACL Special Interest Group in Computa-
tional Phonology (SIGPHON), pages 22–33.

Colin J. Ewen and Harry van der Hulst. 1985. Single-
valued features and the nonlinear analysis of vowel
harmony. Linguistics in the Netherlands, pages 39–
48.

Gunnar Fant. 1966. The nature of distinctive features.
STL-QPSR, 4(1966):1.

Michael R. Garey and David S. Johnson. 1979. Com-
puters and intractability: A guide to the theory of
NP-completeness.

John Goldsmith. 1985. Vowel harmony in Khalkha
Mongolian, Yaka, Finnish and Hungarian. Phonol-
ogy, 2(1):253–275.

Morris Halle. 1962. Phonology in generative grammar.
Word, 18(1-3):54–72.

Bruce Hayes. 2011. Introductory Phonology. John Wi-
ley & Sons.

William J. Idsardi. 2006. A simple proof that optimal-
ity theory is computationally intractable. Linguistic
Inquiry, 37(2):271–275.

Roman Jakobson. 1942. The concept of phoneme. In
Linda R. Waugh and Monique Moville-Burston, ed-
itors, On Language, pages 218–241. Harvard Univ.
Press, Cambridge, MA.

Roman Jakobson, C. Gunnar M. Fant, and Morris
Halle. 1951. Preliminaries to Speech Analysis. The
distinctive features and their correlates. MIT Press,
Cambridge, MA.

Richard M. Karp. 1972. Reducibility among combina-
torial problems. In Complexity of computer compu-
tations, pages 85–103. Springer.

András Kornai. 1993. The generative power of feature
geometry. Annals of Mathematics and Artificial In-
telligence, 8(1-2):37.

András Kornai. 2006. Is OT NP-hard? Rutgers Opti-
mality Archive (ROA).

Ailsa H. Land and Alison G. Doig. 1960. An automatic
method of solving discrete programming problems.
Econometrica: Journal of the Econometric Society,
pages 497–520.

James N. MacGregor and Tom Ormerod. 1996. Human
performance on the traveling salesman problem. At-
tention, Perception, & Psychophysics, 58(4):527–
539.

André Martinet. 1955. Économie des changements
phonétiques. A. Francke, Bern, Switzerland.

Jeff Mielke. 2008a. The Emergence of Distinctive Fea-
tures. Oxford University Press.

Jeff Mielke. 2008b. P-base 3. http://pbase.
phon.chass.ncsu.edu/. Accessed: 2017-10-
01.

Amanda Miller. 2011. The representation of clicks.
In Mark van Oostendorp, Colin J. Ewen, Elizabeth
Hume, and Keren Rice, editors, The Blackwell Com-
panion to Phonology, volume 1, pages 416–439.
Blackwell.

Michael Sipser. 2013. Introduction to the Theory of
Computation, 2nd edition. Cengage Learning.

Nikolai Sergeevich Trubetzkoy. 1969. Principles of
phonology. Univ. of California Press, Berkeley.

Florian van Vugt and Bruce Hayes. 2012. Phea-
tures speadsheet: User’s manual. Technical report,
UCLA.

Elizabeth C. Zsiga. 2012. The sounds of language: An
introduction to phonetics and phonology. John Wi-
ley & Sons.

547


