



















































Co-Simmate: Quick Retrieving All Pairwise Co-Simrank Scores


Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics
and the 7th International Joint Conference on Natural Language Processing (Short Papers), pages 327–333,

Beijing, China, July 26-31, 2015. c©2015 Association for Computational Linguistics

Co-Simmate: Quick Retrieving All Pairwise Co-Simrank Scores

Weiren Yu, Julie A. McCann

Department of Computing,

Imperial College London, UK

{weiren.yu, j.mccann}@imperial.ac.uk

Abstract

Co-Simrank is a useful Simrank-like mea-

sure of similarity based on graph structure.

The existing method iteratively computes

each pair of Co-Simrank score from a dot

product of two Pagerank vectors, entailing

O(log(1/ǫ)n3) time to compute all pairs
of Co-Simranks in a graph with n nodes,
to attain a desired accuracy ǫ. In this study,
we devise a model, Co-Simmate, to speed

up the retrieval of all pairs of Co-Simranks

to O(log2(log(1/ǫ))n3) time. Moreover,
we show the optimality of Co-Simmate

among other hop-(uk) variations, and inte-
grate it with a matrix decomposition based

method on singular graphs to attain higher

efficiency. The viable experiments verify

the superiority of Co-Simmate to others.

1 Introduction

Many NLP applications require a pairwise graph-

based similarity measure. Examples are bilingual

lexicon extraction (Laws et al., 2010), sentiment

analysis (Scheible and Schütze, 2013), synonym

extraction (Minkov and Cohen, 2014), named en-

tity disambiguation (Alhelbawy and Gaizauskas,

2014), acronym expansion (Zhang et al., 2011).

Recently, Co-Simrank (Rothe and Schütze, 2014)

becomes an appealing graph-theoretical similarity

measure that integrates both features of Simrank

(Jeh and Widom, 2002) and Pagerank (Berkhin,

2005). Co-Simrank works by weighing all the

number of connections between two nodes to eval-

uate how similar two nodes are. The intuition be-

hind Co-Simrank is that “more similar nodes are

likely to be pointed to by other similar nodes”.

Co-Simrank is defined in a recursive style:

S = cATSA + I, (1)

where S is the exact Co-Simrank matrix, A is the

column-normalised adjacency matrix of the graph,

c is a decay factor, and I is an identity matrix.
The best-known method by (Rothe and Schütze,

2014) computes a single element of S iteratively
from a dot product 〈∗, ∗〉 of two Pagerank vectors:

Sk(a, b) = ck〈pk(a),pk(b)〉 + Sk−1(a, b) (2)
where pk(a) is a Pagerank vector, defined as

pk(a) = ATpk−1(a) with p0(a) = I(∗, a) (3)
This method is highly efficient when only a small

fraction of pairs of Co-Simranks need computing

because there is no need to access the entire graph

for computing only a single pair score. However,

partial pairs retrieval is insufficient for many real-

world applications (Zhou et al., 2009; Yu et al.,

2012a; Zwick, 2002; Leicht et al., 2006) which re-

quire all-pairs scores. Let us look at two examples.

a) Co-Citation Analysis. In a co-citation network,

one wants to retrieve the relevance between any

two given documents at any moment based on

their references. To answer such an ad-hoc query,

quantifying scores of all document-pairs provides

a comprehensive way to show where low and high

relevance of pairwise documents may exist (Li et

al., 2010; Yu et al., 2014; Haveliwala, 2002).

b) Water Burst Localization. In a water network,

nodes denote deployed pressure sensor locations,

and edges are pipe sections that connect the nodes.

To determine the burst location, one needs to eval-

uate “proximities” of all pairs of sensor nodes first,

and then compare all these “proximities” with the

difference in the arrival times of the burst transient

at sensor locations, to find the sensor node nearest

to the burst event. (Srirangarajan and Pesch, 2013;

Srirangarajan et al., 2013; Stoianov et al., 2007)

Hence, the retrieval of all pairwise Co-Simranks

is very useful in many applications. Unfortunately,

when it comes to all pairs computation of S(∗, ∗),
the way of (2) has no advantage over the naive way

Sk = cATSk−1A + I with S0 = I (4)
327



as both entail O(log(1/ǫ)n3) time to compute all
pairs of Co-Simranks to attain desired accuracy ǫ.

The complexity O(log(1/ǫ)n3) has two parts:
The first part O(n3) is for matrix multiplications
(ATSk−1A) at each step. A careful implementa-
tion, e.g., partial sums memoisation (Lizorkin et

al., 2010) or fast matrix multiplications (Yu et al.,

2012b),1 can optimise this part further to O(dn2)
or O(nlog2 7), with d the average graph degree.
The second part O(log(1/ǫ)) is the total number
of steps required to guarantee a given accuracy ǫ,
because, as implied by (Rothe and Schütze, 2014),

|Sk(a, b) − S(a, b)| ≤ ck+1. ∀a, b, ∀k (5)
To the best of our knowledge, there is a paucity of

work on optimising the second part O(log(1/ǫ)).
Yu et al. (2012b) used a successive over-relaxation

(SOR) method to reduce the number of steps for

Simrank, which is also applicable to Co-Simrank.

However, this method requires a judicious choice

of an internal parameter (i.e., relaxation factor ω),
which is hard to determine a-priori. Most recently,

Yu et al. (2015) propose an exponential model to

speed up the convergence of Simrank:

S̄0 = exp(−c) · I, dS̄t/dt = AT · S ·A.
However, S̄ and S do not produce the same results.
Thus, this exponential model, if used to compute

Co-Simrank, will lose some ranking accuracy.

Contributions. In this paper, we propose an effi-

cient method, Co-Simmate, that computes all pairs

of Co-Simranks in just O(log2(log(1/ǫ))n3) time,
without any compromise in accuracy. In addition,

Co-Simmate is parameter-free, and easy to imple-

ment. It can also integrate the best-of-breed matrix

decomposition based method by Yu and McCann

(2014) to achieve even higher efficiency.

2 Co-Simmate Model

First, we provide the main idea of Co-Simmate.

We notice that Co-Simrank solution S in (1) is
expressible as a matrix series:

S = I + cATA + c2(AT )
2
A2

+ c3(AT )
3
A3 + c4(AT )

4
A4 + · · ·

(6)

The existing iterative method (4) essentially uses

the following association to compute (6):

S =
(

cAT

=S2︷ ︸︸ ︷(
cAT

(
cATA + I

)︸ ︷︷ ︸
=S1

A + I
)
A + I

)
+ · · · (7)

1These Simranks methods also suit Co-Simranks.

The downside of this association is that the result-

ing Sk−1 of the last step can be reused only once
to compute Sk. Thus, after k iterations, Sk in (4)
grasps only the first k-th partial sums of S in (6).

To speed up the computation, we observe that

(6) can be reorganised as follows:

S =

(

I + cAT A

)

+

(

c2(AT )
2
A2 + c3(AT )

3
A3

)

+

+

(

c4(AT )
4
A4 + · · ·+ c7(AT )7A7

)

+ · · ·

=

(

I + cAT A

)

+

(

c2(AT )
2
(I + cAT A)A2

)

+

+

(

c4(AT )
4
(

I + cAT A + · · ·+ c3(AT )3A3
)

A4
)

+ · · ·

Thereby, we can derive the following novel associ-

ation, referred to as Co-Simmate, to compute (6):

S =
( =R1︷ ︸︸ ︷
(I + cAT A) + (cAT )

2

=R1︷ ︸︸ ︷
(I + cATA)A2

)
︸ ︷︷ ︸

=R2

+ (8)

(
cAT

)4((I + cAT A) + (cAT )2(I + cAT A)A2)︸ ︷︷ ︸
=R2

A4 + · · ·

There are two advantages of our association: one

is that the resulting Rk−1 from the last step can
be reused twice to compute Rk . Hence, Rk can
grasp the first (2k −1)-th partial sums2 of S in (6).
Another merit is that A2

k
can be obtained from

the result of squaring A2
k−1

, e.g., A4 = (A2)2.
With these advantages, Co-Simmate can compute

all pairs of scores much faster.

Next, let us formally introduce Co-Simmate:

Definition 1. We call Rk a Co-Simmate matrix at
k-th step if it is iterated as

R0 = I, A0 = A

Rk+1 = Rk + c2
k
(AkTRkAk)

Ak+1 = Ak2
(9)

By successive substitution in (9), one can verify

that limk→∞Rk is the exact solution of S in (6).
More precisely, the following theorem shows that,

at step k, how many first terms of S in (6) can be
grasped by Rk, showing the fast speedup of (9).

Theorem 1. Let Rk be the Co-Simmate matrix in
(9), and Sk the Co-Simrank matrix in (4). Then,

Rk = S2k−1 ∀k = 0, 1, 2, · · · (10)
2This amount of the first partial sums will be proved later.

328



S1 S2
S3 S4

S5 S6 S7

S0 S1

S2 S3 S4 S5 S6

R2

AT

A

AT

A

AT

A

AT

A

AT

A

AT

A

AT

A

((AT )2)2

(A2)2

S0

R1
R3

R0 R1

AT

A

R0
(AT )2

A2

R2

R1

(AT )2

A2
R2

((AT)2)2

(A2)2
R2

((AT )2)2

(A2)2
R2

((AT )2)2

(A2)2

Figure 1: Co-Simmate speeds up Co-Simrank by aggregating more first terms of S in (6) at each step

Proof. Successive substitution in (4) produces

Sk =
∑k

i=0 c
i(Ai)TAi (11)

Thus, proving (10) is equivalent to showing that

Rk =
∑2k−1

i=0 c
i(Ai)TAi (12)

To show (12), we will use induction on k.

1. For k = 0, we have R0 = I = c0(A0)
TA0.

2. When k > 0, we assume that (12) holds for k,
and want to prove that (12) holds for k + 1.

From Ak+1 = Ak2 and A0 = A follows that

Ak = Ak−12 = Ak−22
2

= · · · = A2k (13)

Plugging Rk (12) and Ak (13) into (9) yields

Rk+1 = {using (12) and (13)}
= Rk + c2

k(
A2

k)T (∑2k−1
i=0

ci(Ai)TAi
)
A2

k

= Rk +
∑2k−1

i=0
ci+2

k
(Ai+2

k
)
T
Ai+2

k

= Rk +
∑2k−1+2k

j=2k
cj(Aj)TAj

=
∑2k+1−1

j=0
cj(Aj)TAj

Lastly, coupling (11) and (12) concludes (10).

Theorem 1 implies that, at each step k, Rk in (9)
can grasp the first (2k − 1)-th terms of S, whereas
Sk in (4) can grasp only the first k-th terms of S.
Thus, given the number of steps K , Co-Simmate
is always more accurate than Co-Simrank because

RK is exponentially closer to S than SK to S.

Convergence Rate. We next provide a quantita-

tive result on how closer Rk is to S than Sk to S.

Theorem 2. For any given step k, the difference
between Rk and S can be bounded by

|Rk(a, b) − S(a, b)| ≤ c2k , ∀a, b (14)

Proof. The Co-Simrank result in (5) implies that

|S2k−1(a, b) − S(a, b)| ≤ c2
k
, ∀a, b

Plugging (10) into this inequality yields (14).

Theorem 2 implies that, to attain a desired accu-

racy ǫ, Co-Simmate (9) takes exponentially fewer
steps than Co-Simrank (4) since the total number

of steps required for RK , as implied by (14), is

K = max{0, ⌈log2 logc ǫ⌉ + 1},

in contrast to the ⌈logc ǫ⌉ steps required for SK .
Total Computational Cost. Though Co-Simmate

takes fewer steps than Co-Simrank for a desired ǫ,
in each step Co-Simmate (9) performs one more

matrix multiplication than Co-Simrank (4). Next,

we compare their total computational time.

Theorem 3. To guarantee a desired accuracy ǫ,
the total time of Co-Simmate (9) is exponentially

faster than that of Co-Simrank (4).

Proof. For k = 1, both Co-Simmate (9) and Co-
Simrank (4) take 2 matrix multiplications.

For k > 1, Co-Simmate (9) takes 3 matrix mul-
tiplications (2 for ATk RkAk and 1 for A

2
k), whilst

Co-Simrank (4) takes 2 (only for ATk SkAk).
Let |M| be the number of operations for one

matrix multiplication. Then, for Co-Simmate (9),

(total # of operations for Rk) = 3k|M|,

whereas for Co-Simrank (4), by Theorem 1,

(total # of operations for Sk) = 2(2k − 1)|M|.

Since 3k|M| ≤ 2(2k − 1)|M|, ∀k = 2, 3, · · · , we
can conclude that the total time of Co-Simmate is

exponentially faster than that of Co-Simrank.

Example. Figure 1 pictorially visualises how Co-

Simmate accelerates Co-Simrank computation by

aggregating more first terms of S in (6) each step.
329



Algorithm 1: Co-Simmate on Singular Graphs

Input : A – column-normalised adjacency matrix,
c – decay factor, ǫ – desired accuracy.

1 Decompose A s.t. [Vr,H
T
r ]← Gram-Schmidt(A).

2 Compute P← HTr Vr.
3 Initialise K ← max{0, ⌈log2 logc ǫ⌉ + 1}.
4 Initialise S0 ← Ir, P0 ← P.
5 for k ← 0, 1, · · · , K − 1 do
6 Compute Sk+1 ← c2k (Pk)T Sk(Pk) + Sk .
7 Compute Pk+1 ← (Pk)2.
8 return S← cHrSKHTr + I.

At k-th step, Co-Simrank Sk connects only two
new hop-1 paths with the old retrieved paths Sk−1,
whereas Co-Simmate Rk connects two new hop-
(2k) paths (by squaring the old hop-(2k−1) paths)
with the old retrieved paths Rk−1. Consequently,
in each step of Co-Simrank, Co-Simmate is expo-

nential steps faster than Co-Simrank. Moreover,

the speedup is more obvious as k grows.

Optimality of Co-Simmate. To compute S in (6),
besides the prior association methods (7) and (8),

the following association can also be adopted:

S =

=T1︷ ︸︸ ︷(
I + cATA + c2

(
AT

)2
A2

)
+ (15)

c3
(
AT

)3 (I + cAT A + c2(AT )2A2)︸ ︷︷ ︸
=T1

A3 + · · ·

More generally, we can write the following model

that covers (8) and (15) as special cases:

R(u)0 = I, A0 = A

R(u)k+1 = R
(u)
k + c

uk · ATk ·R(u)k ·Ak
+ c2·u

k · (Ak2)T ·R(u)k ·Ak2 + · · ·+
+ c(u−1)·u

k · (Aku−1)T · R(u)k ·Aku−1
Ak+1 = Aku (u = 2, 3, · · · )

R(u)k is a hop-(u
k) Co-Simmate matrix at step k.

R(u)k becomes Co-Simmate Rk in (8) when u = 2;
and reduces to Tk in (15) when u = 3. For all u,
it is easy to verify that limk→∞R

(u)
k = S. Below,

we show that Co-Simmate (8) (u = 2) is optimal.
Theorem 4. To attain a desired accuracy ǫ, the to-
tal time of Co-Simmate (8) is minimum among all

hop-(uk) Co-Simmate models R(u)k (u = 2, 3, · · · ).
Proof. Similar to Theorem 1, we can show that

|R(u)k (a, b) − S(a, b)| ≤ cu
k
, ∀a, b, ∀u (16)

Thus, given ǫ, the total number of steps for R(u)K is

K = max{0, ⌈logu logc ǫ⌉ + 1}.

For each step k, for hop-(uk) Co-Simmate R(u)k ,

(# of operations) = ((u − 1) + ∑u−2i=0 i)|M| = (u−1)u2 |M|.
Therefore, the total time of computing R(u)k is

O(max{0, ⌈logu logc ǫ⌉ + 1}(u − 1)u|M|).

This complexity is increasing with u = 2, 3, · · · .
Thus, Co-Simmate (8) (u = 2) is minimum.

Incorporate Co-Simmate into Singular Graphs.

Co-Simmate (9) can also be combined with other

factorisation methods, e.g., Sig-SR, a Co-Simrank

algorithm proposed by (Yu and McCann, 2014),

to speed up all pairs of Co-Simrank computation

from O(rn2 +Kr3) to O(rn2 +(log2K)r3) time
further on a singular graph with rank r for K steps.
The enhanced Sig-SR is shown in Algorithm 1.

3 Experiments

3.1 Experimental Settings

Datasets. We use both real and synthetic datasets.

Three real graphs (Twitter, Email, Facebook) are

taken from SNAP (Leskovec and Sosič, 2014).

1) Twitter is a who-follows-whom social graph

crawled from the entire Twitter site. Each node is

a user, and each edge represents a social relation.

2) Email is an Email communication network

from Enron. If an address i sent at least one email
to address j, there is a link from i to j.

3) FB contains ‘circles’ (or ‘friends lists’) from

Facebook. This dataset is collected from the sur-

vey participants using the Facebook app, including

node features (profiles), circles, and ego networks.

The statistics of these datasets are as follows:

Datasets # edges # nodes ave degree

Twitter 1,768,149 81,306 21.70

Email 183,831 36,692 5.01

FB 88,234 4,039 21.84

To build synthetic data, we use Boost toolkit

(Lee et al., 2001).We control the number of nodes

n and edges m to follow densification power laws
(Leskovec et al., 2005; Faloutsos et al., 1999).

Baselines. We compare our Co-Simmate with 1)

Ite-Mat (Rothe and Schütze, 2014), a Co-Simrank

method using the dot product of Pagerank vectors.

2) K-Sim (Kusumoto et al., 2014), a linearized

method modified to Co-Simrank. 3) Sig-SR (Yu

and McCann, 2014), a SVD Co-Simrank method.

All experiments are on 64bit Ubuntu 14.04 with

Intel Xeon E2650 2.0GHz CPU and 16GB RAM.
330



10
−2

10
−1

10
0

0

5

10

15

20

accuracy (ǫ)

#
of

st
ep

s
(k
)

 

 

Simmate

Simrank

(a) Rate of Convergence
(on FB dataset, c = 0.8)

Twitter Email FB

10
2

10
4

10
6

T
im

e
(s
ec
)

 

 

Simmate

Sig−SR

Ite−Mat

K−Sim

(b) Total Computational Time
(on three real datasets, c = 0.8)

ǫ
c = 0.6 c = 0.7 c = 0.8

SM SR SM SR SM SR

0.1 3 4 3 6 4 10

0.01 4 9 4 12 5 20

0.001 4 13 5 19 5 30

0.0001 5 18 5 25 6 41

0.00001 5 22 6 32 6 51

(c) Effect of Damping Factor c on Iterations k (on FB)

4K 5K 6K 7K 8K 9K 10K
0

500

1000

1500

2000

2500

n

T
im

e
(s
ec
)

 

 

Simmate

Simrank (Ite−Mat)

(d) Scalability w.r.t. # nodes
(on 7 synthetic datasets)

2 3 4 5 6
0

50

100

150

200

u

T
im

e
(s
ec
)

 

 

hop-(uk) Simmate

3

3

6

4
3

k

(e) Effect of Hop-(uk)
(on FB dataset, c = 0.8)

Figure 2: Compare Co-Simmate with Baselines

3.2 Experimental Results

Exp-I. Convergence Rate. We compare the num-

ber of steps k needed for Co-Simmate and Co-
Simrank (Ite-Mat) to attain a desired accuracy ǫ on
Twitter, Email, FB. The results on all the datasets

are similar. Due to space limits, Figure 2(a) only

reports the result on FB. We can discern that, when

ǫ varies from 0.01 to 1, k increases from 1 to 5
for Co-Simmate, but from 1 to 20 for Co-Simrank.

The fast convergence rate of Co-Simmate is due to

our model that twice reuses Rk−1 of the last step.
Exp-II. Total Computational Time. Figure 2(b)

compares the total computational time of Co-

Simmate with 3 best-known methods on real data.

The result shows Co-Simmate runs 10x, 5.6x, 4.3x

faster than K-Sim, Ite-Mat, Sig-SR, respectively.

This is because 1) K-Sim is efficient only when a

fraction pair of scores are computed, whereas Co-

Simmate can efficiently handle all pairs scores, by

twice sharing Rk−1 and repeated squaring A2
k−1

.

2) Co-Simmate grasps exponential new terms of S
per step, but Ite-Mat grasps just 1 new term of S.
3) Sig-SR does not adopt association tricks in the

subspace, unlike our methods that integrate (9).

Exp-III. Effect of Damping Factor c. Using real
datasets (Twitter, Email, FB), we next evaluate the

effect of damping factor c on the number of itera-
tions k to guarantee a given accuracy ǫ. We vary ǫ
from 0.1 to 0.00001 and c from 0.6 to 0.8, the re-
sults of k on all the datasets are similar. For the in-
terests of space, Figure 2(c) tabularises only the re-

sults on FB, where ‘SM’ columns list the number

of iterations required for Co-Simmate, and ‘SR’

columns lists that for Co-Simrank. From the re-

sults, we can see that, for any given ǫ and c, the
number of iterations for Co-Simmate is consis-

tently smaller than that for Co-Simrank. Their gap

is more pronounced when ǫ becomes smaller or
c is increased. This is because, at each iteration,
Co-Simmate can grasp far more first terms of S
than Co-Simrank. Thus, for a fixed accuracy, Co-

Simmate requires less iterations than Co-Simrank.

This is consistent with our analysis in Theorem 2.

Exp-IV. Scalability. By using synthetic datasets,

we fix ǫ = 0.0001 and vary n from 4,000 to
10,000. Figure 2(d) depicts the total time of Co-

Simmate and Ite-Mat. We can notice that, as n
grows, the time of Co-Simmate does not increase

so fast as Co-Simrank. The reason is that the num-

ber of steps of Co-Simmate is greatly cut down by

twice Rk−1 sharing and A2
k−1

memoisation.

Exp-V. Effect of Hop-uk. Finally, we test the im-
pact of u on the total time of our hop-(uk) Co-
Simmate variations on real datasets. Due to sim-

ilar results, Figure 2(e) merely reports the results

on FB. It can be observed that, as u grows from
2 to 6, the total number of steps for hop-(uk) Co-
Simmate decreases, but their total time still grows.

This is because, in each step, the cost of hop-(uk)
Co-Simmate is increasing with u. Thus, the lowest
cost is Co-Simmate when u = 2.

4 Conclusions

We propose an efficient algorithm, Co-Simmate,

to speed up all pairs Co-Simranks retrieval from

O(log(1/ǫ)n3) to O(log2(log(1/ǫ))n3) time, to
attain a desired accuracy ǫ. Besides, we integrate
Co-Simmate with Sig-SR on singular graphs to

attain higher efficacy. The experiments show that

Co-Simmate can be 10.2x faster than the state-of-

the-art competitors. As future work, we will incor-

porate our partial-pairs Simrank (Yu and McCann,

2015) into partial-pairs Co-Simmate search.

Acknowledgement. This research is supported by

NEC Smart Water Network research project.
331



References

Ayman Alhelbawy and Robert J. Gaizauskas. 2014.
Graph ranking for collective named entity disam-
biguation. In Proceedings of the 52nd Annual Meet-
ing of the Association for Computational Linguistics
(ACL 2014), pages 75–80.

Pavel Berkhin. 2005. Survey: A survey on PageRank
computing. Internet Mathematics, 2(1):73–120.

Michalis Faloutsos, Petros Faloutsos, and Christos
Faloutsos. 1999. On power-law relationships of
the internet topology. In Proceedings of the Confer-
ence on Applications, Technologies, Architectures,
and Protocols for Computer Communication (SIG-
COMM 1999), pages 251–262.

Taher H Haveliwala. 2002. Topic-sensitive PageRank.
In Proceedings of the 11th International Conference
on World Wide Web (WWW 2002), pages 517–526.
ACM.

Glen Jeh and Jennifer Widom. 2002. SimRank: A
measure of structural-context similarity. In Proceed-
ings of the 8th ACM SIGKDD International Con-
ference on Knowledge Discovery and Data Mining
(SIGKDD 2002), pages 538–543.

Mitsuru Kusumoto, Takanori Maehara, and Ken-ichi
Kawarabayashi. 2014. Scalable similarity search
for SimRank. In Proceedings of the 2014 ACM SIG-
MOD International Conference on Management of
Data (SIGMOD 2014), pages 325–336.

Florian Laws, Lukas Michelbacher, Beate Dorow,
Christian Scheible, Ulrich Heid, and Hinrich
Schütze. 2010. A linguistically grounded graph
model for bilingual lexicon extraction. In Pro-
ceedings of the 23rd International Conference on
Computational Linguistics (COLING 2010, Poster),
pages 614–622.

Lie-Quan Lee, Andrew Lumsdaine, and Jeremy G Siek.
2001. The boost graph library. http://www.
boost.org/.

E. A. Leicht, Petter Holme, and M. E. J. Newman.
2006. Vertex similarity in networks. Physical Re-
view E, 73(2):026120.

Jure Leskovec and Rok Sosič. 2014. SNAP: A gen-
eral purpose network analysis and graph mining li-
brary in C++. http://snap.stanford.edu/
snap, June.

Jure Leskovec, Jon Kleinberg, and Christos Faloutsos.
2005. Graphs over time: Densification laws, shrink-
ing diameters and possible explanations. In Pro-
ceedings of the 11th ACM SIGKDD International
Conference on Knowledge Discovery in Data Min-
ing (SIGKDD 2005), pages 177–187. ACM.

Cuiping Li, Jiawei Han, Guoming He, Xin Jin, Yizhou
Sun, Yintao Yu, and Tianyi Wu. 2010. Fast compu-
tation of SimRank for static and dynamic informa-
tion networks. In Proceedings of the 13th Interna-
tional Conference on Extending Database Technol-
ogy (EDBT 2010), pages 465–476.

Dmitry Lizorkin, Pavel Velikhov, Maxim N. Grinev,
and Denis Turdakov. 2010. Accuracy estimate and
optimization techniques for SimRank computation.
The VLDB Journal (The International Journal on
Very Large Data Bases), 19(1):45–66.

Einat Minkov and William W. Cohen. 2014. Adap-
tive graph walk-based similarity measures for parsed
text. Natural Language Engineering, 20(3):361–
397.

Sascha Rothe and Hinrich Schütze. 2014. CoSim-
Rank: A flexible & efficient graph-theoretic simi-
larity measure. In Proceedings of the 52nd Annual
Meeting of the Association for Computational Lin-
guistics (ACL 2014), pages 1392–1402.

Christian Scheible and Hinrich Schütze. 2013. Senti-
ment relevance. In Proceedings of the 51st Annual
Meeting of the Association for Computational Lin-
guistics (ACL 2013), pages 954–963.

Seshan Srirangarajan and Dirk Pesch. 2013. Source
localization using graph-based optimization tech-
nique. In IEEE Wireless Communications and Net-
working Conference (WCNC 2013), pages 1127–
1132.

Seshan Srirangarajan, Michael Allen, Ami Preis, Mu-
dasser Iqbal, HockBeng Lim, and AndrewJ. Whittle.
2013. Wavelet-based burst event detection and lo-
calization in water distribution systems. Journal of
Signal Processing Systems, 72(1):1–16.

Ivan Stoianov, Lama Nachman, Steve Madden, Timur
Tokmouline, and M Csail. 2007. PIPENET: A
wireless sensor network for pipeline monitoring. In
The 6th International Symposium on Information
Processing in Sensor Networks (IPSN 2007), pages
264–273.

Weiren Yu and Julie A. McCann. 2014. Sig-SR: Sim-
Rank search over singular graphs. In Proceedings
of the 37th ACM SIGIR International Conference on
Research & Development in Information Retrieval
(SIGIR 2014), pages 859–862.

Weiren Yu and Julie A McCann. 2015. Efficient
partial-pairs SimRank search on large networks.
Proceedings of the VLDB Endowment (PVLDB
2015), 8(5):569–580.

Weiren Yu, Xuemin Lin, Wenjie Zhang, Ying Zhang,
and Jiajin Le. 2012a. SimFusion+: Extending Sim-
Fusion towards efficient estimation on large and dy-
namic networks. In Proceedings of the 35th ACM
SIGIR International Conference on Research & De-
velopment in Information Retrieval (SIGIR 2012),
pages 365–374.

332



Weiren Yu, Wenjie Zhang, Xuemin Lin, Qing Zhang,
and Jiajin Le. 2012b. A space and time efficient
algorithm for SimRank computation. World Wide
Web, 15(3):327–353.

Weiren Yu, Xuemin Lin, and Wenjie Zhang. 2014.
Fast incremental SimRank on link-evolving graphs.
In Proceedings of the 30th IEEE International Con-
ference on Data Engineering (ICDE 2014), pages
304–315.

Weiren Yu, Xuemin Lin, Wenjie Zhang, and Julie A.
McCann. 2015. Fast all-pairs SimRank assess-
ment on large graphs and bipartite domains. IEEE
Transactions on Knowledge and Data Engineering
(TKDE), 27(7):1810–1823.

Wei Zhang, Yan Chuan Sim, Jian Su, and Chew Lim
Tan. 2011. Entity linking with effective acronym
expansion, instance selection and topic modeling. In
Proceedings of the 22nd International Joint Confer-
ence on Artificial Intelligence (IJCAI 2011), pages
1909–1914.

Yang Zhou, Hong Cheng, and Jeffrey Xu Yu. 2009.
Graph clustering based on structural / attribute sim-
ilarities. Proceedings of the VLDB Endowment
(PVLDB), 2(1):718–729.

Uri Zwick. 2002. All pairs shortest paths using bridg-
ing sets and rectangular matrix multiplication. Jour-
nal of the ACM (JACM), 49(3):289–317.

333


