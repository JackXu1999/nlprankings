



















































Parsing Graphs with Regular Graph Grammars


Proceedings of the 6th Joint Conference on Lexical and Computational Semantics (*SEM 2017), pages 199–208,
Vancouver, Canada, August 3-4, 2017. c©2017 Association for Computational Linguistics

Parsing Graphs with Regular Graph Grammars

Sorcha Gilroy
University of Edinburgh

s.gilroy@sms.ed.ac.uk

Adam Lopez
University of Edinburgh

alopez@inf.ed.ac.uk

Sebastian Maneth
Universität Bremen

smaneth@uni-bremen.de

Abstract

Recently, several datasets have become
available which represent natural language
phenomena as graphs. Hyperedge Re-
placement Languages (HRL) have been
the focus of much attention as a for-
malism to represent the graphs in these
datasets. Chiang et al. (2013) prove that
HRL graphs can be parsed in polynomial
time with respect to the size of the in-
put graph. We believe that HRL are more
expressive than is necessary to represent
semantic graphs and we propose the use
of Regular Graph Languages (RGL; Cour-
celle 1991), which is a subfamily of HRL,
as a possible alternative. We provide a top-
down parsing algorithm for RGL that runs
in time linear in the size of the input graph.

1 Introduction

NLP systems for machine translation, summariza-
tion, paraphrasing, and other tasks often fail to
preserve the compositional semantics of sentences
and documents because they model language as
bags of words, or at best syntactic trees. To pre-
serve semantics, they must model semantics. In
pursuit of this goal, several datasets have been pro-
duced which pair natural language with composi-
tional semantic representations in the form of di-
rected acyclic graphs (DAGs), including the Ab-
stract Meaning Representation Bank (AMR; Ba-
narescu et al. 2013), the Prague Czech-English
Dependency Treebank (Hajič et al., 2012), Deep-
bank (Flickinger et al., 2012), and the Univer-
sal Conceptual Cognitive Annotation (Abend and
Rappoport, 2013). To make use of this data, we
require models of graphs.

Consider how we might use compositional
semantic representations in machine translation

Anna fehlt

ihrem Kater

Anna’s cat

misses her

miss arg0

arg1 cat

poss

Anna

Figure 1: Semantic machine translation using AMR (Jones
et al., 2012). The edge labels identify ‘cat’ as the object of
the verb ‘miss’, ‘Anna’ as the subject of ‘miss’ and ‘Anna’
as the possessor of ‘cat’. Edges whose head nodes are not
attached to any other edge are interpreted as node labels.

(Figure 1), a two-step process in which seman-
tic analysis is followed by generation. Jones
et al. (2012) observe that this decomposition can
be modeled with a pair of synchronous gram-
mars, each defining a relation between strings
and graphs. Necessarily, one projection of this
synchronous grammar produces strings, while the
other produces graphs, i.e., is a graph grammar.
A consequence of this representation is that the
complete translation process can be realized by
parsing: to analyze a sentence, we parse the in-
put string with the string-generating projection of
the synchronous grammar, and read off the syn-
chronous graph from the resulting parse. To gen-
erate a sentence, we parse the graph, and read off
the synchronous string from the resulting parse. In
this paper, we focus on the latter problem: using
graph grammars to parse input graphs. We call this
graph recognition to avoid confusion with other
parsing problems.

Recent work in NLP has focused primarily
on hyperedge replacement grammar (HRG;
Drewes et al. 1997), a context-free graph grammar
formalism that has been studied in an NLP context
by several researchers (Chiang et al., 2013; Peng
et al., 2015; Bauer and Rambow, 2016). In partic-
ular, Chiang et al. (2013) propose that HRG could
be used to represent semantic graphs, and pre-
cisely characterize the complexity of a CKY-style

199



algorithm for graph recognition from Lautemann
(1990) to be polynomial in the size of the input
graph. HRGs are very expressive—they can gen-
erate graphs that simulate non-context-free string
languages (Engelfriet and Heyker, 1991; Bauer
and Rambow, 2016). This means they are likely
more expressive than we need to represent the lin-
guistic phenomena that appear in existing seman-
tic datasets. In this paper, we propose the use of
Regular Graph Grammars (RGG; Courcelle 1991)
a subfamily of HRG that, like its regular counter-
parts among string and tree languages, is less ex-
pressive than context-free grammars but may ad-
mit more practical algorithms. By analogy to Chi-
ang’s CKY-style algorithm for HRG. We develop
an Earley-style recognition algorithm for RGLs
that is linear in the size of the input graph.

2 Regular Graph Languages

We use the following notation. If n is an integer,
[n] denotes the set {1, . . . , n}. Let Γ be an alpha-
bet, i.e., a finite set. Then s ∈ Γ∗ denotes that s
is a sequence of arbitrary length, each element of
which is in Γ. We denote by |s| the length of s. A
ranked alphabet is an alphabet Γ paired with an
arity mapping (i.e., a total function) rank: Γ→ N.
Definition 1. A hypergraph (or simply graph)
over a ranked alphabet Γ is a tuple G =
(VG, EG, attG, labG, extG) where VG is a finite set
of nodes; EG is a finite set of edges (distinct from
VG); attG : EG → V ∗G maps each edge to a se-
quence of nodes; labG : EG → Γ maps each edge
to a label such that |attG(e)| = rank(labG(e));
and extG is an ordered subset of VG called the ex-
ternal nodes of G.

We assume that the elements of extG are pair-
wise distinct, and the elements of attG(e) for each
edge e are also pairwise distinct. An edge e is
attached to its nodes by tentacles, each labeled
by an integer indicating the node’s position in
attG(e) = (v1, . . . , vk). The tentacle from e to
vi will have label i, so the tentacle labels lie in the
set [k] where k = rank(e). To express that a node
v is attached to the ith tentacle of an edge e, we
say vert(e, i) = v. Likewise, the nodes in extG
are labeled by their position in extG. We refer to
the ith external node of G by extG(i) and in fig-
ures this will be labeled (i). The rank of an edge
e is k if att(e) = (v1, . . . , vk) (or equivalently,
rank(lab(e)) = k). The rank of a hypergraph G,
denoted by rank(G) is the size of extG.

Example 1. Hypergraph G in Figure 2 has four
nodes (shown as black dots) and three hyperedges
labeled a, b, and X (shown boxed). The brack-
eted numbers (1) and (2) denote its external nodes
and the numbers between edges and the nodes are
tentacle labels. Call the top node v1 and, proceed-
ing clockwise, call the other nodes v2, v3, and v4.
Call its edges e1, e2 and e3. Its definition would
state attG(e1) = (v1, v2), attG(e2) = (v2, v3),
attG(e3) = (v1, v4, v3), labG(e1) = a, labG(e2) =
b, labG(e3) = X , and extG = (v4, v2).

Definition 2. Let G be a hypergraph containing
an edge e with attG(e) = (v1, . . . , vk) and let H
be a hypergraph of rank k with node and edge sets
disjoint from those of G. The replacement of e by
H is the graph G′ = G[e/H]. Its node set VG′ is
V ∪ VH where V = VG − {v1, . . . , vk}. Its edge
set is EG′ = (EG−{e})∪EH . We define attG′ =
att ∪ attH where for every e′ ∈ (EG−{e}), att(e)
is obtained from attG(e′) by replacing vi by the ith
external node of H . Let labG′ = lab∪ labH where
lab is the restriction of labG to edges in EG−{e}.
Finally, let extG′ = extG.

Example 2. A replacement is shown in Figure 2.

2.1 Hyperedge Replacement Grammars
Definition 3. A hyperedge replacement grammar
G = (NG , TG , PG , SG) consists of ranked (dis-
joint) alphabets NG and TG of nonterminal and
terminal symbols, respectively, a finite set PG of
productions, and a start symbol SG ∈ NG . Every
production in PG is of the form X → G where
G is a hypergraph over NG ∪ TG and rank(G) =
rank(X).

For each production p : X → G, we use L(p)
to refer to X (the left-hand side of p) and R(p)
to refer to G (the right-hand side of p). An edge
is a terminal edge if its label is terminal and a
nonterminal edge if its label is nonterminal. A
graph is a terminal graph if all of its edges are
terminal. The terminal subgraph of a graph is
the subgraph consisting of all terminal edges and
their incident nodes.

Given a HRG G, we say that graph G im-
mediately derives graph G′, denoted G → G′,
iff there is an edge e ∈ EG and a nonterminal
X ∈ NG such that labG(e) = X and G′ =
G[e/H], where X → H is in PG . We extend
the idea of immediate derivation to its transitive
closure G →∗ G′, and say here that G derives
G′. For every X ∈ NG we also use X to de-

200



X
a

b

(1) (2)

G

(2)

c

(1)

a

(3)

d

H

(1)

c
d
a

(2)

ba

G[e/H]

2

1
1

2

1

2
3

2

1
1

2
1

2

2

1
1

2
1

2

1

2

1

2

Figure 2: The replacement of the X-labeled edge e in G by
the graph H .

Sp :
X

(1)

1 go
1

2
I

arg0
Y Zs : (1)

(2)

1

2

1

arg0

arg1

Xq : W

Y

(2)

(1)
1

2

1

1

2

arg1

arg0 Wt :

(1)
1

want

Yr : Z

X

(2)

(1)
1

2

1
1

2

arg1

arg0 Zu :

(1)
1

need

Table 1: Productions of a HRG. The labels p, q, r, s, t, and u
label the productions so that we can refer to them in the text.
Note that Y can rewrite in two ways, either via production r
or s.

note the graph consisting of a single edge e with
lab(e) = X and nodes (v1, . . . , vrank(X)) such
that attG(e) = (v1, . . . , vrank(X)), and we define
the language LX(G) as {G | X →∗ G ∧ G is
terminal}. The language of G is L(G) = LSG (G).
We call the family of languages that can be pro-
duced by any HRG the hyperedge replacement
languages (HRL).

We assume that terminal edges are always of
rank 2, and depict them as directed edges where
the direction is determined by the tentacle labels:
the tentacle labeled 1 attaches to the source of the
edge and the tentacle labeled 2 attaches to the tar-
get of the edge.

Example 3. Table 1 shows a HRG deriving AMR
graphs for sentences of the form ‘I need to want
to need to want to ... to want to go’. Figure 3 is
a graph derived by the grammar. The grammar is
somewhat unnatural, a point we will return to (§4).

We can use HRGs to generate chain graphs

(1)

arg1

arg1

arg1

arg1

need

want

need

want

go

I

arg0

arg0

arg0

arg0 arg0

Figure 3: Graph derived by grammar in Table 1.

S (1) S (2) (1) (2)1 2
a

1 2
b a b

Figure 4: A HRG producing the string language anbn.

(strings) by restricting the form of the pro-
ductions in the grammars. Figure 4 shows a
HRG that produces the context-free string lan-
guage anbn. HRGs can simulate the class of
mildly context-sensitive languages that is charac-
terized, e.g., by linear context-free rewriting sys-
tems (LCFRS;Vijay-Shanker et al. 1987), where
the fan-out of the LCFRS will influence the max-
imum rank of nonterminal required in the HRG,
see (Engelfriet and Heyker, 1991).

2.2 Regular Graph Grammars
A regular graph grammar (RGG; Courcelle 1991)
is a restricted form of HRG. To explain the restric-
tions, we first require some definitions.

Definition 4. Given a graph G, a path in G from
a node v to a node v′ is a sequence

(v0, i1, e1, j1, v1)(v1, i2, e2, j2, v2)
. . . (vk−1, ik, ek, jk, vk) (1)

such that v0 = v, vk = v′, and for each r ∈ [k],
vert(er, ir) = vr−1 and vert(er, jr) = vr. The
length of this path is k.

A path is terminal if every edge in the path has
a terminal label. A path is internal if each vi is
internal for 1 ≤ i ≤ k−1. Note that the endpoints
v0 and vk of an internal path can be external.

Definition 5. A HRG G is a Regular Graph
Grammar (or simply RGG) if each nonterminal
in NG has rank at least one and for each p ∈ PG
the following hold:

201



(C1) R(p) has at least one edge. Either it is a
single terminal edge, all nodes of which are exter-
nal, or each of its edges has at least one internal
node.

(C2) Every pair of nodes in R(p) is connected
by a terminal and internal path.

Example 4. The grammar in Table 1 is an RGG.
Although HRGs can produce context-free lan-
guages (and beyond) as shown in Figure 4, the
only string languages RGGs can produce are the
regular string languages. See Figure 5 for an
example of a string generating RGG. Similarly,
RGGs can produce regular tree languages, but not
context-free tree languages. Figure 6 shows a tree
generating RGG that generates binary trees the in-
ternal nodes of which are represented by a-labeled
edges, and the leaves of which are represented by
b-labeled edges. Note that these two results of reg-
ularity of the string- and tree-languages generated
by RGG follow from the fact that graph languages
produced by RGG are MSO-definable (Courcelle,
1991), and the well-known facts that the regular
string and graph languages are MSO-definable.

X
(1)

a
Y

(1)

b1 1

Figure 5: A RGG for a regular string language.

X

(1)

Y Z

(1)1
a

1 2

1 1

b

Figure 6: A RGG for a regular tree language.

We call the family of languages generated by
RGGs the regular graph languages (RGLs).

3 RGL Recognition

To recognize RGG, we exploit the property that
every nonterminal including the start symbol has
rank at least one (Definition 5), and we assume
that the corresponding external node is identified
in the input graph. This mild assumption may
be reasonable for applications like AMR parsing,
where grammars could be designed so that the ex-
ternal node is always the unique root. Later we
relax this assumption.

The availability of an identifiable external node
suggests a top-down algorithm, and we take in-

spiration from a top-down recognition algorithm
for the predictive top-down parsable grammars,
another subclass of HRG (Drewes et al., 2015).
These grammars, the graph equivalent of LL(1)
string grammars, are incomparable to RGG, but
the algorithms are related in their use of top-down
prediction and in that they both fix an order of the
edges in the right-hand side of each production.

3.1 Top-Down Recognition for RGLs

Just as the algorithm of Chiang et al. (2013) gen-
eralizes CKY to HRG, our algorithm generalizes
Earley’s algorithm (Earley, 1970). Both algo-
rithms operate by recognizing incrementally larger
subgraphs of the input graph, using a succinct rep-
resentation for subgraphs that depends on an arbi-
trarily chosen marker node m of the input graph.

Definition 6. (Chiang et al. 2013; Definition 6)
Let I be a subgraph of a graph G. A boundary
node of I is a node which is either an endpoint
of an edge in G\I or an external node of G. A
boundary edge of I is an edge in I which has
a boundary node as an endpoint. The boundary
representation of I is the tuple b(I) = 〈bn(I),
be(I),m ∈ I〉 where

1. bn(I) is the set of boundary nodes of I
2. be(I) is the set of boundary edges of I
3. (m ∈ I) is a flag indicating whether the

marker node is in I .

Chiang et al. (2013) prove each subgraph has
a unique boundary representation, and give algo-
rithms that use only boundary representations to
compute the union of two subgraphs, requiring
time linear in the number of boundary nodes; and
to check disjointness of subgraphs, requiring time
linear in the number of boundary edges.

For each production p of the grammar, we im-
pose a fixed order on the edges of R(p), as in
Drewes et al. (2015). We discuss this order in de-
tail in §3.2. As in Earley’s algorithm, we use dot-
ted rules to represent partial recognition of pro-
ductions: X → ē1 . . . ēi−1 · ēi . . . ēn means that
we have identified the edges ē1 to ēi−1 and that
we must next recognize edge ēi. We write ē and
v̄ for edges and nodes in productions and e and v
for edges and nodes in a derived graph. When the
identity of the sequence is immaterial we abbrevi-
ate it as α, for example writing X → ·α.

We present our recognizer as a deductive proof
system (Shieber et al., 1995). The items of the

202



Name Rule Conditions

PREDICT
[b(I), p : X → ē1 . . .· ēi . . . ēn, φp][q : Y → α]

[φp(ēi), q : Y → ·α, φ0q[extR(q) = φp(ēi)]] lab(ēi) = Y

SCAN
[b(I), X → ē1 . . .· ēi . . . ēn, φp][e = edglab(ēi)(v1, . . . , vm)]

[b(I ∪ {e}), X → ē1 . . .· ēi+1 . . . ēn, φp[att(ēi) = (v1, . . . , vm)]] φp(ēi)(j) ∈ VG ⇒φp(ēi)(j) = vert(e, j)

COMPLETE
[b(I), p : X → ē1 . . .· ēi . . . ēn, φp][b(J), q : Y → α·, φq]

[b(I ∪ J), X → ē1 . . .· ēi+1 . . . ēn, φp[att(ēi) = φp(extR(q))]]
φp(ēi)(j) ∈ VG ⇒

φp(ēi)(j) =
φq(extR(q))(j),

lab(ēi) = Y,
EI ∩ EJ = ∅

Table 2: The inference rules for the top-down recognizer.

recognizer are of the form

[b(I), p : X → ē1 . . .· ēi . . . ēn, φp]
where I is a subgraph that has been recognized
as matching ē1, . . . , ēi−1; p : X → ē1, . . . , ēn is a
production in the grammar with the edges in order;
and φp : ER(p) → V ∗G maps the endpoints of edges
in R(p) to nodes in G.

For each production p, we number the nodes
in some arbitrary but fixed order. Using this, we
construct the function φ0p : ER(p) → V ∗R(p) such
that for ē ∈ ER(p) if att(ē) = (v̄1, v̄2) then
φ0p(ē) = (v̄1, v̄2). As we match edges in the graph
with edges in p, we assign the nodes v̄ to nodes in
the graph. For example, if we have an edge ē in
a production p such that att(ē) = (v̄1, v̄2) and we
find an edge e which matches ē, then we update
φp to record this fact, written φp[att(ē) = att(e)].
We also use φp to record assignments of external
nodes. If we assign the ith external node to v, we
write φp[extp(i) = v]. We write φ0p to represent a
mapping with no grounded nodes.

Since our algorithm makes top-down predic-
tions based on known external nodes, our bound-
ary representation must cover the case where a
subgraph is empty except for these nodes. If
at some point we know that our subgraph has
external nodes φ(ē), then we use the shorthand
φ(ē) rather than the full boundary representation
〈φ(ē), ∅,m ∈ φ(ē)〉.

To keep notation uniform, we use dummy non-
terminal S∗ 6∈ NG that derives SG via the produc-
tion p0. For graph G, our system includes the ax-
iom:

[extG, p0 : S∗ →·SG , φ0p0 [extR(p0) = extG]].

Our goal is to prove:

[b(G), pS : S∗ → SG·, φpS ]
where φpS has a single edge ē in its domain which
has label SG in R(pS) and φpS (ē) = extG.

As in Earley’s algorithm, we have three infer-
ence rules: PREDICT, SCAN and COMPLETE (Ta-
ble 2). PREDICT is applied when the edge after the
dot is nonterminal, assigning any external nodes
that have been identified. SCAN is applied when
the edge after the dot is terminal. Using φp, we
may already know where some of the endpoints of
the edge should be, so it requires the endpoints of
the scanned edge to match. COMPLETE requires
that each of the nodes of ēi in R(p) have been
identified, these nodes match up with the corre-
sponding external nodes of the subgraph J , and
that the subgraphs I and J are edge-disjoint.

We provide a high-level proof that the recog-
nizer is sound and complete.

Proposition 1. Let G be a HRG and G a graph.
Then the goal [b(G), pS : S∗ → SG ·, φpS ] can
be proved from the axiom [extG, pS : S∗ →·SG , φpS [extR(pS) = extG]] if and only if G ∈
L(G).
Proof. We prove that for each X ∈ NG ,
[b(G), pX : X∗ → X ·, φpX ] can be proved from
[extG, pX : X∗ → ·X,φpX [extR(pX) = extG]] if
and only if G ∈ LX(G) where the dummy non-
terminal X∗ was added to the set of nonterminals
and pX : X∗ → X was added to the set of produc-
tions. We prove this by induction on the number
of edges in G.

We assume that each production in the grammar
contains at least one terminal edge. If the HRG is
not in this form, it can be converted into this form

203



and in the case of RGGs they are already in this
form by definition.

Base Case: Let G consist of a single edge.
If: Assume G ∈ LX(G). Since G consists

of one edge, there must be a production q :
X → G. Apply PREDICT to the axiom and
pX : X∗ → X to obtain the item [φpX (X), q :
X → ·G,φ0q [extG = φpX (X)]]. Apply SCAN to
the single terminal edge that makes up G to ob-
tain [b(G), q : X → G·, φq] and finally apply
COMPLETE to this and the axiom reach the goal
[b(G), pX : X∗ → X,φpX ].

Only if: Assume the goal can be reached from
the axiom and G = e. Then the item [b(e), q :
X → e, φq] must have been reached at some point
for some q ∈ PG . Therefore q : X → e is a
production and so e = G ∈ LX(G).

Assumption: Assume that the proposition
holds when G has fewer than k edges.

Inductive Step: Assume G has k edges.
If: Assume G ∈ LX(G), then there is a pro-

duction q : X → H where H has nonterminals
Y1, . . . , Yn and there are graphs H1, . . . ,Hn such
that G = H[Y1/H1] . . . [Yn/Hn]. Each graph Hi
for i ∈ [n] has fewer than k edges and so we ap-
ply the inductive hypothesis to show that we can
prove the items [b(Hi), ri : Yi → Ji, φri ] for each
i ∈ [n]. By applying COMPLETE to each such item
and applying SCAN to each terminal edge ofH we
reach the goal [b(G), pX : X∗ → X ·, φpX ].

Only If: Assume the goal can be proved from
the axiom. Then we must have at some point
reached an item of the form [b(G), q : X →
H,φq] and that H has nonterminals Y1, . . . , Yn.
This means that there are graphs H1, . . . ,Hn such
that [b(Hi), pYi : Y

∗
i → Yi, φpYi ] for each i ∈ [n]

and G = H[Y1/H1] . . . [Yn/Hn]. Since each Hi
has fewer than k edges, we apply the inductive hy-
pothesis to get that Hi ∈ LYi(G) for each i ∈ [n]
and therefore G ∈ LX(G).
Example 5. Using the RGG in Table 1, we show
how to recognize the graph in Figure 7, which can
be derived by applying production s followed by
production u, where the external nodes of Y are
(v3, v2). Assume the ordering of the edges in pro-
duction s is arg1, arg0, Z; the top node is v̄1; the
bottom node is v̄2; and the node on the right is v̄3;
and that the marker node is not in this subgraph—
we elide reference to it for simplicity. Let v̄4 be
the top node of R(u) and v̄5 be the bottom node
of R(u). The external nodes of Y are determined

top-down, so the recognize of this subgraph is trig-
gered by this item:

[{v3, v2}, Y →· arg1 arg0Z,
φ0s[extR(s) = (v3, v2)]] (2)

where φs(arg1) = (v̄1, v3), φs(arg0) = (v̄1, v2),
and φs(Z) = (v̄1).

Table 3 shows how we can prove the item

[〈{v3, v2}, {e3, e2}〉, Y → arg1arg0Z·, φ]
The boundary representation
〈{v3, v2}, {e3, e2}〉 in this item represents
the whole subgraph shown in Figure 7.

v1

v4

v2

v3 . . .

. . .

need (e1)

arg0 (e2)

arg1 (e3)

Figure 7: Top left subgraph of Figure 3. To refer to nodes and
edges in the text, they are labeled v1, v2, v3, e1, e2, and e3.

3.2 Normal Ordering
Our algorithm requires a fixed ordering of the
edges in the right-hand sides of each production.
We will constrain this ordering to exploit the struc-
ture of RGG productions, allowing us to bound
recognition complexity. If s = ē1 . . . ēn is an or-
der, define si:j = ēi . . . ēj .

Definition 7. Let s = ē1, . . . , ēn be an edge order
of a right-hand side of a production. Then s is
normal if it has the following properties:

1. ē1 is connected to an external node,
2. s1:j is a connected graph for all j ∈ [n]
3. if ēi is nonterminal, each endpoint of ēi must

be incident with some terminal edge ēj for which
j < i.

Example 6. The ordering of the edges of produc-
tion s in Example 5 is normal.

Arbitrary HRGs do not necessarily admit a nor-
mal ordering. For example, the graph in Figure 8
cannot satisfy Properties 2 and 3 simultaneously.
However, RGGs do admit a normal ordering.

(1) X (2)a 1 2 b

Figure 8: This graph cannot be normally ordered.

204



Current Item Reason

1. [{v3, v2}, Y → · arg1arg0Z, φ0s[extR(s) = (v3, v2)]] Equation 2
2. [〈{v3, v2, v1}, {e3}〉, Y → arg1· arg0Z, φs[att(arg1) = (v1, v3)]] SCAN: 1. and e3 = edgarg1(v1, v3)
3. [〈{v3, v2, v1}, {e3, e2}〉, Y → arg1arg0·Z, φs[att(arg0) = (v1, v2)]] SCAN: 2. and e2 = edgarg0(v1, v2)]
4. [(v1), Z → · need, φ0u[extR(u) = (v1)]] PREDICT: 3. and Z → need
5. [〈{v1, v4}, {e1}〉, Z → need·, φu[att(need) = (v1, v4)]] SCAN: 4. and e1 = edgneed(v1, v4)
6. [〈{v3, v2}, {e3, e2}〉, Y → arg1arg0Z ·, φs[att(Z) = (v1)]] COMPLETE: 3. and 5.

Table 3: The steps of recognizing that the subgraph shown in Figure 7 is derived from productions r2 and u in the grammar in
Table 1.

Proposition 2. If G is an RGG, for every p ∈ PG ,
there is a normal ordering of the edges in R(p).

Proof. If R(p) contains a single node then it must
be an external node and it must have a terminal
edge attached to it since R(p) must contain at
least one terminal edge. If R(p) contains multi-
ple nodes then by C2 there must be terminal inter-
nal paths between all of them, so there must be a
terminal edge attached to the external node, which
we use to satisfy Property 1. To produce a normal
ordering, we next select terminal edges once one
of their endpoints is connected to an ordered edge,
and nonterminal edges once all endpoints are con-
nected to ordered edges, possible by C2. There-
fore, Properties 2 and 3 are satisfied.

A normal ordering tightly constrains the recog-
nition of edges. Property 3 ensures that when
we apply PREDICT, the external nodes of the pre-
dicted edge are all bound to specific nodes in the
graph. Properties 1 and 2 ensure that when we
apply SCAN, at least one endpoint of the edge is
bound (fixed).

3.3 Recognition Complexity

Assume a normally-ordered RGG. Let the maxi-
mum number of edges in the right-hand side of any
production be m; the maximum number of nodes
in any right-hand side of a production k; the maxi-
mum degree of any node in the input graph d; and
the number of nodes in the input graph n.

As previously mentioned, Drewes et al. (2015)
also propose a HRG recognizer which can recog-
nize a subclass of HRG (incomparable to RGG)
called the predictive top-down parsable grammars.
Their recognizer in this case runs in O(n2) time.
A well-known bottom-up recognizing algorithm
for HRG was first proposed by Lautemann (1990).

In this paper, the recognizer is shown to be polyno-
mial in the size of the input graph. Later, Chiang
et al. (2013) formulate the same algorithm more
precisely and show that the recognizing complex-
ity is O((3d × n)k+1) where k in their case is the
treewidth of the grammar.
Remark 1. The maximum number of nodes in any
right-hand side of a production (k) is also the max-
imum number of boundary nodes for any subgraph
in the recognizer.

COMPLETE combines subgraphs I and J only
when the entire subgraph derived from Y has been
recognized. Boundary nodes of J are also bound-
ary nodes of I because they are nodes in the ter-
minal subgraph of R(p) where Y connects. The
boundary nodes of I ∪ J are also bounded by k
since form a subset of the boundary nodes of I .
Remark 2. Given a boundary node, there are at
most (dm)k−1 ways of identifying the remaining
boundary nodes of a subgraph that is isomorphic
to the terminal subgraph of the right-hand side of
a production.

The terminal subgraph of each production is
connected by C2, with a maximum path length of
m. For each edge in the path, there are at most d
subsequent edges. Hence for the k − 1 remaining
boundary nodes there are (dm)k−1 ways of choos-
ing them.

We count instantiations of COMPLETE for an
upper bound on complexity (McAllester, 2002),
using similar logic to (Chiang et al., 2013). The
number of boundary nodes of I, J and I ∪ J is
at most k. Therefore, if we choose an arbitrary
node to be some boundary node of I ∪J , there are
at most (dm)k−1 ways of choosing its remaining
boundary nodes. For each of these nodes, there
are at most (3d)k states of their attached boundary
edges: in I , in J , or in neither. The total number

205



of instantiations is O(n(dm)k−1(3d)k), linear in
the number of input nodes and exponential in the
degree of the input graph. Note that in the case of
the AMR dataset (Banarescu et al. 2013), the max-
imum node degree is 17 and the average is 2.12.

We observe that RGGs could be relaxed to pro-
duce graphs with no external nodes by adding a
dummy nonterminal S′ with rank 0 and a single
production S′ → S. To adapt the recognition al-
gorithm, we would first need to guess where the
graph starts. This would add a factor of n to the
complexity as the graph could start at any node.

4 Discussion and Conclusions

We have presented RGG as a formalism that
could be useful for semantic representations and
we have provided a top-down recognition algo-
rithm for them. The constraints of RGG en-
able more efficient recognition than general HRG,
and this tradeoff is reasonable since HRG is very
expressive—when generating strings, it can ex-
press non-context-free languages (Engelfriet and
Heyker, 1991; Bauer and Rambow, 2016), far
more power than needed to express semantic
graphs. On the other hand, RGG is so constrained
that it may not be expressive enough: it would be
more natural to derive the graph in Figure 4 from
outermost to innermost predicate; but constraint
C2 makes it difficult to express this, and the gram-
mar in Table 1 does not. Perhaps we need less
expressivity than HRG but more than RGG.

HRL MSOL Graphs

CFTL

CFL∗

RTL Trees

RL Strings

RGL DAGAL

Figure 9: A Hasse diagram of various string, tree and graph
language families. An arrow from family A to family B indi-
cates that family A is a subfamily of family B.

A possible alternative would be to consider Re-
stricted DAG Grammars (RDG; Björklund et al.
2016). Parsing for a fixed such grammar can be
achieved in quadratic time with respect to the in-
put graph. It is known that for a fixed HRG gen-
erating k-connected hypergraphs consisting of hy-
peredges of rank k only, parsing can be carried out
in cubic time (k-HRG; (Drewes, 1993)).

More general than RDGs a is the class of graph
languages recognized by DAG automata (DA-
GAL; Blum and Drewes 2016), for which the de-
terministic variant provides polynomial time pars-
ing. Note that RGGs can generate graph languages
of unbounded node degree. With respect to ex-
pressive power, RDGs and k-HRGs are incompa-
rable to RGGs. Figure 9 shows the relationships
between the context-free and regular languages for
strings, trees and graphs. Monadic-second order
logic (MSOL; Courcelle and Engelfriet 2011) is
a form of logic which when restricted to strings
gives us exactly the regular string languages and
when restricted to trees gives us exactly the regu-
lar tree languages. RGLs lie in the intersection of
HRG and MSOL on graphs but they do not make
up this entire intersection. Courcelle (1991) de-
fined (non-constructively) this intersection to be
the strongly context-free languages (SCFL). We
believe that there may be other formalisms that are
subfamilies of SCFL which may be useful for se-
mantic representations. All inclusions shown in
Figure 9 are strict. For instance, RGL cannot pro-
duce “star graphs” (one node that has edges to n
other nodes), while DAGAL and HRL can pro-
duce such graphs. It is well-known that HRL and
MSOL are incomparable. There is a language in
RGL that is not in DAGAL, for instance, “ladders”
(two string graphs of n nodes each, with an edge
between the ith node of each string).

Another alternative formalism to RGG that is
defined as a restriction of HRG are Tree-like
Grammars (TLG; Matheja et al. 2015). They de-
fine a subclass of SCFL, i.e., they are MSO de-
finable. TLGs have been considered for program
verification, where closure under intersection of
the formalism is essential. Note that RGGs are
also closed under intersection. While TLG and
RDG are both incomparable to RGG, they share
important characteristics, including the fact that
the terminal subgraph of every production is con-
nected. This means that our top-down recogni-
tion algorithm is applicable to both. In the future
we would like to investigate larger, less restrictive
(and more linguistically expressive) subfamilies of
SCFL. We plan to implement and evaluate our al-
gorithm experimentally.

Acknowledgments

This work was supported in part by the EPSRC
Centre for Doctoral Training in Data Science,

206



funded by the UK Engineering and Physical Sci-
ences Research Council (grant EP/L016427/1) and
the University of Edinburgh; and in part by a
Google faculty research award (to AL). We thank
Clara Vania, Sameer Bansal, Ida Szubert, Fed-
erico Fancellu, Antonis Anastasopoulos, Marco
Damonte, and the anonymous reviews for helpful
discussion of this work and comments on previous
drafts of the paper.

References
Omri Abend and Ari Rappoport. 2013. Univer-

sal conceptual cognitive annotation (ucca). In
ACL (1). The Association for Computational
Linguistics, pages 228–238. http://dblp.uni-
trier.de/db/conf/acl/acl2013-1.html#AbendR13.

Laura Banarescu, Claire Bonial, Shu Cai, Madalina
Georgescu, Kira Griffitt, Ulf Hermjakob, Kevin
Knight, Philipp Koehn, Martha Palmer, and Nathan
Schneider. 2013. Abstract meaning representa-
tion for sembanking. In Proceedings of the
7th Linguistic Annotation Workshop and Interoper-
ability with Discourse. Association for Computa-
tional Linguistics, Sofia, Bulgaria, pages 178–186.
http://www.aclweb.org/anthology/W13-2322.

Daniel Bauer and Owen Rambow. 2016. Hy-
peredge replacement and nonprojective de-
pendency structures. In Proceedings of the
12th International Workshop on Tree Ad-
joining Grammars and Related Formalisms
(TAG+12), June 29 - July 1, 2016, Heinrich Heine
University, Düsseldorf, Germany. pages 103–
111. http://aclweb.org/anthology/W/W16/W16-
3311.pdf.

Henrik Björklund, Frank Drewes, and Petter Eric-
son. 2016. Between a Rock and a Hard Place
– Uniform Parsing for Hyperedge Replacement
DAG Grammars, Springer International Publishing,
Cham, pages 521–532. https://doi.org/10.1007/978-
3-319-30000-9 40.

Johannes Blum and Frank Drewes. 2016. Properties
of regular DAG languages. In Language and Au-
tomata Theory and Applications - 10th International
Conference, LATA 2016, Prague, Czech Republic,
March 14-18, 2016, Proceedings. pages 427–438.
https://doi.org/10.1007/978-3-319-30000-9 33.

David Chiang, Jacob Andreas, Daniel Bauer,
Karl Moritz Hermann, Bevan Jones, and Kevin
Knight. 2013. Parsing graphs with hyper-
edge replacement grammars. In Proceedings
of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1:
Long Papers). Association for Computational
Linguistics, Sofia, Bulgaria, pages 924–932.
http://www.aclweb.org/anthology/P13-1091.

Bruno Courcelle. 1991. The monadic second-order
logic of graphs V: on closing the gap between
definability and recognizability. Theor. Comput.
Sci. 80(2):153–202. https://doi.org/10.1016/0304-
3975(91)90387-H.

Bruno Courcelle and Joost Engelfriet. 2011. Graph
Structure and Monadic Second-Order Logic, a Lan-
guage Theoretic Approach. Cambridge University
Press.

Frank Drewes. 1993. Np-completeness of k-
connected hyperedge-replacement languages
of order k. Inf. Process. Lett. 45(2):89–94.
https://doi.org/10.1016/0020-0190(93)90221-T.

Frank Drewes, Berthold Hoffmann, and Mark Mi-
nas. 2015. Predictive Top-Down Parsing for
Hyperedge Replacement Grammars, Springer
International Publishing, Cham, pages 19–34.
https://doi.org/10.1007/978-3-319-21145-9 2.

Frank Drewes, Hans-Jörg Kreowski, and Annegret Ha-
bel. 1997. Hyperedge replacement graph grammars.
In Grzegorz Rozenberg, editor, Handbook of Graph
Grammars and Computing by Graph Transforma-
tion, World Scientific, pages 95–162.

Jay Earley. 1970. An efficient context-free
parsing algorithm. ACM, New York,
NY, USA, volume 13, pages 94–102.
https://doi.org/10.1145/362007.362035.

Joost Engelfriet and Linda Heyker. 1991. The string
generating power of context-free hypergraph gram-
mars. Journal of Computer and System Sciences
43(2):328–360.

Dan Flickinger, Yi Zhang, and Valia Kordoni. 2012.
Deepbank : a dynamically annotated treebank of the
Wall Street Journal. In Proceedings of the Eleventh
International Workshop on Treebanks and Linguistic
Theories (TLT11). Lisbon, pages 85–96. HU.

Jan Hajič, Eva Hajičová, Jarmila Panevov, Petr
Sgall, Ondřej Bojar, Silvie Cinková, Eva Fučı́ková,
Marie Mikulová, Petr Pajas, Jan Popelka, Jiřı́ Se-
mecký, Jana Šindlerová, Jan Štěpánek, Josef Toman,
Zdeňka Urešová, and Zdeněk Žabokrtský. 2012.
Announcing prague czech-english dependency tree-
bank 2.0. In Nicoletta Calzolari (Conference Chair),
Khalid Choukri, Thierry Declerck, Mehmet Uur
Doan, Bente Maegaard, Joseph Mariani, Asun-
cion Moreno, Jan Odijk, and Stelios Piperidis, ed-
itors, Proceedings of the Eight International Con-
ference on Language Resources and Evaluation
(LREC’12). European Language Resources Associ-
ation (ELRA), Istanbul, Turkey.

Bevan Jones, Jacob Andreas, Daniel Bauer, Karl Mor-
tiz Hermann, and Kevin Knight. 2012. Semantics-
based machine translation with hyperedge replace-
ment grammars. In Proceedings of COLING.

207



Clemens Lautemann. 1990. The complexity of
graph languages generated by hyperedge re-
placement. Acta Informatica 27(5):399–421.
https://doi.org/10.1007/BF00289017.

Christoph Matheja, Christina Jansen, and Thomas
Noll. 2015. Tree-Like Grammars and Separa-
tion Logic, Springer International Publishing, Cham,
pages 90–108. https://doi.org/10.1007/978-3-319-
26529-2 6.

David McAllester. 2002. On the complexity anal-
ysis of static analyses. J. ACM 49(4):512–537.
https://doi.org/10.1145/581771.581774.

Xiaochang Peng, Linfeng Song, and Daniel Gildea.
2015. A synchronous hyperedge replacement gram-
mar based approach for AMR parsing. In Pro-
ceedings of the 19th Conference on Computa-
tional Natural Language Learning, CoNLL 2015,
Beijing, China, July 30-31, 2015. pages 32–41.
http://aclweb.org/anthology/K/K15/K15-1004.pdf.

Stuart M. Shieber, Yves Schabes, and Fernando C. N.
Pereira. 1995. Principles and implementation of
deductive parsing. Journal of Logic Programming
24(1-2).

K. Vijay-Shanker, David J. Weir, and Aravind K.
Joshi. 1987. Characterizing structural descrip-
tions produced by various grammatical formalisms.
In Proceedings of the 25th Annual Meeting on
Association for Computational Linguistics. Asso-
ciation for Computational Linguistics, Strouds-
burg, PA, USA, ACL ’87, pages 104–111.
https://doi.org/10.3115/981175.981190.

208


