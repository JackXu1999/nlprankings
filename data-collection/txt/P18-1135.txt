




































Global-Locally Self-Attentive Encoder for Dialogue State Tracking


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 1458–1467
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

1458

Global-Locally Self-Attentive Dialogue State Tracker

Victor Zhong, Caiming Xiong, Richard Socher
Salesforce Research

Palo Alto, CA
{vzhong, cxiong, rsocher}@salesforce.com

Abstract

Dialogue state tracking, which estimates
user goals and requests given the dia-
logue context, is an essential part of task-
oriented dialogue systems. In this pa-
per, we propose the Global-Locally Self-
Attentive Dialogue State Tracker (GLAD),
which learns representations of the user ut-
terance and previous system actions with
global-local modules. Our model uses
global modules to share parameters be-
tween estimators for different types (called
slots) of dialogue states, and uses lo-
cal modules to learn slot-specific features.
We show that this significantly improves
tracking of rare states and achieves state-
of-the-art performance on the WoZ and
DSTC2 state tracking tasks. GLAD ob-
tains 88.1% joint goal accuracy and 97.1%
request accuracy on WoZ, outperforming
prior work by 3.7% and 5.5%. On DSTC2,
our model obtains 74.5% joint goal accu-
racy and 97.5% request accuracy, outper-
forming prior work by 1.1% and 1.0%.

1 Introduction

Task oriented dialogue systems can significantly
reduce operating costs by automating processes
such as call center dispatch and online customer
support. Moreover, when combined with auto-
matic speech recognition systems, task-oriented
dialogue systems provide the foundation of intel-
ligent assistants such as Amazon Alexa, Apple
Siri, and Google Assistant. In turn, these assis-
tants allow for natural, personalized interactions
with users by tailoring natural language system re-
sponses to the dialogue context. Dialogue state
tracking (DST) is a crucial part of dialogue sys-
tems. In DST, a dialogue state tracker estimates

the state of the conversation using the current user
utterance and the conversation history. This esti-
mated state is then used by the system to plan the
next action and respond to the user. A state in DST
typically consists of a set of requests and joint
goals. Consider the task of restaurant reservation
as an example. During each turn, the user may in-
form the system of particular goals the user would
like to achieve (e.g. inform(food=french)),
or request for more information from the sys-
tem (e.g. request(address)). The set of
goal and request slot-value pairs (e.g. (food,
french), (request, address)) given dur-
ing a turn are referred to as the turn goal and turn
request. The joint goal is the set of accumulated
turn goals up to the current turn. Figure 1 shows
an example dialogue with annotated turn states, in
which the user reserves a restaurant.

Traditional dialogue state trackers rely on
Spoken Language Understanding (SLU) sys-
tems (Henderson et al., 2012) in order to under-
stand user utterances. These trackers accumu-
late errors from the SLU, which sometimes do
not have the necessary dialogue context to inter-
pret the user utterances. Subsequent DST research
forgo the SLU and directly infer the state using the
conversation history and the user utterance (Hen-
derson et al., 2014b; Zilka and Jurcicek, 2015;
Mrkšić et al., 2015). These trackers rely on hand-
crafted semantic dictionaries and delexicalization
— the anonymization of slots and values using
generic tags — to achieve generalization. Recent
work by Mrkšić et al. (2017) apply representation
learning using convolutional neural networks to
learn features relevant for each state as opposed
to hand-crafting features.

A key problem in DST that is not addressed
by existing methods is the extraction of rare slot-
value pairs that compose the state during each
turn. Because task oriented dialogues cover large



1459

Where would you go to eat in the south part of town?

inform(area=south)

ok I can help you with that.  Are you 
looking for a particular type of food, or 
within a specific price range?

request(food)
request(price range)

I just want to eat at a cheap restaurant in the south 
part of town. What food types are available, can you 
also provide some phone numbers?

inform(price range=cheap)
inform(area=south)
request(phone)
request(food)

request(food)

I found two restaurants serving cheap 
food. Would you prefer Portuguese or 
Chinese food?

Either is fine, can I have the phone number please?

request(phone)

The lucky start is at 01223 244277 and 
Nandos is at 01223 327908.

Thank you very much.

User System

User utterance

Turn goals  and requests

System actions

System response

Figure 1: An example dialogue from the WoZ
restaurant reservation corpus. Dashed lines divide
turns in the dialogue. A turn contains an user ut-
terance (purple), followed by corresponding turn-
level goals and requests (blue). The system then
executes actions (yellow), and formulates the re-
sult into a natural language response (yellow).

state spaces, many slot-value pairs that compose
the state rarely occur in the training data. Al-
though the chance of a particular rare slot-value
pair being specified by the user in a turn is small,
the chance that at least one rare slot-value pair
is specified is large. Failure to predict these
rare slot-value pairs results in incorrect turn-level
goal and request tracking. Accumulated errors
in turn-level goal tracking significantly degrade
joint goal-tracking. For example, in the WoZ state
tracking dataset, slot-value pairs have 214.9 train-
ing examples on average, while 38.6% of turns
have a joint goal that contains a rare slot-value pair
with less than 20 training examples.

In this work, we propose the Global-Locally
Self-Attentive Dialogue State Tracker (GLAD),
a new state-of-the-art model for dialogue

state tracking. In contrast to previous work
that estimate each slot-value pair independently,
GLAD uses global modules to share parame-
ters between estimators for each slot and local
modules to learn slot-specific feature representa-
tions. We show that by doing so, GLAD gener-
alizes on rare slot-value pairs with few training
examples. GLAD achieves state-of-the-art results
of 88.1% goal accuracy and 97.1% request accu-
racy on the WoZ dialogue state tracking task (Wen
et al., 2017), outperforming prior best by 3.7% and
5.5%. On DSTC2 (Henderson et al., 2014a), we
achieve 74.5% goal accuracy and 97.5% request
accuracy, outperforming prior best by 1.1% and
1.0%.

2 Global-Locally Self-Attentive Dialogue
State Tracker

One formulation of state tracking is to predict the
turn state given an user utterance and previous sys-
tem actions (Williams and Young, 2007). Like
previous methods (Henderson et al., 2014b; Wen
et al., 2017; Mrkšić et al., 2017), GLAD decom-
poses the multi-label state prediction problem into
a collection of binary prediction problems by us-
ing a distinct estimator for each slot-value pair that
make up the state. Hence, we describe GLAD with
respect to a slot-value pair that is being predicted
by the model.

Shown in Figure 2, GLAD is comprised of an
encoder module and a scoring module. The en-
coder module consists of separate global-locally
self-attentive encoders for the user utterance, the
previous system actions, and the slot-value pair
under consideration. The scoring module consists
of two scorers. One scorer considers the contribu-
tion from the utterance while the other considers
the contribution from previous system actions.

2.1 Global-Locally Self-Attentive Encoder

We begin by describing the global-locally self-
attentive encoder, which makes up the encoder
module. DST datasets tend to be small relative
to their state space in that many slot-value pairs
rarely occur in the dataset. Because each state is
comprised of a set of slot-value pairs, many of
them rare, poor inference of rare slot-value pairs
subsequently results in poor turn-level tracking.
This problem is amplified in joint tracking, due
to the accumulation of turn-level errors. In de-
veloping this encoder, we seek to better model



1460

request(food)

I just want to eat at a cheap 
restaurant in the south part of town. 
What food types are available, can 
you also provide some phone 
numbers?

System actions in previous turn

request(price range)

User utterance

Slot value under consideration

price range = cheap

Action 
encoder

P(price range=cheap)

X Hutt

cutt

cval

yact

yutt
y

Utterance 
encoder

Action scorer

Slot-value 
encoder

Utterance 
scorer

Mixture

Encoder module Scoring module

A1

A2

V

Cact2

Cact1

Figure 2: The Global-Locally Self-Attentive Dialogue State Tracker.

Local 
BiLSTM

Global 
BiLSTM

Gated 
Mixture

Local 
Self-Attn

Global
Self-Attn

Gated 
Mixture

cH
X

H
g

H
s cs

cg

Figure 3: Global-locally self-attentive encoder.

rare slot-value pairs by sharing parameters be-
tween each slot through global modules and learn-
ing slot-specific features through local modules.

The global-locally self-attentive encoder con-
sists of a bidirectional LSTM (Hochreiter and
Schmidhuber, 1997), which captures temporal re-
lationships within the sequence, followed by a
self-attention layer to compute the summary of the
sequence. Figure 3 illustrates the global-locally
self-attentive encoder.

Consider the process of encoding a sequence
with respect to a particular slot s. Let n denote
the number of words in the sequence, demb the di-
mension of the embeddings, and X ∈ Rn×demb
the word embeddings corresponding to words in
the sequence. We produce a global encoding Hg

of X using a global bidirectional LSTM.

Hg = biLSTMg (X) ∈ Rn×drnn (1)

where drnn is the dimension of the LSTM state.
We similarly produce a local encoding Hs of X ,

taking into account the slot s, using a local bidi-
rectional LSTM.

Hs = biLSTMs (X) ∈ Rn×drnn (2)

The outputs of the two LSTMs are combined
through a mixture layer to yield a global-local en-
coding H of X .

H = βsHs + (1− βs)Hg ∈ Rn×drnn (3)

Here, the scalar βs is a learned parameter be-
tween 0 and 1 that is specific to the slot s. Next,
we compute a global-local self-attention context
c over H . Self-attention, or intra-attention, is
a very effective method of computing summary
context over variable-length sequences for natu-
ral language processing tasks (Cheng et al., 2016;
Vaswani et al., 2017; He et al., 2017; Lee et al.,
2017). In our case, we use a global self-attention
module to compute attention context useful for
general-purpose state tracking, as well as a local
self-attention module to compute slot-specific at-
tention context.

For each ith element Hi, we compute a scalar
global self-attention score agi which is subse-
quently normalized across all elements using a
softmax function.

agi = W
gHi + b

g ∈ R (4)
pg = softmax (ag) ∈ Rn (5)



1461

The global self-attention context cg is then the
sum of each element Hi, weighted by the cor-
responding normalized global self-attention score
pgi .

cg =
∑
i

pgiHi ∈ R
drnn (6)

We similarly compute the local self-attention
context cs.

asi = W
sHi + b

s ∈ R (7)
ps = softmax (as) ∈ Rn (8)
cs =

∑
i

psiHi ∈ Rdrnn (9)

The global-local self-attention context c is the
mixture

c = βscs + (1− βs) cg ∈ Rn×drnn (10)

For ease of exposition, we define the multi-
value encode function encode (X).

encode : X → H, c (11)

This function maps the sequence X to the en-
coding H and the self-attention context c.

2.2 Encoding module
Having defined the global-locally self-attentive
encoder, we now build representations for the user
utterance, the previous system actions, and the
slot-value pair under consideration. Let U denote
word embeddings of the user utterance, Aj de-
note those of the jth previous system action (e.g.
request ( price range ), and V denote
those of the slot-value pair under consideration
(e.g. food = french). We have

Hutt, cutt = encode (U) (12)

Hactj , C
act
j = encode (Aj) (13)

Hval, cval = encode (V ) (14)

2.3 Scoring module
Intuitively, there are two sources of contribution to
whether the user has expressed the slot-value pair
under consideration. The first source of contribu-
tion is the user utterance, in which the user directly

states the goals and requests. An example of this is
the user saying “how about a French restaurant in
the centre of town?”, after the system asked “how
may I help you?” To handle these cases, we deter-
mine whether the utterance specifies the slot-value
pair. Namely, we attend over the user utterance
Hutt, taking into account the slot-value pair be-
ing considered cval, and use the resulting attention
context qutt to score the slot-value pair.

autti =
(
Hutti

)⊺
cval ∈ R (15)

putt = softmax
(
autt

)
∈ Rm (16)

qutt =
∑
i

putti H
utt
i ∈ Rdrnn (17)

yutt = Wqutt + b ∈ R (18)

where m is the number of words in the user
utterance. The score yutt indicates the degree to
which the value was expressed by the user utter-
ance.

The second source of contribution is the pre-
vious system actions. This source is informative
when the user utterance does not present enough
information and instead refers to previous sys-
tem actions. An example of this is the user say-
ing “yes”, after the system asked “would you like
a restaurant in the centre of town?” To handle
these cases, we examine previous actions after
considering the user utterance. First, we attend
over the previous action representations Cact =
[Cact1 · · ·Cactl ], taking into account the current
user utterance cutt. Here, l is the number of pre-
vious system actions. Then, we use the similar-
ity between the attention context qact and the slot-
value pair cval to score the slot-value pair.

aactj =
(
Cactj

)⊺
cutt ∈ R (19)

pact = softmax
(
aact

)
∈ Rl+1 (20)

qact =
∑
j

pactj C
act
j ∈ Rdrnn (21)

yact =
(
qact

)⊺
cval ∈ R (22)

In addition to real previous system actions, we
introduce a sentinel action to each turn which al-
lows the attention mechanism to ignore previous
system actions. The score yact indicates the degree
to which the value was expressed by the previous
actions.



1462

The final score y is then a weighted sum be-
tween the two scores yutt and yact, normalized by
the sigmoid function σ.

y = σ
(
yutt + wyact

)
∈ R (23)

Here, the weight w is a learned parameter.

3 Experiments

3.1 Dataset
The Dialogue Systems Technology Challenges
(DSTC) provides a common framework for de-
veloping and evaluating dialogue systems and
dialogue state trackers (Williams et al., 2013;
Henderson et al., 2014a). Under this frame-
work, dialogue semantics such as states and
actions are based on a task ontology such as
restaurant reservation. During each turn, the
user may inform the system of particular goals
(e.g. inform(food=french)), or request
for more information from the system (e.g.
request(address)). For instance, food and
area are examples of slots in the DSTC2 task,
and french and chinese are example values
within the food slot. We train and evaluate our
model using DSTC2 as well as the Wizard of
Oz (WoZ) restaurant reservation task (Wen et al.,
2017), which also adheres to the DSTC framework
and has the same ontology as DSTC2.

For DSTC2, it is standard to evaluate using the
N-best list of the automatic speech recognition
system (ASR) that is included with the dataset.
Because of this, each turn in the DSTC2 dataset
contains several noisy ASR outputs instead of a
noise-free user utterance. The WoZ task does not
provide ASR outputs, and we instead train and
evaluate using the user utterance.

3.2 Metrics
We evaluate our model using turn-level request
tracking accuracy as well as joint goal tracking
accuracy. Our definition of GLAD in the previ-
ous sections describes how to obtain turn goals
and requests. To compute the joint goal, we sim-
ply accumulate turn goals. In the event that the
current turn goal specifies a slot that has been
specified before, the new specification takes prece-
dence. For example, suppose the user specifies
a food=french restaurant during the current
turn. If the joint goal has no existing food spec-
ifications, then we simply add food=french to

the joint goal. Alternatively, if food=thai had
been specified in a previous turn, we simply re-
place it with food=french.

3.3 Implementation Details

We use fixed, pretrained GloVe embeddings (Pen-
nington et al., 2014) as well as character n-gram
embeddings (Hashimoto et al., 2017). Each model
is trained using ADAM (Kingma and Ba, 2015).
For regularization, we apply dropout with 0.2 drop
rate (Srivastava et al., 2014) to the output of each
local module and each global module. We use the
development split for hyperparameter tuning and
apply early stopping using the joint goal accuracy.

For the DSTC2 task, we train using transcripts
of user utterances and evaluate using the noisy
ASR transcriptions. During evaluation, we take
the sum of the scores resulting from each ASR out-
put as the output score of a particular slot-value.
We then normalize this sum using a sigmoid func-
tion as shown in Equation (23). We also apply
word dropout, in which the embeddings of a word
is randomly set to zero with a probability of 0.3.
This accounts for the poor quality of ASR outputs
in DSTC2, which frequently miss several words in
the user utterance. We did not find word dropout to
be helpful for the WoZ task, which does not con-
tain noisy ASR outputs.

3.4 Comparison to Existing Methods

Table 1 shows the performance of GLAD com-
pared to previous state-of-the-art models. The
delexicalisation models, which replace slots and
values in the utterance with generic tags, are
from Henderson et al. (2014b) for DSTC2
and Wen et al. (2017) for WoZ. Semantic dic-
tionaries map slot-value pairs to hand-engineered
synonyms and phrases. The NBT (Mrkšić et al.,
2017) applies CNN over word embeddings learned
over a paraphrase database (Wieting et al., 2015)
instead of delexicalised n-gram features.

On the WoZ dataset, we find that GLAD sig-
nificantly improves upon previous state-of-the-
art performance by 3.7% on joint goal tracking ac-
curacy and 5.5% on turn-level request tracking ac-
curacy. On the DSTC dataset, which evaluates us-
ing noisy ASR outputs instead of user utterances,
GLAD improves upon previous state of the art per-
formance by 1.1% on joint goal tracking accuracy
and 1.0% on turn-level request tracking accuracy.



1463

Model
DSTC2 WoZ

Joint goal Turn request Joint goal Turn request

Delexicalisation-Based Model 69.1% 95.7% 70.8% 87.1%
Delex. Model + Semantic Dictionary 72.9% 95.7% 83.7% 87.6%
Neural Belief Tracker (NBT) - DNN 72.6% 96.4% 84.4% 91.2%
Neural Belief Tracker (NBT) - CNN 73.4% 96.5% 84.2% 91.6%
GLAD 74.5± 0.2% 97.5± 0.1% 88.1± 0.4% 97.1± 0.2%

Table 1: Test accuracies on the DSTC2 and WoZ restaurant reservation datasets. The other models
are: delexicalisation DSTC2 (Henderson et al., 2014b), delexicalisation WoZ (Wen et al., 2017), and
NBT (Mrkšić et al., 2017). We run 10 models using random seeds with early stopping on the development
set, and report the mean and standard deviation test accuracies for each dataset.

Model Tn goal Jnt goal Tn request

GLAD 93.7% 88.8% 97.3%
- global 88.8% 73.4% 97.3%
- local 93.1% 86.6% 95.1%
- self-attn 91.6% 84.4% 97.1%
- LSTM 88.7% 71.5% 93.2%

Table 2: Ablation study showing turn goal, joint
goal, and turn request accuracies on the dev. split
of the WoZ dataset. For “- self-attn”, we use mean-
pooling instead of self-attention. For “- LSTM”,
we compute self-attention over word embeddings.

3.5 Ablation study

We perform ablation experiments on the develop-
ment set to analyze the effectiveness of different
components of GLAD. The results of these exper-
iments are shown in Table 2. In addition to the
joint goal accuracy and the turn request accuracy,
we also show the turn goal accuracy for reference.

Temporal order is important for state track-
ing. We experiment with an embedding-matching
variant of GLAD with self-attention but without
LSTMs. The weaker performance by this model
suggests that representations that capture temporal
dependencies is helpful for understanding phrases
for state tracking.

Self-attention allows slot-specific, robust fea-
ture learning. We observe a consistent drop in
performance for models that use mean-pooling as
opposed to self-attention (Equations (4) to (6)).
This stems from the flexibility in the attention
context computation afforded by the self-attention
mechanism, which allows the model to focus on
select words relevant to the slot-value pair under
consideration. Figure 4 illustrates an example in
which local self-attention modules focus on rele-

vant parts of the utterance. We note that the model
attends to relevant phrases that n-gram and em-
bedding matching techniques do not capture (e.g.
“within 5 miles” for the “area” slot).

Global-local sharing improves goal tracking.
We study the two extremes of sharing between the
global module and the local module. The first uses
only the local module and results in degradation in
goal tracking but does not affect request tracking
(e.g. βs = 1). This is because the former is a joint
prediction over several slot-values with few train-
ing examples, whereas the latter predicts a single
slot that has the most training examples.

The second uses only the global module and
underperforms in both goal tracking and request
tracking (e.g. βs = 0). This model is less expres-
sive, as it lacks slot-specific specializations except
for the final scoring modules.

Figure 5 shows the performance of the original
model and the two sharing variants across differ-
ent numbers of occurrences in the training data.
GLAD consistently outperforms both variants for
rare slot-value pairs. For slot-value pairs with an
abundance of training data, there is no significant
performance difference between models as there is
sufficient data to generalize.

3.6 Qualitative analysis

Table 3 shows example predictions by GLAD. In
the first example, the user explicitly outlines re-
quests and goals in a single utterance. In the sec-
ond example, the model previously prompted the
user for confirmation of two requests (e.g. for the
restaurant’s address and phone number), and the
user simply answers in the affirmative. In this
case, the model still obtains the correct result by
leveraging the system actions in the previous turn.
The last example demonstrates an error made by



1464

wa
it

, yo
u

ne
ve

r
ga

ve
me the inf

orm
ati

on

. fin
d

me a chi
ne

se

res
tau

ran
t

wit
hin

5 mi
les

. <p
ad

>

area

food

master

price range

request

Figure 4: Global and local self-attention scores on user utterances. Each row corresponds to the self-
attention score for a particular slot. Slot-specific local self-attention modules emphasize relevant key
words and phrases to that slot, whereas the global module attends to all relevant words.

0.8

0.85

0.9

0.95

1

0-100 100-200 200-1000

A
ve

ra
ge

 F
1 

sc
or

e

# Training instances

GLAD - global - local

Figure 5: F1 performance for each slot-value pair
in the development split of the WoZ task, grouped
by the number of training instances.

the model. Here, the user does not answer the sys-
tem’s previous request for the choice of food and
instead asks for what food is available. The model
misinterprets the lack of response as the user not
caring about the choice of food.

4 Related Work

Dialogue State Tracking. Traditional dialogue
state trackers rely on a separate SLU component
that serves as the initial stage in the dialogue agent
pipeline. The downstream tracker then combines
the semantics extracted by the SLU with previous
dialogue context in order to estimate the current
dialogue state (Thomson and Young, 2010; Wang
and Lemon, 2013; Williams, 2014; Perez and Liu,
2017). Recent results in dialogue state tracking
show that it is beneficial to jointly learn speech
understanding and dialogue tracking (Henderson
et al., 2014b; Zilka and Jurcicek, 2015; Wen et al.,
2017). These approaches directly take as input
the N-best list produced by the ASR system. By

avoiding the accumulation of errors from the ini-
tial SLU component, these joint approaches typi-
cally achieved stronger performance on tasks such
as DSTC2. One drawback to these approaches is
that they rely on hand-crafted features and com-
plex domain-specific lexicon (in addition to the
ontology), and consequently are difficult to ex-
tend and scale to new domains. The recent Neu-
ral Belief Tracker (NBT) by Mrkšić et al. (2017)
avoids reliance on hand-crafted features and lex-
icon by using representation learning. The NBT
employs convolutional filters over word embed-
dings in lieu of previously-used hand-engineered
features. Moreover, to outperform previous meth-
ods, the NBT uses pretrained embeddings tailored
to retain semantic relationships by injecting se-
mantic similarity constraints from the Paraphrase
Database (Wieting et al., 2015; Ganitkevitch et al.,
2013). On the one hand, these specialized embed-
dings are more difficult to obtain than word em-
beddings from language modeling. On the other
hand, these embeddings are not specific to any di-
alogue domain and are directly usable for new do-
mains.

Neural attention models in NLP. Attention
mechanisms have led to improvements on a va-
riety of natural language processing tasks. Bah-
danau et al. (2015) propose attentional sequence
to sequence models for neural machine translation.
Luong et al. (2015) analyze various attention tech-
niques and highlight the effectiveness of the sim-
ple, parameterless dot product attention. Similar
models have also proven successful in tasks such
as summarization (See et al., 2017; Paulus et al.,
2018). Self-attention, or intra-attention, has led
improvements in language modeling, sentiment



1465

System actions in previous turn User utterance Predicted turn belief state

N/A I would like Polynesian
food in the South part of
town. Please send me phone
number and address.

request(phone)
request(address)
inform(food=polynesian)
inform(area=south)

request(address)
request(phone)

There is a moderately priced italian place
called Pizza hut at cherry hilton. would
you like the address and phone number?

Yes please. request(phone)
request(address)

request(food)
request(price range)

ok I can help you with that. Are you look-
ing for a particular type of food, or within
a specific price range?

I just want to eat at a cheap
restaurant in the south part
of town. What food types
are available, can you also
provide some phone num-
bers?

request(phone)
inform(price range=cheap)
inform(area=south)
-inform(food=dontcare)
+request(food)

Table 3: Example predictions by Global-Locally Self-Attentive Dialogue State Tracker on the develop-
ment split of the WoZ restaurant reservation dataset. Model predicted slot-value pairs that are not in the
ground truth (e.g. false positives) are prefaced with a “+” symbol. Ground truth slot-value pairs that are
not predicted by the model (e.g. false negatives) are prefaced with a “-” symbol.

analysis, natural language inference (Cheng et al.,
2016), semantic role labeling (He et al., 2017), and
coreference resolution (Lee et al., 2017). Deep
self-attention has also achieved state-of-the-art re-
sults in machine translation (Vaswani et al., 2017).
Coattention, or bidirectional attention that code-
pendently encode two sequences, have led to sig-
nificant gains in question answering (Xiong et al.,
2017; Seo et al., 2017) as well as visual question
answering (Lu et al., 2016).

Parameter sharing between related tasks.
Sharing parameters between related tasks to im-
prove joint performance is prominent in multi-
task learning (Caruana, 1998; Thrun, 1996). Early
works in multi-tasking use Gaussian processes
whose covariance matrix is induced from shared
kernels (Lawrence and Platt, 2004; Yu et al.,
2005; Seeger et al., 2005; Bonilla et al., 2008).
Hashimoto et al. (2017) propose a progressively
trained joint model for NLP tasks. When a new
task is introduced, a new section is added to
the network whose inputs are intermediate rep-
resentations from sections for previous tasks. In
this sense, tasks share parameters in a hierar-
chical manner. Johnson et al. (2016) propose a
single model that jointly learns to translate be-
tween multiple language pairs, including one-to-

many, many-to-one, and many-to-many transla-
tion. Kaiser et al. (2017) propose a model that
jointly learns multiple tasks across modalities.
Each modality has a corresponding modality net,
which extracts a representation that is fed into a
shared encoder.

5 Conclusion

We introduced the Global-Locally Self-Attentive
Dialogue State Tracker (GLAD), a new state-of-
the-art model for dialogue state tracking. At the
core of GLAD is the global-locally self-attention
encoder, whose global modules allow parame-
ter sharing between slots and local modules al-
low slot-specific feature learning. This allows
GLAD to generalize on rare slot-value pairs with
few training data. GLAD achieves state-of-the-
art results of 88.1% goal accuracy and 97.1% re-
quest accuracy on the WoZ dialogue state tracking
task, as well as 74.5% goal accuracy and 97.5%
request accuracy on DSTC2.

Acknowledgement

We thank Nikola Mrkšić for providing us with a
preprocessed version of the DSTC2 dataset.



1466

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2015. Neural machine translation by jointly
learning to align and translate. In ICLR.

Edwin V Bonilla, Kian M Chai, and Christopher
Williams. 2008. Multi-task gaussian process predic-
tion. In NIPS.

Rich Caruana. 1998. Multitask learning. In Learning
to learn, pages 95–133.

Jianpeng Cheng, Li Dong, and Mirella Lapata. 2016.
Long short-term memory-networks for machine
reading. In ACL.

Juri Ganitkevitch, Benjamin Van Durme, and Chris
Callison-Burch. 2013. Ppdb: The paraphrase
database. In HLT-NAACL.

Kazuma Hashimoto, Caiming Xiong, Yoshimasa Tsu-
ruoka, and Richard Socher. 2017. A joint many-task
model: Growing a neural network for multiple NLP
tasks. In ACL.

Luheng He, Kenton Lee, Mike Lewis, and Luke Zettle-
moyer. 2017. Deep semantic role labeling: What
works and whats next. In ACL.

Matthew Henderson, Milica Gašić, Blaise Thomson,
Pirros Tsiakoulis, Kai Yu, and Steve Young. 2012.
Discriminative spoken language understanding us-
ing word confusion networks. In Spoken Language
Technology Workshop (SLT).

Matthew Henderson, Blaise Thomson, and Jason D
Williams. 2014a. The second dialog state tracking
challenge. In SIGDIAL.

Matthew Henderson, Blaise Thomson, and Steve
Young. 2014b. Word-based dialog state tracking
with recurrent neural networks. In SIGDIAL.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long
short-term memory. Neural Compututation 9(8).

Melvin Johnson, Mike Schuster, Quoc V Le, Maxim
Krikun, Yonghui Wu, Zhifeng Chen, Nikhil Tho-
rat, Fernanda Vigas, Martin Wattenberg, Greg Cor-
rado, Macduff Hughes, and Jeffrey Dean. 2016.
Google’s multilingual neural machine translation
system: Enabling zero-shot translation. Technical
report, Google.

Lukasz Kaiser, Aidan N Gomez, Noam Shazeer,
Ashish Vaswani, Niki Parmar, Llion Jones, and
Jakob Uszkoreit. 2017. One model to learn them
all. arXiv preprint arXiv:1706.05137 .

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In ICLR.

Neil D Lawrence and John C Platt. 2004. Learning to
learn with the informative vector machine. In ICML.

Kenton Lee, Luheng He, Mike Lewis, and Luke S.
Zettlemoyer. 2017. End-to-end neural coreference
resolution. In EMNLP.

Jiasen Lu, Jianwei Yang, Dhruv Batra, and Devi
Parikh. 2016. Hierarchical question-image co-
attention for visual question answering. In NIPS.

Minh-Thang Luong, Hieu Pham, and Christopher D
Manning. 2015. Effective approaches to attention-
based neural machine translation. In ACL.

Nikola Mrkšić, Diarmuid O Séaghdha, Blaise Thom-
son, Milica Gašić, Pei-Hao Su, David Vandyke,
Tsung-Hsien Wen, and Steve Young. 2015. Multi-
domain dialog state tracking using recurrent neural
networks. In ACL.

Nikola Mrkšić, Diarmuid O Séaghdha, Tsung-Hsien
Wen, Blaise Thomson, and Steve Young. 2017.
Neural belief tracker: Data-driven dialogue state
tracking. In ACL.

Romain Paulus, Caiming Xiong, and Richard Socher.
2018. A deep reinforced model for abstractive sum-
marization. In ICLR.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In EMNLP.

Julien Perez and Fei Liu. 2017. Dialog state tracking,
a machine reading approach using memory network.
In EACL.

Abigail See, Peter Liu, and Christopher Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In ACL.

Matthias Seeger, Yee-Whye Teh, and Michael Jordan.
2005. Semiparametric latent factor models. In AIS-
TATS.

Min Joon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2017. Bidirectional attention
flow for machine comprehension. In ICLR.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. Journal of machine learning re-
search 15(1).

Blaise Thomson and Steve Young. 2010. Bayesian
update of dialogue state: A pomdp framework for
spoken dialogue systems. Computer Speech & Lan-
guage 24(4).

Sebastian Thrun. 1996. Is learning the n-th thing any
easier than learning the first? In NIPS.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In NIPS.



1467

Zhuoran Wang and Oliver Lemon. 2013. A simple
and generic belief tracking mechanism for the dia-
log state tracking challenge: On the believability of
observed information. In SIGDIAL.

Tsung-Hsien Wen, David Vandyke, Nikola Mrkšić,
Milica Gašić, Lina M. Rojas Barahona, Pei-Hao Su,
Stefan Ultes, and Steve Young. 2017. A network-
based end-to-end trainable task-oriented dialogue
system. In EACL.

John Wieting, Mohit Bansal, Kevin Gimpel, Karen
Livescu, and Dan Roth. 2015. From paraphrase
database to compositional paraphrase model and
back. In ACL.

Jason D Williams. 2014. Web-style ranking and slu
combination for dialog state tracking. In SIGDIAL.

Jason D Williams, Antoine Raux, Deepak Ramachan-
dran, and Alan Black. 2013. The dialog state track-
ing challenge. In SIGDIAL.

Jason D Williams and Steve Young. 2007. Partially ob-
servable markov decision processes for spoken dia-
log systems. Computer Speech and Language 21.

Caiming Xiong, Victor Zhong, and Richard Socher.
2017. Dynamic coattention networks for question
answering. In ICLR.

Kai Yu, Volker Tresp, and Anton Schwaighofer. 2005.
Learning gaussian processes from multiple tasks. In
ICML.

Lukas Zilka and Filip Jurcicek. 2015. Incremental
lstm-based dialog state tracker. In Automatic Speech
Recognition and Understanding Workshop (ASRU).


