



















































Conversion from Paninian Karakas to Universal Dependencies for Hindi Dependency Treebank


Proceedings of LAW X – The 10th Linguistic Annotation Workshop, pages 141–150,
Berlin, Germany, August 11, 2016. c©2016 Association for Computational Linguistics

Conversion from Pānịnian Kārakas to Universal Dependencies for Hindi
Dependency Treebank

Juhi Tandon, Himani Chaudhary, Riyaz Ahmad Bhat and Dipti Misra Sharma
Kohli Center on Intelligent Systems (KCIS),

International Institute of Information Technology,Hyderabad (IIIT-H)
Gachibowli,Hyderabad 500 032, India

{juhi.tandon,himani,riyaz.bhat}@research.iiit.ac.in , dipti@iiit.ac.in

Abstract

Universal Dependencies (UD) are gaining
much attention of late for systematic evalu-
ation of cross-lingual techniques for cross-
lingual dependency parsing. In this pa-
per we present our work in line with UD.
Our contribution to this is manifold. We
extend UD to Indian languages through
conversion of Pānịnian Dependencies to
UD for the Hindi Dependency Treebank
(HDTB). We discuss the differences in an-
notation in both the schemes, present pars-
ing experiments for both the formalisms
and empirically evaluate their weaknesses
and strengths for Hindi. We produce an
automatically converted Hindi Treebank
conforming to the international standard
UD scheme, making it useful as a resource
for multilingual language technology.

1 Introduction

Universal Dependencies is a project undertaken to
develop an inventory of languages that have tree-
banks annotated in a consistent scheme (McDon-
ald et al., 2013). The UD annotation has evolved
by reconstruction of the Standford Dependencies
(De Marneffe and Manning, 2008) and it uses a
slightly extended version of Google universal tag
set for part of speech (POS) (Petrov et al., 2011).
This is done with the motivation to facilitate the
efforts in building of cross-linguistic tools such as
parsers, translation systems, search engines, etc.
The efforts in building similarly structured or

annotated treebanks have invoked a lot intreset
from researchers around the world. The first
release of UD treebanks included six languages
where English and Swedish were created by au-
tomatic conversion. Thereafter several other tree-
banks have been developed automatically such as

Italian (Bosco et al., 2013), Russian (Lipenkova
and Soucek, 2014), and Finnish (Pyysalo et al.,
2015). Several treebanks have also been created
using manual annotation procedures. For lan-
guages where a treebank is already available, au-
tomatic conversion process is more suitable than
manual annotation which is expensive and time
consuming. It should be noted here that while for
some languages conversion between the original
and the UD representations can be accurate, for
others it may introduce too much noise.
There have been few attempts that have tried

to convert the annotation scheme used for Indian
languages to other schemes such as the annota-
tion style of Prague Dependency Treebank (Zeman
et al., 2012). Our work, instead, aims to convert
HDTB annotation scheme to UD.
Keeping in line with the ongoing efforts in this

direction, our work is a volunteer effort to har-
monize the Hindi Dependency Treebank accord-
ing to the UD formalism, making it a more avail-
able resource for multilingual parsing. In doing
so, we have converted the dependency relations in
Pānịnian framework and the POS tag set followed
by Hindi to the Universal Dependency scheme.
This conversion had its challenges, as many lan-
guage specific phenomena had to be addressed in
the process. However, there was no requirement
to develop a new, language specific UD-scheme,
unlike some other treebanks, for instance Russian
(Lipenkova and Soucek, 2014).
The rest of the paper is organized as follows:

In Section 2, we describe the annotation scheme
used for the Indian language treebanking and Uni-
versal Dependency treebanking. Section 3 talks
about the granularity of the Pānịnian scheme. In
Section 4, we elaborate upon the differences in de-
sign between the two schemes, how existing de-
pendency scheme and POS tags for Hindimap onto
the universal taxonomy, the issues that were faced

141



Count of HDTB

Types 22,171
Tokens 434,856
Chunks 233,864
Sentences 20,783
Avg. Tokens/Sentence 20.92
Avg. Chunks/Sentence 11.25

Count of Training Testing

Tokens 3,47,744 87,112
Chunks 1,87,029 46,835
Sentences 16,629 4,154

Table 1: General Treebank Statistics and training-
testing split for all the experiments reported in this
work.

and how they have been resolved. The conver-
sion process and program is discussed in Section
5. Section 6 discusses the parsing performance of
the two schemes, assesses the learnability of the
automatic parser for the UD scheme and its suit-
ability for Hindi. Lastly, we conclude and discuss
future work in Section 7.

2 The Two Schemes

2.1 Hindi Dependency Treebank and
Computational Paninian Grammar

The Hindi Treebank contains text from news arti-
cles and heritage domain. It consists of 434,856 to-
kens in 20,783 sentences with an average of 20.92
words per sentence as can be seen in Table 2. It is
multi-layered and multi-representational (Bhatt et
al., 2009; Xia et al., 2009; Palmer et al., 2009; Bhat
et al., 2014). It contains three layers of annota-
tion namely dependency structure (DS) for anno-
tation of modified-modifier relations, PropBank-
style annotation for predicate-argument structure,
and an independently motivated phrase-structure
annotation. Each layer has its own framework,
annotation scheme, and detailed annotation guide-
lines.
Dependency Structure−the first layer in these

treebanks−involves dependency analysis based on
the Pānịnian Grammatical framework (Bharati et
al., 1995; Begum et al., 2008). Pānịni was an
Indian grammarian who is credited with writing

a comprehensive grammar of Sanskrit. The un-
derlying theory of his grammar provides a frame-
work for the syntactico-semantic analysis of a sen-
tence. The grammar treats a sentence as a series of
modified-modifier relations where one of the el-
ements (usually a verb) is the primary modified.
This brings it close to a dependency analysis model
as propounded in Tesnière’s Dependency Gram-
mar (Tesnière, 1959).
The syntactico-semantic relations between lex-

ical items provided by the Pānịnian grammatical
model can be split into two types1:

1. Kāraka: These are semantically related to
a verb as the direct participants in the ac-
tion denoted by a verb root. The grammati-
cal model has six ‘kārakas’, namely ‘kartā’
(the doer), ‘karma’ (the locus of action’s re-
sult), ‘karanạ’ (instrument), ‘sampradāna’
(recipient), ‘apādāna’ (source), and ‘ad-
hikaranạ’ (location). These relations pro-
vide crucial information about the main ac-
tion stated in a sentence.

2. Non-kāraka: These relations include reason,
purpose, possession, adjectival or adverbial
modifications etc.

Both the Kāraka and Non-kāraka relations in
the scheme are represented in Figure 1; glosses of
these relations are given in Table 2 . The purpose
of choosing a hierarchical model for relation types
is to have the possibility of underspecifying certain
relations.

2.2 Universal Dependencies
As mentioned by (Nivre et al., 2016) and also dis-
cussed by (Johannsen et al., 2015), the driving
principles of UD formalism are:

1. Content over function: Content words form
the backbone of the syntactic representation.
Giving priority to dependency relations be-
tween content words increases the probabil-
ity of finding parallel structures across lan-
guages, since function words in one language
often correspond to morphological inflection
(or nothing at all) in other languages. Func-
tional heads are instead represented as spec-
ifying features of content words, using dedi-
cated relation labels.

1The complete set of dependency relation types can be
found in (Bharati et al., 2009)

142



mod

vmod

varg

k1 k2*

k2 k2p k2g

k3 k4*

k4 k4a

k5 k7*

k7 k7p k7t

vad

rt rh ras

ras-k1 ras-k2 etc

adv k*u

k1u k2u etc

k*s

k1s k2s

etc

nmod

adj r6 relc rs etc

jjmod rbmod

Figure 1: Inter-chunk dependency labels

Relation Meaning

k1 Agent / Subject / Doer
k2* Theme / Patient / Goal
k3 Instrument
k4* Recipient / Experiencer
k5 Source
k7* Spatio-temporal
rt Purpose
rh Cause
ras Associative
k*u Comparative
k*s (Predicative) Noun /

Adjective Complements
r6 Genitives
relc Modification by Relative Clause
rs Noun Complements (Appositive)
adv Verb modifier
adj Noun modifier

Table 2: Some major dependency relations de-
picted in Figure 1.

2. Head-first: In spans where it is not im-
mediately clear which element is the head
(the content-over-function rule does not apply
straightforwardly), UD takes a head-first ap-
proach: the first element in the span becomes
the head, and the rest of the span elements
attach to it. This applies mostly to coordi-
nations, multiword expressions, and proper
names.

3. Single root attachment: There should be

just one node with the root dependency re-
lation in every tree, attached to the artificial
root governor.

3 Granularity

Hindi is a morphologically rich, free word-order
language. For such languages syntactic subject-
object positions are not always able to elegantly
explain the varied linguistic phenomena. As men-
tioned in the previous section, syntactico-semantic
dependency relations and their labels defined in the
CPG formalism are very fine grained to account
for the rich grammatical functions. The number of
distinct dependency labels are 82 as per the scheme
(both interchunk and intrachunk). It has been ob-
served that the more semantically oriented annota-
tion schemes make labeled parsing more difficult
than the schemes based on more surface-oriented
grammatical functions. Further many applications
do not require finer dependency labels and running
a full parser with such a large set of labels can be
too expensive. This further motivated us to con-
vert the Hindi treebank to the UD scheme, with a
relatively sparse taxonomy and observe the effects.

4 Differences in Design

While mapping the two annotation schemes we
found that most of the tags entailed multiple cor-
respondences, either one-to-many or many-to-one
mappings between their tags. Below, some of the
differences are discussed in detail.

4.1 Part of Speech Tags
The UD POS tag-set comprises 17 different tags
only, whereas the POS tag set developed for Indian
Languages (Bharati et al., 2006), has 32 tags.

143



One to many (HDTB to UD) The POS tag WQ
used in theHindi treebank for questionwordsmaps
to DET, PRON and ADV in the UD.

Many to one (HDTB to UD) Similarly several
tags on the Hindi treebank side RB, WQ etc. map
with the UD POS tag ADV. Though we have a POS
tag RB which directly maps with the grammatical
category Adverb, our POS tagging scheme being
more granular, we have various tags to annotate
different kinds of adverbs. Tags such as WQ for
question words (‘kaha.N’ कहाँ (where), ‘kab’ कब
(when), ‘kaise’ कैसे (how)), NN (for words such
as ‘kal’ कल (yesterday/tomorrow), ‘Aj’ आज (to-
day)), NST, INTF, etc. are covered by UD under
the umbrella tag ADV.
Hindi has compound conjunctions like ‘aur to

aur’औरतोऔर (all the more) and ‘jaisA ki’जैसा क
(like/as) etc. In HDTB these are tagged as follows:
और_CCC
तो_CCC
और_CC.
Multiword names are marked by POS tags NNPC
and NNP. However in UD compounding is marked
at the level of dependency relations by three tags:
compound, mwe and name.
The Hindi tag set does not tag subordinate and

coordinate conjunct differently. Our tags CC and
CCC map with both, CONJ and SCONJ of UD for all
simple and compound conjunctions.
There is not always a straight forward equiva-

lence class mapping from HDTB to UD. The cor-
rect mapping of some tags requires the knowledge
of lemma or the syntactic context. For example,
the ambiguity in WQ and CC is resolved by using
a word list corresponding to each Universal POS
mapping and a few heuristics derived from the de-
pendency tree structure.
In Indian Languages, there is a phenomenon

called reduplication that involves the doubling of
a lexical item to convey a grammatical function,
such as plurality or intensification. The first word
in such reduplicative construction is tagged by its
respective lexical category and the second word is
tagged as RDP to indicate that it is a case of redu-
plication, thus distinguishing it from a normal se-
quence (Bharati et al., 2006). UD does not have a
corresponding tag for RDP which marks reduplica-
tion.
A mapping of all the 17 UD POS Tags to HDTB

POS Tag set can be seen in the Table 3.

UD HDTB

ADJ JJ, JJC, QO
ADP PSP, PSPC
ADV RB, RBC, INTF, INTFC,

NST, WQ, PRP, NN
AUX VAUX, VAUXC
AUX VAUXC
CONJ CC, CCC
DET DEM, QF, QFC, WQ
INTJ INJ
NOUN NN, NNC
NUM QC, QCC
PART RP, RPC, NEG
PART NEG
PRON PRP, PRPC, WQ
PROPN NNP, NNPC
PUNCT SYM
SCONJ CC, CCC
VERB VM, VMC
X UNK

Table 3: Mappings of HDTB and Universal De-
pendencies POS tags.

4.2 Dependency Relations
In the above section, we found profound ambiguity
inmapping the Hindi POS tags to their correspond-
ing UD tags. In case of dependency relations,
we also witnesses many cases of many-to-one
and one-to-many mappings. For example depen-
dency relations such as k3 (instrument of an ac-
tion), k7t, k7p (location in time and space re-
spectively), r6 (possession relation between two
nouns), are all mapped to the label nmod (denoting
nominal modifiers) in the UD scheme. Likewise,
the Pānịnian relation label k2 maps to xcomp,
ccomp and dobj, based on ‘Chunk2 condition’ de-
scribed in section 5. The relation labels k1, k4a,
pk1 (loosely corresponding to agent, experiencer,
causer respectively) all map to the label nsubj of
the UD scheme.

2A chunk (with boundaries marked), in HDTB, by defini-
tion, represents a group of adjacent words in a sentence, that
are in dependency relation with each other, and where one of
these words is their head (Chaudhry and Sharma, 2011)

144



sitA sundar hai

k1

k1s

root

(a)

sitA sundar hai

nsubj

root

cop

(b)

Figure 2: Dependency tree for a) HDTB and
b) UD copula constructions.

4.3 Dependency Structure
In the Pānịnian scheme there are about 82 kāraka
and non kāraka relations. However, in UD there
are only 40 dependency relations now, as opposed
to 42 which were mentioned in (DeMarneffe et al.,
2014). The mapping between the two scheme can
be seen in Table 4. One of the major challenges
we came across during the conversion process was
the conversion of elliptical constructions.

4.3.1 Copula
Currently in our scheme, a copular verb is consid-
ered as the head of a copula construction. During
the conversion to UD, predicative nominal in the
copula construction is marked as the head instead,
while the ‘be’ verb becomes a cop dependent. For
example in sentence (1) Sita is beautiful, ‘sundar’
सुंदर (beautiful) is treated as the head, while ‘sItA’
सीता (Sita) and the be verb ‘hai’ है (is) are its depen-
dents of the type nsubject and cop, respectively.

(1) `सीता सुंदर है.'
‘sItA sundar hai.’

sItA
sita

sundar
beautiful

hai
is

‘Sita is beautiful.’

For conversion to UD, these relations must be re-
versed, not just relabeled, which in turn may cause
structural changes of other kinds. For example, a
reanalysis must be done for dependents of the pre-
vious governor and decision be made whether they
should attach to the new governor or remain as they
were. Thus, for conversion to UD these relations
are reversed though it leads to structural changes
as can be seen in Figure 2.

4.3.2 Conjunctions
Another type of constructions we handle are those
with conjunctions. In HDTB annotation scheme a
conjunction, either coordinating or subordinating
is the head of the clause and the other elements
of the clause are its dependents. In the sentence
such as in Example (2), ‘aur’ (and) is annotated the
head with ‘rAm’ (Ram), ‘mohan’ (Mohan), ‘sItA’
(Sita), and ‘mIrA’ (Meera) as its dependents.

(2) `राम, मोहन, सीता और मीरा आजआए थे.'
‘rAm, mohan, sItA aur mIrA Aj Aye the.’

rAm,
rAm

mohAn,
mohAn

sItA
sItA

aur
and

mIrA
mIrA

Aj
today

Aye-the
came-PAST
‘Ram, Mohan, Sita and Meera came today.’

Whereas in UD the first element of the coordinated
construction is taken as the head. The conjunct
and the other coordinated elements are annotated
as its dependents. Given this sentence, in UD,
‘rAm’ is the head of the construction while ‘mo-
han’, ‘sItA’, ‘mIrA’ and ‘aur’ depend on it. Fur-
ther, while ‘mohan’, ‘sItA’, ‘mIrA’ are annotated
with the label conj, ‘aur’ is annotated with the la-
bel CC, since it is a coordinating conjunction, as can
be seen in Figure 3. Also, UD annotates subordi-
nating conjunction as mark, which is a dependent
of the head of the subordinate clause. For the sake
of conversion from HDTB to UD we distinguish
between coordinating and subordinating conjunc-
tions annotating them as conj and mark. For this
we have enlisted them as two separate classes.

rAm mohan sItA aur mIrA Aj Aye the

ccof

ccof

ccof

k1

ccof

lwg__vaux

k7t

root

rAm mohan sItA aur mIrA Aj Aye the

conj
conj

cc
conj

nsubj

auxpaass

advmod

root

Figure 3: Dependency tree for a) HDTB and
b) UD conjunctions constructions

145



4.3.3 Multiword names
As has been observed by (Johannsen et al., 2015),
“In spans where it is not immediately clear which
element is the head, UD takes a head-first ap-
proach: the first element in the span becomes the
head, and the rest of the span elements attach to
it. This applies mostly to coordinations, multiword
expressions, and proper names.” For example, in
a name such as ‘Atal Bihari Vajpayee’, in UD, the
first word in a compound name ‘Atal’, becomes
the head and the rest its dependents. Whereas
in HDTB, ‘Vajpayee’ is annotated the head and
‘Atal’ and ‘Bihari’ its dependents.

4.3.4 Ellipsis
Instances of ellipsis are abundant in the Hindi
Treebank. While we are able to handle some in
our current conversion, there are others we still
need to work on. One such type which we have
addressed is the ‘yah-ki’ यह- क (this-that) comple-
ment constructions which follow the pattern: yah
(‘यह)-its property-VP-ki क clause’ (Mannem et
al., 2009). In cases of ellipsis, a NULL node is in-
troduced to facilitate annotation, since the entire
‘ki’ (that) clause is annotated as the child of ‘yaha’
(this) /`NULL' node here.
In Hindi, sentences such as in Example (3):

(3) `गौरतलब है क गोपाल को नासा आमं त कया
गया था.'
‘gaurtalab hai ki gopAl ko nAsA Amantrit
kiyA gayA thA.’

gaurtalab
to-be-noted

hai
is

ki
that

gopAl-ko
Gopal

nAsA
to-NASA

Amantrit-kiyA-gayA-thA.
invited-was
‘Is to be noted that Gopal was invited to NASA.

‘gaurtalab hai ki gopAl ko nAsA Amantrit kiyA
gayA thA’ (Is to be noted that Gopal was invited to
NASA.) can come with the referent ‘yah’ यह (this)
elided (a case of Pronoun drop) or explicitly mani-
fested in the sentence. The ‘ki’ क (that) clause and
its referent are both modifiers (child) of the verb.
However, in HDTB annotation the ‘ki’ clause is
annotated a modifier of its referent which in turn
is marked as the child of the verb. For the sake
of consistency in cases where ‘yah’, the referent,
does not manifest explicitly, a ‘NULL’ node is in-
troduced in its stead. However, the UD scheme
does not introduce NULL tokens to represent elided
elements. Therefore to map all ‘ki’ complement

constructions, with the UD scheme, we drop the
‘NULL’ node, and the ‘ki’ complement clause is
annotated a dependent of the head of the removed
`NULL' node (usually the verb) as illustrated in
Figure 4.

Universal Pānịnian

acl nmod__k1inv, nmod__k2inv,
nmod__relc, rs, k2g, k2s,
rbmod__relc

neg nmod__neg
dislocated fragof

iobj k4
nmod k2u, jk1, k1u, k3,

k3u, k2p, k4u, k5,
k7, k7a, k7p, k7pu,
k7t, k7tu, k7u, r6,
r6-k1, r6-k2, r6v, ras-k1,
ras-k1u, ras-k2, ras-k4,
ras-k4a, ras-k7, ras-k7p,
ras-neg, ras-pof, ras-r6,
ras-r6-k2, ras-rt, nmod__emph

punct rsym
vocative rad
advmod rd, rsp, lwg__intf,

vmod__adv, jjmod__intf,
jjmod, adv, rbmod

dep lwg__rp, lwg__unk, undef, enm
compound pof__cn, pof__redup, lwg__rdp,

lwg__vm, nmod__pofinv,
pof, pof__inv

case lwg__psp, lwg__nst, psp__cl
neg lwg__neg
det mod__wq
dobj k2, k1s, mk1
amod nmod__adj, nmod

parataxis vmod
ccomp k2
xcomp k2
aux lwg__vaux

auxpass lwg__vaux
nsubj k1, k4a, pk1

nsubjpass k1
advcl rh, rt, rtu, sent-adv, vmod

Table 4: Universal mapping of Pānịnian Depen-
dencies used in HDTB.

146



NULL gaurtalab hai ki gopal ko nAsA Amantrit kiyA gayA thA

root

k1

rs

k1s

ccof

lwg__psp

k2

pof

k7p

lwg__aux

lwg__aux

(a)

gaurtalab hai ki gopal ko nAsA Amantrit kiyA gayA thA

nsubj
root

cop

dobj

case compound

mark

advmod

auxpass

auxpass

(b)

Figure 4: Dependency tree for a) HDTB and
b) UD ellipsis constructions.

5 Conversion Process

During conversion it must be noted that we are
moving from a very detailed and granular format to
a format which is under-specified. The implemen-
tation of the conversion was based on the mapping
between schemes described above. The conver-
sion script executes as a pipeline of three compo-
nents, each of which takes as input data in CONLL
format and outputs data in the same format. Dur-
ing conversion, structure is handled before labels.
The first module harmonizes the structural differ-
ences from HDTB to UD by handling ellipsis (and
thereafter aligning nodes in the tree after NULL
removal), copula constructions, mutliword names
and conjunctions. It updates the nodes asmodifier-
modified relations have been changed. The second
and third module converts POS and Dependency
relations from HDTB to UD, respectively. The
conversion is based on certain heuristics which
involve conditions specified in terms of lexical,
structural, morphological information and Part of
Speech tags. Examples for the different types of
conversion conditions are as follows:

• Lexical condition: The POS tag WQ of HDTB
is converted to ADV of UD when expressed by
word form or lemma ‘kab’ (कब), ‘kahA.N’
(कहाँ), ‘kaisA’ (कैसा), ‘kyun’ ( य ). Else if
the node has chunk type as child in its fea-
tures, it is converted to DET of UD; otherwise
to PRON of UD.

• Morphological condition: If the dependency
relation is any of k1, pk1, k4a and the cur-
rent node’s parent has TAM (Tense, Aspect,
Modality) feature as ‘yA_jA’ (या_जा), the re-
lation is converted to nsubjpass; if depen-
dency relation is lwg__vaux and there is a
presence of the TAM feature, it is converted
to auxpass. In the absence of this morph fea-
ture lwg__vaux is converted to aux, while
k1, pk1, k4a are converted to nsubj.

• Chunk condition: If the dependency relation
is k2 and the current node’s chunk id is VGF
(Finite Verb Chunk), the relation is converted
to ccomp; else if chunk id is VGNN (Verb
Chunk - Gerund) it is converted to xcomp;
otherwise to dobj.

• POS condition: If the dependency relation is
any of nmod__adj or nmod and the node’s
POS Tag is DET or DEM the relation is con-
verted to det; if POS is NUM it is converted to
nummod; else if POS is any of NNP, NNPC,
PRP, NN or NNC, it is converted to nmod.

During conversion from HDTB to UD we lose
3852 sentences that cannot be restructured accord-
ing to our current scheme, they are mostly cases of
ellipsis (gapping).

6 Parsing Experiment

Our motive of conversion from HDTB to UD was
not keeping the increase/decrease of parsing accu-

147



agar RAj kuch chAhte hai to us par vichAr kiyA jAnA chAhiye

mark

nsubj

dobj

advcl

aux

mark
advmod

case compound

root

auxpass

auxpass

(a)

agar rAj kuch chAhte hai to us par vichAr kiyA jAnA chAhiye

vmod

k1

k2

ccof

lwg__vaux

root

k7

lwg__psp pof

ccof

lwg__vaux

lwg__vaux

(b)

Figure 5: Dependency tree for paired connective ‘agar-to’ for a) UD and b) HDTB.

racy in consideration. The design choices taken,
such as the head-first approach, as described in
Section 2.2, led to changes in a lot of attachments
like that of Copula and decreased the learnability
of the parser for the syntactic structure of Hindi.
We conduct parsing experiments to quantify these
effects and also do a manual error analysis to point
out the constructions which are not learnt effi-
ciently by the parser.
For experiment purposes, we are using MALT 3
with parser settings from (Ambati et al., 2010).
The metrics used for evaluation are Labeled and
Unlabeled attachment score (LAS, UAS) and La-
bel accuracy score (LS). The average accuracy of
10 fold cross validation is reported in Table 5.
We experience an accuracy drop of ∼2% in UAS
in conversion from HDTB to UD. This is not sur-
prising as the two are now quite different tree-
banks. The drop in accuracy can be attributed
to the numerous changes in attachment of edges
while conversion. However the increase in accu-
racy of LS is intuitive because of the reduced num-
ber of classes of classification for dependency re-
lations.
On doing a manual error analysis we observe the
following patterns:

• The parser is not able to learn copula con-
structions properly, the ‘be’ verb is not recog-
nised as ‘cop’ in most cases, it is made the
root of the sentence or head of the phrase, in-

3MALT version 1.8.1 , http://www.maltparser.org/

stead. This is at odds with the general struc-
ture where verb is a root of a dependency tree
as it is the primary modified. These structures
also cannot be learnt efficiently based on lex-
icalism as the ‘be’ verb is also used as an aux-
illary in most cases.

• For control constructions which have more
than one verb, the first non-finite verb is
marked as the head instead of the finite verb.

• Sentences having paired connectives like
‘agar-to’ (अगर-तो), ‘yadi-to’ (य द-तो) corre-
sponding to ‘if-then’, do not have their gov-
ernors and dependents correctlymarked. This
is because they are handled differently in both
the schemes. In HDTB ‘agar’and ‘to’ are
clausal heads. The ‘to’-clause is modified by
the ‘agar’-clause. Whereas in UD ‘agar’and
‘to’ must be dependents of the main verb of
their respective clauses as can be seen in Fig-
ure 5.

7 Conclusion and Future Work

In this paper we briefly described the process of
conversion of Hindi Treebank to UD annotation
scheme. It was an attempt to release the resource
in a widely accepted international format so that it
becomes more usable for a variety of multilingual
NLP tasks. The conversion was a challenging task
and there are constructions which are yet to be ad-
dressed to be fully compliant with the UD scheme

148



LAS UAS LS

Pānịnian 90.97 95.206 92.908
UD 90.237 93.193 94.053

Table 5: Average accuracy of 10-fold cross vali-
dation using Pānịnian and UD framework.

like that of ellipsis etc. As a part of future work,
we propose to come upwith better techniques to re-
solve empty nodes in the absence of predicational
or verbal heads. Also a few attachment schemes
must be reanalyzed and revised to handle long dis-
tance dependencies efficiently. We performed ex-
periments using MALT parser on both the source
treebank HDTB and the converted UDHindi Tree-
bank, to find that the performance is slightly dete-
riorated after conversion.

Acknowledgments

We would like to thank anonymous reviewers for
their valuable comments that helped to improve the
quality of this paper.
The work reported in this paper is supported by
the NSF grant (Award Number: CNS 0751202;
CFDA Number: 47.070)4

References
Bharat Ram Ambati, Samar Husain, Joakim Nivre, and
Rajeev Sangal. 2010. On the role of morphosyntactic
features in hindi dependency parsing. In Proceedings
of the NAACL HLT 2010 First Workshop on Statisti-
cal Parsing of Morphologically-Rich Languages, pages
94–102. Association for Computational Linguistics.

Rafiya Begum, Samar Husain, Arun Dhwaj,
Dipti Misra Sharma, Lakshmi Bai, and Rajeev
Sangal. 2008. Dependency annotation scheme
for indian languages. In IJCNLP, pages 721–726.
Citeseer.

A. Bharati, V. Chaitanya, R. Sangal, and KV Ramakr-
ishnamacharyulu. 1995. Natural Language Process-
ing: A Paninian Perspective. Prentice-Hall of India.

Akshar Bharati, Rajeev Sangal, Dipti Misra Sharma,
and Lakshmi Bai. 2006. Anncorra: Annotating cor-
pora guidelines for pos and chunk annotation for indian
languages. LTRC-TR31.

4Any opinions, findings, and conclusions or recommenda-
tions expressed in this material are those of the author(s) and
do not necessarily reflect the views of the National Science
Foundation.

Akshar Bharati, DM Sharma S Husain, L Bai,
R Begam, and R Sangal. 2009. Anncorra: Treebanks
for indian languages, guidelines for annotating hindi
treebank (version–2.0).

Riyaz Ahmad Bhat, Rajesh Bhatt, Annahita Farudi,
Prescott Klassen, Bhuvana Narasimhan, Martha
Palmer, Owen Rambow, Dipti Misra Sharma, Ashwini
Vaidya, Sri Ramagurumurthy Vishnu, et al. 2014. The
hindi/urdu treebank project. In Handbook of Linguistic
Annotation. Springer Press.

Rajesh Bhatt, Bhuvana Narasimhan, Martha Palmer,
Owen Rambow, Dipti Misra Sharma, and Fei Xia.
2009. A multi-representational and multi-layered tree-
bank for hindi/urdu. In Proceedings of the Third Lin-
guistic Annotation Workshop, pages 186–189. Associ-
ation for Computational Linguistics.

Cristina Bosco, Simonetta Montemagni, and Maria
Simi. 2013. Converting italian treebanks: Towards an
italian stanford dependency treebank. In Proceedings
of the 7th Linguistic Annotation Workshop and Interop-
erability with Discourse, pages 61–69. Citeseer.

Himani Chaudhry and Dipti M Sharma. 2011. An-
notation and issues in building an english dependency
treebank.

Marie-Catherine De Marneffe and Christopher D Man-
ning. 2008. The stanford typed dependencies repre-
sentation. In Coling 2008: Proceedings of the work-
shop on Cross-Framework and Cross-Domain Parser
Evaluation, pages 1–8. Association for Computational
Linguistics.

Marie-Catherine De Marneffe, Timothy Dozat, Natalia
Silveira, Katri Haverinen, Filip Ginter, Joakim Nivre,
and Christopher D Manning. 2014. Universal stanford
dependencies: A cross-linguistic typology. In LREC,
volume 14, pages 4585–4592.

Anders Johannsen, Héctor Martínez Alonso, and Bar-
bara Plank. 2015. Universal dependencies for danish.
In InternationalWorkshop on Treebanks and Linguistic
Theories (TLT14), page 157.

Janna Lipenkova and Milan Soucek. 2014. Converting
russian dependency treebank to stanford typed depen-
dencies representation. In EACL, pages 143–147.

Prashanth Mannem, Himani Chaudhry, and Akshar
Bharati. 2009. Insights into non-projectivity in hindi.
In Proceedings of the ACL-IJCNLP 2009 Student Re-
search Workshop, pages 10–17. Association for Com-
putational Linguistics.

Ryan TMcDonald, Joakim Nivre, Yvonne Quirmbach-
Brundage, Yoav Goldberg, Dipanjan Das, Kuzman
Ganchev, Keith B Hall, Slav Petrov, Hao Zhang, Oscar
Täckström, et al. 2013. Universal dependency annota-
tion for multilingual parsing. In ACL (2), pages 92–97.
Citeseer.

149



Joakim Nivre, Marie-Catherine de Marneffe, Filip Gin-
ter, Yoav Goldberg, Jan Hajic, Christopher DManning,
Ryan McDonald, Slav Petrov, Sampo Pyysalo, Natalia
Silveira, et al. 2016. Universal dependencies v1: A
multilingual treebank collection. In Proceedings of the
10th International Conference on Language Resources
and Evaluation (LREC 2016).

Martha Palmer, Rajesh Bhatt, Bhuvana Narasimhan,
Owen Rambow, Dipti Misra Sharma, and Fei Xia.
2009. Hindi syntax: Annotating dependency, lexical
predicate-argument structure, and phrase structure. In
The 7th International Conference on Natural Language
Processing, pages 14–17.

Slav Petrov, Dipanjan Das, and RyanMcDonald. 2011.
A universal part-of-speech tagset. arXiv preprint
arXiv:1104.2086.

Sampo Pyysalo, Jenna Kanerva, Anna Missilä,
Veronika Laippala, and Filip Ginter. 2015. Uni-
versal dependencies for finnish. In Proceedings of
NoDaLiDa, pages 163–172.

Lucien Tesnière. 1959. Eléments de syntaxe struc-
turale. Librairie C. Klincksieck.

Fei Xia, Owen Rambow, Rajesh Bhatt, Martha Palmer,
and Dipti Misra Sharma. 2009. Towards a
multi-representational treebank. In The 7th Interna-
tional Workshop on Treebanks and Linguistic Theories.
Groningen, Netherlands, pages 159–170.

Daniel Zeman, David Marecek, Martin Popel, Lo-
ganathan Ramasamy, Jan Stepánek, Zdenek Zabokrt-
skỳ, and Jan Hajic. 2012. Hamledt: To parse or not to
parse? In LREC, pages 2735–2741.

150


