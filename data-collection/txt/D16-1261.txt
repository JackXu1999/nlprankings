



















































Improving Information Extraction by Acquiring External Evidence with Reinforcement Learning


Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 2355–2365,
Austin, Texas, November 1-5, 2016. c©2016 Association for Computational Linguistics

Improving Information Extraction by Acquiring External Evidence with
Reinforcement Learning

Karthik Narasimhan
CSAIL, MIT

karthikn@mit.edu

Adam Yala
CSAIL, MIT

adamyala@mit.edu

Regina Barzilay
CSAIL, MIT

regina@csail.mit.edu

Abstract

Most successful information extraction sys-
tems operate with access to a large collec-
tion of documents. In this work, we explore
the task of acquiring and incorporating exter-
nal evidence to improve extraction accuracy
in domains where the amount of training data
is scarce. This process entails issuing search
queries, extraction from new sources and rec-
onciliation of extracted values, which are re-
peated until sufficient evidence is collected.
We approach the problem using a reinforce-
ment learning framework where our model
learns to select optimal actions based on con-
textual information. We employ a deep Q-
network, trained to optimize a reward func-
tion that reflects extraction accuracy while pe-
nalizing extra effort. Our experiments on
two databases – of shooting incidents, and
food adulteration cases – demonstrate that our
system significantly outperforms traditional
extractors and a competitive meta-classifier
baseline.1

1 Introduction

In many realistic domains, information extraction
(IE) systems require exceedingly large amounts of
annotated data to deliver high performance. In-
creases in training data size enable models to han-
dle robustly the multitude of linguistic expressions
that convey the same semantic relation. Consider,
for instance, an IE system that aims to identify en-
tities such as the perpetrator and the number of vic-

1Code is available at http://people.csail.mit.
edu/karthikn/rl-ie/

ShooterName: Scott Westerhuis
NumKilled: 6

A couple and four children found dead in their
burning South Dakota home had been shot in an
apparent murder-suicide, officials said Monday.
...
Scott Westerhuis’s cause of death was "shotgun
wound with manner of death as suspected sui-
cide," it added in a statement.

Figure 1: Sample news article on a shooting case. Note
how the article contains both the name of the shooter and
the number of people killed but both pieces of informa-
tion require complex extraction schemes.

tims in a shooting incident (Figure 1). The docu-
ment does not explicitly mention the shooter (Scott
Westerhuis), but instead refers to him as a suicide
victim. Extraction of the number of fatally shot vic-
tims is similarly difficult, as the system needs to in-
fer that "A couple and four children" means six peo-
ple. Even a large annotated training set may not pro-
vide sufficient coverage to capture such challenging
cases.

In this paper, we explore an alternative approach
for boosting extraction accuracy, when a large train-
ing corpus is not available. Instead, the proposed
method utilizes external information sources to re-
solve ambiguities inherent in text interpretation.
Specifically, our strategy is to find other documents
that contain the information sought, expressed in a
form that a basic extractor can "understand". For
instance, Figure 2 shows two other articles describ-
ing the same event, wherein the entities of interest

2355



The six members of a South Dakota family found
dead in the ruins of their burned home were fa-
tally shot, with one death believed to be a suicide,
authorities said Monday.

AG Jackley says all evidence supports the story
he told based on preliminary findings back in
September: Scott Westerhuis shot his wife and
children with a shotgun, lit his house on fire with
an accelerant, then shot himself with his shotgun.

Figure 2: Two other articles on the same shooting case.
The first article clearly mentions that six people were
killed. The second one portrays the shooter in an easily
extractable form.

– the number of people killed and the name of the
shooter – are expressed explicitly. Processing such
stereotypical phrasing is easier for most extraction
systems, compared to analyzing the original source
document. This approach is particularly suitable for
extracting information from news where a typical
event is covered by multiple news outlets.

The challenges, however, lie in (1) performing
event coreference (i.e. retrieving suitable articles de-
scribing the same incident) and (2) reconciling the
entities extracted from these different documents.
Querying the web (using the source article’s title for
instance) often retrieves documents about other inci-
dents with a tangential relation to the original story.
For example, the query “4 adults, 1 teenager shot in
west Baltimore 3 april 2015” yields only two rele-
vant articles among the top twenty results on Bing
search, while returning other shooting events at the
same location. Moreover, the values extracted from
these different sources require resolution since some
of them might be inaccurate.

One solution to this problem would be to perform
a single search to retrieve articles on the same event
and then reconcile values extracted from them (say,
using a meta-classifier). However, if the confidence
of the new set of values is still low, we might wish
to perform further queries. Thus, the problem is in-
herently sequential, requiring alternating phases of
querying to retrieve articles and integrating the ex-
tracted values.

We address these challenges using a Reinforce-
ment Learning (RL) approach that combines query
formulation, extraction from new sources, and value

reconciliation. To effectively select among possible
actions, our state representation encodes informa-
tion about the current and new entity values along
with the similarity between the source article and
the newly retrieved document. The model learns
to select good actions for both article retrieval and
value reconciliation in order to optimize the reward
function, which reflects extraction accuracy and in-
cludes penalties for extra moves. We train the RL
agent using a Deep Q-Network (DQN) (Mnih et al.,
2015) that is used to predict both querying and rec-
onciliation choices simultaneously. While we use a
maximum entropy model as the base extractor, this
framework can be inherently applied to other extrac-
tion algorithms.

We evaluate our system on two datasets where
available training data is inherently limited. The
first dataset is constructed from a publicly available
database of mass shootings in the United States. The
database is populated by volunteers and includes
the source articles. The second dataset is derived
from a FoodShield database of illegal food adulter-
ations. Our experiments demonstrate that the final
RL model outperforms basic extractors as well as
a meta-classifier baseline in both domains. For in-
stance, in the Shootings domain, the average accu-
racy improvement over the meta-classifier is 7%.

2 Related Work

Open Information Extraction Existing work in
open IE has used external sources from the
web to improve extraction accuracy and cover-
age (Agichtein and Gravano, 2000; Etzioni et al.,
2011; Fader et al., 2011; Wu and Weld, 2010).
Such research has focused on identifying multiple
instances of the same relation, independent of the
context in which this information appears. In con-
trast, our goal is to extract information from addi-
tional sources about a specific event described in a
source article. Therefore, the novel challenge of our
task resides in performing event coreference (Lee et
al., 2012; Bejan and Harabagiu, 2014) (i.e identify-
ing other sources describing the same event) while
simultaneously reconciling extracted information.
Moreover, relations typically considered by open IE
systems have significantly higher coverage in on-
line documents than a specific incident described in

2356



a few news sources. Hence, we require a different
mechanism for finding and reconciling online infor-
mation.

Entity linking, multi-document extraction and
event coreference Our work also relates to the
task of multi-document information extraction,
where the goal is to connect different mentions of
the same entity across input documents (Mann and
Yarowsky, 2005; Han et al., 2011; Durrett and Klein,
2014). Since this setup already includes multiple in-
put documents, the model is not required to look
for additional sources or decide on their relevance.
Also, while the set of input documents overlap in
terms of entities mentioned, they do not necessarily
describe the same event. Given these differences in
setup, the challenges and opportunities of the two
tasks are distinct.

Knowledge Base Completion and Online Search
Recent work has explored several techniques to per-
form Knowledge Base Completion (KBC) such as
vector space models and graph traversal (Socher et
al., 2013; Yang et al., 2014; Gardner et al., 2014;
Neelakantan et al., 2015; Guu et al., 2015). Though
our work also aims at increasing extraction recall
for a database, traditional KBC approaches do not
require searching for additional sources of informa-
tion. West et al. (2014) explore query reformula-
tion in the context of KBC. Using existing search
logs, they learn how to formulate effective queries
for different types of database entries. Once query
learning is completed, the model employs several se-
lected queries, and then aggregates the results based
on retrieval ranking. This approach is complemen-
tary to the proposed method, and can be combined
with our approach if search logs are available.

Kanani and McCallum (2012) also combine
search and information extraction. In their task of
faculty directory completion, the system has to find
documents from which to extract desired informa-
tion. They employ reinforcement learning to address
computational bottlenecks, by minimizing the num-
ber of queries, document downloads and extraction
action. The extraction accuracy is not part of this
optimization, since the baseline IE system achieves
high performance on the relations of interest. Hence,
given different design goals, the two RL formula-
tions are very different. Our approach is also close

in spirit to the AskMSR system (Banko et al., 2002)
which aims at using information redundancy on the
web to better answer questions. Though our goal is
similar, we learn to query and consolidate the dif-
ferent sources of information instead of using pre-
defined rules. Several slot-filling methods have ex-
perimented with query formulation over web-based
corpora to populate knowledge bases (Surdeanu et
al., 2010; Ji and Grishman, 2011).

3 Framework

We model the information extraction task as a
markov decision process (MDP), where the model
learns to utilize external sources to improve upon
extractions from a source article (see Figure 3). The
MDP framework allows us to dynamically incorpo-
rate entity predictions while also providing flexibil-
ity to choose the type of articles to extract from. At
each step, the system has to reconcile extracted val-
ues from a related article (enew) with the current set
of values (ecur), and decide on the next query for
retrieving more articles.

We represent the MDP as a tuple 〈S,A, T,R〉,
where S = {s} is the space of all possible states,
A = {a = (d, q)} is the set of all actions, R(s, a) is
the reward function, and T (s′|s, a) is the transition
function. We describe these in detail below.

States The state s in our MDP consists of the ex-
tractor’s confidence in predicted entity values, the
context from which the values are extracted and the
similarity between the new document and the origi-
nal one. We represent the state as a continuous real-
valued vector (Figure 3) incorporating these pieces
of information:
1. Confidence scores of current and newly extracted

entity values.
2. One-hot encoding of matches between current

and new values.
3. Unigram/tf-idf counts2 of context words. These

are words that occur in the neighborhood of the
entity values in a document (e.g. the words
which, left, people and wounded in the phrase
“which left 5 people wounded”).

4. tf-idf similarity between the original article and
the new article.
2Counts are computed on the documents used to train the

basic extraction system.

2357



select

Reconcile

Q
extractsearch

ShooterName Scott 
Westerhuis

NumKilled 4

NumWounded 2

City Platte

ShooterName Scott 
Westerhuis

NumKilled 6

NumWounded 0

City Platte

query

ShooterName Scott 
Westerhuis

NumKilled 6

NumWounded 2

City Platte

ShooterName Scott 
Westerhuis

NumKilled 5

NumWounded 0

City S.D.

State	1 State	2

Current Values:
ShooterName→ Scott Westerhuis
NumKilled→ 4
NumWounded→ 2
City→ Platte
New Values:
ShooterName→ Scott Westerhuis
NumKilled→ 6
NumWounded→ 0
City→ Platte

State:
〈0.3, 0.2, 0.5, 0.1, ← currentConf
0.4, 0.6, 0.2, 0.4, ← newConf
1, 0, 0, 1, 0, 1, 1, 0, ← matches
0.2, 0.3, ..., 0.1, 0.5, ← contextWords
0.65〉 ← document tf-idf similarity

Figure 3: Left: Illustration of a transition in the MDP – the top box in each state shows the current entities and the
bottom one consists of the new entities extracted from a downloaded article on the same event. Right: Sample state
representation (bottom) in the MDP based on current and new values of entities (top). currentConf : confidence scores
of current entities, newConf : confidence scores of new entities, contextWords: tf-idf counts of context words.

Actions At each step, the agent is required to take
two actions - a reconciliation decision d and a query
choice q. The decision d on the newly extracted val-
ues can be one of the following types: (1) accept a
specific entity’s value (one action per entity)3, (2)
accept all entity values, (3) reject all values or (4)
stop. In cases 1-3, the agent continues to inspect
more articles, while the episode ends if a stop ac-
tion (4) is chosen. The current values and confidence
scores are simply updated with the accepted values
and the corresponding confidences.4 The choice q is
used to choose the next query from a set of automat-
ically generated alternatives (details below) in order
to retrieve the next article.

Rewards The reward function is chosen to maxi-
mize the final extraction accuracy while minimizing
the number of queries. The accuracy component is
calculated using the difference between the accuracy
of the current and the previous set of entity values:

R(s, a) =
∑

entity j

Acc(ejcur)− Acc(ejprev)

There is a negative reward per step to penalize the
agent for longer episodes.

3No entity-specific features are used for action selection.
4We also experiment with other forms of value reconcilia-

tion. See Section 5 for details.

Queries The queries are based on automatically
generated templates, created using the title of an ar-
ticle along with words5 most likely to co-occur with
each entity type in the training data. Table 1 pro-
vides some examples – for instance, the second tem-
plate contains words such as arrested and identified
which often appear around the name of the shooter.

〈title〉
〈title〉 + (police | identified | arrested | charged)
〈title〉 + (killed | shooting | injured | dead | people)

〈title〉 + (injured | wounded | victim)
〈title〉 + (city | county | area)

Table 1: Examples of different query templates for web
search for articles on mass shootings. The | symbol repre-
sents logical OR. The last 4 queries contain context words
around values for entity types ShooterName, NumKilled,
NumWounded and City, respectively. At query time,
〈title〉 is replaced by the source article’s title.

We use a search engine to query the web for arti-
cles on the same event as the source article and re-
trieve the top k links per query.6 Documents that are
more than a month older than the original article are
filtered out of the search results.

Transitions Each episode starts off with a single
source article xi from which an initial set of entity

5Stop words, numeric terms and proper nouns are filtered.
6We use k=20 in our experiments.

2358



values are extracted. The subsequent steps in the
episode involve the extra articles, downloaded using
different types of query formulations based on the
source article. A single transition in the episode con-
sists of the agent being given the state s containing
information about the current and new set of values
(extracted from a single article) using which the next
action a = (d, q) is chosen. The transition function
T (s′|s, a) incorporates the reconciliation decision d
from the agent in state s along with the values from
the next article retrieved using query q and produces
the next state s′. The episode stops whenever d is a
stop decision.

Algorithm 1 details the entire MDP framework
for the training phase. During the test phase, each
source article is handled only once in a single
episode (lines 8-23).

Algorithm 1 MDP framework for Information Extrac-
tion (Training Phase)

1: Initialize set of original articles X
2: for xi ∈ X do
3: for each query template T q do
4: Download articles with query T q(xi)
5: Queue retrieved articles in Y qi
6: for epoch = 1,M do
7: for i = 1, |X| do //episode
8: Extract entities e0 from xi
9: ecur ← e0

10: q← 0, r← 0 //query type, reward
11: while Y qi not empty do
12: Pop next article y from Y qi
13: Extract entities enew from y
14: Compute tf-idf similarity Z(xi, y)
15: Compute context vector C(y)
16: Form state s using ecur, enew, Z(xi, y)

and C(y)
17: Send (s, r) to agent
18: Get decision d, query q from agent
19: if q == “end_episode” then break
20: eprev ← ecur
21: ecur ← Reconcile(ecur, enew, d)
22: r ←∑entity j Acc(ejcur)− Acc(ejprev)
23: Send (send, r) to agent

4 Reinforcement Learning for Information
Extraction

In order to learn a good policy for an agent, we uti-
lize the paradigm of reinforcement learning (RL).

The MDP described in the previous section can
be viewed in terms of a sequence of transitions
(s, a, r, s′). The agent typically utilizes a state-
action value function Q(s, a) to determine which
action a to perform in state s. A commonly used
technique for learning an optimal value function is
Q-learning (Watkins and Dayan, 1992), in which
the agent iteratively updates Q(s, a) using the re-
wards obtained from episodes. The updates are de-
rived from the recursive Bellman equation (Sutton
and Barto, 1998) for the optimal Q:

Qi+1(s, a) = E[r + γmax
a′

Qi(s
′, a′) | s, a]

Here, r = R(s, a) is the reward and γ is a factor
discounting the value of future rewards and the ex-
pectation is taken over all transitions involving state
s and action a.

Since our problem involves a continuous
state space S, we use a deep Q-network
(DQN) (Mnih et al., 2015) as a function ap-
proximator Q(s, a) ≈ Q(s, a; θ). The DQN, in
which the Q-function is approximated using a deep
neural network, has been shown to learn better value
functions than linear approximators (Narasimhan
et al., 2015; He et al., 2015) and can capture
non-linear interactions between the different pieces
of information in our state.

We use a DQN consisting of two linear layers (20
hidden units each) followed by rectified linear units
(ReLU), along with two separate output layers.7 The
network takes the continuous state vector s as input
and predicts Q(s, d) and Q(s, q) for reconciliation
decisions d and query choices q simultaneously us-
ing the different output layers (see Supplementary
material for the model architecture).

Parameter Learning The parameters θ of the
DQN are learnt using stochastic gradient de-
scent with RMSprop (Tieleman and Hinton, 2012).
Each parameter update aims to close the gap be-
tween the Q(st, at; θ) predicted by the DQN and
the expected Q-value from the Bellman equation,
rt + γmaxaQ(st+1, a; θ). Following Mnih et al.
(2015), we make use of a (separate) target Q-
network to calculate the expected Q-value, in order

7We did not observe significant differences with additional
linear layers or the choice of non-linearity (Sigmoid/ReLU).

2359



Algorithm 2 Training Procedure for DQN agent with
�-greedy exploration

1: Initialize experience memory D
2: Initialize parameters θ randomly
3: for episode = 1,M do
4: Initialize environment and get start state s1
5: for t = 1, N do
6: if random() < � then
7: Select a random action at
8: else
9: Compute Q(st, a) for all actions a

10: Select at = argmax Q(st, a)
11: Execute action at and observe reward rt and

new state st+1
12: Store transition (st, at, rt, st+1) in D
13: Sample random mini batch of transitions

(sj , aj , rj , sj+1) from D
14: yj =

{
rj , if sj+1 is terminal
rj + γ maxa′ Q(sj+1, a′; θt), else

15: Perform gradient descent step on the loss
L(θ) = (yj −Q(sj , aj ; θ))2

16: if st+1 == send then break

to have ‘stable updates’. The target Q-network is
periodically updated with the current parameters θ.
We also make use of an experience replay memory
D to store transitions. To perform updates, we sam-
ple a batch of transitions (ŝ, â, ŝ′, r) at random from
D and minimize the loss function8:

L(θ) = Eŝ,â[(y −Q(ŝ, â; θ))2]

where y = r + γmaxa′ Q(ŝ′, a′; θt) is the target Q-
value. The learning updates are made every training
step using the following gradients:

∇θL(θ) = Eŝ,â[2(y −Q(ŝ, â; θ))∇θQ(ŝ, â; θ)]

Algorithm 2 details the DQN training procedure.

5 Experimental Setup

Data We perform experiments on two different
datasets. For the first set, we collected data from the
Gun Violence archive,9 a website tracking shootings
in the United States. The data contains a news article
on each shooting and annotations for (1) the name of
the shooter, (2) the number of people killed, (3) the
number of people wounded, and (4) the city where

8The expectation is over the transitions sampled uniformly
at random from D.

9www.shootingtracker.com/Main_Page

Number Shootings AdulterationTrain Test Dev Train Test Dev
Source articles 306 292 66 292 148 42

Downloaded articles 8201 7904 1628 7686 5333 1537

Table 2: Stats for Shootings and Adulteration datasets

the incident took place. We consider these as the
entities of interest, to be extracted from the articles.
The second dataset we use is the Foodshield EMA
database10 documenting adulteration incidents since
1980. This data contains annotations for (1) the af-
fected food product, (2) the adulterant and (3) the
location of the incident. Both datasets are classic
examples where the number of recorded incidents is
insufficient for large-scale IE systems to leverage.

For each source article in the above databases, we
download extra articles (top 20 links) using the Bing
Search API11 with different automatically generated
queries. We use only the source articles from the
train portion to learn the parameters of the base ex-
tractor. The entire train set with downloaded arti-
cles is used to train the DQN agent and the meta-
classifier baseline (described below). All parame-
ters are tuned on the dev set. For the final results,
we train the models on the combined train and dev
sets and use the entire test set (source + downloaded
articles) to evaluate. Table 2 provides data statistics.

Extraction model We use a maximum entropy
classifier as the base extraction system, since it pro-
vides flexibility to capture various local context fea-
tures and has been shown to perform well for in-
formation extraction (Chieu and Ng, 2002). The
classifier is used to tag each word in a document
as one of the entity types or not (e.g. {Shooter-
Name, NumKilled, NumWounded, City, Other} in
the Shootings domain). Then, for each tag except
Other, we choose the mode of the values to obtain
the set of entity extractions from the article.12 Fea-
tures used in the classifier are provided in the Sup-
plementary material.

The features and context window c = 4 of neigh-
boring words are tuned to maximize performance on
a dev set. We also experimented with a conditional
random field (CRF) (with the same features) for
the sequence tagging (Culotta and McCallum, 2004)

10www.foodshield.org/member/login/
11www.bing.com/toolbox/bingsearchapi
12We normalize numerical words (e.g. "one" to "1") before

taking the mode.

2360



but obtained worse empirical performance (see Sec-
tion 6). The parameters of the base extraction model
are not changed during training of the RL model.

Evaluation We evaluate the extracted entity val-
ues against the gold annotations and report the
corpus-level average accuracy on each entity type.
For entities like ShooterName, the annotations (and
the news articles) often contain multiple names (first
and last) in various combinations, so we consider re-
trieving either name as a successful extraction. For
all other entities, we look for exact matches.

Baselines We explore 4 types of baselines:
Basic extractors: We use the CRF and the Maxent

classifier mentioned previously.
Aggregation systems: We examine two systems

that perform different types of value reconciliation.
The first model (Confidence) chooses entity values
with the highest confidence score assigned by the
base extractor. The second system (Majority) takes
a majority vote over all values extracted from these
articles. Both methods filter new entity values using
a threshold τ on the cosine similarity over the tf-idf
representations of the source and new articles.

Meta-classifer: To demonstrate the importance of
modeling the problem in the RL framework, we con-
sider a meta-classifier baseline. The classifier oper-
ates over the same input state space and produces
the same set of reconciliation decisions {d} as the
DQN. For training, we use the original source arti-
cle for each event along with a related downloaded
article to compute the state. If the downloaded ar-
ticle has the correct value and the original one does
not, we label it as a positive example for that entity
class. If multiple such entity classes exist, we cre-
ate several training instances with appropriate labels,
and if none exist, we use the label corresponding to
the reject all action. For each test event, the clas-
sifier is used to provide decisions for all the down-
loaded articles and the final extraction is performed
by aggregating the value predictions using the Con-
fidence-based scheme described above.

Oracle: Finally, we also have an ORACLE score
which is computed assuming perfect reconciliation
and querying decisions on top of the Maxent base
extractor. This helps us analyze the contribution of
the RL system in isolation of the inherent limitations
of the base extractor.

RL models We perform experiments using three
variants of RL agents – (1) RL-Basic, which per-
forms only reconciliation decisions13, (2) RL-Query,
which takes only query decisions with the reconcil-
iation strategy fixed (similar to Kanani and McCal-
lum (2012)), and (3) RL-Extract, our full system in-
corporating both reconciliation and query decisions.

We train the models for 10000 steps every epoch
using the Maxent classifier as the base extractor, and
evaluate on the entire test set every epoch. The final
accuracies reported are averaged over 3 independent
runs; each run’s score is averaged over 20 epochs af-
ter 100 epochs of training. The penalty per step is set
to -0.001. For the DQN, we use the dev set to tune
all parameters. We used a replay memory D of size
500k, and a discount (γ) of 0.8. We set the learn-
ing rate to 2.5E−5. The � in �-greedy exploration is
annealed from 1 to 0.1 over 500k transitions. The
target-Q network is updated every 5k steps.

6 Results

Performance Table 3 demonstrates that our sys-
tem (RL-Extract) obtains a substantial gain in ac-
curacy over the basic extractors on all entity types
over both domains. For instance, RL-Extract is
11.4% more accurate than the basic Maxent extrac-
tor on City and 7.1% better on NumKilled, while
also achieving gains of more than 5% on the other
entities on the Shootings domain. The gains on
the Adulteration dataset are also significant, up to
a 11.5% increase on the Location entity.

We can also observe that simple aggregation
schemes like the Confidence and Majority base-
lines don’t handle the complexity of the task well.
RL-Extract outperforms these by 7.2% on Shoot-
ings and 5% on Adulteration averaged over all enti-
ties. Further, the importance of sequential decision-
making is established by RL-Extract performing sig-
nificantly better than the meta-classifier (7.0% on
Shootings over all entities). This is also due to the
fact that the meta-classifier aggregates over the en-
tire set of extra documents, including the long tail of
noisy, irrelevant documents. Finally, we see the ad-
vantage of enabling the RL system to select queries
as our full model RL-Extract obtains significant im-

13Articles are presented to the agent in a round-robin fashion
from the different query lists.

2361



System Shootings AdulterationShooterName NumKilled NumWounded City Food Adulterant Location
CRF extractor 9.5 65.4 64.5 47.9 41.2 28.3 51.7

Maxent extractor 45.2 69.7 68.6 53.7 56.0 52.7 67.8
Confidence Agg. (τ ) 45.2 (0.6) 70.3 (0.6) 72.3 (0.6) 55.8 (0.6) 56.0 (0.8) 54.0 (0.8) 69.2 (0.6)
Majority Agg. (τ ) 47.6 (0.6) 69.1 (0.9) 68.6 (0.9) 54.7 (0.7) 56.7 (0.5) 50.6 (0.95) 72.0 (0.4)

Meta-classifier 45.2 70.7 68.4 55.3 55.4 52.7 72.0
RL-Basic 45.2 71.2 70.1 54.0 57.0 55.1 76.1

RL-Query (conf) 39.6 66.6 69.4 44.4 39.4 35.9 66.4
RL-Extract 50.0 77.6∗ 74.6∗ 65.6∗ 59.6∗ 58.9∗ 79.3∗

ORACLE 57.1 86.4 83.3 71.8 64.8 60.8 83.9

Table 3: Accuracy of various baselines (italics), our system (DQN) and the Oracle on Shootings and Adulteration
datasets. Agg. refers to aggregation baselines. Bold indicates best system scores. ∗statistical significance of p <
0.0005 vs basic Maxent extractor using the Student-t test. Numbers in parentheses indicate the optimal threshold (τ )
for the aggregation baselines. Confidence-based reconciliation was used for RL-Query.

Entity System: Value Example

ShooterName
Basic: Stewart A source tells Channel 2 Action News that Thomas Lee has been arrested in

Mississippi ... Sgt . Stewart Smith, with the Troup County Sheriff’s office, said.
RL-Extract: Lee Lee is accused of killing his wife, Christie; ...

NumKilled
Basic: 0 Shooting leaves 25 year old Pittsfield man dead , 4 injured

RL-Extract: 1 One man is dead after a shooting Saturday night at the intersection of Dewey
Avenue and Linden Street.

NumWounded
Basic: 0 Three people are dead and a fourth is in the hospital after a murder suicide

RL-Extract: 1 3 dead, 1 injured in possible Fla. murder-suicide

City
Basic: Englewood A 2 year old girl and four other people were wounded in a shooting in West

Englewood Thursday night, police said

RL-Extract: Chicago At least 14 people were shot across Chicago between noon and 10:30 p.m.
Thursday. The last shooting left five people wounded.

Table 4: Sample outputs (along with corresponding article snippets) on the Shootings domain showing correct predic-
tions from RL-Extract where the basic extractor (Maxent) fails.

0 20 40 60 80 100
Epoch

0.00

0.05

0.10

0.15

0.20

0.25

R
e
w

a
rd

35

40

45

50

55

60

65

70

75

80

A
cc

u
ra

cy
 (

%
)

Figure 4: Evolution of average reward (solid
black) and accuracy on various entities (dashed
lines; red=ShooterName, magenta=NumKilled,
blue=NumWounded, green=City) on the test set of
the Shootings domain.

provements over RL-Basic on both domains. The
full model also outperforms RL-Query, demonstrat-
ing the importance of performing both query selec-
tion and reconciliation in a joint fashion.

Figure 4 shows the learning curve of the agent by
measuring reward on the test set after each training
epoch. The reward improves gradually and the ac-
curacy on each entity increases simultaneously. Ta-
ble 4 provides some examples where our model is
able to extract the right values when the baseline
fails. One can see that in most cases this is due to
the model making use of articles with prototypical
language or articles containing the entities in readily
extractable form.

Analysis We also analyze the importance of dif-
ferent reconciliation schemes, rewards and context-
vectors in RL-Extract on the Shootings domain (Ta-
ble 5). In addition to simple replacement (Re-

2362



Reconciliation Context Reward Accuracy Steps(RL-Extract) S K W C
Confidence tf-idf Step 47.5 71.5 70.4 60.1 8.4
Majority tf-idf Step 43.6 71.8 69.0 59.2 9.9
Replace No context Step 44.4 77.1 72.5 63.4 8.0
Replace Unigram Step 48.9 76.8 74.0 63.2 10.0
Replace tf-idf Episode 42.6 62.3 68.9 52.7 6.8
Replace tf-idf Step 50.0 77.6 74.6 65.6 9.4

Table 5: Effect of using different reconciliation schemes, context-vectors, and rewards in our RL framework (Shoot-
ings domain). The last row is the overall best scheme (deviations from this are in italics). Context refers to the
type of word counts used in the state vector to represent entity context. Rewards are either per step or per episode.
(S: ShooterName, K: NumKilled, W: NumWounded, C: City, Steps: Average number of steps per episode)

place), we also experiment with using Confidence
and Majority-based reconciliation schemes for RL-
Extract. We observe that the Replace scheme per-
forms much better than the others (2-6% on all enti-
ties) and believe this is because it provides the agent
with more flexibility in choosing the final values.

From the same table, we see that using the tf-
idf counts of context words as part of the state pro-
vides better performance than using no context or
using simple unigram counts. In terms of reward
structure, providing rewards after each step is em-
pirically found to be significantly better (>10% on
average) compared to a single delayed reward per
episode. The last column shows the average number
of steps per episode – the values range from 6.8 to
10.0 steps for the different schemes. The best sys-
tem (RL-Extract with Replace, tf-idf and step-based
rewards) uses 9.4 steps per episode.

7 Conclusions

In this paper, we explore the task of acquiring and
incorporating external evidence to improve informa-
tion extraction accuracy for domains with limited
access to training data. This process comprises is-
suing search queries, extraction from new sources
and reconciliation of extracted values, repeated until
sufficient evidence is obtained. We use a reinforce-
ment learning framework and learn optimal action
sequences to maximize extraction accuracy while
penalizing extra effort. We show that our model,
trained as a deep Q-network, outperforms traditional
extractors by 7.2% and 5% on average on two differ-
ent domains, respectively. We also demonstrate the

importance of sequential decision-making by com-
paring our model to a meta-classifier operating on
the same space, obtaining up to a 7% gain.

Acknowledgements

We thank David Alvarez, Tao Lei and Ramya Ra-
makrishnan for helpful discussions and feedback,
and the members of the MIT NLP group and the
anonymous reviewers for their insightful comments.
We also gratefully acknowledge support from a
Google faculty award.

References

Eugene Agichtein and Luis Gravano. 2000. Snowball:
Extracting relations from large plain-text collections.
In Proceedings of the fifth ACM conference on Digital
libraries, pages 85–94. ACM.

Michele Banko, Eric Brill, Susan Dumais, and Jimmy
Lin. 2002. Askmsr: Question answering using the
worldwide web. In Proceedings of 2002 AAAI Spring
Symposium on Mining Answers from Texts and Knowl-
edge Bases, pages 7–9.

Cosmin Adrian Bejan and Sanda Harabagiu. 2014. Un-
supervised event coreference resolution. Computa-
tional Linguistics, 40(2):311–347.

Hai Leong Chieu and Hwee Tou Ng. 2002. A maximum
entropy approach to information extraction from semi-
structured and free text. In Proceedings of AAAI.

Aron Culotta and Andrew McCallum. 2004. Confidence
estimation for information extraction. In Proceedings
of HLT-NAACL 2004: Short Papers, pages 109–112.
Association for Computational Linguistics.

Greg Durrett and Dan Klein. 2014. A joint model for en-
tity analysis: Coreference, typing, and linking. Trans-

2363



actions of the Association for Computational Linguis-
tics, 2:477–490.

Oren Etzioni, Anthony Fader, Janara Christensen,
Stephen Soderland, and Mausam Mausam. 2011.
Open information extraction: The second generation.
In IJCAI, volume 11, pages 3–10.

Anthony Fader, Stephen Soderland, and Oren Etzioni.
2011. Identifying relations for open information ex-
traction. In Proceedings of the Conference on Empiri-
cal Methods in Natural Language Processing, pages
1535–1545. Association for Computational Linguis-
tics.

Matt Gardner, Partha Talukdar, Jayant Krishnamurthy,
and Tom Mitchell. 2014. Incorporating vector space
similarity in random walk inference over knowledge
bases. In Proceedings of the 2014 Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 397–406, Doha, Qatar, October. As-
sociation for Computational Linguistics.

Kelvin Guu, John Miller, and Percy Liang. 2015.
Traversing knowledge graphs in vector space. In Pro-
ceedings of the 2015 Conference on Empirical Meth-
ods in Natural Language Processing, pages 318–327,
Lisbon, Portugal, September. Association for Compu-
tational Linguistics.

Xianpei Han, Le Sun, and Jun Zhao. 2011. Collective
entity linking in web text: a graph-based method. In
Proceedings of the 34th international ACM SIGIR con-
ference on Research and development in Information
Retrieval, pages 765–774. ACM.

Ji He, Jianshu Chen, Xiaodong He, Jianfeng Gao, Lihong
Li, Li Deng, and Mari Ostendorf. 2015. Deep re-
inforcement learning with an action space defined by
natural language. arXiv preprint arXiv:1511.04636.

Heng Ji and Ralph Grishman. 2011. Knowledge base
population: Successful approaches and challenges. In
Proceedings of the 49th Annual Meeting of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies - Volume 1, HLT ’11, pages 1148–
1158, Stroudsburg, PA, USA. Association for Compu-
tational Linguistics.

Pallika H Kanani and Andrew K McCallum. 2012. Se-
lecting actions for resource-bounded information ex-
traction using reinforcement learning. In Proceed-
ings of the fifth ACM international conference on Web
search and data mining, pages 253–262. ACM.

Heeyoung Lee, Marta Recasens, Angel Chang, Mihai
Surdeanu, and Dan Jurafsky. 2012. Joint entity and
event coreference resolution across documents. In
Proceedings of the 2012 Joint Conference on Empir-
ical Methods in Natural Language Processing and
Computational Natural Language Learning, EMNLP-
CoNLL ’12, pages 489–500, Stroudsburg, PA, USA.
Association for Computational Linguistics.

Gideon S Mann and David Yarowsky. 2005. Multi-field
information extraction and cross-document fusion. In
Proceedings of the 43rd annual meeting on association
for computational linguistics, pages 483–490. Associ-
ation for Computational Linguistics.

Volodymyr Mnih, Koray Kavukcuoglu, David Silver,
Andrei A. Rusu, Joel Veness, Marc G. Bellemare,
Alex Graves, Martin Riedmiller, Andreas K. Fidje-
land, Georg Ostrovski, Stig Petersen, Charles Beat-
tie, Amir Sadik, Ioannis Antonoglou, Helen King,
Dharshan Kumaran, Daan Wierstra, Shane Legg, and
Demis Hassabis. 2015. Human-level control through
deep reinforcement learning. Nature, 518(7540):529–
533, 02.

Karthik Narasimhan, Tejas Kulkarni, and Regina Barzi-
lay. 2015. Language understanding for text-based
games using deep reinforcement learning. In Proceed-
ings of the Conference on Empirical Methods in Natu-
ral Language Processing.

Arvind Neelakantan, Benjamin Roth, and Andrew Mc-
Callum. 2015. Compositional vector space models
for knowledge base completion. In Proceedings of the
53rd Annual Meeting of the Association for Computa-
tional Linguistics and the 7th International Joint Con-
ference on Natural Language Processing (Volume 1:
Long Papers), pages 156–166, Beijing, China, July.
Association for Computational Linguistics.

Richard Socher, Danqi Chen, Christopher D Manning,
and Andrew Ng. 2013. Reasoning with neural ten-
sor networks for knowledge base completion. In
Advances in Neural Information Processing Systems,
pages 926–934.

Mihai Surdeanu, David McClosky, Julie Tibshirani, John
Bauer, Angel X Chang, Valentin I Spitkovsky, and
Christopher D Manning. 2010. A simple distant su-
pervision approach for the tac-kbp slot filling task. In
Proceedings of Text Analysis Conference 2010 Work-
shop.

Richard S Sutton and Andrew G Barto. 1998. Introduc-
tion to reinforcement learning. MIT Press.

Tijmen Tieleman and Geoffrey Hinton. 2012. Lecture
6.5-rmsprop: Divide the gradient by a running aver-
age of its recent magnitude. COURSERA: Neural Net-
works for Machine Learning, 4.

Christopher JCH Watkins and Peter Dayan. 1992. Q-
learning. Machine learning, 8(3-4):279–292.

Robert West, Evgeniy Gabrilovich, Kevin Murphy, Shao-
hua Sun, Rahul Gupta, and Dekang Lin. 2014.
Knowledge base completion via search-based question
answering. In Proceedings of the 23rd international
conference on World wide web, pages 515–526. ACM.

Fei Wu and Daniel S Weld. 2010. Open information ex-
traction using wikipedia. In Proceedings of the 48th

2364



Annual Meeting of the Association for Computational
Linguistics, pages 118–127. Association for Computa-
tional Linguistics.

Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng Gao,
and Li Deng. 2014. Embedding entities and relations
for learning and inference in knowledge bases. arXiv
preprint arXiv:1412.6575.

2365


