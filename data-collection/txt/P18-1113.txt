



















































Word Embedding and WordNet Based Metaphor Identification and Interpretation


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 1222–1231
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

1222

Word Embedding and WordNet Based
Metaphor Identification and Interpretation

Rui Mao, Chenghua Lin and Frank Guerin
Department of Computing Science

University of Aberdeen
Aberdeen, United Kingdom

{r03rm16, chenghua.lin, f.guerin}@abdn.ac.uk

Abstract

Metaphoric expressions are widespread in
natural language, posing a significant chal-
lenge for various natural language pro-
cessing tasks such as Machine Translation.
Current word embedding based metaphor
identification models cannot identify the
exact metaphorical words within a sen-
tence. In this paper, we propose an un-
supervised learning method that identi-
fies and interprets metaphors at word-level
without any preprocessing, outperforming
strong baselines in the metaphor identifi-
cation task. Our model extends to inter-
pret the identified metaphors, paraphras-
ing them into their literal counterparts, so
that they can be better translated by ma-
chines. We evaluated this with two popu-
lar translation systems for English to Chi-
nese, showing that our model improved
the systems significantly.

1 Introduction
Metaphor enriches language, playing a significant
role in communication, cognition, and decision
making. Relevant statistics illustrate that about
one third of sentences in typical corpora contain
metaphor expressions (Cameron, 2003; Martin,
2006; Steen et al., 2010; Shutova, 2016). Linguis-
tically, metaphor is defined as a language expres-
sion that uses one or several words to represent an-
other concept, rather than taking their literal mean-
ings of the given words in the context (Lagerwerf
and Meijers, 2008). Computational metaphor pro-
cessing refers to modelling non-literal expressions
(e.g., metaphor, metonymy, and personification)
and is useful for improving many NLP tasks such
as Machine Translation (MT) and Sentiment Anal-
ysis (Rentoumi et al., 2012). For instance, Google

Translate failed in translating devour within a sen-
tence, “She devoured his novels.” (Mohammad
et al., 2016), into Chinese. The term was translated
into吞噬, which takes the literal sense of swallow
and is not understandable in Chinese. Interpreting
metaphors allows us to paraphrase them into literal
expressions which maintain the intended meaning
and are easier to translate.

Metaphor identification approaches based on
word embeddings have become popular (Tsvetkov
et al., 2014; Shutova et al., 2016; Rei et al.,
2017) as they do not rely on hand-crafted knowl-
edge for training. These models follow a sim-
ilar paradigm in which input sentences are first
parsed into phrases and then the metaphoricity
of the phrases is identified; they do not tackle
word-level metaphor. E.g., given the former sen-
tence “She devoured his novels.”, the aforemen-
tioned methods will first parse the sentence into a
verb-direct object phrase devour novel, and then
detect the clash between devour and novel, flag-
ging this phrase as a likely metaphor. However,
which component word is metaphorical cannot be
identified, as important contextual words in the
sentence were excluded while processing these
phrases. Discarding contextual information also
leads to a failure to identify a metaphor when both
words in the phrase are metaphorical, but taken out
of context they appear literal. E.g., “This young
man knows how to climb the social ladder.” (Mo-
hammad et al., 2016) is a metaphorical expression.
However, when the sentence is parsed into a verb-
direct object phrase, climb ladder, it appears lit-
eral.

In this paper, we propose an unsupervised
metaphor processing model which can identify
and interpret linguistic metaphors at the word-
level. Specifically, our model is built upon word
embedding methods (Mikolov et al., 2013) and
uses WordNet (Fellbaum, 1998) for lexical re-



1223

lation acquisition. Our model is distinguished
from existing methods in two aspects. First, our
model is generic which does not constrain the
source domain of metaphor. Second, the devel-
oped model does not rely on any labelled data for
model training, but rather captures metaphor in
an unsupervised, data-driven manner. Linguistic
metaphors are identified by modelling the distance
(in vector space) between the target word’s literal
and metaphorical senses. The metaphorical sense
within a sentence is identified by its surrounding
context within the sentence, using word embed-
ding representations and WordNet. This novel ap-
proach allows our model to operate at the sentence
level without any preprocessing, e.g., dependency
parsing. Taking contexts into account also ad-
dresses the issue that a two-word phrase appears
literal, but it is metaphoric within a sentence (e.g.,
the climb ladder example).

We evaluate our model against three strong
baselines (Melamud et al., 2016; Shutova et al.,
2016; Rei et al., 2017) on the task of metaphor
identification. Extensive experimentation con-
ducted on a publicly available dataset (Moham-
mad et al., 2016) shows that our model sig-
nificantly outperforms the unsupervised learning
baselines (Melamud et al., 2016; Shutova et al.,
2016) on both phrase and sentence evaluation, and
achieves equivalent performance to the state-of-
the-art deep learning baseline (Rei et al., 2017)
on phrase-level evaluation. In addition, while
most of the existing works on metaphor processing
solely evaluate the model performance in terms of
metaphor classification accuracy, we further con-
ducted another set of experiments to evaluate how
metaphor processing can be used for supporting
the task of MT. Human evaluation shows that our
model improves the metaphoric translation sig-
nificantly, by testing on two prominent transla-
tion systems, namely, Google Translate1 and Bing
Translator2. To our best knowledge, this is the
first metaphor processing model that is evaluated
on MT.

To summarise, the contributions of this paper
are two-fold: (1) we proposed a novel frame-
work for metaphor identification which does not
require any preprocessing or annotated corpora
for training; (2) we conducted, to our knowledge,
the first metaphor interpretation study of apply-

1https://translate.google.co.uk
2https://www.bing.com/translator

ing metaphor processing for supporting MT. We
describe related work in §2, followed by our la-
belling method in §4, experimental design in §5,
results in §6 and conclusions in §7.

2 Related Work
A wide range of methods have been applied for
computational metaphor processing. Turney et al.
(2011); Neuman et al. (2013); Assaf et al. (2013)
and Tsvetkov et al. (2014) identified metaphors
by modelling the abstractness and concreteness
of metaphors and non-metaphors, using a ma-
chine usable dictionary called MRC Psycholin-
guistic Database (Coltheart, 1981). They be-
lieved that metaphorical words would be more ab-
stract than literal ones. Some researchers used
topic models to identify metaphors. For instance,
Heintz et al. (2013) used Latent Dirichlet Alloca-
tion (LDA) (Blei et al., 2003) to model source and
target domains, and assumed that sentences con-
taining words from both domains are metaphor-
ical. Strzalkowski et al. (2013) assumed that
metaphorical terms occur out of the topic chain,
where a topic chain is constructed by topical
words that reveal the core discussion of the text.
Shutova et al. (2017) performed metaphorical con-
cept mappings between the source and target do-
mains in multi-languages using both unsupervised
and semi-supervised learning approaches. The
source and target domains are represented by se-
mantic clusters, which are derived through the dis-
tribution of the co-occurrences of words. They
also assumed that when contextual vocabularies
are from different domains then there is likely to
be a metaphor.

There is another line of approaches based on
word embeddings. Generally, these works are not
limited by conceptual domains and hand-crafted
knowledge. Shutova et al. (2016) proposed a
model that identified metaphors by employing
word and image embeddings. The model first
parses sentences into phrases which contain target
words. In their word embedding based approach,
the metaphoricity of a phrase was identified by
measuring the cosine similarity of two component
words in the phrase, based on their input vectors
from Skip-gram word embeddings. If the cosine
similarity is higher than a threshold, the phrase is
identified as literal; otherwise metaphorical. Rei
et al. (2017) identified metaphors by introducing a
deep learning architecture. Instead of using word
input vectors directly, they filtered out noisy in-

https://translate.google.co.uk
https://www.bing.com/translator


1224

T
..

C1
…
Cn
…
Cm

..

Input Hidden Output
CBOW

W i W o

C1
…
Cn
…
Cm

..

T

..

Input Hidden Output
Skip-gram

W i W o

Figure 1: CBOW and Skip-gram framework.

formation in the vector of one word in a phrase,
projecting the word vector into another space via
a sigmoid activation function. The metaphoricity
of the phrases was learnt via training a supervised
deep neural network.

The above word embedding based models,
while demonstrating some success in metaphor
identification, only explored using input vectors,
which might hinder their performance. In addi-
tion, metaphor identification is highly dependent
on its context. Therefore, phrase-level models
(e.g., Tsvetkov et al. (2014); Shutova et al. (2016);
Rei et al. (2017)) are likely to fail in the metaphor
identification task if important contexts are ex-
cluded. In contrast, our model can operate at the
sentence level which takes into account rich con-
text and hence can improve the performance of
metaphor identification.

3 Preliminary: CBOW and Skip-gram
Our metaphor identification framework is built
upon word embedding, which is based on Con-
tinuous Bag of Words (CBOW) and Skip-gram
(Mikolov et al., 2013).

In CBOW (see Figure 1), the input and output lay-
ers are context (C) and centre word (T) one-hot
encodings, respectively. The model is trained by
maximizing the probability of predicting a centre
word, given its context (Rong, 2014):

argmax p(t|c1, ..., cn, ..., cm) (1)

where t is a centre word, cn is the nth context word
of t within a sentence, totally m context words.
CBOW’s hidden layer is defined as:

HCBOW =
1

m
×W i> ×

m∑
n=1

Cn

=
1

m
×

m∑
n=1

vi>c,n (2)

where Cn is the one-hot encoding of the nth con-
text word, vic,n is the nth context word row vec-
tor (input vector) in W i which is a weight matrix
between input and hidden layers. Thus, the hid-
den layer is the transpose of the average of input
vectors of context words. The probability of pre-
dicting a centre word in its context is given by a
softmax function below:

ut =W
o
t
> ×HCBOW = vot

> ×HCBOW (3)

p(t|c1, ..., cn, ..., cm) =
exp(ut)∑V
j=1 exp(uj)

(4)

where W ot is equivalent to the output vector v
o
t

which is essentially a column vector in a weight
matrix W o that is between hidden and output lay-
ers, aligning with the centre word t. V is the size
of vocabulary in the corpus.

The output is a one-hot encoding of the centre
word. W i and W o are updated via back propa-
gation of errors. Therefore, only the value of the
position that represents the centre word’s probabil-
ity, i.e., p(t|c1, ..., cn, ..., cm), will get close to the
value of 1. In contrast, the probability of the rest
of the words in the vocabulary will be close to 0
in every centre word training. W i embeds context
words. Vectors within W i can be viewed as con-
text word embeddings. W o embeds centre words,
vectors in W o can be viewed as centre word em-
beddings.

Skip-gram is the reverse of CBOW (see Fig-
ure 1). The input and output layers are centre word
and context word one-hot encodings, respectively.
The target is to maximize the probability of pre-
dicting each context word, given a centre word:

argmax p(c1, ..., cn, ..., cm|t) (5)

Skip-gram’s hidden layer is defined as:

HSG =W
i> × T = vi>t (6)

where T is the one-hot encoding of the centre
word t. Skip-gram’s hidden layer is equal to the
transpose of a centre word’s input vector vt, as
only the tth row are kept by the operation. The
probability of a context word is:

uc,n =W
o>
c,n ×HSG = vo>c,n ×HSG (7)

p(cn|t) =
exp(uc,n)∑V
j=1 exp(uj)

(8)



1225

(4) S = cos(w*, wt)
literal, if S > threshold

metaphoric, otherwise

(1) Word Embedding
Wiki train

w1
w2
w3
…
wn

..

w1
w2
w3
…
wn

.. ..

(2) Look up
WordNet

A sentence: {wc1, wc2, wt wc3 …}

Context words:
{wc1, wc2, wc3 …}

Target word: 
{wt}

Synonyms: {s1, s2 …}
Hypernyms: {h1, h2 …}

Candidate word set W

(3)

wt 
s1
s2
…
hj

..

wc1 
wc2
wc3 
…

wcm

.. ..

cos( wt , context )
cos( s1 , context )
cos( s2 , context )

…
cos( hj , context )

agrmax w* ∈W
Best fit word

Figure 2: Metaphor identification framework. NB: w∗ =
best fit word, wt = target word.

where c, n is the nth context word, given a centre
word. In Skip-gram, W i aligns to centre words,
while W o aligns to context words. Because the
names of centre word and context word embed-
dings are reversed in CBOW and Skip-gram, we
will uniformly call vectors in W i input vectors vi,
and vectors inW o output vectors vo in the remain-
ing sections. Word embeddings represent both in-
put and output vectors.

4 Methodology
In this section, we present the technical details of
our metaphor processing framework, built upon
two hypotheses. Our first hypothesis (H1) is
that a metaphorical word can be identified, if the
sense the word takes within its context and its lit-
eral sense come from different domains. Such a
hypothesis is based on the theory of Selectional
Preference Violation (Wilks, 1975, 1978) that a
metaphorical item can be found in a violation of
selectional restrictions, where a word does not sat-
isfy its semantic constrains within a context. Our
second hypothesis (H2) is that the literal senses of
words occur more commonly in corpora than their
metaphoric senses (Cameron, 2003; Martin, 2006;
Steen et al., 2010; Shutova, 2016).

Figure 2 depicts an overview of our metaphor
identification framework. The workflow of our
framework is as follows. Step (1) involves training
word embeddings based on a Wikipedia dump3

for obtaining input and output vectors of words.
3https://dumps.wikimedia.org/enwiki/

20170920/

She devoured his novels.

Sense 1
• devour
• devoured
• …

HYPERNYMS
• destroy
• destroyed
• …

• ruin
• ruined
• …

• …

Sense 2
• devour
• devoured
• …

HYPERNYMS
• enjoy
• enjoyed
• …

• bask
• basked
• …

• …

Sense 3
• devour
• devoured
• …

HYPERNYMS
• eat up
• …

• …
SYNONYMS
• down
• …

• …

Sense 4
• devour
• devoured
• …

HYPERNYMS
• raven
• ravened
• …

• pig
• pigged
• …
• …

…

She

his
novels

devour
devoured
enjoy
enjoyed
…

C
andidate set
W

C
ontext w

ords

Figure 3: Given CBOW trained input and output vec-
tors, a target word of devoured, and a context of
She [ ] his novels, cos(vodevoured, v

i
context) = −0.01,

cos(voenjoyed, v
i
context) = 0.02.

In Step (2), given an input sentence, the target
word (i.e., the word in the original text whose
metaphoricity is to be determined) and its con-
text words (i.e., all other words in the sentence
excluding the target word) are separated. We con-
struct a candidate word set W which represents
all the possible senses of the target word. This is
achieved by first extracting the synonyms and di-
rect hypernyms of the target word from WordNet,
and then augmenting the set with the inflections
of the extracted synonyms and hypernyms, as well
as the target word and its inflections. Auxiliary
verbs are excluded from this set, as these words
frequently appear in most sentences with little lex-
ical meaning. In Step (3), we identify the best fit
word, which is defined as the word that represents
the literal sense that the target word is most likely
taking given its context. Finally, in Step (4), we
compute the cosine similarity between the target
word and the best fit word. If the similarity is
above a threshold, the target word will be identi-
fied as literal, otherwise metaphoric (i.e., based on
H1). We will discuss in detail Step (3) and Step (4)
in §4.1.

4.1 Metaphor identification

Step (3): One of the key steps of our metaphor
identification framework is to identify the best fit
word for a target word given its surrounding con-
text. The intuition is that the best fit word will rep-
resent the literal sense that the target word is most
likely taking. E.g., for the sentence “She devoured
his novels.” and the corresponding target word de-
voured, the best fit word is enjoyed, as shown in

https://dumps.wikimedia.org/enwiki/20170920/
https://dumps.wikimedia.org/enwiki/20170920/


1226

Figure 3. Also note that the best fit word could
be the target word itself if the target word is used
literally.

Given a sentence s, let wt be the target word
of the sentence, w∗ ∈ W the best fit word for
wt, and wcontext the surrounding context for wt,
i.e., all the words in s excluding wt. We compute
the context embedding vicontext by averaging out
the input vectors of each context word of wcontext,
based on Eq. 2. Next, we rank each candidate
word k ∈ W by measuring its similarity to the
context input vector vicontext in the vector space.
The candidate word with the highest similarity to
the context is then selected as the best fit word.

w∗ = argmax
k

SIM(vk, vcontext) (9)

where vk is the vector of a candidate word k ∈
W . In contrast to existing word embedding based
methods for metaphor identification which only
make use of input vectors (Shutova et al., 2016;
Rei et al., 2017), we explore using both input
and output vectors of CBOW and Skip-gram em-
beddings when measuring the similarity between
a candidate word and the context. We expect
that using a combination of input and output vec-
tors might work better. Specifically, we have ex-
perimented with four different model variants as
shown below.

SIM-CBOWI = cos(vik,cbow, v
i
context,cbow)

(10)

SIM-CBOWI+O = cos(vok,cbow, v
i
context,cbow)

(11)

SIM-SGI = cos(vik,sg, v
i
context,sg) (12)

SIM-SGI+O = cos(vok,sg, v
i
context,sg) (13)

Here, cos(·) is cosine similarity, cbow is CBOW
word embeddings, sg is Skip-gram word embed-
dings. We have also tried other model variants us-
ing output vectors for vcontext. However, we found
that the models using output vectors for vcontext
(both CBOW and Skip-gram embeddings) do not
improve our framework performance. Due to the
page limit we omitted the results of those models
in this paper.

Step (4): Given a predicted best fit word w∗

identified in Step (3), we then compute the cosine
similarity between the lemmatizations of w∗ and
the target word wt using their input vectors.

SIM(w∗, wt) = cos(viw∗ , v
i
wt) (14)

We give a detailed discussion in §4.2 of our ratio-
nale for using input vectors for Eq. 14.

If the similarity is higher than a threshold (τ )
the target word is considered as literal, otherwise,
metaphorical (based on H1). One benefit of our
approach is that it allows one to paraphrase the
identified metaphorical target word into the best fit
word, representing its literal sense in the context.
Such a feature is useful for supporting other NLP
tasks such as Machine Translation, which we will
explore in §6. In terms of the value of threshold
(τ ), it is empirically determined based on a devel-
opment set. Please refer to §5 for details.

To better explain the workflow of our frame-
work, we now go through an example as illus-
trated in Figure 3. The target word of the input
sentence, “She devoured his novels.” is devoured,
and its the lemmatised form devour has four verbal
senses in WordNet, i.e., destroy completely, enjoy
avidly, eat up completely with great appetite, and
eat greedily. Each of these senses has a set of cor-
responding synonyms and hypernyms. E.g., Sense
3 (eat up completely with great appetite) has syn-
onyms demolish, down, consume, and hypernyms
go through, eat up, finish, and polish off. We then
construct a candidate word setW by including the
synonyms and direct hypernyms of the target word
from WordNet, and then augmenting the set with
the inflections of the extracted synonyms and hy-
pernyms, as well as the target word devour and
its inflections. We then identify the best fit word
given the context she [ ] his novels based on Eq. 9.
Based on H2, literal expressions are more com-
mon than metaphoric ones in corpora. Therefore,
the best fit word is expected to frequently appear
within the given context, and thus represents the
most likely sense of the target word. For exam-
ple, the similarity between enjoy (i.e., the best fit
word) and the the context is higher than that of de-
vour (i.e., the target word), as shown in Figure 3.

4.2 Word embedding: output vectors vs. in-
put vectors

Typically, input vectors are used after training
CBOW and Skip-gram, with output vectors be-
ing abandoned by practical models, e.g., original
word2vec model (Mikolov et al., 2013) and Gen-
sim toolkit (Řehůřek and Sojka, 2010), as these
models are designed for modelling similarities in
semantics. However, we found that using input
vectors to measure cosine similarity between two
words with different POS types in a phrase is sub-



1227

apple

orange

drink

juice

CBOW
Output vec Output vecInput vecInput vec

Skip-gram

Figure 4: Input and output vector visualization. The bluer,
the more negative. The redder, the more positive.

optimal, as words with different POS normally
have different semantics. They tend to be distant
from each other in the input vector space. Tak-
ing Skip-gram for example, empirically, input vec-
tors of words with the same POS, occurring within
the same contexts tend to be close in the vector
space (Mikolov et al., 2013), as they are frequently
updated by back propagating the errors from the
same context words. In contrast, input vectors
of words with different POS, playing different se-
mantic and syntactic roles tend to be distant from
each other, as they seldom occur within the same
contexts, resulting in their input vectors rarely be-
ing updated equally. Our observation is also in line
with Nalisnick et al. (2016), who examine IN-IN,
OUT-OUT and IN-OUT vectors to measure simi-
larity between two words. Nalisnick et al. discov-
ered that two words which are similar by function
or type have higher cosine similarity with IN-IN or
OUT-OUT vectors, while using input and output
vectors for two words (IN-OUT) that frequently
co-occur in the same context (e.g., a sentence) can
obtain a higher similarity score.

For illustrative purpose, we visualize the
CBOW and Skip-gram updates between 4-
dimensional input and output vectors by Wevi4

(Rong, 2014), using a two-sentence corpus,
“Drink apple juice.” and “Drink orange juice.”.
We feed these two sentences to CBOW and Skip-
gram with 500 iterations. As seen Figure 4, the in-
put vectors of apple and orange are similar in both
CBOW and Skip-gram, which are different from
the input vectors of their context words (drink and
juice). However, the output vectors of apple and
orange are similar to the input vectors of drink and
juice.

To summarise, using input vectors to compare
similarity between the best fit word and the tar-
get word is more appropriate (cf. Eq.14), as they

4https://ronxin.github.io/wevi/

tend to have the same types of POS. When measur-
ing the similarity between candidate words and the
context, using output vectors for the former and in-
put vectors for the latter seems to better predict the
best fit word.

5 Experimental settings
Baselines. We compare the performance of
our framework for metaphor identification against
three strong baselines, namely, an unsupervised
word embedding based model by Shutova et al.
(2016), a supervised deep learning model by Rei
et al. (2017), and the Context2Vec model5 (Mela-
mud et al., 2016) which achieves the best perfor-
mance on Microsoft Sentence Completion Chal-
lenge (Zweig and Burges, 2011). Context2Vec
was not designed for processing metaphors, in or-
der to use it for this we plug it into a very similar
framework to that described in Figure 2. We use
Context2Vec to predict the best fit word from the
candidate set, as it similarly uses context to predict
the most likely centre word but with bidirectional
LSTM based context embedding method. After
locating the best fit word with Context2Vec, we
identify the metaphoricity of a target word with
the same method (see Step (4) in §4), so that
we can also apply it for metaphor interpretation.
Note that while Shutova et al. and Rei et al. de-
tect metaphors at the phrase level by identifying
metaphorical phrases, Melamud et al.’s model can
perform metaphor identification and interpretation
on sentences.
Dataset. Evaluation was conducted based on a
dataset developed by Mohammad et al. (2016).
This dataset6, containing 1,230 literal and 409
metaphor sentences, has been widely used for
metaphor identification related research (Shutova
et al., 2016; Rei et al., 2017). There is a verbal tar-
get word annotated by 10 annotators in each sen-
tence. We use two subsets of the Mohammad et al.
set, one for phrase evaluation and one for sentence
evaluation. The phrase evaluation dataset was
kindly provided by Shutova, which consists of 316
metaphorical and 331 literal phrases (subject-verb
and verb-direct object word pairs), parsed from
Mohammad et al.’s dataset. Similar to Shutova
et al. (2016), we use 40 metaphoric and 40 literal
phrases as a development set and the rest as a test

5http://u.cs.biu.ac.il/˜nlp/resources/
downloads/context2vec/

6http://saifmohammad.com/WebPages/
metaphor.html

https://ronxin.github.io/wevi/
http://u.cs.biu.ac.il/~nlp/resources/downloads/context2vec/
http://u.cs.biu.ac.il/~nlp/resources/downloads/context2vec/
http://saifmohammad.com/WebPages/metaphor.html
http://saifmohammad.com/WebPages/metaphor.html


1228

Method P R F1

Phrase

Shutova et al. (2016) 0.67 0.76 0.71
Rei et al. (2017) 0.74 0.76 0.74
SIM-CBOWI+O 0.66 0.78 0.72

SIM-SGI+O 0.68 0.82 0.74*

Sent.

Melamud et al. (2016) 0.60 0.80 0.69
SIM-SGI 0.56 0.95 0.70

SIM-SGI+O 0.62 0.89 0.73
SIM-CBOWI 0.59 0.91 0.72

SIM-CBOWI+O 0.66 0.88 0.75*

Table 1: Metaphor identification results. NB: * denotes that
our model outperforms the baseline significantly, based on
two-tailed paired t-test with p < 0.001.

set.
For sentence evaluation, we select 212

metaphorical sentences whose target words are
annotated with at least 70% agreement. We
also add 212 literal sentences with the highest
agreement. Among the 424 sentences, we form
our development set with 12 randomly selected
metaphoric and 12 literal instances to identify the
threshold for detecting metaphors. The remaining
400 sentences are our testing set.
Word embedding training. We train CBOW and
Skip-gram models on a Wikipedia dump with the
same settings as Shutova et al. (2016) and Rei et al.
(2017). That is, CBOW and Skip-gram models
are trained iteratively 3 times on Wikipedia with
a context window of 5 to learn 100-dimensional
word input and output vectors. We exclude words
with total frequency less than 100. 10 negative
samples are randomly selected for each centre
word training. The word down-sampling rate is
10-5. We use Stanford CoreNLP (Manning et al.,
2014) lemmatized Wikipedia to train word embed-
dings for phrase level evaluation, which is in line
with Shutova et al. (2016). In sentence evaluation,
we use the original Wikipedia for training word
embeddings.

6 Experimental Results

6.1 Metaphor identification

Table 1 shows the performance of our model and
the baselines on the task of metaphor identifica-
tion. All the results for our models are based
on a threshold of 0.6, which is empirically de-
termined based on the developing set. For sen-
tence level metaphor identification, it can be ob-
served that all our models outperform the baseline
(Melamud et al., 2016), with SIM-CBOWI+O giv-
ing the highest F1 score of 75% which is a 6%
gain over the baseline. We also see that mod-

els based on both input and output vectors (i.e.,
SIM-CBOWI+O and SIM-SGI+O) yield better per-
formance than the models based on input vectors
only (i.e., SIM-CBOWI and SIM-SGI ). Such an ob-
servation supports our assumption that using in-
put and output vectors can better model similarity
between words that have different types of POS,
than simply using input vectors. When compar-
ing CBOW and Skip-gram based models, we see
that CBOW based models generally achieve bet-
ter performance in precision whereas Skip-gram
based models perform better in recall.

In terms of phrase level metaphor identifica-
tion, we compare our best performing models (i.e.,
SIM-CBOWI+O and SIM-SGI+O) against the ap-
proaches of Shutova et al. (2016) and Rei et al.
(2017). In contrast to the sentence level eval-
uation in which SIM-CBOWI+O gives the best
performance, SIM-SGI+O performs best for the
phrase level evaluation. This is likely due to the
fact that Skip-gram is trained by using a centre
word to maximise the probability of each context
word, whereas CBOW uses the average of context
word input vectors to maximise the probability of
the centre word. Thus, Skip-gram performs bet-
ter in modelling one-word context, while CBOW
has better performance in modelling multi-context
words. When comparing to the baselines, our
model SIM-SGI+O significantly outperforms the
word embedding based approach by Shutova et al.
(2016), and gives the same performance as the
deep supervised method (Rei et al., 2017) which
requires a large amount of labelled data for train-
ing and cost in training time.

SIM-CBOWI+O and SIM-SGI+O are also evalu-
ated with different thresholds for both phrase and
sentence level metaphor identification. As can be
seen from Table 2, the results are fairly stable
when the threshold is set between 0.5 and 0.9 in
terms of F1.

6.2 Metaphor processing for MT

We believe that one of the key purposes of
metaphor processing is to support other NLP
tasks. Therefore, we conducted another set of ex-
periments to evaluate how metaphor processing
can be used to support English-Chinese machine
translation.

The evaluation task was designed as follows.
From the test set for sentence-level metaphor
identification which contains 200 metaphoric and



1229

τ
Sentence Phrase

P R F1 F1SIM-CBOWI+O F1SIM-SGI+O
0.3 0.75 0.60 0.67 0.56 0.46
0.4 0.69 0.75 0.72 0.65 0.63
0.5 0.67 0.82 0.74 0.71 0.72
0.6 0.66 0.88 0.75 0.72 0.74
0.7 0.64 0.88 0.74 0.72 0.73
0.8 0.63 0.89 0.74 0.72 0.73
0.9 0.63 0.89 0.74 0.71 0.73
1.0 0.50 1.00 0.67 0.65 0.65

Table 2: Model performance vs. different threshold (τ )
settings. NB: the sentence level results are based on
SIM-CBOWI+O .

0.3

0.4

0.5

0.6

0.7

0.8

Literal Metaphoric Overall Literal Metaphoric OverallT
ra

ns
la

tio
n 

ac
cu

ra
cy

Google Bing           

Original sentence
Paraphrased by our model
Paraphrased by the baseline (Melamud et al. 2016)

+0.26
+0.24+0.11

+0.09

Figure 5: Accuracy of metaphor interpretation, evaluated on
Google and Bing Translation.

200 literal sentences, we randomly selected 50
metaphoric and 50 literal sentences to construct a
set SM for the Machine Translation (MT) evalu-
ation task. For each sentence in SM, if it is pre-
dicted as literal by our model, the sentence is kept
unchanged; otherwise, the target word of the sen-
tence is paraphrased with the best fit word (refer to
§4.1 for details). The metaphor identification step
resulted in 42 True Positive (TP) instances where
the ground truth label is metaphoric and 19 False
Positive (FP) instances where the ground truth la-
bel is literal, resulting in a total of 61 instances
predicted as metaphorical by our model. We also
run one of our baseline models, Context2Vec, on
the 61 sentences to predict the best fit words for
comparison. Our hypothesis is that by paraphras-
ing the metaphorically used target word with the
best fit word which expresses the target word’s real
meaning, the performance of translation engines
can be improved.

We test our hypothesis on two popular English-
Chinese MT systems, i.e., the Google and Bing
Translators. We recruited from a UK university 5
Computing Science postgraduate students who are
Chinese native speakers to participate the English-
Chinese MT evaluation task. During the evalua-
tion, subjects were presented with a questionnaire

The ex-boxer's job is to bounce people who want to enter this 
private club.
bounce: eject from the premises
1. 前拳击手的工作是反弹人谁想要进入这个私人俱乐部。
2. 前拳击手的工作是让想要进入这个私人俱乐部的人弹跳。
3. 前拳击手的工作是拒绝谁想要进入这个私人俱乐部的人。
4. 前拳击手的工作是拒绝那些想进入这个私人俱乐部的人。
5. 前拳击手的工作是打人谁想要进入这个私人俱乐部。
6. 前拳击手的工作是打击那些想进入这个私人俱乐部的人。

Good / Bad

Sample Questionnaire

Figure 6: MT-based metaphor interpretation questionnaire.

Acc-met. Acc-lit. Acc-overall

G
oo

gl
e Orig. Sent. 0.34 0.68 0.51

Context2Vec 0.50 0.66 0.58
SIM-CBOWI+O 0.60 0.64 0.62

B
in

g Orig. Sent. 0.42 0.70 0.56
Context2Vec 0.60 0.66 0.63
SIM-CBOWI+O 0.66 0.64 0.65

Table 3: Accuracy of metaphor interpretation, evaluated on
Google and Bing Translation.

containing English-Chinese translations of each of
the 100 randomly selected sentences. For each
sentence predicted as literal (39 out of 100 sen-
tences), there are two corresponding translations
by Google and Bing respectively. For each sen-
tence predicted as metaphoric (61 out of 100 sen-
tences), there are 6 corresponding translations.

An example of the evaluation task is shown
in Figure 6, in which “The ex-boxer’s job is to
bounce people who want to enter this private
club.” is the original sentence, followed by an
WordNet explanation of the target word of the
sentence (i.e., bounce: eject from the premises).
There are 6 translations. No. 1-2 are the orig-
inal sentence translations, translated by Google
Translate (GT) and Bing Translator (BT). The tar-
get word, bounce, is translated, taking the sense
of (1) physically rebounding like a ball (反弹),
(2) jumping (弹跳). No. 3-4 are SIM-CBOWI+O
paraphrased sentences, translated by GT and BT,
respectively, taking the sense of refusing (拒绝).
No. 5-6 are Context2Vec paraphrased sentences,
translated by GT and BT, respectively, taking the
sense of hitting (5.打; 6.打击).

Subjects were instructed to determine if the
translation of a target word can correctly represent
its sense within the translated sentence, matching
its context (cohesion) in Chinese. Note that we
evaluate the translation of the target word, there-
fore, errors in context word translations are ig-
nored by the subjects. Finally, a label is taken
agreed by more than half annotators. Noticeably,



1230

based on our observation, there is always a Chi-
nese word corresponding to an English target word
in MT, as the annotated target word normally rep-
resents important information in the sentence in
the applied dataset.

We use translation accuracy as a measure to
evaluate the improvement on MT systems after
metaphor processing. The accuracy is calcu-
lated by dividing the number of correctly trans-
lated instances by the total number of instances.
As can be seen in Figure 5 and Table 3, after
paraphrasing the metaphorical sentences with the
SIM-CBOWI+O model, the translation improve-
ment for the metaphorical class is dramatic for
both MT systems, i.e., 26% improvement for
Google Translate and 24% for Bing Translate.
In terms of the literal class, there is some small
drop (i.e., 4-6%) in accuracy. This is due to the
fact that some literals were wrongly identified as
metaphors and hence error was introduced dur-
ing paraphrasing. Nevertheless, with our model,
the overall translation performance of both Google
and Bing Translate are significantly improved by
11% and 9%, respectively. Our baseline model
Context2Vec also improves the translation accu-
racy, but is 2-4 % lower than our model in terms of
overall accuracy. In summary, the experimental re-
sults show the effectiveness of applying metaphor
processing for supporting Machine Translation.

7 Conclusion
We proposed a framework that identifies and in-
terprets metaphors at word-level with an unsuper-
vised learning approach. Our model outperforms
the unsupervised baselines in both sentence and
phrase evaluations. The interpretation of the iden-
tified metaphorical words given by our model also
contributes to Google and Bing translation sys-
tems with 11% and 9% accuracy improvements.

The experiments show that using words’ hy-
pernyms and synonyms in WordNet can para-
phrase metaphors into their literal counterparts, so
that the metaphors can be correctly identified and
translated. To our knowledge, this is the first study
that evaluates a metaphor processing method on
Machine Translation. We believe that compared
with simply identifying metaphors, metaphor pro-
cessing applied in practical tasks, can be more
valuable in the real world. Additionally, our ex-
periments demonstrate that using a candidate word
output vector instead of its input vector to model
the similarity between the candidate word and its

context yields better results in the best fit word (the
literal counterpart of the metaphor) identification.

CBOW and Skip-gram do not consider the dis-
tance between a context word and a centre word
in a sentence, i.e., context word contributes to pre-
dict the centre word equally. Future work will in-
troduce weighted CBOW and Skip-gram to learn
positional information within sentences.

Acknowledgments
This work is supported by the award made by the
UK Engineering and Physical Sciences Research
Council (Grant number: EP/P005810/1).

References
Dan Assaf, Yair Neuman, Yohai Cohen, Shlomo Arg-

amon, Newton Howard, Mark Last, Ophir Frieder,
and Moshe Koppel. 2013. Why “dark thoughts”
aren’t really dark: A novel algorithm for metaphor
identification. In Computational Intelligence, Cog-
nitive Algorithms, Mind, and Brain (CCMB), 2013
IEEE Symposium on. IEEE, pages 60–65.

David M Blei, Andrew Y Ng, and Michael I Jordan.
2003. Latent Dirichlet allocation. Journal of ma-
chine Learning research 3(Jan):993–1022.

Lynne Cameron. 2003. Metaphor in educational dis-
course. A&C Black.

Max Coltheart. 1981. The MRC psycholinguistic
database. The Quarterly Journal of Experimental
Psychology 33(4):497–505.

Christiane Fellbaum. 1998. WordNet: An Electronic
Lexical Database. Bradford Books.

Ilana Heintz, Ryan Gabbard, Mahesh Srinivasan, David
Barner, Donald S Black, Marjorie Freedman, and
Ralph Weischedel. 2013. Automatic extraction of
linguistic metaphor with LDA topic modeling. In
Proceedings of the First Workshop on Metaphor in
NLP (ACL 2013). pages 58–66.

Luuk Lagerwerf and Anoe Meijers. 2008. Open-
ness in metaphorical and straightforward advertise-
ments: Appreciation effects. Journal of Advertising
37(2):19–30.

Christopher Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven Bethard, and David McClosky.
2014. The Stanford CoreNLP natural language pro-
cessing toolkit. In Proceedings of 52nd Annual
Meeting of the Association for Computational Lin-
guistics: System Demonstrations. pages 55–60.

James H Martin. 2006. A corpus-based analysis of
context effects on metaphor comprehension. Tech-
nical Report CU-CS-738-94, Boulder: University of
Colorado: Computer Science Department.



1231

Oren Melamud, Jacob Goldberger, and Ido Dagan.
2016. context2vec: Learning generic context em-
bedding with bidirectional LSTM. In Proceedings
of the 20th SIGNLL Conference on Computational
Natural Language Learning (CoNLL 2016). pages
51–61.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013. Efficient estimation of word rep-
resentations in vector space. Proceedings of Inter-
national Conference on Learning Representations
(ICLR 2013) .

Saif M Mohammad, Ekaterina Shutova, and Peter D
Turney. 2016. Metaphor as a medium for emo-
tion: An empirical study. Proceedings of the Joint
Conference on Lexical and Computational Seman-
tics (*SEM 2016) page 23.

Eric Nalisnick, Bhaskar Mitra, Nick Craswell, and
Rich Caruana. 2016. Improving document ranking
with dual word embeddings. In Proceedings of the
25th International Conference Companion on World
Wide Web. International World Wide Web Confer-
ences Steering Committee, pages 83–84.

Yair Neuman, Dan Assaf, Yohai Cohen, Mark Last,
Shlomo Argamon, Newton Howard, and Ophir
Frieder. 2013. Metaphor identification in large texts
corpora. PloS one 8(4):e62343.

Radim Řehůřek and Petr Sojka. 2010. Software frame-
work for topic modelling with large corpora. In
Proceedings of the LREC 2010 Workshop on New
Challenges for NLP Frameworks. ELRA, Valletta,
Malta, pages 45–50. http://is.muni.cz/
publication/884893/en.

Marek Rei, Luana Bulat, Douwe Kiela, and Ekaterina
Shutova. 2017. Grasping the finer point: A su-
pervised similarity network for metaphor detection.
Proceedings of the 2017 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2017) pages 1537–1546.

Vassiliki Rentoumi, George A Vouros, Vangelis
Karkaletsis, and Amalia Moser. 2012. Investigat-
ing metaphorical language in sentiment analysis: A
sense-to-sentiment perspective. ACM Transactions
on Speech and Language Processing (TSLP) 9(3):6.

Xin Rong. 2014. word2vec parameter learning ex-
plained. arXiv preprint arXiv:1411.2738 .

Ekaterina Shutova. 2016. Design and evaluation of
metaphor processing systems. Computational Lin-
guistics .

Ekaterina Shutova, Douwe Kiela, and Jean Maillard.
2016. Black holes and white rabbits: Metaphor
identification with visual features. Proceedings of
the 15th Annual Conference of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies (NAACL-
HLT 2016) pages 160–170.

Ekaterina Shutova, Lin Sun, Elkin Darı́o Gutiérrez, Pa-
tricia Lichtenstein, and Srini Narayanan. 2017. Mul-
tilingual metaphor processing: Experiments with
semi-supervised and unsupervised learning. Com-
putational Linguistics 43(1):71–123.

Gerard J Steen, Aletta G Dorst, J Berenike Herrmann,
Anna Kaal, Tina Krennmayr, and Trijntje Pasma.
2010. A method for linguistic metaphor identifica-
tion: From MIP to MIPVU, volume 14. John Ben-
jamins Publishing.

Tomek Strzalkowski, George Aaron Broadwell, Sarah
Taylor, Laurie Feldman, Samira Shaikh, Ting Liu,
Boris Yamrom, Kit Cho, Umit Boz, Ignacio Cases,
et al. 2013. Robust extraction of metaphor from
novel data. In Proceedings of the First Workshop
on Metaphor in NLP (ACL 2013). pages 67–76.

Yulia Tsvetkov, Leonid Boytsov, Anatole Gershman,
Eric Nyberg, and Chris Dyer. 2014. Metaphor detec-
tion with cross-lingual model transfer. Proceedings
of the 52nd Annual Meeting of the Association for
Computational Linguistics (ACL 2014) pages 248–
258.

Peter D Turney, Yair Neuman, Dan Assaf, and Yohai
Cohen. 2011. Literal and metaphorical sense identi-
fication through concrete and abstract context. Pro-
ceedings of the Conference on Empirical Methods in
Natural Language Processing (EMNLP 2011) pages
680–690.

Yorick Wilks. 1975. A preferential, pattern-seeking,
semantics for natural language inference. Artificial
Intelligence 6(1):53–74.

Yorick Wilks. 1978. Making preferences more active.
Artificial Intelligence 11(3):197–223.

Geoffrey Zweig and Christopher JC Burges. 2011. The
Microsoft research sentence completion challenge.
Technical report, Technical Report MSR-TR-2011-
129, Microsoft.

http://is.muni.cz/publication/884893/en
http://is.muni.cz/publication/884893/en

