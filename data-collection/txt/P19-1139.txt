



















































ERNIE: Enhanced Language Representation with Informative Entities


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 1441–1451
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

1441

ERNIE: Enhanced Language Representation with Informative Entities

Zhengyan Zhang1,2,3∗, Xu Han1,2,3∗, Zhiyuan Liu1,2,3†, Xin Jiang4, Maosong Sun1,2,3, Qun Liu4
1Department of Computer Science and Technology, Tsinghua University, Beijing, China

2Institute for Artificial Intelligence, Tsinghua University, Beijing, China
3State Key Lab on Intelligent Technology and Systems, Tsinghua University, Beijing, China

4Huawei Noah’s Ark Lab
{zhangzhengyan14,hanxu17}@mails.tsinghua.edu.cn

Abstract

Neural language representation models such
as BERT pre-trained on large-scale corpora
can well capture rich semantic patterns from
plain text, and be fine-tuned to consistently im-
prove the performance of various NLP tasks.
However, the existing pre-trained language
models rarely consider incorporating knowl-
edge graphs (KGs), which can provide rich
structured knowledge facts for better language
understanding. We argue that informative en-
tities in KGs can enhance language represen-
tation with external knowledge. In this pa-
per, we utilize both large-scale textual cor-
pora and KGs to train an enhanced language
representation model (ERNIE), which can
take full advantage of lexical, syntactic, and
knowledge information simultaneously. The
experimental results have demonstrated that
ERNIE achieves significant improvements on
various knowledge-driven tasks, and mean-
while is comparable with the state-of-the-art
model BERT on other common NLP tasks.
The source code and experiment details of
this paper can be obtained from https://
github.com/thunlp/ERNIE.

1 Introduction

Pre-trained language representation models, in-
cluding feature-based (Mikolov et al., 2013; Pen-
nington et al., 2014; Peters et al., 2017, 2018) and
fine-tuning (Dai and Le, 2015; Howard and Ruder,
2018; Radford et al., 2018; Devlin et al., 2019)
approaches, can capture rich language informa-
tion from text and then benefit many NLP appli-
cations. BERT (Devlin et al., 2019), as one of the
most recently proposed models, obtains the state-
of-the-art results on various NLP applications by
simple fine-tuning, including named entity recog-
nition (Sang and De Meulder, 2003), question

∗ indicates equal contribution
† Corresponding author: Z.Liu(liuzy@tsinghua.edu.cn)

is_ais_a

Song Book
auth

or
composer

Bob Dylan

Chronicles:
Volume OneBlowin’ in the wind

Songwriter Writer

is_ais_a

Bob Dylan wrote Blowin’ in the Wind in 1962, and wrote Chronicles: Volume One in 2004. 

Figure 1: An example of incorporating extra
knowledge information for language understand-
ing. The solid lines present the existing knowl-
edge facts. The red dotted lines present the facts
extracted from the sentence in red. The green dot-
dash lines present the facts extracted from the sen-
tence in green.

answering (Rajpurkar et al., 2016; Zellers et al.,
2018), natural language inference (Bowman et al.,
2015), and text classification (Wang et al., 2018).

Although pre-trained language representation
models have achieved promising results and
worked as a routine component in many NLP
tasks, they neglect to incorporate knowledge in-
formation for language understanding. As shown
in Figure 1, without knowing Blowin’ in the Wind
and Chronicles: Volume One are song and book
respectively, it is difficult to recognize the two oc-
cupations of Bob Dylan, i.e., songwriter and
writer, on the entity typing task. Furthermore,
it is nearly impossible to extract the fine-grained
relations, such as composer and author on
the relation classification task. For the existing
pre-trained language representation models, these
two sentences are syntactically ambiguous, like
“UNK wrote UNK in UNK”. Hence, considering
rich knowledge information can lead to better lan-
guage understanding and accordingly benefits var-
ious knowledge-driven applications, e.g. entity
typing and relation classification.

For incorporating external knowledge into lan-
guage representation models, there are two main

https://github.com/thunlp/ERNIE
https://github.com/thunlp/ERNIE


1442

challenges. (1) Structured Knowledge Encod-
ing: regarding to the given text, how to effectively
extract and encode its related informative facts in
KGs for language representation models is an im-
portant problem; (2) Heterogeneous Information
Fusion: the pre-training procedure for language
representation is quite different from the knowl-
edge representation procedure, leading to two in-
dividual vector spaces. How to design a special
pre-training objective to fuse lexical, syntactic,
and knowledge information is another challenge.

To overcome the challenges mentioned above,
we propose Enhanced Language RepresentatioN
with Informative Entities (ERNIE), which pre-
trains a language representation model on both
large-scale textual corpora and KGs:

(1) For extracting and encoding knowledge in-
formation, we firstly recognize named entity men-
tions in text and then align these mentions to their
corresponding entities in KGs. Instead of directly
using the graph-based facts in KGs, we encode the
graph structure of KGs with knowledge embed-
ding algorithms like TransE (Bordes et al., 2013),
and then take the informative entity embeddings
as input for ERNIE. Based on the alignments be-
tween text and KGs, ERNIE integrates entity rep-
resentations in the knowledge module into the un-
derlying layers of the semantic module.

(2) Similar to BERT, we adopt the masked lan-
guage model and the next sentence prediction as
the pre-training objectives. Besides, for the bet-
ter fusion of textual and knowledge features, we
design a new pre-training objective by randomly
masking some of the named entity alignments in
the input text and asking the model to select ap-
propriate entities from KGs to complete the align-
ments. Unlike the existing pre-trained language
representation models only utilizing local context
to predict tokens, our objectives require models
to aggregate both context and knowledge facts for
predicting both tokens and entities, and lead to a
knowledgeable language representation model.

We conduct experiments on two knowledge-
driven NLP tasks, i.e., entity typing and relation
classification. The experimental results show that
ERNIE significantly outperforms the state-of-the-
art model BERT on these knowledge-driven tasks,
by taking full advantage of lexical, syntactic, and
knowledge information. We also evaluate ERNIE
on other common NLP tasks, and ERNIE still
achieves comparable results.

2 Related Work

Many efforts are devoted to pre-training lan-
guage representation models for capturing lan-
guage information from text and then utilizing
the information for specific NLP tasks. These
pre-training approaches can be divided into two
classes, i.e., feature-based approaches and fine-
tuning approaches.

The early work (Collobert and Weston, 2008;
Mikolov et al., 2013; Pennington et al., 2014)
focuses on adopting feature-based approaches to
transform words into distributed representations.
As these pre-trained word representations capture
syntactic and semantic information in textual cor-
pora, they are often used as input embeddings and
initialization parameters for various NLP mod-
els, and offer significant improvements over ran-
dom initialization parameters (Turian et al., 2010).
Since these word-level models often suffer from
the word polysemy, Peters et al. (2018) further
adopt the sequence-level model (ELMo) to capture
complex word features across different linguistic
contexts and use ELMo to generate context-aware
word embeddings.

Different from the above-mentioned feature-
based language approaches only using the pre-
trained language representations as input features,
Dai and Le (2015) train auto-encoders on unla-
beled text, and then use the pre-trained model
architecture and parameters as a starting point
for other specific NLP models. Inspired by Dai
and Le (2015), more pre-trained language repre-
sentation models for fine-tuning have been pro-
posed. Howard and Ruder (2018) present AWD-
LSTM (Merity et al., 2018) to build a univer-
sal language model (ULMFiT). Radford et al.
(2018) propose a generative pre-trained Trans-
former (Vaswani et al., 2017) (GPT) to learn lan-
guage representations. Devlin et al. (2019) pro-
pose a deep bidirectional model with multiple-
layer Transformers (BERT), which achieves the
state-of-the-art results for various NLP tasks.

Though both feature-based and fine-tuning lan-
guage representation models have achieved great
success, they ignore the incorporation of knowl-
edge information. As demonstrated in recent
work, injecting extra knowledge information can
significantly enhance original models, such as
reading comprehension (Mihaylov and Frank,
2018; Zhong et al., 2018), machine transla-
tion (Zaremoodi et al., 2018), natural language



1443

e
(i�1)
1 e

(i�1)
2

bob dylan wrote

w
(i�1)
1 w

(i�1)
2 w

(i�1)
3 ··· w(i�1)n

1962

Multi-Head Attention Multi-Head Attention 

Information Fusion

w
(i)
1 w

(i)
2

e
(i)
1

w(i)n

e
(i)
2

w
(i)
3 e

(i)
1 e

(i)
2

ẽ
(i)
1 ẽ

(i)
2

w̃
(i)
1 w̃

(i)
2 w̃

(i)
3 w̃

(i)
n

···

···
ẽ
(i)
2

Token Input Entity Input

Token Output Entity Output

Bob Dylan wrote Blowin’ in the Wind in 1962

blow

w
(i�1)
4

w̃
(i)
4

w
(i)
4

Multi-Head
Attention

Feed
Forward

Nx

Multi-Head
Attention

Information
Fusion

Token Input

Multi-Head
Attention

Entity Input

Mx

Token Output Entity Output

Blowin’ in the Wind

ẽ
(i)
1

Bob Dylan

Aggregator

Transformer

Aggregator

(a) Model Achitecture (b) Aggregator

K-Encoder

T-Encoder

Figure 2: The left part is the architecture of ERNIE. The right part is the aggregator for the mutual
integration of the input of tokens and entities. Information fusion layer takes two kinds of input: one is the
token embedding, and the other one is the concatenation of the token embedding and entity embedding.
After information fusion, it outputs new token embeddings and entity embeddings for the next layer.

inference (Chen et al., 2018), knowledge ac-
quisition (Han et al., 2018a), and dialog sys-
tems (Madotto et al., 2018). Hence, we argue that
extra knowledge information can effectively ben-
efit existing pre-training models. In fact, some
work has attempted to joint representation learn-
ing of words and entities for effectively lever-
aging external KGs and achieved promising re-
sults (Wang et al., 2014; Toutanova et al., 2015;
Han et al., 2016; Yamada et al., 2016; Cao et al.,
2017, 2018). Sun et al. (2019) propose the knowl-
edge masking strategy for masked language model
to enhance language representation by knowl-
edge 1. In this paper, we further utilize both cor-
pora and KGs to train an enhanced language rep-
resentation model based on BERT.

3 Methodology

In this section, we present the overall framework
of ERNIE and its detailed implementation, includ-
ing the model architecture in Section 3.2, the novel
pre-training task designed for encoding informa-
tive entities and fusing heterogeneous information
in Section 3.4, and the details of the fine-tuning
procedure in Section 3.5.

1It is a coincidence that both Sun et al. (2019) and we
chose ERNIE as the model names, which follows the inter-
esting naming habits like ELMo and BERT. Sun et al. (2019)
released their code on March 16th and submitted their paper
to Arxiv on April 19th while we submitted our paper to ACL
whose deadline is March 4th.

3.1 Notations

We denote a token sequence as {w1, . . . , wn} 2,
where n is the length of the token sequence.
Meanwhile, we denote the entity sequence align-
ing to the given tokens as {e1, . . . , em}, where m
is the length of the entity sequence. Note that m
is not equal to n in most cases, as not every to-
ken can be aligned to an entity in KGs. Further-
more, we denote the whole vocabulary containing
all tokens as V , and the entity list containing all
entities in KGs as E . If a token w ∈ V has a corre-
sponding entity e ∈ E , their alignment is defined
as f(w) = e. In this paper, we align an entity to
the first token in its named entity phrase, as shown
in Figure 2.

3.2 Model Architecture

As shown in Figure 2, the whole model architec-
ture of ERNIE consists of two stacked modules:
(1) the underlying textual encoder (T-Encoder)
responsible to capture basic lexical and syntac-
tic information from the input tokens, and (2) the
upper knowledgeable encoder (K-Encoder) re-
sponsible to integrate extra token-oriented knowl-
edge information into textual information from the
underlying layer, so that we can represent hetero-
geneous information of tokens and entities into a
united feature space. Besides, we denote the num-
ber of T-Encoder layers as N , and the number

2In this paper, tokens are at the subword level.



1444

of K-Encoder layers as M .
To be specific, given a token sequence
{w1, . . . , wn} and its corresponding entity se-
quence {e1, . . . , em}, the textual encoder firstly
sums the token embedding, segment embedding,
positional embedding for each token to compute
its input embedding, and then computes lexical
and syntactic features {w1, . . . ,wn} as follows,

{w1, . . . ,wn} = T-Encoder({w1, . . . , wn}), (1)

where T-Encoder(·) is a multi-layer bidirec-
tional Transformer encoder. As T-Encoder(·) is
identical to its implementation in BERT and BERT
is prevalent, we exclude a comprehensive descrip-
tion of this module and refer readers to Devlin
et al. (2019) and Vaswani et al. (2017).

After computing {w1, . . . ,wn}, ERNIE adopts
a knowledgeable encoder K-Encoder to in-
ject the knowledge information into language
representation. To be specific, we repre-
sent {e1, . . . , em} with their entity embeddings
{e1, . . . , em}, which are pre-trained by the effec-
tive knowledge embedding model TransE (Bor-
des et al., 2013). Then, both {w1, . . . ,wn} and
{e1, . . . , em} are fed into K-Encoder for fus-
ing heterogeneous information and computing fi-
nal output embeddings,

{wo1, . . . ,won}, {eo1, . . . , eon} = K-Encoder(
{w1, . . . ,wn}, {e1, . . . , em}).

(2)

{wo1, . . . ,won} and {eo1, . . . , eon} will be used as
features for specific tasks. More details of the
knowledgeable encoder K-Encoder will be in-
troduced in Section 3.3.

3.3 Knowledgeable Encoder

As shown in Figure 2, the knowledgeable en-
coder K-Encoder consists of stacked aggrega-
tors, which are designed for encoding both to-
kens and entities as well as fusing their hetero-
geneous features. In the i-th aggregator, the in-
put token embeddings {w(i−1)1 , . . . ,w

(i−1)
n } and

entity embeddings {e(i−1)1 , . . . , e
(i−1)
m } from the

preceding aggregator are fed into two multi-head
self-attentions (MH-ATTs) (Vaswani et al., 2017)
respectively,

{w̃(i)1 , . . . , w̃
(i)
n } = MH-ATT({w

(i−1)
1 , . . . ,w

(i−1)
n }),

{ẽ(i)1 , . . . , ẽ
(i)
m } = MH-ATT({e

(i−1)
1 , . . . , e

(i−1)
m }).

(3)

Then, the i-th aggregator adopts an information
fusion layer for the mutual integration of the token
and entity sequence, and computes the output em-
bedding for each token and entity. For a token wj
and its aligned entity ek = f(wj), the information
fusion process is as follows,

hj = σ(W̃
(i)
t w̃

(i)
j + W̃

(i)
e ẽ

(i)
k + b̃

(i)),

w
(i)
j = σ(W

(i)
t hj + b

(i)
t ),

e
(i)
k = σ(W

(i)
e hj + b

(i)
e ).

(4)

where hj is the inner hidden state integrating the
information of both the token and the entity. σ(·)
is the non-linear activation function, which usu-
ally is the GELU function (Hendrycks and Gim-
pel, 2016). For the tokens without corresponding
entities, the information fusion layer computes the
output embeddings without integration as follows,

hj = σ(W̃
(i)
t w̃

(i)
j + b̃

(i)),

w
(i)
j = σ(W

(i)
t hj + b

(i)
t ).

(5)

For simplicity, the i-th aggregator operation is
denoted as follows,

{w(i)1 , . . . ,w
(i)
n }, {e

(i)
1 , . . . , e

(i)
m } = Aggregator(

{w(i−1)1 , . . . ,w
(i−1)
n }, {e

(i−1)
1 , . . . , e

(i−1)
m }).

(6)

The output embeddings of both tokens and entities
computed by the top aggregator will be used as
the final output embeddings of the knowledgeable
encoder K-Encoder.

3.4 Pre-training for Injecting Knowledge

In order to inject knowledge into language rep-
resentation by informative entities, we propose a
new pre-training task for ERNIE, which randomly
masks some token-entity alignments and then re-
quires the system to predict all corresponding en-
tities based on aligned tokens. As our task is
similar to training a denoising auto-encoder (Vin-
cent et al., 2008), we refer to this procedure as
a denoising entity auto-encoder (dEA). Consider-
ing that the size of E is quite large for the soft-
max layer, we thus only require the system to pre-
dict entities based on the given entity sequence in-
stead of all entities in KGs. Given the token se-
quence {w1, . . . , wn} and its corresponding entity
sequence {e1, . . . , em}, we define the aligned en-
tity distribution for the token wi as follows,

p(ej |wi) =
exp(linear(woi ) · ej)∑m

k=1 exp(linear(w
o
i ) · ek)

, (7)



1445

Mark Twain wrote The Million Pound Bank Note in 1893.
Input for Common NLP tasks:

mark twain wrote the[CLS] million pound bank note in 1893

Input for Entity Typing:

wrote the[CLS] million pound bank note in 1893[ENT] mark twain [ENT]

Input for Relation Classification:

wrote the[CLS] million pound bank note in 1893[HD] mark twain [HD] [TL] [TL]

. [SEP]

. [SEP]

. [SEP]

Figure 3: Modifying the input sequence for the specific tasks. To align tokens among different types of
input, we use dotted rectangles as placeholder. The colorful rectangles present the specific mark tokens.

where linear(·) is a linear layer. Eq. 7 will be
used to compute the cross-entropy loss function
for dEA.

Considering that there are some errors in token-
entity alignments, we perform the following oper-
ations for dEA: (1) In 5% of the time, for a given
token-entity alignment, we replace the entity with
another random entity, which aims to train our
model to correct the errors that the token is aligned
with a wrong entity; (2) In 15% of the time, we
mask token-entity alignments, which aims to train
our model to correct the errors that the entity align-
ment system does not extract all existing align-
ments; (3) In the rest of the time, we keep token-
entity alignments unchanged, which aims to en-
courage our model to integrate the entity informa-
tion into token representations for better language
understanding.

Similar to BERT, ERNIE also adopts the
masked language model (MLM) and the next sen-
tence prediction (NSP) as pre-training tasks to en-
able ERNIE to capture lexical and syntactic infor-
mation from tokens in text. More details of these
pre-training tasks can be found from Devlin et al.
(2019). The overall pre-training loss is the sum of
the dEA, MLM and NSP loss.

3.5 Fine-tuning for Specific Tasks

As shown in Figure 3, for various common NLP
tasks, ERNIE can adopt the fine-tuning procedure
similar to BERT. We can take the final output em-
bedding of the first token, which corresponds to
the special [CLS] token, as the representation of
the input sequence for specific tasks. For some
knowledge-driven tasks (e.g., relation classifica-
tion and entity typing), we design special fine-
tuning procedure:

For relation classification, the task requires sys-
tems to classify relation labels of given entity pairs
based on context. The most straightforward way

to fine-tune ERNIE for relation classification is
to apply the pooling layer to the final output em-
beddings of the given entity mentions, and repre-
sent the given entity pair with the concatenation
of their mention embeddings for classification. In
this paper, we design another method, which mod-
ifies the input token sequence by adding two mark
tokens to highlight entity mentions. These extra
mark tokens play a similar role like position em-
beddings in the conventional relation classification
models (Zeng et al., 2015). Then, we also take the
[CLS] token embedding for classification. Note
that we design different tokens [HD] and [TL] for
head entities and tail entities respectively.

The specific fine-tuning procedure for entity
typing is a simplified version of relation classifica-
tion. As previous typing models make full use of
both context embeddings and entity mention em-
beddings (Shimaoka et al., 2016; Yaghoobzadeh
and Schütze, 2017; Xin et al., 2018), we argue
that the modified input sequence with the mention
mark token [ENT] can guide ERNIE to combine
both context information and entity mention infor-
mation attentively.

4 Experiments

In this section, we present the details of pre-
training ERNIE and the fine-tuning results on
five NLP datasets, which contain both knowledge-
driven tasks and the common NLP tasks.

4.1 Pre-training Dataset

The pre-training procedure primarily acts in accor-
dance with the existing literature on pre-training
language models. For the large cost of training
ERNIE from scratch, we adopt the parameters of
BERT released by Google3 to initialize the Trans-
former blocks for encoding tokens. Since pre-

3https://github.com/google-research/bert



1446

training is a multi-task procedure consisting of
NSP, MLM, and dEA, we use English Wikipedia
as our pre-training corpus and align text to Wiki-
data. After converting the corpus into the format-
ted data for pre-training, the annotated input has
nearly 4, 500M subwords and 140M entities, and
discards the sentences having less than 3 entities.

Before pre-training ERNIE, we adopt the
knowledge embeddings trained on Wikidata4 by
TransE as the input embeddings for entities. To
be specific, we sample part of Wikidata which
contains 5, 040, 986 entities and 24, 267, 796 fact
triples. The entity embeddings are fixed during
training and the parameters of the entity encoding
modules are all initialized randomly.

4.2 Parameter Settings and Training Details

In this work, we denote the hidden dimension of
token embeddings and entity embeddings as Hw,
He respectively, and the number of self-attention
heads as Aw, Ae respectively. In detail, we have
the following model size: N = 6,M = 6, Hw =
768, He = 100, Aw = 12, Ae = 4. The total
parameters are about 114M.

The total amount of parameters of BERTBASE
is about 110M, which means the knowledgeable
module of ERNIE is much smaller than the lan-
guage module and has little impact on the run-time
performance. And, we only pre-train ERNIE on
the annotated corpus for one epoch. To accelerate
the training process, we reduce the max sequence
length from 512 to 256 as the computation of self-
attention is a quadratic function of the length. To
keep the number of tokens in a batch as same as
BERT, we double the batch size to 512. Except
for setting the learning rate as 5e−5, we largely
follow the pre-training hyper-parameters used in
BERT. For fine-tuning, most hyper-parameters are
the same as pre-training, except batch size, learn-
ing rate, and number of training epochs. We find
the following ranges of possible values work well
on the training datasets with gold annotations, i.e.,
batch size: 32, learning rate (Adam): 5e−5, 3e−5,
2e−5, number of epochs ranging from 3 to 10.

We also evaluate ERNIE on the distantly super-
vised dataset, i.e., FIGER (Ling et al., 2015). As
the powerful expression ability of deeply stacked
Transformer blocks, we found small batch size
would lead the model to overfit the training data.
Hence, we use a larger batch size and less train-

4https://www.wikidata.org/

Dataset Train Develop Test Type

FIGER 2,000,000 10,000 563 113
Open Entity 2,000 2,000 2,000 6

Table 1: The statistics of the entity typing datasets
FIGER and Open Entity.

Model Acc. Macro Micro

NFGEC (Attentive) 54.53 74.76 71.58
NFGEC (LSTM) 55.60 75.15 71.73
BERT 52.04 75.16 71.63

ERNIE 57.19 76.51 73.39

Table 2: Results of various models on FIGER (%).

ing epochs to avoid overfitting, and keep the range
of learning rate unchanged, i.e., batch size: 2048,
number of epochs: 2, 3.

As most datasets do not have entity annotations,
we use TAGME (Ferragina and Scaiella, 2010) to
extract the entity mentions in the sentences and
link them to their corresponding entities in KGs.

4.3 Entity Typing
Given an entity mention and its context, entity typ-
ing requires systems to label the entity mention
with its respective semantic types. To evaluate
performance on this task, we fine-tune ERNIE on
two well-established datasets FIGER (Ling et al.,
2015) and Open Entity (Choi et al., 2018). The
training set of FIGER is labeled with distant su-
pervision, and its test set is annotated by human.
Open Entity is a completely manually-annotated
dataset. The statistics of these two datasets are
shown in Table 1. We compare our model with
the following baseline models for entity typing:

NFGEC. NFGEC is a hybrid model proposed
by Shimaoka et al. (2016). NFGEC combines the
representations of entity mention, context and ex-
tra hand-craft features as input, and is the state-
of-the-art model on FIGER. As this paper focuses
on comparing the general language representation
abilities of various neural models, we thus do not
use the hand-craft features in this work.

UFET. For Open Entity, we add a new hybrid
model UFET (Choi et al., 2018) for comparison.
UFET is proposed with the Open Entity dataset,
which uses a Bi-LSTM for context representation
instead of two Bi-LSTMs separated by entity men-
tions in NFGEC.

Besides NFGEC and UFET, we also report the
result of fine-tuning BERT with the same input
format introduced in Section 3.5 for fair com-



1447

Model P R F1

NFGEC (LSTM) 68.80 53.30 60.10
UFET 77.40 60.60 68.00
BERT 76.37 70.96 73.56

ERNIE 78.42 72.90 75.56

Table 3: Results of various models on Open Entity (%).

Dataset Train Develop Test Relation

FewRel 8,000 16,000 16,000 80
TACRED 68,124 22,631 15,509 42

Table 4: The statistics of the relation classification
datasets FewRel and TACRED.

parison. Following the same evaluation criteria
used in the previous work, we compare NFGEC,
BERT, ERNIE on FIGER, and adopt strict accu-
racy, loose macro, loose micro scores for evalua-
tion. We compare NFGEC, BERT, UFET, ERNIE
on Open Entity, and adopt precision, recall, micro-
F1 scores for evaluation.

The results on FIGER are shown in Table 2.
From the results, we observe that: (1) BERT
achieves comparable results with NFGEC on the
macro and micro metrics. However, BERT has
lower accuracy than the best NFGEC model. As
strict accuracy is the ratio of instances whose pre-
dictions are identical to human annotations, it il-
lustrates some wrong labels from distant super-
vision are learned by BERT due to its powerful
fitting ability. (2) Compared with BERT, ERNIE
significantly improves the strict accuracy, indicat-
ing the external knowledge regularizes ERNIE to
avoid fitting the noisy labels and accordingly ben-
efits entity typing.

The results on Open Entity are shown in Ta-
ble 3. From the table, we observe that: (1) BERT
and ERNIE achieve much higher recall scores than
the previous entity typing models, which means
pre-training language models make full use of
both the unsupervised pre-training and manually-
annotated training data for better entity typing. (2)
Compared to BERT, ERNIE improves the preci-
sion by 2% and the recall by 2%, which means the
informative entities help ERNIE predict the labels
more precisely.

In summary, ERNIE effectively reduces the
noisy label challenge in FIGER, which is a
widely-used distantly supervised entity typing
dataset, by injecting the information from KGs.
Besides, ERNIE also outperforms the baselines on
Open Entity which has gold annotations.

Model FewRel TACREDP R F1 P R F1

CNN 69.51 69.64 69.35 70.30 54.20 61.20
PA-LSTM - - - 65.70 64.50 65.10
C-GCN - - - 69.90 63.30 66.40
BERT 85.05 85.11 84.89 67.23 64.81 66.00

ERNIE 88.49 88.44 88.32 69.97 66.08 67.97

Table 5: Results of various models on FewRel and TA-
CRED (%).

4.4 Relation Classification

Relation classification aims to determine the cor-
rect relation between two entities in a given sen-
tence, which is an important knowledge-driven
NLP task. To evaluate performance on this
task, we fine-tune ERNIE on two well-established
datasets FewRel (Han et al., 2018c) and TA-
CRED (Zhang et al., 2017). The statistics of these
two datasets are shown in Table 4. As the orig-
inal experimental setting of FewRel is few-shot
learning, we rearrange the FewRel dataset for the
common relation classification setting. Specifi-
cally, we sample 100 instances from each class for
the training set, and sample 200 instances for the
development and test respectively. There are 80
classes in FewRel, and there are 42 classes (in-
cluding a special relation “no relation”) in TA-
CRED. We compare our model with the following
baseline models for relation classification:

CNN. With a convolution layer, a max-pooling
layer, and a non-linear activation layer, CNN gets
the output sentence embedding, and then feeds it
into a relation classifier. To better capture the posi-
tion of head and tail entities, position embeddings
are introduced into CNN (Zeng et al., 2015; Lin
et al., 2016; Wu et al., 2017; Han et al., 2018b).

PA-LSTM. Zhang et al. (2017) propose PA-
LSTM introducing a position-aware attention
mechanism over an LSTM network, which eval-
uates the relative contribution of each word in the
sequence for the final sentence representation.

C-GCN. Zhang et al. (2018) adopt the graph
convolution operations to model dependency trees
for relation classification. To encode the word
order and reduce the side effect of errors in de-
pendency parsing, Contextualized GCN (C-GCN)
firstly uses Bi-LSTM to generate contextualized
representations as input for GCN models.

In addition to these three baselines, we also fine-
tune BERT with the same input format introduced
in Section 3.5 for fair comparison.



1448

Model MNLI-(m/mm) QQP QNLI SST-2
392k 363k 104k 67k

BERTBASE 84.6/83.4 71.2 - 93.5

ERNIE 84.0/83.2 71.2 91.3 93.5

Model CoLA STS-B MRPC RTE
8.5k 5.7k 3.5k 2.5k

BERTBASE 52.1 85.8 88.9 66.4

ERNIE 52.3 83.2 88.2 68.8

Table 6: Results of BERT and ERNIE on different tasks
of GLUE (%).

As FewRel does not have any null instance
where there is not any relation between entities,
we adopt macro averaged metrics to present the
model performances. Since FewRel is built by
checking whether the sentences contain facts in
Wikidata, we drop the related facts in KGs be-
fore pre-training for fair comparison. From Ta-
ble 5, we have two observations: (1) As the train-
ing data does not have enough instances to train
the CNN encoder from scratch, CNN just achieves
an F1 score of 69.35%. However, the pre-training
models including BERT and ERNIE increase the
F1 score by at least 15%. (2) ERNIE achieves an
absolute F1 increase of 3.4% over BERT, which
means fusing external knowledge is very effective.

In TACRED, there are nearly 80% null
instances so that we follow the previous
work (Zhang et al., 2017) to adopt micro
averaged metrics to represent the model per-
formances instead of the macro. The results of
CNN, PA-LSTM, and C-GCN come from the
paper by Zhang et al. (2018), which are the best
results of CNN, RNN, and GCN respectively.
From Table 5, we observe that: (1) The C-GCN
model outperforms the strong BERT model by
an F1 increase of 0.4%, as C-GCN utilizes the
dependency trees and the entity mask strategy.
The entity mask strategy refers to replacing each
subject (and object similarly) entity with a special
NER token, which is similar to our proposed
pre-training task dEA. (2) ERNIE achieves the
best recall and F1 scores, and increases the F1
of BERT by nearly 2.0%, which proves the
effectiveness of the knowledgeable module for
relation classification.

In conclusion, we find that the pre-trained lan-
guage models can provide more information for
relation classification than the vanilla encoder
CNN and RNN. And ERNIE outperforms BERT
on both of the relation classification datasets, es-
pecially on the FewRel which has a much smaller

Model P R F1

BERT 85.05 85.11 84.89

ERNIE 88.49 88.44 88.32
w/o entities 85.89 85.89 85.79
w/o dEA 85.85 85.75 85.62

Table 7: Ablation study on FewRel (%).

training set. It demonstrates extra knowledge
helps the model make full use of small training
data, which is important for most NLP tasks as
large-scale annotated data is unavailable.

4.5 GLUE

The General Language Understanding Evaluation
(GLUE) benchmark (Wang et al., 2018) is a col-
lection of diverse natural language understanding
tasks (Warstadt et al., 2018; Socher et al., 2013;
Dolan and Brockett, 2005; Agirre et al., 2007;
Williams et al., 2018; Rajpurkar et al., 2016; Da-
gan et al., 2006; Levesque et al., 2011), which is
the main benchmark used in Devlin et al. (2019).
To explore whether our knowledgeable module
degenerates the performance on common NLP
tasks, we evaluate ERNIE on 8 datasets of GLUE
and compare it with BERT.

In Table 6, we report the results of our eval-
uation submissions and those of BERT from the
leaderboard. We notice that ERNIE is consistent
with BERTBASE on big datasets like MNLI, QQP,
QNLI, and SST-2. The results become more unsta-
ble on small datasets, that is, ERNIE is better on
CoLA and RTE, but worse on STS-B and MRPC.

In short, ERNIE achieves comparable results
with BERTBASE on GLUE. On the one hand, it
means GLUE does not require external knowledge
for language representation. On the other hand, it
illustrates ERNIE does not lose the textual infor-
mation after heterogeneous information fusion.

4.6 Ablation Study

In this subsection, we explore the effects of the
informative entities and the knowledgeable pre-
training task (dEA) for ERNIE using FewRel
dataset. w/o entities and w/o dEA refer to fine-
tuning ERNIE without entity sequence input and
the pre-training task dEA respectively. As shown
in Table 7, we have the following observations:
(1) Without entity sequence input, dEA still in-
jects knowledge information into language repre-
sentation during pre-training, which increases the
F1 score of BERT by 0.9%. (2) Although the in-
formative entities bring much knowledge informa-



1449

tion which intuitively benefits relation classifica-
tion, ERNIE without dEA takes little advantage of
this, leading to the F1 increase of 0.7%.

5 Conclusion

In this paper, we propose ERNIE to incorporate
knowledge information into language representa-
tion models. Accordingly, we propose the knowl-
edgeable aggregator and the pre-training task dEA
for better fusion of heterogeneous information
from both text and KGs. The experimental re-
sults demonstrate that ERNIE has better abilities
of both denoising distantly supervised data and
fine-tuning on limited data than BERT. There are
three important directions remain for future re-
search: (1) inject knowledge into feature-based
pre-training models such as ELMo (Peters et al.,
2018); (2) introduce diverse structured knowledge
into language representation models such as Con-
ceptNet (Speer and Havasi, 2012) which is differ-
ent from the world knowledge database Wikidata;
(3) annotate more real-world corpora heuristically
for building larger pre-training data. These direc-
tions may lead to more general and effective lan-
guage understanding.

Acknowledgement

This work is funded by the Natural Science Foun-
dation of China (NSFC) and the German Re-
search Foundation (DFG) in Project Crossmodal
Learning, NSFC 61621136008 / DFG TRR-169,
the National Natural Science Foundation of China
(NSFC No. 61572273) and China Association for
Science and Technology (2016QNRC001).

References
Eneko Agirre, Llu’is M‘arquez, and Richard Wicen-

towski. 2007. Proceedings of the fourth interna-
tional workshop on semantic evaluations (semeval-
2007). In Proceedings of SemEval-2007.

Antoine Bordes, Nicolas Usunier, Alberto Garcia-
Duran, Jason Weston, and Oksana Yakhnenko.
2013. Translating embeddings for modeling multi-
relational data. In Proceedings of NIPS, pages
2787–2795.

Samuel R Bowman, Gabor Angeli, Christopher Potts,
and Christopher D Manning. 2015. A large anno-
tated corpus for learning natural language inference.
In Proceedings of EMNLP, pages 632–642.

Yixin Cao, Lei Hou, Juanzi Li, Zhiyuan Liu,
Chengjiang Li, Xu Chen, and Tiansi Dong. 2018.

Joint representation learning of cross-lingual words
and entities via attentive distant supervision. In Pro-
ceedings of EMNLP, pages 227–237.

Yixin Cao, Lifu Huang, Heng Ji, Xu Chen, and Juanzi
Li. 2017. Bridge text and knowledge by learning
multi-prototype entity mention embedding. In Pro-
ceedings of ACL, pages 1623–1633.

Qian Chen, Xiaodan Zhu, Zhen-Hua Ling, Diana
Inkpen, and Si Wei. 2018. Neural natural language
inference models enhanced with external knowl-
edge. In Proceedings of ACL, pages 2406–2417.

Eunsol Choi, Omer Levy, Yejin Choi, and Luke Zettle-
moyer. 2018. Ultra-fine entity typing. In Proceed-
ings of ACL, pages 87–96.

Ronan Collobert and Jason Weston. 2008. A unified
architecture for natural language processing: Deep
neural networks with multitask learning. In Pro-
ceedings of ICML, pages 160–167.

Ido Dagan, Oren Glickman, and Bernardo Magnini.
2006. The PASCAL recognising textual entailment
challenge. In Proceedings of MLCW, pages 177–
190.

Andrew M Dai and Quoc V Le. 2015. Semi-supervised
sequence learning. In Proceedings of NIPS, pages
3079–3087.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2019. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. In Proceedings of NAACL-HLT.

William B Dolan and Chris Brockett. 2005. Automati-
cally constructing a corpus of sentential paraphrases.
In Proceedings of IWP.

Paolo Ferragina and Ugo Scaiella. 2010. Tagme:
on-the-fly annotation of short text fragments (by
wikipedia entities). In Proceedings of CIKM, pages
1625–1628.

Xu Han, Zhiyuan Liu, and Maosong Sun. 2016.
Joint representation learning of text and knowledge
for knowledge graph completion. arXiv preprint
arXiv:1611.04125.

Xu Han, Zhiyuan Liu, and Maosong Sun. 2018a. Neu-
ral knowledge acquisition via mutual attention be-
tween knowledge graph and text. In Proceedings of
AAAI.

Xu Han, Pengfei Yu, Zhiyuan Liu, Maosong Sun, and
Peng Li. 2018b. Hierarchical relation extraction
with coarse-to-fine grained attention. In Proceed-
ings of EMNLP, pages 2236–2245.

Xu Han, Hao Zhu, Pengfei Yu, Ziyun Wang, Yuan Yao,
Zhiyuan Liu, and Maosong Sun. 2018c. Fewrel: A
large-scale supervised few-shot relation classifica-
tion dataset with state-of-the-art evaluation. In Pro-
ceedings of EMNLP, pages 4803–4809.

https://www.aclweb.org/anthology/S07-1
https://www.aclweb.org/anthology/S07-1
https://www.aclweb.org/anthology/S07-1
https://papers.nips.cc/paper/5071-translating-embeddings-for-modeling-multi-relational-data.pdf
https://papers.nips.cc/paper/5071-translating-embeddings-for-modeling-multi-relational-data.pdf
https://www.aclweb.org/anthology/D15-1075
https://www.aclweb.org/anthology/D15-1075
http://nlp.cs.rpi.edu/paper/embedding2017.pdf
http://nlp.cs.rpi.edu/paper/embedding2017.pdf
http://nlp.cs.rpi.edu/paper/embedding2017.pdf
http://nlp.cs.rpi.edu/paper/embedding2017.pdf
https://www.aclweb.org/anthology/P18-1224
https://www.aclweb.org/anthology/P18-1224
https://www.aclweb.org/anthology/P18-1224
https://aclweb.org/anthology/P18-1009
https://ronan.collobert.com/pub/matos/2008_nlp_icml.pdf
https://ronan.collobert.com/pub/matos/2008_nlp_icml.pdf
https://ronan.collobert.com/pub/matos/2008_nlp_icml.pdf
http://u.cs.biu.ac.il/~dagan/publications/RTEChallenge.pdf
http://u.cs.biu.ac.il/~dagan/publications/RTEChallenge.pdf
https://papers.nips.cc/paper/5949-semi-supervised-sequence-learning.pdf
https://papers.nips.cc/paper/5949-semi-supervised-sequence-learning.pdf
https://arxiv.org/pdf/1810.04805
https://arxiv.org/pdf/1810.04805
https://arxiv.org/pdf/1810.04805
https://www.aclweb.org/anthology/I/I05/I05-5002.pdf
https://www.aclweb.org/anthology/I/I05/I05-5002.pdf
http://www.di.unipi.it/~ferragin/cikm2010.pdf
http://www.di.unipi.it/~ferragin/cikm2010.pdf
http://www.di.unipi.it/~ferragin/cikm2010.pdf
https://arxiv.org/pdf/1611.04125.pdf
https://arxiv.org/pdf/1611.04125.pdf
http://nlp.csai.tsinghua.edu.cn/~lzy/publications/aaai2018_jointnre.pdf
http://nlp.csai.tsinghua.edu.cn/~lzy/publications/aaai2018_jointnre.pdf
http://nlp.csai.tsinghua.edu.cn/~lzy/publications/aaai2018_jointnre.pdf
https://www.aclweb.org/anthology/D18-1247
https://www.aclweb.org/anthology/D18-1247
https://aclweb.org/anthology/D18-1514
https://aclweb.org/anthology/D18-1514
https://aclweb.org/anthology/D18-1514


1450

Dan Hendrycks and Kevin Gimpel. 2016. Gaus-
sian error linear units (gelus). arXiv preprint
arXiv:1606.08415.

Jeremy Howard and Sebastian Ruder. 2018. Universal
language model fine-tuning for text classification. In
Proceedings of ACL, pages 328–339.

Hector J Levesque, Ernest Davis, and Leora Morgen-
stern. 2011. The Winograd schema challenge. In
AAAI Spring Symposium: Logical Formalizations of
Commonsense Reasoning, volume 46, page 47.

Yankai Lin, Shiqi Shen, Zhiyuan Liu, Huanbo Luan,
and Maosong Sun. 2016. Neural relation extraction
with selective attention over instances. In Proceed-
ings of ACL, volume 1, pages 2124–2133.

Xiao Ling, Sameer Singh, and Daniel S Weld. 2015.
Design challenges for entity linking. TACL, 3:315–
328.

Andrea Madotto, Chien-Sheng Wu, and Pascale Fung.
2018. Mem2seq: Effectively incorporating knowl-
edge bases into end-to-end task-oriented dialog sys-
tems. In Proceedings of ACL, pages 1468–1478.

Stephen Merity, Nitish Shirish Keskar, and Richard
Socher. 2018. Regularizing and optimizing lstm lan-
guage models. In Proceedings of ICLR.

Todor Mihaylov and Anette Frank. 2018. Knowledge-
able reader: Enhancing cloze-style reading compre-
hension with external commonsense knowledge. In
Proceedings of ACL, pages 821–832.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Proceedings of NIPS, pages 3111–3119.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of EMNLP, pages
1532–1543.

Matthew Peters, Waleed Ammar, Chandra Bhagavat-
ula, and Russell Power. 2017. Semi-supervised se-
quence tagging with bidirectional language models.
In Proceedings of ACL, pages 1756–1765.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In Proceedings of NAACL-HLT, pages
2227–2237.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving language under-
standing by generative pre-training. In Proceedings
of Technical report, OpenAI.

Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and
Percy Liang. 2016. Squad: 100,000+ questions for
machine comprehension of text. In Proceedings of
EMNLP, pages 2383–2392.

Erik F Tjong Kim Sang and Fien De Meulder.
2003. Introduction to the conll-2003 shared task:
Language-independent named entity recognition. In
Proceedings of NAACL-HLT, pages 142–147.

Sonse Shimaoka, Pontus Stenetorp, Kentaro Inui, and
Sebastian Riedel. 2016. An attentive neural archi-
tecture for fine-grained entity type classification. In
Proceedings of AKBC, pages 69–74.

Richard Socher, Alex Perelygin, Jean Wu, Jason
Chuang, Christopher D Manning, Andrew Ng, and
Christopher Potts. 2013. Recursive deep models
for semantic compositionality over a sentiment tree-
bank. In Proceedings of EMNLP, pages 1631–1642.

Robert Speer and Catherine Havasi. 2012. Represent-
ing general relational knowledge in conceptnet 5. In
Proceedings of LREC, pages 3679–3686.

Yu Sun, Shuohuan Wang, Yukun Li, Shikun Feng, Xuyi
Chen, Han Zhang, Xin Tian, Danxiang Zhu, Hao
Tian, and Hua Wu. 2019. Ernie: Enhanced repre-
sentation through knowledge integration.

Kristina Toutanova, Danqi Chen, Patrick Pantel, Hoi-
fung Poon, Pallavi Choudhury, and Michael Gamon.
2015. Representing text for joint embedding of text
and knowledge bases. In Proceedings of EMNLP,
pages 1499–1509.

Joseph Turian, Lev Ratinov, and Yoshua Bengio. 2010.
Word representations: a simple and general method
for semi-supervised learning. In Proceedings of
ACL, pages 384–394.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Proceedings of NIPS, pages 5998–
6008.

Pascal Vincent, Hugo Larochelle, Yoshua Bengio, and
Pierre-Antoine Manzagol. 2008. Extracting and
composing robust features with denoising autoen-
coders. In Proceedings of ICML, pages 1096–1103.

Alex Wang, Amapreet Singh, Julian Michael, Felix
Hill, Omer Levy, and Samuel R Bowman. 2018.
Glue: A multi-task benchmark and analysis platform
for natural language understanding. In Proceedings
of EMNLP, pages 353–355.

Zhen Wang, Jianwen Zhang, Jianlin Feng, and Zheng
Chen. 2014. Knowledge graph and text jointly em-
bedding. In Proceedings of EMNLP, pages 1591–
1601.

Alex Warstadt, Amanpreet Singh, and Samuel R. Bow-
man. 2018. Neural network acceptability judg-
ments. arXiv preprint 1805.12471.

Adina Williams, Nikita Nangia, and Samuel R. Bow-
man. 2018. A broad-coverage challenge corpus for
sentence understanding through inference. In Pro-
ceedings of NAACL-HLT, pages 1112–1122.

https://arxiv.org/pdf/1606.08415.pdf
https://arxiv.org/pdf/1606.08415.pdf
https://www.aclweb.org/anthology/P18-1031
https://www.aclweb.org/anthology/P18-1031
https://www.aaai.org/ocs/index.php/KR/KR12/paper/download/4492/4924
https://www.aclweb.org/anthology/P16-1200
https://www.aclweb.org/anthology/P16-1200
https://www.aclweb.org/anthology/Q15-1023
https://www.aclweb.org/anthology/P18-1136
https://www.aclweb.org/anthology/P18-1136
https://www.aclweb.org/anthology/P18-1136
https://arxiv.org/pdf/1708.02182
https://arxiv.org/pdf/1708.02182
https://www.aclweb.org/anthology/P18-1076
https://www.aclweb.org/anthology/P18-1076
https://www.aclweb.org/anthology/P18-1076
https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf
https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf
https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf
https://www.aclweb.org/anthology/D14-1162
https://www.aclweb.org/anthology/D14-1162
https://www.aclweb.org/anthology/P17-1161
https://www.aclweb.org/anthology/P17-1161
https://aclweb.org/anthology/N18-1202
https://aclweb.org/anthology/N18-1202
https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf
https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf
https://aclweb.org/anthology/D16-1264
https://aclweb.org/anthology/D16-1264
https://www.aclweb.org/anthology/W03-0419.pdf
https://www.aclweb.org/anthology/W03-0419.pdf
https://www.aclweb.org/anthology/W16-1313
https://www.aclweb.org/anthology/W16-1313
https://nlp.stanford.edu/~socherr/EMNLP2013_RNTN.pdf
https://nlp.stanford.edu/~socherr/EMNLP2013_RNTN.pdf
https://nlp.stanford.edu/~socherr/EMNLP2013_RNTN.pdf
http://www.lrec-conf.org/proceedings/lrec2012/pdf/1072_Paper.pdf
http://www.lrec-conf.org/proceedings/lrec2012/pdf/1072_Paper.pdf
http://arxiv.org/abs/1904.09223
http://arxiv.org/abs/1904.09223
https://www.aclweb.org/anthology/D15-1174
https://www.aclweb.org/anthology/D15-1174
https://www.aclweb.org/anthology/P10-1040
https://www.aclweb.org/anthology/P10-1040
https://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
https://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
http://www.cs.toronto.edu/~larocheh/publications/icml-2008-denoising-autoencoders.pdf
http://www.cs.toronto.edu/~larocheh/publications/icml-2008-denoising-autoencoders.pdf
http://www.cs.toronto.edu/~larocheh/publications/icml-2008-denoising-autoencoders.pdf
https://www.aclweb.org/anthology/W18-5446
https://www.aclweb.org/anthology/W18-5446
https://www.aclweb.org/anthology/D14-1167
https://www.aclweb.org/anthology/D14-1167
https://arxiv.org/pdf/1805.12471.pdf
https://arxiv.org/pdf/1805.12471.pdf
https://aclweb.org/anthology/N18-1101
https://aclweb.org/anthology/N18-1101


1451

Yi Wu, David Bamman, and Stuart Russell. 2017. Ad-
versarial training for relation extraction. In Proceed-
ings of EMNLP, pages 1778–1783.

Ji Xin, Hao Zhu, Xu Han, Zhiyuan Liu, and Maosong
Sun. 2018. Put it back: Entity typing with language
model enhancement. In Proceedings of EMNLPs,
pages 993–998.

Yadollah Yaghoobzadeh and Hinrich Schütze. 2017.
Multi-level representations for fine-grained typing
of knowledge base entities. In Proceedings of
EACL, pages 578–589.

Ikuya Yamada, Hiroyuki Shindo, Hideaki Takeda, and
Yoshiyasu Takefuji. 2016. Joint learning of the em-
bedding of words and entities for named entity dis-
ambiguation. In Proceedings of CoNLL, pages 250–
259.

Poorya Zaremoodi, Wray Buntine, and Gholamreza
Haffari. 2018. Adaptive knowledge sharing in
multi-task learning: Improving low-resource neural
machine translation. In Proceedings of ACL, pages
656–661.

Rowan Zellers, Yonatan Bisk, Roy Schwartz, and Yejin
Choi. 2018. Swag: A large-scale adversarial dataset
for grounded commonsense inference. In Proceed-
ings of EMNLP, pages 93–104.

Daojian Zeng, Kang Liu, Yubo Chen, and Jun Zhao.
2015. Distant supervision for relation extraction via
piecewise convolutional neural networks. In Pro-
ceedings of EMNLP, pages 1753–1762.

Yuhao Zhang, Peng Qi, and Christopher D Manning.
2018. Graph convolution over pruned dependency
trees improves relation extraction. In Proceedings
of EMNLP, pages 2205–2215.

Yuhao Zhang, Victor Zhong, Danqi Chen, Gabor An-
geli, and Christopher D Manning. 2017. Position-
aware attention and supervised data improve slot fill-
ing. In Proceedings of EMNLP, pages 35–45.

Wanjun Zhong, Duyu Tang, Nan Duan, Ming Zhou,
Jiahai Wang, and Jian Yin. 2018. Improving ques-
tion answering by commonsense-based pre-training.
arXiv preprint arXiv:1809.03568.

https://www.aclweb.org/anthology/D17-1187
https://www.aclweb.org/anthology/D17-1187
https://www.aclweb.org/anthology/D18-1121
https://www.aclweb.org/anthology/D18-1121
https://www.aclweb.org/anthology/E17-1055
https://www.aclweb.org/anthology/E17-1055
https://www.aclweb.org/anthology/K16-1025
https://www.aclweb.org/anthology/K16-1025
https://www.aclweb.org/anthology/K16-1025
https://www.aclweb.org/anthology/P18-2104
https://www.aclweb.org/anthology/P18-2104
https://www.aclweb.org/anthology/P18-2104
https://aclweb.org/anthology/D18-1009
https://aclweb.org/anthology/D18-1009
http://www.emnlp2015.org/proceedings/EMNLP/pdf/EMNLP203.pdf
http://www.emnlp2015.org/proceedings/EMNLP/pdf/EMNLP203.pdf
https://aclweb.org/anthology/D18-1244
https://aclweb.org/anthology/D18-1244
https://nlp.stanford.edu/pubs/zhang2017tacred.pdf
https://nlp.stanford.edu/pubs/zhang2017tacred.pdf
https://nlp.stanford.edu/pubs/zhang2017tacred.pdf
https://arxiv.org/pdf/1809.03568.pdf
https://arxiv.org/pdf/1809.03568.pdf

