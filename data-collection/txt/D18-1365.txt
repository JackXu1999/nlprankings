



















































Explaining Character-Aware Neural Networks for Word-Level Prediction: Do They Discover Linguistic Rules?


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 3275–3284
Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics

3275

Explaining Character-Aware Neural Networks for Word-Level Prediction:
Do They Discover Linguistic Rules?

Fréderic Godin, Kris Demuynck, Joni Dambre, Wesley De Neve and Thomas Demeester

IDLab, Ghent University - imec, Ghent, Belgium
firstname.lastname@ugent.be

Abstract

Character-level features are currently used in
different neural network-based natural lan-
guage processing algorithms. However, lit-
tle is known about the character-level patterns
those models learn. Moreover, models are of-
ten compared only quantitatively while a qual-
itative analysis is missing. In this paper, we
investigate which character-level patterns neu-
ral networks learn and if those patterns co-
incide with manually-defined word segmenta-
tions and annotations. To that end, we ex-
tend the contextual decomposition (Murdoch
et al., 2018) technique to convolutional neu-
ral networks which allows us to compare con-
volutional neural networks and bidirectional
long short-term memory networks. We evalu-
ate and compare these models for the task of
morphological tagging on three morphologi-
cally different languages and show that these
models implicitly discover understandable lin-
guistic rules.

1 Introduction

Character-level features are an essential part of
many Natural Language Processing (NLP) tasks.
These features are for instance used for language
modeling (Kim et al., 2016), part-of-speech tag-
ging (Plank et al., 2016) and machine translation
(Luong and Manning, 2016). They are especially
useful in the context of part-of-speech and mor-
phological tagging, where for example the suffix
-s can easily differentiate plural words from sin-
gular words in English or Spanish.

The use of character-level features is not new.
Rule-based taggers were amongst the earliest sys-
tems that used character-level features/rules for
grammatical tagging (Klein and Simmons, 1963).
Other approaches rely on fixed lists of affixes (Rat-
naparkhi, 1996; Toutanova et al., 2003). Next,
these features are used by a tagging model, such

ˆ e c o n ó m i c a s $

Number=Plur
Gender=Fem

-2.3
0
2.3

Figure 1: Individual character contributions of the
Spanish adjective económicas. The character a has
the highest positive (red) contribution for predict-
ing the label Gender=Fem, and the character s for
predicting the label Number=Plur. This coincides
with our linguistic knowledge of Spanish.

as a rule-based model or statistical model. Rule-
based taggers are transparent models that allow us
to easily trace back why the tagger made a certain
decision (e.g., Brill (1994)). Similarly, statistical
models are merely a weighted sum of features.

For example, Brill (1994)’s transformation-
based error-driven tagger uses a set of templates
to derive rules by fixing errors. The following rule
template:

"Change the most-likely tag X to Y if the last
(1,2,3,4) characters of the word are x",

resulted in the rule:

"Change the tag common noun to plural com-
mon noun if the word has suffix -s".

Subsequently, whenever the tagger makes a tag-
ging mistake, it is easy to trace back why this hap-
pened. Following the above rule, the word mis-
tress will mistakingly be tagged as a plural com-
mon noun while it actually is a common noun1.

This is in stark contrast with the most recent
generation of part-of-speech and morphological
taggers which mainly rely on neural networks.

1In Brill (1994), an additional rule encodes an exception
to this rule to correctly tag the word mistress.



3276

Words are split into individual characters and
are in general either aggregated using a Bidirec-
tional Long Short-Term Memory network (BiL-
STM) (Plank et al., 2016) or Convolutional Neural
Network (CNN) (dos Santos and Zadrozny, 2014).
However, it is currently unknown which character-
level patterns these neural network models learn
and whether these patterns coincide with our lin-
guistic knowledge. Moreover, different neural net-
work architectures are currently only compared
quantitatively and lack a qualitative analysis.

In this paper, we investigate which character
patterns neural networks learn and to what ex-
tent those patterns comprise any known linguistic
rules. We do this for three morphologically dif-
ferent languages: Finnish, Spanish and Swedish.
A Spanish example is shown in Figure 1. By vi-
sualizing the contributions of each character, we
observe that the model indeed uses the suffix -s to
correctly predict that the word is plural.

Our main contributions are as follows:

• We show how word-level tagging decisions
can be traced back to specific sets of charac-
ters and interactions between them.

• We extend the contextual decomposition
method (Murdoch et al., 2018) to CNNs.

• We quantitatively compare CNN and BiL-
STM models in the context of morphologi-
cal tagging by performing an evaluation on
three manually segmented and morphologi-
cally annotated corpora.

• We found out that the studied neural models
are able to implicitly discover character pat-
terns that coincide with the same rules lin-
guists use to indicate the morphological func-
tion of subword segments.

Our implementation is available online2.

2 Related Work

Neural network-based taggers currently outper-
form statistical taggers in morphological tagging
(Heigold et al., 2017) and part-of-speech tagging
(Plank et al., 2016) for a wide variety of lan-
guages. Character-level features form a crucial
part of many of these systems. Generally, two neu-
ral network architectures are considered for aggre-
gating the individual characters: a BiLSTM (Ling

2https://github.com/FredericGodin/
ContextualDecomposition-NLP

et al., 2015; Plank et al., 2016) or a CNN (dos
Santos and Zadrozny, 2014; Bjerva et al., 2016;
Heigold et al., 2017). These architectures outper-
form similar models that use manually defined fea-
tures (Ling et al., 2015; dos Santos and Zadrozny,
2014). However, it is still unclear which useful
character-level features they have learned. Ar-
chitectures are compared quantitatively but lack
insight into learned patterns. Moreover, Vania
and Lopez (2017) showed in the context of lan-
guage modeling that training a BiLSTM on ground
truth morphological features still yields better re-
sults than eight other character-based neural net-
work architectures. Hence, this raises the question
which patterns neural networks learn and whether
these patterns coincide with manually-defined lin-
guistic rules.

While a number of interpretation techniques
have been proposed for images (Springenberg
et al., 2014; Selvaraju et al., 2017; Shrikumar
et al., 2017), these are generally not applicable
in the context of NLP where LSTMs are mainly
used. Moreover, gradient-based techniques are
not trustworthy when strongly saturating activa-
tion functions such as tanh and sigmoid are used
(e.g., Li et al. (2016a)). Hence, current interpre-
tations in NLP are limited to visualizing the mag-
nitude of the LSTM hidden states of each word
(Linzen et al., 2016; Radford et al., 2017; Strobelt
et al., 2018), removing words (Li et al., 2016b;
Kádár et al., 2017) or changing words (Linzen
et al., 2016) and measuring the impact, or training
surrogate tasks (Adi et al., 2017; Chrupała et al.,
2017; Belinkov et al., 2017). These techniques
only provide limited local interpretations and do
not model fine-grained interactions of groups of
inputs or intermediate representations. In con-
trast, Murdoch et al. (2018) recently introduced an
LSTM interpretation technique called Contextual
Decomposition (CD), providing a solution to the
aforementioned issues. We will build upon this in-
terpretation technique and introduce an extension
for CNNs, making it possible to compare different
neural network architectures within a single inter-
pretation framework.

3 Method

For visualizing the contributions of character sets,
we use the recently introduced Contextual Decom-
position (CD) framework, as originally developed
for LSTMs (Murdoch et al., 2018), and extend it to

https://github.com/FredericGodin/ContextualDecomposition-NLP
https://github.com/FredericGodin/ContextualDecomposition-NLP


3277

CNNs. First, we introduce the concept of CD, fol-
lowed by the extension for CNNs. For details on
CD for LSTMs, we refer the reader to the afore-
mentioned paper. Finally, we explain how the CD
of the final classification layer is done.

3.1 Contextual decomposition
The idea behind CD is that, in the context of
character-level decomposition, we can decompose
the output value of the network for a certain class
into two distinct groups of contributions: (1) con-
tributions originating from a specific character or
set of characters within a word and (2) contri-
butions originating from all the other characters
within the same word.

More generally, we can decompose every out-
put value z of every neural network component
into a relevant contribution β and an irrelevant
contribution γ:

z = β + γ (1)

3.2 Decomposing CNN layers
A CNN typically consist of three components: the
convolution itself, an activation function and an
optional max-pooling operation. We will discuss
each component in the next paragraphs.

Decomposing the convolution Given a se-
quence of character embeddings x1, ...,xT ∈ Rd1
of length T , we can calculate the convolution of
size n of a single filter over the sequence x1:T by
applying the following equation to each n-length
subsequence {xt+i, i = 0, .., n − 1}, denoted as
xt:t+n−1:

zt =
n−1∑
i=0

Wi · xt+i + b, (2)

with zt ∈ R and where W ∈ Rd1×n and b ∈ R
are the weight matrix and bias of the convolutional
filter. Wi denotes the i-th column of the weight
matrix W .

When we want to calculate the contribution of
a subset of characters, where S is the set of cor-
responding character position indexes and S ⊆
{1, ..., T}, we should decompose the output of the
filter zt into three parts:

zt = βt + γt + b. (3)

That is, the relevant contribution βt originating
from the selected subset of characters with in-
dexes S, the irrelevant contribution γt originating

from the remaining characters in the sequence, and
a bias which is deemed neutral (Murdoch et al.,
2018).

This can be achieved by decomposing the con-
volution itself as follows:

βt =
n−1∑
i=0

Wi · xt+i (t+ i) ∈ S, (4)

γt =

n−1∑
i=0

Wi · xt+i (t+ i) /∈ S, (5)

Linearizing the activation function After ap-
plying a linear transformation to the input, a non-
linearity is typically applied. In CNNs, the ReLU
activation function is often used.

In Murdoch et al. (2018), a linearization method
for the non-linear activation function f is pro-
posed, based on the differences of partial sums
of all N components yi involved in the pre-
activation sum zt. In other words, we want to
split fReLU (zt) = fReLU (

∑N
i=1 yi) into a sum

of individual linearized contributions LfReLU (yi),
namely fReLU (

∑N
i=1 yi) =

∑N
i=1 LfReLU (yi).

To that end, we compute LfReLU (yk), the lin-
earized contribution of yk as the average differ-
ence of partial sums over all possible permutations
π1, ..., πMN of all N components yi involved:

Lf (yk) =

1

MN

MN∑
i=1

[f(

π−1i (k)∑
l=1

yπi(l))− f(
π−1i (k)−1∑

l=1

yπi(l))]

(6)

Consequently, we can decompose the output ct
after the activation function as follows:

ct =fReLU (zt) (7)

=fReLU (βz,t + γz,t + b) (8)

=LReLU (βz,t)

+ [LReLU (γz,t) + LReLU (b)] (9)

=βc,t + γc,t (10)

Following Murdoch et al. (2018), βc,t contains the
contributions that can be directly attributed to the
specific set of input indexes S. Hence, the bias b is
part of γc,t. Note that, while the decomposition in
Eq. (10) is exact in terms of the total sum, the in-
dividual attribution to relevant (βc,t) and irrelevant
(γc,t) is an approximation, due to the linearization.



3278

Max-pooling over time When applying a fixed-
size convolution over a variable-length sequence,
the output is again of variable size. Hence, a max-
pooling operation is executed over the time dimen-
sion, resulting in a fixed-size representation that is
independent of the sequence length:

c = max
t

(ct). (11)

Instead of applying a max operation over the βc,t
and γc,t contributions separately, we first deter-
mine the position t of the highest ct value and
propagate the corresponding βc,t and γc,t values.

3.3 Calculating the final contribution scores
The final layer is a classification layer, which is
the same for a CNN- or LSTM-based architecture.
The probability pj of predicting class j is defined
as follows:

pj =
eWj ·x+bj∑C
i=1 e

Wi·x+bi
, (12)

in which W ∈ Rd2×C is a weight matrix and Wi
the i-th column, x ∈ Rd2 the input, b ∈ Rd2 the
bias vector and bi the i-th element, d2 the input
vector size and C the total number of classes.

The input x is either the output c of a CNN or
h of a LSTM. Consequently, we can decompose
x into β and γ contributions. In practice, we only
consider the preactivation and decompose it as fol-
lows:

Wj · x+ bj =Wj · β +Wj · γ + bj . (13)

Finally, the contribution of a set of characters with
indexes S to the final score of class j is equal to
Wj · β. The latter score is used throughout the
paper for visualizing contributions of sets of char-
acters.

4 Experimental Setup

We execute experiments on morphological tagging
in three different languages: Finnish, Spanish and
Swedish. We describe the dataset in Section 4.1,
whereas model and training details can be found
in Section 4.2.

4.1 Dataset
For our experiments, we use the Universal De-
pendencies 1.4 (UD) dataset (Nivre et al., 2016),
which contains morphological features for a large
number of sentences. Additionally, we acquired

Table 1: Overview of the training, validation and
test set used.

Finnish Spanish Swedish

Train words 53547 62556 16295
Valid words 2317 4984 1731
Test words 2246 956 3538

Annotated
Test pairs 278 340 137

manually-annotated character-level morphologi-
cal segmentations and labels for a subset of the test
set for three morphological different languages:
Finnish, Spanish and Swedish. 3

For each language, Silfverberg and Hulden
(2017) selected the first non-unique 300 words
from the UD test set and manually segmented each
word according to the associated lemma and mor-
phological features in the dataset. Whenever pos-
sible, they assigned each feature to a specific sub-
set of characters. For example, the Spanish word
"económicas" is segmented as follows:

• económic : lemma=económico

• a : gender=feminine

• s : number=plural

For our experiments, we are only interested in
word/feature pairs for which a feature can be as-
signed to a specific subset of characters. Hence,
we filter the test set on those specific word/feature
pairs. In the above example, we have two
word/feature pairs. This resulted in 278, 340 and
137 word/feature pairs for Finnish, Spanish and
Swedish, respectively. Using the same procedure,
we selected relevant feature classes, resulting in
12, 6 and 9 feature classes for Finnish, Spanish
and Swedish, respectively.4 For each class, when
a feature was not available, we introduced an ad-
ditional Not Applicable (NA) label.

We always train and validate on the full UD
dataset for which we have filtered out all dupli-
cate words. After that, we perform our analysis
on either the UD test set or the annotated subset
of manually segmented and annotated words. An
overview can be found in Table 1.

3Available online: http://github.com/mpsilfve/ud-segmen
ter/commit/5959214d494cbc13e53e1b26650813ff950d2ee3

4Full list available as supplementary material



3279

4.2 Model
We experiment with both a CNN and BiLSTM ar-
chitecture for character-level modeling of words.

At the input, we split every word into charac-
ters and add a start-of-word (ˆ) and an end-of-word
($) character. With every character, we associate a
character embedding of size 50.

Our CNN architecture is inspired by Kim et al.
(2016) and consists of a set of filters of varying
width, followed by a ReLU activation function
and a max-over-time pooling operation. We adopt
their small-CNN parameter choices and have 25,
50, 75, 100, 125 and 150 convolutional filters of
size 1, 2, 3, 4, 5 and 6, respectively. We do not add
an additional highway layer.

For the character-level BiLSTM architecture,
we follow the variant used in Plank et al. (2016).
That is, we simply run a BiLSTM over all the char-
acters and concatenate the final forward and back-
ward hidden state. To obtain a similar number of
parameters as the CNN model, we set the hidden
state size to 100 units for each LSTM.

Finally, the word-level representation gener-
ated by either the CNN or BiLSTM architecture
is classified by a multinomial logistic regression
layer. Each morphological class type has a differ-
ent layer. We do not take into account context to
rule out any influence originating from somewhere
other than the characters of the word itself.

Training details For morphological tagging, we
train a single model for all classes at once.
We minimize the joint loss by summing the
cross-entropy losses of each class. We orthogo-
nally initialize all weight matrices, except for the
embeddings, which are uniformly initialized ([-
0.01;0.01]). All models are trained using Adam
(Kingma and Ba, 2015) with minibatches of size
20 and learning rate 0.001. No specific regulariza-
tion is used. We select our final model based on
early stopping on the validation set.

5 Experiments

First, we verify that the CD algorithm works cor-
rectly by executing a controlled experiment with a
synthetic token. Next, we quantitatively and qual-
itatively evaluate on the full test set.

5.1 Validation of contextual decomposition
for convolutional neural networks

To verify that the contextual decomposition of
CNNs works correctly, we devise an experiment

1 0.9 0.8 0.7 0.6 0.5
0%

25%

50%

75%

100%

Probability synthetic token (psyn)

Pe
rc

en
ta

ge
co

rr
ec

t

Prediction
Syn. char attr.
GT char attr.

Figure 2: Comparison of the contribution of the
synthetic character versus the Ground Truth (GT)
character for the class t = 1. The prediction curve
denotes the classification accuracy for class t = 1,
and consequently, the prediction curve denotes the
upper bound for the attributions.

in which we add a synthetic token to a word of a
certain class, testing whether this token gets a high
attribution score with respect to that specific class.

Given a word w and a corresponding binary la-
bel t, we add a synthetic character c to the be-
ginning of word w with probability psyn if that
word belongs to the class t = 1 and with prob-
ability 1 − psyn if that word belongs to the class
t = 0. Consequently, if psyn = 1, the model
should predict the label with a 100% accuracy,
thus attributing this to the synthetic character c.
When psyn = 0.5, the synthetic character does not
provide any additional information about the label
t, and c should thus have a small contribution.

Experimental setup We train a CNN model on
the Spanish dataset and only use words having the
morphological label number. This label has two
classes plur and sing, and assign those classes to
the binary labels zero and one, respectively. Fur-
thermore, we add a synthetic character to each
word with probability psyn, varying psyn from 1
to 0.5 with steps of 0.1. We selected 112 unique
word/feature pairs from our test set with label sing
or plur. While plurality is marked by the suf-
fix s, a variety of suffixes are used for the singu-
lar form. Therefore, we focus on the latter class
(t = 1). The corresponding suffix is called the
Ground Truth (GT) character.

To measure the impact of psyn, we add a syn-
thetic character to each word of the class t = 1 and



3280

1 2 30

25%

50%

75%

100%

Top

%
co

rr
ec

t

Finnish

CNN all
BiLSTM all
CNN cons

BiLSTM cons

1 2 30

25%

50%

75%

100%

Top

Spanish

CNN all
BiLSTM all
CNN cons

BiLSTM cons

1 2 30

25%

50%

75%

100%

Top

Swedish

CNN all
BiLSTM all
CNN cons

BiLSTM cons

Figure 3: Evaluation of the attributions of CNN and BiLSTM models on the three different languages.

calculate the contribution of each character by us-
ing the CD algorithm. We run the experiment five
times with a different random seed and report the
average correct attribution. The attribution is cor-
rect if the contribution of the synthetic/GT charac-
ter is the highest contribution of all character con-
tributions.

Results The results of our evaluation are de-
picted in Figure 2. When psyn = 1, all words of
the class t = 1 contain the synthetic character, and
consequently, the accuracy for predicting t = 1
is indeed 100%. Moreover, the correct predic-
tion is effectively attributed to the synthetic char-
acter (‘syn. char attr.’ in Figure 2 at 100%), with
the GT character being deemed irrelevant. When
the synthetic character probability psyn is lowered,
the synthetic character is less trustworthy and the
GT character becomes more important (increas-
ing ‘GT char attr.’ in Figure 2). Finally, when
psyn = 0.5, the synthetic character is equally plau-
sible in both classes. Hence, the contribution of
the synthetic character becomes irrelevant and the
model attributes the prediction to other characters.

Consequently, we can conclude that whenever
there is a clear character-level pattern, the model
learns the pattern and the CD algorithm is able to
accurately attribute it to the correct character.

5.2 Evaluation of character-level attribution

In this section, we measure and analyze (1) which
characters contribute most to the final prediction
of a certain label and (2) whether those contribu-
tions coincide with our linguistic knowledge about
a language. To that end, we train a model to
predict morphological features, given a particular
word. The model does not have prior word seg-

Table 2: Average accuracy of all models trained on
Finnish, Spanish and Swedish for the task of mor-
phological feature prediction for all unique words
in the full UD test set.

Finnish Spanish Swedish

Maj. Vote 82.20% 72.39% 69.79%
CNN 94.81% 88.93% 90.09%

BiLSTM 95.13% 89.33% 89.45%

mentation information and thus needs to discover
useful character patterns by itself. After training,
we calculate the attribution scores of each charac-
ter pattern within a word with respect to the correct
feature class using CD, and evaluate whether this
coincides with the ground truth attribution.

Model We train CNN and BiLSTM models on
Finnish, Spanish and Swedish. The average accu-
racies on the full test set are reported in Table 2.5

As a reference for the trained models’ ability to
predict morphological feature classes, we provide
a naive baseline, constructed from the majority
vote for each feature type.

Overall, our neural models yield substantially
higher average accuracies than the baseline and
perform very similar. Consequently, both the
CNN and LSTM models learned useful character
patterns for predicting the correct morphological
feature classes. Hence, this raises the question
whether these patterns coincide with our linguis-
tic knowledge.

Evaluation For each annotated word/feature
pair, we measure if the ground truth character se-

5The results of the individual classes are provided as sup-
plementary material.



3281

ˆ o l i v a t $
BiLSTM

CNN

-3.2
0
3.2

(a) Example of Finnish. Word (verb): olivat (were), target
class: Tense=Past

ˆ g r a t u i t a $
BiLSTM

CNN

-2.6
0
2.6

(b) Example of Spanish. Word (adjective): gratuita
(free), target: Gender=Fem.

ˆ k r o n o r $

$
r
o
n
o
r
k
ˆ CNN

BiLSTM

-5.5

0

5.5

(c) Example of Swedish. Word (noun): kronor (Swedish
valuta as in dollars), target: Number=Plur.

Figure 4: Character-level contributions for predict-
ing a particular class. Positive contributions are
highlighted in red and negative contributions in
blue. The ground truth character sequence is high-
lighted in bold.

quence corresponds to the set or sequence of char-
acters with the same length within the considered
word that has the highest contribution for predict-
ing the correct label for that word.

In the first setup, we only compare with charac-
ter sequences having a consecutive set of charac-
ters (denoted cons). In the second setup, we com-
pare with any set of characters (denoted all). We
rank the contributions of each character set and re-
port top one, two, and three scores. Because start-
of-word and end-of-word characters are not anno-
tated in the dataset, we do not consider them part
of the candidate character sets.

Results The aggregated results for all classes
and character sequence lengths are shown in Fig-

ure 3. In general, we observe that for almost all
models and setups, the contextual decomposition
attribution coincides with the manually-defined
segmentations for at least half of the word/feature
pairs. When we only consider the top two con-
secutive sequences (marked as cons), accuracies
range from 76% up to 93% for all three languages.
For Spanish and Swedish, the top two accuracies
for character sets (marked as all) are still above
67%, despite the large space of possible character
sets, whereas all ground truth patterns are consec-
utive sequences. While the accuracy for Finnish is
lower, the top two accuracy is still above 50%.

Examples for Finnish, Spanish and Swedish are
shown in Figure 4. For Finnish, the character
with the highest contribution i coincides with the
ground truth character for the CNN model. This is
not the case for the BiLSTM model which focuses
on the character v, even though the correct label
is predicted. For Spanish, both models strongly
focus on the ground truth character a for predict-
ing the feminine gender. For Swedish, the ground
truth character sequence is the suffix or which de-
notes plurality. Given that or consists of two char-
acters, all contributions of character sets of two
characters are visualized. As can be seen, the most
important set of two characters is {o,r} for the
CNN and {k,r} for the BiLSTM model. However,
{o,r} is the second most important character set for
the BiLSTM model. Consequently, the BiLSTM
model deemed the interaction between a root and
suffix character more important than between two
suffix characters.

5.3 Analysis of learned patterns

In the previous section, we showed that there is a
strong relationship between the manually-defined
morphological segmentation and the patterns a
neural network learns. However, there is still an
accuracy gap between the results obtained using
consecutive sequences only and results obtained
using all possible character sets. Hence, this leads
to the question which patterns the neural network
focuses on, other than the manually defined pat-
terns we evaluated before. To that end, for each of
the three languages, we selected a morphological
class of interest and evaluated for all words in the
full UD test set that were assigned to that class
what the most important character set of length
one, two and three was. In other words, we eval-
uated for each word for which the class was cor-



3282

Table 3: The most frequent character sets used by a model for predicting a specific class. The frequency
of occurrence is shown between brackets. An underscore denotes an unknown character.

One character Two characters Three characters Examples

Fi
nn

is
h

Te
ns

e=
Pa

st

BiL.
i (69%), t (22%),
v (4%), a (2%)

ti (13%), t_i (12%),
v_t (9%), ui (6%)

tti (8%), iv_t (5%),
t__ti (3%), sti (3%)

olivat,
näyttikään

CNN
i (71%), t (8%), s

(6%), o (5%)
ui (12%), si (11%), ti

(11%), oi (9%)
a__ui (3%), tii (3%),

iv__$ (2%), ui__t (2%)
tiesi,

meidät

Sp
an

is
h

G
en

d=
Fe

m

BiL.
a (69%), i (16%),

d (6%), e (4%)
as (23%), a$ (13%),

ad (7%), ia (5%)
ia$ (4%), ad$ (3%),
da$ (3%), ca$ (2%)

tolerancia,
ciudad

CNN
a (77%), ó (14%),

n (4%), d (3%)
a$ (34%), as (20%),

da (8%), ió (7%)
dad (5%), da$ (4%),
a_ió (4%), sió (2%)

firmas,
precisión

Sw
ed

is
h

N
um

b=
Pl

ur

BiL.
n (25%), r (19%),
a (14%), g (7%)

na (13%), a__r (4%),
or (3%), n__r (3%)

iga (5%), rna (3%), ner
(1%), der (1%)

kronor,
perioder

CNN
n (21%), a (18%),
r (15%), d (5%)

rn (8%), na (5%), or
(4%), er (3%)

rna (7%), arn (3%), iga
(2%), n_ar (2%)

krafterna,
saker

rectly predicted, which character set had the high-
est positive contribution towards predicting that
class. The results can be found in Table 3.

Finnish In Finnish, adding the suffix i to a verb,
transforms it in the past tense. Sometimes the
character s is added, resulting in the suffix si. The
latter is a frequently used bigram pattern by the
CNN but less by the BiLSTM. The BiLSTM com-
bines the suffix i with another suffix vat which de-
notes third person plural in the character pattern
iv_t.

Spanish While there is no single clear-cut rule
for the Spanish gender, in general the suffix a de-
notes the feminine gender in adjectives. However,
there exist many nouns that are feminine but do
not have the suffix a. Teschner and Russell (1984)
identify d, and ión as typical endings of feminine
nouns, which our models identified too as for ex-
ample ad$ or ió/sió.

Swedish In Swedish, there exist four suffixes
for creating a plural form: or, ar, (e)r and n.
Both models identified the suffix or. However,
similar to Finnish, multiple suffixes are merged.
In Swedish, the suffix na only occurs together
with one of the first three plural suffixes. Hence,
both models correctly identified this pattern as an
important pattern for predicting the class num-
ber=plural, rather than the linguistically-defined
pattern.

5.4 Interactions of learned patterns

In the previous section, the pattern a$ showed
to be the most important pattern in 34% of the
correctly-predicted feminine Spanish words in our
dataset. However, there exist many words that end
with the character a that are not feminine. For ex-
ample the third person singular form of the verb
gustar is gusta. Hence, this raises the question if
the model will classify gusta wrongly as feminine
or correctly as NA. As an illustration of the appli-
cability of CD for morphological analysis, we will
study this case in more detail.

From the full UD test set, we selected all words
that end with the character a and that do not be-
long to the class gender=feminine. Using the
Spanish CNN model, we predicted the gender
class for each word and divided the words into
two groups: predicted as feminine and predicted
as not-feminine (_NA_ or masculine). The re-
sulted in 44 and 199 words. Next, for each
word in both groups we calculated the most pos-
itively and negatively contributing character set
out of all possible character sets of any length
within the considered word, using the CD algo-
rithm. We compared the contribution scores in
both groups using a Kruskal-Wallis significance
test.6 While no significant (p < 0.05) difference
could be found between the positive contributions
of both groups (p=1.000), a borderline significant
difference could be found between the negative

6The full statistical analysis is provided as supplementary
material.



3283

ˆ g u s t a $

Masculine
Feminine

NA

-3.8

0

3.8

Figure 5: Visualization of the most positively and
negatively contributing character set for each class
of the morphological feature class gender for the
Spanish verb gusta (likes).

contributions of words predicted as feminine and
words predicted as not-feminine (p=0.070).

Consequently, the CNN model’s classification
decision is based on finding enough negative evi-
dence to counteract the positive evidence found in
the pattern a$, which CD was able to uncover.

A visualization of this interaction is shown in
Figure 5 for the word gusta. While the positive ev-
idence is the strongest for the class feminine, the
model identifies the verb stem gust as negative ev-
idence which ultimately leads to the correct final
prediction NA.

6 Conclusion

While neural network-based models are part of
many NLP systems, little is understood on how
they handle the input data. We investigated how
specific character sequences at the input of a neu-
ral network model contribute to word-level tag-
ging decisions at the output, and if those contri-
butions follow linguistically interpretable rules.

First, we presented an analysis and visualization
technique to decompose the output of CNN mod-
els into separate input contributions, based on the
principles outlined by Murdoch et al. (2018) for
LSTMs. This allowed us then to quantitatively and
qualitatively compare the character-level patterns
the CNNs and BiLSTMs learned for the task of
morphological tagging. We showed that these pat-
terns generally coincide with the morphological
segments as defined by linguists for three morpho-
logically different languages, but that sometimes
other linguistically plausible patterns are learned.
Finally, we showed that our CD algorithm for
CNNs is able to explain why the model made a
wrong or correct prediction.

By visualizing the contributions of each input
unit or combinations thereof, we believe that much
can be learned on how a neural network handles

the input data, why it makes certain decisions, or
even for debugging neural network models.

Acknowledgments

The authors would like to thank the anonymous re-
viewers and members of IDLab for their valuable
feedback. FG would like to thank Kim Bettens for
helping out with the statistical analysis.

The research activities as described in this pa-
per were funded by Ghent University, imec, Flan-
ders Innovation & Entrepreneurship (VLAIO),
the Fund for Scientific Research-Flanders (FWO-
Flanders), and the European Union.

References
Yossi Adi, Einat Kermany, Yonatan Belinkov, Ofer

Lavi, and Yoav Goldberg. 2017. Fine-grained anal-
ysis of sentence embeddings using auxiliary predic-
tion tasks. International Conference on Representa-
tion Learning (ICLR).

Yonatan Belinkov, Nadir Durrani, Fahim Dalvi, Hassan
Sajjad, and James Glass. 2017. What do neural ma-
chine translation models learn about morphology?
In Proceedings of the Association for Computational
Linguistics (ACL).

Johannes Bjerva, Barbara Plank, and Johan Bos. 2016.
Semantic tagging with deep residual networks. In
Proceedings of the International Conference on
Computational Linguistics (COLING).

Eric Brill. 1994. A report of recent progress in
transformation-based error-driven learning. In Pro-
ceedings of the Workshop on Human Language
Technology (HLT).

Grzegorz Chrupała, Lieke Gelderloos, and Afra Al-
ishahi. 2017. Representations of language in a
model of visually grounded speech signal. In Pro-
ceedings of the Association for Computational Lin-
guistics (ACL).

Georg Heigold, Guenter Neumann, and Josef van Gen-
abith. 2017. An extensive empirical evaluation of
character-based morphological tagging for 14 lan-
guages. In Proceedings of the European Chap-
ter of the Association for Computational Linguistics
(EACL).

Ákos Kádár, Grzegorz Chrupała, and Afra Alishahi.
2017. Representation of linguistic form and func-
tion in recurrent neural networks. Computational
Linguistics.

Yoon Kim, Yacine Jernite, David Sontag, and Alexan-
der M. Rush. 2016. Character-aware neural lan-
guage models. In Proceedings of the Thirtieth AAAI
Conference on Artificial Intelligence (AAAI).



3284

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. International
Conference on Representation Learning (ICLR).

Sheldon Klein and Robert F. Simmons. 1963. A com-
putational approach to grammatical coding of en-
glish words. Journal of the Association for Com-
puting Machinery.

Jiwei Li, Xinlei Chen, Eduard Hovy, and Dan Jurafsky.
2016a. Visualizing and understanding neural mod-
els in nlp. In Proceedings of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies (NAACL-
HLT).

Jiwei Li, Will Monroe, and Dan Jurafsky. 2016b. Un-
derstanding neural networks through representation
erasure. CoRR, abs/1612.08220.

Wang Ling, Chris Dyer, Alan W. Black, Isabel Tran-
coso, Ramon Fermandez, Silvio Amir, Luís Marujo,
and Tiago Luís. 2015. Finding function in form:
Compositional character models for open vocabu-
lary word representation. In Conference on Em-
pirical Methods in Natural Language Processing
(EMNLP).

Tal Linzen, Emmanuel Dupoux, and Yoav Goldberg.
2016. Assessing the ability of LSTMs to learn
syntax-sensitive dependencies. Transactions of the
Association for Computational Linguistics.

Minh-Thang Luong and Christopher D. Manning.
2016. Achieving open vocabulary neural machine
translation with hybrid word-character models. In
Proceedings of Association for Computational Lin-
guistics (ACL).

W. James Murdoch, Peter J. Liu, and Bin Yu. 2018. Be-
yond word importance: Contextual decomposition
to extract interactions from LSTMs. International
Conference on Learning Representations (ICLR).

Joakim Nivre, Marie-Catherine de Marneffe, Filip Gin-
ter, Yoav Goldberg, Jan Hajic, Christopher D. Man-
ning, Ryan McDonald, Slav Petrov, Sampo Pyysalo,
Natalia Silveira, Reut Tsarfaty, and Daniel Zeman.
2016. Universal dependencies v1: A multilingual
treebank collection. In Proceedings of the Interna-
tional Conference on Language Resources and Eval-
uation (LREC).

Barbara Plank, Anders Søgaard, and Yoav Goldberg.
2016. Multilingual part-of-speech tagging with
bidirectional long short-term memory models and
auxiliary loss. In Proceedings of the Association for
Computational Linguistics (ACL).

Alec Radford, Rafal Józefowicz, and Ilya Sutskever.
2017. Learning to generate reviews and discovering
sentiment. CoRR, abs/1704.01444.

Adwait Ratnaparkhi. 1996. A maximum entropy
model for part-of-speech tagging. In Conference on
Empirical Methods in Natural Language Processing
(EMNLP).

Cícero Nogueira dos Santos and Bianca Zadrozny.
2014. Learning character-level representations for
part-of-speech tagging. In International Confernce
of Machine Learning (ICML).

Ramprasaath R. Selvaraju, Michael Cogswell, Ab-
hishek Das, Ramakrishna Vedantam, Devi Parikh,
and Dhruv Batra. 2017. Grad-cam: Visual explana-
tions from deep networks via gradient-based local-
ization. In IEEE International Conference on Com-
puter Vision (ICCV).

Avanti Shrikumar, Peyton Greenside, and Anshul Kun-
daje. 2017. Learning important features through
propagating activation differences. In Proceedings
of the International Conference on Machine Learn-
ing (ICML).

Miikka Silfverberg and Mans Hulden. 2017. Auto-
matic morpheme segmentation and labeling in uni-
versal dependencies resources. In Proceedings of
the NoDaLiDa 2017 Workshop on Universal Depen-
dencies (UDW 2017).

Jost Tobias Springenberg, Alexey Dosovitskiy, Thomas
Brox, and Martin A. Riedmiller. 2014. Striving
for simplicity: The all convolutional net. CoRR,
abs/1412.6806.

Hendrik Strobelt, Sebastian Gehrmann, Hanspeter Pfis-
ter, and Alexander M. Rush. 2018. Lstmvis: A tool
for visual analysis of hidden state dynamics in recur-
rent neural networks. IEEE Transactions on Visual-
ization and Computer Graphics.

Richard Teschner and William Russell. 1984. The gen-
der patterns of spanish nouns: an inverse dictionary-
based analysis. Hispanic Linguistics 1.

Kristina Toutanova, Dan Klein, Christopher D. Man-
ning, and Yoram Singer. 2003. Feature-rich part-of-
speech tagging with a cyclic dependency network.
In Proceedings of the North American Chapter of the
Association for Computational Linguistics on Hu-
man Language Technology (NAACL-HLT).

Clara Vania and Adam Lopez. 2017. From characters
to words to in between: Do we capture morphology?
In Proceedings of the Association for Computational
Linguistics (ACL).


