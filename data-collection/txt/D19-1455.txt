



















































Self-Assembling Modular Networks for Interpretable Multi-Hop Reasoning


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 4474–4484,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

4474

Self-Assembling Modular Networks
for Interpretable Multi-Hop Reasoning

Yichen Jiang and Mohit Bansal
UNC Chapel Hill

{yichenj, mbansal}@cs.unc.edu

Abstract

Multi-hop QA requires a model to connect
multiple pieces of evidence scattered in a
long context to answer the question. The
recently proposed HotpotQA (Yang et al.,
2018) dataset is comprised of questions em-
bodying four different multi-hop reasoning
paradigms (two bridge entity setups, check-
ing multiple properties, and comparing two
entities), making it challenging for a single
neural network to handle all four. In this
work, we present an interpretable, controller-
based Self-Assembling Neural Modular Net-
work (Hu et al., 2017, 2018) for multi-hop rea-
soning, where we design four novel modules
(Find, Relocate, Compare, NoOp) to perform
unique types of language reasoning. Based
on a question, our layout controller RNN dy-
namically infers a series of reasoning modules
to construct the entire network. Empirically,
we show that our dynamic, multi-hop modu-
lar network achieves significant improvements
over the static, single-hop baseline (on both
regular and adversarial evaluation). We further
demonstrate the interpretability of our model
via three analyses. First, the controller can
softly decompose the multi-hop question into
multiple single-hop sub-questions to promote
compositional reasoning behavior of the main
network. Second, the controller can predict
layouts that conform to the layouts designed
by human experts. Finally, the intermediate
module can infer the entity that connects two
distantly-located supporting facts by address-
ing the sub-question from the controller.1

1 Introduction

The task of multi-hop question answering (QA)
requires the model to answer a natural language
question by finding multiple relevant information

1Our code is publicly available at: https://github.
com/jiangycTarheel/NMN-MultiHopQA

Figure 1: Two HotpotQA examples and the modular
network layout predicted by the controller.

pieces scattered in a given natural language con-
text. It has attracted more attention recently and
multiple datasets have been proposed, including
the recent HotpotQA (Yang et al., 2018) that is
comprised of questions embodying four differ-
ent multi-hop reasoning paradigms: inferring the
bridge entity to complete the 2nd-hop question
(first question in Fig. 1), inferring the answer
through a bridge entity, checking multiple proper-
ties to select the answer, and comparing two en-
tities (second question in Fig. 1). For the first
question, it is necessary to first find the person
“who portrayed Corliss Archer in the film Kiss and
Tell”, and then find out the “government position”
she held. For the second question, one may arrive
at the answer by finding the country where Scott
and Ed are from, and then comparing the two na-
tionalities to conclude whether they are the same.

Multi-hop QA is more challenging than single-
hop QA for two main reasons. First, the tech-
niques used for single-hop QA are not sufficient
to answer a multi-hop question. In single-hop QA
tasks like SQuAD (Rajpurkar et al., 2016), the ev-
idence necessary to answer the question is con-
centrated in a short context (Q: “What is the color
of the grass”, Context: “The grass is green.”, An-

https://github.com/jiangycTarheel/NMN-MultiHopQA
https://github.com/jiangycTarheel/NMN-MultiHopQA


4475

swer: “Green”). Such datasets emphasize the role
of matching the information between the ques-
tion and the short context surrounding the an-
swer (“sky→sky, color→blue”), and can be solved
by building a question-aware context representa-
tion (Seo et al., 2017; Xiong et al., 2017). In con-
trast, for multi-hop QA, directly matching the se-
mantics of the question and context leads to the
entity that bridges the two supporting facts (e.g.,
“Shirley Temple”), or the entities that need to be
compared against each other (e.g., nationalities of
Scott and Ed). In both cases, further action is
required on top of direct semantic matching in
order to get to the final answer. Second, Hot-
potQA is comprised of questions of four differ-
ent types of multi-hop reasoning paradigms. In
Fig. 1, the first question embodies a sequential rea-
soning path where the model has to solve a sub-
question to get an entity “Shirley Temple”, which
then leads to the answer to the main question about
her “government position”. The second question,
on the other hand, requires a tree-structured rea-
soning path where the model first locates two en-
tities on the leaves and then compares them to get
the answer. The difference in the required reason-
ing skills makes it hard for a single static model to
handle all types of questions.

To automatically discover the multiple elabo-
rated reasoning steps as required in HotpotQA,
a model needs to dynamically adopt a sequence
of different reasoning behaviors based on spe-
cific questions, which is still unexplored in the
field of large-scale text-based QA. In our work,
we present a highly-interpretable self-assembling
Neural Modular Network (Andreas et al., 2016a;
Hu et al., 2017) with three novel modules designed
for multi-hop NLP tasks: Find, Relocate,
Compare, where each module embodies a unique
type of reasoning behavior. The Find module
is similar to the previously-introduced 1-hop bi-
attention model (Seo et al., 2017; Xiong et al.,
2017), which produces an attention map over the
context words given the context and the ques-
tion representation. For the first example in
Fig. 1, a Find module is used to find the answer
(“Shirley Temple”) to the sub-question (“who por-
trayed Corliss Archer ...”). The Relocate mod-
ule takes the intermediate answer to the previous
sub-question (“Shirley Temple”), combines it with
the current sub-question (“What government po-
sition was held by ...”), and then outputs a new

attention map conditioned on the previous one.
The Compare module intuitively “compares” the
outputs from two previous modules based on the
question. For the second example in Fig. 1, after
previous modules find the nationality of “Scott”
and “Ed” (both American), the Compare mod-
ule outputs the answer “Yes” based on the word
“same” in the question. We also use the NoOp
module that keeps the current state of the network
unchanged when the model decides no more ac-
tion is needed. After all the reasoning steps are
performed, the final attention map is used to pre-
dict the answer span, and the vector output from
the Compare module is used to predict whether
the answer should be a context span or “Yes/No”.

Next, to dynamically assemble these mod-
ules into a network based on the specific ques-
tion, we use a controller RNN that, at each
step, infers the required reasoning behavior from
the question, outputs the sub-question, and pre-
dicts a soft combination of all available mod-
ules. As shown in Fig. 1, a modular net-
work Relocate(Find()) is constructed for
the bridge-type question and another network with
the layout Compare(Find(), Find()) is
built for the comparison-type question. In order to
make the entire model end-to-end differentiable in
gradient descent, we follow Hu et al. (2018) to use
continuous and soft layout prediction and maintain
a differentiable stack-based data structure to store
the predicted modules’ output. This approach to
optimize the modular network is shown to be supe-
rior to using a Reinforcement Learning approach
which makes hard module decisions. Fig. 2 visual-
izes this controller that predicts the modular layout
and the network assembled with the selected mod-
ules. We further apply intermediate supervision to
the first produced attention map to encourage find-
ing the bridge entity (“Shirley Temple” in Fig. 1).
The entire model is trained end-to-end using cross
entropy loss for all supervision.

Overall, our self-assembling controller-based
Neural Modular Network achieves statistically
significant improvements over both the single-hop
bi-attention baseline and the original modular net-
work (Hu et al., 2018) designed for visual-domain
QA. We also present adversarial evaluation (Jiang
and Bansal, 2019), where single-hop reasoning
shortcuts are eliminated and compositional rea-
soning is enforced; and here our NMN again out-
performs the BiDAF baseline significantly in the



4476

EM score (as well as after adversarial training).
We further demonstrate the interpretability of our
modular network with three analyses. First, the
controller understands the multi-hop semantics of
the question and can provide accurate step-by-
step sub-questions to the module to lead the main
network to follow the reasoning path. Second,
the controller can successfully predict layouts that
conform to the layouts designed by human ex-
perts. Finally, before arriving at the final answer,
the intermediate module can infer the bridge en-
tity that connects two distantly-located supporting
facts by leveraging the step-specific sub-question
from the controller. All of these analyses show
that our Modular Network is not operating as a
black box, but demonstrates highly interpretable
compositional reasoning behavior, which is bene-
ficial in transparent model development and safe,
trustworthy real-world applications. In summary,
the contribution of this work is three-fold: 1) This
is the first work to apply self-assembling mod-
ular networks to text-based QA; 2) We design
three novel modules to handle multi-hop questions
in HotpotQA; 3) The resulting network is inter-
pretable in terms of the model’s intermediate out-
puts and the assembled layout.

2 Related Works

Multi-hop Reading Comprehension The last
few years have witnessed significant progress
on large-scale QA datasets including cloze-
style tasks (Hermann et al., 2015), open-domain
QA (Yang et al., 2015), and more (Rajpurkar
et al., 2016, 2018). However, all of the above
datasets are confined to a single-document con-
text per question domain. Joshi et al. (2017) in-
troduced a multi-document QA dataset with some
questions requiring cross-sentence inferences to
answer. The bAbI dataset (Weston et al., 2016)
requires the model to combine multiple pieces
of evidence in the synthetic text. Welbl et al.
(2017) uses Wikipedia articles as the context and
a subject-relation pair as the query, and constructs
the multi-hop QAngaroo dataset by traversing a
directed bipartite graph so that the evidence re-
quired to answer a query could be spread across
multiple documents. HotpotQA (Yang et al.,
2018) is a more recent multi-hop QA dataset that
has crowd-sourced questions with more diverse
syntactic and semantic features compared to QAn-
garoo. It includes four types of questions, each re-

quiring a different reasoning paradigm. Some ex-
amples require inferring the bridge entity from the
question (Type I in Yang et al. (2018)), while oth-
ers demand fact-checking or comparing subjects’
properties from two different documents (Type II
and comparison question). Concurrently to our
work, Min et al. (2019b) also tackle HotpotQA by
decomposing its multi-hop questions into single-
hop sub-questions to achieve better performance
and interpretability. However, their system ap-
proaches the question decomposition by having
a decomposer model trained via human labels,
while our controller accomplishes this task auto-
matically with the soft attention over the question-
words’ representation and is only distantly super-
vised by the answer and bridge-entity supervi-
sion, with no extra human labels. Moreover, they
propose a pipeline system with the decomposers,
an answer-prediction model, and a decomposition
scorer trained separately on the previous stage’s
output. Our modular network, on the other hand,
is an end-to-end system that is optimized jointly.

Neural Modular Network Neural Modular
Network (NMN) is a class of models that are
composed of a number of sub-modules, where
each sub-module is capable of performing a spe-
cific subtask. In NMN (Andreas et al., 2016b),
N2NMN (Hu et al., 2017), PG+EE (Johnson et al.,
2017) and TbD (Mascharka et al., 2018), the en-
tire reasoning procedure starts by analyzing the
question and decomposing the reasoning proce-
dure into a sequence of sub-tasks, each with
a corresponding module. This is done by ei-
ther a parser (Andreas et al., 2016b) or a lay-
out policy (Hu et al., 2017; Johnson et al., 2017;
Mascharka et al., 2018) that turns the question into
a module layout. Then the module layout is ex-
ecuted with a neural module network. Overall,
given an input question, the layout policy learns
what sub-tasks to perform, and the neural modules
learn how to perform each individual sub-task.

However, since the the modular layout is sam-
pled from the controller, the controller itself is not
end-to-end differentiable and has to be optimized
using Reinforcement Learning Algorithms like
Reinforce (Williams, 1992). Hu et al. (2018) used
soft program execution where the output of each
step is the average of outputs from all modules
weighted by the module distribution, and showed
its superiority over hard-layout NMNs. All pre-
vious works in NMN, including Hu et al. (2018)



4477

C
on

tro
lle

r

Scott Derrickson is 
an American director.

Edward Wood Jr. was 
an American filmmaker.

Prediction: Yes

Q: Were Scott Derrickson and Ed Wood of the same nationality?
Sub-question

Module 
weights

M
od

ul
ar

 N
et

w
or

k

avg. output of 
all modules

RNN

avg. output of 
all modules

avg. output of 
all modules

find rel cm
pnop find rel cm

pnop find rel cm
pnop

find rel cm
pnop find rel cm

pnop

find rel cm
pnop

Stack of 
Attention

Push Push

Pop

Figure 2: Modular network with a controller (top) and
the dynamically-assembled modular network (bottom).
At every step, the controller produces a sub-question
vector and predicts a distribution to weigh the averages
of the modules’ outputs.

targeted visual question answering or structured
knowledge-based GeoQA, and hence the modules
are designed to process image or KB inputs. We
are the first to apply modular networks to unstruc-
tured, text-based QA, where we redesigned the
modules for language-based reasoning by using
bi-attention (Seo et al., 2017; Xiong et al., 2017)
to replace convolution and multiplication of the
question vector with the image feature. Our model
also has access to the full-sized bi-attention vector
before it is projected down to the 1-d distribution.

Architecture Learning Our work also shares
the spirit of recent research on Neural Architecture
Search (NAS) (Zoph and Le, 2016; Pham et al.,
2018; Liu et al., 2018), since the architecture of
the model is learned dynamically based on con-
trollers instead of being manually-designed. How-
ever, Neural Architecture Search aims to learn the
structure of the individual CNN/RNN cell with
fixed inter-connections between the cells, while
Modular Networks have preset individual modules
but learns the way to assemble them into a larger
network. Moreover, Modular Networks’ architec-
tures are predicted dynamically on each data point,
while previous NAS methods learn a single cell
structure independent of the example.

3 Model

In this section, we describe how we apply the Neu-
ral Modular Network to the multi-hop HotpotQA
task (Yang et al., 2018). In Sec. 3.2 and Sec. 3.3,
we describe the controller, which sketches the
model layout for a specific example, and introduce
how it assembles the network with the predicted
modules. In Sec. 3.4, we go into details of every
novel module that we design for this task.

3.1 Encoding

We use a Highway Network (Srivastava et al.,
2015) to merge the character embeddings and
GloVe word embeddings (Pennington et al., 2014),
building word representations for the context and
the question as x ∈ RS×v and q ∈ RJ×v re-
spectively, where S and J are the lengths of the
context and the question. We then apply a bi-
directional LSTM-RNN (Hochreiter and Schmid-
huber, 1997) of d hidden units to get the contex-
tualized word representations for the context and
question: h = BiLSTM(x); u = BiLSTM(q)
so that h ∈ RS×2d and u ∈ RJ×2d. We also use a
self attention layer (Zhong et al., 2019) to get qv,
a fixed-sized vector representation of the question.

3.2 Model Layout Controller

In a modular network, the controller reads the
question and predicts a series of our novel mod-
ules that could be executed in order to answer the
given question. For multi-hop QA, each module
represents a specific 1-hop reasoning behavior and
the controller needs to deduce a chain of reasoning
behavior that uncovers the evidence necessary to
infer the answer. Similar to the model in Hu et al.
(2018), at the step t, the probability of selecting
module i is calculated as:

qt =W1,t · qv + b1,t
cqt =W2 · [ct−1; qt] + b2
st =W3 · cqt
pt,i = Softmax(st)

(1)

where ct−1 is the controller’s hidden state and qt
is the vector representation of the question coming
out of the encoding LSTM.W3 projects the output
to the dimension of 1×I , where I is the number of
available modules. When predicting the next mod-
ule, the controller also supplies the current mod-
ule, which we design for the language domain,
with a fixed-sized vector as the sub-question at the



4478

current reasoning step (the gray-shaded area of the
controller in Fig. 2). Consider the first example in
Fig. 1. At the first reasoning step, the Find mod-
ule’s sub-question is “the woman who portrayed
Corliss Archer in the film Kiss and Tell”. To gen-
erate this sub-question vector, the controller first
calculates a distribution over all question words
and then computes the weighted average of all the
word representations:

et,j =W4 · (cqt · uj) + b4
cvt = Softmax(et)

ct =
∑
j

cvt,j · uj
(2)

The sub-question vector ct also serves as the con-
troller’s hidden state and is used to calculate the
module probability in the next reasoning step.
Similarly, in the second reasoning step, the sub-
question of the Relocate module is “What gov-
ernment position was held by” and the answer
from the Find module at the first step.

3.3 Stack NMN with Soft Program Execution
In our NMN, some modules may interact with
the attention output from previous modules to col-
lect information that could benefit the current rea-
soning step. For tree-structured layouts, such as
Compare(Find(),Find()) as shown in Fig. 1,
the latter Comparemodule requires access to pre-
vious outputs. We follow Hu et al. (2018) to use a
stack to store attention outputs generated by our
modules. In the tree-structured layout, the two
Findmodules push two attention outputs onto the
stack, and the Compare module pops these two
attention outputs to compare the content they each
focus on. To make the entire model differentiable,
we also adopt soft program execution from Hu
et al. (2018), where the output of each step is the
sum of outputs from all modules weighted by the
module distribution (blue-shaded area in Fig. 2)
computed by the controller.

3.4 NMN Modules
We next describe all the modules we designed for
our Neural Modular Network. All modules take
the question representation u, context representa-
tion h, and sub-question vector ct as input. The
core modules that produce the attention map over
the context are based on bi-attention (Seo et al.,
2017) between the question and context, instead of
relying on convolution as in previous NMNs (Hu

et al., 2017, 2018). Every module outputs a fixed-
size vector/zero vector as the memory state of the
NMN, and is also able to push/pop attention maps
onto/from the stack. These modules, each solving
a single-hop sub-question, are chained together ac-
cording to the layout predicted by the controller to
infer the final answer to the multi-hop question.

Find This module performs the bidirectional
attention (Seo et al., 2017) between question u and
context h′ = h · ct. By multiplying the orig-
inal context representation by ct, we inject the
sub-question into the following computation. The
model first computes a similarity matrix MJ×S

between every question and context word and use
it to derive context-to-query attention:

Mj,s =W1uj +W2h
′
s +W3(uj � h′s)

pj,s =
exp(Mj,s)∑J
j=1 exp(Mj,s)

cqs =
J∑

j=1

pj,suj

(3)

where W1,W2 and W3 are trainable parameters,
and � is element-wise multiplication. Then the
query-to-context attention vector is derived as:

ms = max1≤s≤S Mj,s

ps =
exp(ms)∑S
s=1 exp(ms)

qc =
S∑

s=1

pshS

(4)

We then obtain the question-aware context repre-
sentation as: h̃ = [h′; cq;h′ � cq; cq � qc], and
push this bi-attention result onto the stack. This
process is visualized in the first two steps in Fig. 2.

Relocate For the first example in Fig. 1,
the second reasoning step requires finding the
“government position” held by the woman, who
is identified in the first step. We propose the
Relocate module to model this reasoning be-
havior of finding the answer based on the infor-
mation from the question as well as the previous
reasoning step. The Relocate module first pops
an attention map att1 from the stack and com-
putes the bridge entity’s representation b as the
weighted average over h using the popped atten-
tion. It then computes a bridge-entity-awared rep-
resentation of context hb, and then applies a Find



4479

module between hb and question u:

b =
∑
s

att1,s · hs

hb = h� b

h̃ = Find(u,hb, ct)

(5)

The output h̃ is then pushed onto the stack.

Compare As shown in the final step in Fig. 2,
the Compare module pops two attention maps
att1 and att2 from the stack and computes two
weighted averages over h using the attention
maps. It then merges these two vectors with ct
to update the NMN’s memory state m.

hs1 =
∑
s

att1,s · hs; hs2 =
∑
s

att2,s · hs

oin = [ct;hs1;hs2; ct · (hs1 − hs2)]
m =W1 · (ReLU(W2 · oin))

(6)

The intuition is that the Compare module aggre-
gates the information from two attention maps and
compares them according to the sub-question ct.

NoOp This module updates neither the stack nor
the memory state. It can be seen as a skip com-
mand when the controller decides no more com-
putation is required for the current example.

3.5 Bridge Entity Supervision
Even with the multi-hop architecture to capture the
hop-specific distribution over the question, there
is no supervision on the controller’s output distri-
bution c about which part of the question is re-
lated to the current reasoning step, thus preventing
the controller from learning the composite reason-
ing skill. To address this problem, we supervise
the first Find module to predict the bridge entity
(“Shirley Temple” in Fig. 1), which indirectly en-
courages the controller to look for question infor-
mation related to this entity (“the woman who por-
trayed Corliss Archer...”) at the first step. Since the
original dataset does not label the bridge entity, we
apply a simple heuristic to detect the bridge entity
that is the title of one supporting document while
also appearing in the other supporting document.2

3.6 Prediction Layer
After all the reasoning steps have completed, to
predict a span from the context as the answer, we

2There are two supporting documents per example.

pop the top attention map from the stack, apply
self-attention (Yang et al., 2018), and project it
down to get the span’s start index and end index.
To predict yes/no, we take the final memory (m in
Eqn. 6) and project it down to a 2-way classifier.
We concatenate the question vector qv and mem-
ory m and then project down to a 2-way classifier
to decide whether to output a span or yes/no.

3.7 Optimization

Previous works on modular network (Hu et al.,
2017, 2018) optimize the controller parameters θ
jointly with the modules parameters ω on the train-
ing set. However, we found that our controller
converges3 in less than 20 iterations under this
training routine. It is also likely that this setup
causes the model to overfit to the single-hop rea-
soning shortcuts in the training set. Hence, to pre-
vent such premature convergence and reasoning-
shortcut overfitting, we adopt the 2-phase training
strategy that is widely used in Neural Architecture
Search (Zoph and Le, 2016; Pham et al., 2018).
The first phase updates ω for an entire epoch, fol-
lowed by the second phase that updates θ over
the entire dev set. We alternate between the two
phases until the entire system converges.

4 Experimental Setup

Dataset and Metric We conduct our train-
ing and evaluation on the HotpotQA (Yang
et al., 2018) dataset’s distractor setting, which
has 90,447 training examples (72991 bridge-type
questions and 17456 comparison-type questions)
and 7,405 dev examples (5918 bridge-type ques-
tions and 1487 comparison-type questions). Since
there is no public test set available, we split the
original dev set into a dev set of 3,702 examples on
which we tune our models, and a test set of 3,703
examples that is only used for the final test results.
Each question is paired with 10 documents, among
which 2 are supporting documents that contain the
evidence necessary to infer the answer, and the
other 8 are distracting documents. We evaluate our
models based on the exact-match and F1 score be-
tween the prediction and ground-truth answer.

Data Augmentation We augment the
comparison-type questions in the training set
to promote the model’s robustness on this rea-
soning paradigm. We start with getting the

3Generating modular layout with probability near 1.



4480

ORIGINAL MUTATED
question answer question answer

Were Pavel Urysohn and Levin known No Were Henry Cavill and Li Na known Yesfor the same type of work? for the same type of work?

Were Pavel Urysohn and Levin known No Were Pavel Urysohn and Levin known Yesfor the same type of work? for the different type of work?

Is Rohan Bopanna older Yes Is Rohan Bopanna younger Nothan Sherwood Stewart? than Sherwood Stewart?

Was Howard Hawks a screenwriter of more Yes Was Arthur Berthelet a screenwriter of more Noproductions than Arthur Berthelet? productions than Howard Hawks?

Table 1: Examples of mutated comparison-type questions and answers from HotpotQA training set.

Dev Test
EM F1 EM F1

BiDAF Baseline 44.68 57.19 42.7 55.81
NMN 31.04 40.28 30.87 39.90
Our NMN 50.67 63.35 49.58 62.71
+ Data aug. 50.63 63.29 49.46 62.59

- Bridge sup. 46.56 58.60 45.91 57.22
- Relocate 47.81 60.22 46.75 59.23
- Compare 50.29 63.30 48.87 62.52
- NoOp 49.11 61.79 48.56 62.10

Table 2: EM and F1 scores on HotpotQA dev set and
test set. All models are tuned on dev set.

part-of-speech tags and NER tag of the question
using Corenlp (Manning et al., 2014). For each
question whose answer is either “yes” or “no”, we
generate a new question by randomly sampling
two titles of the same type (based on POS and
NER) from the training set to substitute the
original entities in the question and corresponding
supporting documents (1st row in Table 1). We
then employ three strategies to generate 5,342
extra questions by mutating original questions.
First, if the question contains the word “same” and
the answer is yes or no, we substitute “same” with
“different” and vice versa (2nd row in Table 1).
Second, we detect the comparative and superlative
adjectives/adverbs in the original question, trans-
form them into their antonyms using wordnet,
and then transform the antonyms back to their
comparative form (3rd row in Table 1). Finally, if
the question has a comparative adj./adv., we flip
the order of the two entities compared (4th row
in Table 1). In all three cases, the answer to the
mutated question is also flipped.

Training Details We use 300-d GloVe pre-
trained embeddings (Pennington et al., 2014). The
model is supervised to predict either the start and
end index of a span or “Yes/No” for specific ques-
tions. The entire model (controller + modular net-

work) is trained end-to-end using the Adam opti-
mizer (Kingma and Ba, 2014) with an initial learn-
ing rate of 0.001.

5 Results

5.1 Baseline
Our baseline is the bi-attention (Seo et al., 2017)
+ self-attention model as in (Clark and Gardner,
2018; Yang et al., 2018), which was shown to be
able to achieve strong performance on single-hop
QA tasks like SQuAD (Rajpurkar et al., 2016)
and TriviaQA (Joshi et al., 2017). Our baseline
shares the preprocessing and encoding layer with
the modular network.

5.2 Primary NMN Results
We first present our model’s performance on the
HotpotQA (Yang et al., 2018) dev and test set
of our split. As shown in the first three rows
of Table 2, our modular network achieves signifi-
cant improvements over both the baseline and the
convolution-based NMN (Hu et al., 2018) on our
test set. In Table 3, we further break down the dev-
set performance on different question types,4 and
our modular network obtains higher scores in both
question types compared to the BiDAF baseline.

5.3 Ablation Studies
Data Augmentation: We also conduct ablation
studies on our modeling choices. Augmenting
the comparison-type questions in the training set
boosts the performance on the comparison-type
questions in the dev set (comparing row 3 and 4 in
Table 3) without harming the scores on the bridge-
type questions too much.

Bridge-entity Supervision: Supervising the
bridge entity (described in 3.5) proves to be

4The 3 types of question other than “comparison” are all
classified as “bridge-type” questions by Yang et al. (2018)



4481

Bridge Compare
EM F1 EM F1

BiDAF Baseline 43.17 57.74 45.26 51.73
NMN 30.15 41.49 34.27 40.07
Our NMN 49.85 64.49 51.24 57.20
+ Data aug. 48.97 63.85 54.40 60.03

- Bridge sup. 45.59 59.45 48.82 51.73
- Relocate 46.11 60.13 51.92 58.10
- Compare 49.37 64.46 49.76 56.00
- NoOp 48.46 63.46 49.63 55.26

Table 3: EM and F1 scores on bridge-type and
comparison-type questions from HotpotQA dev set.

Train Reg Reg Adv Adv
Eval Reg Adv Reg Adv

BiDAF Baseline 43.12 34.00 45.12 44.65
Our NMN 50.13 44.70 49.33 49.25

Table 4: EM scores after training on the regular data or
on the adversarial data from Jiang and Bansal (2019),
and evaluation on the regular dev set or the adv-dev set.

beneficial for the modular network to achieve
good performance (row 5 in Table 2 and Table 3).

Modules: As shown in the 6th to 8th row,
removing either the Compare, Relocate or
NoOp module also causes drops in the metric
scores. Specifically, removing the Relocate
module causes significant degrade in bridge-type
questions, which solidifies our claim that relo-
cating the attention based on the inferred bridge
entity is important for compositional reason-
ing. Similarly, removing the Compare module
harms the model’s performance on comparison-
type questions, suggesting the effectiveness of
the module in addressing questions that require
comparing two entities’ properties. These results
demonstrate the contribution of each module to-
ward achieving a self-assembling modular net-
work with the strong overall performance.

5.4 Comparison with Original NMN Modules
One primary contribution of this work is that we
adapt neural modular networks (NMN) (Andreas
et al., 2016a; Hu et al., 2017, 2018), which were
designed for visual-domain QA, to text-domain
QA by rebuilding every reasoning module. We
substitute convolution and multiplication between
question vectors and context features with bi-
attention as the basic reasoning component in the
Find and Relocate. Moreover, our model
maintains a stack of attention outputs before it is
projected down to 1-d, thus enabling skip connec-
tions when predicting the answer span. As shown

in Table 2 and Table 3, our adapted modular net-
work outperforms the original NMN significantly.

5.5 Adversarial Evaluation

Multiple previous works (Chen and Durrett, 2019;
Min et al., 2019a) have shown that models per-
forming strongly on HotpotQA are not necessar-
ily capable of compositional reasoning. Jiang and
Bansal (2019) proposed to construct adversarial
distractor documents to eliminate the reasoning
shortcut and necessitate compositional reasoning
on HotpotQA dataset. To test whether our mod-
ular network can perform robust multi-hop rea-
soning against such adversaries, we evaluate our
models on the adversarial dev set. The second col-
umn of Table 4 shows that our NMN outperforms
the baseline significantly (+10 points in EM score)
on the adversarial evaluation, suggesting that our
NMN is indeed learning stronger compositional
reasoning skills compared to the BiDAF baseline.
We further train both models on the adversarial
training set, and the results are shown in the last
two columns of Table 4. We observe that after ad-
versarial training, both the baseline and our NMN
obtain significant improvement on the adversarial
evaluation, while our NMN maintains a significant
advantage over the BiDAF baseline.

6 Analysis

In this section, we present three analysis meth-
ods to show that our multi-hop NMN is highly
interpretable and makes decisions similar to hu-
man actions. Combining the analyses below, we
can understand how our model reasons to break
the multi-step task into multiple single-step sub-
tasks that are solvable by specific modules, and
harnesses intermediate outputs to infer the answer.

6.1 Controller’s Attention on Questions

Different from single-hop questions, a multi-
hop question usually encodes a sequence of sub-
questions, among which the final sub-question re-
quires an explicit answer. Therefore, the first step
of solving a multi-hop question is to identify the
hidden sub-questions and to sort them according to
the correct reasoning order. Our controller handles
this task by computing an attention distribution
over all question words (see details in Sec. 3.2)
at every reasoning step, which signifies which part
of the question forms a sub-question that should be
answered at the current step. Fig. 3 visualizes four



4482

W
ha

t
go

ve
rn

m
en

t
po

sit
io

n
w

as
he

ld
by th

e
w

om
an

w
ho po
rtr

ai
t

Co
rli

ss
A

rc
he

r
in th

e
fil

m
K

iss an
d

Te
ll

Step 1:

Step 2:
Th

e
ar

en
a

w
he

re
th

e
Le

w
ist

on
M

ai
ne

ia
cs

pl
ay

ed
th

ei
r

ho
m

e
ga

m
es

ca
n

se
at

ho
w

m
an

y
pe

op
le

Step 1:

Step 2:

W
as

Sc
ot

t
D

er
ric

ks
on

an
d

Ed W
oo

d
of th

e
sa

m
e

na
tio

na
lit

y

Step 1:

Step 2:

W
ho

w
as kn
ow

n
by hi

s na
m

e
A

la
di

n
an

d
he

lp
ed

or
ga

ni
za

tio
ns

im
pr

ov
e

th
ei

r
pe

rfo
rm

an
ce

assta
ge

a co
ns

ul
ta

nt

Step 1:

Step 2:

Kiss and Tell is a 1945 American comedy film starring then 17-year-old 
Shirley Temple as Corliss Archer. ...Step 1:

Shirley Temple Black was an American actress, ..., and also served as 
Chief of Protocol of the United States. Step 2:

The Lewiston Maineiacs were a junior ice hockey team,  played its 
home games at the Androscoggin Bank Colisée.Step 1:

The Androscoggin Bank Colisée ... is a 4,000 capacity (3,677 seated) 
multi-purpose arenaStep 2:

Step 1:
Step 2:

Scott Derrickson is an American director. ...
Edward Wood Jr. was an American filmmaker. ...

Eenasul Fateh, also known by his stage name Aladin, ..., 
and former international management consultant.Step 1:

Management consulting is the practice of helping organizations to 
improve their performance,Step 2:

Figure 3: The controller’s multi-hop attention map on
the question (randomly chosen from the first 10 dev
examples). This attention is used to compute the sub-
question representation that is passed to the modules.

attention maps from the controller when dealing
with questions of different reasoning paradigms
(randomly chosen from the first 10 dev examples),
suggesting that our controller is able to accurately
identify the sub-questions in the correct order. In
the first example, the controller is able to attend
to the first sub-question “who portrayed Corliss
Archer in ...”, and then relocate the attention to the
next sub-question “What government position was
held by ...” to complete the 2-step reasoning.

6.2 Predicting Network Layouts

After the controller decides the sub-question at the
current reasoning step, it then predicts a soft lay-
out of the the current step by outputting a dis-
tribution cv over all available modules (Find,
Relocate, Compare, NoOp). As elaborated
in Sec. 3.3, the output vector and attention map
of all modules are weighted by cv. To quanti-
tatively evaluate the layout predicted by the con-
troller, we label the expert layout for each ques-

tion in the dev set (Find-Relocate for bridge-
type questions and Find-Find/Relocate-
Compare for comparison-type questions). Next,
we convert the soft module predictions into hard
modular layouts by picking the module with the
largest prediction probability at each step. Intu-
itively, we want the controller to assign higher
weights to the module that can perform the de-
sired reasoning. We then compute the percent-
age of dev set examples where the predicted lay-
out matches the expert layout exactly. The em-
pirical study shows that the layouts predicted by
our NMN controller match the expert layout in
99.9% of bridge-type questions and 68.6% of
comparison-type questions with Yes/No answer
(examples shown in Fig. 1 and Fig. 2).

6.3 Finding Intermediate Bridge-Entities
The final action of an intermediate reasoning step
is the predicted module reasoning through the
question and context to answer the sub-question.
For bridge-type questions (e.g., the first exam-
ple in Fig. 3), the required action is to find the
name (“Shirley Temple”) of “the woman who por-
trait Corliss Archer ...” to complete the next sub-
question “What government position was held by
Shirley Temple”. For comparison questions (e.g.,
the third example in Fig. 3), the model needs to in-
fer the nationalities of “Scott” and “Ed” that will
be compared in the following step.

7 Conclusion

In this work, we proposed a self-assembling neural
modular network for multi-hop QA. We designed
three modules that reason between the question
and text-based context. The resulting model out-
performs both the single-hop baseline and the
original NMN on HotpotQA (Yang et al., 2018).
Because of the interpretable nature of our model,
we presented analyses to show that our model does
in fact learn to perform compositional reasoning
and can dynamically assemble the modular net-
work based on the question.

Acknowledgments
We thank the reviewers for their helpful com-
ments. This work was supported by ARO-YIP
Award #W911NF-18-1-0336, DARPA #YFA17-
D17AP00022 and awards from Google, Facebook,
Salesforce, and Adobe (plus Amazon and Google
GPU cloud credits). The views are those of the
authors and not of the funding agency.



4483

References
Jacob Andreas, Marcus Rohrbach, Trevor Darrell, and

Dan Klein. 2016a. Learning to compose neural
networks for question answering. arXiv preprint
arXiv:1601.01705.

Jacob Andreas, Marcus Rohrbach, Trevor Darrell, and
Dan Klein. 2016b. Neural module networks. In
Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 39–48.

Jifan Chen and Greg Durrett. 2019. Understanding
dataset design choices for multi-hop reasoning. In
NAACL.

Christopher Clark and Matt Gardner. 2018. Simple
and effective multi-paragraph reading comprehen-
sion. In Proceedings of the 56th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers).

Karl Moritz Hermann, Tomas Kocisky, Edward
Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su-
leyman, and Phil Blunsom. 2015. Teaching ma-
chines to read and comprehend. In Advances in Neu-
ral Information Processing Systems, pages 1693–
1701.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Ronghang Hu, Jacob Andreas, Trevor Darrell, and Kate
Saenko. 2018. Explainable neural computation via
stack neural module networks. In Proceedings of the
European Conference on Computer Vision (ECCV),
pages 53–69.

Ronghang Hu, Jacob Andreas, Marcus Rohrbach,
Trevor Darrell, and Kate Saenko. 2017. Learning
to reason: End-to-end module networks for visual
question answering. In Proceedings of the IEEE In-
ternational Conference on Computer Vision, pages
804–813.

Yichen Jiang and Mohit Bansal. 2019. Avoiding rea-
soning shortcuts: Adversarial evaluation, training,
and model development for multi-hop qa. In Pro-
ceedings of the 57th Annual Meeting of the Associa-
tion for Computational Linguistics.

Justin Johnson, Bharath Hariharan, Laurens van der
Maaten, Judy Hoffman, Li Fei-Fei, C Lawrence Zit-
nick, and Ross Girshick. 2017. Inferring and execut-
ing programs for visual reasoning. In Proceedings
of the IEEE International Conference on Computer
Vision, pages 2989–2998.

Mandar Joshi, Eunsol Choi, Daniel S Weld, and Luke
Zettlemoyer. 2017. Triviaqa: A large scale distantly
supervised challenge dataset for reading comprehen-
sion. arXiv preprint arXiv:1705.03551.

Diederik P. Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. CoRR.

Hanxiao Liu, Karen Simonyan, and Yiming Yang.
2018. Darts: Differentiable architecture search.
arXiv preprint arXiv:1806.09055.

Christopher Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven Bethard, and David McClosky.
2014. The stanford corenlp natural language pro-
cessing toolkit. In Proceedings of 52nd annual
meeting of the association for computational lin-
guistics: system demonstrations, pages 55–60.

David Mascharka, Philip Tran, Ryan Soklaski, and Ar-
jun Majumdar. 2018. Transparency by design: Clos-
ing the gap between performance and interpretabil-
ity in visual reasoning. In Proceedings of the IEEE
conference on computer vision and pattern recogni-
tion, pages 4942–4950.

Sewon Min, Eric Wallace, Sameer Singh, Matt Gard-
ner, Hannaneh Hajishirzi, and Luke Zettlemoyer.
2019a. Compositional questions do not necessitate
multi-hop reasoning. In ACL.

Sewon Min, Victor Zhong, Luke Zettlemoyer, and
Hannaneh Hajishirzi. 2019b. Multi-hop reading
comprehension through question decomposition and
rescoring. In ACL.

Jeffrey Pennington, Richard Socher, and Christopher D
Manning. 2014. Glove: Global vectors for word
representation. In Conference on Empirical Meth-
ods in Natural Language Processing (EMNLP).

Hieu Pham, Melody Y Guan, Barret Zoph, Quoc V
Le, and Jeff Dean. 2018. Efficient neural architec-
ture search via parameter sharing. arXiv preprint
arXiv:1802.03268.

P. Rajpurkar, R. Jia, and P. Liang. 2018. Know
what you don’t know: Unanswerable questions for
SQuAD. In Association for Computational Linguis-
tics (ACL).

Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and
Percy Liang. 2016. Squad: 100,000+ questions for
machine comprehension of text. In Proceedings of
the Conference on Empirical Methods in Natural
Language Processing (EMNLP).

Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2017. Bidirectional attention
flow for machine comprehension. In International
Conference on Learning Representations (ICLR).

Rupesh Kumar Srivastava, Klaus Greff, and Jürgen
Schmidhuber. 2015. Highway networks. In Inter-
national Conference on Machine Learning (ICML).

Johannes Welbl, Pontus Stenetorp, and Sebastian
Riedel. 2017. Constructing datasets for multi-hop
reading comprehension across documents. In TACL.

Jason Weston, Antoine Bordes, Sumit Chopra, Alexan-
der M Rush, Bart van Merriënboer, Armand Joulin,
and Tomas Mikolov. 2016. Towards ai-complete
question answering: A set of prerequisite toy tasks.
In ICLR.



4484

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. Machine learning, 8(3-4):229–256.

Caiming Xiong, Victor Zhong, and Richard Socher.
2017. Dynamic coattention networks for question
answering. In ICLR.

Yi Yang, Wen-tau Yih, and Christopher Meek. 2015.
Wikiqa: A challenge dataset for open-domain ques-
tion answering. In Proceedings of the 2015 Con-
ference on Empirical Methods in Natural Language
Processing, pages 2013–2018.

Zhilin Yang, Peng Qi, Saizheng Zhang, Yoshua Ben-
gio, William W Cohen, Ruslan Salakhutdinov, and
Christopher D Manning. 2018. Hotpotqa: A dataset
for diverse, explainable multi-hop question answer-
ing. In Conference on Empirical Methods in Natural
Language Processing (EMNLP).

Victor Zhong, Caiming Xiong, Nitish Shirish Keskar,
and Richard Socher. 2019. Coarse-grain fine-grain
coattention network for multi-evidence question an-
swering. In ICLR.

Barret Zoph and Quoc V Le. 2016. Neural architecture
search with reinforcement learning. arXiv preprint
arXiv:1611.01578.


