



















































Memory-augmented Neural Machine Translation


Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 1390–1399
Copenhagen, Denmark, September 7–11, 2017. c©2017 Association for Computational Linguistics

Memory-augmented Neural Machine Translation
Yang Feng2,1,4, Shiyue Zhang1,3, Andi Zhang1,3, Dong Wang1∗ and Andrew Abel5

1Center for Speech and Language Technologies, RIIT, Tsinghua University
2Key Laboratory of Intelligent Information Processing,

Institute of Computing Technology, Chinese Academy of Sciences
3Beijing University of Posts and Telecommunications, China

4Huilan Corporation, Beijing, China
5Xi’An Jiaotong Liverpool-University, Suzhou, China

fengyang@ict.ac.cn, {byryuer, andizhang912}@gmail.com
wangdong99@mails.tsinghua.edu.cn, andrew.abel@xjtlu.edu.cn

Abstract

Neural machine translation (NMT) has
achieved notable success in recent times,
however it is also widely recognized that
this approach has limitations with han-
dling infrequent words and word pairs.
This paper presents a novel memory-
augmented NMT (M-NMT) architecture,
which stores knowledge about how words
(usually infrequently encountered ones)
should be translated in a memory and then
utilizes them to assist the neural model.
We use this memory mechanism to com-
bine the knowledge learned from a con-
ventional statistical machine translation
system and the rules learned by an NMT
system, and also propose a solution for
out-of-vocabulary (OOV) words based on
this framework. Our experiments on two
Chinese-English translation tasks demon-
strated that the M-NMT architecture out-
performed the NMT baseline by 9.0 and
2.7 BLEU points on the two tasks, respec-
tively. Additionally, we found this archi-
tecture resulted in a much more effective
OOV treatment compared to competitive
methods.

1 Introduction

Neural Machine Translation (NMT) has been
shown to have highly promising performance, par-
ticularly when a large amount of training data is
available (Wu et al., 2016; Johnson et al., 2016; Mi
et al., 2016). Although there are different model
architectures (Sutskever et al., 2014; Bahdanau
et al., 2015), the common principle behind the
NMT approach is the same: encoding the meaning
of the input into a concept space and performing
translation based on this encoding. This ‘meaning

src. 人类共有二十三对染色体。
ref. Humans have 23 pairs of chromosomes.
NMT There are 23-year history of human history.

Table 1: An example of Chinese-to-English
‘meaning drift’ with NMT.

encoding’ principle leads to a deeper understand-
ing and learning of the translation rules, and hence
a better translation than conventional statistic ma-
chine translation (SMT) that considers only sur-
face forms, i.e., words and phrases (Koehn et al.,
2003).

Despite positive results obtained so far, a par-
ticular problem of the NMT approach is that it
has a tendency towards overfitting to frequent ob-
servations (words, word co-occurrences, transla-
tion pairs, etc.), but overlooking special cases that
are not frequently observed. For example, NMT
is good at learning translation pairs that are fre-
quently observed, and can make use of them well
at run-time, but for low-frequency pairs in the
training data, the system may ‘forget’ to use them
when they should be. Unfortunately, rare words
are inevitable for all translation tasks due to Zipf’s
law, and indeed they are often the most impor-
tant parts of a sentence, e.g., domain-specific en-
tity names. Table 1 shows an example, where
the word ‘染色体( chromosomes)’ is an infre-
quent word. As the system does not know (or
has effectively ‘forgotten’) this keyword, it does
not translate correctly, and an irrelevant transla-
tion is produced, leading to the phenomenon of
‘meaning drift’. This weakness with regard to
infrequent words/pairs with NMT has been no-
ticed by a number of researchers, and some stud-
ies have been conducted to address this problem,
e.g., Luong et al. (2014); Cho et al. (2014); Li
et al. (2016); Arthur et al. (2016); Bentivogli et al.
(2016); Zhang et al. (2017).

1390



Superficially, this problem appears to be caused
by the imperfect embeddings of infrequent words
or the limited vocabulary size of NMT systems,
but we argue that the deeper reason should be at-
tributed to the nature of neural models: the trans-
lation function, represented by various neural net-
works, is shared amongst all of the translation
pairs, so high-frequency and low-frequency pairs
impact each other by adapting their shared pa-
rameters. Due to the overwhelming proportion
of high-frequency pairs in the training data, the
resulting trained model will naturally be much
more focused on these frequently observed pairs.
More seriously, because the translation function is
smooth, infrequent pairs tend to be wrongly seen
as noise in the training process and so are largely
ignored by the model.

In contrast to this, the conventional SMT ap-
proach is based on statistics of words and/or
phrases, which, in principle, is a symbolic method
that uses a discrete model and involves little pa-
rameter sharing. The discrete model means that no
matter how infrequently a pair occurs, its probabil-
ity cannot be smoothed out, and the lack of shared
parameters means that the frequent words or pairs
have much less impact on infrequent words or
pairs. Essentially, SMT memorizes as many of
the observed patterns as possible, usually using a
phrase table.

The respective advantages of SMT and NMT
suggest that neither the pure neural approach nor
the pure symbolic approach can provide a com-
plete solution for machine translation, and a com-
bined system that exploits the advantages of both
approaches would be ideal. This idea has been
adopted in early research into neural-based MT
methods, where neural models were utilized to
improve SMT performance (Zhang et al., 2015).
However, this seems to be counterintuitive, as in-
tuitively learning general rules should be the first
step, rather than first memorizing special cases and
then learning general rules. This suggests that the
combined system should be primarily based on the
neural architecture, with symbolic knowledge as a
complementary support.

This paper presents such a neural-symbolic ar-
chitecture, which involves a neural model compo-
nent to deal with frequently seen patterns, and a
memory component to provide knowledge for in-
frequently used words and pairs. More specifi-
cally, each memory element stores a source-target
pair, specifying that a word defined by the source

part should be translated to the word defined by
the target part. This knowledge is then used to
improve the neural model. This is analogy to an
experienced translator, who can work well in most
cases using their own knowledge (i.e. the neural
model aspect), but for unfamiliar and uncommon
words that they have little experience of, they will
still need to refer to a dictionary (i.e., the mem-
ory). This proposed memory-augmented NMT, or
M-NMT, is therefore arguably much more similar
to human translators than either NMT or SMT.

2 Attention-based NMT

Before introducing our M-NMT architecture, we
will give a brief review of our implementation
of the attention-based RNN model first presented
by Bahdanau et al. (2015). This model is regarded
as the state-of-the-art model and will be used as
the baseline system in this study. Additionally, the
neural model component of the M-NMT architec-
ture uses the same attention-based RNN model, as
being presented in the following.

The attention-based RNN model is based on an
encoder-decoder frame, where the input word se-
quence [x1, x2, ...] in the source language is em-
bedded as a sequence of hidden states [h1, h2, ...]
by a bi-directional RNN with GRU as the hidden
units, and another RNN is used to produce the tar-
get sentence [y1, y2, ...]. To force the generation to
focus on a particular segment of the input at each
generation step, Bahdanau et al. (2015) proposed
an attention mechanism. Specifically, when gen-
erating the i-th target word, the attention factor of
the j-th source word (and its neighbors, precisely)
is measured by the relevance between the current
hidden state of the decoder, denoted by st−1, and
the hidden state of the encoder at the j-th word
hj . This can be calculated by any similarity func-
tion, but a multiple layer perceptron (MLP) is of-
ten used, given by:

αij =
eij∑
eik

; eij = a(si−1, hj)

where a(·, ·) is the MLP-based relevance function,
and αij is the attention factor of xj at decoding
step i. The semantic content that the decoder fo-
cuses on, i.e. attended content, is then derived by:

ci =
∑

αijhj .

The decoder updates the hidden state with a re-
current function fd, formulated by:

1391



Figure 1: The structure of the M-NMT architecture.

si = fd(yi−1, si−1, ci), (1)

and the next word yi is generated according to the
following posterior:

p(yi) = σ(yTi Wzi) (2)

where σ(·) is the softmax function, W is a param-
eter matrix for word vector projection. The inter-
mediate variable zi is computed by a neural net
with a single maxout hidden layer g, given by:

zi = g(yi−1, si−1, ci).

We used Tensorflow to implement this model, and
the training recipe largely followed the seminal pa-
per of Bahdanau et al. (2015).

3 Memory-Augmented NMT

This section presents the M-NMT architecture.
We first introduce the model, and then describe
how the memory is constructed.

3.1 The Architecture
The M-NMT architecture is illustrated in Figure 1.
It involves two components: the model and the
memory components. The model component is a

typical attention-based RNN model as presented
in Section 2, which is regarded as being good at
dealing with frequent words and pairs, and the
memory component provides knowledge for infre-
quent words and pairs that are not easy for the neu-
ral model component to learn. The outputs of the
two components are combined to produce a final
consolidated translation.

3.2 Memory Elements
We define each item of memory as a mapping from
a word in the source language to its translation in
the target language. If there are multiple transla-
tions for a word, then several of the best will be
added to the memory according to the probability
of the translation, until the maximum number of
target words is reached. A memory element can
be formally written by:

ujl =

[
yjl
xj

]
where yjl is the l-th translation of word xj . This
mapping will be saved as a memory element and
will be used during translation. We refer to this
memory as the global memory, which is static dur-
ing all the running time. The global memory is
shown on the bottom-right of Figure 1.

1392



To translate an input sentence, the memory el-
ements the source words of which are in the in-
put sentence are selected to form a local memory.
This is shown in the right-middle of Figure 1. In
order to include the context information in the lo-
cal memory, the source part xj is replaced by its
annotation hj :

ujl =

[
yjl
hj

]

A consequence of the source encoding is that if
a source word occurs multiple times in the sen-
tence, all the occurrences should be put into the
local memory, with different hj to distinguish the
context of each. Finally, the local memory is com-
pressed as follows. For each distinct target word
ỹk in the local memory, all the elements with ỹk as
the target are merged into a single element uk, for
which the source part is the average of the source
part of all the elements to be merged, given by:

uk =

[
ỹk
h̃k

]
=

[
ỹk∑

j p(xj |ỹk)hj

]
; ∀ỹk ∈ {yjl}

(3)
where p(xj |ỹk) means the probability that xj is
translated into ỹk and can be obtained from either
a human-defined dictionary or the dictionary of an
SMT system.

3.3 Memory Attention

In order to use the information stored in the mem-
ory to improve NMT, we need to pick up appropri-
ate elements from the local memory at each trans-
lation step. A similar attention mechanism as in
the neural model is designed. Denote the attention
factor of each memory element uk at each transla-
tion step i by αmik, and assume it is derived from a
relevance function emik:

αmik =
emik∑K

k=1 e
m
ik

,

where K is the number of target words in the
merged memory. The relevance function can be
changed, but in this study, we use a simple design:

emik = (v
m)>tanh(Wms si−1+W

m
u uk +W

m
y yi−1)

(4)
where tanh(·) is the hyperbolic function, si−1
is the current state of the decoder of the neural

model, and yi−1 is the generated word in the previ-
ous step. The parameters of the memory attention
mechanism include θm = {vm,Wms ,Wmu ,Wmy },
as defined in Eq. 4.

The attention factor αmik can be used in different
ways, here they are simply treated as the posterior
to predict the next word to generate. Since the nor-
malization is over all the target words in the local
memory rather than the full vocabulary, treating
αmik as the posterior of all words is only an approx-
imation, but was found in our experiments to be
a good solution. This memory-based posterior is
combined with the posterior of the neural model,
resulting in a consolidated posterior, given by:

p̃(yi) = βαmik + (1− β)p(yi)

where p(yi) is the posterior produced by the neu-
ral model, as shown in Eq. 2, and β is a pre-
defined interpolation factor. Here αmik corresponds
to the attention to the same word in the merged
memory as the predicted word yi. This sim-
ple posterior combination indicates the flexibility
of the M-NMT architecture. Existing knowledge
can be compiled into the local memory to im-
prove model-based prediction, or if no knowledge
is available, the system will rely on conventional
NMT.

An advantage of this simple combination is that
the memory component can be trained indepen-
dently of the neural model. We set the objective
of the training is to let the memory attention as
accurate as possible. Given the n-th training se-
quence, at each translation step i, the target at-
tention should be 1 on the current word yni and
0 elsewhere. The objective function therefore can
be written as the cross entropy between the target
attention and the output of the attention function,
given as follows:

L(θ) =
∑
n

∑
i

log(αmikni )

where kni is the position of y
n
i in the merged

memory. The optimization is conducted with re-
spect to the parameters θm. The optimization al-
gorithm is the stochastic gradient descent (SGD)
with AdaDelta to adjust the learning rate (Zeiler,
2012).

It should be noted that joint training of the mem-
ory and the model is possible, but it requires a
large amount of GPU memory and risks over-
fitting. Therefore, we only train the memory,

1393



with the model component unchanged. Efficient
model-memory joint training is beyond the scope
of this paper and can be investigated in future
work. Particularly, the parameter β could be opti-
mized to balance the contribution from the model
part and the memory part, but constrains have to be
carefully settled to avoid overfitting to the training
data.

3.4 Memory for SMT Integration

The M-NMT architecture is a flexible framework
that provides extra knowledge to the conventional
model-based NMT. If the knowledge is generated
by a conventional SMT system, it is essentially
an elegant combination of SMT and NMT. In this
work, we use the translation dictionary produced
by an SMT system as the knowledge to create the
memory, which involves first aligning the train-
ing sentence pairs using the GIZA++ toolkit (Och
and Ney, 2003) in both directions, and applying
the “intersection” refinement rules (Koehn et al.,
2003) to get a single one-to-one alignment for
each sentence pair, and then extracting the trans-
lation dictionary based on these alignments. We
can see the dictionary as the phrase pairs of the
length 1 and leave the phrase pairs longer than 1
as future work.

The key information provided by the dictionary
is the conditional probability that a source and a
target word are translated to each other. This in-
formation is used twice during local memory con-
struction. Firstly, the conditional p(yjl|xj) is used
to select the most possible target words yjl to par-
ticipate the local memory, and secondly, the con-
ditional p(xj |ỹk) is used to merge the elements
whose target words are ỹk, as shown in Eq. 3.

3.5 Memory for OOV Treatment

The memory also provides a flexible way to ad-
dress OOV words. OOV words can be defined in
multiple ways, but here we focus on true OOVs
that are totally new in both bilingual and monolin-
gual data (i.e. rare words that are not present in
any training data). One example is when a model
is migrated to a specific domain. To address these
OOVs, we firstly need a manually defined dictio-
nary to specify how an OOV word should be trans-
lated, where the target word could be either an in-
vocabulary word or an OOV.

This dictionary will be used as the knowledge
to construct the local memory at run-time. Specif-
ically, if an OOV word is encountered on either

the source or target side during local memory con-
struction, the vector of a similar word is borrowed
to represent the OOV word. Since the words
are totally new, the similar word has to be de-
fined manually. To avoid any confusion with other
words, the selected similar word should not ap-
pear in the existing input sequence if the OOV is
in the source side, and should not match any target
words in the existing local memory. To achieve
this, several candidates have to be pre-defined for
each OOV, so that alternative choices are available
at run-time. A problem of this approach is that the
vocabulary of the neural model is fixed, so can-
not output probabilities for OOV words. To solve
this, we let the selected similar word entirely over-
written by the OOV word, and any prediction for
the similar word will be ‘re-directed’ to the OOV
word.

4 Related Work

The idea of memory augmentation was inspired
by recent advances in the neural Turing ma-
chine (Graves et al., 2014, 2016) and memory net-
work (Weston et al., 2014). These new models
equip neural networks with an external memory
that can be accessed and manipulated via some
trainable operations. The memory idea has been
utilized in NMT. For example, Wang et al. (2016)
used a memory to extend the state of the decoder
RNN in the attention-based NMT. In this case, the
contribution of the memory is to provide tempo-
rary variables to assist RNN decoding. In contrast,
our work uses memory to store knowledge. The
memory in Wang et al.’s work could be considered
to be note paper, while the memory in our work is
more like a dictionary.

The idea of combining SMT and NMT was
adopted by early NMT research, but these com-
binations were mostly based on the SMT frame-
work, as discussed in depth in the review paper
from Zhang et al. (2015). Cohn et al. (2016) pro-
posed to enhance the attention-based NMT by us-
ing some structural knowledge from a word-based
alignment model. The focus of their work was to
use the extra knowledge to produce a better atten-
tion. In contrast, our work promotes the target
words directly using the word mapping stored in
the memory. Arthur et al. (2016) proposed to in-
volve lexical knowledge to assist with translation,
particularly for low-frequency words. This is sim-
ilar to our proposed idea, with the key difference
that their work uses the attention information to

1394



select the target words, while ours trains a sepa-
rate attention, based on both the source and target
words.

Regarding handling OOV words, Jean et al.
(2015) presented an efficient training method to
support a larger vocabulary, which helps alleviate
the OOV problem significantly. Stahlberg et al.
(2016) used SMT to produce candidate results in
the form of lattice and NMT to re-score the results.
As SMT uses a larger vocabulary than NMT, some
OOV words can be retained. Sennrich et al. (2016)
proposed a subword approach, where OOV words
are expected to be spelled out by subword units.
Luong et al. (2014) proposed a post-processing ap-
proach that learns the position of the source word
when an UNK symbol is produced during decod-
ing. By this position information, the UNK sym-
bol (unknown words) can be replaced by the cor-
rect translation using a lexical table. Li et al.
(2016) proposed a replace-and-restore approach
that replaces infrequent words with similar words
before the training and decoding, and restores rare
words and their target words, obtained from a lex-
ical table. Compared to the work of (Luong et al.,
2014) and (Li et al., 2016), which relies on post-
processing, our M-NMT approach is more like
pre-processing. This means that the required in-
formation for OOV words is prepared before de-
coding. This seems more flexible than the post-
processing methods, as we can easily deal with
multiple targets for OOVs, by letting the decoder
select which target is the most appropriate. Never-
theless, we do share the same idea of using similar
words as in (Li et al., 2016), which we think is
inevitable if the OOV words are totally new.

5 Experiments

5.1 Data
The experiments were conducted for Chinese-
English translation using two datasets, the rela-
tively small IWSLT dataset, and the much larger
NIST dataset. As we will see, the NMT and SMT
approaches exhibit different behaviours on these
two datasets, and the memory-augmentation ap-
proach offers different contributions to them.

The IWSLT corpus The training data consists of
44K sentences from the tourism and travel do-
main. The development set was composed of the
ASR devset 1 and devset 2 from IWSLT 2005, and
testing used the IWSLT 2005 test set.

The NIST corpus The training data consists of

1M sentence pairs with 19M source tokens and
24M target tokens from the LDC corpora of
LDC2002E18, LDC2003E07, LDC2003E14, and
Hansard’s portion of LDC2004T07, LDC2004T08
and LDC2005T06. We use the NIST 2002 test set
as the development set and the NIST 2003 test set
as the test set.

Memory data To construct the memory, we used
the GIZA++ toolkit (Koehn et al., 2003) to align
the training data in both directions, and kept the
word pairs that appeared in the phrase tables of
both directions. The global memory size is 80K
for the IWSLT task, and 500K for the NIST task.
These word pairs were then filtered according to
the conditional probability p(wt|ws) wherews and
wt are source and target language words, respec-
tively. For each ws, at most two candidates of wt
were retained.

5.2 Systems

We used a conventional SMT system and an
attention-based RNN NMT system as the base-
lines, and investigated a variety of M-NMT archi-
tectures.

SMT baseline: For the SMT system (denoted by
Moses), Moses (Koehn et al., 2007), a state-of-
the-art open-source toolkit, was used. The default
configuration was used where the phrase length
was 7 and the following features were employed:
relative translation frequencies and lexical trans-
lation probabilities on both directions, distortion
distance, language model and word penalty. For
the language model, the KenLM toolkit (Heafield,
2011) was used to build a 5-gram language model
(with the Keneser-Ney smoothing) on the target
side of the training data.

NMT baseline: For NMT, we reproduced the
attention-based RNN model proposed by Bah-
danau et al. (2015), which is denoted by NMT. The
implementation was based on Tensorflow1. We
compared our implementations with a public im-
plementation using Theano2, and achieved com-
parable (even slightly better) performances on the
same data sets with the same parameter settings.

M-NMT system: The M-NMT system was imple-
mented by combining the memory structure and
the NMT system. The model part is the same as
the NMT baseline, while the attention function of

1https://www.tensorflow.org/
2https://github.com/lisa-groundhog/GroundHog

1395



System Attending Attended
M-NMT(s, uy) si−1 uk(y)
M-NMT(s, uxy) si−1 uk(x), uk(y)
M-NMT(sy, uy) si−1, yi−1 uk(y)
M-NMT(sy, uxy) si−1, yi−1 uk(x), uk(y)

Table 2: M-NMT systems with different configu-
rations.

the memory part was trained. During the training,
if the target word is an UNK symbol, or the target
word is not in the memory (due to the limited word
pairs in the memory), this word is simply skipped
from back-propagation. This skipping is impor-
tant as it avoids bias caused by the large amount
of UNK symbols. The trained M-NMT system can
be readily used to deal with OOV words, without
any re-training.

For M-NMT, the complete form of the
relevance function for memory attention is
emik(si−1, yi−1, uk). Of these, si−1 and yi−1 are
‘attending factors’ that represent the information
used ‘to attend’, while uk, which consists of a
source part uk(x) and a target part uk(y), involves
‘attended factors’ that represent the content ‘to be
attended’. To investigate the contribution of dif-
ferent attending and attended factors, these factors
are combined in different ways, leading to differ-
ent M-NMT variants, as shown in 2. Note that M-
NMT(s;uy) is the simplest configuration and the
attention essentially learns a target-side language
model. M-NMT(s;uxy) involves the source part
of the memory, which implicitly learns a bilingual
language model. Involving the decoding history
yi−1 makes this learning more explicit.

Settings For a fair comparison, the models con-
figurations in the NMT system and the M-NMT
system were intentionally set to be identical. The
number of hidden units, the word embedding di-
mensionality and the vocabulary size were empiri-
cally set to 500, 310 and 30000, respectively. In
the training process, the batch size of the SGD
algorithm was set to 80, and the parameters for
AdaDelta were set to be ρ = 0.95 and � = 10−6.
The decoding is implemented as a beam search,
where the beam size was set to be 5.

Evaluation metrics The translation performance
was evaluated using the BLEU score with case-
insensitive n ≤ 4-grams (Papineni et al., 2002).

System IWSLT05 NIST03
Moses 52.5 30.6
NMT 43.9 31.3
NMT-L 45.9 31.7
Arthur et al.
M-NMT(s, uy) 49.8 32.3
M-NMT(sy, uy) 50.7 32.5
M-NMT(s, uxy) 51.4 32.8
M-NMT(sy, uxy) 52.9 34.0

Table 3: BLEU scores with different translation
systems on the two Chinese-English translation
datasets.

5.3 SMT-NMT Integration Experiments
In the first experiment, the M-NMT architecture
combined SMT and NMT by using SMT to con-
struct the memory to assist with NMT. For com-
parison purposes, the lexical prediction approach
proposed by (Arthur et al., 2016) was also imple-
mented. This uses the phrase table produced by
SMT to improve NMT. Our implementation is a
linear combination, and for a fair comparison, the
neural model part was kept unchanged. At each
step i, the auxiliary probability provided by the
lexical part is P (yi) =

∑
j αijP (yi|xj), where αij

is the attention weight from the neural model, and
P (yi|xj) is obtained from the phrase table. This
can be regarded as a simple memory approach,
with memory attention borrowed from the neural
model, rather than being learned separately.

Table 3 shows the BLEU results with different
systems. Firstly, it can be observed that with the
small IWSLT05 dataset, the SMT outperforms the
baseline NMT, but with the large NIST dataset,
NMT outperforms SMT. This is unsurprising as
neural models often need more training data. Sec-
ondly, the results show that with both datasets,
the lexical approach (NMT-L) can improve NMT
performance, showing that using SMT knowledge
helps NMT. However, the improvement seems less
significant than reported in (Arthur et al., 2016).
This is likely to be because our implementation
focuses on creating a simple, extensible, and gen-
eralizable system, and therefore does not allow re-
training the neural model.

The M-NMT system provides significant per-
formance improvement, even with the simplest
setting (M-NMT(s, uy)). More information fac-
tors tend to offer better performance, and the best
M-NMT system, M-NMT(sy, uxy), outperforms
the baseline NMT by 9.0 and 2.7 BLEU points

1396



T-INV T-OOV
System Recall BLEU Recall BLEU
NMT 0.06 15.1 0 13.7
M-NMT 0.05 16.0 0 14.6
NMT-PL 0.09 15.4 0.08 14.3
Luong et al.
M-NMT+OOV 0.28 17.0 0.40 15.9

Table 4: The OOV recall rates and BLEU scores
on sentences with OOV words. ‘T-INV’ refers to
the case where the target words of the OOV input
are in-vocabulary, and ‘T-OOV’ means the case
where the target words are also OOV.

on the two datasets respectively. Notably, the im-
provement with the IWSLT05 dataset is impres-
sive, the best M-NMT system outperforms even
the very strong SMT baseline, which strongly sup-
ports our conjecture that NMT must be equipped
with a symbolic structure to deal with infrequent
words. It also suggests that the M-NMT architec-
ture is a promising way to apply neural methods to
low-resource tasks.

5.4 OOV Treatment Experiments

Here the M-NMT architecture was used to han-
dle OOV words. The experiments were conducted
on the NIST dataset, for which we collected 312
test sentences containing OOV words. This test set
was divided into two subsets: the T-INV set, con-
taining sentences with source OOV words whose
translations are NOT OOV in the target language;
and the T-OOV set, containing sentences with
OOV words that are OOV in both source and trans-
lation. There were 491 source-side OOV words in
total, among which 276 words have in-vocabulary
translations and 215 words only have OOV trans-
lation. We constructed a translation table with
three items for each OOV word: (1) its transla-
tion; (2) its similar word; (3) the similar word of
its translation, if the translation is also an OOV
word. All the above was designed by hand, and
for each OOV word, there was only a single trans-
lation. Although it is not difficult to collect most
of this information automatically (e.g., by using an
SMT phrase table), we are simulating the scenario
where OOV words are newly coined, or where the
system is migrated to a new domain, meaning that
some words are totally new to the system. Han-
dling OOV words of this type is certainly chal-
lenging, but it is also practically valuable.

For comparison, the place-holder approach pro-

10 - 35 36 - 75 76 - 120 121 - 125
Word Frequency

0.0

0.1

0.2

0.3

0.4

0.5

R
e
ca

ll

NMT
M-NMT
SMT

Figure 2: The recall rates of words in different fre-
quency bins.

src. 人类共有二十三对染色体。
ref. Humans have 23 pairs of chromosomes.
Moses A total of 23 human chromosome.
NMT There are 23-year history of human history .
M-NMT There have a total of 23 species of chromosomes .

Table 5: The translations from different systems
for the Chinese-to-English ‘meaning drift’ exam-
ple.

posed by Luong et al. (2014) was also imple-
mented. Here, OOV words in the target language
are substituted by position-aware UNKs, and a
post-processing step is used to replace UNKs with
the correct translation. We denote this system as
‘NMT-PL’. For M-NMT, only the best configu-
ration M-NMT(sy, uxy) was tested in this exper-
iment. Two scenarios were considered: the origi-
nal M-NMT system, and the M-NMT system with
OOV words involved in the memory (denoted by
M-NMT+OOV).

The results with the NIST dataset are shown in
Table 4. In addition to the BLEU scores, we also
report the OOV recall rates, defined as the propor-
tion of OOV words that are correctly translated.
It can be seen that both the basic NMT and M-
NMT systems work badly with OOV words: they
can only process OOV words whose translations
are not OOV in the target language, and the recall
rate is very low (0.05 approximately). The place-
holder approach (NMT-PL) can address both types
of OOV words, but the recall rate is still low. The
M-NMT system with OOV memory, in contrast,
is much more effective in OOV word translation,
as shown in Table 4. We also implemented the
replace-and-restore approach reported by Li et al.
(2016), but found performance to be poor (the
BLEU scores are 13.9 on T-INV and 13.3 on T-

1397



OOV). This may be due to no re-training of the
neural model (again, in order to keep the extensi-
bility and generalizability of the M-NMT system).

5.5 Frequency Analysis
To form a better understanding of the memory
mechanism, we distribute the test sentences into
four bins according to the lowest word frequency
among the sentence and compute the recall rates
for words in these bins. Once a generated transla-
tion word is also in one of the references, we treat
it as one hit. The experiment was conducted with
the NIST dataset. The results in Figure 2 show that
M-NMT offers more improvement with infrequent
words, in accordance with our argument that the
memory mechanism helps NMT in dealing with
infrequent words.

Finally, we demonstrate the translation with M-
NMT for the example in Table 1, as shown in Ta-
ble 5. It can be clearly seen that the memory has
remembered the infrequent word ‘Chromosome’,
which resulted in an improved translation.

6 Conclusions

This paper presented a memory-augmented NMT
approach, which introduces a memory mechanism
for conventional NMT to assist with translating
words not well learned by the neural model. Our
experiments demonstrated that the new architec-
ture is highly effective, providing performance im-
provement by 9.0 and 2.7 BLEU scores on two
Chinese-English translation datasets, respectively.
Additionally, it offers a very flexible and effective
OOV treatment. In our experiments, The OOV re-
calls are 28% and 40% for the OOV words whose
target words are INV and OOV, respectively, a sig-
nificant improvement on competing methods. Fu-
ture work will investigate better model-memory
integration, e.g., by joint training.

Acknowledgement

This paper was supported by the National
Natural Science Foundation of China (NSFC)
under the project NO.61371136, NO.61633013,
NO.61472428, NO.61472428.

References
Philip Arthur, Graham Neubig, and Satoshi Nakamura.

2016. Incorporating discrete translation lexicons
into neural machine translation. In Proc. of EMNLP,
pages 1557–1567.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In ICLR’2015.

Luisa Bentivogli, Arianna Bisazza, Mauro Cettolo, and
Marcello Federico. 2016. Neural versus phrase-
based machine translation quality: a case study.
arXiv preprint arXiv:1608.04631.

Kyunghyun Cho, Bart Van Merriënboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014. On the properties
of neural machine translation: Encoder-decoder ap-
proaches. arXiv preprint arXiv:1409.1259.

Trevor Cohn, Cong Duy Vu Hoang, Ekaterina Vy-
molova, Kaisheng Yao, Chris Dyer, and Gholamreza
Haffari. 2016. Incorporating structural alignment bi-
ases into an attentional neural translation model. In
Proc. of NAACL, pages 876–885.

Alex Graves, Greg Wayne, and Ivo Danihelka.
2014. Neural Turing machines. arXiv preprint
arXiv:1410.5401.

Alex Graves, Greg Wayne, Malcolm Reynolds,
Tim Harley, Ivo Danihelka, Agnieszka Grabska-
Barwińska, Sergio Gómez Colmenarejo, Edward
Grefenstette, Tiago Ramalho, John Agapiou, et al.
2016. Hybrid computing using a neural net-
work with dynamic external memory. Nature,
538(7626):471–476.

Kenneth Heafield. 2011. Kenlm: Faster and smaller
language model queries. In Proc. of the Sixth Work-
shop on Statistical Machine Translation, pages 187–
197.

Sébastien Jean, Kyunghyun Cho, Roland Memisevic,
and Yoshua Bengio. 2015. On using very large tar-
get vocabulary for neural machine translation. In
ACL’15.

Melvin Johnson, Mike Schuster, Quoc V Le, Maxim
Krikun, Yonghui Wu, Zhifeng Chen, Nikhil Thorat,
Fernanda Viégas, Martin Wattenberg, Greg Corrado,
et al. 2016. Google’s multilingual neural machine
translation system: Enabling zero-shot translation.
arXiv preprint arXiv:1611.04558.

Philipp Koehn, Hieu Hoang, Alexandra Birch Mayne,
Christopher Callison-Burch, Marcello Federico,
Nicola Bertoldi, Brooke Cowan, Wade Shen, Chris-
tine Moran, Richard Zens, Chris Dyer, Ondrej Bo-
jar, Alexandra Constantin, and Evan Herbst. 2007.
Moses: Open source toolkit for statistical machine
translation. In Proc. of ACL, Demonstration Ses-
sion.

1398



Philipp Koehn, Franz Josef Och, and Daniel Marcu.
2003. Statistical phrase-based translation. In Proc.
of NAACL, pages 48–54. Association for Computa-
tional Linguistics.

Xiaoqing Li, Jiajun Zhang, and Chengqing Zong. 2016.
Towards zero unknown word in neural machine
translation. In Proc. of IJCAI, pages 2852–2858.

Minh-Thang Luong, Ilya Sutskever, Quoc V Le, Oriol
Vinyals, and Wojciech Zaremba. 2014. Addressing
the rare word problem in neural machine translation.
arXiv preprint arXiv:1410.8206.

Haitao Mi, Baskaran Sankaran, Zhiguo Wang, and
Abe Ittycheriah. 2016. Coverage embedding mod-
els for neural machine translation. arXiv preprint
arXiv:1605.03148.

Frans J. Och and Hermann Ney. 2003. A systematic
comparison of various statistical alignment models.
Computational Linguistics, 29:19–51.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of
ACL, pages 311–318.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Neural machine translation of rare words with
subword units. In ACL 16.

Felix Stahlberg, Eva Hasler, Aurelien Waite, and Bill
Byrne. 2016. Syntactically guided neural machine
translation. In Proc. of ACL, pages 299–305.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

Mingxuan Wang, Zhengdong Lu, Hang Li, and Qun
Liu. 2016. Memory-enhanced decoder for neural
machine translation. In Proc. of EMNLP, pages
278–286.

Jason Weston, Sumit Chopra, and Antoine Bor-
des. 2014. Memory networks. arXiv preprint
arXiv:1410.3916.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, et al. 2016. Google’s neural ma-
chine translation system: Bridging the gap between
human and machine translation. arXiv preprint
arXiv:1609.08144.

Matthew D Zeiler. 2012. Adadelta: an adaptive learn-
ing rate method. arXiv preprint arXiv:1212.5701.

Jiajun Zhang, Chengqing Zong, et al. 2015. Deep neu-
ral networks in machine translation: An overview.
IEEE Intelligent Systems, 30(5):16–25.

Jiyuan Zhang, Yang Feng, Dong Wang, Yang Wang,
Andrew Abel, Shiyue Zhang, and Andi Zhang.
2017. Flexible and creative chinese poetry gen-
eration using neural memory. arXiv preprint
arXiv:1705.03773.

1399


