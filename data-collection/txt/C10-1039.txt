Proceedings of the 23rd International Conference on Computational Linguistics (Coling 2010), pages 340–348,

Beijing, August 2010

340

Opinosis: A Graph-Based Approach to Abstractive Summarization of

Highly Redundant Opinions

Kavita Ganesan and ChengXiang Zhai and Jiawei Han

Department of Computer Science

University of Illinois at Urbana-Champaign

{kganes2,czhai,hanj}@cs.uiuc.edu

Abstract

We present a novel graph-based summa-
rization framework (Opinosis) that generates
concise abstractive summaries of highly re-
dundant opinions. Evaluation results on sum-
marizing user reviews show that Opinosis
summaries have better agreement with hu-
man summaries compared to the baseline ex-
tractive method. The summaries are readable,
reasonably well-formed and are informative
enough to convey the major opinions.
Introduction

1
Summarization is critically needed to help users
better digest the large amounts of opinions ex-
pressed on the web. Most existing work in Opin-
ion Summarization focus on predicting sentiment
orientation on an entity (Pang et al., 2002) (Pang
and Lee, 2004) or attempt to generate aspect-based
ratings for that entity (Snyder and Barzilay, 2007)
(Lu et al., 2009)(Lerman et al., 2009)(Titov and
Mcdonald, 2008). Such summaries are very infor-
mative, but it is still hard for a user to understand
why an aspect received a particular rating, forcing
a user to read many, often highly redundant sen-
tences about each aspect. To help users further di-
gest the opinions in each aspect, it is thus desirable
to generate a concise textual summary of such re-
dundant opinions.

Indeed,

in many scenarios, we will face the
problem of summarizing a large number of highly
redundant opinions; other examples include sum-
marizing the ‘tweets’ on Twitter or comments
made about a blog or news article. Due to the sub-
tle variations of redundant opinions, typical extrac-
tive methods are often inadequate for summarizing
such opinions. Consider the following sentences:
1. The iPhone’s battery lasts long, only had to

charge it once every few days.

2. iPhone’s battery is bulky but it is cheap..
3. iPhone’s battery is bulky but it lasts long!

With extractive summarization, no matter which
single sentence of the three is chosen as a sum-
mary, the generated summary would be biased.

In such a case, an abstractive summary such as
‘iPhone’s battery is cheap, lasts long but is bulky’
is a more complete summary, conveying all the
necessary information. Extractive methods also
tend to be verbose and this is especially problem-
atic when the summaries need to be viewed on
smaller screens like on a PDA. Thus, an informa-
tive and concise abstractive summary would be a
better solution.

Unfortunately,

abstractive summarization is
known to be difﬁcult. Existing work in abstractive
summarization has been quite limited and can be
categorized into two categories: (1) approaches us-
ing prior knowledge (Radev and McKeown, 1998)
(Finley and Harabagiu, 2002) (DeJong, 1982) and
(2) approaches using Natural Language Genera-
tion (NLG) systems (Saggion and Lapalme, 2002)
(Jing and McKeown, 2000). The ﬁrst line of work
requires considerable amount of manual effort to
deﬁne schemas such as frames and templates that
can be ﬁlled with the use of information extraction
techniques. These systems were mainly used to
summarize news articles. The second category of
work uses deeper NLP analysis with special tech-
niques for text regeneration. Both approaches ei-
ther heavily rely on manual effort or are domain
dependent.

In this paper, we propose a novel ﬂexible sum-
marization framework, Opinosis, that uses graphs
to produce abstractive summaries of highly redun-
dant opinions. In contrast with the previous work,
Opinosis assumes no domain knowledge and uses
shallow NLP, leveraging mostly the word order in
the existing text and its inherent redundancies to
generate informative abstractive summaries. The
key idea of Opinosis is to ﬁrst construct a tex-
tual graph that represents the text to be summa-
rized. Then, three unique properties of this graph
are used to explore and score various subpaths
that help in generating candidate abstractive sum-
maries.

Evaluation results on a set of user reviews show
that Opinosis summaries have reasonable agree-
ment with human summaries. Also, the gener-

341

ated summaries are readable, concise and fairly
Since Opinosis assumes no do-
well-formed.
main knowledge and is highly ﬂexible,
it can
be potentially used to summarize any highly re-
dundant content and could even be ported to
other languages.
(All materials related to this
work including the dataset and demo software can
be found at http://timan.cs.uiuc.edu/
downloads.html.)
2 Opinosis-Graph
Our key idea is to use a graph data structure (called
Opinosis-Graph) to represent natural language text
and cast this abstractive summarization problem
as one of ﬁnding appropriate paths in the graph.
Graphs have been commonly used for extractive
summarization (e.g., LexRank (Erkan and Radev,
2004) and TextRank (Mihalcea and Tarau, 2004)),
but in these works the graph is often undirected
with sentences as nodes and similarity as edges.
Our graph data structure is different in that each
node represents a word unit with directed edges
representing the structure of sentences. Moreover,
we also attach positional information to nodes as
will be discussed later.
Algorithm 1 (A1): OpinosisGraph(Z)
1:
2: Output: G = (V, E)
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21: end for
Our graph representation is closer to that used by
Barzilay and Lee (Barzilay and Lee, 2003) for the
task of paraphrasing, wherein each node in the
graph represents a unique word. However, in their
work, such a graph is used to identify regions of
commonality and variability amongst similar sen-
tences. Thus, the positional information is not re-
quired nor is it maintained. In contrast, we main-
tain positional information at each node as this is
critical for the selection of candidate paths.

vj ← GetExistingN ode(G, LABEL)
P RIvj ← P RIvj ∪ (SID, P ID)
vj ← CreateN ewN ode(G, LABEL)
P RIvj ← (SID, P ID)

end if
if not ExistsEdge(vj−1 → vj , G) then
AddEdge(vj−1 → vj , G)
end if
end for

Input: Topic related sentences to be summarized: Z = {zi}n
for i = 1 to n do

LABEL ← wj
P ID ← j
SID ← i
if ExistsN ode(G, LABEL) then

w ← T okenize(zi)
sent size ← SizeOf (w)
for j = 1 to sent size do

Algorithm A1 outlines the steps involved in
building an Opinosis-Graph. We start with a set
of sentences relevant to a speciﬁc topic, which can

else

i=1

be obtained in different ways depending on the ap-
plication. For example, they may be all sentences
related to the battery life of the iPod Nano. We de-
note these sentences as Z = {zi}n
i=1 where each zi
is a sentence containing part-of-speech (POS) an-
notations. (A1:4) Each zi ∈ Z is split into a set
of word units, where each unit, wj consists of a
word and its corresponding POS annotation (e.g.
“service:nn”, “good:adj”). (A1:7-9) Each unique
wj will form a node, vj, in the Opinosis-Graph,
with wj being the label. Also, since we only have
one node per unique word unit, each node keeps
track of all sentences that it is a part of using a sen-
tence identiﬁer (SID) along with its position of oc-
currence in that sentence (PID). (A1:10-16) Each
node will thus carry a Positional Reference Infor-
mation (PRI) which is a list of {SID:PID} pairs
representing the node’s membership in a sentence.
(A1:17-19) The original structure of a sentence is
recorded with the use of directed edges. Figure 1
shows a resulting Opinosis-Graph based on four
sentences.

The Opinosis-Graph has some unique proper-
ties that are crucial in generating abstractive sum-
maries. We highlight some of the core properties
by drawing examples from Figure 1:
Property 1. (Redundancy Capture). Highly re-
dundant discussions are naturally captured by sub-
graphs.
Figure 1 shows that although the phrase ‘great de-
vice’ was mentioned in different parts of sentences
(1) and (3), this phrase forms a relatively heavy
sub-path in the resulting graph. This is a good in-
dication of salience.
Property 2. (Gapped Subsequence Capture). Ex-
isting sentence structures introduce lexical links
that facilitate the discovery of new sentences or re-
inforce existing ones.
The main point conveyed by sentences (2) and (3)
in Figure 1 is that calls drop frequently. However,
this is expressed in slightly different ways and is
reﬂected in the resulting subgraph. Since sentence
(2) introduces a lexical link between ‘drop’ and
‘frequently’, the word ‘too’ can be ignored for sen-
tence (3) as the same amount of information is re-
tained. This is analogous to capturing a repetitive
gapped subsequence where similar sequences with
minor variations are captured. With this, the sub-
graph calls drop frequently can be considered re-
dundant.
Property 3. (Collapsible Structures). Nodes that
resemble hubs are possibly collapsible.
In Figure 1 we see that the subgraph ‘the iPhone
is’, is fairly heavy and the ‘is’ node acts like a

342

tractable, enabling us to develop a general solution
to the problem. We now describe each component
in such a summarization framework.
3.1 Valid Path
A valid path intuitively refers to a path that corre-
sponds to a meaningful sentence.
Deﬁnition 1. (Valid Start Node - VSN). A node vq
is a valid start node if it is a natural starting point
of a sentence.
We use the positional information of a node to de-
termine if it is a VSN. Speciﬁcally, we check if
Average(P IDvq ) ≤ σvsn, where σvsn is a pa-
rameter to be empirically set. With this, we only
qualify nodes that tend to occur early on in a sen-
tence.
Deﬁnition 2. (Valid End Node - VEN). A node vs
is a valid end point if it completes a sentence.
We use the natural ending points in the text to be
summarized as hints to which node may be a valid
end point of a path (i.e., a sentence). Speciﬁcally,
a node is a valid end node if (1) the node is a
punctuation such as period and comma or (2) the
node is any coordinating conjunction (e.g., ‘but’
and ‘yet’).
Deﬁnition 3. (Valid Path). A path W = {vq...vs}
is valid if it is connected by a set of directed edges
such that (1) vq is a VSN, (2) vs is a VEN, and
(3) W satisﬁes a set of well-formedness POS con-
straints.
Since not every path starting with a VSN and end-
ing at a VEN encodes a meaningful sentence, we
further require a valid path to satisfy the following
POS constraints (expressed in regular-expression)
to ensure that a valid path encodes a well-formed
sentence:

1. . ∗ (/nn) + . ∗ (/vb) + . ∗ (/jj) + .∗
2. . ∗ (/jj) + . ∗ (/to) + . ∗ (/vb).∗
3. . ∗ (/rb) ∗ . ∗ (/jj) + . ∗ (/nn) + .∗
4. . ∗ (/rb) + . ∗ (/in) + . ∗ (/nn) + .∗

This also provides a way (if needed) for the appli-
cation to generate only speciﬁc type of sentences
like comparative sentences or strictly opinionated
sentences. These rules are thus application spe-
ciﬁc.
3.2 Path Scoring
Intuitively, to generate an abstractive summary, we
should select a valid path that can represent most of
the redundant opinions well. We would thus favor
a valid path with a high redundancy score.
Deﬁnition 4. (Path Redundancy). Let W =
{vq...vs} be a path from an Opinosis-Graph. The
path redundancy of W , r(q, s), is the number of
overlapping sentences covered by this path, i.e.,

Figure 1: Sample Opinosis-Graph. Thick edges
indicate salient paths.
‘hub’ where it connects to various other nodes.
Such a structure is naturally captured by the
Opinosis-Graph and is a good candidate for com-
pression to generate a summary such as ‘The
iPhone is a great device and is worth the price’.
Also, certain word POS (e.g.
linking verbs like
‘is’ and ‘are’) often carry hub-like properties that
can be used in place of the outlink information.
3 Opinosis Summarization Framework
In this section, we describe a general framework
for generating abstractive summaries using the
Opinosis-Graph. We also describe our implemen-
tation of the components in this framework.

At a high level, we generate an abstractive sum-
mary by repeatedly searching the Opinosis graph
for appropriate subgraphs that both encode a valid
sentence (thus meaningful sentences) and have
high redundancy scores (thus representative of the
major opinions). The sentences encoded by these
subgraphs would then form an abstractive sum-
mary.

Going strictly by the deﬁnition of true abstrac-
tion (Radev et al., 2002), our problem formula-
tion is still more extractive than abstractive be-
cause the generated summary can only contain
words that occur in the text to be summarized;
our problem deﬁnition may be regarded as a word-
level (ﬁner granularity) extractive summarization.
However, compared to the conventional sentence-
level extractive summarization, our formulation
has ﬂavors of abstractive summarization wherein
we have elements of fusion (combining extracted
portions) and compression (squeezing out unim-
portant material from a sentence). Hence, the sen-
tences in the generated summary are generally not
the same as any original sentence. Such a “shal-
low” abstractive summarization problem is more

too
{3:8}

my phone calls
my
calls
{2:3, 3:6}
{2:1}

phone
{2:2}

drop
drop
{2:4, 3:7}

frequently
frequently
{2:5, 3:9}

with
with
{2:6}

the

{1:1, 2:7, 3:5, 4:1,4:5}
price
{4:6}

worth
worth
{4:4}

node label
SID:PID pairs

p

iphone

{1:2, 2:8, 4:2}

is

a
{1:3,4:3} {1:4}

.

{1:7, 2:9, 3:10}
{1:7, 2:9, 3:10}

but
{3:4}

,
{3:3}

great
{1:5, 3:1}
{
}

,

device
{1:6, 3:2}

Input:
SID:1. The iPhone is a great device. 
SID:2. My phone calls drop frequently with the iPhone. 
SID:3. Great device, but the calls drop too frequently.
y
SID:4. The iPhone is worth the price.

p

q

,

343

r(q, s) = nq ¯∩nq+1...¯∩ns,

) ≤ σgap.

|W|Ps
|W|Ps

k=i+2,i+1 log2|vi, vk| ∗ r(i, k))

where ni = P RIvi and ¯∩ is the intersection be-
tween two sets of SIDs such that the difference be-
tween the corresponding PIDs is no greater than
σgap, and σgap > 0 is a parameter.
Path redundancies provide good indication of how
many sentences discuss something similar at each
point in the path. The σgap parameter controls the
maximum allowed gaps in discovering these re-
dundancies. Thus, a common sentence X between
nodes vq and vr, will be considered a valid inter-
sect if (P IDvr x − P IDvq x
Based on path redundancy, we propose several
ways to score a path for the purpose of selecting a
good path to include in the summary:
1. Sbasic(W ) = 1
k=i+1,i r(i, k)
2. Swt len(W ) = 1
k=i+1,i |vi, vk| ∗ r(i, k)
3. Swt loglen(W ) = 1
(r(i, i + 1) +
|W|

Ps
vi is the ﬁrst node in the path being scored and vs
is the last node. |vi, vk| is the length from node vi
to vk.
|W| is the length of the entire path being
scored. The Sbasic scoring function scores a path
purely based on the level of redundancy. One could
also argue that high redundancy on a longer path is
intuitively more valuable than high redundancy on
a shorter path as the former would provide better
coverage than the latter. This intuition is factored
in by the Swt len and Swt loglen scoring functions
where the level of redundancy is weighted by the
path length. Swt loglen is similar to Swt len only
that it scales down the path length so that it does
not entirely dominate.
3.3 Collapsed paths
In some cases, paths in the Opinosis-Graph may be
collapsible (as explained in Section 2). In such a
case, the collapse operation is performed and then
the path scores are computed. We will now ex-
plain a few concepts related to collapsible struc-

tures. Let cW = {vi...vk} be a path from the

Opinosis-Graph.
Deﬁnition 5. (Collapsible Node). Node vk is a
candidate for collapse if its POS is a verb.
We only attempt to collapse nodes that are verbs
due to the heavy usage of verbs in opinion text and
the ease with which the structures can be combined
to form a new sentence. However, as mentioned
earlier other properties like the outlink information
can be used to determine if a node is collapsible.
Deﬁnition 6. (Collapsed Candidates, Anchor).
Let vk be a collapsible node. The collapsed can-
didates of vk (denoted by CC = {cci}m
i=1) are the

Canchor
a. the sound quality is

b. the iphone is

CC
cc1 : really good
cc2 : clear
cc1 : great
cc2 : expensive

Connector

and

but

Table 1: Example of anchors, collapsed candidates
and suitable connectors

remaining paths after vk in all the valid paths go-
ing through vi...vk. The preﬁx vi...vk is called the
anchor, denoted as Canchor = {vi...vk}. Each
path {vi...vn}, where vn is the last node in each
cci ∈ CC, is an individually valid path.
Table 1 shows a simplistic example of anchors and
corresponding collapsed candidates. Once the an-
chor and collapsed candidates have been identiﬁed,
the task is then to combine all of these to form a
new sentence.
Deﬁnition 7. (Stitched Sentence) A stitched sen-
tence is one that combines Canchor and CC to
form a combined, logical sentence.
We will now describe the stitching procedure that
we use, by drawing examples from Table 1. Since
we are dealing with verbs, Canchor can be com-
bined with the corresponding CC with commas
to separate each cci ∈ CC with one exception -
the correct sentence connector has to be used for
the last cci. For Canchora, the phrases really good
and clear can be connected by ‘and’ due to the
same sentiment orientation. For Canchorb, the col-
lapsed candidate phrases are well connected by the
word ‘but’. We use the existing Opinosis-Graph
to determine the most appropriate connector. We
do this by looking at all coordinating conjunction
(e.g. ‘but’, ‘yet’) nodes (vcconj) that are connected
to the ﬁrst node of the last collapsed candidate,
ccm. This would be the node labeled ‘clear’ for
Canchora and ‘expensive’ for Canchorb. We denote
these nodes as v0,ccm. The vcconj, with the high-
est path redundancy with v0,ccm, will be selected
as the connector.
Deﬁnition 8. (Collapsed Path Score) The ﬁnal
path score after the entire collapse operation is the
average across path scores computed from vi to the
last node in each cci ∈ CC.
The collapsed path score essentially involves com-
puting the path scores of the individual sentences
assuming that they are not collapsed and then av-
eraging them.
3.4 Generation of summary
Once we can score all the valid paths as well as all
the collapsed paths, the generation of an abstrac-
tive summary can be done in two steps: First, we
rank all the paths (including the collapsed paths)
in descending order of their scores. Second, we

344

eliminate duplicated (or extremely similar) paths
by using a similarity measure (in our experiments,
we used Jaccard). We then take the top few re-
maining paths as the generated summary, with the
number of paths to be chosen controlled by a pa-
rameter σss, which represents summary size.

Although conceptually we enumerate all the
valid paths, in reality we can use a redundancy
score threshold, σr to prune many non-promising
paths. This is reasonable because we are only in-
terested in paths with high redundancy scores.
4 Summarization Algorithm
Algorithms A2 and A3 describe the steps involved
in Opinosis Summarization. A2 is the starting
point of the Opinosis Summarization and A3 is a
subroutine where path ﬁnding takes place, invoked
from within A2.
Algorithm 2 (A2): OpinosisSummarization(Z)
1:
2: Output: O ={Opinosis Summaries}
3: g ← OpinosisGraph(Z)
4: node size ← SizeOf (g)
5:
for j = 1 to node size do
6:
7:
8:
9:
10:
11:
12:
end if
13: end for
14: C ← EliminateDuplicates(candidates)
15: C ← SortByP athScore(C)
16:
17: O = {O ∪ P ickN extBestCandidate(C)}
18: end for

if V SN (vj ) then
pathLen ← 1
score ← 0
cList ← CreateN ewList()
Traverse(cList, vj , score, P RIvj , labelvj , pathLen)
candidates ← {candidates ∪ cList}

Input: Topic related sentences to be summarized: Z = {zi}n

for i = 1 to σss do

i=1

(A2:3) Opinosis Summarization starts with the
construction of the Opinosis-Graph, described in
detail in Section 2. This is followed by the depth
ﬁrst traversal of this graph to locate valid paths
that become candidate summaries. (A2:6-12) To
achieve this, each node vj in the Opinosis-Graph
is examined to determine if it is a VSN and, if it
is, path ﬁnding will start from this node by invok-
ing subroutine A3. A3 takes the following as in-
put: list - a list to hold candidate summaries; vi
- the node to continue traversal from; score - the
accumulated path score; P RIoverlap - the intersect
between PRIs of all nodes visited so far (see Deﬁ-
nition 4); sentence - the summary sentence formed
so far; len - the current path length. (A2:7-10) Be-
fore invoking A3 from A2, the path length is set to
‘1’, path score is set to ‘0’ and a new list is cre-
ated to store candidate summaries generated from
node vj. (A2:11) All candidate summaries gener-
ated from vj will be stored in a common pool of
candidate summaries.

len

¯∩ P RIvn

if redundancy ≥ σr then
if V EN (vk) then

Input: list, vk ⊆ V , score, P RIoverlap, sentence, len

if V alidSentence(sentence) then
f inalScore ← score
AddCandidate(list, sentence, f inalScore)
end if

Algorithm 3 (A3): T raverse(...)
1:
2: Output: A set of candidate summaries
3: redundancy ← SizeOf (P RIoverlap)
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32: end if

end if
for vn ∈ N eighborsvk do
P RInew ← P RIoverlap
redundancy ← SizeOf (P RInew)
newSent ← Concat(sentence, labelvn )
L ← len + 1
newScore ← score + P athScore(redundancy, L)
if Collapsible(vn) then
Canchor ← newSent
tmp ← CreateN ewList()
for vx ∈ N eighborsvn do
Traverse(tmp, vx, 0, P RInew, labelvx , L)
CC ← EliminateDuplicates(tmp)
CCP athScore ← AverageP athScore(CC)
f inalScore ← newScore + CCP athScore
stitchedSent ← Stitch(Canchor, CC)
AddCandidate(list, stitchedSent, f inalScore)
end for

end if
end for

Traverse(list, vn, newScore, P RInew, newSent, L)

else

(A3:3-4) Algorithm A3 starts with a check to
ensure that the minimum path redundancy require-
ment is satisﬁed (see deﬁnition 4). For the very
ﬁrst node sent from A2, the path redundancy is the
size of the raw P RI. (A3:5-10) If the redundancy
requirement is satisﬁed, a few checks are done to
determine if a valid path has been found. If it has,
then the resulting sentence and its ﬁnal score are
added to the list of candidate summaries.

(A3:11-31) Traversal proceeds

recursively
through the exploration of all neighboring nodes
of the current node, vk.
(A3:12-16) For every
neighboring node, vn the PRI overlap information,
path length, summary sentence and path score
are updated before the next recursion.
(A3:29)
If a vn is not collapsible, then a regular traver-
sal takes place.
(A3:17-27) However, if vn is
collapsible, the updated sentence in A3:14, will
now serve as an anchor in A3:18.
(A3:21) A3
will then attempt to start a recursive traversal
from all neighboring nodes of vn in order to ﬁnd
corresponding collapsed candidates.
(A3:22-26)
After this, duplicates are eliminated from the
collapsed candidates and the collapsed path score
is computed. The resulting stitched sentence and
its ﬁnal score are then added to the original list of
candidate summaries.

(A2:14-18) Once all paths have been explored

345

for candidate generation, duplicate candidates are
removed and the remaining are sorted in descend-
ing order of their path scores. The best σss candi-
dates are ‘picked’ as ﬁnal Opinosis summaries.
5 Experimental Setup
We evaluate this abstractive summarization task
using reviews of hotels, cars and various prod-
ucts1. Based on these reviews, 2 humans were
asked to construct ‘opinion seeking’ queries which
would consist of an entity name and a topic of in-
terest. Example of such queries are: Amazon Kin-
dle:buttons, Holiday Inn, Chicago: staff, and so
on. We compiled a set of 51 such queries. We cre-
ate one review document per query by collecting
all review sentences that contain the query words
for the given entity. Each review document thus
consists of a set of unordered, redundant review
sentences related to the query. There are approxi-
mately 100 sentences per review document.

We use ROUGE (Lin, 2004b) to quantitatively
assess the agreement of Opinosis summaries with
human composed summaries. ROUGE is based on
an n-gram co-occurrence between machine sum-
maries and human summaries and is a widely ac-
cepted standard for evaluation of summarization
tasks.
In our experiments, we use ROUGE-1,
ROUGE-2 and ROUGE-SU4 measures. ROUGE-
1 and ROUGE-2 have been shown to have most
correlation with human summaries (Lin and Hovy,
2003) and higher order ROUGE-N scores (N > 1)
estimate the ﬂuency of summaries.

We use multiple reference (human) summaries
in our evaluation since it can achieve better cor-
relation with human judgment (LIN, 2004a). We
leverage Amazon’s Online Workforce2 to get 5 dif-
ferent human workers to summarize each review
document. The workers were asked to be concise
and were asked to summarize the major opinions in
the review document presented to them. We manu-
ally reviewed each set of reference summaries and
dropped summaries that had little or no correlation
with the majority. This left us with around 4 refer-
ence summaries for each review document.

To allow performance comparison between hu-
mans, Opinosis and the baseline method, we im-
plemented a Jackkniﬁng procedure where, given K
references, the ROUGE score is computed over K
sets of K-1 references. With this, average human
performance is computed by treating each refer-
ence summary as a ‘system’ summary, computing
ROUGE scores over the remaining K-1 reference

1Reviews collected from Tripadvisor, Amazon, Edmunds
2https://www.mturk.com

summaries.

Due to the limited work in abstractive sum-
marization, no natural baseline could be used for
comparison. The existing work in this area is
mostly domain dependent and requires too much
manual effort (explained in Section 1). The next
best baseline is to use a state of the art extractive
method. Thus, we use MEAD (Radev et al., 2000)
as our baseline. MEAD is an extractive summa-
rizer based on cluster centroids. It uses a collection
of the most important words from the whole clus-
ter to select the best sentences for summarization.
By default, the scoring of sentences in MEAD is
based on 3 parameters - minimum sentence length,
centroid, and position in text. MEAD was ideal
for our task because a good summary in our case
would be one that could capture the most essential
information. This is exactly what centroid-based
summarization aims to achieve. Also, since the po-
sition in text parameter is irrelevant in our case, we
could easily turn this off with MEAD.

We introduce a readability test to understand if
Opinosis summaries are in fact readable. Suppose
we have N sentences from a system-generated
summary and M sentences from corresponding
human summaries. We mix all these sentences
and then ask a human assessor to pick at most N
sentences that are least readable as the prediction
of system summary.

readability(O) = 1 − #CorrectP ick

N

If the human assessor often picks out system gen-
erated summaries as being least readable, then the
readability of system summaries is poor.
If not,
then the system generated summaries are no dif-
ferent from human summaries.
6 Results
The baseline method (MEAD) selects 2 most rep-
resentative sentences as summaries. To give a fair
comparison, we ﬁx the Opinosis summary size,
σss = 2. We also ﬁx σvsn = 15. The best Opinosis
conﬁguration with σss = 2 and σvsn = 15 is
called Opinosisbest (σgap = 4, σr = 2, Swt loglen).
ROUGE scores reported are with the use of stem-
ming and stopword removal.
Performance comparison between humans,
Opinosis and baseline. Table 2 shows the perfor-
mance comparison between humans, Opinosisbest
and the baseline method. First, we see that the
baseline method has very high recall scores com-
pared to Opinosis. This is because extractive meth-
ods that just ‘select’ sentences tend to be much
longer resulting in higher recall. However, these
summaries tend to carry information that may not
be signiﬁcant and is clearly reﬂected by the poor

346

ROUGE-1

0.3184
0.2831
0.4932

Recall

ROUGE-2
0.1106
0.0853
0.1058

Precision

ROUGE-SU4

Avg # Words

0.1293
0.0851
0.2316

17
15
75

ROUGE-1

ROUGE-2

ROUGE-SU4

Avg # Words

Figure 3: ROUGE scores (f-measure) at different
levels of σr averaged across σgap ∈ [1, 5]

Human
Opinosis
Baseline

Human
Opinosis
Baseline

0.3434
0.4482
0.0916

ROUGE-1

0.1596
0.2261
0.0102

0.1210
0.1416
0.0184

F-score

17
15
75

ROUGE-SU4

Avg # Words

ROUGE-2
0.1069
0.0998
0.0308

0.3088
0.3271
0.1515

Human
Opinosis
Baseline
Table 2: Performance comparison between Hu-
mans, Opinosisbest and Baseline.

0.1142
0.1027
0.0189

17
15
75

Figure 2: ROUGE scores (f-measure) at different
levels of σgap, σr = 2.

precision scores.

Next, we see that humans have reasonable
agreement amongst themselves given that these are
independently composed summaries. This agree-
ment is especially clear with the ROUGE-2 re-
call score where the recall is better than Opinosis
but comparable to the baseline even though the
summaries are much shorter. It is also clear that
Opinosis is closer in performance to humans than
to the baseline method. The recall scores of
Opinosis summaries are slightly lower than that
achieved by humans, while the precision scores are
higher (Wilcoxon test shows that the increase in
precision is statistically more signiﬁcant than the
decrease in recall). In terms of f-scores, Opinosis
has the best ROUGE-1 score and its ROUGE-2 and
ROUGE-SU4 scores are comparable with human
performance. The baseline method has the low-
est f-scores. The difference between the f-scores
of Opinosis and that of humans is statistically in-
signiﬁcant.
Comparison of scoring functions. Next, we look
into the performance of the three scoring func-
tions, Sbasic, Swt len and Swt loglen described in
Section 3. Figure 2 shows ROUGE scores of these
scoring methods at varying levels of σgap. First,

Figure 4: Precision-Recall comparison with differ-
ent Opinosis features turned off.
it can be observed that Swt basic which does not
use path length information, performs the worst.
This is due to the effect of heavily favoring re-
dundant paths over longer but reasonably redun-
dant ones that can provide more coverage. We also
see that Swt len and Swt loglen are similar in per-
formance with Swt loglen marginally outperform-
ing Swt len when σgap > 2. Since Swt len uses
the raw path length in its scoring function, it may
be inﬂating the path scores of long but insigniﬁ-
cant paths. Swt loglen scales down the path length,
thus providing a reasonable tradeoff between re-
dundancy and the length of the selected path. The
three scoring functions are not inﬂuenced by dif-
ferent levels of σr as shown in Figure 3.
Effect of gap setting (σgap). Now, we will ex-
amine the effect of σgap on the generated sum-
maries. Based on Figure 2, we see that setting
σgap=1 yields in relatively low performance. This
is because σgap=1 implies immediate adjacency
between the PIDs of two nodes and such strict ad-
jacency enforcements prevent redundancies from
being discovered. When σgap is increased to 2,
there is a big jump in performance, after which
improvements are observed in smaller amounts. A
very large gap setting could increase the possibility
of generating ill-formed sentences, thus we recom-
mend that σgap is set between 2-5.
Effect of redundancy requirement (σr) . Fig-
ure 3 shows the ROUGE scores at different levels
of σr. It is clear that when σr > 2, the quality of
summaries is negatively impacted. Since we only
have about 100 sentences per review document,
σr > 2 severely restricts the number of paths that
can be explored, yielding in lower ROUGE scores.
Since the scoring function can account for the level
of redundancy, σr should be set according to the
size of the input data. For our dataset, σr = 2 was
ideal.

1
1
1
1
1
-
-
-
-
-
E
E
E
E
E
G
G
G
G
G
U
U
U
U
O
O
O
O
R
R
R
R

0.330
0.330
0.330
0.330
0 330
0.330

0.310
0.310
0.310
0.310
0.310

0.290
0.290
0.290
0.290

0.270
0.270
0.270

0.250
0.250

4
4
4
4
4
U
U
U
U
U
S
S
S
S
S
-
-
-
-
-
E
E
E
E
E
G
G
G
G
U
U
U
U
O
O
O
O
R
R
R
R

0.110
0.110
0.110
0.110
0.110
0.110

0.100
0.100
0.100
0.100
0.100

0.090
0.090
0.090
0.090

0.080
0.080
0.080

0 070
0.070
0.070

basic
basic
basic
basic
wt_loglen
wt_loglen
wt_loglen
wt len
wt_len
wt_len

1
1

2
2

3
3
σgap
σgap

4
4

5
5

basic
basic
basic
basic
wt_loglen
wt_loglen
wt_loglen
wt_len
wt_len
wt_len
5
5

4
4

1
1

2
2

3
3
σgap
σgap

0.30
0.30
0.30

0.25
0.25

0.20
0.20

ROUGE-1
ROUGE-1
ROUGE-1

ROUGE-SU4
ROUGE-SU4
ROUGE-SU4

0.10
0.10
0.10
0.09
0.09
0.09
0.08
0.08
0.07
0.07
0.06
0.06
0.05
0.05

R2

basic

R3
wt_loglen

R4

wt_basic

R2
R2

R3
R3

R4
R4

basic

wt_loglen

wt_basic

precision-recall curve
precision-recall curve

ROUGE-SU4
ROUGE-SU4

x collapse
x collapse
x dupelim
x dupelim

x collapse
x collapse
+dupelim
+dupelim

Opinosis
Opinosis
(baseline)
(baseline)

+ ll
+collapse
x dupelim

0.50
0.50

0.45
0.45

0.40
0.40

N
N
O
O
I
I
S
S
I
I
C
C
E
E
R
R
P
P

0.35

0.28
0.28

0.23
0.23

N
N
O
O
I
I
S
S
I
I
C
C
E
E
R
R
P
P

0.18

precision-recall curve
precision-recall curve

ROUGE-1
ROUGE-1

x collapse
x collapse
x dupelim
x dupelim

x collapse
x collapse
+dupelim
+dupelim

Opinosis
Opinosis
(baseline)
(baseline)

+collapse
x dupelim

0.06

0.07

0.08

RECALL

0.09

0.1

0.22

0.24

0.26

RECALL

0.28

0.3

347

Figure 5: Sample results comparing Opinosis summaries with human and baseline summaries.

Effect of collapsed structures and duplicate
elimination. So far, it has been assumed that all
features used in Opinosis are required to gener-
ate reasonable summaries. To test this hypothesis,
we use Opinosisbest as a baseline and then we turn
off different features of Opinosis. We turn off the
duplicate elimination feature, then the collapsi-
ble structure feature, and ﬁnally both. Figure 4
shows the resulting precision-recall curve. From
this graph, we see that without duplicate elimina-
tion and when collapsing is turned off, the preci-
sion is highest but recall is lowest. No collaps-
ing implies shorter sentences and thus lower recall,
which is clearly reﬂected in Figure 4. On top of
this, if duplicates are allowed, the overall informa-
tion coverage is low, further affecting the recall.
Notice that the presence of duplicates with the col-
lapse feature turned on results in very high recall
(even higher than the baseline). This is caused by
the presence of similar phrases that were not elim-
inated from the collapsed candidates, resulting in
long sentences that artiﬁcially boost recall. The
Opinosis baseline which uses duplicate elimina-
tion and the collapsible structure feature, offers a
reasonable tradeoff between precision and recall.

Readability of Summaries. To test the readability
of Opinosis summaries, we conducted a readabil-
ity test (described in Section 5) using summaries
generated from Opinosisbest. A human assessor
picked the 2 least readable sentences from each of
the 51 test sets (based on 51 summaries). Collec-
tively, there were 565 sentences out of which 102
were Opinosis generated. Out of these, the hu-
man assessor picked only 34 of the sentences as
being least readable, resulting in an average read-
ability score of 0.67. This shows that more than
60% of the generated sentences are indistinguish-
able from human composed sentences. Of the 34
sentences with problems, 11 contained no informa-
tion or were incomprehensible, 12 were incomplete
possibly due to false positives when the sentence
validity check was done, and 8 had conﬂicting in-
formation such as ‘the hotel room is clean and
dirty’. This happens due to mixed feelings about

the same topic and can be resolved using sentiment
analysis. The remaining 3 sentences were found
to contain poor grammar, possibly caused by the
gaps allowed in ﬁnding redundant paths.
Sample Summaries. Finally, in Figure 5 we show
two sample summaries on two different topics.
Notice that the Opinosis summaries are concise,
fairly well-formed and have closer resemblance to
human summaries than to the baseline summaries.
7 Conclusion
In this paper, we described a novel summarization
framework (Opinosis) that uses textual graphs to
generate abstractive summaries of highly redun-
dant opinions. Evaluation results on a set of review
documents show that Opinosis summaries have
better agreement with human summaries com-
pared to the baseline extractive method. The
Opinosis summaries are concise, reasonably well-
formed and communicate essential information.
Our readability test shows that more than 60% of
the generated sentences are no different from hu-
man composed sentences.

Opinosis is a ﬂexible framework in that many
of its modules can be easily improved or replaced
with other suitable implementation. Also, since
Opinosis is domain independent and relies on min-
imal external resources, it can be used with any
corpus containing high amounts of redundancies.
Our graph representation naturally ensures the
coherence of a summary, but such a graph empha-
sizes too much on the surface order of words. As a
result, it cannot group sentences at a deep seman-
tic level. To address this limitation, we can use a
similar idea to overlay parse trees and this would
be a very interesting future research.
8 Acknowledgments
We thank the anonymous reviewers for their use-
ful comments. This paper is based upon work sup-
ported in part by an IBM Faculty Award, an Alfred
P. Sloan Research Fellowship, an AFOSR MURI
Grant FA9550-08-1-0265, and by the National Sci-
ence Foundation under grants IIS-0347933, IIS-
0713581, IIS-0713571, and CNS-0834709.

“About  food at Holiday Inn, London”

Human summaries:
[1] Food was excellent with a wide range of choices and good services.
[2] The food is good, the service great. Very good selection of food for breakfast 
buffet.

Opinosis abstractive summary:
The food was  excellent,  good and  delicious. Very good selection of food.

Baseline extractive summary:
Within 200 yards of leaving the hotel and heading to the Tube Station you have a 
number of fast food outlets, highstreet Restautants, Pastry shops and 
supermarkets so if you did wish to live in your hotel room for the duration of your
supermarkets, so if you did wish to live in your hotel room for the duration of your 
stay, you could do.......

“What is free at Bestwestern Inn, San Francisco”

Human summaries:
[1] There is free WiFi internet access available in all the rooms.. From 5-6 p.m. there is free 
wine tasting and appetizers available to all the guests.
[2] Evening wine reception and free coffee in the morning. Free internet, free parking and 
free massage
free massage.

Opinosis abstractive summary:
Free wine reception in evening. Free coffee and biscotti and wine.

Baseline extractive summary:
The free wine and nibbles served between 5pm and 6pm were a lovely touch. There's free 
coffee teas at breakfast time with little biscotti and best of all
coffee, teas at breakfast time with little biscotti and, best of all, from 5 till 6pm you get a free 
from 5 till 6pm you get a free
wine 'tasting' reception which, as long as you don't take……

348

[Mihalcea and Tarau2004] Mihalcea, R. and P. Tarau.
2004. TextRank: Bringing order into texts. In Pro-
ceedings of EMNLP-04and the 2004 Conference on
Empirical Methods in Natural Language Processing,
July.

[Pang and Lee2004] Pang, Bo and Lillian Lee. 2004.
A sentimental education: Sentiment analysis using
subjectivity summarization based on minimum cuts.
In Proceedings of the ACL, pages 271–278.

[Pang et al.2002] Pang, Bo, Lillian Lee, and Shivaku-
mar Vaithyanathan. 2002. Thumbs up? Sentiment
classiﬁcation using machine learning techniques. In
Proceedings of the 2002 Conference on Empirical
Methods in Natural Language Processing (EMNLP),
pages 79–86.

[Radev and McKeown1998] Radev, DR and K. McKe-
own. 1998. Generating natural language summaries
from multiple on-line sources. Computational Lin-
guistics, 24(3):469–500.

[Radev et al.2000] Radev, Dragomir, Hongyan Jing, and
Malgorzata Budzikowska. 2000. Centroid-based
summarization of multiple documents: Sentence ex-
traction, utility-based evaluation, and user studies.
In In ANLP/NAACL Workshop on Summarization,
pages 21–29.

[Radev et al.2002] Radev, Dragomir R., Eduard Hovy,
and Kathleen McKeown. 2002. Introduction to the
special issue on summarization.

[Saggion and Lapalme2002] Saggion, Horacio and Guy
Lapalme. 2002. Generating indicative-informative
summaries with sumum. Computational Linguistics,
28(4):497–526.

Benjamin

[Snyder and Barzilay2007] Snyder,

and
Regina Barzilay. 2007. Multiple aspect ranking
using the good grief algorithm.
In In Proceedings
the Human Language Technology Conference
of
of the North American Chapter of the Association
of Computational Linguistics (HLT-NAACL, pages
300–307.

[Titov and Mcdonald2008] Titov, Ivan and Ryan Mc-
donald. 2008. A joint model of text and aspect rat-
ings for sentiment summarization.
In Proceedings
of ACL-08: HLT, pages 308–316, Columbus, Ohio,
June. Association for Computational Linguistics.

References
[Barzilay and Lee2003] Barzilay, Regina and Lillian
Lee. 2003. Learning to paraphrase: an unsuper-
vised approach using multiple-sequence alignment.
In NAACL ’03: Proceedings of the 2003 Confer-
ence of the North American Chapter of the Associ-
ation for Computational Linguistics on Human Lan-
guage Technology, pages 16–23, Morristown, NJ,
USA. Association for Computational Linguistics.

[DeJong1982] DeJong, Gerald F. 1982. An overview of
the FRUMP system. In Lehnert, Wendy G. and Mar-
tin H. Ringle, editors, Strategies for Natural Lan-
guage Processing, pages 149–176. Lawrence Erl-
baum, Hillsdale, NJ.

[Erkan and Radev2004] Erkan, G¨unes and Dragomir R.
Radev. 2004. Lexrank: graph-based lexical central-
ity as salience in text summarization. J. Artif. Int.
Res., 22(1):457–479.

[Finley and Harabagiu2002] Finley, Sanda Harabagiu
and Sanda M. Harabagiu. 2002. Generating sin-
gle and multi-document summaries with gistexter. In
Proceedings of the workshop on automatic summa-
rization, pages 30–38.

[Jing and McKeown2000] Jing, Hongyan and Kath-
leen R. McKeown.
2000. Cut and paste based
text summarization. In Proceedings of the 1st North
American chapter of the Association for Computa-
tional Linguistics conference, pages 178–185, San
Francisco, CA, USA. Morgan Kaufmann Publishers
Inc.

[Lerman et al.2009] Lerman, Kevin,

Sasha Blair-
Goldensohn, and Ryan Mcdonald. 2009. Sentiment
summarization: Evaluating and learning user prefer-
ences. In 12th Conference of the European Chapter
of the Association for Computational Linguistics
(EACL-09).

[Lin and Hovy2003] Lin, Chin-Yew and Eduard Hovy.
2003. Automatic evaluation of summaries using n-
gram co-occurrence statistics. In Proc. HLT-NAACL,
page 8 pages.

[LIN2004a] LIN, Chin-Yew. 2004a. Looking for a few
good metrics : Rouge and its evaluation. proc. of the
4th NTCIR Workshops, 2004.

[Lin2004b] Lin, Chin-Yew. 2004b. Rouge: a pack-
age for automatic evaluation of summaries. In Pro-
ceedings of the Workshop on Text Summarization
Branches Out (WAS 2004), Barcelona, Spain.

[Lu et al.2009] Lu, Yue, ChengXiang Zhai, and Neel
Sundaresan. 2009. Rated aspect summarization of
short comments. In 18th International World Wide
Web Conference (WWW2009), April.

