



















































Finite-state Representations Embodying Temporal Relations


Proceedings of the 9th International Workshop on Finite State Methods and Natural Language Processing, pages 12–20,
Blois (France), July 12-15, 2011. c©2011 Association for Computational Linguistics

Finite-state representations embodying temporal relations

Tim Fernando
Computer Science Department

Trinity College
Dublin 2, Ireland

Tim.Fernandol@tcd.ie

Abstract

Finite-state methods are applied to the
Russell-Wiener-Kamp notion of time (based
on events) and developed into an account of
interval relations and semi-intervals. Strings
are formed and collected in regular languages
and regular relations that are argued to em-
body temporal relations in their various un-
derspecified guises. The regular relations in-
clude retractions that reduce computations by
projecting strings down to an appropriate level
of granularity, and notions of partiality within
and across such levels.

1 Introduction

It is a truism that to reason about change, some no-
tion of time is useful to impose order on events.
Less clear perhaps is whether or not time is shaped
completely by the events it relates. An event-based
notion of time going back to Russell and Wiener
(Kamp and Reyle, 1993; Lück, 2006) is analyzed in
the present work using finite-state methods that ex-
tend to interval relations, semi-intervals and granu-
larity; e.g. (Allen, 1983; Freksa, 1992; Mani, 2007).
Rather than take for granted some absolute (inde-
pendent) notion of time (such as the real line), the
basic approach is to form strings (from events and
generalizations of events described below) and col-
lect them in regular languages and regular relations.
The claim is that this leads to a more satisfying ac-
count of the partiality of temporal information con-
veyed (for instance) in everyday speech. In particu-
lar, there is a sense (to be explained below) in which
the strings, languages and relations of the approach

embody a wide range of temporal relations that vary
in degrees of underspecification. Those degrees de-
pend on the events under consideration: the more
events to relate, the finer grained time becomes.

Two temporal relations between events, called
overlap © and (complete) precedence ≺, are em-
ployed in the Russell-Wiener-Kamp construction of
time from events. To picture these relations between
two events e and e′, let us form the three “snapshots”

e , e′ and e, e′

and arrange them much like a cartoon/film strip
(with time progressing from left to right) to produce

e e′ as a record of e precedes e′ (i.e., e ≺ e′)
e′ e as a record of e′ precedes e (i.e., e′ ≺ e)

and finally

e, e′ as a record of e overlaps e′ (i.e., e© e′) .

Formally, these strips are strings over the alphabet
Pow({e, e′}) of subsets of {e, e′}, with the curly
braces in {e}, {e′} and {e, e′} redrawn as boxes to
reinforce the construal of the subsets as snapshots.
As explained in section 2 below, the three strings
correspond exactly to the three (Russell-Wiener-
Kamp) event structures over the events e and e′,
with a box in each string identifiable as a (Russell-
Wiener-Kamp) temporal moment.1

1Briefly, © is just ≺-incomparability, and RWK-moments
maximal antichains relative to ≺ (Lück, 2006). Details below,
where we follow Kamp and Reyle (1993) in foregrounding©.

12



RWK Allen Pow({e, e′})∗
e© e′ e = e′ e, e′

e s e′ e, e′ e′

e si e′ e, e′ e

e f e′ e′ e, e′

e fi e′ e e, e′

e d e′ e′ e, e′ e′

e di e′ e e, e′ e

e o e′ e e, e′ e′

e oi e′ e′ e, e′ e

e ≺ e′ e m e′ e e′
e < e′ e e′

e′ ≺ e e mi e′ e′ e
e > e′ e′ e

Table 1: From Russell-Wiener-Kamp to Allen

But surely there are more relations than prece-
dence ≺ and overlap© to consider — not to men-
tion strings in Pow({e, e′})∗ other than e e′ ,
e′ e and e, e′ . Inasmuch as event structures de-

scribe intervals, it is natural to ask about the thir-
teen different interval relations in Allen (1983). Ev-
idently, there are nine ways for e and e′ to overlap,
and two ways (each) for e to precede e′ (and e′ to
precede e). See Table 1, where strings are associated
with Allen relations according to certain construc-
tions presented below. Briefly, under these construc-
tions, granularity can be refined by expanding the set
of events related by ≺ and©. In particular, it turns
out that all thirteen Allen relations between e and
e′ fall out of the Russell-Wiener-Kamp construction
(RWK) applied to an expansion of {e, e′} by mark-
ers pre(e), post(e), pre(e′), post(e′), of the past and
future of e and e′, respectively. That is, RWK yields
the Allen relations provided that, in McTaggart’s ter-
minology (McTaggart, 2008), we first enrich the B-
series relations ≺ and © with A-series ingredients
for tense. In the case of the Allen relation e s e′, for
instance, we get the string

pre(e), pre(e′) e, e′ post(e), e′ post(e), post(e′)

which a certain string function π{e,e′} maps to the

Table 1 Pow({e, e′})∗-entry

e, e′ e′

for e s e′. The rest of the Allen relations can be
obtained similarly. The projection π{e,e} is one in
a family of regular relations πX that (as will be
shown below) correspond to RWK under the afore-
mentioned A-series enhancement. The subscript X
indexing that family specifies the ingredients from
which strings are formed, and (as a consequence)
the granularity of temporal relations the strings em-
body. By varying that index X , we can overcome
the limitations in any choice of finitely many events
on which to construct event structures (i.e., © and
≺). What’s more, for any set E (finite or infinite),
we can represent every event structure over E in the
inverse limit of the system of maps πX , for X rang-
ing over finite subsets of E.

More precisely, we start in section 2 with a care-
ful presentation of event structures, extracting event
structures E(s) from strings s ∈ Pow(X)∗ (over
the alphabet of subsets of X) with A-series exten-
sions s± to capture the Allen relations in E(s±). A
function on strings, block compression bc, is defined
that gives canonical string representations bc(s) of
E(s±). In section 3, we transform bc into maps πX ,
for different finite sets X of events, forming regular
languages representing families of finite event struc-
tures, which are subsequently generalized and con-
strained.

Throughout what follows, strings are formed from
subsets of some finite set X . An alternative consid-
ered in Karttunen (2005) is to flatten these subsets to
strings, introducing brackets [ and ] to enclose tem-
poral propositions understood to hold at the same
period so that, for example, the string e, e′ e′ of
length 2 becomes the string [ e e′ ] [ e′ ] of length 7.
It is easy to devise a finite-state transducer translat-
ing Pow(X)∗ to (X ∪ {[, ]})∗ in this way. A greater
challenge is presented by brackets [a and ]a deco-
rated with granularities a (such as days or months or
years) used in the analysis of calendar expressions
in Niemi and Koskenniemi (2009). The approach
below of structuring the symbols of the alphabet as
sets simplifies many of the finite-state constructions
of present interest.2 An important example is su-

2As shown in section 3 below, the theme in Niemi and

13



perposition & (Fernando, 2004), a binary operation
on strings over the alphabet Pow(X) that forms the
componentwise union of strings of the same length

α1 · · ·αn & α′1 · · ·α′n def= (α1 ∪ α′1) · · · (αn ∪ α′n)
(for αi, α′i ⊆ X). To illustrate,

e, e′ = e & e′

e e′ = e & e′

e′ e = e′ & e .

A natural notion of containment between strings s
and s′ can be derived from & as follows. We say s
subsumes s′ and write s � s′ if the strings have the
same length, and the first is no different from its su-
perposition with the second

s � s′ def⇐⇒ s and s′ have the same length,
and s = s & s′ .

That is, � is componentwise inclusion ⊇ between
strings of the same length,

α1 · · ·αn � α′1 · · ·α′n ⇐⇒ αi ⊇ α′i for
1 ≤ i ≤ n .

To compare strings of different lengths, we unpad,
stripping off initial and final empty boxes �

unpad(s) def=


unpad(s′) if s = �s′ or

else if s = s′�
s otherwise

so that, for example,

unpad(
n
e e, e′

m
) = e e, e′

for all integers n,m ≥ 0. Now, using the equiva-
lence ≈ between strings that unpad maps alike

s ≈ s′ def⇐⇒ unpad(s) = unpad(s′) ,
we generalize subsumption � to containment w,
taking s w s′ (read: s contains s′) to mean that s
subsumes some string unpad-equivalent to s′

s w s′ def⇐⇒ (∃s′′ ≈ s′) s � s′′ .
Koskenniemi (2009) of composing finite-state transducers can
be developed with symbols structured as sets, and regular rela-
tions as retractions.

(A1) e© e (i.e. © is reflexive)
(A2) e© e′ =⇒ e′© e
(A3) e ≺ e′ =⇒ not e© e′
(A4) e ≺ e′ and e′© e′′ and e′′ ≺ e′′′

=⇒ e ≺ e′′′
(A5) e ≺ e′ or e© e′ or e′ ≺ e

Table 2: Axioms for (RWK) event structures

Thus, if s contains s′ (e.g. if s is s′), then so do
unpad(s) and s′′s and ss′′ (for all s′′). It will be con-
venient to extend w to languages L, conceived as
disjunctions, agreeing that s contains L if s contains
some element of L

s w L def⇐⇒ (∃s′ ∈ L) s w s′

so that s w s′ iff s w {s′}. Containment w is applied
to event structures in section 2, with different sets
X of events related by projections πX in section 3.
Containment is also useful when sidestepping com-
pleteness assumptions built into event structures and
πX , as we shall see.

2 Event structures from strings

A (Russell-Wiener-Kamp) event structure (Kamp
and Reyle, 1993) is a triple 〈E,©,≺〉 consisting of
a set E of events, and two binary relations on E,
(temporal) overlap© and (complete) precedence ≺
satisfying axioms (A1) to (A5) in Table 2. To get a
sense for what these axioms mean, it is useful to in-
terpret them relative to triples 〈Es,©s,≺s〉 defined
from strings s of sets as follows. We put intoEs each
e that occurs in s

Es
def= {e | s w e }

and define e to s-overlap e′ precisely if e and e′ share
a box in s

e©s e′ def⇐⇒ s w e, e′ .

As e, e = e and e, e′ = e′, e , it follows that
(A1) and (A2) are true for © = ©s. Next, we say
e s-precedes e′ if e occurs in s to the left of e′ but
never in the same box as e′ or to the right of e′

e ≺s e′ def⇐⇒ s w e ∗ e′ and
not s w e, e′ | e′ ∗ e

14



(where | is non-deterministic choice, often written
+). It is easy to see that together©s and≺s validate
(A3) and (A4). This leaves (A5), a counter-example
to which is provided by the string e e′ e . With
this in mind, we define an element e ∈ Es to be an
s-interval if for s = α1 · · ·αn,

e ∈ αi ∩ αj and i ≤ k ≤ j =⇒ e ∈ αk
for all integers i, j, k from 1 to n. We call s struc-
tural if every e ∈ Es is an s-interval. If s is struc-
tural, then

e ≺s e′ ⇐⇒ s w e ∗ e′ and not s w e, e′ .

Moreover, we have

Proposition 1. If s is structural, then 〈Es,©s,≺s〉
is an event structure.

As a string s need not be structural, it is useful to
define the subset I(s) of Es consisting of s-intervals

I(s) def= {e ∈ Es | e is an s-interval} .

For example,

I( e e′ e ) = {e′} .

Next, for any set X , we define the function ρX on
strings (of sets) to componentwise intersect with X

ρX(α1 · · ·αn) def= (α1 ∩X) · · · (αn ∩X)

so that, for instance, if ŝ is e e′ e ,

ρI (̂s)(̂s) = e′ .

In general, ρI(s)(s) is structural for all strings s.
Setting i(s) to ρI(s)(s), and E(s) to the triple
〈Ei(s),©i(s),≺i(s)〉 induced by i(s), we note
Corollary 2. E(s) is an event structure for every
string s of sets.

An obvious question Corollary 2 raises is: can ev-
ery event structure over a set E be presented as E(s)
for a suitable string s ∈ Pow(E)∗? For infinite sets
E, more methods are clearly needed — and consid-
ered in the next section. As for finite E, an affir-
mative answer follows from Russell-Wiener-Kamp
(RWK, Kamp and Reyle, 1993), which we now

briefly recall. Given an event structure 〈E,©,≺〉,
we construct a linear order 〈T©,≺T 〉 as follows.
The set T© of (RWK) temporal moments consists of
subsets t of E that pairwise©-overlap

(∀e, e′ ∈ t) e© e′

and are ⊆-maximal among such subsets
(∀e ∈ E) if (∀e′ ∈ t) e© e′ then e ∈ t .

For t, t′ ∈ T©, we then put t ≺T t′ if some element
of t ≺-precedes some element of t′

t ≺T t′ def⇐⇒ (∃e ∈ t)(∃e′ ∈ t′) e ≺ e′ .
One can then show that not only does ≺T linearly
order T©, but that relative to that linear order, every
e ∈ E defines an interval

e ∈ t whenever e ∈ t1 and e ∈ t2
for some t1, t2 with t1 ≺T t ≺T t2

and the relations© and≺ can be interpreted as over-
lap

e© e′ ⇐⇒ (∃t ∈ T©) e ∈ t and e′ ∈ t
and complete precedence

e ≺ e′ ⇐⇒ (∀t ∈ T©)(∀t′ ∈ T©)
e ∈ t and e′ ∈ t′ implies t ≺T t′ .

To illustrate, the three event structures on E =
{e, e′} yield three linear orders 〈T©,≺T 〉 that can
be pictured as the three strings e, e′ , e e′ and

e′ e .
But then what about the ten other strings in Ta-

ble 1 and the various Allen relations? Each of these
strings violates the ⊆-maximality requirement on
T© above. We can neutralize that requirement by
adjoining pre- and post-events, turning, for instance,

e e, e′ e′ into e, pre(e′) e, e′ e′, post(e) .

On structural strings, pre(e) and post(e) negate
e, whilst preserving structurality. More precisely,
given a set E, let

E±
def= E ∪ {pre(e) | e ∈ E}

∪ {post(e) | e ∈ E}

15



and call a string s = α1α2 · · ·αn E-delimited if for
all e ∈ E and i ∈ {1, 2, . . . , n},
pre(e) ∈ αi ⇐⇒ s w e but α1 · · ·αi 6w e

(⇐⇒ e ∈ (
n⋃

j=i+1

αj)−
i⋃

j=1

αj)

and

post(e) ∈ αi ⇐⇒ s w e but αi · · ·αn 6w e

(⇐⇒ e ∈ (
i−1⋃
j=1

αj)−
n⋃
j=i

αj) .

It is immediate that for every string s ∈ Pow(E)∗,
there is a unique E-delimited string s′ ∈ Pow(E±)∗
such that ρE(s′) = s. Let s± be that unique string.

Proposition 3. For every finite set E, there is a
finite-state transducer that computes the map s 7→ s±
from Pow(E)∗ to Pow(E±)∗.

If s is structural, then so is s± — making
〈Es± ,©s± ,≺s±〉 an event structure (for structural
s). Extending a string s ∈ Pow({e, e′})∗ to s± leads
to a refinement of © and ≺ to any of the 13 Allen
relations — e.g. whenever e and e′ are s-intervals,

e ds e′ ⇐⇒ pre(e)©s± e′ and e©s± e′
and post(e)©s± e′

e <s e′ ⇐⇒ e ≺s± e′ and
post(e)©s± pre(e′) .

Given that there is a finite-state transducer for the
map s 7→ s±, it is tempting to leave out the pre- and
post-events for simplicity.

The map s 7→ s± aside, different strings s ∈
Pow(E)∗ can give the same event structure E(s).
Take, for example, the strings in e

+
e′

+
(where

L+
def= L∗L), each of which gives the event struc-

ture pictured by e e′ . In general, let us reduce all
adjacent identical boxes ααn to one α in the block
compression bc(s) of a string s

bc(s) def=


bc(αs′) if s = ααs′

αbc(α′s′) if s = αα′s′ with α 6= α′
s otherwise

so that, for example,

bc(s) = e e′ for every s ∈ e + e′ + .

The map bc is a regular relation, and implements the
slogan “no time without change” (Kamp and Reyle
1993, page 674). Clearly, bc does not alter the event
structure E(s) represented by a string s

E(bc(s)) = E(s) .

Neither does unpadding, which suggests defining a
function π that unpads after (or equivalently: before)
block compression

π(s) def= unpad(bc(s)) [= bc(unpad(s))]

so that, for example,

π(s) = e e′ for every s ∈ ∗ e + e′ + ∗ .
Before using π to define the functions πX in the
next section, let us note that on delimited strings s±,
π captures what is essential for representing event
structures.

Proposition 4. For structural strings s and s′ ∈
Pow(E)∗, the following four conditions, (a) to (d),
are equivalent

(a) bc(s) = bc(s′)

(b) E(s±) = E(s′±)

(c) bc(s±) = bc(s′±)

(d) π(s±) = π(s′±).

It follows from Proposition 4 that for structural s ∈
Pow(E)∗,

E(s±) = E(bc(s±)) = E(π(s±))

as bc(bc(s±)) = bc(s±) = π(s±).

3 Varying X with retractions πX and
generalizations

Fix some large set E, and let Σ = Pow(E) be the
alphabet from which we form strings. Given a lan-
guage L ⊆ Σ∗ and a function f : Σ∗ → Σ∗ on
strings over Σ, we write f [L] for the f -image of L

f [L] def= {f(s) | s ∈ L}
and f−1L for the inverse f -image of L

f−1L def= {s ∈ Σ∗ | f(s) ∈ L} .

16



Applying these constructions in sequence, note that

f−1f [L] = {s ∈ Σ∗ | (∃s′ ∈ L) f(s) = f(s′)}

which we shall refer to as the f -closure of L , Lf

Lf
def= f−1f [L]

(as L ⊆ Lf = Lf f and the operation preserves
⊆-inclusion: L ⊆ L′ implies Lf ⊆ L′f ). In
this section, we form f -closures for different f ’s
computed by finite-state transducers (assuming E
is finite), including the functions unpad, bc, π, and
ρX (for subsets X of E; recall ρX(α1 · · ·αn) =
(α1 ∩ X) · · · (αn ∩ X)). Putting these together, let
πX : Pow(E)∗ → Pow(X)∗ be the composition
ρX ;π of ρX followed by π

πX(s)
def= π(ρX(s)) = unpad(bc(ρX(s)))

so that for every s ∈ Pow(E)∗ and e ∈ E, e is an
s-interval iff π{e}(s) = e .

To study an event alongside other events, we gen-
eralize the superposition operation & (defined in the
introduction) from strings of the same length to lan-
guages over the alphabet Σ. First, we collect super-
positions s & s′ of strings s and s′ of the same length
from languages L and L′ in the superposition

L & L′ def=
⋃
n≥0
{s & s′ | s ∈ L ∩ Σn and

s′ ∈ L′ ∩ Σn}

(Fernando, 2004). We then form the superposition
of the f -closures of L and L′, and take its f -image
for the f -superposition L &f L′

L &f L′
def= f [Lf & L′f ] .

For example, the π-superposition e &π e′ consists
of the 13 strings in Table 1, which can be divided up
as follows. Put the 9 ways for e and e′ to overlap
(according to Allen) in

A(e© e′) def= (� | e | e′ ) e, e′ (� | e | e′ )
= e, e′ | e, e′ e | e, e′ e′ | · · ·

| e′ e, e′ e′

(where � is the empty string), and the 2 ways for e to
precede e′ in

A(e ≺ e′) def= e e′ | e e′ .

All 13 strings then end up in

e &π e′ = A(e ≺ e′) | A(e© e′) |
A(e′ ≺ e)

in accordance with axiom (A5) in Table 2. Step-
ping from two to any finite number n ≥ 1 of events
e1, . . . , en in E (where Σ = Pow(E)), let us define
languages E(e1 · · · en) by induction on n as follows

E(e1) def= e1
E(e1 · · · en+1) def= E(e1 · · · en) &π en+1

(for n ≥ 1). Recalling that I(s) denotes the set of
s-intervals, we can generalize the equation

I(s) = {e ∈ Es | π{e}(s) = e }

as follows.

Proposition 5. For every s ∈ Pow(E)∗ and every fi-
nite subset {e1, . . . , en} of E, all ei’s are s-intervals
iff π{e1,...,en} maps s to a string in E(e1 · · · en)

{e1, . . . , en} ⊆ I(s) ⇐⇒ π{e1,...,en}(s) ∈
E(e1 · · · en) .

We can bring out the f -closures behind Proposi-
tion 5 by defining a language L ⊆ Σ∗ to be f -closed
if its f -closure Lf is a subset of L. As it is always
the case that L ⊆ f−1f [L],

L is f -closed ⇐⇒ Lf = L .

According to Proposition 5, the set I(e1 · · · en) of
strings s such that each ei is an s-interval (for 1 ≤
i ≤ n) is π{e1,...,en}-closed, and what’s more, its
π{e1,...,en}-image is a subset of (in fact, identical to)
E(e1 · · · en). Observe that a language L is f -closed
iff for all s ∈ Σ∗,

s ∈ L ⇐⇒ f(s) ∈ f [L]

which constitutes a reduction in the cost of check-
ing membership in L insofar as the f -image f [L] of

17



L is a reduction of L (and the computational cost
of f can be ignored). In the case of Proposition 5,
whereas I(e1 · · · en) is infinite, E(e1 · · · en) is finite.
Focusing on the case n = 2, note that the relations
of overlap© and precedence≺ between e and e′ are
π{e,e′}-closed in that

Proposition 6. For every s ∈ Pow(E)∗ such that
e, e′ ∈ E are s-intervals,

e©s e′ ⇐⇒ π{e,e′}(s) ∈ A(e© e′)
e ≺s e′ ⇐⇒ π{e,e′}(s) ∈ A(e ≺ e′) .

Under the appropriate definitions, the 13 Allen rela-
tions between e and e′ are also π{e,e′}-closed. A no-
tion for which πX -closedness is problematic, how-
ever, is the following. We say e ∈ E is left-bounded
in s if s is a non-empty string such that e 6∈ α
where α is the first symbol of s — or equivalently,
pre(e) ∈ Es± . Although the set of strings s in which
e is left-bounded is not π{e}-closed, the equivalences

e 6∈ α ⇐⇒ bc(ρ{e}(s)) ∈ ( e )+( |�)
(where α is the first symbol of the non-empty string
s) and

pre(e) ∈ Es± ⇐⇒ π{pre(e)}(s±) = pre(e)
give two different functions f for which the set is
f -closed — viz., the composition ρ{e}; bc of ρ{e}
followed by bc, and the composition ·±;π{pre(e)}
of the map s 7→ s± followed by π{pre(e)} =
ρ{pre(e)}; bc; unpad. Note

Proposition 7. If f = g;h where g; g = g then
every f -closed language is g-closed.

The cascade of regular relations above is reminis-
cent of Niemi and Koskenniemi (2009), with each
successive function reducing the input. The case
of left-boundedness suggests caution against over-
reducing; the map unpad (separating bc from π) ab-
stracts away temporal span. To see that &bc gives us
more control than &π, let us reformulate the exam-
ple (from (Niemi and Koskenniemi, 2009)) of the 12
months of year 2008 in our framework as

y2008 &bc Jan Feb Mar · · · Dec
= y2008,Jan y2008,Feb y2008,Mar · · ·

y2008,Dec

which ρ{y2008}; bc maps back to y2008 . Given a
function f such that f ; f = f and a subset X of
E, we may call the composition fX

def= ρX ; f of
ρX with f a retraction insofar as fX preserves the
structure &f introduces

fX(s &f s′) = fX(s) &f fX(s′)

(where a string s is, as usual, conflated with the
language {s}). Let us say a language L is X-
determined if L is ρX -closed. By Proposition 7, fX -
closed languages are X-determined. Moreover, the
totality of finite subsets X of E (partially ordered
by⊆) indexes an inverse system of maps πX , the in-
verse limit of which represents every event structure
over E. This fact bolsters the claim of embodiment
made in the title of the present paper, reinforcing (as
it does) the notion that strings are full-blooded se-
mantic entities (familiar already from Linear Tem-
poral Logic, where they can be viewed as Kripke
models.; e.g. (Emerson, 1990)). Is the choice of π
in the inverse system πX sacrosanct? Should we not
perhaps stop short of πX at bcX to capture, for in-
stance, left-bounded events e? Not necessarily. De-
limiting s 7→ s± before applying π{e,pre(e)}, we have

e is left-bounded in s ⇐⇒ π{e,pre(e)}(s±) ∈
pre(e) ( e )∗ e .

But should we take it for granted that s amounts to
s±?

Not if a string s is to embody underspecification,
so that s may represent, relative to some background
set C of strings, the set C[s] of strings in C that w-
contain s

C[s] def= {s′ ∈ C | s′ w s}

(a regular language, provided C is). Recall, for in-
stance, the interest in representing cognitively nat-
ural disjunctions of Allen relations (Freksa, 1992).
Under the present framework, some such disjunc-
tions can be read off strings. For example, overlap
between e and e′ described by the (disembodied) ab-
stract expression “e© e′” is embodied by the box
e, e′ . That is, the set of strings s such that e©s e′

is C[s] for C = Σ∗ and s = e, e′ . What about
the precedence e ≺ e′? This is where pre(e′) and

18



post(e) are helpful. Form C[s] where s is the (non-
delimited) string

e, pre(e′) post(e)

and C is the language {s′± | s′ ∈ Pow(E)∗}.
This language C and many more constraints can be
formulated in finite-state terms familiar from say,
Beesley and Karttunen (1983), as shown in Fer-
nando (2011). Auxiliary constructs such as pre(e)
and post(e) (that may later be dropped) have proved
enormously useful tools advancing finite-state meth-
ods. Rather than claim for these constructs the same
ontological status that events in E may enjoy, how-
ever, we might reconstrue the elements in boxes
not as concrete particulars but rather as temporal
propositions with possibly scattered occurrences (in-
stead of the restriction to intervals characteristic of
event structures). This would allow us to introduce
a negation of e without requiring that the tempo-
ral projection of e or its complement be an interval.
(Moreover, recalling the calendar example of Jan,
Feb, . . ., Dec above, we may well want to form a
string s such that none of Jan, Feb, . . ., Dec are
s-intervals.)

That said, the families E(e1 · · · en) of regular lan-
guages above extend to

S(e) def= pre(e) (� | ) e (� | ) post(e)
and for n ≥ 1,

S(e1 · · · en+1) def= S(e1 · · · en) &π
S(en+1)

with uncertainty injected at the semi-intervals

pre(e) e and e post(e) , so that strings in
S(e1e2) embody disjunctions of Allen relations be-
tween e1 and e2. For example, we can represent tem-
poral inclusion of e1 within e2 by the string

pre(e1), pre(e2) pre(e1) e1, e2

post(e1) post(e1), post(e2)

(of length 5) in S(e1e2), instead of the four strings
from E(e1e2) for e1 R e2, R ∈ {=,s,f,d}. Re-
sisting the step from s to s± leaves room for a form
of underspecification that is natural for strings qua
extensions (denotations), if not indices (Fernando,
2011).

4 Conclusion

The sense of embodiment claimed by the present pa-
per boils down to reducing chronological order to
succession within a string of boxes. But what boxes?
That depends on our interests. Were we interested in
months, then we might portray a year as the string

syr/mo
def= Jan Feb Mar · · · Dec

of length 12. Or were we also interested in days,
perhaps the string

syr/mo,dy
def= Jan,d1 Jan,d2 · · · Dec,d31

of length 365 (for a non-leap year). Observe that for
X = {Jan,Feb,. . .,Dec},

πX(syr/mo,dy) = syr/mo

and that we can picture the syr/mo,dy-intervalhood of
Jan by the equation

π{Jan}(syr/mo,dy) = Jan

in contrast to d1, for which

π{d1}(syr/mo,dy) = ( d1 )11 d1 .

In general, e is an s-interval precisely if π{e} maps s
to e

e ∈ I(s) ⇐⇒ π{e}(s) = e .
Hence, all of e1, e2, . . . , en are s-intervals if s ∈
E◦(e1 · · · en) where

E◦(e1 · · · en) def=
n⋂
i=1

π−1{ei} ei .

That is, we can form the regular languages

E(e1 · · · en) = π{e1,...,en}[E◦(e1 · · · en)]
starring in Proposition 5, without ever mentioning
& or �. More importantly, the regular relations πX
apply with or without the constraint of intervalhood
imposed by RWK event structures. Furthermore, a
bounded level of granularity is supported that we can
adjust through X , as illustrated by the McTaggart
A-series enhancement X± for the Allen relations.
We can glue together any number of granularities
by forming inverse limits, but arguably it is the fi-
nite approximations that we can process (and ma-
nipulate) — not the infinite objects (such as the real
numbers) that arise at the limit.

19



References
James F. Allen. 1983. Maintaining knowledge about

temporal intervals. Communications of the Associa-
tion for Computing Machinery 26 (11):832–843.

Kenneth R. Beesley and Lauri Karttunen. 2003. Finite
State Morphology. CSLI Publications, Stanford.

E. Allen Emerson. 1990. Temporal and modal logic. In
J. van Leeuwen (ed.), Handbook of Theoretical Com-
puter Science, volume B: Formal Methods and Seman-
tics, pp. 995–1072. MIT Press.

Tim Fernando. 2004. A finite-state approach to events
in natural language semantics. Journal of Logic and
Computation 14 (1):79–92.

Tim Fernando. 2011. Regular relations for tempo-
ral propositions. Natural Language Engineering 17
(2):163–184.

Christian Freksa. 1992. Temporal reasoning based on
semi-intervals. Artificial Intelligence 54 (11):199–
227.

Hans Kamp and Uwe Reyle. 1993. From Discourse to
Logic. Kluwer Academic Publishers, Dordrecht.

Lauri Karttunen. 2005. The Yale Shooting Prob-
lem. http://www.stanford.edu/∼laurik/
fsmbook/examples/YaleShooting.html

Uwe Lück. 2006. Continu’ous Time Goes by Russell.
Notre Dame J. Formal Logic 47 (3):397–434.

Inderjeet Mani. 2007. Chronoscopes: a theory of under-
specified temporal representations. In F. Schilder et al.
(eds.) Reasoning about Time and Events, pp. 127–139.
Springer LNAI 4795.

John M.E. McTaggart. 1908. The Unreality of Time.
Mind 17 457–473.

Jyrki Niemi and Kimmo Koskenniemi. 2009. Represent-
ing and Combining Calendar Information by Using
Finite-State Transducers. In J. Piskorski, B. Watson
and A. Yli-Jyr (eds.), Finite-State Methods and Natu-
ral Language Processing: Post-proceedings of the 7th
International Workshop FSMNLP 2008, pp. 122–133.
IOS Press, Amsterdam.

20


