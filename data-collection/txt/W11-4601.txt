




















When FrameNet meets a Controlled Natural Language 

 

 

Guntis Bārzdiņš 

University of Latvia 

Riga, Latvia 

guntis.barzdins@mii.lu.lv 

 

  

 

Abstract 

 

There are two approaches to the natural lan-

guage processing – one is going in width to 

cover at shallow level (parsing, syntax) the 

rich linguistic variety found in the natural lan-

guage, while another is going in depth (seman-

tics, discourse structure) for a monosemous 

subset of natural language referred to as a con-

trolled natural language (CNL). Today we are 

nowhere near to bridging the gap between the 

two approaches. In this presentation I argue 

that despite elusiveness of this goal, FrameNet 

might provide a sufficient insight into the dee-

per semantic layers of the natural language to 

envision a new kind of a rich CNL narrowing 

the gap with the true natural language. A blue-

print for PAO, a procedural CNL of such new 

kind is discussed. 

1 Introduction 

Despite substantial achievements in the computa-

tional linguistics, such as rather reliable POS-

tagging, syntax-tree parsing, word sense disam-

biguation, and statistical translation, in reality 

computational linguistics is still no where near to 

really understanding the natural language. All the 

mentioned techniques fail in certain situations 

and a human verification is always needed to 

achieve true accuracy - this is why accuracy 

measures such as precision and recall are com-

monly used to evaluate the computation linguis-

tics methods. Missing background knowledge is 

often considered as the key reason for shortcom-

ings of the machine-based systems. 

   On the other hand there are controlled natural 

languages (CNL) - their sole purpose is to go 

further in language semantics understanding than 

we are able for unrestricted natural language 

(Wiener, 2010). ACE (Fuchs, 2006), HALO 

project (Friedland, 2004), CYC NL subsystem 

(Lenat, 1995) and various OWL verbalizations 

(Schwitter, 2008) are among the best known 

CNLs. Although these CNLs are rooted in natu-

ral language, due to their narrow coverage li-

mited by the underlying logical representation, 

these languages still largely resemble a pro-

gramming language with strict grammar and mo-

nosemous lexicon. The main advantage of CNLs 

so far is that CNL text can be read and unders-

tood by an untrained person, while writing a cor-

rect CNL text is quite difficult and is similar to 

programming, where certain syntax and semantic 

constraints shall be strictly followed. 

    In this presentation will be discussed a possi-

bility for constructing a more natural controlled 

language based on the ideas of FrameNet and 

situation semantics in general (Frame). The pro-

posed approach incorporates the elements of tra-

ditional logic-based CNLs, but extends them 

with explicit procedural constructs derived from 

FrameNet. Since FrameNet itself covers a large 

portion of natural language constructs (Johans-

son, 2008), such approach bears a promise for a 

substantially more natural controlled language. A 

procedural extension of ACE-OWL (Kaljurand, 

2007) controlled language (named PAO) will be 

used to illustrate the proposed approach (Gruzi-

tis, 2010). 

2 Defining the Background Knowledge 

The key difference of PAO is that it adds support 

for procedural background knowledge through 

FrameNet like constructs besides the more tradi-

tional declarative background knowledge typical-

ly expressed through OWL ontologies. Based on 

the available background knowledge, PAO de-

fines a translation from the controlled language 

input text into a combination of OWL and 

SPARQL statements. 

    In PAO background knowledge consists of 

two parts — declarative OWL ontologies (Fig.1) 

Bolette Sandford Pedersen, Gunta Nešpore and Inguna Skadiņa (Eds.)
NODALIDA 2011 Conference Proceedings, pp. 2–5



and procedural templates (Fig.2). The purpose of 

ontologies is to define the concept hierarchies 

(OWL classes), their relationships (OWL proper-

ties) and restriction axioms (cardinality restric-

tions and others).  

Fig 1: Declarative background knowledge ontologies 
 

In Fig.1 OWL ontologies are visualized using 

UML-style OWLGrEd editor (Barzdins, 2010). 

Alternatively, ontologies may be defined verbal-

ly in CNL itself through ACE-OWL statements 

like: 

 

Every Bottle is a Container. 

Everything that contains something is a  

    Container. 

Everything that is contained by something is a 

   Food. 

If X contains Y then X stores Y. 

 

The procedural background knowledge in Fig.2 

provides a link between the action words (verbs) 

and their ‗meaning‘ in SPARQL. The distinction 

between actions and properties is often neglected 

in CNLs, but in PAO they are strictly separated: 

in PAO action is a non-ontological SPARQL 

procedure, which creates/deletes OWL individu-

als or connects/disconnects them through the 

OWL properties. PAO action, unlike binary 

OWL properties, has no arity restriction — it can 

link any number of arguments as is typical for 

verb valencies in natural language. Syntactically 

a procedural template in PAO is a combination 

of elements inspired by FrameNet (Fillmore, 

2003), Planning Domain Description Language 

(PDDL) (McDermott, 1998) and SPARQL. The 

procedural template itself corresponds to a Fra-

meNet frame, the parameters section corresponds 

to FrameNet frame elements, and the lexical 

units section is a direct copy from FrameNet. 

Inclusion of precondition and effect sections in 

the procedural template is inspired by PDDL and 

has two-fold purpose: this is a compact represen-

tation of SELECT, INSERT, DELETE, MODI-

FY and WHERE patterns of the corresponding 

SPARQL statement and at the same time it pre-

serves compatibility with PDDL for planning 

purposes. Elements of planning will become ne-

cessary in the final steps of 

PAO interpretation de-

scribed later.  

    The ontologies and pro-

cedural templates shown in 

Fig.1 and Fig.2 are specifi-

cally crafted for the PAO 

example in the next sec-

tion; for more realistic ap-

plications it would be ne-

cessary to create a much 

larger collection of ontolo-

gies and procedural templates covering the whole 

lexicon and domain-knowledge of interest. 

 

Procedure: Residence 
:parameters (?resident ?co-resident ?location) 
  :precondition () 
  :effect (and(stores ?location ?resident) 
           (stores ?location ?co_resident)) 
  :lexicalUnits (camp, inhabit, live, lodge, stay) 
 
Procedure: Removing 
  :parameters (?agent ?source ?theme) 
  :precondition (stores ?source ?theme) 
  :effect (and(stores ?agent ?theme) 
           (not(stores ?source ?theme))) 
  :lexicalUnits (confiscate, remove, take) 
 
Procedure: Bringing 
  :parameters (?agent ?goal ?theme) 
  :precondition (and(stores ?agent ?theme) 
            (stores ?a ?agent) (not(= ?a ?goal))) 
:effect (and(stores ?goal ?theme) 
          (stores ?goal ?agent) 

           (not(stores ?agent ?theme)) 
           (not(stores ?a ?agent))) 

:lexicalUnits (bring, carry, convey, drive) 
 

Fig 2: Procedural templates of background knowledge 

 

3 Example of PAO Text Processing 

In PAO text has to be written in simple present 

tense to avoid complex event sequencing — the 

described events are assumed to be atomic and to 

occur sequentially as they are mentioned in the 

text. The following PAO input text will be used 

to illustrate the PAO processing stages: 

3

When FrameNet meets a Controlled Natural Language

3



 

“LittleRedRidingHood lives in a farmhouse with 

her mother. She takes a basket from the farm-

house and carries it to her granny.” 

 

The initial stage of PAO processing is anaphora 

resolution and paraphrasing of the input text into 

the sequence of elementary statements as shown 

in Fig.3. 

 

A. Obj4 is a LittleRedRidingHood. 
B. Obj4 lives in Obj8 with Obj11. 
C. Obj8 is a farmhouse. 
D. Obj4 hasMother Obj11. 
E. Obj4 takes Obj15 from Obj8. 
F. Obj15 is a food-basket. 
G. Obj4 carries Obj15 to Obj25. 
H. Obj4 hasGranny Obj25. 
 

Fig. 3: Paraphrased PAO input text 

 

Note that in the generated paraphrase in Fig.3 the 

statements A, C, D, F, and H are actually regular 

ACE-OWL factual statements about individuals 

and thus translate into regular OWL/RDF triples:  

 

A:(<obj4> <rdf:type> <LittleRedRidingHood>) 
C: (<obj8> <rdf:type> <Farmhouse>) 
D: (<obj4> <hasMother> <obj11>) 
      (<obj11> <rdf:type> <Mother>)  
F: (<obj15> <rdf:type> <Basket>)   
H: (<obj4> <hasGranny> <obj25>) 
      (<obj25> <rdf:type> <Granny>) 
 

Meanwhile the procedural statements B, E, and 

G do not belong to ACE-OWL and require a 

procedural template from the background know-

ledge in Fig.2 for their translation. The transla-

tion includes mapping of syntactic roles into pro-

cedural template parameters and converting the 

precondition and effect notation into equivalent 

SPARQL statements. PDDL-like planning stage 

is needed as well, because in the input text some 

obvious intermediate steps of action might often 

be omitted and they need to be filled-in by the 

planning to satisfy the procedural template pre-

conditions — in our example for Little Red Rid-

ing Hood to be able to take a basket from the 

farmhouse, the basket had to be at the farmhouse 

in the first place.  

    The last analysis stage is to generate the RDF 

database content trace resulting from the execu-

tion of the above OWL/RDF and SPARQL trans-

lations — Fig.4 shows the resulting stepwise 

RDF database content trace.  

 

 
 

Fig. 4: RDF content trace and its spatial visualization 

 

The generated RDF database content trace is the 

final result of PAO text analysis — this trace is 

the actual discourse conveyed by the PAO input 

text. In the right column of Fig.4 the discourse is 

optionally visualized also as a sequence of 

graphic scenes — similarly to text-to-scene ani-

mation approach described in (Johansson, 2005). 

These visualizations can be generated automati-

cally from the graphic icons provided for OWL 

classes in the background knowledge (Fig.1 ac-

tually includes the necessary icons); OWL prop-

erties are visualized as labeled arrows or alterna-

tively as graphic inclusion for spatial properties 

like ―stores‖. These visual scenes highlight the 

similarity of PAO analysis result to the dynamic 

scene likely imagined by a human reader incre-

mentally reading the same input text. 

4 Query Answering in PAO 

The constructed RDF database trace in Fig.4 can 

further be used to answer queries about the input 

text, for example: 

 

1. Who delivered a basket to a granny? 

2. Did LittleRedRidingHood visit her granny? 

4

Guntis Bārzdiņš

4



3. Where initially was the basket? 

4. When did the granny got the basket? 

 

These queries can be answered through translat-

ing them into the appropriate SPARQL queries 

through techniques similar to those used to trans-

late PAO paraphrase in Fig.3 earlier. The an-

swers produced by such SPARQL queries on the 

RDF trace in Fig.4 would be: 

 

1. ?x = obj4 
2. yes 
3. ?x = obj8 
4. ?n = H 
 

These very technical SPARQL answers can af-

terwards be rendered into more verbose answers: 

 

1. LittleRedRidingHood [delivered a basket to  

    granny]. 

2. Yes [, LittleRedRidingHood visited granny]. 

3. [Basket initially was] in the farmhouse. 

4. In step H [, when LittleRedRidingHood  

    brought the basket to granny]. 

 

Although we have not described the question 

answering process here in detail, these examples 

provide an overview of PAO potential for factual 

and temporal question answering over narrative 

input texts. 

5 Conclusion 

The described PAO controlled language is only a 

rather simple attempt to exploit the rich declara-

tive and procedural background knowledge in a 

CNL to make it more natural through the inclu-

sion of FrameNet like procedural semantics. The 

added expressivity allows for rich query answer-

ing about the provided input text. We are quite 

pleased to to been able to include ACE-OWL as 

a proper subset of PAO thus achieving a com-

plementary integration of procedural and dec-

larative approaches.  

    An obvious limitation of the presented PAO 

language is its treatment of time only as a linear 

sequence of events mentioned in the input text. A 

richer time conceptualization would be generally 

needed, including hypothetical, parallel and ne-

gated events to handle texts like ―Mother told 

LittleRedRidingHood to go directly to the gran-

ny’s house and not to engage in conversations 

with strangers‖. 

The briefly mentioned optional visualization of 

PAO discourse is a promising area for further 

exploration — inversion of the mentioned visua-

lization technique could potentially lead to a vis-

ual data acquisition in the form of CNL grounded 

in the same ontological and procedural back-

ground knowledge. 

References  

Lenat, D.1995. Cyc: A Large-Scale Investment in 

Knowledge Infrastructure. Communications of the 

ACM, 38:11, pp. 33--38 

McDermott D. 1998. PDDL — The Planning Domain 

Definition Language. Technical report, Yale Center 

for Computational Vision and Control, 

http://www.cs.yale.edu/homes/dvm/ 

Fillmore, C.J., Johnson, C.R., Petruck, M.R.L. 2003. 

Background to FrameNet. International Journal of 

Lexicography, 16, pp. 235--250 

Friedland, N., and Allen, P. 2004. Project halo: To-

wards a digital aristotle. In AI Magazine. 

Johansson, R., Berglund, A., Danielsson, M., Nugues, 

P. 2005. Automatic text-to-scene conversion in the 

traffic accident domain. In: 19th International Joint 

Conference on Artificial Intelligence, pp. 1073--

1078 

Fuchs, N.E., Kaljurand, K., Schneider, G. 2006. 

Atempto Controlled English Meets the Challenges 

of Knowledge Representation, Reasoning, Intero-

perability and User Interfaces. In: 19th Interna-

tional FLAIRS Conference (2006) 

Kaljurand, K., Fuchs, N.E. 2007. Verbalizing OWL in 

Attempto Controlled English. In: 3rd International 

OWLED Workshop 

Schwitter, R., Kaljurand, K., Cregan, A., Dolbear, C., 

Hart, G. 2008. A Comparison of three Controlled 

Natural Languages for OWL 1.1. In: 4th Interna-

tional OWLED Workshop 

Johansson, R., Nugues, P. 2008. Comparing depen-

dency and constituent syntax for frame-semantic 

analysis. In: 6th International LREC Conference 

Wyner A. et.al. 2010. On Controlled Natural Lan-

guages: Properties and Prospects. 

LNCS/LNAI5972, Springer, Heidelberg, 281-289 

Gruzitis N. and Barzdins G. 2010: Polysemy in Con-

trolled Natural Language Texts. In: CNL 2009 

Workshop, LNCS/LNAI 5972, Springer, Heidel-

berg, 2010, pp. 102–120 

Barzdins J., et.al. 2010. OWLGrEd: a UML Style 

Graphical Editor for OWL // Proceedings of 

ORES-2010, CEUR Workshop Proceedings, Vol-

596 

 

5

When FrameNet meets a Controlled Natural Language

ISSN 1736-6305 Vol. 11
http://hdl.handle.net/10062/16955


