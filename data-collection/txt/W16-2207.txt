



















































Neural Network-based Word Alignment through Score Aggregation


Proceedings of the First Conference on Machine Translation, Volume 1: Research Papers, pages 66–73,
Berlin, Germany, August 11-12, 2016. c©2016 Association for Computational Linguistics

Neural Network-based Word Alignment through Score Aggregation

Joël Legrand1,2,† and Michael Auli3 and Ronan Collobert3

1 Idiap Research Institute, Martigny, Switzerland
2 Ecole Polytechnique Fédérale de Lausanne (EPFL), Lausanne, Switzerland

3 Facebook AI Research, Menlo Park

Abstract

We present a simple neural network for
word alignment that builds source and tar-
get word window representations to com-
pute alignment scores for sentence pairs.
To enable unsupervised training, we use
an aggregation operation that summarizes
the alignment scores for a given target
word. A soft-margin objective increases
scores for true target words while de-
creasing scores for target words that are
not present. Compared to the popular
Fast Align model, our approach improves
alignment accuracy by 7 AER on English-
Czech, by 6 AER on Romanian-English
and by 1.7 AER on English-French align-
ment.

1 Introduction

Word alignment is the task of finding the cor-
respondence between source and target words in
a pair of sentences that are translations of each
other. Generative models for this task (Brown
et al., 1990; Och and Ney, 2003; Vogel et al., 1996)
still form the basis for many machine translation
systems (Koehn et al., 2003; Chiang, 2007).

Recent neural approaches include Yang et al.
(2013) who introduce a feed-forward network-
based model trained on alignments that were gen-
erated by a traditional generative model. This
treats potentially erroneous alignments as super-
vision. Tamura et al. (2014) sidesteps this issue by
negative sampling to train a recurrent-neural net-
work on unlabeled data. They optimize a global
loss that requires an expensive beam search to ap-
proximate the sum over all alignments.

†This work was conducted while the first author did an
internship at Facebook AI Research.

In this paper we introduce a word alignment
model that is simpler in structure and which re-
lies on a more tractable training procedure. Our
model is a neural network that extracts context in-
formation from source and target sentences and
then computes simple dot products to estimate
alignment links. Our objective function is word-
factored and does not require the expensive com-
putation associated with global loss functions. The
model can be easily trained on unlabeled data via a
novel but simple aggregation operation which has
been successfully applied in the computer vision
literature (Pinheiro and Collobert, 2015). The ag-
gregation combines the scores of all source words
for a particular target word and promotes source
words which are likely to be aligned with a given
target word according to the knowledge the model
has learned so far. At test time, the aggregation op-
eration is removed and source words are aligned to
target words by choosing the highest scoring can-
didates (§2, §3).

We evaluate several forms for our aggregation
operation such as computing the sum, max and
LogSumExp over alignment scores. Results on
English-French, English-Romanian, and Czech-
English alignment show that our model signif-
icantly outperforms Fast Align, a popular log-
linear reparameterization of IBM Model 2 (Dyer
et al., 2013; §4).

2 Aggregation Model

In the following, we consider a target-source sen-
tence pair (e, f), with e = (e1, . . . , e|e|) and
f = (f1, . . . , f|f |). Words are represented by
fj and ei, which are indices in source and target
dictionaries. For simplicity, we assume here that
word indices are the only feature fed to our archi-
tecture. Given a source word fj and a target word
ei, our architecture embeds a window (of size d

f
win

66



Target:

deemb

e1 e2

...

. . . e|e|

...

nete

demb

Dot
Product

Source:

f1

f2

..
....

f |f |

netf

dembd
f
emb

..
. s(i,j)

|e|

|f |
Aggr

|e|

Figure 1: Illustration of the model. The two networks nete and netf compute representations for source
and target words. The score of an alignment link is a simple dot product between those source and target
word representations. The aggregation operation summarizes the alignment scores for each target word.

and dewin, respectively) centered around each of
these words into a demb-dimensional vector space.
The embedding operation is performed with two
distinct neural networks:

nete([e]
dewin
i ) ∈ Rdemb

and
netf ([f ]

dfwin
j ) ∈ Rdemb ,

where we denote the window operator as

[x]di = (xi−d/2, . . . , xi+d/2) .

The matching score between a source word fj and
a target word ei is then given by the dot-product:

s(i, j) = nete([e]
dewin
i ) · netf ([f ]

dfwin
j ) . (1)

If ei is aligned to fai , the score s(i, ai) should be
high, while scores s(i, j) ∀j 6= ai should be low.

2.1 Unsupervised Training
In this paper, we consider an unsupervised setup
where the alignment is not known at training time.
We thus cannot minimize or maximize matching
scores (1) in a direct manner. Instead, given a tar-
get word ei we consider the aggregated matching
scores over the source sentence:

saggr(i, f) =
|f |

Aggr
j=1

s(i, j) , (2)

where Aggr is an aggregation operator (§2.2).
Consider a matching (positive) sentence pair
(e+, f) and a negative sentence pair (e−, f).
Given a word at index i+ in the positive target
sentence, we want to maximize the aggregated
score saggr(i+, f) (1 ≤ i+ ≤ |e+|) because we
know it should be aligned to at least one source
word.1 Conversely, given a word at index i− in
the negative target sentence, we want to minimize
saggr(i

−, f) (1 ≤ i− ≤ |e−|) because it is unlikely
that the source sentence can explain the negative
target word. Following these principles, we con-
sider a simple soft-margin loss:

L(e+, e−, f) =
|e+|∑

i+=1

log(1 + e−saggr(i
+,f))

+

|e−|∑

i−=1

log(1 + e+saggr(i
−,f)) .

(3)

Training is achieved by minimizing (3) and by
sampling over triplets (e+, e−, f) from the train-
ing data.

1We discuss how we handle unaligned target words in
§2.3. Also, depending on the decoding algorithm the model
can be used to predict many-to-many alignments.

67



2.2 Choosing the Aggregation
The aggregation operation (2) is only present dur-
ing training and acts as a filter which aims to ex-
plain a given target word ei by one or more source
words. If we had the word alignments, then we
would sum over the source words fj aligned with
ei. However, in our setup alignments are not avail-
able at training time, so we must rely on what the
model has learned so far to filter the source words.
We consider the following strategies:

• Sum: ignore the knowledge learned so far,
and assign the same weight to all source
words fj to explain ei.2 In this case, we have

saggr(i, f) =

|f|∑

j=1

s(i, j) .

• Max: encourage the best aligned source
word fj , according to what the model has
learned so far. In this case, the aggregation
is written as:

saggr(i, f) =
|f|

max
j=1

s(i, j) .

• LSE: give similar weights to source words
with similar scores. This can be achieved
with a LogSumExp aggregation operation
(also called LogAdd), and is defined as:

saggr(i, f) =
1

r
log



|f|∑

j=1

er s(i, j)


 , (4)

where r is a positive scalar (to be chosen)
controlling the smoothness of the aggrega-
tion. For small r, the aggregation is equiva-
lent to a sum, and for large r, the aggregation
acts as a max.

2.3 Decoding
At test time, we align each target word ei with
the source word fj for which the matching score
s(i, j) in (1) is highest.3 However, not every target
word is aligned, so we consider only alignments
with a matching score above a threshold:

s(i, j) > µ−(ei) + ασ−(ei) , (5)
2This can be seen by observing that the gradients for all

source words are the same.
3This may result in a source word being aligned to multi-

ple target words.

where α is a tunable hyper-parameter, and

µ−(ei) = E
{ẽk=ei ∈ ẽ, f̃j− ∈ f̃−}

[
s(k, j−)

]

is the expectation over all training sentences ẽ con-
taining the word ei, and all words f̃−j belonging to
a corresponding negative source sentence f̃−, and
σ−(ei) is the respective variance.

3 Neural Network Architecture

Our model consists of two convolutional neural
networks nete and netf as shown in (1). Both of
them take the same form, so we detail only the tar-
get architecture.

3.1 Word embeddings

The discrete features [e]d
e
win

i are embedded into
a deemb-dimensional vector space via a lookup-
table operation as first introduced in Bengio et al.
(2000):

xei = LTW e([e]
dewin
i )

= (LTW e(ei−dewin/2), . . . , LTW e(ei+dewin/2)) ,

where the lookup-table operation applied at index
k returns the kth column of the parameter matrix
W e:

LTW e(k) =W e•, k .

The matrix W e is of size |Ve| × deemb, where Ve
is the target vocabulary, and deemb is the word em-
bedding size for the target words.

3.2 Convolutional layers
The word embeddings output by the lookup-table
are concatenated and fed through two successive
1-D convolution layers. The convolutions use a
step size of one and extract context features for
each word. The kernel sizes ke1 and k

e
2 determine

the size of the window dewin = k
e
1 + k

e
2 − 1 over

which features will be extracted by nete. In order
to obtain windows centered around each word, we
add (ke1+k

e
2)/2−1 padding words at the beginning

and at the end of each sentence.
The first layer cnne applies the linear transfor-

mationM e,1 exactly ke2 times to consecutive spans
of size ke1 to the d

e
win words in a given window:

cnne(xei ) =M
e,1




LTW e([e]
ke1
i−a)

...
LTW e([e]

ke1
i+a)


 ,

68



where a = bk
e
2
2 c, M e,1 ∈ Rd

e
hu×(deemb ke1) is a

matrix of parameters, and dehu is the number of
hidden units (hu). The outputs of the first layer
cnne are concatenated to form a matrix of size
ke2 d

e
hu which is fed to the second layer:

nete(xei ) =M
e,2 tanh(cnne(xei )) (6)

where M e,2 ∈ Rdemb×(ke2 dehu) is a matrix of pa-
rameters, and the tanh(·) operation is applied el-
ement wise. The parameters W e, M e,1 and M e,2

are trained by stochastic gradient descent to mini-
mize the loss (3) introduced in §2.1.

3.3 Additional Features
In addition to the raw word indices, we consider
two additional discrete features which were han-
dled in the same way as word features by introduc-
ing an additional lookup-table for each of them.
The output of all lookup-tables was concatenated,
and fed to the two-layer neural network architec-
ture (6).

Distance to the diagonal. This feature can be
computed for a target word ei and a source word
fj :

diag(i, j) =

∣∣∣∣
i

|e| −
j

|f |

∣∣∣∣ ,

This feature allows the model to learn that aligned
sentence pairs use roughly the same word order
and that alignment links remain close to the di-
agonal. We use this feature only for the source
network because it encodes relative position infor-
mation which only needs to be encoded once. If
we would use absolute position instead, then we
would need to encode this information both on the
source and the target side.

Part-of-speech Words pairs that are good transla-
tions of each other are likely to carry the same part
of speech in both languages (Melamed, 1995). We
therefore add the part-of-speech information to the
model.

Char n-gram. We consider unigram character
position features. Let K be the maximum size for
a word in a dictionary. We denote the dictionary
of characters as C. Every character is represented
by its index c (with 1 < c < |C|). We associate
every character c at position k with a vector at po-
sition ((k − 1) ∗ |C|) + c in a lookup-table. For a
given word, we extract all unigram character po-
sition embeddings, and average them to obtain a
character embedding for a given word.

4 Experiments

4.1 Datasets
We use the English-French Hansards corpus as
distributed by the NAACL 2003 shared task (Mi-
halcea and Pedersen, 2003). This dataset con-
tains 1.1M sentence pairs and the test and vali-
dation sets contain 447 and 37 examples respec-
tively. We also evaluate on the Romanian-English
dataset of the ACL 2005 shared task (Martin et al.,
2005) comprising 48K sentence pairs for training,
248 for testing and 17 for validation. For English-
Czech experiments, we use the WMT news com-
mentary corpus for training (150K sentence pairs)
and a set of 515 sentences for testing (Bojar and
Prokopová, 2006).

4.2 Evaluation
Our models are evaluated in terms of precision, re-
call, F-measure and Alignment Error Rate (AER).
We train models in each language direction and
then symmetrize the resulting alignments using
either the intersection or the grow-diag-final-and
heuristic (Och and Ney, 2003; Koehn et al., 2003).
We validated the choice of symmetrization heuris-
tic on each language pair and chose the best one
for each model considering the two aforemen-
tioned types as well as grow-diag-final and grow-
diag.

Additionally, we train phrase-based machine
translation models with our alignments using the
popular Moses toolkit (Koehn et al., 2007). For
English-French, we train on the news commentary
corpus v10, for English-Czech we used news com-
mentary corpus v11, and for Romanian-English
we used the Europarl corpus v8. We tuned our
models on the WMT2015 test set for English-
Czech as well as for Romanian-English; for
English-French we tuned on the WMT2014 test
set. Final results are reported on the WMT2016
test set for English-Czech as well as Romanian-
English, and for English-French we report results
on the WMT2015 test set (as there is no track for
this language-pair in 2016).

We compare our model to Fast Align, a popu-
lar log-linear reparameterization of IBM Model 2
(Dyer et al., 2013).

4.3 Setup
The kernel sizes of the target network nete(·) are
set to ke1 = k

e
2 = 3 for all language pairs. The

kernel sizes of the source network netf (·) are set

69



to kf1 = k
f
2 = 3 for Romanian-English as well as

English-Czech; and for English-French we used
kf1 = k

f
2 = 1.

The number of hidden units are dehu = d
f
hu =

256 and demb is set to 256, The source Vf and tar-
get Ve dictionaries consist of the 30K most com-
mon words for English, French and Romanian,
and 80K for Czech. All other words are mapped to
a unique UNK token. The word embedding sizes
deemb and d

f
emb, as well as the char-n-gram embed-

ding size is 128. For LSE, we set r = 1 in (4).

We initialize the word embeddings with a sim-
ple PCA computed over the matrix of word co-
occurrence counts (Lebret and Collobert, 2014).
The co-occurrence counts were computed over the
common crawl corpus provided by WMT16. For
part of speech tagging we used the Stanford parser
on English-French data, and MarMoT (Mueller
et al., 2013) for Romanian-English as well as
English-Czech.

We trained 4 systems for the ensembles, each
using a different random seed to vary the weight
initialization as well as the shuffling of the training
set. We averaged the alignment scores predicted
by each system before decoding. The alignment
threshold variables µ−(ei) and σ−(ei) for decod-
ing (§2.3) were estimated on 1000 random training
sentences, using 100 negative sentences for each
of them. Words not appearing in this training sub-
set were assigned µ−(ei) = σ−(ei) = 0.

For systems where dewin > 1 and d
f
win > 1, we

saw a tendency of aligning frequent words regard-
less on if they appeared in the center of the context
window or not. For instance, a common mistake
would be to align ”the cat sat”, with ”PADDING
le chat”. To prevent such behavior, we occasion-
ally replaced the center word in a target window
by a random word during training. We do this for
every second training example on average and we
tuned this rate on the validation set.

4.4 Results

We first explore different choices for the aggre-
gation operator (§2.2), followed by an ablation to
investigate the impact of the different additional
features (§3.3). Next we compare to the Fast
Align baseline. Finally, we evaluate our align-
ments within a full translation system for all lan-
guage pairs.

4.4.1 Aggregation operation

Table 1 shows that the LogSumExp (LSE) aggre-
gator performs best on all datasets for every direc-
tion as well as in the symmetrized setting using the
grow-diag-final heuristic. All results are based on
a single model trained with the ’distance to the di-
agonal’ feature detailed above.4 We therefore use
LSE for the remaining experiments.

Max Sum LSE
En-Fr 18.1 23.0 15.1
Fr-En 20.7 26.9 15.8
symmetrized 14.8 24.1 12.8
Ro-En 42.2 42.0 37.6
En-Ro 40.4 40.2 35.7
symmetrized 36.4 35.6 32.2
En-Cz 27.9 35.6 24.5
Cz-En 26.5 33.6 24.5
symmetrized 21.8 32.7 21.0

Table 1: Alignment error rates for different aggre-
gation operations in each language direction and
with grow-diag-final-and symmetrization.

4.4.2 Additional features

Table 2 shows the effect of the different input fea-
tures. Both POS and the distance to the diago-
nal feature significantly improve accuracy. Po-
sition information via the ’distance to the diago-
nal’ feature is helpful for all language pairs, and
POS information is more effective for Romanian-
English and English-Czech which involve mor-
phologically rich languages. We use the POS and
’distance to the diagonal feature’ for the remaining
experiments.

4.4.3 Comparison with the baseline

In the following results we label our model as
NNSA (Neural network score aggregation). On
English-French data (Table 3) our model outper-
forms the baseline (Dyer et al., 2013) in each indi-
vidual language direction as well as for the sym-
metrized setting. With an ensemble of four mod-
els, we outperform the baseline by 1.7 AER (from
11.4 to 9.7), and with an individual model we out-
perform it by 1.2 AER (from 11.4 to 10.2). Note
that the choice of symmetrization heuristic greatly

70



English-French Romanian-English English-Czech
En-Fr Fr-En sym Ro-En En-Ro sym En-Cz Cz-En sym

words 22.2 24.2 15.7 47.0 45.5 40.3 36.9 36.3 29.5
+ POS 20.9 23.9 15.3 45.3 42.9 36.9 35.6 33.7 28.2
+ diag 15.1 15.8 12.8 37.6 35.7 32.2 24.8 24.5 21.0
+ POS + diag 13.2 12.1 10.2 33.1 32.2 27.8 24.6 22.9 19.9

Table 2: Alignment error rates using different input features in each language direction and with grow-
diag-final-and symmetrization.

P R F1 AER
English-French

Baseline 49.6 89.8 63.9 16.7
NNSA 64.7 80.7 71.8 13.2
+ ensemble 61.5 85.8 71.6 11.6

French-English
Baseline 52.9 88.4 66.2 16.2
NNSA 61.7 86.3 72.0 12.1
+ ensemble 62.6 86.7 72.7 11.6

symmetrized
Baseline (inter) 69.6 84.0 76.1 11.4
NNSA (gdfa) 60.4 88.5 71.8 10.2
+ ensemble 59.3 89.9 71.4 9.7

Table 3: English-French results on the test set in
terms of precision (P), recall (R), F-score (F1) and
AER; ensemble denotes a combination of four sys-
tems and we use the intersection (inter) and grow-
diag-final-and symmetrization (gdfa) heuristics.

affects accuracy, both for the baseline and NNSA.

On Romanian-English (Table 4) our model out-
performs the baseline in both directions as well.
Adding ensembles further improves accuracy and
leads to a significant improvement of 6 AER over
the best symmetrized baseline result (from 32 to
26).

On English-Czech (Table 5) our model outper-
forms the baseline in both directions as well. We
added the character feature to better deal with the
morphologically rich nature of Czech and the fea-
ture reduced AER by 2.1 in the symmetrized set-
ting. An ensemble improved accuracy further and
led to a 7 AER improvement over the best sym-
metrized baseline result (from 22.8 to 15.8).

4We use kernel sizes ke1 = ke2 = 3 and k
f
1 = k

f
2 = 1 for

all language pairs in this experiment.

P R F1 AER
Romanian-English

Baseline 70.0 61.0 65.2 34.8
NNSA 75.1 65.2 69.8 30.2
+ ensemble 75.8 62.8 68.7 31.3

English-Romanian
Baseline 71.3 60.8 65.6 34.4
NNSA 78.1 61.7 69.0 31.1
+ ensemble 78.4 63.2 70.0 30.0

symmetrized
Baseline (gdfa) 69.5 66.5 68.0 32.0
NNSA (gdfa) 74.1 71.8 73.0 27.0
+ ensemble 73.0 74.5 73.7 26.0

Table 4: Romanian-English results (cf. Table 3).

4.4.4 BLEU evaluation
Table 6 presents the BLEU evaluation of our align-
ments. For each language-pair, we select the best
alignment model reported in Tables 3, 4 and 5, and
align the training data. We use the alignments to
run the standard phrase-based training pipeline us-
ing those alignments. Our BLEU results show the
average BLEU score and standard deviation for
five runs of minimum error rate training (MERT;
Och 2003).

Our alignments achieve slightly better results
for Romanian-English as well as English-Czech
while performing on par with Fast Align on
English-French translation.

5 Analysis

In this section, we analyze the word representa-
tions learned by our model. We first focus on the
source representations: given a source window,
we obtain its distributional representation and then
compute the Euclidean distance to all other source
windows in the training corpus. Table 7 shows
the nearest windows for two source windows; the
closest windows tend to have similar meanings.

71



P R F1 AER
English-Czech

Baseline 68.4 73.3 70.7 26.6
NNSA 72.0 74.3 73.1 24.6
+ char n-gram 73.8 75.4 74.6 23.2
+ ensemble 78.8 77.2 78.0 20.0

Czech-English
Baseline 68.6 74.0 71.2 25.7
NNSA 74.1 74.0 74.0 22.9
+ char n-gram 78.1 74.1 76.1 21.4
+ ensemble 79.1 77.7 78.4 18.7

symmetrized
Baseline (inter) 88.1 66.6 76.0 22.8
NNSA (gdfa) 75.7 80.3 76.3 19.9
+ char n-gram 76.9 81.3 79.1 17.8
+ ensemble 78.9 83.2 81.0 15.8

Table 5: Czech-English results (cf. Table 3).

Baseline NNSA
French-English 25.4± 0.1 25.5± 0.1
Romanian-English 21.3± 0.1 21.6± 0.1
Czech-English 17.2± 0.1 17.6± 0.1

Table 6: Average BLEU score and standard devia-
tion for five runs of MERT.

We then analyze the relation between source
and target representations: given a source win-
dow we compute the alignment scores for all tar-
get sentences in the training corpus. Table 8 shows
for two source windows which target words have
the largest alignment scores. The example ”in
working together” is particularly interesting since
the aligned target words collabore, coordonés,
and concertés mean collaborate, coordinated, and
concerted, which all carry the same meaning as
the source window phrase.

6 Conclusion

In this paper, we present a simple neural network
alignment model trained on unlabeled data. Our
model computes alignment scores as dot prod-
ucts between representations of windows around
source and target words. We apply an aggrega-
tion operation borrowed from the computer vi-
sion literature to make unsupervised training pos-
sible. The aggregation operation acts as a filter
over alignment scores and allows us to determine
which source words explain a given target word.

the voting process in working together
the voting area for working together

the voting power with working together
the voting rules from working together

the voting system about working together
the voting patterns by working together
the voting ballots and working together

their voting patterns while working together

Table 7: Analysis of source window represen-
tations. Each column shows a window over the
source sentence followed by several close neigh-
bors in terms of Euclidean distance (among the 30
nearest).

the voting process in working together
vote travaillé

voteraient travailleront
votent collaboration
voter travaillant
votant oeuvrant
scrutin concerts

suffrage coordonés
procédure concert
investiture collabore
élections coopération

Table 8: Analysis of source and target represen-
tations. Each column shows a source window and
the target words which are most aligned according
to our model.

We improve over Fast Align, a popular log-
linear reparameterization of IBM Model 2 (Dyer
et al., 2013) by up to 6 AER on Romanian-
English, 7 AER on English-Czech data and 1.7
AER on English-French alignment. Furthermore,
we evaluated our model as part of a full machine
translation pipeline and showed that our align-
ments are better or on par compared to Fast Align
in terms of BLEU.

References

Yoshua Bengio, Réjean Ducharme, and Pascal
Vincent. A Neural Probabilistic Language
Model. In NIPS, 2000.

Ondřej Bojar and Magdalena Prokopová. Czech-
English Word Alignment. In Proceedings of
the Fifth International Conference on Language
Resources and Evaluation (LREC 2006), 2006.

Peter F. Brown, John Cocke, Stephen Della

72



Pietra, Vincent J. Della Pietra, Frederick Je-
linek, John D. Lafferty, Robert L. Mercer, and
Paul S. Roossin. A Statistical Approach to Ma-
chine Translation. Computational Linguistics,
1990.

David Chiang. Hierarchical Phrase-Based Trans-
lation. Computational Linguistics, 2007.

Chris Dyer, Victor Chahuneau, and Noah A.
Smith. A simple, fast, and effective reparame-
terization of IBM Model 2. In Proc. of NAACL,
2013.

Philipp Koehn, Franz J. Och, and Daniel Marcu.
Statistical Phrase-based Translation. In Proc. of
NAACL, 2003.

Philipp Koehn, Hieu Hoang, Alexandra Birch,
Chris Callison-Burch, Marcello Federico,
Nicola Bertoldi, Brooke Cowan, Wade Shen,
Christine Moran, Richard Zens, Chris Dyer,
Ondřej Bojar, Alexandra Constantin, and Evan
Herbst. Moses: Open source toolkit for statisti-
cal machine translation. In Proceedings of the
45th Annual Meeting of the ACL on Interactive
Poster and Demonstration Sessions, ACL ’07,
2007.

Rémi Lebret and Ronan Collobert. Word Em-
beddings through Hellinger PCA. In Proc. of
EACL, 2014.

Joel Martin, Rada Mihalcea, and Ted Pedersen.
Word Alignment For Languages With Scarce
Resources. In Proc. of WPT, 2005.

Dan I. Melamed. Automatic evaluation and uni-
form filter cascades for inducing n-best transla-
tion lexicons. In Third Workshop on Very Large
Corpora, 1995.

Rada Mihalcea and Ted Pedersen. An Evaluation
Exercise for Word Alignment. In Proc. of WPT,
2003.

Thomas Mueller, Helmut Schmid, and Hinrich
Schütze. Efficient higher-order CRFs for mor-
phological tagging. In Proceedings of the 2013
Conference on Empirical Methods in Natural
Language Processing, 2013.

Franz J. Och and Hermann Ney. A Systematic
Comparison of Various Statistical Alignment
Models. Computational Linguistics, 2003.

Franz Josef Och. Minimum error rate training in
statistical machine translation. In Proc of ACL,
2003.

Pedro O. Pinheiro and Ronan Collobert. From
Image-level to Pixel-level Labeling with Con-
volutional Networks. In Proc. of CVPR, 2015.

Akihiro Tamura, Taro Watanabe, and Eiichiro
Sumita. Recurrent Neural Networks for Word
Alignment Model. In Proc. of ACL, 2014.

Stephan Vogel, Hermann Ney, and Christoph Till-
mann. HMM-Based Word Alignment in Statis-
tical Translation. In Proc. of COLING, 1996.

Nan Yang, Shujie Liu, Mu Li, Ming Zhou, and
Nenghai Yu. Word Alignment Modeling with
Context Dependent Deep Neural Network. In
Proc. of ACL, 2013.

73


