



















































Why Didn’t You Listen to Me? Comparing User Control of Human-in-the-Loop Topic Models


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 6323–6330
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

6323

Why Didn’t You Listen to Me? Comparing User Control of
Human-in-the-Loop Topic Models

Varun Kumar ∗
Amazon Alexa

Cambridge, MA
varunk@cs.umd.edu

Alison Smith-Renner
University of Maryland

College Park, MD
amsmit@cs.umd.edu

Leah Findlater
University of Washington

Seattle, Washington
leahkf@uw.edu

Kevin Seppi
Brigham Young University

Provo, UT
kseppi@gmail.com

Jordan Boyd-Graber
University of Maryland

College Park, MD
jordanbg@umiacs.edu

Abstract

To address the lack of comparative evalua-
tion of Human-in-the-Loop Topic Modeling
(HLTM) systems, we implement and evaluate
three contrasting HLTM modeling approaches
using simulation experiments. These ap-
proaches extend previously proposed frame-
works, including constraints and informed
prior-based methods. Users should have a
sense of control in HLTM systems, so we pro-
pose a control metric to measure whether re-
finement operations’ results match users’ ex-
pectations. Informed prior-based methods pro-
vide better control than constraints, but con-
straints yield higher quality topics.

1 Human-in-the-Loop Topic Modeling

Topic models help explore large, unstructured text
corpora by automatically discovering the topics
discussed in the documents (Blei et al., 2003).
However, generated topic models are not perfect;
they may contain incoherent or loosely connected
topics (Chang et al., 2009; Mimno et al., 2011;
Boyd-Graber et al., 2014).

Human-in-the-Loop Topic Modeling (HLTM)
addresses these issues by incorporating human
knowledge into the modeling process. Existing
HLTM systems expose topic models as their topic
words and documents, and users provide feedback
to improve the models using varied refinement op-
erations, such as adding words to topics, merg-
ing topics, or removing documents (Smith et al.,
2018; Wang et al., 2019). Systems also vary in
how they incorporate feedback, such as “must-

∗Work performed at University of Maryland, College Park

link” and “cannot-link” constraints (Andrzejew-
ski et al., 2009; Hu et al., 2014), informed pri-
ors (Smith et al., 2018), or document labels (Yang
et al., 2015). However, evaluations of these sys-
tems are either not comparative (Choo et al.,
2013; Lee et al., 2017) or compare against non-
interactive models (Hoque and Carenini, 2015; Hu
et al., 2014) or for only a limited set of refine-
ments (Yang et al., 2015; Xie et al., 2015). Evalu-
ations are thus silent on which HLTM system best
supports users in improving topic models: they ig-
nore whether refinements are applied correctly or
how they compare with other approaches. More-
over, comparative evaluations can be difficult be-
cause existing HLTM systems support diverse re-
finement operations with little overlap.

To address these issues, we implement three
HLTM systems that differ in the techniques for
incorporating prior knowledge (informed priors
vs. constraints) and for inference (Gibbs sampling
vs. variational EM), but that all support seven re-
finement operations preferred by end users (Lee
et al., 2017; Musialek et al., 2016). We compare
these systems through experiments simulating ran-
dom and “good” user behavior. The two Gibbs
sampling-based systems extend prior work (Yang
et al., 2015; Smith et al., 2018), but to our knowl-
edge, the combination of informed priors and vari-
ational inference in an HLTM system is new. Addi-
tionally, while Yang et al. incorporate word corre-
lation knowledge and document label knowledge
into topic models, this paper extends their mod-
eling approach with the implementation of seven
new user refinements.



6324

We also introduce metrics to assess the de-
gree to which HLTM systems listen to users—
user control—a key user interface design princi-
ple for human-in-the-loop systems (Amershi et al.,
2014; Du et al., 2017). In general, informed pri-
ors provide more control while constraints pro-
duce higher quality topics.

This paper provides three contributions: (1) im-
plementation of an HLTM system using informed
priors and variational inference, (2) experimental
comparison of three HLTM systems, and (3) met-
rics to evaluate user control in HLTM systems.

2 Human Feedback and LDA

We briefly describe Latent Dirichlet Alloca-
tion (Blei et al., 2003, LDA) and outline the ex-
perimental conditions and our implementation.

2.1 LDA Inference
LDA is generative, modeling documents as mix-
tures of k topics where each topic is a multinomial
distribution, φz , over the vocabulary, V . Each doc-
ument d is an admixture of topics θd. Each word
indexed by i in document d is generated by first
sampling a topic assignment zd,i from θd and then
sampling a word from the corresponding topic φzi .

Collapsed Gibbs sampling (Griffiths and
Steyvers, 2004) and variational Expectation-
Maximization (Blei et al., 2003, EM) are two
popular inference methods to compute the
posterior, p(z, φ, θ |w,α, β). Gibbs sampling
iteratively samples a topic assignment, zd,i = t
given an observed token wd,i in document d and
other topic assignments, z−d,n, with probability

P (zd,i = t | z−d,n, w) ∝ (nd,t+α)
nw,t + β

nt + V β
(1)

Here, nd,t is the count topic t is in document d,
nw,t is the count of tokenw in topic t, and nt is the
marginal count of tokens assigned to topic t. Al-
ternatively, variational EM approximates the pos-
terior using a tractable family of distributions by
first defining a mean field variational distribution

q(z, φ, θ |λ, γ, π) =
K∏
k=1

q(φk |λk)
D∏

d=1

q(θd | γd)

Nd∏
n=1

q(zdn |πdn) (2)

where γd, πd are local parameters of the distri-
bution q for document d, and λ is a global pa-
rameter. Inference minimizes the KL divergence

between the variational distribution and true pos-
terior. While there are many LDA variants for
specific applications (Boyd-Graber et al., 2017),
we focus on models that interactively refine initial
topic clustering.

2.2 HLTM Modeling Approaches

To investigate adherence to user feedback and
topic quality improvements, we compare HLTM
systems, based on three modeling approaches.
Each of these approaches incorporate user feed-
back by first forgetting what the model learned be-
fore, by unassigning words from topics (Hu et al.,
2014), and then injecting new information based
on user feedback into the model.

We compare two existing techniques for inject-
ing new information: (1) asymmetric priors (or in-
formed priors), which are used extensively for in-
jecting knowledge into topic models (Fan et al.,
2017; Zhai et al., 2012; Pleplé, 2013; Smith et al.,
2018; Wang et al., 2019) by modifying Dirichlet
parameters, α and β, and (2) constraints (Yang
et al., 2015), in which knowledge source m is in-
corporated as a potential function fm(z,m, d) of
the hidden topic z of word type w in document d.
While other frameworks exist (Foulds et al., 2015;
Andrzejewski et al., 2009; Hu et al., 2014; Xie
et al., 2015; Roberts et al., 2014), we focus on in-
formed priors and constraints, as these are flexible
to support the refinement operations preferred by
users and reasonably fast enough to support “rapid
interaction cycles” required for effective interac-
tive systems (Amershi et al., 2014).

We also compare two inference techniques for
topic models (1) Gibbs sampling and (2) vari-
ational EM inference. Because HLTM requires
forgetting existing topic assignments (Hu et al.,
2014), we use two different methods to forget ex-
isting topic assignments. In Gibbs sampling, in-
formation is forgotten by adjusting topic-word as-
signments, zi. In variational EM, λt,w encodes
how closely the word w is related to topic t. In the
E-step, the model assigns latent topics based on
the current value of λ, and in the M-step, the model
updates λ using the current topic assignments. Be-
cause the model relies on a fixed λ for topic as-
signment, information for a word w in a topic t
can be forgotten by resetting λt,w to the prior βt,w.
Together, these injection and inference techniques
result in three HLTM modeling approaches:



6325

Informed priors using Gibbs sampling (info-
gibbs) forgets topic-word assignments zi and in-
jects new information by modifying Dirichlet pa-
rameters, α and β. Smith et al. (2018) implement
seven refinements for this approach. We extend
their work with a create topic refinement.

Informed priors using variational inference
(info-vb) forgets topic-word assignments for a
word w in topic t by resetting the value of λt,w.
This approach manipulates priors, α and β, to in-
corporate new knowledge like info-gibbs. We de-
fine and implement seven user-preferred refine-
ment operations for this approach.

Constraints using Gibbs sampling (const-gibbs)
forgets topic assignments like in info-gibbs, but
instead of prior manipulation, injects new infor-
mation into the model using potential functions,
fm(z,m, d) (Yang et al., 2015). We define and
implement seven user-preferred refinement opera-
tions for this approach.

2.3 Refinement Implementations

Our three systems support the following seven
refinements that users request in HLTM systems
(Musialek et al., 2016; Lee et al., 2017):

Remove word w from topic t. For all three
systems, first forget all w’s tokens wi from t.
Then, for info-gibbs and info-vb, assign a very
small prior1 � to w in t. For const-gibbs, add a
constraint2 fm(z, w, d), such that fm(z, w, d) =
log(�) if z = t and w = x, else assign 0.

Add word w to topic t. For all three systems,
first forget w from all other topics. Then, for info-
gibbs and info-vb, increase the prior of w in t by
the difference between the topic-word counts of w
and topic's top word ŵ in t. For const-gibbs, add
a constraint fm(z, w, d), such that fm(z, w, d) = 0
if z = t and w = x, else assign log(�).

Remove document d from topic t. For all mod-
els, first forget the topic assignment for all words
in the document d. Then, for info-gibbs and info-
vb, overwrite the previous prior value with a very
small prior �, to t in αd. For const-gibbs, add a
constraint fm(z, w, d), such that fm(z, w, d) =
log(�) if z = t and d = x, else assign 0.

1We use � = 10−8
2We use log(�) to make it a soft constraint. Replacing it

with -∞ will make it a hard constraint.

Merge topics t1 and t2 into a single topic, t1.
For info-gibbs and const-gibbs, assign t1 to all to-
kens previously assigned to t2. This effectively re-
moves t2 and updates t1, which should represent
both t1 and t2. For info-vb, add counts from λt2
to λt1 and remove row from λ corresponding to
t2.

Split topic t given seed words s into two topics,
tn, containing s, and t, without s. For each vocab-
ulary word, move a fraction of probability mass
from t to tn as proposed by (Pleplé, 2013). Then,
for info-gibbs and info-vb, assign a high prior for
all s in tn. Following Fan et al., we use 100 as
the high prior. For const-gibbs, to s to tn, add a
constraint fm(z, w, d), such that fm(z, w, d) = 0
if z = tn and w = wi ∈ s, else assign log(�).

Change word order , such that w2 is higher
than w1 in topic t. In info-gibbs, increase the
prior of w2 in t by the topic word counts’ differ-
ence nw1,t -nw2,t . In info-vb, increase the prior
by λt,w1 − λt,w2 . For const-gibbs, compute the
ratio r between the topic word counts’ difference
nw1,t − nw2,t and the counts of word w2, which
have any topic except t, nw2,x,x 6=t. Then, add a
constraint fm(z, w, d), such that fm(z, w, d) = 0
if z = t and w = w2, else assign δ where
δ = log(�) if r > 1 else δ = 1.0− r.

Create topic tn, given seed words, s. First for-
get the topic assignment for all s. Then, for info-
gibbs and info-vb, assign a high prior to s. For
const-gibbs, to assign s to tn, add a constraint
fm(z, w, d), such that fm(z, w, d) = 0 if z = tn
and w = wi ∈ s, else assign log(�).

3 Measuring Control

Prior work in interactive systems emphasizes the
importance of doing what users ask, that is, end
user control (Shneiderman, 2010; Amershi et al.,
2014). However, HLTM, which must balance mod-
eling the data well and fulfilling users’ desires,
can frustrate users when refinements are not ap-
plied as expected (Smith et al., 2018). Evalua-
tion metrics such as topic coherence, perplexity,
and log-likelihood measure how well topics model
data, but are not sufficient to measure whether user
feedback is incorporated as expected. Therefore,
we propose new control metrics to measure how
well models reflect users’ refinement intentions.

Consider a topic, t, as a ranked word list sorted
in descending order of their probabilities in t. Let



6326

rM1wt denote the rank of a word w in topic t in
model M1. After applying a word-level refine-
ment, the rank of w in the updated model M2,
is rM2wt . For word-level refinements, such as add
word, remove word, and change word order,
compute control as the ratio of the actual rank
change, the absolute difference (rM1wt − r

M2
wt ), and

the expected rank change. A score of 1.0 indicates
that the model perfectly applied the refinement,
while a negative score indicates the model did the
opposite of what was desired. For remove doc-
ument, use the same definition as remove word
except consider a topic as a ranked document list.

For create topic, compute control as the ratio of
the number of seed words in the created topic out
of the total number of provided seed words. For
merge topics, control is defined as the ratio of the
number of words in the merged topic which came
from either of the parent topics, and the total num-
ber of words shown to a user. For split topic, con-
trol is the average of the control scores of parent
topic and child topic, computed using the control
definition for create topic.

4 HLTM System Comparison

To compare how the three HLTM systems model
data and adhere to user feedback (i.e., provide con-
trol), we need user data; however, real user in-
teraction is expensive to obtain. So, we simu-
late a range of user behavior with these systems:
users that aim to improve topics, “good users”, and
those that behave unexpectedly, “random users”.

The simulations use a data set of 7000 news ar-
ticles, 500 articles each for fourteen different news
categories, such as business, law, and money, col-
lected using the Guardian API.3

4.1 Simulated Users

The “random user” refines randomly. For exam-
ple, remove document, deletes a randomly se-
lected document from a randomly selected topic.

Our “good user” reflects a realistic user behav-
ior pattern: identify a mixed category topic and ap-
ply refinements to focus the topic on its most dom-
inant category. Thus the “good user”—with access
to true document categories—first chooses a topic
associated with multiple categories of documents
and determines the dominant category of the top
documents for the topic. Then, refinement opera-
tions push the topic to the dominant category. For

3https://open-platform.theguardian.com

example, the “good user” may remove a document
which does not belong to the dominant category.
Additional simulation are found in Appendix A.

4.2 Method

We train forty initial LDA models, twenty with ten
topics and twenty with twenty topics for the news
articles, resulting in models with less and more
topics than the true number of categories.

For each of the three HLTM systems and each
of the seven refinement types, we randomly select
one of the pre-trained models. The create and split
topic refinement types select from the models with
ten topics, ensuring that topics have overlapping
categories, while the others select from the mod-
els with twenty topics. We then apply a refinement
as dictated by the simulated user. For the “ran-
dom user”, we randomly select refinement param-
eters, such as topic and word (Appendix A.1), and
for the “good user”, we choose topic and refine-
ment parameters intending to improve the topics
(Appendix A.2). We apply the refinement (Sec-
tion 2.3) and run inference until the model con-
verges or reaches a threshold of twenty Gibbs sam-
pling and three EM iterations. We compute control
(Section 3) of the refinement and change in topic
coherence using NPMI derived from Wikipedia for
the top twenty topic words (Lau et al., 2014). We
repeat this process 100 times for each refinement
type, simulated user, and HLTM system.

5 Informed Priors Listen to Users, while
Constraints Produce Coherent Topics

Table 1 shows the per-refinement control and co-
herence deltas for the three different HLTM sys-
tems. As detailed in Appendix B, Kruskal-Wallis
tests show that HLTM systems have significantly
different (p < .05) control scores for all refine-
ments for the “good user” and for all but remove
word for the “random user.” Coherence deltas
were also significantly different for all refinements
except add word, where const-gibbs yields con-
sistently higher coherence improvements than the
other conditions aside from remove document.

For remove word, and merge topics, all meth-
ods provide good control (scores close to 1.0).
However, the informed prior methods, info-vb and
info-gibbs, provide more control, for both the
random (CRand) and good (CGood) users, com-
pared to const-gibbs. Informed prior methods also
excel at refinements that promote topic words,



6327

const-gibbs info-gibbs info-vb
CRand CGood QGood

∗ CRand CGood QGood
∗ CRand CGood QGood

∗

remove w 1.0 (0.0) 1.0 (0.0) 5.4 (9.7) 1.0 (0.0) 1.0 (0.0) 3.0 (8.9) 1.0 (0.0) 1.0, (0.0) 1.2 (5.0)
remove d 1.0 (0.0) 1.0 (0.0) -1.7 (10.8) 1.0 (0.0) 1.0 (0.0) .8 (4.5) .72 (.4) .85 (.25) -6.0 (13.2)
merge t .97 (.05) 1.0 (0.0) 6.3 (8.7) .96 (.05) 1.0 (0.0) -.43 (9.3) .99 (.02) .99 (.02) 1.4 (9.8)
add w .82 (.29) .86 (.24) 3.0 (9.4) 1.0 (0.0) .98 (.03) 3.1 (6.4) .98 (.04) .98 (.02) 1.7 (5.6)
create t .08 (.10) .81 (.13) -6.6 (13.7) .98 (.11) .98 (.04) -11 (10.4) 1.0 (0.0) 1.0 (0.0) -13.0 (8.4)
split t .91 (.09) .79 (.19) 1.9 (17.9) .93 (.06) .87 (.19) -7.9 (13.5) 1.0 (0.0) .93 (.16) -1.6 (8)
reorder w .41 (.53) .19 (.20) 1.6 (7) 1.19 (.46) .56 (.24) -1.0 (5.5) 1.02 (.27) .44 (.24) -1.0 (5.1)

Table 1: Simulation results, reported as mean (SD): control with the random (CRand) and good (CGood) users,
and coherence deltas (QGood) for the good user (we omit coherence for the random user as the goal there is not to
improve the topics). ∗values reported as E-04.

such as add word and create topic. On the
other hand, const-gibbs supports defining token
and document-level constraints, which ensure al-
most perfect control for refinements that require
restricting certain words or documents, such as re-
move word and remove document.

Additionally, comparing good and random
users, all systems provide similar control except
for const-gibbs for create topic: .81 for good
(CGood) compared to .08 for random (CRand).
This is because const-gibbs is limited by the un-
derlying data and cannot generate topics contain-
ing random, unrelated seed words, lowering con-
trol for the “random user.” Informed prior models,
however, inflate priors to adhere to user feedback,
regardless of whether it aligns with the underlying
data, so these methods provide higher control even
for random input. Finally, for change word or-
der, all three systems lack control. As topic mod-
els are probabilistic models, it is therefore difficult
to maintain the exact user provided word order.

5.1 Why Informed Priors Offer Control

Informed priors provide higher control than con-
straints for refinements that require promoting
words, such as add word and create topic. To
understand the difference between these two feed-
back techniques, we conduct an additional simu-
lation to compare const-gibbs and info-gibbs: we
generate an initial topic model of 10 topics and ap-
ply add word refinements to explore varied con-
trol of the feedback techniques.

The initial model includes a law topic with the
top ten words: “court, law, justice, rights, le-
gal, case, police, human, public, courts”. A user
wants to add the word “injustice”, initially ranked
at 1035th position, to this topic using both const-
gibbs and info-gibbs models. While const-gibbs
improves the ranking of the added word to 631,

info-gibbs puts this word at the first position in
the updated topic. The const-gibbs system tries to
push tokens of “injustice” to the law topic; how-
ever, there just are not enough occurrences to put it
in the first ten words. Even assigning all its occur-
rences to the law topic cannot improve its ranking
further. On the other hand, info-gibbs can increase
the prior for “injustice” enough to put the word
in the top of the topic list; until overruled by data
info-gibbs, can use high priors to incorporate user
feedback, resulting in higher control.

6 Conclusion

Informed prior models provide an effective way
to incorporate different feedback into topic mod-
els, improving user control and topic coherence,
while constraints yield higher quality topics, but
with less control. While we simulate user behav-
ior for good and random users, future work should
compare these systems with end users, as well as
compare end user ratings of control with our pro-
posed automated metrics.

Interactive models—by design—are balancing
user insight with the truth of the data (and thus the
world). An important question for future models,
especially interactive ones, is how to signal to the
user when their desires do not comport with real-
ity. In such cases, control may not be a desired
property of interactive systems.

Acknowledgements

This work was supported by the collaborative
NSF Grant IIS-1409287 (UMD) and IIS-1409739
(BYU). Boyd-Graber is also supported by NSF
grant IIS-1822494 and IIS-1748663. Any opin-
ions, findings, conclusions, or recommendations
expressed here are those of the authors and do not
necessarily reflect the view of the sponsor.



6328

References
Saleema Amershi, Maya Cakmak, William Bradley

Knox, and Todd Kulesza. 2014. Power to the peo-
ple: The role of humans in interactive machine
learning. AI Magazine, 35(4):105–120.

David Andrzejewski, Xiaojin Zhu, and Mark Craven.
2009. Incorporating domain knowledge into topic
modeling via Dirichlet forest priors. In Proceedings
of the International Conference of Machine Learn-
ing.

David M Blei, Andrew Y Ng, and Michael I Jordan.
2003. Latent Dirichlet allocation. Journal of ma-
chine Learning research, 3(Jan):993–1022.

Jordan Boyd-Graber, Yuening Hu, and David Mimno.
2017. Applications of Topic Models, volume 11 of
Foundations and Trends in Information Retrieval.
NOW Publishers.

Jordan Boyd-Graber, David Mimno, David Newman,
Edoardo M Airoldi, David Blei, and Elena A Ero-
sheva. 2014. Care and feeding of topic models:
Problems, diagnostics, and improvements. Hand-
book of mixed membership models and their appli-
cations, pages 3–34.

Jonathan Chang, Jordan L Boyd-Graber, Sean Gerrish,
Chong Wang, and David M Blei. 2009. Reading
tea leaves: How humans interpret topic models. In
Proceedings of Advances in Neural Information Pro-
cessing Systems.

Jaegul Choo, Changhyun Lee, Chandan K Reddy, and
Haesun Park. 2013. Utopian: User-driven topic
modeling based on interactive nonnegative matrix
factorization. IEEE transactions on visualization
and computer graphics, 19(12):1992–2001.

Fan Du, Catherine Plaisant, Neil Spring, and Ben
Shneiderman. 2017. Finding similar people to guide
life choices: Challenge, design, and evaluation. In
Proceedings of the 2017 CHI Conference on Human
Factors in Computing Systems.

Angela Fan, Finale Doshi-Velez, and Luke Miratrix.
2017. Prior matters: simple and general methods
for evaluating and improving topic quality in topic
modeling. arXiv preprint arXiv:1701.03227.

James Foulds, Shachi Kumar, and Lise Getoor. 2015.
Latent topic networks: A versatile probabilistic pro-
gramming framework for topic models. In Pro-
ceedings of the International Conference of Machine
Learning.

Thomas L Griffiths and Mark Steyvers. 2004. Find-
ing scientific topics. Proceedings of the National
academy of Sciences, 101(suppl 1):5228–5235.

Enamul Hoque and Giuseppe Carenini. 2015. Con-
visit: Interactive topic modeling for exploring asyn-
chronous online conversations. In International
Conference on Intelligent User Interfaces. ACM.

Yuening Hu, Jordan Boyd-Graber, Brianna Satinoff,
and Alison Smith. 2014. Interactive topic modeling.
Machine learning, 95(3).

Jey Han Lau, David Newman, and Timothy Baldwin.
2014. Machine reading tea leaves: Automatically
evaluating topic coherence and topic model qual-
ity. Proceedings of the Conference of the European
Chapter of the Association for Computational Lin-
guistics, pages 530–539.

Tak Yeon Lee, Smith Alison, Kevin Seppi, Niklas
Elmqvist, Jordan Boyd-Graber, and Leah Findlater.
2017. The human touch: How non-expert users per-
ceive, interpret, and fix topic models. International
Journal of Human-Computer Studies.

David Mimno, Hanna M Wallach, Edmund Talley,
Miriam Leenders, and Andrew McCallum. 2011.
Optimizing semantic coherence in topic models. In
Proceedings of Empirical Methods in Natural Lan-
guage Processing. Association for Computational
Linguistics.

Chris Musialek, Philip Resnik, and S Andrew Stavisky.
2016. Using text analytic techniques to create ef-
ficiencies in analyzing qualitative data: A compari-
son between traditional content analysis and a topic
modeling approach. American Association for Pub-
lic Opinion Research.

Quentin Pleplé. 2013. Interactive topic modeling.
Master’s thesis, UC San Diego.

Margaret E Roberts, Brandon M Stewart, Dustin
Tingley, Christopher Lucas, Jetson Leder-Luis,
Shana Kushner Gadarian, Bethany Albertson, and
David G Rand. 2014. Structural topic models for
open-ended survey responses. American Journal of
Political Science, 58(4):1064–1082.

Ben Shneiderman. 2010. Designing the user interface:
strategies for effective human-computer interaction.
Pearson Education India.

Alison Smith, Varun Kumar, Jordan Boyd-Graber,
Kevin Seppi, and Leah Findlater. 2018. Closing
the loop: User-centered design and evaluation of a
human-in-the-loop topic modeling system. In Inter-
national Conference on Intelligent User Interfaces.
ACM.

Jun Wang, Changsheng Zhao, Junfu Xiang, and Kanji
Uchino. 2019. Interactive topic model with en-
hanced interpretability. In IUI Workshops.

Pengtao Xie, Diyi Yang, and Eric P Xing. 2015. In-
corporating word correlation knowledge into topic
modeling. In Conference of the North American
Chapter of the Association for Computational Lin-
guistics.

Yi Yang, Doug Downey, Jordan L Boyd-Graber, and
Jordan Boyd Graber. 2015. Efficient methods for
incorporating knowledge into topic models. In Pro-
ceedings of Empirical Methods in Natural Language
Processing.

http://www.nowpublishers.com/article/Details/INR-030


6329

Ke Zhai, Jordan L. Boyd-Graber, Nima Asadi, and Mo-
hamad L. Alkhouja. 2012. Mr. LDA: a flexible large
scale topic modeling package using variational in-
ference in mapreduce. In Proceedings of the 21st
International Conference on World Wide Web.

A Simulation Details

To simulate the behavior of the “random user” and
“good user” for the three HLTM systems, we train
40 initial LDA models, 20 with 10 topics and 20
with 20 topics for the news articles, resulting in
models with less and more topics than the true
number of categories.

A.1 Random User Simulation

To simulate random user behavior, for each of
the three systems and for each of the seven re-
finement types, we randomly select a pre-trained
LDA model from the pool of models with 20 top-
ics. Then, we apply a refinement of that refine-
ment type to the selected model. We randomly
select refinement specific parameters, such as can-
didate topic, word to be added, and document to
be deleted. We run inference until the model con-
verges or reaches a limit. For Gibbs sampling
models, info-gibbs and const-gibbs, we use 20 iter-
ations as limit and for the variational model, info-
vb, we use 3 EM iterations as the limit. After ap-
plying the refinement, we compute the control and
coherence given the updated and initial model. We
perform this 100 times for each of the refinement
types and HLTM systems.

A.2 Good User Simulation

For each category c of the 14 categories of the
Guardian news dataset (art & design, business, ed-
ucation, environment, fashion, film, football, law,
money, music, politics, science, sports, technol-
ogy), we compute the most important words in c,
Sc, using a Logistic regression classifier. We use
Sc as a list of representative words for category c.

Given a labeled corpus, we randomly choose
one of the pre-trained models. When applying cre-
ate or split topic refinement types, we select from
the models with 10 topics, ensuring that topics
have overlapping categories. While applying all
other refinement types, we select from the models
with 20 topics. We then simulate good user behav-
ior for each of the refinement types as follows:

1. Add word: Randomly select a topic t from
those where the top 20 documents are from

more than one category. Then, find the cor-
responding labeled category c by analyzing
top 20 documents in the selected category.
To improve the topic coherence of t, add top
ranked words (from one to five words) from
Sc, which are not already in the top words of
t.

2. Remove word: Randomly select a topic t
from those where top 20 documents are from
more than one category. Then, find the corre-
sponding labeled category c by analyzing top
20 documents in the selected category. For
selected topic t, remove words which are not
part of Sc.

3. Change word order: Randomly select a topic
t among all topics. Then, find the corre-
sponding labeled category c by analyzing top
20 documents in the selected category. Then,
find words between index 10 to 20, which are
at higher rank in Sc. Promote such words to
a higher rank using change word order.

4. Remove document: Randomly select a topic t
from those where top 20 documents are from
more than one category. Then, find the corre-
sponding labeled category c by analyzing top
20 documents in the selected category. For
selected topic t, delete documents (from one
to five documents), which are not in c.

5. Merge topics: Randomly choose a topic pair
to merge which represents a common cate-
gory c.

6. Create topic: Randomly select a category c
which is not a dominant category in any of
the topics. Create a topic by providing top 10
words as seed words from Sc.

7. Split topic: Randomly select a topic from
those which have documents from two dif-
ferent categories, c1 and c2. Split the top 20
words in that topic into two lists using the
representative words from Sc1 and Sc2 . Then,
split the topic using one of the lists.

B Kruskal Wallis Tests

We provide details on the Kruskal Wallis tests
used to assess whether there are significant differ-
ences in how the three HLTM systems, const-gibbs,
info-gibbs, and info-vb, impact control and topic



6330

coherence. The means reported here repeat what is
provided in the main paper, but with the additional
χ2 and p values output from the Kruskal Wallis
tests; p < .05 is considered to be significant.

Because control values are not comparable
across the seven user-preferred refinements, we
conducted separate Kruskal Wallis tests for each
refinement. The results include control for the
simulated good user (Table 3) and for the sim-
ulated random user (Table 2), as well as quality
improvements (coherence) for the simulated good
user (Table 4).

const-gibbs info-gibbs info-vb χ2 p-value
add w 0.82 1.00 0.99 249.35 < .001
remove w 1.00 1.00 1.00 0.42 .810
remove d 1.00 1.00 0.72 27.12 < .001
merge t 0.97 0.96 0.99 31.24 < .001
reorder w 0.41 1.19 1.03 113.52 < .001
create t 0.08 0.98 1.00 277.23 < .001
split t 0.91 0.93 1.00 119.47 < .001

Table 2: Average control provided by the three HLTM
systems for seven user-preferred refinements and sim-
ulated random user behavior. Kruskal-Wallis tests (p <
.05) show significant differences between the systems
for all refinements except remove word.

const-gibbs info-gibbs info-vb χ2 p-value
add w 0.86 0.98 0.98 13.02 .001
remove w 0.99 0.99 0.99 6.22 .045
remove d 0.99 0.99 0.85 163.73 < .001
merge t 1.00 1.00 0.99 22.76 < .001
reorder w 0.19 0.56 0.44 103.44 < .001
create t 0.82 0.98 1.00 191.82 < .001
split t 0.77 0.87 0.93 81.71 < .001

Table 3: Average control provided by the three HLTM
systems for seven user-preferred refinements and sim-
ulated good user behavior. Kruskal-Wallis tests (p <
.05) show significant differences between the systems
for all refinements.

const-gibbs info-gibbs info-vb χ2 p-value
add w 3.0E-04 3.1E-04 1.7E-04 2.93 .230
remove w 5.3E-04 3.0E-04 1.2E-04 25.51 < .001
remove d -1.7E-04 7.5E-05 -6.0E-04 19.29 < .001
merge t 6.3E-04 -4.3E-05 1.4E-04 30.66 < .001
reorder w 1.6E-04 -8.0E-05 -1.0E-05 7.67 .020
create t -6.6E-04 -1.1E-03 -1.2E-03 11.20 .004
split t 1.9E-04 -7.9E-04 -1.6E-04 22.19 < .001

Table 4: Average coherence provided by the three
HLTM systems for seven user-preferred refinements
and simulated good user behavior. Kruskal-Wallis tests
(p < .05) show significant differences between the sys-
tems for all refinements except for add word.


