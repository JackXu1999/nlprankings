



















































CUNI–Malta system at SIGMORPHON 2019 Shared Task on Morphological Analysis and Lemmatization in context: Operation-based word formation


Proceedings of the 16th Workshop on Computational Research in Phonetics, Phonology, and Morphology, pages 104–112
Florence, Italy. August 2, 2019 c©2019 Association for Computational Linguistics

104

CUNI-Malta system at SIGMORPHON 2019 Shared Task on
Morphological Analysis and Lemmatization in context: Operation-based

word formation

Ronald Cardenas♣♠ Claudia Borg♠ Daniel Zeman♣
♣ Institute of Formal and Applied Linguistics, Charles University in Prague
♠ Department of Artificial Intelligence, Faculty of ICT, University of Malta
ronald.cardenas@matfyz.cz claudia.borg@um.edu.mt

zeman@ufal.mff.cuni.cz

Abstract

This paper presents the submission by the
Charles University-University of Malta team
to the SIGMORPHON 2019 Shared Task on
Morphological Analysis and Lemmatization in
context. We present a lemmatization model
based on previous work on neural transduc-
ers (Makarov and Clematide, 2018b; Aharoni
and Goldberg, 2016). The key difference is
that our model transforms the whole word
form in every step, instead of consuming it
character by character. We propose a merg-
ing strategy inspired by Byte-Pair-Encoding
that reduces the space of valid operations by
merging frequent adjacent operations. The
resulting operations not only encode the ac-
tions to be performed but the relative position
in the word token and how characters need
to be transformed. Our morphological tag-
ger is a vanilla biLSTM tagger that operates
over operation representations, encoding op-
erations and words in a hierarchical manner.
Even though relative performance according
to metrics is below the baseline, experiments
show that our models capture important asso-
ciations between interpretable operation labels
and fine-grained morpho-syntax labels.

1 Introduction

Tasks related to morphological analysis have been
traditionally formulated as string transduction
problems tackled by weighted finite state trans-
ducers (Mohri, 2004; Eisner, 2002). More re-
cently, however, the problem has been tackled
with neural architectures featuring sequence-to-
sequence architectures (Kann and Schütze, 2016)
and neural transducers (Aharoni and Goldberg,
2016; Makarov and Clematide, 2018b,a).

In this paper we describe our submission for
the SIGMORPHON 2019 Shared Task related
to morphological analysis and lemmatization in
context (McCarthy et al., 2019). We focus on

an operation-based word formation process using
a neural transducer which consumes more than
one character at a time. Our main motivation
for this approach stems from neural transducers
that normally consume one character at a time
using context-enriched representation of charac-
ters.1 In language modelling, character-based
RNNs have a difficulty capturing long dependen-
cies between characters, especially dependencies
in words which are separated by several tokens.
This can be a crucial piece of information for mor-
phological analysis in context. This type of ap-
proach has already been extend effectively to Neu-
ral Machine Translation by (Sennrich et al., 2016),
who employ simple character n-gram models and
a segmentation based on the byte pair encoding
(BPE) compression algorithm.

2 Related Work

In the last few years, efforts on the analysis of
endangered low-resourced languages and the de-
velopment of basic language tools for them (Rios,
2016; Pereira-Noriega et al., 2017; Cardenas and
Zeman, 2018) have once more brought atten-
tion into the latent necessity for research of less
language-dependent models that are not unreason-
ably data hungry.

On the other hand, more recent efforts have
proposed combined strategies to bring together
the transducer paradigm and neural architectures
(Rastogi et al., 2016; Aharoni and Goldberg, 2016;
Lin et al., 2019). For example, the neural trans-
ducer proposed by (Aharoni and Goldberg, 2016)
presents a sequence to sequence architecture that
decodes one character at a time while attending at
the input character under a hard-monotonic con-
strain. However, their method relies on out-of-

1We release our code at https://github.com/
ronaldahmed/morph-bandit

https://github.com/ronaldahmed/morph-bandit
https://github.com/ronaldahmed/morph-bandit


105

the-pipeline alignment of the input and output
string at the character level. Subsequent work
by Makarov and Clematide (2018b) proposed a
transition-based architecture instead, although still
operating under the same conditions, i.e. consum-
ing one character at a time and relying on pre-
alignment. More recently, however, Makarov and
Clematide (2018a) proposed to learn alignment
lattices along the transduction mechanism under
an imitation learning framework, hence eliminat-
ing the need for single, noisy alignments.

In this work, we propose a neural architecture
that encodes more expressive, interpretable trans-
ducer operations. We relax the condition of con-
suming one character at a time, and derive oper-
ations meant to be applied at the word level in-
stead. These operations are obtained by merging
initial character-level operations using the BPE al-
gorithm (Gage, 1994).

3 Task Description

The SIGMORPHON 2019 Shared Task (Mc-
Carthy et al., 2019) features three main tasks: (i)
cross-lingual transfer for inflection generation, (ii)
morphological analysis and lemmatization in con-
text, and (iii) an open challenge over past editions
of the shared tasks.

We participated in Task II for which a com-
plete sentence of word forms is presented and lem-
mas and feature bundles (morpho-syntantic de-
scription labels) are to be predicted for each to-
ken. This task features an outstanding diverse pool
of 66 languages from a total of 107 treebanks.
Data (forms, lemmas, and feature bundles) are
obtained from UniversalDependencies v.2.3 tree-
banks (Nivre et al., 2018). However, the feature
bundles are translated into the UniMorph tagset
(Kirov et al., 2018) using the mapping strategy
proposed by McCarthy et al. (2018).

4 Problem Formulation

Let w ∈ V and z ∈ V L be a word type and
its corresponding lemma; and let A be a set of
string transformation actions. We define the func-
tion T : V × Am 7→ V L that receives as input a
word form w and a sequence of string transforma-
tions a = 〈a0, ., ai, .., am〉. T iteratively applies
the transformations one at a time and returns the
resulting string. The objective is to obtain a se-
quence of actions a such that a form w gets trans-
formed into its lemma z, i.e. T (w, a) = z.

4.1 String transformations at the word level

We encode every string transformation -
henceforth, action- ai ∈ A as follows:
〈operation-position-segment〉. The ad-
ditional information encoded such as position and
segment (characters) involved, allows actions to
operate at the word level and act upon a segment
of characters instead of a single character. This
is a key difference between A and the action sets
of most previously proposed neural transducers
(Aharoni and Goldberg, 2017; Makarov and
Clematide, 2018b,c) which only encode the
operation to perform and consume one character
at a time.

4.2 Obtaining gold action sequences

We discuss now how to deterministically popu-
late A. We start off with operations that act upon
one character at a time. We derive these oper-
ations with the Damerou-Levenshtein (DL) dis-
tance algorithm which adds the transposition op-
eration in addition to the traditional set of the edit
distance algorithm. However, the set A of the
form 〈operation-position-segment〉 di-
rectly derived by this algorithm is too large and
sparse to be learned effectively, especially because
of the position component.

Hence, we simplify A by merging the k most
frequent operations performed at adjacent posi-
tions by using Byte-Pair-Encoding (BPE) (Gage,
1994). Furthermore, we replace the position
component of actions performed at the beginning
of a token with the label A, indicating that it is a
prefixing action. Analogously, we use the label A
to indicate it is a suffixing action. Table 1 presents
a description of the licensed values of each com-
ponent, including the operation set considered.

Finally, actions are sorted so that prefix actions
are performed first, followed by inner-word ac-
tions (positions i ), and lastly, suffix actions. In
addition, prefix and suffix actions are sorted so that
T would process the word form from the outside
in. Consider the example presented in Table 2, a
sequence of suffix actions. The form visto (Span-
ish for ‘seen’, past participle) is transformed into
the lemma ver (‘to see’), with all actions operating
at the right border of the current token.

5 System Description

In this section we describe the models presented
for Task 2 on morphological tagging and lemma-



106

Component Label Description
operation INS insert

DEL delete
SUBS substitute
TRSP transpose
STOP stop

position A at the beginning (prefix)
A at the end (suffix)
i at position i

segment c c ∈ Σ∗\{∅}

Table 1: Description of components encoded in action
labels. Σ: set of characters observed in the training
data.

Token Action
visto DEL-A -o
vist DEL-A -t
vis SUBS-A -er
ver STOP
visto DEL-A -o DEL-A -t SUBS-A -er STOP

Table 2: Example of step-by-step transformation from
form visto (Spanish for ‘seen’, past participle) to
lemma ver (‘to see’). Bottom row presents the final
token representation as the initial form followed by the
action sequence.

tization in context. We tackle the tasks of lemma-
tization and analysis with two separate, pipelined
models, as follows.

5.1 Lemmatization Model
We posit the task of lemmatization as a language
modelling problem over action sequences. Let
w = 〈w0, ..., wi, ..., wn〉 be a sequence of word to-
kens, z = 〈z0, ..., zi, ..., zn〉 the lemma sequence
associated with w, and ai = 〈ai0, ..., aij , ...aim〉
the action sequence such that T (wi, ai) = zi.
We encode ai using an RNN with an LSTM cell
(Hochreiter and Schmidhuber, 1997), as follows
hij = LSTM(e

i
j , h

i
j−1)

where eij is the embedding of action a
i
j . Then, the

probability of action aij is defined as

P (aij |ai1:j−1, θ) = softmax(g(W ∗hj + b)) (1)

where g(x) is the ReLU activation function, and
W and b are network parameters. As a way to in-
troduce the original word form into the encoded
sequence, we prepend wi to ai. Hence, the prob-
ability of the first action is determined by h0 =
LSTM(ei0, h

i−1
m ) where h

i−1
m is the last state of

the encoded action sequence of the previous word
wi−1, and ei0 is the embedding of word w

i.

wi a
i
1 a

i
2 a

i
3

ai1 a
i
2 a

i
3 STOP

Figure 1: Architecture of the lemmatization model
posited as a language model over action sequences.

The network is then optimized by minimiz-
ing the negative log-likelihood of the action se-
quences, as follows,

L(W, θ) = −
∑
w∈W

n∑
i=0

P (wi|θ)·

m∑
j=1

P (aij |ai1:j−1, θ)

where W is the set of all sentences in the train-
ing set and θ represents the parameters of the net-
work. Figure 1 presents a representation of the
lemmatizer model architecture. Note that aim is
the special action label STOP . During decoding,
we construct the lemma zi by running T over the
predicted action sequence of wi.

5.2 Morphological Tagging Model
Let F i = {f i0, ..., f ik, f iK} be the morpho-syntactic
description (MSD) label associated with word
form wi, defined as the concatenation of all indi-
vidual features fk such as N or Pl, and F i. We
tackle the task of morphological tagging as a se-
quence labeling problem over aggregated repre-
sentations of word forms.

We starts off by encoding the action sequence
using a bidirectional LSTM (Graves et al., 2013)
in order to obtain a word level representation xi =
[fm; b0], where fm is the the last forward state and
b0 is the first backward state. We use action em-
beddings trained by the lemmatizer and we freeze
them during training.

Then, the sequence x0, .., xn, ui =
biLSTM(xi, ui−1) is encoded by a word-
level biLSTM
ui = biLSTM(xi, ui−1) Then, the probablity of
feature label F i is given by

P (F i|x1:i−1, θ) = softmax(g(W ∗ui + b)) (2)

where g(x) is a ReLU activation function, and W
and b are network parameters. The network is op-
timized using cross-entropy loss.



107

6 Experimental Setup

We follow a two step approach to morphological
analysis by first obtaining the action sequence us-
ing the lemmatizer model, and then obtaining the
feature label sequence over these action represen-
tations. All models were implemented and trained
using PyTorch 1.0.0. 2

6.1 Action sequence preprocessing
We lowercase forms and lemmas before running
the DL-distance algorithm. Following the BPE
training procedure described by Sennrich et al.
(2016), we obtain the list of merged operations
from the action sequences derived from the train-
ing data. We limit the number of merges to
50. Then, these merges are applied to action se-
quences on the development and test data.

6.2 Training and optimization of details
Both the lemmatizer and analyzer models were
trained using Adam (Kingma and Ba, 2017), regu-
larized using dropout (Srivastava et al., 2014), and
employing an early stopping strategy. We tune the
hyper-parameters of both models over the devel-
opment set of Spanish (es ancora)3 and then we
use the optimal configuration to train on all tree-
banks except kpv ikdp, kpv lattice, and sa ufal.
Preliminary experiments showed that these tree-
banks needed a smaller analyzer model to perform
well. In this case, we choose kpv ikdp as our ref-
erence to obtain an optimal hyper-parameter con-
figuration.

In each case, hyper-parameters were optimized
over 30 iterations of random search guided by a
Tree-structured Parzen Estimator (TPE).4 Table 3
presents the hyper-parameters for the lemmatizer,
analyzer, and the small version of the analyzer.

For decoding of lemmas, we follow a greedy
approach to action sequence decoding. We also
experimented with beam search but the improve-
ments were not significant. Furthermore, we im-
plement heuristics to prune a predicted sequence
of actions. In addition to the heuristic of halt-
ing decoding if a PAD or STOP action is found,
we halt if the action is not valid given the current
string. For example, the action DEL- 5 -o can-
not be applied to string who for the simple reason

2https://pytorch.org/
3We wanted to use a language that is morphologically

more complex than English as our reference.
4We use HyperOpt library (http://hyperopt.

github.io/hyperopt/)

Hyper-parameter Lem Anlz Anlz-small
Batch size 128 24 40
Learning rate 6.90E-05 1.00E-04 0.01
Dropout 0.19 0.05 0.07
Epochs / patience 20 / 5 100 / 30 100 / 30
Action embedding 140 140 140
Action-LSTM cell 100 100 10
Word-LSTM cell - 100 40
FF layer size 100 100 100
Clipping threshold - - 0.38

Table 3: Hyper-parameters of all models proposed.
Lem = Lemmatizer; Anlz = Analyzer

that the string is not long enough and, hence, the
action is not valid.

6.3 Baseline model
We consider the baseline neural model provided
by the organizers of the shared task. The architec-
ture, proposed by Malaviya et al. (2019), performs
lemmatization and morphological tagging jointly.
The morphological tagging module of the model
employs an LSTM-based tagger (Heigold et al.,
2017), whilst the lemmatizer module employs a
sequence-to-sequence architecture with hard at-
tention mechanism (Xu et al., 2015).

6.4 Co-occurrence of actions and
morphological features

We further investigate the co-occurrence of ac-
tion labels with individual morphological features.
Given the word form wi and its associated mor-
phological tag F i = {f i0, ..., f ik, f iK} and action
sequence ai = 〈a0, ..., aj , ..., am, let us define
the joint probability distribution between individ-
ual features and action labels, as

p(f ik, a
i
j) = P (f

i
k|x1:i) · P (aij |ai1:j−1) (3)

We consider P (F i|x1:i) = P (f ik|x1:i),∀f ik ∈ F i.
Note that P (F i|x1:i) and P (aij |ai1:j−1) are the
probabilities obtained by the lemmatizer and tag-
ger in equations 1 and 2, respectively.

7 Results and Discussion

7.1 Lemmatization and Morphological
Tagging

Table 4 presents results on all metrics for the top
5 and bottom 5 scored treebanks according to the
MSD-F1 scores on the official test evaluation. Re-
sults for the development set are presented as av-
eraged over 10 runs with standard deviation value
in parenthesis.

https://pytorch.org/
http://hyperopt.github.io/hyperopt/
http://hyperopt.github.io/hyperopt/


108

In lemmatization, our model underperforms the
baseline for most treebanks, incurring in an error
increase ranging from 0.27% to 35.14% in lemma
accuracy. However, we improve over the base-
line on the following languages: Tagalog (tl trg),
Chinese (zh gsd, zh cfl), Cantonese (yue hk), and
Amharic (am att).

We hypothesize that the relative poor perfor-
mance in lemmatization stems from the input rep-
resentation, i,e. the action sequences. Combina-
tions of position information inside the token
( i ) and segment characters produces an action
setA that is too fine-grained and sparse, even after
the BPE merging of adjacent actions.

In morphological tagging, we observe an error
increase ranging from 0.31% to 7.34% in MSD-F1
score. The exception were Russian (ru gsd) and
Finnish (fi tdt) for which we obtain an error de-
crease of 34.88% and 46.71% in MSD-accuracy,5

respectively.

7.2 Actions and Morphological Features

Figure 2 shows the distribution of individual mor-
phological features over action labels, as defined
in Eq.3 for Czech (cs pdt). Every row represents
how likely a fine-grained feature label is to co-
occur with an action performed during lemmatiza-
tion of a token. On the left, we have co-occurrence
distributions of gold actions and gold feature la-
bels. On the right, we have co-occurrence distri-
butions of predicted actions and predicted feature
labels. For ease of visualization, we only plot the
20 most frequent action labels and the 30 most fre-
quent features in the development set. We can ob-
serve the lemmatizer and tagger succeed in fitting
the gold distribution. This is to be expected since
the distribution in Eq.3 depends on P (F i|x1:i) and
P (aj |a1:j), which are directly optimized by our
models. We obtain similar plots for Spanish, En-
glish, Turkish, German, and Arab.

This analysis also sheds light on which ac-
tions and morphological features the model learns
to associate. For example, action del-A -y
is strongly associated with features PL, N, and
MASC, in accordance with the suffix y being a
plural marker. Another notable example is that
of the prefix ne which negates a verb. We ob-
serve that action del- A-ne is strongly associ-
ated with feature V. We also observe ubiquitous

5We noticed that the official MSD-F1 score of the baseline
for these treebanks is reported as 0.

features such as POS (positive polarity), which
shows an annotation preference unless the bound
morpheme of negation is observed (ne).

8 Limitations

8.1 Fixed gold action sequences

Obtaining gold action sequences as a previous, in-
dependent step presents a drawback, as pointed
out by Makarov and Clematide (2018a). The op-
timal action sequence obtained for certain word-
lemma pair might not be unique. Hence, if the
lemmatizer predicts an alternative valid action se-
quence, the loss function would still penalize it
during training. Given that we consider only one
optimal sequence per word-lemma pair, our model
cannot take advantage of all the possible valid al-
ternative gold sequences.

8.2 Monotonic correspondence assumption

Previous work on neural transducers for morphol-
ogy tasks (Aharoni and Goldberg, 2017; Makarov
and Clematide, 2018b,a) rely on the fact that an
almost monotonic alignment of input and output
characters exists. This assumption also includes
that both words and lemmas are presented in the
same writing system (same-script condition), if no
off-the-shelf character mapper is used. Our ac-
tion sequencer relies on the same-script condition
in order to not produce too long sequences and in
turn, our lemmatizer relies on it to learn meaning-
ful sequences.

However, upon inspection, we identify a cou-
ple of treebanks that violate this condition. In the
first one, Arabic-PUD (ar pud), lemmas are ro-
manized, i.e. presented in Latin rather than Arabic
script. For the second one, Akkadian-PISANDUB
(akk pisandub), different writing systems (ideo-
graphic vs. syllabic) are encoded in the forms but
are not preserved in the lemmas. This encoding in-
cludes extra symbols such as hyphens and square
brackets as well as capitalization of continuous
segments. This kind of mismatch between word
forms and lemmas forces our lemmatizer to learn
action sequences that transform one character at a
time, leading to poor performance given our archi-
tecture (16.75% and 14.36% on lemmata accuracy
for ar pud and akk pisandub, respectively).

8.3 Lemmatizer biased to copy word forms

Languages with little to no morphology such as
Chinese or Vietnamese will bias a transducer into



109

Treebank Dev TestLAcc Lev-Dist MAcc M-F1 LAcc Lev-Dist MAcc M-F1
UD Catalan-AnCora 83.25(0.46) 0.27(0.01) 80.56(0.44) 85.59(0.35) 83.47 0.26 81.94 86.79
UD Spanish-GSD 93.78(0.34) 0.11(0.01) 77.58(0.31) 84.64(0.18) 93.83 0.10 78.44 85.06
UD Spanish-AnCora 85.68(0.28) 0.23(0.01) 78.42(0.24) 84.07(0.16) 84.68 0.24 79.66 84.72
UD French-GSD 86.49(0.45) 0.23(0.01) 79.95(0.16) 85.44(0.17) 86.85 0.21 78.59 84.51
UD Hindi-HDTB 92.73(0.26) 0.15(0.01) 69.02(0.42) 84.35(0.20) 92.92 0.15 69.43 84.38
UD Latin-Perseus 57.14(0.65) 1.12(0.01) 31.97(0.86) 33.77(1.46) 56.02 1.14 30.96 32.14
UD Lithuanian-HSE 49.47(0.58) 1.13(0.03) 22.53(6.82) 24.87(4.19) 35.82 1.24 21.39 28.57
UD Cantonese-HK 98.68(0.19) 0.02(0.00) 23.23(0.18) 25.11(0.17) 98.57 0.01 23.57 25.76
UD Chinese-CFL 100.00(0.00) 0.00(0.00) 24.21(0.06) 25.73(0.05) 99.53 0 23.29 24.71
UD Yoruba-YTB 96.80(0.00) 0.03(0.00) 24.40(0.31) 22.06(0.96) 96.12 0.04 20.54 17.5
Mean 74.39 0.62 44.07 53.79 74.94 0.62 50.37 58.81
Median 78.46 0.43 45.96 55.13 78.42 0.44 52.77 62.26

Table 4: Results on Task2 for the best and worst 5 treebanks. Scores over the development set are presented as mean
(std) values over 10 runs. Scores over test set are taken from the official results. LAcc = lemmatization accuracy;
Lev-Dist = Levenshtein distance of lemmas; MAcc = accuracy of morphosyntactic descriptions (features); M-F1
= F1 score of morphosyntactic descriptions.

IP
FV V

G
E

N
N

O
M

AD
J

PL
AC

T
FE

M
D

E
T

IN
S

PR
O

PN
V.

PT
C

P N
PS

T 3
M

AS
C

E
SS

IN
AN IN

D SG FI
N

N
E

U
T

AN
IM

_
PR

S
AD

P
AC

C
AD

V
C

O
N

J
PO

S

del.A_-m
subs.A_-o

del.A_-e
del.A_-o
del.A_-
del.A_-h
del.A_-c

subs.A_-a
subs._A-b

del.A_-u
subs.A_-ýt
subs.A_-ý
del._A-ne
subs.A_-e

del.A_-a
ins.A_-t
del.A_-i

subs.A_-t
del.A_-y
del.A_-í

Gold features

IP
FV V

G
E

N
N

O
M

AD
J

PL
AC

T
FE

M
D

E
T

IN
S

PR
O

PN
V.

PT
C

P N
PS

T 3
M

AS
C

E
SS

IN
AN IN

D SG FI
N

N
E

U
T

AN
IM

_
PR

S
AD

P
AC

C
AD

V
C

O
N

J
PO

S

Predicted features

0.0

0.2

0.4

0.6

0.8

1.0

Figure 2: Probability distribution of gold and predicted morphological features given a certain action label, for the
Czech-PDT treebank (cs pdt). For ease of visualization, we only plot the 20 most frequent action labels and the 30
most frequent features in the development set.



110

copying the whole input to the output, as pointed
out by Makarov and Clematide (2018b). Our pro-
posed lemmatizer exhibits the same kind of bias,
obtaining up to 99.53% of lemmata accuracy for
Chinese-CFL and Levenshtein distance of 0.0 in
test set and 100% and 0.0 in the development set.
Other languages benefit from this bias also, as can
be observed in Figure 3. We note that, on average,
the lemmatizer predicts no more than 3 actions be-
fore halting.

0.0 0.5 1.0 1.5 2.0 2.5
Average number of predicted actions

20

30

40

50

60

70

80

90

100

Le
m

m
at

a 
Ac

cu
ra

cy

Figure 3: Average number of predicted actions over de-
velopment set, not including the STOP operation, one
data point per treebank.

9 Conclusions

We presented our submission to the SIGMOR-
PHON 2019 Shared Task on Morphological Anal-
ysis and Lemmatization in context. We presented
a lemmatization strategy based on word formation
operations derived from extended edit-distance
operations that operate at the word level instead of
at the character leve. These operations are merged
using a BPE-inspired algorithm in order to encode
segment (prefix, suffix) information in addition to
the action to perform. Most notably, the proposed
models are capable of associate the derived inter-
pretable operations with morpho-syntactic feature
labels. We find that the proposed architectures un-
derperform the shared task baseline for most tree-
banks, showing plenty of room for improvement
in this regard.

References
Roee Aharoni and Yoav Goldberg. 2016. Morphologi-

cal inflection generation with hard monotonic atten-
tion. arXiv preprint arXiv:1611.01487.

Roee Aharoni and Yoav Goldberg. 2017. Morphologi-
cal inflection generation with hard monotonic atten-
tion. In Proceedings of the 55th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers), pages 2004–2015, Vancouver,
Canada. Association for Computational Linguistics.

Ronald Cardenas and Daniel Zeman. 2018. A mor-
phological analyzer for shipibo-konibo. SIGMOR-
PHON 2018, page 131.

Jason Eisner. 2002. Parameter estimation for proba-
bilistic finite-state transducers. In Proceedings of
the 40th Annual Meeting of the Association for Com-
putational Linguistics.

Philip Gage. 1994. A new algorithm for data compres-
sion. The C Users Journal, 12(2):23–38.

Alex Graves, Abdel-rahman Mohamed, and Geoffrey
Hinton. 2013. Speech recognition with deep recur-
rent neural networks. In 2013 IEEE international
conference on acoustics, speech and signal process-
ing, pages 6645–6649. IEEE.

Georg Heigold, Guenter Neumann, and Josef van Gen-
abith. 2017. An extensive empirical evaluation of
character-based morphological tagging for 14 lan-
guages. In Proceedings of the 15th Conference of
the European Chapter of the Association for Compu-
tational Linguistics: Volume 1, Long Papers, pages
505–513.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Katharina Kann and Hinrich Schütze. 2016. Single-
model encoder-decoder with explicit morphologi-
cal representation for reinflection. arXiv preprint
arXiv:1606.00589.

Diederik P Kingma and Jimmy Ba. 2017. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Christo Kirov, Ryan Cotterell, John Sylak-Glassman,
Géraldine Walther, Ekaterina Vylomova, Patrick
Xia, Manaal Faruqui, Sebastian J. Mielke, Arya Mc-
Carthy, Sandra Kübler, David Yarowsky, Jason Eis-
ner, and Mans Hulden. 2018. UniMorph 2.0: Uni-
versal Morphology. In Proceedings of the 11th
Language Resources and Evaluation Conference,
Miyazaki, Japan. European Language Resource As-
sociation.

Chu-Cheng Lin, Hao Zhu, Matthew R. Gormley, and
Jason Eisner. 2019. Neural finite-state transducers:
Beyond rational relations. In Proceedings of the
2019 Conference of the North American Chapter of
the Association for Computational Linguistics: Hu-
man Language Technologies, Volume 1 (Long and
Short Papers), pages 272–283, Minneapolis, Min-
nesota. Association for Computational Linguistics.

https://doi.org/10.18653/v1/P17-1183
https://doi.org/10.18653/v1/P17-1183
https://doi.org/10.18653/v1/P17-1183
https://www.aclweb.org/anthology/L18-1293
https://www.aclweb.org/anthology/L18-1293
https://www.aclweb.org/anthology/N19-1024
https://www.aclweb.org/anthology/N19-1024


111

Peter Makarov and Simon Clematide. 2018a. Imita-
tion learning for neural morphological string trans-
duction. In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Process-
ing, pages 2877–2882.

Peter Makarov and Simon Clematide. 2018b. Neu-
ral transition-based string transduction for limited-
resource setting in morphology. In Proceedings of
the 27th International Conference on Computational
Linguistics, pages 83–93.

Peter Makarov and Simon Clematide. 2018c. Uzh
at conll-sigmorphon 2018 shared task on univer-
sal morphological reinflection. Proceedings of the
CoNLL SIGMORPHON 2018 Shared Task: Univer-
sal Morphological Reinflection, pages 69–75.

Chaitanya Malaviya, Shijie Wu, and Ryan Cotterell.
2019. A simple joint model for improved contextual
neural lemmatization. In Proceedings of the 2019
Annual Conference of the North American Chap-
ter of the Association for Computational Linguistics
(NAACL).

Arya D. McCarthy, Miikka Silfverberg, Ryan Cotterell,
Mans Hulden, and David Yarowsky. 2018. Mar-
rying Universal Dependencies and Universal Mor-
phology. In Proceedings of the Second Workshop
on Universal Dependencies (UDW 2018), pages 91–
101, Brussels, Belgium. Association for Computa-
tional Linguistics.

Arya D. McCarthy, Ekaterina Vylomova, Shijie Wu,
Chaitanya Malaviya, Lawrence Wolf-Sonkin, Gar-
rett Nicolai, Christo Kirov, Miikka Silfverberg, Se-
bastian Mielke, Jeffrey Heinz, Ryan Cotterell, and
Mans Hulden. 2019. The SIGMORPHON 2019
shared task: Crosslinguality and context in morphol-
ogy. In Proceedings of the 16th SIGMORPHON
Workshop on Computational Research in Phonetics,
Phonology, and Morphology, Florence, Italy. Asso-
ciation for Computational Linguistics.

Mehryar Mohri. 2004. Weighted finite-state transducer
algorithms. an overview. In Formal Languages and
Applications, pages 551–563. Springer.

Joakim Nivre, Mitchell Abrams, Željko Agić, Lars
Ahrenberg, Lene Antonsen, Katya Aplonova,
Maria Jesus Aranzabe, Gashaw Arutie, Masayuki
Asahara, Luma Ateyah, Mohammed Attia, Aitz-
iber Atutxa, Liesbeth Augustinus, Elena Bad-
maeva, Miguel Ballesteros, Esha Banerjee, Sebas-
tian Bank, Verginica Barbu Mititelu, Victoria Bas-
mov, John Bauer, Sandra Bellato, Kepa Bengoetxea,
Yevgeni Berzak, Irshad Ahmad Bhat, Riyaz Ah-
mad Bhat, Erica Biagetti, Eckhard Bick, Rogier
Blokland, Victoria Bobicev, Carl Börstell, Cristina
Bosco, Gosse Bouma, Sam Bowman, Adriane
Boyd, Aljoscha Burchardt, Marie Candito, Bernard
Caron, Gauthier Caron, Gülşen Cebiroğlu Eryiğit,
Flavio Massimiliano Cecchini, Giuseppe G. A.
Celano, Slavomı́r Čéplö, Savas Cetin, Fabricio
Chalub, Jinho Choi, Yongseok Cho, Jayeol Chun,

Silvie Cinková, Aurélie Collomb, Çağrı Çöltekin,
Miriam Connor, Marine Courtin, Elizabeth David-
son, Marie-Catherine de Marneffe, Valeria de Paiva,
Arantza Diaz de Ilarraza, Carly Dickerson, Pe-
ter Dirix, Kaja Dobrovoljc, Timothy Dozat, Kira
Droganova, Puneet Dwivedi, Marhaba Eli, Ali
Elkahky, Binyam Ephrem, Tomaž Erjavec, Aline
Etienne, Richárd Farkas, Hector Fernandez Al-
calde, Jennifer Foster, Cláudia Freitas, Katarı́na
Gajdošová, Daniel Galbraith, Marcos Garcia, Moa
Gärdenfors, Sebastian Garza, Kim Gerdes, Filip
Ginter, Iakes Goenaga, Koldo Gojenola, Memduh
Gökırmak, Yoav Goldberg, Xavier Gómez Guino-
vart, Berta Gonzáles Saavedra, Matias Grioni, Nor-
munds Grūzı̄tis, Bruno Guillaume, Céline Guillot-
Barbance, Nizar Habash, Jan Hajič, Jan Hajič jr.,
Linh Hà Mỹ, Na-Rae Han, Kim Harris, Dag Haug,
Barbora Hladká, Jaroslava Hlaváčová, Florinel
Hociung, Petter Hohle, Jena Hwang, Radu Ion,
Elena Irimia, O. lájı́dé Ishola, Tomáš Jelı́nek, An-
ders Johannsen, Fredrik Jørgensen, Hüner Kaşıkara,
Sylvain Kahane, Hiroshi Kanayama, Jenna Kan-
erva, Boris Katz, Tolga Kayadelen, Jessica Ken-
ney, Václava Kettnerová, Jesse Kirchner, Kamil
Kopacewicz, Natalia Kotsyba, Simon Krek, Sooky-
oung Kwak, Veronika Laippala, Lorenzo Lam-
bertino, Lucia Lam, Tatiana Lando, Septina Dian
Larasati, Alexei Lavrentiev, John Lee, Phng
Lê H`ông, Alessandro Lenci, Saran Lertpradit, Her-
man Leung, Cheuk Ying Li, Josie Li, Keying
Li, KyungTae Lim, Nikola Ljubešić, Olga Logi-
nova, Olga Lyashevskaya, Teresa Lynn, Vivien
Macketanz, Aibek Makazhanov, Michael Mandl,
Christopher Manning, Ruli Manurung, Cătălina
Mărănduc, David Mareček, Katrin Marheinecke,
Héctor Martı́nez Alonso, André Martins, Jan
Mašek, Yuji Matsumoto, Ryan McDonald, Gus-
tavo Mendonça, Niko Miekka, Margarita Misir-
pashayeva, Anna Missilä, Cătălin Mititelu, Yusuke
Miyao, Simonetta Montemagni, Amir More, Laura
Moreno Romero, Keiko Sophie Mori, Shinsuke
Mori, Bjartur Mortensen, Bohdan Moskalevskyi,
Kadri Muischnek, Yugo Murawaki, Kaili Müürisep,
Pinkey Nainwani, Juan Ignacio Navarro Horñiacek,
Anna Nedoluzhko, Gunta Nešpore-Bērzkalne, Lng
Nguy˜ên Thi., Huy`ên Nguy˜ên Thi. Minh, Vi-
taly Nikolaev, Rattima Nitisaroj, Hanna Nurmi,
Stina Ojala, Adédayo. Olúòkun, Mai Omura, Petya
Osenova, Robert Östling, Lilja Øvrelid, Niko
Partanen, Elena Pascual, Marco Passarotti, Ag-
nieszka Patejuk, Guilherme Paulino-Passos, Siyao
Peng, Cenel-Augusto Perez, Guy Perrier, Slav
Petrov, Jussi Piitulainen, Emily Pitler, Barbara
Plank, Thierry Poibeau, Martin Popel, Lauma
Pretkalniņa, Sophie Prévost, Prokopis Proko-
pidis, Adam Przepiórkowski, Tiina Puolakainen,
Sampo Pyysalo, Andriela Rääbis, Alexandre Rade-
maker, Loganathan Ramasamy, Taraka Rama, Car-
los Ramisch, Vinit Ravishankar, Livy Real, Siva
Reddy, Georg Rehm, Michael Rießler, Larissa Ri-
naldi, Laura Rituma, Luisa Rocha, Mykhailo Ro-
manenko, Rudolf Rosa, Davide Rovati, Valentin
Roca, Olga Rudina, Jack Rueter, Shoval Sadde,

https://www.aclweb.org/anthology/W18-6011
https://www.aclweb.org/anthology/W18-6011
https://www.aclweb.org/anthology/W18-6011


112

Benoı̂t Sagot, Shadi Saleh, Tanja Samardžić,
Stephanie Samson, Manuela Sanguinetti, Baiba
Saulı̄te, Yanin Sawanakunanon, Nathan Schnei-
der, Sebastian Schuster, Djamé Seddah, Wolfgang
Seeker, Mojgan Seraji, Mo Shen, Atsuko Shi-
mada, Muh Shohibussirri, Dmitry Sichinava, Na-
talia Silveira, Maria Simi, Radu Simionescu, Katalin
Simkó, Mária Šimková, Kiril Simov, Aaron Smith,
Isabela Soares-Bastos, Carolyn Spadine, Antonio
Stella, Milan Straka, Jana Strnadová, Alane Suhr,
Umut Sulubacak, Zsolt Szántó, Dima Taji, Yuta
Takahashi, Takaaki Tanaka, Isabelle Tellier, Trond
Trosterud, Anna Trukhina, Reut Tsarfaty, Francis
Tyers, Sumire Uematsu, Zdeňka Urešová, Larraitz
Uria, Hans Uszkoreit, Sowmya Vajjala, Daniel van
Niekerk, Gertjan van Noord, Viktor Varga, Eric
Villemonte de la Clergerie, Veronika Vincze, Lars
Wallin, Jing Xian Wang, Jonathan North Washing-
ton, Seyi Williams, Mats Wirén, Tsegay Wolde-
mariam, Tak-sum Wong, Chunxiao Yan, Marat M.
Yavrumyan, Zhuoran Yu, Zdeněk Žabokrtský, Amir
Zeldes, Daniel Zeman, Manying Zhang, and Hanzhi
Zhu. 2018. Universal dependencies 2.3. LIN-
DAT/CLARIN digital library at the Institute of For-
mal and Applied Linguistics (ÚFAL), Faculty of
Mathematics and Physics, Charles University.

José Pereira-Noriega, Rodolfo Mercado-Gonzales,
Andrés Melgar, Marco Sobrevilla-Cabezudo, and
Arturo Oncevay-Marcos. 2017. Ship-lemmatagger:
Building an nlp toolkit for a peruvian native lan-
guage. In International Conference on Text, Speech,
and Dialogue, pages 473–481. Springer.

Pushpendre Rastogi, Ryan Cotterell, and Jason Eisner.
2016. Weighting finite-state transductions with neu-
ral context. In Proceedings of the 2016 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, pages 623–633.

Annette Rios. 2016. A basic language technology
toolkit for quechua. Procesamiento del Lenguaje
Natural, (56):91–94.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Neural machine translation of rare words
with subword units. In Proceedings of the 54th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1715–
1725, Berlin, Germany. Association for Computa-
tional Linguistics.

Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. The Journal of Machine Learning
Research, 15(1):1929–1958.

Kelvin Xu, Jimmy Lei Ba, Ryan Kiros, Kyunghyun
Cho, Aaron Courville, Ruslan Salakhutdinov,
Richard S. Zemel, and Yoshua Bengio. 2015. Show,
attend and tell: Neural image caption generation
with visual attention. In Proceedings of the 32Nd In-
ternational Conference on International Conference

on Machine Learning - Volume 37, ICML’15, pages
2048–2057. JMLR.org.

Acknowledgments

This research is supported by the Erasmus Mundus
European Masters Program in Language and
Communication Technologies (LCT).

http://hdl.handle.net/11234/1-2895
https://doi.org/10.18653/v1/P16-1162
https://doi.org/10.18653/v1/P16-1162
http://dl.acm.org/citation.cfm?id=3045118.3045336
http://dl.acm.org/citation.cfm?id=3045118.3045336
http://dl.acm.org/citation.cfm?id=3045118.3045336

