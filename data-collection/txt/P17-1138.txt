



















































Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics


Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1503–1513
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-1138

Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1503–1513
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-1138

Bandit Structured Prediction
for Neural Sequence-to-Sequence Learning

Julia Kreutzer∗ and Artem Sokolov∗ and Stefan Riezler†,∗
∗Computational Linguistics & †IWR, Heidelberg University, Germany

{kreutzer,sokolov,riezler}@cl.uni-heidelberg.de

Abstract

Bandit structured prediction describes a
stochastic optimization framework where
learning is performed from partial feed-
back. This feedback is received in
the form of a task loss evaluation to
a predicted output structure, without
having access to gold standard struc-
tures. We advance this framework by
lifting linear bandit learning to neural
sequence-to-sequence learning problems
using attention-based recurrent neural net-
works. Furthermore, we show how to in-
corporate control variates into our learning
algorithms for variance reduction and im-
proved generalization. We present an eval-
uation on a neural machine translation task
that shows improvements of up to 5.89
BLEU points for domain adaptation from
simulated bandit feedback.

1 Introduction

Many NLP tasks involve learning to predict a
structured output such as a sequence, a tree or a
graph. Sequence-to-sequence learning with neu-
ral networks has recently become a popular ap-
proach that allows tackling structured prediction
as a mapping problem between variable-length se-
quences, e.g., from foreign language sentences
into target-language sentences (Sutskever et al.,
2014), or from natural language input sentences
into linearized versions of syntactic (Vinyals et al.,
2015) or semantic parses (Jia and Liang, 2016).
A known bottleneck in structured prediction is
the requirement of large amounts of gold-standard
structures for supervised learning of model pa-
rameters, especially for data-hungry neural net-
work models. Sokolov et al. (2016a,b) presented
a framework for stochastic structured prediction
under bandit feedback that alleviates the need for

labeled output structures in learning: Following
an online learning protocol, on each iteration the
learner receives an input, predicts an output struc-
ture, and receives partial feedback in form of a task
loss evaluation of the predicted structure.1 They
“banditize” several objective functions for linear
structured predictions, and evaluate the resulting
algorithms with simulated bandit feedback on var-
ious NLP tasks.

We show how to lift linear structured predic-
tion under bandit feedback to non-linear models
for sequence-to-sequence learning with attention-
based recurrent neural networks (Bahdanau et al.,
2015). Our framework is applicable to sequence-
to-sequence learning from various types of weak
feedback. For example, extracting learning signals
from the execution of structured outputs against
databases has been established in the communi-
ties of semantic parsing and grounded language
learning since more than a decade (Zettlemoyer
and Collins, 2005; Clarke et al., 2010; Liang et al.,
2011). Our work can build the basis for neural se-
mantic parsing from weak feedback.

In this paper, we focus on the application of ma-
chine translation via neural sequence-to-sequence
learning. The standard procedure of training neu-
ral machine translation (NMT) models is to com-
pare their output to human-generated translations
and to infer model updates from this comparison.
However, the creation of reference translations or
post-edits requires professional expertise of users.
Our framework allows NMT models to learn from
feedback that is weaker than human references or
post-edits. One could imagine a scenario of per-
sonalized machine translation where translations
have to be adapted to the user’s specific purpose
and domain. The feedback required by our meth-
ods can be provided by laymen users or can even

1The name “bandit feedback” is inherited from the prob-
lem of maximizing the reward for a sequence of pulls of arms
of so-called “one-armed bandit” slot machines.

1503

https://doi.org/10.18653/v1/P17-1138
https://doi.org/10.18653/v1/P17-1138


be implicit, e.g., inferred from user interactions
with the translated content on a web page.

Starting from the work of Sokolov et al.
(2016a,b), we lift their objectives to neural
sequence-to-sequence learning. We evaluate the
resulting algorithms on the task of French-to-
English translation domain adaptation where a
seed model trained on Europarl data is adapted
to the NewsCommentary and the TED talks do-
main with simulated weak feedback. By learn-
ing from this feedback, we find 4.08 BLEU points
improvements on NewsCommentary, and 5.89
BLEU points improvement on TED. Furthermore,
we show how control variates can be integrated
in our algorithms, yielding faster learning and im-
proved generalization in our experiments.

2 Related Work

NMT models are most commonly trained un-
der a word-level maximum likelihood objective.
Even though this objective has successfully been
applied to many sequence-to-sequence learning
tasks, the resulting models suffer from exposure
bias, since they learn to generate output words
based on the history of given reference words, not
on their own predictions. Ranzato et al. (2016) ap-
ply techniques from reinforcement learning (Sut-
ton and Barto, 1998; Sutton et al., 2000) and im-
itation learning (Schaal, 1999; Ross et al., 2011;
Daumé et al., 2009) to learn from feedback to the
model’s own predictions. Furthermore, they ad-
dress the mismatch between word-level loss and
sequence-level evaluation metric by using a mix-
ture of the REINFORCE (Williams, 1992) algo-
rithm and the standard maximum likelihood train-
ing to directly optimize a sequence-level loss.
Similarly, Shen et al. (2016) lift minimum risk
training (Och, 2003; Smith and Eisner, 2006; Gim-
pel and Smith, 2010; Yuille and He, 2012; He
and Deng, 2012) from linear models for machine
translation to NMT. These works are closely re-
lated to ours in that they use the technique of score
function gradient estimators (Fu, 2006; Schulman
et al., 2015) for stochastic learning. However, the
learning environment of Shen et al. (2016) is dif-
ferent from ours in that they approximate the true
gradient of the risk objective in a full information
setting by sampling a subset of translations and
computing the expectation over their rewards. In
our bandit setting, feedback to only a single sam-
ple per sentence is available, making the learning

problem much harder. The approach by Ranzato
et al. (2016) approximates the expectation with
single samples, but still requires reference trans-
lations which are unavailable in the bandit setting.

To our knowledge, the only work on training
NMT from weak feedback is the work by He et al.
(2016). They propose a dual-learning mechanism
where two translation models are jointly trained
on monolingual data. The feedback in this case is
a reward signal from language models and a recon-
struction error. This is attractive because the feed-
back can automatically be generated from mono-
lingual data and does not require any human ref-
erences. However, we are interested in using esti-
mates of human feedback on translation quality to
directly adapt the model to the users’ needs.

Our approach follows most closely the work of
Sokolov et al. (2016a,b). They introduce ban-
dit learning objectives for structured prediction
and apply them to various NLP tasks, including
machine translation with linear models. Their
approach can be seen as an instantiation of re-
inforcement learning to one-state Markov deci-
sion processes under linear policy models. In
this paper, we transfer their algorithms to non-
linear sequence-to-sequence learning. Sokolov
et al. (2016a) showed applications of linear bandit
learning to tasks such as multiclass-classification,
OCR, and chunking, where learning can be done
from scratch. We focus on lifting their linear ma-
chine translation experiments to the more complex
NMT that requires a warm start for training. This
is done by training a seed model on one domain
and adapting it to a new domain based on bandit
feedback only. For this task we build on the work
of Freitag and Al-Onaizan (2016), who investigate
strategies to find the best of both worlds: models
that adapt well to the new domain without deteri-
orating on the old domain. In contrast to previous
approaches to domain adaptation for NMT, we do
not require in-domain parallel data, but consult di-
rect feedback to the translations generated for the
new domain.

3 Neural Machine Translation

Neural models for machine translation are based
on a sequence-to-sequence learning architecture
consisting of an encoder and a decoder (Cho et al.,
2014; Sutskever et al., 2014; Bahdanau et al.,
2015). An encoder Recurrent Neural Network
(RNN) reads in the source sentence and a decoder

1504



RNN generates the target sentence conditioned on
the encoded source.

The input to the encoder is a sequence of vec-
tors x = (x1, . . . , xTx) representing a sequence
of source words of length Tx. In the approach
of Sutskever et al. (2014), they are encoded into
a single vector c = q({h1, . . . , hTx}), where
ht = f(xt, ht−1) is the hidden state of the RNN
at time t. Several choices are possible for the
non-linear functions f and q: Here we are using a
Gated Recurrent Unit (GRU) (Chung et al., 2014)
for f , and for q an attention mechanism that de-
fines the context vector as a weighted sum over
encoder hidden states (Bahdanau et al., 2015; Lu-
ong et al., 2015a).

The decoder RNN predicts the next target word
yt at time t given the context vector c and the pre-
vious target words y<t = {y1, . . . , yt−1} from
a probability distribution over the target vocab-
ulary V . This distribution is the result of a
softmax transformation of the decoder outputs
o = {o1, . . . , oTy}, such that

pθ(yt = wi|y<t, c) =
exp(owi)∑V
v=1 exp(owv)

.

The probability of a full sequence of outputs y =
(y1, . . . , yTy) of length Ty is defined as the product
of the conditional word probabilities:

pθ(y|x) =
Ty∏

t=1

pθ(yt|y<t, c).

Since this encoder-decoder architecture is fully
differentiable, it can be trained with gradient de-
scent methods. Given a parallel training set of S
source sentences and their reference translations
D = {(x(s),y(s))}Ss=1, we can define a word-
level Maximum Likelihood Estimation (MLE) ob-
jective, which aims to find the parameters

θ̂MLE = arg max
θ

LMLE(θ)

of the following loss function:

LMLE(θ) =

S∑

s=1

log pθ(y
(s)|x(s))

=

S∑

s=1

Ty∑

t=1

log pθ(yt|x(s),y(s)<t ).

This loss function is non-convex for the case of
neural networks. Clever initialization strategies,

Algorithm 1 Neural Bandit Structured Prediction
Input: Sequence of learning rates γk
Output: Optimal parameters θ̂

1: Initialize θ0
2: for k = 0, . . . ,K do
3: Observe xk
4: Sample ỹk ∼ pθ(y|xk)
5: Obtain feedback ∆(ỹk)
6: θk+1 = θk − γk sk
7: Choose a solution θ̂ from the list {θ0, . . . , θK}

adaptive learning rates and momentum techniques
are required to find good local maxima and to
speed up convergence (Sutskever et al., 2013).
Another trick of the trade is to ensemble several
models with different random initializations to im-
prove over single models (Luong et al., 2015a).

At test time, we face a search problem to find
the sequence of target words with the highest prob-
ability. Beam search reduces the search error in
comparison to greedy search, but also exponen-
tially increases decoding time.

4 Neural Bandit Structured Prediction

Algorithm 1 is an adaptation of the Bandit Struc-
tured Prediction algorithm of Sokolov et al.
(2016b) to neural models: For K rounds, a model
with parameters θ receives an input, samples
an output structure, and receives user feedback.
Based on this feedback, a stochastic gradient sk is
computed and the model parameters are updated.
As a post-optimization step, a solution θ̂ is se-
lected from the iterates. This is done with online-
to-batch conversion by choosing the model with
optimal performance on held-out data.

The core of the algorithm is the sampling: if the
model distribution is very peaked, the model ex-
ploits, i.e., it presents the most probable outputs
to the user. If the distribution is close to uniform,
the model explores, i.e., it presents random out-
puts to the user. The balance between exploitation
and exploration is crucial to the learning process:
in the beginning the model is rather uninformed
and needs to explore in order to find outputs with
high reward, while in the end it ideally converges
towards a peaked distribution that exactly fits the
user’s needs. Pre-training the model, i.e. set-
ting θ0 wisely, ensures a reasonable exploitation-
exploration trade-off.

This online learning algorithm can be applied

1505



to any objective L provided the stochastic gradi-
ents sk are unbiased estimators of the true gradi-
ent of the objective, i.e., we require ∇L = E[sk].
In the following, we will present objectives from
Sokolov et al. (2016b) transferred to neural mod-
els, and explain how they can be enhanced by con-
trol variates.

4.1 Expected Loss (EL) Minimization
The first objective is defined as the expectation of
a task loss ∆(ỹ), e.g. −BLEU(ỹ), over all input
and output structures:

LEL(θ) =Ep(x) pθ(ỹ|x) [∆(ỹ)] . (1)

In the case of full-information learning where ref-
erence outputs are available, we could evaluate all
possible outputs against the reference to obtain an
exact estimation of the loss function. However,
this is not feasible in our setting since we only re-
ceive partial feedback for a single output structure
per input. Instead, we use stochastic approxima-
tion to optimize this loss. The stochastic gradient
for this objective is computed as follows:

sELk =∆(ỹ)
∂ log pθ(ỹ|xk)

∂θ
. (2)

Objective (1) is known from minimum risk train-
ing (Och, 2003) and has been lifted to NMT by
Shen et al. (2016) – but not for learning from weak
feedback. Equation (2) is an instance of the score
function gradient estimator (Fu, 2006) where

∇ log pθ(ỹ|xk) (3)

denotes the score function. We give an algorithm
to sample structures from an encoder-decoder
model in Algorithm 2. It corresponds to the algo-
rithm presented by Shen et al. (2016) with the dif-
ference that it samples single structures, does not
assume a reference structure, and additionally re-
turns the sample probabilities. A similar objective
has also been used in the REINFORCE algorithm
(Williams, 1992) which has been adapted to NMT
by Ranzato et al. (2016).

4.2 Pairwise Preference Ranking (PR)
The previous objective requires numerical feed-
back as an estimate of translation quality. Alterna-
tively, we can learn from pairwise preference judg-
ments that are formalized in preference ranking
objectives. Let P(x) = {〈yi,yj〉 |yi,yj ∈ Y(x)}
denote the set of output pairs for an input x, and

let ∆(〈yi,yj〉) : P(x) → [0, 1] denote a task loss
function that specifies a dispreference of yi over
yj . In our experimental simulations we use two
types of pairwise feedback. Firstly, continuous
pairwise feedback2 is computed as

∆(〈yi,yj〉) = ∆(yj)−∆(yi),

and secondly, binary feedback is computed as

∆(〈yi,yj〉) =
{

1 if ∆(yj) > ∆(yi),
0 otherwise.

Analogously to the sequence-level sampling for
linear models (Sokolov et al., 2016b), we define
the following probabilities for word-level sam-
pling:

p+θ (ỹt = wi|x, ŷ<t) =
exp(owi)∑V
v=1 exp(owv)

,

p−θ (ỹt = wj |x, ŷ<t) =
exp(−owj )∑V
v=1 exp(−owv)

.

The effect of the negation within the softmax is
that the two distributions p+θ and p

−
θ rank the next

candidate target words ỹt (given the same his-
tory, here the greedy output ŷ<t) in opposite or-
der. Globally normalized models as in the linear
case, or LSTM-CRFs (Huang et al., 2015) for the
non-linear case would allow sampling full struc-
tures such that the ranking over full structures is
reversed. But in the case of locally normalized
RNNs we retrieve only locally reversed-rank sam-
ples. Since we want the model to learn to rank
ỹi over ỹj , we would have to sample ỹi word-by-
word from p+θ and ỹj from p

−
θ . However, sam-

pling all words of ỹj from p−θ leads to transla-
tions that are neither fluent nor source-related, so
we propose to randomly choose one position of
ỹj where the next word is sampled from p−θ and
sample the remaining words from p+θ . We found
that this method produces suitable negative sam-
ples, which are only slightly perturbed and still
relatively fluent and source-related. A detailed al-
gorithm is given in Algorithm 3.

In the same manner as for linear models, we de-
fine the probability of a pair of sequences as

pθ(〈ỹi, ỹj〉 |x) = p+θ (ỹi|x)× p−θ (ỹj |x).
2Note that our definition of continuous feedback is

slightly different from the one proposed in Sokolov et al.
(2016b) where updates are only made for misrankings.

1506



Algorithm 2 Sampling Structures
Input: Model θ, target sequence length limit Ty
Output: Sequence of words w = (w1, . . . , wT y)

and log-probability p
1: w0 = START, p0 = 0
2: w = (w0)
3: for t← 1 . . . Ty do
4: wt ∼ pθ(w|x,w<t)
5: pt = pt−1 + log pθ(w|x,w<t)
6: w = (w1, . . . , wt−1, wt)
7: end for
8: Return w and pT

Note that with the word-based sampling scheme
described above, the sequence ỹj also includes
words sampled from p+θ .
The pairwise preference ranking objective ex-
presses an expectation over losses over these pairs:

LPR(θ) =Ep(x) pθ(〈ỹi,ỹj〉|x) [∆(〈ỹi, ỹj〉)] . (4)

The stochastic gradient for this objective is

sPRk =∆(〈ỹi, ỹj〉) (5)

×
(
∂ log p+θ (ỹi|xk)

∂θ
+
∂ log p−θ (ỹj |xk)

∂θ

)
.

This training procedure resembles well-known ap-
proaches for noise contrastive estimation (Gut-
mann and Hyvärinen, 2010) with negative sam-
pling that are commonly used for neural language
modeling (Collobert et al., 2011; Mnih and Teh,
2012; Mikolov et al., 2013). In these approaches,
negative samples are drawn from a non-parametric
noise distribution, whereas we draw them from the
perturbed model distribution.

4.3 Control Variates
The stochastic gradients defined in equations (2)
and (5) can be used in stochastic gradient descent
optimization (Bottou et al., 2016) where the full
gradient is approximated using a minibatch or a
single example in each update. The stochastic
choice, in our case on inputs and outputs, intro-
duces noise that leads to slower convergence and
degrades performance. In the following, we ex-
plain how antithetic and additive control variate
techniques from Monte Carlo simulation (Ross,
2013) can be used to remedy these problems.

The idea of additive control variates is to aug-
ment a random variable X whose expectation is

Algorithm 3 Sampling Pairs of Structures
Input: Model θ, target sequence length limit Ty
Output: Pair of sequences 〈w,w′〉 and their log-

probability p
1: p0 = 0
2: w,w′, ŵ = (START)
3: i ∼ U(1, T )
4: for t← 1 . . . Ty do
5: ŵt = arg maxw∈V p

+
θ (w|x, ŵ<t)

6: wt ∼ p+θ (w|x, ŵ<t)
7: pt = pt−1 + log p

+
θ (wt|x, ŵ<t)

8: if i = t then
9: w′t ∼ p−θ (w|x, ŵ<t)

10: pt = pt + log p
−
θ (w

′
t|x, ŵ<t)

11: else
12: w′t ∼ p+θ (w|x, ŵ<t)
13: pt = pt + log p

+
θ (w

′
t|x, ŵ<t)

14: end if
15: w = (w1, . . . , wt−1, wt)
16: w′ = (w′1, . . . , w

′
t−1, w

′
t)

17: ŵ = (ŵ1, . . . , ŵt−1, ŵt)
18: end for
19: Return 〈w,w′〉 and pT

sought, by another random variable Y to which X
is highly correlated. Y is then called the control
variate. Let Ȳ furthermore denote its expectation.
Then the following quantityX−ĉ Y+ĉ Ȳ is an un-
biased estimator of E[X]. In our case, the random
variable of interest is the noisy gradient X = sk
from Equation (2). The variance reduction effect
of control variates can be seen by computing the
variance of this quantity:

Var(X − ĉ Y ) = Var(X) + ĉ2Var(Y ) (6)
− 2ĉCov(X,Y ).

Choosing a control variate such that Cov(X,Y )
is positive and high enough, the variance of the
gradient estimate will be reduced.

An example is the average reward baseline
known from reinforcement learning (Williams,
1992), yielding

Yk = ∇ log pθ(ỹ|xk)
1

k

k∑

j=1

∆(ỹj). (7)

The optimal scalar ĉ can be derived easily by tak-
ing the derivative of (6), leading to ĉ = Cov(X,Y )Var(X) .
This technique has been applied to using the score

1507



function (Equation (3)) as control variate in Ran-
ganath et al. (2014), yielding the following control
variate:

Y k = ∇ log pθ(ỹ|xk). (8)

Note that for both types of control variates, (7) and
(8), the expectation Ȳ is zero, simplifying the im-
plementation. However, the optimal scalar ĉ has
to be estimated for every entry of the gradient sep-
arately for the score function control variate. We
will explore both types of control variates for the
stochastic gradient (2) in our experiments.

A further effect of control variates is to reduce
the magnitude of the gradient, the more so the
more the stochastic gradient and the control vari-
ate covary. For L-Lipschitz continuous functions,
a reduced gradient norm directly leads to a bound
on L which appears in the algorithmic stability
bounds of Hardt et al. (2016). This effect of im-
proved generalization by control variates is empir-
ically validated in our experiments.

A similar variance reduction effect can be ob-
tained by antithetic control variates. Here E[X] is
approximated by the estimator X1+X22 whose vari-
ance is

Var
(
X1 +X2

2

)
=

1

4

(
Var(X1) (9)

+ Var(X2) + 2Cov(X1, X2)
)
.

Choosing the variates X1 and X2 such that
Cov(X1, X2) is negative will reduce the variance
of the gradient estimate. Under certain assump-
tions, the stochastic gradient (5) of the pairwise
preference objective can be interpreted as an an-
tithetic estimator of the score function (3). The
antithetic variates in this case would be

X1 = ∇ log p+θ (ỹi|xk), (10)
X2 = ∇ log p−θ (ỹj |xk),

where an antithetic dependence of X2 on X1 can
be achieved by construction of p+θ and p

−
θ (see

Capriotti (2008) which is loosely related to our
approach). Similar to control variates, antithetic
variates have the effect of shrinking the gradient
norm, the more so the more the variates are anti-
thetically correlated, leading to possible improve-
ments in algorithmic stability (Hardt et al., 2016).

5 Experiments

In the following, we present an experimental eval-
uation of the learning objectives presented above

Domain Version Train Valid. Test

Europarl v.5 1.6M 2k 2k
News Commentary WMT07 40k 1k 2k
TED TED2013 153k 2k 2k

Table 1: Number of parallel sentences for train-
ing, validation and test sets for French-to-English
domain adaptation.

on machine translation domain adaptation. We
compare how the presented neural bandit learn-
ing objectives perform in comparison to linear
models, then discuss the handling of unknown
words and eventually investigate the impact of
techniques for variance reduction.

5.1 Setup

Data. We perform domain adaptation from Eu-
roparl (EP) to News Commentary (NC) and TED
talks (TED) for translations from French to En-
glish. Table 1 provides details about the datasets.
For data pre-processing we follow the procedure
of Sokolov et al. (2016a,b) using cdec tools for
filtering, lowercasing and tokenization. The chal-
lenge for the bandit learner is to adapt from the EP
domain to NC or TED with weak feedback only.

NMT Models. We choose a standard encoder-
decoder architecture with single-layer GRU RNNs
with 800 hidden units, a word embedding size of
300 and tanh activations. The encoder consists
of a bidirectional RNN, where the hidden states
of backward and forward RNN are concatenated.
The decoder uses the attention mechanism pro-
posed by Bahdanau et al. (2015).3 Source and
target vocabularies contain the 30k most frequent
words of the respective parts of the training cor-
pus. We limit the maximum sentence length to
50. Dropout (Srivastava et al., 2014) with a prob-
ability of 0.5 is applied to the network in several
places: on the embedded inputs, before the output
layer, and on the initial state of the decoder RNN.
The gradient is clipped when its norms exceeds
1.0 to prevent exploding gradients and stabilize
learning (Pascanu et al., 2013). All models are im-
plemented and trained with the sequence learning
framework Neural Monkey (Libovickỳ et al.,

3We do not use beam search nor ensembling, although we
are aware that higher performance is almost guaranteed with
these techniques. Our goal is to show relative differences be-
tween different models, so a simple setup is sufficient for the
purpose of our experiments.

1508



2016; Bojar et al., 2016).4 They are trained with a
minibatch size of 20, fitting onto single 8GB GPU
machines. The training dataset is shuffled before
each epoch.

Baselines. The out-of-domain baseline is trained
on the EP training set with standard MLE. For
both NC and TED domains, we train two full-
information in-domain baselines: The first in-
domain baseline is trained on the relatively small
in-domain training data. The second in-domain
baseline starts from the out-of-domain model and
is further trained on the in-domain data. All base-
lines are trained with MLE and Adam (Kingma
and Ba, 2014) (α = 1× 10−4, β1 = 0.9,
β2 = 0.999) until their performance stops in-
creasing on respective held-out validation sets.
The gap between the performance of the out-of-
domain model and the in-domain models defines
the range of possible improvements for bandit
learning. All models are evaluated with Neural
Monkey’s mteval. For statistical significance
tests we used Approximate Randomization testing
(Noreen, 1989).

Bandit Learning. Bandit learning starts with
the parameters of the out-of-domain baseline.
The bandit models are expected to improve over
the out-of-domain baseline by receiving feedback
from the new domain, but at most to reach the in-
domain baseline since the feedback is weak. The
models are trained with Adam on in-domain data
for at most 20 epochs. Adam’s step-size param-
eter α was tuned on the validation set and was
found to perform best when set to 1× 10−5 for
non-pairwise, 1× 10−6 for pairwise objectives on
NC, 1× 10−7 for pairwise objectives on TED.
The best model parameters, selected with early
stopping on the in-domain validation set, are eval-
uated on the held-out in-domain test set. In the
spirit of Freitag and Al-Onaizan (2016) they are
additionally evaluated on the out-of-domain test
set to investigate how much knowledge of the old
domain the models lose while adapting to the new
domain. Bandit learning experiments are repeated
two times, with different random seeds, and mean
BLEU scores with standard deviation are reported.

4The Neural Monkey fork https://github.
com/juliakreutzer/bandit-neuralmonkey con-
tains bandit learning objectives and the configuration files for
our experiments.

Feedback Simulation. Weak feedback is simu-
lated from the target side of the parallel corpus,
but references are never revealed to the learner.
Sokolov et al. (2016a,b) used a smoothed version
of per-sentence BLEU for simulating the weak
feedback for generated translations from the com-
parison with reference translations. Here, we use
gGLEU instead, which Wu et al. (2016) recently
introduced for learning from sentence-level re-
ward signals correlating well with corpus BLEU.
This metric is closely related to BLEU, but does
not have a brevity penalty and considers the recall
of matching n-grams. It is defined as the mini-
mum of recall and precision over the total n-grams
up to a certain n. Hence, for our experiments
∆(ỹ) = −gGLEU(ỹ,y), where ỹ is a sample
translation and y is the reference translation.

Unknown words. One drawback of NMT mod-
els is their limitation to a fixed source- and target
vocabulary. In a domain adaptation setting, this
limitation has a critical impact to the translation
quality. The larger the distance between old and
new domain, the more words in the new domain
are unknown to the models trained on the old do-
main (represented with a special UNK token). We
consider two strategies for this problem for our ex-
periments:

1. UNK-Replace: Jean et al. (2015) and Luong
et al. (2015b) replace generated UNK tokens
with aligned source words or their lexical
translations in a post-processing step. Fre-
itag and Al-Onaizan (2016) and Hashimoto
et al. (2016) demonstrated that this technique
is beneficial for NMT domain adaptation.

2. BPE: Sennrich et al. (2016) introduce byte
pair encoding (BPE) for word segmenta-
tion to build translation models on sub-word
units. Rare words are decomposed into sub-
word units, while the most frequent words re-
main single vocabulary items.

For UNK-Replace we use fast align to gen-
erate lexical translations on the EP training data.
When an UNK token is generated, we look up the
attention weights and find the source token that
receives most attention in this step. If possible,
we replace the UNK token by its lexical trans-
lation. If it is not included in the lexical trans-
lations, it is replaced by the source token. The
main benefit of this technique is that it deals well

1509



Algorithm Train data Iter. EP NC TED

MLE EP 12.3M 31.44 26.98 23.48
MLE-UNK 31.82 28.00 24.59
MLE-BPE 12.0M 31.81 27.20 24.35

Table 2: Out-of-domain NMT baseline results
(BLEU) on in- and out-of-domain test sets trained
only on EP data.

with unknown named entities that are just passed
through from source to target. However, since
it is a non-differentiable post-processing step, the
NMT model cannot directly be trained for this be-
havior. Therefore we also train sub-word level
NMT with BPE. We apply 29,800 merge opera-
tions to obtain a vocabulary of 29,908 sub-words.
The procedure for training these models is exactly
the same as for the word-based models. The ad-
vantage of this method is that the model is in prin-
ciple able to generate any word composing it from
sub-word units. However, training sequences be-
come longer and candidate translations are sam-
pled on a sub-word level, which introduces the risk
of sampling nonsense words.

Control variates. We implement the average
baseline control variate as defined in Equation 7,
which results in keeping an running average over
previous losses. Intuitively, absolute gGLEU feed-
back is turned into relative feedback that reflects
the current state of the model. The sign of the up-
date is switched when the gGLEU for the current
sample is worse than the average gGLEU, so the
model makes a step away from it, while in the case
of absolute feedback it would still make a small
step towards it. In addition, we implement the
score function control variate with a running es-
timate ĉk = 1k

∑k
j=1

Cov(sj ,∇ log pθ(ỹj |xj))
Var(sj)

.

5.2 Results

In the following, we discuss the results of the
experimental evaluation of the models described
above. The out-of-domain baseline results are
given in Table 2, those for the in-domain baselines
in 3. The results for bandit learning on NC and
TED are reported in Table 4. For bandit learning
we give mean improvements over the respective
out-of-domain baselines in the Diff.-columns.

Baselines. The NMT out-of-domain baselines,
reported in Table 2, perform comparable to the
linear baseline from Sokolov et al. (2016a,b) on

Algorithm Train data Iter. EP NC

MLE NC 978k 13.67 22.32
MLE-UNK 13.83 22.56
MLE-BPE 1.0M 14.09 23.01

MLE EP→NC 160k 26.66 31.91
MLE-UNK 27.19 33.19
MLE-BPE 160k 27.14 33.31

Algorithm Train data Iter. EP TED

MLE TED 2.2M 14.16 32.71
MLE-UNK 15.15 33.16
MLE-BPE 3.0M 14.18 32.81

MLE EP→TED 460k 23.88 33.65
MLE-UNK 24.64 35.57
MLE-BPE 2.2M 23.39 36.23

Table 3: In-domain NMT baselines results
(BLEU) on in- and out-of-domain test sets. The
EP→NC is first trained on EP, then fine-tuned on
NC. The EP→TED is first trained on EP, then fine-
tuned on TED.

NC, but the in-domain EP→NC (Table 3) base-
lines outperform the linear baseline by more than 3
BLEU points. Continuing training of a pre-trained
out-of-domain model on a small amount of in do-
main data is very hence effective, whilst the per-
formance of the models solely trained on small in-
domain data is highly dependent on the size of this
training data set. For TED, the in-domain dataset
is almost four times as big as the NC training set,
so the in-domain baselines perform better. This ef-
fect was previously observed by Luong and Man-
ning (2015) and Freitag and Al-Onaizan (2016).

Bandit Learning. The NMT bandit models that
optimize the EL objective yield generally a much
higher improvement over the out-of-domain mod-
els than the corresponding linear models: As listed
in Table 4, we find improvements of between 2.33
and 2.89 BLEU points on the NC domain, and be-
tween 4.18 and 5.18 BLEU points on the TED do-
main. In contrast, the linear models with sparse
features and hypergraph re-decoding achieved a
maximum improvement of 0.82 BLEU points on
NC.

Optimization of the PR objective shows im-
provements of up to 1.79 BLEU points on NC
(compared to 0.6 BLEU points for linear mod-
els), but no significant improvement on TED. The
biggest impact of this variance reduction tech-

1510



Algorithm Iter. EP NC Diff.
EL 317k 30.36±0.20 29.34±0.29 2.36
EL-UNK* 317k 30.73±0.20 30.33±0.42 2.33
EL-UNK** 349k 30.67±0.04 30.45±0.27 2.45
EL-BPE 543k 30.09±0.31 30.09±0.01 2.89

PR-UNK** (bin) 22k 30.76±0.03 29.40±0.02 1.40
PR-BPE (bin) 14k 31.02±0.09 28.92±0.03 1.72
PR-UNK** (cont) 12k 30.81±0.02 29.43±0.02 1.43
PR-BPE (cont) 8k 30.91±0.01 28.99±0.00 1.79

SF-EL-UNK** 713k 29.97±0.09 30.61±0.05 2.61
SF-EL-BPE 375k 30.46±0.10 30.20±0.11 3.00

BL-EL-UNK** 531k 30.19±0.37 31.47±0.09 3.47
BL-EL-BPE 755k 29.88±0.07 31.28±0.24 4.08

(a) Domain adaptation from EP to NC.

Algorithm Iter. EP TED Diff.
EL 976k 29.34±0.42 27.66±0.03 4.18
EL-UNK* 976k 29.68±0.29 29.44±0.06 4.85
EL-UNK** 1.1M 29.62±0.15 29.77±0.15 5.18
EL-BPE 831k 30.03±0.43 28.54±0.04 4.18

PR-UNK** (bin) 14k 31.84±0.01 24.85±0.00 0.26
PR-BPE (bin) 69k 31.77±0.01 24.55±0.01 0.20
PR-UNK** (cont) 9k 31.85±0.02 24.85±0.01 0.26
PR-BPE (cont) 55k 31.79±0.02 24.59±0.01 0.24

SF-EL-UNK** 658k 30.18±0.15 29.12±0.10 4.53
SF-EL-BPE 590k 30.32±0.26 28.51±0.18 4.16

BL-EL-UNK** 644k 29.91±0.03 30.44±0.13 5.85
BL-EL-BPE 742k 29.84±0.61 30.24±0.46 5.89

(b) Domain adaptation from EP to TED.

Table 4: Bandit NMT results (BLEU) on EP, NC and TED test sets. UNK* models involve UNK
replacement only during testing, UNK** include UNK replacement already during training. For PR,
either binary (bin) or continuous feedback (cont) was used. Control variates: average reward baseline
(BL) and score function (SF). Results are averaged over two independent runs and standard deviation is
given in subscripts. Improvements over respective out-of-domain models are given in the Diff.-columns.

nique is a considerable speedup of training speed
of 1 to 2 orders of magnitude compared to EL.

A beneficial side-effect of NMT learning from
weak feedback is that the knowledge from the
out-domain training is not simply “overwritten”.
This happens to full-information in-domain tun-
ing where more than 4 BLEU points are lost in
an evaluation on the out-domain data. On the con-
trary, the bandit learning models still achieve high
results on the original domain. This is useful for
conservative domain adaptation, where the perfor-
mance of the models in the old domain is still rel-
evant.

Unknown words. By handling unknown words
with UNK-Replace or BPEs, we find consistent
improvements over the plain word-based models
for all baselines and bandit learning models. We
observe that the models with UNK replacement
essentially benefit from passing through source
tokens, and only marginally from lexical trans-
lations. Bandit learning models take particular
advantage of UNK replacement when it is in-
cluded already during training. The sub-word
models achieve the overall highest improvement
over the baselines, although sometimes generating
nonsense words.

Control variates. Applying the score function
control variate to EL optimization does not largely
change learning speed or BLEU results. How-
ever, the average reward control variate leads to

improvements of around 1 BLEU over the EL op-
timization without variance reduction on both do-
mains.

6 Conclusion

In this paper, we showed how to lift structured pre-
diction under bandit feedback from linear models
to non-linear sequence-to-sequence learning us-
ing recurrent neural networks with attention. We
introduced algorithms to train these models un-
der numerical feedback to single output structures
or under preference rankings over pairs of struc-
tures. In our experimental evaluation on the task of
neural machine translation domain adaptation, we
found relative improvements of up to 5.89 BLEU
points over out-of-domain seed models, outper-
forming also linear bandit models. Furthermore,
we argued that pairwise ranking under bandit feed-
back can be interpreted as a use of antithetic vari-
ates, and we showed how to include average re-
ward and score function baselines as control vari-
ates for improved training speed and generaliza-
tion. In future work, we would like to apply the
presented non-linear bandit learners to other struc-
tured prediction tasks.

Acknowledgments

This research was supported in part by the Ger-
man research foundation (DFG), and in part by a
research cooperation grant with the Amazon De-
velopment Center Germany.

1511



References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2015. Neural machine translation by jointly
learning to align and translate. In ICLR. San Diego,
CA.

Ondřej Bojar, Roman Sudarikov, Tom Kocmi, Jindřich
Helcl, and Ondřej Cıfka. 2016. UFAL submissions
to the IWSLT 2016 MT track. In IWSLT . Seattle,
WA.

Leon Bottou, Frank E. Curtis, and Jorge Nocedal.
2016. Optimization methods for large-scale ma-
chine learning. eprint arXiv:1606.04838v1 .

Luca Capriotti. 2008. Reducing the variance of likeli-
hood ratio greeks in Monte Carlo. In WCS. Miami,
FL.

Kyunghyun Cho, Bart van Merriënboer, Çalar
Gülçehre, Dzmitry Bahdanau, Fethi Bougares, Hol-
ger Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder–decoder
for statistical machine translation. In EMNLP.
Doha, Qatar.

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. eprint arXiv:1412.3555 .

James Clarke, Dan Goldwasser, Wing-Wei Chang, and
Dan Roth. 2010. Driving semantic parsing from the
world’s response. In CoNLL. Portland, OR.

Ronan Collobert, Jason Weston, Leon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. JMLR 12:2461–2505.

Hal Daumé, John Langford, and Daniel Marcu. 2009.
Search-based structured prediction. Machine learn-
ing 75(3):297–325.

Markus Freitag and Yaser Al-Onaizan. 2016. Fast
domain adaptation for neural machine translation.
eprint arXiv:1612.06897 .

Michael C. Fu. 2006. Gradient estimation. In S.G.
Henderson and B.L. Nelson, editors, Handbook in
Operations Research and Management Science, vol-
ume 13, pages 575–616.

Kevin Gimpel and Noah A. Smith. 2010. Softmax-
margin training for structured log-linear models.
Technical Report CMU-LTI-10-008, Carnegie Mel-
lon University.

Michael Gutmann and Aapo Hyvärinen. 2010. Noise-
contrastive estimation: A new estimation principle
for unnormalized statistical models. In AISTATS.
Sardinia, Italy.

Moritz Hardt, Ben Recht, and Yoram Singer. 2016.
Train faster, generalize better: Stability of stochastic
gradient descent. In ICML. New York, NY.

Kazuma Hashimoto, Akiko Eriguchi, and Yoshimasa
Tsuruoka. 2016. Domain adaptation and attention-
based unknown word replacement in chinese-to-
japanese neural machine translation. In COLING
Workshop on Asian Translation. Osaka, Japan.

Di He, Yingce Xia, Tao Qin, Liwei Wang, Nenghai Yu,
Tieyan Liu, and Wei-Ying Ma. 2016. Dual learning
for machine translation. In NIPS. Barcelona, Spain.

Xiaodong He and Li Deng. 2012. Maximum expected
BLEU training of phrase and lexicon translation
models. In ACL. Jeju Island, Korea.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidi-
rectional LSTM-CRF models for sequence tagging.
eprint arXiv:1508.01991 .

Sébastien Jean, Orhan Firat, Kyunghyun Cho, Roland
Memisevic, and Yoshua Bengio. 2015. Montreal
neural machine translation systems for WMT’15. In
WMT . Lisbon, Portugal.

Robin Jia and Percy Liang. 2016. Data recombination
for neural semantic parsing. In ACL. Berlin, Ger-
many.

Diederik Kingma and Jimmy Ba. 2014. Adam:
A method for stochastic optimization. eprint
arXiv:1412.6980 .

Percy Liang, Michael I. Jordan, and Dan Klein. 2011.
Learning dependency-based compositional seman-
tics. In ACL-HLT . Portland, OR.

Jindřich Libovickỳ, Jindřich Helcl, Marek Tlustỳ,
Pavel Pecina, and Ondřej Bojar. 2016. CUNI system
for WMT16 automatic post-editing and multimodal
translation tasks. In WMT . Berlin, Germany.

Minh-Thang Luong and Christopher D. Manning.
2015. Stanford neural machine translation systems
for spoken language domains. In IWSLT . Da Nang,
Vietnam.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015a. Effective approaches to attention-
based neural machine translation. In EMNLP. Lis-
bon, Portugal.

Thang Luong, Ilya Sutskever, Quoc Le, Oriol Vinyals,
and Wojciech Zaremba. 2015b. Addressing the rare
word problem in neural machine translation. In
ACL. Beijing, China.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S. Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In NIPS. Lake Tahoe, CA.

Andriy Mnih and Yee Whye Teh. 2012. A fast and sim-
ple algorithm for training neural probabilistic lan-
guage models. In ICML. Edinburgh, Scotland.

Eric W. Noreen. 1989. Computer Intensive Methods
for Testing Hypotheses. An Introduction. Wiley.

1512



Franz J. Och. 2003. Minimum error rate training in
statistical machine translation. In HLT-NAACL. Ed-
monton, Canada.

Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio.
2013. On the difficulty of training recurrent neural
networks. In ICML. Atlanta, GA.

Rajesh Ranganath, Sean Gerrish, and David M. Blei.
2014. Black box variational inference. In AISTATS.
Reykjavik, Iceland.

MarcAurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2016. Sequence level train-
ing with recurrent neural networks. In ICLR. San
Juan, Puerto Rico.

Sheldon M. Ross. 2013. Simulation. Elsevier, fifth edi-
tion.

Stéphane Ross, Geoffrey J Gordon, and Drew Bagnell.
2011. A reduction of imitation learning and struc-
tured prediction to no-regret online learning. In AIS-
TATS. Ft. Lauderdale, FL.

Stefan Schaal. 1999. Is imitation learning the route
to humanoid robots? Trends in Cognitive Sciences
3(6):233–242.

John Schulman, Nicolas Heess, Theophane Weber, and
Pieter Abbeel. 2015. Gradient estimation using
stochastic computation graphs. In NIPS. Montreal,
Canada.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Neural machine translation of rare words with
subword units. In ACL. Berlin, Germany.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In ACL.
Berlin, Germany.

David A. Smith and Jason Eisner. 2006. Minimum
risk annealing for training log-linear models. In
COLING-ACL. Sydney, Australia.

Artem Sokolov, Julia Kreutzer, Christopher Lo, and
Stefan Riezler. 2016a. Learning structured predic-
tors from bandit feedback for interactive NLP. In
ACL. Berlin, Germany.

Artem Sokolov, Julia Kreutzer, Christopher Lo, and
Stefan Riezler. 2016b. Stochastic structured pre-
diction under bandit feedback. In NIPS. Barcelona,
Spain.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. JMLR 15(1):1929–1958.

Ilya Sutskever, James Martens, George E. Dahl, and
Geoffrey E. Hinton. 2013. On the importance of
initialization and momentum in deep learning. In
ICML. Atlanta, GA.

Ilya Sutskever, Oriol Vinyals, and Quoc V. Le. 2014.
Sequence to sequence learning with neural net-
works. In NIPS. Montreal, Canada.

Richard S. Sutton and Andrew G. Barto. 1998. Re-
inforcement Learning. An Introduction. The MIT
Press.

Richard S. Sutton, David McAllester, Satinder Singh,
and Yishay Mansour. 2000. Policy gradient methods
for reinforcement learning with function approxima-
tion. In NIPS. Vancouver, Canada.

Oriol Vinyals, Lukasz Kaiser, Terry Koo, Slav Petrov,
Ilya Sutskever, and Geoffrey Hinton. 2015. Gram-
mar as a foreign language. In NIPS. Montreal,
Canada.

Ronald J. Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. Machine Learning 20:229–256.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, et al. 2016. Google’s neural machine
translation system: Bridging the gap between human
and machine translation. eprint arXiv:1609.08144 .

Alan Yuille and Xuming He. 2012. Probabilistic mod-
els of vision and max-margin methods. Frontiers of
Electrical and Electronic Engineering 7(1):94–106.

Luke S. Zettlemoyer and Michael Collins. 2005.
Learning to map sentences to logical form: Struc-
tured classification with probabilistic categorial
grammars. In UAI. Edinburgh, Scotland.

1513


	Bandit Structured Prediction for Neural Sequence-to-Sequence Learning

