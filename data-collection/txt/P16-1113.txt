



















































Neural Semantic Role Labeling with Dependency Path Embeddings


Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 1192–1202,
Berlin, Germany, August 7-12, 2016. c©2016 Association for Computational Linguistics

Neural Semantic Role Labeling with Dependency Path Embeddings

Michael Roth and Mirella Lapata
School of Informatics, University of Edinburgh

10 Crichton Street, Edinburgh EH8 9AB
{mroth,mlap}@inf.ed.ac.uk

Abstract

This paper introduces a novel model for
semantic role labeling that makes use
of neural sequence modeling techniques.
Our approach is motivated by the obser-
vation that complex syntactic structures
and related phenomena, such as nested
subordinations and nominal predicates,
are not handled well by existing models.
Our model treats such instances as sub-
sequences of lexicalized dependency paths
and learns suitable embedding representa-
tions. We experimentally demonstrate that
such embeddings can improve results over
previous state-of-the-art semantic role la-
belers, and showcase qualitative improve-
ments obtained by our method.

1 Introduction

The goal of semantic role labeling (SRL) is to
identify and label the arguments of semantic predi-
cates in a sentence according to a set of predefined
relations (e.g., “who” did “what” to “whom”). Se-
mantic roles provide a layer of abstraction be-
yond syntactic dependency relations, such as sub-
ject and object, in that the provided labels are in-
sensitive to syntactic alternations and can also be
applied to nominal predicates. Previous work has
shown that semantic roles are useful for a wide
range of natural language processing tasks, with
recent applications including statistical machine
translation (Aziz et al., 2011; Xiong et al., 2012),
plagiarism detection (Osman et al., 2012; Paul
and Jamal, 2015), and multi-document abstractive
summarization (Khan et al., 2015).

The task of semantic role labeling (SRL) was
pioneered by Gildea and Jurafsky (2002). In

System Analysis

mate-tools *He had [troubleA0] raising [fundsA1].
mateplus *He had [troubleA0] raising [fundsA1].

TensorSRL *He had trouble raising [fundsA1].
easySRL *He had trouble raising [fundsA1].

This work [HeA0] had trouble raising [fundsA1].

Table 1: Outputs of SRL systems for the sentence
He had trouble raising funds. Arguments of raise
are shown with predicted roles as defined in Prop-
Bank (A0: getter of money; A1: money). Asterisks
mark flawed analyses that miss the argument He.

their work, features based on syntactic constituent
trees were identified as most valuable for labeling
predicate-argument relationships. Later work con-
firmed the importance of syntactic parse features
(Pradhan et al., 2005; Punyakanok et al., 2008)
and found that dependency parse trees provide a
better form of representation to assign role labels
to arguments (Johansson and Nugues, 2008).

Most semantic role labeling approaches to date
rely heavily on lexical and syntactic indicator fea-
tures. Through the availability of large annotated
resources, such as PropBank (Palmer et al., 2005),
statistical models based on such features achieve
high accuracy. However, results often fall short
when the input to be labeled involves instances of
linguistic phenomena that are relevant for the la-
beling decision but appear infrequently at training
time. Examples include control and raising verbs,
nested conjunctions or other recursive structures,
as well as rare nominal predicates. The difficulty
lies in that simple lexical and syntactic indicator
features are not able to model interactions trig-
gered by such phenomena. For instance, con-

1192



sider the sentence He had trouble raising funds
and the analyses provided by four publicly avail-
able tools in Table 1 (mate-tools, Björkelund et
al. (2010); mateplus, Roth and Woodsend (2014);
TensorSRL, Lei et al. (2015); and easySRL, Lewis
et al. (2015)). Despite all systems claiming state-
of-the-art or competitive performance, none of
them is able to correctly identify He as the agent
argument of the predicate raise. Given the com-
plex dependency path relation between the predi-
cate and its argument, none of the systems actually
identifies He as an argument at all.

In this paper, we develop a new neural network
model that can be applied to the task of seman-
tic role labeling. The goal of this model is to bet-
ter handle control predicates and other phenomena
that can be observed from the dependency struc-
ture of a sentence. In particular, we aim to model
the semantic relationships between a predicate and
its arguments by analyzing the dependency path
between the predicate word and each argument
head word. We consider lexicalized paths, which
we decompose into sequences of individual items,
namely the words and dependency relations on a
path. We then apply long-short term memory net-
works (Hochreiter and Schmidhuber, 1997) to find
a recurrent composition function that can recon-
struct an appropriate representation of the full path
from its individual parts (Section 2). To ensure
that representations are indicative of semantic re-
lationships, we use semantic roles as target labels
in a supervised setting (Section 3).

By modeling dependency paths as sequences of
words and dependencies, we implicitly address the
data sparsity problem. This is the case because we
use single words and individual dependency rela-
tions as the basic units of our model. In contrast,
previous SRL work only considered full syntactic
paths. Experiments on the CoNLL-2009 bench-
mark dataset show that our model is able to out-
perform the state-of-the-art in English (Section 4),
and that it improves SRL performance in other
languages, including Chinese, German and Span-
ish (Section 5).

2 Dependency Path Embeddings

In the context of neural networks, the term embed-
ding refers to the output of a function f within the
network, which transforms an arbitrary input into
a real-valued vector output. Word embeddings, for
instance, are typically computed by forwarding a

ROOT

he
A0

had
trouble

raising
raise.01 funds

A1

SBJ OBJ

NMOD

OBJ

Figure 1: Dependency path (dotted) between the
predicate raising and the argument he.

one-hot word vector representation from the input
layer of a neural network to its first hidden layer,
usually by means of matrix multiplication and an
optional non-linear function whose parameters are
learned during neural network training.

Here, we seek to compute real-valued vector
representations for dependency paths between a
pair of words 〈wi,w j〉. We define a dependency
path to be the sequence of nodes (representing
words) and edges (representing relations between
words) to be traversed on a dependency parse tree
to get from node wi to node w j. In the example in
Figure 1, the dependency path from raising to he
is raising NMOD−−−→ trouble OBJ−−→had SBJ←−he.

Analogously to how word embeddings are com-
puted, the simplest way to embed paths would
be to represent each sequence as a one-hot vec-
tor. However, this is suboptimal for two reasons:
Firstly, we expect only a subset of dependency
paths to be attested frequently in our data and
therefore many paths will be too sparse to learn
reliable embeddings for them. Secondly, we hy-
pothesize that dependency paths which share the
same words, word categories or dependency re-
lations should impact SRL decisions in similar
ways. Thus, the words and relations on the path
should drive representation learning, rather than
the full path on its own. The following sections
describe how we address representation learning
by means of modeling dependency paths as se-
quences of items in a recurrent neural network.

2.1 Recurrent Neural Networks

The recurrent model we use in this work is a vari-
ant of the long-short term memory (LSTM) net-
work. It takes a sequence of items X = x1, ...,xn
as input, recurrently processes each item xt ∈ X at
a time, and finally returns one embedding state en
for the complete input sequence. For each time

1193



he N had V trouble N raising V . . .

subj obj nmod

x1
xn

en

next layer

Figure 2: Example input and embedding compu-
tation for the path from raising to he, given the
sentence he had trouble raising funds. LSTM time
steps are displayed from right to left.

step t, the LSTM model updates an internal mem-
ory state mt that depends on the current input as
well as the previous memory state mt−1. In or-
der to capture long-term dependencies, a so-called
gating mechanism controls the extent to which
each component of a memory cell state will be
modified. In this work, we employ input gates i,
output gates o and (optional) forget gates f. We
formalize the state of the network at each time
step t as follows:

it = σ([Wmimt−1]+Wxixt +bi) (1)

ft = σ([Wmfmt−1]+Wxfxt +bf) (2)
mt = it � (Wxmxt)+ ft �mt−1 +bm (3)

ot = σ([Wmomt ]+Wxoxt +bo) (4)
et = ot �σ(mt) (5)

In each equation, W describes a matrix of
weights to project information between two lay-
ers, b is a layer-specific vector of bias terms, and
σ is the logistic function. Superscripts indicate
the corresponding layers or gates. Some models
described in Section 3 do not make use of forget
gates or memory-to-gate connections. In case no
forget gate is used, we set ft = 1. If no memory-
to-gate connections are used, the terms in square
brackets in (1), (2), and (4) are replaced by zeros.

2.2 Embedding Dependency Paths
We define the embedding of a dependency path
to be the final memory output state of a recur-
rent LSTM layer that takes a path as input, with
each input step representing a binary indicator for
a part-of-speech tag, a word form, or a dependency

relation. In the context of semantic role labeling,
we define each path as a sequence from a predicate
to its potential argument.1 Specifically, we define
the first item x1 to correspond to the part-of-speech
tag of the predicate word wi, followed by its actual
word form, and the relation to the next word wi+1.
The embedding of a dependency path corresponds
to the state en returned by the LSTM layer after
the input of the last item, xn, which corresponds to
the word form of the argument head word w j. An
example is shown in Figure 2.

The main idea of this model and representation
is that word forms, word categories and depen-
dency relations can all influence role labeling de-
cisions. The word category and word form of the
predicate first determine which roles are plausible
and what kinds of path configurations are to be ex-
pected. The relations and words seen on the path
can then manipulate these expectations. In Fig-
ure 2, for instance, the verb raising complements
the phrase had trouble, which makes it likely that
the subject he is also the logical subject of raising.

By using word forms, categories and depen-
dency relations as input items, we ensure that spe-
cific words (e.g., those which are part of com-
plex predicates) as well as various relation types
(e.g., subject and object) can appropriately influ-
ence the representation of a path. While learn-
ing corresponding interactions, the network is also
able to determine which phrases and dependency
relations might not influence a role assignment de-
cision (e.g., coordinations).

2.3 Joint Embedding and Feature Learning

Our SRL model consists of four components de-
picted in Figure 3: (1) an LSTM component takes
lexicalized dependency paths as input, (2) an ad-
ditional input layer takes binary features as input,
(3) a hidden layer combines dependency path em-
beddings and binary features using rectified linear
units, and (4) a softmax classification layer pro-
duces output based on the hidden layer state as in-
put. We therefore learn path embeddings jointly
with feature detectors based on traditional, binary
indicator features.

Given a dependency path X , with steps xk ∈
{x1, ...,xn}, and a set of binary features B as in-
put, we use the LSTM formalization from equa-
tions (1–5) to compute the embedding en at time

1We experimented with different sequential orders and
found this to lead to the best validation set results.

1194



(1)

x1
Input from path X

. . . xn

i1
m0 f1

LSTM cell

m1 o1 e1

. . .

en

Vector of binary indicator
features B

(2)
(3)

h

(4)

s
class
label

c

Figure 3: Neural model for joint learning of path
embeddings and higher-order features: The path
sequence x1 . . .xn is fed into a LSTM layer, a hid-
den layer h combines the final embedding en and
binary input features B, and an output layer s as-
signs the highest probable class label c.

step n and formalize the state of the hidden layer h
and softmax output sc for each class category c as
follows:

h = max(0,WBhB+Wehen +bh) (6)

sc =
Wesc en +Whsc h+bsc

Σi(Wesi en +Whsi h+bsi )
(7)

3 System Architecture

The overall architecture of our SRL system closely
follows that of previous work (Toutanova et al.,
2008; Björkelund et al., 2009) and is depicted in
Figure 4. We use a pipeline that consists of the fol-
lowing steps: predicate identification and disam-
biguation, argument identification, argument clas-
sification, and re-ranking. The neural-network
components introduced in Section 2 are used in
the last three steps. The following sub-sections de-
scribe all components in more detail.

3.1 Predicate Identification and
Disambiguation

Given a syntactically analyzed sentence, the first
two steps in an end-to-end SRL system are to iden-
tify and disambiguate the semantic predicates in
the sentence. Here, we focus on verbal and nom-
inal predicates but note that other syntactic cate-
gories have also been construed as predicates in
the NLP literature (e.g., prepositions; Srikumar
and Roth (2013)). For both identification and dis-
ambiguation steps, we apply the same logistic re-

He had trouble raising funds.PREDICATE
IDENTIFICATION

PREDICATE
DISAMBIGUATION raise.01

sense

ARGUMENT
IDENTIFICATION ARG?ARG?

2nd best arg
1st best arg

ARGUMENT
CLASSIFICATION A0 A1 A0

best label
best label 2nd

best

RERANKER he funds funds funds
raise.01 raise.01 raise.01

A0 A1

best overall scoring structure

score score

OUTPUT
HeA0 had trouble raising fundsA1.

Figure 4: Pipeline architecture of our SRL system.

gression classifiers used in the SRL components
of mate-tools (Björkelund et al., 2010). The clas-
sifiers for both tasks make use of a range of lexico-
syntactic indicator features, including predicate
word form, its predicted part-of-speech tag as well
as dependency relations to all syntactic children.

3.2 Argument Identification and
Classification

Given a sentence and a set of sense-disambiguated
predicates in it, the next two steps of our SRL sys-
tem are to identify all arguments of each pred-
icate and to assign suitable role labels to them.
For both steps, we train several LSTM-based neu-
ral network models as described in Section 2. In
particular, we train separate networks for nomi-
nal and verbal predicates and for identification and
classification. Following the findings of earlier
work (Xue and Palmer, 2004), we assume that dif-
ferent feature sets are relevant for the respective
tasks and hence different embedding representa-
tions should be learned. As binary input features,
we use the following sets from the SRL literature
(Björkelund et al., 2010).

1195



Argument labeling step forget gate memory→gates |e| |h| alpha dropout rate
Identification (verb) − + 25 90 0.0006 0.42
Identification (noun) − + 16 125 0.0009 0.25
Classification (verb) + − 5 300 0.0155 0.50
Classification (noun) − − 88 500 0.0055 0.46

Table 2: Hyperparameters selected for best models and training procedures

Lexico-syntactic features Word form and word
category of the predicate and candidate argument;
dependency relations from predicate and argument
to their respective syntactic heads; full depen-
dency path sequence from predicate to argument.

Local context features Word forms and word
categories of the candidate argument’s and pred-
icate’s syntactic siblings and children words.

Other features Relative position of the candi-
date argument with respect to the predicate (left,
self, right); sequence of part-of-speech tags of all
words between the predicate and the argument.

3.3 Reranker

As all argument identification (and classification)
decisions are independent of one another, we
apply as the last step of our pipeline a global
reranker. Given a predicate p, the reranker takes
as input the n best sets of identified arguments as
well as their n best label assignments and predicts
the best overall argument structure. We implement
the reranker as a logistic regression classifier, with
hidden and embedding layer states of identified
arguments as features, offset by the argument la-
bel, and a binary label as output (1: best predicted
structure, 0: any other structure). At test time, we
select the structure with the highest overall score,
which we compute as the geometric mean of the
global regression and all argument-specific scores.

4 Experiments

In this section, we demonstrate the usefulness of
dependency path embeddings for semantic role la-
beling. Our hypotheses are that (1) modeling de-
pendency paths as sequences will lead to better
representations for the SRL task, thus increasing
labeling precision overall, and that (2) embeddings
will address the problem of data sparsity, lead-
ing to higher recall. To test both hypotheses, we
experiment on the in-domain and out-of-domain
test sets provided in the CoNLL-2009 shared task

(Hajič et al., 2009) and compare results of our
system, henceforth PathLSTM, with systems that
do not involve path embeddings. We compute
precision, recall and F1-score using the official
CoNLL-2009 scorer.2 The code is available at
https://github.com/microth/PathLSTM.

Model selection We train argument identifica-
tion and classification models using the XLBP
toolkit for neural networks (Monner and Reg-
gia, 2012). The hyperparameters for each step
were selected based on the CoNLL 2009 devel-
opment set. For direct comparison with previ-
ous work, we use the same preprocessing mod-
els and predicate-specific SRL components as pro-
vided with mate-tools (Bohnet, 2010; Björkelund
et al., 2010). The types and ranges of hyperparam-
eters considered are as follows: learning rate α ∈
[0.00006,0.3], dropout rate d ∈ [0.0,0.5], and hid-
den layer sizes |e| ∈ [0,100], |h| ∈ [0,500]. In addi-
tion, we experimented with different gating mech-
anisms (with/without forget gate) and memory ac-
cess settings (with/without connections between
all gates and the memory layer, cf. Section 2). The
best parameters were chosen using the Spearmint
hyperparameter optimization toolkit (Snoek et al.,
2012), applied for approx. 200 iterations, and are
summarized in Table 2.

Results The results of our in- and out-of-domain
experiments are summarized in Tables 3 and 5, re-
spectively. We present results for different system
configurations: ‘local’ systems make classification
decisions independently, whereas ‘global’ systems
include a reranker or other global inference mech-
anisms; ‘single’ refers to one model and ‘ensem-
ble’ refers to combinations of multiple models.

In the in-domain setting, our PathLSTM model
achieves 87.7% (single) and 87.9% (ensemble) F1-
score, outperforming previously published best re-

2Some recently proposed SRL models are only evaluated
on the CoNLL 2005 and 2012 data sets, which lack nomi-
nal predicates or dependency annotations. We do not list any
results from those models here.

1196



System (local, single) P R F1

Björkelund et al. (2010) 87.1 84.5 85.8
Lei et al. (2015) − − 86.6
FitzGerald et al. (2015) − − 86.7
PathLSTM w/o reranker 88.1 85.3 86.7

System (global, single) P R F1

Björkelund et al. (2010) 88.6 85.2 86.9
Roth and Woodsend (2014)3 − − 86.3
FitzGerald et al. (2015) − − 87.3
PathLSTM 90.0 85.5 87.7

System (global, ensemble) P R F1

FitzGerald et al. 10 models − − 87.7
PathLSTM 3 models 90.3 85.7 87.9

Table 3: Results on the CoNLL-2009 in-domain
test set. All numbers are in percent.

PathLSTM P (%) R (%) F1 (%)

w/o path embeddings 65.7 87.3 75.0
w/o binary features 73.2 33.3 45.8

Table 4: Ablation tests in the in-domain setting.

sults by 0.4 and 0.2 percentage points, respec-
tively. At a F1-score of 86.7%, our local model
(using no reranker) reaches the same performance
as state-of-the-art local models. Note that dif-
ferences in results between systems might origi-
nate from the application of different preprocess-
ing techniques as each system comes with its own
syntactic components. For direct comparison, we
evaluate against mate-tools, which use the same
preprocessing techniques as PathLSTM. In com-
parison, we see improvements of +0.8–1.0 per-
centage points absolute in F1-score.

In the out-of-domain setting, our system
achieves new state-of-the-art results of 76.1% (sin-
gle) and 76.5% (ensemble) F1-score, outperform-
ing the previous best system by Roth and Wood-
send (2014) by 0.2 and 0.6 absolute points, respec-
tively. In comparison to mate-tools, we observe
absolute improvements in F1-score of +0.4–0.8%.

Discussion To determine the sources of indi-
vidual improvements, we test PathLSTM models
without specific feature types and directly com-
pare PathLSTM and mate-tools, both of which use

3Results are taken from Lei et al. (2015).

System (local, single) P R F1

Björkelund et al. (2010) 75.7 72.2 73.9
Lei et al. (2015) − − 75.6
FitzGerald et al. (2015) − − 75.2
PathLSTM w/o reranker 76.9 73.8 75.3

System (global, single) P R F1

Björkelund et al. (2010) 77.9 73.6 75.7
Roth and Woodsend (2014)3 − − 75.9
FitzGerald et al. (2015) − − 75.2
PathLSTM 78.6 73.8 76.1

System (global, ensemble) P R F1

FitzGerald et al. 10 models − − 75.5
PathLSTM 3 models 79.7 73.6 76.5

Table 5: Results on the CoNLL-2009 out-of-
domain test set. All numbers are in percent.

the same preprocessing methods. Table 4 presents
in-domain test results for our system when spe-
cific feature types are omitted. The overall low
results indicate that a combination of dependency
path embeddings and binary features is required to
identify and label arguments with high precision.

Figure 5 shows the effect of dependency path
embeddings at mitigating sparsity: if the path be-
tween a predicate and its argument has not been
observed at training time or only infrequently,
conventional methods will often fail to assign a
role. This is represented by the recall curve
of mate-tools, which converges to zero for argu-
ments with unseen paths. The higher recall curve
for PathLSTM demonstrates that path embeddings
can alleviate this problem to some extent. For un-
seen paths, we observe that PathLSTM improves
over mate-tools by an order of magnitude, from
0.9% to 9.6%. The highest absolute gain, from
12.8% to 24.2% recall, can be observed for depen-
dency paths that occurred between 1 and 10 times
during training.

Figure 7 plots role labeling performance for
sentences with varying number of words. There
are two categories of sentences in which the im-
provements of PathLSTM are most noticeable:
Firstly, it better handles short sentences that con-
tain expletives and/or nominal predicates (+0.8%
absolute in F1-score). This is probably due to the
fact that our learned dependency path representa-
tions are lexicalized, making it possible to model

1197



(Nested) subject control

Coordinations involving A1

Relative clauses

Coordinations involving A0

Complements of nominal predicates

treasuryA0 ’s threat to trash

the firmA1 , which was involved

KeatingA0 has conceded attempted to buy

tradingA1 was stopped
and did not resume◦ A0 • A1

Figure 6: Dots correspond to the path representation of a predicate-argument instance in 2D space.
White/black color indicates A0/A1 gold argument labels. Dotted ellipses denote instances exhibiting
related syntactic phenomena (see rectangles for a description and dotted rectangles for linguistic exam-
ples). Example phrases show actual output produced by PathLSTM (underlined).

0
1–

10 ≤1
0
2

≤1
0
3

≤1
0
4

>
10

4

100

1

10

Number of training instances with same path

R
ec

al
l(

%
)

PathLSTM
mate-tools0.9

9.6

24.2

12.8

36.4

30.1
49.6

76.4

88.3

Figure 5: Results on in-domain test instances,
grouped by the number of training instances that
have an identical (unlexicalized) dependency path.

argument structures of different nominals and dis-
tinguishing between expletive occurrences of ‘it’
and other subjects. Secondly, it improves perfor-
mance on longer sentences (up to +1.0% absolute
in F1-score). This is mainly due to the handling of
dependency paths that involve complex structures,
such as coordinations, control verbs and nominal
predicates.

We collect instances of different syntactic phe-
nomena from the development set and plot the
learned dependency path representations in the
embedding space (see Figure 6). We obtain a pro-
jection onto two dimensions using t-SNE (Van der
Maaten and Hinton, 2008). Interestingly, we can

1–
10

11
–1

5
16

–2
0

21
–2

5
26

–3
0

31
–

85

86

87

88

89

90

Number of words

F 1
-s

co
re

(%
)

PathLSTM
mate-tools

89.3

90.1 (+0.8)

86.1

87.1 (+1.0)
87.5

87.9 (+0.4)

Figure 7: Results by sentence length. Improve-
ments over mate-tools shown in parentheses.

see that different syntactic configurations are clus-
tered together in different parts of the space and
that most instances of the PropBank roles A0 and
A1 are separated. Example phrases in the figure
highlight predicate-argument pairs that are cor-
rectly labeled by PathLSTM but not by mate-tools.
Path embeddings are essential for handling these
cases as indicator features do not generalize well
enough.

Finally, Table 6 shows results for nominal and
verbal predicates as well as for different (gold)
role labels. In comparison to mate-tools, we can
see that PathLSTM improves precision for all ar-
gument types of nominal predicates. For ver-
bal predicates, improvements can be observed in

1198



Predicate POS Improvement
& Role Label PathLSTM over mate-tools

P (%) R (%) P (%) R (%)

verb / A0 90.8 89.2 −0.4 +1.8
verb / A1 91.0 91.9 +0.0 +1.1
verb / A2 84.3 76.9 +1.5 +0.0
verb / AM 82.2 72.4 +2.9 −2.0
noun / A0 86.9 78.2 +0.8 +3.3
noun / A1 87.5 84.4 +2.6 +2.2
noun / A2 82.4 76.8 +1.0 +2.1
noun / AM 79.5 69.2 +0.9 −2.8

Table 6: Results by word category and role label.

terms of recall of proto-agent (A0) and proto-
patient (A1) roles, with slight gains in precision
for the A2 role. Overall, PathLSTM does slightly
worse with respect to modifier roles, which it la-
bels with higher precision but at the cost of recall.

5 Path Embeddings in other Languages

In this section, we report results from additional
experiments on Chinese, German and Spanish
data. The underlying question is to which extent
the improvements of our SRL system for English
also generalize to other languages. To answer this
question, we train and test separate SRL mod-
els for each language, using the system architec-
ture and hyperparameters discussed in Sections 3
and 4, respectively.

We train our models on data from the
CoNLL-2009 shared task, relying on the same
features as one of the participating systems
(Björkelund et al., 2009), and evaluate with the
official scorer. For direct comparison, we rely on
the (automatic) syntactic preprocessing informa-
tion provided with the CoNLL test data and com-
pare our results with the best two systems for each
language that make use of the same preprocessing
information.

The results, summarized in Table 7, indicate
that PathLSTM performs better than the system by
Björkelund et al. (2009) in all cases. For German
and Chinese, PathLSTM achieves the best overall
F1-scores of 80.1% and 79.4%, respectively.

6 Related Work

Neural Networks for SRL Collobert et al.
(2011) pioneered neural networks for the task of

Chinese P R F1

PathLSTM 83.2 75.9 79.4
Björkelund et al. (2009) 82.4 75.1 78.6
Zhao et al. (2009) 80.4 75.2 77.7

German P R F1

PathLSTM 81.8 78.5 80.1
Björkelund et al. (2009) 81.2 78.3 79.7
Che et al. (2009) 82.1 75.4 78.6

Spanish P R F1

Zhao et al. (2009) 83.1 78.0 80.5
PathLSTM 83.2 77.4 80.2
Björkelund et al. (2009) 78.9 74.3 76.5

Table 7: Results (in percentage) on the CoNLL-
2009 test sets for Chinese, German and Spanish.

semantic role labeling. They developed a feed-
forward network that uses a convolution func-
tion over windows of words to assign SRL labels.
Apart from constituency boundaries, their system
does not make use of any syntactic information.
Foland and Martin (2015) extended their model
and showcased significant improvements when in-
cluding binary indicator features for dependency
paths. Similar features were used by FitzGerald et
al. (2015), who include role labeling predictions
by neural networks as factors in a global model.

These approaches all make use of binary fea-
tures derived from syntactic parses either to indi-
cate constituency boundaries or to represent full
dependency paths. An extreme alternative has
been recently proposed in Zhou and Xu (2015),
who model SRL decisions with a multi-layered
LSTM network that takes word sequences as in-
put but no syntactic parse information at all.

Our approach falls in between the two extremes:
we rely on syntactic parse information but rather
than solely making using of sparse binary features,
we explicitly model dependency paths in a neural
network architecture.

Other SRL approaches Within the SRL litera-
ture, recent alternatives to neural network archi-
tectures include sigmoid belief networks (Hender-
son et al., 2013) as well as low-rank tensor models
(Lei et al., 2015). Whereas Lei et al. only make
use of dependency paths as binary indicator fea-
tures, Henderson et al. propose a joint model for
syntactic and semantic parsing that learns and ap-

1199



plies incremental dependency path representations
to perform SRL decisions. The latter form of rep-
resentation is closest to ours, however, we do not
build syntactic parses incrementally. Instead, we
take syntactically preprocessed text as input and
focus on the SRL task only.

Apart from more powerful models, most recent
progress in SRL can be attributed to novel fea-
tures. For instance, Deschacht and Moens (2009)
and Huang and Yates (2010) use latent variables,
learned with a hidden markov model, as features
for representing words and word sequences. Zapi-
rain et al. (2013) propose different selection pref-
erence models in order to deal with the sparseness
of lexical features. Roth and Woodsend (2014)
address the same problem with word embeddings
and compositions thereof. Roth and Lapata (2015)
recently introduced features that model the influ-
ence of discourse on role labeling decisions.

Rather than coming up with completely new
features, in this work we proposed to revisit some
well-known features and represent them in a novel
way that generalizes better. Our proposed model
is inspired both by the necessity to overcome the
problems of sparse lexico-syntactic features and
by the recent success of SRL models based on neu-
ral networks.

Dependency-based embeddings The idea of
embedding dependency structures has previously
been applied to tasks such as relation classifica-
tion and sentiment analysis. Xu et al. (2015) and
Liu et al. (2015) use neural networks to embed de-
pendency paths between entity pairs. To identify
the relation that holds between two entities, their
approaches make use of pooling layers that detect
parts of a path that indicate a specific relation. In
contrast, our work aims at modeling an individ-
ual path as a complete sequence, in which every
item is of relevance. Tai et al. (2015) and Ma et al.
(2015) learn embeddings of dependency structures
representing full sentences, in a sentiment classifi-
cation task. In our model, embeddings are learned
jointly with other features, and as a result prob-
lems that may result from erroneous parse trees
are mitigated.

7 Conclusions

We introduced a neural network architecture for
semantic role labeling that jointly learns embed-
dings for dependency paths and feature combina-
tions. Our experimental results indicate that our

model substantially increases classification perfor-
mance, leading to new state-of-the-art results. In a
qualitive analysis, we found that our model is able
to cover instances of various linguistic phenomena
that are missed by other methods.

Beyond SRL, we expect dependency path em-
beddings to be useful in related tasks and down-
stream applications. For instance, our represen-
tations may be of direct benefit for semantic and
discourse parsing tasks. The jointly learned fea-
ture space also makes our model a good starting
point for cross-lingual transfer methods that rely
on feature representation projection to induce new
models (Kozhevnikov and Titov, 2014).

Acknowledgements We thank the three anony-
mous ACL referees whose feedback helped to
substantially improve the present paper. The
support of the Deutsche Forschungsgemeinschaft
(Research Fellowship RO 4848/1-1; Roth) and
the European Research Council (award number
681760; Lapata) is gratefully acknowledged.

References
Wilker Aziz, Miguel Rios, and Lucia Specia. 2011.

Shallow semantic trees for smt. In Proceedings of
the Sixth Workshop on Statistical Machine Transla-
tion, pages 316–322, Edinburgh, Scotland.

Anders Björkelund, Love Hafdell, and Pierre Nugues.
2009. Multilingual semantic role labeling. In Pro-
ceedings of the Thirteenth Conference on Compu-
tational Natural Language Learning: Shared Task,
pages 43–48, Boulder, Colorado.

Anders Björkelund, Bernd Bohnet, Love Hafdell, and
Pierre Nugues. 2010. A high-performance syn-
tactic and semantic dependency parser. In Coling
2010: Demonstration Volume, pages 33–36, Beijing,
China.

Bernd Bohnet. 2010. Top accuracy and fast depen-
dency parsing is not a contradiction. In Proceedings
of the 23rd International Conference on Computa-
tional Linguistics, pages 89–97, Beijing, China.

Wanxiang Che, Zhenghua Li, Yongqiang Li, Yuhang
Guo, Bing Qin, and Ting Liu. 2009. Multilin-
gual dependency-based syntactic and semantic pars-
ing. In Proceedings of the Thirteenth Conference on
Computational Natural Language Learning: Shared
Task, pages 49–54, Boulder, Colorado.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. The Journal of Machine Learning Re-
search, 12:2493–2537.

1200



Koen Deschacht and Marie-Francine Moens. 2009.
Semi-supervised semantic role labeling using the
Latent Words Language Model. In Proceedings of
the 2009 Conference on Empirical Methods in Nat-
ural Language Processing, pages 21–29, Singapore.

Nicholas FitzGerald, Oscar Täckström, Kuzman
Ganchev, and Dipanjan Das. 2015. Semantic role
labeling with neural network factors. In Proceed-
ings of the 2015 Conference on Empirical Methods
in Natural Language Processing, pages 960–970,
Lisbon, Portugal.

William Foland and James Martin. 2015.
Dependency-based semantic role labeling us-
ing convolutional neural networks. In Proceedings
of the Fourth Joint Conference on Lexical and
Computational Semantics, pages 279–288, Denver,
Colorado.

Daniel Gildea and Daniel Jurafsky. 2002. Automatic
labeling of semantic roles. Computational Linguis-
tics, 28(3):245–288.

Jan Hajič, Massimiliano Ciaramita, Richard Johans-
son, Daisuke Kawahara, Maria Antònia Martı́, Lluı́s
Màrquez, Adam Meyers, Joakim Nivre, Sebastian
Padó, Jan Štěpánek, et al. 2009. The CoNLL-2009
shared task: Syntactic and semantic dependencies
in multiple languages. In Proceedings of the Thir-
teenth Conference on Computational Natural Lan-
guage Learning: Shared Task, pages 1–18, Boulder,
Colorado.

James Henderson, Paola Merlo, Ivan Titov, and
Gabriele Musillo. 2013. Multilingual joint pars-
ing of syntactic and semantic dependencies with a
latent variable model. Computational Linguistics,
39(4):949–998.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural Computation,
9(8):1735–1780.

Fei Huang and Alexander Yates. 2010. Open-domain
semantic role labeling by modeling word spans. In
Proceedings of the 48th Annual Meeting of the As-
sociation for Computational Linguistics, pages 968–
978, Uppsala, Sweden.

Richard Johansson and Pierre Nugues. 2008. The ef-
fect of syntactic representation on semantic role la-
beling. In Proceedings of the 22nd International
Conference on Computational Linguistics, pages
393–400, Manchester, United Kingdom.

Atif Khan, Naomie Salim, and Yogan Jaya Kumar.
2015. A framework for multi-document abstrac-
tive summarization based on semantic role labelling.
Applied Soft Computing, 30:737–747.

Mikhail Kozhevnikov and Ivan Titov. 2014. Cross-
lingual model transfer using feature representation
projection. In Proceedings of the 52nd Annual
Meeting of the Association for Computational Lin-
guistics, pages 579–585, Baltimore, Maryland.

Tao Lei, Yuan Zhang, Lluı́s Màrquez, Alessandro Mos-
chitti, and Regina Barzilay. 2015. High-order low-
rank tensors for semantic role labeling. In Proceed-
ings of the 2015 Conference of the North Ameri-
can Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
1150–1160, Denver, Colorado.

Mike Lewis, Luheng He, and Luke Zettlemoyer. 2015.
Joint A* CCG parsing and semantic role labelling.
In Proceedings of the 2015 Conference on Empiri-
cal Methods in Natural Language Processing, pages
1444–1454, Lisbon, Portugal.

Yang Liu, Furu Wei, Sujian Li, Heng Ji, Ming Zhou,
and Houfeng Wang. 2015. A dependency-based
neural network for relation classification. In Pro-
ceedings of the 53rd Annual Meeting of the Associ-
ation for Computational Linguistics and the 7th In-
ternational Joint Conference on Natural Language
Processing, pages 285–290, Beijing, China.

Mingbo Ma, Liang Huang, Bowen Zhou, and Bing Xi-
ang. 2015. Dependency-based convolutional neural
networks for sentence embedding. In Proceedings
of the 53rd Annual Meeting of the Association for
Computational Linguistics and the 7th International
Joint Conference on Natural Language Processing,
pages 174–179, Beijing, China.

Derek Monner and James A Reggia. 2012. A general-
ized LSTM-like training algorithm for second-order
recurrent neural networks. Neural Networks, 25:70–
83.

Ahmed Hamza Osman, Naomie Salim, Mo-
hammed Salem Binwahlan, Rihab Alteeb, and
Albaraa Abuobieda. 2012. An improved plagiarism
detection scheme based on semantic role labeling.
Applied Soft Computing, 12(5):1493–1502.

Martha Palmer, Daniel Gildea, and Paul Kingsbury.
2005. The Proposition bank: An annotated cor-
pus of semantic roles. Computational Linguistics,
31(1):71–106.

Merin Paul and Sangeetha Jamal. 2015. An im-
proved SRL based plagiarism detection technique
using sentence ranking. Procedia Computer Sci-
ence, 46:223–230.

Sameer Pradhan, Kadri Hacioglu, Wayne Ward,
James H. Martin, and Daniel Jurafsky. 2005. Se-
mantic role chunking combining complementary
syntactic views. In Proceedings of the Ninth Confer-
ence on Computational Natural Language Learning,
pages 217–220, Ann Arbor, Michigan.

Vasin Punyakanok, Dan Roth, and Wen-tau Yih. 2008.
The importance of syntactic parsing and inference in
semantic role labeling. Computational Linguistics,
34(2):257–287.

Michael Roth and Mirella Lapata. 2015. Context-
aware frame-semantic role labeling. Transactions
of the Association for Computational Linguistics,
3:449–460.

1201



Michael Roth and Kristian Woodsend. 2014. Com-
position of word representations improves seman-
tic role labelling. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing, pages 407–413, Doha, Qatar.

Jasper Snoek, Hugo Larochelle, and Ryan P. Adams.
2012. Practical bayesian optimization of machine
learning algorithms. In Advances in Neural Infor-
mation Processing Systems, pages 2951–2959, Lake
Tahoe, Nevada.

Vivek Srikumar and Dan Roth. 2013. Modeling se-
mantic relations expressed by prepositions. Trans-
actions of the Association for Computational Lin-
guistics, 1:231–242.

Kai Sheng Tai, Richard Socher, and Christopher D.
Manning. 2015. Improved semantic representa-
tions from tree-structured long short-term memory
networks. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Linguistics
and the 7th International Joint Conference on Nat-
ural Language Processing, pages 1556–1566, Bei-
jing, China.

Kristina Toutanova, Aria Haghighi, and Christopher
Manning. 2008. A global joint model for se-
mantic role labeling. Computational Linguistics,
34(2):161–191.

Laurens Van der Maaten and Geoffrey Hinton. 2008.
Visualizing data using t-SNE. Journal of Machine
Learning Research, 9:2579–2605.

Deyi Xiong, Min Zhang, and Haizhou Li. 2012. Mod-
eling the translation of predicate-argument structure
for smt. In Proceedings of the 50th Annual Meet-
ing of the Association for Computational Linguis-
tics, pages 902–911, Jeju Island, Korea.

Yan Xu, Lili Mou, Ge Li, Yunchuan Chen, Hao Peng,
and Zhi Jin. 2015. Classifying relations via long
short term memory networks along shortest depen-
dency paths. In Proceedings of the 2015 Confer-
ence on Empirical Methods in Natural Language
Processing, pages 1785–1794, Lisbon, Portugal.

Nianwen Xue and Martha Palmer. 2004. Calibrat-
ing features for semantic role labeling. In Proceed-
ings of the 2004 Conference on Empirical Meth-
ods in Natural Language Processing, pages 88–94,
Barcelona, Spain.

Beñat Zapirain, Eneko Agirre, Lluı́s Màrquez, and Mi-
hai Surdeanu. 2013. Selectional preferences for se-
mantic role classification. Computational Linguis-
tics, 39(3):631–663.

Hai Zhao, Wenliang Chen, Jun’ichi Kazama, Kiyotaka
Uchimoto, and Kentaro Torisawa. 2009. Multi-
lingual dependency learning: Exploiting rich fea-
tures for tagging syntactic and semantic dependen-
cies. In Proceedings of the Thirteenth Confer-
ence on Computational Natural Language Learning
(CoNLL 2009): Shared Task, pages 61–66, Boulder,
Colorado.

Jie Zhou and Wei Xu. 2015. End-to-end learning of
semantic role labeling using recurrent neural net-
works. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Linguistics
and the 7th International Joint Conference on Nat-
ural Language Processing, pages 1127–1137, Bei-
jing, China.

1202


