



















































Left-to-Right Dependency Parsing with Pointer Networks


Proceedings of NAACL-HLT 2019, pages 710–716
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

710

Left-to-Right Dependency Parsing with Pointer Networks

Daniel Fernández-González
Universidade da Coruña

FASTPARSE Lab, LyS Group
Departamento de Computación
Elviña, 15071 A Coruña, Spain
d.fgonzalez@udc.es

Carlos Gómez-Rodrı́guez
Universidade da Coruña, CITIC
FASTPARSE Lab, LyS Group
Departamento de Computación
Elviña, 15071 A Coruña, Spain
carlos.gomez@udc.es

Abstract

We propose a novel transition-based algorithm
that straightforwardly parses sentences from
left to right by building n attachments, with n
being the length of the input sentence. Sim-
ilarly to the recent stack-pointer parser by
Ma et al. (2018), we use the pointer network
framework that, given a word, can directly
point to a position from the sentence. How-
ever, our left-to-right approach is simpler than
the original top-down stack-pointer parser (not
requiring a stack) and reduces transition se-
quence length in half, from 2n − 1 actions to
n. This results in a quadratic non-projective
parser that runs twice as fast as the original
while achieving the best accuracy to date
on the English PTB dataset (96.04% UAS,
94.43% LAS) among fully-supervised single-
model dependency parsers, and improves over
the former top-down transition system in the
majority of languages tested.

1 Introduction

Dependency parsing, the task of automatically ob-
taining the grammatical structure of a sentence
expressed as a dependency tree, has been widely
studied by natural language processing (NLP) re-
searchers in the last decades. Most of the mod-
els providing competitive accuracies fall into two
broad families of approaches: graph-based (Mc-
Donald et al., 2005a,b) and transition-based (Ya-
mada and Matsumoto, 2003; Nivre, 2003) depend-
ency parsers.

Given an input sentence, a graph-based parser
scores trees by decomposing them into factors,
and performs a search for the highest-scoring tree.

In the past two years, this kind of depend-
ency parsers have been ahead in terms of accuracy
thanks to the graph-based neural architecture de-
veloped by Dozat and Manning (2016), which not
only achieved state-of-the-art accuracies on the

Stanford Dependencies conversion of the English
Penn Treebank (hereinafter, PTB-SD), but also ob-
tained the best results in the majority of languages
in the CoNLL 2017 Shared Task (Dozat et al.,
2017). This tendency recently changed, since
a transition-based parser developed by Ma et al.
(2018) managed to outperform the best graph-
based model in the majority of datasets tested.

Transition-based parsers incrementally build a
dependency graph for an input sentence by ap-
plying a sequence of transitions. This results in
more efficient parsers with linear time complex-
ity for parsing projective sentences, or quadratic
for handling non-projective structures, when im-
plemented with greedy or beam search. However,
their main weakness is the lack of access to global
context information when transitions are greedily
chosen. This favours error propagation, mainly
affecting long dependencies that require a larger
number of transitions to be built (McDonald and
Nivre, 2011).

Many attempts have been made to alleviate the
impact of error propagation in transition-based de-
pendency parsing, but the latest and most success-
ful approach was developed by Ma et al. (2018).
In particular, they make use of pointer networks
(Vinyals et al., 2015) to implement a new neural
network architecture called stack-pointer network.
The proposed framework provides a global view
of the input sentence by capturing information
from the whole sentence and all the arcs previ-
ously built, crucial for reducing the effect of error
propagation; and, thanks to an attention mechan-
ism (Bahdanau et al., 2014; Luong et al., 2015), is
able to return a position in that sentence that cor-
responds to a word related to the word currently
on top of the stack. They take advantage of this
and propose a novel transition system that follows
a top-down depth-first strategy to perform the syn-
tactic analysis. Concretely, it considers the word



711

pointed by the neural network as the child of the
word on top of the stack, and builds the corres-
ponding dependency relation between them. This
results in a transition-based algorithm that can
process unrestricted non-projective sentences in
O(n2) time complexity and requires 2n-1 actions
to successfully parse a sentence with n words.

We also take advantage of pointer network cap-
abilities and use the neural network architecture
introduced by Ma et al. (2018) to design a non-
projective left-to-right transition-based algorithm,
where the position value pointed by the network
has the opposite meaning: it denotes the index
that corresponds to the head node of the current
focus word. This results in a straightforward trans-
ition system that can parse a sentence in just n
actions, without the need of any additional data
structure and by just attaching each word from
the sentence to another word (including the root
node). Apart from increasing the parsing speed
twofold (while keeping the same quadratic time
complexity), it achieves the best accuracy to date
among fully-supervised single-model dependency
parsers on the PTB-SD, and obtains competitive
accuracies on twelve different languages in com-
parison to the original top-down version.

2 Preliminaries

Ma et al. (2018) propose a novel neural network
architecture whose main backbone is a pointer net-
work (Vinyals et al., 2015). This kind of neural
networks are able to learn the conditional probab-
ility of a sequence of discrete numbers that cor-
respond to positions in an input sequence (in this
case, indexes of words in a sentence) and, by
means of attention (Bahdanau et al., 2014; Luong
et al., 2015), implement a pointer that selects a po-
sition from the input at decoding time.

Their approach initially reads the whole sen-
tence, composed of the n words w1, . . . , wn, and
encodes each wi one by one into an encoder hid-
den state ei. As encoder, they employ a combin-
ation of CNNs and bi-directional LSTMs (Chiu
and Nichols, 2016; Ma and Hovy, 2016). For each
word, CNNs are used to obtain its character-level
representation that is concatenated to the word and
PoS embeddings to finally be fed into BiLSTMs
that encode word context information.

As decoder they present a top-down transition
system, where parsing configurations use the clas-
sic data structures (Nivre, 2008): a buffer (that

contains unattached words) and a stack (that holds
partially processed words).

The available parser actions are two transitions
that we call Shift-Attach-p and Reduce. Given a
configuration with word wi on top of the stack, as
the pointer network just returns a position p from a
given sentence, they proceed as follows to determ-
ine which transition should be applied:
• If p 6= i, then the pointed word wp is con-

sidered as a child of wi; so the parser chooses
a Shift-Attach-p transition to move wp from
the buffer to the stack and build an arc wi →
wp.
• On the other hand, if p = i, then wi is con-

sidered to have found all its children, and a
Reduce transition is applied to pop the stack.

The parsing process starts with a dummy root $ on
the stack and, by applying 2n-1 transitions, a de-
pendency tree is built for the input in a top-down
depth-first fashion, where multiple children of a
same word are forced during training to be created
in an inside-out manner. More in detail, for each
parsing configuration ct, the decoder (implemen-
ted as a uni-directional LSTM) receives the en-
coder hidden state ei of the word wi on top of the
stack to generate a decoder hidden state dt. After
that, dt, together with the sequence si of encoder
hidden states from words still in the buffer plus ei,
are used to compute the attention vector at as fol-
lows:

vti = score(dt, si) (1)

at = softmax(vt) (2)

As attention scoring function (score()), they ad-
opt the biaffine attention mechanism described in
(Luong et al., 2015; Dozat and Manning, 2016).
Finally, the attention vector at will be used to re-
turn the highest-scoring position p and choose the
next transition. The parsing process ends when
only the root remains on the stack.

As extra high-order features, Ma et al. (2018)
add grandparent and sibling information, whose
encoder hidden states are added to that of the word
on top of the stack to generate the corresponding
decoder hidden state dt. They prove that these
additions improve final accuracy, especially when
children are attached in an inside-out fashion.

According to the authors, the original stack-
pointer network is trained to maximize the like-
lihood of choosing the correct word for each pos-
sible top-down path from the root to a leaf. More



712

in detail, a dependency tree can be represen-
ted as a sequence of top-down paths p1, . . . , pk,
where each path pi corresponds to a sequence of
words $, wi,1, wi,2, . . . , wi,li from the root to a
leaf. Thus, the conditional probability Pθ(y|x) of
the dependency tree y for an input sentence x can
be factorized according to this top-down structure
as:

Pθ(y|x) =
k∏
i=1

Pθ(pi|p<i, x)

=
k∏
i=1

li∏
j=1

Pθ(wi,j |wi,<j , p<i, x)

where θ represents model parameters, p<i stands
for previous paths already explored, wi,j denotes
the jth word in path pi and wi,<j represents all the
previous words on pi.

For more thorough details of the stack-pointer
network architecture and the top-down transition
system, please read the original work by Ma et al.
(2018).

3 Our approach

We take advantage of the neural network architec-
ture designed by Ma et al. (2018) and introduce a
simpler left-to-right transition system that requires
neither a stack nor a buffer to process the input
sentence and where, instead of selecting a child of
the word on top of the stack, the network points to
the parent of the current focus word.

In particular, in our proposed approach, the
parsing configuration just corresponds to a focus
word pointer i, that is used to point to the word
currently being processed. The decoding process
starts with i pointing at the first word of the sen-
tence and, at each parsing configuration, only one
action is available: the parameterized Attach-p
transition, that links the focus word wi to the head
word wp in position p of the sentence (producing
the dependency arc wp → wi) and moves i one
position to the right. Note that, in our algorithm,
p can equal 0, attaching, in that case, wi to the
dummy root node. The parsing process ends when
the last word from the sentence is attached. This
can be easily represented as a loop that traverses
the input sentence from left to right, linking each
word to another from the same sentence or to the
dummy root. Therefore, we just need n steps to
process the n words of a given sentence and build
a dependency tree.

While our novel transition system intrinsically
holds the single-head constraint (since, after at-
taching the word wi, i points to the next word
wi+1 in the sentence), it can produce an output
with cycles.1 Therefore, in order to build a well-
formed dependency tree during decoding, attach-
ments that generate cycles in the already-built de-
pendency graph must be forbidden. Please note
that the need of a cycle-checking extension does
not increase the overall quadratic runtime com-
plexity of the original implementation by Ma et al.
(2018) since, as in other transition-based parsers
such as (Covington, 2001; Gómez-Rodrı́guez and
Nivre, 2010), cycles can be incrementally identi-
fied in amortized constant time by keeping track
of connected components using path compression
and union by rank. Therefore, the left-to-right al-
gorithm requires n steps to produce a parse. In ad-
dition, at each step, the attention vector at needs
to be computed and cycles must be checked, both
in O(n) + O(n) = O(n) runtime. This results in
a O(n2) time complexity for decoding.2

On the other hand, while in the top-down de-
coding only available words in the buffer (plus the
word on top of the stack) can be pointed to by the
network and they are reduced as arcs are created
(basically to keep the single-head constraint); our
proposed approach is less rigid: all words from the
sentence (including the root node and excluding
wi) can be pointed to, as long as they satisfy the
acyclicity constraint. This is necessary because
two different words might be attached to the same
head node and the latter can be located in the sen-
tence either before or after wi. Therefore, the se-
quence si, required by the attention score function
(Eq.(1)), is composed of the encoder hidden states
of all words from the input, excluding ei, and pre-
pending a special vector representation denoting
the root node.

We also add extra features to represent the cur-
rent focus word. Instead of using grandparent
and sibling information (more beneficial for a top-
down approach), we just add the encoder hidden

1In practice, even with the cycle detection mechanism dis-
abled, the presence of cycles in output parses is very uncom-
mon (for instance, just in 1% of sentences in the PTB-SD dev
set) since our system seems to adequately model well-formed
tree structures.

2A practically faster version of the left-to-right parser
might be implemented by just ignoring the presence of cycles
during decoding, and destroying the cycles generated as a
post-processing step that simply removes one of the arcs in-
volved.



713

states of the previous and next words in the sen-
tence to generate dt, which seems to be more suit-
able for a left-to-right decoding.

In dependency parsing, a tree for an input sen-
tence of length n can be represented as a set of n
directed and binary links l1, . . . , ln. Each link li is
characterized by the word wi in position i in the
sentence and its head word wh, resulting in a pair
(wi, wh). Therefore, to train this novel variant, we
factorize the conditional probability Pθ(y|x) to a
set of head-dependent pairs as follows:

Pθ(y|x) =
n∏
i=1

Pθ(li|l<i, x)

=
n∏
i=1

Pθ(wh|wi, l<i, x)

Therefore, the left-to-right parser is trained by
maximizing the likelihood of choosing the correct
head word wh for the word wi in position i, given
the previous predicted links l<i.

Finally, following a widely-used approach (also
implemented in (Ma et al., 2018)), dependency la-
bels are predicted by a multiclass classifier, which
is trained in parallel with the parser by optimizing
the sum of their objectives.

4 Experiments

4.1 Data and Settings

We use the same implementation as Ma et al.
(2018) and conduct experiments on the Stanford
Dependencies (de Marneffe and Manning, 2008)
conversion (using the Stanford parser v3.3.0)3 of
the English Penn Treebank (Marcus et al., 1993),
with standard splits and predicted PoS tags. In ad-
dition, we compare our approach to the original
top-down parser on the same twelve languages
from the Universal Dependency Treebanks4 (UD)
that were used by Ma et al. (2018).5

Following standard practice, we just exclude
punctuation for evaluating on PTB-SD and, for
each experiment, we report the average Labelled
and Unlabelled Attachment Scores (LAS and
UAS) over 3 and 5 repetitions for UD and PTB-
SD, respectively.

3https://nlp.stanford.edu/software/
lex-parser.shtml

4http://universaldependencies.org
5Please note that, since they used a former version of UD

datasets, we reran also the top-down algorithm on the latest
treebank version (2.2) in order to perform a fair comparison.

Parser UAS LAS
Chen and Manning (2014) 91.8 89.6
Dyer et al. (2015) 93.1 90.9
Weiss et al. (2015) 93.99 92.05
Ballesteros et al. (2016) 93.56 91.42
Kiperwasser and Goldberg (2016) 93.9 91.9
Alberti et al. (2015) 94.23 92.36
Qi and Manning (2017) 94.3 92.2
Fernández-G and Gómez-R (2018) 94.5 92.4
Andor et al. (2016) 94.61 92.79
Ma et al. (2018)∗ 95.87 94.19
This work∗ 96.04 94.43
Kiperwasser and Goldberg (2016) 93.1 91.0
Wang and Chang (2016) 94.08 91.82
Cheng et al. (2016) 94.10 91.49
Kuncoro et al. (2016) 94.26 92.06
Zhang et al. (2017) 94.30 91.95
Ma and Hovy (2017) 94.88 92.96
Dozat and Manning (2016) 95.74 94.08
Ma et al. (2018)∗ 95.84 94.21

Table 1: Accuracy comparison of state-of-the-art
fully-supervised single-model dependency parsers on
PT-SD. The first block contains transition-based al-
gorithms and the second one, graph-based models.
Systems marked with ∗, including the improved vari-
ant described in (Ma et al., 2018) of the graph-based
parser by (Dozat and Manning, 2016), are implemen-
ted under the same framework as our approach and use
the same training settings. Like (Ma et al., 2018), we
report the average accuracy over 5 repetitions.

Finally, we use the same hyper-parameter val-
ues, pre-trained word embeddings and beam size
(10 for PTB-SD and 5 for UD) as Ma et al. (2018).

4.2 Results

By outperforming the two current state-of-the-
art graph-based (Dozat and Manning, 2016) and
transition-based (Ma et al., 2018) models on the
PTB-SD, our approach becomes the most accur-
ate fully-supervised dependency parser developed
so far, as shown in Table 1.6

In addition, in Table 2 we can see how, under
the exactly same conditions, the left-to-right al-
gorithm improves over the original top-down vari-
ant in nine out of twelve languages in terms of
LAS, obtaining competitive results in the remain-
ing three datasets.

Finally, in spite of requiring a cycle-checking
procedure, our approach proves to be twice as
fast as the top-down alternative in decoding time,

6It is worth mentioning that all parsers reported in this
section make use of pre-trained word embeddings previously
learnt from corpora beyond the training dataset. However, it
is common practice in the literature that systems that only use
standard pre-trained word embeddings are classed as fully-
supervised models, even though, strictly, they are not trained
exclusively on the official training data.

https://nlp.stanford.edu/software/lex-parser.shtml
https://nlp.stanford.edu/software/lex-parser.shtml
http://universaldependencies.org


714

Top-down Left-to-right
UAS LAS UAS LAS

bu 94.42±0.02 90.70±0.04 94.28±0.06 90.66±0.11
ca 93.83±0.02 91.96±0.01 94.07±0.06 92.26±0.05
cs 93.97±0.02 91.23±0.03 94.19±0.04 91.45±0.05
de 87.28±0.07 82.99±0.07 87.06±0.05 82.63±0.01
en 90.86±0.15 88.92±0.19 90.93±0.11 88.99±0.11
es 93.09±0.05 91.11±0.03 93.23±0.03 91.28±0.02
fr 90.97±0.09 88.22±0.12 90.90±0.04 88.14±0.10
it 94.08±0.04 92.24±0.06 94.28±0.06 92.48±0.02
nl 93.23±0.09 90.67±0.07 93.13±0.07 90.74±0.08
no 95.02±0.05 93.75±0.05 95.23±0.06 93.99±0.07
ro 91.44±0.11 85.80±0.14 91.58±0.08 86.00±0.07
ru 94.43±0.01 93.08±0.03 94.71±0.07 93.38±0.09

Table 2: Parsing accuracy of the top-down and left-to-
right pointer-network-based parsers on test datasets of
twelve languages from UD. Best results for each lan-
guage are shown in bold and, apart from the average
UAS and LAS, we also report the corresponding stand-
ard deviation over 3 runs.

achieving, under the exact same conditions, a
23.08-sentences-per-second speed on the PTB-SD
compared to 10.24 of the original system.7

5 Related work

There is previous work that proposes to imple-
ment dependency parsing by independently select-
ing the head of each word in a sentence, using
neural networks. In particular, Zhang et al. (2017)
make use of a BiLSTM-based neural architecture
to compute the probability of attaching each word
to one of the other input words, in a similar way
as pointer networks do. During decoding, a post-
processing step is needed to produce well-formed
trees by means of a maximum spanning tree al-
gorithm. Our approach does not need this post-
processing, as cycles are forbidden during parsing
instead, and achieves a higher accuracy thanks to
the pointer network architecture and the use of in-
formation about previous dependencies.

Before Ma et al. (2018) presented their top-
down parser, Chorowski et al. (2017) had already
employed pointer networks (Vinyals et al., 2015)
for dependency parsing. Concretely, they de-
veloped a pointer-network-based neural architec-
ture with multitask learning able to perform pre-
processing, tagging and dependency parsing ex-
clusively by reading tokens from an input sen-

7Please note that the implementation by Ma et al. (2018),
also used by our novel approach, was not optimized for speed
and, therefore, the reported speeds are just intended for com-
paring algorithms implemented under the same framework,
but not to be considered as the best speed that a pointer-
network-based system can potentially achieve.

tence, without needing POS tags or pre-trained
word embeddings. Like our approach, they also
use the capabilities provided by pointer networks
to undertake the parsing task as a simple process
of attaching each word as dependent of another.
They also try to improve the network perform-
ance with POS tag prediction as auxiliary task and
with different approaches to perform label predic-
tion. They do not exclude cycles, neither by for-
bidding them at parsing time or by removing them
by post-processing, as they report that their sys-
tem produces parses with a negligible amount of
cycles, even with greedy decoding (matching our
observation for our own system, in our case with
beam-search decoding). Finally, the system de-
veloped by Chorowski et al. (2017) is constrained
to projective dependencies, while our approach
can handle unrestricted non-projective structures.

6 Conclusion

We present a novel left-to-right dependency parser
based on pointer networks. We follow the same
neural network architecture as the stack-pointer-
based approach developed by Ma et al. (2018), but
just using a focus word index instead of a buffer
and a stack. Apart from doubling their system’s
speed, our approach proves to be a competitive al-
ternative on a variety of languages and achieves
the best accuracy to date on the PTB-SD.

The good performance of our algorithm can
be explained by the shortening of the trans-
ition sequence length. In fact, it has been
proved by several studies (Fernández-González
and Gómez-Rodrı́guez, 2012; Qi and Man-
ning, 2017; Fernández-González and Gómez-
Rodrı́guez, 2018) that by reducing the number of
applied transitions, the impact of error propagation
is alleviated, yielding more accurate parsers.

Our system’s source code is freely avail-
able at https://github.com/danifg/
Left2Right-Pointer-Parser.

Acknowledgments

This work has received funding from the European
Research Council (ERC), under the European
Union’s Horizon 2020 research and innovation
programme (FASTPARSE, grant agreement No
714150), from MINECO (FFI2014-51978-C2-2-
R, TIN2017-85160-C2-1-R) and from Xunta de
Galicia (ED431B 2017/01).

https://github.com/danifg/Left2Right-Pointer-Parser
https://github.com/danifg/Left2Right-Pointer-Parser


715

References
Chris Alberti, David Weiss, Greg Coppola, and Slav

Petrov. 2015. Improved transition-based parsing and
tagging with neural networks. In Proceedings of the
2015 Conference on Empirical Methods in Natural
Language Processing, EMNLP 2015, Lisbon, Por-
tugal, September 17-21, 2015, pages 1354–1359.

Daniel Andor, Chris Alberti, David Weiss, Aliaksei
Severyn, Alessandro Presta, Kuzman Ganchev, Slav
Petrov, and Michael Collins. 2016. Globally nor-
malized transition-based neural networks. In Pro-
ceedings of the 54th Annual Meeting of the Associ-
ation for Computational Linguistics, ACL 2016, Au-
gust 7-12, 2016, Berlin, Germany, Volume 1: Long
Papers.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua
Bengio. 2014. Neural machine translation by
jointly learning to align and translate. CoRR,
abs/1409.0473.

Miguel Ballesteros, Yoav Goldberg, Chris Dyer, and
Noah A. Smith. 2016. Training with exploration im-
proves a greedy stack LSTM parser. In Proceedings
of the 2016 Conference on Empirical Methods in
Natural Language Processing, EMNLP 2016, Aus-
tin, Texas, USA, November 1-4, 2016, pages 2005–
2010.

Danqi Chen and Christopher Manning. 2014. A fast
and accurate dependency parser using neural net-
works. In Proceedings of the 2014 Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 740–750, Doha, Qatar.

Hao Cheng, Hao Fang, Xiaodong He, Jianfeng Gao,
and Li Deng. 2016. Bi-directional attention with
agreement for dependency parsing. In Proceed-
ings of the 2016 Conference on Empirical Methods
in Natural Language Processing, pages 2204–2214.
Association for Computational Linguistics.

Jason Chiu and Eric Nichols. 2016. Named entity
recognition with bidirectional lstm-cnns. Transac-
tions of the Association for Computational Linguist-
ics, 4:357–370.

Jan Chorowski, Michal Zapotoczny, and Pawel Rych-
likowski. 2017. Read, tag, and parse all at
once, or fully-neural dependency parsing. CoRR,
abs/1609.03441.

Michael A. Covington. 2001. A fundamental algorithm
for dependency parsing. In Proceedings of the 39th
Annual ACM Southeast Conference, pages 95–102,
New York, NY, USA. ACM.

Timothy Dozat and Christopher D. Manning. 2016.
Deep biaffine attention for neural dependency pars-
ing. CoRR, abs/1611.01734.

Timothy Dozat, Peng Qi, and Christopher D. Manning.
2017. Stanford’s graph-based neural dependency

parser at the conll 2017 shared task. In Proceed-
ings of the CoNLL 2017 Shared Task: Multilingual
Parsing from Raw Text to Universal Dependencies,
Vancouver, Canada, August 3-4, 2017, pages 20–30.

Chris Dyer, Miguel Ballesteros, Wang Ling, Austin
Matthews, and Noah A. Smith. 2015. Transition-
based dependency parsing with stack long short-
term memory. In Proceedings of the 53rd Annual
Meeting of the Association for Computational Lin-
guistics and the 7th International Joint Conference
on Natural Language Processing of the Asian Fed-
eration of Natural Language Processing, ACL 2015,
July 26-31, 2015, Beijing, China, Volume 1: Long
Papers, pages 334–343.

Daniel Fernández-González and Carlos Gómez-
Rodrı́guez. 2012. Improving transition-based
dependency parsing with buffer transitions. In
Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Processing
and Computational Natural Language Learning,
pages 308–319. Association for Computational
Linguistics.

Daniel Fernández-González and Carlos Gómez-
Rodrı́guez. 2018. Non-projective dependency
parsing with non-local transitions. In Proceedings
of the 2018 Conference of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies, Volume
2 (Short Papers), pages 693–700. Association for
Computational Linguistics.

Carlos Gómez-Rodrı́guez and Joakim Nivre. 2010.
A transition-based parser for 2-planar dependency
structures. In Proceedings of the 48th Annual Meet-
ing of the Association for Computational Linguist-
ics, ACL ’10, pages 1492–1501.

Eliyahu Kiperwasser and Yoav Goldberg. 2016.
Simple and accurate dependency parsing using bi-
directional LSTM feature representations. TACL,
4:313–327.

Adhiguna Kuncoro, Miguel Ballesteros, Lingpeng
Kong, Chris Dyer, and Noah A. Smith. 2016. Dis-
tilling an ensemble of greedy dependency parsers
into one mst parser. In Proceedings of the 2016
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 1744–1753. Association
for Computational Linguistics.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natural
Language Processing, pages 1412–1421. Associ-
ation for Computational Linguistics.

Xuezhe Ma and Eduard Hovy. 2016. End-to-end se-
quence labeling via bi-directional lstm-cnns-crf. In
Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), pages 1064–1074. Association for
Computational Linguistics.

http://aclweb.org/anthology/D/D15/D15-1159.pdf
http://aclweb.org/anthology/D/D15/D15-1159.pdf
http://aclweb.org/anthology/P/P16/P16-1231.pdf
http://aclweb.org/anthology/P/P16/P16-1231.pdf
http://aclweb.org/anthology/D/D16/D16-1211.pdf
http://aclweb.org/anthology/D/D16/D16-1211.pdf
http://www.aclweb.org/anthology/D14-1082
http://www.aclweb.org/anthology/D14-1082
http://www.aclweb.org/anthology/D14-1082
https://doi.org/10.18653/v1/D16-1238
https://doi.org/10.18653/v1/D16-1238
http://aclweb.org/anthology/Q16-1026
http://aclweb.org/anthology/Q16-1026
http://arxiv.org/abs/1609.03441
http://arxiv.org/abs/1609.03441
http://arxiv.org/abs/1611.01734
http://arxiv.org/abs/1611.01734
https://doi.org/10.18653/v1/K17-3002
https://doi.org/10.18653/v1/K17-3002
http://aclweb.org/anthology/P/P15/P15-1033.pdf
http://aclweb.org/anthology/P/P15/P15-1033.pdf
http://aclweb.org/anthology/P/P15/P15-1033.pdf
http://aclweb.org/anthology/D/D12/D12-1029.pdf
http://aclweb.org/anthology/D/D12/D12-1029.pdf
https://doi.org/10.18653/v1/N18-2109
https://doi.org/10.18653/v1/N18-2109
http://portal.acm.org/citation.cfm?id=1858681.1858832
http://portal.acm.org/citation.cfm?id=1858681.1858832
https://transacl.org/ojs/index.php/tacl/article/view/885
https://transacl.org/ojs/index.php/tacl/article/view/885
https://doi.org/10.18653/v1/D16-1180
https://doi.org/10.18653/v1/D16-1180
https://doi.org/10.18653/v1/D16-1180
https://doi.org/10.18653/v1/D15-1166
https://doi.org/10.18653/v1/D15-1166
https://doi.org/10.18653/v1/P16-1101
https://doi.org/10.18653/v1/P16-1101


716

Xuezhe Ma and Eduard Hovy. 2017. Neural prob-
abilistic model for non-projective mst parsing. In
Proceedings of the Eighth International Joint Con-
ference on Natural Language Processing (Volume
1: Long Papers), pages 59–69. Asian Federation of
Natural Language Processing.

Xuezhe Ma, Zecong Hu, Jingzhou Liu, Nanyun Peng,
Graham Neubig, and Eduard H. Hovy. 2018. Stack-
pointer networks for dependency parsing. In Pro-
ceedings of the 56th Annual Meeting of the Asso-
ciation for Computational Linguistics, ACL 2018,
Melbourne, Australia, July 15-20, 2018, Volume 1:
Long Papers, pages 1403–1414.

Mitchell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a large annotated
corpus of English: The Penn Treebank. Computa-
tional Linguistics, 19:313–330.

Marie-Catherine de Marneffe and Christopher D. Man-
ning. 2008. The stanford typed dependencies rep-
resentation. In Coling 2008: Proceedings of the
Workshop on Cross-Framework and Cross-Domain
Parser Evaluation, CrossParser ’08, pages 1–8,
Stroudsburg, PA, USA. Association for Computa-
tional Linguistics.

Ryan McDonald, Koby Crammer, and Fernando
Pereira. 2005a. Online large-margin training of de-
pendency parsers. In Proceedings of the 43rd An-
nual Meeting of the Association for Computational
Linguistics (ACL), pages 91–98.

Ryan McDonald and Joakim Nivre. 2011. Analyzing
and integrating dependency parsers. Comput. Lin-
guist., 37:197–230.

Ryan McDonald, Fernando Pereira, Kiril Ribarov, and
Jan Hajič. 2005b. Non-projective dependency pars-
ing using spanning tree algorithms. In Proceed-
ings of the Human Language Technology Confer-
ence and the Conference on Empirical Methods in
Natural Language Processing (HLT/EMNLP), pages
523–530.

Joakim Nivre. 2003. An efficient algorithm for pro-
jective dependency parsing. In Proceedings of the
8th International Workshop on Parsing Technologies
(IWPT 03), pages 149–160. ACL/SIGPARSE.

Joakim Nivre. 2008. Algorithms for deterministic in-
cremental dependency parsing. Computational Lin-
guistics, 34:513–553.

Peng Qi and Christopher D. Manning. 2017. Arc-swift:
A novel transition system for dependency parsing.
In Proceedings of the 55th Annual Meeting of the As-
sociation for Computational Linguistics, ACL 2017,
Vancouver, Canada, July 30 - August 4, Volume 2:
Short Papers, pages 110–117.

Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly.
2015. Pointer networks. In C. Cortes, N. D.
Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett,
editors, Advances in Neural Information Processing

Systems 28, pages 2692–2700. Curran Associates,
Inc.

Wenhui Wang and Baobao Chang. 2016. Graph-based
dependency parsing with bidirectional lstm. In Pro-
ceedings of the 54th Annual Meeting of the Asso-
ciation for Computational Linguistics (Volume 1:
Long Papers), pages 2306–2315. Association for
Computational Linguistics.

David Weiss, Chris Alberti, Michael Collins, and Slav
Petrov. 2015. Structured training for neural net-
work transition-based parsing. In Proceedings of the
53rd Annual Meeting of the Association for Compu-
tational Linguistics and the 7th International Joint
Conference on Natural Language Processing of the
Asian Federation of Natural Language Processing,
ACL 2015, July 26-31, 2015, Beijing, China, Volume
1: Long Papers, pages 323–333.

Hiroyasu Yamada and Yuji Matsumoto. 2003. Statist-
ical dependency analysis with support vector ma-
chines. In Proceedings of the 8th International
Workshop on Parsing Technologies (IWPT), pages
195–206.

Xingxing Zhang, Jianpeng Cheng, and Mirella Lapata.
2017. Dependency parsing as head selection. In
Proceedings of the 15th Conference of the European
Chapter of the Association for Computational Lin-
guistics, EACL 2017, Valencia, Spain, April 3-7,
2017, Volume 1: Long Papers, pages 665–676.

http://aclweb.org/anthology/I17-1007
http://aclweb.org/anthology/I17-1007
https://aclanthology.info/papers/P18-1130/p18-1130
https://aclanthology.info/papers/P18-1130/p18-1130
http://dl.acm.org/citation.cfm?id=1608858.1608859
http://dl.acm.org/citation.cfm?id=1608858.1608859
https://doi.org/http://dx.doi.org/10.1162/coli_a_00039
https://doi.org/http://dx.doi.org/10.1162/coli_a_00039
https://doi.org/10.18653/v1/P17-2018
https://doi.org/10.18653/v1/P17-2018
http://papers.nips.cc/paper/5866-pointer-networks.pdf
https://doi.org/10.18653/v1/P16-1218
https://doi.org/10.18653/v1/P16-1218
http://aclweb.org/anthology/P/P15/P15-1032.pdf
http://aclweb.org/anthology/P/P15/P15-1032.pdf
https://aclanthology.info/papers/E17-1063/e17-1063

