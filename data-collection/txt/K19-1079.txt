



















































Do Massively Pretrained Language Models Make Better Storytellers?


Proceedings of the 23rd Conference on Computational Natural Language Learning, pages 843–861
Hong Kong, China, November 3-4, 2019. c©2019 Association for Computational Linguistics

843

Do Massively Pretrained Language Models Make Better Storytellers?

Abigail See, Aneesh Pappu∗, Rohun Saxena∗, Akhila Yerukola∗, Christopher D. Manning
Stanford University

{abisee,apappu,rohun,akhilay,manning}@cs.stanford.edu

Abstract
Large neural language models trained on mas-
sive amounts of text have emerged as a
formidable strategy for Natural Language Un-
derstanding tasks. However, the strength of
these models as Natural Language Generators
is less clear. Though anecdotal evidence sug-
gests that these models generate better quality
text, there has been no detailed study charac-
terizing their generation abilities. In this work,
we compare the performance of an extensively
pretrained model, OpenAI GPT2-117 (Rad-
ford et al., 2019), to a state-of-the-art neural
story generation model (Fan et al., 2018). By
evaluating the generated text across a wide va-
riety of automatic metrics, we characterize the
ways in which pretrained models do, and do
not, make better storytellers. We find that al-
though GPT2-117 conditions more strongly on
context, is more sensitive to ordering of events,
and uses more unusual words, it is just as
likely to produce repetitive and under-diverse
text when using likelihood-maximizing decod-
ing algorithms.

1 Introduction

In 2018, large-scale neural models such as ELMo
(Peters et al., 2018), BERT (Devlin et al., 2019)
and OpenAI GPT (Radford et al., 2018) emerged
as a dominant approach in NLP. By pretraining
on massive amounts of unlabeled text (often or-
ders of magnitude larger than the the target task’s
labeled dataset), these models achieve state-of-
the-art performance across a variety of Natural
Language Understanding benchmarks. In partic-
ular, the OpenAI GPT2 language model (Rad-
ford et al., 2019) achieves state-of-the-art perfor-
mance on several language modeling benchmarks,
even in a zero-shot setting. While GPT2’s perfor-
mance as a language model is undeniable, its per-
formance as a text generator is much less clear.

∗equal contribution

Though the model has generated certain impres-
sive samples of text – such as a widely-circulated
passage about Ovid’s Unicorn (Radford et al.,
2019) – there has been no detailed study to for-
malize these observations.

In this work, we perform an in-depth study
of the properties of text generated by GPT2-117
(the smallest version of GPT2) in the context of
story generation. By comparing to a state-of-the-
art, specialized-architecture neural story genera-
tion model (Fan et al., 2018), we ask the follow-
ing questions. In what ways does a large amount
of open-domain pretraining data change the char-
acteristics of generated text? In what ways does it
make no difference? And is a task-specific archi-
tecture necessary?

For any probabilistic language model, the gen-
erated text is strongly affected by the choice of de-
coding algorithm – this is especially true for open-
ended text generation tasks such as storytelling
and chitchat dialogue (Kulikov et al., 2018; Holtz-
man et al., 2019). Nevertheless, most natural lan-
guage generation papers evaluate only one decod-
ing algorithm – this is often due to the time and
expense required for human evaluation. For ex-
ample, Fan et al. use top-k sampling (a decoding
algorithm in which k governs the quality-diversity
tradeoff), but only evaluate one value of k. How-
ever, evaluating one k gives an incomplete view of
the generation system – several researchers have
emphasized the importance of evaluating genera-
tion systems over the entire quality-diversity spec-
trum, rather than a single point on it (Caccia et al.,
2018; Hashimoto et al., 2019).

In this study, we prioritize evaluating text across
the whole k spectrum, and measuring many dif-
ferent automatic metrics, rather than a few hu-
man metrics. Though the lack of human evalu-
ation limits our ability to measure overall quality
(Liu et al., 2016; Novikova et al., 2017; Hashimoto



844

et al., 2019), we are able to produce an objectively
defined, richly detailed and reproducible evalua-
tion of the generated text. To our knowledge, this
work is the first comprehensive analysis of the
characteristics of GPT2-generated text. Our study
provides insight into the effect of large-scale pre-
training on open-ended natural language genera-
tion, as well as the effect of k on text generated
with top-k sampling. We hope our results will in-
form other researchers’ choice of models, pretrain-
ing schemes, and decoding algorithms – decisions
that can often feel like blind choices. To enable
readers to browse the generated text, conduct their
own evaluations, or run our evaluations on their
own text, we publicly release our generated stories
and evaluation code.1

2 Background

WritingPrompts dataset WritingPrompts (Fan
et al., 2018) is a story generation dataset contain-
ing 303,358 human-written (prompt, story) pairs
collected from the /r/WritingPrompts subreddit –
a forum where Reddit users compose short stories
inspired by other users’ prompts. An example can
be seen at the top of Table 2. The mean prompt
length is 28.4 words and the mean story length is
734.5 words. The dataset is 887MB of text in total,
contains 200 million story words, and is divided
into 90% train, 5% validation and 5% test splits.

The Fusion Model The Fusion Model is a
state-of-the-art neural story generation architec-
ture trained on the WritingPrompts dataset (Fan
et al., 2018). It is based on the Convolutional
Seq2seq model of Gehring et al. (2017) and aims
to improve two aspects of story generation: mod-
eling long-range context and increasing relevance
of the story to the prompt. To achieve the former,
the model uses a multi-scale gated self-attention
mechanism. For the latter, the model uses a fu-
sion mechanism (Sriram et al., 2018) in which one
seq2seq model is trained on the task, then frozen,
and a second seq2seq model is trained on the
task with access to the first model’s hidden states.
Compared to the Convolutional Seq2seq model
and other baselines, the Fusion Model achieves
improved perplexity, story-prompt relevance and
human preference scores. The Fusion Model has
a vocabulary of 104,960 words, a 3-layer encoder
and 8-layer decoder in the first seq2seq model, and

1Code and generated stories available at https://
github.com/abisee/story-generation-eval

a 5-layer encoder and 5-layer decoder in the sec-
ond model – in total, 255.4 million parameters.

GPT2-117 GPT2 (Radford et al., 2019) is a
large Transformer language model trained on
WebText, a diverse corpus of internet text (not
publicly released) containing over 8 million doc-
uments equalling 40GB of text in total. The full-
size GPT2 model, which has 1542 million pa-
rameters, obtains state-of-the-art results on a va-
riety of language modeling and other Natural Lan-
guage Understanding benchmarks. At the time
of our experiments, Radford et al. had only re-
leased the smallest of the models, known as GPT2-
117.2 This model, which we use for our experi-
ments, has 12 layers and 117 million parameters.
Like the full-size GPT2 model, it has a vocabu-
lary of 50,257 byte-pair-encoding (BPE) tokens.
The BPE encoding allows the model to encode
and generate any Unicode string, regardless of pre-
processing, tokenization, or vocabulary size. The
model has a context size of 1024, meaning it can
process text up to 1024 BPE tokens in length.

Decoding algorithms Inspired by Neural Ma-
chine Translation, most early attempts at open-
ended neural text generation (such as conversa-
tional response generation) used the beam search
decoding algorithm (Shang et al., 2015; Serban
et al., 2016). Like greedy decoding, beam search
is a likelihood-maximizing decoding algorithm –
given the input sequence x, the objective is to find
an output sequence y which maximizes P (y|x).
However, researchers have shown that for open-
ended generation tasks (including storytelling),
beam search produces repetitive, generic and de-
generate text (Holtzman et al., 2019).

More recently, top-k sampling has emerged as
a primary decoding algorithm for open-ended text
generation (Fan et al., 2018; Radford et al., 2019).
In top-k sampling, on each step of the decoder
the probability distribution over the vocabulary is
truncated to the top k tokens, then re-normalized.
The next token is sampled from the new distribu-
tion. Top-k sampling can be regarded as some-
where between a likelihood maximizing algorithm
(when k = 1; greedy decoding) and an unbiased
sampling algorithm (when k = vocabulary size).
Fan et al. use top-k sampling (with k = 10) to

2Since conducting our experiments, larger models have
been publicly released. At the time of writing, the full-size
GPT2 model has not been publicly released.

https://github.com/abisee/story-generation-eval
https://github.com/abisee/story-generation-eval


845

generate stories, and Radford et al. show impres-
sive samples of generated text (primarily from the
full-size GPT2 model) for k = 40.

3 Experimental Details

Preprocessing Fan et al. truncate Writing-
Prompts stories to 1000 words before training and
testing. Due to the limited context size of GPT2-
117, we additionally exclude (prompt, story) ex-
amples that are longer than 1024 BPE tokens when
concatenated. The resulting dataset, which we
call WritingPrompts-1024, has 192,364 training,
11,115 validation, and 10,686 test examples.

The Fusion Model We use the pretrained ver-
sion of the Fusion Model, which is available in
the Fairseq framework (Ott et al., 2019). For com-
parability with GPT2-117, we evaluate the Fusion
Model on WritingPrompts-1024 (see Table 1), ob-
taining perplexities similar to those reported by
Fan et al. on the full WritingPrompts dataset.

GPT2-117 In order for the model to condition
on prompts and generate stylistically correct sto-
ries, we finetune GPT2-117 on WritingPrompts-
1024.3 We frame WritingPrompts as a language
modeling task, representing the prompt and story
as a single sequence separated by a delimiter to-
ken. We finetune the pretrained model until con-
vergence using the default hyperparameters pro-
vided in the HuggingFace repository (though we
reduce batch size to fit on a single GPU), and use
the finetuned model for all further evaluations.

We compute the word-level perplexity of the
finetuned GPT2-117 on the WritingPrompts-1024
dataset. That is, we normalize the total negative
log probability of the target text by the number
of word-level (i.e. Fusion Model) tokens, not the
number of BPE tokens. This enables us to com-
pare the perplexities of the two models, despite
the tokenization difference (Radford et al., 2019).
The finetuned GPT2-117 obtains a test set word-
perplexity of 31.544 – six points lower than the
Fusion Model.

Generation settings For both models, we gen-
erate stories using top-k sampling, obtaining 1000
stories (from 1000 different test set prompts) for

3We use the PyTorch re-implementation of GPT2-117
available at https://github.com/huggingface/
pytorch-transformers

4This is similar to other GPT2-117 WritingPrompts fine-
tuning experiments (Mao et al., 2019; Ziegler et al., 2019).

Model Valid ppl Test ppl
Fusion Model 37.05 37.54
GPT2-117 31.13 31.54

Table 1: Word-level perplexities on WritingPrompts-
1024 for the Fusion Model and finetuned GPT2-117.

several values of k ranging from 1 to vocabulary
size. We use softmax temperature 1. Like Fan
et al., we generate exactly 150-word stories and
block the Fusion Model from generating <UNK>.

To obtain human-written stories for compari-
son, we truncate WritingPrompts-1024 test set sto-
ries to 150 words (discarding those shorter than
150 words). To reduce variance, measurements
for human stories are computed over this entire set
(rather than just 1000 stories).

4 Story-prompt relatedness

Prior research has observed that seq2seq systems
frequently produce text that is unrelated to the
provided context – particularly under likelihood-
maximizing decoding algorithms such as beam
search. The issue has inspired multiple explana-
tions (Jiang and de Rijke, 2018) and multiple so-
lutions – such as alternative training objectives (Li
et al., 2016), decoding objectives (Baheti et al.,
2018; See et al., 2019), and architectural changes
(Fan et al., 2018). In this section, we measure how
strongly the models condition on the prompt.

Prompt ranking accuracy For both models, we
compute prompt ranking accuracy (Fan et al.,
2018), which measures the language model’s sen-
sitivity to the provided prompt. Following the
methodology of Fan et al., we randomly select
1000 human-written stories from the test set, and
measure the probability (according to the model)
of each story conditioned on 10 different prompts
– the true prompt, plus nine randomly selected
prompts. The prompt ranking accuracy of a model
is the percentage of cases in which the model as-
signs a higher probability to the story under its
true prompt than under all of the other nine. We
find that GPT2-117 scores 80.16% on this task,
while the Fusion Model scores 39.8%.5 Random
chance scores 10%. This striking result indicates

5Fan et al. (2018) report a prompt ranking accuracy of
16.3% for the Fusion Model. We provided the authors with
our prompt ranking accuracy code (which was built on top of
the authors’ code). The authors indicated that the discrepancy
may be due to some code version changes between the time
of their original experiments and their code release.

https://github.com/huggingface/pytorch-transformers
https://github.com/huggingface/pytorch-transformers


846

100 101 102 103 104 105
k (Top-k sampling)

0.05

0.10
St

or
y-

pr
om

pt
 se

nt
 si

m
Human
Fusion Model
GPT2-117

Figure 1: Compared to the Fusion Model, GPT2-117
produces stories that are more semantically similar to
the prompt. Similarity decreases as k increases.

that GPT2-117 conditions on the prompt much
more strongly than the Fusion Model. This is no-
table, especially because the fusion technique is
intended to improve story-prompt relevance.

N-gram similarity For n = 1, 2, 3, we measure
the percentage of generated n-grams that also ap-
pear in the prompt. For all n and k, we find that
GPT2-117 has a higher overlap (i.e. copies more
from the prompt) than the Fusion Model – see Fig-
ure 6 in the Appendix. Furthermore, for k < 100,
the GPT2-117 overlap is generally much higher
than human levels. Both these phenomena can be
seen in Table 2, where, for k = 10, GPT2-117
copies words such as queen more often than both
the Fusion Model and the human-written story.

Sentence embedding similarity To capture a
higher-level notion of semantic similarity, we
measure story-prompt sentence similarity – the co-
sine similarity of story-prompt sentence pairs, av-
eraged by taking the mean over all pairs. Sen-
tences are represented by the embedding method
of Arora et al. (2017) – a weighted average of
the GloVe embeddings (Pennington et al., 2014)
of the words, with the first principal component
removed. As shown in Figure 1, we find a similar
pattern as for n-gram similarity: GPT2-117 gener-
ates sentences that are more similar to the prompt
than the Fusion Model for all k, and both models’
prompt similarity decreases as k increases.

Named entity usage Generally, most named en-
tities mentioned in the prompt (such as Queen and
England in Table 2), should also be mentioned in
the story. Using the spaCy named entity recog-
nizer,6 we measure the prompt entity usage rate,
which is the percentage of all prompt named enti-

6https://spacy.io

ties that appear in the story.7 As shown in Figure
7 in the Appendix, we find that GPT2-117 uses
more of the prompt named entities than the Fusion
Model (as well as more named entities overall),
but both models use fewer named entities than hu-
mans when k is less than vocabulary size.

These patterns can be seen in Table 2: GPT2-
117 uses the prompt entities Queen and England
whereas the Fusion Model does not (for either k),
and GPT2-117 uses specific time entities such as
Thursday and 3:26 PM. While the human story
introduces highly-related entities such as Charles
Windsor and Prince of Wales that were not in the
prompt, neither model does this (for either k).

Conclusion In this section, we found that
GPT2-117 conditions on the prompt much more
strongly than the Fusion Model – a result which
holds both in language modeling and generation
settings. The latter result supports Radford et al.’s
informal observation that GPT2 has a ‘chameleon-
like’ ability to ‘adapt to the style and content of the
conditioning text’.8 We speculate that GPT2-117’s
stronger conditioning ability may derive from its
Transformer decoder architecture, whose power-
ful self-attention is used for story-prompt atten-
tion. Though the Fusion Model uses a similar
self-attention mechanism in the decoder (i.e., story
side), the prompt-story attention has a simpler for-
mulation – for example, there are no separate key
and value vectors (Gehring et al., 2017). Lastly,
we note that very strong prompt-conditioning is
not always a good thing – GPT2-117 often gen-
erates stories that copy too much or too literally
from the prompt when k is small (this can be seen
in Figure 6 in the Appendix).

5 Coherence

A good story generation model should produce co-
herent text with a logical ordering of events. Sim-
ilarly, the underlying language model should be a
good coherence scorer – assigning higher proba-
bility to coherent text than incoherent text. Barzi-
lay and Lapata (2008) evaluate a coherence scorer
by measuring its ability to rank shuffled human-
written text as less coherent than the original un-
shuffled text. We use this method to evaluate our
story generation models.

7Given that we limit stories to 150 words, this percentage
is lower than it would be if we generated longer stories.

8https://openai.com/blog/
better-language-models/

https://spacy.io
https://openai.com/blog/better-language-models/
https://openai.com/blog/better-language-models/


847

1 2 3 4 5 6 7 8 9 10 11 12 13 14
Position of swapped sentences

6.5

7.0

7.5
M

ea
n 

ra
nk

 (1
-1

4)

Fusion Model
GPT2-117

Figure 2: Sensitivity of the models to swapped sen-
tences in different positions. A higher mean rank in-
dicates higher sensitivity (i.e. the model assigns lower
probability) relative to other positions. Both models are
less sensitive to swapped sentences at the beginning of
the text, compared to later. GPT2-117 shows this pat-
tern more strongly, indicating greater use of context.

For each story in the test set, we select the first
15 sentences. We then produce 14 corrupted ver-
sions of the story by switching each pair of ad-
jacent sentences. We use the language model to
compute the probability of each of the 14 cor-
rupted stories, as well as the original story. The
model’s error rate is the percentage of cases in
which it rates any of the 14 corrupted candidates
better than the original candidate. Random guess-
ing yields 93.33% error. Both models perform
well on this task – the Fusion Model has an er-
ror rate of 3.44% and GPT2-117 an error rate of
2.17%. This 36.92% error reduction indicates that
GPT2-117 is more sensitive to ordering of events.

We also investigate how the position of the swap
affects its plausibility (relative to other positions).
Figure 2 shows, for each swap position, the mean
rank assigned to that swap by the model (where
rank 1 is the most probable of the 14 corrupted
candidates, and rank 14 the least probable). GPT2-
117 assigns a much lower rank to the first few
swap positions (i.e., rates them more probable)
than the later positions. The Fusion Model shows
a similar but less pronounced pattern. This shows
that both models are less sensitive to out-of-order
sentences that occur at the beginning of the text,
than those occurring later.9 The stronger pattern
for GPT2-117 may be due to its stronger context
conditioning (as shown in Section 4) – thus be-
coming more sensitive as context increases. How-
ever, even for the first three swaps, GPT2-117 is
more accurate than the Fusion Model at distin-
guishing the swapped text from the original.

9It’s also possible that out-of-order sentences are inher-
ently harder to detect at the beginning of text.

100 101 102 103 104 105
k (Top-k sampling)

0.2

0.4

0.6

Di
st

in
ct

-1

Human
Fusion Model
GPT2-117

Figure 3: Repetition (low distinct-1) is primarily
caused by choice of decoding algorithm (here low k),
not insufficient training data. GPT2-117 is trained on
45× more data than the Fusion Model, but is similarly
repetitive for all k.

6 Repetition and rareness

Generic, under-diverse and repetitive text is a
well-documented problem in neural text genera-
tion (Jiang and de Rijke, 2018). While there are
many proposed solutions to the problem (Li and
Jurafsky, 2016; Vijayakumar et al., 2018; Baheti
et al., 2018; Zhang et al., 2018; See et al., 2019), it
has been shown that a primary cause is likelihood-
maximizing decoding algorithms such as greedy
decoding and beam search (Holtzman et al., 2019).
In this section we investigate the role of large-scale
pretraining, and the role of k, in this problem.

N-gram repetition The distinct-n metric of a
piece of text is the number of unique n-grams di-
vided by the total number of generated n-grams
(Li et al., 2016). We measure distinct-n of the
generated stories for n = 1, 2, 3. A high ratio
indicates a high level of within-story lexical di-
versity, while a low ratio indicates a large amount
of within-story repetition. As shown in Figure 3,
both models’ unigram diversity is far below that
of human text when k is small. For example, at
k = 10 (the setting used by Fan et al.), the Fu-
sion Model obtains a distinct-1 of 42.4%; much
less than the human level of 60.0%. This results in
a high level of repetition, as shown in Table 2: for
k = 10, both models repeat many phrases (such as
always, so scared, and finally).

For bigrams and trigrams, the pattern is similar
to unigrams (see Figure 9 in the Appendix). For
both models, distinct-n increases as k increases,
converging to a value close to the human level
as k approaches vocabulary size. Though GPT2-
117 has a slightly higher distinct-n than the Fu-
sion Model for most values of k, the difference
is negligible compared to the influence of k. We



848

make three conclusions from these patterns: (1)
Our findings support Holtzman et al.’s observation
that repetition is strongly related to choice of de-
coding algorithm, and that likelihood maximizing
algorithms (such as top-k sampling with low k)
are a primary cause of repetition. (2) The models
have in fact learned the correct rate of repetition in
human text – they are able to match this rate when
they sample from their full (untruncated) distribu-
tion. (3) Repetition is unlikely to be solved by
more pretraining data alone – even though GPT2-
117 is trained on 45 times as much data as the Fu-
sion Model, it produces text that is almost equally
repetitive (for equal k).

Rare word usage We compute the mean log
unigram probability of the words in the gener-
ated story10 – a high value indicates using fewer
rare words while a low value indicates more rare
words. As shown in Figure 12 in the Appendix,
word rareness is primarily governed by k – how-
ever, GPT2-117 has a lower mean log unigram
probability (i.e., uses more rare words) than the
Fusion Model for all equal values of k ≥ 2. This
can be seen for example in Table 2, where GPT2-
117 generates rarer words such as idle and copi-
ous for k = 1000. GPT2-117 also generates fewer
stopwords than the Fusion Model, for all equal k.

GPT2-117’s slightly higher rare word usage
(compared to the Fusion Model) might be ex-
plained by: (1) its BPE encoding, which allows it
to generate new words, not just those in a fixed vo-
cabulary; (2) pretraining on a large amount of di-
verse text, allowing it to learn to produce a greater
variety of words; (3) stronger conditioning on the
prompt as described in Section 4 – which may in-
ject more rareness into the generated text.

Conclusion Choice of decoding algorithm is a
primary factor in diversity and repetition prob-
lems, with likelihood-maximizing algorithms the
main culprit. Although GPT2-117 generates more
rare words and is very slightly less repetitive than
the Fusion Model, the difference is small com-
pared to the effect of k, indicating that training
data alone is unlikely to solve these problems.

7 Syntactic style and complexity

A well-trained story generation model should
match both the syntactic style and complexity of

10The unigram probability distribution was calculated with
respect to the WritingPrompts training set.

its training data. Low complexity can be a sign of
less sophisticated writing, while high complexity
can be a sign of poor readability (Beers and Nagy,
2009; McNamara et al., 2010). In this section,
we measure some features related to the syntactic
style and complexity of the generated stories.

Sentence length Sentence length is a simple but
effective feature to estimate readability and syn-
tactic complexity of text (Kincaid et al., 1975;
Roemmele et al., 2017). We find that both models
generate sentences that are on average shorter than
human sentences when k is small, but converge to
approximately human length as k increases (see
Figure 8 in the Appendix).

Part-of-speech usage It has been shown that the
distribution of parts-of-speech (POS), and more
generally the distribution of POS n-grams11 is a
useful feature to represent the style of a piece
of text (Argamon et al., 1998; Ireland and Pen-
nebaker, 2010; Roemmele et al., 2017).

Firstly, we compare the part-of-speech distri-
butions of the model-generated text and the hu-
man text (see Figure 11 in the Appendix). Both
models (especially GPT2-117) closely fit the hu-
man POS distribution as k approaches vocabulary
size.12 This implies that, as with lexical diver-
sity, the models have no difficulty fitting the sta-
tistical distribution of human syntax. However,
under likelihood-maximizing decoding algorithms
such as low k, a completely different distribution
emerges, in which text contains more verbs and
pronouns than human text, and fewer nouns, ad-
jectives and proper nouns.

Secondly, we measure the syntactic diversity of
the text using the distinct-n metric for POS n-
grams (n = 1, 2, 3) – see Figure 10 in the Ap-
pendix. As with lexical diversity (see Section 6),
we find that syntactic diversity is similar for the
two models, is very low when k is small, and
matches human level as k approaches vocabulary
size. It’s likely that for low k, the syntactic under-
diversity of the text is largely caused by lexical
under-diversity (i.e. repetition). However, we note
that as k increases, lexical diversity reaches human
level sooner than syntactic diversity – for exam-
ple, GPT2-117’s lexical distinct-3 reaches human
level at k = 600 (Figure 9c), but its POS distinct-

11For example, the sentence I like cats has the POS bi-
grams PRONOUN VERB and VERB NOUN.

12One exception is Proper Noun: both models fail to pro-
duce enough of these even as k approaches vocabulary size.



849

0 50 100 150
Token index

0.0

0.5

1.0

To
ke

n 
pr

ob
ab

ilit
y

(a) Fusion Model (k = 2): I had
never seen a man so young before. I
had never seen him before, but he had
always seemed to be a man of a man.
He was young, and he was young. He
was a man of a man, and a man who
was young, and a man who was [...]

0 50 100 150
Token index

0.0

0.5

1.0

To
ke

n 
pr

ob
ab

ilit
y

(b) Human Text: “Looks like the
rain’s stopped.” I peered out the
window. Art was right; time to get to
work. “Alright, let’s move out.” I
could hear the scraping of the stone
armor as the men slowly stood.
Despite the training, [...]

0 50 100 150
Token index

0.0

0.5

1.0

To
ke

n 
pr

ob
ab

ilit
y

(c) GPT2-117 (k = 2): I’ve always
been a man of the people. I’ve always
been a strong man. I’ve always been
a strong man. I was born in the city, I
was raised in the country. I was
raised in a family that wasn’t very
good. I ’m not a good man. [...]

Figure 4: Under top-k sampling with small k (k = 2), the two models (left and right) produce text that falls into
increasingly confident repeating loops. By contrast, human text (center) maintains an irregular pattern of surprising
(low probability) tokens. The human text probabilities are measured with respect to the Fusion Model, but similar
patterns hold for GPT2-117. Inspired by Holtzman et al. 2019’s figure showing probabilities under beam search.

3 reaches human level at k = 6000 (Figure 10c).
This implies that, even when the text is no more
repetitive than human text, it may still be syntacti-
cally repetitive (using the same part-of-speech pat-
terns repeatedly).

Conclusion We find when k is small, syntac-
tic complexity of generated text is low, consist-
ing of shorter sentences and a narrower range of
syntactic patterns. However, as k approaches vo-
cabulary size, the syntactic style of generated text
closely matches human syntactic patterns. As with
n-gram diversity in Section 6, our results show
that syntactic under-diversity is primarily caused
by low k, not insufficient training data.

8 The element of surprise

Model confidence over time Several re-
searchers have observed that model over-
confidence (the model placing high probability on
a small range of tokens) can cause poor quality
generation (Jiang and de Rijke, 2018; Holtzman
et al., 2019). In particular, they show that for
likelihood-maximizing decoding algorithms such
as beam search, model confidence can increase in
a snowball-like effect, getting stuck in a loop of
repetitive but increasingly self-confident text. We
observe this problem in both our models when k
is small. For example, in Figure 4, both models
fall into self-reinforcing repetitive loops with
rising confidence. The loop is difficult to break
– the Fusion Model briefly escapes (shown as a
sudden downwards spike), but quickly returns. By
contrast, the human text does not show a strong

rising trend in probability, and intermittently uses
low probability words throughout.13

We formalize these anecdotal observations by
measuring the average probability of each of the
first 150 word-level tokens in the story (Figure
5). We find that even when teacher-forcing on hu-
man text, the token probabilities increase slightly
as the story progresses. This is likely due to the
usefulness of additional context, which increases
the model’s prediction accuracy. By comparison,
we find that when generating with top-k sampling,
the probabilities increase more rapidly, and the in-
crease is even more rapid for smaller k. This con-
firms that likelihood-maximizing decoding algo-
rithms (such as top-k sampling with small k) lead
to more rapidly increasing model over-confidence.
Furthermore, we find this pattern holds for both
models, with probabilities increasing at a similar
rate for equal k. This indicates that, like rep-
etition, model over-confidence is unlikely to be
solved by more training data, and is largely gov-
erned by choice of k.

Overall model confidence We also measure the
models’ overall confidence, as represented by the
total log probability (according to the model) of
the generated story. For both models, we find
that story probability decreases as k increases
– see Figure 13 in the Appendix. This makes
sense, as higher k means sampling tokens with
lower probability. As k approaches the vocab-
ulary size, the Fusion Model’s generated story

13Gehrmann et al. (2019) also identify presence of low
probability words as an indicator of human-generated text.



850

0 25 50 75 100 125 150
Token index

0.10

0.15

0.20

0.25

0.30

0.35

0.40

0.45
M

ea
n 

pr
ob

ab
ilit

y 
of

 to
ke

n

Top-k sampling, k=5
Top-k sampling, k=20
Teacher-force on human text

Figure 5: Mean probability for each of the first 150
word-level story tokens. When teacher-forcing the
model on human text, probability increases slowly.
When generating with top-k sampling, probability in-
creases faster, especially for smaller k. This plot is for
the Fusion Model; similar patterns hold for GPT2-117.

probability matches the probability it assigns to
human-written WritingPrompts stories. Interest-
ingly however, the same is not true for GPT2-
117, which converges to a story probability that
is lower than the probability it assigns the human
stories. This means that under full (non-truncated)
sampling, the Fusion Model produces text that
is equally surprising (to itself) as the Writing-
Prompts stories, whereas GPT2-117 produces text
that is more surprising to itself. Explaining this
observation is an open question – we speculate that
GPT2-117’s WebText pretraining may cause it to
generate (under high k) text in a style or genre that
is less predictable than WritingPrompts stories.

9 Concreteness

Brysbaert et al. (2014) define the concreteness of
a word as ‘the degree to which the concept de-
noted by a word refers to a perceptible entity’.
Concrete words are generally easier to remem-
ber than abstract words, and psycholinguists have
theorized they may be learned differently (i.e.,
concrete words by direct experience and abstract
words by text and discourse). Brysbaert et al. pro-
vide human concreteness ratings for 40,000 com-
mon English lemmas rated on a scale from 1 to
5.14 We use these ratings to measure the mean
concreteness of the nouns and verbs in the story

14For example, the nouns television, darkness, and idea are
rated 4.83, 3.85 and 1.61 respectively, and the verbs talk, see,
and hope are rated 4.07, 3.21 and 1.25 respectively.

text – see Figure 14 in the Appendix.
We find that, for the same k, GPT2-117 tends

to generate more concrete words than the Fusion
Model, and that for both models, concreteness
converges to approximately human levels as k in-
creases. Interestingly, however, when k is small,
the noun concreteness is much higher than hu-
man levels, whereas the verb concreteness is much
lower. This indicates that for small k, both models
produce stories that, compared to human-written
stories, have too many physical objects (as op-
posed to abstract nouns), and too few physical
actions (as opposed to abstract verbs). This re-
flects the trend demonstrated in Table 2: when k is
small, the models tend to generate descriptive sen-
tences with mostly is verbs (e.g. I was always so
excited), and physical nouns (e.g. mother, father,
queen). Only when k increases do we see more
tangible actions (e.g. The bar patrons snickered)
and abstract nouns (e.g. pain, glances). A detailed
example, with all nouns and verbs annotated with
concreteness, is in the Appendix (Table 3).

10 Conclusions

The effect of massive pretraining In this study,
we find that GPT2-117 is a better story genera-
tion model than the Fusion Model in several spe-
cific ways: it conditions much more strongly on
the provided context, is more sensitive to cor-
rect ordering of events, and generates text that
is more contentful (using more rare words, con-
crete words, and named entities). In particu-
lar, the stronger conditioning result is striking, as
the Fusion Model is a complex task-specific ar-
chitecture designed to increase story-prompt rel-
evance. This demonstrates that sometimes, a
general-purpose model architecture can outper-
form a complex task-specific architecture when
provided with enough pretraining data.

However, we find that in other aspects, GPT2-
117 performs no better than the Fusion Model:
when k is small, the models generate text that
is equally lexically under-diverse, syntactically
under-complex, and repetitive – with a tendency
to fall into a snowball effect of increasing over-
confidence. However, these problems correct
themselves (i.e., the metrics match human levels)
when the models generate from their untruncated
distribution. Our results show that these oft-cited
neural generation problems are not the fault of
the models themselves (which are in fact statisti-



851

Prompt: You just discovered England’s biggest secret: every time they say long live the queen it extends the queens life.

Human-Written Story: I am immortal, I have inside me blood of kings. My name in Charles Windsor and I am heir to a
throne. Prince of Wales, they’ve called me that my entire life and now I lay on my death bed and my mother - still going
strong. I’m not sure how it’s possible but she seems ageless, almost timeless. My whole life I’ve waited for that [...]

Fusion Model (k = 10): I have no idea when my father
would come to visit this place, I was always so excited. I
was always so scared. I had to go back to work. I was a
little scared of him, but when I was younger, he had never
come in for a visit. His mother told me, “I’m so scared”, as
he always did. She never talked to me about anything [...]

GPT2-117 (k = 10): * ” So what are we going to do? “ *
It was the first time she asked me this question that I ever
had asked her. It has taken years but finally I am finally able
to do it. It seems that this queen is the queen of England
and she’s finally the one to tell me that this queen is the
reason why she’s not being allowed to die. [...]

Fusion Model (k = 1000): “Where am I? What
happened?” “Having been working on my job for over 6
hours now, I do not know how you worked!” “I have been
working for the last three years. Surely I am an ancient god
now.” The bar patrons snickered. “Hello?” “Those last
three years have been worse than a year ago.” Pain. [...]

GPT2-117 (k = 1000): It was an odd occasion for the
Queen of England to meet with her. The plane sat idle at
3:26 PM on a Thursday night. Yesterday, the Queen had
taken it upon herself to try and get a good look at the plane
which had recently been found abandoned. A copious
amount of curious glances from around the room until [...]

Table 2: A prompt and human story from the dataset, plus the models’ top-k generated stories, for two values of k.

cally well-trained to match human text for these
metrics), nor caused by too little training data (as
these problems are not improved by GPT2-117’s
extensive pretraining). Instead, they are primarily
caused by likelihood-maximizing decoding algo-
rithms – such as greedy decoding, beam search,
and top-k sampling with low k.

The effect of k This study detailed the typical
characteristics of long-form text generated by neu-
ral language models in open-ended settings, under
both high entropy (large k) and low entropy (small
k) decoding algorithms. The negative characteris-
tics of low k output (genericness, repetition, over-
simplicity) are by now familiar to researchers.
However, we also uncovered some less obvious
characteristics of low-k generated text: compared
to human-written text, it tends to copy more from
the provided context (particularly GPT2-117); it
contains more verbs and pronouns but fewer nouns
and adjectives; its nouns are more concrete but its
verbs are less concrete; and it uses a smaller range
of syntactic patterns (a phenomenon that can’t be
entirely attributed to n-gram repetition).

As k increases to vocabulary size, we find that
the model-generated text closely fits the human
text on most of the metrics we measured. How-
ever, it is clear by inspection that the high-k
model-generated text lacks many crucial aspects
such as commonsense reasoning, world knowl-
edge and multi-sentence coherence – an example
of this superficially fluent but nonsensical text can
be seen in Table 4 in the Appendix. We believe
that true progress in open-ended Natural Language
Generation will come from attempting to address

these high k problems – i.e., strategies to imbue
the language model with better reasoning, knowl-
edge and planning abilities – rather than continu-
ing to seek ways to mitigate the diversity and rep-
etition problems of the low k setting.

Limitations of this study This study uses only
the smallest version of GPT2. It is likely that
the larger versions of GPT2 may exhibit stronger
statistical differences for the metrics we examine.
Such a study would illustrate the effect of larger
model capacity, and more fully reveal the possible
benefits of massive pretraining. We release our an-
notation code so that other researchers may repeat
our study on more models and datasets.

This study did not include human evaluation,
which is currently the only reliable way to assess
overall text quality, as well as quantify the defi-
ciencies of high k output described above (coher-
ence, reasoning, and world knowledge). As such,
this study quantifies the diversity side more than
the quality side of the quality-diversity tradeoff.
Consequently, this study demonstrates the impor-
tance of developing better methods to computa-
tionally quantify notions such as text coherence,
logicality and commonsense correctness – an ef-
fort that may ultimately hold the key to generating
text with those desirable attributes.

11 Acknowledgments

This work was funded by the Gerald J. Lieberman
Fellowship, Tencent, and the DARPA CwC pro-
gram under ARO prime contract no. W911NF-
15-1-0462. We also thank the reviewers for their
helpful comments.



852

References
Shlomo Argamon, Moshe Koppel, and Galit Avneri.

1998. Routing documents according to style. In
First International workshop on innovative informa-
tion systems.

Sanjeev Arora, Yingyu Liang, and Tengyu Ma. 2017.
A simple but tough-to-beat baseline for sentence em-
beddings. In International Conference on Learning
Representations.

Ashutosh Baheti, Alan Ritter, Jiwei Li, and Bill Dolan.
2018. Generating more interesting responses in
neural conversation models with distributional con-
straints. In Empirical Methods in Natural Language
Processing.

Regina Barzilay and Mirella Lapata. 2008. Modeling
local coherence: An entity-based approach. Compu-
tational Linguistics, 34(1):1–34.

Scott F Beers and William E Nagy. 2009. Syntactic
complexity as a predictor of adolescent writing qual-
ity: Which measures? which genre? Reading and
Writing, 22(2):185–200.

Marc Brysbaert, Amy Beth Warriner, and Victor Ku-
perman. 2014. Concreteness ratings for 40 thousand
generally known english word lemmas. Behavior
Research Methods, 46(3):904–911.

Massimo Caccia, Lucas Caccia, William Fedus, Hugo
Larochelle, Joelle Pineau, and Laurent Charlin.
2018. Language gans falling short. In NeurIPS
Workshop on Critiquing and Correcting Trends in
Machine Learning.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2019. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. In North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies.

Angela Fan, Mike Lewis, and Yann Dauphin. 2018. Hi-
erarchical neural story generation. In Association
for Computational Linguistics.

Jonas Gehring, Michael Auli, David Grangier, Denis
Yarats, and Yann N Dauphin. 2017. Convolutional
sequence to sequence learning. In International
Conference on Machine Learning.

Sebastian Gehrmann, Hendrik Strobelt, and Alexan-
der M Rush. 2019. Gltr: Statistical detection
and visualization of generated text. arXiv preprint
arXiv:1906.04043.

Tatsunori Hashimoto, Hugh Zhang, and Percy Liang.
2019. Unifying human and statistical evaluation
for natural language generation. In North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies.

Ari Holtzman, Jan Buys, Maxwell Forbes, and Yejin
Choi. 2019. The curious case of neural text degen-
eration. arXiv preprint arXiv:1904.09751.

Molly E Ireland and James W Pennebaker. 2010. Lan-
guage style matching in writing: Synchrony in es-
says, correspondence, and poetry. Journal of per-
sonality and social psychology, 99(3):549.

Shaojie Jiang and Maarten de Rijke. 2018. Why
are sequence-to-sequence models so dull? Under-
standing the low-diversity problem of chatbots. In
EMNLP Workshop on Search-Oriented Conversa-
tional AI.

J Peter Kincaid, Robert P Fishburne Jr, Richard L
Rogers, and Brad S Chissom. 1975. Derivation of
new readability formulas (automated readability in-
dex, Fog count and Flesch reading ease formula) for
navy enlisted personnel.

Ilya Kulikov, Alexander H Miller, Kyunghyun Cho,
and Jason Weston. 2018. Importance of a search
strategy in neural dialogue modelling. arXiv
preprint arXiv:1811.00907.

Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao,
and Bill Dolan. 2016. A diversity-promoting ob-
jective function for neural conversation models. In
North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies.

Jiwei Li and Dan Jurafsky. 2016. Mutual information
and diverse decoding improve neural machine trans-
lation. arXiv preprint arXiv:1601.00372.

Chia-Wei Liu, Ryan Lowe, Iulian Serban, Mike Nose-
worthy, Laurent Charlin, and Joelle Pineau. 2016.
How not to evaluate your dialogue system: An em-
pirical study of unsupervised evaluation metrics for
dialogue response generation. In Empirical Meth-
ods in Natural Language Processing.

Huanru Henry Mao, Bodhisattwa Prasad Majumder,
Julian McAuley, and Garrison W. Cottrell. 2019.
Improving neural story generation by targeted com-
mon sense grounding. In Empirical Methods in Nat-
ural Language Processing.

Danielle S McNamara, Scott A Crossley, and Philip M
McCarthy. 2010. Linguistic features of writing qual-
ity. Written communication, 27(1):57–86.

Jekaterina Novikova, Ondřej Dušek, Amanda Cercas
Curry, and Verena Rieser. 2017. Why we need new
evaluation metrics for NLG. In Empirical Methods
in Natural Language Processing.

Myle Ott, Sergey Edunov, Alexei Baevski, Angela
Fan, Sam Gross, Nathan Ng, David Grangier, and
Michael Auli. 2019. Fairseq: A fast, extensible
toolkit for sequence modeling. In North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies.

https://pdfs.semanticscholar.org/70a3/12db7577170c374467c881772d1277b2ebda.pdf
https://pdfs.semanticscholar.org/3fc9/7768dc0b36449ec377d6a4cad8827908d5b4.pdf
https://pdfs.semanticscholar.org/3fc9/7768dc0b36449ec377d6a4cad8827908d5b4.pdf
https://www.aclweb.org/anthology/D18-1431
https://www.aclweb.org/anthology/D18-1431
https://www.aclweb.org/anthology/D18-1431
https://doi.org/10.1162/coli.2008.34.1.1
https://doi.org/10.1162/coli.2008.34.1.1
https://link.springer.com/article/10.1007/s11145-007-9107-5
https://link.springer.com/article/10.1007/s11145-007-9107-5
https://link.springer.com/article/10.1007/s11145-007-9107-5
https://doi.org/10.3758/s13428-013-0403-5
https://doi.org/10.3758/s13428-013-0403-5
http://arxiv.org/abs/1811.02549
https://www.aclweb.org/anthology/N19-1423
https://www.aclweb.org/anthology/N19-1423
https://www.aclweb.org/anthology/N19-1423
https://arxiv.org/pdf/1805.04833.pdf
https://arxiv.org/pdf/1805.04833.pdf
https://pdfs.semanticscholar.org/bb3e/bc09b65728d6eced04929df72a006fb5210b.pdf
https://pdfs.semanticscholar.org/bb3e/bc09b65728d6eced04929df72a006fb5210b.pdf
https://arxiv.org/pdf/1906.04043.pdf
https://arxiv.org/pdf/1906.04043.pdf
https://www.aclweb.org/anthology/N19-1169
https://www.aclweb.org/anthology/N19-1169
https://arxiv.org/pdf/1904.09751.pdf
https://arxiv.org/pdf/1904.09751.pdf
https://psycnet.apa.org/record/2010-17133-003
https://psycnet.apa.org/record/2010-17133-003
https://psycnet.apa.org/record/2010-17133-003
https://www.aclweb.org/anthology/W18-5712
https://www.aclweb.org/anthology/W18-5712
https://www.aclweb.org/anthology/W18-5712
https://stars.library.ucf.edu/istlibrary/56/
https://stars.library.ucf.edu/istlibrary/56/
https://stars.library.ucf.edu/istlibrary/56/
https://stars.library.ucf.edu/istlibrary/56/
https://arxiv.org/pdf/1811.00907.pdf
https://arxiv.org/pdf/1811.00907.pdf
https://www.aclweb.org/anthology/N16-1014
https://www.aclweb.org/anthology/N16-1014
https://arxiv.org/pdf/1601.00372.pdf
https://arxiv.org/pdf/1601.00372.pdf
https://arxiv.org/pdf/1601.00372.pdf
https://www.aclweb.org/anthology/D16-1230
https://www.aclweb.org/anthology/D16-1230
https://www.aclweb.org/anthology/D16-1230
https://arxiv.org/pdf/1908.09451.pdf
https://arxiv.org/pdf/1908.09451.pdf
https://journals.sagepub.com/doi/abs/10.1177/0741088309351547
https://journals.sagepub.com/doi/abs/10.1177/0741088309351547
https://www.aclweb.org/anthology/D17-1238
https://www.aclweb.org/anthology/D17-1238
https://www.aclweb.org/anthology/N19-4009
https://www.aclweb.org/anthology/N19-4009


853

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors for
word representation. In Empirical Methods in Natu-
ral Language Processing.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word repre-
sentations. In North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving language under-
standing by generative pre-training. OpenAI tech re-
port.

Alec Radford, Jeffrey Wu, Rewon Child, David Luan,
Dario Amodei, and Ilya Sutskever. 2019. Language
models are unsupervised multitask learners. OpenAI
tech report.

Melissa Roemmele, Andrew S Gordon, and Reid
Swanson. 2017. Evaluating story generation sys-
tems using automated linguistic analyses. In KDD
Workshop on Machine Learning for Creativity.

Abigail See, Stephen Roller, Douwe Kiela, and Jason
Weston. 2019. What makes a good conversation?
how controllable attributes affect human judgments.
In North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies.

Iulian V Serban, Alessandro Sordoni, Yoshua Bengio,
Aaron Courville, and Joelle Pineau. 2016. Building
end-to-end dialogue systems using generative hier-
archical neural network models. In AAAI Confer-
ence on Artificial Intelligence.

Lifeng Shang, Zhengdong Lu, and Hang Li. 2015.
Neural responding machine for short-text conversa-
tion. In Association for Computational Linguistics.

Anuroop Sriram, Heewoo Jun, Sanjeev Satheesh, and
Adam Coates. 2018. Cold fusion: Training seq2seq
models together with language models. In Proc. In-
terspeech 2018, pages 387–391.

Ashwin K Vijayakumar, Michael Cogswell, Ram-
prasath R Selvaraju, Qing Sun, Stefan Lee, David
Crandall, and Dhruv Batra. 2018. Diverse beam
search: Decoding diverse solutions from neural se-
quence models. In AAAI Conference on Artificial
Intelligence.

Ruqing Zhang, Jiafeng Guo, Yixing Fan, Yanyan Lan,
Jun Xu, and Xueqi Cheng. 2018. Learning to con-
trol the specificity in neural response generation. In
Association for Computational Linguistics.

Zachary M Ziegler, Luke Melas-Kyriazi, Sebastian
Gehrmann, and Alexander M Rush. 2019. Encoder-
agnostic adaptation for conditional language gener-
ation. arXiv preprint arXiv:1908.06938.

http://www.aclweb.org/anthology/D14-1162
http://www.aclweb.org/anthology/D14-1162
https://www.aclweb.org/anthology/N18-1202
https://www.aclweb.org/anthology/N18-1202
https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf
https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf
https://d4mucfpksywv.cloudfront.net/better-language-models/language_models_are_unsupervised_multitask_learners.pdf
https://d4mucfpksywv.cloudfront.net/better-language-models/language_models_are_unsupervised_multitask_learners.pdf
https://roemmele.github.io/publications/fiction_generation.pdf
https://roemmele.github.io/publications/fiction_generation.pdf
https://www.aclweb.org/anthology/N19-1170
https://www.aclweb.org/anthology/N19-1170
https://www.aaai.org/ocs/index.php/AAAI/AAAI16/paper/view/11957/12160
https://www.aaai.org/ocs/index.php/AAAI/AAAI16/paper/view/11957/12160
https://www.aaai.org/ocs/index.php/AAAI/AAAI16/paper/view/11957/12160
https://www.aclweb.org/anthology/P15-1152
https://www.aclweb.org/anthology/P15-1152
https://doi.org/10.21437/Interspeech.2018-1392
https://doi.org/10.21437/Interspeech.2018-1392
https://arxiv.org/pdf/1610.02424.pdf
https://arxiv.org/pdf/1610.02424.pdf
https://arxiv.org/pdf/1610.02424.pdf
https://www.aclweb.org/anthology/P18-1102
https://www.aclweb.org/anthology/P18-1102
https://arxiv.org/pdf/1908.06938.pdf
https://arxiv.org/pdf/1908.06938.pdf
https://arxiv.org/pdf/1908.06938.pdf


854

Appendix

100 101 102 103 104 105
k (Top-k sampling)

16%

18%

20%

22%

%
 S

to
ry

 u
ni

gr
am

s i
n 

pr
om

pt Human
Fusion Model
GPT2-117

(a) Percent of all story unigrams that are in the prompt.

100 101 102 103 104 105
k (Top-k sampling)

0%

1%

2%

3%

4%

5%

%
 S

to
ry

 b
ig

ra
m

s i
n 

pr
om

pt Human
Fusion Model
GPT2-117

(b) Percent of all story bigrams that are in the prompt.

100 101 102 103 104 105
k (Top-k sampling)

0.0%

0.5%

1.0%

1.5%

2.0%

2.5%

3.0%

%
 S

to
ry

 tr
ig

ra
m

s i
n 

pr
om

pt Human
Fusion Model
GPT2-117

(c) Percent of all story trigrams that are in the prompt.

Figure 6: n-gram similarity between prompt and story, for n = 1, 2, 3, for both models and all k. GPT2-117 copies
many more n-grams from the prompt than the Fusion Model. See Section 4 for discussion.



855

100 101 102 103 104 105
k (Top-k sampling)

0%

5%

10%

15%

Pr
om

pt
 e

nt
ity

 u
sa

ge
 ra

te

Human
Fusion Model
GPT2-117

(a) The proportion of all prompt named entities that are
used in the story.

100 101 102 103 104 105
k (Top-k sampling)

0

1

2

3

4

# 
Un

iq
ue

 n
am

ed
 e

nt
iti

es
 p

er
 st

or
y

Human
Fusion Model
GPT2-117

(b) The number of unique named entities that appear in
the story.

Figure 7: Prompt entity usage rate (left) and mean number of unique named entities in the story (right), for both
models and all k. GPT2-117 generally uses a larger proportion of the prompt named entities, and more named
entities overall, than the Fusion Model. Both models generally use fewer named entities than human text when k
is less than vocabulary size. See Section 4 for discussion.

100 101 102 103 104 105
k (Top-k sampling)

12

13

14

15

M
ea

n 
se

nt
 le

n 
(#

 w
or

ds
)

Human
Fusion Model
GPT2-117

Figure 8: Mean sentence length for both models and all k. For both models, sentence length increases as k
increases. The spike at k = 1 is due to long repeating sequences with no sentence-ending token. See Section 7 for
discussion.



856

100 101 102 103 104 105
k (Top-k sampling)

0.0

0.1

0.2

0.3

0.4

0.5

0.6

Di
st

in
ct

-1

Human
Fusion Model
GPT2-117

(a) Distinct-1 (ratio of unique unigrams in the story to
total number of generated unigrams in the story).

100 101 102 103 104 105
k (Top-k sampling)

0.0

0.2

0.4

0.6

0.8

1.0

Di
st

in
ct

-2

Human
Fusion Model
GPT2-117

(b) Distinct-2 (ratio of unique bigrams in the story to total
number of generated bigrams in the story).

100 101 102 103 104 105
k (Top-k sampling)

0.0

0.2

0.4

0.6

0.8

1.0

Di
st

in
ct

-3

Human
Fusion Model
GPT2-117

(c) Distinct-3 (ratio of unique trigrams in the story to total
number of generated trigrams in the story).

Figure 9: Distinct-n for n = 1, 2, 3, for both models and all k. The ratios, which represent lexical diversity,
increase as k increases, with GPT2-117 reaching human levels at k = 2000 for unigrams, k = 800 for bigrams
and k = 600 for trigrams. Lexical diversity is slightly higher for GPT2-117 than for the Fusion Model for equal k,
but the primary determining factor is k. See Section 6 for discussion.



857

100 101 102 103 104 105
k (Top-k sampling)

0.03

0.04

0.05

0.06

0.07

0.08

Di
st

in
ct

-1
 fo

r P
OS

 ta
gs

Human
Fusion Model
GPT2-117

(a) POS tag distinct-1 (ratio of unique POS unigrams in
the story to total number of generated POS unigrams in
the story).

100 101 102 103 104 105
k (Top-k sampling)

0.0

0.1

0.2

0.3

0.4

Di
st

in
ct

-2
 fo

r P
OS

 ta
gs

Human
Fusion Model
GPT2-117

(b) POS tag distinct-2 (ratio of unique POS bigrams in
the story to total number of generated POS bigrams in
the story).

100 101 102 103 104 105
k (Top-k sampling)

0.0

0.2

0.4

0.6

Di
st

in
ct

-3
 fo

r P
OS

 ta
gs

Human
Fusion Model
GPT2-117

(c) POS tag distinct-3 (ratio of unique POS trigrams in
the story to total number of generated POS trigrams in
the story).

Figure 10: POS tag distinct-n metric for n = 1, 2, 3, for both models and all k. The ratios, which represent
syntactic diversity, increase as k increases, with GPT2-117 reaching human levels at k = 6000 for unigrams,
k = 9000 for bigrams, and k = 6000 for trigrams. Syntactic diversity is slightly higher for GPT2-117 than for the
Fusion Model for equal k, but the primary determining factor is k. See Section 7 for discussion.



858

100 101 102 103 104 105
k (Top-k sampling)

5.0%

10.0%

15.0%

20.0%

Ve
rb

 u
sa

ge

Human
Fusion Model
GPT2-117

100 101 102 103 104 105
k (Top-k sampling)

8.0%

10.0%

12.0%

14.0%

16.0%

18.0%

No
un

 u
sa

ge

Human
Fusion Model
GPT2-117

100 101 102 103 104 105
k (Top-k sampling)

2.0%

4.0%

6.0%

8.0%

Ad
ve

rb
 u

sa
ge

Human
Fusion Model
GPT2-117

100 101 102 103 104 105
k (Top-k sampling)

1.0%

2.0%

3.0%

4.0%

5.0%

Ad
je

ct
iv

e 
us

ag
e

Human
Fusion Model
GPT2-117

100 101 102 103 104 105
k (Top-k sampling)

2.0%

4.0%

6.0%

8.0%

10.0%

12.0%

De
te

rm
in

er
 u

sa
ge

Human
Fusion Model
GPT2-117

100 101 102 103 104 105
k (Top-k sampling)

8.0%
10.0%
12.0%
14.0%
16.0%
18.0%

Pr
on

ou
n 

us
ag

e

Human
Fusion Model
GPT2-117

100 101 102 103 104 105
k (Top-k sampling)

0.0%

0.2%

0.4%

0.6%

0.8%

Nu
m

er
al

 u
sa

ge

Human
Fusion Model
GPT2-117

100 101 102 103 104 105
k (Top-k sampling)

0.0%

0.5%

1.0%

1.5%

2.0%

2.5%

Pr
op

er
 N

ou
n 

us
ag

e

Human
Fusion Model
GPT2-117

Figure 11: Usage of different POS tags in the generated stories. GPT2-117 tends to fit the human distribution
more closely than the Fusion Model as k approaches vocabulary size, in particular producing more specific POS
categories such as Numeral and Proper Noun. When k is small, generated text is characterized by more verbs and
pronouns, and fewer nouns, adjectives, numerals and proper nouns, than human text. See Section 7 for discussion.



859

100 101 102 103 104 105
k (Top-k sampling)

6.50

6.25

6.00

5.75

5.50

5.25

M
ea

n 
lo

g 
un

ig
ra

m
 p

ro
b

Human
Fusion Model
GPT2-117

(a) The mean log unigram probability of generated words.
Higher values indicate using fewer rare words while
lower values indicate using more rare words.

100 101 102 103 104 105
k (Top-k sampling)

60%

65%

70%

75%

%
 W

or
ds

 th
at

 a
re

 st
op

wo
rd

s Human
Fusion Model
GPT2-117

(b) The percent of generated words that are stopwords,
for both models, across different k. We use the NLTK
English stopword list.

Figure 12: Rare word usage metrics for both models and all k. GPT2-117 produces slightly more rare words (left)
and slightly fewer stopwords (right) than the Fusion Model, for equal values of k. These rareness metrics do not
reach human levels until k is close to vocabulary size. See Section 6 for discussion.

100 101 102 103 104 105
k (Top-k sampling)

600

500

400

300

200

100

0

M
ea

n 
to

ta
l l

og
 p

ro
b 

of
 st

or
y Fusion Model, teacher-

force on human text
Fusion Model, generating

100 101 102 103 104 105
k (Top-k sampling)

600

500

400

300

200

100

0

M
ea

n 
to

ta
l l

og
 p

ro
b 

of
 st

or
y GPT2-117, teacher-

force on human text
GPT2-117, generating

Figure 13: The mean total log probability of the story (150 words), as measured by the models on their own gener-
ated output and on human-written stories. Interestingly, the Fusion Model (left) converges to the same probability
it assigns to human-written stories as k approaches vocabulary size, whereas GPT2-117 (right) converges to a
lower probability. See Section 8 for discussion.



860

Prompt: A man finally discovers his superpower... well into his 80’s.

Fusion Model (k = 10): GPT2-117 (k = 10):
I be a child . bear into a world of darkness , and in the
world , there be only a few people . My mother and I be
always alone . She have never be like this . But , she have
no idea what we be together to be . We be always alone .
We be always together . And , of course , she have never
exist . But , I never think about it , because she be always
alone . In the world , it was n’t like she have a power . I be
always alone , and there be a time when the light would
turn on . There be a time when I could see the light , and
I could see it in her eyes , and I could see the light , and I
could see it

Mean noun concreteness: 3.892
Mean verb concreteness: 2.173

A man in an old white coat sit in a corner . He wear a
black jacket with a blue tie . His hair be grey. His eyes be
black, but his voice be deep and clear. He look to where
the man be sit , and he see a smile on his lips. It be a
smile he know he would see from his own eyes. But he
be too late. He be on the sidewalk by the river when the
man come. He be wear a black coat with a purple tie . He
have a black tie and a white shirt . But he be still wear a
white suit . And it seem he would look back at him. A
smile on his face . A look his friend do n’t recognize . He
have no

Mean noun concreteness: 4.720
Mean verb concreteness: 2.488

Fusion Model (k = 1000): GPT2-117 (k = 1000):
For a brief moment , the dark green of his eyes flash the
last lines of reality into existence , finally fade slowly into
existence so that he could not feel it. Only the millions
of pixels float in his peripheral vision almost disappear .
His radio respond to the pinging very hard silence of the
outside world . Seven people have visit his main internal
network for what seem like a lifetime but this time, the
only switch to an external supply system that he could
simply take advantage of. Unable to convey feelings
about the last words he would have to endure , but it
have respond to the innumerable messages and countless
sleepless hours. Most of them be always available on
its surface , just to make sure. In his quest for to spend
eternity on death , he send

Mean noun concreteness: 3.201
Mean verb concreteness: 2.435

( First time poster , hope its ok ) The young boy, watch
tv , spot the television onscreen , before glance around to
see the screen start the countdown on the tv , point to the
screen in “ It ’s both the same. ” “... let ’s... let ’s try this
and... we will team up so that... we can ... have the same
power ....like... so we can use this superpower over and
over again. ” A brief silence . Only a familiar conversation ,
interrupt his mad dash movement , follow with his high
pitch slurred and wither voice : “ I ca n’t stand anyone
talk like that son*s*. ” More casual conversation that
interrupt his childish step be rush to the scissors.

Mean noun concreteness: 3.793
Mean verb concreteness: 3.162

Table 3: Generated stories from both models, under k = 10 and k = 1000. Nouns are highlighted in green
and verbs in yellow. The highlighting intensity reflects the word’s concreteness rating. For equal k, GPT2-117
generally generates more concrete words than the Fusion Model. For both models, low k is characterized by high
noun concreteness (e.g. physical objects such as jacket) and low verb concreteness (e.g. non-physical actions such
as be). Conversely, high k is characterized by low noun concreteness (e.g. abstract concepts such as reality) and
high verb concreteness (e.g. physical actions such as talk). See Section 9 for discussion.



861

100 101 102 103 104 105
k (Top-k sampling)

3.7

3.8

3.9

4.0

4.1

4.2

4.3

M
ea

n 
no

un
 c

on
cr

et
en

es
s Human

Fusion Model
GPT2-117

(a) Mean concreteness rating (1-5) of nouns in the story.

100 101 102 103 104 105
k (Top-k sampling)

2.2

2.4

2.6

2.8

3.0

M
ea

n 
ve

rb
 c

on
cr

et
en

es
s HumanFusion Model

GPT2-117

(b) Mean concreteness rating (1-5) of verbs in the story.

Figure 14: Mean concreteness rating of the nouns and verbs in the story, for both models and all k. GPT2-117
generally produces nouns and verbs that are more concrete than the Fusion Model for the same k. For both models,
as k increases, noun concreteness reduces and verb concreteness increases. See Section 9 for discussion.

Prompt: In an alternative reality where sleep is non-existent among living beings, our protagonist (spontaneously or
after an event) falls asleep in which he/she experiences for the first time in human history what a dream is.

GPT2-117 (k = 1000): I sat in my bed as my girlfriend sat behind me, buzzing into her e-reader, letting the day’s
stories write themselves on her’s monitor. Like a blur, all the usual high-asyllabic drivel and senseless ramblings that
normally attracted the attention of a horrid sleeping creature huddled about me like a faucet. She did not know how I
placed this car with her. But I tried, first tried to ignore that I had hired the services of a dog to help and then quietly
used it in a desperate bid to drive the car through the lawn. Each and every day, I watched her drool down an old dusty
hardwood mattress her beady eyes trying desperately to think of this rotting dream. [...]

Table 4: An example of syntactically natural but nonsensical text, generated with high k. Though the text is fluent
and readable, it is surreal and bizarre. See Section 10 for discussion.


