



















































Chinese NER Using Lattice LSTM


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 1554–1564
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

1554

Chinese NER Using Lattice LSTM

Yue Zhang∗ and Jie Yang∗
Singapore University of Technology and Design

yue zhang@sutd.edu.sg
jie yang@mymail.sutd.edu.sg

Abstract

We investigate a lattice-structured LSTM
model for Chinese NER, which encodes
a sequence of input characters as well as
all potential words that match a lexicon.
Compared with character-based methods,
our model explicitly leverages word and
word sequence information. Compared
with word-based methods, lattice LSTM
does not suffer from segmentation errors.
Gated recurrent cells allow our model to
choose the most relevant characters and
words from a sentence for better NER re-
sults. Experiments on various datasets
show that lattice LSTM outperforms both
word-based and character-based LSTM
baselines, achieving the best results.

1 Introduction

As a fundamental task in information extraction,
named entity recognition (NER) has received con-
stant research attention over the recent years. The
task has traditionally been solved as a sequence
labeling problem, where entity boundary and cate-
gory labels are jointly predicted. The current state-
of-the-art for English NER has been achieved by
using LSTM-CRF models (Lample et al., 2016;
Ma and Hovy, 2016; Chiu and Nichols, 2016; Liu
et al., 2018) with character information being in-
tegrated into word representations.

Chinese NER is correlated with word segmen-
tation. In particular, named entity boundaries are
also word boundaries. One intuitive way of per-
forming Chinese NER is to perform word segmen-
tation first, before applying word sequence label-
ing. The segmentation → NER pipeline, how-
ever, can suffer the potential issue of error propa-
gation, since NEs are an important source of OOV

∗ Equal contribution.

南
South

京
Capital

市
City

长
Long

江
River

大
Big

桥
Bridge

长江
Yangtze River

市长
mayor

南京
Nanjing

大桥
Bridge

长江大桥
Yangtze River Bridge

Person?

南京市
Nanjing City

Figure 1: Word character lattice.

in segmentation, and incorrectly segmented en-
tity boundaries lead to NER errors. This prob-
lem can be severe in the open domain since cross-
domain word segmentation remains an unsolved
problem (Liu and Zhang, 2012; Jiang et al., 2013;
Liu et al., 2014; Qiu and Zhang, 2015; Chen et al.,
2017; Huang et al., 2017). It has been shown that
character-based methods outperform word-based
methods for Chinese NER (He and Wang, 2008;
Liu et al., 2010; Li et al., 2014).

One drawback of character-based NER, how-
ever, is that explicit word and word sequence in-
formation is not fully exploited, which can be
potentially useful. To address this issue, we in-
tegrate latent word information into character-
based LSTM-CRF by representing lexicon words
from the sentence using a lattice structure LSTM.
As shown in Figure 1, we construct a word-
character lattice by matching a sentence with a
large automatically-obtained lexicon. As a re-
sult, word sequences such as “长江大桥 (Yangtze
River Bridge)”, “长江 (Yangtze River)” and “大
桥 (Bridge)” can be used to disambiguate poten-
tial relevant named entities in a context, such as
the person name “江大桥 (Daqiao Jiang)”.

Since there are an exponential number of word-
character paths in a lattice, we leverage a lattice
LSTM structure for automatically controlling in-
formation flow from the beginning of the sentence
to the end. As shown in Figure 2, gated cells
are used to dynamically route information from



1555

南
South

c

h

京
Capital

c

h

市
City

c

h

长
Long

c

h

江
River

c

h

大
Big

c

h

桥
Bridge

c

h

长江
Yangtze River

市长
mayor

南京
Nanjing

长江大桥
Yangtze River Bridge

南京市
Nanjing City

大桥
Bridge

Figure 2: Lattice LSTM structure.

different paths to each character. Trained over
NER data, the lattice LSTM can learn to find more
useful words from context automatically for bet-
ter NER performance. Compared with character-
based and word-based NER methods, our model
has the advantage of leveraging explicit word in-
formation over character sequence labeling with-
out suffering from segmentation error.

Results show that our model significantly out-
performs both character sequence labeling models
and word sequence labeling models using LSTM-
CRF, giving the best results over a variety of
Chinese NER datasets across different domains.
Our code and data are released at https://
github.com/jiesutd/LatticeLSTM.

2 Related Work

Our work is in line with existing methods us-
ing neural network for NER. Hammerton (2003)
attempted to solve the problem using a uni-
directional LSTM, which was among the first neu-
ral models for NER. Collobert et al. (2011) used
a CNN-CRF structure, obtaining competitive re-
sults to the best statistical models. dos Santos
et al. (2015) used character CNN to augment a
CNN-CRF model. Most recent work leverages
an LSTM-CRF architecture. Huang et al. (2015)
uses hand-crafted spelling features; Ma and Hovy
(2016) and Chiu and Nichols (2016) use a char-
acter CNN to represent spelling characteristics;
Lample et al. (2016) use a character LSTM in-
stead. Our baseline word-based system takes a
similar structure to this line of work.

Character sequence labeling has been the dom-
inant approach for Chinese NER (Chen et al.,
2006b; Lu et al., 2016; Dong et al., 2016). There
have been explicit discussions comparing statisti-
cal word-based and character-based methods for
the task, showing that the latter is empirically a
superior choice (He and Wang, 2008; Liu et al.,
2010; Li et al., 2014). We find that with proper

representation settings, the same conclusion holds
for neural NER. On the other hand, lattice LSTM
is a better choice compared with both word LSTM
and character LSTM.

How to better leverage word information for
Chinese NER has received continued research at-
tention (Gao et al., 2005), where segmentation in-
formation has been used as soft features for NER
(Zhao and Kit, 2008; Peng and Dredze, 2015; He
and Sun, 2017a), and joint segmentation and NER
has been investigated using dual decomposition
(Xu et al., 2014), multi-task learning (Peng and
Dredze, 2016), etc. Our work is in line, focusing
on neural representation learning. While the above
methods can be affected by segmented training
data and segmentation errors, our method does not
require a word segmentor. The model is conceptu-
ally simpler by not considering multi-task settings.

External sources of information has been lever-
aged for NER. In particular, lexicon features have
been widely used (Collobert et al., 2011; Passos
et al., 2014; Huang et al., 2015; Luo et al., 2015).
Rei (2017) uses a word-level language modeling
objective to augment NER training, performing
multi-task learning over large raw text. Peters
et al. (2017) pretrain a character language model to
enhance word representations. Yang et al. (2017b)
exploit cross-domain and cross-lingual knowledge
via multi-task learning. We leverage external
data by pretraining word embedding lexicon over
large automatically-segmented texts, while semi-
supervised techniques such as language modeling
are orthogonal to and can also be used for our lat-
tice LSTM model.

Lattice structured RNNs can be viewed as a nat-
ural extension of tree-structured RNNs (Tai et al.,
2015) to DAGs. They have been used to model
motion dynamics (Sun et al., 2017), dependency-
discourse DAGs (Peng et al., 2017), as well as
speech tokenization lattice (Sperber et al., 2017)
and multi-granularity segmentation outputs (Su
et al., 2017) for NMT encoders. Compared with
existing work, our lattice LSTM is different in
both motivation and structure. For example, be-
ing designed for character-centric lattice-LSTM-
CRF sequence labeling, it has recurrent cells but
not hidden vectors for words. To our knowledge,
we are the first to design a novel lattice LSTM
representation for mixed characters and lexicon
words, and the first to use a word-character lattice
for segmentation-free Chinese NER.

https://github.com/jiesutd/LatticeLSTM
https://github.com/jiesutd/LatticeLSTM


1556

3 Model

We follow the best English NER model (Huang
et al., 2015; Ma and Hovy, 2016; Lample et al.,
2016), using LSTM-CRF as the main network
structure. Formally, denote an input sentence as
s = c1, c2, . . . , cm, where cj denotes the jth char-
acter. s can further be seen as a word sequence
s = w1, w2, . . . , wn, where wi denotes the ith
word in the sentence, obtained using a Chinese
segmentor. We use t(i, k) to denote the index j
for the kth character in the ith word in the sen-
tence. Take the sentence in Figure 1 for exam-
ple. If the segmentation is “南京市 长江大桥”,
and indices are from 1, then t(2, 1) = 4 (长) and
t(1, 3) = 3 (市). We use the BIOES tagging
scheme (Ratinov and Roth, 2009) for both word-
based and character-based NER tagging.

3.1 Character-Based Model
The character-based model is shown in Figure
3(a). It uses an LSTM-CRF model on the char-
acter sequence c1, c2, . . . , cm. Each character cj is
represented using

xcj = e
c(cj) (1)

ec denotes a character embedding lookup table.
A bidirectional LSTM (same structurally as

Eq. 11) is applied to x1, x2, . . . , xm to obtain−→
h c1,
−→
h c2, . . . ,

−→
h cm and

←−
h c1,
←−
h c2, . . . ,

←−
h cm in the

left-to-right and right-to-left directions, respec-
tively, with two distinct sets of parameters. The
hidden vector representation of each character is:

hcj = [
−→
h cj ;
←−
h cj ] (2)

A standard CRF model (Eq. 17) is used on
hc1,hc2, . . . ,hcm for sequence labelling.
• Char + bichar. Character bigrams have been
shown useful for representing characters in word
segmentation (Chen et al., 2015; Yang et al.,
2017a). We augment the character-based model
with bigram information by concatenating bigram
embeddings with character embeddings:

xcj = [e
c(cj); eb(cj , cj+1)], (3)

where eb denotes a charater bigram lookup table.
• Char + softword. It has been shown that using
segmentation as soft features for character-based
NER models can lead to improved performance
(Zhao and Kit, 2008; Peng and Dredze, 2016).

京
Capital

I-­‐LOC

𝒄"#

𝒙"#

𝒉"#

E-­‐LOC

𝒄&#

𝒙&#

𝒉&#

B-­‐LOC

𝒄'#

𝒙'#

𝒉'#

市
City

长
Long

B-­‐LOC

𝒄(#

𝒙(#

𝒉(#

南
South

(a) Character-based model.

B-­‐LOC

𝒄"#

𝒙"#

𝒉"#

E-­‐LOC

𝒄&#

𝒙&#

𝒉&#

市
City

南京
Nanjing

B-­‐LOC

𝒄'#

𝒙'#

𝒉'#

长江
Yangtze River

E-­‐LOC

𝒄(#

𝒙(#

𝒉(#

大桥
Bridge

(b) Word-based model.

京
Capital

I-­‐LOC

𝒄"#

𝒙"#

𝒉"#

E-­‐LOC

𝒄&#

𝒙&#

𝒉&#

市
City

B-­‐LOC

𝒄'#

𝒙'#

𝒉'#

南
South

南京市
Nanjing City

𝒙',&)

𝒄',&)

(c) Lattice model.

Figure 3: Models.1

We augment the character representation with seg-
mentation information by concatenating segmen-
tation label embeddings to character embeddings:

xcj = [e
c(cj); es(seg(cj))], (4)

where es represents a segmentation label em-
bedding lookup table. seg(cj) denotes the segmen-
tation label on the character cj given by a word
segmentor. We use the BMES scheme for repre-

1To keep the figure concise, we (i) do not show gate cells,
which uses ht−1 for calculating ct; (ii) only show one direc-
tion.



1557

senting segmentation (Xue, 2003).

hwi = [
−→
hwi ;
←−
hwi ] (5)

Similar to the character-based case, a standard
CRF model (Eq. 17) is used on hw1 ,hw2 , . . . ,hwm
for sequence labelling.

3.2 Word-Based Model
The word-based model is shown in Figure 3(b). It
takes the word embedding ew(wi) for representa-
tion each word wi:

xwi = e
w(wi), (6)

where ew denotes a word embedding lookup
table. A bi-directioanl LSTM (Eq. 11) is
used to obtain a left-to-right sequence of hid-
den states

−→
hw1 ,
−→
hw2 , . . . ,

−→
hwn and a right-to-left se-

quence of hidden states
←−
hw1 ,
←−
hw2 , . . . ,

←−
hwn for the

words w1, w2, . . . , wn, respectively. Finally, for
each word wi,

−→
hwi and

←−
hwi are concatenated as its

representation:
Integrating character representations
Both character CNN (Ma and Hovy, 2016) and

LSTM (Lample et al., 2016) have been used for
representing the character sequence within a word.
We experiment with both for Chinese NER. De-
noting the representation of characters within wi
as xci , a new word representation is obtained by
concatenation of ew(wi) and xci :

xwi = [e
w(wi); xci ] (7)

• Word + char LSTM. Denoting the em-
bedding of each input character as ec(cj),
we use a bi-directional LSTM (Eq. 11)
to learn hidden states

−→
h ct(i,1), . . . ,

−→
h ct(i,len(i))

and
←−
h ct(i,1), . . . ,

←−
h ct(i,len(i)) for the characters

ct(i,1), . . . , ct(i,len(i)) of wi, where len(i) denotes
the number of characters in wi. The final charac-
ter representation for wi is:

xci = [
−→
h ct(i,len(i));

←−
h ct(i,1)] (8)

• Word + char LSTM′. We investigate a varia-
tion of word + char LSTM model that uses a single
LSTM to obtain

−→
h cj and

←−
h cj for each cj . It is sim-

ilar with the structure of Liu et al. (2018) but not
uses the highway layer. The same LSTM structure
as defined in Eq. 11 is used, and the same method
as Eq. 8 is used to integrate character hidden states
into word representations.

• Word + char CNN. A standard CNN (LeCun
et al., 1989) structure is used on the character se-
quence of each word to obtain its character repre-
sentation xci . Denoting the embedding of character
cj as ec(cj), the vector xci is given by:

xci = max
t(i,1)≤j≤t(i,len(i))

(W>CNN

 e
c(cj− ke−1

2
)

. . .
ec(cj+ ke−1

2
)

+ bCNN),
(9)

where WCNN and bCNN are parameters, ke = 3 is
the kernal size and max denotes max pooling.

3.3 Lattice Model
The overall structure of the word-character lattice
model is shown in Figure 2, which can be viewed
as an extension of the character-based model, in-
tegrating word-based cells and additional gates for
controlling information flow.

Shown in Figure 3(c), the input to the model is
a character sequence c1, c2, . . . , cm, together with
all character subsequences that match words in a
lexicon D. As indicated in Section 2, we use au-
tomatically segmented large raw text for buinding
D. Using wdb,e to denote such a subsequence that
begins with character index b and ends with char-
acter index e, the segment wd1,2 in Figure 1 is “南
京 (Nanjing)” and wd7,8 is “大桥 (Bridge)”.

Four types of vectors are involved in the model,
namely input vectors, output hidden vectors, cell
vectors and gate vectors. As basic components,
a character input vector is used to represent each
chacracter cj as in the character-based model:

xcj = e
c(cj) (10)

The basic recurrent structure of the model is
constructed using a character cell vector ccj and a
hidden vector hcj on each cj , where ccj serves to
record recurrent information flow from the begin-
ning of the sentence to cj and hcj is used for CRF
sequence labelling using Eq. 17.

The basic recurrent LSTM functions are:


icj
ocj
fcj
c̃cj

 =


σ
σ
σ

tanh

(Wc>[ xcjhcj−1
]

+ bc
)

ccj = f
c
j � ccj−1 + icj � c̃

c
j

hcj = o
c
j � tanh(ccj)

(11)

where icj , fcj and ocj denote a set of input, forget and
output gates, respectively. Wc> and bc are model
parameters. σ() represents the sigmoid function.



1558

Different from the character-based model, how-
ever, the computation of ccj now considers lexicon
subsequences wdb,e in the sentence. In particular,
each subsequence wdb,e is represented using

xwb,e = e
w(wdb,e), (12)

where ew denotes the same word embedding
lookup table as in Section 3.2.

In addition, a word cell cwb,e is used to represent
the recurrent state of xwb,e from the beginning of the
sentence. The value of cwb,e is calculated by:

 iwb,efwb,e
c̃wb,e

 =
 σσ
tanh

(Ww>[ xwb,e
hcb

]
+ bw

)
cwb,e = f

w
b,e � ccb + iwb,e � c̃

w
b,e

(13)

where iwb,e and f
w
b,e are a set of input and forget

gates. There is no output gate for word cells since
labeling is performed only at the character level.

With cwb,e, there are more recurrent paths for in-
formation flow into each ccj . For example, in Fig-
ure 2, input sources for cc7 include xc7 (桥 Bridge),
cw6,7 (大桥 Bridge) and cw4,7 (长江大桥 Yangtze
River Bridge).2 We link all cwb,e with b ∈
{b′|wdb′,e ∈ D} to the cell cce. We use an addi-
tional gate icb,e for each subsequence cell cwb,e for
controlling its contribution into ccb,e:

icb,e = σ
(
Wl>

[
xce
cwb,e

]
+ bl

)
(14)

The calculation of cell values ccj thus becomes

ccj =
∑

b∈{b′|wd
b′,j∈D}

αcb,j � cwb,j +αcj � c̃
c
j (15)

In Eq. 15, the gate values icb,j and i
c
j are nor-

malised to αcb,j and α
c
j by setting the sum to 1.

αcb,j =
exp(icb,j)

exp(icj) +
∑

b′∈{b′′|wd
b′′,j∈D}

exp(icb′,j)

αcj =
exp(icj)

exp(icj) +
∑

b′∈{b′′|wd
b′′,j∈D}

exp(icb′,j)

(16)

The final hidden vectors hcj are still computed
as described by Eq. 11. During NER train-
ing, loss values back-propagate to the parameters

2We experimented with alternative configurations on in-
dexing word and character path links, finding that this con-
figuration gives the best results in preliminary experiments.
Single-character words are excluded; the final performance
drops slightly after integrating single-character words.

Dataset Type Train Dev Test

OntoNotes
Sentence 15.7k 4.3k 4.3k
Char 491.9k 200.5k 208.1k

MSRA
Sentence 46.4k – 4.4k
Char 2169.9k – 172.6

Weibo
Sentence 1.4k 0.27k 0.27k
Char 73.8k 14.5k 14.8k

resume
Sentence 3.8k 0.46k 0.48k
Char 124.1k 13.9k 15.1k

Table 1: Statistics of datasets.

Wc,bc,Ww,bw,Wl and bl allowing the model to
dynamically focus on more relevant words during
NER labelling.

3.4 Decoding and Training
A standard CRF layer is used on top of
h1,h2, . . . ,hτ , where τ is n for character-based
and lattice-based models and m for word-based
models. The probability of a label sequence y =
l1, l2, . . . , lτ is

P (y|s) =
exp(

∑
i(W

li
CRFhi + b

(li−1,li)
CRF ))∑

y′ exp(
∑

i(W
l′i
CRFhi + b

(l′i−1,l
′
i)

CRF ))
(17)

Here y′ represents an arbitary label sequence, and
WliCRF is a model parameter specific to li, and
b
(li−1,li)
CRF is a bias specific to li−1 and li.

We use the first-order Viterbi algorithm to
find the highest scored label sequence over a
word-based or character-based input sequence.
Given a set of manually labeled training data
{(si, yi)}|Ni=1, sentence-level log-likelihood loss
with L2 regularization is used to train the model:

L =
∑N

i=1 log(P (yi|si)) +
λ
2 ||Θ||

2, (18)

where λ is the L2 regularization parameter and Θ
represents the parameter set.

4 Experiments

We carry out an extensive set of experiments to
investigate the effectiveness of word-character lat-
tice LSTMs across different domains. In addition,
we aim to empirically compare word-based and
character-based neural Chinese NER under differ-
ent settings. Standard precision (P), recall (R) and
F1-score (F1) are used as evaluation metrics.

4.1 Experimental Settings
Data. Four datasets are used in this paper, which
include OntoNotes 4 (Weischedel et al., 2011),
MSRA (Levow, 2006) Weibo NER (Peng and



1559

Statistics Train Dev Test
Country 260 33 28
Educational Institution 858 106 112
Location 47 2 6
Personal Name 952 110 112
Organization 4611 523 553
Profession 287 18 33
Ethnicity Background 115 15 14
Job Title 6308 690 772
Total Entity 13438 1497 1630

Table 2: Detailed statistics of resume NER.

Dredze, 2015; He and Sun, 2017a) and a Chi-
nese resume dataset that we annotate. Statistics
of the datasets are shown in Table 1. We take the
same data split as Che et al. (2013) on OntoNotes.
The development set of OntoNotes is used for
reporting development experiments. While the
OntoNotes and MSRA datasets are in the news do-
main, the Weibo NER dataset is drawn from the
social media website Sina Weibo.3

For more variety in test domains, we collected a
resume dataset from Sina Finance4, which consists
of resumes of senior executives from listed compa-
nies in the Chinese stock market. We randomly se-
lected 1027 resume summaries and manually an-
notated 8 types of named entities. Statistics of the
dataset is shown in Table 2. The inter-annotator
agreement is 97.1%. We release this dataset as a
resource for further research.

Segmentation. For the OntoNotes and MSRA
datasets, gold-standard segmentation is available
in the training sections. For OntoNotes, gold seg-
mentation is also available for the development
and test sections. On the other hand, no seg-
mentation is available for the MSRA test sections,
nor the Weibo / resume datasets. As a result,
OntoNotes is leveraged for studying oracle situ-
ations where gold segmentation is given. We use
the neural word segmentor of Yang et al. (2017a)
to automatically segment the development and test
sets for word-based NER. In particular, for the
OntoNotes and MSRA datasets, we train the seg-
mentor using gold segmentation on their respec-
tive training sets. For Weibo and resume, we take
the best model of Yang et al. (2017a) off the shelf5,
which is trained using CTB 6.0 (Xue et al., 2005).

3https://www.weibo.com/
4http://finance.sina.com.cn/stock/

index.shtml
5https://github.com/jiesutd/

RichWordSegmentor

Parameter Value Parameter Value
char emb size 50 bigram emb size 50
lattice emb size 50 LSTM hidden 200
char dropout 0.5 lattice dropout 0.5
LSTM layer 1 regularization λ 1e-8
learning rate lr 0.015 lr decay 0.05

Table 3: Hyper-parameter values.

Word Embeddings. We pretrain word embed-
dings using word2vec (Mikolov et al., 2013) over
automatically segmented Chinese Giga-Word6,
obtaining 704.4k words in a final lexicon. In
particular, the number of single-character, two-
character and three-character words are 5.7k,
291.5k, 278.1k, respectively. The embedding lex-
icon is released alongside our code and models as
a resource for further research. Word embeddings
are fine-tuned during NER training. Character
and character bigram embeddings are pretrained
on Chinese Giga-Word using word2vec and fine-
tuned at model training.

Hyper-parameter settings. Table 3 shows the
values of hyper-parameters for our models, which
as fixed according to previous work in the litera-
ture without grid-search adjustments for each indi-
vidual dataset. In particular, the embedding sizes
are set to 50 and the hidden size of LSTM models
to 200. Dropout (Srivastava et al., 2014) is ap-
plied to both word and character embeddings with
a rate of 0.5. Stochastic gradient descent (SGD) is
used for optimization, with an initial learning rate
of 0.015 and a decay rate of 0.05.

4.2 Development Experiments

We compare various model configurations on the
OntoNotes development set, in order to select the
best settings for word-based and character-based
NER models, and to learn the influence of lattice
word information on character-based models.

Character-based NER. As shown in Table 4,
without using word segmentation, a character-
based LSTM-CRF model gives a development F1-
score of 62.47%. Adding character-bigram and
softword representations as described in Section
3.1 increases the F1-score to 67.63% and 65.71%,
respectively, demonstrating the usefulness of both
sources of information. In addition, a combination
of both gives a 69.64% F1-score, which is the best

6https://catalog.ldc.upenn.edu/
LDC2011T13

https://www.weibo.com/
http://finance.sina.com.cn/stock/index.shtml
http://finance.sina.com.cn/stock/index.shtml
https://github.com/jiesutd/RichWordSegmentor
https://github.com/jiesutd/RichWordSegmentor
https://catalog.ldc.upenn.edu/LDC2011T13
https://catalog.ldc.upenn.edu/LDC2011T13


1560

Input Models P R F1

Auto seg

Word baseline 73.20 57.05 64.12
+char LSTM 71.98 65.41 68.54
+char LSTM′ 71.08 65.83 68.35
+char+bichar LSTM 72.63 67.60 70.03
+char CNN 73.06 66.29 69.51
+char+bichar CNN 72.01 65.50 68.60

No seg

Char baseline 67.12 58.42 62.47
+softword 69.30 62.47 65.71
+bichar 71.67 64.02 67.63
+bichar+softword 72.64 66.89 69.64

Lattice 74.64 68.83 71.62

Table 4: Development results.

among various character representations. We thus
choose this model in the remaining experiments.

Word-based NER. Table 4 shows a vari-
ety of different settings for word-based Chinese
NER. With automatic segmentation, a word-based
LSTM CRF baseline gives a 64.12% F1-score,
which is higher compared to the character-based
baseline. This demonstrates that both word in-
formation and character information are useful for
Chinese NER. The two methods of using charac-
ter LSTM to enrich word representations in Sec-
tion 3.2, namely word+char LSTM and word+char
LSTM′, lead to similar improvements.

A CNN representation of character sequences
gives a slightly higher F1-score compared to
LSTM character representations. On the other
hand, further using character bigram informa-
tion leads to increased F1-score over word+char
LSTM, but decreased F1-score over word+char
CNN. A possible reason is that CNN inherently
captures character n-gram information. As a re-
sult, we use word+char+bichar LSTM for word-
based NER in the remaining experiments, which
gives the best development results, and is struc-
turally consistent with the state-of-the-art English
NER models in the literature.

Lattice-based NER. Figure 4 shows the F1-
score of character-based and lattice-based models
against the number of training iterations. We in-
clude models that use concatenated character and
character bigram embeddings, where bigrams can
play a role in disambiguating characters. As can
be seen from the figure, lattice word information
is useful for improving character-based NER, im-
proving the best development result from 62.5% to
71.6%. On the other hand, the bigram-enhanced
lattice model does not lead to further improve-
ments compared with the original lattice model.

5 10 15 20 25 30
iteration

0.50

0.55

0.60

0.65

0.70

F1
-v

al
ue

char_baseline
char_lattice
char+bichar_baseline
char+bichar_lattice

Figure 4: F1 against training iteration number.

Input Models P R F1

Gold seg

Yang et al. (2016) 65.59 71.84 68.57
Yang et al. (2016)*† 72.98 80.15 76.40
Che et al. (2013)* 77.71 72.51 75.02
Wang et al. (2013)* 76.43 72.32 74.32
Word baseline 76.66 63.60 69.52

+char+bichar LSTM 78.62 73.13 75.77

Auto seg
Word baseline 72.84 59.72 65.63

+char+bichar LSTM 73.36 70.12 71.70

No seg
Char baseline 68.79 60.35 64.30

+bichar+softword 74.36 69.43 71.81
Lattice 76.35 71.56 73.88

Table 5: Main results on OntoNotes.

This is likely because words are better sources
of information for character disambiguation com-
pared with bigrams, which are also ambiguous.

As shown in Table 4, the lattice LSTM-CRF
model gives a development F1-score of 71.62%,
which is significantly7 higher compared with both
the word-based and character-based methods, de-
spite that it does not use character bigrams or word
segmentation information. The fact that it signif-
icantly outperforms char+softword shows the ad-
vantage of lattice word information as compared
with segmentor word information.

4.3 Final Results

OntoNotes. The OntoNotes test results are shown
in Table 58. With gold-standard segmentation, our
word-based methods give competitive results to
the state-of-the-art on the dataset (Che et al., 2013;
Wang et al., 2013), which leverage bilingual data.
This demonstrates that LSTM-CRF is a competi-
tive choice for word-based Chinese NER, as it is
for other languages. In addition, the results show

7We use a p-value of less than 0.01 from pairwise t-test to
indicate statistical significance.

8In Table 5, 6 and 7, we use * to denote a model with
external labeled data for semi-supervised learning. † means
that the model also uses discrete features.



1561

Models P R F1
Chen et al. (2006a) 91.22 81.71 86.20
Zhang et al. (2006)* 92.20 90.18 91.18
Zhou et al. (2013) 91.86 88.75 90.28
Lu et al. (2016) – – 87.94
Dong et al. (2016) 91.28 90.62 90.95
Word baseline 90.57 83.06 86.65

+char+bichar LSTM 91.05 89.53 90.28
Char baseline 90.74 86.96 88.81

+bichar+softword 92.97 90.80 91.87
Lattice 93.57 92.79 93.18

Table 6: Main results on MSRA.

Models NE NM Overall
Peng and Dredze (2015) 51.96 61.05 56.05
Peng and Dredze (2016)* 55.28 62.97 58.99
He and Sun (2017a) 50.60 59.32 54.82
He and Sun (2017b)* 54.50 62.17 58.23
Word baseline 36.02 59.38 47.33

+char+bichar LSTM 43.40 60.30 52.33
Char baseline 46.11 55.29 52.77

+bichar+softword 50.55 60.11 56.75
Lattice 53.04 62.25 58.79

Table 7: Weibo NER results.

that our word-based models can serve as highly
competitive baselines. With automatic segmenta-
tion, the F1-score of word+char+bichar LSTM de-
creases from 75.77% to 71.70%, showing the in-
fluence of segmentation to NER. Consistent with
observations on the development set, adding lat-
tice word information leads to an 88.81% →
93.18% increasement of F1-score over the charac-
ter baseline, as compared with 88.81%→ 91.87%
by adding bichar+softword. The lattice model
gives significantly the best F1-score on automatic
segmentation.

MSRA. Results on the MSRA dataset are
shown in Table 6. For this benchmark, no gold-
standard segmentation is available on the test set.
Our chosen segmentor gives 95.93% accuracy on
5-fold cross-validated training set. The best sta-
tistical models on the dataset leverage rich hand-
crafted features (Chen et al., 2006a; Zhang et al.,
2006; Zhou et al., 2013) and character embedding
features (Lu et al., 2016). Dong et al. (2016) ex-
ploit neural LSTM-CRF with radical features.

Compared with the existing methods, our word-
based and character-based LSTM-CRF models
give competitive accuracies. The lattice model
significantly outperforms both the best character-
based and word-based models (p < 0.01), achiev-
ing the best result on this standard benchmark.

Weibo/resume. Results on the Weibo NER
dataset are shown in Table 7, where NE, NM and

Models P R F1
Word baseline 93.72 93.44 93.58

+char+bichar LSTM 94.07 94.42 94.24
Char baseline 93.66 93.31 93.48

+bichar+softword 94.53 94.29 94.41
Lattice 94.81 94.11 94.46

Table 8: Main results on resume NER.

20< 40 60 80 100 >100
Sentence length

0.65

0.70

0.75

0.80

0.85

F1
-v

al
ue

Word baseline
Word+char+bichar LSTM
Char baseline
Char+bichar+softword
Lattice

Figure 5: F1 against sentence length.

Overall denote F1-scores for named entities, nom-
inal entities (excluding named entities) and both,
respectively. Gold-standard segmentation is not
available for this dataset. Existing state-of-the-
art systems include Peng and Dredze (2016) and
He and Sun (2017b), who explore rich embedding
features, cross-domain and semi-supervised data,
some of which are orthogonal to our model9.

Results on the resume NER test data are shown
in Table 8. Consistent with observations on
OntoNotes and MSRA, the lattice model signifi-
cantly outperforms both the word-based mode and
the character-based model for Weibo and resume
(p < 0.01), giving state-of-the-art results.

4.4 Discussion

F1 against sentence length. Figure 5 shows
the F1-scores of the baseline models and lat-
tice LSTM-CRF on the OntoNotes dataset. The
character-based baseline gives relatively stable
F1-scores over different sentence lengths, al-
though the performances are relatively low. The
word-based baseline gives substantially higher
F1-scores over short sentences, but lower F1-
scores over long sentences, which can be be-
cause of lower segmentation accuracies over
longer sentences. Both word+char+bichar and
char+bichar+softword give better performances
compared to their respective baselines, showing

9The results of Peng and Dredze (2015, 2016) are taken
from Peng and Dredze (2017).



1562

Sentence (truncated) 卸下东莞台协会长职务后
After stepping down as president of Taiwan Association in Dongguan.

Correct Segmentation 卸下 东莞 台 协 会长 职务 后
step down, Dongguan, Taiwan, association, president, role, after

Auto Segmentation 卸下 东莞 台 协会长 职务 后
step down, Dongguan, Taiwan, association president, role, after

Lattice words
卸下 下东 东莞 台协会 协会 会长 长职 职务
step down, incorrect word, Dongguan, Taiwan association,
association, president, permanent job, role

Word+char+bichar LSTM 卸下东莞 GPE 台 GPE协会长职务后
. . . Dongguan GPE Taiwan GPE . . .

Char+bichar+softword 卸下东莞台协会 ORG长职务后
. . . Taiwan Association in Dongguan ORG . . . (ungrammatical)

Lattice 卸下东莞台协 ORG会长职务后
. . . Taiwan Association in Dongguan ORG . . .

Table 9: Example. Red and green represent incor-
rect and correct entities, respectively.

that word and character representations are com-
plementary for NER. The accuracy of lattice also
decreases as the sentence length increases, which
can result from exponentially increasing number
of word combinations in lattice. Compared with
word+char+bichar and char+bichar+softword, the
lattice model shows more robustness to increased
sentence lengths, demonstrating the more effective
use of word information.
F1 against sentence length. Table 9 shows
a case study comparing char+bichar+softword,
word+char+bichar and the lattice model. In the ex-
ample, there is much ambiguity around the named
entity “东莞台协 (Taiwan Association in Dong-
guan)”. Word+char+bichar yields the entities “东
莞 (Dongguan)” and “台 (Taiwan)” given that “东
莞台协 (Taiwan Association in Dongguan)” is not
in the segmentor output. Char+bichar+softword
recognizes “东莞台协会 (Taiwan Association
in Dongguan)”, which is valid on its own, but
leaves the phrase “长职务后” ungrammatical. In
contrast, the lattice model detects the organiza-
tion name correctly, thanks to the lattice words
“东莞 (Dongguan)”, “会长 (President)” and “职
务 (role)”. There are also irrelevant words such as
“台协会 (Taiwan Association)” and “下东 (noisy
word)” in the lexicon, which did not affect NER
results.

Note that both word+char+bichar and lattice use
the same source of word information, namely the
same pretrained word embedding lexicon. How-
ever, word+char+bichar first uses the lexicon in
the segmentor, which imposes hard constrains (i.e.
fixed words) to its subsequence use in NER. In
contrast, lattice LSTM has the freedom of consid-
ering all lexicon words.
Entities in lexicon. Table 10 shows the total num-
ber of entities and their respective match ratios in
the lexicon. The error reductions (ER) of the final

Dataset Split #Entity #Match Ratio (%) ER (%)

OntoNotes
Train 13.4k 9.5k 71.04 –
Test 7.7k 6.0k 78.72 7.34

MSRA
Train 74.7k 54.3k 72.62 –
Test 6.2k 4.6k 73.76 16.11

Weibo (all)
Train 1.9k 1.1k 58.83 –
Test 414 259 62.56 4.72

resume
Train 13.4k 3.8k 28.55 –
Test 1.6k 483 29.63 0.89

Table 10: Entities in lexicon.

lattice model over the best character-based method
(i.e. “+bichar+softword”) are also shown. It can
be seen that error reductions have a correlation be-
tween matched entities in the lexicon. In this re-
spect, our automatic lexicon also played to some
extent the role of a gazetteer (Ratinov and Roth,
2009; Chiu and Nichols, 2016), but not fully since
there is no explicit knowledge in the lexicon which
tokens are entities. The ultimate disambiguation
power still lies in the lattice encoder and super-
vised learning.

The quality of the lexicon may affect the ac-
curacy of our NER model since noise words can
potentially confuse NER. On the other hand, our
lattice model can potentially learn to select more
correct words during NER training. We leave the
investigation of such influence to future work.

5 Conclusion

We empirically investigated a lattice LSTM-CRF
representations for Chinese NER, finding that it
gives consistently superior performance compared
to word-based and character-based LSTM-CRF
across different domains. The lattice method is
fully independent of word segmentation, yet more
effective in using word information thanks to the
freedom of choosing lexicon words in a context
for NER disambiguation.

Acknowledgments

We thank the anonymous reviewers for their in-
sightful comments.

References
Wanxiang Che, Mengqiu Wang, Christopher D Man-

ning, and Ting Liu. 2013. Named entity recognition
with bilingual constraints. In HLT-NAACL. pages
52–62.

Aitao Chen, Fuchun Peng, Roy Shan, and Gordon Sun.
2006a. Chinese named entity recognition with con-
ditional probabilistic models. In Proceedings of the



1563

Fifth SIGHAN Workshop on Chinese Language Pro-
cessing. pages 173–176.

Wenliang Chen, Yujie Zhang, and Hitoshi Isahara.
2006b. Chinese named entity recognition with con-
ditional random fields. In Proceedings of the Fifth
SIGHAN Workshop on Chinese Language Process-
ing. pages 118–121.

Xinchi Chen, Xipeng Qiu, Chenxi Zhu, Pengfei Liu,
and Xuanjing Huang. 2015. Long short-term mem-
ory neural networks for chinese word segmenta-
tion. In EMNLP. Lisbon, Portugal, pages 1197–
1206. http://aclweb.org/anthology/D15-1141.

Xinchi Chen, Zhan Shi, Xipeng Qiu, and Xuanjing
Huang. 2017. Adversarial multi-criteria learning
for Chinese word segmentation. In ACL. volume 1,
pages 1193–1203.

Jason Chiu and Eric Nichols. 2016.
Named entity recognition with bidirec-
tional LSTM-CNNs. TACL 4:357–370.
https://transacl.org/ojs/index.php/tacl/article/view/792.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. Journal of Machine Learning Research
12(Aug):2493–2537.

Chuanhai Dong, Jiajun Zhang, Chengqing Zong,
Masanori Hattori, and Hui Di. 2016. Character-
based LSTM-CRF with radical-level features for
Chinese named entity recognition. In International
Conference on Computer Processing of Oriental
Languages. Springer, pages 239–250.

Cıcero dos Santos, Victor Guimaraes, RJ Niterói, and
Rio de Janeiro. 2015. Boosting named entity recog-
nition with neural character embeddings. In Pro-
ceedings of NEWS 2015 The Fifth Named Entities
Workshop. page 25.

Jianfeng Gao, Mu Li, Chang-Ning Huang, and Andi
Wu. 2005. Chinese word segmentation and named
entity recognition: A pragmatic approach. Compu-
tational Linguistics 31(4):531–574.

James Hammerton. 2003. Named entity recognition
with long short-term memory. In HLT-NAACL
2003-Volume 4. pages 172–175.

Hangfeng He and Xu Sun. 2017a. F-score driven max
margin neural network for named entity recognition
in Chinese social media. In EACL. volume 2, pages
713–718.

Hangfeng He and Xu Sun. 2017b. A unified model
for cross-domain and semi-supervised named entity
recognition in Chinese social media. In AAAI. pages
3216–3222.

Jingzhou He and Houfeng Wang. 2008. Chinese
named entity recognition and word segmentation
based on character. In Proceedings of the Sixth

SIGHAN Workshop on Chinese Language Process-
ing.

Shen Huang, Xu Sun, and Houfeng Wang. 2017. Ad-
dressing domain adaptation for chinese word seg-
mentation with global recurrent structure. In IJC-
NLP. volume 1, pages 184–193.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidi-
rectional LSTM-CRF models for sequence tagging.
arXiv preprint arXiv:1508.01991 .

Wenbin Jiang, Meng Sun, Yajuan Lü, Yating Yang, and
Qun Liu. 2013. Discriminative learning with natural
annotations: Word segmentation as a case study. In
ACL. volume 1, pages 761–769.

Guillaume Lample, Miguel Ballesteros, Sandeep Sub-
ramanian, Kazuya Kawakami, and Chris Dyer. 2016.
Neural architectures for named entity recognition.
In NAACL-HLT . pages 260–270.

Yann LeCun, Bernhard Boser, John S Denker, Don-
nie Henderson, Richard E Howard, Wayne Hubbard,
and Lawrence D Jackel. 1989. Backpropagation ap-
plied to handwritten zip code recognition. Neural
computation 1(4):541–551.

Gina-Anne Levow. 2006. The third international Chi-
nese language processing bakeoff: Word segmen-
tation and named entity recognition. In Proceed-
ings of the Fifth SIGHAN Workshop on Chinese Lan-
guage Processing. pages 108–117.

Haibo Li, Masato Hagiwara, Qi Li, and Heng Ji. 2014.
Comparison of the impact of word segmentation on
name tagging for Chinese and japanese. In LREC.
pages 2532–2536.

Liyuan Liu, Jingbo Shang, Frank Xu, Xiang Ren, Huan
Gui, Jian Peng, and Jiawei Han. 2018. Empower
sequence labeling with task-aware neural language
model. AAAI .

Yang Liu and Yue Zhang. 2012. Unsupervised domain
adaptation for joint segmentation and pos-tagging.
Proceedings of COLING 2012: Posters pages 745–
754.

Yijia Liu, Yue Zhang, Wanxiang Che, Ting Liu, and
Fan Wu. 2014. Domain adaptation for crf-based
Chinese word segmentation using free annotations.
In EMNLP. pages 864–874.

Zhangxun Liu, Conghui Zhu, and Tiejun Zhao. 2010.
Chinese named entity recognition with a sequence
labeling approach: based on characters, or based on
words? In Advanced intelligent computing theories
and applications. With aspects of artificial intelli-
gence, Springer, pages 634–640.

Yanan Lu, Yue Zhang, and Dong-Hong Ji. 2016. Multi-
prototype Chinese character embedding. In LREC.

Gang Luo, Xiaojiang Huang, Chin-Yew Lin, and Za-
iqing Nie. 2015. Joint entity recognition and disam-
biguation. In EMNLP. pages 879–888.

http://aclweb.org/anthology/D15-1141
http://aclweb.org/anthology/D15-1141
http://aclweb.org/anthology/D15-1141
http://aclweb.org/anthology/D15-1141
https://transacl.org/ojs/index.php/tacl/article/view/792
https://transacl.org/ojs/index.php/tacl/article/view/792
https://transacl.org/ojs/index.php/tacl/article/view/792


1564

Xuezhe Ma and Eduard Hovy. 2016. End-to-end se-
quence labeling via Bi-directional LSTM-CNNs-
CRF. In ACL. volume 1, pages 1064–1074.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems. pages 3111–3119.

Alexandre Passos, Vineet Kumar, and Andrew McCal-
lum. 2014. Lexicon infused phrase embeddings for
named entity resolution. In CoNLL. pages 78–86.

Nanyun Peng and Mark Dredze. 2015. Named entity
recognition for Chinese social media with jointly
trained embeddings. In EMNLP. pages 548–554.

Nanyun Peng and Mark Dredze. 2016. Improving
named entity recognition for Chinese social media
with word segmentation representation learning. In
ACL. volume 2, pages 149–155.

Nanyun Peng and Mark Dredze. 2017. Supplementary
results for named entity recognition on chinese so-
cial media with an updated dataset .

Nanyun Peng, Hoifung Poon, Chris Quirk, Kristina
Toutanova, and Wen-tau Yih. 2017. Cross-sentence
n-ary relation extraction with graph lstms. TACL
5:101–115.

Matthew Peters, Waleed Ammar, Chandra Bhagavat-
ula, and Russell Power. 2017. Semi-supervised se-
quence tagging with bidirectional language models.
In ACL. volume 1, pages 1756–1765.

Likun Qiu and Yue Zhang. 2015. Word segmentation
for chinese novels. In AAAI. pages 2440–2446.

Lev Ratinov and Dan Roth. 2009. Design challenges
and misconceptions in named entity recognition. In
CoNLL. pages 147–155.

Marek Rei. 2017. Semi-supervised multitask learning
for sequence labeling. In ACL. volume 1, pages
2121–2130.

Matthias Sperber, Graham Neubig, Jan Niehues, and
Alex Waibel. 2017. Neural lattice-to-sequence mod-
els for uncertain inputs. In EMNLP. pages 1380–
1389. https://www.aclweb.org/anthology/D17-
1145.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. JMLR 15(1):1929–1958.

Jinsong Su, Zhixing Tan, Deyi Xiong, Rongrong Ji, Xi-
aodong Shi, and Yang Liu. 2017. Lattice-based re-
current neural network encoders for neural machine
translation. In AAAI. pages 3302–3308.

Lin Sun, Kui Jia, Kevin Chen, Dit-Yan Yeung,
Bertram E. Shi, and Silvio Savarese. 2017. Lattice
long short-term memory for human action recogni-
tion. In ICCV .

Kai Sheng Tai, Richard Socher, and Christopher D.
Manning. 2015. Improved semantic representa-
tions from tree-structured long short-term memory
networks. In ACL-IJCNLP. Beijing, China, pages
1556–1566. http://www.aclweb.org/anthology/P15-
1150.

Mengqiu Wang, Wanxiang Che, and Christopher D
Manning. 2013. Effective bilingual constraints for
semi-supervised learning of named entity recogniz-
ers. In AAAI.

Ralph Weischedel, Sameer Pradhan, Lance Ramshaw,
Martha Palmer, Nianwen Xue, Mitchell Marcus,
Ann Taylor, Craig Greenberg, Eduard Hovy, Robert
Belvin, et al. 2011. Ontonotes release 4.0.
LDC2011T03, Philadelphia, Penn.: Linguistic Data
Consortium .

Y Xu, Y Wang, T Liu, J Liu, Y Fan, Y Qian, J Tsujii,
and EI Chang. 2014. Joint segmentation and named
entity recognition using dual decomposition in Chi-
nese discharge summaries. JAMIA 21(e1):e84–92.

Naiwen Xue, Fei Xia, Fu-Dong Chiou, and Marta
Palmer. 2005. The penn Chinese treebank: Phrase
structure annotation of a large corpus. Natural lan-
guage engineering 11(02):207–238.

Nianwen Xue. 2003. Chinese word segmentation as
character tagging. In International Journal of Com-
putational Linguistics and Chinese Language Pro-
cessing.

Jie Yang, Zhiyang Teng, Meishan Zhang, and Yue
Zhang. 2016. Combining discrete and neural fea-
tures for sequence labeling. In International Confer-
ence on Computational Linguistics and Intelligent
Text Processing.

Jie Yang, Yue Zhang, and Fei Dong. 2017a.
Neural word segmentation with rich pretraining.
In ACL. Vancouver, Canada, pages 839–849.
http://aclweb.org/anthology/P17-1078.

Zhilin Yang, Ruslan Salakhutdinov, and William W
Cohen. 2017b. Transfer learning for sequence tag-
ging with hierarchical recurrent networks. In ICLR.

Suxiang Zhang, Ying Qin, Juan Wen, and Xiaojie
Wang. 2006. Word segmentation and named entity
recognition for sighan bakeoff3. In Proceedings of
the Fifth SIGHAN Workshop on Chinese Language
Processing. pages 158–161.

Hai Zhao and Chunyu Kit. 2008. Unsupervised seg-
mentation helps supervised learning of character
tagging for word segmentation and named entity
recognition. In Proceedings of the Sixth SIGHAN
Workshop on Chinese Language Processing.

Junsheng Zhou, Weiguang Qu, and Fen Zhang. 2013.
Chinese named entity recognition via joint identifi-
cation and categorization. Chinese Journal of Elec-
tronics 22(2):225–230.

https://www.aclweb.org/anthology/D17-1145
https://www.aclweb.org/anthology/D17-1145
https://www.aclweb.org/anthology/D17-1145
https://www.aclweb.org/anthology/D17-1145
http://www.aclweb.org/anthology/P15-1150
http://www.aclweb.org/anthology/P15-1150
http://www.aclweb.org/anthology/P15-1150
http://www.aclweb.org/anthology/P15-1150
http://www.aclweb.org/anthology/P15-1150
http://aclweb.org/anthology/P17-1078
http://aclweb.org/anthology/P17-1078

