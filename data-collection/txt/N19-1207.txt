















































Differentiable Sampling with Flexible Reference Word Order for Neural Machine Translation


Proceedings of NAACL-HLT 2019, pages 2047–2053
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

2047

Differentiable Sampling with Flexible Reference Word Order
for Neural Machine Translation

Weijia Xu
University of Maryland
weijia@cs.umd.edu

Xing Niu
University of Maryland

xingniu@cs.umd.edu

Marine Carpuat
University of Maryland
marine@cs.umd.edu

Abstract
Despite some empirical success at correcting
exposure bias in machine translation, sched-
uled sampling algorithms suffer from a ma-
jor drawback: they incorrectly assume that
words in the reference translations and in sam-
pled sequences are aligned at each time step.
Our new differentiable sampling algorithm ad-
dresses this issue by optimizing the probabil-
ity that the reference can be aligned with the
sampled output, based on a soft alignment pre-
dicted by the model itself. As a result, the
output distribution at each time step is eval-
uated with respect to the whole predicted se-
quence. Experiments on IWSLT translation
tasks show that our approach improves BLEU
compared to maximum likelihood and sched-
uled sampling baselines. In addition, our ap-
proach is simpler to train with no need for sam-
pling schedule and yields models that achieve
larger improvements with smaller beam sizes.1

1 Introduction

Neural machine translation (NMT) models are
typically trained to maximize the likelihood of ref-
erence translations (Sutskever et al., 2014; Bah-
danau et al., 2015). While simple and effective,
this objective suffers from the exposure bias prob-
lem (Ranzato et al., 2015): the model is only ex-
posed to reference target sequences during train-
ing, but has to rely on its own predictions at infer-
ence. As a result, errors can accumulate along the
generated sequence at inference time.

This is a well-known issue in sequential deci-
sion making (Langford and Zadrozny, 2005; Co-
hen and Carvalho, 2005; Kääriäinen and Lang-
ford, 2006, i.a.) and it has been addressed in
past work by incorporating the previous decod-
ing choices into the training scheme, using imi-
tation learning (Daumé et al., 2009; Ross et al.,

1The code is available at https://github.com/
Izecson/saml-nmt

2011; Bengio et al., 2015; Leblond et al., 2018)
and reinforcement learning (Ranzato et al., 2015;
Bahdanau et al., 2016) techniques. In this pa-
per, we focus on a simple and computationally in-
expensive family of approaches, known as Data
as Demonstrator (Venkatraman et al., 2015) and
scheduled sampling (Bengio et al., 2015; Goyal
et al., 2017). The algorithms use a stochastic mix-
ture of the reference words and model predictions
with an annealing schedule controlling the mix-
ture probability. Despite their empirical success in
various sequence prediction tasks, they are based
on an assumption that does not hold for machine
translation: they assume that words in the refer-
ence translations and in sampled sequences are
aligned at each time step, which results in weak
and sometimes misleading training signals.

In this paper, we introduce a differentiable sam-
pling algorithm that exposes machine translation
models to their own predictions during training,
and allows for differences in word order when
comparing model outputs with reference transla-
tions. We compute the probability that the refer-
ence can be aligned with the sampled output us-
ing a soft alignment predicted based on the model
states, so that the model will not be punished
too severely for producing hypotheses that devi-
ate from the reference, as long as the hypotheses
can still be aligned with the reference.

Experiments on three IWSLT tasks (German-
English, English-German and Vietnamese-
English) show that our approach significantly
improves BLEU compared to both maximum
likelihood and scheduled sampling baselines. We
also provide evidence that our approach addresses
exposure bias by decoding with varying beam
sizes, and show that our approach is simpler to
train than scheduled sampling as it requires no
annealing schedule.



2048

2 Approach

Our approach is designed to optimize the stan-
dard sequence-to-sequence model for translating a
source sentence x into a target sentence y (Bah-
danau et al., 2015). This model computes the
probability of y given x as:

P (y |x) =
T∏
t=1

p(yt |y<t,x; θ) (1)

where θ represents the model parameters.
Given x, the model first produces a sequence of
hidden representations h1...T : ht = f(y<t,x),
where T is the length of y, and f is usually
an encoder-decoder network. At each time
step t, the hidden representation ht is fed to
a linear projection layer st = Wht + b to
obtain a vector of scores st over all possible
words in the vocabulary V . Scores are then
turned into a conditional probability distribution:
p(· |y<t,x; θ) = softmax(st).

The traditional maximum likelihood (ML) ob-
jective maximizes the log-likelihood of the train-
ing data D ≡ {(x(n),y(n))}Nn=1 consisting of N
pairs of source and target sentences:

JML(θ) =
N∑

n=1

T∑
t=1

log p(y
(n)
t |y

(n)
<t ,x

(n); θ) (2)

At test time, prefixes y<t are subsequences
generated by the model and therefore contain er-
rors. By contrast, in ML training, prefixes y<t are
subsequences of reference translations. As a re-
sult, the model is never exposed to its own errors
during training and errors accumulate at test time.
This mismatch is known as the exposure bias prob-
lem (Ranzato et al., 2015).

2.1 Limitations in Scheduled Sampling
Bengio et al. (2015) introduced the scheduled
sampling algorithm to address exposure bias.
Scheduled sampling gradually replaces the refer-
ence words with sampled model predictions in
the prefix used at training time. An annealing
schedule controls the probability of using refer-
ence words vs. model predictions. The training
objective remains the same as the ML objective,
except for the nature of the prefix ŷ<t, which con-
tains a mixture of reference and predicted words:

JSS(θ) =
N∑

n=1

T∑
t=1

log p(y
(n)
t | ŷ

(n)
<t ,x

(n); θ) (3)

Despite the empirical success of scheduled sam-
pling, one limitation is that the discontinuity of the
argmax operation makes it impossible to penalize
errors made in previous steps, which can lead to
slow and unstable training. We address this is-
sue using a continuous relaxation to the greedy
search and sampling process, similarly to Goyal
et al. (2017), which we describe in Section 2.2.

Another limitation of scheduled sampling is that
it incorrectly assumes that the reference and pre-
dicted sequence are aligned by time indices which
introduces additional noise to the training signal.2

We address this problem with a novel differen-
tiable sampling algorithm with an alignment based
objective called soft aligned maximum likelihood
(SAML). It is used in combination with maximum
likelihood to define our training objective J =
JML + JSAML, where JML is computed based
on reference translations, andJSAML is computed
based on sampled translations of the same input
sentences. We define JSAML in Section 2.3.

2.2 Differentiable Sampling

To backpropagate errors made in the previous de-
coding steps, we use a continuous relaxation of
the discrete sampling operation similar to Goyal
et al. (2017), except that we use the Straight-
Through (ST) Gumbel-Softmax estimator (Jang
et al., 2017; Bengio et al., 2013) instead of
Gumbel-Softmax (Jang et al., 2017; Maddison
et al., 2014) to better simulate the scenario at in-
ference time.3

The Gumbel-Softmax is derived from the
Gumbel-Max trick (Maddison et al., 2014), an al-
gorithm for sampling one-hot vector z ∈ Rk from
a categorical distribution (p1, ..., pk):

z = one-hot(argmax
i

(log pi + βgi)) (4)

where gi is the Gumbel noise drawn i.i.d
from Gumbel(0, 1)4, and β is a hyperparameter
controlling the scale of the noise. Here, the trick
is used to approximate the discontinuous argmax
function with the differentiable softmax:

z̃ = softmax((log pi + βgi)/τ) (5)

2https://nlpers.blogspot.com/2016/03/a-dagger-by-any-
other-name-scheduled.html

3The Straight-Through estimator consistently outper-
forms the Gumbel-Softmax in preliminary experiments.

4gi = − log(− log(ui)) and ui ∼ Uniform(0, 1).



2049

We make dinner </s>

We make </s>will

log p(“dinner” | “We will”, x)

reference

alignment

output

objective for 
3rd ref word

(a) Scheduled Sampling Objective

reference

alignment

output

We make dinner </s>

We will make dinner </s>

objective for 
3rd ref word

log [ a13 p(“dinner” | x) + … + a43 p(“dinner” | “We will make”, x)
+ a53 p(“dinner” | “We will make dinner”, x) ]

(b) SAML Objective

Figure 1: Difference between objectives used in scheduled sampling (left) and our approach (right), when com-
puting the contribution to the objective of the reference word “dinner”. The schedule sampling hypothesis uses
a mixture of the reference (black) and sampled (blue underlined) words, while the entire hypothesis sequence is
sampled in our approach.

where τ is the temperature parameter. As τ di-
minishes to zero, z̃ becomes the same as one-hot
sample z.

The Straight-Through Gumbel-Softmax main-
tains the differentiability of the Gumbel-Softmax
estimator while allowing for discrete sampling by
taking different paths in the forward and backward
pass. It uses argmax to get the one-hot sample z in
the forward pass, but uses its continuous approxi-
mation z̃ in the backward pass. While ST estima-
tors are biased, they have been shown to work well
in latent tree learning (Choi et al., 2018) and semi-
supervised machine translation (Niu et al., 2019).

2.3 Soft Aligned Maximum Likelihood
The soft aligned maximum likelihood (SAML) is
defined as the probability that the reference can
be aligned with the sampled output using a soft
alignment predicted by the model:

PSAML(y |x) =
T∏
t=1

T ′∑
j=1

atj · p(yt | ỹ<j ,x; θ)

(6)
where T is the length of the reference sequence, T ′

is the length of the sampled sequence, atj is the
predicted soft alignment between the reference
word yt and sampled prefix ỹ<j .

Training with the SAML objective consists in
maximizing:

JSAML(θ) =
N∑

n=1

logPSAML(y
(n) |x(n)) (7)

The conditional probability of the next
word p(yt | ỹ<j ,x; θ) is computed as follows:

p(· | ỹ<j ,x; θ) = softmax(Wh̃j + b) (8)

where W and b are model parameters. h̃j is the
hidden representation at step j conditioned on the

Task sentences (K) vocab (K)

train dev test src tgt
de-en 153.3 7.0 6.8 113.5 53.3
vi-en 121.3 1.5 1.3 23.9 50.0

Table 1: We evaluate on two translation tasks.

source sequence x and the preceding words ỹ<j
sampled from the model distribution using differ-
entiable sampling:

h̃j = f(ỹ<j ,x) (9)

We compute the soft alignment atj between yt
and ỹ<j based on the model’s hidden states:

atj =
exp(score(h̃j , eyt))∑T ′
i=1 exp(score(h̃i, eyt))

(10)

where eyt is the embedding of the reference
word yt. The score function captures the simi-
larity between the hidden state h̃j and the embed-
ding eyt . We use the dot product here as it does
not introduce additional parameters:

score(h, e) = h>e (11)

Figure 1 illustrates how the resulting objective
differs from scheduled sampling: (1) it is com-
puted over sampled sequences as opposed to se-
quences that contain a mixture of sampled and ref-
erence words, and (2) each reference word is soft-
aligned to the sampled sequence.

3 Experiments

Data We evaluate our approach on IWSLT 2014
German-English (de-en) as prior work (Goyal
et al., 2017), as well as two additional tasks:
IWSLT 2014 English-German (en-de) and IWSLT



2050

Method Anneal de-en en-de vi-en

Baseline No 27.41±0.26 22.64±0.13 23.59±0.13

+SS Yes 27.47±0.28 22.56±0.17 23.97±0.39
+DSS Yes 27.30±0.24 22.47±0.20 23.68±0.35
+SS No 22.91±0.21 17.78±0.20 19.57±0.19

+SAML No 27.94±0.12 23.30±0.19 24.60±0.35

Table 2: BLEU scores of our approach (SAML)
and three baselines including the maximum likelihood
(ML) baseline, scheduled sampling (SS), and differ-
entiable scheduled sampling (DSS). The Anneal col-
umn indicates whether the sampling rate is annealed.
For each task, we report the mean and standard devi-
ation over 5 runs with different random seeds. SAML
achieves the best BLEU scores and is simpler to train
than SS and DSS, as it requires no annealing schedule.

2015 Vietnamese-English (vi-en). For de-en and
en-de, we follow the preprocessing steps in Ran-
zato et al. (2015). For vi-en, we use the data pre-
processed by Luong and Manning (2015), with
test2012 for validation and test2013 for testing.
Table 1 summarizes the data statistics.

Setup Our translation models are attentional
RNNs (Bahdanau et al., 2015) built on Sock-
eye (Hieber et al., 2017). We use bi-directional
LSTM encoder and single-layer LSTM decoder
with 256 hidden units, embeddings of size 256,
and multilayer perceptron attention with a layer
size of 256. We apply layer normalization (Ba
et al., 2016) and label smoothing (0.1). We add
dropout to embeddings (0.1) and decoder hidden
states (0.2). For ST Gumbel-Softmax, we use
temperature γ = 1 and noise scale β = 0.5. The
decoding beam size is 5 unless stated otherwise.
We train the models using the Adam opti-
mizer (Kingma and Ba, 2015) with a batch size
of 1024 words. We checkpoint models every 1000
updates. The initial learning rate is 0.0002, and
it is reduced by 30% after 4 checkpoints without
validation perplexity improvement. Training stops
after 12 checkpoints without improvement. For
training efficiency, we first pre-train a baseline
model for each task using only JML and fine-tune
it using different approaches. In the fine-tuning
phase, we inherit all settings except that we
initialize the learning rate to 0.00002 and set the
minimum number of checkpoints before early
stopping to 24. We fine-tune each randomly
seeded model independently.

Baselines We compare our model against
three baselines: (1) a standard baseline trained
with the ML objective, and models fine-tuned
with (2) scheduled sampling (SS) (Bengio et al.,
2015) and (3) differentiable scheduled sampling
(DSS) (Goyal et al., 2017). In SS and DSS,
the probability of using reference words �s is
annealed using inverse sigmoid decay (Bengio
et al., 2015): �s = k/(k + exp(i/k)) at the i-th
checkpoint with k = 10.

Results Table 2 shows that the SAML improves
over the ML baseline by +0.5 BLEU on de-en,
+0.7 BLEU on en-de, and +1.0 BLEU on vi-en
task. In addition, SAML consistently improves
over both the scheduled sampling and differen-
tiable scheduled sampling on all tasks. All im-
provements are significant with p < 0.002. In-
terestingly, differentiable scheduled sampling per-
forms no better than scheduled sampling in our ex-
periments, unlike in Goyal et al. (2017).

Unlike scheduled sampling, our approach does
not require an annealing schedule, and it is there-
fore simpler to train. We verify that the annealing
schedule is needed in scheduled sampling by train-
ing a contrastive model with the same objective as
scheduled sampling, but without annealing sched-
ule (Table 2). We set the sampling rate to 0.5. The
contrastive model hurts BLEU scores by at least
4.0 points compared to both the ML baseline and
models fine-tuned with scheduled sampling, con-
firming that scheduled sampling needs the anneal-
ing schedule to work well.

We further examine the performance gain of dif-
ferent approaches over the baseline with varying
beam sizes (Figure 2). Our approach yields larger
BLEU improvements when decoding with greedy
search and smaller beams, while there is no clear
pattern for scheduled sampling models. These re-
sults support the hypothesis that our approach mit-
igates exposure bias, as it yields bigger improve-
ments in settings where systems have fewer oppor-
tunities to recover from early errors.

4 Related Work

Daumé et al. (2009) first addressed exposure bias
in an imitation learning framework by training a
classifier on examples generated using a mixture
of the ground truth and the model’s current pre-
dictions. DAgger (Ross et al., 2011) is a similar
algorithm which differs in how the training ex-
amples are generated and aggregated. Both al-



2051

-0.2 0 0.2 0.4 0.6 0.8 1

1

2

3

4

5

BLEU	Improvement

Be
am

	S
ize

DSS SS SAML

(a) de-en

-0.2 0 0.2 0.4 0.6 0.8 1 1.2

1

2

3

4

5

BLEU	Improvement

Be
am

	S
ize

DSS SS SAML

(b) en-de

0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6

1

2

3

4

5

BLEU	Improvement

Be
am

	S
ize

DSS SS SAML

(c) vi-en

Figure 2: Improvements from our method (SAML), scheduled sampling (SS), and differentiable scheduled sam-
pling (DSS) over the maximum likelihood (ML) baseline when decoding with varying beam sizes (average of 5
runs). The SAML model consistently yields the largest improvements with smaller beams.

gorithms require an expert policy, which produces
the best next token given any model predicted pre-
fix, and assume that policy can be efficiently com-
puted from the reference. However, for struc-
tured prediction tasks such as machine translation
with large vocabulary and complex loss functions,
it is intractable to find the best next token given
any prefix. For time series modeling, the Data
as Demonstrator algorithm (Venkatraman et al.,
2015) derives the expert policy directly from the
reference sequences which are aligned with the
sampled sequences at each time step. Scheduled
sampling algorithms (Bengio et al., 2015; Goyal
et al., 2017) use the same strategy to train neu-
ral sequence-to-sequence models for a broader
range of language generation tasks, even though
the time alignment between reference and sampled
sequences does not hold. Leblond et al. (2018)
proposed to complete a predicted prefix with all
possible reference suffixes and picking the refer-
ence suffix that yields the highest BLEU-1 score.
However, they found that this approach performs
well only when the prefix is close to the reference.

Reinforcement learning (RL) algorithms (Bah-
danau et al., 2016; Sutton and Barto, 2018;
Van Hasselt et al., 2016) address exposure bias
by directly optimizing a sentence-level reward for
the model generated sequences. Evaluation met-
rics such as BLEU can be used as rewards, but
they are discontinuous and hard to optimize. Tech-
niques such as policy gradient (Williams, 1992)
and actor-critic (Sutton and Barto, 2018; Degris
et al., 2012) are thus required to find an unbi-
ased estimation of the gradient to optimize the
model. Due to the high variance of the gradient es-
timation, training with RL can be slow and unsta-
ble (Henderson et al., 2018; Wu et al., 2018). Re-
cent alternatives use data augmentation to incor-
porate the sentence-level reward into the training
objective more efficiently (Norouzi et al., 2016).

Finally, our SAML loss shares the idea of flexi-
ble reference word order with the bag-of-word loss
introduced by Ma et al. (2018) to improve source
coverage. However, their loss is computed with
teacher forcing and therefore does not address ex-
posure bias.

5 Conclusion

We introduced a differentiable sampling algorithm
which exposes a sequence-to-sequence model to
its own predictions during training and compares
them to reference sequences flexibly to back-
propagate reliable error signals. By soft align-
ing reference and sampled sequences, our ap-
proach consistently improves BLEU over maxi-
mum likelihood and scheduled sampling baselines
on three IWSLT tasks, with larger improvements
for greedy search and smaller beam sizes. Our ap-
proach is also simple to train, as it does not require
any sampling schedule.

Acknowledgments

We thank the anonymous reviewers, Amr Sharaf,
Naomi Feldman, Hal Daumé III and the CLIP lab
at UMD for helpful comments. This research is
supported in part by an Amazon Web Services Ma-
chine Learning Research Award and by the Office
of the Director of National Intelligence (ODNI),
Intelligence Advanced Research Projects Activity
(IARPA), via contract #FA8650-17-C-9117. The
views and conclusions contained herein are those
of the authors and should not be interpreted as
necessarily representing the official policies, ei-
ther expressed or implied, of ODNI, IARPA, or
the U.S. Government. The U.S. Government is
authorized to reproduce and distribute reprints for
governmental purposes notwithstanding any copy-
right annotation therein.



2052

References
Lei Jimmy Ba, Ryan Kiros, and Geoffrey E. Hinton.

2016. Layer normalization. CoRR, abs/1607.06450.

Dzmitry Bahdanau, Philemon Brakel, Kelvin Xu,
Anirudh Goyal, Ryan Lowe, Joelle Pineau, Aaron C.
Courville, and Yoshua Bengio. 2016. An actor-
critic algorithm for sequence prediction. CoRR,
abs/1607.07086.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In Proceedings of
the 3th International Conference on Learning Rep-
resentations.

Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and
Noam Shazeer. 2015. Scheduled sampling for se-
quence prediction with recurrent neural networks.
In Advances in Neural Information Processing Sys-
tems 28, pages 1171–1179.

Yoshua Bengio, Nicholas Léonard, and Aaron C.
Courville. 2013. Estimating or propagating gradi-
ents through stochastic neurons for conditional com-
putation. CoRR, abs/1308.3432.

Jihun Choi, Kang Min Yoo, and Sang-goo Lee. 2018.
Learning to compose task-specific tree structures. In
Proceedings of the Thirty-Second AAAI Conference
on Artificial Intelligence, pages 5094–5101. AAAI
Press.

William W. Cohen and Victor R. Carvalho. 2005.
Stacked Sequential Learning. In Proceedings of the
IJCAI.

Hal Daumé, John Langford, and Daniel Marcu. 2009.
Search-based structured prediction. Machine Learn-
ing, 75(3):297–325.

Thomas Degris, Patrick M Pilarski, and Richard S Sut-
ton. 2012. Model-free reinforcement learning with
continuous action in practice. In American Control
Conference (ACC), 2012, pages 2177–2182. IEEE.

Kartik Goyal, Chris Dyer, and Taylor Berg-
Kirkpatrick. 2017. Differentiable scheduled
sampling for credit assignment. In Proceedings of
the 55th Annual Meeting of the Association for Com-
putational Linguistics (Volume 2: Short Papers),
pages 366–371. Association for Computational
Linguistics.

Peter Henderson, Riashat Islam, Philip Bachman,
Joelle Pineau, Doina Precup, and David Meger.
2018. Deep reinforcement learning that matters. In
Proceedings of the Thirty-Second AAAI Conference
on Artificial Intelligence. AAAI Press.

Felix Hieber, Tobias Domhan, Michael Denkowski,
David Vilar, Artem Sokolov, Ann Clifton, and Matt
Post. 2017. Sockeye: A toolkit for neural machine
translation. CoRR, abs/1712.05690.

Eric Jang, Shixiang Gu, and Ben Poole. 2017. Cate-
gorical reparameterization with gumbel-softmax. In
Proceedings of the 5th International Conference on
Learning Representations.

Matti Kääriäinen and John Langford. 2006. Lower
Bounds for Reductions. In Talk at the Atomic Learn-
ing Workshop.

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In Proceed-
ings of the 3th International Conference on Learn-
ing Representations.

John Langford and Bianca Zadrozny. 2005. Relating
reinforcement learning performance to classification
performance. In Proceedings of the 22nd interna-
tional conference on Machine learning, pages 473–
480. ACM.

Rémi Leblond, Jean-Baptiste Alayrac, Anton Osokin,
and Simon Lacoste-Julien. 2018. SEARNN: Train-
ing RNNs with global-local losses. In International
Conference on Learning Representations.

Minh-Thang Luong and Christopher D Manning. 2015.
Stanford neural machine translation systems for spo-
ken language domains. In Proceedings of the In-
ternational Workshop on Spoken Language Transla-
tion, pages 76–79.

Shuming Ma, Xu Sun, Yizhong Wang, and Junyang
Lin. 2018. Bag-of-words as target for neural ma-
chine translation. In Proceedings of the 56th Annual
Meeting of the Association for Computational Lin-
guistics (Volume 2: Short Papers), pages 332–338.
Association for Computational Linguistics.

Chris J. Maddison, Daniel Tarlow, and Tom Minka.
2014. A* sampling. In Advances in Neural Infor-
mation Processing Systems 27, pages 3086–3094.
Curran Associates, Inc.

Xing Niu, Weijia Xu, and Marine Carpuat. 2019. Bi-
directional differentiable input reconstruction for
low-resource neural machine translation. In Pro-
ceedings of the 2019 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies. Asso-
ciation for Computational Linguistics.

Mohammad Norouzi, Samy Bengio, Zhifeng Chen,
Navdeep Jaitly, Mike Schuster, Yonghui Wu, and
Dale Schuurmans. 2016. Reward augmented max-
imum likelihood for neural structured prediction. In
D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon,
and R. Garnett, editors, Advances in Neural Infor-
mation Processing Systems 29, pages 1723–1731.
Curran Associates, Inc.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2015. Sequence level
training with recurrent neural networks. CoRR,
abs/1511.06732.



2053

Stephane Ross, Geoffrey Gordon, and Drew Bagnell.
2011. A reduction of imitation learning and struc-
tured prediction to no-regret online learning. In Pro-
ceedings of the Fourteenth International Conference
on Artificial Intelligence and Statistics, volume 15 of
Proceedings of Machine Learning Research, pages
627–635. PMLR.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in Neural Information Process-
ing Systems 27, pages 3104–3112.

Richard S Sutton and Andrew G Barto. 2018. Rein-
forcement learning: An introduction. MIT press.

Hado Van Hasselt, Arthur Guez, and David Silver.
2016. Deep reinforcement learning with double q-
learning. In Proceedings of the Thirtieth AAAI Con-
ference on Artificial Intelligence, volume 2, page 5.
AAAI Press.

Arun Venkatraman, Martial Hebert, and J. Andrew
Bagnell. 2015. Improving multi-step prediction of
learned time series models. In Proceedings of the
Twenty-Ninth AAAI Conference on Artificial Intelli-
gence, pages 3024–3030. AAAI Press.

Ronald J. Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. Machine Learning, 8(3):229–256.

Lijun Wu, Fei Tian, Tao Qin, Jianhuang Lai, and Tie-
Yan Liu. 2018. A study of reinforcement learning
for neural machine translation. In Proceedings of
the 2018 Conference on Empirical Methods in Nat-
ural Language Processing, pages 3612–3621. Asso-
ciation for Computational Linguistics.


