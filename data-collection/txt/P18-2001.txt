



















































Continuous Learning in a Hierarchical Multiscale Neural Network


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 1–7
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

1

Continuous Learning in a Hierarchical Multiscale Neural Network

Thomas Wolf, Julien Chaumond & Clement Delangue
Hugging Face Inc.

81 Prospect St.
Brooklyn, New York 11201, USA

{thomas,julien,clement}@huggingface.co

Abstract

We reformulate the problem of encoding
a multi-scale representation of a sequence
in a language model by casting it in a
continuous learning framework. We pro-
pose a hierarchical multi-scale language
model in which short time-scale depen-
dencies are encoded in the hidden state
of a lower-level recurrent neural network
while longer time-scale dependencies are
encoded in the dynamic of the lower-level
network by having a meta-learner update
the weights of the lower-level neural net-
work in an online meta-learning fashion.
We use elastic weights consolidation as a
higher-level to prevent catastrophic forget-
ting in our continuous learning framework.

1 Introduction

Language models are a major class of natural lan-
guage processing (NLP) models whose develop-
ment has lead to major progress in many areas like
translation, speech recognition or summarization
(Schwenk, 2012; Arisoy et al., 2012; Rush et al.,
2015; Nallapati et al., 2016). Recently, the task of
language modeling has been shown to be an ad-
equate proxy for learning unsupervised represen-
tations of high-quality in tasks like text classifica-
tion (Howard and Ruder, 2018), sentiment detec-
tion (Radford et al., 2017) or word vector learning
(Peters et al., 2018).

More generally, language modeling is an exam-
ple of online/sequential prediction task, in which
a model tries to predict the next observation given
a sequence of past observations. The development
of better models for sequential prediction is be-
lieved to be beneficial for a wide range of applica-
tions like model-based planning or reinforcement
learning as these models have to encode some

form of memory or causal model of the world to
accurately predict a future event given past events.

One of the main issues limiting the performance
of language models (LMs) is the problem of cap-
turing long-term dependencies within a sequence.

Neural network based language models
(Hochreiter and Schmidhuber, 1997; Cho et al.,
2014) learn to implicitly store dependencies in
a vector of hidden activities (Mikolov et al.,
2010). They can be extended by attention mech-
anisms, memories or caches (Bahdanau et al.,
2014; Tran et al., 2016; Graves et al., 2014) to
capture long-range connections more explicitly.
Unfortunately, the very local context is often so
highly informative that LMs typically end up
using their memories mostly to store short term
context (Daniluk et al., 2016).

In this work, we study the possibility of com-
bining short-term representations, stored in neural
activations (hidden state), with medium-term rep-
resentations encoded in a set of dynamical weights
of the language model. Our work extends a series
of recent experiments on networks with dynami-
cally evolving weights (Ba et al., 2016; Ha et al.,
2016; Krause et al., 2017; Moniz and Krueger,
2018) which show improvements in sequential
prediction tasks. We build upon these works by
formulating the task as a hierarchical online meta-
learning task as detailed below.

The motivation behind this work stems from
two observations.

On the one hand, there is evidence from a phys-
iological point of view that time-coherent pro-
cesses like working memory can involve differing
mechanisms at differing time-scales. Biological
neural activations typically have a 10 ms coher-
ence timescale, while short-term synaptic plastic-
ity can temporarily modulate the dynamic of the
neural network it-self on timescales of 100 ms
to minutes. Longer time-scales (a few minutes



2

to several hours) see long-term learning kicks in
with permanent modifications to neural excitabil-
ity (Tsodyks et al., 1998; Abbott and Regehr,
2004; Barak and Tsodyks, 2007; Ba et al., 2016).
Interestingly, these psychological observations are
paralleled, on the computational side, by a se-
ries of recent works on recurrent networks with
dynamically evolving weights that show benefits
from dynamically updating the weights of a net-
work during a sequential task (Ba et al., 2016;
Ha et al., 2016; Krause et al., 2017; Moniz and
Krueger, 2018).

In parallel to that, it has also been shown that
temporal data with multiple time-scales dependen-
cies can naturally be encoded in a hierarchical rep-
resentation where higher-level features are chang-
ing slowly to store long time-scale dependencies
and lower-level features are changing faster to
encode short time-scale dependencies and local
timing (Schmidhuber, 1992; El Hihi and Bengio,
1995; Koutnk et al., 2014; Chung et al., 2016).

As a consequence, we would like our model to
encode information in a multi-scale hierarchical
representation where

1. short time-scale dependencies can be en-
coded in fast-updated neural activations (hid-
den state),

2. medium time-scale dependencies can be en-
coded in the dynamic of the network by using
dynamic weights updated more slowly, and

3. a long time-scale memory can be encoded in
a static set of parameters of the model.

In the present work, we take as dynamic weights
the full set of weights of a RNN language model
(usually word embeddings plus recurrent, input
and output weights of each recurrent layer).

2 Dynamical Language Modeling

Given a sequence of T discrete symbols S =
(w1, w2, . . . , wT ), the language modeling task
consists in assigning a probability to the sequence
P (S) = p(w1, . . . , wT ) which can be written, us-
ing the chain-rule, as

P (S | θ) =
T∏
t=1

P (wt | wt−1, . . . , w0, θ)P (w0 | θ).

(1)
where θ is a set of parameters of the language
model.

In the case of a neural-network-based lan-
guage model, the conditional probability P (wt |
wt−1, . . . , w0, θ) is typically parametrized using
an autoregressive neural network as

P (wt | wt−1, . . . , w0, θ) = fθ(wt−1, . . . , w0)
(2)

where θ are the parameters of the neural network.
In a dynamical language modeling framework,

the parameters θ of the language model are not
tied over the sequence S but are allowed to evolve.
Thus, prior to computing the probability of a fu-
ture token wt, a set of parameters θt is estimated
from the past parameters and tokens as θt =
argmax

θ
P (θ | wt−1, . . . , w0, θt−1 . . . θ0) and the

updated parameters θt are used to compute the
probability of the next token wt.

In our hierarchical neural network language
model, the updated parameters θt are estimated by
a higher level neural network g parametrized by a
set of (static) parameters φ:

θt = gφ(wt−1, . . . , w0, θt−1 . . . θ0) (3)

2.1 Online meta-learning formulation
The function computed by the higher level net-
work g, estimating θt from an history of parame-
ters θ<t and data points w<t, can be seen as an on-
line meta-learning task in which a high-level meta-
learner network is trained to update the weights of
a low-level network from the loss of the low-level
network on a previous batch of data.

Such a meta-learner can be trained
(Andrychowicz et al., 2016) to reduce the
loss of the low-level network with the idea that it
will generalize a gradient descent rule

θt = θt−1 − αt∇θt−1Lt (4)

whereαt is a learning rate at time t and∇θt−1LLMt
is the gradient of the loss LLMt of the language
model on the t-th dataset with respect to previous
parameters θt−1.

Ravi and Larochelle (2016) made the observa-
tion that such a gradient descent rule bears simi-
larities with the update rule for LSTM cell-states

ct = ft � ct−1 + it � c̃t (5)

when ct → θt, it → αt and c̃t → −∇θt−1Lt
We extend this analogy to the case of a multi-

scale hierarchical recurrent model illustrated on
figure 1 and composed of:



3

f 0 f 1 f 2 f 3 f 4h 0 h 1 h 2 h 3 h 4

g g

w 0 w 1 w 2 w 3 w 4

w 5w 1 w 2 w 3 w 4

Figure 1: A diagram of the Dynamical Language Model. The lower-level neural network f (short-term
memory) is a conventional word-level language model wherew0, . . . , w5 are words tokens. The medium-
level language model g is a feed-forward or recurrent neural network while the higher-level memory is
formed by a static set of consolidated pre-trained weights (see text).

1. Lower-level / short time-scale: a RNN-based
language model f encoding representations
in the activations of a hidden state,

2. Middle-level / medium time-scale: a meta-
learner g updating the set of weights of the
language model to store medium-term repre-
sentations, and

3. Higher-level / long time-scale: a static long-
term memory of the dynamic of the RNN-
based language model (see below).

The meta-learner g is trained to update the
lower-level network f by computing ft, it, zt =
gφ(θt−1,LLMt ,∇θt−1LLMt , θ0) and updating the
set of weights as

θt = ft � θt−1 + it �∇θt−1LLMt + zt � θ0 (6)

This hierarchical network could be seen as an ana-
log of the hierarchical recurrent neural networks
(Chung et al., 2016) where the gates ft, it and zt
can be seen as controlling a set of COPY, FLUSH
and UPDATE operations:

1. COPY (ft): part of the state copied from the
previous state θt−1,

2. UPDATE (it): part of the state updated by the
loss gradients on the previous batch, and

3. FLUSH (zt): part of the state reset from a
static long term memory θ0.

One difference with the work of (Chung et al.,
2016) is that the memory was confined to the hid-
den in the later while the memory of our hierar-
chical network is split between the weights of the
lower-level network and its hidden-state.

The meta-learner can be a feed-forward or a
RNN network. In our experiments, simple lin-
ear feed-forward networks lead to the lower per-
plexities, probably because it was easier to regu-
larize and optimize. The meta-learner implements
coordinate-sharing as described in (Andrychow-
icz et al., 2016; Ravi and Larochelle, 2016) and
takes as input the loss LLMt and loss-gradients
∇θt−1LLMt over a previous batch Bi (a sequence
of M tokens w0, . . . , wM as illustrated on fig-
ure 1). The size M of the batch adjusts the
trade-off between the noise of the loss/gradients
and updating frequency of the medium-term mem-
ory, smaller batches leading to faster updates with
higher noise.

2.2 Continual learning

The interaction between the meta-learner and the
language model implements a form of continual-
learning and the language model thus faces a
phenomenon known as catastrophic forgetting
(French, 1999). In our case, this correspond to the
lower-level network over-specializing to the lexi-
cal field of a particular topic after several updates
of the meta-learner (e.g. while processing a long
article on a specific topic).

To mitigate this effect we use a higher-level
static memory initialized using “elastic weight
consolidation” (EWC) introduced by Kirkpatrick



4

Batch index

In
st

an
t p

er
pl

ex
ity

 g
ai

n
A B C D E F G H

2 levels model
(LM+ meta-learner)
vs. 1 level model
(LM)

3 levels model
(LM + meta-learner
+ long-term)
vs. 2 levels model
(LM + meta-learner)

1

2

3
3

2

1

Figure 2: Medium and long-term memory effects on a sample of Wikitext-2 test set with a sequence of
Wikipedia articles (letters A −H). (Left) Instantaneous perplexity gain: difference in batch perplexity
between models. Higher values means the first model has locally a lower perplexity than the second
model. (Top curve) Comparing a two-levels model (LM + meta-learner) with a one-level model (LM).
(Bottom curve) Comparing a three-levels model (LM + meta-learner + long-term memory) with a two-
levels model. (Right) Token loss difference on three batch samples indicated on the left curves. A
squared (resp. underlined) word means the first model has a lower (resp. higher) loss on that word than
the second model. We emphasize only words associated with a significant difference in loss by setting a
threshold at 10 percent of the maximum absolute loss of each sample.

et al. (2017) to reduce forgetting in multi-task re-
inforcement learning.

Casting our task in the EWC framework, we
define a task A which is the language modeling
task (prediction of next token) when no context is
stored in the weights of the lower-level network.
The solution of task A is a set of weights toward
which the model could advantageously come back
when the context stored in the weights become
irrelevant (for example when switching between
paragraphs on different topics). To obtain a set of
weights for task A, we train the lower-level net-
work (RNN) alone on the training dataset and ob-
tain a set of weights that would perform well on
average, i.e. when no specific context has been
provided by a context-dependent weight update
performed by the meta-learner.

We then define a task B which is a language
modeling task when a context has been stored in
the weights of the lower-level network by an up-
date of the meta-learner. The aim of EWC is to
learn task B while retaining some performance on
task A.

Empirical results suggest that many weights
configurations result in similar performances
(Sussmann, 1992) and there is thus likely a solu-

tion for task B close to a solution for task A. The
idea behind EWC is to learn task B while protect-
ing the performance in task A by constraining the
parameters to stay around the solution found for
task A.

This constraint is implemented as a quadratic
penalty, similarly to spring anchoring the param-
eters, hence the name elastic. The stiffness of
the springs should be greater for parameters that
most affect performance in task A. We can for-
mally write this constrain by using Bayes rule to
express the conditional log probability of the pa-
rameters when the training dataset D is split be-
tween the training dataset for task A (DA) and the
training dataset for task B (DB):

log p(θ | D) = log p(DB | θ)+log p(θ | DA)−log p(DB)
(7)

The true posterior probability on task A p(θ | DA)
is intractable, so we approximate the posterior as a
Gaussian distribution with mean given by the pa-
rameters and a diagonal precision given by the di-
agonal of the Fisher information matrix F which is
equivalent to the second derivative of the loss near
a minimum and can be computed from first-order
derivatives alone.



5

3 Related work

Several works have been devoted to dynamically
updating the weights of neural networks during in-
ference. A few recent architectures are the Fast-
Weights of Ba et al. (2016), the Hypernetworks of
Ha et al. (2016) and the Nested LSTM of Moniz
and Krueger (2018). The weights update rules of
theses models use as inputs one or several of (i) a
previous hidden state of a RNN network or higher
level network and/or (ii) the current or previous
inputs to the network. However, these models do
not use the predictions of the network on the pre-
vious tokens (i.e. the loss and gradient of the loss
of the model) as in the present work. The archi-
tecture that is most related to the present work is
the study on dynamical evaluation of Krause et al.
(2017) in which a loss function similar to the loss
function of the present work is obtained empiri-
cally and optimized using a large hyper-parameter
search on the parameters of the SGD-like rule.

4 Experiments

4.1 Architecture and hyper-parameters

As mentioned in 2.2, a set of pre-trained weights
of the RNN language model is first obtained by
training the lower-level network f and computing
the diagonal of the Fisher matrix around the final
weights.

Then, the meta-learner g is trained in an online
meta-learning fashion on the validation dataset (al-
ternatively, a sub-set of the training dataset could
be used). A training sequence S is split in a se-
quence of mini-batchesBi, each batchBi contain-
ing M inputs tokens (wi×M , . . . , wi×M+M ) and
M associated targets (wi×M+1, . . . , wi×M+M+1).
In our experiments we varied M between 5 and
20.

The meta-learner is trained as described in
(Andrychowicz et al., 2016; Li and Malik, 2016)
by minimizing the sum over the sequence of LM
losses: Lmeta =

∑
i>0 LLMi . The meta-learner

is trained by truncated back-propagation through
time and is unrolled over at least 40 steps as the re-
ward from the medium-term memory is relatively
sparse (Li and Malik, 2016).

To be able to unroll the model over a suffi-
cient number of steps while using a state-of-the-
art language model with over than 30 millions pa-
rameters, we use a memory-efficient version of
back propagation through time based on gradi-

ent checkpointing as described by Grusly et al.
(2016).

4.2 Experiments

We performed a series of experiments on the
Wikitext-2 dataset (Merity et al., 2016) using an
AWD-LSTM language model (Merity et al., 2017)
and a feed-forward and RNN meta-learner.

The test perplexity are similar to perplexi-
ties obtained using dynamical evaluation (Krause
et al., 2017), reaching 46.9 with a linear feed-
forward meta-learner when starting from a one-
level language model with test perplexity of 64.8.

In our experiments, the perplexity could not
be improved by using a RNN meta-learner or a
deeper meta-learner. We hypothesis that this may
be caused by several reasons. First, storing a hid-
den state in the meta-learner might be less im-
portant in an online meta-learning setup than it
is in a standard meta-learning setup (Andrychow-
icz et al., 2016) as the target distribution of the
weights is non-stationary. Second, the size of
the hidden state cannot be increased significantly
without reducing the number of steps along which
the meta-learner is unrolled during meta-training
which may be detrimental.

Some quantitative experiments are shown on
Figure 2 using a linear feed-forward network to
illustrate the effect of the various layers in the hi-
erarchical model. The curves shows differences in
batch perplexity between model variants.

The top curve compares a one-level model (lan-
guage model) with a two-levels model (language
model + meta-learner). The meta-learner is able
to learn medium-term representations to progres-
sively reduce perplexity along articles (see e.g. ar-
ticles C and E). Right sample 1 (resp. 2) details
sentences at the begging (resp. middle) of arti-
cle E related to a warship called “Ironclad”. The
addition of the meta-learner reduces the loss on a
number of expression related to the warship like
“ironclad” or “steel armor”.

Bottom curve compares a three-levels model
(language model + meta-learner + long-term
memory) with the two-levels model. The local
loss is reduced at topics changes and beginning
of new topics (see e.g. articles B, D and F). The
right sample 3 can be contrasted with sample 1
to illustrate how the hierarchical model is able to
better recover a good parameter space following a
change in topic.



6

References
L. F. Abbott and Wade G. Regehr. 2004. Synaptic com-

putation. Nature, 431(7010):796–803.

Marcin Andrychowicz, Misha Denil, Sergio Gomez,
Matthew W. Hoffman, David Pfau, Tom Schaul,
Brendan Shillingford, and Nando de Freitas. 2016.
Learning to learn by gradient descent by gradient de-
scent. arXiv:1606.04474 [cs]. ArXiv: 1606.04474.

Ebru Arisoy, Tara N. Sainath, Brian Kingsbury, and
Bhuvana Ramabhadran. 2012. Deep neural network
language models. In Proceedings of the NAACL-
HLT 2012 Workshop: Will We Ever Really Replace
the N-gram Model? On the Future of Language
Modeling for HLT, pages 20–28. Association for
Computational Linguistics.

Jimmy Ba, Geoffrey Hinton, Volodymyr Mnih,
Joel Z. Leibo, and Catalin Ionescu. 2016. Us-
ing Fast Weights to Attend to the Recent Past.
arXiv:1610.06258 [cs, stat]. ArXiv: 1610.06258.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473.

Omri Barak and Misha Tsodyks. 2007. Persistent ac-
tivity in neural networks with dynamic synapses.
PLoS computational biology, 3(2):e35.

Kyunghyun Cho, Bart van Merrienboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014. Learning
Phrase Representations using RNN Encoder-
Decoder for Statistical Machine Translation.
arXiv:1406.1078 [cs, stat]. ArXiv: 1406.1078.

Junyoung Chung, Sungjin Ahn, and Yoshua Ben-
gio. 2016. Hierarchical Multiscale Recurrent Neu-
ral Networks. arXiv:1609.01704 [cs]. ArXiv:
1609.01704.

Micha Daniluk, Tim Rocktschel, Johannes Welbl, and
Sebastian Riedel. 2016. Frustratingly Short Atten-
tion Spans in Neural Language Modeling.

Salah El Hihi and Yoshua Bengio. 1995. Hierarchi-
cal Recurrent Neural Networks for Long-term De-
pendencies. In Proceedings of the 8th International
Conference on Neural Information Processing Sys-
tems, NIPS’95, pages 493–499, Cambridge, MA,
USA. MIT Press.

Robert M. French. 1999. Catastrophic forgetting in
connectionist networks. Trends in Cognitive Sci-
ences, 3(4):128–135.

Alex Graves, Greg Wayne, and Ivo Danihelka.
2014. Neural turing machines. arXiv preprint
arXiv:1410.5401.

Audrnas Gruslys, Remi Munos, Ivo Danihelka, Marc
Lanctot, and Alex Graves. 2016. Memory-Efficient
Backpropagation Through Time. arXiv:1606.03401
[cs]. ArXiv: 1606.03401.

David Ha, Andrew Dai, and Quoc V. Le. 2016. Hy-
perNetworks. arXiv:1609.09106 [cs]. ArXiv:
1609.09106.

Sepp Hochreiter and Jrgen Schmidhuber. 1997. Long
Short-Term Memory. Neural Comput., 9(8):1735–
1780.

Jeremy Howard and Sebastian Ruder. 2018. Fine-
tuned Language Models for Text Classification.
arXiv:1801.06146 [cs, stat]. ArXiv: 1801.06146.

James Kirkpatrick, Razvan Pascanu, Neil Rabinowitz,
Joel Veness, Guillaume Desjardins, Andrei A. Rusu,
Kieran Milan, John Quan, Tiago Ramalho, Ag-
nieszka Grabska-Barwinska, Demis Hassabis, Clau-
dia Clopath, Dharshan Kumaran, and Raia Hadsell.
2017. Overcoming catastrophic forgetting in neural
networks. Proceedings of the National Academy of
Sciences, 114(13):3521–3526.

Jan Koutnk, Klaus Greff, Faustino Gomez, and Jrgen
Schmidhuber. 2014. A Clockwork RNN. In Pro-
ceedings of the 31st International Conference on In-
ternational Conference on Machine Learning - Vol-
ume 32, ICML’14, pages II–1863–II–1871, Beijing,
China. JMLR.org.

Ben Krause, Emmanuel Kahembwe, Iain Murray, and
Steve Renals. 2017. Dynamic Evaluation of Neural
Sequence Models. arXiv:1709.07432 [cs]. ArXiv:
1709.07432.

Ke Li and Jitendra Malik. 2016. Learning to Opti-
mize. arXiv:1606.01885 [cs, math, stat]. ArXiv:
1606.01885.

Stephen Merity, Nitish Shirish Keskar, and Richard
Socher. 2017. Regularizing and Optimizing LSTM
Language Models. arXiv:1708.02182 [cs]. ArXiv:
1708.02182.

Stephen Merity, Caiming Xiong, James Bradbury,
and Richard Socher. 2016. Pointer Sentinel Mix-
ture Models. arXiv:1609.07843 [cs]. ArXiv:
1609.07843.

Tomas Mikolov, Martin Karafit, Lukas Burget, Jan Cer-
nock, and Sanjeev Khudanpur. 2010. Recurrent neu-
ral network based language model, volume 2.

Joel Ruben Antony Moniz and David Krueger. 2018.
Nested LSTMs. arXiv:1801.10308 [cs]. ArXiv:
1801.10308.

Ramesh Nallapati, Bowen Zhou, Caglar Gulcehre, and
Bing Xiang. 2016. Abstractive text summarization
using sequence-to-sequence rnns and beyond. arXiv
preprint arXiv:1602.06023.

Matthew E. Peters, Mark Neumann, Mohit Iyyer,
Matt Gardner, Christopher Clark, Kenton Lee, and
Luke Zettlemoyer. 2018. Deep contextualized word
representations. arXiv:1802.05365 [cs]. ArXiv:
1802.05365.

https://doi.org/10.1038/nature03010
https://doi.org/10.1038/nature03010
http://arxiv.org/abs/1606.04474
http://arxiv.org/abs/1606.04474
http://arxiv.org/abs/1610.06258
http://arxiv.org/abs/1610.06258
http://arxiv.org/abs/1409.0473
http://arxiv.org/abs/1409.0473
https://doi.org/10.1371/journal.pcbi.0030035
https://doi.org/10.1371/journal.pcbi.0030035
http://arxiv.org/abs/1406.1078
http://arxiv.org/abs/1406.1078
http://arxiv.org/abs/1406.1078
http://arxiv.org/abs/1609.01704
http://arxiv.org/abs/1609.01704
https://openreview.net/forum?id=ByIAPUcee
https://openreview.net/forum?id=ByIAPUcee
http://dl.acm.org/citation.cfm?id=2998828.2998898
http://dl.acm.org/citation.cfm?id=2998828.2998898
http://dl.acm.org/citation.cfm?id=2998828.2998898
https://doi.org/10.1016/S1364-6613(99)01294-2
https://doi.org/10.1016/S1364-6613(99)01294-2
http://arxiv.org/abs/1410.5401
http://arxiv.org/abs/1606.03401
http://arxiv.org/abs/1606.03401
http://arxiv.org/abs/1609.09106
http://arxiv.org/abs/1609.09106
https://doi.org/10.1162/neco.1997.9.8.1735
https://doi.org/10.1162/neco.1997.9.8.1735
http://arxiv.org/abs/1801.06146
http://arxiv.org/abs/1801.06146
https://doi.org/10.1073/pnas.1611835114
https://doi.org/10.1073/pnas.1611835114
http://dl.acm.org/citation.cfm?id=3044805.3045100
http://arxiv.org/abs/1709.07432
http://arxiv.org/abs/1709.07432
http://arxiv.org/abs/1606.01885
http://arxiv.org/abs/1606.01885
http://arxiv.org/abs/1708.02182
http://arxiv.org/abs/1708.02182
http://arxiv.org/abs/1609.07843
http://arxiv.org/abs/1609.07843
http://arxiv.org/abs/1801.10308
http://arxiv.org/abs/1802.05365
http://arxiv.org/abs/1802.05365


7

Alec Radford, Rafal Jozefowicz, and Ilya Sutskever.
2017. Learning to Generate Reviews and Discov-
ering Sentiment. arXiv:1704.01444 [cs]. ArXiv:
1704.01444.

Sachin Ravi and Hugo Larochelle. 2016. Optimization
as a Model for Few-Shot Learning.

Alexander M. Rush, Sumit Chopra, and Jason We-
ston. 2015. A neural attention model for ab-
stractive sentence summarization. arXiv preprint
arXiv:1509.00685.

J. Schmidhuber. 1992. Learning Complex, Extended
Sequences Using the Principle of History Compres-
sion. Neural Computation, 4(2):234–242.

Holger Schwenk. 2012. Continuous space translation
models for phrase-based statistical machine transla-
tion. Proceedings of COLING 2012: Posters, pages
1071–1080.

Hctor J. Sussmann. 1992. Uniqueness of the weights
for minimal feedforward nets with a given input-
output map. Neural Networks, 5(4):589–593.

Ke Tran, Arianna Bisazza, and Christof Monz. 2016.
Recurrent Memory Networks for Language Model-
ing. arXiv:1601.01272 [cs]. ArXiv: 1601.01272.

Misha Tsodyks, Klaus Pawelzik, and Henry Markram.
1998. Neural Networks with Dynamic Synapses.

http://arxiv.org/abs/1704.01444
http://arxiv.org/abs/1704.01444
https://openreview.net/forum?id=rJY0-Kcll
https://openreview.net/forum?id=rJY0-Kcll
https://doi.org/10.1162/neco.1992.4.2.234
https://doi.org/10.1162/neco.1992.4.2.234
https://doi.org/10.1162/neco.1992.4.2.234
https://doi.org/10.1016/S0893-6080(05)80037-1
https://doi.org/10.1016/S0893-6080(05)80037-1
https://doi.org/10.1016/S0893-6080(05)80037-1
http://arxiv.org/abs/1601.01272
http://arxiv.org/abs/1601.01272

