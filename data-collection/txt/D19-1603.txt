



















































Answering Conversational Questions on Structured Data without Logical Forms


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 5902–5910,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

5902

Answering Conversational Questions on Structured Data
without Logical Forms

Thomas Müller, Francesco Piccinno, Massimo Nicosia, Peter Shaw, Yasemin Altun
Google Research

{thomasmueller,piccinno,massimon,petershaw,altun}@google.com

Abstract

We present a novel approach to answering se-
quential questions based on structured objects
such as knowledge bases or tables without us-
ing a logical form as an intermediate repre-
sentation. We encode tables as graphs us-
ing a graph neural network model based on
the Transformer architecture. The answers are
then selected from the encoded graph using
a pointer network. This model is appropri-
ate for processing conversations around struc-
tured data, where the attention mechanism that
selects the answers to a question can also be
used to resolve conversational references. We
demonstrate the validity of this approach with
competitive results on the Sequential Question
Answering (SQA) task (Iyyer et al., 2017).

1 Introduction

In recent years, there has been significant
progress on conversational question answering
(QA), where questions can be meaningfully an-
swered only within the context of a conversation
(Iyyer et al., 2017; Choi et al., 2018; Saha et al.,
2018). This line of work, as in single QA setup,
falls into two main categories, (i) the answers are
extracted from some text in a reading comprehen-
sion setting, (ii) the answers are extracted from
structured objects, such as knowledge bases or ta-
bles. The latter is commonly posed as a semantic
parsing task, where the goal is to map questions to
some logical form which is then executed over the
knowledge base to extract the answers.

In semantic parsing, there is extensive work on
using deep neural networks for training models
over manually created logical forms in a super-
vised learning setup (Jia and Liang, 2016; Ling
et al., 2016; Dong and Lapata, 2018). However,
creating labeled data for this task can be expen-
sive and time-consuming. This problem resulted
in research that investigates semantic parsing with

weak supervision where training data consists of
questions and answers along with the structured
resources to recover the logical form representa-
tions that would yield the correct answer (Liang
et al., 2016; Iyyer et al., 2017).

In this paper, we follow this line of research and
investigate answering sequential questions with
respect to structured objects. In contrast to pre-
vious approaches, instead of learning the interme-
diate logical forms, we propose a novel approach
that encodes the structured resources, i.e. tables,
along with the questions and answers from the
context of the conversation. This approach allows
us to handle conversational context without the
definition of detailed operations or a vocabulary
dependent on the logical form formalism that are
required in the weakly supervised semantic pars-
ing approaches.

We present empirical performance of the pro-
posed approach on the Sequential Question An-
swering task (SQA) (Iyyer et al., 2017) which
improves the state-of-the-art performance on all
questions, particularly on the follow-up questions
that require effective encoding of the context.

2 Approach

We build a QA model for a sequence of questions
that are asked about a table and can be answered
by selecting one or more table cells.

2.1 Graph Formulation
We encode tables as graphs by representing
columns, rows and cells as nodes. Figure 1 shows
an example graph representing how we encode the
table in relation to q2, which is the follow up ques-
tion to q1. Within a column, cells with identi-
cal texts are collapsed into a single node. In the
example graph, we only create a single node for
“Toronto” and a single node for “Montreal”. We
then add 4 directed edges that connect columns



5903

City Floors

Tour de la Bourse

Place Ville-Marie

Toronto

Montreal

72

57

47

44

what are the buildings in toronto?

Row 0

Row 1

First Canadian Place

Commerce Court West which building has more than 60 floors?

Building

Number: 60

>

>

>

<

Row 2

Row 3

q1

q2

1

2

3

4

-4

-3

-2

-1

Figure 1: Example of a table encoded as a graph in relation to q2, the follow up question to q1. Columns (orange
boxes), rows (green boxes) and cells (gray boxes) are represented by interconnected nodes. Questions words are
linked to the table by edit distance (blue lines). Numerical values in question and table are connected by comparison
relations (yellow lines). Additionally numerical cells are annotated with their numerical rank and inverse rank with
respect to the column (small blue boxes). The answer column, rows and cells of q1 are also marked (nodes with
borders).

and rows to cells, one in either direction (orange
and green edges in the figure).

The question is represented by a node covering
the entire question text and a node for each token.
The main question node is connected to each to-
ken, column and cell node. 1

Nodes have associated nominal feature sets. All
nodes have a feature indicating their type: column,
row, cell, question and question token. The text
in column (i.e., the column name), cell, question
and token nodes are added to the corresponding
node feature set adopting a bag-of-words repre-
sentation. Column, row and cell nodes have ad-
ditional features that indicate their column (for
cell and column nodes) and row (for cell and row
nodes) indexes.

We align question tokens with column names
and cell text using the Levenshtein edit distance
between n-grams in the question and the table text,
similar to previous work (Shaw et al., 2019). In
particular, we score every question n-gram with
the normalized edit distance 2 and connect the cell
to the token span if the score is > 0.5. Through
the alignment, the cell is connected to all the to-
kens of the matching span and the binned score is
added as an additional feature to the cell. In Fig-
ure 1, the “building” and “floors” tokens in the
questions are connected to the matching “Build-
ing” and “Floors” column nodes from the table.

1We do not show some of these connections in the figure
to avoid clutter.

2ned(v, w) = ed(v,w)
max(|v|,|w|)

Numeric Operations In order to allow opera-
tions over numbers and date expressions, we ex-
tend our graph with a set of relations involving
numerical values in the question and table cells.
We infer the type of the numerical values in a col-
umn, such as the ones in the “Floors” column, by
picking their most frequent type (number or date).
Then, we add special features to each cell in the
column: the rank and inverse rank of the value
in the cell, considering the other cell values from
the same column. These features allow the model
to answer questions such as “what is the building
with most floors?”. In addition, we add a new node
to the graph for each numeric expression from the
question (such as the number 60 from the second
question in Figure 1), and we connect it to the
tokens it spans. The numerical nodes originated
from the question are connected to the table cells
containing numerical values. The connection type
encodes the result of the comparison between the
question and cell values, lesser, greater or equal,
as shown in the figure (yellow edges). This rela-
tions allow the model to answer questions such as
“which buildings have more than 50 floors?”.

Context We extend the model to capture con-
versational context by using the feature-based en-
coding in the graph formulation. In order to han-
dle follow-up questions, we add the previous an-
swers to the graph by marking all the answer rows,
columns and cells with nominal features. The
nodes with borders in Figure 1 contain the answers
to the first question q1: “what are the buildings



5904

in toronto?”. In the example, the first two rows
receive a feature ANSWER ROW, the “build-
ing” column a feature ANSWER COLUMN and
“First Canadian Place” and “Commerce Court
West” a feature ANSWER CELL. Notice that the
content of q1 is not encoded in the graph, only its
answers.

2.2 Node Representations

Before the initial encoder layer, all nodes are
mapped to vector representations using learned
embeddings. For nodes with multiple features,
such as column and cell nodes, we reduce the set
of feature embeddings to a single vector using the
mean. We also concatenate an embedding encod-
ing whether the node represents a question token,
or not.

2.3 Encoder

We use a Graph Neural Network (GNN) encoder
based on the Transformer (Vaswani et al., 2017).
The only modification is that the self-attention
mechanism is extended to consider the edge label
between each pair of nodes.

We follow the formulation of Shaw et al. (2019)
that uses additive edge vector representations. The
self-attention weights are therefore calculated as:

sij = (W
qxi)

ᵀ(Wkxj + rij), (1)

where sij is the unnormalized attention weight for
the node vector representations xi and xj , and Wq

and Wk are parameter matrices. This extension
introduces rij to the calculation, which is a vec-
tor representation of the edge label between the
two nodes. Edge vectors are similarly added when
summing over node representations to produce the
new output representations.

We use edge labels corresponding to relative
positions between tokens, alignments between to-
kens and table elements, and relations between ta-
ble elements, as described in Section 2.1. These
amount to 9 fixed edge labels in the graph (4 be-
tween rows/cells/columns, 2 between question and
cells/columns, and 3 numeric relations) and a tun-
able number of relative token positions).

2.4 Answer Selection

We extend the Transformer decoder to include
a copy mechanism based on a pointer net-
work (Vinyals et al., 2015). The copy mechanism
allows the model to predict sequences of answer

Copy Mechanism

Current
Query

Answer Values

Previous 
Context

Table Headers, 
Rows, and Cells

Graph Neural Network

Embed

Figure 2: The model input is a graph, with nodes corre-
sponding to query words and table elements, and edge
labels capturing their relations. A graph neural network
encoder generates contextualized node representations.
Answers values are selected from nodes corresponding
to table elements.

columns and rows from the input, rather than se-
lect symbols from an output vocabulary. Figure 2
visualizes the entire model architecture.

3 Related Work

Semantic parsing models can be trained to produce
gold logical forms using an encoder-decoder ap-
proach (Suhr et al., 2018) or by filling templates
(Xu et al., 2017; Peng et al., 2017; Yu et al., 2018).
When gold logical forms are not available, they are
typically treated as latent variables or hidden states
and the answers or denotations are used to search
for correct logical forms (Yih et al., 2015; Long
et al., 2016; Iyyer et al., 2017). In some cases,
feedback from query execution is used as a reward
signal for updating the model through reinforce-
ment learning (Zhong et al., 2017; Liang et al.,
2016, 2018; Agarwal et al., 2019) or for refining
parts of the query (Wang et al., 2018). In our work,
we do not use logical forms or RL, which can be
hard to train, but simplify the training process by
directly matching questions to table cells.

Most of the QA and semantic parsing research
focuses on single turn questions. We are inter-
ested in handling multiple turns and therefore in
modeling context. In semantic parsing tasks, log-
ical forms (Iyyer et al., 2017; Sun et al., 2018b;
Guo et al., 2018) or SQL statements (Suhr et al.,
2018) from previous questions are refined to han-
dle follow up questions. In our model, we encode
answers to previous questions by marking answer
rows, columns and cells in the table, in a non-
autoregressive fashion.

In regards to how structured data is represented,
methods range from encoding table information,



5905

metadata and/or content, (Gur et al., 2018; Sun
et al., 2018b; Petrovski et al., 2018) to encoding
relations between the question and table items (Kr-
ishnamurthy et al., 2017) or KB entities (Sun et al.,
2018a). We also encode the table structure and the
question in an annotation graph, but use a different
modelling approach.

4 Experimental Setup

We evaluate our method on the SequentialQA
(SQA) dataset (Iyyer et al., 2017), which consists
of sequences of questions that can be answered
from a given table. The dataset is designed so that
every question can be answered by one or more
table cells. It consists of 6, 066 answer sequences
containing 17553 questions (2.9 question per se-
quence on average). Table 2 shows an example.

We lowercase and remove punctuation from
questions, cell texts and column names. We then
split each input utterance on spaces to generate a
sequence of tokens.3 We only keep the most fre-
quent 5, 000 word types and map everything else
to one of 2, 000 OOV buckets. Numbers and dates
are parsed in a similar way as in the DynSp and the
Neural Programmer (Neelakantan et al., 2016a).

We use the Adam optimizer (Kingma and Ba,
2014) for optimization and tune hyperparame-
ters with Google Vizier (Golovin et al., 2017).
More details and the hyperparameter ranges can
be found in the appendix (A).

All numbers given for our model are averaged
over 5 independent runs with different random ini-
tializations.

5 Results

We compare our model to Float Parser (FP) (Pa-
supat and Liang, 2015), Neural Programmer (NP)
(Neelakantan et al., 2016b), DYNSP (Iyyer et al.,
2017) and CAMP (Sun et al., 2018b) in Table 1.

We observe that our model improves the SOTA
from 45.6% by CAMP to 55.1% in question ac-
curacy (ALL), reducing the relative error rate by
18%. For the initial question (POS1), however,
it is behind DYNSP by 3.7%. More interestingly,
our model handles follow up questions especially
well outperforming the previously best model FP
by 20% on POS3, a 28% relative error reduction.

3Whitespace tokenization simplifies the preprocessing but
we can expect an off-the-shelf tokenizer to work as good or
even better.

Model ALL SEQ POS1 POS2 POS3

FP ∗ 34.1 7.2 52.6 25.6 25.9
NP ∗ 39.4 10.8 58.9 35.9 24.6
DYNSP 42.0 10.2 70.9 35.8 20.1

FP † ∗ 33.2 7.7 51.4 22.2 22.3
NP † ∗ 40.2 11.8 60.0 35.9 25.5
DYNSP † 44.7 12.8 70.4 41.1 23.6
CAMP † ∗ 45.6 13.2 70.3 42.6 24.8

OURS ∗ 45.1 13.3 67.2 42.4 26.4
OURS † ∗ 55.1 28.1 67.2 52.7 46.8

OURS † ∗ (RA) 61.7 28.1 67.2 60.1 57.7

Table 1: SQA test results. † marks contextual models
using the previous question or the answer to the pre-
vious question. ∗ marks the models that use the table
content. RA denotes an oracle model that has access
to the previous reference answer at test time. ALL is
the average question accuracy, SEQ the sequence accu-
racy, and POS X, the accuracy of the X’th question in
a sequence.

As in previous work, we also report perfor-
mance for a non-contextual setup where follow
up questions are answered in isolation. We ob-
serve that our model effectively leverages the con-
text information by improving the average ques-
tion accuracy from 45.1% to 55.1% in comparison
to the use of context in DYNSP yielding 2.7% im-
provement. If we provide the previous reference
answers, the average question accuracy jumps to
61.7%, showing that 6.6% of the errors are due to
error propagation.

Numeric operations For understanding how ef-
fective our model is in handling numeric opera-
tions, we trained models without the specific han-
dling explained in Section 2. We find that that the
overall accuracy decreases from 55.1% to 51.5%,
demonstrating the competence of our approach to
model such operations. This effectiveness is fur-
ther emphasized when focusing on questions that
contain a superlative (e.g., “tallest”, “most ex-
pensive”) with a performance difference of 47.3%
with numeric relations and 40.3% without. It is
worthwhile to call out that the model without spe-
cial number handling still out-performs the previ-
ous SOTA CAMP by more than 5 points (45.6% vs
55.1%).

Table size. We observe that our model is not
sensitive to table size changes, with an average
accuracy of 52.4% for the 10% largest tables (vs.



5906

What are all the nations?
Australia, Italy, Germany, Soviet Union,
Switzerland, United States, Great Britain, France

Which won gold medals?
Australia, Italy, Germany, Soviet Union

Which won more than one?
Australia

Rank Nation Gold Silver Bronze Total

1 Australia 2 1 0 3
2 Italy 1 1 1 3
3 Germany 1 0 1 2
4 Soviet Union 1 0 0 1
5 Switzerland 0 2 1 3
6 United States 0 1 0 1
7 Great Britain 0 0 1 1
7 France 0 0 1 1

Table 2: A sequence of questions (left) and the corresponding table (right) selected from the SQA dataset that
is answered correctly by our approach. This example requires handling conversational context and numerical
comparisons.

55.1% overall).4

Error analysis. Table 2 shows an example that
is consistently handled correctly by the model.
It requires a simple string match (“nations”→
“nation”), and implicit and explicit comparisons.

We performed error analysis on test data over
100 initial (POS1) and 100 follow up questions
(POS> 1) to identify the limitations of our ap-
proach.

For the initial questions, we find that 26% are
match errors, e.g., the model does not match
“episode” to “Eps #”, or cases where the model
has to exclude rows with empty values from the
results. 29% of the errors require a more sophisti-
cated table understanding, e.g., rows that represent
the total of all other rows should often not be in-
cluded in the answers. For 15% of the errors, we
think that the reference answer is incorrect and for
another 15% the model prediction is correct but
contains duplicates because multiple rows contain
the same value. 12% of the errors are around com-
plex matches such as selecting certain ranks (“the
first two”), exclusion or negation.

For the follow up questions, 38% are caused
by complex matches; 17% are match errors; 13%
of the errors are due to incorrect reference an-
swers and 11% would require advanced table un-
derstanding. Only 8% of the errors are due to in-
correct management of the conversational context.
Section B of the appendix contains a more detailed
analysis and error examples.

6 Discussion

We present a model for table-centered conversa-
tional QA that predicts the answers directly from

4Fig. 3 of the appendix shows a scatter plot of table size
vs. accuracy.

the table. We show that this model improves
SOTA on SQA dataset and particularly handles
conversational context effectively.

As future work, we plan to expand our model
with pre-trained language representations (e.g.,
BERT (Devlin et al., 2018)) in order to improve
performance on initial queries and matching of
queries to table entries. To handle larger tables, we
will investigate sharding the table row-wise, run-
ning the model on all the shards first, and then on
the final table which combines all the answer rows.

References

Rishabh Agarwal, Chen Liang, Dale Schuurmans, and
Mohammad Norouzi. 2019. Learning to general-
ize from sparse and underspecified rewards. arXiv
preprint arXiv:1902.07198.

Eunsol Choi, He He, Mohit Iyyer, Mark Yatskar, Wen-
tau Yih, Yejin Choi, Percy Liang, and Luke Zettle-
moyer. 2018. QuAC: Question answering in con-
text. In Proceedings of the 2018 Conference on Em-
pirical Methods in Natural Language Processing,
pages 2174–2184, Brussels, Belgium. Association
for Computational Linguistics.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805.

Li Dong and Mirella Lapata. 2018. Coarse-to-fine de-
coding for neural semantic parsing. In Proceed-
ings of the 56th Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Pa-
pers), pages 731–742, Melbourne, Australia. Asso-
ciation for Computational Linguistics.

Daniel Golovin, Benjamin Solnik, Subhodeep Moitra,
Greg Kochanski, John Elliot Karro, and D. Sculley,
editors. 2017. Google Vizier: A Service for Black-
Box Optimization.

https://www.aclweb.org/anthology/D18-1241
https://www.aclweb.org/anthology/D18-1241
https://www.aclweb.org/anthology/P18-1068
https://www.aclweb.org/anthology/P18-1068
http://www.kdd.org/kdd2017/papers/view/google-vizier-a-service-for-black-box-optimization
http://www.kdd.org/kdd2017/papers/view/google-vizier-a-service-for-black-box-optimization


5907

Daya Guo, Duyu Tang, Nan Duan, Ming Zhou, and
Jian Yin. 2018. Dialog-to-action: Conversational
question answering over a large-scale knowledge
base. In Proceedings of the 32Nd International
Conference on Neural Information Processing Sys-
tems, NIPS’18, pages 2946–2955, USA. Curran As-
sociates Inc.

Izzeddin Gur, Semih Yavuz, Yu Su, and Xifeng Yan.
2018. DialSQL: Dialogue based structured query
generation. In Proceedings of the 56th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 1339–1349, Mel-
bourne, Australia. Association for Computational
Linguistics.

Mohit Iyyer, Wen-tau Yih, and Ming-Wei Chang. 2017.
Search-based neural structured learning for sequen-
tial question answering. In Proceedings of the
55th Annual Meeting of the Association for Com-
putational Linguistics (Volume 1: Long Papers),
pages 1821–1831, Vancouver, Canada. Association
for Computational Linguistics.

Robin Jia and Percy Liang. 2016. Data recombination
for neural semantic parsing. In Proceedings of the
54th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), pages
12–22, Berlin, Germany. Association for Computa-
tional Linguistics.

Diederik P Kingma and Jimmy Ba. 2014. Adam:
A method for stochastic optimization. CoRR,
abs/1412.6980.

Jayant Krishnamurthy, Pradeep Dasigi, and Matt Gard-
ner. 2017. Neural semantic parsing with type con-
straints for semi-structured tables. In Proceedings
of the 2017 Conference on Empirical Methods in
Natural Language Processing, pages 1516–1526,
Copenhagen, Denmark. Association for Computa-
tional Linguistics.

Chen Liang, Jonathan Berant, Quoc V. Le, Kenneth D.
Forbus, and Ni Lao. 2016. Neural symbolic ma-
chines: Learning semantic parsers on freebase with
weak supervision. CoRR, abs/1611.00020.

Chen Liang, Mohammad Norouzi, Jonathan Berant,
Quoc V Le, and Ni Lao. 2018. Memory aug-
mented policy optimization for program synthesis
and semantic parsing. In S. Bengio, H. Wallach,
H. Larochelle, K. Grauman, N. Cesa-Bianchi, and
R. Garnett, editors, Advances in Neural Information
Processing Systems 31, pages 10015–10027. Curran
Associates, Inc.

Wang Ling, Phil Blunsom, Edward Grefenstette,
Karl Moritz Hermann, Tomáš Kočiský, Fumin
Wang, and Andrew Senior. 2016. Latent predictor
networks for code generation. In Proceedings of the
54th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), pages
599–609, Berlin, Germany. Association for Compu-
tational Linguistics.

Reginald Long, Panupong Pasupat, and Percy Liang.
2016. Simpler context-dependent logical forms via
model projections. In Proceedings of the 54th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1456–
1465, Berlin, Germany. Association for Computa-
tional Linguistics.

Arvind Neelakantan, Quoc V. Le, Martı́n Abadi, An-
drew McCallum, and Dario Amodei. 2016a. Learn-
ing a natural language interface with neural pro-
grammer. CoRR, abs/1611.08945.

Arvind Neelakantan, Quoc V. Le, Martı́n Abadi, An-
drew McCallum, and Dario Amodei. 2016b. Learn-
ing a natural language interface with neural pro-
grammer. CoRR, abs/1611.08945.

Panupong Pasupat and Percy Liang. 2015. Compo-
sitional semantic parsing on semi-structured tables.
In Proceedings of the 53rd Annual Meeting of the
Association for Computational Linguistics and the
7th International Joint Conference on Natural Lan-
guage Processing (Volume 1: Long Papers), pages
1470–1480, Beijing, China. Association for Com-
putational Linguistics.

Haoruo Peng, Ming-Wei Chang, and Wen-tau Yih.
2017. Maximum margin reward networks for learn-
ing from explicit and implicit supervision. In Pro-
ceedings of the 2017 Conference on Empirical Meth-
ods in Natural Language Processing, pages 2368–
2378, Copenhagen, Denmark. Association for Com-
putational Linguistics.

Bojan Petrovski, Ignacio Aguado, Andreea Hossmann,
Michael Baeriswyl, and Claudiu Musat. 2018. Em-
bedding individual table columns for resilient SQL
chatbots. In Proceedings of the 2018 EMNLP Work-
shop SCAI: The 2nd International Workshop on
Search-Oriented Conversational AI, pages 67–73,
Brussels, Belgium. Association for Computational
Linguistics.

Amrita Saha, Vardaan Pahuja, Mitesh M. Khapra,
Karthik Sankaranarayanan, and Sarath Chandar.
2018. Complex sequential question answering: To-
wards learning to converse over linked question an-
swer pairs with a knowledge graph. In Proceed-
ings of the Thirty-Second AAAI Conference on Ar-
tificial Intelligence, (AAAI-18), the 30th innovative
Applications of Artificial Intelligence (IAAI-18), and
the 8th AAAI Symposium on Educational Advances
in Artificial Intelligence (EAAI-18), New Orleans,
Louisiana, USA, February 2-7, 2018, pages 705–
713.

Peter Shaw, Philip Massey, Angelica Chen, Francesco
Piccinno, and Yasemin Altun. 2019. Generating log-
ical forms from graph representations of text and
entities. In Proceedings of the 57th Annual Meet-
ing of the Association for Computational Linguis-
tics, pages 95–106, Florence, Italy. Association for
Computational Linguistics.

http://dl.acm.org/citation.cfm?id=3327144.3327217
http://dl.acm.org/citation.cfm?id=3327144.3327217
http://dl.acm.org/citation.cfm?id=3327144.3327217
https://www.aclweb.org/anthology/P18-1124
https://www.aclweb.org/anthology/P18-1124
https://doi.org/10.18653/v1/P17-1167
https://doi.org/10.18653/v1/P17-1167
https://doi.org/10.18653/v1/P16-1002
https://doi.org/10.18653/v1/P16-1002
http://arxiv.org/abs/1412.6980
http://arxiv.org/abs/1412.6980
https://doi.org/10.18653/v1/D17-1160
https://doi.org/10.18653/v1/D17-1160
http://arxiv.org/abs/1611.00020
http://arxiv.org/abs/1611.00020
http://arxiv.org/abs/1611.00020
http://papers.nips.cc/paper/8204-memory-augmented-policy-optimization-for-program-synthesis-and-semantic-parsing.pdf
http://papers.nips.cc/paper/8204-memory-augmented-policy-optimization-for-program-synthesis-and-semantic-parsing.pdf
http://papers.nips.cc/paper/8204-memory-augmented-policy-optimization-for-program-synthesis-and-semantic-parsing.pdf
https://doi.org/10.18653/v1/P16-1057
https://doi.org/10.18653/v1/P16-1057
https://doi.org/10.18653/v1/P16-1138
https://doi.org/10.18653/v1/P16-1138
http://arxiv.org/abs/1611.08945
http://arxiv.org/abs/1611.08945
http://arxiv.org/abs/1611.08945
http://arxiv.org/abs/1611.08945
http://arxiv.org/abs/1611.08945
http://arxiv.org/abs/1611.08945
https://doi.org/10.3115/v1/P15-1142
https://doi.org/10.3115/v1/P15-1142
https://doi.org/10.18653/v1/D17-1252
https://doi.org/10.18653/v1/D17-1252
https://www.aclweb.org/anthology/W18-5710
https://www.aclweb.org/anthology/W18-5710
https://www.aclweb.org/anthology/W18-5710
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/17181
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/17181
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/17181
https://www.aclweb.org/anthology/P19-1010
https://www.aclweb.org/anthology/P19-1010
https://www.aclweb.org/anthology/P19-1010


5908

Alane Suhr, Srinivasan Iyer, and Yoav Artzi. 2018.
Learning to map context-dependent sentences to ex-
ecutable formal queries. In Proceedings of the 2018
Conference of the North American Chapter of the
Association for Computational Linguistics: Human
Language Technologies, Volume 1 (Long Papers),
pages 2238–2249, New Orleans, Louisiana. Asso-
ciation for Computational Linguistics.

Haitian Sun, Bhuwan Dhingra, Manzil Zaheer, Kathryn
Mazaitis, Ruslan Salakhutdinov, and William Co-
hen. 2018a. Open domain question answering using
early fusion of knowledge bases and text. In Pro-
ceedings of the 2018 Conference on Empirical Meth-
ods in Natural Language Processing, pages 4231–
4242, Brussels, Belgium. Association for Computa-
tional Linguistics.

Yibo Sun, Duyu Tang, Nan Duan, Jingjing Xu, Xi-
aocheng Feng, and Bing Qin. 2018b. Knowledge-
aware conversational semantic parsing over web ta-
bles. CoRR, abs/1809.04271.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Ł ukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In I. Guyon, U. V. Luxburg, S. Bengio,
H. Wallach, R. Fergus, S. Vishwanathan, and R. Gar-
nett, editors, Advances in Neural Information Pro-
cessing Systems 30, pages 5998–6008. Curran As-
sociates, Inc.

Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly.
2015. Pointer networks. In C. Cortes, N. D.
Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett,
editors, Advances in Neural Information Processing
Systems 28, pages 2692–2700. Curran Associates,
Inc.

Chenglong Wang, Po-Sen Huang, Alex Polozov,
Marc Brockschmidt, and Rishabh Singh . 2018.
Execution-guided neural program decoding. In
ICML Neural Abstract Machines and Program In-
duction workshop, 2018.

Xiaojun Xu, Chang Liu, and Dawn Song. 2017. Sqlnet:
Generating structured queries from natural language
without reinforcement learning. arXiv preprint
arXiv:1711.04436.

Wen-tau Yih, Ming-Wei Chang, Xiaodong He, and
Jianfeng Gao. 2015. Semantic parsing via staged
query graph generation: Question answering with
knowledge base. In Proceedings of the 53rd Annual
Meeting of the Association for Computational Lin-
guistics and the 7th International Joint Conference
on Natural Language Processing (Volume 1: Long
Papers), pages 1321–1331, Beijing, China. Associ-
ation for Computational Linguistics.

Tao Yu, Zifan Li, Zilin Zhang, Rui Zhang, and
Dragomir Radev. 2018. TypeSQL: Knowledge-
based type-aware neural text-to-SQL generation. In
Proceedings of the 2018 Conference of the North

American Chapter of the Association for Compu-
tational Linguistics: Human Language Technolo-
gies, Volume 2 (Short Papers), pages 588–594, New
Orleans, Louisiana. Association for Computational
Linguistics.

Victor Zhong, Caiming Xiong, and Richard Socher.
2017. Seq2sql: Generating structured queries
from natural language using reinforcement learning.
CoRR, abs/1709.00103.

A Hyperparameters

We tune hyperparameters with Google
Vizier (Golovin et al., 2017). For the en-
coder and decoder, we select the number of layers
from [3, 6] and embedding and hidden dimensions
from {128, 256, 512}, setting the feed forward
layer hidden dimensions 4× higher. We employ
dropout at training time with Pdropout selected
from {0.2, 0.4, 0.5}. We select the attention heads
from {4, 8, 16} and use a clipping distance of 6
for relative position representations.

We use the Adam optimizer (Kingma and Ba,
2014) with β1 = 0.9, β2 = 0.98, and � = 10−9.
We tune the learning rate and use the same warm-
up and decay strategy for learning rate as Vaswani
et al. (2017), selecting a number of warm-up steps
up to a maximum of 2000. We run the train-
ing until convergence for a fixed number of steps
(100, 000) and use the final checkpoint for evalua-
tion. We choose batch sizes from {32, 64}.

B Results

Table Size Given that our model makes use of
the whole table, it is conceivable that the perfor-
mance of our approach can be more sensitive to
the table size than methods that predict interme-
diate representations. Plotting the model perfor-
mance with respect to number of cells in the table
(Figure 3), we observe that the performance does
not vary significantly by the table size.

Error Analysis For a detailed analysis, we an-
notated 100 initial and follow-up questions with
the following match types:

MATCH A lexical or semantic match error such
as not matching “episode” with “EPS #”.

TABLE UNDERSTANDING A question that
would require a higher level table understanding
to be answered correctly. For example, we often
have to decide that a row is just the total of all
other rows and should not be selected.

https://doi.org/10.18653/v1/N18-1203
https://doi.org/10.18653/v1/N18-1203
https://www.aclweb.org/anthology/D18-1455
https://www.aclweb.org/anthology/D18-1455
http://arxiv.org/abs/1809.04271
http://arxiv.org/abs/1809.04271
http://arxiv.org/abs/1809.04271
http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
http://papers.nips.cc/paper/5866-pointer-networks.pdf
https://www.microsoft.com/en-us/research/publication/execution-guided-neural-program-decoding/
https://doi.org/10.3115/v1/P15-1128
https://doi.org/10.3115/v1/P15-1128
https://doi.org/10.3115/v1/P15-1128
https://doi.org/10.18653/v1/N18-2093
https://doi.org/10.18653/v1/N18-2093


5909

0 20 40 60 80 100 120 140 160 180

Table Size

0.0

0.2

0.4

0.6

0.8

1.0

A
cc

u
ra

cy

Figure 3: Scatter-plot of accuracy and table size. Each
point represents the accuracy on all the questions asked
about a test set table of the corresponding size.

Error type Counts

TABLE UNDERSTANDING 29
COMPLEX MATCH 12
MATCH 26
GOLD 15
ANSWER SET 15
OTHER 3

(a)

Error type Counts

TABLE UNDERSTANDING 11
COMPLEX MATCH 38
MATCH 17
GOLD 13
ANSWER SET 4
OTHER 9
CONTEXT 8

(b)

Table 3: Errors on 100 random initial (a) and follow-up
(b) questions

COMPLEX MATCH A question that would
require a numerical value match, some sort of sort-
ing or a negation to be answered. “what is the area
of all of the non-remainders?”

GOLD A question with a wrong reference an-
swers. “what gene functions are listed?” – Gold
points to Category column rather than Gene Func-
tions.

ANSWER SET The returned answer should be
duplicate free. “what are all of the rider’s
names?”, but the table contains “Carl Fogarty”

multiple times.

CONTEXT Only used in follow-up questions.
This error indicates that a more sophisticated con-
text management is needed.

OTHER Any other kind of error.

Table 3 contains the error counts for initial ques-
tions and follow-ups, respectively. Table 4 con-
tains interesting examples.



5910

Question Notes

COMPLEX MATCH

who scored more than earnie stewart? 2-hop reasoning. Requires comparison on top
of the result of the inner question.

and which has been active for the longest? Reasoning with text and date (1986-present)

who else is in that field? Exclusion.

of these, which did not publish on february 9? Negation. The model is doing the right thing
but missing one of the values.

what is the highest passengers for a route? The model selects the 2nd highest and not the
1st.

TABLE UNDERSTANDING

now, during which year did they have the
worst placement?

Requires understanding that “Withdrawal ..”
is worse than any position.

which of these seasons have four judges? Requires counting the number of named enti-
ties within a single cell.

GOLD

what gene functions are listed? Gold points to “Category” column rather than
“Gene Functions”

which aircraft have 1 year of service Gold points to the 4th column (“in service”)
instead of the 1st column (“aircraft”)

CONTEXT

when was thaddeus bell born?, when was
klaus jurgen schneider born?, which is older?

The correct birthday is selected, but not the
person.

Table 4: Some interesting error cases with comments.


