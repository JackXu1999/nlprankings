



















































Deep Residual Learning for Weakly-Supervised Relation Extraction


Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 1803–1807
Copenhagen, Denmark, September 7–11, 2017. c©2017 Association for Computational Linguistics

Deep Residual Learning for Weakly-Supervised Relation Extraction

Yi Yao Huang
Department of Electrical Engineering

National Taiwan University
Taipei, Taiwan

b02901042@ntu.edu.tw

William Yang Wang
Department of Computer Science

University of California, Santa Barbara
Santa Barbara, CA 93106 USA
william@cs.ucsb.edu

Abstract

Deep residual learning (ResNet) (He et al.,
2016) is a new method for training very
deep neural networks using identity map-
ping for shortcut connections. ResNet has
won the ImageNet ILSVRC 2015 clas-
sification task, and achieved state-of-the-
art performances in many computer vi-
sion tasks. However, the effect of resid-
ual learning on noisy natural language pro-
cessing tasks is still not well understood.
In this paper, we design a novel convolu-
tional neural network (CNN) with resid-
ual learning, and investigate its impacts on
the task of distantly supervised noisy rela-
tion extraction. In contradictory to popu-
lar beliefs that ResNet only works well for
very deep networks, we found that even
with 9 layers of CNNs, using identity map-
ping could significantly improve the per-
formance for distantly-supervised relation
extraction.

1 Introduction

Relation extraction is the task of predicting at-
tributes and relations for entities in a sentence (Ze-
lenko et al., 2003; Bunescu and Mooney, 2005;
GuoDong et al., 2005). For example, given a
sentence “Barack Obama was born in Honolulu,
Hawaii.”, a relation classifier aims at predicting
the relation of “bornInCity”. Relation extraction
is the key component for building relation knowl-
edge graphs, and it is of crucial significance to
natural language processing applications such as
structured search, sentiment analysis, question an-
swering, and summarization.

A major issue for relation extraction is the lack
of labeled training data. In recent years, distant
supervision (Mintz et al., 2009; Hoffmann et al.,

2011; Surdeanu et al., 2012) emerges as the most
popular method for relation extraction— it uses
knowledge base facts to select a set of noisy in-
stances from unlabeled data. Among all the ma-
chine learning approaches for distant supervision,
the recently proposed Convolutional Neural Net-
works (CNNs) model (Zeng et al., 2014) achieved
the state-of-the-art performance. Following their
success, Zeng et al. (2015) proposed a piece-wise
max-pooling strategy to improve the CNNs. Var-
ious attention strategies (Lin et al., 2016; Shen
and Huang, 2016) for CNNs are also proposed,
obtaining impressive results. However, most of
these neural relation extraction models are rela-
tively shallow CNNs—typically only one convo-
lutional layer and one fully connected layer were
involved, and it was not clear whether deeper mod-
els could have benefits on distilling signals from
noisy inputs in this task.

In this paper, we investigate the effects of train-
ing deeper CNNs for distantly-supervised relation
extraction. More specifically, we designed a con-
volutional neural network based on residual learn-
ing (He et al., 2016)—we show how one can in-
corporate word embeddings and position embed-
dings into a deep residual network, while feed-
ing identity feedback to convolutional layers for
this noisy relation prediction task. Empirically,
we evaluate on the NYT-Freebase dataset (Riedel
et al., 2010), and demonstrate the state-of-the-art
performance using deep CNNs with identify map-
ping and shortcuts. In contrast to popular beliefs
in vision that deep residual network only works for
very deep CNNs, we show that even with a mod-
erately deep CNNs, there are substantial improve-
ments over vanilla CNNs for relation extraction.
Our contributions are three-fold:

• We are the first to consider deeper convolu-
tional neural networks for weakly-supervised

1803



relation extraction using residual learning;

• We show that our deep residual network
model outperforms CNNs by a large margin
empirically, obtaining state-of-the-art perfor-
mances;

• Our identity mapping with shortcut feedback
approach can be easily applicable to any vari-
ants of CNNs for relation extraction.

2 Deep Residual Networks for Relation
Extraction

In this section, we describe a novel deep residual
learning architecture for distantly supervised rela-
tion extraction. Figure 1 describes the architecture
of our model.

2.1 Vector Representation
Let xi be the i-th word in the sentence and e1, e2 be
the two corresponding entities. Each word will ac-
cess two embedding look-up tables to get the word
embedding WFi and the position embedding PFi.
Then, we concatenate the two embeddings and de-
note each word as a vector of vi = [WFi, PFi].

2.1.1 Word Embeddings
Each representation vi corresponding to xi is a
real-valued vector. All of the vectors are encoded
in an embeddings matrix Vw ∈ Rdw×|V | where V
is a fixed-sized vocabulary.

2.1.2 Position Embeddings
In relation classification, we focus on finding a
relation for entity pairs. Following (Zeng et al.,
2014), a PF is the combination of the relative dis-
tances of the current word to the first entity e1 and
the second entity e2. For instance, in the sentence
”Steve Jobs is the founder of Apple.”, the relative
distances from founder to e1 (Steve Job) and e2 are
3 and -2, respectively. We then transform the rel-
ative distances into real valued vectors by looking
up one randomly initialized position embedding
matrices Vp ∈ Rdp×‖P‖ where P is fixed-sized dis-
tance set. It should be noted that if a word is too
far from entities, it may be not related to the rela-
tion. Therefore, we choose maximum value emax
and minimum value emin for the relative distance.

In the example shown in Figure 1, it is assumed
that dw is 4 and dp is 1. There are two position
embeddings: one for e1, the other for e2. Finally,
we concatenate the word embeddings and position

embeddings of all words and denote a sentence of
length n (padded where necessary) as a vector

v = v1 ⊕ v2 ⊕ ...⊕ vn
where⊕ is the concatenation operator and vi ∈ Rd
(d = dw + dp × 2).
2.2 Convolution

Let vi:i+j refer to the concatenation of words
vi, vi+1, ..., vi+j . A convolution operation in-
volves a filter w ∈ Rhd, which is applied to a
window of h words to produce a new feature. A
feature ci is generated from a window of word
vi:i+h−1 by

ci = f(w · xi:i+h−1 + b)
Here b ∈ R is a bias term and f is a non-linear
function. This filter is applied to each possible
window of words from v1 to vn to produce fea-
ture c = [c1, c2, ..., cn−h+1] with c ∈ Rs(s =
n− h + 1).
2.3 Residual Convolution Block

Residual learning connects low-level to high-level
representations directly, and tackles the vanishing
gradient problem in deep networks. In our model,
we design the residual convolution block by ap-
plying shortcut connections. Each residual con-
volutional block is a sequence of two convolu-
tional layers, each one followed by an ReLU ac-
tivation. The kernel size of all convolutions is h,
with padding such that the new feature will have
the same size as the original one. Here are two
convolutional filter w1, w2 ∈ Rh×1. For the first
convolutional layer:

c̃i = f(w1 · ci:i+h−1 + b1)
For the second convolutional layer:

ći = f(w2 · c̃i:i+h−1 + b2)
Here b1, b2 are bias terms. For the residual learn-
ing operation:

c = c + ć
Conveniently, the notation of c on the left is
changed to define as the output vectors of the
block. This operation is performed by a shortcut
connection and element-wise addition. This block
will be multiply concatenated in our architecture.

2.4 Max Pooling, Softmax Output

We then apply a max-pooling operation over the
feature and take the maximum value ĉ = max{c}.

1804



Figure 1: The architecture of ResCNN used for relation extraction.

We have described the process by which one fea-
ture is extracted from one filter. Take all fea-
tures into one high level extracted feature z =
[ĉ1, ĉ2, ..., ĉm](note that here we have m filters).
Then, these features are passed to a fully con-
nected softmax layer whose output is the proba-
bility distribution over relations. Instead of using
y = w · z + b for output unit y in forward prop-
agation, dropout uses y = w · (z ◦ r) + b where
◦ is the element-wise multiplication operation and
r ∈ Rm is a ’masking’ vector of Bernoulli random
variables with probability p of being 1. In the test
procedure, the learned weight vectors are scaled
by p such that ŵ = pw and used (without dropout)
to score unseen instances.

3 Experiments

3.1 Experimental Settings
In this paper, we use the word embeddings re-
leased by (Lin et al., 2016) which are trained on
the NYT-Freebase corpus (Riedel et al., 2010). We
fine tune our model using validation on the train-
ing data. The word embedding is of size 50. The
input text is padded to a fixed size of 100. Training
is performed with tensorflow adam optimizer, us-
ing a mini-batch of size 64, an initial learning rate
of 0.001. We initialize our convolutional layers
following (Glorot and Bengio, 2010). The imple-
mentation is done using Tensorflow 0.11. All ex-
periments are performed on a single NVidia Titan
X (Pascal) GPU. In Table 1 we show all parame-
ters used in the experiments.
We experiment with several state-of-the-art base-
lines and variants of our model.

• CNN-B: Our implementation of the CNN
baseline (Zeng et al., 2014) which contains
one convolutional layer, and one fully con-
nected layer.

Window size h 3
Word dimension dw 50

Position dimension dp 5
Position maximum distance emax 30
Position minimum distance emin -30

Number of filters m 128
Batch size B 64

Learning rate λ 0.001
Dropout probability p 0.5

Table 1: Parameter settings

• CNN+ATT: CNN-B with attention over in-
stance learning (Lin et al., 2016).

• PCNN+ATT: Piecewise CNN-B with atten-
tion over instance learning (Lin et al., 2016).

• CNN: Our CNN model which includes one
convolutional layer and three fully connected
layers.

• CNN-x: Deeper CNN model which has x
convolutional layers. For example, CNN-9 is
a model constructed with 9 convolutional lay-
ers (1 + 4 residual cnn block without identity
shortcut) and three fully connected layers.

• ResCNN-x: Our proposed CNN-x model
with residual identity shortcuts.

We evaluate our models on the widely used NYT
freebase larger dataset (Riedel et al., 2010). Note
that ImageNet dataset used by the original ResNet
paper (He et al., 2016) has 1.28 million training
instances. NYT freebase dataset includes 522K
training sentences, which is the largest dataset
in relation extraction, and it is the only suitable
dataset to train deeper CNNs.

3.2 NYT-Freebase Dataset Performance
The advantage of this dataset is that there are
522,611 sentences in training data and 172,448
sentences in testing data and this size can support

1805



Figure 2: Comparing ResCNN to different CNNs.

Figure 3: Varying the depths of our models.

us to train a deep network. Similar to previous
work (Zeng et al., 2015; Lin et al., 2016), we eval-
uate our model using the held-out evaluation. We
report both the aggregate curves precision/recall
curves and Precision@N (P@N).

In Figure 2, we compare the proposed ResCNN
model with various CNNs. First, CNNs with mul-
tiple fully-connected layers obtained very good re-
sults, which is a novel finding. Second, the re-
sults also suggest that deeper CNNs with resid-
ual learning help extracting signals from noisy dis-
tant supervision data. We observe that overfitting
happened when we try to add more layers and
the performance of CNN-9 is much worse than
CNN. We find that ResNet can solve this prob-
lem and ResCNN-9 obtains better performance as
compared to CNN-B and CNN and dominates the
precision/recall curve overall.

We show the effect of depth in residual net-
works in Figure 3. We observe that ResCNN-5
is worse than CNN-5 because the ResNet does not
work well for shallow CNNs, and this is consis-

P@N(%) 100 200 300 Mean
CNN+ATT 76.2 68.6 59.8 68.2
PCNN+ATT 76.2 73.1 67.4 72.2
CNN-B 41.0 40.0 41.0 40.7
CNN 64.0 61.0 55.3 60.1
CNN-5 64.0 58.5 54.3 58.9
ResCNN-5 57.0 57.0 54.3 56.1
CNN-9 56.0 54.0 49.7 53.2
ResCNN-9 79.0 69.0 61.0 69.7
ResCNN-13 76.0 65.0 60.3 67.1

Table 2: P@N for relation extraction with different models.
Top: models that select training data. Bottom: models with-
out selective attention.

tent with the original ResNet paper. As we in-
crease the network depth, we see that CNN-9 does
overfit to the training data. With residual learning,
both ResCNN-9 and ResCNN-13 provide signif-
icant improvements over CNN-5 and ResCNN-5
models. In contradictory to popular beliefs that
ResNet only works well for very deep networks,
we found that even with 9 layers of CNNs, using
identity mapping could significantly improve the
performance learning in a noisy input setting.

The intuition of ResNet help this task in two as-
pect. First, if the lower, middle, and higher lev-
els learn hidden lexical, syntactic, and semantic
representations respectively, sometimes it helps to
bypass the syntax to connect lexical and semantic
space directly. Second, ResNet tackles the van-
ishing gradient problem which will decrease the
effect of noise in distant supervision data.

In Table 2, we compare the performance of our
models to state-of-the-art baselines. We show that
our ResCNN-9 outperforms all models that do not
select training instances. And even without piece-
wise max-pooling and instance-based attention,
our model is on par with the PCNN+ATT model.

For the more practical evaluation, we compare
the results for precision@N where N is small
(1, 5, 10, 20, 50) in Table 3. We observe that
our ResCNN-9 model dominates the performance
when we predict the relation in the range of higher
probability. ResNet helps CNNs to focus on the
highly possible candidate and mitigate the noise
effect of distant supervision. We believe that resid-
ual connections actually can be seen as a form
of renormalizing the gradients, which prevents the
model from overfitting to the noisy distant super-
vision data.

In our distant-supervised relation extraction ex-
perience, we have two important observations:
(1) We get significant improvements with CNNs
adding multiple fully-connected layers. (2) Resid-

1806



P@N(%) 1 5 10 20 50
PCNN+ATT 1 0.8 0.9 0.75 0.7
ResCNN-9 1 1 0.9 0.9 0.88

Table 3: P@N for relation extraction with different models
where N is small. We get the result of PCNN+ATT using
their public source code.

ual learning could significantly improve the per-
formance for deeper CNNs.

4 Conclusion

In this paper, we introduce a deep residual learning
method for distantly-supervised relation extrac-
tion. We show that deeper convolutional models
help distill signals from noisy inputs. With short-
cut connections and identify mapping, the perfor-
mances are significantly improved. These results
aligned with a recent study (Conneau et al., 2017),
suggesting that deeper CNNs do have positive ef-
fects on noisy NLP problems.

References
Razvan Bunescu and Raymond J Mooney. 2005. Sub-

sequence kernels for relation extraction. In NIPS,
pages 171–178.

Alexis Conneau, Holger Schwenk, Loı̈c Barrault, and
Yann Lecun. 2017. Very deep convolutional net-
works for natural language processing. EACL 2017.

Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difficulty of training deep feedforward neural
networks. In International Conference on Artificial
Intelligence and Statistics, pages 249–256.

Zhou GuoDong, Su Jian, Zhang Jie, and Zhang Min.
2005. Exploring various knowledge in relation ex-
traction. In Proceedings of the 43rd annual meeting
on association for computational linguistics, pages
427–434. Association for Computational Linguis-
tics.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian
Sun. 2016. Deep residual learning for image recog-
nition. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition, pages
770–778.

Raphael Hoffmann, Congle Zhang, Xiao Ling, Luke
Zettlemoyer, and Daniel S Weld. 2011. Knowledge-
based weak supervision for information extraction
of overlapping relations. In Proceedings of the 49th
Annual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies-
Volume 1, pages 541–550. Association for Compu-
tational Linguistics.

Yankai Lin, Shiqi Shen, Zhiyuan Liu, Huanbo Luan,
and Maosong Sun. 2016. Neural relation extraction
with selective attention over instances. In ACL 2016.

Mike Mintz, Steven Bills, Rion Snow, and Dan Juraf-
sky. 2009. Distant supervision for relation extrac-
tion without labeled data. In Proceedings of the
Joint Conference of the 47th Annual Meeting of the
ACL and the 4th International Joint Conference on
Natural Language Processing of the AFNLP: Vol-
ume 2-Volume 2, pages 1003–1011. Association for
Computational Linguistics.

Sebastian Riedel, Limin Yao, and Andrew McCal-
lum. 2010. Modeling relations and their mentions
without labeled text. In Machine Learning and
Knowledge Discovery in Databases, pages 148–163.
Springer.

Yatian Shen and Xuanjing Huang. 2016. Attention-
based convolutional neural network for semantic re-
lation extraction. In Proceedings of COLING 2016,
the 26th International Conference on Computational
Linguistics: Technical Papers.

Mihai Surdeanu, Julie Tibshirani, Ramesh Nallapati,
and Christopher D Manning. 2012. Multi-instance
multi-label learning for relation extraction. In Pro-
ceedings of the 2012 Joint Conference on Empirical
Methods in Natural Language Processing and Com-
putational Natural Language Learning, pages 455–
465. Association for Computational Linguistics.

Dmitry Zelenko, Chinatsu Aone, and Anthony
Richardella. 2003. Kernel methods for relation ex-
traction. Journal of machine learning research,
3(Feb):1083–1106.

Daojian Zeng, Kang Liu, Yubo Chen, and Jun Zhao.
2015. Distant supervision for relation extraction via
piecewise convolutional neural networks. In Pro-
ceedings of the 2015 Conference on Empirical Meth-
ods in Natural Language Processing (EMNLP), Lis-
bon, Portugal, pages 17–21.

Daojian Zeng, Kang Liu, Siwei Lai, Guangyou Zhou,
Jun Zhao, et al. 2014. Relation classification via
convolutional deep neural network. In COLING,
pages 2335–2344.

1807


