



















































A Concatenation Operation to Derive Autosegmental Graphs


Proceedings of the 14th Meeting on the Mathematics of Language (MoL 14), pages 139–151,
Chicago, USA, July 25–26, 2015. c©2015 Association for Computational Linguistics

A Concatenation Operation to Derive Autosegmental Graphs

Adam Jardine and Jeffrey Heinz

University of Delaware

{ajardine,heinz}@udel.edu

Abstract

Autosegmental phonology represents words

with graph structures. This paper introduces a

way of reasoning about autosegmental graphs

as strings of concatenated graph primitives.

The main result shows that the sets of au-

tosegmental graphs so generated obey two

important, putatively universal, constraints in

phonological theory provided that the graph

primitives also obey these constraints. These

constraints are the Obligatory Contour Prin-

ciple and the No Crossing Constraint. Thus,

these constraints can be understood as being

derived from a finite basis under concatena-

tion. This contrasts with (and complements)

earlier analyses of autosegmental representa-

tions, where these constraints were presented

as axioms of the grammatical system. Empir-

ically motivated examples are provided.

1 Introduction

Autosegmental phonology represents words with

graph structures. This paper provides a new way

of defining the set of valid autosegmental represen-

tations through concatenating a finite set of graph

primitives with particular properties. This ‘bottom-

up’ approach to formalizing autosegmental repre-

sentations (henceforth APRs) contrasts with the

‘top-down’, axiomatic approach of previous formal-

izations of APRs (Goldsmith, 1976; Bird and Klein,

1990; Coleman and Local, 1991; Kornai, 1995).

However, we show that APR graphs constructed in

the way we define hold to these axioms. One advan-

tage to this perspective is that it brings out the string-

like quality of APRs, in that they can be generated by

the concatenation of a finite set of primitives. Fur-

thermore, it shows that two putatively universal con-

straints, the Obligatory Contour Principle and the

No Crossing Constraint (see below), are guaranteed

to hold of autosegmental representations provided

the graph primitives also obey these constraints. In

other words, concatenation preserves these proper-

ties. Finally, the empirical generalization that lan-

guages may exhibit unbounded spreading but not

unbounded contours is naturally expressed by this

finite set of primitives, as spreading is derivable

through concatenation but the only available con-

tours are those found in the set of graph primitives.

In short, important properties of autosegmental rep-

resentations of words can be understood as being de-

rived from a finite basis under concatenation.

Goldsmith (1976) originally defined APRs as

graphs. Likewise, this paper models APRs us-

ing graphs representing both the associations and

precedence relations of APRs. We apply estab-

lished graph-theoretic methods to APRs, in par-

ticular graph concatenation, as defined by Engel-

friet and Vereijken (1997). Engelfriet and Vereijken

(1997) generate all graphs from concatenation and

sum operations and a finite set of primitives. What is

proposed here is a much weaker version of this idea,

using concatenation only to build a specific class of

graphs from a set of primitives. In doing so, it is

shown how the properties of structures in the gener-

ated class derive from the operation and the primi-

tives.

As detailed in the next section, there are several

properties that most researchers agree are essential

to APRs. One is that their composite autosegments

139



are divided up into disjoint strings called tiers, with

associations linking autosegments on different tiers.

Second, the No-Crossing Constraint (NCC) (Gold-

smith, 1976; Hammond, 1988; Coleman and Local,

1991) states that these associations cannot ‘cross’;

i.e., they must respect the precedence relations on

each tier. Finally, the Obligatory Contour Prinicple

(OCP) (Leben, 1973) states that on the melody tier

adjacent autosegments cannot be identical.

Formal treatments of these properties, starting

with Goldsmith (1976), state these properties as ax-

ioms. For example, Bird and Klein (1990) pro-

vide a model-theoretic definition of APRs given a

particular interpretation of association as overlap,

and state axioms restricting the overlap relation.

More recently, Jardine (2014) axiomatizes the NCC

and one-to-one association in monadic-second order

logic. Kornai (1995)’s treatment defines concatena-

tion operations similar to the one given here, but his

definition of APRs as bistrings does not derive from

these operations. As a result, key properties like the

NCC must be specified as axioms.

Instead, the current paper shows that the NCC

and OCP can be derived by a concatenation oper-

ation alone, given a well-defined set of primitives.

This paper is structured as follows. §2 details the
set of properties phonologists deem important for

APRs. §3 gives the relevant mathematical prelimi-
naries, and §4 defines APRs as graphs and how the
properties in §2 can be formalized as axioms. §5
defines a concatenation operation over graphs, and

§6 proves how APR graphs derived using this con-
catenation operation obey the relevant axioms from

§4. §7 then shows how to describe some common
natural language phenomena using concatenation, as

well as some phenomena that raise issues for con-

catenation. §8 reviews the advantages of viewing
APRs through concatenation and discusses future

work, and §9 concludes.

2 Basics of Autosegmental Phonology

Autosegmental phonology (AP) (Goldsmith, 1976;

Goldsmith, 1979; Clements, 1976; McCarthy, 1979;

McCarthy, 1985) has been a widely adopted theory

of phonological representations in which phonolog-

ical units, called autosegments, appear on one of

some finite set of strings, or tiers, and related to au-

tosegments on other tiers by association. Such au-

tosegmental representations (APRs) are usually de-

picted with the tiers as vertically separated strings of

symbols and the association relation shown as lines

drawn between autosegments, as in (1) below.

a. a b b. a c. H L

�� ❅❅ ◗◗
c c d µ µ

(1)

The core insight APRs express is that a single au-

tosegment on one tier may be associated to multi-

ple autosegments on another tier, as in (1). For pur-

poses of exposition, this paper focuses on two-tiered

APRs: a melody tier, which carries featural infor-

mation, and a timing tier, which represents how fea-

tures on the melody tier are pronounced in the lin-

ear speech stream. For example, in tonal phonology,

APRs often comprise a melody tier over the symbols

{H,L} for high and low tones and a timing tier over
{µ} for morae (the timing unit most commonly as-
sociated with tone). The APR in (1c) thus represents

a high-toned mora followed by a falling tone mora.

Thus, the insights of autosegmental phonology

can be studied minimally with two-tier APRs, and

so this paper focuses on two-tier APRs. However,

in practice, APRs often use more than two tiers. As

we explain at the appropriate points throughout the

paper, the concepts discussed here can be straight-

forwardly applied to AP graphs with multiple tiers.

Two principles have been seen as crucial to con-

straining the theory of APRs. One is the No Cross-

ing Constraint (NCC) (Goldsmith, 1976; Hammond,

1988; Coleman and Local, 1991), which states that

if autosegment a is associated to autosegment y, no
autosegment b which follows a on its tier may be as-
sociated to an autosegment x which precedes y. An
example APR violating the NCC is given in (2a).

The other principle is the Obligatory Contour Prin-

ciple (OCP), which states that on each tier, adjacent

autosegments must be different (Leben, 1973; Mc-

Carthy, 1986). The APR in (2b) violates the OCP.

a. H L

◗◗✑✑
µ µ

b. H H

µ µ

(2)

Formal definitions of the NCC and OCP will be

given in the following section, after we have defined

140



APRs explicitly in terms of graphs. The NCC is usu-

ally considered to be inviolable, where the OCP is

considered violable by some authors (Odden, 1986).

This paper treats the OCP as an inviolable principle,

although this point is returned to in §8.
It is often, but not always, assumed that the sets of

autosegments which are allowed to appear on each

tier are disjoint. This assumption is usually adhered

to in tonal and featural APRs, but not always in mor-

phological APRs in which separate tiers represent

separate morphemes (a la McCarthy (1979)). Here,

we assume that the sets of elements allowed to ap-

pear on each tier are disjoint, and leave theories of

APRs which allow a particular autosegment to ap-

pear on multiple tiers for future work.

3 Preliminaries

Let N represent the natural numbers. Given a set X
of elements, a partition P is a set {X0,X1, ...Xn}
of nonempty subsets or blocks of X such that X is
the union of these blocks and for each Xi,Xj ∈ P ,
Xi∩Xj = ∅. P induces an equivalence relation ∼P
over X such that for all x, y ∈ X, x ∼P y iff for
some Xi ∈ P , x ∈ Xi and y ∈ Xi. We also say ∼P
partitions X into P . A partition P is said to refine
another partition P ′ iff every block of P ′ is a union
of blocks of P . We also say ∼P is then finer than
∼P ′ . If R is a relation on X then let ∼R denote the
finest equivalence relation onX containing R.

If Σ is a finite alphabet of symbols, then Σ∗ de-
notes the set of all strings over that alphabet, in-

cluding the empty string λ. We consider here alpha-
bets structured by partitions. We refer to a partition

T = {T0, T1, ..., Tn} of Σ as a tier partition over Σ,
and refer to some block Ti in T as a tier alphabet.

A labeled mixed graph is a tuple 〈V,E,A, ℓ〉
where V is a set of nodes, E is the set of undirected
edges, A is the set of directed edges (or arcs), and
ℓ : V → Σ is a total labeling function assigning each
node in V a label in an alphabet Σ. For elements of
the set V we will use early elements in N. An undi-
rected edge is a set {x, y} of cardinality 2 of nodes
x, y ∈ V , and a directed edge is a 2-tuple (x, y) of
nodes in V . When not obvious from context, the el-
ements of a graph G will be marked with subscripts;
e.g., VG. LetGλ, the empty graph, refer to the graph
〈∅, ∅, ∅, ∅〉.

Unless otherwise noted, all graphs in this pa-

per are labeled mixed graphs, and thus will simply

be referred to as graphs. All graphs are also as-

sumed to be simple graphs without multiple edges;

{x, y} ∈ E implies (x, y) 6∈ A, and (x, y) ∈ A im-
plies {x, y} 6∈ E. Let GR(Σ) denote the union of
{Gλ} with all graphs whose labels are in Σ.

A graph H is a subgraph of a graph G if VH ⊆
VG, EH ⊆ EG, AH ⊆ AG, and ℓH ⊆ ℓG. A sub-
graph H of G is an induced subgraph if for some
subset X of VG, VH = X and for all x, y ∈ X,
{x, y} ∈ EG iff {x, y} ∈ EH and (x, y) ∈ AG
iff (x, y) ∈ AH . In other words, H has exactly
the edges in G that appear between the nodes in
X. We say X induces H and also write G[X]
for H . By a partition of G we refer to some set
{G[V0], G[V1], ..., G[Vn]} where {V0, V1, ..., Vn} is
a partition of V .

4 APRs as graphs

Here we define autosegmental graphs (APGs), or

explicit graph representations of APRs. In this sec-

tion, the set of valid APGs is defined axiomatically

based on the phonological principles discussed in

§2. In §6.2 we show that these principles can all be
derived from graph concatenation. For an APGG,A
represents the ordering relation on each tier, and E
represents the association relations between them.1

We first define the tiers as subgraphs of G that are
string graphs for which A represents the successor
relation (Engelfriet and Hoogeboom, 2001).

a b a b

Figure 1: A string graph

Let 4 be the reflexive, transitive closure of A.
That is, for any x, y ∈ V , if x 4 y then either x = y
or there is a directed path from x to y.

Definition 1 A graph is a string graph if E = ∅ and
its relation 4 is a total order on V .

1It should be noted that linguists often leave the precedence

relation on each tier as implicit or otherwise distinct from the

model of associations (see Coleman and Local (1991) for an

overview). However, with precedence directly in the graph, an

APG represents all of the information in an APR, and thus this

information can be studied by established graph-theoretic tech-

niques, such as the graph concatenation considered here.

141



Let ∼A be the smallest equivalence relation that
results from the symmetric closure of 4. The first
axiom says ∼A partitions V into two tiers.
Axiom 1 V is partitioned by ∼A into at most two
sets V0, V1 such that G[V0] and G[V1] are string
graphs. V0 and V1 are the tiers of G.

The second axiom, related to Axiom 1, is that the

partition ofG into tiers respects some partition of Σ.

Axiom 2 There is some tier partition T = {T0, T1}
over Σ such that ℓ forms a morphism from∼T to∼A
such that ℓ(x) ∼T ℓ(y) iff x ∼A y.

Axiom 2 corresponds to the principle discussed

in §2 that each kind of autosegment may only ap-
pear on a particular tier. Note that a tier in G thus
corresponds to a tier alphabet in T . For notational
brevity, we mark this with matching subscripts; e.g.,

V0 is the subset of V s.t. for all v ∈ V0, ℓ(v) ∈ T0.
Axiom 3 governs the general form of associations.

Axiom 3 For all {x, y} ∈ E, x 6∼A y.
This simply states that the undirected edges,

which again represent associations, must have one

end in each tier. Thus, as noted by Coleman and

Local (1991), the set of associations between two

tiers in an APG forms a bipartite undirected graph

〈V,E, ℓ〉 where the two parts are the tiers V0 and V1.
Having defined the structure of APGs in Axioms

1 through 3, we now define the NCC and OCP.

Axiom 4 (NCC) For all u, v, x, y ∈ V , if
{u, x}, {v, y} ∈ E and u 4 v, then x 4 y.
Similar axioms have also been defined by Bird and

Klein (1990), Kornai (1995), and Jardine (2014).

Finally, Axiom 5 defines the OCP. Recall that the

OCP only holds at the melodic level, so we choose

only one of the tiers Vm for the OCP to hold.

Axiom 5 (OCP) For one tier Vm, for all x, y ∈ Vm,
(x, y) ∈ A implies ℓ(x) 6= ℓ(y).

This concludes the axioms for APGs. For an

alphabet Σ and tier partition T = {Tm, Tt} over
Σ, let APG(Σ, T ) denote the class of APGs obey-
ing the tier partition T of Σ, where for each G ∈
APG(Σ, T ), ℓ maps elements in the tier Vm adher-
ing to Axiom 5 to Tm.

2 §6 shows how to derive
2Note that E is not required to be nonempty; that is, APGs

with no association lines are allowed. This can model, for ex-

ample, underlying APRs with unassociated melodies.

these axioms from the concatenation, as defined in

the following section, of an alphabet of graph prim-

itives with certain properties.

These axioms can be extended to graphs with

more than two tiers. Instead of binary partitions,

Σ and V could be partitioned into {T0, T1, ..., Tn}
and {V0, V1, ..., Vn}, respectively. In this case, Ax-
iom 3 would specify a single tier in which all undi-

rected edges must have one end. Axiom 5 would

then hold for all tiers besides this tier. This re-

sults in ‘paddle-wheel’ APRs, like those defined by

Pulleyblank (1986). Theories of feature geometry

(Archangeli and Pulleyblank, 1994; Clements and

Hume, 1995; Sagey, 1986) could also be accommo-

dated for by positing additional structure on T . This,
however, shall be left for future work.

5 Concatenation

This section defines a concatenation operation (◦)
based on that of Engelfriet and Vereijken (1997).

Engelfriet and Vereijken (1997)’s operation merges

nodes of graphs with specified beginning and end

points; here, we use the tier structure to determine

how the graphs are concatenated. We thus define

G1 ◦ G2 for two graphs G1, G2 in GR(Σ) given
a tier partition T = {Tm, Tt} over Σ. The basic
idea is to connect, if they exist, the last node of the

first graph and the first node of the second graph for

each tier. Such ‘end nodes’ with identical labels in

the Tm tier alphabet are merged, whereas end nodes
with labels in the timing tier alphabet and nodes with

nonidentical labels in the melody tier alphabet are

connected via a directed edge. As shown in §6.2 and
§7, it is this ‘merging’ that derives both the OCP and
spreading for APGs constructed this way.

As the concatenation operation is defined over

graphs in GR(Σ), it is at first very general and not
of any phonological interest. However, we show in

§6 that concatenation can be used to define a set of
APGs that follow the axioms in §4, as shown in §6.2.

5.1 Definition

We assume that G1 and G2 are disjoint (i.e., that V1
and V2 are disjoint sets)—if G2 is not disjoint with
G1, then we replace it with a graph isomorphic to
G2 that is disjoint with G1.

We use two partial functions first : GR(Σ) ×

142



G1 = a0 b1

c2

G2 = b3

c4

Figure 2: Two graphs in GR(Σ)

T → N and last : GR(Σ) × T → N which pick
out the first and last nodes on a particular tier in a

graph.3 Recall that Vi is the subset of V s.t. for all

v ∈ Vi, ℓ(v) ∈ Ti. Formally, first(G,Ti) def= v ∈
Vi s.t. ∀v′ ∈ Vi, v 4 v′ if such a v exists; otherwise
it is undefined. Similarly, last(G,Ti)

def
= v ∈ Vi

s.t. ∀v′ ∈ Vi, v′ 4 v if such a v exists; other-
wise it is undefined. We shall sometimes refer to

first(G,Ti) (resp. last(G,Ti)) as the first (last)
node of G for tier alphabet Ti.

Example 1 Consider the alphabet Σ = {a, b, c}
and the tier partition T = {Tm = {a, b}, Tt =
{c}}. Take graphs G1 and G2 where V1 =
{0, 1, 2} and V2 = {3, 4} with edges and label-
ing as in Figure 2 Node indices are given as sub-

scripts on the node labels. last(G1, Tm) = 1, and
first(G2, Tt) = last(G2, Tt) = 4.

The concatenation operation combines the

graphs, either merging or drawing arcs between

the first and last nodes on each tier, depending on

their labels. The operation can be broken down into

multiple steps as follows. First, we define the graph

G1,2 as the pairwise union ofG1 and G2. We denote
V1 ∪ V2 with V1,2 and so on.

G1,2 = 〈V1 ∪ V2︸ ︷︷ ︸
V1,2

, E1 ∪ E2︸ ︷︷ ︸
E1,2

, A1 ∪A2︸ ︷︷ ︸
A1,2

, ℓ1 ∪ ℓ2︸ ︷︷ ︸
ℓ1,2

〉 (3)

Next, two binary relations over the nodes of G1,2
are defined. R pairs the last element in G1 and the
first element in G2 of each tier. RID is a restriction
on R to pairs who share identical labels, excluding
nodes whose labels are in Tt.

R
def
= { (v, v′) ∈ V1,2 × V1,2 |

v = last(G1, Ti),
v′ = first(G2, Ti),
for some Ti ∈ T }

(4)

3That these are partial functions will be most useful for deal-

ing with graphs with no nodes on a particular tier; for example

the empty graph, which is discussed below.

RID
def
= { (v, v′) ∈ R |

ℓ(v) = ℓ(v′), ℓ(v) 6∈ Tt }
(5)

We also often refer to the complement of RID with

respect to R; RID
def
= R−RID.

We can then use Engelfriet and Vereijken (1997)’s

merging operation which reduces a graph G with
any relation R ⊆ V × V over its nodes. Informally,
nodes which stand in the relation are merged; ev-

erything else stays the same. Given any such re-

lation R, we consider ∼R, the finest equivalence
relation on V containing R. In the usual way, let
[v]∼R = {v′|v ∼R v′}. Here, we use ∼RID , which
assigns each node its own equivalence class, except

for pairs (v, v′) ∈ RID of last and first nodes with
identical labels, which are lumped together.

Example 2 Continuing with G1 and G2 from Ex-
ample 1, G1,2 is given in Figure 3a. For G1,2,
R = {(1, 3), (2, 4)}, RID = {(1, 3)}, and so
RID = {(2, 4)}. The equivalence classes for ∼RID ,
{{0}, {1, 3}, {2}, {4}}, are shown in Figure 3b.

a. a0 b1

c2

b3

c4

b. a0 b1

c2

b3

c4

Figure 3: (a) G1,2 and (b) ∼RID in G1,2

Given a graph G and a relation R ⊆ V × V ,
Engelfriet and Vereijken (1997) define V/R =
{[v]R|v ∈ V }. This simply ‘merges’ the nodes of
V based on the equivalence relation ∼R. G/R can
then be defined as the graph reduced by this merged

set of nodes; 〈V/R,E,A, ℓ〉.
The final step is to add precedence arcs to connect

RID, the unmerged last and first nodes inG1,2/RID.
Again, RID is the pairs of last/first nodes on the
melody tier that are not identical and the last/first

pair on the timing tier, which are never merged.

Definition 2 (Concatenation of APGs). The con-

catenation G1 ◦ G2 of graphs G1 and G2 in
GR(Σ) is:

G1 ◦G2 = 〈V1,2/RID, E1,2, A1,2 ∪RID, ℓ1,2〉

Example 3 The concatenation of G1 and G2 is
given in Figure 4. The node numbered 1, 3 rep-
resents the nodes from Fig. 3 which have been

143



merged. Node also the added directed edge (2, 4)
from RID in Example 2.

a0 b1,3

c2 c4

Figure 4: G1 ◦G2

Technically, the resulting set V1,2/RID is a set of
sets of nodes representing the equivalence classes

of ∼RID ; for example, V1,2/RID in Example 3 is
{{0}, {1, 3}, {2}, {4}}. Represented strictly in this
way, successive concatenations will yield sets of sets

of sets of nodes, ad infinitum. For example, concate-

nating a third graph, such as G3 in Figure 5 below,
to G1 ◦ G2 would further merge node {1, 3} with
node 5 in G3. Strictly speaking, the resulting node
is {{1, 3}, {5}}. For clarity, we instead represent
each node in this case as the union of the elements of

each member of its equivalence class, e.g. {1, 3, 5}
for the concatenation (G1 ◦ G2) ◦ G3 in Figure 5.
This convenient renaming ‘flattens out’ the nested

sets. It does not result in any loss of generality be-

cause union is associative. Also, it will be useful

later when showing concatenation is associative for

the particular class of graphs described in §6.

G3 = b5

c6

(G1 ◦G2) ◦G3 = a0 b

c2 c4 c6

{1, 3, 5}

Figure 5: Concatenating a third graphG3

Importantly, the relations R and RID do not de-
pend on a binary partition over Σ; they only require
that one partition Tt for the timing tier be specified.
Thus, while the examples given here focus on two

tiers, this operation is defined for graphs represent-

ing APRs with multiple melody tiers.

5.2 Properties

This section proves two important properties of con-

catentation, that Gλ is the identity for ◦, and that for
any tier in both G1 andG2,G1◦G2 contains a string
graph corresponding to those tiers.

Theorem 1 Gλ is the identity element for the ◦ op-
eration. That is, for any G ∈ GR(Σ), G ◦ Gλ =
Gλ ◦G = G.

Proof: Let G = 〈V,E,A, ℓ〉. We first consider
Gλ ◦G. Recall that the concatenation of two graphs
is a modification of their disjoint union. From the

properties of the union operation, we know that

the disjoint union of Gλ and G is G. Note that
first(Gλ, Ti) and last(Gλ, Ti) are undefined for
all Ti ∈ T , because the set of nodes is empty in Gλ.
Thus, R = ∅, and so RID = RID = ∅. Because
RID = ∅, V/R = V , because the smallest equiva-
lence relation containing ∅ is =. Thus,

Gλ ◦G = 〈 (V/R) = V, (E ∪ ∅) = E,
(A ∪ ∅) = A, (ℓ ∪ ∅) = ℓ 〉 = G

G ◦Gλ = G is similarly derived. �

The next lemma shows that concatenation pre-

serves the string graph properties of any tiers in G1
and G2. This is important for showing the associa-
tivity of concatenation under certain graph classes,

as will be discussed in §6.
Lemma 1 Let Ui and Vi denote the set of all nodes
in G1 and G2, respectively, with labels in some
member Ti of T . If G1[Ui] and G2[Vi] are string
graphs, or if Ui is empty and G2[Vi] is a string
graph, or ifG1[Ui] is a string graph and Vi is empty,
then (G1 ◦ G2)[Wi] is a string graph, where Wi is
the set of all nodes inG1◦G2 whose labels are in Ti.
Furthermore, for any Ti, if v = first(G1, Ti), then
first(G1 ◦ G2, Ti) is the unique node in G1 ◦ G2
which contains v, and likewise for last(G2, Ti).

Proof: This follows immediately from the defini-

tion of concatenation if G1[Ui] is a string graph
and Vi is empty, because then first(G2, Ti) will
be undefined and no member of Ui will appear in
R, and thus all will appear in G1 ◦ G2 unmodified
and with no new arcs associated with them. Thus,

G1[Ui] = (G1 ◦ G2)[Wi] and so both are string
graphs. The proof for the case in which Ui is empty
and G2[Vi] is a string graph is very similar.

For the final case, recall that a graph G is a
string graph iff its set of arcs A forms a total or-
der � on its nodes V . For the case G1[Ui] and
G2[Vi] are string graphs and v1 = last(G1, Ti) and

144



v2 = first(G2, Ti), then (v1, v2) appears in either
RID or RID. If the pair is in RID , v1 and v2 are
merged into a node v1,2 and no new arcs will be in-
troduced to the set Ai of the arcs in (G1 ◦ G2)[Wi].
So for the arc (v′1, v1) fromG1[Ui] and (v2, v

′
2) from

G2[Vi], the corresponding arcs in Ai are (v
′
1, v1,2)

and (v1,2, v
′
2), respectively, which maintains the to-

tal orders of both Ui and Vi. If (v1, v2) ∈ RID, then
(v′1, v1), (v1, v2), and (v2, v

′
2) are all in Ai, which

also mantains the total order.

That for v = first(G1, Ti), first(G1 ◦G2, Ti)
is the unique node which contains v follows directly
from the fact that the total order on Ui is maintained.
Likewise for v = last(G2, Ti) and Vi. �

These properties allow us to treat sets of graphs

parallel to sets of strings, as the next section shows.

6 APGs derived from concatenation

6.1 Alphabets of graph primitives

As Engelfriet and Vereijken (1997) observe, given

a concatenation operation a class of graphs can be

seen as an interpretation of a set of strings, where

each symbol in the string corresponds to a graph

primitive. We now define an APG graph primitive.

Definition 3 Over an alphabet Σ and tier partition
T = {Tt, Tm}, an APG graph primitive is a graph
G ∈ GR(Σ) which has the following properties:

a. Vt is a singleton set {vt}
b. G[Vm] is a string graph or is empty

c. All e ∈ E are of the form {vm, vt}, vm ∈ Vm

We can then treat a finite set of primitives like an

alphabet of symbols:

Definition 4 An alphabet of graph primitives over

GR(Σ) is a finite set Γ of symbols and a naming
function g : Γ → GR(Σ).

An alphabet of APG graph primitives is thus Γ for
which for all γ ∈ Γ, g(γ) satisfies Definition 3.
Example 4 As in the previous examples, consider

the alphabet Σ = {a, b, c} and the tier partition T =
{Tm = {a, b}, Tt = {c}}. The alphabet of graph
primitives Γ = {a, b, d}, where its naming function
g is defined as in Figure 6, is an alphabet of APG
graph primitives.

g(a) = a

c

g(b) = b

c

g(d) = a b

c

Figure 6: An example Γ and g

The strings in Γ∗ thus represent a class of graphs,
which we will call APG(Γ). We define APG(Γ)by
extending g to strings in Γ∗.

Definition 5 For an alphabet of graph primitives Γ
with naming function g, extend g to strings in Γ∗ as

follows. For w ∈ Γ∗, g(w) def=

• Gλ if w = λ
• g(u) ◦ g(γ) if w = uγ, u ∈ Γ∗, γ ∈ Γ

APG(Γ) is thus {g(w)|w ∈ Γ∗}.

6.2 Derived properties

We now show that if Γ is an alphabet of APG graph
primitives, then APG(Γ) has a number of desirable
properties. The following assumes Γ is an alphabet
of APG graph primitives. First, we prove the follow-

ing theorem stating that all graphs in APG(Γ) fol-
low Axioms 1 through 3 from §4 regarding the gen-
eral structure of APGs.

Theorem 2 For any G ∈ APG(Γ), G satisfies Ax-
iom 1 (that ∼A partitions V into at most two sets
V0 and V1 such that G[V0] and G[V1] are string
graphs), Axiom 2 (that the tiers of G correspond to
the partition T ), and Axiom 3 (that the ends of all
undirected edges are between different tiers).

Proof: That G satisfies Axioms 1 and 2 follows di-
rectly from parts (a) and (b) of Definition 3 and the

fact that concatenation only adds arcs between nodes

whose labels are in the same Ti ∈ T . That G[V0]
and G[V1] are string graphs follows from parts (a)
and (b) of Definition 3 and Lemma 1.

That G follows Axiom 3 follows directly from
Part (c) of Definition 3 and the fact that concatena-

tion adds no new undirected edges to E. �

Next, concatenation is associative over APG(Γ) .
The following lemma allows one to prove Theo-

rem 3 (associativity) below.

145



Lemma 2 For any u, v ∈ Γ∗ denote g(u), g(v) ∈
APG(Γ) withGu andGv respectively. Then for any
γ ∈ Γ, Gu ◦ (Gv ◦Gγ) = (Gu ◦Gv) ◦Gγ .

Proof: LetG = 〈V,E,A, ℓ〉 denote (Gu ◦Gv)◦Gγ
and G′ = 〈V ′, E′, A′, ℓ′〉 denote Gu ◦ (Gv ◦ Gγ).
That E = E′ and ℓ = ℓ′ follow from Definition 2 of
concatenation and associativity of union.

To show V = V ′, there are seven relevent cases to
consider. Let Vu, Vv, and Vγ denote the sets of nodes
for Gu, Gv, and Gγ , respectively, and let vu de-
note a node in Vu, etc. As merging is accomplished
through grouping nodes into equivalence classes,all

nodes in V or V ′ thus correspond to either Cases 1–
3 {vu}, {vv}, {vγ}, Cases 4–6 {vu, vv}, {vv, vγ},
{vu, vγ}, or Case 7 {vu, vv , vγ} (recall from §5 we
do not distinguish between nodes representing sets

and nodes representing sets of sets).

As per the definition of concatenation, V =
((Vu∪Vv)/RID-u,v∪Vγ)/RID , whereRID-u,v is de-
fined over Vu∪Vv and RID over (Vu∪Vv)/RID-u,v.
Likewise, V ′ = (Vu ∪ (Vv ∪ Vγ)/RID-v,γ)/R′ID.

Cases 1–3. We first establish that when v ∈ V
corresponds to a singleton set that v ∈ V ′. Con-
sider the case when v ∈ V corresponds to {vv},
when vv has not been merged. For V , this is exactly
the case in which there is no (vu, vv) ∈ RID-u,v
nor a ({vv}, vγ) ∈ RID. We show that this en-
tails that there is neither a (vu, {vv}) ∈ R′ID nor
a (vv, vγ) ∈ RID-v,γ , and so {vv} ∈ V ′. There is
no ({vv}, vγ) ∈ RID either when {vv} is not the
last node in Gu ◦ Gv for any Ti or there is no vγ
with which it can merge. If {vv} is not the last node
in Gu ◦ Gv for any Ti, then vv is not the last node
in Gv for any Ti, as by Theorem 2 and Lemma 1
the last node for Ti in Gu ◦ Gv must be the unique
set which includes the last node for Ti in Gv . If
there is no vγ to merge with {vv}, then there is no
vγ to merge with vv either. Thus, there cannot be a
(vv, vγ) ∈ RID-v,γ . Similarly, it follows that there
is no (vu, {vv}) ∈ R′ID. If there is no (vu, vv) ∈
RID-u,v, then either vv is not the first node in Gv or
there is no vu with which it can merge. Thus, ei-
ther {vv} is not the first node in Gv ◦ Gγ (again by
Lemma 1) or there is no node vu to merge with {vv},
and so there is no (vu, {vv}) ∈ R′ID. As there is nei-
ther a (vu, {vv}) ∈ R′ID nor a (vv, vγ) ∈ RID-v,γ ,
then {vv} ∈ V ′. The proofs that v ∈ V implies

v ∈ V ′ when v corresponds to {vu} and {vγ} are
very similar. The proofs that v′ ∈ V ′ implies v′ ∈ V
for all three cases are identical.

The remaining cases deal with merged nodes.

Cases 4–6. Consider the case in which v ∈ V is
{vu, vv} corresponding to merged nodes from Vu
and Vv. This is the case in which (vu, vv) ∈ RID-u,v
but there is no ({vu, vv}, vγ) ∈ RID for any vγ .
As before, if {vu, vv} cannot be merged with some
vγ , then there is no vγ to merge with vv. Further-
more, if (vu, vv) ∈ RID-u,v, then vu is the last
node in Gu and vv is the first node in Gv for some
Ti. By Lemma 1, then {vv} is the first node in
Gv ◦ Gγ for Ti, and so (vu, {vv}) ∈ R′ID. Thus,
{vu, vv} ∈ V ′. The proof that v ∈ V implies
v ∈ V ′ when v = {vv , vγ} is very similar, as it is for
v = {vu, vγ}. The latter is a special case in which
Vv has no nodes for some Ti, but vu and vγ are com-
patible to merge. Case 7. For v = {vu, vv, vγ},
both (vu, vv) ∈ RID-u,v and ({vu, vv}, vγ) ∈ RID.
If ({vu, vv}, vγ) ∈ RID, then through Lemma 1
(vv, vγ) ∈ RID-v,γ and then (vu, {vv , vγ}) ∈ R′ID,
so {vu, vv, vγ} ∈ V ′. The proofs that v′ ∈ V ′ im-
plies v′ ∈ V for these cases are identical.

That A = A′ is very similar to the proof for
V = V ′. Let Ai denotes the set of arcs in g(γi).
Then A = (Au∪Av ∪RID−u,v)∪Aγ ∪RID, where
RID−u,v is defined over (Vu∪Vv)/RID-u,v andRID
is defined over ((Vu ∪Vv)/RID-u,v ∪Vγ)/RID, and
Vu ∪ Vv A′ = (Au ∪ (Av ∪Aγ ∪RID−v,γ)∪R′ID),
where RID−v,γ and R

′
ID

are defined parallel to

RID−u,v and RID. As union is associative, it is suf-
ficient to show that every pair (vu, vv) ∈ RID−u,v
has a corresponding pair (vu, {vv}) or (vu, {vv , vγ})
inR′

ID
and vice versa, and that every pair ({vv}, vγ)

or ({vu, vv}, vγ) in RID has a corresponding pair
(vv, vγ) ∈ RID−v,γ , and vice versa. Both of these
follow from the fact that V = V ′ and Lemma 1 in
the same way as merging nodes above. �

Next it is shown that graph concatenation is as-

sociative over arbitrary graphs in APG(Γ) with the
same kind of inductive argument which establishes

concatenation is associative over strings.

Theorem 3 The ◦ operation is associative over
graphs in APG(Γ). For any u, v, w ∈ Γ∗ denote
g(u), g(v), g(w) ∈ APG(Γ) with Gu, Gv , Gw re-

146



spectively. ThenGu ◦ (Gv ◦Gw) = (Gu ◦Gv)◦Gw.

Proof: The proof is by induction on the size of w.
For the base case, when w = λ, Gw = Gλ. Then
Gu◦(Gv◦Gw) = Gu◦(Gv ◦Gλ), which equalsGu◦
Gv by Theorem 1. It follows, again by Theorem 1,
that (Gu ◦Gv) ◦Gλ. Hence the base case is proved.

Next we assume the inductive hypothesis that

associativity holds for strings of length n and we
consider any w ∈ Γ∗ of length n + 1. Clearly there
exists x ∈ Γ∗ of length n and γ ∈ Γ so that w = xγ.
Then Gu ◦ (Gv ◦Gw) = Gu ◦ (Gv ◦ (Gx ◦Gγ)). By
Lemma 2, this equals Gu ◦ ((Gv ◦Gx) ◦Gγ), which
again by Lemma 2, equals Gu ◦ (Gv ◦ Gx)) ◦ Gγ .
Then, by the induction hypothesis, we have

((Gu ◦Gv)◦Gx)◦Gγ , which again by the induction
hypothesis, yields (Gu ◦ Gv) ◦ (Gx ◦ Gγ). This is
of course is (Gu ◦Gv) ◦Gw. �

The next theorem states that any G ∈ APG(Γ)
follows the NCC.

Theorem 4 For any G ∈ APG(Γ), G satisfies the
NCC (Axiom 4).

Proof: The proof is by recursion on the length of

w ∈ Γ∗. Gλ trivially satisfies the NCC because it
has no nodes. For g(γ) for any γ ∈ Γ, Definition
4 states that there is only one node vt in Vt and this
node must be one of the endpoints for each edge in

E. Thus for any two edges {x, y} and {x′, y′} in
g(γ) where x 4 x′, it must be the case that y =
y′ = vt, because directed edges only occur between
nodes in tier Vm. Thus, any g(γ) satisfies the NCC.

Next we assume it holds for w ∈ Γ∗ of length
n and consider any w ∈ Γ∗, γ ∈ Γ. Then g(wγ)
satisfies the NCC because the graph concatenation

operation does not add any undirected edges and

because, by Lemma 1 concatenation preserves the

order of each tier in g(w) and g(γ). �

The final theorem states that any G ∈ APG(Γ)
follows the OCP if the graph primitives do.

Theorem 5 If g(γ) for all γ ∈ Γ satisfy the OCP
(Axiom 5), then for any G ∈ APG(Γ), G satisfies
Axiom 5.

Proof: The proof is again by recursion on the length

of w ∈ Γ∗. The OCP is trivially satisfied for Gλ

since it contains no nodes or arcs. The case when

|w| = 1 is given as the condition of the theorem.
Assume that every w ∈ Γ∗ of length n satisfies

the OCP. Now consider G = g(wγ) withw of length
n and γ ∈ Γ. To see that Gu ◦Gγ satisfies the OCP,
recall from Definition 2 of graph concatenation that

the set of arcs forG1◦G2 is equal toA1,2∪RID; i.e.,
the union of A1 and A2 andRID. By definition RID
only includes pairs of nodes (x, y) s.t. ℓ(x) 6= ℓ(y),
so if G1 satisfies the OCP and G2 satisfies the
OCP RID will not add any arcs on Vm which
violate the OCP (recall that the OCP only holds for

tier Vm), and soG1 ◦G2 will also satisfy the OCP.�

Thus, the merging part of the concatenation pre-

serves the OCP. One may wonder why the OCP is

built in to the concatenation operation this way, in-

stead of using string-like concatenation and then in-

voking a constraint that merges adjacent, like nodes

in the resulting graph. Such a method, though, can-

not capture violations of the OCP—all would be

merged. The next section shows that the concate-

nation operation defined here can capture violations

by concatenating OCP-violating graph primitives.

This section has thus proved the important prop-

erties of APG(Γ). We now show how such an
APG(Γ) can be used to model autosegmental phe-
nomena in natural language phonology.

7 Analysis of natural language phenomena

In this section we examine the extent to which the

analysis presented here accounts for common and

uncommon phenomena in phonological theory. The

first two subsections examine spreading and con-

tour tones, respectively, and demonstrate how both

phenomena can be effectively represented with a

APG(Γ) for some Γ. It is also shown that the
empirical generalization that there are only finitely

many contour tones present in any given language

is an automatic consequence of the finite alphabet Γ
and the concatenation operation.

The third subsection addresses the few cases

where OCP violations may be necessary to prop-

erly describe the language. It is sketched out how

these cases could be accounted for by using spe-

cial graph primitives or a second concatenation op-

eration. Similarly, the fourth subsection addresses

147



underpecification and floating tones. We conclude

that these concepts can be represented in this ap-

proach. The caveat is that it is also observed as a

consequence that gapped structures are also permit-

ted. Again, we note that such gapped structures are

also permitted with axioms given in §4 approaches
above, and we discuss how a different concatenation

operation may address this.

7.1 Spreading

The ‘merging’ of nodes on the melody tier models

autosegmental spreading, in which one melody unit

is associated to more than one timing tier unit. A

classic example is Mende (Leben, 1973). Mende

nouns separate into tone categories, three of which

are shown in Table 1. The first rows show words

whose syllables are all high-toned, the second rows

show words whose syllables are all low-toned, and

the third rows show words whose syllables start high

and end low. In the following [á] transcribes a high

tone, [à] a low tone, [â] a falling tone.

Monosyllables Disyllables

kÓ ‘war’ pÉlÉ ‘house’
kpà ‘debt’ bÈlÈ ‘pants’
mbû ‘owl’ ngı́là ‘dog’

Trisyllables

háwámá ‘waist’

kpàkàlı̀ ‘three-legged chair’

félàmà ‘junction’

Table 1: Mende word tone

An autosegmental analysis for this pattern is that

a set number of melodies spread left-to-right over

the tone-bearing units (TBUs; we assume that for

Mende the TBU is the syllable, σ) of a word, as in
Table 2. For example, the falling tone words [mbû]

‘owl’ and [félàmà] ‘junction’ have an HLmelody. In

this case, the H associates to the first syllable of the

word, and the L associates to all remaining syllables.

H

kÓ‘war’

H
◗◗❳❳❳

háwámá ‘waist’

HL

mbû ‘owl’

HL
◗◗

félàmà ‘junction’

Table 2: APRs for four Mende words

The APRs in Table 2 can be generated with the al-

phabet of APG graph primitives Γ given in Figure 7.
The alphabet is Σ = {H,L, σ} and the tier partition
T = {Tt, Tm} where Tt = {σ} and Tm = {H,L}.
Note that for these APGs, we abstract away from

consonants and vowels and focus on the TBU, σ.

g(σ́) = H

σ

g(σ̀) = L

σ

g(σ̂) = H L

σ

Figure 7: Γ and g for Mende

The APGs corresponding to the trisyllabic forms

are thus g(σ́σ́σ́) and g(σ́σ̀σ̀), as in Figure 8.

H

σ σ σ

H L

σ σ σ

g(σ́σ́σ́) g(σ́σ̀σ̀)

Figure 8: APGs for Mende APRs in Table 2

These spreading effects are achieved by, for ex-

ample in g(σ́σ́σ́), the like H nodes from each g(σ́)
merging during concatenation, resulting in a single

H associated to multiple σ nodes (which are not
merged, because σ ∈ Tt). Note that given Σ, T ,
Γ and g, we are able to generate APGs directly from
the linear string of toned syllables.

7.2 Contours

Concatenation allows for unbounded spreading, as

a single node on the melody tier may ‘merge’ any

number of times. In contrast, concatenation does not

allow for unbounded contours, as timing tier nodes

do not merge. Figure 9 shows how concatenation

obtains APGs corresponding to the APRs for the

Mende words [mbû] ‘owl’ and [nyàhâ] ‘woman’.

H L

σ

L H L

σ σ

g(σ̂) g(σ̀σ̂)

Figure 9: APGs for Mende contours

148



Importantly, any set of graphs is going to have a

bound on the number of melody units a contour can

have, which follows directly from the fact that Γ is
finite, that each element of Γ has exactly one node
on Vt, and so concatenation never creates new con-
tours. Thus, for the example Γ we have been using
for Mende, the graph in Figure 10 is not inAPG(Γ).

H L H L

σ

Figure 10: A graph not in APG(Γ)

While this is a natural property of graphs in

APG(Γ), the axiomatic approach to defining APRs
requires a further axiom stating that for any lan-

guage, the number of contours must be bound by

some n. To our knowledge, the only explicit formal-
izations of such a constraint are by Jardine (2014)

and Yli-Jyrä (2013) (the latter requiring that n = 2).

7.3 Violations of the OCP

As discussed in Odden (1986) and Meyers (1997),

the OCP may not be an absolute universal. For ex-

ample, Odden lists the contrasting APRs in Figure

11 for two nouns in Kishambaa (Odden, 1986, Fig.

13):

a. H

✡✡
nyoka ‘snake’

b. HH

ngoto ‘sheep’

Figure 11: OCP violating forms in Kishambaa

This is partially motivated by the different surface

pronunciation of the two forms: the first, Figure 11

(a) ‘snake’ is pronounced with two level H tones,

nyóká, and 11 (b) ‘sheep’ is pronounced with a H

followed by a downstepped H; ngó!tó.

The corresponding graphs for these APRs, assum-

ing the mora as the TBU, are given in Figure 12. Fig-

ure 12 (a) corresponds to Figure 11 (a), and Figure

12 (b) to Figure 11 (b).

Given an alphabet of graph primitives obeying the

OCP, as the Γ for Mende in Figure 7, Figure 12 (a)
is in APG(Γ), but Figure 12 (b) is not, because it
does not obey the OCP. Thus, Kishambaa is not de-

scribable with such a graph set APG(Γ).

a. H

µ µ

b. H H

µ µ

Figure 12: APGs for Kishambaa forms

There are at least two solutions to admitting

graphs like in Kishambaa. One is to introduce OCP-

violating graph primitives, as in Figure 13.

g(γ1) = H

µ

g(γ2) = H H

µ

Figure 13: A Γ for Kishambaa

Given this alphabet of graph primitives, the

spreading Kishambaa graph in Figure 12 (a) is

g(γ1γ1), and the OCP-violating (b) is g(γ1γ2). The
graph primitives follow the linear pronunciation of

the morae; g(γ1γ1) represents a sequence HH of two
high-toned morae, and g(γ1γ2) a sequence H

!H of a

high followed by a downstepped high.

Another option is to define a second concatena-

tion operation, in which there is no merging and di-

rected edges are drawn between all last/first pairs.

Spreading Kishambaa graph in Figure 12 (a) would

be concatenated by the operation defined in this

paper, and the OCP-violating Figure 12 (b) would

be concatenated by this second no-merging opera-

tion. We shall leave it up to future work to com-

pare the theoretical and empirical benefits of these

approaches to OCP violations.

7.4 Underspecification and floating tones

Some graph primitives in Γ may not have any nodes
in Vm; these represent underspecified timing units.

H

µ µ

H

µ µ µ

g(γ1) g(γ2) g(γ1γ2γ1)

Figure 14: APGs with underspecification

However, such underspecified graph primitives

149



can give rise to ‘gapped structures’ via concatena-

tion, as in g(γ1γ2γ1) in Figure 14. This can be seen
as an unwelcome consequence as some researchers

have argued against gapped structures (Archangeli

and Pulleyblank, 1994). One solution could be to

use a second concatenation operation which does not

merge nodes, instead only drawing directed edges

between the end nodes on each tier. This appears

identical to the operation proposed in §7.3 for deal-
ing with OCP violations. Again, studying additional

concatenation operations will be left for future work.

Finally, graph primitives with more melody tier

nodes than timing tier nodes can be used to generate

floating tones, as in Figure 15.

H

µ

H L

µ

H L H

µ µ

g(γ1) g(γ2) g(γ2γ1)

Figure 15: Generating APGs with floating tones

8 Dicussion

The examples in the previous section show several

advantages to considering APRs through concatena-

tion. One, as seen in Mende, simple cases allow di-

rect translation of strings into APRs. Second, con-

catenation allows for unbounded spreading, as a sin-

gle node on the melody tier may ‘merge’ any num-

ber of times. However, concatenation does not allow

for unbounded contours, as timing tier nodes do not

merge in this way. Thus, the number of contours is

bounded by the number of graph primitives. This

reflects the fact that languages exhibit unbounded

spreading, but no language (to our knowledge) has

an unbounded number of contour segments.

There are several avenues for future work. It was

already mentioned that the set of valid autosegmen-

tal representations may be expanded by allowing

a second concatenation operation. Also, while we

have shown that every element of APG(Γ) obeys
the axioms in §4, it remains to be shown that for ev-
ery graph which obeys those axioms, there is a finite

alphabet which generates it.

Future work can also study the nature of transfor-

mations from underlying APGs with one alphabet to

surface APGs with another (for instance it is known

surface APGs can admit more contours than under-

lying APGs through association rules).

Another line of development concerns extend-

ing the analysis to feature geometry (Clements and

Hume, 1995; Sagey, 1986), in which association

lines also link featural autosegments and ‘organiza-

tional’ nodes, such as PLACE. Deriving a set of such

operations would require more complex primitives

and additional marking on the tier partition T , to
denote timing tier nodes, organizational nodes, and

melody nodes. The concatenation operation would

then need to be revised to be sensitive to this mark-

ing. A more serious challenge would be adopting

a concatenation-based framework for autosegmen-

tal morphology, which as mentioned in §2, disposes
of the requirement that autosegments of a particular

type must appear on a particular tier.

9 Conclusion

In this paper we addressed the question of what is the

set of valid autosegmental representations looks like.

In contrast to previous research, which explored this

question axiomatically, we showed that the autoseg-

mental representations can be generated recursively

and constructively from a finite set of graph primi-

tives, a concatenation operation, and an identity ele-

ment for concatenation, much in the same way that

strings can be so generated. Hence, the theory of

free monoids may be fruitfully applied to APRs.

The advantages we wish to highlight are as fol-

lows. First, we proved that provided the finite set

of primitives obey the NCC and the OCP, the au-

tosegmental representations will as well. Second,

we showed it also follows naturally from the nature

of the alphabet and concatenation that new contour

tones cannot be generated ad infinitum. Finally, this

method makes clear the stringlike nature of autoseg-

mental representations, and that their properties can

be viewed as a consequence of this nature.

Acknowledgments

The authors would like to thank three reviewers for

their insightful comments and suggestions. The first

author acknowledges support from a University of

Delaware Graduate Research Fellowship.

150



References

Diana Archangeli and Douglas Pulleyblank. 1994.

Grounded Phonology. Cambridge: MIT Press.

Steven Bird and E. Klein. 1990. Phonological events.

Journal of Linguistics, 26:33–56.

G. N. Clements and Elizabeth V. Hume. 1995. The in-

ternal organization of speech sounds. In John Gold-

smith, editor, The handbook of phonological theory,

pages 245–306. Oxford: Blackwell.

G. N. Clements. 1976. Vowel Harmony in Nonlin-

ear Generative Phonology: An Autosegmental Model.

Bloomington: Indiana University Linguistics Club

Publications.

John Coleman and John Local. 1991. The “No Crossing

Constraint” in autosegmental phonology. Linguistics

and Philosophy, 14:295–338.

Joost Engelfriet and Hendrik Jan Hoogeboom. 2001.

MSO definable string transductions and two-way

finite-state transducers. ACM Transations on Compu-

tational Logic, 2:216–254, April.

Joost Engelfriet and Jan Joris Vereijken. 1997. Context-

free graph grammars and concatenation of graphs.

Acta Informatica, 34:773–803.

John Goldsmith. 1976. Autosegmental Phonology.

Ph.D. thesis, Massachussets Institute of Technology.

John Goldsmith. 1979. Autosegmental Phonology.

Gardland Press.

Michael Hammond. 1988. On deriving the

Well-Formedness Condition. Linguistic Inquiry,

19(2):319–325.

Adam Jardine. 2014. Logic and the generative power of

Autosegmental Phonology. In John Kingston, Claire

Moore-Cantwell, Joe Pater, and Robert Staubs, edi-

tors, Supplemental proceedings of the 2013 Meeting

on Phonology (UMass Amherst), Proceedings of the

Annual Meetings on Phonology. LSA.

András Kornai. 1995. Formal Phonology. Garland Pub-

lication.

W. R. Leben. 1973. Suprasegmental phonology. Ph.D.

thesis, Massachussets Institute of Technology.

John J. McCarthy. 1979. Formal Problems in Semitic

Phonology and Morphology. Ph.D. thesis, Mas-

sachusetts Institute of Technology.

John J. McCarthy. 1985. Formal Problems in Semitic

Phonology and Morphology. New York: Garland.

John J. McCarthy. 1986. OCP effects: gemination and

antigemination. Linguistic Inquiry, 17:207–263.

Scott Meyers. 1997. OCP effects in Optimality Theory.

Natural Language & Linguistic Theory, 15(4):847–

892.

David Odden. 1986. On the role of the Obligatory

Contour Principle in phonological theory. Language,

62(2):353–383.

Douglas Pulleyblank. 1986. Tone in Lexical Phonology.

Dordrecht: D. Reidel.

Elizabeth Sagey. 1986. The Representation of Features

and Relations in Non-Linear Phonology. Ph.D. thesis,

Massachusetts Institute of Technology.

Moira Yip. 2002. Tone. Cambridge University Press.

Anssi Yli-Jyrä. 2013. On finite-state tonology with au-

tosegmental representations. In Proceedings of the

11th International Conference on Finite State Meth-

ods and Natural Language Processing, pages 90–98.

Association for Computational Linguistics.

151


