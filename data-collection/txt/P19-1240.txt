



















































Topic-Aware Neural Keyphrase Generation for Social Media Language


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 2516–2526
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

2516

Topic-Aware Neural Keyphrase Generation for Social Media Language

Yue Wang1∗ Jing Li2† Hou Pong Chan1 Irwin King1 Michael R. Lyu1 Shuming Shi2
1Department of Computer Science and Engineering

The Chinese University of Hong Kong, HKSAR, China
2Tencent AI Lab, Shenzhen, China

1{yuewang, hpchan, king,lyu}@cse.cuhk.edu.hk
2{ameliajli,shumingshi}@tencent.com

Abstract

A huge volume of user-generated content is
daily produced on social media. To facil-
itate automatic language understanding, we
study keyphrase prediction, distilling salient
information from massive posts. While most
existing methods extract words from source
posts to form keyphrases, we propose a
sequence-to-sequence (seq2seq) based neural
keyphrase generation framework, enabling ab-
sent keyphrases to be created. Moreover, our
model, being topic-aware, allows joint mod-
eling of corpus-level latent topic representa-
tions, which helps alleviate the data sparsity
that widely exhibited in social media language.
Experiments on three datasets collected from
English and Chinese social media platforms
show that our model significantly outperforms
both extraction and generation models that do
not exploit latent topics.1 Further discussions
show that our model learns meaningful topics,
which interprets its superiority in social media
keyphrase generation.

1 Introduction

As social media continues its worldwide expan-
sion, the last decade has witnessed the revolution
of interpersonal communication. While empow-
ering individuals with richer and fresher informa-
tion, the flourish of social media also results in
millions of posts generated on a daily basis. Fac-
ing a sheer quantity of texts, language understand-
ing has become a daunting task for human beings.
Under this circumstance, there exists a pressing
need for developing automatic systems capable of
absorbing massive social media texts and figuring
out what is important.

*This work was partially done when Yue Wang was an
intern at Tencent AI Lab.

†Jing Li is the corresponding author.
1Our data and code are publicly released in https://

github.com/yuewang-cuhk/TAKG

Source post with keyphrase “super bowl”:
[S]: Somewhere, a wife that is not paying attention
to the game, says ”I want the team in yellow pants
to win.”
Relevant tweets:
[T1]: I been a steelers fan way before black & yel-
low and this super bowl!
[T2]: I will bet you the team with yellow pants wins.
[T3]: Wiz Khalifa song ’black and yellow” to spur
the pittsburgh steelers and Lil Wayne is to sing
”green and yellow’ for the packers.

Table 1: Sample tweets tagged with “super bowl” as
their keyphrases. Blue and italic words can indicate
the topic of super bowl.

In this work, we study the prediction of
keyphrases, generally formed with words or
phrases reflecting main topics conveyed in input
texts (Zhang et al., 2018). Particularly, we fo-
cus on producing keyphrases for social media lan-
guage, proven to be beneficial to a broad range of
applications, such as instant detection of trending
events (Weng and Lee, 2011), summarizing pub-
lic opinions (Meng et al., 2012), analyzing social
behavior (Ruths and Pfeffer, 2014), and so forth.

In spite of the substantial efforts made in social
media keyphrase identification, most progress to
date has focused on extracting words or phrases
from source posts, thus failing to yield keyphrases
containing absent words (i.e., words do not ap-
pear in the post). Such cases are indeed prominent
on social media, mostly attributed to the informal
writing styles of users therein. For example, Ta-
ble 1 shows a tweet S tagged with keyphrase “su-
per bowl” by its author, though neither “super”
nor “bowl” appears in it.2 In our work, distin-
guishing from previous studies, we approach so-
cial media keyphrase prediction with a sequence

2Following common practice (Zhang et al., 2016, 2018),
we consider author-annotated hashtags as tweets’ keyphrases.

https://github.com/yuewang-cuhk/TAKG
https://github.com/yuewang-cuhk/TAKG


2517

generation framework, which is able to create ab-
sent keyphrases beyond source posts.

Our work is built on the success of deep
keyphrase generation models based on neu-
ral sequence-to-sequence (seq2seq) frame-
work (Meng et al., 2017). However, existing
models, though effective on well-edited docu-
ments (e.g., scientific articles), will inevitably
encounter the data sparsity issue when adapted to
social media. It is essentially due to the informal
and colloquial nature of social media language,
which results in limited features available in the
noisy data. For instance, only given the words in
S (Table 1), it is difficult to figure out why “super
bowl” is its keyphrase. However, by looking at
tweets T1 to T3, we can see “yellow pants” is
relevant to “steelers”, a super bowl team. As
“yellow” and “pants” widely appear in tweets
tagged with “super bowl’, it becomes possible to
identify “super bowl” as S’s keyphrase.

Here we propose a novel topic-aware neural
keyphrase generation model that leverages latent
topics to enrich useful features. Our model is
able to identify topic words, naturally indicative
of keyphrases, via exploring post-level word co-
occurrence patterns, such as “yellow” and “pants”
in S. Previous work have shown that corpus-level
latent topics can effectively alleviate data spar-
sity in other tasks (Zeng et al., 2018; Li et al.,
2018). The effects of latent topics, nevertheless,
have never been explored in existing keyphrase
generation research, particularly in the social me-
dia domain. To the best of our knowledge, our
work is the first to study the benefit of leverag-
ing latent topics on social media keyphrase gen-
eration. Also, our model, taking advantage of the
recent advance of neural topic models (Miao et al.,
2017), enables end-to-end training of latent topic
modeling and keyphrase generation.

We experiment on three newly constructed so-
cial media datasets. Two are from English plat-
form Twitter and StackExchange, and the other
from Chinese microblog Weibo. The compari-
son results over both extraction and generation
methods show that our model can better pro-
duce keyphrases, significantly outperforming all
the comparison models without exploiting latent
topics. For example, on Weibo dataset, our model
achieves 34.99% F1@1 compared with 32.01%
yielded by a state-of-the-art keyphrase generation
model (Meng et al., 2017). We also probe into

our outputs and find that meaningful latent top-
ics can be learned, which can usefully indicate
keyphrases. At last, a preliminary study on sci-
entific articles shows that latent topics work better
on text genres with informal language style.

2 Related Work

Our work is mainly in the line of two areas:
keyphrase prediction and topic modeling. We in-
troduce them in turn below.

Keyphrase Prediction. Most previous efforts
on this task adopt supervised or unsupervised
approaches based on extraction — words or
phrases selected from source documents to form
keyphrases. Supervised methods are mostly based
on sequence tagging (Zhang et al., 2016; Golla-
palli et al., 2017) or binary classification using
various features (Witten et al., 1999; Medelyan
et al., 2009). For unsupervised methods, they
are built on diverse algorithms, including graph
ranking (Mihalcea and Tarau, 2004; Wan and
Xiao, 2008), document clustering (Liu et al., 2009,
2010), and statistical models like TF-IDF (Salton
and McGill, 1986).

Our work is especially in the line of social
media keyphrase prediction, where extractive ap-
proaches are widely employed (Zhang et al., 2016,
2018). On the contrary, we predict keyphrases
in a sequence generation manner, allowing the
creation of absent keyphrases. Our work is
inspired by seq2seq-based keyphrase generation
models (Meng et al., 2017; Chen et al., 2018,
2019a,b), which are originally designed for sci-
entific articles. However, their performance will
be inevitably compromised when directly applied
to social media language owing to the data spar-
sity problem. Recently, Wang et al. (2019) pro-
pose a microblog hashtag generation framework,
which explicitly enriches context with user re-
sponses. Different from them, we propose to
leverage corpus-level latent topic representations,
which can be learned without requiring external
data. Its potential usefulness on keyphrase gen-
eration has been ignored in previous research and
will be extensively studied here.

Topic Modeling. Our work is closely related
with topic models that discover latent topics from
word co-occurrence in document level. They are
commonly in the fashion of latent Dirichlet allo-
cation (LDA) based on Bayesian graphical models



2518

Neural Topic Model

! "
σ

GRU GRU GRU…
GRU

$%
&' &( &)

*+,-

*./0

1%

2

*+,-3

Topic-aware Decoder

Sequence Encoder

… …

45
46

47

484/

Figure 1: Our topic-aware neural keyphrase generation
framework (§3).

(Blei et al., 2003). These models, however, rely
on the expertise involvement to customize model
inference algorithms. Our framework exploits the
recently proposed neural topic models (Miao et al.,
2017; Srivastava and Sutton, 2017) to infer latent
topics, which facilitate end-to-end training with
other neural models and do not require model-
specific derivation. It has proven useful for cita-
tion recommendation (Bai et al., 2018) and con-
versation understanding (Zeng et al., 2019). In
particular, Zeng et al. (2018) propose to jointly
train topic models and short text classification,
which cannot fit our scenario due to the large di-
versity of the keyphrases (Wang et al., 2019). Dif-
ferent from them, our latent topics are learned
together with language generation, whose effects
on keyphrase generation have never been explored
before in existing work.

3 Topic-Aware Neural Keyphrase
Generation Model

In this section, we describe our framework that
leverages latent topics in neural keyphrase genera-
tion. Figure 1 shows our overall architecture con-
sisting of two modules — a neural topic model for
exploring latent topics (§3.1) and a seq2seq-based
model for keyphrase generation (§3.2).

Formally, given a collection C with |C| social
media posts {x1,x2, ...,x|C|} as input, we process
each post x into bag-of-words (BoW) term vector
xbow and word index sequence vector xseq. xbow
is a V -dim vector over the vocabulary (V being
the vocabulary size). It is fed into the neural topic
model following the BoW assumption (Miao et al.,
2017). xseq serves as the input for the seq2seq-
based keyphrase generation model.

Below we first introduce our two modules and
then describe how they are jointly trained (§3.3).

3.1 Neural Topic Model

Our neural topic model (NTM) module is inspired
by Miao et al. (2017) based on variational auto-
encoder (Kingma and Welling, 2013), which con-
sists of an encoder and a decoder to resemble the
data reconstruction process.

Specifically, the input xbow is first encoded into
a continuous latent variable z (representing x’s
topic) by a BoW encoder. Then the BoW decoder,
conditioned on z, attempts to reconstruct x and
outputs a BoW vector x′bow. Particularly, the de-
coder simulates topic model’s generation process.
We then describe their division of labor.

BoW Encoder. The BoW encoder is responsi-
ble for estimating prior variables µ and σ, which
will be used to induce intermediate topic represen-
tation z. We adopt the following formula:

µ = fµ(fe(xbow)), log σ = fσ(fe(xbow)), (1)

where f∗(·) is a neural perceptron with an ReLU-
activated function following Zeng et al. (2018).

BoW Decoder. Analogous to LDA-style topic
models, it is assumed that there are K topics un-
derlying the given corpus C. Each topic k is repre-
sented with a topic-word distribution φk over the
vocabulary, and each post x ∈ C has a topic mix-
ture denoted by θ, a K-dim distributional vector.
Specifically in neural topic model, θ is constructed
by Gaussian softmax (Miao et al., 2017). The de-
coder hence takes the following steps to simulate
how each post x is generated:
• Draw latent topic variable z ∼ N (µ, σ2)
• Topic mixture θ = softmax(fθ(z))
• For each word w ∈ x

– Draw w ∼ softmax(fφ(θ))
Here f∗(·) is also a ReLU-activated neural per-
ceptron for inputs. In particular, we employ the
weight matrix of fφ(·) as the topic-word distribu-
tions (φ1, φ2, ..., φK). In the following, we adopt
the topic mixture θ as the topic representations to
guide keyphrase generation.

3.2 Neural Keyphrase Generation Model

Here we describe how we generate keyphrases
with a topic-aware seq2seq model, which incor-
porates latent topics (learned by NTM) in its gen-
eration process. Below comes more details.



2519

Overview. The keyphrase generation module
(KG model) is fed with source post x in its word
sequence form xseq = 〈w1, w2, ..., w|x|〉 (|x| is
the number of words in x). Its target is to out-
put a word sequence y as x’s keyphrase. Particu-
larly, for a source post with multiple gold-standard
keyphrases, we follow the practice in Meng et al.
(2017) to pair its copies with each of the gold stan-
dards to form a training instance.

To generate keyphrases for source posts, the
KG model employs a seq2seq model. The se-
quence encoder distills indicative features from
an input source post. The decoder then generates
its keyphrase, conditioned on the encoded features
and the latent topics yielded by NTM (henceforth
topic-aware sequence decoder).

Sequence Encoder. We employ a bidirectional
gated recurrent unit (Bi-GRU) (Cho et al., 2014)
to encode the input source sequence. Each word
wi ∈ xseq (i = 1, 2, ..., |x|) is first embedded into
an embedding vector νi, and then mapped into for-
ward and backward hidden states (denoted as

−→
hi

and
←−
hi) with the following defined operations:

−→
hi = fGRU (νi,hi−1), (2)

←−
hi = fGRU (νi,hi+1). (3)

The concatenation of
−→
hi and

←−
hi, [
−→
hi;
←−
hi], serves

as wi’s hidden state in encoder, denoted as hi.
Finally, we construct a memory bank: M =
〈h1,h2, ...,h|x|〉, for decoder’s attentive retrieval.

Topic-Aware Sequence Decoder. In general,
conditioned on the memory bank M and latent
topic θ from NTM, we define the process to gener-
ate its keyphrase y with the following probability:

Pr(y |x) =
|y|∏
j=1

Pr(yj |y<j ,M, θ), (4)

where y<j = 〈y1, y2, ..., yj−1〉. And
Pr(yj |y<j ,M, θ), denoted as pj , is a word
distribution over vocabulary, reflecting how likely
a word to fill in the j-th slot in target keyphrase.
Below we describe the procedure to obtain pj .

Our sequence decoder employs a unidirectional
GRU layer. Apart from the general state update,
the j-th hidden state sj is further designed to take
input x’s topic mixture θ into consideration:

sj = fGRU ([uj ; θ], sj−1), (5)

where uj is the j-th embedded decoder input3 and
sj−1 is the previous hidden state. Here [; ] denotes
the concatenation operation.

The decoder also looks at M (learned by se-
quence encoder) and puts an attention on it to cap-
ture important information. When predicting the
j-th word in keyphrase, the attention weights on
wi ∈ xseq is defined as:

αij =
exp(fα(hi, sj , θ))∑|x|
i′=1 exp(fα(hi′ , sj , θ))

, (6)

where

fα(hi, sj , θ) = v
T
α tanh(Wα[hi; sj ; θ] + bα).

(7)
Here vα, Wα, and bα are trainable parameters.
fα(·) measures the semantic relations between the
i-th word in the source and the j-th target word
to be predicted. Such relations are also calibrated
with the input’s latent topic θ in order to explore
and highlight topic words. We hence obtain the
topic sensitive context vector cj with:

cj =

|x|∑
i=1

αijhi. (8)

Further, conditioned on cj , we generate the j-th
word over the global vocabulary according to:

pgen = softmax(Wgen[sj ; cj ] + bgen). (9)

In addition, we adopt copy mechanism (See
et al., 2017) following Meng et al. (2017), which
allows keywords to be directly extracted from the
source input. Specifically, we adopt a soft switcher
λj ∈ [0, 1] to determine whether to copy a word
from source as the j-th target word:

λj = sigmoid(Wλ[uj ; sj ; cj ; θ] + bλ), (10)

with Wλ and bλ being learnable parameters.
Topic information θ is also injected here to guide
the switch decision.

Finally, we obtain distribution pj for predicting
the j-th target word with the formula below:

pj = λj · pgen + (1− λj) ·
|x|∑
i=1

αij , (11)

where attention scores {αij}|x|i=1 serve as the ex-
tractive distribution over the source input.

3We take the previous word from gold standards in train-
ing by teacher forcing and from the predicted word in test.



2520

3.3 Jointly Learning Topics and Keyphrases
Our neural framework allows end-to-end learning
of latent topic modeling and keyphrase genera-
tion. We first define objective functions for the
two modules respectively.

For NTM, the objective function is defined
based on negative variational lower bound (Blei
et al., 2016). Here due to space limitation, we omit
the derivation details already described in Miao
et al. (2017), and directly give its loss function:

LNTM = DKL(p(z) || q(z |x))−Eq(z |x)[p(x | z)],
(12)

where the first term is the Kullback-Leibler di-
vergence loss and the second term reflects the re-
construction loss. p(z) denotes a standard normal
prior. q(z |x) and p(x | z) represent the process of
BoW encoder and BoW decoder respectively.

For KG model, we minimize the cross entropy
loss over all training instances:

LKG = −
N∑
n=1

log(Pr(yn |xn, θn)), (13)

where N denotes the number of training instances
and θn is xn’s latent topics induced from NTM.

Finally, we define the entire framework’s train-
ing objective with the linear combination of
LNTM and LKG:

L = LNTM + γ · LKG, (14)

where the hyper-parameter γ balances the ef-
fects of NTM and KG model. Our two mod-
ules can be jointly trained with their parameters
updated simultaneously. For inference, we adopt
beam search and generate a ranking list of output
keyphrases following Meng et al. (2017).

4 Experiment Setup

Datasets. We conduct experiments on three so-
cial media datasets collected from two English on-
line platforms, Twitter and StackExchange, and
a Chinese microblog website, Weibo. Twitter and
Weibo are microblogs encouraging users to freely
post with a wide range of topics, while Stack-
Exchange, an online Q&A forum, are mainly for
question asking (with a title and a description) and
seeking answers from others.

The Twitter dataset contains tweets from TREC
2011 microblog track.4 For Weibo dataset, we first

4http://trec.nist.gov/data/tweets/

Source posts # of Avg len # of KP Source
posts per post per post vocab

Twitter 44,113 19.52 1.13 34,010
Weibo 46,296 33.07 1.06 98,310
StackExchange 49,447 87.94 2.43 99,775

Target KP |KP| Avg len % of Target
per KP abs KP vocab

Twitter 4,347 1.92 71.35 4,171
Weibo 2,136 2.55 75.74 2,833
StackExchange 12,114 1.41 54.32 10,852

Table 2: Data statistics of source posts (on the top) and
target keyphrases (on the bottom). Avg len: the average
number of tokens. KP: keyphrases. Abs KP: absent
keyphrases. |KP|: the number of distinct keyphrases.

tracked the real-time trending hashtags in Jan-Aug
2014,5 and then used them as keywords to search
posts with hashtag-search API.6 And the StackEx-
change dataset is randomly sampled from a pub-
licly available raw corpus.7

For the target keyphrases, we employ user-
annotated hashtags for Twitter and Weibo follow-
ing Zhang et al. (2016), and author-assigned tags
(e.g., “artificial-intelligence”) for StackExchange.
Posts without such keyphrase tags are hence re-
moved from the datasets. Particularly, for Stack-
Exchange, we concatenate the question title to-
gether with its description as the source input. For
Twitter and Weibo source posts, we retain tokens
in hashtags (without # symbols) for those appear-
ing in the middle of posts, since they generally
act as semantic elements and thus considered as
present keyphrases (Zhang et al., 2016). For those
appearing before or after a post, we remove the en-
tire hashtags and regard them as absent keyphrases
as is done in Wang et al. (2019).

For model training and evaluation, we split the
data into three subsets with 80%, 10%, and 10%,
corresponding to training, development, and test
set. The statistics of the three datasets are shown
in Table 2. As can be seen, over 50% of the
keyphrases do not appear in their source posts,
thus extractive approaches will fail in dealing with
these posts. We also observe that StackExchange
exhibits different keyphrase statistics compared to
either Twitter or Weibo, with more keyphrases ap-
pearing in one post and more diverse keyphrases.

5http://open.weibo.com/wiki/Trends/
6http://www.open.weibo.com/wiki/2/
7https://archive.org/details/

stackexchange

http://trec.nist.gov/data/tweets/
http://open.weibo.com/wiki/Trends/
http://www.open.weibo.com/wiki/2/
https://archive.org/details/stackexchange
https://archive.org/details/stackexchange


2521

Preprocessing. For Twitter dataset, we em-
ployed Twitter preprocessing toolkit in Bazio-
tis et al. (2017) for source post and hashtag
(keyphrase) tokenization. Chinese Weibo data was
preprocessed with Jieba toolkit8 for word segmen-
tation, and English StackExchange data with nat-
ural language toolkit (NLTK) for tokenization.9

We further take the following preprocessing
steps for each of the three datasets: First,
posts with meaningless keyphrases (e.g., single-
character ones) were filtered out; also re-
moved were non-alphabetic (for English data) and
retweet-only (e.g., “RT”) posts. Second, links,
mentions (@username), and digits were replaced
with generic tags “URL”, “MENT”, and “DIGIT”
following Wang et al. (2019). Third, a vocabulary
was maintained, with 30K most frequent words for
Twitter, and 50K for Weibo and StackExchange
each. For BoW vocabulary of the input xbow for
NTM, stop words and punctuation were removed.

Parameter Settings. We implement our model
based on the pytorch framework in Paszke et al.
(2017). For NTM, we implement it following the
design10 in Zeng et al. (2018) and set topic num-
ber K to 50. The KG model is set up mostly
based on Meng et al. (2017). For its sequence en-
coder, we adopt two layers of bidirectional GRU
and one layer of unidirectional GRU for its de-
coder. The hidden size of the GRU is 300 (for bi-
GRU, 150 for each direction). For the embedding,
its size is set to 150 and values are randomly ini-
tialized. We apply Adam (Kingma and Ba, 2014)
with initial learning rate as 1e−3. In training pro-
cess, gradient clipping = 1.0 is conducted to sta-
bilize the training. Early-stopping strategy (Caru-
ana et al., 2001) is adopted based on the validation
loss. Before joint training, we pretrain NTM for
100 epochs and KG model for 1 epoch as the con-
vergence speed of NTM is much slower than the
KG model. We empirically set the γ = 1.0 for
balancing NTM and KG loss (Eq. 14) and itera-
tively update the parameters in each module and
then their combination in turn.

Comparisons. In comparison, we first consider
a simple baseline selecting majority keyphrases
(henceforth MAJORITY) — the top K keyphrases
ranked by their frequency in training data are used

8https://github.com/fxsjy/jieba
9https://www.nltk.org/

10https://github.com/zengjichuan/TMN

as the keyphrases for all test instances. We also
compare with the following extractive baselines,
where n-grams (n = 1, 2, 3) in source posts are
ranked by TF-IDF scores (henceforth TF-IDF),
TextRank algorighm (Mihalcea and Tarau, 2004)
(henceforth TEXTRANK), and KEA system (Wit-
ten et al., 1999) (henceforth KEA). We also com-
pare with a neural state-of-the-art keyphrase ex-
traction model based on sequence tagging (Zhang
et al., 2016) (henceforth SEQ-TAG). In addition,
we take the following state-of-the-art keyphrase
generation models into consideration: seq2seq
model with copy mechanism (Meng et al., 2017)
(henceforth SEQ2SEQ-COPY) and its variation
SEQ2SEQ without copy mechanism, SEQ2SEQ-
CORR (Chen et al., 2018) exploiting keyphrase
correlations, and TG-NET (Chen et al., 2019b)
jointly modeling of titles and descriptions (thereby
only tested on StackExchange).

5 Experimental Results

In the experiment, we first evaluate our perfor-
mance on keyphrase prediction (§5.1). Then, we
study whether jointly learning keyphrase gener-
ation can in turn help produce coherent topics
(§5.2). At last, further discussions (§5.3) are pre-
sented with an ablation study, a case study, and an
analysis for varying text genres.

5.1 Keyphrase Prediction Results
In this section, we examine our performance in
predicting keyphrases for social media. We first
discuss the main comparison results, followed by
a discussion for present and absent keyphrases.

Popular information retrieval metrics macro-
average F1@K and mean average precision
(MAP) are adopted for evaluation. Here for Twit-
ter and Weibo, most posts are tagged with one
keyphrase on average (Table 2), thus F1@1 and
F1@3 are reported. For StackExchange, we report
F1@3 and F1@5, because on average, posts have
2.4 keyphrases. MAP is measured over the top 5
predictions for all three datasets. For keyphrase
matching, we consider keyphases after stemmed
by Porter Stemmer following Meng et al. (2017).

Main Comparison Discussion. Table 3 shows
the main comparison results on our three datasets,
where higher scores indicate better performance.
From all three datasets, we observe:
• Social media keyphrase prediction is chal-

lenging. As can be seen, all simple baselines give

https://github.com/fxsjy/jieba
https://www.nltk.org/
https://github.com/zengjichuan/TMN


2522

Model Twitter Weibo StackExchange
F1@1 F1@3 MAP F1@1 F1@3 MAP F1@3 F1@5 MAP

Baselines
MAJORITY 9.36 11.85 15.22 4.16 3.31 5.47 1.79 1.89 1.59
TF-IDF 1.16 1.14 1.89 1.90 1.51 2.46 13.50 12.74 12.61
TEXTRANK 1.73 1.94 1.89 0.18 0.49 0.57 6.03 8.28 4.76
KEA 0.50 0.56 0.50 0.20 0.20 0.20 15.80 15.23 14.25
State of the arts
SEQ-TAG 22.79±0.3 12.27±0.2 22.44±0.3 16.34±0.2 8.99±0.1 16.53±0.3 17.58±1.6 12.82±1.2 19.03±1.3
SEQ2SEQ 34.10±0.5 26.01±0.3 41.11±0.3 28.17±1.7 20.59±0.9 34.19±1.7 22.99±0.3 20.65±0.2 23.95±0.3
SEQ2SEQ-COPY 36.60±1.1 26.79±0.5 43.12±1.2 32.01±0.3 22.69±0.2 38.01±0.1 31.53±0.1 27.41±0.2 33.45±0.1
SEQ2SEQ-CORR 34.97±0.8 26.13±0.4 41.64±0.5 31.64±0.7 22.24±0.5 37.47±0.8 30.89±0.3 26.97±0.2 32.87±0.6
TG-NET - - - - - - 32.02±0.3 27.84±0.3 34.05±0.4
Our model 38.49±0.3 27.84±0.0 45.12±0.2 34.99±0.3 24.42±0.2 41.29±0.4 33.41±0.2 29.16±0.1 35.52±0.1

Table 3: Main comparison results displayed with average scores (in %) and their standard deviations over the
results with 5 sets of random initialization seeds. Boldface scores in each column indicate the best results. Our
model significantly outperforms all comparisons on all three datasets (p < 0.05, paired t-test).

poor performance. This indicates that predicting
keyphrases for social media language is a chal-
lenging task. It is impossible to rely on simple
statistics or rules to yield good results.
• Seq2seq-based keyphrase generation models

are effective. Compared to the extractive base-
lines and SEQ-TAG, seq2seq-based models per-
form much better. It is because social media’s
informal language style results in a large amount
of absent keyphrases (Table 2), which is impossi-
ble for extractive methods to make correct predic-
tions. We also find SEQ2SEQ-COPY better than
SEQ2SEQ, suggesting the effectiveness to com-
bine source word extraction with word generation
when predicting keyphrases.
• Latent topics are consistently helpful for in-

dicating keyphrases. It is observed that our model
achieves the best results, significantly outperform-
ing all comparisons by a large margin. This
shows the usefulness of leveraging latent topics
in keyphrase prediction. Interestingly, compared
with StackExchange, we achieve larger improve-
ments for Twitter and Weibo, both exhibiting more
informal nature and prominent word order misuse.
For such text genres, latent topics, learned under
BoW assumption, are more helpful.

Also, the following interesting points can be ob-
served by comparing results across datasets:
• Keyphrase generation is more challeng-

ing for StackExchange. When MAP scores of
seq2seq-based methods are compared over the
three datasets, we find that the scores on Stack-
Exchange are generally lower. It is probably at-
tributed to the data characteristics of more diverse
keyphrases and larger target vocabulary (Table 2).

• Twitter and Weibo data is noisier. We no-
tice that TF-IDF, TEXTRANK, and KEA per-
form much worse than MAJORITY, while the op-
posite is observed on StackExchange. It is because
Twitter and Weibo, as microblogs, contain shorter
posts (Table 2) and exhibit more informal lan-
guage styles. In general, models relying on simple
word statistics would suffer from such noisy data.

Twitter Weibo StackExchange

40

50

60

70

80

90

(a
) P

re
se

nt
 F

1@
1 

(%
)

Seq-Tag
Seq2Seq
Seq2Seq-Copy
Seq2Seq-Corr
TG-Net
Our model

Twitter Weibo StackExchange
20

25

30

35

40

45

(b
) A

bs
en

t R
@

5 
(%

)

Seq2Seq
Seq2Seq-Copy
Seq2Seq-Corr
TG-Net
Our model

Figure 2: The prediction results for present (on the
top) and absent keyphrases (on the bottom, R@5: re-
call@5). For present cases, from left to right shows
the results of SEQ-TAG, SEQ2SEQ, SEQ2SEQ-COPY,
SEQ2SEQ-CORR, TG-NET (only for StackExchange),
and our model. For absent cases, models (except SEQ-
TAG) are shown in the same order.

Present and Absent Keyphrase Prediction.
We further discuss how our model performs in
producing present and absent keyphrases. The
comparison results with all neural-based models
are shown in Figure 2. Here F1@1 is adopted
for evaluating the prediction of present keyphrases
and recall@5 for absent keyphrases.



2523

Datasets Twitter StackExchange
LDA 41.12 35.13
BTM 43.12 43.52
NTM 43.82 43.04
Our model 46.28 45.12

Table 4: CV topic coherence score comparison on our
two English datasets. Higher scores indicate better co-
herence. Our model produces the best scores.

The results indicate that our model consistently
outperforms comparison models in predicting ei-
ther absent or present keyphrases. Also, interest-
ingly, copy mechanism seems to somehow sac-
rifice the performance on absent keyphrase gen-
eration for correctly extracting the present ones.
Such side effects, however, are not observed on
our model. It is probably attributed to our ability
to associate posts with corpus-level topics, hence
enabling absent keywords from other posts to be
“copied”. This observation also demonstrates the
latent topics can help our model to better decide
whether to copy (Eq. 10).

5.2 Latent Topic Analysis

We have shown latent topics useful for social me-
dia keyphrase generation in §5.1. Here we analyze
whether our model can learn meaningful topics.

Coherence Score Comparison. We first evalu-
ate topic coherence with an automatic CV mea-
sure. Here we employ Palmetto toolkit11 (Röder
et al., 2015) on the top 10 words from each la-
tent topic following Zeng et al. (2018). The re-
sults are only reported on English Twitter and
StackExchange because Palmetto does not sup-
port Chinese. For comparisons, we consider LDA
(implemented with a gensim LdaMulticore pack-
age12), BTM13 (Yan et al., 2013) (a state-of-the-
art topic model specifically for short texts), and
NTM (Miao et al., 2017). For LDA and BTM, we
run Gibbs sampling with 1, 000 iterations to en-
sure convergence. From the results in Table 4, we
observe that our model outperforms all the com-
parison topic models by large margins, which im-
plies that jointly exploring keyphrase generation
can in turn help produce coherent topics.

11https://github.com/dice-group/
Palmetto/

12https://pypi.org/project/gensim/
13https://github.com/xiaohuiyan/BTM

Sample Topics. To further evaluate whether our
model can produce coherent topics qualitatively,
we probe into some sample words (Table 5) re-
flecting the topic “super bowl” discovered by var-
ious models from Twitter. As can be seen, there
are mixed non-topic words 14 in LDA’s, BTM’s,
and NTM’s sample topic. Compared with them,
our inferred topic looks more coherent. For exam-
ple, “steeler” and “packer”, names of super bowl
teams, are correctly included into the cluster.

LDA
bowl super quote steeler jan watching
egypt playing glee girl

BTM
bowl super anthem national christina
aguilera fail word brand playing

NTM
super bowl eye protester winning
watch halftime ship sport mena

Our
model

bowl super yellow green packer steeler
nom commercial win winner

Table 5: Top 10 terms for latent topics “super bowl”.
Red and underlined words indicate non-topic words.

5.3 Further Discussions

Ablation Study. We compare the results of our
full model and its four ablated variants to ana-
lyze the relative contributions of topics on dif-
ferent components. The results in Table 6 indi-
cate the competitive effect of topics on decoder
attention and that on hidden states, but combin-
ing them both help our full model achieve the best
performance. We also observe that pre-trained
topics only bring a small boost, indicated by the
close scores yielded by our model (separate train)
and SEQ2SEQ-COPY. This suggests that the joint
training is crucial to better absorb latent topics.

Model Twitter Weibo SE
SEQ2SEQ-COPY 36.60 32.01 31.53
Our model (separate train) 36.75 32.75 31.78
Our model (w/o topic-attn) 37.24 32.42 32.34
Our model (w/o topic-state) 37.44 33.48 31.98
Our full model 38.49 34.99 33.41

Table 6: Comparison results of our ablation models on
three datasets (SE: StackExchange) — separate train:
our model with pre-trained latent topics; w/o topic-attn:
decoder attention without topics (Eq. 7); w/o topic-
state: decoder hidden states without topics (Eq. 5). We
report F1@1 for Twitter and Weibo, F1@3 for Stack-
Exchange. Best results are in bold.

14Non-topic words refer to words that cannot clearly indi-
cate the corresponding topic, including off-topic words more
likely to reflect other topics.

https://github.com/dice-group/Palmetto/
https://github.com/dice-group/Palmetto/
https://pypi.org/project/gensim/
https://github.com/xiaohuiyan/BTM


2524

Case Study. We feed the tweet S in Table 1
into both SEQ2SEQ-COPY and our model. Even-
tually our model correctly predicts the keyphrase
as “super bowl” while SEQ2SEQ-COPY gives a
wrong prediction “team follow back” (posted to
ask other to follow back). To analyze the rea-
son behind, we visualize the attention weights of
two models in Figure 3. It can be seen that both
models highlight the common word “team”, which
frequently appears in “team follow back”-tagged
tweets. By joint modeling of latent topics, our
model additionally emphasizes topic words “yel-
low” and “pants”, which are signals indicating a
super bowl team steeler (also reflected in the 1st

topic) and thus helpful to correctly generate “super
bowl” as its keyphrase. Without such topic guid-
ance, SEQ2SEQ-COPY wrongly predicts a com-
mon but unrelated term “team follow back”.

wif
e

pa
yin

g
att

en
tio

n

ga
me

wa
nt

tea
m

ye
llow

pa
nts

win

super

bowl

(a
) S

eq
2S

eq
-C

op
y

super

bowl

(b
) O

ur
 M

od
el

1st Topic steeler national team packer win

Figure 3: Attention visualization for the sample post in
Table 1. Only non-stopwords are selected. The table
below shows the top five words for the 1st topic.

Topic-Aware KG for Other Text Genres. We
have shown the effectiveness of latent topics on
social media keyphrase generation. To examine
how they affect in identifying keyphrases for well-
edited language, we also experiment on the tra-
ditional scientific article datasets (Meng et al.,
2017), but limited improvements are observed.
Latent topics can better help keyphrase genera-
tion on social media, probably because there are
larger proportion of keyphrases with absent words
(Figure 4), where latent topics can cluster relevant
posts and enrich the source contexts. Another pos-
sible reason lies in that social media language ex-
hibits prominent arbitrary word orders. Thus la-
tent topics, learned under BoW assumption, can
better provide useful auxiliary features.

1 2 3 >3
10
20
30
40
50
60
70
80
90

Pr
op

ro
tio

n 
of

 A
bs

en
t K

ey
ph

ra
se

 (%
)

Twitter
Weibo

StackExchange
KP20k

Inspec
Krapivin

SemEval
NUS

Figure 4: Proportion of absent n-gram keyphrases (n:
1, 2, 3, > 3). The dashed lines with ‘*’ marks: the five
scientific article datasets used in Meng et al. (2017).

6 Conclusion and Future Work

We have presented a novel social media keyphrase
generation model that allows the joint learning of
latent topic representations. Experimental results
on three newly constructed social media datasets
show that our model significantly outperforms
state-of-the-art methods in keyphrase prediction,
meanwhile produces more coherent topics. Fur-
ther analysis interprets our superiority to discover
key information from noisy social media data.

In the future, we will explore how to explic-
itly leverage the topic-word distribution to further
improve the performance. Also, our topic-aware
neural keyphrase generation model can be investi-
gated in a broader range of text generation tasks.

Acknowledgements

This work is supported by the Research Grants
Council of the Hong Kong Special Administrative
Region, China (No. CUHK 14208815 and No.
CUHK 14210717 of the General Research Fund).
We thank ACL reviewers for their insightful sug-
gestions on various aspects of this work.

References

Haoli Bai, Zhuangbin Chen, Michael R. Lyu, Irwin
King, and Zenglin Xu. 2018. Neural relational topic
models for scientific article analysis. In Proceed-
ings of ACM International Conference on Informa-
tion and Knowledge Management.

Christos Baziotis, Nikos Pelekis, and Christos Doulk-
eridis. 2017. Datastories at semeval-2017 task 4:
Deep LSTM with attention for message-level and
topic-based sentiment analysis. In Proceedings of
the North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies.



2525

David M. Blei, Alp Kucukelbir, and Jon D. McAuliffe.
2016. Variational inference: A review for statisti-
cians. CoRR, abs/1601.00670.

David M. Blei, Andrew Y. Ng, and Michael I. Jordan.
2003. Latent dirichlet allocation. Journal of Ma-
chine Learning Research.

Rich Caruana, Steve Lawrence, and C Lee Giles. 2001.
Overfitting in neural nets: Backpropagation, conju-
gate gradient, and early stopping. In Proceedings of
Neural Information Processing Systems.

Jun Chen, Xiaoming Zhang, Yu Wu, Zhao Yan, and
Zhoujun Li. 2018. Keyphrase generation with cor-
relation constraints. In Proceedings of Empirical
Methods in Natural Language Processing.

Wang Chen, Hou Pong Chan, Piji Li, Lidong Bing,
and Irwin King. 2019a. An integrated approach for
keyphrase generation via exploring the power of re-
trieval and extraction. In Proceedings of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies.

Wang Chen, Yifan Gao, Jiani Zhang, Irwin King, and
Michael R. Lyu. 2019b. Title-guided encoding for
keyphrase generation. In Proceedings of AAAI Con-
ference on Artificial Intelligence.

Kyunghyun Cho, Bart van Merrienboer, Çaglar
Gülçehre, Dzmitry Bahdanau, Fethi Bougares, Hol-
ger Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using RNN encoder-decoder
for statistical machine translation. In Proceedings
of Empirical Methods in Natural Language Process-
ing.

Sujatha Das Gollapalli, Xiaoli Li, and Peng Yang.
2017. Incorporating expert knowledge into
keyphrase extraction. In Proceedings of AAAI Con-
ference on Artificial Intelligence.

Diederik P. Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. In Proceedings
of International Conference on Learning Represen-
tations.

Diederik P Kingma and Max Welling. 2013. Auto-
encoding variational bayes. arXiv preprint
arXiv:1312.6114.

Jing Li, Yan Song, Zhongyu Wei, and Kam-Fai Wong.
2018. A joint model of conversational discourse and
latent topics on microblogs. Journal of Computa-
tional Linguistics.

Zhiyuan Liu, Wenyi Huang, Yabin Zheng, and
Maosong Sun. 2010. Automatic keyphrase extrac-
tion via topic decomposition. In Proceedings of Em-
pirical Methods in Natural Language Processing.

Zhiyuan Liu, Peng Li, Yabin Zheng, and Maosong
Sun. 2009. Clustering to find exemplar terms for
keyphrase extraction. In Proceedings of Empirical
Methods in Natural Language Processing.

Olena Medelyan, Eibe Frank, and Ian H. Witten.
2009. Human-competitive tagging using automatic
keyphrase extraction. In Proceedings of Empirical
Methods in Natural Language Processing.

Rui Meng, Sanqiang Zhao, Shuguang Han, Daqing
He, Peter Brusilovsky, and Yu Chi. 2017. Deep
keyphrase generation. In Proceedings of Associa-
tion for Computational Linguistics.

Xinfan Meng, Furu Wei, Xiaohua Liu, Ming Zhou, Su-
jian Li, and Houfeng Wang. 2012. Entity-centric
topic-oriented opinion summarization in twitter. In
Proceedings of ACM International Conference on
Knowledge Discovery and Data Mining.

Yishu Miao, Edward Grefenstette, and Phil Blunsom.
2017. Discovering discrete latent topics with neu-
ral variational inference. In Proceedings of Interna-
tional Conference on Machine Learning.

Rada Mihalcea and Paul Tarau. 2004. Textrank: Bring-
ing order into text. In Proceedings of Empirical
Methods in Natural Language Processing.

Adam Paszke, Sam Gross, Soumith Chintala, Gre-
gory Chanan, Edward Yang, Zachary DeVito, Zem-
ing Lin, Alban Desmaison, Luca Antiga, and Adam
Lerer. 2017. Automatic differentiation in pytorch.
In Proceedings of Neural Information Processing
Systems.

Michael Röder, Andreas Both, and Alexander Hinneb-
urg. 2015. Exploring the space of topic coherence
measures. In Proceedings of ACM International
Conference on Web Search and Data Mining.

Derek Ruths and Jürgen Pfeffer. 2014. Social media
for large studies of behavior. Journal of Science.

Gerard Salton and Michael J McGill. 1986. Introduc-
tion to modern information retrieval.

Abigail See, Peter J. Liu, and Christopher D. Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In Proceedings of Association
for Computational Linguistics.

Akash Srivastava and Charles Sutton. 2017. Autoen-
coding variational inference for topic models. arXiv
preprint arXiv:1703.01488.

Xiaojun Wan and Jianguo Xiao. 2008. Single doc-
ument keyphrase extraction using neighborhood
knowledge. In Proceedings of AAAI Conference on
Artificial Intelligence.

Yue Wang, Jing Li, Irwin King, Michael R. Lyu, and
Shuming Shi. 2019. Microblog hashtag generation
via encoding conversation contexts. In Proceedings
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies.

Jianshu Weng and Bu-Sung Lee. 2011. Event detection
in twitter. In Proceedings of AAAI conference on
weblogs and social media.



2526

Ian H. Witten, Gordon W. Paynter, Eibe Frank, Carl
Gutwin, and Craig G. Nevill-Manning. 1999. KEA:
practical automatic keyphrase extraction. In Pro-
ceedings of ACM conference on Digital Libraries.

Xiaohui Yan, Jiafeng Guo, Yanyan Lan, and Xueqi
Cheng. 2013. A biterm topic model for short texts.
In Proceedings of international conference on World
Wide Web.

Jichuan Zeng, Jing Li, Yulan He, Cuiyun Gao,
Michael R. Lyu, and Irwin King. 2019. What you
say and how you say it: Joint modeling of topics and
discourse in microblog conversations. Transactions
of Association for Computational Linguistics.

Jichuan Zeng, Jing Li, Yan Song, Cuiyun Gao,
Michael R. Lyu, and Irwin King. 2018. Topic mem-
ory networks for short text classification. In Pro-
ceedings of Empirical Methods in Natural Language
Processing.

Qi Zhang, Yang Wang, Yeyun Gong, and Xuanjing
Huang. 2016. Keyphrase extraction using deep re-
current neural networks on twitter. In Proceedings
of Empirical Methods in Natural Language Process-
ing.

Yingyi Zhang, Jing Li, Yan Song, and Chengzhi Zhang.
2018. Encoding conversation context for neural
keyphrase extraction from microblog posts. In Pro-
ceedings of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies.


