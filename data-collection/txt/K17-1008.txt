



















































Named Entity Disambiguation for Noisy Text


Proceedings of the 21st Conference on Computational Natural Language Learning (CoNLL 2017), pages 58–68,
Vancouver, Canada, August 3 - August 4, 2017. c©2017 Association for Computational Linguistics

Named Entity Disambiguation for Noisy Text

Yotam Eshel1 Noam Cohen1 Kira Radinsky1,2
Shaul Markovitch1 Ikuda Yamada3 Omer Levy4

1Technion - Israel Institute of Technology, Haifa, Israel
2eBay Research, Israel

3Studio Ousia, Fujisawa, Kanagawa, Japan
4University of Washington, Seattle, WA

Abstract

We address the task of Named Entity
Disambiguation (NED) for noisy text.
We present WikilinksNED, a large-scale
NED dataset of text fragments from the
web, which is significantly noisier and
more challenging than existing news-
based datasets. To capture the limited
and noisy local context surrounding each
mention, we design a neural model and
train it with a novel method for sam-
pling informative negative examples. We
also describe a new way of initializing
word and entity embeddings that signifi-
cantly improves performance. Our model
significantly outperforms existing state-of-
the-art methods on WikilinksNED while
achieving comparable performance on a
smaller newswire dataset.

1 Introduction

Named Entity Disambiguation (NED) is the task
of linking mentions of entities in text to a given
knowledge base, such as Freebase or Wikipedia.
NED is a key component in Entity Linking (EL)
systems, focusing on the disambiguation task it-
self, independently from the tasks of Named En-
tity Recognition (detecting mention bounds) and
Candidate Generation (retrieving the set of poten-
tial candidate entities). NED has been recognized
as an important component in NLP tasks such as
semantic parsing (Berant and Liang, 2014).

Current research on NED is mostly driven by
a number of standard datasets, such as CoNLL-
YAGO (Hoffart et al., 2011), TAC KBP (Ji et al.,
2010) and ACE (Bentivogli et al., 2010). These
datasets are based on news corpora and Wikipedia,
which are naturally coherent, well-structured, and
rich in context. Global disambiguation models

(Guo and Barbosa, 2014; Pershina et al., 2015;
Globerson et al., 2016) leverage this coherency by
jointly disambiguating all the mentions in a sin-
gle document. However, domains such as web-
page fragments, social media, or search queries,
are often short, noisy, and less coherent; such do-
mains lack the necessary contextual information
for global methods to pay off, and present a more
challenging setting in general.

In this work, we investigate the task of NED
in a setting where only local and noisy context
is available. In particular, we create a dataset
of 3.2M short text fragments extracted from web
pages, each containing a mention of a named en-
tity. Our dataset is far larger than previously col-
lected datasets, and contains 18K unique mentions
linking to over 100K unique entities. We have em-
pirically found it to be noisier and more challeng-
ing than existing datasets. For example:

“I had no choice but to experiment with
other indoor games. I was born in At-
lantic City so the obvious next choice
was Monopoly. I played until I became
a successful Captain of Industry.”

This short fragment is considerably less structured
and with a more personal tone than a typical news
article. It references the entity Monopoly (Game),
however expressions such as “experiment” and
“Industry” can distract a naive disambiguation
model because they are also related the much
more common entity Monopoly (economics term).
Some sense of local semantics must be considered
in order to separate the useful signals (e.g. “indoor
games”, “played”) from the noisy ones.

We therefore propose a new model that lever-
ages local contextual information to disambiguate
entities. Our neural approach (based on RNNs
with attention) leverages the vast amount of train-
ing data in WikilinksNED to learn representations

58



for entity and context, allowing it to extract signals
from noisy and unexpected context patterns.

While convolutional neural networks (Sun
et al., 2015; Francis-Landau et al., 2016) and prob-
abilistic attention (Lazic et al., 2015) have been
applied to the task, this is the first model to use
RNNs and a neural attention model for NED.
RNNs account for the sequential nature of textual
context while the attention model is applied to re-
duce the impact of noise in the text.

Our experiments show that our model signifi-
cantly outperforms existing state-of-the-art NED
algorithms on WikilinksNED, suggesting that
RNNs with attention are able to model short and
noisy context better than current approaches. In
addition, we evaluate our algorithm on CoNLL-
YAGO (Hoffart et al., 2011), a dataset of annotated
news articles. We use a simple domain adapta-
tion technique since CoNLL-YAGO lacks a large
enough training set for our model, and achieve
comparable results to other state-of-the-art meth-
ods. These experiments highlight the difference
between the two datasets, indicating that our NED
benchmark is substantially more challenging.

Code and data used for our experiments
can be found at https://github.com/
yotam-happy/NEDforNoisyText

2 Related Work

Local vs Global NED Early work on Named
Entity Disambiguation, such as Bunescu and
Paşca (2006) and Mihalcea and Csomai (2007) fo-
cused on local approaches where each mention is
disambiguated separately using hand-crafted fea-
tures. While local approaches provide a hard-to-
beat baseline (Ratinov et al., 2011), recent work
has largely focused on global approaches. These
disambiguate all mentions within a document si-
multaneously by considering the coherency of en-
tity assignments within a document. For exam-
ple the local component of the GLOW algorithm
(Ratinov et al., 2011) was used as part of the re-
lational inference system suggested by Cheng and
Roth (2013). Similarly, Globerson et al. (2016)
achieved state-of-the-art results by extending the
local-based selective-context model of Lazic et al.
(2015) with an attention-like coherence model.

Global models can tap into highly-
discriminative semantic signals (e.g. coreference
and entity relatedness) that are unavailable to local
methods, and have significantly outperformed the

local approach on standard datasets (Guo and Bar-
bosa, 2014; Pershina et al., 2015; Globerson et al.,
2016). However, global approaches are difficult
to apply in domains where only short and noisy
text is available, as often occurs in social media,
questions and answers, and other short web docu-
ments. For example, Huang et al. (2014) collected
many tweets from the same author in order to
apply a global disambiguation method. Since this
work focuses on disambiguating entities within
short fragments of text, our algorithmic approach
tries to extract as much information from the local
context, without resorting to external signals.

Neural Approaches The first neural approach
for NED (He et al., 2013) used stacked auto-
encoders to learn a similarity measure between
mention-context structures and entity candidates.
More recently, convolutional neural networks
(CNNs) were employed for learning semantic sim-
ilarity between context, mention, and candidate
inputs (Sun et al., 2015; Francis-Landau et al.,
2016). Neural embedding techniques have also
inspired a number of works that measure entity-
context relatedness using their embeddings (Ya-
mada et al., 2016; Hu et al., 2015). In this paper,
we train a recurrent neural network (RNN) model,
which unlike CNNs and embeddings, is designed
to exploit the sequential nature of text. We also
utilize an attention mechanism, inspired by results
from Lazic et al. (2015) that successfully used a
probabilistic attention-like model for NED.

Noisy Data Chisholm and Hachey (2015)
showed that despite the noisy nature of web data,
augmenting Wikipedia-derived data with web-
links from the Wikilinks corpus (Singh et al.,
2012) can improve performance on standard
datasets. In our work, we find noisy web data to
be a unique and challenging test case for disam-
biguation. We therefore use Wikilinks to construct
a new stand-alone disambiguation benchmark that
focuses on noisy text, rather than use it for training
alone. Moreover, we differ from Chisholm at el.
by taking a neural approach that implicitly discov-
ers useful signals from contexts, instead of manu-
ally crafting features.

Commonly-used benchmarks for NED sys-
tems have mostly focused on news-based cor-
pora. CoNLL-YAGO (Hoffart et al., 2011) is
a dataset based on Reuters, created by hand-
annotating the CoNLL 2003 Named Entity Recog-

59



nition task dataset with YAGO (Suchanek et al.,
2007) entities. It contains 1, 393 documents split
into train, development and test sets. TAC KBP
2010 (Ji et al., 2010) and ACE Bentivogli et al.
(2010) are also news-based datasets that contain
only a limited amount of examples. Ratinov et al.
(2011) used a random sample of paragraphs from
Wikipedia for evaluation; however, they did not
make their sample publicly available.

Our WikilinksNED dataset is substantially dif-
ferent from currently available datasets since they
are all based on high-quality content from either
news articles or Wikipedia, while WikilinksNED
is a benchmark for noisier, less coherent, and more
colloquial text. The annotation process is signifi-
cantly different as well, as our dataset reflects the
annotation preferences of real-world website au-
thors. It is also significantly larger in size, being
over 100 times larger than CoNLL-YAGO.

Recently, a number of Twitter-based datasets
were compiled as well (Meij et al., 2012; From-
reide et al., 2014). These represent a much more
extreme case than our dataset in terms of noise,
shortness and spelling variations, and are much
smaller in size. Due to the unique nature of tweets,
proposed algorithms tend to be substantially dif-
ferent from algorithms used for other NED tasks.

3 The WikilinksNED Dataset:
Entity Mentions in the Web

We introduce WikilinksNED, a large-scale NED
dataset based on text fragments from the web.
Our dataset is derived from the Wikilinks corpus
(Singh et al., 2012), which was constructed by
crawling the web and collecting hyperlinks (men-
tions) linking to Wikipedia concepts (entities) and
their surrounding text (context). Wikilinks con-
tains 40 million mentions covering 3 million enti-
ties, collected from over 10 million web pages.

Wikilinks can be seen as a large-scale,
naturally-occurring, crowd-sourced dataset where
thousands of human annotators provide ground
truths for mentions of interest. This means that the
dataset contains various kinds of noise, especially
due to incoherent contexts. The contextual noise
presents an interesting test-case that supplements
existing datasets that are sourced from mostly co-
herent and well-formed text.

To get a sense of textual noise we have set up
a small experiment where we measure the similar-
ity between entities mentioned in WikilinksNED

and their surrounding context, and compare the
results to CoNLL-YAGO. We use state-of-the-art
word and entity embeddings obtained from Ya-
mada et al. (2016) and compute cosine similarity
between embeddings of the correct entity assign-
ment and the mean of context words. We com-
pare results from all mentions in CoNLL-YAGO
to a sample of 50000 web fragments taken from
WikilinksNED, using a window of words of size
40 around entity mentions. We find that similar-
ity between context and correct entity is indeed
lower for web mentions (0.163) than for CoNLL-
YAGO mentions (0.188), and find this result to be
statistically significant with very high probability
(p < 10−5) . This result indicates that web frag-
ments in WikilinksNED are indeed noisier com-
pared to CoNLL-YAGO documents.

We prepare our dataset from the local-context
version of Wikilinks1, and resolve ground-truth
links using a Wikipedia dump from April 20162.
We use the page and redirect tables for resolution,
and keep the database pageid column as a unique
identifier for Wikipedia entities. We discard men-
tions where the ground-truth could not be resolved
(only 3% of mentions).

We collect all pairs of mention m and entity e
appearing in the dataset, and compute the number
of times m refers to e (#(m, e)), as well as the
conditional probability of e given m: P (e|m) =
#(m, e)/

∑
e′ #(m, e

′). Examining these distri-
butions reveals many mentions belong to two ex-
tremes – either they have very little ambiguity,
or they appear in the dataset only a handful of
times and refer to different entities only a couple
of times each. We deem the former to be less in-
teresting for the purpose of NED, and suspect the
latter to be noise with high probability. To filter
these cases, we keep only mentions for which at
least two different entities have 10 mentions each
(#(m, e) ≥ 10) and consist of at least 10% of
occurrences (P (e|m) ≥ 0.1). This procedure ag-
gressively filters our dataset and we are left with
3.2M mentions.

Finally, we randomly split the data into train
(80%), validation (10%), and test (10%), accord-
ing to website domains in order to minimize lexi-
cal memorization (Levy et al., 2015).

1http://www.iesl.cs.umass.edu/data/
wiki-links

2https://dumps.wikimedia.org/

60



"...indoor games. I was born in Atalantic City so the 
obvious next choice was Monopoly. I played until 

I became a succsesfull Capitain of Industry..."

Right
context

Classifier

GRU

Attention

Context
word vectors

Candidate

!!!

...∑ 

˟ ˟ ˟

...

...

ARNN output

Candidate
list

ARNN

Candidate

Em
be

dd
in

g

Left
context ARNN

Em
be

dd
in

g

Figure 1: The architecture of our Neural Network
model. A close-up of the Attention-RNN compo-
nent appears in the dashed box.

4 Algorithm

Our DNN model is a discriminative model which
takes a pair of local context and candidate entity,
and outputs a probability-like score for the candi-
date entity being correct. Both words and entities
are represented using embedding dictionaries and
we interpret local context as a window-of-words
to the left and right of a mention. The left and
right contexts are fed into a duo of Attention-RNN
(ARNN) components which process each side and
produce a fixed length vector representation. The
resulting vectors are concatenated and along with
the entity embedding are and then fed into a classi-
fier network with two output units that are trained
to emit a probability-like score of the candidate
being a correct or corrupt assignment.

4.1 Model Architecture

Figure 1 illustrates the main components of our ar-
chitecture: an embedding layer, a duo of ARNNs,
each processing one side of the context (left and
right), and a classifier.

Embedding The embedding layer first embeds
both the entity and the context words as vectors
(300 dimensions each).

ARNN The ARNN unit is composed from an
RNN and an attention mechanism. Equation 1 rep-
resents the general semantics of an RNN unit. An
RNN reads a sequence of vectors {vt} and main-
tains a hidden state vector {ht}. At each step a
new hidden state is computed based on the previ-
ous hidden state and the next input vector using
some function f , and an output is computed using
g. This allows the RNN to “remember” important
signals while scanning the context and to recog-
nize signals spanning multiple words.

ht = fΘ1(ht−1, vt)
ot = gΘ2(ht)

(1)

Our implementation uses a standard GRU unit
(Cho et al., 2014) as an RNN. We fit the RNN
unit with an additional attention mechanism, com-
monly used with state-of-the-art encoder-decoder
models (Bahdanau et al., 2014; Xu et al., 2015).
Since our model lacks a decoder, we use the en-
tity embedding as a control signal for the attention
mechanism.

Equation 2 details the equations governing the
attention model.

at ∈ R; at = rΘ3(ot, vcandidate)
a′t =

1∑t
i=1 exp{ai}

exp{at}

oattn =
∑

t

a′tot

(2)

The function r computes an attention value at
each step, using the RNN output ot and the can-
didate entity vcandidate. The final output vector
oattn is a fixed-size vector, which is the sum of
all the output vectors of the RNN weighted ac-
cording to the attention values. This allows the
attention mechanism to decide on the importance
of different context parts when examining a spe-
cific candidate. We follow Bahdanau et al. (2014)
and parametrize the attention function r as a single
layer NN as shown in equation 3.

rΘ3(ot, vcandidate) = Aot + Bvcandidate + b (3)

Classifier The classifier network consists of a
hidden layer3 and an output layer with two output
units in a softmax. The output units are trained by
optimizing a cross-entropy loss function.

3300 dimensions with ReLU, and p = 0.5 dropout.

61



4.2 Training
We assume our model is only given training ex-
amples for correct entity assignments and there-
fore use corrupt-sampling, where we automati-
cally generate examples of wrong assignments.
For each context-entity pair (c, e), where e is the
correct assignment for c, we produce k corrupt ex-
amples with the same context c but with a differ-
ent, corrupt entity e′. We considered two alterna-
tives for corrupt sampling and provide an empiri-
cal comparison of the two approaches (Section 5):

Near-Misses: Sampling out of the candidate set
of each mention. We have found this to be
more effective where the training data reli-
ably reflects the test-set distribution.

All-Entity: Sampling from the entire dictionary
of entities. Better suited to cases where the
training data or candidate generation does not
reflect the test-set well. Has an added benefit
of allowing us to utilize unambiguous train-
ing examples where only a single candidate
is found.

We sample corrupt examples uniformly in both
alternatives since with uniform sampling the ratio
between the number of positive and negative ex-
amples of an entity is higher for popular entities,
thus biasing the network towards popular entities.
In the All-Entity case, this ratio is approximately
proportional to the prior probability of the entity.

We note that preliminary experiments revealed
that corrupt-sampling according to the distribution
of entities in the dataset (as is done by Mikolov
at el. (2013)), rather than uniform sampling, did
not perform well in our settings due to the lack of
biasing toward popular entities.

Model optimization was carried out using stan-
dard backpropagation and an AdaGrad optimizer
(Duchi et al., 2011). We allowed the error to prop-
agate through all parts of the network and fine
tune all trainable parameters, including the word
and entity embeddings themselves. We found the
performance of our model substantially improves
for the first few epochs and then continues to
slowly converge with marginal gains, and there-
fore trained all models for 8 epochs with k = 5
for corrupt-sampling.

4.3 Embedding Initialization
Training our model implicitly embeds the vocabu-
lary of words and collection of entities in a com-

mon space. However, we found that explicitly
initializing these embeddings with vectors pre-
trained over a large collection of unlabeled data
significantly improved performance (see Section
5.3). To this end, we implemented an approach
based on the Skip-Gram with Negative-Sampling
(SGNS) algorithm by Mikolov et al. (2013) that si-
multaneously trains both word and entity vectors.

We used word2vecf4 (Levy and Goldberg,
2014a), which allows one to train word and con-
text embeddings using arbitrary definitions of
”word” and ”context” by providing a dataset of
word-context pairs (w, c), rather than a textual
corpus. In our usage, we define a context as an en-
tity e. To compile a dataset of (w, e) pairs, we con-
sider every word w that appeared in the Wikipedia
article describing entity e. We limit our vocabular-
ies to words that appeared at least 20 times in the
corpus and entities that contain at least 20 words
in their articles. We ran the process for 10 epochs
and produced vectors of 300 dimensions; other hy-
perparameters were set to their defaults.

Levy and Goldberg (2014b) showed that SGNS
implicitly factorizes the word-context PMI matrix.
Our approach is doing the same for the word-entity
PMI matrix, which is highly related to the word-
entity TFIDF matrix used in Explicit Semantic
Analysis (Gabrilovich and Markovitch, 2007).

5 Evaluation

In this section, we describe our experimental setup
and compare our model to the state of the art
on two datasets: our new WikilinksNED dataset,
as well as the commonly-used CoNLL-YAGO
dataset (Hoffart et al., 2011). We also examine the
effect of different corrupt-sampling schemes, and
of initializing our model with pre-trained word and
entity embeddings.

In all experiments, our model was trained with
fixed-size left and right contexts (20 words in each
side). We used a special padding symbol when
the actual context was shorter than the window.
Further, we filtered stopwords using NLTK’s stop-
word list prior to selecting the window in order to
focus on more informative words. Our model was
implemented using the Keras (Chollet, 2015) and
Tensorflow (Abadi et al., 2015) libraries.

4http://bitbucket.org/yoavgo/word2vecf

62



Wikilinks Test-Set Evaluation
Model Sampled Test Set (10K) Full Test Set (300K)

Baseline (MPS) 60 59.6
Cheng (2013) 50.7 -

Yamada (2016) 67.6 66.9
Our Attention-RNN 73.2 73

Our RNN, w/o Attention 72.1 72.2

Table 1: Evaluation on noisy web data (WikilinksNED)

5.1 WikilinksNED

Training we use Near-Misses corrupt-sampling
which was found to perform well due to a large
training set that represents the test set well.

Candidate Generation To isolate the effect of
candidate generation algorithms, we used the fol-
lowing simple method for all systems: given a
mention m, consider all candidate entities e that
appeared as the ground-truth entity for m at least
once in the training corpus. This simple method
yields 97% ground-truth recall on the test set.

Baselines Since we are the first to evaluate NED
algorithms on WikilinksNED, we ran a selection
of existing local NED systems and compared their
performance to our algorithm’s.

Yamada et al. (2016) created a state-of-the-art
NED system that models entity-context similar-
ity with word and entity embeddings trained us-
ing the skip-gram model. We obtained the origi-
nal embeddings from the authors, and trained the
statistical features and ranking model on the Wik-
ilinksNED training set. Our configuration of Ya-
mada et al.’s model used only their local features.

Cheng et al. (2013) have made their global
NED system publicly available5. This algorithm
uses GLOW (Ratinov et al., 2011) for local disam-
biguation. We compare our results to the ranking
step of the algorithm, without the global compo-
nent. Due to the long running time of this system,
we only evaluated their method on the smaller test
set, which contains 10,000 randomly sampled in-
stances from the full 320,000-example test set.

Finally, we include the Most Probable Sense
(MPS) baseline, which selects the entity that was
seen most with the given mention during training.

Results We used standard micro P@1 accuracy
for evaluation. Experimental results comparing

5https://cogcomp.cs.illinois.edu/page/
software_view/Wikifier

our model with the baselines are reported in Table
1. Our RNN model significantly outperforms Ya-
mada at el. on this data by over 5 points, indicating
that the more expressive RNNs are indeed benefi-
cial for this task. We find that the attention mech-
anism further improves our results by a small, yet
statistically significant, margin.

5.2 CoNLL-YAGO

Training CoNLL-YAGO has a training set with
18505 non-NIL mentions, which our experiments
showed is not sufficient to train our model on. To
fit our model to this dataset we first used a sim-
ple domain adaptation technique and then incorpo-
rated a number of basic statistical and string based
features.

Domain Adaptation We used a simple domain
adaptation technique where we first trained our
model on an available large corpus of label data
derived from Wikipedia, and then trained the
resulting model on the smaller training set of
CoNLL (Mou et al., 2016). The Wikipedia corpus
was built by extracting all cross-reference links
along with their context, resulting in over 80 mil-
lion training examples. We trained our model with
All-Entity corrupt sampling for 1 epoch on this
data. The resulting model was then adapted to
CoNLL-YAGO by training 1 epoch on CoNLL-
YAGO’s training set, where corrupt examples
were produced by considering all possible candi-
dates for each mention as corrupt-samples (Near-
Misses corrupt sampling).

Additional Features We proceeded to use the
model in a similar setting to Yamada et al.
(2016) where a Gradient Boosting Regression
Tree (GBRT) (Friedman, 2001) model was trained
with our model’s prediction as a feature along with
a number of statistical and string based features
defined by Yamada. The statistical features in-
clude entity prior probability, conditional proba-

63



bility, number of candidates for the given mention
and maximum conditional probability of the entity
in the document. The string based features include
edit distance between mention and entity title and
two boolean features indicating whether the entity
title starts or ends with the mention and vice versa.
The GBRT model parameters where set to the val-
ues reported as optimal by Yamada6.

Candidate Generation For comparability with
existing methods we used two publicly available
candidates datasets: (1) PPRforNED - Pershina at
el. (2015); (2) YAGO - Hoffart at el. (2011).

Baselines As a baseline we took the standard
Most Probable Sense (MPS) prediction, which se-
lects the entity that was seen most with the given
mention during training. We also compare to the
following papers - Francis-Landau et al. (2016),
Yamada at el. (2016), and Chisholm et al. (2015),
as they are all strong local approaches and a good
source for comparison.

Results Table 2 displays the micro and macro
P@1 scores on CoNLL-YAGO test-b for the dif-
ferent training steps. We find that when using only
the training set of CoNLL-YAGO our model is
under-trained and that the domain adaptation sig-
nificant boosts performance. We find that incorpo-
rating extra statistical and string features yields a
small extra improvement in performance.

The final micro and macro P@1 scores on
CoNLL-YAGO test-b are displayed in table 3. On
this dataset our model achieves comparable re-
sults, however it does not outperform the state-
of-the-art, probably because of the relatively small
training set and our reliance on domain adaptation.

5.3 Effects of initialized embeddings and
corrupt-sampling schemes

We performed a study of the effects of using
pre-initialized embeddings for our model, and of
using either All-Entity or Near-Misses corrupt-
sampling. The evaluation was done on a 10% sam-
ple of the evaluation set of the WikilinksNED cor-
pus and can be seen in Table 4.

We have found that using pre-initialized embed-
dings results in significant performance gains, due
to the better starting point. We have also found
that using Near-Misses, our model achieves sig-
nificantly improved performance. We attribute this

6Learning rate of 0.02; maximal tree depth of 4; 10, 000
trees.

CoNLL-YAGO test-b - Training Steps Eval
Model Micro

P@1
Macro
P@1

PPRforNED
CoNLL training set 82 82
+ domain adaptation 86.6 87.7
+ GBRT 87.3 88.6

Yago
CoNLL training set 74.8 73.5
+ domain adaptation 83.6 85.1
+ GBRT 83.3 86.3

Table 2: Evaluation of training steps on CoNLL-
YAGO.

CoNLL-YAGO test-b (Local methods)
Model Micro

P@1
Macro
P@1

PPRforNED
Our ARNN + GBRT 87.3 88.6
Yamada (2016) local 90.9 92.4
Yamada (2016) global 93.1 92.6

Yago
Our ARNN + GBRT 83.3 86.3
Yamada (2016) local 87.2 89.6
Francis-Landau (2016) 85.5 -
Chisholm (2015) local 86.1 -
Yamada (2016) global 91.5 90.9
Chisholm (2015) global 88.7 -

Table 3: Evaluation on CoNLL-YAGO.

difference to the more efficient nature of training
with near misses. Both these results were found to
be statistically significant.

6 Error Analysis

We randomly sampled and manually analyzed 200
cases of prediction errors made by our model. This
set was obtained from WikilinksNED’s validation
set that was not used for training.

Working with crowd-sourced data, we expected
some errors to result from noise in the ground
truths themselves. Indeed, we found that 19.5%
(39/200) of the errors were not false, out of which
5% (2) where wrong labels, 33% (13) were pre-
dictions with an equivalent meaning as the correct
entity, and in 61.5% (24) our model suggested a
more convincing solution than the original author
by using specific hints from the context. In this
manner, the mention ’Supreme leader’ , which was

64



Wikilinks Evaluation-Set
Model Micro

accuracy
Near-misses, with init. 72.5

Near-misses, random init. 67.2
All-Entity, with init. 70

All-Entity, random init. 67.1

Table 4: Corrupt-sampling and Initialization

contextually associated to the Iranian leader Ali
Khamenei, was linked by our model with ’supreme
leader of Iran’ while the ”correct” tag was the gen-
eral ’supreme leader’ entity.

In addition, 15.5% (31/200) were cases where
a Wikipedia disambiguation-page was either the
correct or predicted entity (2.5% and 14%, respec-
tively). We considered the rest of the 130 errors as
true semantic errors, and analyzed them in-depth.

Error type Fraction
False errors

Not errors 19.5% (39/200)
- Annotation error 5% (2/39)
- Better suggestion 61.5% (24/39)
- Equivalent entities 33% (13/39)
Disambiguation page 15.5% (31/200)

True semantic errors
Too specific/general 31.5% (41/130)
’almost correct’ errors 26% (34/130)
insufficient training 21.5% (28/130)

Table 5: Error distribution in 200 samples. Cate-
gories of true errors are not fully distinct.

First, we noticed that in 31.5% of the true errors
(41/130) our model selected an entity that can be
understood as a specific (6.5%) or general (25%)
realization of the correct solution. For example,
instead of predicting ’Aroma of wine’ for a text on
the scent and flavor of Turkish wine, the model
assigned the mention ’Aroma’ with the general
’Odor’ entity. We observed that in 26% (34/130)
of the error cases, the predicted entity had a very
strong semantic relationship to the correct entity.
A closer look discovered two prominent types of
’almost correct’ errors occurred repeatedly in the
data. The first was a film/book/theater type of er-
ror (8.4%), where the actual and the predicted enti-
ties were a different display of the same narrative.
Even though having different jargon and produc-

ers, those fields share extremely similar content,
which may explain why they tend to be frequently
confused by the algorithm. A third (4/14) of those
cases were tagged as truly ambiguous even for hu-
man reader. The second prominent type of ’almost
correct’ errors where differentiating between ad-
jectives that are used to describe properties of a na-
tion. Particularity, mentions such as ’Germanic’,
’Chinese’ and ’Dutch’ were falsely assigned to en-
tities that describe language instead of people, and
vice versa. We observed this type of mistake in
8.4% of the errors (11/130).

Another interesting type of errors where in
cases where the correct entity had insufficient
training. We defined insufficient training errors as
errors where the correct entity appeared less than
10 times in the training data. We saw that the
model followed the MPS in 75% of these cases,
showing that our model tends to follow the base-
line in such cases. Further, the amount of gen-
eralization error in insufficient-training conditions
was also significant (35.7%), as our model tended
to select more general entities.

7 Conclusions

Our results indicate that the expressibility of
attention-RNNs indeed allows us to extract use-
ful features from noisy context, when sufficient
amounts of training examples are available. This
allows our model to significantly out-perform ex-
isting state-of-the-art models. We find that both
using pre-initialized embedding vocabularies, and
the corrupt-sampling method employed are very
important for properly training our model.

However, the gap between results of all systems
tested on both CoNLL-YAGO and WikilinksNED
indicates that mentions with noisy context are in-
deed a challenging test. We believe this to be
an important real-world scenario, that represents
a distinct test-case that fills a gap between existing
news-based datasets and the much noisier Twitter
data (Ritter et al., 2011) that has received increas-
ing attention. We find recurrent neural models are
a promising direction for this task.

Finally, our error analysis shows a number of
possible improvements that should be addressed.
Since we use the training set for candidate genera-
tion, non-nonsensical candidates (i.e. disambigua-
tion pages) cause our model to err and should be
removed from the candidate set. In addition, we
observe that lack of sufficient training for long-

65



tail entities is still a problem, even when a large
training set is available. We believe this, and some
subtle semantic cases (book/movie) can be at least
partially addressed by considering semantic prop-
erties of entities, such as types and categories. We
intend to address these issues in future work.

References
Martı́n Abadi, Ashish Agarwal, Paul Barham, Eugene

Brevdo, Zhifeng Chen, Craig Citro, Greg S. Cor-
rado, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Ian Goodfellow, Andrew Harp,
Geoffrey Irving, Michael Isard, Yangqing Jia, Rafal
Jozefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh
Levenberg, Dan Mané, Rajat Monga, Sherry Moore,
Derek Murray, Chris Olah, Mike Schuster, Jonathon
Shlens, Benoit Steiner, Ilya Sutskever, Kunal Tal-
war, Paul Tucker, Vincent Vanhoucke, Vijay Va-
sudevan, Fernanda Viégas, Oriol Vinyals, Pete
Warden, Martin Wattenberg, Martin Wicke, Yuan
Yu, and Xiaoqiang Zheng. 2015. TensorFlow:
Large-scale machine learning on heterogeneous sys-
tems. Software available from tensorflow.org.
http://tensorflow.org/.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua
Bengio. 2014. Neural machine translation by
jointly learning to align and translate. CoRR
abs/1409.0473. http://arxiv.org/abs/1409.0473.

Luisa Bentivogli, Pamela Forner, Claudio Giu-
liano, Alessandro Marchetti, Emanuele Pianta, and
Kateryna Tymoshenko. 2010. Proceedings of the
2nd Workshop on The People’s Web Meets NLP:
Collaboratively Constructed Semantic Resources,
Coling 2010 Organizing Committee, chapter Ex-
tending English ACE 2005 Corpus Annotation with
Ground-truth Links to Wikipedia, pages 19–27.
http://aclweb.org/anthology/W10-3503.

Jonathan Berant and Percy Liang. 2014. Semantic
parsing via paraphrasing. In Proceedings of the
52nd Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers). Asso-
ciation for Computational Linguistics, pages 1415–
1425. https://doi.org/10.3115/v1/P14-1133.

Razvan Bunescu and Marius Paşca. 2006. Using en-
cyclopedic knowledge for named entity disambigua-
tion. In 11th Conference of the European Chap-
ter of the Association for Computational Linguistics.
http://aclweb.org/anthology/E06-1002.

Xiao Cheng and Dan Roth. 2013. Relational
inference for wikification. In Proceedings
of the 2013 Conference on Empirical Meth-
ods in Natural Language Processing. Association
for Computational Linguistics, pages 1787–1796.
http://aclweb.org/anthology/D13-1184.

Andrew Chisholm and Ben Hachey. 2015. Entity dis-
ambiguation with web links. Transactions of the As-

sociation of Computational Linguistics 3:145–156.
http://aclweb.org/anthology/Q15-1011.

Kyunghyun Cho, Bart van Merrienboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder–decoder
for statistical machine translation. In Proceedings of
the 2014 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP). Association
for Computational Linguistics, pages 1724–1734.
https://doi.org/10.3115/v1/D14-1179.

François Chollet. 2015. Keras.
https://github.com/fchollet/keras.

John C. Duchi, Elad Hazan, and Yoram Singer.
2011. Adaptive subgradient methods for on-
line learning and stochastic optimization. Jour-
nal of Machine Learning Research 12:2121–2159.
http://dl.acm.org/citation.cfm?id=2021068.

Matthew Francis-Landau, Greg Durrett, and Dan
Klein. 2016. Capturing semantic similarity for en-
tity linking with convolutional neural networks. In
Proceedings of the 2016 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies.
Association for Computational Linguistics, pages
1256–1261. https://doi.org/10.18653/v1/N16-1150.

Jerome H Friedman. 2001. Greedy function
approximation: a gradient boosting ma-
chine. Annals of statistics pages 1189–1232.
https://doi.org/10.1214/aos/1013203451.

Hege Fromreide, Dirk Hovy, and Anders Søgaard.
2014. Crowdsourcing and annotating ner for twit-
ter #drift. In Proceedings of the Ninth Inter-
national Conference on Language Resources and
Evaluation (LREC-2014). European Language Re-
sources Association (ELRA). http://www.lrec-
conf.org/proceedings/lrec2014/pdf/421 Paper.pdf.

Evgeniy Gabrilovich and Shaul Markovitch. 2007.
Computing semantic relatedness using wikipedia-
based explicit semantic analysis. In Proceedings
of the 20th International Joint Conference on Artifi-
cal Intelligence. Morgan Kaufmann Publishers Inc.,
San Francisco, CA, USA, IJCAI’07, pages 1606–
1611. http://dl.acm.org/citation.cfm?id=1625275.
1625535.

Amir Globerson, Nevena Lazic, Soumen Chakrabarti,
Amarnag Subramanya, Michael Ringaard, and Fer-
nando Pereira. 2016. Collective entity resolution
with multi-focal attention. In Proceedings of the
54th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers). As-
sociation for Computational Linguistics, pages 621–
631. https://doi.org/10.18653/v1/P16-1059.

Zhaochen Guo and Denilson Barbosa. 2014. En-
tity linking with a unified semantic representation.
In Proceedings of the 23rd International Confer-
ence on World Wide Web. ACM, New York, NY,

66



USA, WWW ’14 Companion, pages 1305–1310.
https://doi.org/10.1145/2567948.2579705.

Zhengyan He, Shujie Liu, Mu Li, Ming Zhou, Longkai
Zhang, and Houfeng Wang. 2013. Learning entity
representation for entity disambiguation. In Pro-
ceedings of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers). Association for Computational Linguis-
tics, pages 30–34. http://aclweb.org/anthology/P13-
2006.

Johannes Hoffart, Amir Mohamed Yosef, Ilaria Bor-
dino, Hagen Fürstenau, Manfred Pinkal, Marc
Spaniol, Bilyana Taneva, Stefan Thater, and
Gerhard Weikum. 2011. Robust disambigua-
tion of named entities in text. In Proceed-
ings of the 2011 Conference on Empirical Meth-
ods in Natural Language Processing. Associa-
tion for Computational Linguistics, pages 782–792.
http://aclweb.org/anthology/D11-1072.

Zhiting Hu, Poyao Huang, Yuntian Deng, Yingkai Gao,
and Eric Xing. 2015. Entity hierarchy embedding.
In Proceedings of the 53rd Annual Meeting of the
Association for Computational Linguistics and the
7th International Joint Conference on Natural Lan-
guage Processing (Volume 1: Long Papers). Asso-
ciation for Computational Linguistics, pages 1292–
1300. https://doi.org/10.3115/v1/P15-1125.

Hongzhao Huang, Yunbo Cao, Xiaojiang Huang, Heng
Ji, and Chin-Yew Lin. 2014. Collective tweet
wikification based on semi-supervised graph reg-
ularization. In Proceedings of the 52nd An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers). Associa-
tion for Computational Linguistics, pages 380–390.
https://doi.org/10.3115/v1/P14-1036.

Heng Ji, Ralph Grishman, Hoa Trang Dang, Kira Grif-
fitt, and Joe Ellis. 2010. Overview of the tac 2010
knowledge base population track. In Third Text
Analysis Conference (TAC 2010). volume 3, pages
3–3.

Nevena Lazic, Amarnag Subramanya, Michael Ring-
gaard, and Fernando Pereira. 2015. Plato: A selec-
tive context model for entity resolution. Transac-
tions of the Association of Computational Linguis-
tics 3:503–515. http://aclweb.org/anthology/Q15-
1036.

Omer Levy and Yoav Goldberg. 2014a. Dependency-
based word embeddings. In Proceedings of the 52nd
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 2: Short Papers). Associ-
ation for Computational Linguistics, pages 302–308.
https://doi.org/10.3115/v1/P14-2050.

Omer Levy and Yoav Goldberg. 2014b. Neural word
embedding as implicit matrix factorization. In Ad-
vances in Neural Information Processing Systems
27: Annual Conference on Neural Information
Processing Systems 2014, December 8-13 2014,

Montreal, Quebec, Canada. pages 2177–2185.
http://papers.nips.cc/paper/5477-neural-word-
embedding-as-implicit-matrix-factorization.

Omer Levy, Steffen Remus, Chris Biemann, and Ido
Dagan. 2015. Do supervised distributional methods
really learn lexical inference relations? In Proceed-
ings of the 2015 Conference of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies. Associa-
tion for Computational Linguistics, pages 970–976.
https://doi.org/10.3115/v1/N15-1098.

Edgar Meij, Wouter Weerkamp, and Maarten de Ri-
jke. 2012. Adding semantics to microblog posts.
In Proceedings of the Fifth ACM International Con-
ference on Web Search and Data Mining. ACM,
New York, NY, USA, WSDM ’12, pages 563–572.
https://doi.org/10.1145/2124295.2124364.

Rada Mihalcea and Andras Csomai. 2007. Wik-
ify!: Linking documents to encyclopedic
knowledge. In Proceedings of the Sixteenth
ACM Conference on Conference on Informa-
tion and Knowledge Management. ACM, New
York, NY, USA, CIKM ’07, pages 233–242.
https://doi.org/10.1145/1321440.1321475.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Gregory S.
Corrado, and Jeffrey Dean. 2013. Distributed
representations of words and phrases and their com-
positionality. In Advances in Neural Information
Processing Systems 26: 27th Annual Conference
on Neural Information Processing Systems 2013.
Proceedings of a meeting held December 5-8,
2013, Lake Tahoe, Nevada, United States.. pages
3111–3119. http://papers.nips.cc/paper/5021-
distributed-representations-of-words-and-phrases-
and-their-compositionality.

Lili Mou, Zhao Meng, Rui Yan, Ge Li, Yan Xu,
Lu Zhang, and Zhi Jin. 2016. How transfer-
able are neural networks in nlp applications? In
Proceedings of the 2016 Conference on Empirical
Methods in Natural Language Processing. Associa-
tion for Computational Linguistics, pages 479–489.
http://aclweb.org/anthology/D16-1046.

Maria Pershina, Yifan He, and Ralph Grishman.
2015. Personalized page rank for named en-
tity disambiguation. In Proceedings of the
2015 Conference of the North American Chap-
ter of the Association for Computational Linguis-
tics: Human Language Technologies. Associa-
tion for Computational Linguistics, pages 238–243.
https://doi.org/10.3115/v1/N15-1026.

Lev Ratinov, Dan Roth, Doug Downey, and Mike An-
derson. 2011. Local and global algorithms for dis-
ambiguation to wikipedia. In Proceedings of the
49th Annual Meeting of the Association for Com-
putational Linguistics: Human Language Technolo-
gies. Association for Computational Linguistics,
pages 1375–1384. http://aclweb.org/anthology/P11-
1138.

67



Alan Ritter, Sam Clark, Mausam, and Oren Et-
zioni. 2011. Named entity recognition in
tweets: An experimental study. In Proceed-
ings of the 2011 Conference on Empirical Meth-
ods in Natural Language Processing. Association
for Computational Linguistics, pages 1524–1534.
http://aclweb.org/anthology/D11-1141.

Sameer Singh, Amarnag Subramanya, Fernando
Pereira, and Andrew McCallum. 2012. Wikilinks:
A large-scale cross-document coreference corpus
labeled via links to wikipedia. University of
Massachusetts, Amherst, Tech. Rep. UM-CS-2012-
015 https://web.cs.umass.edu/publication/docs
/2012/UM-CS-2012-015.pdf.

Fabian M. Suchanek, Gjergji Kasneci, and Ger-
hard Weikum. 2007. Yago: A core of seman-
tic knowledge. In Proceedings of the 16th Inter-
national Conference on World Wide Web. ACM,
New York, NY, USA, WWW ’07, pages 697–706.
https://doi.org/10.1145/1242572.1242667.

Yaming Sun, Lei Lin, Duyu Tang, Nan Yang, Zhen-
zhou Ji, and Xiaolong Wang. 2015. Modeling
mention, context and entity with neural networks
for entity disambiguation. In Proceedings of the
Twenty-Fourth International Joint Conference on
Artificial Intelligence, IJCAI 2015, Buenos Aires,
Argentina, July 25-31, 2015. pages 1333–1339.
http://ijcai.org/Abstract/15/192.

Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun
Cho, Aaron C. Courville, Ruslan Salakhutdi-
nov, Richard S. Zemel, and Yoshua Bengio.
2015. Show, attend and tell: Neural image
caption generation with visual attention. In
Proceedings of the 32nd International Confer-
ence on Machine Learning, ICML 2015, Lille,
France, 6-11 July 2015. pages 2048–2057.
http://jmlr.org/proceedings/papers/v37/xuc15.html.

Ikuya Yamada, Hiroyuki Shindo, Hideaki Takeda,
and Yoshiyasu Takefuji. 2016. Joint learn-
ing of the embedding of words and entities
for named entity disambiguation. In Proceed-
ings of The 20th SIGNLL Conference on Com-
putational Natural Language Learning. Associa-
tion for Computational Linguistics, pages 250–259.
https://doi.org/10.18653/v1/K16-1025.

68


