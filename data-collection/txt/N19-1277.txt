



















































VCWE: Visual Character-Enhanced Word Embeddings


Proceedings of NAACL-HLT 2019, pages 2710–2719
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

2710

VCWE: Visual Character-Enhanced Word Embeddings

Chi Sun, Xipeng Qiu∗, Xuanjing Huang
Shanghai Key Laboratory of Intelligent Information Processing, Fudan University

School of Computer Science, Fudan University
825 Zhangheng Road, Shanghai, China

{sunc17,xpqiu,xjhuang}@fudan.edu.cn

Abstract

Chinese is a logographic writing system, and
the shape of Chinese characters contain rich
syntactic and semantic information. In this pa-
per, we propose a model to learn Chinese word
embeddings via three-level composition: (1)
a convolutional neural network to extract the
intra-character compositionality from the vi-
sual shape of a character; (2) a recurrent neural
network with self-attention to compose char-
acter representation into word embeddings;
(3) the Skip-Gram framework to capture non-
compositionality directly from the contextual
information. Evaluations demonstrate the su-
perior performance of our model on four tasks:
word similarity, sentiment analysis, named en-
tity recognition and part-of-speech tagging.1

1 Introduction

Distributed representations of words, namely word
embeddings, encode both semantic and syntac-
tic information into a dense vector. Currently,
word embeddings have been playing a pivotal
role in many natural language processing (NLP)
tasks. Most of these NLP tasks also benefit
from the pre-trained word embeddings, such as
word2vec (Mikolov et al., 2013a) and GloVe (Pen-
nington et al., 2014), which are based on the dis-
tributional hypothesis (Harris, 1954): words that
occur in the same contexts tend to have similar
meanings. Earlier word embeddings often take a
word as a basic unit, and they ignore composi-
tionality of its sub-word information such as mor-
phemes and character n-grams, and cannot compe-
tently handle the rare words. To improve the per-
formance of word embeddings, sub-word informa-
tion has been employed (Luong et al., 2013; Qiu

∗Corresponding author.
1The source codes are available at https://github.

com/HSLCY/VCWE

et al., 2014; Cao and Rei, 2016; Sun et al., 2016a;
Wieting et al., 2016; Bojanowski et al., 2016).

Compositionality is more critical for Chinese,
since Chinese is a logographic writing system. In
Chinese, each word typically consists of fewer
characters and each character also contains richer
semantic information. For example, Chinese char-
acter “休” (rest) is composed of the characters for
“人” (person) and “木” (tree), with the intended
idea of someone leaning against a tree, i.e., rest-
ing.

Based on the linguistic features of Chinese, re-
cent methods have used the character informa-
tion to improve Chinese word embeddings. These
methods can be categorized into two kinds:

1) One kind of methods learn word embeddings
with its constituent character (Chen et al., 2015),
radical2 (Shi et al., 2015; Yin et al., 2016; Yu
et al., 2017) or strokes3 (Cao et al., 2018). How-
ever, these methods usually use simple operations,
such as averaging and n-gram, to model the inher-
ent compositionality within a word, which is not
enough to handle the complicated linguistic com-
positionality.

2) The other kind of methods learns word em-
beddings with the visual information of the char-
acter. Liu et al. (2017) learn character embedding
based on its visual characteristics in the text clas-
sification task. Su and Lee (2017) also introduce
a pixel-based model that learns character features
from font images. However, their model is not
shown to be better than word2vec model because
it has little flexibility and fixed character features.

Besides, most of these methods pay less atten-
tion to the non-compositionality. For example, the

2the graphical component of Chinese, referring to
https://en.wikipedia.org/wiki/Radical_
(Chinese_characters)

3the basic pattern of Chinese characters, referring to
https://en.wikipedia.org/wiki/Stroke_
(CJKV_character)

https://github.com/HSLCY/VCWE
https://github.com/HSLCY/VCWE
https://en.wikipedia.org/wiki/Radical_(Chinese_characters)
https://en.wikipedia.org/wiki/Radical_(Chinese_characters)
https://en.wikipedia.org/wiki/Stroke_(CJKV_character)
https://en.wikipedia.org/wiki/Stroke_(CJKV_character)


2711

semantic of Chinese word “沙发” (sofa) cannot be
composed by its contained characters “沙” (sand)
and “发” (hair).

In this paper, we fully consider the composition-
ality and non-compositionality of Chinese words
and propose a visual character-enhanced word em-
bedding model (VCWE) to learn Chinese word
embeddings. VCWE learns Chinese word embed-
dings via three-level composition:

• The first level is to learn the intra-character
composition, which gains the representation
of each character from its visual appearance
via a convolutional neural network;

• The second level is to learn the inter-
character composition, where a bidirectional
long short-term neural network (Bi-LSTM)
(Hochreiter and Schmidhuber, 1997) with
self-attention to compose character represen-
tation into word embeddings;

• The third level is to learn the non-
compositionality, we can learn the contextual
information because the overall framework of
our model is based on the skip-gram.

Evaluations demonstrate the superior performance
of our model on four tasks such as word similarity,
sentiment analysis, named entity recognition and
part-of-speech tagging.

2 Related Work

In the past decade, there has been much research
on word embeddings. Bengio et al. (2003) use
a feedforward neural network language model to
predict the next word given its history. Later
methods (Mikolov et al., 2010) replace feedfor-
ward neural network with the recurrent neural net-
work for further exploration. The most popular
word embedding system is word2vec, which uses
continuous-bag-of-words and Skip-gram models,
in conjunction with negative sampling for efficient
conditional probability estimation (Mikolov et al.,
2013a).

A different way to learn word embeddings is
through factorization of word co-occurrence ma-
trices such as GloVe embeddings (Pennington
et al., 2014), which have been shown to be intrin-
sically linked to Skip-gram and negative sampling
(Levy and Goldberg, 2014).

The models mentioned above are popular and
useful, but they regard individual words as atomic

tokens, and the potentially useful internal struc-
tured information of words is ignored. To improve
the performance of word embedding, sub-word in-
formation has been employed (Luong et al., 2013;
Qiu et al., 2014; Cao and Rei, 2016; Sun et al.,
2016a; Wieting et al., 2016; Bojanowski et al.,
2016). These methods focus on alphabetic writ-
ing systems, but they are not directly applicable to
logographic writing systems.

For the alphabetic writing systems, research on
Chinese word embedding has gradually emerged.
These methods focus on the discovery of mak-
ing full use of sub-word information. Chen et al.
(2015) design a CWE model for jointly learn-
ing Chinese characters and word embeddings.
Based on the CWE model, Yin et al. (2016)
present a multi-granularity embedding (MGE)
model, additionally using the embeddings associ-
ated with radicals detected in the target word. Xu
et al. (2016) propose a similarity-based character-
enhanced word embedding (SCWE) model, ex-
ploiting the similarity between a word and its
component characters with the semantic knowl-
edge obtained from other languages. Shi et al.
(2015) utilize radical information to improve Chi-
nese word embeddings. Yu et al. (2017) introduce
a joint learning word embedding (JWE) model and
Cao et al. (2018) represent Chinese words as se-
quences of strokes and learn word embeddings
with stroke n-grams information.

From another perspective, Liu et al. (2017) pro-
vide a new way to automatically extract character-
level features, creating an image for the character
and running it through a convolutional neural net-
work to produce a visual character embedding. Su
and Lee (2017) also introduce a pixel-based model
that learns character features from its image.

Chinese word embeddings have recently be-
gun to be explored, and have so far shown great
promise. In this paper, we propose a visual
character-enhanced word embedding (VCWE)
model that can learn Chinese word embeddings
from corpus and images of characters. The model
combines the semantic information of the context
with the image features of the character, with su-
perior performance in several benchmarks.

3 Proposed Model

In this section, we introduce the visual character-
enhanced word embedding (VCWE) model for
Chinese word representation.



2712

h1 h2 h3

Projection Output

CNN BiLSTM with self-attention Skip-gram

3×3 conv,32

BN

2×2 maxpool

Linear

BN

RELU

3×3 conv,32

BN

2×2 maxpool

c1 c2 c3

（a） （b） （c）

Self Attention

Figure 1: The overall architecture of our approach.

Given a Chinese word w consisting of n char-
acters c1, · · · , cn, its semantic may come from ei-
ther its contained characters or its contexts. There-
fore, we use the two-level hierarchical composi-
tion to compose the word embedding, which fur-
ther learned according to its context.

The overall architecture of our approach is on
Figure 1. We first use a convolutional neural net-
work (CNN) to model the intra-character compo-
sitionality of character from its visual shape infor-
mation. We use the output of CNN as the em-
beddings of the character. Then the character em-
beddings are used as the input of the bidirectional
LSTM network to model the inter-character com-
positionality. After a self-attention layer, we can
get the representation of the word. Finally, based
on the Skip-Gram framework, we learn the word
embeddings with the visual character-enhanced
embedding of the context.

3.1 Intra-Character Composition

Since the shape of a Chinese character provides
rich syntactic and semantic information, the rep-
resentation of a character can be composed by its
intrinsic visual components. Following the suc-
cess of the convolutional neural network (CNN)
(LeCun et al., 1995) in computer vision, we use
CNN to directly model the natural composition of

a character from its image.
We first convert each character into an image

of size 40 × 40, a deep CNN is used to fuse its
visual information fully. The specific structure of
the CNN is shown in Figure 1(a), which consists of
two convolution layers and one linear layer. Each
convolution layer is followed by a max pooling
layer and a batch normalization layer. The lower
layers aim to capture the stroke-level information,
and the higher layers aim to capture the radical-
level and component-level information.

The output of CNN can be regarded as the rep-
resentation of the character. The character repre-
sentation by its visual information can fully cap-
ture its intrinsic syntactic and semantic informa-
tion with the intra-character compositionality.

The parameters of CNN are learned through
backpropagation in end-to-end fashion.

3.2 Inter-Character Composition

After obtaining the representation of characters,
we combine them into word embedding. The
word embedding need to capture the character-
level compositionality fully. Here, we use the
bidirectional LSTM (Bi-LSTM) (Hochreiter and
Schmidhuber, 1997) with self-attention to fuse the
inter-character information of a word.

The structure of our Bi-LSTM with self-



2713

attention is shown in Figure 1(b).
Given a word w consisting of n characters

c1, · · · , cn, we use e1, · · · , en denote is the char-
acter representations, which are the output of the
CNN rather than randomly initialized.

The word w is firstly encoded using a Bi-
LSTM:

hFi = LSTM(h
F
i−1, ei), (1)

hBi = LSTM(h
B
i+1, ei), (2)

hi = [h
F
i ;h

B
i ], (3)

H = [h1,h2, ...,hn], (4)

where hi is the hidden state of the i-th character in
w.

Then we use self-attention to obtain the inter-
character compositionality. Following the self-
attention proposed by (Lin et al., 2017), we com-
pute an attention vector α:

α = softmax(v tanh(UhTi )), (5)

where v and U are learnable weight parameters.
Finally, the representation of word w is:

m =
n∑

i=1

αihi. (6)

Since the Bi-LSTM’s hidden state of each char-
acter is different according to its contexts, we be-
lieve the hidden state can capture both the com-
positional and non-compositional relations of the
characters within a word.

After obtaining the word representation, Skip-
Gram (Mikolov et al., 2013a) is used to learn
the word embedding with its context informa-
tion. Skip-Gram is a useful framework for learn-
ing word vectors, which aims to predict context
words given a target word in a sentence.

Given a pair of words (w, c), we denote p(c|w)
as the probability that the word c is observed in the
context of the target word w.

With the negative-sampling approach, skip-
gram formulates the probability p(c|w) as follows:

Given a pair of words (w, c), the probability that
the word c is observed in the context of the target
word w is given by

p(D = 1|w, c) = σ(wTc), (7)

where w and c are embedding vectors of w and c
respectively, σ is the sigmoid function.

The probability of not observing word c in the
context of w is given by:

p(D = 0|w, c) = 1− σ(wTc). (8)

4 Training

4.1 Objective Function
Given the target word w, its context word c and k
negative words c̃1, ..., c̃k. The wordw is a word se-
lected from a sentence in the corpus, and the con-
text c is a nearby word within a window size l.
The negative sample c̃i is a word that is randomly
sampled at a certain frequency in the vocabulary.

The loss function of VCWE model is as follows:

L = L1 + L2, (9)

L1 = log σ(w
Tc)+

k∑
i=1

log σ(−wTc̃i), (10)

L2 = log σ(w
Tmc)+

k∑
i=1

log σ(−wTm̃i), (11)

where w is the lookup embedding of target word;
c and c̃i are the lookup embeddings of the context
and negative words respectively; mc and m̃i are
visual enhanced word embeddings of the context
and negative words respectively.

Here, we use the visually enhanced word em-
bedding as the representation of context word in-
stead of the target word. The final embedding of
the target word is indirectly affected by the visual
information. Thus, the final word embedding can
have an advantage of fully utilizing intra-character
compositionality from CNN, inter-character com-
positionality from LSTM, and context information
from Skip-gram.

4.2 Word Sampling
We use a word sampling scheme similar to
the implementation in word2vec (Mikolov et al.,
2013a,b) to balance the importance of frequent
words and rare words. Frequent words such as
“的”(of), “是”(is), “这”(this) are not as mean-
ingful as relatively less frequent words such as
“猫”(cat), “喜欢”(like), “水果”(fruit). To improve
the performance of word embeddings, we use sub-
sampling(Mikolov et al., 2013b) to discard the
wordw with the probability of P (w) = 1−

√
t

f(w)

when generating the batch, where f(w) is the fre-
quency of word w and t is a chosen threshold, typ-
ically around 10−5.



2714

To generate negative context words, we sample
each word w according to distribution P (w) ∝
U(w)

3
4 , where U(w) is the unigram distribution,

which is the frequency of single words appear-
ing in the corpus. This method also plays a role
in reducing the frequency of occurrence of high-
frequency words.

5 Experiments

5.1 Preparation for training data

We download Chinese Wikipedia dump4 on May
20, 2018, which consists of 278K Chinese
Wikipedia articles. We use the WikiExtractor
toolkit5 to convert data from XML into text for-
mat. We find that the corpus consists of both sim-
plified and traditional Chinese characters. Hence
we utilize the opencc toolkit6 to normalize all
characters as simplified Chinese. We remove non-
Chinese characters such as punctuation marks by
retaining the characters whose Unicode falls into
the range between 0x4E00 and 0x9FA5. We use
THULAC 7(Sun et al., 2016b) for word segmenta-
tion.

We discard words that appeared less than 100
times and obtain a vocabulary of size 66,856. We
count the frequency of occurrence of each word to
prepare for the subsampling work.

In all 66,856 words, we extract 5030 unique
characters. We use a Chinese character image gen-
eration software to generate the images of these
Chinese characters. We subtract a mean image
from each input image to center it before feeding
it into the CNN. The pre-processed Chinese char-
acter images are shown in Figure 2.

Figure 2: The pre-processed Chinese character images.

4https://dumps.wikimedia.org/zhwiki/20180520/
5https://github.com/attardi/wikiextractor/blob/master/Wiki

Extractor.py
6https://github.com/BYVoid/OpenCC
7https://github.com/thunlp/THULAC-Python

5.2 Hyperparameters
Models used for evaluation have dimension D =
100 and use context window l = 5 unless stated
otherwise. We use the threshold t = 10−5 for
subsampling, which is the recommended value for
word2vec Skip-gram (Mikolov et al., 2013a) on
large datasets. The number of negative samples
per word is 5.

We use mini-batch asynchronous gradient de-
scent with Adam (Kingma and Ba, 2014). The ini-
tial learning rate is 0.001.

5.3 Baselines
We compare our model to the following open
source state-of-art models:

• word2vec8 (Mikolov et al., 2013a) is ar-
guably the most popular word embed-
ding, which uses continuous-bag-of-words
(CBOW) and Skip-gram models. We train
word2vec with both Skip-gram and CBOW
models. We did not train Glove(Pennington
et al., 2014) because it did not perform well
in many previous Chinese word embedding
papers.

• CWE9 (Chen et al., 2015) is character-
enhanced word embeddings which introduce
internal character information into word em-
bedding methods to alleviate excessive re-
liance on the external information.

• GWE10(Su and Lee, 2017) is a pixel-based
Chinese word embedding model, which ex-
ploits character features from font images by
convolutional autoencoders.

• JWE11(Yu et al., 2017) is a model to jointly
learn the embeddings of Chinese words, char-
acters, and sub character components.

For a fair comparison between different algo-
rithms, we use the same corpus and the same hy-
perparameters mentioned in previous subsections.

5.4 Word Similarity Task
We evaluate our embeddings on the Chinese word
similarity datasets wordsim-240 and wordsim-296
provided by (Chen et al., 2015). Besides, we trans-
late two English word similarity datasets MC-30

8https://code.google.com/archive/p/word2vec/
9https://github.com/Leonard-Xu/CWE

10https://github.com/ray1007/gwe
11https://github.com/hkust-knowcomp/jwe



2715

Model WS-240 WS-296 MC-30 RG-65 avg ∆

Skip-gram 50.23 56.94 69.66 59.86 59.17 -
CBOW 51.49 61.01 68.97 63.85 61.33 +2.16
CWE 52.63 58.98 68.82 59.60 60.01 +0.84
GWE 52.74 58.22 68.23 60.74 59.98 +0.81
JWE 51.92 59.84 70.27 62.83 61.22 +2.05

VCWE 57.81 61.29 72.77 70.62 65.62 +6.45
-CNN 55.82 59.60 66.87 68.53 62.71 +3.54
-LSTM 58.13 60.85 68.03 69.78 64.20 +5.03

Table 1: Spearman correlation for word similarity datasets, “-CNN” represents replacing the CNN and image
information with randomly initialized character embedding, “-LSTM” represents replacing Bi-LSTM network and
self-attention with the averaging operation. For each dataset, we boldface the score with the best performance
across all models.

Model NOTEBOOK CAR CAMERA PHONE ALL avg ∆

Skip-gram 69.84 77.12 80.80 81.25 86.65 79.13 -
CBOW 74.60 75.42 82.59 82.81 84.07 79.90 +0.77
CWE 73.02 80.51 81.25 81.25 82.09 79.62 +0.49
GWE 74.60 78.81 79.46 83.98 83.92 80.15 +1.02
JWE 77.78 78.81 81.70 81.64 85.13 81.01 +1.88

VCWE 80.95 85.59 83.93 84.38 88.92 84.75 +5.62
-CNN 84.13 81.36 81.70 83.69 84.22 83.02 +3.89
-LSTM 79.37 80.51 80.36 84.38 85.58 82.04 +2.91

Table 2: Accuracy for Sentiment analysis task. The configurations are the same of the ones used in Table 1.

(Miller and Charles, 1991) and RG-65 (Ruben-
stein and Goodenough, 1965) to Chinese12. Each
dataset contains a list of word pairs with a human
score of how related or similar the two words are.

We calculate the Spearman correlation (Spear-
man, 1904) between the labels and our scores gen-
erated by the embeddings. The Spearman corre-
lation is a rank-based correlation measure that as-
sesses how well the scores describe the true labels.
The evaluation results of our model and baseline
methods on word similarity datasets are shown in
Table 1.

From the results, we can see that VCWE outper-
forms other baseline models. The effect of CBOW
is much better than Skip-gram. The impact of
GWE and CWE are relatively close. The JWE
model works better than other benchmark mod-
els. In the VCWE model, when we remove the
CNN and the image information, the result falls
by 2.91. When we replace Bi-LSTM network and
self-attention with the averaging operation, the re-

12https://github.com/FudanNLP/VCWE

sult drops by 1.42.
In the last subsection, we will qualitatively an-

alyze the results of word similarity for different
models.

5.5 Sentiment Analysis Task

To evaluate the quality of our vectors regarding
semantics, we use datasets13 collected by (Peng
et al., 2018), which contain Chinese reviews in
four domains: notebook, car, camera, and phone.
They manually labeled the sentiment polarity to-
wards each aspect target as either positive or neg-
ative. It is a binary classification task. Similar
to how we process the training data, we remove
non-Chinese characters and use THULAC for per-
forming Chinese word segmentation. We build
classifiers with the bidirectional LSTM (Hochre-
iter and Schmidhuber, 1997) network with self-
attention (Lin et al., 2017). We use the standard
training/dev/test split and report accuracy using
different embeddings generated by different meth-

13http://sentic.net/chinese-review-datasets.zip



2716

ods in Table 2.
As shown in Table 2, Skip-gram performs well

on the combination of the four groups, but it
does not perform well in the works of a partic-
ular group. JWE outstrips other baseline meth-
ods by around 1.1 points. The VCWE model has
achieved outstanding results in the car, camera and
phone category, with an accuracy rate of at least
3 points higher than other models, indicating that
this method of training word embeddings with vi-
sual character-level features can achieve better re-
sults on downstream tasks.

5.6 Named Entity Recognition Task

We evaluate our model on the named entity recog-
nition task. We use an open source Chinese NER
model to test our word embeddings on MSRA
dataset14. MSRA is a dataset for simplified Chi-
nese NER. It comes from SIGHAN 2006 shared
task for Chinese NER (Levow, 2006). We pre-
train word embeddings from different models and
feed them into the input layer as features.

The key to the task is to extract named entities
and their associated types. Better word embed-
dings could get a higher F1 score of NER. The
results in Table 3 show that our model also out-
performs baseline models in this task. The perfor-
mance of CWE and GWE models are similar, both
slightly lower than Skip-gram and CBOW models.
The F1 score of the JWE model exceeds that of
other baseline models and is similar to our model.
When removing the CNN and image information,
our LSTM with the self-attention model can also
achieve the best results on this task, indicating that
the learned inter-character composition is practi-
cal.

5.7 Part-of-speech Tagging Task

The evaluation is performed on the PKU’s Peo-
ple’s Daily 15 (PPD) (Yu et al., 2001) with the stan-
dard training/dev/test split. The model is trained
with the bidirectional LSTM model using the same
hyper-parameters. Results on the POS accuracy on
the test set are reported in Table 3.

The gap between the usage of different em-
beddings is not significant, and our model has
achieved the best results with a slight advantage.

14https://github.com/bamtercelboo/pytorch NER PosTag Bi
LSTM CRF

15http://klcl.pku.edu.cn/zygx/zyxz/index.htm

Model
NER POS Tag

Prec. Recall F1 Acc

Skip-gram 85.30 84.18 84.74 95.87
CBOW 85.64 82.98 84.29 95.79
CWE 83.89 82.57 83.23 95.45
GWE 84.06 82.52 83.28 95.45
JWE 85.74 84.87 85.30 95.91

VCWE 86.93 84.64 85.77 96.00
-CNN 86.73 84.83 85.77 95.92
-LSTM 85.98 84.53 85.25 95.96

Table 3: Chinese NER and POS tagging results for dif-
ferent pretrained embeddings. The configurations are
the same of the ones used in Table 1.

5.8 Qualitative analysis

To better understand the quality of the learning
word embedding for each model, we conduct a
qualitative analysis by doing some case studies in
Table 4 to illustrate the most similar words for cer-
tain target words under different methods. Explic-
itly, we present the top 10 words that are most sim-
ilar to our target word. The similar words are re-
trieved based on the cosine similarity calculated
using the learned embeddings.

The first example word we consider is “唐
诗(Tang poetry)”. It refers to poetry written in or
around the time of or in the characteristic style of
China’s Tang Dynasty.

All the top-ranked words identified by
GWE contain the character “唐(Tang)” and
“诗(poetry)”, but in addition to the Tang Dynasty,
“唐(Tang)” also has other meanings such as
surnames. GWE yields several words such as “唐
璜(Don Juan)”, “唐寅(Tang Yin)”, “唐僧(Monk
Tang)” and “唐括(Tang Ku)”, which do not
appear to be semantically close to the target
word. In Skip-gram and JWE, certain words
such as “佚(anonymity)” and “古今(ancient and
modern)” do not appear to be semantically very
closely related to the target word. In our VCWE
model, all the top-ranked words are semantically
related to the target word, including the genre of
poetry, poets of the Tang Dynasty, and so on.

We choose the “沙发(sofa)” as the second
target word. Like the first two words, GWE
only pays attention to the character “沙(sand)”.
Skip-gram and JWE have some irrelevant words
such as “电话亭(telephone box)” and “广告
牌(billboard)”. VCWE pays more attention to



2717

Targets Skip-gram GWE JWE VCWE

唐诗(Tang poetry)

散曲(Qu-Poetry) 宋诗(Song poetry) 诗话(notes on poetry) 诗话(notes on poetry)
琴谱(music score) 赋诗(indite) 古今(ancient and modern) 宋诗(Song poetry)
佚(anonymity) 诗韵(rhyme) 佚(anonymity) 绝句(jueju)

宋词(Song Ci Poetry) 汉诗(Chinese poetry) 乐府(Yuefu) 宋词(Song Ci Poetry)
白居易(Bai Juyi) 唐璜(Don Juan) 琴谱(music score) 吟咏(chant)
绝句(jueju) 吟诗(recite poems) 辑录(compile) 乐府(Yuefu)
著录(record) 唐寅(Tang Yin) 刻本(carving copy) 七言(seven-character)
楚辞(Chu Songs) 唐僧(Monk Tang) 传世(be handed down) 李商隐(Li Shangyin)
乐府(Yuefu) 唐括(Tang Ku) 古诗(ancient poetry) 古诗(ancient poetry)
辑录(compile) 诗(poetry) 散曲(Qu-Poetry) 诗文(poetic prose)

沙发(sofa)

办公桌(bureau) 沙漏(hourglass) 桌子(desk) 衣柜(wardrobe)
卧室(bedroom) 沙尘(sand) 衣柜(wardrobe) 卧室(bedroom)
椅子(chair) 沙袋(sandbag) 毛巾(washcloth) 浴缸(bathtub)
楼上(upstairs) 沙盒(sandbox) 书桌(secretaire) 客厅(living room)
客厅(living room) 沙哑(raucity) 棉被(quilt) 窗帘(curtain)
浴缸(bathtub) 沙嘴(sandspit) 长椅(bench) 椅子(chair)
楼下(downstairs) 沙嗲(satay) 窗帘(curtain) 壁炉(fireplace)
雨衣(raincoat) 沙包(sandbag) 浴缸(bathtub) 房门(door)
血迹(bloodstain) 沙织(Saori) 房门(door) 长椅(bench)

电话亭(telephone box) 沙蚕(nereid) 广告牌(billboard) 桌子(desk)

Table 4: Case study for qualitative analysis. Given the target word, we list the top 10 similar words from each
algorithm so as to observe the differences.

the non-compositionality, and the results are bet-
ter than other models.

Limited to the width of the table, we do not
show the results of CWE model. The results of the
GWE model are not much different from the CWE
model, indicating that the image features obtained
by pre-training of GWE may not play a decisive
role. However, our model does not pre-train image
information, but jointly trains and dynamically up-
dates image feature information and it works bet-
ter. JWE model is similar to Skip-gram model in
that they pay more attention to contextual informa-
tion, but sometimes the model gets some irrelevant
words.

6 Discussion

Unlike phonograms, logograms have word and
phrase meanings singularly. The images of Chi-
nese characters contain rich semantic information.
Since logographic languages are more closely as-
sociated with images than alphabet languages, it
makes sense to mine the characteristics of these
images.

Liu et al. (2017) provide a new way to automat-
ically extract character-level features, creating an
image for the character and running it through a
convolutional neural network to produce a visual
character embedding. However, this method does
not utilize the rich semantic information of con-
textual words. Our model extracts both image fea-

tures and contextual semantic information.
Su and Lee (2017) introduce a pixel-based

model that learns character features from font
images. However, they use convolutional auto-
encoder(convAE) to extract image features in ad-
vance, and then add these features to the CWE
(Chen et al., 2015) model. In the end, the effect of
the model is not much different from CWE. Our
model is an end-to-end model. We update the im-
age’s feature parameters in real time during train-
ing, and our model achieves better results than the
GWE model.

Our research focuses on simplified Chinese
word embeddings, and the idea can also be applied
to other languages that share a similar writing sys-
tem, such as traditional Chinese, Japanese, and so
on.

7 Conclusion and Future Work

In this paper, we proposed a pixel-based model
to learn Chinese word embeddings with character
embeddings that are compositional in the compo-
nents of the characters. We utilized the visual fea-
tures of Chinese characters to enhance the word
embedding. We showed that our model outper-
forms the baseline model in the word similarity,
sentiment analysis, named entity recognition and
part-of-speech tagging tasks.

In summary, we optimized our pixel-based
word embedding method to make the model end-



2718

to-end and make full use of the contextual infor-
mation. In the future, we hope to apply our model
to other downstream tasks and other logographic
writing systems.

Acknowledgments

We would like to thank the anonymous re-
viewers for their valuable comments. The re-
search work is supported by Shanghai Munic-
ipal Science and Technology Commission (No.
17JC1404100 and 16JC1420401), National Key
Research and Development Program of China
(No. 2017YFB1002104), and National Natural
Science Foundation of China (No. 61672162 and
61751201).

References
Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and

Christian Jauvin. 2003. A neural probabilistic lan-
guage model. Journal of machine learning research,
3(Feb):1137–1155.

Piotr Bojanowski, Edouard Grave, Armand Joulin,
and Tomas Mikolov. 2016. Enriching word vec-
tors with subword information. arXiv preprint
arXiv:1607.04606.

Kris Cao and Marek Rei. 2016. A joint model for word
embedding and word morphology. arXiv preprint
arXiv:1606.02601.

Shaosheng Cao, Wei Lu, Jun Zhou, and Xiaolong Li.
2018. cw2vec: Learning chinese word embeddings
with stroke n-gram information.

Xinxiong Chen, Lei Xu, Zhiyuan Liu, Maosong Sun,
and Huan-Bo Luan. 2015. Joint learning of charac-
ter and word embeddings. In IJCAI, pages 1236–
1242.

Zellig S Harris. 1954. Distributional structure. Word,
10(2-3):146–162.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Yann LeCun, Yoshua Bengio, et al. 1995. Convolu-
tional networks for images, speech, and time series.
The handbook of brain theory and neural networks,
3361(10):1995.

Gina-Anne Levow. 2006. The third international chi-
nese language processing bakeoff: Word segmen-
tation and named entity recognition. In Proceed-
ings of the Fifth SIGHAN Workshop on Chinese Lan-
guage Processing, pages 108–117.

Omer Levy and Yoav Goldberg. 2014. Neural word
embedding as implicit matrix factorization. In Ad-
vances in neural information processing systems,
pages 2177–2185.

Zhouhan Lin, Minwei Feng, Cicero Nogueira dos San-
tos, Mo Yu, Bing Xiang, Bowen Zhou, and Yoshua
Bengio. 2017. A structured self-attentive sentence
embedding. arXiv preprint arXiv:1703.03130.

Frederick Liu, Han Lu, Chieh Lo, and Graham
Neubig. 2017. Learning character-level compo-
sitionality with visual features. arXiv preprint
arXiv:1704.04859.

Thang Luong, Richard Socher, and Christopher Man-
ning. 2013. Better word representations with recur-
sive neural networks for morphology. In Proceed-
ings of the Seventeenth Conference on Computa-
tional Natural Language Learning, pages 104–113.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013a. Efficient estimation of word
representations in vector space. arXiv preprint
arXiv:1301.3781.

Tomáš Mikolov, Martin Karafiát, Lukáš Burget, Jan
Černockỳ, and Sanjeev Khudanpur. 2010. Recur-
rent neural network based language model. In
Eleventh Annual Conference of the International
Speech Communication Association.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013b. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111–3119.

George A Miller and Walter G Charles. 1991. Contex-
tual correlates of semantic similarity. Language and
cognitive processes, 6(1):1–28.

Haiyun Peng, Yukun Ma, Yang Li, and Erik Cam-
bria. 2018. Learning multi-grained aspect target se-
quence for chinese sentiment analysis. Knowledge-
Based Systems, 148:167–176.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP), pages 1532–1543.

Siyu Qiu, Qing Cui, Jiang Bian, Bin Gao, and Tie-Yan
Liu. 2014. Co-learning of word representations and
morpheme representations. In Proceedings of COL-
ING 2014, the 25th International Conference on
Computational Linguistics: Technical Papers, pages
141–150.

Herbert Rubenstein and John B Goodenough. 1965.
Contextual correlates of synonymy. Communica-
tions of the ACM, 8(10):627–633.



2719

Xinlei Shi, Junjie Zhai, Xudong Yang, Zehua Xie,
and Chao Liu. 2015. Radical embedding: Delving
deeper to chinese radicals. In Proceedings of the
53rd Annual Meeting of the Association for Compu-
tational Linguistics and the 7th International Joint
Conference on Natural Language Processing (Vol-
ume 2: Short Papers), volume 2, pages 594–598.

Charles Spearman. 1904. The proof and measurement
of association between two things. The American
journal of psychology, 15(1):72–101.

Tzu-Ray Su and Hung-Yi Lee. 2017. Learning chi-
nese word representations from glyphs of characters.
arXiv preprint arXiv:1708.04755.

Fei Sun, Jiafeng Guo, Yanyan Lan, Jun Xu, and Xueqi
Cheng. 2016a. Inside out: Two jointly predictive
models for word representations and phrase repre-
sentations. In AAAI, pages 2821–2827.

Maosong Sun, Xinxiong Chen, Kaixu Zhang, Zhipeng
Guo, and Zhiyuan Liu. 2016b. Thulac: An efficient
lexical analyzer for chinese. Technical report, Tech-
nical Report.

John Wieting, Mohit Bansal, Kevin Gimpel, and Karen
Livescu. 2016. Charagram: Embedding words and
sentences via character n-grams. arXiv preprint
arXiv:1607.02789.

Jian Xu, Jiawei Liu, Liangang Zhang, Zhengyu Li, and
Huanhuan Chen. 2016. Improve chinese word em-
beddings by exploiting internal structure. In Pro-
ceedings of the 2016 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
1041–1050.

Rongchao Yin, Quan Wang, Peng Li, Rui Li, and Bin
Wang. 2016. Multi-granularity chinese word em-
bedding. In Proceedings of the 2016 Conference on
Empirical Methods in Natural Language Process-
ing, pages 981–986.

Jinxing Yu, Xun Jian, Hao Xin, and Yangqiu Song.
2017. Joint embeddings of chinese words, char-
acters, and fine-grained subcharacter components.
In Proceedings of the 2017 Conference on Empiri-
cal Methods in Natural Language Processing, pages
286–291.

Shiwen Yu, Jianming Lu, Xuefeng Zhu, Huiming
Duan, Shiyong Kang, Honglin Sun, Hui Wang,
Qiang Zhao, and Weidong Zhan. 2001. Processing
norms of modern chinese corpus. Technical report,
Technical report.


