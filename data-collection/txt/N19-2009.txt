



















































Multi-Modal Generative Adversarial Network for Short Product Title Generation in Mobile E-Commerce


Proceedings of NAACL-HLT 2019, pages 64–72
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

64

Multi-Modal Generative Adversarial Network for Short Product Title
Generation in Mobile E-Commerce

Jian-Guo Zhang,1 Pengcheng Zou,2 Zhao Li,2 Yao Wan,3
Xiuming Pan,2 Yu Gong,2 Philip S. Yu1

1 University of Illinois at Chicago, USA; 2Alibaba Group; 3Zhejiang University, China
{jzhan51,psyu}@uic.edu, wanyao@zju.edu.cn
{xuanwei.zpc,lizhao.lz}@alibaba-inc.com
{xuming.panxm,gongyu.gy}@alibaba-inc.com

Abstract

Nowadays, more and more customers browse
and purchase products in favor of using mobile
E-Commerce Apps such as Taobao and Ama-
zon. Since merchants are usually inclined to
describe redundant and over-informative prod-
uct titles to attract attentions from customers,
it is important to concisely display short prod-
uct titles on limited screen of mobile phones.
To address this discrepancy, previous studies
mainly consider textual information of long
product titles and lacks of human-like view
during training and evaluation process. In
this paper, we propose a Multi-Modal Gen-
erative Adversarial Network (MM-GAN) for
short product title generation in E-Commerce,
which innovatively incorporates image infor-
mation and attribute tags from product, as well
as textual information from original long ti-
tles. MM-GAN poses short title generation
as a reinforcement learning process, where the
generated titles are evaluated by the discrimi-
nator in a human-like view. Extensive exper-
iments on a large-scale E-Commerce dataset
demonstrate that our algorithm outperforms
other state-of-the-art methods. Moreover, we
deploy our model into a real-world online E-
Commerce environment and effectively boost
the performance of click through rate and click
conversion rate by 1.66% and 1.87%, respec-
tively.

1 Introduction

E-commerce companies such as TaoBao and Ama-
zon put many efforts to improve the user experience
of their mobile Apps. For the sake of improving re-
trieval results by search engines, merchants usually
write lengthy, over-informative, and sometimes in-
correct titles, e.g., the original product title in Fig.
1 contains more than 20 Chinese words, which
may be suitable for PCs. However, these titles are
cut down and no more than 10 words can be dis-
played on a mobile phone with limited screen size
varying from 4 to 5.8 inches. Hence, to properly

Figure 1: A product with original long titles (green
box), cutoff short titles (red box), the main image (blue
box), and attribute tags (yellow box).

display products in mobile screen, it is important
to produce succinct short titles to preserve impor-
tant information of original long titles and accurate
descriptions of products.

This problem is related to text summarization,
which can be categorized into two classes: extrac-
tive (Cao et al., 2016; Miao and Blunsom, 2016;
Nallapati et al., 2017) and abstractive (Chen et al.,
2016; Chopra et al., 2016; See et al., 2017; Wan
et al., 2018) methods. The extractive methods se-
lect important words from original titles, while the
abstractive methods generate titles by extracting
words from original titles or generating new words
from data corpus. They usually approximate such
goals by predicting the next word given previous
predicted words using maximum likelihood estima-
tion (MLE) objective. Despite their successes to a
large extent, they suffer from the issue of exposure
bias (Ranzato et al., 2016). It may cause the mod-
els to behave in undesired ways, e.g., generating
repetitive or truncated outputs. In addition, predict-
ing next word based on previously generated words
will make the learned model lack of human-like



65

holistic view of the whole generated short product
titles.

More recent state-of-the-art methods (Gong
et al., 2018; Wang et al., 2018) treat short prod-
uct titles generation as a sentence compression
task following attention-based extractive mech-
anism. They extract key characteristics mainly
from original long product titles. However, in real
E-Commerce scenario, product titles are usually
redundant and over-informative, and sometimes
even inaccurate, e.g., long titles of a cloth may in-
clude both “å»å|çé (hip-pop|wild)" and “æèo|æ·å
(artsy|delicate)" simultaneously. It is a tough task
to generate succinct and accurate short titles merely
relying on the original titles. Therefore, it is insuf-
ficient to regard short title generation as traditional
text summarization problem in which original text
has already contained complete information.

In this paper, we propose a novel Multi-Modal
Generative Adversarial Network, named MM-
GAN, to better generate short product titles. It
contains a generator and a discriminator. The gen-
erator generates a short product title based on orig-
inal long titles, with additional information from
the corresponding visual image and attribute tags.
On the other hand, the discriminator tries to distin-
guish whether the generated short titles are human-
produced or machine-produced in a human-like
view. The task is treated as a reinforcement learn-
ing problem, in which the quality of a machine-
generated short product title depends on its ability
to fool the discriminator into believing it is gen-
erated by human, and output of the discriminator
is a reward for the generator to improve generated
quality. The main contributions of this paper can
be summarized as follows:

• In this paper, we focus on a fundamental prob-
lem existing in the E-Commerce industry, i.e.,
generating short product titles for mobile E-
Commerce Apps. We formulate the problem
as a reinforcement learning task;
• We design a multi-modal generative adversar-

ial network to consider multiple modalities of
inputs for better short product titles generation
in E-commerce;
• To verify the effectiveness of our proposed

model, we deploy it into a mobile E-
commerce App. Extensive experiments on a
large-scale real-world dataset with A/B testing
show that our proposed model outperforms
state-of-the-art methods.

2 Related Work

Our work is related to text summarization tasks and
generative adversarial networks (GANs).

Text Summarization. In terms of text sum-
marization, it mainly includes two categories of
approaches: extractive and abstractive methods.
Extractive methods produce a text summary by
extracting and concatenating several words from
original sentence. Whereas abstractive methods
generate a text summary based on the original sen-
tence, which usually generate more readable and
coherent summaries. Traditional extractive meth-
ods such as graphic models (Mihalcea, 2005) and
optimization-based models (Woodsend and Lap-
ata, 2010) usually rely on human-engineered fea-
tures. Recent RNN-based methods (Chopra et al.,
2016; Gong et al., 2018; Nallapati et al., 2017;
Wang et al., 2018) have become popular in text
summarization tasks. Among them, (Gong et al.,
2018; Wang et al., 2018) design attention-based
neural networks for short product titles generation
in E-commerce. (Gong et al., 2018) considers rich
semantic features of long product titles. (Wang
et al., 2018) designs a multi-task model and uses
user searching log data as additional task to facili-
tate key words extraction from original long titles.
However, they mainly consider information from
textual long product titles, which sometimes are
not enough to select important words and filter out
over-informative and irrelevant words from long
product titles. In addition, these methods mainly
apply MLE objective and predict next word based
on previous words. As a consequence, these mod-
els usually suffer from exposure bias and lack of
human-like view.

Generative Adversarial Networks (GANs).
GAN is firstly proposed in (Goodfellow et al.,
2014), which is designed for generating real-valued,
continuous data, and has gained great success in
computer vision tasks (Dai et al., 2017; Isola et al.,
2017; Ledig et al., 2017). However, applying
GANs to discrete scenarios like natural language
has encountered many difficulties, since the dis-
crete elements break the differentiability of GANs
and prohibit gradients backpropagating from the
discriminator to generator. To mitigate these above
mentioned issues, SeqGan (Yu et al., 2017) mod-
els sequence generation procedure as a sequential
decision making process. It applies a policy gradi-
ent method to train the generator and discriminator,
and shows improvements on multiple generation



66

task such as poem generation and music gener-
ation. MaskGan (Fedus et al., 2018) designs a
actor-critic reinforcement learning based GAN to
improve qualities of text generation through fill-
ing in missing texts conditioned on the surround-
ing context. There are also some other RL based
GANs for text generation such as LeakGan (Guo
et al., 2017), RankGan (Lin et al., 2017), SentiGan
(Wang and Wan, 2018), etc. All above methods
are designed for unsupervised text generation tasks.
(Li et al., 2017) designs an adversarial learning
method for neural dialogue generation. They train
a seq2seq model to produce responses and use a
discriminator to distinguish whether the responses
are human-generated and machine-generated, and
showing promising results. It should be noticed
that our work differs from other similar tasks such
as image captioning (Dai et al., 2017) and visual
question answering (Antol et al., 2015). The image
captioning can be seen as generating caption from a
single modality of input, while the visual question
answering mainly focuses on aligning the input im-
age and question to generate a correct answer. In
our task, we put more attention on learning more in-
formation from the multi-modal input sources (i.e.,
long product titles, product image and attribute
tags) to generate a short product title.

3 Multi-Modal Generative Adversarial
Network

In this section, we describe in details the pro-
posed MM-GAN. The problem can be formulated
as follows: given an original long product title
L = {l1, l2, ..., lK} consisted of K Chinese or
English words, a single word can be represented
in a form like “skirt" in English or “半身裙"
in Chinese. With an additional image I and at-
tribute tags A = {a1, a2, ..., aM}, the model tar-
gets at generating a human-like short product title
S = {s1, s2, ..., sN}, whereM andN are the num-
ber of words in A and S, respectively.

3.1 Multi-Modal Generator

The multi-modal generative model defines a policy
of generating short product titles S given origi-
nal long titles L, with additional information from
product image I and attribute tags A. Fig. 2 illus-
trates the architecture of our proposed multi-modal
generator which follows the seq2seq (Sutskever
et al., 2014) framework.

Multi-Modal Encoder. As we mentioned be-

Figure 2: Overall Framework of MM-GAN.

fore, our model tries to incorporate multiple modal-
ities of a product (i.e., product image, attribute
tags and long title). To learn the multi-modal
embedding of a product, we first adopt a pre-
trained VGG16 (Simonyan and Zisserman, 2015)
as the CNN architecture to extract features V =
[v1, v2, ..., vZ ] of an image I from the condensed
fully connected layers, where Z is the number of
latent features. In order to get more descriptive
features, we fine-tune the last 3 layers of VGG16
based on a supervised classification task given
classes of products images. Second, we encode
the attribute tags A into a fixed-length feature vec-
tor U = [u1, u2, . . . , uM ′ ], and U = f1(A), where
f1 denotes fully connected layers, M ′ is the out-
put size of f1. Third, we apply a recurrent neu-
ral network to encode the original long titles L
as O = [o1, o2, . . . , oK ], where ot = f2(ot−1, lt).
Here f2 represents a non-linear function, and in this
paper the LSTM unit (Hochreiter and Schmidhuber,
1997) is adopted.

Decoder. The hidden state ht for the t-th target
word st in short product titles S can be calculated
as ht = f2(ht−1, st−1, ôt). Here we adopt an atten-
tion mechanism (Bahdanau et al., 2015) to capture
important words from original long titles L. The
context vector ôt is a weighted sum of hidden states
O, which is represented as:

ôt =
K∑
k=1

αt,kok, (1)

where αt,k is the contribution of an input word lk
to the t-th target word using an alignment model g
(Bahdanau et al., 2015):

αt,k =
exp(g(ht−1, ok))∑K

k′=1 exp(g(ht−1, ok′))
. (2)



67

After obtaining all features U , V , Ô from A, I
and L, respectively, we then concatenate them into
the final feature vector:

C = tanh(W [Ô;V ;U ]), (3)

where W are learnable weights and [; ] denotes the
concatenation operator.

Finally, C is fed into the LSTM based decoder
to predict the probability of generating each target
word for short product titles S. As the sequence
generation problem can be viewed as a sequence
decision making process (Bachman and Precup,
2015), we denote the whole generation process as
a policy π(S|C).

3.2 Discriminator

The discriminator model D is a binary classifier
which takes an input of a generated short prod-
uct titles S and distinguishes whether it is human-
generated or machine-generated. The short prod-
uct titles are encoded into a vector representation
through a two-layer LSTM model, and then fed
into a sigmoid function, which returns the probabil-
ity of the input short product titles being generated
by human:

Rφ(S) = sigmoid(Wd [LSTM(S)] + bd), (4)

where φ are learnable parameters for D, Wd is a
weight matrix and bd is a bias vector.

3.3 End-to-End Training

The multi-modal generator G tries to generate a
sequence of tokens S under a policy π and fool
the discriminator D via maximizing the reward
signal received from D. The objective of G can be
formulated as follows:

J(θ) = ES∼πθ(S|C) [Rφ(S)] , (5)

where θ are learnable parameters for G.
Conventionally, GANs are designed for gener-

ating continuous data and thus G is differentiable
with continuous parameters guided by the objective
function from D (Yu et al., 2017). Unfortunately, it
has difficulty in updating parameters through back-
propagation when dealing with discrete data in text
generation. To solve the problem, we adopt the
REINFORCE algorithm (Williams, 1992). Specif-
ically, once the generator reaches the end of a se-
quence (i.e., S = S1:T ), it receives a rewardRφ (S)
from D based on the probability of being real.

In text generation, D will provide a reward to G
only when the whole sequence has been generated,
and no intermediate reward is obtained before the
final token of S is generated. This may cause the
discriminator to assign a low reward to all tokens
in the sequence though some tokens are proper re-
sults. To mitigate the issue, we evaluate the reward
function by aggregating the N ′-time Monte-Carlo
simulations (Yu et al., 2017) at each decoding step:

R
′
φ(S1:t−1, a

′ = st) ≈ (6){
1
N ′

∑N ′
n=1R(S1:t, S

(n)
t+1:N ), t < N

R(S1:t−1, st), t = N,

where {S(1)t+1:N , . . . , S
(N ′)
t+1:N} is the set of generated

short titles, which are sampled from the t+1-th de-
coding step based current state and action. Now we
can compute the gradient of the objective function
for the generator G:

∇θJ(θ) ≈ (7)

ES∼πθ(S|C)

[
N∑
t=1

∇θ log(πθ(st|C))R
′
φ(S1:t−1, st)

]
,

where ∇θ is the partial differentiable operator for
θ in G, and the reward R

′
φ is fixed during updating

of generator.
The objective function for the discriminator D

can be formulated as:

ES∼Pθ(S|C)
[
logR

′
φ(S|C)

]
−ES∼πθ(S|C)

[
logR

′
φ(S|C)

]
,

(8)

where S ∼ Pθ and S ∼ πθ denote that S is
from human-written sentences and synthesized sen-
tences, respectively.

On training stage, we first pre-train G and D for
several steps. Due to the large size of searching
space of possible sequences, it is also very impor-
tant to feed human-generated short product titles
to the generator for model updates. Specifically,
we follow the Teacher Forcing mechanism (Lamb
et al., 2016). In each training step, we first update
the generator using machine-generated data with
rewards gained from the discriminator, then sam-
ple some data from human-generated short product
titles and assign a reward of 1 to them, where the
generator uses this reward to update parameters.
Alg. 1 summarizes the training procedure, where
D-steps and G-steps are both set to 1 in this paper.



68

Algorithm 1: Multi-Modal Generative Adver-
sarial Network

Input: Long product titles L, short titles S, images I ,
attribute tags A. Multi-modal generator G,
discriminator D.

1 Fine-tune last 3 layers of pretrained VGG16 network to
get image features V based on a classification task

2 Pretrain G on human-generated data using MLE
3 Pretrain D on human-generated data and

machine-generated data
4 for number of training iterations do
5 for i← 1 to D-steps do
6 Sample S from human-generated data
7 Sample Ŝ ∼ πθ(·|C)
8 Update D on both S and Ŝ

9 for i← 1 to G-steps do
10 Sample (L, V,A, S) from human-generated

data
11 Sample (L, V,A, Ŝ) ∼ πθ(·|C) based on MC

search
12 Compute reward R

′
φ for (L, V,A, Ŝ) using D

13 Update G using R
′
φ based on Eq. (7)

14 Teacher-Forcing: Update G on (L, V,A, S)
using MLE

Data set size 2,403,691
Avg. length of long Titles 13.7
Avg. length of Short Titles 4.5
Avg. length of Attributes Tags 18.3
Avg. number of Image 1

Table 1: Statistics of the crawled dataset. Here all the
lengths are counted by Chinese or English words.

4 Experiments

4.1 Experimental Setup

Dataset. The dataset used in our experiment is
crawled from a module named 有好货 (Youhao-
huo) of the well-known淘宝 (TAOBAO) platform
in China. Every product in the dataset includes a
long product title and a short product title written
by professional writers, along with product sev-
eral high quality visual images and attributes tags,
here for each product we use its main image. This
Youhaohuo module includes more than 100 cate-
gories of products, we crawled top 7 categories
of them in the module, and exclude the products
with original long titles shorter than 10 Chinese
characters. We further tokenize the original long
tittles and short titles into Chinese or English words,
e.g. “skirt” is a word in English and半身裙 is a
word in Chinese. Table 1 shows some details of
the dataset. We randomly select 1.6M samples for
training, 0.2M samples for validation, and test our
proposed model on 5000 samples.

Baselines. We compare our proposed model
with the following four baselines: (a) Pointer
Network (Ptr-Net) (See et al., 2017) which is a
seq2seq based framework with pointer-generator
network copying words from the source text
via pointing. (b) Feature-Enriched-Net (FE-Net)
(Gong et al., 2018) which is a deep and wide model
based on attentive RNN to generate the textual long
product titles. (c) Agreement-based MTL (Agree-
MTL) (Wang et al., 2018) which is a multi-task
learning approach to improve product title com-
pression with user searching log data. (d) Genera-
tive Adversarial Network (GAN) (Li et al., 2017)
which is a generative adversarial method for text
generation with only one modality of input.

Implementation Details. We first pre-train
the multi-modal generative model given human-
generated data via maximum likelihood estima-
tion (MLE), and we transfer the pretrained model
weights for the multi-modal encoder and decoder
modules. Then we pre-train the discriminator us-
ing human-generated data and machine-generated
data. To get training samples for the discriminator,
we sample half of data from multi-modal generator
and another half from human-generated data. After
that, we perform normal training process based on
pre-trained MM-GAN.

Specifically, we create a vocabulary of 35K
words for long product titles and short titles, and
another vocabulary of 35k for attribute tags in train-
ing data with size of 1.6M. Words appear less than
8 times in the training set are replaced as <UNK>.
We implement a two-layer LSTM with 100 hid-
den states to encoder attribute tags, and all other
LSTMs in our model are two layers with 512 hid-
den states. The last 3 layers of the pre-trained
VGG16 network are fine tuned based on the prod-
ucts visual images with 7 classes. The Adam opti-
mizer (Kingma and Ba, 2015) is initialized with a
learning rate 10−3. The multi-modal generator and
discriminator are pre-trained for 10000 steps, the
normal training steps are set to 13000, the batch
size is set to 512 for the discriminator and 256 for
the generator, the MC search time is set to 7.

4.2 Automatic Evaluation

To evaluate the quality of generated product short
titles, we follow (Wang et al., 2018; Gong et al.,
2018) and use standard recall-oriented ROUGE
metric (Lin, 2004), which measures the generated
quality by counting the overlap of N-grams be-



69

Models Ptr-Net FE-Net Agree-MTL GAN MM-GAN
ROUGE-1 59.21 61.07 66.19 60.67 69.53
ROUGE-2 42.01 44.16 49.39 46.46 52.38
ROUGE-L 57.12 58.00 64.04 60.27 65.80

Table 2: ROUGE performance of different models on the test set.

Data Methods Results

Product Long Titles
Artka阿卡夏新花边镂空荷叶边抽绳民族狂野复古衬衫 S110061Q
(Artka Artka summer lace hollow-out flounce drawstring
nation wild retro shirt S110061Q)

FE-Net
阿卡花边镂空荷叶边衬衫
(Artka lace hollow-out flounce shirt)

Image
Attributes Tags

修身常规款圆领 Artka米白长袖
套头复古通勤纯色夏季喇叭袖棉
(slim common round-neck Artka off-white long-sleeve
pullover retro commuting plain summer flare-sleeve cotton)

Agree-MTL
Artka阿卡夏新花边镂空荷叶边衬衫
(Artka Artka summer lace hollow-out flounce shirt)

GAN
Artka荷叶边抽绳衬衫
(Artka lace flounce drawstring shirt)

MM-GAN
Artka花边荷叶边镂空复古衬衫
(Artka lace flounce hollow-out retro shirt)

Table 3: The comparison of generated short titles among different methods.

tween the machine-generated and human- gener-
ated titles. Here we consider ROUGE-1 (1-gram),
ROUGE-2 (bi-grams), ROUGE-L (longest com-
mon subsequence). Experimental results on the
test set are shown in Table 2. From this table, we
note that our proposed MM-GAN achieves best
performance on three metrics. Furthermore, when
comparing MM-GAN with GAN, we can see that
our proposed MM-GAN achieves an improvement
of 8.86%, 5.92%, 5.53%, in terms of ROUGE-1,
ROUGE-2, ROUGE-3, respectively. This verifies
that additional information such as image and at-
tribute tags from product can absolutely facilitate
our model to generate better short titles. In addition,
compared with the best model Agree-MTL, MM-
GAN improves ROUGE-1, ROUGE-2, ROUGE-
L by 3.34%, 2.99%, 1.76%, respectively. We at-
tribute the outperformance of MM-GAN to two
facts: (a) it incorporates multiple sources, con-
taining more information than other single-source
based models. (b) it applies a discriminator to dis-
tinguish whether a product short titles are human-
generated or machine-generated, which makes the
model evaluate the generated sequence in a human-
like view, and naturally avoid exposure bias in other
methods.

4.3 Online A/B Testing

In order to further verify the effectiveness of MM-
GAN, we test our method in the real-world online
environment of the TaoBao App.

We perform A/B testing in seven categories
of products in the E-commerce App, i.e., “连衣
裙| (one-piece)", “男士T恤| (Man T-shirt), “衬
衫| (shirt)”, “休闲裤| (Casual pants)", “女士T恤
| (Woman T-shirt)”, “半身裙| (skirt)", “毛针

织衫| (Sweaters)". During online A/B testing,
users (3 × 106 users per day) are split equally
into two groups and are directed into a baseline
bucket and an experimental bucket. For users in
the baseline bucket, product short titles are gen-
erated by the default online system, following
an ILP based method (Clarke and Lapata, 2008).
While for users in the experimental bucket, product
short titles are generated by MM-GAN. All con-
ditions in the two buckets are identical except for
short titles generation methods. We apply Click
Through Rate (CTR) and Click Conversion Rate
(CVR) to measure the performance. CTR =
#click_of_product
#pv_of_product , and CV R =

#trade_of_product
#click_of_product ,

where #click_of_product indicates clicking
times of a product, #pv_of_product is the
number of page views of the product and
#trade_of_product is the number of purchases
of the product.

We deploy A/B testing for 7 days and calcu-
late overall CTR for all products in the baseline
bucket and experimental bucket. MM-GAN im-
proves CTR by 1.66% and CVR by 1.87% in the
experimental bucket over the default online system
in the baseline bucket. It verifies the effectiveness
of our proposed method. Moreover, through online
A/B testing, we find that with more readable, infor-
mative product short titles, users are more likely to
click, view and purchase corresponding products,
which indicates good short product titles can help
improving the product sales on E-commerce Apps.

4.4 Qualitative Analysis

Table 3 shows a sample of product short titles gen-
erated by MM-GAN and baselines.

From this table, we can note that (a) product



70

Figure 3: Some samples generated by MM-GAN.

short titles generated by our model are more flu-
ent, informative than baselines, and core prod-
uct words (e.g., “Artka| (阿卡)", “复古| (retro)",
“衬衫| (shirt)") can be recognized. (b) There
are over-informative words (e.g., “阿卡| (Artka)",
“S110061Q") and irrelevant words (e.g., “狂野|
(wild)") in product long titles. Over-informative
words may disturb model’s generation process, ir-
relevant words may give incorrect information to
the model. These situations could happen in real E-
commerce environment. FE-Net misses the English
brand name “Artka" and gives its Chinese name ‘阿
卡" instead. Agree-MTL using user searching log
data performs better than GAN. However, Agree-
MTL still generates the over-informative word ‘阿
卡". MM-GAN outperforms all baselines, infor-
mation in additional attribute tags such as “复古|
(retro)", “Artka"), and other information from the
product main image are together considered by the
model and help the model select core words and fil-
ter out irrelevant words in generated product short
titles. It shows that MM-GAN using different types
of inputs can help generate better product short
titles. To leave a deeper impression on the perfor-
mance of our proposed model, we also put more
online samples generated by the MM-GAN in a
module of the TaoBao App, as shown in Fig. 3.
From all generated samples we also find few bad

cases which are not shown online (e.g., repetitive
words in the generated short titles, wrong generated
words which are not related to the product at all),
leaving a great space for further improvement.

5 Conclusion

In this paper, we propose a multi-modal generative
adversarial network for short product title genera-
tion in E-commerce. Different from conventional
methods which only consider textual information
from long product titles, we design a multi-modal
generative model to incorporate additional informa-
tion from product image and attribute tags. Exten-
sive experiments on a large real-world E-commerce
dataset verify the effectiveness of our proposed
model when comparing with several state-of-the-
art baselines. Moreover, the online deployment in
a real environment of an E-commerce app shows
that our method can improve the click through rate
and click conversion rate.

6 Acknowledgement

This work is supported in part by NSF through
grants IIS-1526499, IIS-1763325, and CNS-
1626432, and NSFC 61672313. We thank the
anonymous reviewers for their valuable comments.



71

References
Stanislaw Antol, Aishwarya Agrawal, Jiasen Lu, Mar-

garet Mitchell, Dhruv Batra, C Lawrence Zitnick,
and Devi Parikh. 2015. Vqa: Visual question an-
swering. In ICCV.

Philip Bachman and Doina Precup. 2015. Data genera-
tion as sequential decision making. In NIPS.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In ICLR.

Ziqiang Cao, Wenjie Li, Sujian Li, Furu Wei, and Yan-
ran Li. 2016. Attsum: Joint learning of focusing and
summarization with neural attention. In COLING.

Qian Chen, Xiaodan Zhu, Zhenhua Ling, Si Wei, and
Hui Jiang. 2016. Distraction-based neural networks
for document summarization. In IJCAI.

Sumit Chopra, Michael Auli, and Alexander M Rush.
2016. Abstractive sentence summarization with at-
tentive recurrent neural networks. In NAACL-HLT.

James Clarke and Mirella Lapata. 2008. Global infer-
ence for sentence compression: An integer linear
programming approach. Journal of Artificial Intel-
ligence Research.

Bo Dai, Sanja Fidler, Raquel Urtasun, and Dahua Lin.
2017. Towards diverse and natural image descrip-
tions via a conditional gan. In ICCV.

William Fedus, Ian Goodfellow, and Andrew M Dai.
2018. Maskgan: Better text generation via filling in
the _. In ICLR.

Yu Gong, Xusheng Luo, Kenny Q Zhu, Shichen Liu,
and Wenwu Ou. 2018. Automatic generation of chi-
nese short product titles for mobile display. In IAAI.

Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza,
Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron
Courville, and Yoshua Bengio. 2014. Generative ad-
versarial nets. In NIPS.

Jiaxian Guo, Sidi Lu, Han Cai, Weinan Zhang, Yong
Yu, and Jun Wang. 2017. Long text generation
via adversarial training with leaked information. In
AAAI.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long
short-term memory. Neural computation.

Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A
Efros. 2017. Image-to-image translation with condi-
tional adversarial networks. In ICCV.

Diederik P Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In ICLR.

Alex M Lamb, Anirudh Goyal ALIAS PARTH
GOYAL, Ying Zhang, Saizheng Zhang, Aaron C
Courville, and Yoshua Bengio. 2016. Professor forc-
ing: A new algorithm for training recurrent net-
works. In NIPS.

Christian Ledig, Lucas Theis, Ferenc Huszár, Jose
Caballero, Andrew Cunningham, Alejandro Acosta,
Andrew P Aitken, Alykhan Tejani, Johannes Totz,
Zehan Wang, et al. 2017. Photo-realistic single im-
age super-resolution using a generative adversarial
network. In CVPR.

Jiwei Li, Will Monroe, Tianlin Shi, Sébastien Jean,
Alan Ritter, and Dan Jurafsky. 2017. Adversarial
learning for neural dialogue generation. In EMNLP.

Chin-Yew Lin. 2004. Rouge: A package for auto-
matic evaluation of summaries. Text Summarization
Branches Out.

Kevin Lin, Dianqi Li, Xiaodong He, Zhengyou Zhang,
and Ming-Ting Sun. 2017. Adversarial ranking for
language generation. In NIPS.

Yishu Miao and Phil Blunsom. 2016. Language as a
latent variable: Discrete generative models for sen-
tence compression. In EMNLP.

Rada Mihalcea. 2005. Language independent extrac-
tive summarization. In ACL.

Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017.
Summarunner: A recurrent neural network based se-
quence model for extractive summarization of docu-
ments. In AAAI.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2016. Sequence level train-
ing with recurrent neural networks. In ICLR.

Abigail See, Peter J Liu, and Christopher D Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In ACL.

Karen Simonyan and Andrew Zisserman. 2015. Very
deep convolutional networks for large-scale image
recognition. In ICLR.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural networks.
In NIPS.

Yao Wan, Zhou Zhao, Min Yang, Guandong Xu,
Haochao Ying, Jian Wu, and Philip S Yu. 2018. Im-
proving automatic source code summarization via
deep reinforcement learning. In Proceedings of the
33rd ACM/IEEE International Conference on Auto-
mated Software Engineering, pages 397–407. ACM.

Jingang Wang, Junfeng Tian, Long Qiu, Sheng Li, Jun
Lang, Luo Si, and Man Lan. 2018. A multi-task
learning approach for improving product title com-
pression with user search log data. In AAAI.

Ke Wang and Xiaojun Wan. 2018. Sentigan: Gener-
ating sentimental texts via mixture adversarial net-
works. In IJCAI.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. Machine learning.



72

Kristian Woodsend and Mirella Lapata. 2010. Auto-
matic generation of story highlights. In ACL.

Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu.
2017. Seqgan: Sequence generative adversarial nets
with policy gradient. In AAAI.


