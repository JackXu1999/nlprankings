



















































Playing 20 Question Game with Policy-Based Reinforcement Learning


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 3233–3242
Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics

3233

Playing 20 Question Game with Policy-Based Reinforcement Learning

Huang Hu1∗, Xianchao Wu3, Bingfeng Luo1, Chongyang Tao1,
Can Xu2, Wei Wu2 and Zhan Chen3

1Peking University, Beijing, China
2Microsoft Corporation, Beijing, China

3Microsoft Development Co., Ltd, Tokyo, Japan
1{tonyhu,bf luo,chongyangtao}@pku.edu.cn

2,3{xiancwu,can.xu,wuwei,zhanc}@microsoft.com

Abstract

The 20 Questions (Q20) game is a well known
game which encourages deductive reasoning
and creativity. In the game, the answerer first
thinks of an object such as a famous person
or a kind of animal. Then the questioner tries
to guess the object by asking 20 questions. In
a Q20 game system, the user is considered as
the answerer while the system itself acts as
the questioner which requires a good strategy
of question selection to figure out the correct
object and win the game. However, the op-
timal policy of question selection is hard to
be derived due to the complexity and volatil-
ity of the game environment. In this paper,
we propose a novel policy-based Reinforce-
ment Learning (RL) method, which enables
the questioner agent to learn the optimal pol-
icy of question selection through continuous
interactions with users. To facilitate training,
we also propose to use a reward network to
estimate the more informative reward. Com-
pared to previous methods, our RL method is
robust to noisy answers and does not rely on
the Knowledge Base of objects. Experimental
results show that our RL method clearly out-
performs an entropy-based engineering system
and has competitive performance in a noisy-
free simulation environment.

1 Introduction

The 20 Question Game (Q20 Game) is a classic
game that requires deductive reasoning and cre-
ativity. At the beginning of the game, the an-
swerer thinks of a target object and keeps it con-
cealed. Then the questioner tries to figure out
the target object by asking questions about it, and
the answerer answers each question with a simple
“Yes”, “No” or “Unknown”, honestly. The ques-
tioner wins the game if the target object is found
within 20 questions. In a Q20 game system, the

∗The work was done when the first author was an intern
in Microsoft XiaoIce team.

user is considered as the answerer while the sys-
tem itself acts as the questioner which requires a
good question selection strategy to win the game.

As a game with the hype read your mind, Q20
has been played since the 19th century, and was
brought to screen in the 1950s by the TV show
Twenty Questions. Burgener’s program (Burgener,
2006) further popularized Q20 as an electronic
game in 1988, and modern virtual assistants like
Microsoft XiaoIce and Amazon Alexa also incor-
porate this game into their system to demonstrate
their intelligence.

However, it is not easy to design the algorithm
to construct a Q20 game system. Although the de-
cision tree based method seems like a natural fit
to the Q20 game, it typically require a well de-
fined Knowledge Base (KB) that contains enough
information about each object, which is usually
not available in practice. Burgener (2006) instead
uses a object-question relevance table as the pivot
for question and object selection, which does not
depend on an existing KB. Wu et al. (2018) further
improve the relevance table with a lot of engineer-
ing tricks. Since these table-based methods greed-
ily select questions and the model parameters are
only updated by rules, their models are very sen-
sitive to noisy answers from users, which is com-
mon in the real-world Q20 games. Zhao and Max-
ine (2016) utilizes a value-based Reinforcement
Learning (RL) model to improve the generaliza-
tion ability but still relies on the existing KB.

In this paper, we formulate the process of ques-
tion selction in the game as a Markov Deci-
sion Process (MDP), and further propose a novel
policy-based RL framework to learn the optimal
policy of question selection in the Q20 game. Our
questioner agent maintains a probability distribu-
tion over all objects to model the confidence of the
target object, and updates the confidence based on
answers from the user. At each time-step. the
agent uses a policy network πθ(a|s) to take in



3234

State

π(a|s)

Identify Activation

Masked Softmax

Q20 Game Environment
Next State

RewardNet

Take Action

Mini-Batch Samples

Episodes 
st, at, rt+1, st+1

Replay Memory

Policy-based Agent

User

Mini-Batch Samples  
with Estimated Reward

Ask Question

Answer the Question

Figure 1: The overview of our RL framework.

the confidence vector and output a question dis-
tribution for selecting the next question. To solve
the problem that there is no immediate reward for
each selected question, we also propose to employ
a RewardNet to estimate the appropriate immedi-
ate reward at each time-step, which is further used
to calculate the long-term return to train our RL
model. Our RL framework makes the agent robust
to noisy answers since the model parameters are
fully learnable and the question distribution from
πθ(a|s) provides us with a principled way to sam-
ple questions, which enables the agent to jump out
of the local optimum caused by incorrect answers
and also introduces more randomness during train-
ing to improve the model generalization ability.
Furthermore, the ability to sample questions, com-
pared to greedy selection, also improves the diver-
sity of the questions asked by our agent, which is
crucial for user experience.

Our contributions can be summarized as fol-
lows: (1) We propose a novel RL framework to
learn the optimal policy of question selection in
the Q20 game without any dependencies on the
existing KBs of target objects. Our trained agent
is robust to noisy answers and has a good diver-
sity in its selected questions. (2) To make the re-
ward more meaningful, we also propose a novel
neural network on reward function approximation
to deliver the appropriate immediate rewards at
each time-step. (3) Extensive experiments show
that our RL method clearly outperforms a highly
engineered baseline in the real-world Q20 games
where noisy answers are common. Besides, our
RL method is also competitive to that baseline on
a noise-free simulation environment.

2 Method

In this section, we first describe our RL framework
for playing the Q20 game, which is shown in the

Fig. 1. The user in our system is the answerer who
thinks of a target object otgt in the object set O
at the beginning of the game. Our policy-based
agent acts as the questioner that can ask 20 ques-
tions to figure out what exactly otgt is. Specifi-
cally, an internal state vector s is maintained by
our agent, which describes the confidence about
otgt. At each time-step t, the agent picks up the
promising action (select a question) according to
the policy πθ(a|st), and transits from the state st
to the next state st+1 after receiving the answer
(“Yes”/“No”/“Unknown”) from the user. The his-
torical trajectories 〈st, at, rt+1, st+1〉 are stored in
a replay memory which enables the agent to be
trained on previously observed data by sampling
from it. Note that only when a guess is made about
otgt at the end of game can the agent receive a re-
ward signal, which makes it unable to distinguish
the importance of each selected question. There-
fore, we design a RewardNet to learn the more in-
formative reward at each time-step and thus lead
the agent to achieve the better performance.

In the rest of this section, we first describe how
to formulate the Q20 game into a RL framework,
and then introduce the RewardNet. Finally, we
will demonstrate our training procedure in detail.

2.1 Modeling of the Q20 Game
In the Q20 game, the goal of our agent is to figure
out the object otgt that the user thinks of at the be-
ginning of game by asking 20 questions. We for-
mulate the process of question selection as a finite
Markov Decision Process (MDP) which can be
solved with RL. A tuple 〈S,A, P ,R, γ〉 is defined
to represent the MDP, where S is the continuous
state space, A = {a1, a2, · · · , am} is the set of all
available actions, P(St+1 = s′|St = s,At = a) is
the transition probability matrix,R(s, a) is the re-
ward function and γ ∈ [0, 1] is the discount factor
used to calculate the long-time return. In the RL
framework, at each time-step t, the agent takes an
action at under the state st according to the policy
πθ(a|st). After interacting with the environment,
the agent receives a reward scalar rt+1 and tran-
sits to the next state st+1, then another time-step
begins. All these trajectories 〈st, at, rt+1, st+1〉 in
a game constitute an episode which is an instance
of the finite MDP. The long-time return Gt of the
time-step t is calculated as follows:

Gt =
T∑
k=0

γkrt+k+1 (1)



3235

In the following parts, we describe each compo-
nent of RL corresponding to the Q20 game.

Environment. The major component of our en-
vironment is the user in the Q20 game who de-
cides the target object otgt and answers questions
from the agent. Besides, the environment also
needs to deliver the reward based on the outcome
of the game and store historical data into the replay
memory (see Fig. 1).

Action. Since the agent interacts with the user by
asking questions, the action at ∈ A taken by our
agent refers to selecting the question qat at time-
step t, andA is the set of the indices to all available
questions in the Q20 game.

State. In our method, we use the state st to keep
track of the current confidence of target object
otgt. Specifically st ∈ R|O| and

∑n
i=1 st,i = 1,

where O = {o1, o2, · · · , on} represents the set
of all the objects that can be chosen by the user.
Therefore, the state st is a probability distribution
over all the objects and st,i is the confidence that
the object oi is the target object otgt at time-step t.

The initial state s0 can either be a uniform dis-
tribution or initialized by the prior knowledge. We
observe that users typically prefer to choose popu-
lar objects which are more concerned by the pub-
lic. For example, the founder of Tesla Inc. and
the designer of SpaceX, “Elon Musk”, is more
likely to be chosen compared to a CEO of a new
startup. Motivated by this, we could use the yearly
retrieval frequency C(oi) of object oi on a com-
mercial search engine to calculate the initial state
s0, where s0,i = C(oi) /

∑n
j=1C(oj).

Transition Dynamics. In our method, the transi-
tion dynamics is deterministic. Given the object
set O and the question set A, we collect the nor-
malized probabilities of the answer over “Yes”,
“No” and “Unknown” for each object-question
pair. And the rule of state transition is define as:

st+1 = st �α (2)

where α depends on the answer xt to the question
qat which is selected by the agent at the step t:

α =


[R(1, at), . . . , R(|O|, at)], xt = Y es

[W (1, at), . . . ,W (|O|, at)], xt = No
[U(1, at), . . . , U(|O|, at)], xt = Unk

(3)
where O is the object set and for each object-
question pair (oi, qj), R(i, j) and W (i, j) are cal-

culated as follows:

R(i, j) =
Cyes(i, j) + δ

Cyes(i, j) + Cno(i, j) + Cunk(i, j) + λ

W (i, j) =
Cno(i, j) + δ

Cyes(i, j) + Cno(i, j) + Cunk(i, j) + λ

(4)

R(i, j) and W (i, j) are probabilities of answering
“Yes” and “No” to question qj with respect to the
object oi respectively. Cyes(i, j), Cno(i, j) and
Cunk(i, j) are frequencies of answering “Yes”,
“No” and “Unknown” to question qj with respect
to the object oi. δ and λ are smoothing parameters.
Then the probability of answering “Unknown” to
question qj with respect to the object oi is:

U(i, j) = 1−R(i, j)−W (i, j) (5)

In this way, the confidence st,i that the object
oi is the target object otgt is updated following the
user’s answer xt to the selected question qat at the
time-step t.

Policy Network. We directly parameterize the
policy πθ(a|st) with a neural network which maps
the state st to a probability distribution over all
available actions: πθ(a|st) = P[a|st; θ]. The pa-
rameters θ are updated to maximize the expected
return which is received from the environment. In-
stead of learning a greedy policy in value-based
methods like DQN, the policy network is able to
learn a stochastic policy which can increase the di-
versity of questions asked by our agent and poten-
tially make the agent more robust to noisy answers
in the real-world Q20 game. The policy πθ(a|s) is
modeled by a Multi-Layer Perceptron (MLP) and
the output layer is normalized by using a masked
softmax function to avoid selecting the question
that has been asked before. Because asking the
same question twice does not provide extra infor-
mation about otgt in a game.

2.2 Problem of Direct Reward
For most reinforcement learning applications, it is
always a critical part to design reward functions,
especially when the agent needs to precisely take
actions in a complex task. A good reward function
can improve the learning efficiency and help the
agent achieve better performances.

In the Q20 game, however, the immediate re-
ward rt of selecting question qat is unknown at the
time-step t (t < T ) because each selected ques-
tion is just answered with a simple “Yes”, “No” or



3236

“Unknown” and there is no extra information pro-
vided by user. Only when the game ends (t = T )
can the agent receive a reward signal of win or
loss. So we intuitively consider the direct reward:
rT = 30 and −30 for the win and loss respec-
tively while rt = 0 for all t < T . Unfortu-
nately, the direct reward is not discriminative be-
cause the agent receives the same immediate re-
ward rt = 0 (t < T ) for selecting both good and
bad questions. For example, if the otgt is “Donald
Trump”, then selecting question (a) “Is your role
the American president?” should receive more im-
mediate reward rt than selecting question (b) “Has
your role been married?”. The reason is that as for
the otgt, question (a) is more relevant and can nar-
row down the searching space to a greater extent.

Therefore, it is necessary to design a better re-
ward function to estimate a non-zero immediate
reward rt, and make the long-time return Gt =∑T

k=0 γ
krt+k+1 more informative.

2.3 Reward Function Approximation by
Neural Network

To solve the problem of the direct reward, we pro-
pose a reward function which employs a neural
network to estimate a non-zero immediate reward
rt at each time-step. So that Gt can be more infor-
mative, which thus leads to a better trained ques-
tioner agent.

The reward function takes the state-action pair
(st, at) as input and outputs the corresponding im-
mediate reward rt+1. In our method, we use a
MLP with sigmoid output to learn the appropri-
ate immediate reward during training, and this net-
work is referred as RewardNet. In each episode,
the long-term return Gt is used as a surrogate in-
dicator of rt+1 to train our RewardNet with the
following loss function:

L1(σ) = (R(st, at;σ)− sigmoid(Gt))2 (6)

where σ is the network parameters. Here we ap-
ply the sigmoid function on Gt so as to prevent
Gt from growing too large. Besides, we also use
the replay memory to store both old and recent ex-
periences, and then train the network by sampling
mini-batches from it. The training process based
on the experience replay technique can decorrelate
the sample data and thus make the training of the
RewardNet more efficient.

Furthermore, since the target object otgt can
be obtained at the end of each episode, we can

use the extra information provided by otgt to es-
timate a better immediate reward rt. To capture
the relevance between the selected questions and
otgt in an episode, we further propose a object-
aware RewardNet which takes the 〈st, at, otgt〉 tu-
ple as input and produces corresponding rt+1 as
output. The detailed training algorithm is shown
in Algo. 1.

Algorithm 1: Training Object-Aware Reward-
Net

1 Initialize replay memory D1 to capacity N1
2 Initialize RewardNet with random weights σ
3 for episode i← 1 to Z do
4 User chooses object oi from O
5 Initialize temporary set S1 and S2
6 Play with policy πθ(at|st), and store

(st, at) in S1, where t ∈ [0, T ]
7 rT ← 30 or −30 for a win or loss
8 for (st, at) in S1 do
9 Get rt+1 from RewardNet

10 Store (st, at, rt+1) tuple in S2
11 for (st, at, rt+1) in S2 do
12 Gt ←

∑T
k=0 γ

krt+k+1
13 r′t+1 ← sigmoid(Gt)
14 Store (st, at, oi, r′t+1) in D1
15 if len(D1) > K1 then
16 Sample mini-batch from D1
17 Update σ with loss L1(σ) in Eq. 6

2.4 Training the Policy-Based Agent
We train the policy network using REIN-
FORCE (Williams, 1992) algorithm and the cor-
responding loss function is defined as follows:

L2(θ) = −Eπθ [log πθ(at|st)(Gt − bt)] (7)

where the baseline bt is a estimated value of the ex-
pected future reward at the state st, which is pro-
duced by a value network Vη(st). Similarly, the
value network Vη(st) is modeled as a MLP which
takes the state st as input and outputs a real value
as the expected return. By introducing the base-
line bt for the policy gradient, we can reduce the
variance of gradients and thus make the training
process of policy network more stable. The net-
work parameters η are updated by minimizing the
loss function below:

L3(η) = (Vη(st)−Gt)2 (8)



3237

Note that, in our method, both the RewardNet
and the value network Vη(st) approximate the re-
ward during training. But the difference lies in
that the RewardNet is designed to estimate a ap-
propriate non-zero reward rt and further derive the
more informative return Gt while Vη(st) aims to
learn a baseline bt to reduce the variance of policy
gradients. We combine both of two networks to
improve the gradients for our policy network and
thus lead to a better agent. The training procedure
is described in Algo. 2.

Algorithm 2: Training the Agent
1 Initialize replay memory D2 to capacity N2
2 Initialize policy net π with random weights θ
3 Initialize value net V with random weights η
4 Initialize RewardNet with random weights σ
5 for episode i← 1 to Z do
6 Rollout, collect rewards, and save the

history in S2 (4-10 in Algo. 1)
7 for (st, at, rt+1) in S2 do
8 Gt ←

∑T
k=0 γ

krt+k+1
9 Update RewardNet (13-17 in

Algo. 1)
10 Store (st, at, Gt) in D2
11 if len(D2) > K2 then
12 Sample mini-batch from D2
13 Update η with loss L3 in Eq. 8
14 Update θ with loss L2 in Eq. 7

3 Experimental Setup

We use a user simulator to train our questioner
agent and test the agent with the simulated an-
swerer and real users. Specifically, our experi-
ments answer three questions: (1) Is our method
more robust in real-world Q20 games, compared
to the methods based on relevance table? (Sec-
tion. 4.2) And how does it perform in the simu-
lation environment? (Section. 4.1) (2) Does our
RewardNet help in the training process? (Sec-
tion. 4.3) (3) How the winning rate grows with the
number of questions, and whether it is possible to
stop earlier? (Section. 4.4)

3.1 User Simulator
Training the RL agent is challenging because the
agent needs to continuously interact with the envi-
ronment. To speed up the training process of the
proposed RL model, we construct a user simulator

which has enough prior knowledge to choose ob-
jects and answer questions selected by the agent.

We collect 1,000 famous people and 500 ques-
tions for them. Besides, for every person-question
pair in our dataset, a prior frequency distribution
over “Yes”, “No” and “Unknown” is also collected
from thousands of real users. For example, as for
“Donald Trump”, question (a) “Is your role the
American president?” is answered with “Yes” for
9,500 times, “No” for 50 times and “Unknown”
for 450 times. We use Eq.4 and 5 to construct three
matrices R,W,U ∈ R|O|∗|A| (|O| = 1000, |A| =
500) which are used for state transition in the Sec-
tion. 2.1. Then given the object oi and question qj ,
the user simulator answers “Yes”, “No” and “Un-
known” whenR(i, j),W (i, j), andU(i, j) has the
max value among them respectively.

Constructed by the prior knowledge, the sim-
ulator can give noise-free answer in most cases.
Because the prior frequency distribution for each
person-question pair is collected from thousands
of users with the assumption that most of them do
not lie when answering questions in the Q20 game.

In an episode, the simulator randomly samples a
person following the object distribution s0, which
is generated from the object popularity (see the
state part of Section. 2.1), as the target object.
Then the agent gives a guess when the number
of selected questions reaches 20. After that, the
simulator check the agent’s answer and return a
reward signal of win or loss. There is only one
chance for the agent to guess in an episode. The
win and loss reward are 30 and -30 respectively.

3.2 Implementation Details

While the architectures of the policy network, Re-
wardNet and value network can vary in different
scenarios, in this paper, we simply use the MLP
with one hidden layer of size 1,000 for all of them,
but with different parameters. These networks
take in the state vector directly, which is a prob-
ability distribution over all objects. The Reward-
Net further takes in the one-hot vector of action
at. Based on the input of RewardNet, the object-
aware RewardNet takes one more target object otgt
as the feature which is also a one-hot vector.

We use the ADAM optimizer (Kingma and Ba,
2014) with the learning rate 1e-3 for policy net-
work and 1e-2 for both RewardNet and value net-
work. The discounted factor γ for calculating the
long-term return is 0.99. The model was trained up



3238

0 25 50 75 100 125 150 175 200

No. Traing Steps ×10
4

0.4

0.5

0.6

0.7

0.8

0.9

1.0
W

in
 R

at
e

EntropyModel
RL_uniform
RL_popularity

Figure 2: Win Rate Curves in Simulation Environment.

to 2,000,000 steps (2,00,000 games) and the pol-
icy network was evaluated every 5,000 steps. Each
evaluation records the agent’s performance with a
greedy policy for 2,000 independent episodes. The
2,000 target objects for these 2,000 episodes are
randomly selected following the distribution s0,
which is generated from the object popularity and
kept the same for all the training settings.

3.3 Competitor

We compare our RL method with the entropy-
based model proposed by Wu et al. (2018), which
utilizes the real-world answers to each object-
question pair to calculate an object-question rele-
vance matrix with the entropy-based method. The
relevance matrix is then used for question ranking
and object ranking via carefully designed formu-
las and engineering tricks. Since this method is
shown to be effective in their production environ-
ment, we consider it to be a strong baseline to our
proposed RL model.

4 Experimental Results

4.1 Simulated Evaluation

We first evaluate our agent and the entropy-based
baseline (referred to as EntropyModel, see
Section. 3.3) by using the simulated user (Sec-
tion. 3.1). To investigate which initialization strat-
egy of the state s0 is better (see the state part of
Section. 2.1), we further evaluate two variants of
our model: the agent with uniform distribution s0
(RL uniform) and the agent with the distribution
s0 initialized by the prior knowledge on the object
popularity (RL popularity).

Fig. 2 shows the curves on the win rate of these
methods evaluated on 2,000 independent episodes

with respect to the number of training steps. Note
that, the EntropyModel only needs to update
its statistics during training and has already accu-
mulated a significant number of data since it has
been run for over a year in their production envi-
ronment. Therefore, only a small fraction of its
statistics can be changed, which leads to a small
rise at the beginning of training, and its win rate
remains at around 95% afterwards.

On the other hand, both our RL models con-
tinuously improve the win rate with the growing
number of interactions with the user simulator, and
they achieve 50% win rate after around 20,000
steps. As we can see, although the s0 initial-
ized with the prior knowledge of object popular-
ity keeps consistent with the object selection strat-
egy of the simulator, the agent with uniform dis-
tribution s0 (RL uniform) still performs clearly
better than the agent with s0 based on the prior
knowledge (RL popularity). The reason is
that the former can explore the Q20 game environ-
ment more fully. The prior knowledge based s0
helps the agent narrow down the candidate space
more quickly when the target object is a popu-
lar object. However, it also becomes misleading
when the target object is not popular and makes
the agent even harder to correct the confidence of
the target object. On the contrary, the uniform dis-
tribution s0 makes the agent keep track of the tar-
get object only based on the user’s answers. And
the superior performance of the RL uniform in-
dicates that our question selection policy is highly
effective, which means it is not necessary to use
the RL popularity to increase the win rate of
hot objects in the game.

As shown in Fig. 2, RL uniform achieves win
rate 94% which is very close to EntropyModel.
Compared to our RL method, EntropyModel
needs more user data to calculate their entropy-
based relevance matrix and involves many engi-
neering tricks. The fact that RL uniform is com-
petitive to EntropyModel in the noise-free sim-
ulation environment indicates that our RL method
is very cost-effective: it makes use of user data
more efficiently and is easier to implement.

4.2 Human Evaluation

To further investigate the performance of our RL
method in the real-world Q20 game where noisy
answers are common, we also conduct an human
evaluation experiment. Specifically, we let real



3239

Win Rate

EntropyModel 71.3%
RL uniform 75.9%

Table 1: Win Rate on Human Evaluation.

users to play the game with EntropyModel and
RL uniform for 1,000 times respectively. In the
real-world Q20 game, users sometimes make mis-
takes when they answer the questions during the
game. For example, as for the target object “Don-
ald Trump”, question (a) “Is your role the Ameri-
can president?” is sometimes answered with “No”
or “Unknown” by real users. On the contrary,
the simulator hardly makes such mistakes since
we have provided it with enough prior knowl-
edge. As shown in Table. 1, RL uniform out-
performs EntropyModel by about 4.5% on win
rate in the real-world Q20 games. It shows that
our RL method is more robust to noisy answers
than EntropyModel. Specifically, the robust-
ness of our RL method to the noise is shown in the
following two aspects. First, compared to the rule-
based statistics update in EntropyModel, our
RL model can be trained by modern neural net-
work optimizers in a principled way, which results
in the better generalization ability of our model.
Secondly, different from the EntropyModel se-
lecting the top-ranked question at each time-step,
RL uniform samples a question following its
question probability distribution πθ(a|s), which
enables our agent to jump out of the local optimum
caused by incorrect answers from users. And since
more randomness is introduced by sampling from
the question probability distribution during train-
ing, it also improves the tolerance of our model
towards the unexpected question sequences.

Besides, we also find some interesting cases
during human evaluation. Sometimes, the RL
agent selects a few strange questions which seems
to be not that much relevant to the chosen object,
but it can still find the correct answer at the end
of game. This situation is caused by the fact that
our method samples questions based on the output
of policy net, rather than greedy selection during
training. We find that this phenomenon increases
the user experience since it makes the agent more
unpredictable to the users.

0 25 50 75 100 125 150 175 200

No. Training Steps ×10
4

0.4

0.5

0.6

0.7

0.8

0.9

1.0

W
in

 R
at

e

ObjectRewardNet
RewardNet
DirectReward

Figure 3: Effectiveness of RewardNet.

4.3 The Effectiveness of RewardNet

To investigate the effectiveness of our RewardNet
(Section. 2.3), we further evaluate three variants
of our model in the simulation environment: the
model trained with with direct reward, Reward-
Net, and object-aware RewardNet, which are re-
ferred to as DirectReward, RewardNet, and
ObjectRewardNet respectively. They are all
trained with the uniform distribution s0.

As shown in Fig. 3, DirectReward con-
verges in the early steps and has a relatively
poor performance with the win rate 89%. Both
RewardNet and ObjectRewardNet achieve
the better performance with a win rate of 94% af-
ter convergence. This clear improvement shows
that the more informative long-term return, calcu-
lated with the immediate reward delivered by our
RewardNet method, significantly helps the train-
ing of the agent.

Furthermore, as shown in Fig. 3, we can also
see that ObjectRewardNet learns faster than
RewardNet in the early steps. This indicates that
ObjectRewardNet can estimate the immediate
reward more quickly with the extra information
provided by the target object, which leads to the
faster convergence of the agent.

4.4 Win Rate Regarding Question Numbers

In this section, we investigate how the win rate
grows with the number of asked questions and
whether a early-stop strategy can be adopted in the
game. We use the user simulator to play the game
with the RL uniform agent and two settings are
taken into account: the simulator samples the tar-
get object following the uniform object distribu-
tion (UnifSimulator), and samples following



3240

0 2 4 6 8 10 12 14 16 18 20

No. Questions

0.0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1.0
W

in
 R

at
e

UnifSimulator
PopSimulator

Figure 4: Win Rate Regarding Numbers of Questions.

the prior object distribution based on the object
popularity (PopSimulator). We perform 1,000
simulations for each number of questions, and the
win rate curve is shown in Fig. 4.

As we can see that UnifSimulator achieves
the win rate of 80% with only 14 questions in both
settings. And the flat curves in the region after
18 questions indicate that the game can be early
stopped with the almost same win rate at step 18.
Since a lower win rate is acceptable sometimes,
other early-stop strategies can also be derived for
the better user experience with the trade-off be-
tween the win rate and game steps.

Besides, the fact that RL uniform performs
similarly under both settings actually shows that
our RL method is robust to different objects. It
also performs well on infrequent objects where we
may have the limited user data for constructing a
well-tuned state transition dynamics.

4.5 Case Study

When our agent is playing the game with real
users, we select two cases from records. In the
first case, the person that the user chooses is Cris-
tiano Ronaldo, the famous football player. As we
can see in Tab. 2, our agent can still figure out the
target person while No.17 and No.19 questions are
answered wrong by the user, which indicates our
agent is robust to noisy answers. In the second
case, the chosen person is Napoleon Bonaparte
who was the French Emperor. Although there are
some other candidates satisfied the constraints, the
target person can be figured out because of the
people popularity, which is shown in Tab. 3.

5 Related Work

Q20. The Q20 game is popularized as an elec-
tronic game by the program of Robin Burgener
in 1988 (Burgener, 2006), which uses a object-
question relevance table to rank questions and tar-
get objects. Wu et al. (Wu et al., 2018) improves
the relevance table with entropy-based metrics,
and uses complicated engineering tricks to make
it perform quite well in their production environ-
ment. These table-based methods use rules to
update parameters, which makes them easily af-
fected by noisy answers. Besides, Zhao and Max-
ine (2016) also explores Q20 in their dialogue state
tracking research. However, they only use a small
toy Q20 setting where the designed questions are
about 6 person attributes in the Knowledge Base
(KB). Since their method relies on the KB for nar-
rowing down the scope of target object, it is not
applicable to real-world Q20 games where a well-
defined object KB is often unavailable. Compared
to previous approaches, our RL method is robust
to the answer noise and does not rely on the KB.

Deep Reinforcement Learning. DRL has wit-
nessed great success in playing complex games
like Atari games (Mnih et al., 2015) , Go (Silver
et al., 2016), and etc. In the natural language pro-
cessing (NLP), DRL is also used to play text-based
games (Narasimhan et al., 2015), and used to han-
dle fundamental NLP tasks like machine transla-
tion (He et al., 2016) and machine comprehen-
sion (Hu et al., 2017) as well. Our Q20 game lies
in the intersection of the field of game and NLP.
In this work, we propose a policy-based RL model
that acts as the questioner in the Q20 game, and
it exhibits the superior performance in our human
evaluation.

Natural Language Games. In the literature, there
are some works focusing on solving and generat-
ing English riddles (De Palma and Weiner, 1992;
Binsted, 1996) and Chinese character riddles (Tan
et al., 2016). Compared to riddles, the Q20 game
is a sequential decision process which requires
careful modeling of this property.

6 Conclusions

In this paper, we propose a policy-based RL
method to solve the question selection problem in
the Q20 Game. Instead of using the direct reward,
we further propose an object-aware RewardNet
to estimate the appropriate non-zero reward and



3241

thus make the long-time return more informative.
Compared to previous approaches, our RL method
is more robust to the answer noise which is com-
mon in the real-world Q20 game. Besides, our RL
agent can also ask various questions and does not
require the existing KB and complicated engineer-
ing tricks. The experiments on a noisy-free sim-
ulation environment show that our RL method is
competitive to an entropy-based engineering sys-
tem, and clearly outperforms it on the human eval-
uation where noisy answers are common.

As for the future work, we plan to explore meth-
ods to use machine reading to automatically con-
struct the state transition dynamics from corpora
like Wikipedia. In this way, we can further build
an end-to-end framework for the large-scale Q20
games in the real world.

Acknowledgement

We gratefully thank the anonymous reviewers for
their insightful comments and suggestions on the
earlier version of this paper. The first author also
thanks the Microsoft for providing resources for
the research.

References
Kim Binsted. 1996. Machine humour: An imple-

mented model of puns.

Robin Burgener. 2006. Artificial neural network guess-
ing method and game.

Paul De Palma and E Judith Weiner. 1992. Riddles:
accessibility and knowledge representation. In Pro-
ceedings of the 14th conference on Computational
linguistics-Volume 4, pages 1121–1125. Association
for Computational Linguistics.

Di He, Yingce Xia, Tao Qin, Liwei Wang, Nenghai Yu,
Tieyan Liu, and Wei-Ying Ma. 2016. Dual learn-
ing for machine translation. In Advances in Neural
Information Processing Systems, pages 820–828.

Minghao Hu, Yuxing Peng, and Xipeng Qiu. 2017. Re-
inforced mnemonic reader for machine comprehen-
sion. CoRR, abs/1705.02798.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

V Mnih, K Kavukcuoglu, D Silver, A. A. Rusu, J Ve-
ness, M. G. Bellemare, A Graves, M Riedmiller,
A. K. Fidjeland, and G Ostrovski. 2015. Human-
level control through deep reinforcement learning.
Nature, 518(7540):529.

Karthik Narasimhan, Tejas Kulkarni, and Regina
Barzilay. 2015. Language understanding for text-
based games using deep reinforcement learning. In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing, pages 1–
11.

David Silver, Aja Huang, Chris J Maddison, Arthur
Guez, Laurent Sifre, George Van Den Driessche, Ju-
lian Schrittwieser, Ioannis Antonoglou, Veda Pan-
neershelvam, Marc Lanctot, et al. 2016. Mastering
the game of go with deep neural networks and tree
search. nature, 529(7587):484–489.

Chuanqi Tan, Furu Wei, Li Dong, Weifeng Lv, and
Ming Zhou. 2016. Solving and generating chinese
character riddles. In Proceedings of the 2016 Con-
ference on Empirical Methods in Natural Language
Processing, pages 846–855.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. In Reinforcement Learning, pages
5–32. Springer.

Xianchao Wu, Huang Hu, Momo Klyen, Kyohei
Tomita, and Zhan Chen. 2018. Q20: Rinna riddles
your mind by asking 20 questions. In Japan NLP.

Tiancheng Zhao and Maxine Eskenazi. 2016. Towards
end-to-end learning for dialog state tracking and
management using deep reinforcement learning. In
17th Annual Meeting of the Special Interest Group
on Discourse and Dialogue, page 1.



3242

No. Question User’s Answer

1 Was the person born in Asia? No
2 Is the person very famous? Yes
3 Is the person a actor or actress? No
4 Is the person still alive? Yes
5 Was the person born in the 1990s? No
6 Is the person the founder of a famous company? No
7 Did the person finish the college in USA? No
8 Is the person a famous singer? No
9 Is the person male? Yes
10 Is the person related to sports? Yes
11 Is the person a football player? Yes
12 Is the person a midfielder? No
13 Is the person played for a European football club? Yes
14 Is the person playing in the Spanish Premier League? Yes
15 Is the person famous for the handsome or beautiful looks? Yes
16 Does the person have big muscles? Yes
17 Does the person have brown hair? No
18 Will you be happy when you see the person? Yes
19 Does the person have brothers or sisters in the family? No
20 Is the person engaged in many charity activities? Unknown

Table 2: The person that the user chooses is Cristiano Ronaldo, the famous football player. As we can see in table,
our agent can still figure out the target person while No.17 and No.19 are answered wrong by the user, which
indicates our agent is robust to noisy answers.

No. Question User’s Answer

1 Is the person female? No
2 Is the person still alive? No
3 Does the person have children? Yes
4 Does the person have brothers or sisters in the family? Yes
4 Is the person very smart? Yes
5 Was the person born in America? No
6 Is the person the white man? Yes
7 Is the person’s family very rich? No
8 Is the person a controversial figure in history? Yes
9 Is the person related to politics? Yes
10 Does the person have good looks? Unknown
11 Does the person have short hair? Yes
12 Is the person very famous? Yes
13 Has the person once been very powerful? Yes
14 Is the character of the person very aggressive? No
15 Has the person been the president of a country? Yes
16 Is the person a military? Yes
17 Has the person once killed men? No
18 Was the person born in Britain? No
19 Was the person one of famous leaders in the World War II? No
20 Has the person once been the emperor? Yes

Table 3: In this case, the person that the user chooses is Napoleon Bonaparte, the French Emperor. Although there
are some other candidates satisfied the constraints, our agent can figure out the target person because of the people
popularity.


