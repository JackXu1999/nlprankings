



















































Neural vs. Phrase-Based Machine Translation in a Multi-Domain Scenario


Proceedings of the 15th Conference of the European Chapter of the Association for Computational Linguistics: Volume 2, Short Papers, pages 280–284,
Valencia, Spain, April 3-7, 2017. c©2017 Association for Computational Linguistics

Neural vs. Phrase-Based Machine Translation in a Multi-Domain
Scenario

M. Amin Farajian1,2, Marco Turchi1, Matteo Negri1, Nicola Bertoldi1 and
Marcello Federico1

1Fondazione Bruno Kessler, Human Language Technologies, Trento, Italy
2University of Trento, ICT Doctoral School, Trento, Italy

{farajian,turchi,negri,bertoldi,federico}@fbk.eu

Abstract

State-of-the-art neural machine translation
(NMT) systems are generally trained on
specific domains by carefully selecting the
training sets and applying proper domain
adaptation techniques. In this paper we
consider the real world scenario in which
the target domain is not predefined, hence
the system should be able to translate text
from multiple domains. We compare the
performance of a generic NMT system and
phrase-based statistical machine transla-
tion (PBMT) system by training them on a
generic parallel corpus composed of data
from different domains. Our results on
multi-domain English-French data show
that, in these realistic conditions, PBMT
outperforms its neural counterpart. This
raises the question: is NMT ready for de-
ployment as a generic/multi-purpose MT
backbone in real-world settings?

1 Introduction

Neural machine translation systems have recently
outperformed their conventional statistical coun-
terparts in the translation tasks in several domains
such as news (Sennrich et al., 2016a), UN docu-
ments (Junczys-Dowmunt et al., 2016), and spo-
ken language data (Luong and Manning, 2015).
One common pattern in all these cases is that the
target domain is always predefined, hence it is fea-
sible to perform domain adaptation techniques in
order to boost system performance for that par-
ticular application. However, in real-world appli-
cations it is very hard, if not impossible, to de-
velop and maintain several specific MT systems
for multiple domains. This is mostly due to the
fact that usually: i) the target domain is not known
in advance, and users might query different sen-

tences from different domains; ii) the application
domains are very diverse, which makes the pos-
sibility of developing and fine-tuning one system
for each domain unfeasible; iii) there is no (or
very limited amount of) in-domain training data
to train domain-specific MT engines. In this situ-
ation, it is necessary to have high quality MT sys-
tems that perform consistently well in all (or most
of) the domains. This problem becomes more im-
portant when we consider the case of small/mid-
size language service providers, and their limited
resources, which forces them to have few MT en-
gines, but as much accurate as possible.

Considering the challenges posed by real-world
applications, the recent NMT hype has hence to be
put into perspective, trying to understand whether,
in specific conditions, the neural paradigm is the
Holy Grail for MT or not. To this aim, in this pa-
per we compare the performance of phrase-based
SMT (PBMT) and neural MT (NMT) systems in
a real-world scenario in which the systems are
trained on a combination of multiple domains, and
analyse their differences and behaviours. Our ex-
periments on an English-French data set, suggest
that there is still some way to go to make NMT
really usable “into the wild” (i.e. to make it stable
and robust to multi-domain training data). In Sec-
tion 2 we review the state-of-the-art approaches of
multi-domain machine translation for both PBMT
and NMT. In Section 3 we describe our experi-
mental setup. The results are described and anal-
ysed in Section 4, where we compare different be-
haviours of PBMT and NMT in more details.

2 Multi-Domain Machine Translation

Multi-domain machine translation is very well-
studied in the field of statistical phrase-based MT.
The approaches proposed for this issue vary from
learning a single model from pooled training data,

280



to more complicated (log-)linear interpolations of
multiple models using mixture models (Foster and
Kuhn, 2007) and linear mixture models (Carpuat
et al., 2014).

However, being a very new field of research,
to the best of our knowledge, there is no work
on developing multi-domain NMT systems. How-
ever, to the best of our knowledge, there is still
no work on developing multi-domain systems (i.e.
generic/multi-purpose systems trained with all the
data available at a given time) within the state-
of-the-art NMT framework. Indeed, though in-
teresting and well motivated from an application-
oriented perspective (e.g. think about a translation
company looking for a generic MT backbone us-
able for jobs coming from any domain), this is-
sue is still unexplored. The current state-of-the-
art research in NMT explored the effectiveness of
domain adaptation, and the approaches for how to
adapt existing NMT systems to a new domain (Lu-
ong and Manning, 2015). The assumption of these
works, however, is that the new target domains are
either known in advance or presented together af-
ter some sample data have been made available to
fine-tune the system. There exist an active field
of research that is trying to solve a quite differ-
ent issue that has a similar motivation, which is
multi-lingual NMT (Firat et al., 2016a; Firat et al.,
2016b; Johnson et al., 2016). The motivations be-
hind these works are very similar to the ones de-
scribed in Section 1, which is mostly simplifying
the deployment of MT engines in the production
lines. So, the final goal is to reduce the number
of final systems, trained with pooled multi-domain
data sets, without degrading the final performance.
As we will see in the remainder of this paper, this
issue is still open, especially when we embrace the
state-of-the-art NMT paradigm.

3 Experimental Setup

3.1 Data

To mimic the real-world applications, we trained
our generic systems on a collection of publicly
available English-French data from different do-
mains: European Central Bank (ECB), Gnome,
JRC-Acquis (JRC), KDE, OpenOffice (OOffice),
PHP, Ubuntu, and translated UN documents (UN-
TM).1 Since the size of these corpora are relatively
small for training robust data-driven MT systems,

1All these corpora are available in http://opus.lingfil.uu.se

Segments Tokens Types
ECB 147.7K 3.1M 40.9K
Gnome 238.4K 1.7M 16.8K
JRC 689.2K 10.8M 78.4K
KDE4 163.2K 1.0M 42.0K
OOffice 34.5K 389.0K 9.3K
PHP 38.4K 259.0K 9.7K
Ubuntu 9.0K 47.7K 8.6K
UN-TM 40.3K 913.8K 12.5K
CommonCrawl 2.6M 57.8M 759.4K
Europarl 1.7M 39.6M 111.0K

Table 1: Statistics of the English side of the origi-
nal corpora, after pre-processing.

Segments Tokens Types
ECB 1000 20.9K 3.8K
Gnome 982 7.3K 1.9K
JRC 757 14.8K 2.9K
KDE4 988 14.8K 2.1K
OOffice 976 11.1K 1.9K
PHP 352 5.3K 1.3K
Ubuntu 997 5.1K 1.9K
UN-TM 910 22.2K 3.1K

Table 2: Statistics of the English side of the test
corpora.

in particular NMT solutions, we used Common-
Crawl and Europarl corpora as out-domain data in
addition to the above-mentioned domain-specific
corpora, resulting in a parallel corpus of 5.5M
sentence pairs. The statistics of the corpora are
presented in Table 1. All the corpora are pre-
processed by normalizing punctuation, removing
special characters, tokenizing, truecasing, and re-
moving empty lines as well as sentences with
lengths greater than 50 and also the ones with
length ratio greater than (1:9), using the standard
Moses scripts. Then, a set of 500 sentence pairs
from each domain is selected randomly as de-
velopment and 1000 sentence pairs as held-out
test corpus; duplicated sentence pairs are then re-
moved from each corpus separately, resulting in a
total of 3,527 and 6,962 sentence pairs for dev and
test corpora for all the domains. The statistics of
the test corpora are reported in Table 2.

3.2 Phrase-based SMT

The experiments of the phrase-based SMT sys-
tems are carried out using the open source Moses

281



toolkit (Koehn et al., 2007). The word alignment
models are trained using fast-align (Dyer et al.,
2013). In our experiments we used 5-gram lan-
guage models trained with modified Kneser-Ney
smoothing using KenLM toolkit (Heafield et al.,
2013). The weights of the parameters are tuned
with batch MIRA (Cherry and Foster, 2012) to
maximize BLEU on the development set. Devel-
opment set is a combination of all the development
corpora of all the domains.

3.3 Neural MT

All the experiments of the NMT systems are con-
ducted with the Nematus toolkit2 which is an im-
plementation of the attentional encoder-decoder
architecture (Bahdanau et al., 2014). Since han-
dling large vocabularies is one of the main bottle-
necks of the existing NMT systems, in practice the
state-of-the-art NMT systems are trained on the
training corpora in which the less frequent words
are segmented into their sub-word units (Sennrich
et al., 2016b) by applying the modified version of
the byte pair encoding (BPE) compression algo-
rithm (Gage, 1994). This makes the NMT systems
capable of dealing with new and rare words, re-
sulting in open-vocabulary translations. Following
the common practice in the field, we segmented
the training corpora using the scripts provided by
the Nematus toolkit. As recommended by (Sen-
nrich et al., 2016b), in order to increase the con-
sistency in segmenting the source and target text,
the source and target side of the training set are
combined and number of merge rules is set to
89,500, resulting in vocabularies of size 78K and
86K tokens for English and French languages, re-
spectively. We use mini-batches of size 100, word
embeddings of size 500, and hidden layers of size
1024. The maximum sentence length is set to 50
in our experiments. The models are trained using
Adagrad (Duchi et al., 2011), reshuffling the train-
ing corpora for each epoch. The models are eval-
uated every 10,000 mini-batches via BLEU (Pap-
ineni et al., 2002). It is worth mentioning that with
the same set-up we recently achieved state-of-the-
art performance in the International Workshop on
Spoken Language Translation evaluation (Farajian
et al., 2016).

2https://github.com/rsennrich/nematus

4 Analysis and Discussion

Table 3 presents the results of the generic systems
(PBMT gen. and NMT gen.) and the NMT system
adapted to the concatenation of all the eight spe-
cific domains (NMT-adp.jnt), as well as the NMT
systems which are specifically adapted to each do-
main separately (NMT-adp.sep). In the case of
NMT-adp.jnt and NMT-adp.sep we used the best
model of the NMT gen. and adapted it to their
corresponding training corpora by continuing the
training for several epochs, using the training data
of that specific domain.

4.1 NMT vs. PBMT in Multi-domain
scenario

As the results show, the generic PBMT system
outperforms its NMT counterpart in all the do-
mains by a very large margin; and as the NMT
system becomes more specific by observing more
domain-specific data, the gap between the per-
formances reduces until the NMT outperforms;
which confirms the results of the previous works in
this field (Luong and Manning, 2015). However, it
is interesting to see what is the reason behind the
very low performance of the generic NMT system
compared to the generic PBMT. First, we noticed
that in the case of PHP corpus, the text is very
noisy (ie. misaligned sentences) which makes it
hard for the system to learn reliably. For instance,
we observed that in one case, the same English
sentence is aligned with more than 20 French sent-
neces which are mostly wrong translations.

Second, by analysing the number of repeated
sentence pairs in the training corpora we observed
that Gnome corpus has the highest repetition rate
among all the domains (each sentence is repeated
4.6 times in average), hence leaving a large space
for NMT to memorize the translation patterns of
this specific domain. This can partially justify the
reason behind the very large gain after adapting
the NMT system in this domain.

Third, we noticed that in the case of Ubuntu do-
main, the gain of domain adaptation is very min-
imal for both of the adapted NMT systems. By
looking at the token/type ratios we observed that
this specific domain has the lowest ratio, 5.12,
which means each word is observed around 5
times in the corpus, while for the other corpora
is at least five times more; ranging from 25.35 in
the case of KDE corpus to 146.34 in the case of
JRC-Acquis. In our opinion there is a high rela-

282



PBMT
gen.

NMT
gen.

NMT
adp.
jnt.

NMT
adp.
sep.

Overall 61.06 48.25 54.67 62.32
ECB 58.61 46.53 52.23 58.04
Gnome 90.54 61.49 79.26 93.76
JRC 66.26 56.49 61.00 62.62
KDE4 50.64 46.36 51.29 55.71
OOffice 37.11 31.75 35.45 39.85
PHP 47.04 33.43 34.23 39.73
Ubuntu 45.76 45.27 46.14 46.87
UN-TM 69.69 52.14 60.53 75.72

Table 3: Performance of the generic and adapted
systems in terms of BLEU score.

tion between the token/type ratio and the amount
of gain obtained in the domain adaptation phase.

4.2 Open Vocabulary Translation in
Technical Domains

The word segmentation approach proposed in
(Sennrich et al., 2016b) has been shown to be
very effective in obtaining open vocabulary trans-
lation with a fixed vocabulary in NMT. While this
holds true for several cases such as morpholog-
ically complex words, we noticed that in more
technical domains where the text contains techni-
cal words and terms, such as application names,
splitting the words into multiple tokens can make
the translation harder for the NMT systems. In
many of these cases we observed that the human
translators prefer not to translate the term and use
them as they are. In these cases, the PBMT system
that copies the unknown words into the output is
rewarded, while the NMT system often misses the
proper translation of at least one sub-word unit,
resulting in a wrong translation of the full word.
For example, let’s consider the out-of-vocabulary
word Bluetile, which belongs to the Ubuntu do-
main but was not seen during training. The PBMT
system copies the word in the output while the
NMT system segments it to Blu@@, eti@@, and le
and translates them into Blu@@, et@@, and le, re-
sulting in Bluetle.

Another interesting phenomenon that we ob-
served is that in some cases the NMT system
translates the sub-word units properly, while in
that context the word should not be translated and
copied in the target sentence as it is. For in-
stance, the following sentence which belongs to

the Ubuntu manual is just describing the usage
of an application and its corresponding options,
hence the switches should not be translated:

-D, --disconnect disconnect

In this case the token --disconnect is un-
known to both systems. The PBMT system
as described earlier copies the token, while
NMT first segments the token into --@@ and
disconnect, and then translates them as --@@ and
deconnexion, respectively.

These cases show that while sub-words ob-
tained by applying BPE are crucial to obtain open
vocabulary translation in generic domains, one
should be very careful in applying them in spe-
cific domains containing large number of technical
terms.

4.3 Is NMT Ready for Deployment?

Recently, (Junczys-Dowmunt et al., 2016) per-
formed a very extensive experiment in which the
performance of NMT is compared with PBMT and
hierarchical SMT on multiple language directions
and showed that NMT systems in almost all the
cases outperform their SMT counterparts and to
solve the only remaining issue which is the de-
coding time of the NMT systems, they introduce
an efficient neural decoder which makes it feasible
to deploy NMT systems in-production line. How-
ever, all their experiments are performed on one
single domain for which there exists a very large
training corpus.

In our experiment, we observed that the generic
NMT systems are by a large margin behind their
PBMT counterparts in the real-world scenarios
(48.25 versus 61.06 BLEU score) where the train-
ing data are very heterogeneous and are composed
of multiple corpora with different sizes (varying
from very few thousands to millions of sentence
pairs). This suggests that in order to be deployed
in production lines, NMT systems need to be
armed with more efficient mechanisms, which en-
ables them to deal with more heterogeneous data.

5 Conclusion

In this paper we studied the capability of neu-
ral machine translation systems in the real-world
applications were the training corpora consist of
text obtained from different domains; and com-
pared them with their phrase-based counterparts.
Our results on multi-domain English-French data
showed that, in these realistic conditions, PBMT

283



outperforms NMT by a large margin.

Acknowledgments

This work has been partially supported by the EC-
funded H2020 projects QT21 (grant no. 645452)
and ModernMT (grant no. 645487).

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473.

Marine Carpuat, Cyril Goutte, and George Foster.
2014. Linear mixture models for robust machine
translation. In Proceedings of the Ninth Workshop
on Statistical Machine Translation, pages 499–509,
Baltimore, Maryland, USA, June. Association for
Computational Linguistics.

Colin Cherry and George Foster. 2012. Batch tun-
ing strategies for statistical machine translation. In
Proceedings of the 2012 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
NAACL HLT ’12, pages 427–436, Stroudsburg, PA,
USA. Association for Computational Linguistics.

John Duchi, Elad Hazan, and Yoram Singer. 2011.
Adaptive Subgradient Methods for Online Learning
and Stochastic Optimization. Journal of Machine
Learning Research.

Chris Dyer, Victor Chahuneau, and Noah A. Smith.
2013. A simple, fast, and effective reparameteriza-
tion of ibm model 2. In In Proc. NAACL.

Amin M. Farajian, Rajen Chatterjee, Costanza Con-
forti, Shahab Jalalvand, Mattia A. Di Gangi, Duygu
Ataman, Marco Turchi, Negri Matteo, and Marcello
Federico. 2016. Fbks neural machine translation
systems for iwslt 2016. In Proceedings of the In-
ternational Workshop on Spoken Language Transla-
tion, Seattle, US, December.

Orhan Firat, KyungHyun Cho, and Yoshua Ben-
gio. 2016a. Multi-way, multilingual neural ma-
chine translation with a shared attention mechanism.
CoRR, abs/1601.01073.

Orhan Firat, Baskaran Sankaran, Yaser Al-Onaizan,
Fatos T. Yarman Vural, and Kyunghyun Cho. 2016b.
Zero-resource translation with multi-lingual neural
machine translation. In Proceedings of the 2016
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 268–277, Austin, Texas,
November. Association for Computational Linguis-
tics.

George Foster and Roland Kuhn. 2007. Mixture-
model adaptation for SMT. In Proceedings of the

Second Workshop on Statistical Machine Transla-
tion, pages 128–135, Prague, Czech Republic, June.
Association for Computational Linguistics.

Philip Gage. 1994. A New Algorithm for Data Com-
pression. C Users J., 12(2):23–38, February.

Kenneth Heafield, Ivan Pouzyrevsky, Jonathan H.
Clark, and Philipp Koehn. 2013. Scalable modified
kneser-ney language model estimation. In Proceed-
ings of the 51st Annual Meeting of the Association
for Computational Linguistics (Volume 2: Short Pa-
pers), pages 690–696, Sofia, Bulgaria, August. As-
sociation for Computational Linguistics.

Melvin Johnson, Mike Schuster, Quoc V. Le, Maxim
Krikun, Yonghui Wu, Zhifeng Chen, Nikhil Tho-
rat, Fernanda B. Viégas, Martin Wattenberg, Greg
Corrado, Macduff Hughes, and Jeffrey Dean. 2016.
Google’s multilingual neural machine translation
system: Enabling zero-shot translation. CoRR,
abs/1611.04558.

Marcin Junczys-Dowmunt, Tomasz Dwojak, and Hieu
Hoang. 2016. Is neural machine translation ready
for deployment? a case study on 30 translation di-
rections. In Arxiv, October.

Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ondřej Bojar, Alexandra
Constantin, and Evan Herbst. 2007. Moses: Open
source toolkit for statistical machine translation. In
Proceedings of the 45th Annual Meeting of the ACL
on Interactive Poster and Demonstration Sessions,
ACL ’07, pages 177–180, Stroudsburg, PA, USA.
Association for Computational Linguistics.

Minh-Thang Luong and Christopher D Manning.
2015. Stanford Neural Machine Translation Sys-
tems for Spoken Language Domains. In Proceed-
ings of the International Workshop on Spoken Lan-
guage Translation.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic
evaluation of machine translation. In Proceedings
of 40th Annual Meeting of the Association for Com-
putational Linguistics, pages 311–318, Philadelphia,
Pennsylvania, USA, July. Association for Computa-
tional Linguistics.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016a. Edinburgh Neural Machine Translation Sys-
tems for WMT 16. In Proceedings of the First Con-
ference on Machine Translation, pages 371–376,
Berlin, Germany, August. Association for Compu-
tational Linguistics.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016b. Neural Machine Translation of Rare Words
with Subword Units. In Proceedings of the 54th An-
nual Meeting on Association for Computational Lin-
guistics. Association for Computational Linguistics.

284


