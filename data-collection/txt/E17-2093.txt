



















































Structural Attention Neural Networks for improved sentiment analysis


Proceedings of the 15th Conference of the European Chapter of the Association for Computational Linguistics: Volume 2, Short Papers, pages 586–591,
Valencia, Spain, April 3-7, 2017. c©2017 Association for Computational Linguistics

Structural Attention Neural Networks for improved sentiment analysis

Filippos Kokkinos1 and Alexandros Potamianos1

1School of E.C.E. , National Technical University of Athens , 15773 Athens, Greece
{el11142,potam}@central.ntua.gr

Abstract

We introduce a tree-structured attention
neural network for sentences and small
phrases and apply it to the problem of sen-
timent classification. Our model expands
the current recursive models by incor-
porating structural information around a
node of a syntactic tree using both bottom-
up and top-down information propagation.
Also, the model utilizes structural atten-
tion to identify the most salient represen-
tations during the construction of the syn-
tactic tree. To our knowledge, the pro-
posed models achieve state of the art per-
formance on the Stanford Sentiment Tree-
bank dataset.

1 Introduction

Sentiment analysis deals with the assessment
of opinions, speculations, and emotions in text
(Zhang et al., 2012; Pang and Lee, 2008). It is
a relatively recent research area that has attracted
great interest as demonstrated by a series of shared
evaluation tasks, e.g., analysis of tweets (Nakov
et al., 2016). In (Turney and Littman, 2002),
the affective ratings of unknown words were pre-
dicted utilizing the affective ratings of a small set
of words (seeds) and the semantic relatedness be-
tween the unknown and the seed words. An ex-
ample of sentence-level analysis was proposed in
(Malandrakis et al., 2013). Other application areas
include the detection of public opinion and predic-
tion of election results (Singhal et al., 2015), cor-
relation of mood states and stock market indices
(Bollen et al., 2011).

Recently, Recurrent Neural Network (RNN)
with Long-Short Term Memory (LSTM) (Hochre-
iter and Schmidhuber, 1997) or Gated Recur-
rent Units (GRU) (Chung et al., 2014) have been

applied to various Natural Language Processing
tasks. Tree structured neural networks, which
are found in literature as Recursive Neural Net-
works, hold a linguistic interest due to their close
relation to syntactic structures of sentences being
able to capture distributed information of structure
such as logical terms(Socher et al., 2012). These
syntactic structures are N-ary trees which repre-
sent either the underlying structure of a sentence,
known as constituency trees or the relations be-
tween words known as dependency trees.

This paper focuses on sentence-level sentiment
classification of movie reviews using syntactic
parse trees as input for the proposed networks. In
order to solve the task of sentiment analysis of
sentences, we work upon a variant of Recursive
Neural Networks which recursively create repre-
sentation following the syntactic structure. The
proposed computation model exploits information
from subnodes as well as parent nodes of the node
under examination. This neural network is re-
ferred to as Bidirectional Recursive Network (Ir-
soy and Cardie, 2013). The model is further en-
hanced with memory units and the proposed struc-
tural attention mechanism. It is observed that dif-
ferent nodes of a tree structure hold information
of variable saliency. Not all nodes of a tree are
equally informative, so the proposed model se-
lectively weights the contribution of each node
regarding the sentence level representation using
structural attention model.

We evaluate our approach on the sentence-level
sentiment classification task using one standard
movie review dataset (Socher et al., 2013). Ex-
perimental results show that the proposed model
outperforms the state-of-the art methods.

586



2 Tree-Structured GRUs

Recursive GRUs (TreeGRU) upon tree structures
are an extension of the sequential GRUs that allow
information to propagate through network topolo-
gies. Similar to Recursive LSTM network on tree
structures (Tai et al., 2015), for every node of a
tree, the TreeGRU has gating mechanisms that
modulate the flow of information inside the unit
without the need of a separate memory cell. The
activation hj of TreeGRU for node j is the inter-
polation of the previous calculated activation hjk
of its kth child out ofN total children and the can-
didate activation h̃j .

hj = zj ∗
N∑
k=1

hjk + (1− zj) ∗ h̃j (1)

where zj is the update function which decide the
degree of update that will occur on the activation
based on the input vector xj and previously calcu-
lated representation hjk :

zj = σ(Uz ∗ xj +
N∑
k=1

W iz ∗ hjk) (2)

The candidate activation h̃j for a node j is com-
puted similarly to that of a Recursive Neural Net-
work as in (Socher et al., 2011):

h̃j = f(Uh ∗ xj +
N∑
k=1

W kh ∗ (hjk ∗ rj)) (3)

where rj is the reset gate which allows the net-
work to forget effectively previous computed rep-
resentations when the value is close to 0 and it is
computed as follows:

rj = σ(Ur ∗ xj +
N∑
k=1

W kr ∗ hjk) (4)

Every part of a gated recurrent unit
xj , hj , rj , zj , h̃j ∈ Rd where d is the input
vector dimensionality. σ is the sigmoid function
and f is the non-linear tanh function.The set of
matrices W k, U ∈ Rdxd used in 2 - 4 are the
trainable weight parameters which connect the
kth children node representation with the jth
node representation and the input vector xj .

2.1 Bidirectional TreeGRU

A natural extension of Tree-Structure GRU is the
addition of a bidirectional approach. TreeGRUs
calculate an activation for node j with the use of
previously computed activations lying lower in
the tree structure. The bidirectional approach for
a tree structure uses information both from under
and lower nodes of the tree for a particular node
j. In this manner, a newly calculated activation
incorporates content from both the children and
the parent of a particular node.
The bidirectional neural network can be trained in
two seperate phases: i) the Upward phase and ii)
the Downward phase. During the Upward phase,
the network topology is similar to the topology of
a TreeGRU, every activation is calculated based
on the previously calculated activations which are
found lower on the structure in a bottom up fash-
ion. When every activation has been computed,
from leaves to root, then the root activation is used
as input of the Downward phase. The Downward
phase calculates the activations for every child
of a node using content from the parent in a top
down fashion. The process of computing the
internal representations between the two phases is
separated, so in a first pass the network compute
the upward activation and after this is completed,
then the downward representations are computed.
The upward activation h↑j similarly to TreeGRU
for node j is the interpolation of the previ-
ous calculated activation h↑jk of its kth child out
of N total children and the candidate activation h̃↑j .

h↑j = z
↑
j ∗

N∑
k=1

h↑jk + (1− z↑j ) ∗ h̃↑j (5)

The update gate, rest gate and candidate activa-
tion are computed as follows:

z↑j = σ(Uz ∗ x↑j +
N∑
k=1

W kz ∗ h↑jk) (6)

r↑j = σ(Ur ∗ x↑j +
N∑
k=1

W kr ∗ h↑jk) (7)

h̃↑j = f(Uh ∗ x↑j +
N∑
k=1

W kr ∗ (h↑jk ∗ r↑j )) (8)

587



Figure 1: A tree-structured bidirectional neural
network with Gated Recurrent Units. The input
vectors x are given to the model in order to gener-
ate the phrase representations y↑ and y↓.

The downward activation h↑j for node j is the
interpolation of the previous calculated activation
h↑p(j), where the function p calculates the index of

the parent node, and the candidate activation h̃↓j .

h↓j = z
↓
j ∗ h↓p(j) + (1− z↓j ) ∗ h̃↓j (9)

The update gate, reset gate and candidate activa-
tion for the downward phase are computed as fol-
lows:

z↓j = σ(U
d
z ∗ h↑j +W dz ∗ h↓p(j)) (10)

r↓j = σ(U
d
r ∗ h↑j +W dr ∗ h↓p(j)) (11)

h̃↓j = f(U
d
h ∗ h↑j +W dh ∗ (h↓p(j) ∗ r↓j )) (12)

During downward phase, matrix Ud ∈ Rdxd
connects the upward representation of node j with
the respective jth downward node while W d ∈
Rdxd connect the parent representation p(j).

2.2 Structural Attention
We introduce Structural Attention, a generaliza-
tion of sequential attention model (Luong et al.,
2015) which extracts informative nodes out of a
syntactic tree and aggregates the representation of
those nodes in order to form the sentence vec-
tor. We feed representation hj of node through a
one-layer Multilayer Perceptron with Ww ∈ Rdxd
weight matrix to get the hidden representation uj .

uj = tanh(Ww ∗ hj) (13)
Using the softmax function, the weights aj for
each node are obtained based on the similarity
of the hidden representation uj and a global con-
text vetor uw ∈ Rd. The normalized weights aj

are used to form the final sentence representation
s ∈ Rd which is a weighted summation of every
node representation hj .

aj =
u>j ∗ uw∑N
i=1 u

>
i ∗ uw

(14)

s =
N∑
i=1

aihi (15)

The proposed attention model is applied on struc-
tural content since all node representations contain
syntactic structural information during training be-
cause of the recursive nature of the network topol-
ogy.

3 Experiments

We evaluate the performance of the aforemen-
tioned models on the task of sentiment classifi-
cation of sentences sampled from movie reviews.
We use the Stanford Sentiment Treebank (Socher
et al., 2013) dataset which contains sentiment la-
bels for every syntactically plausible phrase out of
the 8544/1101/2210 train/dev/test sentences. Each
phrase is labeled with respect to a 5-class sen-
timent value, i.e. very negative, negative, neu-
tral, positive, very positive. The dataset can also
be used for a binary classification subtask by ex-
cluding any neutral phrases for the original splits.
The binary classification subtask is evaluated on
6920/872/1821 train/dev/test splits.

3.1 Sentiment Classification
For all of the aforementioned architectures at each
node j we use a softmax classifier to predict the
sentiment label ŷj . For example, the predicted la-
bel ŷj corresponds to the sentiment class of the
spanned phrase produced from node j. The classi-
fier for unidirectional TreeGRU architectures uses
the hidden state hj produced from recursive com-
putations till node j using a set xj of input nodes
to predict the label as follows:

p̂θ(y|xj) = softmax(Ws ∗ hj) (16)
where Ws ∈ Rdxc and c is the number of senti-
ment classes.

The classifier for bidirectional TreeBiGRU ar-
chitectures uses both the hidden state h↑j and h

↓
j

produced from recursive computations till node j
during Upward and Downward Phase using a set
xj of input nodes to predict the label as follows:

p̂θ(y|xj) = softmax(W ↑s ∗h↑j +W ↓s ∗h↓j ) (17)

588



where W ↑s ,W ↓s ∈ Rdxc and c is the number of
sentiment classes. The predicted label ŷj is the
argument with the maximum confidence:

ŷj = argmax
y

(p̂θ(y|xj)) (18)

For the Structural Attention models, we use for the
final sentence representation s to predict the sen-
timent label ŷj where j is the corresponding root
node of a sentence. The cost function used is the
negative log-likelihood of the ground-truth label
yk at each node:

E(θ) =
m∑
k=1

p̂θ(yk|xk) + λ2 ||θ||
2 (19)

where m is the number of labels in a training sam-
ple and λ is the L2 regularization hyperparameter.

Network Variant d |θ|
TreeGRU
-without attention 300 7323005
-with attention 300 7413605
TreeBiGRU
-without attention 300 8135405
-with attention 300 8317810

Table 1: Memory dimensions d and total network
parameters |θ| for every network variant evaluated

3.2 Results
The evaluation results are presented in Table 2
in terms of accuracy, for several state-of-the-art
models proposed in the literature as well as for
the TreeGRU and TreeBiGRU models proposed
in this work. Among the approaches reported in
the literature, the highest accuracy is yielded by
DRNN and DMN for the binary scheme (88.6),
and by DMN for the fine-grained scheme (52.1).
We observe that the best performance is achieved
by TreeBiGRU with attention, for both binary
(89.5) and fine-grained (52.4) evaluation metrics,
exceeding any previously reported results. In ad-
dition, the attentional mechanism employed in the
proposed TreeGRU and TreeBiGRU models im-
prove the performance for both evaluation metrics.

4 Hyperparameters and Training Details

The evaluated models are trained using the Ada-
Grad (Duchi et al., 2010) algorithm using 0.01
learning rate and a minibatch of size 25 sentences.
L2-regularization is performed on the model pa-
rameters with a λ value 10−4. We use dropout

System Binary Fine-grained
RNN 82.4 43.2
MV-RNN 82.9 44.4
RNTN 85.4 45.7
PVec 87.8 48.7
TreeLSTM 88.0 51.0
DRNN 86.6 49.8
DCNN 86.8 48.5
CNN-multichannel 88.1 47.4
DMN 88.6 52.1
TreeGRU
- without attention 88.6 50.5
- with attention 89.0 51.0
TreeBiGRU
- without attention 88.5 51.3
- with attention 89.5 52.4

Table 2: Test Accuracies achieved on the Stanford
Sentiment Treebank dataset. RNN, MV-RNN and
RNTN (Socher et al., 2013). PVec: (Mikolov et
al., 2013). TreeLSTM (Tai et al., 2015). DRNN
(Irsoy and Cardie, 2013). DCNN (Kalchbrenner et
al., 2014).CNN-multichannel (Kim, 2014). DMN
(Kumar et al., 2015)

with probability 0.5 on both the input layer and
the softmax layer.
The word embeddings are initialized using the
public available Glove vectors with a 300 dimen-
sionality. The Glove vectors provide 95.5% cover-
age for the SST dataset. All initialized word vec-
tors are finetuned during the training process along
with every other parameter. Every matrix is ini-
tialized with the identity matrix multiplied by 0.5
except for the matrices of the softmax layer and
the attention layer which are randomly initialized
from the normal Gaussian distribution. Every bias
vectors is initialized with zeros.
The training process lasts for 40 epochs. During
training, we evaluate the network 4 times every
epoch and keep the parameters which give the best
root accuracy on the development dataset.

5 Conclusion

In this short paper, we propose an extension of
Recursive Neural Networks that incorporates a
bidirectional approach with gated memory units
as well as an attention model on structure level.
The proposed models were evaluated on both fine-
grained and binary sentiment classification tasks
on a sentence level. Our results indicate that both
the direction of the computation and the attention
on a structural level can enhance the performance
of neural networks on a sentiment analysis task.

589



6 Acknowledgments

This work has been partially funded by the Baby-
Robot project supported by the EU Horizon 2020
Programme, grant number 687831. Also, the au-
thors would like to thank NVIDIA for supporting
this work by donating a TitanX GPU.

References
Johan Bollen, Huina Mao, and Xiaojun Zeng. 2011.

Twitter mood predicts the stock market. Journal of
Computational Science, 2(1):1–8.

Junyoung Chung, Çaglar Gülçehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. CoRR, abs/1412.3555.

John Duchi, Elad Hazan, and Yoram Singer. 2010.
Adaptive subgradient methods for online learn-
ing and stochastic optimization. Technical Report
UCB/EECS-2010-24, EECS Department, Univer-
sity of California, Berkeley.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long
short-term memory. Neural Comput., 9(8):1735–
1780.

Ozan Irsoy and Claire Cardie. 2013. Bidirectional re-
cursive neural networks for token-level labeling with
structure. CoRR, abs/1312.0493.

Nal Kalchbrenner, Edward Grefenstette, and Phil Blun-
som. 2014. A convolutional neural network for
modelling sentences. In Proceedings of the 52nd
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 1: Long Papers), pages
655–665, Baltimore, Maryland, June. Association
for Computational Linguistics.

Yoon Kim. 2014. Convolutional neural networks
for sentence classification. In Proceedings of the
2014 Conference on Empirical Methods in Natu-
ral Language Processing (EMNLP), pages 1746–
1751, Doha, Qatar, October. Association for Com-
putational Linguistics.

Ankit Kumar, Ozan Irsoy, Jonathan Su, James Brad-
bury, Robert English, Brian Pierce, Peter Ondruska,
Ishaan Gulrajani, and Richard Socher. 2015. Ask
me anything: Dynamic memory networks for natu-
ral language processing. CoRR, abs/1506.07285.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1412–1421, Lisbon,
Portugal, September. Association for Computational
Linguistics.

Nikolaos Malandrakis, Abe Kazemzadeh, Alexandros
Potamianos, and Shrikanth Narayanan. 2013. Sail:
A hybrid approach to sentiment analysis. In Pro-
ceedings SemEval, pages 438–442.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111–3119.

Preslav Nakov, Alan Ritter, Sara Rosenthal, Fabrizio
Sebastiani, and Veselin Stoyanov. 2016. Semeval-
2016 task 4: Sentiment analysis in twitter. In Pro-
ceedings of the 10th international workshop on se-
mantic evaluation (SemEval 2016).

Bo Pang and Lillian Lee. 2008. Opinion mining and
sentiment analysis. Found. Trends Inf. Retr., 2(1-
2):1–135.

Kartik Singhal, Basant Agrawal, and Namita Mittal.
2015. Modeling indian general elections: sentiment
analysis of political twitter data. In Information
Systems Design and Intelligent Applications, pages
469–477.

Richard Socher, Jeffrey Pennington, Eric H. Huang,
Andrew Y. Ng, and Christopher D. Manning. 2011.
Semi-supervised recursive autoencoders for predict-
ing sentiment distributions. In Proceedings of the
Conference on Empirical Methods in Natural Lan-
guage Processing, EMNLP ’11, pages 151–161,
Stroudsburg, PA, USA. Association for Computa-
tional Linguistics.

Richard Socher, Brody Huval, Christopher D. Man-
ning, and Andrew Y. Ng. 2012. Semantic com-
positionality through recursive matrix-vector spaces.
In Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learn-
ing, EMNLP-CoNLL ’12, pages 1201–1211. Asso-
ciation for Computational Linguistics.

Richard Socher, Alex Perelygin, Jean Y. Wu, Jason
Chuang, Christopher D. Manning, Andrew Y. Ng,
and Christopher Potts. 2013. Recursive deep mod-
els for semantic compositionality over a sentiment
treebank. In Proceedings of the conference on
empirical methods in natural language processing
(EMNLP).

Kai Sheng Tai, Richard Socher, and Christopher D.
Manning. 2015. Improved semantic representa-
tions from tree-structured long short-term memory
networks. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Linguistics
and the 7th International Joint Conference on Natu-
ral Language Processing (Volume 1: Long Papers),
pages 1556–1566, Beijing, China, July. Association
for Computational Linguistics.

Peter Turney and Michael L. Littman. 2002. Un-
supervised learning of semantic orientation from a
hundred-billion-word corpus.

590



Zhu Zhang, Xin Li, and Yubo Chen. 2012. Decipher-
ing word-of-mouth in social media: Text-based met-
rics of consumer reviews. ACM Trans. Manage. Inf.
Syst., 3(1):5:1–5:23.

591


