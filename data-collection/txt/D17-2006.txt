



















































StruAP: A Tool for Bundling Linguistic Trees through Structure-based Abstract Pattern


Proceedings of the 2017 EMNLP System Demonstrations, pages 31–36
Copenhagen, Denmark, September 7–11, 2017. c©2017 Association for Computational Linguistics

StruAP: A Tool for Bundling Linguistic Trees through Structure-based
Abstract Pattern

Kohsuke Yanai, Misa Sato, Toshihiko Yanase, Kenzo Kurotsuchi,
Yuta Koreeda, and Yoshiki Niwa

Research & Development Group, Hitachi, Ltd.

Abstract

We present a tool for developing tree struc-
ture patterns that makes it easy to define
the relations among textual phrases and
create a search index for these newly de-
fined relations. By using the proposed
tool, users develop tree structure patterns
through abstracting syntax trees. The tool
features (1) intuitive pattern syntax, (2)
unique functions such as recursive call of
patterns and lexicon reference, and (3)
whole workflow support for relation de-
velopment and validation. We report the
current implementation of the tool and its
effectiveness.

1 Introduction

This paper describes a tool that helps users se-
mantically bundle linguistic trees such as a con-
stituency tree and a dependency tree. We refer
to the tool as StruAP (Structure-based Absract
Pattern). By using the proposed tool, the user can
easily define relations that are specific to a given
business use case and create a search index for
the newly defined relations. The search index al-
lows the user to retrieve sentences that include the
defined relations. For instance, we can interpret
the following sentence as including a spin-off rela-
tion between Japanese electronics maker Hitachi
and home appliance and industrial equipment di-
visions.

Japanese electronics maker Hitachi will
spin off its home appliance and indus-
trial equipment divisions by April to be-
come quicker in decision-making to re-
spond to market changes. 1

1 c⃝ 1994–2010 The Associated Press, 2001/9

If we define a spin-off relation and extract tex-
tual phrases consisting of the relation from large
amounts of documents, we can investigate which
companies spin off a given business segment, such
as home appliance, by using standard information
retrieval techniques.

By using the proposed tool StruAP, users
develop tree structure patterns of the relations
through abstracting syntax trees. We assume that
in most practical use cases, newly defining rela-
tions specific to the use case and developing the
corresponding relation extraction modules, instead
of use of a universal relation taxonomy and a gen-
eral extraction algorithm, are required. For exam-
ple, in a use case of investment decisions, more
than ten relations, such as “acquire”, “sue”, and
“penalize”, are important to investigate compa-
nies. However, it is difficult to develop and main-
tain a relation extraction module based on linguis-
tic trees because implementation of the logics for
traversing trees tends to be complicated. Thus, a
tool to help develop and maintain structural pat-
terns of relations would be useful.

The proposed tool is related to semantic role
labelling. There are several tools available
(Punyakanok et al., 2008; Collobert et al., 2011;
Kshirsagar et al., 2015) . However, these tools im-
plicitly assume a kind of general relation taxon-
omy. When adding new relations in these tools,
users need to prepare a certain amount of training
data for each relation. The proposed tool aims to
help the user to newly define relations for each use
case and develop extraction modules within sev-
eral hours.

The features of the proposed tool are as follows:

1. Intuitive pattern syntax, which is an ab-
stracted representation of outputs of syntax
parsers,

2. Unique functions such as recursive call of

31



patterns and lexicon reference for word level
pattern matching,

3. Whole workflow support for relation devel-
opment and validation.

This paper is structured as follows. We describe
related work in Section 2 and the proposed tool in
Section 3. We explain the implementation of the
tool in Section 4. Section 5 discusses the effec-
tiveness of the tool and Section 6 concludes this
paper.

2 Related Work

Tgrep2 is a grep-like tool for tree expres-
sions (Rohde, 2005). The tool allows users to
search tree expressions with a given tree query.
The expressivity of Tgrep2 has been expanded
and a tree query tool Tregex has been developed
(Levy and Andrew, 2006). Besides these tools,
several tools for tree queries are already available,
such as TIGERSearch (Brants et al., 2002),
NiteQL (Heid et al., 2004), LPath+ (Lai and Bird,
2005), and a query language for threaded
trees (Singh, 2012). However, all these
tools are for grep-like purposes but do not
support the whole workflow of the rela-
tion development. Although Odin’s Runes
(Valenzuela-Escárcega et al., 2016) provides an
information extraction framework, it does not
cover the whole workflow. In addition, their
pattern languages are path-based and difficult to
intuitively understand. For example, a Tregex tree
query for the spin-off relation can be written as
follows:
(VP<(VB<<#spin)<(PRT(RP<<#off)))

$--MD>VP$--NP>S

Please refer to (Levy and Andrew, 2006) for the
detailed pattern syntax of Tregex. The above pat-
tern expression is different from that of the usual
parser outputs. Our proposed tool allows users to
easily create a structure-based pattern by directly
editing a constituency tree or a dependency tree
generated by syntax parsers.

3 Proposed Model

Table 1 illustrates the concept of our pro-
posed model. First, we get a syntax
tree by using a parser, such as Stanford’s
CoreNLP (Manning et al., 2014). The left column
shows the syntax tree obtained by parsing the
sample text shown in Section 1. We change the

Figure 1: Architecture

expression a little from the original output of
Stanford’s CoreNLP by adding lemma=, POS=,
and so on. The bold face parts indicate important
structures to represent the spin-off relation. Thus,
we can obtain the generalized structure of the
spin-off relation by removing non-essential sub-
trees and lemma information. The right column
shows an example of generalized structure. This
paper refers to the generalized structure as a
structure-based pattern, in contrast to a path-based
pattern. Here, * means a repeat of any subtree,
while #a[0-2] means target subtrees to be ex-
tracted as elements of the relation. Table 2 shows
examples of extracted relations by applying the
pattern shown in the right column of Table 1.
From a computational point of view, the proposed
tool bundles multiple tree instances based on ab-
stract structure, and gives an index for retrieval of
the tree instances. In the context of NLP (natural
language processing), the main application is
relation extraction.

3.1 Architecture and Workflow

Figure 1 describes the architecture of the proposed
tool. We parse texts that are utilized for a tar-
get application and store the generated linguistic
trees in a data store in advance. Then, we prepare
a text search index for full text search, which is
also used later to retrieve relations extracted by the
tool. The data store and text search index are run-
ning on the server side. If users want to, they can
use the proposed tool in only a local environment
without server side settings.

Figure 2 shows snapshots of the web-based user
interface of the proposed tool. There are 4 tabs:
SAMPLE, VALIDATE, EDIT, and INDEX. The
procedure to develop a pattern of the spin-off rela-
tion is as follows:

32



(.POS=ROOT&.lemma=will
(.POS=S&.lemma=will
(.POS=NP&.lemma=Hitachi
(.POS=JJ&.lemma=japanese )
(.POS=NNS&.lemma=electronics )
(.POS=NN&.lemma=maker )
(.POS=NNP&.lemma=Hitachi ))
(.POS=VP&.lemma=will
(.POS=MD&.lemma=will )
(.POS=VP&.lemma=spin
(.POS=VB&.lemma=spin )
(.POS=PRT&.lemma=off
(.POS=RP&.lemma=off ))

(.POS=NP&.lemma=division
(.POS=PRP$&.lemma=its )
(.POS=NN&.lemma=home )
(.POS=NN&.lemma=appliance )
(.POS=CC&.lemma=and )
(.POS=JJ&.lemma=industrial )
(.POS=NN&.lemma=equipment )
(.POS=NNS&.lemma=division ))

(.POS=PP&.lemma=by
...

(.POS=S

*
(#a1.POS=NP *)
(.POS=VP
(*.POS=MD _)

*
(.POS=VP
(#a0.POS=VB&.lemma=spin _)
(.POS=PRT
(.POS=RP&.lemma=off _))

(#a2.POS=NP *) *) *) *)

Table 1: Syntax tree (left) and structure-based pattern (right).

Figure 2: Snapshots of StruAP.

Step 1 In the SAMPLE tab, find several texts of
a basis of a tree structure pattern by keyword
search. The keyword “spin off” draws rele-
vant sentences from the data store by using
the text search index.

Step 2 Choose proper sentences and click the
STORE button to save the sentences into the
local data store.

Step 3 In the VALIDATE tab, prepare a validation
dataset before developing a tree structure pat-
tern. In Figure 2, we decode Hitachi for a1
as a subject phrase, and home appliance for
a2 as a object phrase. Fill out the a[1-2] text
fields with the corresponding words.

Step 4 Click the “c” button to parse the sentence
and generate its syntax tree in the text area

of the right pane. Change the syntax tree to
a tree structure pattern through abstraction as
shown in Table 1, and click the ANNOTATE
button (or Ctrl-Shift-o) to confirm if the pat-
tern works well. A user can see the respective
phrases of a[1-2] in the table area below. Al-
though no syntactic error correction is avail-
able, frequent use of the shortcut key is help-
ful to avoid syntactic errors.

Step 5 Click the SAVE button to add the edited
pattern into the corresponding pattern file.
The rule engine generates text annotations by
applying the tree structure pattern, and writes
the annotations into the local data store. In
the VALIDATE tab, the user can check the
differences of a[1-2] between the validation
dataset written in Step 3 and the generated

33



annotations. The differences are highlighted
in red.

Step 6 Click the UPDATE button in the INDEX
tab to write the annotations for all of the
stored documents into the data store on the
server side, and update the text search index
for extracted relations.

By following the above steps, a text search in-
dex for relations is ready for an external applica-
tion. The CALL DICT button and EDIT tab are
related to the lexicon reference explained in Sec-
tion 3.2.

3.2 Detailed Pattern Specifications
Table 3 lists a sample of pattern expressions of
the proposed model. Our model permits leaf node
match (_), alternatives (|), subtree retrieval (#),
negation (!), and quantification (*, ?, +). In addi-
tion, the user can use two unique functions: lexi-
con reference and subpattern call.

Lexicon Reference The following pattern is a
simple one representing a causal relation between
subtree a1 and subtree a2.
(.POS=S *
(#a1.POS=NP *)
(.POS=VP * (.lemma=increase|cause _)
(#a2.POS=NP) *) *)

Here, the pattern (.lemma=increase|... would
be long because many words can be used as a
lemma for the leaf node. In this case, users can
use word lists described in separate files, instead
of writing down all of the words in the pattern
subtree. A pattern using lexicon reference is as
follows:
(.POS=S *
(#a1.POS=NP *)
(.POS=VP * (.lemma=\dic.affect _)
(#a2.POS=NP) *) *)

The affect represents the name of a word list
containing the words increase and cause. Users
can also define a list of words for a1 and a2.

Subpattern Call It is useful to partially refer to
pre-defined subpatterns because the same subpat-
terns occur repeatedly in different tree structure
patterns. The following is an example of a sub-
pattern definition.
(
((ref . (leaf pos)))
(.POS=VP *
(.POS=\arg.pos&.lemma=\dic.spinoff *)
(#a2.POS=NP *) *)

)

Here, ref is a reserved word meaning subpat-
tern definition, leaf is the name of the subpat-
tern, pos is the name of the argument variable.
\arg.pos is expanded to a given argument. The
user can call the subpattern as follows:
(.POS=S *
(#a1.POS=NP *)
(.POS=VP *
(\ref.leaf VB|VBZ) *) *)

Here, \ref.leaf means the call of the subpat-
tern whose name is leaf. VB|VBZ is the argument
of the subpattern and is substituted for \arg.pos
in the subpattern. When creating a pattern for a
sentence with a complicated syntax structure, the
recursive call of a subpattern is useful. An exam-
ple of a recursive call is as follows:
(
((ref . (lib.vp_loop leaf_pattern pos)))
(.POS=VP *
(\ref.vp_loop \arg.leaf_pattern VB) *)

)
(
((ref . (lib.vp_loop leaf_pattern pos)))
(\ref.\arg.leaf_pattern \arg.pos)

)

(.POS=S *
(#a1.POS=NP *)
(\ref.vp_loop leaf VB|VBZ)
*)

This pattern partially corresponds to the pattern
syntax A .+(VP) B of Tregex.

4 Implementation

The proposed tool StruAP is implemented in
Python. Syntax trees are expanded on python
data structures and tree structure patterns are di-
rectly applied on the data structure. This means
we do not use translation from our model to ex-
isting query lauguage, such as SQL. In the cur-
rent implementation, we use Cassandra2 as a data
store and Solr3 as a text search index. We also
use Hadoop4 for parallel processing of the rule en-
gine. While the tool comes with the web-based
user interface shown in Figure 2, command line
tools for the Linux environment are also available.
Users can easily start up the web version of the
tool by using a docker image 5 with several con-
figurations for the data store and the text search in-
dex. For the command line version, users edit files
for tree patterns and lexicon reference with their

2 Cassandra, http://cassandra.apache.org
3 Apache Solr, http://lucene.apache.org/solr
4 Hadoop, http://hadoop.apache.org
5 docker, https://www.docker.com/

34



a1 a2 text
Pepsi the restaurant unit Pepsi will spin off the restaurant unit by the end of the year .
Mannesmann its Internet business The chairman also said Mannesmann might spin off its In-

ternet business .
Rhone-Poulenc part of its chemicals ac-

tivities
As part of the plan Rhone-Poulenc would spin off part of its
chemicals activities to focus on healthcare , in a bid to boost
its share price and earnings .

Table 2: Examples of extracted relations. c⃝1994–2010 New York Times.

Pattern Subtree to be matched
(.POS=PRT *) Subtree whose POS is PRT.
(.POS=VB|VBD _) Leaf node whose POS is VB or VBD.
(.POS=VB&.lemma=spin _) Leaf node POS of which is VB, and the lemma of which is spin.
(#a0.POS=VB _) Leaf node whose POS is VB. Retrieve the matched node with the name of a0.
(.POS=NP&.type!=tmod *) Subtree POS of which is NP, the dependency type of which is not tmod.
* Zero or more occurrences of any subtree.
(*.POS!=NP|NN|NNS *) Zero or more occurrences of the subtree whose POS is not NP, NN, nor NNS.
(?.POS=MD|CC|VP *) Zero or one occurrences of the subtree whose POS is MD, CC or VP.
(+.POS=NN|NP *) One or more occurrences of the subtree whose POS is NN or NP.

Table 3: Sample of pattern expressions.

Figure 3: brat view of generated annotations.

favorite editors and run the rule engine from the
Linux command line. We implemented the tool
for the English language and Japanese language.
Stanford’s CoreNLP (Manning et al., 2014) and
CaboCha (Kudo and Matsumoto, 2002) are used
for the English language and Japanese language,
respectively. For the English version, the user can
use both constituent trees and dependency trees as
the basis of the tree structure patterns. On the other
hand, only dependency trees are available for the
Japanese version because CaboCha does not out-
put constituent trees.

We can easily integrate the annotation tool brat 6

into the proposed tool via the data store. Fig-
ure 3 visualizes the generated annotations in the
data store with brat view.

Figure 4 shows a simple example of an appli-
cation that uses extracted relations. This appli-
cation uses the same text search index as that of
the proposed tool. For example, we can retrieve
sentences that include the spin-off relation with
the object phrase of home appliance by entering
home appliance in the object phrase text field. The
highlighted text fragments correspond to the sub-
ject phrases. By using the same search index,

6 brat, http://brat.nlplab.org

Figure 4: Example of application using extracted
relations.

the tool can be used to directly maintain and up-
date the relation data for the application. Simi-
larly, we can implement various applications us-
ing case-specific relations through the index of the
proposed tool.

5 Discussion

We roughly investigated the efficiency of the pro-
posed tool in an actual relation development task.
Table 4 shows the number of tree structure patterns
and the lines of the word lists for lexicon refer-
ence, which are developed by two non-researchers
in an hour. Although developing tree structure pat-
terns is generally difficult, more than 54 patterns
were developed within an hour. We consider that
the proposed tool is easy to use and very effec-
tively identifies essential structures for target re-
lations because the tool provides intuitive pattern

35



relation Developer A Developer B
spin-off

# of patterns 8 12
# of words 3 2

sue
# of patterns 7 10
# of words 5 4

penalize
# of patterns 8 9
# of words 8 4

Table 4: Efficiency investigation. Developer A is
translator, but not researcher; Developer B is soft-
ware engineer, but not researcher.

syntax and whole workflow support. The use of
a bracketed syntax to define patterns is arguable.
However, we suppose users can develop lots of
patterns faster by editting bracketed patterns in a
text-based editor, than by use of a graphical tree
editor.

On the other hand, there are not enough words
for lexicon reference for an actual application. Al-
though the function of the lexicon reference is use-
ful, the current tool is not helpful to increase the
variety of predicate words and clue words.

We have already used the tool in several cases.
We have developed 657 patterns in total, and the
number of words in the lexicons used for the pat-
terns is 6406. Especially, our development of
end-to-end argument generation system in debat-
ing (Sato et al., 2015) relied on the proposed tool.
We conclude that the proposed model is effective
when it is necessary to newly define case-specific
relations and non-researchers are involved in de-
velopment of the relation extraction.

6 Conclusion

This paper describes a tool for developing tree
structure patterns, which makes it easy to de-
fine relations among textual phrases, and creates
a search index for these newly defined relations.
The tool assumes that in most practical use cases,
newly defining relations specific to the use cases
is required. In such cases, the proposed tool is ef-
fective to identify essential tree structure patterns.

Future work includes developing semi-
automatic abstraction using frequent subtree
mining and integrating techniques to collect clue
words for lexicon reference. Another direction is
to support collaboration between users. Similar
subpattern search helps users to avoid duplicating
a pattern created by another user.

References
Sabine Brants, Stefanie Dipper, Silvia Hansen, Wolf-

gang Lezius, and George Smith. 2002. The TIGER
treebank. In Proceedings of the Workshop on Tree-
banks and Linguistic Theories.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. J. Mach. Learn. Res., 12:2493–2537.

Ulrich Heid, Holger Voormann, Jan-Torsten Milde, Ul-
rike Gut, Katrin Erk, and Sebastian Padó. 2004.
Querying both time-aligned and hierarchical corpora
with NXT search. In Proceedings of LREC-2004,
pages 1455 – 1459.

Meghana Kshirsagar, Sam Thomson, Nathan Schnei-
der, Jaime Carbonell, Noah A. Smith, and Chris
Dyer. 2015. Frame-semantic role labeling with het-
erogeneous annotations. In Proceedings of ACL-
IJCNLP 2015 Short Papers, pages 218–224.

Taku Kudo and Yuji Matsumoto. 2002. Japanese de-
pendency analysis using cascaded chunking. In
Proceedings of CoNLL 2002 Post-Conference Work-
shops, pages 63–69.

Catherine Lai and Steven Bird. 2005. Lpath+: A first-
order complete language for linguistic tree query. In
Proceedings of the 19st Pacific Asia Conference on
Language, Information and Computation, PACLIC.

R. Levy and G. Andrew. 2006. Tregex and tsurgeon:
tools for querying and manipulating tree data struc-
tures. In Proceedings of LREC-2006.

Christopher D. Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven J. Bethard, and David Mc-
Closky. 2014. The Stanford CoreNLP natural lan-
guage processing toolkit. In ACL System Demon-
strations, pages 55–60.

Vasin Punyakanok, Dan Roth, and Wen-tau Yih. 2008.
The importance of syntactic parsing and infer-
ence in semantic role labeling. Comput. Linguist.,
34(2):257–287.

Douglas L. T. Rohde. 2005. Tgrep2 user manual ver-
sion 1.15.

Misa Sato, Kohsuke Yanai, Toshinori Miyoshi, Toshi-
hiko Yanase, Makoto Iwayama, Qinghua Sun, and
Yoshiki Niwa. 2015. End-to-end argument gener-
ation system in debating. In Proceedings of ACL-
IJCNLP 2015 System Demonstrations.

Anil Kumar Singh. 2012. A concise query language
with search and transform operations for corpora
with multiple levels of annotation. In Proceedings
of LREC-2012.

Marco A. Valenzuela-Escárcega, Gus Hahn-Powell,
and Mihai Surdeanu. 2016. Odin’s runes: A rule
language for information extraction. In Proceedings
of LREC-2016.

36


