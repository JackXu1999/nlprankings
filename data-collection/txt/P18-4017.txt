



















































The SUMMA Platform: A Scalable Infrastructure for Multi-lingual Multi-media Monitoring


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics-System Demonstrations, pages 99–104
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

99

The SUMMA Platform: A Scalable Infrastructure for
Multi-lingual Multi-media Monitoring

Ulrich Germann
University of Edinburgh

ugermann@ed.ac.uk

Renārs Liepin, š
LETA

renars.liepins@leta.lv

Guntis Barzdins
University of Latvia
guntis.barzdins@lu.lv

Didzis Gosko
LETA

didzis.gosko@leta.lv

Sebastião Miranda
Priberam Labs

Sebastiao.Miranda@priberam.pt

David Nogueira
Priberam Labs

David.Nogueira@priberam.pt

Abstract

The open-source SUMMA Platform is a
highly scalable distributed architecture for
monitoring a large number of media broad-
casts in parallel, with a lag behind actual
broadcast time of at most a few minutes.

The Platform offers a fully automated me-
dia ingestion pipeline capable of recording
live broadcasts, detection and transcrip-
tion of spoken content, translation of all
text (original or transcribed) into English,
recognition and linking of Named Enti-
ties, topic detection, clustering and cross-
lingual multi-document summarization of
related media items, and last but not least,
extraction and storage of factual claims in
these news items. Browser-based graphical
user interfaces provide humans with aggre-
gated information as well as structured ac-
cess to individual news items stored in the
Platform’s database.

This paper describes the intended use cases
and provides an overview over the system’s
implementation.

1 Introduction

SUMMA (“Scalable Understanding of Multilingual
Media”) is an EU-funded Research and Innova-
tion Action that aims to assemble state-of-the-art
NLP technologies into a functional media process-
ing pipeline to support large news organizations in
their daily work. The project consortium consists
of the University of Edinburgh, the Lativan Infor-
mation Agency (LETA), Idiap Research Institute,
Priberam Labs, Qatar Computing Research Insti-
tute, University College London, and Sheffield Uni-
versity as technical partners, and BBC Monitoring
and Deutsche Welle as use case partners.

1.1 Use Cases

Three use cases drive the technology integration
efforts.

1.1.1 External Media Monitoring
BBC Monitoring1 is a business unit within the
British Broadcasting Corporation (BBC). In op-
eration since 1939 and with a staff of currently ca.
300 regional expert journalists, it provides media
monitoring and analysis services to the BBC’s own
news rooms, the British government, and other
subscribers.
Each staff journalist monitors up to four live

broadcasts in parallel, plus several other informa-
tion sources such as social media feeds. Assuming
work distributed around the clock in three shifts,2
BBC Monitoring currently has, on average, the ca-
pacity to actively monitor about 400 live broad-
casts at any given time. At the same time, it has
access to over 1,500 TV stations and ca. 1,350 ra-
dio stations world-wide via broadcast reception, as
well as a myriad of information sources on the in-
ternet. The main limiting factor in maintaining
(or even extending) monitoring coverage is the cost
and availability of the staff required to do so.
Continuous live monitoring of broadcast chan-

nels by humans is not the most effective use of their
time. Entertainment programming such as movies
and sitcoms, commercial breaks, and repetitions of
content (e.g., on 24/7 news channels), for example,
are of limited interest to monitoring operations.
What is of interest are emerging stories, new devel-
opments, and shifts in reporting. By automatically
recording, monitoring, and indexing media content
from a large number of media streams, and storing
it in a database within a very short period of time
after it has been published, the Platform allows an-
alysts to focus on media content that is most rel-
evant to their work and alleviates them from the
tedious task of just monitoring broadcast streams
in search of such relevant content.

1.1.2 Internal Monitoring
Deutsche Welle,3 headquartered in Germany, is an
international public broadcaster covering world-

1 https://monitoring.bbc.co.uk/
2 Actual staff allocation and thus the amount of media

monitoring may vary over the course of the day.
3 http://www.dw.com

https://monitoring.bbc.co.uk/
http://www.dw.com


100

Transcribe*

Translate*

Recognise
and link 

named entities

Extract facts
and relations

Cluster 
similar

documents

Detect
topics

Record*

Summarise
clusters

Database of
annotated
news items

* if applicable

Figure 1: Overview of the SUMMA architecture.

wide news in 30 different languages. Regional news
rooms produce and broadcast content indepen-
dently; journalistic and programming decisions are
not made by a central authority within Deutsche
Welle. This means that it is difficult for the organi-
zation at large, from regional managers in charge of
several news rooms to top management, to main-
tain an accurate and up-to-date overview of what
is being broadcast, what stories have been covered,
and where there is potential for synergies, for ex-
ample by using journalistic background work that
was performed for one story to produce similar con-
tent for a different audience in a different broadcast
region and language.
The SUMMA Platform’s cross-lingual story clus-

tering and summarization module with the corre-
sponding online visualization tool addresses this
need. It provides an aggregate view of recent cap-
tured broadcasts, with easy access to individual
broadcast segments in each cluster.

1.1.3 Data Journalism
The third use case is the use of the platform (or
more specifically, it’s database API) by journalists
and researchers (e.g., political scientists) who want
to perform data analyses based on large amounts
of news reports. Potential uses are the plotting of
events or time series of events on maps, analysis of
bias or political slant in news reporting, etc. This
use case is the most open-ended and, unlike the
other two, has not been a major driving force in the
actual design and implementation of the Platform
so far.

2 System Architecture

2.1 Design

Figure 1 shows a schematic overview over the
Platform’s workflow. The Platform comprises
three major parts: a data ingestion pipeline build
mostly upon existing state-of-the-art NLP technol-
ogy; a web-based user front-end specifically devel-
oped with the intended use cases in mind, and a
database at the center that is continuously updated
by the data ingestion pipeline and accessed by end
users through the web-based GUI, or through a
REST API by downstream applications.

Services within the Platform — technical such
as the database server or the message queue, and
services performing natural language processing
tasks — run independently in individual Docker4
application containers. This encapsulation allows
for mostly independent development of the com-
ponents by the consortium partners responsible for
them.
Each NLP service augments incoming media

items (represented as json structures) with addi-
tional information: automatic speech recognition
(ASR) services add transcriptions, machine trans-
lation (MT) engines add translations, and so forth.
The flow of information within the Platform is

realized via a message queues5. Each type of task
(e.g., speech recognition in a specific language, ma-
chine translation from a specific language into En-
glish, etc.) has a queue for pending tasks and
another queue for completed tasks; task workers
pop a message off the input queue, acknowledge it
upon successful completion, and push the output
of the completed task onto the output queue. A
task scheduler (the only component that needs to
“know” about the overall structure of the process-
ing pipeline) orchestrates the communication.
The use of a message queues allows for easy scal-

ability of the Platform — if we need more through-
put, we add more workers, which all share the same
queues.
The central database for orchestration of media

item processing is an instance of RethinkDB,6 a
document-oriented database that allows clients to
subscribe to a continuous stream of notifications
about changes in the database. Each document
consists of several fields, such as the URL of the
original news item, a transcript for audio sources,
or the original text, a translation into English if
applicable, entities such as persons, organisations
or locations mentioned in the news items, etc.
For the user-facing front end, we use an in-

stance of PostgreSQL7 that pulls in new arrivals
periodically from the RethinkDB. The PostgreSQL
database was not part of the original platform de-
sign. It was introduced out out of performance con-
cerns, when we noticed at at some point that Re-
thinkDB’s reponsiveness was deteriorating rapidly
as the database grew. We ultimately determined
that this was due to an error in our set-up of the
database — we had failed to set up indexing for
certain fields in the database, resulting in linear
searches through the database that grew longer
and longer as the number of items in the database
increased. However, we did not realise this until af-
ter we had migrated the user front-ends to interact

4 www.docker.com
5 www.rabbitmq.com
6 www.rethinkdb.com
7 www.postgresql.org

www.docker.com
www.rabbitmq.com
www.rethinkdb.com
www.postgresql.org


101

with a PostgreSQL database. The Platform also
provides an export mechanism into ElasticSearch8
databases.
The web-based graphical user front-end was de-

veloped specifically for SUMMA, based on wire-
frame designs from our use case partners. It is im-
plemented in the Aurelia JavaScript Client Frame-
work9.
In the following section, we briefly present the in-

dividual components of the data ingestion pipeline.

3 Data Ingestion Pipeline
Components

3.1 Live Stream Recorder and Chunker
The recorder and chunker monitors one or more
live streams via their respective URLs. Broad-
cast signals received via satellite are converted into
transport streams suitable for streaming via the in-
ternet and provided via a web interface. All data
received by the Recorder is recorded to disk und
chunked into 5-minutes segments for further pro-
cessing. Within the Platform infrastructure, the
recorder and chunker also serves as the internal
video server for recorded transitory material.
Once downloaded and chunked, a document stub

with the internal video URL is entered into the
database, which then schedules them for down-
stream processing.
Video and audio files that are not transitory but

provided by the original sources in more persistent
forms (i.e., served from a permanent location), are
currently not recorded but retrieved from the orig-
inal source when needed.

3.2 Other Data Feeds
Text-based data is retrieved by data feed modules
that poll the providing source at regular intervals
for new data. The data is downloaded and entered
into the database, which then schedules the new
arrivals for downstream processing.
In addition to a generic RSS feed monitor, we

use custom data monitors that are tailored to spe-
cific data sources, e.g. the specific APIs that
broadcaster-specific news apps use for updates.
The main task of these specialized modules is to
map between data fields of the source API’s spe-
cific (json) response and the data fields used within
the Platform.

3.3 Automatic Speech Recognition
The ASR modules within the Platform are built on
top of CloudASR (Klejch et al., 2015); the underly-
ing speech recognition models are trained with the
Kaldi toolkit (Povey et al., 2011). Punctuation is
added using a neural MT engine that was trained

8 www.elastic.co
9 aurelia.io

to translate from un-punctuated text to punctua-
tion. The training data for the punctuation module
is created by stripping punctuation from an exist-
ing corpus of news texts. The MT engine used
for punctuation insertion uses the same software
components as the MT engines used for language
translation. Currently, the Platform supports ASR
of English, German, Arabic, Russian, Spanish, and
Latvian; systems for Farsi, Portuguese and Ukra-
nian are planned.

3.4 Machine Translation
The machine translation engines for language
translation use the Marian decoder (Junczys-
Dowmunt et al., 2016) for translation, with neu-
ral models trained with the Nematus toolkit (Sen-
nrich et al., 2017). In the near future, we plan to
switch to Marian entirely for training and trans-
lation. Currently supported translation directions
are from German, Arabic, Russian, Spanish, and
Latvian into English. Systems for translation from
Farsi, Portuguese and Ukranian into English are
planned.

3.5 Topic Classification
The topic classifier uses a hierarchical attention
model for document classification (Yang et al.,
2016) trained on nearly 600K manually annotated
documents in 8 languages.10

3.6 Storyline Clustering and Cluster
Summarization

Incoming stories are clustered into storylines with
the online clustering algorithm by Aggarwal and
Yu (2006). The resulting storylines are summa-
rized with the extractive summarization algorithm
by Almeida and Martins (2013).

3.7 Named Entity Recognition and
Linking

For Named Entity Recognition, we use TurboEnti-
tyRecognizer, a component within TurboParser11
(Martins et al., 2009). Recognized entities and re-
lations between them (or propositions about them)
are linked to a knowledge base of facts using AMR
techniques developed by Paikens et al. (2016).

3.8 Trained systems and their
performance

Space contraints prevent us from discussing the
NLP components in more detail here. Detailed in-
formation about the various components can be
found in the project deliverables 3.1, 4.1, and 5.1,

10 The Platform currently is designed to handle 9 lan-
guages: English, Arabic, Farsi, German, Latvian,
Portuguese, Russian, Spanish, and Ukrainian.

11 https://github.com/andre-martins/TurboParser

www.elastic.co
aurelia.io
https://github.com/andre-martins/TurboParser


102

Figure 2: Trending media item views: histogram
(top), and list (bottom)

which are available from the SUMMA project’s
web page.12

4 User Interfaces
The platform provides several user interfaces
(“views”), to accommodate different user’s needs.
The trending media item views (Fig 2) rely on

recognised Named Entities. For each entity rec-
ognized by the Named Entity recognizer, the his-
togram view (top) shows a bar chart with the num-
ber of media items that mention said entity within
each hour for the past n hours. The order of the
list of histograms corresponds to the recent promi-
nence of the respective entity. In the list view (bot-
tom), recent arrivals for a specific Named Entity
are sorted most-recent-first. The screenshot shows
the result of a full text search.
Figure 3 shows the view of a recorded video seg-

ment. The video player panel is on the left. On
the right, we see topic labels (top), a summary
of the transcript (middle), and the original tran-
script. The transcript is synchronized with the
video, so that recognized speech is automatically
highlighted in the transcript as the video is played,
and a click into the transcript takes the user to the
corresponding position in the video.
The document cluster view (Fig. 4) gives a bird

eye’s view of the clustered media items; the area

12 www.summa-project.eu/deliverables

occupied by each cluster corresponding to the num-
ber of items within the cluster. A click on the re-
spective tile shows a multi-document summary of
the cluster and a list of related media items.
The trending media item views correspond most

to our first use case: journalists keeping track of
specific stories linked to specific entities and iden-
tifying emerging topics.
The document cluster ciew corresponds best to

the needs of our second use case: internal monitor-
ing of a media organisation’s output.
In addition to these visual user interfaces, the

platform can also expose a database API, so that
users wishing to access the database directly with
their own analysis or visualisation tools can do so.
A number of ideas for such tools were explored
recently at BBC’s SUMMA-related #NewsHack
event in London in November 2017.13 They in-
clude a slackbot that allows journalists to query
the database in natural language via a chat inter-
face, automatic generation of short videos captur-
ing and summarizing the news of the days in a
series of captioned images, or contrasting the cov-
erage by a specific media outlet against a larger
pool of information sources.

5 Hardware Requirements and
Performance Analysis

When designing the system, we made a deliberate
decision to avoid reliance on GPUs for processing,
due to the high cost of the hardware, especially
when rented from cloud computing services. This
constraint does not apply to the training of the
underlying models, which we assume to be done
offline. For most components, pre-trained models
are available for download.

5.1 Disk Space
A basic installation of the platform with models
for 6 languages / 5 translation directions currently
requires about 150GB of disk space. Recording
of live video streams requires approximately 10–25
GB per stream per day, depending on the resolu-
tion of the underlying video. We do not transcode
incoming videos to a lower resolution, due to the
high processing cost of transcoding.

5.2 CPU Usage and Memory
Requirements

Table 1 shows a snapshot of performance moni-
toring on a singe-host deployment of the Platform
that we use for user interface testing and user expe-
rience evaluation, measured over a period of about
20 minutes. The deployment’s host is a large server

13 http://bbcnewslabs.co.uk/2017/11/24/
summa-roundup. The event attracted 63 regis-
trations; subtracting no-shows, the event had ca. 50
attendees.

www.summa-project.eu/deliverables
http://bbcnewslabs.co.uk/2017/11/24/summa-roundup
http://bbcnewslabs.co.uk/2017/11/24/summa-roundup


103

Figure 3: Single media item view

Figure 4: Document cluster view

with 32 CPU cores and 287 GB of memory, of
which ca. 120GB are currently used by the Plat-
form, supporting transcription in 6 languages and
translation from 5 into English. Not shown in the
table are the ASR, Punctuation and MT compo-
nents for Latvian and German, as they were idle
at the time.

Notice that except for the Named Entity recog-
nizer, no component has a peak memory use of
more than 4 GB, so that individual components
can be run on much smaller machines in a dis-
tributed set-up.

Speech recognition is clearly the bottleneck and
resource hog in the pipeline. The ASR engine cur-
rently is a single-threaded process that can tran-
scribe speech at about half the “natural” speaking

rate.14 Each segment is transcribed in one chunk;
we use multiple workers (2-3) per channel to keep
up with the speed of data arrival.
The multi-threaded MT engines use all avail-

able cores to translate in parallel and are able to
translate some 500 words per minute per thread.15
For comparison: the typical speaking rate of an
English-speaking news speaker is about 160 words
per minute. A single MT engine can thus easily ac-
commodate transcripts from multiple transcribed
live streams.

14 For segments without speech, the processing speed
may be about 8 times real time, as the speech recog-
nizer gets confused and explores a much larger search
space.

15 Junczys-Dowmunt et al. (2016) report 141 words per
second on a 16-thread machine; this means ca. 528
words per minute per thread.



104

Table 1: Relative use of CPU time and peak mem-
ory use (per container) for various tasks in the NLP
processing pipeline.

Task CPU RAM
ASR (ar) 27.26% 1359 MiB
ASR (en) 26.53% 2594 MiB
ASR (ru) 22.40% 2044 MiB
ASR (es) 13.44% 2800 MiB
MT (ar) 3.34% 926 MiB
MT (ru) 3.14% 1242 MiB
Summarization 1.21% 3609 MiB
Semantic parsing 0.97% 3290 MiB
MT (es) 0.34% 1801 MiB
Job queue 0.30% 326 MiB
Topic identification 0.27% 1418 MiB
Named entity recognition 0.18% 12625 MiB
Punctuation (en) 0.16% 362 MiB
Database 0.16% 3021 MiB
Recording and chunking 0.15% 337 MiB
Punctuation (ru) 0.04% 285 MiB
Punctuation (ar) 0.03% 276 MiB
DB REST interface 0.02% 153 MiB
Clustering 0.01% 1262 MiB
Data feed (not streamed) 0.01% 141 MiB
Punctuation (es) 0.01% 240 MiB
Task creation 0.01% 1076 MiB
Result writer 0.01% 1003 MiB
(msg. queue to DB)

In a successful scalability test with docker swarm
in January 2018 we were able to ingest 400 TV
streams simultaneously on Amazon’s AWS EC2
service, allocating 2 t2.2xlarge virtual machines (8
CPUs, 32GB RAM) per stream, although 1 ma-
chine per stream probably would have be sufficient.
For this test, we deployed several clones of the en-
tire platform for data ingestion, all feeding into a
single user-facing PostgreSQL database instance.

6 Conclusion

The SUMMA Platform successfully integrates a
multitude of state-of-the-art NLP components to
provide an integrated platform for multi-lingual
media monitoring and analysis. The Platform de-
sign provides for easy scalability and facilitates
the integration of additional NLP analysis mod-
ules that augment existing data.

Availability

The Platform infrastructure and most of its com-
ponents are currently scheduled to be released
as open-source software in late August 2018 and
will available through the project home page at

http://www.summa-project.eu

Acknowledgements

This work was conducted within the scope
of the Research and Innovation Action

SUMMA, which has received funding from the Eu-
ropean Union’s Horizon 2020 research and innova-
tion programme under grant agreement No 688139.

References
Aggarwal, Charu C and Philip S Yu. 2006. “A
framework for clustering massive text and cat-
egorical data streams.” SIAM Int’l. Conf. on
Data Mining, 479–483. Boston, MA, USA.

Almeida, Miguel B and Andre FT Martins. 2013.
“Fast and robust compressive summarization
with dual decomposition and multi-task learn-
ing.” ACL, 196–206. Sofia, Bulgaria.

Junczys-Dowmunt, Marcin, Tomasz Dwojak, and
Hieu Hoang. 2016. “Is neural machine transla-
tion ready for deployment? A case study on 30
translation directions.” International Workshop
on Spoken Language Translation. Seattle, WA,
USA.

Klejch, Ondřej, Ondřej Plátek, Lukáš Žilka, and
Filip Jurčíček. 2015. “CloudASR: platform and
service.” Int’l. Conf. on Text, Speech, and Dia-
logue, 334–341. Pilsen, Czech Republic.

Martins, André FT, Noah A Smith, and Eric P
Xing. 2009. “Concise integer linear programming
formulations for dependency parsing.” ACL-
IJCNLP, 342–350. Singapore.

Paikens, Peteris, Guntis Barzdins, Afonso Mendes,
Daniel Ferreira, Samuel Broscheit, Mariana S. C.
Almeida, Sebastião Miranda, David Nogueira,
Pedro Balage, and André F. T. Martins. 2016.
“SUMMA at TAC knowledge base population
task 2016.” TAC. Gaithersburg, Maryland,
USA.

Povey, Daniel, Arnab Ghoshal, Gilles Boulianne,
Lukáš Burget, Ondr̆ej Glembek, Nagendra Goel,
Mirko Hannemann, Petr Motlíček, Yanmin
Qian, Petr Schwarz, Jan Silovský, Georg Stem-
mer, and Karel Veselý. 2011. “The Kaldi speech
recognition toolkit.” ASRU. Waikoloa, HI,
USA.

Sennrich, Rico, Orhan Firat, Kyunghyun Cho,
Alexandra Birch, Barry Haddow, Julian
Hitschler, Marcin Junczys-Dowmunt, Samuel
Läubli, Antonio Valerio Miceli Barone, Jozef
Mokry, and Maria Nadejde. 2017. “Nematus: a
toolkit for neural machine translation.” EACL
Demonstration Session. Valencia, Spain.

Yang, Zichao, Diyi Yang, Chris Dyer, Xiaodong
He, Alexander J. Smola, and Eduard H. Hovy.
2016. “Hierarchical attention networks for doc-
ument classification.” NAACL. San Diego, CA,
USA.

http://www.summa-project.eu

