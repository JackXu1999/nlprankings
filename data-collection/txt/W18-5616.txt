



















































Patient Risk Assessment and Warning Symptom Detection Using Deep Attention-Based Neural Networks


Proceedings of the 9th International Workshop on Health Text Mining and Information Analysis (LOUHI 2018), pages 139–148
Brussels, Belgium, October 31, 2018. c©2018 Association for Computational Linguistics

139

Patient Risk Assessment and Warning Symptom Detection Using Deep
Attention-Based Neural Networks

Ivan Girardi1, Pengfei Ji1,2, An-phi Nguyen1, Nora Hollenstein1,2, Adam Ivankay1,
Lorenz Kuhn1, Chiara Marchiori1 and Ce Zhang2

1 IBM Research Zurich, Switzerland
2 ETH Zurich, Switzerland

ivg@zurich.ibm.com, pji@student.ethz.ch, uye@zurich.ibm.com,
noraho@ethz.ch, aiv@zurich.ibm.com, kuhnl@student.ethz.ch,

chi@zurich.ibm.com, ce.zhang@ethz.ch

Abstract
We present an operational component of a
real-world patient triage system. Given a spe-
cific patient presentation, the system is able
to assess the level of medical urgency and is-
sue the most appropriate recommendation in
terms of best point of care and time to treat.
We use an attention-based convolutional neu-
ral network architecture trained on 600,000
doctor notes in German. We compare two ap-
proaches, one that uses the full text of the med-
ical notes and one that uses only a selected
list of medical entities extracted from the text.
These approaches achieve 79% and 66% preci-
sion, respectively, but on a confidence thresh-
old of 0.6, precision increases to 85% and
75%, respectively. In addition, a method to de-
tect warning symptoms is implemented to ren-
der the classification task transparent from a
medical perspective. The method is based on
the learning of attention scores and a method
of automatic validation using the same data.

1 Introduction

Several intelligent triage systems have recently
been developed that attempt to evaluate automati-
cally the risk related to specific patient conditions
and direct patients to the appropriate care provider
(Semigran et al., 2015). The work presented here
is part of an interactive triage system being devel-
oped for industrial applications. The system takes
patient demographics and symptoms as input, as-
sesses their current medical conditions and sug-
gests where and by when the patients should seek
medical care. A key feature of the system is the
detection of warning symptoms, namely, red flags.
This is crucial to distinguish potential emergencies
from common or less urgent cases and therefore
provides the medical rationale behind a given rec-
ommendation. In addition, for triage systems that
involve a dialogue with patients through multi-
ple question-and-answer interactions (such as Ada

(2018)), warning symptom detection is fundamen-
tal to determine the most informative questions to
ask patients.

We propose a model that assesses patient risk
and detects warning symptoms based on a large
volume of doctor notes in German, sometimes
even mixed with Swiss German expressions. In
this context, assessing patient risk can be regarded
as a supervised text classification task, where the
content of the medical records represents the fea-
ture space, and the recommendations assigned by
medical professionals are the ground truth labels.
The use of recurrent neural networks (RNN) has
been proposed to solve text classification tasks
(Tang et al., 2015). However, the proposed RNN
models must be modified to be consistent with the
requirement that warning symptoms must be de-
tected, because in RNNs it is generally not possi-
ble to know which hidden states are most relevant.

To address these challenges, we propose an
integrated approach to assess patient risk and
detect warning symptoms simultaneously using
an attention-based convolutional neural network
(ACNN), which is a combination of a convo-
lutional neural network (CNN) and an attention
mechanism (Kim, 2014; Yang et al., 2016; Du
et al., 2017). To the best of our knowledge, such
an integrated approach is applied for the first time
to the medical domain.

The main contributions of this paper are
twofold. First, we propose a neural network ar-
chitecture that can be used simultaneously for
text classification and the detection of important
words. Comparing our model to other neural ar-
chitectures of similar complexity, we achieve com-
petitive classification results. The model is espe-
cially useful to explain the recommendation ratio-
nale in classification scenarios, where the given in-
put consists of a set of extracted entities, rather
than full text. Second, a formal pipeline to detect



140

warning symptoms based on learned importance
factors is applied in an industrial application. Our
model identifies symptoms that indicate a medical
emergency. These warning symptoms can then be
used by intelligent medical care services or in an
ontology.

2 Related Work

2.1 Text Classification with Deep Learning

Traditional text classification approaches repre-
sent documents with sparse lexical features, such
as n-grams, and use a linear model or kernel meth-
ods on this representation (Wang and Manning,
2012; Joachims, 1998). More recently, deep learn-
ing technologies have been applied to text cate-
gorization problems. RNNs are designed to han-
dle sequences of any length and capture long-term
dependencies. Like sequence-based (Tang et al.,
2015) and tree-structured (Tai et al., 2015) mod-
els, they have achieved remarkable results in doc-
ument modeling.

Moreover, CNN models have achieved high ac-
curacy on text categorization. For example, Kim
(2014) used one convolutional layer (with multi-
ple widths and filters) followed by a max pooling
layer over time. Johnson and Zhang (2015) built a
model that uses up to six convolutional layers, fol-
lowed by three fully connected classification lay-
ers. Conneau et al. (2016) published a model with
a 32-layer character-level CNN, that achieved a
significant improvement on a large dataset. Mod-
els that combine CNN and RNN components for
document classification also yield competitive re-
sults on several public datasets (Zhou et al., 2015;
Lai et al., 2015).

To the best of our knowledge, not many re-
search efforts have focused on augmenting CNNs
for text classification with attention mechanisms.
In fact, attention layers are more typically coupled
with RNNs in order to better handle long-term de-
pendencies (Yang et al., 2016). Interestingly, Du
et al. (2017) used a CNN not as a classifier, but
to compute the attention weights to apply to the
hidden layers of a RNN. An example of combin-
ing attention layers with a CNN is the work by
Shen and Huang (2016). However, the authors
do not augment the CNN features using attention
weights. They use an attention mechanism to com-
pute sentence-level features, which they then con-
catenate to the convolutional features to ultimately
perform the classification.

2.2 Intelligent Triage Systems

Intelligent triage systems inform patients where
and when they should seek medical care, based
on methods such as expert rules, Bayesian infer-
ence and deep learning (Semigran et al., 2015).
For example, Symptomate (2018) uses a Bayesian
network and a medical database for triage advice.
Clinical records written by medical experts have
also been used to make triage suggestions with
deep learning technologies. Li et al. (2017) uses
a shallow CNN model to predict a patient’s dis-
eases using the corresponding admission notes.
Nigam (2016) applied a LSTM model to the multi-
label classification task of assigning ICD-9 labels
to medical notes.

3 Methodology

3.1 Data Processing

To build the triage application described here, we
used 600,000 case records written in German and
collected over the past five years. This is only
50% of the total available data, as we selected only
those cases treated by top-ranked doctors. Case
records contain demographic data such as age and
gender, previous illnesses, and a full-text descrip-
tion of the patient’s current medical condition. Po-
tential diagnoses consistent with the symptom de-
scription are listed.

The descriptions in the records are expressed in
formal medical language as well as in layman’s
terminology. The notes are not always written in
complete sentences and include misspellings, di-
alect vocabulary, non-standard medical abbrevia-
tions and inconsistent punctuation. This is a chal-
lenge for the linguistic processing of case files.

The original case records are very unevenly
distributed over ten recommendation classes (a
combination of a point-of-care and a time-to-treat
class). To mitigate this problem and for the pur-
pose of this work, the original classes, (emer-
gency, urgent), (grundversorger, urgent), (special-
ist, urgent), (grundversorger, within a day), (spe-
cialist, within a day), (grundversorger, not ur-
gent), (specialist, not urgent), (telecare, –), were
merged, with the help of healthcare profession-
als, into three categories: Urgent Care, General
Practice, Telecare. The categorization of cases is
shown in Table 1.



141

Recommendations Number of Cases

Urgent Care 270,000
General Practice 104,000

Telecare 244,000

Table 1: Ground truth distribution for the reduced
classes. Urgent Care = Patient needs to seek medi-
cal care within a short time period; General Practice =
Patient requires medical attention in a physical consul-
tation, but not urgently; Telecare = In-person medical
appointment not required, instructions over the phone
are sufficient.

3.1.1 NLP Pipeline
A natural language processing (NLP) pipeline
extracted medically relevant concepts associated
with each written case. The pipeline consisted
of the following stages: (1) data preprocessing
for misspelling correction and abbreviation ex-
pansion, (2) named entity recognition (NER) and
(3) concept clustering. Acronyms and abbrevi-
ations used unambiguously were linked to the
corresponding entities directly in the dictionaries.
Ambiguous acronyms and abbreviations were re-
solved, when possible, using algorithms that in-
clude context for disambiguation. For NER, we
used a rule-based medical entity extraction sys-
tem built with IBM Watson Explorer, using al-
gorithms based on dictionary look-up and ad-
vanced rules. This allowed us to detect 51 en-
tity types in the following categories: anatomy,
physiology, symptoms, diseases, medical proce-
dures, medicines, negated symptoms, negated dis-
eases, ability/inability of, foreign-body objects,
negations, patient information, symptom charac-
terization, disease characterization, time expres-
sions. The distinction between symptoms and
diagnosis was made using existing ontologies,
where these semantic types were assigned with
the help of a team of clinical experts. The dic-
tionaries used in the NER were built partially
based on existing German-language medical dic-
tionaries and ontologies (UMLS mapped German
terms, ICD10, Meddra, etc.) and partially using
the list of words contained in the case records.
The dictionaries therefore contain a mapping of
technical and layman’s terms. The NLP pipeline
was designed to detect and resolve the negated
mentions of the entities listed above (using Ger-
man language-specific negation particles or ex-
pressions), which are very frequent in this type
of records. Only 31 entity types in the categories

symptoms, diseases, ability/inability of, negated
symptoms, negated diseases were included in the
current final list. The average number of extracted
annotations per case was 70 for all entities, but
only 17 for the selected entities. Performance was
evaluated using the manual annotations of a set of
ground truth cases performed by a team of clin-
ical experts. Concept clustering is a hierarchical
procedure that allowed us to group annotations de-
scribing the same medical concept. The same en-
tity may be expressed in a variety of forms (com-
pound vs. simple nouns, dialect or common lan-
guage vs. medical terminology). Concept clus-
tering is performed either at the dictionary level or
by algorithms based on similarity between lemmas
associated with the annotations.

Table 2 lists the concepts extracted from an
original case record after preprocessing by the de-
scribed NLP pipeline.

key value
Gender Male

Class Urgent Care

Content “Seit heute beschwert sich
der Patient über heftige
Brustschmerzen; Fieber 37,4°C;
Schwierigkeiten beim Atmen,
leichte Kopfschmerzen.”

Entities starke Brustschmerzen
Fieber 36-38°C
Atembeschwerde
leichte Kopfschmerzen

Table 2: (key,value)-pairs of an original patient case
file and extracted entities.

In this paper, we will benchmark the classifica-
tion approach of using the extracted concepts with
respect to the one of using the full text.

3.2 Model Architecture
The overall architecture of the attention-based
CNN is shown in Fig. 1. It consists of several
components: a word embedding look-up layer ob-
tained using word2vec (Mikolov et al., 2013), a
CNN-based n-gram encoder, an n-gram level at-
tention layer and several fully-connected layers.
By means of word embeddings, each word is rep-
resented as a real-valued vector. The word em-
bedding look-up layer is a word embedding table
T ∈ Rn×k, where n is the total vocabulary size
and k is the embedding dimension. The parame-



142

w1, w2, ... wn

word2vec

k

n

2d-conv

1-gram

f

n

m-gram

n
−

m
+

1

f

gram level attention

gram level attention

flat connection

m
×

f
+

a
+

1

f

a+ 1

MLP

output

Figure 1: Model Architecture.

ters of the embedding table were fine-tuned during
the training phase.

3.2.1 N-Gram Encoder
We used a 2D convolution layer (Kim, 2014) to
encode the word sequence into n-gram represen-
tations, thus capturing contextual information. For
a given document, a 2D convolution filter w ∈
Rm×k was applied to a window of m words to
produce a new feature. A feature ci was generated
from a window of words xi:i+m−1 by

ci = Relu(w · xi:i+m−1 + b). (1)

This filter was applied to each possible window of
words in the sentence x1:m, x2:m+1, .....xn−m+1:n
to produce a feature map:

c = [c1, c2, ......, cn−m+1], (2)

with c ∈ Rn−m+1. By applying multiple filters
(denoted f ) on xi:i+m−1, we obtained a new rep-
resentation of the document. By setting different
values for m, we obtained different n-gram repre-
sentations of the documents. This operation was
useful in our application setting because these lay-
ers create local region embeddings by n-grams.
Moreover, this allowed us to compute the atten-
tion factors for a combination of several symp-
toms. This in turn enabled us to detect pairs and
even triplets of symptoms that are harmless if they
appear individually, yet become red flags when
they appear together. For example, the individual
symptoms pain in arm and sudden nausea are no
cause for concern. However, if a patient experi-
ences both, this might indicate an impending heart
attack.

3.2.2 N-Gram Level Attention Layer
For each n-gram representation, we wanted to
derive a corresponding fully-connected represen-

tation for the document. As different n-grams
are of different importance to the document, we
introduced an attention mechanism to extract n-
grams that are relevant to the meaning of the doc-
ument and aggregated the representation of those
informative n-grams to form a document vector.
The relevant n-grams then became candidates for
warning symptoms. More specifically, the atten-
tion mechanism was defined such that:

uit = tanh(Wwvit + bw), (3)

where vit refers to the tth row of ith-gram repre-
sentation. That is, we first fed the n-gram anno-
tations vit through a one-layer neural network to
obtain uit as a hidden representation of vit. Then
we measured the importance of the word as the
similarity of uit with a word-level context vector
uw and obtained a normalized importance weight
αit through a softmax function:

αit =
exp(uTituw)∑
t exp(u

T
ituw)

. (4)

The context vector uw can be regarded as a high-
level representation of a fixed query “what is the
most informative word?” used in memory net-
works (Sukhbaatar et al., 2015; Kumar et al.,
2016). Context vector uw was randomly initial-
ized and jointly learned during the training pro-
cess. Thereafter, we computed the document vec-
tor si as a weighted sum of the n-gram annotations
based on the weights:

si =
∑
t

αitvit. (5)

Finally, all n-gram document level representations
were flattened into a one-dimensional vector (flat
connection layer in Fig. 1) plus patient gender and



143

age (a+ 1 in Fig. 1). This vector was then fed into
a multilayer perceptron (MLP) for classification.

3.3 Warning Symptom Detection

Warning symptoms, or red flags, indicate the need
for urgent medical care. The ACNN model is able
to distinguish the importance of each symptom in
the final classification. Thereafter, we calculated
the attention score for each symptom as follows:

score(sj) =

∑
ci∈C Φ(ci, sj)f(ci, sj)

occur(sj)
, (6)

f(ci, sj) =
att(sj)

max
sk∈ci

att(sk)
, (7)

where Φ(ci, sj) is equal to 1 if symptom sj is con-
tained in case record ci and zero elsewhere; C is
the set of urgent care cases in the data; occur(si)
is the total occurrences of symptom si; att(sk)
are the attention weights returned by the ACNN.
The attention weights gave us a measurement of
the warning level of the symptoms.

This procedure was applied for all classes to de-
tect the most important symptoms that drive the
model’s prediction. As expected for the other
classes, the model assigns high attention weights
to non-warning symptoms.

4 Results

4.1 Patient Risk Assessment Experiment

4.1.1 Training Details
We conducted a detailed evaluation of this model
on both the original full-text dataset and a dataset
of a few selected medical entities (see Sec-
tion 3.1.1 for details) denoted for simplicity as a
symptoms dataset. The machine learning frame-
work where all the neural network models have
been implemented was based on TensorFlow and
Keras. The vocabulary size, average document
size and maximum document length are 134,000,
62.9 and 959 words for the full-text dataset;
and 20,000, 14.15 and 94 for the symptoms
dataset. We used 90% of the data for training,
5% for validation, and 5% for test randomly sam-
pled. Both datasets were preprocessed by re-
moving stop words and low-occurrence words and
zero-padding the documents. We learned 200-
dimensional word embeddings on our datasets
with word2vec over 25 iterations. The embeddings
were different for each dataset.

We tuned our parameters on a 30,000 valida-
tion set and report the result on another 30,000
test set. For model-specific parameters, we used
grid search to find the optimal values. We used
a cross-entropy loss function with 256-mini-batch
updating and Adam optimizer for five epochs.
The learning rate was between 0.001 and 0.003;
regularization was performed by weight decay of
0.0001 and a dropout of 0.8 was applied to every
MLP layer. The attention vector size was set up to
100, and the window size was set from 1 to 5. For
each n-gram extraction, we used up to 128 filters
for 2D convolution.

4.1.2 Model Comparison
In this section, we compare our system to the fol-
lowing approaches:
CLSTM (Zhou et al., 2015) applies a CNN model
on text and feeds consecutive window features di-
rectly to a LSTM model.
Kim CNN (Kim, 2014) uses 2D convolution win-
dows to extract an n-gram representation followed
by max-pooling.
BiGRU Attention Network (Yang et al., 2016)
consists of RNNs applied on both word and sen-
tence level to extract a hidden state. An attention
mechanism is applied after the bidirectional gated
recurrent units.

The results on the datasets with the full text and
the symptoms only are shown in Tables 3 and 4,
respectively. All the analyzed models show simi-
lar performance in the classification task. For all
models, the performance decreases as we move
from the full text dataset to the symptoms dataset
because the medical and contextual information
also diminishes by taking into account only the ex-
tracted symptom concepts.

4.1.3 Result Analysis
In this section, we compare our ACNN model with
the state-of-the-art deep learning models to obtain
a benchmark on our triage use case. We also de-
scribe how our approach, a combination of con-
volutional neural networks and attention mecha-
nisms, equals the performance of existing models
with the advantage of being explainable.

Kim CNN uses 2D convolution windows to ex-
tract n-gram representations. Max pooling was
then applied to each of the filter outputs. A sin-
gle value was retained for each feature map. This
might work well for short sentences containing
only a few “leading” words indicating the cate-



144

Model P(f1) R(f1) F(f1) P(f2) R(f2) F(f2) P(f3) R(f3) F(f3)

KIM CNN 82.3 80.5 81.9 69.2 65.4 68.4 82.2 86.1 83.0
CLSTM 78.2 82.6 79.0 66.9 62.4 66.0 83.4 80.7 82.8
BiGRU Attention Net 74.9 80.2 75.9 62.6 59.0 61.9 80.8 76.6 79.9
ACNN 80.5 81.1 80.7 67.6 60.9 66.1 82.0 84.8 82.6

Table 3: Prediction results in % for the different architectures on full text, where P(fk), R(fk), F(fk) are precision,
recall and f-score divided by class, and where f1, f2, f3 are urgent care, general practice and telecare, respectively.
Similar values were obtained by conducting several experiments and averaging the results.

Model P(s1) R(s1) F(s1) P(s2) R(s2) F(s2) P(s3) R(s3) F(s3)

KIM CNN 70.5 73.6 71.1 55.2 40.6 51.5 66.5 70.6 67.3
CLSTM 70.0 71.6 70.3 53.8 40.1 50.4 65.4 70.8 66.4
BiGRU Attention Net 69.2 72.5 69.9 53.0 43.1 50.7 66.7 68.4 67.0
ACNN 72.5 68.2 71.6 51.9 47.8 51.0 65.5 72.0 66.5

Table 4: Same as Table 3 but on symptoms dataset, where s1, s2, s3 are urgent care, general practice and telecare
cases, respectively.

Figure 2: Visualization of attention factors from neural network used to explain recommendation rationale. Each
line represents the (translated) symptoms extracted for a patient case file. The darker the color, the higher the
attention factor for a symptom.

gory. For longer documents, however, all informa-
tion about n-grams is lost apart from the strongest
signal. The presence of highly important symp-
toms in clinical data is the reason why this model
performs well especially for urgent care and tele-
care classes. This hypothesis is supported by the
number of symptoms with large attention scores
found in the ACNN model for these classes.

The BiGRU Attention Network applies an at-
tention layer after bidirectional GRU components.
For a given word in a sentence, it encodes informa-
tion about the word context in that sentence. How-
ever, compared to a 2D convolution window, only
a single context window is used. It is not trivial to
choose the optimal window size. Thus, it is dif-
ficult to detect warning symptom pairs or triplets.
For 2D convolution in our model, identifying such
pairs or triplets would be more straightforward be-
cause attention factors are also learned for 2 and 3-
grams. Another limitation of GRU models is that
they rely on fully sequential data. In our use case,
however, the data is composed of several separate

phrases, words or incomplete sentences.
Our ACNN combines the merits of 2D convo-

lution and attention mechanisms by stacking 2D
convolution layers to extract contextual informa-
tion and an attention mechanism to assign impor-
tance factors to different symptoms and combina-
tions thereof.

4.2 Warning Symptom Detection

Owing to the lack of ground truth, we used the fol-
lowing evaluation method to detect warning symp-
toms with the ACNN. First, we measured the re-
call of the ACNN on urgent care cases contain-
ing only symptom concepts. Then, a new dataset
was created by removing from each case record
the 1-gram with the highest attention score, calcu-
lated as described in Section 3.3. For urgent cases,
we expected the removed 1-grams to be highly im-
portant signals of medical urgency, hence warning
symptoms. For instance, starke Brustschmerzen
would be removed from the case described in Sec-
tion 3.1.1. We then compared the ACNN recall



145

for the urgent cases on the new dataset (Atten-
tion Drop) with respect to the recall on the orig-
inal symptoms dataset (Baseline). This procedure
is performed on all the classes for validation. The
decrease in recall demonstrates the importance of
the detected warning symptoms in order to classify
urgent cases correctly. To verify that the detected
warning symptoms are indeed highly informative,
we furthermore generated datasets in which either
random symptoms (Random Drop) or symptoms
that appear most frequently in urgent cases (Fre-
quency Drop) are dropped.

As shown in Table 5, dropping the attention-
detected warning symptoms led to the largest de-
crease in performance. The difference became
even more distinct if two symptoms instead of one
were removed from the cases.

Performance also decreased for the urgent care
and general practice classes, whereas almost a flat
behavior was found for telecare class, as expected.
In the latter case, random, frequency, attention
drops showed the same results because several
features had the same attention scores. Manual
inspection of the symptoms with the highest at-
tention scores further supports these results. The
darker the color of the symptom in Figure 2, the
higher its attention factor in the model. In the ex-
amined samples, darker colors did indeed correlate
with symptoms that made patients require urgent
care, such as vomiting blood and electric shock.

With single or double removals for the full-text
dataset, a much lower decrease in performance
was observed because of the higher number of fea-
tures per case.

4.3 Explainable Deep Learning

In current research, but especially in medical in-
dustry applications, transparent or explainable
machine learning models are becoming increas-
ingly important. Some machine learning models
have become so complex, they are black boxes.
End users need to understand why a certain rec-
ommendation was made.

In our application, the attention mechanism
on which we based our warning (and non-
warning) symptom detection represents a transpar-
ent method of reasoning why a given case belongs
to a certain class.

For instance, by analyzing the patient symptoms
with the highest attention scores, it becomes ap-
parent why a case would be predicted to be urgent,

general practice or telecare. Table 6 shows some
examples with high/low attention scores computed
using 1-gram attention values for urgent care, gen-
eral practice and telecare classes. As can be seen,
the symptoms with the highest score in the ur-
gent cases are the most severe, whereas the symp-
toms in the telecare cases are less severe. In
other words, symptoms with a high/low score for
a given class are the most/least relevant ones for
that class. As expected, if the model predicts
an urgent (non-urgent) class, the model assigns
a higher weight to warning (non-warning) symp-
toms. The computation of 1-gram feature scores
results in 2,000 (3,600), 734 (3,700), 1,500 (3,800)
features with scores of > 0.8 (< 0.2) for s1, s2
and s3, respectively. The use of an attention layer
on n-gram representations allowed us to compute
feature relevance including correlations between
pairs, triplets, etc. An example of scores of feature
pairs obtained by extracting the attention weights
for the 2-grams is shown in Tables 7 and 8. Strong
correlation between feature pairs is found for the
cases where the score of the pair is much higher
than those of the single features. The compu-
tation of 2-gram feature scores results in 12,000
(28,000), 4,800 (13,000), 10,000 (24,000) features
with scores of > 0.8 (< 0.2) for s1, s2 and s3, re-
spectively.

4.4 Confidence

To reach higher performance in an operative triage
application, we define a confidence score in the
classification based on which the system decides
whether to trust the recommendation. In Table 9
and Table 10 we show the same results obtained
in Tables 3 and 4, respectively, discarding all test
cases in which the predicted probability of the
classifier was lower than 0.6. With the chosen
threshold, we discarded roughly 30% cases. Over-
all a performance improvement of between 5%
and 10% is observed. In future work, we plan to
apply additional techniques, e.g., based on hier-
archical decision trees, to minimize medical risk
even further.

5 Conclusion

We have described an attention-based CNN
model to assess patient risk and to detect warning
symptoms, which will be used in an industrial
application for medical triage. We achieved a
precision of 79% on the full-text dataset and



146

Dataset P(s1) R(s1) F(s1) P(s2) R(s2) F(s2) P(s3) R(s3) F(s3)

Baseline 72.5 68.2 71.6 51.9 47.8 51.0 65.5 72.0 66.7
Random Drop 71.7 65.7 70.4 49.9 44.2 48.6 65.8 72.8 67.1
Frequency Drop 71.7 65.7 70.4 50.9 46.0 49.8 66.0 73.5 67.4
Attention Drop 70.3 61.3 68.2 48.0 40.9 46.4 66.3 74.6 67.8
2 Random Drops 70.8 62.8 69.0 47.6 40.2 45.9 66.0 73.3 67.3
2 Frequency Drops 70.3 61.2 68.3 49.0 42.6 47.6 66.6 75.6 68.2
2 Attention Drops 67.5 53.6 64.2 44.0 34.8 41.8 67.0 77.0 68.8

Table 5: Different datasets and the model’s precision, recall and f-score in %, where s1, s2, s3 are urgent care,
general practice and telecare symptoms dataset, respectively.

s1 score s2 score s3 score

shortness of breath 1.0 intermittent shoulder pain 1.0 back distortion 1.0
(Atemnot) (intermittierende Schulterschmerzen) (Rückenzerrung)
pain after accident 1.0 severely itchy wound 1.0 abrasion on the back 1.0
(Schmerzen nach Unfall) (stark juckende Wunde) (Schürfung am Rücken)
foreign body in esophagus 1.0 purulent nasal discharge 1.0 toenail injury 1.0
(Fremdkörper im Ösophagus) (eitriger Nasenausfluss) (Zehennagelverletzung)
severe rectal bleed 1.0 neck abscess 1.0 itching forehead 1.0
(blutet stark rektal) (Abszess am Nacken) (Juckreiz an der Stirn)
itching back 0.05 no pain when walking 0.03 stabbed with knife 0.03
(Juckreiz am Rücken) (beim Laufen keine Schmerzen) (Messerstich)
pain in thumb 0.04 throat is normal 0.01 ear bleeding 0.02
(Daumenschmerz) (Hals normal) (Ohrenblutung)
nail injury 0.03 blister on tongue 0.01 hardened lower abdomen 0.01
(Nagelverletzung) (Blase auf der Zunge) (verhärteter Unterbauch)
wart on foot 0.01 can drink normally 0.003 difficulty breathing 0.005
(Warze am Fuss) (kann normal trinken) (Schwierigkeiten beim Atmen)

Table 6: Symptoms (translated from German into English) scores divided by class using 1-gram attention values
(only a few examples with high/low scores shown here). The corresponding German terms are given in parentheses.

(fi, fj) score of fi score of fj score of (fi, fj)

(acute abdominal pain, severe abdominal pain) 0.86 0.39 1.0
(akute Bauchschmerzen, starke Bauchschmerzen)
(loss of consciousness, head injury) 0.32 0.55 1.0
(Bewusstseinsverlust, Schädelverletzungen)
(epigastric pain, colic) 0.35 0.26 1.0
(Oberbauchschmerzen, Kolik)
(pneumonia, respiratory tract inflammation) 0.45 0.24 0.92
(Pneumonie, Atemwegentzündung)
(severe vomiting, dehydration) 0.44 0.56 0.87
(starkes Erbrechen, Dehydration)
(very high blood pressure, hypertensive crisis) 0.49 0.78 0.86
(Blutdruck stark erhöht, hypertensive Krise)

Table 7: Symptoms (translated from German into English) scores using 2-gram attention values (only a few high
scores shown here) for s1. The corresponding German terms are given in parentheses.

66% on the symptoms set. On a confidence
threshold of 0.6, precision increases to 85% and
75%, respectively. The learned attention weights
allowed us to compute the symptom relevance,

i.e., the attention score, which is then used to
extract warning symptoms more precisely and to
make the recommendation rationale transparent.



147

(fi, fj) score of fi score of fj score of (fi, fj)

(chronic back pain, back pain) 0.29 0.08 1.0
(chronische Rückenschmerzen, Rückenschmerzen)
(patella pain, knee pain) 0.26 0.21 0.79
(Schmerzen an der Kniescheibe, Knieschmerzen)
(chronic anemia, food allergy) 0.18 0.17 0.66
(chronische Anämie, Nahrungsmittelallergie)
(rheumatoid arthritis, joint pain) 0.13 0.13 0.59
(rheumatoide Arthritis, Gelenkschmerzen)
(colonoscopy, blood in stool) 0.22 0.22 0.59
(Darmspiegelung, Blut im Stuhlgang)
(fatigue, chronic anemia) 0.07 0.18 0.58
(Müdigkeit, chronische Anämie)

(non-swollen lymph nodes, viral infection) 0.20 0.31 1.0
(keine Lymphknotenschwellung, virale Entzündung)
(conjunctivitis, slight redness) 0.32 0.17 1.0
(Konjunktivitis, leichte Rötung)
(abnormally frequent urination, no complication) 0.26 0.63 1.0
(hufiges Urinieren, keine Komplikation)
(bladder infection, no pregnancy) 0.29 0.21 0.96
(Harnblasenentzündung, keine Schwangerschaft)
(local reaction, itchiness) 0.31 0.17 0.92
(Lokalreaktion, Juckreiz)
(gastroenteritis, no travel abroad) 0.42 0.23 0.90
(Gastroenteritis, kein Auslandaufenthalt)

Table 8: Symptoms (translated from German into English) scores divided by class using 2-gram attention values
(only a few high scores shown here) for s2 (upper), s3 (lower) panel. The corresponding German terms are given
in parentheses.

Model P(f1) R(f1) F(f1) P(f2) R(f2) F(f2) P(f3) R(f3) F(f3)

KIM CNN 87.8 86.3 87.5 73.0 78.6 74.0 90.6 90.0 90.4
CLSTM 84.4 88.4 85.2 76.2 66.5 74.0 88.4 87.6 88.3
BiGRU Attention Net 76.5 82.2 77.6 65.1 60.7 64.2 82.5 78.2 81.6
ACNN 85.3 87.3 85.6 77.3 65.1 74.5 87.1 89.5 87.6

Table 9: Same as Table 3 applying a threshold to the probabilities of 0.6.

Model P(s1) R(s1) F(s1) P(s2) R(s2) F(s2) P(s3) R(s3) F(s3)

KIM CNN 75.6 86.0 77.5 65.0 45.5 59.8 77.5 72.0 76.3
CLSTM 76.5 83.2 77.8 66.8 44.5 60.7 75.2 75.2 75.2
BiGRU Attention Net 73.2 76.8 73.4 58.4 45.1 55.1 70.5 72.5 70.9
ACNN 77.0 81.5 77.9 62.8 60.0 60.3 75.7 74.9 75.5

Table 10: Same as Table 4 applying a threshold to the probabilities of 0.6.

Acknowledgements. We deeply acknowledge
D. Dykeman, D. Ortiz-Yepes and K. Thandiackal.

References

Ada. 2018. https://ada.com.

Alexis Conneau, Holger Schwenk, Loı̈c Barrault, and
Yann Lecun. 2016. Very deep convolutional net-



148

works for natural language processing. arXiv
preprint arXiv:1606.01781.

Jiachen Du, Lin Gui, Ruifeng Xu, and Yulan He. 2017.
A convolutional attention model for text classifica-
tion. In National CCF Conference on Natural Lan-
guage Processing and Chinese Computing, pages
183–195. Springer.

Thorsten Joachims. 1998. Text categorization with
support vector machines: Learning with many rel-
evant features. Machine learning: ECML-98, pages
137–142.

Rie Johnson and Tong Zhang. 2015. Semi-supervised
convolutional neural networks for text categoriza-
tion via region embedding. In Advances in neural
information processing systems, pages 919–927.

Yoon Kim. 2014. Convolutional neural net-
works for sentence classification. arXiv preprint
arXiv:1408.5882.

Ankit Kumar, Ozan Irsoy, Peter Ondruska, Mohit
Iyyer, James Bradbury, Ishaan Gulrajani, Victor
Zhong, Romain Paulus, and Richard Socher. 2016.
Ask me anything: Dynamic memory networks for
natural language processing. In International Con-
ference on Machine Learning, pages 1378–1387.

Siwei Lai, Liheng Xu, Kang Liu, and Jun Zhao. 2015.
Recurrent convolutional neural networks for text
classification. In AAAI, volume 333, pages 2267–
2273.

Christy Li, Dimitris Konomis, Graham Neubig, Peng-
tao Xie, Carol Cheng, and Eric Xing. 2017. Convo-
lutional neural networks for medical diagnosis from
admission notes. arXiv preprint arXiv:1712.02768.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg Cor-
rado, and Jeffrey Dean. 2013. Distributed represen-
tations of words and phrases and their composition-
ality. In Advances in neural information processing
systems, pages 3111–3119.

Priyanka Nigam. 2016. Applying deep learning
to ICD-9 Multi-label Classification from Medical
Records. Technical report, Stanford University.

Hannah L Semigran, Jeffrey A Linder, Courtney Gi-
dengil, and Ateev Mehrotra. 2015. Evaluation of
symptom checkers for self diagnosis and triage: au-
dit study. bmj, 351:h3480.

Yatian Shen and Xuanjing Huang. 2016. Attention-
based convolutional neural network for semantic re-
lation extraction. In COLING 2016, 26th Inter-
national Conference on Computational Linguistics,
Proceedings of the Conference: Technical Papers,
December 11-16, 2016, Osaka, Japan, pages 2526–
2536.

Sainbayar Sukhbaatar, Jason Weston, Rob Fergus, et al.
2015. End-to-end memory networks. In Advances
in neural information processing systems, pages
2440–2448.

Symptomate. 2018. https://symptomate.com.

Kai Sheng Tai, Richard Socher, and Christopher D
Manning. 2015. Improved semantic representations
from tree-structured long short-term memory net-
works. arXiv preprint arXiv:1503.00075.

Duyu Tang, Bing Qin, and Ting Liu. 2015. Document
modeling with gated recurrent neural network for
sentiment classification. In EMNLP, pages 1422–
1432.

Sida Wang and Christopher D Manning. 2012. Base-
lines and bigrams: Simple, good sentiment and topic
classification. In Proceedings of the 50th Annual
Meeting of the Association for Computational Lin-
guistics: Short Papers-Volume 2, pages 90–94. As-
sociation for Computational Linguistics.

Zichao Yang, Diyi Yang, Chris Dyer, Xiaodong He,
Alexander J Smola, and Eduard H Hovy. 2016. Hi-
erarchical attention networks for document classifi-
cation. In HLT-NAACL, pages 1480–1489.

Chunting Zhou, Chonglin Sun, Zhiyuan Liu, and Fran-
cis Lau. 2015. A C-LSTM neural network for text
classification. arXiv preprint arXiv:1511.08630.


