



















































Neural Document Summarization by Jointly Learning to Score and Select Sentences


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 654–663
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

654

Neural Document Summarization by Jointly
Learning to Score and Select Sentences

Qingyu Zhou†∗, Nan Yang‡, Furu Wei‡, Shaohan Huang‡, Ming Zhou‡, Tiejun Zhao†
†Harbin Institute of Technology, Harbin, China

‡Microsoft Research, Beijing, China
{qyzhou,tjzhao}@hit.edu.cn

{nanya,fuwei,shaohanh,mingzhou}@microsoft.com

Abstract

Sentence scoring and sentence selection
are two main steps in extractive docu-
ment summarization systems. However,
previous works treat them as two sepa-
rated subtasks. In this paper, we present
a novel end-to-end neural network frame-
work for extractive document summariza-
tion by jointly learning to score and se-
lect sentences. It first reads the doc-
ument sentences with a hierarchical en-
coder to obtain the representation of sen-
tences. Then it builds the output sum-
mary by extracting sentences one by one.
Different from previous methods, our ap-
proach integrates the selection strategy
into the scoring model, which directly pre-
dicts the relative importance given previ-
ously selected sentences. Experiments on
the CNN/Daily Mail dataset show that the
proposed framework significantly outper-
forms the state-of-the-art extractive sum-
marization models.

1 Introduction

Traditional approaches to automatic text summa-
rization focus on identifying important content,
usually at sentence level (Nenkova and McKeown,
2011). With the identified important sentences, a
summarization system can extract them to form
an output summary. In recent years, extractive
methods for summarization have proven effective
in many systems (Carbonell and Goldstein, 1998;
Mihalcea and Tarau, 2004; McDonald, 2007; Cao
et al., 2015a). In previous works that use extrac-
tive methods, text summarization is decomposed
into two subtasks, i.e., sentence scoring and sen-
tence selection.

∗Contribution during internship at Microsoft Research.

Sentence scoring aims to assign an importance
score to each sentence, and has been broadly
studied in many previous works. Feature-based
methods are popular and have proven effective,
such as word probability, TF*IDF weights, sen-
tence position and sentence length features (Luhn,
1958; Hovy and Lin, 1998; Ren et al., 2017).
Graph-based methods such as TextRank (Mihal-
cea and Tarau, 2004) and LexRank (Erkan and
Radev, 2004) measure sentence importance using
weighted-graphs. In recent years, neural network
has also been applied to sentence modeling and
scoring (Cao et al., 2015a; Ren et al., 2017).

For the second step, sentence selection adopts
a particular strategy to choose content sentence
by sentence. Maximal Marginal Relevance (Car-
bonell and Goldstein, 1998) based methods se-
lect the sentence that has the maximal score and
is minimally redundant with sentences already in-
cluded in the summary. Integer Linear Program-
ming based methods (McDonald, 2007) treat sen-
tence selection as an optimization problem under
some constraints such as summary length. Sub-
modular functions (Lin and Bilmes, 2011) have
also been applied to solving the optimization prob-
lem of finding the optimal subset of sentences in a
document. Ren et al. (2016) train two neural net-
works with handcrafted features. One is used to
rank sentences, and the other one is used to model
redundancy during sentence selection.

In this paper, we present a neural extractive
document summarization (NEUSUM) framework
which jointly learns to score and select sentences.
Different from previous methods that treat sen-
tence scoring and sentence selection as two tasks,
our method integrates the two steps into one end-
to-end trainable model. Specifically, NEUSUM is
a neural network model without any handcrafted
features that learns to identify the relative impor-
tance of sentences. The relative importance is



655

measured as the gain over previously selected sen-
tences. Therefore, each time the proposed model
selects one sentence, it scores the sentences con-
sidering both sentence saliency and previously se-
lected sentences. Through the joint learning pro-
cess, the model learns to predict the relative gain
given the sentence extraction state and the partial
output summary.

The proposed model consists of two parts, i.e.,
the document encoder and the sentence extractor.
The document encoder has a hierarchical archi-
tecture, which suits the compositionality of doc-
uments. The sentence extractor is built with recur-
rent neural networks (RNN), which provides two
main functionalities. On one hand, the RNN is
used to remember the partial output summary by
feeding the selected sentence into it. On the other
hand, it is used to provide a sentence extraction
state that can be used to score sentences with their
representations. At each step during extraction,
the sentence extractor reads the representation of
the last extracted sentence. It then produces a new
sentence extraction state and uses it to score the
relative importance of the rest sentences.

We conduct experiments on the CNN/Daily
Mail dataset. The experimental results demon-
strate that the proposed NEUSUM by jointly scor-
ing and selecting sentences achieves significant
improvements over separated methods. Our con-
tributions are as follows:

• We propose a joint sentence scoring and se-
lection model for extractive document sum-
marization.

• The proposed model can be end-to-end
trained without handcrafted features.

• The proposed model significantly outper-
forms state-of-the-art methods and achieves
the best result on CNN/Daily Mail dataset.

2 Related Work

Extractive document summarization has been ex-
tensively studied for years. As an effective ap-
proach, extractive methods are popular and dom-
inate the summarization research. Traditional ex-
tractive summarization systems use two key tech-
niques to form the summary, sentence scoring and
sentence selection. Sentence scoring is critical
since it is used to measure the saliency of a sen-
tence. Sentence selection is based on the scores of

sentences to determine which sentence should be
extracted, which is usually done heuristically.

Many techniques have been proposed to model
and score sentences. Unsupervised methods do
not require model training or data annotation. In
these methods, many surface features are useful,
such as term frequency (Luhn, 1958), TF*IDF
weights (Erkan and Radev, 2004), sentence length
(Cao et al., 2015a) and sentence positions (Ren
et al., 2017). These features can be used alone or
combined with weights.

Graph-based methods (Erkan and Radev, 2004;
Mihalcea and Tarau, 2004; Wan and Yang, 2006)
are also applied broadly to ranking sentences. In
these methods, the input document is represented
as a connected graph. The vertices represent the
sentences, and the edges between vertices have at-
tached weights that show the similarity of the two
sentences. The score of a sentence is the impor-
tance of its corresponding vertex, which can be
computed using graph algorithms.

Machine learning techniques are also widely
used for better sentence modeling and importance
estimation. Kupiec et al. (1995) use a Naive Bayes
classifier to learn feature combinations. Conroy
and O’leary (2001) further use a Hidden Markov
Model in document summarization. Gillick and
Favre (2009) find that using bigram features con-
sistently yields better performance than unigrams
or trigrams for ROUGE (Lin, 2004) measures.

Carbonell and Goldstein (1998) proposed the
Maximal Marginal Relevance (MMR) method as
a heuristic in sentence selection. Systems using
MMR select the sentence which has the maximal
score and is minimally redundant with previous
selected sentences. McDonald (2007) treats sen-
tence selection as an optimization problem under
some constraints such as summary length. There-
fore, he uses Integer Linear Programming (ILP) to
solve this optimization problem. Sentence selec-
tion can also be seen as finding the optimal sub-
set of sentences in a document. Lin and Bilmes
(2011) propose using submodular functions to find
the subset.

Recently, deep neural networks based ap-
proaches have become popular for extractive doc-
ument summarization. Cao et al. (2015b) develop
a novel summary system called PriorSum, which
applies enhanced convolutional neural networks to
capture the summary prior features derived from
length-variable phrases. Ren et al. (2017) use



656

a two-level attention mechanism to measure the
contextual relations of sentences. Cheng and Lap-
ata (2016) propose treating document summariza-
tion as a sequence labeling task. They first en-
code the sentences in the document and then clas-
sify each sentence into two classes, i.e., extraction
or not. Nallapati et al. (2017) propose a system
called SummaRuNNer with more features, which
also treat extractive document summarization as a
sequence labeling task. The two works are both
in the separated paradigm, as they first assign a
probability of being extracted to each sentence,
and then select sentences according to the prob-
ability until reaching the length limit. Ren et al.
(2016) train two neural networks with handcrafted
features. One is used to rank the sentences to se-
lect the first sentence, and the other one is used
to model the redundancy during sentence selec-
tion. However, their model of measuring the re-
dundancy only considers the redundancy between
the sentence that has the maximal score, which
lacks the modeling of all the selection history.

3 Problem Formulation

Extractive document summarization aims to ex-
tract informative sentences to represent the im-
portant meanings of a document. Given a doc-
ument D = (S1, S2, . . . , SL) containing L sen-
tences, an extractive summarization system should
select a subset of D to form the output summary
S = {Ŝi|Ŝi ∈ D}. During the training phase,
the reference summary S∗ and the score of an out-
put summary S under a given evaluation function
r(S|S∗) are available. The goal of training is to
learn a scoring function f(S) which can be used
to find the best summary during testing:

argmax
S

f(S)

s.t. S = {Ŝi|Ŝi ∈ D}
|S| ≤ l.

where l is length limit of the output summary. In
this paper, l is the sentence number limit.

Previous state-of-the-art summarization sys-
tems search the best solution using the learned
scoring function f(·) with two methods, MMR
and ILP. In this paper, we adopt the MMR method.
Since MMR tries to maximize the relative gain
given previous extracted sentences, we let the
model to learn to score this gain. Previous works
adopt ROUGE recall as the evaluation r(·) con-

sidering the DUC tasks have byte length limit for
summaries. In this work, we adopt the CNN/Daily
Mail dataset to train the neural network model,
which does not have this length limit. To prevent
the tendency of choosing longer sentences, we use
ROUGE F1 as the evaluation function r(·), and set
the length limit l as a fixed number of sentences.

Therefore, the proposed model is trained to
learn a scoring function g(·) of the ROUGE F1
gain, specifically:

g(St|St−1) = r (St−1 ∪ {St})− r(St−1) (1)

where St−1 is the set of previously selected sen-
tences, and we omit the condition S∗ of r(·) for
simplicity. At each time t, the summarization sys-
tem chooses the sentence with maximal ROUGE
F1 gain until reaching the sentence number limit.

4 Neural Document Summarization

Figure 1 gives the overview of NEUSUM, which
consists of a hierarchical document encoder, and a
sentence extractor. Considering the intrinsic hier-
archy nature of documents, that words form a sen-
tence and sentences form a document, we employ
a hierarchical document encoder to reflect this hi-
erarchy structure. The sentence extractor scores
the encoded sentences and extracts one of them at
each step until reaching the output sentence num-
ber limit. In this section, we will first introduce
the hierarchical document encoder, and then de-
scribe how the model produces summary by joint
sentence scoring and selection.

4.1 Document Encoding
We employ a hierarchical document encoder to
represent the sentences in the input document. We
encode the document in two levels, i.e., sentence
level encoding and document level encoding.
Given a document D = (S1, S2, . . . , SL) contain-
ing L sentences. The sentence level encoder reads
the j-th input sentence Sj = (x

(j)
1 , x

(j)
2 , . . . , x

(j)
nj )

and constructs the basic sentence representation
s̃j . Here we employ a bidirectional GRU (BiGRU)
(Cho et al., 2014) as the recurrent unit, where GRU
is defined as:

zi = σ(Wz[xi, hi−1])
ri = σ(Wr[xi, hi−1])

h̃i = tanh(Wh[xi, ri � hi−1])

hi = (1− zi)� hi−1 + zi � h̃i

(2)

(3)

(4)

(5)



657

~h
(3)
1

x
(3)
1

~h
(3)

1

~h
(3)
2

x
(3)
2

~h
(3)

2

~h
(3)
3

x
(3)
3

~h
(3)

3

~h
(3)
4

x
(3)
4

~h
(3)

4

~h
(3)
5

x
(3)
5

~h
(3)

5

~h
(3)
6

x
(3)
6

~h
(3)

6

s1

s̃1

s2

s̃2

s3

s̃3

s4

s̃4

s5

s̃5

Sentence Level
Encoding

Document Level
Encoding

h1

0

h2

s5

h3

s1

Joint Sentence Scoring and Selection

argmax = 5 argmax = 1 argmax =?

Figure 1: Overview of the NEUSUM model. The model extracts S5 and S1 at the first two steps. At the
first step, we feed the model a zero vector 0 to represent empty partial output summary. At the second
and third steps, the representations of previously selected sentences S5 and S1, i.e., s5 and s1, are fed
into the extractor RNN. At the second step, the model only scores the first 4 sentences since the 5th one
is already included in the partial output summary.

where Wz , Wr and Wh are weight matrices.
The BiGRU consists of a forward GRU and

a backward GRU. The forward GRU reads the
word embeddings in sentence Sj from left to
right and gets a sequence of hidden states,
(~h

(j)
1 ,

~h
(j)
2 , . . . ,

~h
(j)
nj ). The backward GRU reads

the input sentence embeddings reversely, from
right to left, and results in another sequence of hid-

den states, ( ~h
(j)

1 ,
~h
(j)

2 , . . . ,
~h
(j)

nj ):

~h
(j)
i = GRU(x

(j)
i ,

~h
(j)
i−1)

~h
(j)

i = GRU(x
(j)
i ,

~h
(j)

i+1)

(6)

(7)

where the initial states of the BiGRU are set to
zero vectors, i.e., ~h(j)1 = 0 and ~h

(j)

nj = 0.
After reading the words of the sentence Sj , we

construct its sentence level representation s̃j by
concatenating the last forward and backward GRU
hidden vectors:

s̃j =

[
~h
(j)

1

~h
(j)
nj

]
(8)

We use another BiGRU as the document level
encoder to read the sentences. With the sen-
tence level encoded vectors (s̃1, s̃2, . . . , s̃L) as
inputs, the document level encoder does for-
ward and backward GRU encoding and produces
two list of hidden vectors: (~s1, ~s2, . . . , ~sL) and
( ~s1, ~s2, . . . , ~sL). The document level representa-
tion si of sentence Si is the concatenation of the

forward and backward hidden vectors:

si =

[
~si
~si

]
(9)

We then get the final sentence vectors in the given
document: D = (s1, s2, . . . , sL). We use sentence
Si and its representative vector si interchangeably
in this paper.

4.2 Joint Sentence Scoring and Selection
Since the separated sentence scoring and selection
cannot utilize the information of each other, the
goal of our model is to make them benefit each
other. We couple these two steps together so that:
a) sentence scoring can be aware of previously se-
lected sentences; b) sentence selection can be sim-
plified since the scoring function is learned to be
the ROUGE score gain as described in section 3.

Given the last extracted sentence Ŝt−1, the sen-
tence extractor decides the next sentence Ŝt by
scoring the remaining document sentences. To
score the document sentences considering both
their importance and partial output summary, the
model should have two key abilities: 1) remem-
bering the information of previous selected sen-
tences; 2) scoring the remaining document sen-
tences based on both the previously selected sen-
tences and the importance of remaining sentences.
Therefore, we employ another GRU as the recur-
rent unit to remember the partial output summary,
and use a Multi-Layer Perceptron (MLP) to score



658

the document sentences. Specifically, the GRU
takes the document level representation st−1 of the
last extracted sentence Ŝt−1 as input to produce
its current hidden state ht. The sentence scorer,
which is a two-layer MLP, takes two input vec-
tors, namely the current hidden state ht and the
sentence representation vector si, to calculate the
score δ(Si) of sentence Si.

ht = GRU(st−1, ht−1)

δ(Si) = Ws tanh (Wqht +Wdsi)

(10)

(11)

where Ws, Wq and Wd are learnable parameters,
and we omit the bias parameters for simplicity.

When extracting the first sentence, we initialize
the GRU hidden state h0 with a linear layer with
tanh activation function:

h0 = tanh (Wm ~s1 + bm)

S0 = ∅
s0 = 0

(12)

(13)

(14)

whereWm and bm are learnable parameters, and
~s1 is the last backward state of the document level

encoder BiGRU. Since we do not have any sen-
tences extracted yet, we use a zero vector to repre-
sent the previous extracted sentence, i.e., s0 = 0.

With the scores of all sentences at time t, we
choose the sentence with maximal gain score:

Ŝt = argmax
Si∈D

δ(Si) (15)

4.3 Objective Function
Inspired by Inan et al. (2017), we optimize the
Kullback-Leibler (KL) divergence of the model
prediction P and the labeled training data distribu-
tionQ. We normalize the predicted sentence score
δ(Si) with softmax function to get the model pre-
diction distribution P :

P (Ŝt = Si) =
exp (δ(Si))∑L

k=1 exp (δ(Sk))
(16)

During training, the model is expected to learn
the relative ROUGE F1 gain at time step twith pre-
viously selected sentences St−1. Considering that
the F1 gain value might be negative in the labeled
data, we follow previous works (Ren et al., 2017)
to use Min-Max Normalization to rescale the gain
value to [0, 1]:

g(Si) = r(St−1 ∪ {Si})− r(St−1)

g̃(Si) =
g(Si)−min (g(S))

max (g(S))−min (g(S))

(17)

(18)

We then apply a softmax operation with tempera-
ture τ (Hinton et al., 2015) 1 to produce the labeled
data distributionQ as the training target. We apply
the temperature τ as a smoothing factor to produce
a smoothed label distribution Q:

Q(Si) =
exp (τ g̃(Si))∑L

k=1 exp (τ g̃(Sk))
(19)

Therefore, we minimize the KL loss function J :

J = DKL(P ‖ Q) (20)

5 Experiments

5.1 Dataset

A large scale dataset is essential for training neu-
ral network-based summarization models. We use
the CNN/Daily Mail dataset (Hermann et al., 2015;
Nallapati et al., 2016) as the training set in our
experiments. The CNN/Daily Mail news contain
articles and their corresponding highlights. The
highlights are created by human editors and are
abstractive summaries. Therefore, the highlights
are not ready for training extractive systems due
to the lack of supervisions.

We create an extractive summarization train-
ing set based on CNN/Daily Mail corpus. To de-
termine the sentences to be extracted, we design
a rule-based system to label the sentences in a
given document similar to Nallapati et al. (2017).
Specifically, we construct training data by maxi-
mizing the ROUGE-2 F1 score. Since it is com-
putationally expensive to find the global optimal
combination of sentences, we employ a greedy ap-
proach. Given a document with n sentences, we
enumerate the candidates from 1-combination

(
n
1

)

to n-combination
(
n
n

)
. We stop searching if the

highest ROUGE-2 F1 score in
(
n
k

)
is less than the

best one in
(

n
k−1
)
. Table 1 shows the data statistics

of the CNN/Daily Mail dataset.
We conduct data preprocessing using the same

method2 in See et al. (2017), including sentence
splitting and word tokenization. Both Nallapati
et al. (2016, 2017) use the anonymized version of
the data, where the named entities are replaced by
identifiers such as entity4. Following See et al.
(2017), we use the non-anonymized version so we
can directly operate on the original text.

1We set τ = 20 empirically according to the model per-
formance on the development set.

2https://github.com/abisee/cnn-dailymail



659

CNN/Daily Mail Training Dev Test

#(Document) 287,227 13,368 11,490
#(Ref / Document) 1 1 1
Doc Len (Sentence) 31.58 26.72 27.05
Doc Len (Word) 791.36 769.26 778.24
Ref Len (Sentence) 3.79 4.11 3.88
Ref Len (Word) 55.17 61.43 58.31

Table 1: Data statistics of CNN/Daily Mail dataset.

5.2 Implementation Details

Model Parameters The vocabulary is collected
from the CNN/Daily Mail training data. We lower-
case the text and there are 732,304 unique word
types. We use the top 100,000 words as the model
vocabulary since they can cover 98.23% of the
training data. The size of word embedding, sen-
tence level encoder GRU, document level encoder
GRU are set to 50, 256, and 256 respectively. We
set the sentence extractor GRU hidden size to 256.

Model Training We initialize the model param-
eters randomly using a Gaussian distribution with
Xavier scheme (Glorot and Bengio, 2010). The
word embedding matrix is initialized using pre-
trained 50-dimension GloVe vectors (Pennington
et al., 2014)3. We found that larger size GloVe
does not lead to improvement. Therefore, we use
50-dim word embeddings for fast training. The
pre-trained GloVe vectors contain 400,000 words
and cover 90.39% of our model vocabulary. We
initialize the rest of the word embeddings ran-
domly using a Gaussian distribution with Xavier
scheme. The word embedding matrix is not up-
dated during training. We use Adam (Kingma and
Ba, 2015) as our optimizing algorithm. For the
hyperparameters of Adam optimizer, we set the
learning rate α = 0.001, two momentum param-
eters β1 = 0.9 and β2 = 0.999 respectively, and
� = 10−8. We also apply gradient clipping (Pas-
canu et al., 2013) with range [−5, 5] during train-
ing. We use dropout (Srivastava et al., 2014) as
regularization with probability p = 0.3 after the
sentence level encoder and p = 0.2 after the doc-
ument level encoder. We truncate each article to
80 sentences and each sentence to 100 words dur-
ing both training and testing. The model is imple-
mented with PyTorch (Paszke et al., 2017). We

3https://nlp.stanford.edu/projects/
glove/

release the source code and related resources at
https://res.qyzhou.me.

Model Testing At test time, considering that
LEAD3 is a commonly used and strong extractive
baseline, we make NEUSUM and the baselines ex-
tract 3 sentences to make them all comparable.

5.3 Baseline

We compare NEUSUM model with the following
state-of-the-art baselines:

LEAD3 The commonly used baseline by select-
ing the first three sentences as the summary.

TEXTRANK An unsupervised algorithm based
on weighted-graphs proposed by Mihalcea
and Tarau (2004). We use the implementa-
tion in Gensim (Řehůřek and Sojka, 2010).

CRSUM Ren et al. (2017) propose an extractive
summarization system which considers the
contextual information of a sentence. We
train this baseline model with the same train-
ing data as our approach.

NN-SE Cheng and Lapata (2016) propose an ex-
tractive system which models document sum-
marization as a sequence labeling task. We
train this baseline model with the same train-
ing data as our approach.

SUMMARUNNER Nallapati et al. (2017) propose
to add some interpretable features such as
sentence absolute and relative positions.

PGN Pointer-Generator Network (PGN). A state-
of-the-art abstractive document summariza-
tion system proposed by See et al. (2017),
which incorporates copying and coverage
mechanisms.

5.4 Evaluation Metric

We employ ROUGE (Lin, 2004) as our evaluation
metric. ROUGE measures the quality of summary
by computing overlapping lexical units, such as
unigram, bigram, trigram, and longest common
subsequence (LCS). It has become the standard
evaluation metric for DUC shared tasks and pop-
ular for summarization evaluation. Following pre-
vious work, we use ROUGE-1 (unigram), ROUGE-
2 (bigram) and ROUGE-L (LCS) as the evaluation
metrics in the reported experimental results.

https://nlp.stanford.edu/projects/glove/
https://nlp.stanford.edu/projects/glove/
https://res.qyzhou.me


660

5.5 Results

We use the official ROUGE script4 (version 1.5.5)
to evaluate the summarization output. Table 2
summarizes the results on CNN/Daily Mail data
set using full length ROUGE-F15 evaluation. It in-
cludes two unsupervised baselines, LEAD3 and
TEXTRANK. The table also includes three state-
of-the-art neural network based extractive models,
i.e., CRSUM, NN-SE and SUMMARUNNER. In
addition, we report the state-of-the-art abstractive
PGN model. The result of SUMMARUNNER is on
the anonymized dataset and not strictly compara-
ble to our results on the non-anonymized version
dataset. Therefore, we also include the result of
LEAD3 on the anonymized dataset as a reference.

Models ROUGE-1 ROUGE-2 ROUGE-L

LEAD3 40.24- 17.70- 36.45-

TEXTRANK 40.20- 17.56- 36.44-

CRSUM 40.52- 18.08- 36.81-

NN-SE 41.13- 18.59- 37.40-

PGN‡ 39.53- 17.28- 36.38-

LEAD3‡ * 39.2 15.7 35.5
SUMMARUNNER‡ * 39.6 16.2 35.3
NEUSUM 41.59 19.01 37.98

Table 2: Full length ROUGE F1 evaluation (%)
on CNN/Daily Mail test set. Results with ‡ mark
are taken from the corresponding papers. Those
marked with * were trained and evaluated on the
anonymized dataset, and so are not strictly com-
parable to our results on the original text. All our
ROUGE scores have a 95% confidence interval of
at most ±0.22 as reported by the official ROUGE
script. The improvement is statistically significant
with respect to the results with superscript - mark.

NEUSUM achieves 19.01 ROUGE-2 F1 score on
the CNN/Daily Mail dataset. Compared to the un-
supervised baseline methods, NEUSUM performs
better by a large margin. In terms of ROUGE-
2 F1, NEUSUM outperforms the strong baseline
LEAD3 by 1.31 points. NEUSUM also outper-
forms the neural network based models. Com-
pared to the state-of-the-art extractive model NN-
SE (Cheng and Lapata, 2016), NEUSUM performs
significantly better in terms of ROUGE-1, ROUGE-
2 and ROUGE-L F1 scores. Shallow features, such

4http://www.berouge.com/
5The ROUGE evaluation option is, -m -n 2

as sentence position, have proven effective in doc-
ument summarization (Ren et al., 2017; Nallapati
et al., 2017). Without any hand-crafted features,
NEUSUM performs better than the CRSUM and
SUMMARUNNER baseline models with features.
As given by the 95% confidence interval in the of-
ficial ROUGE script, our model achieves statisti-
cally significant improvements over all the base-
line models. To the best of our knowledge, the pro-
posed NEUSUM model achieves the best results on
the CNN/Daily Mail dataset.

Models Info Rdnd Overall

NN-SE 1.36 1.29 1.39
NEUSUM 1.33 1.21 1.34

Table 3: Rankings of NEUSUM and NN-SE
in terms of informativeness (Info), redundancy
(Rdnd) and overall quality by human participants
(lower is better).

We also provide human evaluation results on a
sample of test set. We random sample 50 docu-
ments and ask three volunteers to evaluate the out-
put of NEUSUM and the NN-SE baseline models.
They are asked to rank the output summaries from
best to worst (with ties allowed) regarding infor-
mativeness, redundancy and overall quality. Table
3 shows the human evaluation results. NEUSUM
performs better than the NN-SE baseline on all
three aspects, especially in redundancy. This in-
dicates that by jointly scoring and selecting sen-
tences, NEUSUM can produce summary with less
content overlap since it re-estimates the saliency
of remaining sentences considering both their con-
tents and previously selected sentences.

6 Discussion

6.1 Precision at Step-t
We analyze the accuracy of sentence selection at
each step. Since we extract 3 sentences at test
time, we show how NEUSUM performs when ex-
tracting each sentence. Given a document D in
test set T, NEUSUM predicted summary S, its
reference summary S∗, and the extractive oracle
summary O with respect to D and S∗ (we use the
method described in section 5.1 to construct O),
we define the precision at step t as p(@t):

p(@t) =
1

|T|
∑

D∈T
1O(S[t]) (21)

http://www.berouge.com/


661

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 300

10

20

30
%

 o
f s

en
te

nc
e 

po
sit

io
n NN-SE

NeuSum
oracle

Figure 2: Position distribution of selected sentences of the NN-SE baseline, our NEUSUM model and
oracle on the test set. We only draw the first 30 sentences since the average document length is 27.05.

where S[t] is the sentence extracted at step t, and
1O is the indicator function defined as:

1O(x) =

{
1 if x ∈ O
0 if x /∈ O

(22)

p(@1) p(@2) p(@3)0.20

0.25

0.30

0.35

0.40

0.45

Pr
ec

isi
on

NN-SE
NeuSum

Figure 3: Precision of extracted sentence at step t
of the NN-SE baseline and the NEUSUM model.

Figure 3 shows the precision at step t of NN-SE
baseline and our NEUSUM. It can be observed that
NEUSUM achieves better precision than the NN-
SE baseline at each step. For the first sentence,
both NEUSUM and NN-SE achieves good perfor-
mance. The NN-SE baseline has 39.18% preci-
sion at the first step, and NEUSUM outperforms
it by 1.2 points. At the second step, NEUSUM
outperforms NN-SE by a large margin. In this
step, the NEUSUM model extracts 31.52% sen-
tences correctly, which is 3.24 percent higher than
28.28% of NN-SE. We think the second step se-
lection benefits from the first step in NEUSUM
since it can remember the selection history, while
the separated models lack this ability.

However, we can notice the trend that the pre-
cision drops fast after each selection. We think
this is due to two main reasons. First, we think
that the error propagation leads to worse selection

for the third selection. As shown in Figure 2, the
p(@1) and p(@2) are 40.38% and 31.52% respec-
tively, so the history is less reliable for the third
selection. Second, intuitively, we think the later
selections are more difficult compared to the pre-
vious ones since the most important sentences are
already selected.

6.2 Position of Selected Sentences

Early works (Ren et al., 2017; Nallapati et al.,
2017) have shown that sentence position is an im-
portant feature in extractive document summariza-
tion. Figure 2 shows the position distributions of
the NN-SE baseline, our NEUSUM model and or-
acle on the CNN/Daily Mail test set. It can be seen
that the NN-SE baseline model tends to extract
large amount of leading sentences, especially the
leading three sentences. According to the statis-
tics, about 80.91% sentences selected by NN-SE
baseline are in leading three sentences.

In the meanwhile, our NEUSUM model selects
58.64% leading three sentences. We can notice
that in the oracle, the percentage of selecting lead-
ing sentences (sentence 1 to 5) is moderate, which
is around 10%. Compared to NN-SE, the posi-
tion of selected sentences in NEUSUM is closer to
the oracle. Although NEUSUM also extracts more
leading sentences than the oracle, it selects more
tailing ones. For example, our NEUSUM model
extracts more than 30% of sentences in the range
of sentence 4 to 6. In the range of sentence 7
to 13, NN-SE barely extracts any sentences, but
our NEUSUM model still extract sentences in this
range. Therefore, we think this is one of the rea-
sons why NEUSUM performs better than NN-SE.

We analyze the sentence position distribution
and offer an explanation for these observations.



662

Intuitively, leading sentences are important for a
well-organized article, especially for newswire ar-
ticles. It is also well known that LEAD3 is a very
strong baseline. In the training data, we found that
50.98% sentences labeled as “should be extracted”
belongs to the first 5 sentences, which may cause
the trained model tends to select more leading sen-
tences. One possible situation is that one sentence
in the tail of a document is more important than the
leading sentences, but the margin between them is
not large enough. The models which separately
score and select sentences might not select sen-
tences in the tail whose scores are not higher than
the leading ones. These methods may choose the
safer leading sentences as a fallback in such con-
fusing situation because there is no direct competi-
tion between the leading and tailing candidates. In
our NEUSUM model, the scoring and selection are
jointly learned, and at each step the tailing candi-
dates can compete directly with the leading ones.
Therefore, NEUSUM can be more discriminating
when dealing with this situation.

7 Conclusion

Conventional approaches to extractive document
summarization contain two separated steps: sen-
tence scoring and sentence selection. In this pa-
per, we present a novel neural network frame-
work for extractive document summarization by
jointly learning to score and select sentences to ad-
dress this issue. The most distinguishing feature
of our approach from previous methods is that it
combines sentence scoring and selection into one
phase. Every time it selects a sentence, it scores
the sentences according to the partial output sum-
mary and current extraction state. ROUGE evalua-
tion results show that the proposed joint sentence
scoring and selection approach significantly out-
performs previous separated methods.

Acknowledgments

We thank three anonymous reviewers for their
helpful comments. We also thank Danqing Huang,
Chuanqi Tan, Zhirui Zhang, Shuangzhi Wu and
Wei Jia for helpful discussions. The work of
this paper is funded by the project of National
Key Research and Development Program of China
(No. 2017YFB1002102) and the project of Na-
tional Natural Science Foundation of China (No.
91520204). The first author is funded by the
Harbin Institute of Technology Scholarship Fund.

References
Ziqiang Cao, Furu Wei, Li Dong, Sujian Li, and Ming

Zhou. 2015a. Ranking with recursive neural net-
works and its application to multi-document sum-
marization. In AAAI, pages 2153–2159.

Ziqiang Cao, Furu Wei, Sujian Li, Wenjie Li, Ming
Zhou, and WANG Houfeng. 2015b. Learning sum-
mary prior representation for extractive summariza-
tion. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Linguistics
and the 7th International Joint Conference on Natu-
ral Language Processing (Volume 2: Short Papers),
volume 2, pages 829–833.

Jaime Carbonell and Jade Goldstein. 1998. The use of
mmr, diversity-based reranking for reordering doc-
uments and producing summaries. In Proceedings
of the 21st annual international ACM SIGIR confer-
ence on Research and development in information
retrieval, pages 335–336. ACM.

Jianpeng Cheng and Mirella Lapata. 2016. Neural
summarization by extracting sentences and words.
In Proceedings of the 54th Annual Meeting of the
Association for Computational Linguistics (Volume
1: Long Papers), pages 484–494, Berlin, Germany.
Association for Computational Linguistics.

Kyunghyun Cho, Bart van Merrienboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder–decoder
for statistical machine translation. In Proceedings of
EMNLP 2014, pages 1724–1734, Doha, Qatar. As-
sociation for Computational Linguistics.

John M Conroy and Dianne P O’leary. 2001. Text sum-
marization via hidden markov models. In Proceed-
ings of the 24th annual international ACM SIGIR
conference on Research and development in infor-
mation retrieval, pages 406–407. ACM.

Günes Erkan and Dragomir R Radev. 2004. Lexrank:
Graph-based lexical centrality as salience in text
summarization. Journal of Artificial Intelligence
Research, 22:457–479.

Dan Gillick and Benoit Favre. 2009. A scalable global
model for summarization. In Proceedings of the
Workshop on Integer Linear Programming for Natu-
ral Langauge Processing, pages 10–18. Association
for Computational Linguistics.

Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difficulty of training deep feedforward neural
networks. In Aistats, volume 9, pages 249–256.

Karl Moritz Hermann, Tomas Kocisky, Edward
Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su-
leyman, and Phil Blunsom. 2015. Teaching ma-
chines to read and comprehend. In Advances in Neu-
ral Information Processing Systems, pages 1693–
1701.



663

Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. 2015.
Distilling the knowledge in a neural network. arXiv
preprint arXiv:1503.02531.

Eduard Hovy and Chin-Yew Lin. 1998. Automated text
summarization and the summarist system. In Pro-
ceedings of a workshop on held at Baltimore, Mary-
land: October 13-15, 1998, pages 197–214. Associ-
ation for Computational Linguistics.

Hakan Inan, Khashayar Khosravi, and Richard Socher.
2017. Tying word vectors and word classifiers: A
loss framework for language modeling. In Proceed-
ings of 5th International Conference for Learning
Representations.

Diederik Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In Proceedings
of 3rd International Conference for Learning Repre-
sentations, San Diego.

Julian Kupiec, Jan Pedersen, and Francine Chen. 1995.
A trainable document summarizer. In Proceedings
of the 18th annual international ACM SIGIR confer-
ence on Research and development in information
retrieval, pages 68–73. ACM.

Chin-Yew Lin. 2004. Rouge: A package for auto-
matic evaluation of summaries. In Text summariza-
tion branches out: Proceedings of the ACL-04 work-
shop, volume 8. Barcelona, Spain.

Hui Lin and Jeff Bilmes. 2011. A class of submodu-
lar functions for document summarization. In Pro-
ceedings of the 49th Annual Meeting of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies-Volume 1, pages 510–520. As-
sociation for Computational Linguistics.

Hans Peter Luhn. 1958. The automatic creation of lit-
erature abstracts. IBM Journal of research and de-
velopment, 2(2):159–165.

Ryan McDonald. 2007. A study of global inference al-
gorithms in multi-document summarization. In Eu-
ropean Conference on Information Retrieval, pages
557–564. Springer.

Rada Mihalcea and Paul Tarau. 2004. Textrank: Bring-
ing order into text. In Proceedings of the 2004 con-
ference on empirical methods in natural language
processing.

Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017.
Summarunner: A recurrent neural network based se-
quence model for extractive summarization of docu-
ments. In AAAI, pages 3075–3081.

Ramesh Nallapati, Bowen Zhou, Ça glar Gulçehre,
and Bing Xiang. 2016. Abstractive text summariza-
tion using sequence-to-sequence rnns and beyond.
In Proceedings of The 20th SIGNLL Conference on
Computational Natural Language Learning.

Ani Nenkova and Kathleen McKeown. 2011. Auto-
matic summarization. Foundations and Trends R© in
Information Retrieval, 5(2–3):103–233.

Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio.
2013. On the difficulty of training recurrent neural
networks. ICML (3), 28:1310–1318.

Adam Paszke, Sam Gross, Soumith Chintala, Gre-
gory Chanan, Edward Yang, Zachary DeVito, Zem-
ing Lin, Alban Desmaison, Luca Antiga, and Adam
Lerer. 2017. Automatic differentiation in pytorch.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors for
word representation. In Empirical Methods in Nat-
ural Language Processing (EMNLP), pages 1532–
1543.

Radim Řehůřek and Petr Sojka. 2010. Software Frame-
work for Topic Modelling with Large Corpora. In
Proceedings of the LREC 2010 Workshop on New
Challenges for NLP Frameworks, pages 45–50, Val-
letta, Malta. ELRA.

Pengjie Ren, Zhumin Chen, Zhaochun Ren, Furu Wei,
Jun Ma, and Maarten de Rijke. 2017. Leveraging
contextual sentence relations for extractive summa-
rization using a neural attention model. In Pro-
ceedings of the 40th International ACM SIGIR Con-
ference on Research and Development in Informa-
tion Retrieval, pages 95–104, New York, NY, USA.
ACM.

Pengjie Ren, Furu Wei, CHEN Zhumin, MA Jun, and
Ming Zhou. 2016. A redundancy-aware sentence
regression framework for extractive summarization.
In Proceedings of COLING 2016, the 26th Inter-
national Conference on Computational Linguistics:
Technical Papers, pages 33–43.

Abigail See, Peter J. Liu, and Christopher D. Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1073–
1083, Vancouver, Canada. Association for Compu-
tational Linguistics.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. Journal of Machine Learning Re-
search, 15(1):1929–1958.

Xiaojun Wan and Jianwu Yang. 2006. Improved affin-
ity graph based multi-document summarization. In
Proceedings of the human language technology con-
ference of the NAACL, Companion volume: Short
papers, pages 181–184. Association for Computa-
tional Linguistics.


