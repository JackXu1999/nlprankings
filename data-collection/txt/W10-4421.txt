




































Automated Extraction of Tree Adjoining Grammars

from a Treebank for Vietnamese

Phuong Le-Hong1,2, Thi Minh Huyen Nguyen2, Phuong Thai Nguyen2, Azim Roussanaly1

1 LORIA, Nancy, France, 2 Vietnam National University, Hanoi, Vietnam

{lehong,azim}@loria.fr, huyenntm@hus.edu.vn, thainp@vnu.edu.vn

Abstract

In this paper, we present a system that au-

tomatically extracts lexicalized tree adjoining

grammars (LTAG) from treebanks. We first

discuss in detail extraction algorithms and

compare them to previous works. We then

report the first LTAG extraction result for

Vietnamese, using a recently released Viet-

namese treebank. The implementation of an

open source and language independent system

for automatic extraction of LTAG grammars is

also discussed.

1 Introduction

Grammars in general and lexicalized tree adjoin-

ing grammars in particular are one of the most im-

portant elements in the natural language process-

ing (NLP). Since the development of hand-crafted

grammars is a time consuming and labor intensive

task, many studies on automatic and semi-automatic

grammar development have been carried out during

last decades.

After decades of research in NLP mostly concen-

trated on English and other well-studied languages,

recent years have seen an increased interest in less

common languages, notably because of their grow-

ing presence on the Internet. Vietnamese, which be-

longs to the top 20 most spoken languages, is one

of those new focuses of interest. Obstacles remain,

however, for NLP research in general and grammar

development in particular: Vietnamese does not yet

have vast and readily available constructed linguis-

tic resources upon which to build effective statisti-

cal models, nor reference works against which new

ideas may be experimented.

Moreover, most existing research so far has been

focused on testing the applicability of existing meth-

ods and tools developed for English or other West-

ern languages, under the assumption that their logi-

cal or statistical well-foundedness guarantees cross-

language validity, while in fact assumptions about

the structure of a language are always made in such

tools, and must be amended to adapt them to differ-

ent linguistic phenomena. For an isolating language

such as Vietnamese, techniques developed for flex-

ional languages cannot be applied “as is”.

The primary motivation to develop a system that

can automatically extract an LTAG grammar for the

Vietnamese language is the need of a rich statisti-

cal information and wide-coverage grammar which

may contribute more effectively in the development

of basic linguistic resources and tools for automatic

processing of Vietnamese text.

We present in this article a system that automat-

ically extracts lexicalized tree adjoining grammars

from treebanks. We first discuss in detail the ex-

traction algorithms and compare them to previous

works. We then report the first LTAG extraction re-

sult for Vietnamese, using the recently released Viet-

namese treebank. The implementation of an open

source and language independent system for auto-

matic extraction of LTAG grammars from treebanks

is also discussed.

Automated Extraction of Tree Adjoining Grammars from a Treebank for Vietnamese

165



2 Previous works on extracting grammars

from treebanks

There has been much work done on extracting tree-

bank grammars in general and LTAG grammars

in particular from annotated corpora, all of these

works are for common languages. Xia developed

the uniform method of grammar extraction for En-

glish, Chinese and Korean (Xia et al., 2000; Xia,

2001). Chiang developed a system for extracting an

LTAG grammar from English Penn Treebank and

used it for statistical parsing with LTAG (Chiang,

2000). Chen extracted TAGs from English Penn

Treebank (Chen and Vijay-Shanker, 2000; Chen et

al., 2006) and there are other works based on Chen’s

approach such as Johansen (Johansen, 2004) and

Nasr (Nasr, 2004) for French, and Habash for Ara-

bic (Habash and Rambow, 2004). Neumann ex-

tracted lexicalized tree grammars for English from

English Penn Treebank and for German from NE-

GRA treebank (Neumann, 2003). Bäcker extracted

an LTAG gramar for German, also from the NEGRA

corpus and used it for supertagging (Bäcker and Har-

busch, 2002). Park extracted LTAG grammars for

Korean from Korean Sejong Treebank (Park, 2006).

3 Vietnamese treebank

Recently, a group of Vietnamese computational lin-

guists has been involved in developing a treebank for

Vietnamese (Nguyen et al., 2009), and it is also the

first treebank on which our extraction system was

used.

The construction of a Vietnamese treebank is a

branch project of a national project which aims to

develop basic resources and tools for Vietnamese

language and speech processing1 . The raw texts of

the treebank are collected from the social and polit-

ical sections of the Youth online daily newspaper.

The corpus is divided into three sets correspond-

ing to three annotation levels: word-segmented,

POS-tagged and syntax-annotated set. The syntax-

annotated corpus, a subset of the POS-tagged one, is

currently composed of 10, 471 sentences (225, 085
tokens). Sentences range from 2 to 105 words, with
an average length of 21.75 words. There are 9, 314
sentences of length 40 words or less. The tagset

1Project “Vietnamese Language and Speech Processing”

No. Category Description

1. S simple declarative clause

2. VP verb phrase

3. NP noun phrase

4. PP preposition phrase

5. N common noun

6. V verb

7. P pronoun

8. R adverb

9. E preposition

10. CC coordinating conjunction

Table 1: Treebank tags in examples.

of the treebank has 38 syntactic labels (18 part-of-
speech tags, 17 syntactic category tags, 3 empty cat-
egories) and 17 function tags. For details, please re-

fer to (Nguyen et al., 2009).

The meanings of the tags that appear in this paper

are listed in Table 1.

4 Extraction algorithms

In general, our work on extracting an LTAG gram-

mar for Vietnamese follows closely the method of

grammar extraction originally proposed by Xia (Xia,

2001). The extraction process has three steps: first,

phrase-structure trees are converted into LTAG de-

rived trees; second, the derived trees are decom-

posed into a set of elementary trees conforming to

their three predefined prototypes; and third, invalid

extracted elementary trees are filtered out using lin-

guistic knowledge.

4.1 Building LTAG derived trees

The phrase structures in the Vietnamese treebank

follow the English Penn Treebank bracketed style

format which are not based on the LTAG formalism.

They may have different formats from the LTAG

derived trees which distinguish heads, arguments

and adjuncts. Therefore, we first have to convert the

phrase structures of the treebank into derived trees.

In this step, we first classify each node in a phrase-

structure tree into three types, head, argument or

modifier, and then build a derived tree by adding

intermediate nodes so that at each level of the tree,

the nodes satisfy exactly one of the following rela-

tions (Xia, 2001):

• predicate-argument relation: there are one or

Phuong Le Hong, Thi Minh Huyen Nguyen, Phuong-Thai Nguyen, Azim Roussanaly

166



T

X1 c1 X2 c2 X3

⇒ T

X1 c1 T
∗

X2 c2 X3

Figure 1: Conjunction groups transformation by Al-

gorithm 1.

more nodes, one is the head, the rest are its ar-

guments;

• modification relation: there are exactly two
nodes, one node is modified by the other;

• coordination relation: there are exactly three
nodes, in which two nodes are coordinated by

a conjunction.

In order to find heads of phrases, we have con-

structed a head percolation table (Magerman, 1995;
Collins, 1997) for the Vietnamese treebank. This ta-

ble is used to select the head child of a node. In addi-

tion, we have also constructed an argument table to
determine the types of arguments that a head child

can take. The argument table helps explicitly mark

each sibling of a head child as either an argument or

an adjunct according to the tag of the sibling, the tag

of the head child, and the position of the sibling with

respect to the head child. Together with the tagset
table, these three tables constitute the Vietnamese
treebank-specific information that is required for the

extraction algorithms2.

Since the conjunction structures are different from

the argument and modifier structures, we first recur-

sively bracket all conjunction groups of a treebank

tree by Algorithm 1 and then build the full derived

tree for the resulting tree by Algorithm 2.

Figure 1 shows a tree with conjunction groups be-

fore and after being processed by Algorithm 1 where

ci are coordinating conjunctions and Xi are conjunc-
tion groups. Figure 2 shows a realisation of Algo-

rithm 2 where Ai are arguments of the head child H
of T and Mi are modifiers of H .

These two algorithms use the function INSERT-

NODE(T,L) shown in Algorithm 3 to insert an inter-
mediate node between a node T and a list of its child

2To our best knowledge, this is the first time such tables are

published for the Vietnamese treebank.

Algorithm 1 PROCESS-CONJ(T )

Require: A tree T
Ensure: T with conjunctions processed

1: for K ∈ T.kids do
2: if IS-PHRASAL(K) then
3: K ← PROCESS-CONJ(K);
4: end if

5: end for

6: (C1, . . . , Ck)← CONJ-GROUPS(T.kids);
7: for i = 1 to k do
8: if ‖Ci‖ > 1 then
9: INSERT-NODE(T, Ci);

10: end if

11: end for

12: if k > 2 then
13: for i = k downto 3 do
14: L ← Ci−1 ∪ ci−1 ∪ Ci;
15: T ∗ ← INSERT-NODE(T,L);
16: Ci−1 ← T ∗;
17: end for

18: end if

19: return T ;

nodes L. This new node is a child of T , has the same
label as T and has L as the list of its kids. The func-
tion CONJ-GROUPS(L) returns k groups of compo-
nents Ci of L which are separated by k− 1 conjunc-
tions c1, . . . , ck−1. The function NEW-NODE(l) re-
turns a new node with label l.

The Algorithm 2 uses several functions that

are relatively self-explained. The function HEAD-

CHILD(X) selects the head child of a node X ac-
cording to a head percolation table. The head per-

colation table for the Vietnamese treebank is shown

in the Table 4. The function IS-LEAF(X) checks
whether a node X is a leaf node or not. The func-
tion IS-PHRASAL(X) checks whether X is a phrasal
node or not.3 The function ARG-NODES(H,L) (re-
spectively, MOD-NODES(H,L)) returns a list of
nodes which are arguments (respectively modifiers)

of a node H . The list L contains all sisters of H .
For example, Figure 3 shows the phrase structure

of a sentence extracted from the Vietnamese tree-

bank “Họ sẽ không chuyển hàng xuống thuyền vào

3A phrasal node is defined to be a node which is not a leaf

or a preterminal. This means that it must have two or more chil-

dren, or one child that is not a leaf.

Automated Extraction of Tree Adjoining Grammars from a Treebank for Vietnamese

167



Algorithm 2 BUILD-DERIVED-TREE(T )

Require: A tree T whose conjunctions have been
processed

Ensure: A derived tree whose root is T
1: if (not IS-PHRASAL(T )) then
2: return T ;
3: end if

4: H ← HEAD-CHILD(T );
5: if not IS-LEAF(H) then
6: for K ∈ T.kids do
7: K ← BUILD-DERIVED-TREE(K);
8: end for

9: A ← ARG-NODES(H,L);
10: M← MOD-NODES(H,L);
11: m← ‖M‖;
12: if m > 0 then
13: L ← {H} ∪ A;
14: T ∗ ← INSERT-NODE(T,L);
15: end if

16: (M1,M2, . . . ,Mm)←M;
17: for i = 1 to m− 1 do
18: L ← {Mi, T ∗};
19: T ′ ← INSERT-NODE(T,L);
20: T ∗ ← T ′;
21: end for

22: end if

23: return T ;

ngày mai.”4 The head children of phrases are circled.

The derived tree of the sentence given by Algo-

rithm 2 is shown in Figure 4, the inserted nodes are

squared.

4.2 Building elementary trees

At this step, each derived tree is decomposed into a

set of elementary trees. The recursive structures of

the derived tree are factored out and will become

auxiliary trees, the remaining non-recursive struc-

tures will be extracted as initial trees.

Extracted elementary trees fall into one of three

prototypes according to the relation between the an-

chor and other nodes, as shown in Figure 5.

The extraction process involves copying nodes

from the derived tree for building elementary trees.

The result of extraction process is three sets of el-

4They will not deliver the goods to the boat tomorrow.

Algorithm 3 INSERT-NODE(T,L)
Require: A tree T and its children list L
Ensure: A new child node T ∗ of T whose kids are
L

1: T ∗ ← NEW-NODE(T.label);
2: T ∗.kids← L;
3: T.kids← T.kids \ L;
4: T.kids← T.kids ∪ {T ∗};
5: return T ∗;

T

H A1 A2 M1 M2

⇒ T

T ∗ M2

T ∗ M1

H A1 A2

Figure 2: An example of derived tree realisation

ementary trees: S contains spine trees, M contains
modifier trees and C contains conjunction trees.

To build elementary trees from a derived tree T ,
we first find the head path5 {H0,H1, . . . ,Hn} of
T . For each parent P and its head child H , we get
the list L of sisters of H and determine the relation
between H and L. If the relation is coordination,
a conjunction tree will be extracted; if the relation

is modification, a modifier tree will be extracted;

otherwise, the relation is predicate-argument and a

spine tree will be extracted. Algorithm 4 shows the

extraction algorithm.

Algorithm 5 shows the function for building a

spine tree. The function MERGE-LINK-NODES(T )
merges all link nodes of a spine tree into one node

(see Figure 7). Algorithms 6 and 7 are functions

which respectively build modifier and conjunction

trees.

For example, from the derived tree shown in Fig-

ure 4, 9 trees are extracted by algorithms as shown

in Figure 6 and Figure 7.

5A head path starting from a node T in a derived tree is the
unique path from T to a leaf node where each node except T is

the head child of its parents. Here H0 ≡ T and Hj is the parent
of its head child Hj+1. A node on the head path is called a link
node if its label is the same as that of its parent.

Phuong Le Hong, Thi Minh Huyen Nguyen, Phuong-Thai Nguyen, Azim Roussanaly

168



S

NP VP

P R R V NP PP PP-TMP

Họ

They

sẽ

will

không

not

chuyển

deliver

N E NP E NP

hàng

goods

xuống

to

N vào N

thuyền

boat

ngày mai

tomorrow

Figure 3: A treebank tree.

S

NP VP

P R VP

Họ sẽ R VP

không VP PP-TMP

V NP PP E NP

chuyển N E NP vào N

hàngxuống N ngày mai

thuyền

Figure 4: The derived tree of the treebank tree in

Figure 3.

4.3 Filtering out invalid trees

Annotation errors are inevitable for any treebank.

The errors in parse trees will result in wrong ele-

mentary trees. An elementary tree is called invalid

if it does not satisfy some linguistic requirement.

We have construct some linguistic rules for filtering

out invalid elementary trees. For example in Viet-

namese, an adjective (or an adjectival phrase) can be

an argument of a noun (or a noun phrase), however,

they must be always on the right of the noun. Thus

if there is an adjective on the left of a noun of an ex-

tracted spine tree, the tree is invalid and it must be

filtered out.

Xm

Y↓Xm−1

X1

X Z↓

anchor

W

W∗ Xm

Y↓Xm−1

X1

X Z↓

anchor

X

X CC X∗

anchor

Figure 5: Prototypes of spine trees (predicate-

argument relation) and auxiliary trees (modification

and coordination relation).

NP

P

Họ

NP

N

hàng

NP

N

ngày mai

NP

N

thuyền

VP

R VP∗

sẽ

VP

R VP∗

không

PP

E NP↓

xuống

VP

VP∗ PP

E NP↓

vào

Figure 6: Extracted elementary trees.

4.4 Comparison with previous work

As mentioned above, our approach for LTAG ex-

traction follows the uniform method of grammar ex-

traction proposed by Xia (Xia, 2001). Nevertheless,

there are some differences between our design and

implementation of extraction algorithms and that of

Xia.

First, in the building derived tree step, we first re-

cursively bracket all conjunction groups of the tree

before fully bracketing the arguments and modifiers

of the resulting tree. We think that this approach is

easier to understand and implement since conjunc-

tion structures are different from argument and mod-

ifier structures. Second, in the elementary tree de-

composition step, we do not split each node in the

derived tree into the top and bottom parts as it was

done in the approach of Xia. In our implementation,

the nodes are directly copied to build extracted trees.

Third, the tree extraction process is broken into func-

Automated Extraction of Tree Adjoining Grammars from a Treebank for Vietnamese

169



Algorithm 4 BUILD-ELEMENTARY-TREES(T )

Require: T is a derived tree
Ensure: Sets S,M, C of elementary trees.

1: if (not IS-PHRASAL(T )) then
2: return ;

3: end if

4: {H0,H1, . . . ,Hn} ← HEAD-PATH(T );
5: ok ← false;
6: P ← H0;
7: for j ← 1 to n do
8: L ← SISTERS(Hj);
9: if |L| > 0 then

10: Rel← GET-RELATION(Hj ,L);
11: if Rel = Coordination then
12: C ← C ∪ BUILD-CONJ-TREE(P );
13: end if

14: if Rel = Modification then
15: M←M∪ BUILD-MOD-TREE(P );
16: if j = 1 then
17: S ← S ∪ BUILD-SPINE-TREE(P );
18: ok ← true;
19: end if

20: end if

21: if Rel = Argument then
22: if not ok and not IS-LINK-NODE(P )

then

23: S ← S ∪ BUILD-SPINE-TREE(P );
24: ok ← true;
25: end if

26: end if

27: else

28: if not IS-LINK-NODE(P ) and IS-
PHRASAL(P ) then

29: S ← S ∪ BUILD-SPINE-TREE(P );
30: end if

31: end if

32: P ← Hj;
33: end for

tions, each function builds a type of elementary trees

and they can be called mutually by each other to re-

peat the extraction process for the subtrees whose

roots are not yet visited. In spite of using recursive

functions, our extraction algorithms are carefully de-

signed so that there is no redundant or repeating

function calls: each node is assured to be visited one

time. The “divide and conquer” approach in algo-

Algorithm 5 BUILD-SPINE-TREE(T )

Require: T is a derived tree
Ensure: a spine tree

1: Tc ← COPY(T );
2: P ← Tc;
3: H ← NULL;
4: repeat

5: H ← HEAD-CHILD(P );
6: L ← SISTERS(H);
7: if |L| > 0 then
8: Rel← GET-RELATION(H,L);
9: if Rel = Argument then

10: for A ∈ L do
11: BUILD-ELEMENTARY-TREES(A);
12: A.kids← ∅;
13: A.type← Substitution;
14: end for

15: else

16: for A ∈ L do
17: P.kids← P.kids \A;
18: end for

19: end if

20: end if

21: P ← H;
22: until (H = NULL)
23: return MERGE-LINK-NODES(Tc );

Algorithm 6 BUILD-MOD-TREE(T )

Require: T is a derived tree
Ensure: a modifier tree

1: Tc ← COPY(T );
2: H ← HEAD-CHILD(Tc);
3: H.kids← ∅;
4: H.type← Foot;
5: M ← MODIFIER(H);
6: T ′ ← BUILD-SPINE-TREE(M);
7: if |M.kids| > 1 then
8: BUILD-ELEMENTARY-TREES(M );
9: end if

10: M ← T ′;
11: return Tc;

rithm design has been shown to be efficient and easy

to optimise.

Phuong Le Hong, Thi Minh Huyen Nguyen, Phuong-Thai Nguyen, Azim Roussanaly

170



S

NP VP

VP

VP

VP

V NP PP

chuyển

⇒ S

NP↓ VP

V NP↓ PP↓

chuyển

Figure 7: Merge link nodes to get a spine tree. The

head path of the tree is marked by double lines.

Algorithm 7 BUILD-CONJ-TREE(T )

Require: T is a derived tree
Ensure: a conjunction tree

1: Tc ← COPY(T );
2: H ← HEAD-CHILD(Tc);
3: BUILD-ELEMENTARY-TREES(H);
4: K ← COORDINATOR(H);
5: BUILD-ELEMENTARY-TREES(K);
6: H.kids← ∅;
7: H.type← Foot;
8: K.kids← ∅;
9: K.type← Substitution;

10: return Tc;

Category Original

tags

Tags in G2

noun phrases NP/WHNP NP

adjective phrases AP/WHAP AP

adverbial phrases RP/WHRP RP

preposition phrases PP/WHPP PP

clauses S/SQ S

Table 2: Some tags in the Vietnamese treebank

tagset are merged into a single tag.

5 Experiments

We ran extraction algorithms on the Vietnamese

treebank and extracted two treebank grammars. The

first one, G1, uses the original tagset of the tree-
bank. The second one, G2, uses a reduced tagset,
where some tags in the treebank are merged into a

single tag, as shown in Table 2. The grammar G2 is
smaller than G1 and it is presumable that the sparse
data problem is less severe when G2 is used. Fur-
thermore, it was shown that the size of the extracted

grammar is important for Lightweight Dependency

Analysis (LDA) and supertagging (Bangalore and

Joshi, 1999).

We count the number of elementary trees and tree

templates. The sizes of the two grammars are in Ta-

ble 3. Recall that a template is an elementary tree

without the anchor word.

Type # of trees # of templates

G1 46,382 2,317

Spine trees 24, 973 1, 022
Modifier trees 21, 309 1, 223
Conjunction trees 100 72

G2 46,102 2,113

Spine trees 24, 884 952
Modifier trees 21, 121 1, 093
Conjunction trees 97 68

Table 3: Two LTAG grammars extracted from the

Vietnamese treebank.

There are 15, 035 unique words in the treebank
and the average number of elementary trees that a

word anchors is around 3.07. We also count the num-
ber of context-free rules of the grammars where the

rules are simply read off the templates in an ex-

tracted LTAG. The extracted grammar G1 and G2
respectively has 851 and 727 context-free rules.

Automated Extraction of Tree Adjoining Grammars from a Treebank for Vietnamese

171



In order to evaluate the coverage of the Viet-

namese treebank, we count the number of extracted

tree templates with respect to size of the treebank.

Figure 8 shows the number of templates converges

very slowly as the size of the corpus grows, implying

that there are many unseen templates. This experi-

ment also implies that the size of the current Viet-

namese treebank is not large enough to cover all the

grammatical templates of the Vietnamese language.

300

600

900

1200

1500

1800

2100

0 10 20 30 40 50 60 70 80 90 100

ut

ut

ut

ut

ut
ut

ut

ut
ut

bc
bc

bc
bc

bc bc
bc

bc
bc

ld
ld

ld
ld

ld
ld

ld
ld

ld

Figure 8: The growth of tree templates. The x axis
shows the percentage of the corpus used for extrac-

tion, the y axis shows the number of extracted tem-
plates (△), initial templates (o) and auxiliary tem-
plates (⋄).

We have developed a software package that im-

plements the presented algorithms for extracting an

LTAG for Vietnamese. The software is written in the

Java programming language and is freely distributed

under the GNU/GPL license6. The software is very

efficient in term of extraction speed: it takes only

165 seconds to extract the entire grammar G1 on an
ordinary personal computer. It is very easy to ex-

tend the software for use to extract LTAGs from tree-

banks of other languages since the language-specific

information is intensionally factored out of the gen-

eral framework. In order to use the software on a

treebank of a language, user needs to provide the

treebank-specific information for that language: a

tagset, a head percolation table, and an argument ta-

ble.

6http://www.loria.fr/∼lehong/tools/vnLExtractor.php

6 Conclusions

We have presented a system that automatically ex-

tracts LTAGs from treebanks. The system has been

used to extract an LTAG for the Vietnamese lan-

guage from the recently released Vietnamese tree-

bank. The extracted Vietnamese LTAG covers the

corpus, that is the corpus can be seen as a collection

of derived trees for the grammar and can be used to

train statistical LTAG parsers directly.

The number of templates extracted from the cur-

rent Vietnamese treebank converges slowly. This im-

plies that there are many new templates outside the

corpus and the current Vietnamese treebank is not

large or typical enough to cover all the grammatical

templates of the Vietnamese language.

Preliminary experimental parsing results using

the LLP2 LTAG parser (Crabbé et al., 2003) show

a high complexity of Vietnamese parsing in term

of number of parses produced. For example, a test

involving 70 sentences of length 15 words or less,
parsed using an extracted LTAG grammar gives an

average number of parses of 49.6 for a sentence, in
which 14 sentences having unique parse. In future

work, we plan to evaluate and extend the coverage

and performance of both the grammar and parser for

Vietnamese in greater detail.

We are currently experimenting the extraction of

a French LTAG from a French treebank (Abeillé et

al., 2003). We also plan to compare quantitatively

syntactic structures of French and Vietnamese. We

believe that a quantitative comparison of the two

grammars may reveal interesting relations between

them since, due to historical reason, by being in con-

tact with the French language, Vietnamese was en-

riched not only in vocabulary but also in syntax by

the calque of French grammar.

Acknowledgement

This work has been carried on in the framework, and

with the support of the project QT-09-01, Vietnam

National University of Hanoi.

References

Anne Abeillé, Lionel Clément, and François Toussenel.

2003. Building a treebank for French. In Treebanks:

Phuong Le Hong, Thi Minh Huyen Nguyen, Phuong-Thai Nguyen, Azim Roussanaly

172



Tags Direction Priority List

S Left S VP AP NP

SBAR Left SBAR S VP AP NP

SQ Left SQ VP AP NP

NP Left NP Nc Nu Np N P

VP Left VP V A AP N NP S

AP Left AP A N S

RP Right RP R T NP

PP Left PP E VP SBAR AP QP

QP Left QP M

XP Left XP X

YP Left YP Y

MDP Left MDP T I A P R X

WHNP Left WHNP NP Nc Nu Np N P

WHAP Left WHAP A N V P X

WHRP Left WHRP P E T X

WHPP Left WHPP E P X

WHXP Left XP X

Table 4: Head percolation rules for the Vietnamese

treebank.

Building and Using Parsed Corpora. Kluwer, Dor-
drecht.

Jens Bäcker and Karin Harbusch. 2002. Hidden Markov

model-based supertagging in a user-initiative dialogue

system. In Proceedings of TAG+6, pages 269–278,
Universita di Venezia.

Srinivas Bangalore and Aravind K. Joshi. 1999. Su-

pertagging: An approach to almost parsing. Compu-
tational Linguistics, 25(2):237–265.

John Chen and K. Vijay-Shanker. 2000. Automated ex-

traction of TAGs from the Penn treebank. In Proceed-
ings of the Sixth International Workshop on Parsing
Technologies.

John Chen, Srinivas Bangalore, and K. Vijay-Shanker.

2006. Automated extraction of tree-adjoining gram-

mars from treebanks. Natural Language Engineering,
12(3):251–299.

David Chiang. 2000. Statistical parsing with an

automatically-extracted tree adjoining grammar. In

ACL’00, pages 456–463, Morristown, NJ, USA.
Michael Collins. 1997. Three generative, lexicalised

models for statistical parsing. In Proceedings of ACL.
Benoı̂t Crabbé, Bertrand Gaiffe, and Azim Roussanaly.

2003. Représentation et gestion de grammaires

d’arbres adjoints lexicalisées. Traitement Automatique
des Langues, 44(3):67–91.

Nizar Habash and Owen Rambow. 2004. Extracting

a tree adjoining grammar from the Penn Arabic tree-

bank. In Proceedings of TALN’04, Morocco.

Ane-Dybro Johansen. 2004. Extraction des grammaires

LTAG à partir d’un corpus étiquetté syntaxiquement.

Master’s thesis, Université Paris 7.

David M. Magerman. 1995. Statistical decision tree

models for parsing. In Proceedings of ACL.
Alexis Nasr. 2004. Analyse syntaxique probabiliste

pour grammaires de dépendances extraites automa-
tiquement. Habilitation à diriger des recherches, Uni-
versité Paris 7.

Günter Neumann. 2003. A uniform method for auto-

matically extracting stochastic lexicalized tree gram-

mar from treebank and HPSG. In Treebanks: Building
and Using Parsed Corpora. Kluwer, Dordrecht.

Phuong Thai Nguyen, Luong Vu Xuan, Thi Minh Huyen

Nguyen, Van Hiep Nguyen, and Phuong Le-Hong.

2009. Building a large syntactically-annotated corpus

of Vietnamese. In Proceedings of the 3rd Linguistic
Annotation Workshop, ACL-IJCNLP, Singapore.

Jungyeul Park. 2006. Extraction of tree adjoining gram-

mars from a treebank for Korean. In COLING ACL’06
Student Research Workshop, pages 73–78, Morris-
town, NJ, USA.

Fei Xia, Martha Palmer, and Aravind Joshi. 2000. A

uniform method of grammar extraction and its applica-

tions. In Proceedings of the joint SIGDAT conference
on empirical methods in NLP and very large corpora,
pages 53–62, Morristown, NJ, USA.

Fei Xia. 2001. Automatic grammar generation from
two different perspectives. Ph.D. thesis, University of
Pennsylvania.

Automated Extraction of Tree Adjoining Grammars from a Treebank for Vietnamese

173



Phuong Le Hong, Thi Minh Huyen Nguyen, Phuong-Thai Nguyen, Azim Roussanaly

174


