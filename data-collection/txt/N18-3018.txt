



















































Fast and Scalable Expansion of Natural Language Understanding Functionality for Intelligent Agents


Proceedings of NAACL-HLT 2018, pages 145–152
New Orleans, Louisiana, June 1 - 6, 2018. c©2017 Association for Computational Linguistics

Fast and Scalable Expansion of Natural Language Understanding
Functionality for Intelligent Agents

Anuj Goyal, Angeliki Metallinou, Spyros Matsoukas
Amazon Alexa Machine Learning

{anujgoya, ametalli, matsouka}@amazon.com

Abstract

Fast expansion of natural language functional-
ity of intelligent virtual agents is critical for
achieving engaging and informative interac-
tions. However, developing accurate models
for new natural language domains is a time
and data intensive process. We propose ef-
ficient deep neural network architectures that
maximally re-use available resources through
transfer learning. Our methods are applied
for expanding the understanding capabilities
of a popular commercial agent and are eval-
uated on hundreds of new domains, designed
by internal or external developers. We demon-
strate that our proposed methods significantly
increase accuracy in low resource settings and
enable rapid development of accurate models
with less data.

1 Introduction

Voice powered artificial agents have become
widespread among consumer devices, with agents
like Amazon Alexa, Google Now and Apple Siri
being popular and widely used. Their success re-
lies not only on accurately recognizing user re-
quests, but also on continuously expanding the
range of requests that they can understand. An
ever growing set of functionalities is critical for
creating an agent that is engaging, useful and
human-like.

This presents significant scalability challenges
regarding rapidly developing the models at the
heart of the natural language understanding (NLU)
engines of such agents. Building accurate mod-
els for new functionality typically requires collec-
tion and manual annotation of new data resources,
an expensive and lengthy process, often requir-
ing highly skilled teams. In addition, data col-
lected from real user interactions is very valuable
for developing accurate models but without an ac-
curate model already in place, the agent will not

enjoy widespread use thereby hindering collection
of high quality data.

Presented with this challenge, our goal is to
speed up the natural language expansion process
for Amazon Alexa, a popular commercial artificial
agent, through methods that maximize re-usability
of resources across areas of functionality. Each
area of Alexa’s functionality, e.g., Music, Calen-
dar, is called a domain. Our focus is to a) increase
accuracy of low resource domains b) rapidly build
new domains such that the functionality can be
made available to Alexa’s users as soon as possi-
ble, and thus start benefiting from user interaction
data. To achieve this, we adapt recent ideas at the
intersection of deep learning and transfer learning
that enable us to leverage available user interaction
data from other areas of functionality.

To summarize our contributions, we describe
data efficient deep learning architectures for NLU
that facilitate knowledge transfer from similar
tasks. We evaluate our methods at a much larger
scale than related transfer learning work in NLU,
for fast and scalable expansion of hundreds of
new natural language domains of Amazon Alexa,
a commercial artificial agent. We show that our
methods achieve significant performance gains in
low resource settings and enable building accurate
functionality faster during early stages of model
development by reducing reliance on large anno-
tated datasets.

2 Related Work

Deep learning models, including Long-Short term
memory networks (LSTM) (Gers et al., 1999),
are state of the art for many natural language
processing tasks (NLP), such as sequence label-
ing (Chung et al., 2014), named entity recogni-
tion (NER) (Chiu and Nichols, 2015) and part
of speech (POS) tagging (Huang et al., 2015).

145



Multitask learning is also widely applied in NLP,
where a network is jointly trained for multiple re-
lated tasks. Multitask architectures have been suc-
cesfully applied for joint learning of NER, POS,
chunking and supertagging tasks, as in (Collobert
et al., 2011; Collobert and Weston, 2008; Søgaard
and Goldberg, 2016).

Similarly, transfer learning addresses the trans-
fer of knowledge from data-rich source tasks
to under-resourced target tasks. Neural transfer
learning has been successfully applied in com-
puter vision tasks where lower layers of a net-
work learn generic features that are transferred
well to different tasks (Zeiler and Fergus, 2014;
Krizhevsky et al., 2012). Such methods led to im-
pressive results for image classification and object
detection (Donahue et al., 2014; Sharif Razavian
et al., 2014; Girshick et al., 2014) In NLP, trans-
ferring neural features across tasks with disparate
label spaces is relatively less common. In (Mou
et al., 2016), authors conclude that network trans-
ferability depends on the semantic relatedness of
the source and target tasks. In cross-language
transfer learning, (Buys and Botha, 2016) use
weak supervision to project morphology tags to
a common label set, while (Kim et al., 2017a)
transfer lower layer representations across lan-
guages for POS tagging. Other related work ad-
dresses transfer learning where source and target
share the same label space, while feature and la-
bel distributions differ, including deep learning
methods (Glorot et al., 2011; Kim et al., 2017b),
and earlier domain adaptation methods such as
EasyAdapt (Daumé III, 2007), instance weight-
ing (Jiang and Zhai, 2007) and structural corre-
spondence learning (Blitzer et al., 2006).

Fast functionality expansion is critical in indus-
try settings. Related work has focused on scalabil-
ity and ability to learn from few resources when
developing a new domain, and includes zero-shot
learning (Chen et al., 2016; Ferreira et al., 2015),
domain attention (Kim et al., 2017c), and scal-
able, modular classifiers (Li et al., 2014). There
is a multitude of commercial tools for develop-
ers to build their own custom natural language ap-
plications, including Amazon Alexa ASK (Kumar
et al., 2017), DialogFlow by Google (DialogFlow)
and LUIS by Microsoft (LUIS). Along these lines,
we propose scalable methods that can be applied
for rapid development of hundreds of low resource
domains across disparate label spaces.

3 NLU Functionality Expansion

We focus on Amazon Alexa, an intelligent conver-
sational agent that interacts with the user through
voice commands and is able to process requests on
a range of natural language domains, e.g., playing
music, asking for weather information and editing
a calendar. In addition to this built-in functionality
that is designed and built by internal developers,
the Alexa Skills Kit (ASK) (Kumar et al., 2017)
enables external developers to build their own cus-
tom functionality which they can share with other
users, effectively allowing for unlimited new capa-
bilities. Below, we describe the development pro-
cess and challenges associated with natural lan-
guage domain expansion.

For each new domain, the internal or exter-
nal developers define a set of intents and slots
for the target functionality. Intents correspond to
user intention, e.g., ‘FindRecipeIntent’, and slots
correspond to domain-specific entities of interest
e.g.,‘FoodItem’. Developers also define a set of
commonly used utterances that cover the core use
cases of the functionality, e.g., ‘find a recipe for
chicken’. We call those core utterances. In addi-
tion, developers need to create gazetteers for their
domain, which are lists of slot values. For exam-
ple, a gazetteer for ‘FoodItem’ will contain differ-
ent food names like ‘chicken’. We have devel-
oped infrastructure to allow internal and external
teams to define their domain, and create or ex-
pand linguistic resources such as core utterances
and gazetteers. We have also built tools that en-
able extracting carrier phrases from the example
utterances by abstracting the utterance slot values,
such as ‘find a recipe for {FoodItem}’. The col-
lection of carrier phrases and gazetteers for a do-
main is called a grammar. Grammars can be sam-
pled to generate synthetic data for model training.
For example, we can generate the utterance ‘find
a recipe for pasta’ if the latter dish is contained in
the ‘FoodItem’ gazetteer.

Next, developers enrich the linguistic resources
available for a new domain, to cover more linguis-
tic variations for intents and slots. This includes
creating bootstrap data for model development, in-
cluding collecting utterances that cover the new
functionality, manually writing variations of ex-
ample utterances, and expanding the gazetteer val-
ues. In general, this is a time and data intensive
process. External developers can also continu-
ously enrich the data they provide for their cus-

146



tom domain. However, external developers typi-
cally lack the time, resources or expertise to pro-
vide rich datasets, therefore in practice custom do-
mains are significantly under-resourced compared
to built-in domains.

Once the new domain model is bootstrapped
using the collected datasets, it becomes part
of Alexa’s natural language functionality and is
available for user interactions. The data from such
user interactions can be sampled and annotated in
order to provide additional targeted training data
for improving the accuracy of the domain. A good
bootstrap model accuracy will lead to higher user
engagement with the new functionality and hence
to a larger opportunity to learn from user interac-
tion data.

Considering these challenges, our goal is to re-
duce our reliance on large annotated datasets for
a new domain by re-using resources from existing
domains. Specifically, we aim to achieve higher
model accuracy in low resource settings and accel-
erate new domain development by building good
quality bootstrap models faster.

4 Methodology

In this section, we describe transfer learning meth-
ods for efficient data re-use. Transfer learning
refers to transferring the knowledge gained while
performing a task in a source domain Ds to ben-
efit a related task in a target domain Dt. Typi-
cally, we have a large dataset for Ds, while Dt is
an under-resourced new task. Here, the target do-
main is the new built-in or custom domain, while
the source domain contains functionality that we
have released, for which we have large amounts of
data. The tasks of interest in both Ds and Dt are
the same, namely slot tagging and intent classifi-
cation. However Ds and Dt have different label
spaces Ys and Yt, because a new domain will con-
tain new intent and slot labels compared to previ-
ously released domains.

4.1 DNN-based natural language engine
We first present our NLU system where we per-
form slot tagging (ST) and intent classification
(IC) for a given input user utterance. We are
inspired by the neural architecture of (Søgaard
and Goldberg, 2016), where a multi-task learn-
ing architecture is used with deep bi-directional
Recurrent Neural Networks (RNNs). Supervision
for the different tasks happens at different lay-
ers. Our neural network contains three layers

Figure 1: Multitask stacked bi-LSTM architecture for
ST and IC, with a shared bottom layer, two separate top
layers for ST and IC. Gazetteer features can be added
as optional input to the ST and IC layers during the
fine-tuning stage. (see also Sec. 4.2)

of bi-directional Long Short Term Memory net-
works (LSTMs) (Graves and Schmidhuber, 2005;
Hochreiter and Schmidhuber, 1997). The two top
layers are optimized separately for the ST and
IC tasks, while the common bottom layer is op-
timized for both tasks, as shown in Figure 1.

Specifically let rct denote the common represen-
tation computed by the bottommost bi-LSTM for
each word input at time t. The ST forward LSTM
layer learns a representation rST,ft = φ(r

c
t , r

ST
t−1),

where φ denotes the LSTM operation. The IC
forward LSTM layer learns rIC,ft = φ(r

c
t , r

IC
t−1).

Similarly, the backward LSTM layers learn rST,bt
and rIC,bt . To obtain the slot tagging decision, we
feed the ST bi-LSTM layer’s output per step into a
softmax, and produce a slot label at each time step
(e.g., at each input word). For the intent decision,
we concatenate the last time step from the forward
LSTM with the first step of the backward LSTM,
and feed it into a softmax for classification:

rslott = r
ST,f
t ⊕ rST,bt , rintent = rIC,fT ⊕ r

IC,b
1

Ŝt = softmax(Wsr
slot
t + bs)

Î = softmax(WIr
intent + bI)

where ⊕ denotes concatenation. Ws,WI , bs, bI
are the weights and biases for the slot and intent
softmax layers respectively. Ŝt is the predicted
slot tag per time step (per input word), and Î is
the predicted intent label for the sentence.

The overall objective function for the multi-
task network combines the IC and ST objectives.

147



Therefore we jointly learn a shared representation
rct that leverages the correlations between the re-
lated IC and ST tasks, and shares beneficial knowl-
edge across tasks. Empirically, we have observed
that this multitask architecture achieves better re-
sults than separately training intent and slot mod-
els, with the added advantage of having a single
model, and a smaller total parameter size.

In our setup, each input word is embedded into
a 300-dimensional embedding, where the embed-
dings are estimated from our data. We also use
pre-trained word embeddings as a separate input,
that allows incorporating unsupervised word infor-
mation from much larger corpora (FastText (Bo-
janowski et al., 2016)). We encode slot spans us-
ing the IOB tagging scheme (Ramshaw and Mar-
cus, 1995). When we have available gazetteers rel-
evant to the ST task, we use gazetteer features as
an additional input. Such features are binary indi-
cators of the presence of an n-gram in a gazetteer,
and are common for ST tasks (Radford et al.,
2015; Nadeau and Sekine, 2007).

4.2 Transfer learning for the DNN engine

Typically, a new domain Dt contains little avail-
able data for training the multitask DNN architec-
ture of Sec 4.1. We propose to leverage existing
data from mature released domains (source Ds) to
build generic models, which are then adapted to
the new tasks (target Dt).

We train our DNN engine using labeled data
from Ds in a supervised way. The source slot tags
space Y slots and intent label space Y

intent
s con-

tain labels from previously released slots and in-
tents respectively. We refer to this stage as pre-
training, where the stacked layers in the network
learn to generate features which are useful for the
ST and IC tasks of Ds. Our hypothesis is that
such features will also be useful for Dt. After
pre-training is complete, we replace the top-most
affine transform and softmax layers for IC and ST
with layer dimensions that correspond to the tar-
get label space for intents and slots respectively,
i.e., Y intentt and Y

slot
t . The network is then trained

again using the available target labeled data for IC
and ST. We refer to this stage as fine-tuning of the
DNN parameters for adapting to Dt.

A network can be pre-trained on large datasets
from Ds and later fine tuned separately for many
low resource new domains Dt. In some cases,
when developing a new domain Dt, new domain-

specific information becomes available, such as
domain gazetteers (which were not available at
pre-training). To incorporate this information dur-
ing fine-tuning, we add gazetteer features as an
extra input to the two top-most ST and IC layers,
as shown in Figure 1. We found that adding new
features during fine-tuning significantly changes
the upper layer distributions. Therefore, in such
cases, it is better to train the ST and IC layers from
scratch and only transfer and fine-tune weights
from the common representation rc of the bottom
layer. However, when no gazetteers are available,
it is beneficial to pre-train all stacked Bi-LSTM
layers (common, IC and ST), except from the task-
specific affine transform leading to the softmax.

4.3 Baseline natural language engine
While DNNs are strong models for both ST and
IC, they typically need large amounts of training
data. As we focus on under-resourced function-
ality, we examine an alternative baseline that re-
lies on simpler models; namely a Maximum En-
tropy (MaxEnt) (Berger et al., 1996) model for in-
tent classification and a Conditional Random Field
(CRF) (Lafferty et al., 2001) model for slot tag-
ging. MaxEnt models are regularized log-linear
models that have been shown to be effective for
text classification tasks (Berger et al., 1996). Sim-
ilarly, CRFs have been popular tagging models
in the NLP literature (Nadeau and Sekine, 2007)
prior to the recent growth in deep learning. In
our experience, these models require less data to
train well and represent strong baselines for low
resource classification and tagging tasks.

5 Experiments and Results

We evaluate the transfer learning methods of Sec-
tion 4.2 for both custom and built-in domains, and
compare with baselines that do not benefit from
knowledge transfer (Sections 4.1, 4.3). We exper-
iment with around 200 developer defined custom
domains, whose statistics are presented in Table
1. Looking at the median numbers, which are less
influenced by a few large custom domains com-
pared to mean values, we note that typically devel-
opers provide just a few tens of example phrases
and few tens of values per gazetteer (slot gazetteer
size). Therefore, most custom domains are sig-
nificantly under-resourced. We also select three
new built-in domains, and evaluate them at various
early stages of domain development. Here, we as-
sume that variable amounts of training data grad-

148



ually become available, including bootstrap and
user interaction data.

We pre-train DNN models using millions of an-
notated utterances from existing mature built-in
domains. Each annotated utterance has an associ-
ated domain label, which we use to make sure that
the pre-training data does not contain utterances
labeled as any of the custom or built-in target do-
mains. After excluding the target domains, the
pre-training data is randomly selected from a vari-
ety of mature Alexa domains covering hundreds
of intents and slots across a wide range of nat-
ural language functionality. For all experiments,
we use L1 and L2 to regularize our DNN, CRF
and MaxEnt models, while DNNs are additionally
regularized with dropout.

The test sets contain user data, annotated for
each custom or built-in domain. For custom do-
mains, test set size is a few hundred utterances per
domain, while for built-in domains it is a few thou-
sand utterances per domain. Our metrics include
standard F1 scores for the SC and IC tasks, and
a sentence error rate (SER) defined as the ratio of
utterances with at least one IC or ST error over all
utterances. The latter metric combines IC and ST
errors per utterance and reflects how many utter-
ances we could not understand correctly.

Data type Mean Median

number of intents 8.02 3
number of slots 2.07 1

slot gazetteer size 441.35 11
number of example phrases 268.11 42

Table 1: Statistics of data for around 200 developer de-
fined custom domains

5.1 Results for custom developer domains
For the custom domain experiments, we focus on
a low resource experimental setup, where we as-
sume that our only target training data is the data
provided by the external developer. We report re-
sults for around 200 custom domains, which is a
subset of all domains we support. We compare
the proposed transfer learning method, denoted
as DNN Pretrained, with the two baseline meth-
ods described in sections 4.1 and 4.3, denoted as
DNN Baseline and CRF/MaxEnt Baseline, respec-
tively. For training the baselines, we use the avail-
able data provided by the developer for each do-
main, e.g., example phrases and gazetteers. From
these resources, we create grammars and we sam-
ple them to generate 50K training utterances per

domain, using the process described in Section
3. This training data size was selected empiri-
cally based on baseline model accuracy. The gen-
erated utterances may contain repetitions for do-
mains where the external developer provided a
small amount of example phrases and few slot val-
ues per gazetteer. For the proposed method, we
pre-train a DNN model on 4 million utterances and
fine tune it per domain using the 50K grammar ut-
terances of that domain and any available gazetteer
information (for extracting gazetteer features). In
Table 2, we show the mean and median across cus-
tom domains for F1slot, F1intent and SER.

Table 2 shows that the CRF and MaxEnt mod-
els present a strong baseline and generally outper-
form the DNN model without pretraining, which
has a larger number of parameters. This suggests
that the baseline DNN models (without pretrain-
ing) cannot be trained robustly without large avail-
able training data. The proposed pre-trained DNN
significantly outperforms both baselines across all
metrics (paired t-test, p < .01). Median SER re-
duces by around 14% relative when we use trans-
fer learning compared to both baselines. We are
able to harness the knowledge obtained from data
of multiple mature source domains Ds and trans-
fer it to our under-resourced target domains Dt,
across disparate label spaces.

To investigate the effect of semantic similarity
across source and target domains we selected a
subset of 30 custom domains with high seman-
tic similarity with the source tasks. Semantic
similarity was computed by comparing the sen-
tence representations computed by the common
bi-LSTM layer across source and target sentences,
and selecting target custom domains with sen-
tences close to at least one of the source tasks.
For these 30 domains, we observed higher gains of
around 19% relative median SER reduction. This
corroborates observations of (Mou et al., 2016),
that neural feature transferability for NLP depends
on the semantic similarity between source and tar-
get. In our low resource tasks, we see a benefit
from transfer learning and this benefit increases as
we select more semantically similar data.

Our approach is scalable and is does not rely
on manual domain-specific annotations, besides
developer provided data. Also, pretrained DNN
models are about five times faster to train dur-
ing the fine-tuning stage, compared to training
the model from scratch for each custom domain,

149



Approach F1Intent F1Slot SERMean Median Mean Median Mean Median

Baseline CRF/MaxEnt 94.6 96.6 80.0 91.5 14.5 9.2

Baseline DNN 91.9 95.9 85.1 92.9 14.7 9.2

Proposed Pretrained DNN * 95.2 97.2 88.6 93.0 13.1 7.9

Table 2: Results for around 200 custom developer domains. For F1, higher values are better, while for SER lower
values are better. * denotes statistically significant SER difference compared to both baselines.

which speeds up model turn-around time.

5.2 Results for built-in domains

We evaluate our methods on three new built-in do-
mains referred here as domain A (5 intents, 36 slot
types), domain B (2 intents, 17 slot types) and do-
main C (22 intents, 43 slot types). Table 3 shows
results for domains A, B and C across experimen-
tal early stages of domain development, where dif-
ferent data types and amounts of data per data type
gradually become available. Core data refers to
core example utterances, bootstrap data refers to
domain data collection and generation of synthetic
(grammar) utterances, and user data refers to user
interactions with our agent. As described in Sec-
tion 3, the collection and annotation of these data
sources is a lengthy process. Here we evaluate
whether we can accelerate the development pro-
cess by achieving accuracy gains in early, low re-
source stages, and bootstrap a model faster.

For each data setting and size, we compare our
proposed pretrained DNN models with the base-
line CRF/MaxEnt baseline, which is the better
performing baseline of Section 5.1. Results for
the non pre-trained DNN baseline are similar, and
omitted for lack of space. Our proposed DNN
models are pre-trained on 4 million data from ma-
ture domains and then fine tuned on the available
target data. The baseline CRF/MaxEnt models are
trained on the available target data. Note that the
datasets of Table 3 represent early stages of model
development and do not reflect final training size
or model performance. The types of target data
slightly differ across domains according to domain
development characteristics. For example, for do-
main B there was very small amount of core data
available and it was combined with the bootstrap
data for experiments.

Overall, we notice that our proposed DNN pre-
training method improves performance over the
CRF/MaxEnt baseline, for almost all data settings.
As we would expect, we see the largest gains for
the most low resource data settings. For example,
for domain A, we observe a 7% and 5% relative

Train Set Size Method F1intent F1slot SER

Domain A (5 intents, 36 slots)
Core*

500
Baseline 85.0 63.9 51.9

data Proposed 86.6 66.6 48.2

Bootstrap
18K

Baseline 86.1 72.8 49.6
data* Proposed 86.9 73.8 47.0

Core +
3.5K

Baseline 90.4 74.3 40.5
user data* Proposed 90.1 75.8 37.9

Core +
43K

Baseline 92.1 80.6 33.4
bootstrap + Proposed 91.9 80.8 32.8
user data

Domain B (2 intents, 17 slots)
Bootstrap

2K
Baseline 97.0 94.7 10.1

data* Proposed 97.8 95.3 6.3

User data
2.5K

Baseline 97.0 94.7 8.2
Proposed 97.1 96.4 7.1

Bootstrap +
52K

Baseline 96.7 95.2 8.2
user data* Proposed 97.0 96.6 6.4

Domain C (22 intents, 43 slots)
Core*

300
Baseline 77.9 47.8 64.2

data Proposed 85.6 46.6 51.8

Bootstrap
26K

Baseline 46.1 65.8 64.0
data* Proposed 49.1 68.9 62.8

Core +
126K

Baseline 92.3 78.3 28.1
bootstrap. + Proposed 92.7 72.7 31.9
user data*

Table 3: Results on domains A, B and C for the
proposed pretrained DNN method and the baseline
CRF/MaxEnt method during experimental early stages
of domain development. * denotes statistically signifi-
cant SER difference between proposed and baseline

SER improvement on core and bootstrap data set-
tings respectively. The performance gain we ob-
tain on those early stages of development brings us
closer to our goal of rapidly bootstrapping models
with less data. From domains A and C, we also
notice that we achieve the highest performance in
settings that leverage user data, which highlights
the importance of such data. Note that the drop in
Fintent for domain C between core and bootstrap
data is because the available bootstrap data did not
contain data for all of the 22 intents of domain C.
Finally, we notice that the gain from transfer learn-
ing diminishes in some larger data settings, and we

150



may see degradation (domain C, 126K data set-
ting). We hypothesize that as larger training data
becomes available it may be better to not pre-train
or pre-train with source data that are semantically
similar to the target. We will investigate this as
part of future work.

6 Conclusions and Future Work

We have described the process and challenges as-
sociated with large scale natural language func-
tionality expansion for built-in and custom do-
mains for Amazon Alexa, a popular commercial
intelligent agent. To address scalability and data
collection bottlenecks, we have proposed data effi-
cient deep learning architectures that benefit from
transfer learning from resource-rich functionality
domains. Our models are pre-trained on existing
resources and then adapted to hundreds of new,
low resource tasks, allowing for rapid and accurate
expansion of NLU functionality. In the future, we
plan to explore unsupervised methods for transfer
learning and the effect of semantic similarity be-
tween source and target tasks.

References
Adam L Berger, Vincent J Della Pietra, and Stephen

A Della Pietra. 1996. A maximum entropy approach
to natural language processing. Computational lin-
guistics, 22(1):39–71.

John Blitzer, Ryan McDonald, and Fernando Pereira.
2006. Domain adaptation with structural correspon-
dence learning. In Proceedings of the 2006 confer-
ence on empirical methods in natural language pro-
cessing, pages 120–128. Association for Computa-
tional Linguistics.

Piotr Bojanowski, Edouard Grave, Armand Joulin,
and Tomas Mikolov. 2016. Enriching word vec-
tors with subword information. arXiv preprint
arXiv:1607.04606.

Jan Buys and Jan A. Botha. 2016. Cross-lingual mor-
phological tagging for low-resource languages. In
Proceedings of the Association for Computational
Linguistics (ACL). Association for Computational
Linguistics.

Yun-Nung Chen, Dilek Hakkani-Tür, and Xiaodong
He. 2016. Zero-shot learning of intent embed-
dings for expansion by convolutional deep struc-
tured semantic models. In Acoustics, Speech and
Signal Processing (ICASSP), 2016 IEEE Interna-
tional Conference on, pages 6045–6049. IEEE.

Jason PC Chiu and Eric Nichols. 2015. Named en-
tity recognition with bidirectional lstm-cnns. arXiv
preprint arXiv:1511.08308.

J. Chung, C. Gulcehre, K. Cho, and Y. Bengio. 2014.
Empirical evaluation of gated recurrent neural net-
works on sequence modeling. In NIPS 2014 Work-
shop on Deep Learning,.

R. Collobert and J. Weston. 2008. A unified architec-
ture for natural language processing: Deep neural
networks with multitask learning. In Proc. of Inter-
national Conference of Machine Learning (ICML)
2008.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. Journal of Machine Learning Research,
12(Aug):2493–2537.

Hal Daumé III. 2007. Frustratingly easy domain adap-
tation. In Proceedings of the Association for Com-
putational Linguistics (ACL). Association for Com-
putational Linguistics.

DialogFlow. https://dialogflow.com.

Jeff Donahue, Yangqing Jia, Oriol Vinyals, Judy Hoff-
man, Ning Zhang, Eric Tzeng, and Trevor Darrell.
2014. Decaf: A deep convolutional activation fea-
ture for generic visual recognition. In International
conference on machine learning, pages 647–655.

Emmanuel Ferreira, Bassam Jabaian, and Fabrice
Lefèvre. 2015. Zero-shot semantic parser for spoken
language understanding. In Sixteenth Annual Con-
ference of the International Speech Communication
Association.

Felix A Gers, Jürgen Schmidhuber, and Fred Cummins.
1999. Learning to forget: Continual prediction with
lstm.

Ross Girshick, Jeff Donahue, Trevor Darrell, and Ji-
tendra Malik. 2014. Rich feature hierarchies for ac-
curate object detection and semantic segmentation.
In Proceedings of the IEEE conference on computer
vision and pattern recognition, pages 580–587.

Xavier Glorot, Antoine Bordes, and Yoshua Bengio.
2011. Domain adaptation for large-scale sentiment
classification: A deep learning approach. In Pro-
ceedings of the 28th international conference on ma-
chine learning (ICML-11), pages 513–520.

Alex Graves and Jürgen Schmidhuber. 2005. Frame-
wise phoneme classification with bidirectional lstm
and other neural network architectures. Neural Net-
works, 18(5):602–610.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidirec-
tional lstm-crf models for sequence tagging. arXiv
preprint arXiv:1508.01991.

151



Jing Jiang and ChengXiang Zhai. 2007. Instance
weighting for domain adaptation in nlp. In ACL,
volume 7, pages 264–271.

J.-K. Kim, Y.-B. Kim, R. Sarikaya, and E. Fosler-
Lussier. 2017a. Cross-lingual transfer learning for
pos tagging without cross-lingual resources. In
Proc. of the 2017 Conference on Empirical Methods
in Natural Language Processing (EMNLP), pages
2832–2838.

Young-Bum Kim, Karl Stratos, and Dongchan Kim.
2017b. Adversarial adaptation of synthetic or stale
data. In ACL.

Young-Bum Kim, Karl Stratos, and Dongchan Kim.
2017c. Domain attention with an ensemble of ex-
perts. In Annual Meeting of the Association for
Computational Linguistics.

Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hin-
ton. 2012. Imagenet classification with deep con-
volutional neural networks. In Advances in neural
information processing systems, pages 1097–1105.

Anjishnu Kumar, Arpit Gupta, Julian Chan, Sam
Tucker, Björn Hoffmeister, Markus Dreyer,
Stanislav Peshterliev, Ankur Gandhe, Denis Filimi-
nov, Ariya Rastrow, Christian Monson, and Agnika
Kumar. 2017. Just ASK: building an architecture for
extensible self-service spoken language understand-
ing. In NIPS 2017 Workshop on Conversational
AI.

John Lafferty, Andrew McCallum, and Fernando CN
Pereira. 2001. Conditional random fields: Prob-
abilistic models for segmenting and labeling se-
quence data.

Q. Li, G. Tur, D. Hakkani-Tur, X. Li, T. Paek,
A. Gunawardana, and C. Quirk. 2014. Distributed
open-domain conversational understanding frame-
work with domain independent extractors. In Spo-
ken Language Technology Workshop (SLT) 2014.

LUIS. The Microsoft Language Understanding Intelli-
gent Service (LUIS), https://www.luis.ai.

L. Mou, Z. Meng, R. Yan, G. Li, Y. Xu, L. Zhang, and
Z. Jin. 2016. How transferable are neural networks
in nlp applications. In Proceedings of the 2016 con-
ference on empirical methods in natural language
processing, pages 479–489.

D. Nadeau and S. Sekine. 2007. A survey of named en-
tity recognition and classification. Linguisticae In-
vestigationes,, volume 1. John Benjamins Publish-
ing Company.

W. Radford, X. Carreras, and J. Henderson. 2015.
Named entity recognition with document-specific kb
tag gazetteers. In Proc. of the 2015 Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 512–517.

Lance Ramshaw and Mitch Marcus. 1995. Text chunk-
ing using transformation-based learning. In Third
Workshop on Very Large Corpora.

Ali Sharif Razavian, Hossein Azizpour, Josephine Sul-
livan, and Stefan Carlsson. 2014. Cnn features off-
the-shelf: an astounding baseline for recognition. In
Proceedings of the IEEE conference on computer vi-
sion and pattern recognition workshops, pages 806–
813.

Anders Søgaard and Yoav Goldberg. 2016. Deep
multi-task learning with low level tasks supervised
at lower layers. In Proceedings of the 54th Annual
Meeting of the Association for Computational Lin-
guistics, volume 2, pages 231–235.

Matthew D Zeiler and Rob Fergus. 2014. Visualizing
and understanding convolutional networks. In Eu-
ropean conference on computer vision, pages 818–
833. Springer.

152


