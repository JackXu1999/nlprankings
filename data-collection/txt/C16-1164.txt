



















































Simple Question Answering by Attentive Convolutional Neural Network


Proceedings of COLING 2016, the 26th International Conference on Computational Linguistics: Technical Papers,
pages 1746–1756, Osaka, Japan, December 11-17 2016.

Simple Question Answering by Attentive Convolutional Neural Network∗

Wenpeng Yin∗, Mo Yu†, Bing Xiang†,
∗Center for Information and Language Processing

LMU Munich, Germany
wenpeng@cis.lmu.de

Bowen Zhou†, Hinrich Schütze∗
†IBM Watson

Yorktown Heights, NY, USA
{yum,bingxia,zhou}@us.ibm.com

Abstract

This work focuses on answering single-relation factoid questions over Freebase. Each question
can acquire the answer from a single fact of form (subject, predicate, object) in Freebase. This
task, simple question answering (SimpleQA), can be addressed via a two-step pipeline: entity
linking and fact selection. In fact selection, we match the subject entity in a fact candidate with
the entity mention in the question by a character-level convolutional neural network (char-CNN),
and match the predicate in that fact with the question by a word-level CNN (word-CNN). This
work makes two main contributions. (i) A simple and effective entity linker over Freebase is
proposed. Our entity linker outperforms the state-of-the-art entity linker over SimpleQA task. 1

(ii) A novel attentive maxpooling is stacked over word-CNN, so that the predicate representation
can be matched with the predicate-focused question representation more effectively. Experiments
show that our system sets new state-of-the-art in this task.

1 Introduction

Factoid question answering (QA) over knowledge bases such as Freebase (Bollacker et al., 2008) has
been intensively studied recently (e.g., Bordes et al. (2014), Yao et al. (2014), Bast and Haussmann
(2015), Yih et al. (2015), Xu et al. (2016)). Answering a question can require reference to multiple related
facts in Freebase or reference to a single fact. This work studies simple question answering (SimpleQA)
based on the SimpleQuestions benchmark (Bordes et al., 2015) in which answering a question does not
require reasoning over multiple facts. Single-relation factual questions are the most common type of
question observed in various community QA sites (Fader et al., 2013) and in search query logs. Even
though this task is called “simple”, it is in reality not simple at all and far from solved.

In SimpleQA, a question, such as “what’s the hometown of Obama?”, asks a single and direct topic of
an entity. In this example, the entity is “Obama” and the topic is hometown. So our task is reduced to
finding one fact (subject, predicate, object) in Freebase that answers the question, which roughly means
the subject and predicate are the best matches for the topical entity “Obama” and for the topic description
“what’s the hometown of”, respectively. Thus, we aim to design a method that picks a fact from Freebase,
so that this fact matches the question best. This procedure resembles answer selection (Yu et al., 2014)
in which a system, given a question, is asked to choose the best answer from a list of candidates. In this
work, we formulate the SimpleQA task as a fact selection problem and the key issue lies in the system
design for how to match a fact candidate to the question.

The first obstacle is that Freebase has an overwhelming number of facts. A common and effective way
is to first conduct entity linking of a question over Freebase, so that only a small subset of facts remain
as candidates. Prior work achieves entity linking by searching word n-grams of a question among all
entity names (Bordes et al., 2015; Golub and He, 2016). Then, facts whose subject entities match those
n-grams are kept. Our first contribution in this work is to present a simple while effective entity linker

∗This work was conducted during the first author’s internship at IBM Watson Group.
1We release our entity linking results at: https://github.com/Gorov/SimpleQuestions-EntityLinking

This work is licensed under a Creative Commons Attribution 4.0 International License. License details: http://
creativecommons.org/licenses/by/4.0/

1746



to this task. Our entity linker first uses each word of a question (or of an entity mention in the question)
to search in the entity vocabulary, all entities are kept if their names contain one of the query words.
Then, we design three simple factors to give a raw ranking score for each entity candidate: (i) the ratio
of words in the entity name that are covered by the question; (ii) the ratio of words in the question that
are covered by the entity name; (iii) the position of the entity mention in the question. We choose top-N
ranked entities as candidates. Our entity linker does not consider the semantics or topic of an entity; it
considers only the string surface. Nevertheless, experiments show that these three factors are the basis
for a top-performing entity linker for SimpleQA.

Based on entity linking results, we consider each fact as a fact candidate that has one of the entity
candidates as subject. Then our system solves the task of fact selection, i.e., matching the question with
each fact candidate and picking the best one. Our system is built based on two observations. (i) Surface-
form match between a subject entity and its mention in the question provides more straight-forward
and effective clue than their semantic match. For example, “Barack Obama” matches with “Obama”
in surface-form, which acts as a fundamental indicator that the corresponding fact and the question are
possibly about the same “Obama”. (ii) Predicate in a fact is a paraphrase of the question’s pattern where
we define the pattern to be the topic asked by the question about the entity, and represent it as the question
in which the entity mention has been replaced by a special symbol. Often the predicate corresponds to a
keyword or a rephrased token of the pattern, this means we need to create a flexible model to handle this
relationship.

These observations motivate us to include two kinds of convolutional neural networks (CNN, LeCun
et al. (1998)) in our deep learning system. (i) A character-level CNN (char-CNN) that models the match
between an Freebase entity and its mention in the question on surface-form. We consider CNN over
character-level rather than the commonly-used word-level, so that the generated representation is more
robust even in the presence of typos, spaces and other character violations. (ii) A word-level CNN (word-
CNN) with attentive maxpooling that learns the match of the Freebase predicate with the question’s
pattern. A Freebase predicate is a predefined relation, mostly consisting of a few words: “place of birth”,
“nationality”, “author editor” etc. In contrast, a pattern is highly variable in length and word choice, i.e.,
the subsequence of the question that represents the predicate in a question can take many different forms.
Convolution-maxpooling slides a window over the input and identifies the best matching subsequence
for a task, using a number of filters that support flexible matching. Thus, convolution-maxpooling is an
appropriate method for finding the pattern subsequence that best matches the predicate description. We
add attention to this basic operation of convolution-maxpooling. Attentions are guided by the predicate
over all n-gram phrases in the pattern, finally system pools phrase features by considering the feature
values as well as the attentions towards those features. Phrases more similar to the predicate, i.e., with
higher attention values, will be selected with higher probability than other phrases to represent the
pattern.2

Our overall approach is for the entity linker to identify top-N entity candidates for a question. All
facts that contain one of these entities as subject are then the fact search space for this question. Char-
CNN and word-CNN decompose each question-fact match into an entity-mention surface-form match
and a predicate-pattern semantic match. Our approach has a simple architecture, but it outperforms the
state-of-the-art, a system that has a much more complicated structure.

2 Related Work

As mentioned in Section 1, factoid QA against Freebase can be categorized into single-relation QA and
multi-relation QA. Much work has been done on multi-relation QA in the past decade, especially after
the release of benchmark WebQuestions (Berant et al., 2013). Most state-of-the-art approaches (Berant
et al., 2013; Yahya et al., 2013; Yao and Van Durme, 2014; Yih et al., 2015) are based on semantic
parsing, where a question is mapped to its formal meaning representation (e.g., logical form) and then
translated to a knowledge base (KB) query. The answers to the question can then be retrieved simply

2Surface-form entity linking has limitations in candidate collection as some entities have the same names. We tried another
word-CNN to match the pattern to the entity description provided by Freebase, but no improvement is observed.

1747



by executing the query. Other approaches retrieve a set of candidate answers from KB using relation
extraction (Yao and Van Durme, 2014; Yih et al., 2014; Yao, 2015; Bast and Haussmann, 2015) or
distributed representations (Bordes et al., 2014; Dong et al., 2015; Xu et al., 2016). Our method in this
work explores CNN to learn distributed representations for Freebase facts and questions.

SimpleQA was first investigated in (Fader et al., 2013) through PARALEX dataset against knowledge
base Reverb (Fader et al., 2011). Yih et al. (2014) also investigate PARALEX by a system with some
similarity to ours – they employ CNNs to match entity-mention and predicate-pattern. Our model differs
in two-fold. (i) They use the same CNN architecture based on a word-hashing technique (Huang et
al., 2013) for both entity-mention and predicate-pattern matches. Each word is first preprocessed into a
count vector of character-trigram vocabulary, then forwarded into the CNN as input. We treat entities and
mentions as character sequences. Our char-CNN for entity-mention match is more end-to-end without
data preprocessing. (ii) We introduce attentive maxpooling for better predicate-pattern match.

The latest benchmark SimpleQuestions in SimpleQA is introduced by Bordes et al. (2015). Bordes
et al. (2015) tackle this problem by an embedding-based QA system developed under the framework of
Memory Networks (Weston et al., 2015; Sukhbaatar et al., 2015). The setting of the SimpleQA corre-
sponds to the elementary operation of performing a single lookup in the memory. They investigate the
performance of training on the combination of SimpleQuestions, WebQuestions and Reverb training sets.
Golub and He (2016) propose a character-level attention-based encoder-decoder framework to encode the
question and subsequently decode into (subject, predicate) tuple. Our model in this work is much simpler
than these prior systems. Dai et al. (2016) combine a unified conditional probabilistic framework with
deep recurrent neural networks and neural embeddings to get state-of-the-art performance.

Treating SimpleQA as fact selection is inspired by work on answer selection (e.g., Yu et al. (2014),
Yin et al. (2016b), Santos et al. (2016)) that looks for the correct answer(s) from some candidates for a
given question. The answer candidates in those tasks are raw text, not structured information as facts in
Freebase are. We are also inspired by work that generates natural language questions given knowledge
graph facts (Seyler et al., 2015; Serban et al., 2016). It hints that there exists a kind of match between
natural language questions and FB facts.

3 Task Definition and Data Introduction

We first describe the Freebase (Bollacker et al., 2008) and SimpleQuestions task (Berant et al., 2013).
Freebase is a structured knowledge base in which entities are connected by predefined predicates or

“relations”. All predicates are directional, connecting from the subject to the object. A triple (subject,
predicate, object), denoted as (h, p, t), describes a fact; e.g., (U.S. Route 2, major cities, Kalispell) refers
to the fact that U.S. Route 2 runs through the city of Kalispell.

SimpleQuestions benchmark, a typical SimpleQA task, provides a set of single-relation questions;
each question is accompanied by a ground truth fact. The object entity in the fact is the answer by default.
The dataset is split into train (75,910), dev (10,845) and test (21,687) sets. This benchmark also provides
two subsets of Freebase: FB2M (2,150,604 entities, 6,701 predicates, 14,180,937 atomic facts), FB5M
(4,904,397 entities, 7,523 predicates, 22,441,880 atomic facts). While single-relation questions are easier
to handle than questions with more complex and multiple relations, single-relation question answering
is still far from being solved. Even in this restricted domain there are a large number of paraphrases of
the same question. Thus, the problem of mapping from a question to a particular predicate and entity in
Freebase is hard.

The task assumes that single-relation questions can be answered by querying a knowledge base such
as Freebase with a single subject and predicate argument. Hence, only the tuple (h, p) is used to match
the question. The evaluation metric is accuracy. Only a fact that matches the ground truth in both subject
and predicate is counted as correct.

4 Entity Linking

Given a question, the entity linker provides a set of top-N entity candidates. The input of our deep
learning model are (subject, predicate) and (mention, pattern) pairs. Thus, given a question, two problems

1748



we have to solve are (i) identifying candidate entities in Freebase that the question refers to and (ii)
identifying the span (i.e., mention) in the question that refers to the entity. Each problem can be handled
before the other, which results in two entity linkers. (i) Passive Entity Linker: First search for entity
candidates by all question words, then use returned entities to guide the mention detection; (ii) Active
Entity Linker: First identify the entity mention in the question, then use the mention span to search for
entity candidates. We now introduce them in detail.

Passive Entity Linker. We perform entity linking by deriving the longest consecutive common subse-
quence (LCCS) between a question and entity candidates and refer to it as σ. Given a question q and all
entity names from Freebase, we perform the following three steps.

(i) Lowercase/tokenize entity names and question
(ii) Use each component word of q to retrieve entities whose names contain this word. We refer to the

set of all these entities as Ce.
(iii) For each entity candidate e in Ce, compute its LCCS σ with the question q. Let p be the position

of the last token of σ in q. Compute a = |σ|/|q|, b = |σ|/|e| and c = p/|q| where | · | is length in words.
Finally, entity candidate e is scored by the weighted sum se = αa + βb + (1 − α − β)c. Parameters α
and β are tuned on dev. Top-N ranked entities are kept for each question.

Discussion. Factor a = |σ|/|q| means we prefer candidates that cover more consecutive words of the
question. Factor b = |σ|/|e| means that we prefer the candidates that cover more consecutive words of
the entity. Factor c = p/|q| means that we prefer candidates that appear close to the end of the question;
this is based on the observation that most entity mentions are far from the beginning of the question.
Despite the simplicity of this passive entity linker, it outperforms other state-of-the-art entity linkers of
this SimpleQuestions task by a big margin. Besides, this entity linker is unsupervised and runs fast. We
will show its promise and investigate the individual contributions of the three factors in experiments.

Each question q is provided top-N entity candidates from Freebase by entity linker. Then for mention
detection, we first compute the LCCS σ on word level between q and entity e. If the entity is longer
than σ and has l (resp. r) words on the left (resp. right) of σ, then we extend σ in the question by l left
(resp. r right) words and select this subsequence as the candidate mention. For example, entity “U.S.
Route 2” and question “what major cities does us route 2 run through” have LCCS σ “route 2”. The FB
entity “U.S. Route 2” has one extra word “u.s.” on the left of σ, so we extend σ by one left word and the
candidate mention is “us route 2”. We do this so that the mention has the same word size as the entity
string.3

In rare cases that the LCCS on the word level has length 0, we treat both entity string and question as
character sequence, then compute LCCS σ on character level. Finally, mention is formed by expanding
σ on both sides up to a space or the text boundary.

For each question, this approach to mention detection usually produces more than one (mention, pat-
tern) pair.

Active Entity Linker. In the training set of SimpleQuestions, the topic entity of each question is la-
beled. Active entity linker is then achieved by detecting mention in a question by sequential labeling.
The key idea is to train a model to predict the text span of the topic entity which can match the gold
entity. This is inspired by some prior work. For example, Dai et al. (2016) map the gold entity back to
the text to label the text span for each question and then train a BiGRU-CRF model to do the mention
detection. Golub and He (2016) propose a generative model which generates the topic entity based on
character-level text spans with soft attention scores. Similar to the work (Dai et al., 2016), we trained a
BiLSTM-CRF model to detect the entity mentions.

This approach to mention detection produces only one (mention, pattern) pair for each question. Then,
based on this detected mention, we use each word of it to search for the entity candidates via the three
steps in “Passive Entity Linker”.

We presented two styles of mention detection in questions – passive or active. In passive mention
detection, the mention of a question depends on the entity candidates returned by an entity linker. Due

3Only using LCCS as mention performed worse.

1749



(a) The whole system. Question: what major cities does us route 2 run through; Tuple: (“u.s.
route 2”, “major cities”)

(b) Convolution for rep-
resentation learning

Figure 1: CNN System for SimpleQA

to the different furface-forms of entity candidates, a question can be detected in different spans as men-
tions. Instead, active mention detection is conducted in a similar way with Name Entity Recognition.
Hence, the mention does not depend on the returned entity candidates, a single-relation question has only
one mention. Our experiments will show that active entity linker bring better coverage of ground truth
entities, nevertheless this method requires the availability of entity-labeled questions as training data.

After mention detection, we then convert the question into the tuple (mention, pattern) where pattern
is created by replacing the mention in the question with <e>.

5 Fact Selection

Entity linker provides top-N entity candidates for each question. All facts having those entities as subject
form a fact pool, then we build the system to seek the best.

Our whole system is depicted in Figure 1(a). It consists of match from two aspects: (i) a CNN on
character level (char-CNN) to detect the similarity of entity string and the mention string in surface-form
(the left column); (ii) a CNN with attentive maxpooling (AMP) in word level (word-AMPCNN) to detect
if the predicate is a paraphrase of the pattern.

Word-AMPCNN is motivated by the observation that the FB predicate name is short and fixed whereas
the corresponding pattern in the question is highly variable in length and word choice. Our hypothesis
is that the predicate-pattern match is best done based on keywords in the pattern (and perhaps humans
also do something similar) and that the CNN therefore should identify helpful keywords. Traditional
maxpooling treats all n-grams equally. In this work, we propose attentive maxpooling (AMP). AMP
gives higher weights to n-grams that better match the predicate. As a result, the predicate-pattern match
computed by the CNN is more likely to be correct.

Next, we introduce the CNN combined with maxpooling for both char-CNN and word-CNN, then
present AMPCNN. Figure 1(b) shows the common framework of char-CNN and word-CNN; only input
granularity and maxpooling are different.

1750



Figure 2: Traditional maxpooling vs. Attentive maxpooling

5.1 Framework of CNN-Maxpooling

Both char-CNN and word-CNN have two weight-sharing CNNs, as they model two pieces of text. In
what follows, we use “entry” as a general term for both character and word.

The input layer is a sequence of entries of length swhere each entry is represented by a d-dimensional
randomly initialized embedding; thus the sequence is represented as a feature map of dimensionality
d× s. Figure 1(b) shows the input layer as the lower rectangle with multiple columns.

Convolution Layer is used for representation learning from sliding n-grams. For an input se-
quence with s entries: v1, v2, . . . , vs, let vector ci ∈ Rnd be the concatenated embeddings of n entries
vi−n+1, . . . , vi where n is the filter width and 0 < i < s + n. Embeddings for vi, i < 1 or i > s,
are zero padded. We then generate the representation pi ∈ Rd for the n-gram vi−n+1, . . . , vi using the
convolution weights W ∈ Rd×nd:

pi = tanh(W · ci + b) (1)

where bias b ∈ Rd.
Maxpooling. All n-gram representations pi (i = 1 · · · s+n−1) are used to generate the representation

of input sequence s by maxpooling: sj = max(pj1,pj2, · · ·) (j = 1, · · · , d).

1751



5.2 AMPCNN: CNN-Attentive-Maxpooling

Figure 2 shows TMP (Traditional MaxPooling) and AMP (Attentive MaxPooling) as we apply them to
SimpleQA. Recall that we use standard CNNs to produce (i) the predicate representation vp (see Fig-
ure 1(a)) and (ii) a feature map of the pattern, i.e., a matrix with columns denoting n-gram representations
(shown in Figure 1(b), the matrix below “row-wise (attentive) maxpooling”). In Figure 2, we refer to the
feature map as Fpattern and to the predicate representation as vp.

TMPCNN, i.e., traditional maxpooling, outputs the vector shown as vTMP; the same vTMP is produced
for different vp. The basic idea of AMPCNN is to let the predicate vp bias the selection and weighting of
subsequences of the question to compute the representation of the pattern. The first step in doing that is
to compute similarity scores s between the predicate representation vp and each column vector of Fpattern:

si = cos(vp,Fpattern[:, i]) (2)

These cosines are then transformed into decay values by setting negative values to 0 (negatively corre-
lated column vectors are likely to be unrelated to the predicate) and normalizing the positive values by
dividing them by the largest cosine (.97 in this case), so that the largest decay value is 1.0. This is shown
as “decay” and s in the figure. Finally, we compute the reweighted feature map Fdecay as follows:

Fdecay[:, i] = Fpattern[:, i] ∗ si (3)

In Fdecay, the matrix with four green values, we can locate the maximal values in each dimension.
Notice that they are not the true features by CNN any more, instead, they convey the original feature
values as well as their importance to be considered. In Fdecay, we can see that the maximal values in
each dimension mostly come from the first column and the third column which have relatively higher
similarity scores 0.97 and 0.76 respectively to the predicate. We use the coordinates of those maximal
values to retrieve features from Fpattern as a final pattern representation vAMP, the blue column vector4.

In summary, TMP has no notion of context. The novelty of AMP is that it is guided by attentions from
the context, in this case attentions from the predicate. In contrast to TMP, we expect AMP to mainly
extract features that come from n-grams that are related to the predicate.

6 Experiments

6.1 Training Setup

Our fact pool consists of all facts whose subject entity is in the top-N entity candidates. For train, we
sample 99 negative facts for each ground truth fact; for dev and test, all fact candidates are kept.

Figure 1(a) shows two-way match between a tuple t and a question q: entity-mention match by char-
CNN (score me), predicate-pattern match by word-AMPCNN (score mr). The overall ranking score of
the pair is st(q, t) = me +mr + se where se is the entity ranking score in entity linking phase.

Our objective is to minimize ranking loss:

l(q, t+, t−) = max(0, λ+ st(q, t−)− st(q, t+)) (4)

where λ is a constant.
We build word and character vocabularies on train. OOV words and characters from dev and test are

mapped to an OOV index. Then, words (resp. characters) are randomly initialized into dword-dimensional
(resp. dchar-dimensional) embeddings. The output dimensionality in convolution, i.e., Equation 1, is the
same as input dimensionality. We employ Adagrad (Duchi et al., 2011), L2 regularization and diversity
regularization (Xie et al., 2015). Hyperparameters (Table 1) are tuned on dev. For active mention de-
tection, we trained a two-layer BiLSTM followed by a CRF, the hidden layer sizes of both BiLSTM are
200.

4We tried max-pooling over Fdecay as vAMP directly, but much worse performance was observed.

1752



dword dchar lr L2 div k λ
500 100 0.1 .0003 .03 [3,3] 0.5

Table 1: Hyperparameters. dword/dchar: embedding dimensionality; lr: learning rate; L2: L2 normaliza-
tion; div: diversity regularizer; k: filter width in char/word-CNN. λ: see Eq. 4

baseline Ours
N raw rerank passive-linker -a -b -c active-linker
1 40.9 52.9 56.6 11.0 34.9 52.3 73.6
5 – – 71.1 29.5 49.5 67.7 85.0

10 64.3 74.0 75.2 40.7 56.6 72.8 87.4
20 69.3 77.8 81.0 63.3 62.4 78.6 88.8
50 75.7 82.0 85.7 77.1 67.1 84.2 90.4

100 79.6 85.4 87.9 81.2 70.4 87.0 91.6

Table 2: Experimental results for entity linking

6.2 Entity Linking

In Table 2, we compare our (passive and active) entity linkers with the state-of-the-art entity linker
(Golub and He, 2016) in this SimpleQA task. Golub and He (2016) report the coverage of ground truth
by top-N cases (N ∈ {1, 10, 20, 50, 100}). In addition, they explore a reranking algorithm to refine the
entity ranking list.

Table 2 first shows the overall performance of our passive entity linker and its performance without
factor a, b or c (-a, -b, -c). Our passive entity linker outperforms the baseline’s raw results by big
margins and is 2–3 percent above their reranked scores. This shows the outstanding performance of our
passive entity linker despite its simplicity. The table also shows that all three factors (a, b, c) matter.
Observations: (i) Each factor matters more when N is smaller. This makes sense because when N
reaches the entity vocabulary size, all methods will have coverage 100%. (ii) The position-related factor
c has less influence. From top1 to top100, its contribution decreases from 4.3 to .9. Our linker still
outperforms the reranked baseline for N ≥ 20. (iii) Factor a is dominant for small N , presumably
because it chooses the longer one when two candidates exist, which is critical for small N . (iv) Factor b
plays a more consistent role across different N .

The last column of Table 2 shows the overall results of our active entity linker, which are significantly
better than the results of baseline linker and our passive linker. We release our entity linking results for
follow-up work to make better comparison.

6.3 SimpleQuestions

Table 3 compares AMPCNN with two baselines. (i) MemNN (Bordes et al., 2015), an implementation of
memory network for SimpleQuestions task. (ii) Encoder-Decoder (Golub and He, 2016), a character-
level, attention-based encoder-decoder LSTM (Hochreiter and Schmidhuber, 1997) model. (iii) CFO
(Dai et al., 2016), the state-of-the-art system in this task with CNN or BiGRU subsystem.

We report results for both passive entity linker and active entity linker. Furthermore, we compare
AMPCNN to TMPCNN, i.e., we remove attention and representations for the predicate-pattern match
are computed without attention. We choose top-20 (i.e., N = 20) entities returned by entity linker. Table
3 shows that AMPCNN with active entity linker has optimal performance for FB2M and FB5M. Perfor-
mance on FB5M is slightly lower than on FB2M, which should be mainly due to the lower coverage for
entity linking on FB5M – about 2% below that on FB2M. In addition, our CNN can still get competitive
performance even if the attention mechanism is removed (TMPCNN result). This hints that CNN is
promising for SimpleQA.

1753



Settings Methods FB2M FB5M

passive entity linker

baseline

random guess 4.9 4.9
MemNN 62.7 63.9
CFO w/ CNN - 56.0
CFO w/ BiGRU - 62.6

CNN
TMPCNN 67.5∗ 66.6∗
AMPCNN 68.3∗ 67.2∗

active entity linker

baseline

Encoder-Decoder 70.9 70.3
CFO w/ CNN - 71.1
CFO w/ BiGRU - 75.7

CNN
TMPCNN 75.4 74.6
AMPCNN 76.4∗ 75.9

Table 3: Experimental results for SimpleQuestions. Significant improvements over top baseline are
marked with * (test of equal proportions, p < .05).

RC Para
OWA-HABCNN (Yin et al., 2016a) .847 0
OWA-ABCNN (Yin et al., 2016b) .902 0
OWA-APCNN (Santos et al., 2016) .905 Rd×d
AMPCNN .913 0

Table 4: Comparing different attention schemes of CNN in terms of RC, extra parameters brought (Para).

6.4 Effect of Attentive Maxpooling (AMP)

We compare AMP (one main contribution of this work) with three CNN attention mechanisms that are
representative of related work in modeling two pieces of text: (i) HABCNN: Hierarchical attention-
based CNN (Yin et al., 2016a); (ii) ABCNN: Attention-based CNN (Yin et al., 2016b); (iii) APCNN:
CNN with attentive pooling (Santos et al., 2016).

Since attentive matching of predicate-pattern is only one part of our jointly trained system, it is hard to
judge whether or not an attentive CNN performs better than alternatives. We therefore create a relation
classification (RC) subtask to compare AMP with baseline schemes directly. RC task is created based
on SimpleQuestions: label each question (converted into a pattern first) with the ground truth predicate;
all other predicates of the gold subject entity are labeled as negative. The resulting datasets have sizes
72,239 (train), 10,310 (dev) and 20,610 (test). It is worth mentioning that this relation classification task
is not unspecific to the SimpleQA task, as RC is actually the predict-pattern match part. Hence, this
RC subtask can be viewed to check how well the predict-pattern subsystem performs within the whole
architecture, and the effectiveness of various attention mechanisms is more clear.

In the three baselines, two pieces of text apply attention to each other. We adapt them into one-way
attention (OWA) as AMP does in this work: fix predicate representation, and use it to guide the learning
of pattern representation. To be specific, ABCNN first gets predicate representation by mean pooling,
then uses this representation to derive similarity scores of each n-gram in pattern as attention scores,
finally averages all n-gram embeddings weighted by attentions as pattern representation. HABCNN first
gets predicate representation by max pooling, then computes attention scores the same way as ABCNN,
finally does maxpooling over representations of top-k similar n-grams. APCNN is similar to ABCNN
except that the similarity scores are computed by a nonlinear bilinear form.

Table 4 shows that AMPCNN performs well on relation classification, outperforming the best baseline
APCNN by 0.8%. AMPCNN also has fewer parameters and runs faster than APCNN.

1754



7 Conclusion

This work explored CNNs for the SimpleQA task. We made two main contributions. (i) A simple and
effective entity linker that brings higher coverage of ground truth entities. (ii) An attentive maxpooling
stacked above convolution layer that models the relationship between predicate and question pattern more
effectively. Our model shows outstanding performance on both simpleQA and relation classification.

Acknowledgments. Wenpeng Yin and Hinrich Schütze were partially supported by DFG (grant
SCHU 2246/8-2).

References
Hannah Bast and Elmar Haussmann. 2015. More accurate question answering on freebase. In Proceedings of

CIKM, pages 1431–1440.

Jonathan Berant, Andrew Chou, Roy Frostig, and Percy Liang. 2013. Semantic parsing on freebase from question-
answer pairs. In Proceedings of EMNLP, pages 1533–1544.

Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim Sturge, and Jamie Taylor. 2008. Freebase: a collaboratively
created graph database for structuring human knowledge. In Proceedings of SIGMOD, pages 1247–1250.

Antoine Bordes, Sumit Chopra, and Jason Weston. 2014. Question answering with subgraph embeddings. In
Proceedings of EMNLP, pages 615–620.

Antoine Bordes, Nicolas Usunier, Sumit Chopra, and Jason Weston. 2015. Large-scale simple question answering
with memory networks. arXiv preprint arXiv:1506.02075.

Zihang Dai, Lei Li, and Wei Xu. 2016. CFO: Conditional focused neural question answering with large-scale
knowledge bases. In Proceedings of ACL, pages 800–810.

Li Dong, Furu Wei, Ming Zhou, and Ke Xu. 2015. Question answering over freebase with multi-column convolu-
tional neural networks. In Proceedings of ACL-IJCNLP, volume 1, pages 260–269.

John Duchi, Elad Hazan, and Yoram Singer. 2011. Adaptive subgradient methods for online learning and stochas-
tic optimization. JMLR, 12:2121–2159.

Anthony Fader, Stephen Soderland, and Oren Etzioni. 2011. Identifying relations for open information extraction.
In Proceedings of EMNLP, pages 1535–1545.

Anthony Fader, Luke S Zettlemoyer, and Oren Etzioni. 2013. Paraphrase-driven learning for open question
answering. In Proceedings of ACL, pages 1608–1618.

David Golub and Xiaodong He. 2016. Character-level question answering with attention. In Proceedings of
EMNLP.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long short-term memory. Neural computation, 9(8):1735–1780.

Po-Sen Huang, Xiaodong He, Jianfeng Gao, Li Deng, Alex Acero, and Larry Heck. 2013. Learning deep struc-
tured semantic models for web search using clickthrough data. In Proceedings of CIKM, pages 2333–2338.

Yann LeCun, Léon Bottou, Yoshua Bengio, and Patrick Haffner. 1998. Gradient-based learning applied to docu-
ment recognition. In Proceedings of the IEEE, pages 2278–2324.

Cicero dos Santos, Ming Tan, Bing Xiang, and Bowen Zhou. 2016. Attentive pooling networks. arXiv preprint
arXiv:1602.03609.

Iulian Vlad Serban, Alberto Garcı́a-Durán, Caglar Gulcehre, Sungjin Ahn, Sarath Chandar, Aaron Courville, and
Yoshua Bengio. 2016. Generating factoid questions with recurrent neural networks: The 30m factoid question-
answer corpus. In Proceedings of ACL, pages 588–598.

Dominic Seyler, Mohamed Yahya, and Klaus Berberich. 2015. Generating quiz questions from knowledge graphs.
In Proceedings of WWW, pages 113–114.

Sainbayar Sukhbaatar, Jason Weston, Rob Fergus, et al. 2015. End-to-end memory networks. In Proceedings of
NIPS, pages 2431–2439.

1755



Jason Weston, Sumit Chopra, and Antoine Bordes. 2015. Memory networks. In Proceedings of ICLR.

Pengtao Xie, Yuntian Deng, and Eric Xing. 2015. On the generalization error bounds of neural networks under
diversity-inducing mutual angular regularization. arXiv preprint arXiv:1511.07110.

Kun Xu, Yansong Feng, Siva Reddy, Songfang Huang, and Dongyan Zhao. 2016. Enhancing freebase question
answering using textual evidence. arXiv preprint arXiv:1603.00957.

Mohamed Yahya, Klaus Berberich, Shady Elbassuoni, and Gerhard Weikum. 2013. Robust question answering
over the web of linked data. In Proceedings of CIKM, pages 1107–1116.

Xuchen Yao and Benjamin Van Durme. 2014. Information extraction over structured data: Question answering
with Freebase. In Proceedings of ACL, pages 956–966.

Xuchen Yao, Jonathan Berant, and Benjamin Van Durme. 2014. Freebase QA: Information extraction or semantic
parsing? In Proceedings of ACL Workshop on Semantic Parsing, pages 82–86.

Xuchen Yao. 2015. Lean question answering over freebase from scratch. In Proceedings of NAACL-HLT, pages
66–70.

Wen-tau Yih, Xiaodong He, and Christopher Meek. 2014. Semantic parsing for single-relation question answer-
ing. In Proceedings of ACL, pages 643–648.

Wen-tau Yih, Ming-Wei Chang, Xiaodong He, and Jianfeng Gao. 2015. Semantic parsing via staged query graph
generation: Question answering with knowledge base. In Proceedings of ACL, pages 1321–1331.

Wenpeng Yin, Sebastian Ebert, and Hinrich Schütze. 2016a. Attention-based convolutional neural network for
machine comprehension. In Proceedings of NAACL Human-Computer QA Workshop.

Wenpeng Yin, Hinrich Schütze, Bing Xiang, and Bowen Zhou. 2016b. ABCNN: Attention-based convolutional
neural network for modeling sentence pairs. TACL.

Lei Yu, Karl Moritz Hermann, Phil Blunsom, and Stephen Pulman. 2014. Deep learning for answer sentence
selection. Proceedings of ICLR Workshop.

1756


