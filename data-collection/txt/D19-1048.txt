



















































Latent-Variable Generative Models for Data-Efficient Text Classification


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 507–517,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

507

Latent-Variable Generative Models for Data-Efficient Text Classification

Xiaoan Ding1 Kevin Gimpel2

1University of Chicago, Chicago, IL, 60637, USA
2Toyota Technological Institute at Chicago, Chicago, IL, 60637, USA

xiaoanding@uchicago.edu, kgimpel@ttic.edu

Abstract

Generative classifiers offer potential advan-
tages over their discriminative counterparts,
namely in the areas of data efficiency, ro-
bustness to data shift and adversarial exam-
ples, and zero-shot learning (Ng and Jordan,
2002; Yogatama et al., 2017; Lewis and Fan,
2019). In this paper, we improve generative
text classifiers by introducing discrete latent
variables into the generative story, and explore
several graphical model configurations. We
parameterize the distributions using standard
neural architectures used in conditional lan-
guage modeling and perform learning by di-
rectly maximizing the log marginal likelihood
via gradient-based optimization, which avoids
the need to do expectation-maximization. We
empirically characterize the performance of
our models on six text classification datasets.
The choice of where to include the latent vari-
able has a significant impact on performance,
with the strongest results obtained when using
the latent variable as an auxiliary condition-
ing variable in the generation of the textual in-
put. This model consistently outperforms both
the generative and discriminative classifiers in
small-data settings. We analyze our model by
using it for controlled generation, finding that
the latent variable captures interpretable prop-
erties of the data, even with very small training
sets.

1 Introduction

The most widely-used neural network classifiers
are discriminative, that is, they are trained to ex-
plicitly favor the gold standard label over others.
The alternative is to design classifiers that are gen-
erative; these follow a generative story that in-
cludes predicting the label and then the data condi-
tioned on the label. Discriminative classifiers are
preferred because they generally outperform their
generative counterparts on standard benchmarks.

These benchmarks typically assume large anno-
tated training sets, little mismatch between train-
ing and test distributions, relatively clean data, and
a lack of adversarial examples (Zue et al., 1990;
Marcus et al., 1993; Deng et al., 2009; Lin et al.,
2014).

However, when conditions are not ideal for dis-
criminative classifiers, generative classifiers can
actually perform better. Ng and Jordan (2002)
showed theoretically that linear generative classi-
fiers approach their asymptotic error rates more
rapidly than discriminative ones. Based on this
finding, Yogatama et al. (2017) empirically char-
acterized the performance of RNN-based gen-
erative classifiers, showing advantages in sam-
ple complexity, zero-shot learning, and continual
learning. Recent work in generative question an-
swering models (Lewis and Fan, 2019) demon-
strates better robustness to biased training data and
adversarial testing data than state-of-the-art dis-
criminative models.

In this paper, we focus on settings with small
amounts of annotated data and improve genera-
tive text classifiers by introducing discrete latent
variables into the generative story. Accordingly,
the training objective is changed to log marginal
likelihood of the data as we marginalize out the
latent variables during learning. We parameter-
ize the distributions with standard neural architec-
tures used in conditional language models and in-
clude the latent variable by concatenating its em-
bedding to the RNN hidden state before comput-
ing the softmax over words. While traditional la-
tent variable learning in NLP uses the expectation-
maximization (EM) algorithm (Dempster et al.,
1977), we instead simply perform direct optimiza-
tion of the log marginal likelihood using gradient-
based methods. At inference time, we similarly
marginalize out the latent variables while maxi-
mizing over the label.



508

We characterize the performance of our latent-
variable generative classifiers on six text classifi-
cation datasets introduced by Zhang et al. (2015).
We observe that introducing latent variables leads
to large and consistent performance gains in the
small-data regime, though the benefits of adding
latent variables reduce as the training set becomes
larger.

To better understand the modeling space of la-
tent variable classifiers, we explore several graph-
ical model configurations. Our experimental re-
sults demonstrate the importance of including a
direct dependency between the label and the in-
put in the model. We study the relationship be-
tween the label, latent, and input variables in our
strongest latent generative classifier, finding that
the label and latent capture complementary infor-
mation about the input. Some information about
the textual input is encoded in the latent variable
to help with generation.

We analyze our latent generative model by gen-
erating samples when controlling the label and la-
tent variables. Even with small training data, the
samples capture the salient characteristics of the
label space while also conforming to the values of
the latent variable, some of which we find to be in-
terpretable. While discriminative classifiers excel
at separating examples according to labels, gener-
ative classifiers offer certain advantages in practi-
cal settings that benefit from a richer understand-
ing of the data-generating process.

2 Discriminative and Generative Text
Classifiers

We begin by defining our baseline generative and
discriminative text classifiers for document classi-
fication. Our models are essentially the same as
those from Yogatama et al. (2017); we describe
them in detail here because our latent-variable
models will extend them.1 Our classifiers are
trained on datasets D of annotated documents.
Each instance 〈x, y〉 ∈ D consists of a textual in-
put x = {x1, x2, ..., xT }, where T is the length of
the document, and a label y ∈ Y .

1The main difference between our baselines and the mod-
els in Yogatama et al. (2017) are: (1) their discriminative
classifier uses an LSTM with “peephole connections”; (2)
they evaluate a label-based generative classifier (“Indepen-
dent LSTMs”) that uses a separate LSTM for each label.
They also evaluate the model we described here, which they
call “Shared LSTMs”. Their Independent and Shared LSTMs
perform similarly across training set sizes.

The discriminative classifier is trained to max-
imize the conditional probability of labels given
documents:

∑
〈x,y〉∈D log p(y | x). For our dis-

criminative model, we encode a document x using
an LSTM (Hochreiter and Schmidhuber, 1997),
and use the average of the LSTM hidden states as
the document representation. The classifier is built
by adding a softmax layer on top of the LSTM
state average to get a probability distribution over
labels.

The generative classifier is trained to maxi-
mize the joint probability of documents and la-
bels:

∑
〈x,y〉∈D log p(x, y). The generative clas-

sifier uses the following factorization:

p(x, y) = p(x | y)p(y) (1)

We parameterize log p(x | y) as a conditional
LSTM language model using the standard sequen-
tial factorization:

log p(x | y) =
T∑
t=1

log p(xt | x<t, y) (2)

We define a label embedding matrix VY ∈
Rd1×|Y|. To predict the next word xt+1, we con-
catenate the LSTM hidden state ht with the label
embedding vy (a column of VY ), and feed it to
a softmax layer to get the probability distribution
over the vocabulary. More details about the factor-
ization and parameterization are discussed in Sec-
tion 3. The label prior p(y) is acquired via maxi-
mum likelihood estimation and fixed during train-
ing of the remaining parameters.

At inference time, the prediction is made
by maximizing p(y | x) with respect to y
for the discriminative classifier and maximizing
p(x | y)p(y) for the generative classifier.

3 Latent-Variable Generative Classifiers

We now introduce discrete latent variables into the
standard generative classifier as shown in Figure 1.
We refer to the latent-variable model as an auxil-
iary latent generative model, as we expect the la-
tent variable to contain auxiliary information that
can help with the generation of the input.

Following the graphical model structure in
Figure 1(b), we factorize the joint probability
p(x, y, c) as follows:

p(x, y, c) = pΘ(x | c, y)pΦ(c)pΨ(y) (3)



509

Figure 1: Graphical models of (a) standard generative
classifier and (b) auxiliary latent generative classifier.

We parameterize pΘ(x | c, y) as a conditional
LSTM language model using the same factoriza-
tion as above:

log pΘ(x | c, y) =
T∑
t=1

log pΘ(xt | x<t, c, y) (4)

where Θ is the set of parameters of the language
model. As in the generative classifier, we use a la-
bel embedding matrix VY . In addition, we define
a latent variable embedding matrix VC ∈ Rd2×|C|
where C is the set of values for the discrete latent
variable. Also like the generative classifier, we
use an LSTM to predict each word with a softmax
layer:

pΘ(xt | x<t, c, y) ∝ exp{u>xt([ht; vy; vc]) + bxt}
(5)

where ht is the hidden representation of x<t from
the LSTM, vy and vc are the embeddings for the
label and the latent variable, respectively, [u; v]
denotes vertical concatenation, uxt is the output
word embedding, and bxt is a bias parameter.

The prior distribution of the latent variable is
parameterized as follows:

pΦ(c) ∝ exp{w>c vc + bc} (6)

where Φ is the set of parameters for this distribu-
tion which includes the vector wc and scalar bc for
each c.

As in the standard generative model, the label
prior pΨ(y) is acquired from the empirical label
distribution in the training data and remains fixed
during training.

Training. As is standard in latent-variable mod-
eling, we train our models by maximizing the log
marginal likelihood:

max
Θ,Φ,VC ,VY

∑
〈x,y〉∈D

log
∑
c∈C

pΘ(x | c, y)pΦ(c)pΨ(y)

(7)

In NLP, these sorts of optimization problems are
traditionally solved with the EM algorithm. How-
ever, we instead directly optimize the above quan-
tity using automatic differentiation. This is natural
because we use softmax-transformed parameteri-
zations; a more traditional parameterization would
assign parameters directly to individual probabili-
ties, which then requires constrained optimization.

Inference. The prediction is made by marginal-
izing out the latent variables as follows:

ŷ = argmax
y∈Y

∑
c∈C

pΘ(x | c, y)pΦ(c)pΨ(y) (8)

We experimented with other inference objectives
and found similar results. More details can be
found in Appendix C.

Differences with ensembles. Our latent-
variable model resembles an ensemble of multiple
generative classifiers, but there are two main
differences. First, all parameters in the latent
generative classifier are trained jointly, while a
standard ensemble combines predictions from
multiple, independently-trained models. Joint
training leads to complementary information
being captured by latent variable values, as shown
in our analysis. Moreover, a standard ensemble
will lead to far more parameters (10, 30, or
50 times as many in our experimental setup)
since each generative classifier is a completely
separate model. Our approach simply conditions
on the embedding of the latent variable value and
therefore does not add many parameters.

4 Experiments

4.1 Datasets
We present our results on six publicly available
text classification datasets introduced by Zhang
et al. (2015), which include news categorization,
sentiment analysis, question/answer topic classifi-
cation, and article ontology classification.2

To compare classifiers across training set sizes,
we follow the setup of Yogatama et al. (2017) and
construct multiple training sets by randomly sam-
pling 5, 20, 100, 1k, 2k, 5k, and 10k instances per
label from each dataset.

4.2 Training Details
In all experiments, the word embedding dimension
and the LSTM hidden state dimension are set to

2A more detailed dataset description is in Appendix E.



510

%
 a

cc
ur

ac
y

50

60

70

80

90

100

5 20 100 1k 2k 5k 10k all

Disc. Gen. Lat.

(a) Yelp Review Polarity

20

30

40

50

60

5 20 100 1k 2k 5k 10k all

Disc. Gen. Lat.

(b) Yelp Review Full

20

40

60

80

100

5 20 100 1k 2k 5k 10k all

Disc. Gen. Lat.

(c) AGNews

number of instances per class

%
 a

cc
ur

ac
y

20

40

60

80

100

5 20 100 1k 2k 5k 10k all

Disc. Gen. Lat.

(d) Sogou

number of instances per class

0

20

40

60

80

5 20 100 1k 2k 5k 10k all

Disc. Gen. Lat.

(e) Yahoo

number of instances per class

20

40

60

80

100

5 20 100 1k 2k 5k 10k all

Disc. Gen. Lat.

(f) DBpedia

Figure 2: Comparison of classification accuracy of the discriminative (Disc.), standard generative (Gen.), and
latent generative (Lat.) classifiers training across training set sizes.

100. All LSTMs use one layer and are unidirec-
tional. The label dimensionality of all generative
classifiers is set to 100. We adopt the same param-
eter settings as Yogatama et al. (2017) to ensure
the results are comparable. For the latent-variable
generative classifiers, we choose 10 or 30 latent
variable values with embeddings of dimensional-
ity 10, 50, or 100.

For optimization, we use Adam (Kingma and
Ba, 2015) with learning rate 0.001. We do early
stopping by evaluating the classification accuracy
on the development set.

Due to memory limitations and computational
costs, we truncate the length of the input se-
quences to 80 tokens before adding <s> and
</s> to indicate the start and end of the doc-
ument. Though truncation decreases the perfor-
mance of the models, all models use the same trun-
cated inputs, so the comparison is still fair.3

4.3 Baselines

To confirm we have built strong baselines, we first
compare our implementation of the generative and
discriminative classifiers to prior work. Our re-
sults in Appendix A show that our baselines are
comparable to those of Yogatama et al. (2017).

3In other experiments, we compared performance with
different truncation limits across training set sizes, finding the
trends to be consistent with those presented here.

5 Results

5.1 Data Efficiency

Figure 2 shows results for the discriminative, gen-
erative, and latent generative classifiers in terms
of data efficiency. Data efficiency is measured by
comparing the accuracies of the classifiers when
trained across varying sizes of training sets. Nu-
merical comparisons on two datasets are shown in
Table 1.

With small training sets, the latent generative
classifier consistently outperforms both the gener-
ative and discriminative classifiers. When the gen-
erative classifier is better than the discriminative
one, as in DBpedia, the latent classifier resembles
the generative classifier. When the discriminative
classifier is better, as in Yelp Polarity, the latent
classifier patterns after the discriminative classi-
fier. However, when the number of training ex-
amples is in the range of approximately 5,000 to
10,000 per class, the discriminative classifier tends
to perform best.

With small training sets, the generative classi-
fier outperforms the discriminative one in most
cases except the very smallest training sets. For
example, in the Yelp Review Polarity dataset, the
first two points are from classifiers trained with
only 10 and 40 instances in total. The other
case in which generative classifiers underperform
is when training over large training sets, which



511

∆(Lat., Gen.) ∆(Lat., Disc.)
AGNews DBpedia AGNews DBpedia

5 +12.3 +3.3 +7.2 +34.0
20 +23.5 +3.3 +17.7 +41.8
100 +9.8 +1.8 +16.0 +17.5
1k +2.0 +0.9 +8.0 +0.0
all +0.1 -0.4 +0.3 -2.4

Table 1: ∆(Lat., Gen.): change in accuracy when
moving from generative to latent generative classifier;
∆(Lat., Disc.): change in accuracy when moving from
discriminative to latent generative classifier. The first
column shows the number of training instances per
class.

Figure 3: Graphical models of (a) auxiliary, (b) joint,
(c) middle, and (d) hierarchical latent generative clas-
sifiers.

agrees with the theoretical and empirical findings
in prior work (Yogatama et al., 2017; Ng and Jor-
dan, 2002).

5.2 Effect of Graphical Model Structure

There are multiple choices to factorize the joint
probability of the variables x, y, and c, which cor-
respond to different graphical models. Here we
consider other graphical model structures, namely
those shown in Figure 3. We refer to the model in
Figure 3(b) as the “joint” latent generative classi-
fier since it uses the latent variable to jointly gen-
erate x and y. We refer to the model in Figure 3(c)
as the “middle” latent generative classifier as the
latent variable separates the textual input from the
label. We use similar parameterizations for these
models as for the auxiliary latent classifier, with
conditional language models to generate x where
the embedding of the latent variable is concate-
nated to the hidden state as in Section 3.

Figure 4 shows the comparison of the standard
and the three latent generative classifiers on Yelp
Review Polarity, AGNews, and DBpedia.4 We
observe that the auxiliary model consistently per-
forms best, while the other two latent generative

4Similar trends are observed for all datasets, so we only
show three for brevity.

5 20 100 1k all
Yelp P +6.4 +8.2 +6.6 +8.6 +3.4
Yelp F +4.7 +7.7 +11.3 +9.0 +11.8

AGNews +13.4 +19.9 +27.9 +1.8 +0.4
Sogou +22.3 +24.0 +13.9 +3.3 +2.8
Yahoo +8.4 +17.7 +22.5 +11.1 +3.6

DBpedia +44.6 +44.6 +28.4 +8.8 +2.3

Table 2: Changes in accuracy when adding a directed
edge from the label to the input, i.e., the improvement
in accuracy when moving from the middle to the hierar-
chical latent generative classifier. Each column shows
a different number of training instances per class.

classifiers do not consistently improve over the
standard generative classifier. On DBpedia, we
see surprisingly poor performance when adding
latent variables suboptimally. This suggests that
the choice of where to include latent variables has
a significant impact on performance.

Dependency between label and input variable.
We observe that the most prominent difference
between the auxiliary and the other two latent-
variable models is that the label variable y is di-
rectly linked to the input variable x in the auxil-
iary model, which is also the case in the standard
generative model.

In order to verify the importance of this direct
dependency between the label and input, we create
a new latent-variable model by adding a directed
edge between y and x to the middle latent genera-
tive model. We refer to this model as the “hierar-
chical” latent generative classifier, which is shown
in Figure 3(d). The results in Table 2 show the
performance gains after adding this edge, which
are all positive and sometimes very large. The re-
sulting hierarchical model is very close in perfor-
mance to the auxiliary model, which is unsurpris-
ing because these two models differ only in the
presence of the edge from y to c.

5.3 Effect of Latent Variables
We conduct a comparison to demonstrate that the
performance gains are due to the latent-variable
structure instead of an increased number of param-
eters when adding the latent variables.5

For the latent generative classifier, we choose
10 latent variable values with embeddings of di-

5The results in the preceding sections use the models with
configurations tuned on the development sets. We follow the
practice of Yogatama et al. (2017) and fix label dimensional-
ity to 100, as described in Section 4.2. The only tuned hyper-
parameters are the number of latent variable values and the
dimensions of their embeddings.



512

number of instances per class

%
 a

cc
ur

ac
y

50

60

70

80

90

5 20 100 1k all

gen middle gen joint gen aux gen

(a) Yelp Review Polarity

number of instances per class

20

40

60

80

100

5 20 100 1k all

gen middle gen joint gen aux gen

(b) AGNews

number of instances per class

20

40

60

80

100

5 20 100 1k all

gen middle gen joint gen aux gen

(c) DBpedia

Figure 4: Comparison of generative classifier (gen) and latent generative classifiers (middle gen, joint gen, aux
gen).

5 20 100 1k all

Yelp P

Gen. 55.4 59.0 69.8 78.6 87.5
Gen. PC 55.4 58.4 69.5 78.5 87.5
Lat. 62.5 66.6 73.5 81.2 87.3
Lat. PC 62.2 66.2 73.0 80.8 87.1

AGNews

Gen. 35.1 37.8 68.7 84.0 90.0
Gen. PC 33.7 37.8 68.4 83.2 89.8
Lat. 47.4 61.4 78.5 86.1 90.1
Lat. PC 47.2 61.4 78.3 84.5 90.1

Table 3: Accuracy comparison of standard generative
(Gen.) and latent (Lat.) classifiers under earlier exper-
imental configurations and parameter-comparison con-
figurations (PC). When controlling for the number of
parameters, the latent classifier still outperforms the
standard generative classifier, which indicates the per-
formance gains are due to the latent variables instead
of an increased number of parameters.

mensionality 10, and a label dimensionality of 100
(Lat. PC in Table 3). For the standard genera-
tive classifier, we choose a label dimensionality of
110 (Gen. PC in Table 3). So, the numbers of
parameters are comparable, since we ensure the
same number of parameters in the “output” word
embeddings in the softmax layer of the language
model, which is the decision that most strongly af-
fects the number of parameters.

Table 3 shows the results with different config-
urations, including the choices mentioned above
as well as the results from earlier configurations
mentioned in the paper. We observe that the latent
generative classifiers still perform better in terms
of data efficiency, which shows that the latent-
variable structure accounts for the performance
gains.

5.4 Learning via Expectation-Maximization

The results reported before are evaluated on the
classifiers trained by directly maximizing the log
marginal likelihood via gradient-based optimiza-

AGNews Sogou
Direct EM Direct EM

5 47.4 (62) 47.4 (62) 61.1 (144) 61.2 (147)
20 61.4 (72) 61.1 (69) 72.1 (30) 72.2 (29)
100 78.5 (10) 78.5 (10) 81.4 (11) 81.4 (11)
1k 86.1 (18) 86.1 (18) 86.4 (9) 85.9 (9)
all 90.1 (7) 90.0 (5) 86.9 (0) 86.9 (0)

Table 4: Comparison of the classification accuracy and
convergence speed of the classifiers trained with di-
rect optimization (Direct) of the log marginal likeli-
hood and the EM algorithm (EM). The numbers in-
side the parentheses are the numbers of epochs required
to reach the classification accuracies listed outside the
parentheses.

tion. In addition, we train our latent generative
classifiers with the EM algorithm (Salakhutdinov
et al., 2003). More training details can be found in
Appendix B.

To speed convergence, we use a mini-batch ver-
sion of EM, updating the parameters after each
mini-batch. Our results in Table 4 show that the
direct approach and the EM algorithm have simi-
lar performance in terms of classification accuracy
and convergence speed in optimizing the parame-
ters of our latent models. Similar trends appear for
the other datasets.

6 Analysis

6.1 Interpretation of Latent Variables

We take the strongest latent-variable model, the
auxiliary latent generative classifier, and analyze
the relationship among the latent, input, and la-
bel variables. We use the AGNews dataset, which
contains 4 categories: world, sports, business, and
sci/tech. The classifier we analyze has 10 values
for the latent variable and is trained on a training
set containing 1k instances per class.

We first investigate the relationship between



513

the latent variable and the label by counting co-
occurrences. For each instance in the development
set, we calculate the posterior probability distri-
bution over the latent variable, and pick the value
with the highest probability as the preferred latent
variable value for that instance. This is reasonable
since in our trained model, the posterior distribu-
tion over latent variable values is peaked. Then we
categorize the data by their preferred latent vari-
able values and count the gold standard labels in
each group. We observe that the labels are nearly
uniformly distributed in each latent variable value,
suggesting that the latent variables are not obvi-
ously being used to encode information about the
label.

Thus, we hypothesize there should be informa-
tion other than that pertaining to the label that
causes the data to cluster into different latent vari-
able values. We study the differences of the input
texts among the 10 clusters by counting frequent
words, manually scanning through instances, and
looking for high-level similarities and differences.
We report our manual labeling for the latent vari-
able values in Table 5.

For example, value 1 is mostly associated with
future and progressive tenses; the words “will”,
“next”, and “new” appear frequently. Value 2
tends to contain past and perfect verb tenses
(the phrases “has been” and “have been” ap-
pear frequently). Value 3 contains region names
like “VANCOUVER”, “LONDON”, and “New
Brunswick”, while value 7 contains country-
oriented terms like “Indian”, “Russian”, “North
Korea”, and “Ireland”. Our choice of only 10
latent variable values causes them to capture the
coarse-grained patterns we observe here. It is pos-
sible that more fine-grained differences would ap-
pear with a larger number of values.

6.2 Generation with Latent Variables

Another advantage of generative models is that
they can be used to generate data in order to bet-
ter understand what they have learned, especially
in seeking to understand latent variables. We use
our auxiliary latent generative classifier to gener-
ate multiple samples by setting the latent variable
and the label. Instead of the soft mixture of dis-
crete latent variable values that is used in classifi-
cation (since we marginalize over the latent vari-
able at test time), here we choose a single latent
variable value when generating a textual sample.

To increase generation diversity, we use
temperature-based sampling when choosing the
next word, where higher temperature leads to
higher variety and more noise. We set the temper-
ature to 0.6. Note that the latent-variable model
here is trained on only 4000 instances (1k for each
label) from AGNews, so the generated samples do
suffer from the small size of data used in training
the language model. Table 6 shows some gener-
ated examples. We observe that different combi-
nations of the latent variable and label lead to gen-
erations that comport with both the labels and our
interpretations of the latent variable values.

We speculate that the reason our generative
classifiers perform well in the data-efficient setting
is that they are better able to understand the data
via language modeling rather than directly opti-
mizing the classification objective. Our generated
samples testify to the ability of generative classi-
fiers to model the underlying data distribution even
with only 4000 instances.

7 Related Work

Supervised Generative Models. Generative
models have traditionally been used in super-
vised settings for many NLP tasks, including
naive Bayes and other models for text classi-
fication (Maron, 1961; Yogatama et al., 2017),
Markov models for sequence labeling (Church,
1988; Bikel et al., 1999; Brants, 2000; Zhou
and Su, 2002), and probabilistic models for
parsing (Magerrnan and Marcus, 1991; Black
et al., 1993; Eisner, 1996; Collins, 1997; Dyer
et al., 2016). Recent work in generative models
for question answering (Lewis and Fan, 2019)
learns to generate questions instead of directly
penalizing prediction errors, which encourages
the model to better understand the input data.
Our work is directly inspired by that of Yogatama
et al. (2017), who build RNN-based generative
text classifiers and show scenarios where they can
be empirically useful.

Text Classification. Traditionally, linear clas-
sifiers (McCallum and Nigam, 1998; Joachims,
1998; Fan et al., 2008) have been used for text
classification. Recent work has scaled up text clas-
sification to larger datasets with models based on
logistic regression (Joulin et al., 2017), convolu-
tional neural networks (Kim, 2014; Zhang et al.,
2015; Conneau et al., 2017), and recurrent neural
networks (Xiao and Cho, 2016; Yogatama et al.,



514

id description examples

1 future/progressive tenses ... Commission is likely to follow opinion in the U.S. on the merger suit ...... to increase computer software exports is beginning to show results ...

2 past/perfect tense A screensaver targeting spam-related websites appears to have been too successful .Universal has signed a handful of artists to a digital-only record label . ..

3 region names, locations Newcastle manager Bobby Robson ... relieved of his duties ... Newcastle announced ...ABUJA ... its militias in Darfur before they would sign ...
4 mixture

5 abbreviations St. Louis advanced to the N.L. championship series for the third time in five years ...UAL ( UALAQ.OB : OTC BB - news - research ) ... ( UAIRQ.OB : OTC BB ...

6 numbers, money-related ...challenge larger rivals in the fast-growing 2.1 billion-a-year sleep aid market ....... to a $ 25,000 prize , and more importantly , into the history books ...

7 dates ... an Egyptian diplomat said on Friday, and the abduction of ... earlier this month .... expected Monday or Tuesday , ... doctors and nurses off for the holiday weekend ...

8 country-oriented terms Rwandan President ... in the Democratic Republic of the Congo after ...Pope John Paul II issued a new appeal for peace in Iraq and the Middle East ...
9 mixure

10 symbols, links ... A HREF = ” http : / / www.reuters.co.uk / financeQuoteLookup.jhtml ...& lt ; strong & gt ; Analysis & lt ; / strong & gt ; Contracting out the blame ...

Table 5: Latent variable values (“id”), our manually-defined descriptions, and examples of instances associated to
them. Boldface is used to highlight cues to our labeling. We use the term “mixture” when we did not find clear
signals to interpret the latent variable value.

Latent variable id = 3: region names, locations
world BEIJING ( Reuters ) - Oklahoma supporters unemployment claims that he plans to trying to restore access

next season ’s truce by ruling , saying a major parliament .
sport The Dallas Cowboys today continued advantage today with Miami and the Hurricanes had to get the big

rotation for the first time this year .
business Las Vegas took one more high-stepping kick across the pond as casino operator Caesars Entertainment Inc .
sci/tech SAN FRANCISCO - Sun Microsystems on Monday will surely offer the deal to sell up pioneer members into

two years and archiving .
Latent variable id = 6: numbers, money-related
world An Israeli helicopter gunship fired a missile among $ 5 million in to Prime Minister Ariel Sharon on the streets

of U.S. warming may not be short-lived .
sport On Wednesday it would win the disgruntled one of the season opener in a # 36 ; 8.75 billion of World Cup final

day for second .
business Reuters - U.S. drug company Biogen Idec is considering an all-share bid of more than 8.5 billion euros ( # 36

; 10.6 billion ) for Irish peer Elan , a newspaper reported on Sunday .
sci/tech The JVC Everio GZ-MC100 ( $ 1199.95 ) and GZ-MC200 ( $ 1299.95 ) will use 4GB Microdrive cards , which

are removable hard drives measuring 1.5 inches square , but will also lost vital ” fans to recently over .
Latent variable id = 10: symbols, links
world A German court is set to hear all its secular oil , and western Kerik in Fallujah . & lt ; A HREF = ” http : / /

www.investor.reuters.com / FullQuote.aspx ? ticker = Agency target = Army ...
sport White Sox to an overpowering 49-0 victory over The world championship game . & lt ; br & gt ; & lt ; br &

gt ; Comcast SportsNet
business NEW YORK ( Reuters ) - U.S. stocks climbed on Monday , with a steep decline in commodity prices and

lower crude oil dented shares of Alcoa Inc . & lt ; A HREF = ” http : / / www.investor.reuters.com /
FullQuote.aspx ? ticker = GDT.N target = / stocks / quickinfo / fullquote ” & gt ; & lt ; / A & gt ;.

sci/tech Spyware problems introduced a radio frequency code Thursday . & lt ; FONT face = ” verdana , MS Sans
Serif , arial , helvetica ” size = ” -2 ” color = ” # 666666 ” & gt ; & lt ; B & gt ; -washingtonpost.com & lt
; / B & gt ; & lt

Table 6: Generated examples by controlling the latent variables and labels (world, sport, business, sci/tech) with
our latent classifier trained on a small subset of the AGNews dataset.

2017), the latter of which is most closely-related
to our models.

Latent-variable Models. Latent variables have
been widely used in both generative and dis-
criminative models to learn rich structure from
data (Petrov and Klein, 2007, 2008; Blunsom
et al., 2008; Yu and Joachims, 2009; Morency

et al., 2008). Recent work in neural networks
has shown that introducing latent variables leads
to higher representational capacity (Kingma and
Welling, 2014; Chung et al., 2015; Burda et al.,
2016; Ji et al., 2016). However, unlike varia-
tional autoencoders (Kingma and Ba, 2015) and
related work that use continuous latent variables,



515

our model is more similar to recent efforts that
combine neural architectures with discrete latent
variables and end-to-end training (Ji et al., 2016;
Kim et al., 2017; Kong et al., 2017; Chen and Gim-
pel, 2018; Wiseman et al., 2018, inter alia).

8 Discussion and Future Work

An alternative solution to the small-data setting
is to use language representations pretrained on
large, unannotated datasets (Mikolov et al., 2013;
Pennington et al., 2014; Devlin et al., 2019). In
other experiments not reported here, we found that
using pretrained word embeddings leads to larger
performance improvements for the discriminative
classifiers than the generative ones.

Future work will explore the performance of
latent generative classifiers in other challenging
experimental conditions, including testing robust-
ness to data shift and adversarial examples as well
as zero-shot learning. Another thread of future
work is to explore the performance of discrim-
inative models with latent variables, and inves-
tigate combining pretrained representations with
both generative and discriminative classifiers.

9 Conclusion

We focused in this paper on improving the data
efficiency of generative text classifiers by intro-
ducing discrete latent variables into the genera-
tive story. Our experimental results demonstrate
that, with small annotated training data, latent
generative classifiers have larger and more stable
performance gains over discriminative classifiers
than their standard generative counterparts. Anal-
ysis reveals interpretable latent variable values and
generated samples, even with very small training
sets.

Acknowledgments

We would like to thank Lingyu Gao, Qingming
Tang, and Lifu Tu for helpful discussions, Michael
Maire and Janos Simon for their useful feedback,
the anonymous reviewers for their comments that
improved this paper, and Google for a faculty re-
search award to K. Gimpel that partially supported
this research.

References
Daniel M. Bikel, Richard Schwartz, and Ralph M.

Weischedel. 1999. An algorithm that learns what’s
in a name. Machine learning, 34(1-3):211–231.

Ezra Black, Fred Jelinek, John Lafrerty, David M.
Magerman, Robert Mercer, and Salim Roukos.
1993. Towards history-based grammars: Using
richer models for probabilistic parsing. In 31st An-
nual Meeting of the Association for Computational
Linguistics, pages 31–37, Columbus, Ohio, USA.
Association for Computational Linguistics.

Phil Blunsom, Trevor Cohn, and Miles Osborne. 2008.
A discriminative latent variable model for statisti-
cal machine translation. In Proceedings of ACL-08:
HLT, pages 200–208, Columbus, Ohio. Association
for Computational Linguistics.

Thorsten Brants. 2000. TnT – a statistical part-
of-speech tagger. In Sixth Applied Natural Lan-
guage Processing Conference, pages 224–231, Seat-
tle, Washington, USA. Association for Computa-
tional Linguistics.

Yuri Burda, Roger Grosse, and Ruslan Salakhutdinov.
2016. Importance weighted autoencoders. In Pro-
ceedings of International Conference on Learning
Representations (ICLR).

Mingda Chen and Kevin Gimpel. 2018. Smaller text
classifiers with discriminative cluster embeddings.
In Proceedings of the 2018 Conference of the North
American Chapter of the Association for Compu-
tational Linguistics: Human Language Technolo-
gies, Volume 2 (Short Papers), pages 739–745, New
Orleans, Louisiana. Association for Computational
Linguistics.

Junyoung Chung, Kyle Kastner, Laurent Dinh, Kratarth
Goel, Aaron C Courville, and Yoshua Bengio. 2015.
A recurrent latent variable model for sequential data.
In Advances in neural information processing sys-
tems, pages 2980–2988.

Kenneth Ward Church. 1988. A stochastic parts pro-
gram and noun phrase parser for unrestricted text.
In Second Conference on Applied Natural Language
Processing, pages 136–143, Austin, Texas, USA.
Association for Computational Linguistics.

Michael Collins. 1997. Three generative, lexicalised
models for statistical parsing. In 35th Annual Meet-
ing of the Association for Computational Linguis-
tics and 8th Conference of the European Chapter
of the Association for Computational Linguistics,
pages 16–23, Madrid, Spain. Association for Com-
putational Linguistics.

Alexis Conneau, Holger Schwenk, Loı̈c Barrault, and
Yann Lecun. 2017. Very deep convolutional net-
works for text classification. In Proceedings of the
15th Conference of the European Chapter of the
Association for Computational Linguistics: Volume
1, Long Papers, pages 1107–1116, Valencia, Spain.
Association for Computational Linguistics.

https://doi.org/10.3115/981574.981579
https://doi.org/10.3115/981574.981579
https://www.aclweb.org/anthology/P08-1024
https://www.aclweb.org/anthology/P08-1024
https://doi.org/10.3115/974147.974178
https://doi.org/10.3115/974147.974178
https://doi.org/10.18653/v1/N18-2116
https://doi.org/10.18653/v1/N18-2116
https://doi.org/10.3115/974235.974260
https://doi.org/10.3115/974235.974260
https://doi.org/10.3115/976909.979620
https://doi.org/10.3115/976909.979620
https://www.aclweb.org/anthology/E17-1104
https://www.aclweb.org/anthology/E17-1104


516

Arthur P. Dempster, Nan M. Laird, and Donald B. Ru-
bin. 1977. Maximum likelihood from incomplete
data via the EM algorithm. Journal of the Royal Sta-
tistical Society: Series B (Methodological), 39(1):1–
22.

Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li,
and Li Fei-Fei. 2009. ImageNet: A large-scale hier-
archical image database. In 2009 IEEE conference
on computer vision and pattern recognition, pages
248–255. Ieee.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2019. BERT: Pre-training of
deep bidirectional transformers for language under-
standing. In Proceedings of the 2019 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, Volume 1 (Long and Short Papers),
pages 4171–4186, Minneapolis, Minnesota. Associ-
ation for Computational Linguistics.

Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros,
and Noah A. Smith. 2016. Recurrent neural network
grammars. In Proceedings of the 2016 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, pages 199–209, San Diego, Califor-
nia. Association for Computational Linguistics.

Jason M. Eisner. 1996. Three new probabilistic models
for dependency parsing: An exploration. In COL-
ING 1996 Volume 1: The 16th International Confer-
ence on Computational Linguistics.

Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh, Xiang-
Rui Wang, and Chih-Jen Lin. 2008. LIBLINEAR:
A library for large linear classification. Journal of
machine learning research, 9(Aug):1871–1874.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Yangfeng Ji, Gholamreza Haffari, and Jacob Eisen-
stein. 2016. A latent variable recurrent neural net-
work for discourse-driven language models. In Pro-
ceedings of the 2016 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
332–342, San Diego, California. Association for
Computational Linguistics.

Thorsten Joachims. 1998. Text categorization with
support vector machines: Learning with many rel-
evant features. In European conference on machine
learning, pages 137–142. Springer.

Armand Joulin, Edouard Grave, Piotr Bojanowski, and
Tomas Mikolov. 2017. Bag of tricks for efficient
text classification. In Proceedings of the 15th Con-
ference of the European Chapter of the Association
for Computational Linguistics: Volume 2, Short Pa-
pers, pages 427–431, Valencia, Spain. Association
for Computational Linguistics.

Yoon Kim. 2014. Convolutional neural networks
for sentence classification. In Proceedings of the
2014 Conference on Empirical Methods in Natural
Language Processing (EMNLP), pages 1746–1751,
Doha, Qatar. Association for Computational Lin-
guistics.

Yoon Kim, Carl Denton, Luong Hoang, and Alexan-
der M. Rush. 2017. Structured attention net-
works. In Proceedings of International Conference
on Learning Representations (ICLR).

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In Proceedings
of International Conference on Learning Represen-
tations (ICLR).

Diederik P. Kingma and Max Welling. 2014. Auto-
encoding variational Bayes. In Proceedings of Inter-
national Conference on Learning Representations
(ICLR).

Lingpeng Kong, Chris Dyer, and Noah A. Smith. 2017.
Segmental recurrent neural networks. In Proceed-
ings of International Conference on Learning Rep-
resentations (ICLR).

Mike Lewis and Angela Fan. 2019. Generative ques-
tion answering: Learning to answer the whole ques-
tion. In Proceedings of International Conference on
Learning Representations (ICLR).

Tsung-Yi Lin, Michael Maire, Serge Belongie, James
Hays, Pietro Perona, Deva Ramanan, Piotr Dollár,
and C Lawrence Zitnick. 2014. Microsoft COCO:
Common objects in context. In European confer-
ence on computer vision, pages 740–755. Springer.

David M. Magerrnan and Mitchell P. Marcus. 1991.
Pearl: A probabilistic chart parser. In Fifth Confer-
ence of the European Chapter of the Association for
Computational Linguistics, Berlin, Germany. Asso-
ciation for Computational Linguistics.

Mitchell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a large annotated
corpus of English: The Penn Treebank. Computa-
tional Linguistics, 19(2):313–330.

M. E. Maron. 1961. Automatic indexing: An experi-
mental inquiry. J. ACM, 8(3):404–417.

Andrew McCallum and Kamal Nigam. 1998. A com-
parison of event models for naive Bayes text classi-
fication. In AAAI-98 Workshop on Learning for Text
Categorization, volume 752, pages 41–48.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111–3119.

Louis-Philippe Morency, Xu Sun, Daisuke
Okanoharay, and Jun’ichi Tsujii. 2008. Mod-
eling Latent-Dynamic in Shallow Parsing: A Latent

https://doi.org/10.18653/v1/N19-1423
https://doi.org/10.18653/v1/N19-1423
https://doi.org/10.18653/v1/N19-1423
https://doi.org/10.18653/v1/N16-1024
https://doi.org/10.18653/v1/N16-1024
https://www.aclweb.org/anthology/C96-1058
https://www.aclweb.org/anthology/C96-1058
https://doi.org/10.18653/v1/N16-1037
https://doi.org/10.18653/v1/N16-1037
https://www.aclweb.org/anthology/E17-2068
https://www.aclweb.org/anthology/E17-2068
https://doi.org/10.3115/v1/D14-1181
https://doi.org/10.3115/v1/D14-1181
https://www.aclweb.org/anthology/E91-1004
https://www.aclweb.org/anthology/J93-2004
https://www.aclweb.org/anthology/J93-2004
https://doi.org/10.1145/321075.321084
https://doi.org/10.1145/321075.321084


517

Conditional Model with Improved Inference. In The
22nd International Conference on Computational
Linguistics (COLING 2008), Manchester, UK.

Andrew Y. Ng and Michael I. Jordan. 2002. On dis-
criminative vs. generative classifiers: A compari-
son of logistic regression and naive Bayes. In Ad-
vances in neural information processing systems,
pages 841–848.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 1532–1543, Doha,
Qatar. Association for Computational Linguistics.

Slav Petrov and Dan Klein. 2007. Improved infer-
ence for unlexicalized parsing. In Human Language
Technologies 2007: The Conference of the North
American Chapter of the Association for Computa-
tional Linguistics; Proceedings of the Main Confer-
ence, pages 404–411, Rochester, New York. Associ-
ation for Computational Linguistics.

Slav Petrov and Dan Klein. 2008. Discriminative
log-linear grammars with latent variables. In Ad-
vances in neural information processing systems,
pages 1153–1160.

Ruslan Salakhutdinov, Sam Roweis, and Zoubin
Ghahramani. 2003. Relationship between gradient
and EM steps in latent variable models.

Sam Wiseman, Stuart Shieber, and Alexander Rush.
2018. Learning neural templates for text genera-
tion. In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Process-
ing, pages 3174–3187, Brussels, Belgium. Associ-
ation for Computational Linguistics.

Yijun Xiao and Kyunghyun Cho. 2016. Efficient
character-level document classification by combin-
ing convolution and recurrent layers. arXiv preprint
arXiv:1602.00367.

Dani Yogatama, Chris Dyer, Wang Ling, and Phil Blun-
som. 2017. Generative and discriminative text clas-
sification with recurrent neural networks. arXiv
preprint arXiv:1703.01898.

Chun-Nam John Yu and Thorsten Joachims. 2009.
Learning structural SVMs with latent variables. In
ICML, volume 2, page 5.

Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015.
Character-level convolutional networks for text clas-
sification. In Proceedings of the 28th International
Conference on Neural Information Processing Sys-
tems - Volume 1, NIPS’15, pages 649–657, Cam-
bridge, MA, USA. MIT Press.

GuoDong Zhou and Jian Su. 2002. Named entity
recognition using an HMM-based chunk tagger. In

Proceedings of the 40th Annual Meeting of the As-
sociation for Computational Linguistics, pages 473–
480, Philadelphia, Pennsylvania, USA. Association
for Computational Linguistics.

Victor Zue, Stephanie Seneff, and James Glass. 1990.
Speech database development at MIT: TIMIT and
beyond. Speech communication, 9(4):351–356.

https://doi.org/10.3115/v1/D14-1162
https://doi.org/10.3115/v1/D14-1162
https://www.aclweb.org/anthology/N07-1051
https://www.aclweb.org/anthology/N07-1051
https://doi.org/10.18653/v1/D18-1356
https://doi.org/10.18653/v1/D18-1356
http://dl.acm.org/citation.cfm?id=2969239.2969312
http://dl.acm.org/citation.cfm?id=2969239.2969312
https://doi.org/10.3115/1073083.1073163
https://doi.org/10.3115/1073083.1073163

