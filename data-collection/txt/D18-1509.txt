











































A Tree-based Decoder for Neural Machine Translation


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 4772–4777
Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics

4772

A Tree-based Decoder for Neural Machine Translation

Xinyi Wang1, Hieu Pham1,2, Pengcheng Yin1, Graham Neubig1

{xinyiw1,hyhieu,pcyin,gneubig}@cs.cmu.edu

1Language Technology Institute, Carnegie Mellon University, Pittsburgh, PA 15213
2Google Brain, Mountain View, CA 94043

Abstract
Recent advances in Neural Machine Transla-
tion (NMT) show that adding syntactic infor-
mation to NMT systems can improve the qual-
ity of their translations. Most existing work
utilizes some specific types of linguistically-
inspired tree structures, like constituency and
dependency parse trees. This is often done via
a standard RNN decoder that operates on a lin-
earized target tree structure. However, it is an
open question of what specific linguistic for-
malism, if any, is the best structural represen-
tation for NMT. In this paper, we (1) propose
an NMT model that can naturally generate the
topology of an arbitrary tree structure on the
target side, and (2) experiment with various
target tree structures. Our experiments show
the surprising result that our model delivers the
best improvements with balanced binary trees
constructed without any linguistic knowledge;
this model outperforms standard seq2seq mod-
els by up to 2.1 BLEU points, and other meth-
ods for incorporating target-side syntax by up
to 0.7 BLEU.1

1 Introduction
Most NMT methods use sequence-to-sequence
(seq2seq) models, taking in a sequence of
source words and generating a sequence of tar-
get words (Kalchbrenner and Blunsom, 2013;
Sutskever et al., 2014; Bahdanau et al., 2015).
While seq2seq models can implicitly discover syn-
tactic properties of the source language (Shi et al.,
2016), they do not explicitly model and leverage
such information. Motivated by the success of
adding syntactic information to Statistical Machine
Translation (SMT) (Galley et al., 2004; Menezes
and Quirk, 2007; Galley et al., 2006), recent works
have established that explicitly leveraging syn-
tactic information can improve NMT quality, ei-

1Our code is available at https://github.com/
cindyxinyiwang/TrDec_pytorch.

ther through syntactic encoders (Li et al., 2017;
Eriguchi et al., 2016), multi-task learning objec-
tives (Chen et al., 2017; Eriguchi et al., 2017), or
direct addition of syntactic tokens to the target se-
quence (Nadejde et al., 2017; Aharoni and Gold-
berg, 2017). However, these syntax-aware mod-
els only employ the standard decoding process of
seq2seq models, i.e. generating one target word at a
time. One exception is Wu et al. (2017), which uti-
lizes two RNNs for generating target dependency
trees. Nevertheless, Wu et al. (2017) is specifi-
cally designed for dependency tree structures and
is not trivially applicable to other varieties of trees
such as phrase-structure trees, which have been
used more widely in other works on syntax-based
machine translation. One potential reason for the
dearth of work on syntactic decoders is that such
parse tree structures are not friendly to recurrent
neural networks (RNNs).

In this paper, we propose TrDec, a method for
incorporating tree structures in NMT. TrDec simul-
taneously generates a target-side tree topology and
a translation, using the partially-generated tree to
guide the translation process (§ 2). TrDec employs
two RNNs: a rule RNN, which tracks the topology
of the tree based on rules defined by a Context Free
Grammar (CFG), and a word RNN, which tracks
words at the leaves of the tree (§ 3). This model
is similar to neural models of tree-structured data
from syntactic and semantic parsing (Dyer et al.,
2016; Alvarez-Melis and Jaakkola, 2017; Yin and
Neubig, 2017), but with the addition of the word
RNN, which is especially important for MT where
fluency of transitions over the words is critical.

TrDec can generate any tree structure that can
be represented by a CFG. These structures include
linguistically-motivated syntactic tree representa-
tions, e.g. constituent parse trees, as well as syntax-
free tree representations, e.g. balanced binary trees
(§ 4). This flexibility of TrDec allows us to com-

https://github.com/cindyxinyiwang/TrDec_pytorch
https://github.com/cindyxinyiwang/TrDec_pytorch


4773

Figure 1: An example generation process of TrDec. Left: A target parse tree. The green squares represent preterminal
nodes. Right: How our RNNs generate the parse tree on the left. The blue cells represent the activities of the rule RNN, while
the grey cells represent the activities of the word RNN. heopi and heosi are the end-of-phrase and end-of-sentence tokens. Best
viewed in color.

pare and contrast different structural representa-
tions for NMT.

In our experiments (§ 5), we evaluate TrDec us-
ing both syntax-driven and syntax-free tree repre-
sentations. We benchmark TrDec on three tasks:
Japanese-English and German-English translation
with medium-sized datasets, and Oromo-English
translation with an extremely small dataset. Our
findings are surprising – TrDec performs well, but
it performs the best with balanced binary trees con-
structed without any linguistic guidance.

2 Generation Process

TrDec simultaneously generates the target se-
quence and its corresponding tree structure. We
first discuss the high-level generation process using
an example, before describing the prediction model
(§ 3) and the types of trees used by TrDec (§ 4).

Fig. 1 illustrates the generation process of
the sentence “_The _cat _eat s _fi sh _.”,
where the sentence is split into subword units, de-
limited by the underscore “_” (Sennrich et al.,
2016). The example uses a syntactic parse tree
as the intermediate tree representation, but the pro-
cess of generating with other tree representations,
e.g. syntax-free trees, follows the same procedure.

Trees used in TrDec have two types of nodes:
terminal nodes, i.e. the leaf nodes that represent
subword units; and nonterminal nodes, i.e. the non-
leaf nodes that represent a span of subwords. Ad-
ditionally, we define a preterminal node to be a
nonterminal node whose children are all terminal
nodes. In Fig. 1 Left, the green squares represent
preterminal nodes.

TrDec generates a tree in a top-down, left-to-
right order. The generation process is guided by
a CFG over target trees, which is constructed by
taking all production rules extracted from the trees

of all sentences in the training corpus. Specifically,
a rule RNN first generates the top of the tree struc-
ture, and continues until a preterminal is reached.
Then, a word RNN fills out the words under the
preterminal. The model switches back to the rule
RNN after the word RNN finishes. This process is
illustrated in Fig. 1 Right. Details are as follows:
Step 1. The source sentence is encoded by a se-
quential RNN encoder, producing the hidden states.
Step 2. The generation starts with a derivation tree
with only a Root node. A rule RNN, initialized by
the last encoder hidden state computes the prob-
ability distribution over all CFG rules whose left
hand side (LHS) is Root, and selects a rule to apply
to the derivation. In our example, the rule RNN
selects ROOT 7! S.
Step 3. The rule RNN applies production rules to
the derivation in a top-down, left-to-right order, ex-
panding the current opening nonterminal using a
CFG rule whose LHS is the opening nonterminal.
In the next two steps, TrDec applies the rules S 7!
NP VP PUNC and NP 7! pre to the opening nonter-
minals S and NP, respectively. Note that after these
two steps a preterminal node pre is created.
Step 4a. Upon seeing a preterminal node as the
current opening nonterminal, TrDec switches to
using a word RNN, initialized by the last state of
the encoder, to populate this empty preterminal
with phrase tokens, similar to a seq2seq decoder.
For example the subword units _The and _cat are
generated by the word RNN, ending with a special
end-of-phrase token, i.e. heopi.
Step 4b. While the word RNN generates subword
units, the rule RNN also updates its own hidden
states, as illustrated by the blue cells in Fig. 1 Right.
Step 5. After the word RNN generates heopi,
TrDec switches back to the rule RNN to continue
generating the derivation from where the tree left



4774

off. In our example, this next stage is the opening
nonterminal node VP. From here, TrDec chooses
the rule VP 7! pre NP.

TrDec repeats the process above, intermingling
the rule RNN and the word RNN as described,
and halts when the rule RNN generates the end-of-
sentence token heosi, completing the derivation.

3 Model
We now describe the computations during the gen-
eration process discussed in § 2. At first, a source
sentence x, which is split into subwords, is encoded
using a standard bi-directional Long Short-Term
Memory (LSTM) network (Hochreiter and Schmid-
huber, 1997). This bi-directional LSTM outputs
a set of hidden states, which TrDec will reference
using an attention function (Bahdanau et al., 2015).

As discussed, TrDec uses two RNNs to generate
a target parse tree. In our work, both of these RNNs
use LSTMs, but with different parameters.

Rule RNN. At any time step t in the rule RNN,
there are two possible actions. If at the previous
time step t� 1, TrDec generated a CFG rule, then
the state street is computed by:

s

tree
t = LSTM([y

CFG
t�1 ; ct�1; s

tree
p ; s

word
t ], s

tree
t�1)

where yCFGt�1 is the embedding of the CFG rule at
time step t�1; ct�1 is the context vector computed
by attention at street�1, i.e. input feeding (Luong et al.,
2015); streep is the hidden state at the time step that
generates the parent of the current node in the par-
tial tree; swordt is the hidden state of the most recent
time step before t that generated a subword (note
that swordt comes from the word RNN, discussed
below); and [·] denotes a concatenation.

Meanwhile, if at the previous time step t � 1,
TrDec did not generate a CFG rule, then the update
at time step t must come from a subword being
generated by the word RNN. In that case, we also
update the rule RNN similarly by replacing the
embedding of the CFG rule with the embedding of
the subword.

Word RNN. At any time step t, if the word RNN
is invoked, its hidden state swordt is:

s

word
t = LSTM([s

tree
p ;wt�1; ct�1], s

word
t�1 ),

where streep is the hidden state of rule RNN that
generated the CFG rule above the current terminal;
wt�1 is the embedding of the word generated at
time step t � 1; and ct�1 is the attention context
computed at the previous word RNN time step t�1.

Figure 2: An example of four tree structures (Details of preter-
minals and subword units omitted for illustration purpose).

Figure 3: Conversion of a dependency tree for TrDec. Left:
original dependency tree. Right: after conversion.

Softmax. At any step t, our softmax logits are
W · tanh [street , swordt ], where W varies depending
on whether a rule or a subword unit is needed.

4 Tree Structures

Unlike prior work on syntactic decoders designed
for utilizing a specific type of syntactic informa-
tion (Wu et al., 2017), TrDec is a flexible NMT
model that can utilize any tree structure. Here we
consider two categories of tree structures:

Syntactic Trees are generated using a third-
party parser, such as Berkeley parser (Petrov et al.,
2006; Petrov and Klein, 2007). Fig. 2 Top Left
illustrates an example constituency parse tree. We
also consider a variation of standard constituency
parse trees where all of their nonterminal tags
are replaced by a null tag, which is visualized
in Fig. 2 Top Right.
In addition to constituency parse trees, TrDec can
also utilize dependency parse trees via a simple
procedure that converts a dependency tree into a
constituency tree. Specifically, this procedure cre-
ates a parent node with null tag for each word, and
then attaches each word to the parent node of its
head word while preserving the word order. An
example of this procedure is provided in Fig. 3.



4775

Balanced Binary Trees are syntax-free trees
constructed without any linguistic guidance. We
use two slightly different versions of binary trees.
Version 1 (Fig. 2 Bottom Left) is constructed by
recursively splitting the target sentence in half and
creating left and right subtrees from the left and
right halves of the sentence respectively. Version
2 (Fig. 2 Bottom Right), is constructed by apply-
ing Version 1 on a list of nodes where consecutive
words are combined together. All tree nodes in both
versions have the null tag. We discuss these con-
struction processes in more detail in Appendix A.1.

In the experiments detailed later, we evaluated
TrDec with four different settings of tree structures:
1) the fully syntactic constituency parse trees; 2)
constituency parse trees with null tags; 3) depen-
dency parse trees; 4) a concatenation of both ver-
sion 1 and version 2 of the binary trees, (which
effectively doubles the amount of the training data
and leads to slight increases in accuracy).

5 Experiments

Datasets. We evaluate TrDec on three datasets:
1) the KFTT (ja-en) dataset (Neubig, 2011),
which consists of Japanese-English Wikipedia arti-
cles; 2) the IWSLT2016 German-English (de-en)
dataset (Cettolo et al., 2016), which consists of
TED Talks transcriptions; and 3) the LORELEI
Oromo-English (or-en) dataset2, which largely con-
sists of texts from the Bible. Details are in Tab. 1.
English sentences are parsed using Ckylark (Oda
et al., 2015) for the constituency parse trees, and
Stanford Parser (de Marneffe et al., 2006; Chen and
Manning, 2014) for the dependency parse trees. We
use byte-pair encoding (Sennrich et al., 2016) with
8K merge operations on ja-en, 4K merge operations
on or-en, and 24K merge operations on de-en.

Dataset Train Dev Test

ja-en 405K 1166 1160
de-en 200K 1024 1333
or-en 6.5K 358 359

Table 1: # sentences in each dataset.

Baselines. We compare TrDec against three base-
lines: 1) seq2seq: the standard seq2seq model
with attention; 2) CCG: a syntax-aware transla-
tion model that interleaves Combinatory Categorial
Grammar (CCG) tags with words on the target side

2LDC2017E29

of a seq2seq model (Nadejde et al., 2017); 3) CCG-
null: the same model with CCG, but all syntactic
tags are replaced by a null tag; and 4) LIN: a stan-
dard seq2seq model that generates linearized parse
trees on the target side (Aharoni and Goldberg,
2017).

Results. Tab. 2 presents the performance of our
model and the three baselines. For our model, we
report the performance of TrDec-con, TrDec-con-
null, TrDec-dep, and TrDec-binary (settings 1,2,3,4
in § 4). On the low-resource or-en dataset, we ob-
serve a large variance with different random seeds,
so we run each model with 6 different seeds, and re-
port the mean and standard deviation of these runs.
TrDec-con-null and TrDec-con achieved compa-
rable results, indicating that the syntactic labels
have neither a large positive nor negative impact on
TrDec. For ja-en and or-en, syntax-free TrDec out-
performs all baselines. On de-en, TrDec loses to
CCG-null, but the difference is not statistically sig-
nificant (p > 0.1).

Model ja-en de-en or-en(mean ± std)
seq2seq 21.10 32.26 10.90± 0.57
CCG 22.44 32.84 12.55± 0.60
CCG-null 21.31 33.10 11.96± 0.57
LIN 21.55 31.79 12.66± 0.61
TrDec-con 21.59 31.93 11.43± 0.58
TrDec-con-null 22.72 31.21 11.35± 0.55
TrDec-dep 21.41 31.23 8.40± 0.5
TrDec-binary 23.14⇤ 32.65 13.10⇤⇤ ± 0.61

Table 2: BLEU scores of TrDec and other baselines. Sta-
tistical significance is indicated with ⇤ (p < 0.05) and ⇤⇤
(p < 0.001), compared with the best baseline.

Length Analysis. We performed a variety of
analyses to elucidate the differences between the
translations of different models, and the most con-
clusive results were through analysis based on the
length of the translations. First, we categorize the
ja-en test set into buckets by length of the refer-
ence sentences, and compare the models for each
length category. Fig. 4 shows the gains in BLEU
score over seq2seq for the tree-based models. Since
TrDec-con outperforms TrDec-dep for all datasets,
we only focus on TrDec-con for analyzing TrDec’s
performance with syntactic trees. The relative per-
formance of CCG decreases on long sentences.
However, TrDec, with both parse trees and syntax-
free binary trees, delivers more improvement on
longer sentences. This indicates that TrDec is bet-



4776

ter at capturing long-term dependencies during de-
coding. Surprisingly, TrDec-binary, which does
not utilize any linguistic information, outperforms
TrDec-con for all sentence length categories.

Second, Fig. 5 shows a histogram of translations
by the length difference between the generated out-
put and the reference. This provides an explanation
of the difficulty of using parse trees. Ideally, this
distribution will be focused around zero, indicat-
ing that the MT system is generating translations
about the same length as the reference. However,
the distribution of TrDec-con is more spread out
than TrDec-binary, which indicates that it is more
difficult for TrDec-con to generate sentences with
appropriate target length. This is probably because
constituency parse trees of sentences with similar
number of words can have very different depth, and
thus larger variance in the number of generation
steps, likely making it difficult for the MT model to
plan the sentence structure a-prior before actually
generating the child sentences.

< 15 15� 25 25� 35 > 35
Sentence Length

�1

0

1

2

G
a
i
n
i
n
B
L
E
U

TrDec-binary

TrDec-con

CCG

Figure 4: The gains of BLEU score over seq2seq.

-8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8
Length Di↵erence from Reference

50

100

150

Se
nt
en
ce

C
ou
nt

TrDec-binary

TrDec-con

CCG

Figure 5: Distribution of length difference from reference.

6 Conclusion
We propose TrDec, a novel tree-based decoder for
NMT, that generates translations along with the tar-
get side tree topology. We evaluate TrDec on both
linguistically-inspired parse trees and synthetic,
syntax-free binary trees. Our model, when used
with synthetic balanced binary trees, outperforms
CCG, the existing state-of-the-art in incorporating
syntax in NMT models.

The interesting result that syntax-free trees out-
perform their syntax-driven counterparts elicits a

natural question for future work: how do we bet-
ter model syntactic structure in these models? It
would also be interesting to study the effect of us-
ing source-side syntax together with the target-side
syntax supported by TrDec.

Acknowledgements

This material is based upon work supported
in part by the Defense Advanced Research
Projects Agency Information Innovation Office
(I2O) Low Resource Languages for Emergent In-
cidents (LORELEI) program under Contract No.
HR0011-15-C0114, and the National Science Foun-
dation under Grant No. 1815287. The views and
conclusions contained in this document are those
of the authors and should not be interpreted as rep-
resenting the official policies, either expressed or
implied, of the U.S. Government. The U.S. Gov-
ernment is authorized to reproduce and distribute
reprints for Government purposes notwithstanding
any copyright notation here on.

References
Roee Aharoni and Yoav Goldberg. 2017. Towards

string-to-tree neural machine translation. In ACL.

David Alvarez-Melis and Tommi S. Jaakkola. 2017.
Tree-structured decoding with doubly recurrent neu-
ral network. In ICLR.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In ICLR.

M. Cettolo, J. Niehues, S. Stuker, L. Bentivogli, R. Cat-
toni, and M. Federico. 2016. The iwslt 2016 evalua-
tion campaign. In IWSLT.

Danqi Chen and Christopher D. Manning. 2014. A
fast and accurate dependency parser using neural net-
works. In ACL.

Huadong Chen, Shujian Huang, David Chiang, and Ji-
ajun Chen. 2017. Improved neural machine transla-
tion with a syntax-aware encoder and decoder. In
ACL.

Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros,
and Noah A. Smith. 2016. Recurrent neural network
grammars. In ACL.

Akiko Eriguchi, Kazuma Hashimoto, and Yoshimasa
Tsuruoka. 2016. Tree-to-sequence attentional neural
machine translation. In ACL.

Akiko Eriguchi, Yoshimasa Tsuruoka, and Kyunghyun
Cho. 2017. Learning to parse and translate improves
neural machine translation. In ACL.



4777

Michel Galley, Jonathan Graehl, Kevin Knight, Daniel
Marcu, Steve DeNeefe, Wei Wang, and Ignacio
Thayer. 2006. Scalable inference and training of
context-rich syntactic translation models. In ACL.

Michel Galley, Mark Hopkins, Kevin Knight, and
Daniel Marcu. 2004. What’s in a translation rule?
In NAACL.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long
short-term memory. In Neural Computations.

Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent
continuous translation models. In EMNLP.

Junhui Li, Xiong Deyi, Zhaopeng Tu, Muhua Zhu, Min
Zhang, and Guodong Zhou. 2017. Modeling source
syntax for neural machine translation. In ACL.

Minh-Thang Luong, Hieu Pham, and Christopher D.
Manning. 2015. Effective approaches to attention-
based neural machine translation. In EMNLP.

Marie-Catherine de Marneffe, Bill MacCartney, and
Christopher D. Manning. 2006. Generating typed
dependency parses from phrase structure parses. In
LREC.

Arul Menezes and Chris Quirk. 2007. Using depen-
dency order templates to improve generality in trans-
lation. In WMT.

Maria Nadejde, Siva Reddy, Rico Sennrich, Tomasz
Dwojak, Marcin Junczys-Dowmunt, Philipp Koehn,
and Alexandra Birch. 2017. Predicting target lan-
guage CCG supertags improves neural machine
translation. In WMT.

Graham Neubig. 2011. The Kyoto free translation task.
http://www.phontron.com/kftt.

Yusuke Oda, Graham Neubig, Sakriani Sakti, Tomoki
Toda, and Satoshi Nakamura. 2015. Ckylark: A
more robust pcfg-la parser. In NAACL Software
Demonstration.

Slav Petrov, Leon Barrett, Romain Thibaux, and Dan
Klein. 2006. Learning accurate, compact, and inter-
pretable tree annotation. In COLING-ACL.

Slav Petrov and Dan Klein. 2007. Improved inference
for unlexicalized parsing. In HLT-NAACL.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Neural machine translation of rare words with
subword units. In ACL.

Xing Shi, Inkit Padhi, and Kevin Knight. 2016. Does
string-based neural mt learn source syntax? In
EMNLP.

Ilya Sutskever, Oriol Vinyals, and Quoc V. Le. 2014.
Sequence to sequence learning with neural networks.
In NIPS.

Shuangzhi Wu, Dongdong Zhang, Nan Yang, Mu Li,
and Ming Zhou. 2017. Sequence-to-dependency
neural machine translation. In ACL.

Pengcheng Yin and Graham Neubig. 2017. A syntactic
neural model for general-purpose code generation.
In ACL.


