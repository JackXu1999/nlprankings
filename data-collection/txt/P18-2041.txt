




































Obligation and Prohibition Extraction Using Hierarchical RNNs


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 254–259
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

254

Obligation and Prohibition Extraction Using Hierarchical RNNs

Ilias Chalkidis1,2, Ion Androutsopoulos1, and Achilleas Michos2

1Department of Informatics, Athens University of Economics and Business, Greece
2Cognitiv+ Ltd., London, UK

Abstract

We consider the task of detecting con-
tractual obligations and prohibitions. We
show that a self-attention mechanism im-
proves the performance of a BILSTM clas-
sifier, the previous state of the art for this
task, by allowing it to focus on indica-
tive tokens. We also introduce a hierar-
chical BILSTM, which converts each sen-
tence to an embedding, and processes the
sentence embeddings to classify each sen-
tence. Apart from being faster to train, the
hierarchical BILSTM outperforms the flat
one, even when the latter considers sur-
rounding sentences, because the hierarchi-
cal model has a broader discourse view.

1 Introduction

Legal text processing (Ashley, 2017) is a growing
research area, comprising tasks such as legal ques-
tion answering (Kim and Goebel, 2017), contract
element extraction (Chalkidis et al., 2017), and le-
gal text generation (Alschnerd and Skougarevskiy,
2017). We consider obligation and prohibition ex-
traction from contracts, i.e., detecting sentences
(or clauses) that specify what should or should not
happen (Table 1). This task is important for le-
gal firms and legal departments, especially when
they process large numbers of contracts to mon-
itor the compliance of each party. Methods that
would automatically identify (e.g., highlight) sen-
tences (or clauses) specifying obligations and pro-
hibitions would allow lawyers and paralegals to in-
spect contracts more quickly. They would also be
a step towards populating databases with informa-
tion extracted from contracts, along with methods
that extract contractors, particular dates (e.g., start
and end dates), applicable law, legislation refer-
ences etc. (Chalkidis and Androutsopoulos, 2017).

Figure 1: Heatmap visualizing the attention scores
of BILSTM-ATT for some examples of Table 1.

Obligation and prohibition extraction is a kind
of deontic sentence (or clause) classification
(O’Neill et al., 2017). Different firms may use
different or finer deontic classes (e.g., distinguish-
ing between payment and delivery obligations),
but obligations and prohibitions are the most com-
mon coarse deontic classes. Using similar classes,
O’ Neill et al. (2017) reported that a bidirectional
LSTM (BILSTM) classifier (Graves et al., 2013)
outperformed several others (including logistic re-
gression, SVM, AdaBoost, Random Forests) in le-
gal sentence classification, possibly because long-
term dependencies (e.g., modal verbs or negations
interacting with distant dependents) are common
and crucial in legal texts, and LSTMs can cope with
long-term dependencies better than methods rely-
ing on fixed-size context windows.

We improve upon the work of O’ Neill et al.
(2017) in four ways. First, we show that self-
attention (Yang et al., 2016) improves the perfor-
mance of the BILSTM classifier, by allowing the
system to focus on indicative words (Fig 1). Sec-
ond, we introduce a hierarchical BILSTM, where
a first BILSTM processes each sentence word by



255

No. Gold Class Sentences/Clauses
1 Obligation The Supplier is obliged to meet and comply with the Approved Requirements.

None Details shall be determined in the individual contracts.
2 Prohibition No Provider staff will provide services to any Customer Competitor.

Obligation Provider will take such measures to prevent these actions.
3 Prohibition Provider is not entitled to suspend this Agreement prior to the lapse of the fifth year.
4 Oblig./Prohib. List Intro The Supplier shall:

Obligation List Item (a) only process the Personal Data in accordance with Client’s written instructions;
Prohibition List Item (b) not transfer any Personal Data to any other third parties;

5 Oblig./Prohib. List Intro The Receiving Party will:
Obligation List Item (i) keep the Confidential Information secret and confidential;
Prohibition List Item (ii) not disclose the Confidential Information to any person other than in accordance

with Clauses 13.3; and
Prohibition List Item (iii) not use the Confidential Information other than for the purposes of this Agreement.

6 Oblig./Prohib. List Intro A Party shall not directly solicit the employment of:
Prohibition List Item (i) in the case of Client, Supplier’s employees engaged in the provision of the Services,
Prohibition List Item (ii) in the case of Supplier, Client’s employees engaged.
None Nothing in this section will restrict either Party’s right to recruit.

Table 1: Examples of sentences and clauses, with human annotations of classes. Terms that are highly
indicative of the classes are shown in bold and underlined here, but are not marked by the annotators.

Gold Class Train Dev Test
None 15,401 3,905 4,141

Obligation 11,005 2,860 970
Prohibition 1,172 314 108

Obligation List Intro 828 203 70
Obligation List Item 2888 726 255
Prohibition List Item 251 28 19

Total 31,545 8,036 5,563

Table 2: Sentences/clauses after sentence splitting.

word producing a sentence embedding, and a sec-
ond BILSTM processes the sentence embeddings
to classify each sentence. The hierarchical BIL-
STM is similar to Yang et al.’s (2016), but classi-
fies sentences, not entire texts (e.g., news articles
or product reviews). It outperforms a flat BILSTM
that classifies each sentence independently, even
when the latter considers neighbouring sentences,
because the hierarchical BILSTM has a broader
view of the discourse. Third, we experiment with
a dataset an order of magnitude larger than the
dataset of O’ Neill et al. Fourth, we introduce
finer classes (Tables 1–2), which fit better the tar-
get task, where nested clauses are frequent.

2 Data

We experimented with a dataset containing 6,385
training, 1,595 development, and 1,420 test sec-
tions (articles) from the main bodies (excluding in-
troductions, covers, recitals) of 100 randomly se-
lected English service agreements.1 The sections

1The splitting of the dataset into training, development,
and test subsets was performed by first agglomeratively clus-
tering all sections (articles) based on Levenshtein distance,

were preprocessed by a sentence splitter, which in
clause lists (Examples 4–6 in Table 1) treats the
introductory clause and each nested clause as sep-
arate sentences, since each nested clause may be-
long in a different class.2

The splitter produced 31,545 training, 8,036 de-
velopment, and 5,563 test sentences/clauses.3 Ta-
ble 2 shows their distribution in the six gold (cor-
rect) classes. Each section was annotated by a sin-
gle law student (5 students in total). All the an-
notations were checked and corrected by a single
paralegal expert, who produces annotations of this
kind on a daily basis, based on strict guidelines of
the firm that provided the data.

We used pre-trained 200-dimensional word em-
beddings and pre-trained 25-dimensional POS tag
embeddings, obtained by applying WORD2VEC
(Mikolov et al., 2013) to approx. 750k and 50k
English contracts, respectively, as in our previous
work (Chalkidis et al., 2017). We also pre-trained
5-dimensional token shape embeddings (e.g., all
capitals, first letter capital, all digits), obtained
as in our previous work (Chalkidis and Androut-
sopoulos, 2017). Each token is represented by the
concatenation of its word, POS, shape embeddings
(Fig. 2, bottom). Unknown tokens are mapped to

and then assigning entire clusters to the training, develop-
ment, or test subset, to avoid having similar sections (e.g.,
based on boilerplate clauses) in different subsets.

2We use NLTK’s splitter (http://www.nltk.org/),
with additional post-processing based on regular expressions.

3There are at most 15 sentences/clauses per section in
the training set. We hope to make the dataset, or a similar
anonymized one, publicly available in the near future, but the
dataset is currently not available due to confidentiality issues.

http://www.nltk.org/


256

pre-trained POS-specific ‘unk’ embeddings (e.g.,
‘unk-n’, ‘unk-vb’). The dataset of Table 2 has no
overlap with the corpus of contracts that was used
to pre-train the embeddings.

3 Methods

BILSTM: The first classifier we considered pro-
cesses a single sentence (or clause) at a time.
It feeds the concatenated word, POS, shape
embeddings (e1, . . . ,en ∈ R230) of the tokens
w1,w2, . . . ,wn of the sentence to a forward LSTM,
and (in reverse order) to a backward LSTM, ob-
taining the forward and backward hidden states
(
−→
h 1, . . . ,

−→
h n ∈ R300 and

←−
h 1, . . .

←−
h n ∈ R300). The

concatenation of the last states (h = [
−→
h n;
←−
h 1])

is fed to a multinomial Logistic Regression (LR)
layer, which produces a probability per class.

Figure 2: BILSTM with self-attention (ATT nodes)
used on its own (BILSTM-ATT) or as the sentence
encoder of the hierarchical BILSTM (H-BILSTM-
ATT, Fig. 3). In X-BILSTM-ATT, the two LSTM
chains also consider the words of surrounding sen-
tences. The red dashed line is a drop-out layer.

BILSTM-ATT: When self-attention is added
(Fig. 2), the sentence (or clause) is represented
by the weighted sum (h) of the hidden states
(ht = [

−→
h t ;
←−
h t ] ∈ R600) of the BILSTM, where

a1, . . . ,an ∈R are attention scores, v∈R600, b∈R:

h = a1h1 + · · ·+atht + · · ·+anhn (1)
a′t = tanh(v

T ht +b) (2)

at = softmax(a′t ;a
′
1, . . . ,a

′
n) (3)

Again, h is then fed to a multinomial LR layer.
Figure 1 visualizes the attention scores (a1, . . . ,an)
of BILSTM-ATT when reading some of the sen-
tences (or clauses) of Table 1. The attention scores
are higher for modals, negations, words that in-
dicate obligations or prohibitions (e.g., ‘obliged’,
‘only’), and tokens indicating nested clauses (e.g.,
‘(a)’, ‘:’, ‘;’), which allows BILSTM-ATT to focus
more on these tokens (the corresponding states)
when computing the sentence representation (h).

X-BILSTM-ATT: In an extension of BILSTM-ATT,
called X-BILSTM-ATT, the BILSTM chain is fed
with the token embeddings (et) not only of the sen-
tence being classified, but also of the previous (and
following) tokens (faded parts of Fig. 2), up to
150 previous (and 150 following) tokens, 150 be-
ing the maximum sentence length in the dataset.4

This might allow the BILSTM chain to ‘remember’
key parts of the surrounding sentences (e.g., a pre-
vious clause ending with ‘shall not:’) when pro-
ducing the context-aware embeddings (states ht)
of the current sentence. The self-attention mecha-
nism still considers the states (ht) of the tokens of
the current sentence only, and the sentence repre-
sentation (h) is still computed as in Eq. 1.

H-BILSTM-ATT: The hierarchical BILSTM clas-
sifier, H-BILSTM-ATT, considers all the sentences
(or clauses) of an entire section. Each sentence
(or clause) is first turned into a sentence embed-
ding (h ∈ R600), as in BILSTM-ATT (Fig. 2). The
sequence of sentence embeddings is then fed to
a second BILSTM (Fig. 3), whose hidden states
(h(2)t = [

−→
h (2)t ;

←−
h (2)t ]∈R600) are treated as context-

aware sentence embeddings. The latter are passed
on to a multinomial LR layer, producing a prob-
ability per class, for each sentence (or clause) of
the section. We hypothesized that H-BILSTM-ATT
would perform better, because it considers an en-
tire section at a time, and salient information about
a sentence or clause (e.g., that the opening clause
of a list contains a negation or modal) can be ‘con-
densed’ in its sentence embedding and interact
with the sentence embeddings of distant sentences
or clauses (e.g., a nested clause several clauses af-
ter the opening one) in the upper BILSTM (Fig. 3).

4Memory constraints did not allow including more to-
kens. We used a single NVIDIA 1080 GPU. All methods were
implemented using KERAS (https://keras.io/) with
a TENSORFLOW backend (https://www.tensorflow.
org/). We padded each sentence to the maximum length.

https://keras.io/
https://www.tensorflow.org/
https://www.tensorflow.org/


257

BILSTM BILSTM-ATT X-BILSTM-ATT H-BILSTM-ATT
Gold Class P R F1 AUC P R F1 AUC P R F1 AUC P R F1 AUC

None 0.95 0.91 0.93 0.98 0.97 0.90 0.93 0.99 0.96 0.90 0.93 0.98 0.98 0.96 0.97 0.99
Obligation 0.75 0.85 0.79 0.86 0.75 0.88 0.81 0.86 0.75 0.87 0.81 0.88 0.87 0.92 0.90 0.96
Prohibition 0.67 0.62 0.64 0.75 0.74 0.75 0.74 0.80 0.65 0.75 0.70 0.74 0.84 0.83 0.84 0.90

Obl. List Begin 0.70 0.86 0.77 0.81 0.71 0.85 0.77 0.83 0.72 0.75 0.74 0.80 0.90 0.89 0.89 0.93
Obl. List Item 0.53 0.66 0.59 0.64 0.48 0.70 0.57 0.60 0.49 0.78 0.60 0.66 0.85 0.94 0.89 0.94
Proh. List Item 0.59 0.35 0.43 0.50 0.61 0.55 0.59 0.62 0.83 0.50 0.62 0.67 0.80 0.84 0.82 0.92
Macro-average 0.70 0.70 0.70 0.74 0.73 0.78 0.74 0.78 0.73 0.76 0.73 0.79 0.87 0.90 0.89 0.94
Micro-average 0.90 0.88 0.88 0.94 0.90 0.88 0.89 0.96 0.90 0.88 0.89 0.94 0.95 0.95 0.95 0.98

Table 3: Precision, recall, F1, and AUC scores, with the best results in bold and gray background.

Figure 3: Upper part of the hierarchical BILSTM
(H-BILSTM-ATT). The sentence embeddings (SEi)
are generated by the encoder of Fig. 2.

4 Experimental Results

Hyper-parameters were tuned by grid-searching
the following sets, and selecting the values with
the best validation loss: LSTM hidden units {100,
200, 300}, batch size {8, 16, 32}, drop-out rate
{0.4, 0.5, 0.6}. The red dashed lines of Fig. 2–3
are drop-out layers.5 We used categorical cross-
entropy loss, Glorot initialization (Glorot and Ben-
gio, 2010), Adam (Kingma and Ba, 2015), learn-
ing rate 0.001, and early stopping on the valida-
tion loss. Table 3 reports the precision, recall, F1
score, area under the precision-recall curve (AUC)
per class, as well as micro- and macro-averages.

The self-attention mechanism (BILSTM-ATT)
leads to clear overall improvements (in macro and
micro F1 and AUC, Table 3) comparing to the
plain BILSTM, supporting the hypothesis that self-
attention allows the classifier to focus on indica-
tive tokens. Allowing the BILSTM to consider to-
kens of neighboring sentences (X-BILSTM-ATT)
does not lead to any clear overall improvements.

5We resample the drop-out mask at each time-step.

The hierarchical H-BILSTM-ATT clearly outper-
forms the other three methods, supporting the hy-
pothesis that considering entire sections and al-
lowing the sentence embeddings to interact in the
upper BILSTM (Fig. 3) is beneficial.

Notice that the three flat methods (BILSTM,
BILSTM-ATT, X-BILSTM-ATT) obtain particularly
lower F1 and AUC scores, compared to H-BILSTM-
ATT, in the classes that correspond to nested
clauses (obligation list item, prohibition list item).
This is due to the fact that the flat methods have
no (or only limited, in the case of X-BILSTM-ATT)
view of the previous sentences, which often indi-
cate if a nested clause is an obligation or prohibi-
tion (see, for example, examples 4–6 in Table 1).

H-BILSTM-ATT is also much faster to train than
BILSTM and BILSTM-ATT (Table 4), even though
it has more parameters, because it converges faster
(5-7 epochs vs. 12-15). X-BILSTM-ATT is particu-
larly slow, because its BILSTM processes the same
sentences multiple times, when they are classified
and when they are neighboring sentences.

Network Training Time Parameters
BILSTM 5h 30m 1,278M

BILSTM-ATT 8h 30m 1,279M
X-BILSTM-ATT 25h 40m 1,279M
H-BILSTM-ATT 2h 30m 1,837M

Table 4: Training times and parameters to learn.

5 Related Work

As already noted, we built upon the work of
O’Neill et al. (2017). The dataset of O’Neill et al.
contained financial legislation, not contracts, and
was an order of magnitude smaller (obligations,
prohibitions, permissions had 1,297 training, 622
test sentences in total, cf. Table 2), but also in-
cluded permissions, which we did not consider.

Waltl et al. (2017) classified statements from
German tenancy law into 22 classes (including
prohibition, permission, consequence), using ac-
tive learning with Naive Bayes, LR, MLP classi-
fiers, experimenting with 504 sentences.



258

Kiyavitskaya et al. (2008) used grammars, word
lists, and heuristics to extract rights, obligations,
exceptions, and other constraints from US and Ital-
ian regulations.

Asooja et al. (2015) employed SVMs with n-
gram and manually crafted features to classify
paragraphs of money laundering regulations into
five classes (e.g., enforcement, monitoring, report-
ing), experimenting with 212 paragraphs.

In previous work (Chalkidis et al., 2017;
Chalkidis and Androutsopoulos, 2017) we focused
on extracting contract elements (e.g., contractor
names, legislation references, start and end dates,
amounts), a task which is similar to named en-
tity recognition. The best results were obtained
by stacked BILSTMs (Irsoy and Cardie, 2014)
or stacked BILSTM-CRF models (Ma and Hovy,
2016); hierarchical BILSTMs were not considered.
By contrast, in this paper we considered obliga-
tion and prohibition extraction, treating it as a sen-
tence (or clause) classification task, and showing
the benefits of employing a hierarchical BILSTM
model that considers both the sequence of words
in each sentence and the sequence of sentences.

Yang et al. (2016) proposed a hierarchical RNN
with self-attention to classify texts. A first bidi-
rectional RNN turns the words of each sentence to
a sentence embedding, and a second one turns the
sentence embeddings to a document embedding,
which is fed to an LR layer. Yang et al. use self-
attention in both RNNs, to assign attention scores
to words and sentences. We classify sentences (or
clauses), not entire texts, hence our second BIL-
STM does not produce a document embedding and
does not use self-attention. Also, Yang et al. ex-
perimented with reviews and community question
answering logs, whereas we considered legal texts.

Hierarchical RNNs have also been developed
for multilingual text classification (Pappas and
Popescu-Belis, 2017), language modeling (Lin
et al., 2015), and dialogue breakdown detection
(Xie and Ling, 2017).

6 Conclusions and Future Work

We presented the legal text analytics task of de-
tecting contractual obligations and prohibitions.
We showed that self-attention improves the perfor-
mance of a BILSTM classifier, the previous state
of the art in this task, by allowing the BILSTM
to focus on indicative tokens. We also intro-
duced a hierarchical BILSTM (also using atten-

tion), which converts each sentence to an em-
bedding, and then processes the sentence embed-
dings to classify each sentence. Apart from be-
ing faster to train, the hierarchical BILSTM outper-
forms the flat one, even when the latter considers
the surrounding sentences, because the hierarchi-
cal model has a broader view of the discourse.

Further performance improvements may be
possible by considering deeper self-attention
mechanisms (Pavlopoulos et al., 2017), stacking
BILSTMs (Irsoy and Cardie, 2014), or pre-training
the BILSTMs with auxiliary tasks (Ramachandran
et al., 2017). The hierarchical BILSTM with atten-
tion of this paper may also be useful in other sen-
tence, clause, or utterance classification tasks, for
example in dialogue turn classification (Xie and
Ling, 2017), detecting abusive user comments in
on-line discussions (Pavlopoulos et al., 2017), and
discourse segmentation (Hearst, 1997). We would
also like to investigate replacing its BILSTMs with
sequence-labeling CNNs (Bai et al., 2018), which
may lead to efficiency improvements.

Acknowledgments

We are grateful to the members of AUEB’s Natural
Language Processing Group, for several sugges-
tions that helped significantly improve this paper.

References
W. Alschnerd and D. Skougarevskiy. 2017. Towards an

automated production of legal texts using recurrent
neural networks. In Proceeding of the 16th Interna-
tional Conference on Artificial Intelligence and Law,
pages 159–168, London, UK.

K.D. Ashley. 2017. Artificial Intelligence and Legal
Analytics: New Tools for Law Practice in the Digital
Age. Cambridge University Press.

K. Asooja, G. Bordea, G. Vulcu, L. O’Brien, A. Es-
pinoza, E. Abi-Lahoud, P. Buitelaar, and T. Butler.
2015. Semantic annotation of finance regulatory
text using multilabel classification. In Proceedings
of the International Workshop on Legal Domain and
Semantic Web Applications, Portoroz, Slovenia.

S. Bai, J.Z. Kolter, and V. Koltun. 2018. An em-
pirical evaluation of generic convolutional and re-
current networks for sequence modeling. CoRR,
abs/1803.01271.

I. Chalkidis and I. Androutsopoulos. 2017. A deep
learning approach to contract element extraction. In
Proceedings of the 30th International Conference on
Legal Knowledge and Information Systems, pages
155–164, Luxembourg.



259

I. Chalkidis, I. Androutsopoulos, and A. Michos. 2017.
Extracting contract elements. In Proceedings of the
16th International Conference on Artificial Intelli-
gence and Law, pages 19–28, London, UK.

X. Glorot and Y. Bengio. 2010. Understanding the dif-
ficulty of training deep feedforward neural networks.
In Proceedings of the International Conference on
Artificial Intelligence and Statistics, pages 249–256,
Sardinia, Italy.

A. Graves, N. Jaitly, and A. Mohamed. 2013. Hybrid
speech recognition with deep bidirectional LSTM.
In IEEE Workshop on Automatic Speech Recogni-
tion and Understanding, pages 273–278, Olomouc,
Czech Republic.

Marti A. Hearst. 1997. Texttiling: Segmenting text into
multi-paragraph subtopic passages. Computational
Linguistics, 23(1):33–64.

O. Irsoy and C. Cardie. 2014. Deep recursive neu-
ral networks for compositionality in language. In
Proceedings of the 27th International Conference
on Neural Information Processing Systems, pages
2096–2104, Montreal, Canada.

M.Y. Kim and R. Goebel. 2017. Two-step cascaded
textual entailment for legal bar exam question an-
swering. In Proceedings of the 4th Competition on
Legal Information Extraction/Entailment, London,
UK.

D. P. Kingma and J. Ba. 2015. Adam: A method for
stochastic optimization. In Proceedings of the 5th
International Conference on Learning Representa-
tions, San Diego, CA, USA.

N. Kiyavitskaya, N. Zeni, Travis D. Breaux, Annie I.
Antón, James R. Cordy, L. Mich, and J. Mylopoulos.
2008. Automating the extraction of rights and obli-
gations for regulatory compliance. In Proceedings
of the 27th International Conference on Conceptual
Modeling, pages 154–168, Barcelona, Spain.

R. Lin, S. Liu, M. Yang, M. Li, M. Zhou, and S. Li.
2015. Hierarchical recurrent neural network for
document modeling. In Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing, pages 899–907, Lisbon, Portugal.

X. Ma and E. Hovy. 2016. End-to-end sequence label-
ing via bi-directional LSTM-CNNs-CRF. In Pro-
ceedings of the 54th Annual Meeting of the ACL,
pages 1064–1074, Berlin, Germany.

T. Mikolov, I. Sutskever, K. Chen, G. Corrado, and
J. Dean. 2013. Distributed Representations of
Words and Phrases and their Compositionality. In
Proceedings of the 26th International Conference on
Neural Information Processing Systems, Stateline,
NV.

J. O’Neill, P. Buitelaar, C. Robin, and L. O’ Brien.
2017. Classifying Sentential Modality in Legal Lan-
guage: A Use Case in Financial Regulations, Acts

and Directives. In Proceedings of the 16th Interna-
tional Conference on Artificial Intelligence and Law,
pages 159–168, London, UK.

N. Pappas and A. Popescu-Belis. 2017. Multilingual
hierarchical attention networks for document clas-
sification. In Proceedings of the 8th International
Joint Conference on Natural Language Processing,
Tapei, Taiwan.

J. Pavlopoulos, P. Malakasiotis, and I. Androutsopou-
los. 2017. Deeper attention to abusive user content
moderation. In Proceedings of the Conference on
Empirical Methods in Natural Language Process-
ing, pages 1125–1135, Copenhagen, Denmark.

P. Ramachandran, P.r J. Liu, and Q. V. Le. 2017. Unsu-
pervised pretraining for sequence to sequence learn-
ing. In Proceedings of the Conference on Empiri-
cal Methods in Natural Language Processing, pages
383–391, Copenhagen, Denmark.

B. Waltl, J. Muhr, I. Glaser, G. Bonczek,
E. Scepankova, and F. Matthes. 2017. Classi-
fying legal norms with active machine learning. In
Proceedings of the 30th International Conference
on Legal Knowledge and Information Systems,
pages 11–20, Luxembourg City Luxembourg.

Z. Xie and G. Ling. 2017. Dialogue breakdown de-
tection using hierarchical bi-directional LSTMs. In
Proceedings of the 6th Dialog System Technology
Challenges (Track 3: Dialog Breakdown Detection),
Long Beach, USA.

Z. Yang, D. Yang, C. Dyer, X. He, A. Smola, and
E. Hovy. 2016. Hierarchical attention networks
for document classification. In Proceedings of the
15th Conference of the North American Chapter of
the Association for Computational Linguistics: Hu-
man Language Technologies, pages 1480–1489, San
Diego, CA, USA.


