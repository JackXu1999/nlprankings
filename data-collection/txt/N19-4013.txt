



















































End-to-End Open-Domain Question Answering with BERTserini


Proceedings of NAACL-HLT 2019: Demonstrations, pages 72–77
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

72

End-to-End Open-Domain Question Answering with BERTserini

Wei Yang,1,2∗ Yuqing Xie,1,2∗Aileen Lin,2 Xingyu Li,2
Luchen Tan,2 Kun Xiong,2 Ming Li,1,2 and Jimmy Lin1,2

1 David R. Cheriton School of Computer Science, University of Waterloo
2 RSVP.ai

Abstract
We demonstrate an end-to-end question an-
swering system that integrates BERT with
the open-source Anserini information retrieval
toolkit. In contrast to most question answer-
ing and reading comprehension models today,
which operate over small amounts of input
text, our system integrates best practices from
IR with a BERT-based reader to identify an-
swers from a large corpus of Wikipedia arti-
cles in an end-to-end fashion. We report large
improvements over previous results on a stan-
dard benchmark test collection, showing that
fine-tuning pretrained BERT with SQuAD is
sufficient to achieve high accuracy in identify-
ing answer spans.

1 Introduction

BERT (Devlin et al., 2018), the latest refinement
of a series of neural models that make heavy use
of pretraining (Peters et al., 2018; Radford et al.,
2018), has led to impressive gains in many natural
language processing tasks, ranging from sentence
classification to question answering to sequence
labeling. Most relevant to our task, Nogueira
and Cho (2019) showed impressive gains in us-
ing BERT for query-based passage reranking. In
this demonstration, we integrate BERT with the
open-source Anserini IR toolkit to create BERT-
serini, an end-to-end open-domain question an-
swering (QA) system.

Unlike most QA or reading comprehension
models, which are best described as rerankers or
extractors since they assume as input relatively
small amounts of text (an article, top k sentences
or passages, etc.), our system operates directly on
a large corpus of Wikipedia articles. We integrate
best practices from the information retrieval com-
munity with BERT to produce an end-to-end sys-
tem, and experiments on a standard benchmark

∗ equal contribution

test collection show large improvements over pre-
vious work. Our results show that fine-tuning
pretrained BERT with SQuAD (Rajpurkar et al.,
2016) is sufficient to achieve high accuracy in
identifying answer spans. The simplicity of this
design is one major feature of our architecture. We
have deployed BERTserini as a chatbot that users
can interact with on diverse platforms, from lap-
tops to mobile phones.

2 Background and Related Work

While the origins of question answering date back
to the 1960s, the modern formulation can be traced
to the Text Retrieval Conferences (TRECs) in the
late 1990s (Voorhees and Tice, 1999). With roots
in information retrieval, it was generally envi-
sioned that a QA system would comprise pipeline
stages that select increasingly finer-grained seg-
ments of text (Tellex et al., 2003): document re-
trieval to identify relevant documents from a large
corpus, followed by passage ranking to identify
text segments that contain answers, and finally an-
swer extraction to identify the answer spans.

As NLP researchers became increasingly in-
terested in QA, they placed greater emphasis
on the later stages of the pipeline to emphasize
various aspects of linguistic analysis. Informa-
tion retrieval techniques receded into the back-
ground and became altogether ignored. Most pop-
ular QA benchmark datasets today—for example,
TrecQA (Yao et al., 2013), WikiQA (Yang et al.,
2015), and MSMARCO (Bajaj et al., 2016)—are
best characterized as answer selection tasks. That
is, the system is given the question as well as a
candidate list of sentences to choose from. Of
course, those candidates have to come from some-
where, but their source lies outside the problem
formulation. Similarly, reading comprehension
datasets such as SQuAD (Rajpurkar et al., 2016)



73

eschew retrieval entirely, since there is only a sin-
gle document from which to extract answers.

In contrast, what we refer to as “end-to-end”
question answering begins with a large corpus of
documents. Since it is impractical to apply in-
ference exhaustively to all documents in a cor-
pus with current models (mostly based on neural
networks), this formulation necessarily requires
some type of term-based retrieval technique to
restrict the input text under consideration—and
hence an architecture quite like the pipelined sys-
tems from over a decade ago. Recently, there has
been a resurgence of interest in this task, the most
notable of which is Dr.QA (Chen et al., 2017).
Other recent papers have examined the role of re-
trieval in this end-to-end formulation (Wang et al.,
2017; Kratzwald and Feuerriegel, 2018; Lee et al.,
2018), some of which have, in essence, rediscov-
ered ideas from the late 1990s and early 2000s.

For a wide range of applications, researchers
have recently demonstrated the effectiveness of
neural models that have been pretrained on a lan-
guage modeling task (Peters et al., 2018; Rad-
ford et al., 2018); BERT (Devlin et al., 2018)
is the latest refinement of this idea. Our work
tackles end-to-end question answering by combin-
ing BERT with Anserini, an IR toolkit built on
top of the popular open-source Lucene search en-
gine. Anserini (Yang et al., 2017, 2018) repre-
sents recent efforts by researchers to bring aca-
demic IR into better alignment with the practice
of building real-world search applications, where
Lucene has become the de facto platform used in
industry. Through an emphasis on rigorous soft-
ware engineering and regression testing for repli-
cability, Anserini codifies IR best practices to-
day. Recently, Lin (2018) showed that a well-
tuned Anserini implementation of a query expan-
sion model proposed over a decade ago still beats
two recent neural models for document ranking.
Thus, BERT and Anserini represent solid founda-
tions on which to build an end-to-end question an-
swering system.

3 System Architecture

The architecture of BERTserini is shown in Fig-
ure 1 and is comprised of two main modules, the
Anserini retriever and the BERT reader. The re-
triever is responsible for selecting segments of text
that contain the answer, which is then passed to
the reader to identify an answer span. To facilitate

Anserini Retriever

Inverted
Index

Question

top k segments

AnswerFine-tunedBERT +

BERT Reader

segment score

span
score

Pretrained 
BERT

Indexing Fine-tuning on SQuAD

Figure 1: Architecture of BERTserini.

comparisons to previous work, we use the same
Wikipedia corpus described in Chen et al. (2017)
(from Dec. 2016) comprising 5.08M articles. In
what follows, we describe each module in turn.

3.1 Anserini Retriever

For simplicity, we adopted a single-stage retriever
that directly identifies segments of text from
Wikipedia to pass to the BERT reader—as op-
posed to a multi-stage retriever that first retrieves
documents and then ranks passages within. How-
ever, to increase flexibility, we experimented with
different granularities of text at indexing time:

Article: The 5.08M Wikipedia articles are directly
indexed; that is, an article is the unit of retrieval.

Paragraph: The corpus is pre-segmented into
29.5M paragraphs and indexed, where each para-
graph is treated as a “document” (i.e., the unit of
retrieval).

Sentence: The corpus is pre-segmented into
79.5M sentences and indexed, where each sen-
tence is treated as a “document”.

At inference time, we retrieve k text segments (one
of the above conditions) using the question as a
“bag of words” query. We use a post-v0.3.0 branch
of Anserini,1 with BM25 as the ranking function
(Anserini’s default parameters).

3.2 BERT Reader

Text segments from the retriever are passed to the
BERT reader. We use the model in Devlin et al.
(2018), but with one important difference: to al-
low comparison and aggregation of results from
different segments, we remove the final softmax
layer over different answer spans; cf. (Clark and
Gardner, 2018).

Our BERT reader is based on Google’s refer-
ence implementation2 (TensorFlow 1.12.0). For

1http://anserini.io/
2https://github.com/google-research/bert

http://anserini.io/
https://github.com/google-research/bert


74

Model EM F1 R

Dr.QA (Chen et al., 2017) 27.1 - 77.8
Dr.QA + Fine-tune 28.4 - -
Dr.QA + Multitask 29.8 - -
R3 (Wang et al., 2017) 29.1 37.5 -
Kratzwald and Feuerriegel (2018) 29.8 - -
Par. R. (Lee et al., 2018) 28.5 - 83.1
Par. R. + Answer Agg. 28.9 - -
Par. R. + Full Agg. 30.2 - -
MINIMAL (Min et al., 2018) 34.7 42.5 64.0

BERTserini (Article, k = 5) 19.1 25.9 63.1
BERTserini (Paragraph, k = 29) 36.6 44.0 75.0
BERTserini (Sentence, k = 78) 34.0 41.0 67.5

BERTserini (Paragraph, k = 100) 38.6 46.1 85.8

Table 1: Results on SQuAD development questions.

training, we begin with the BERT-Base model (un-
cased, 12-layer, 768-hidden, 12-heads, 110M pa-
rameters) and then fine tune the model on the train-
ing set of SQuAD (v1.1). All inputs to the reader
are padded to 384 tokens; the learning rate is set to
3× 10−5 and all other defaults settings are used.

At inference time, for retrieved articles, we ap-
ply the BERT reader paragraph by paragraph. For
retrieved paragraphs, we apply inference over the
entire paragraph. For retrieved sentences, we ap-
ply inference over the entire sentence. In all cases,
the reader selects the best text span and provides a
score. We then combine the reader score with the
retriever score via linear interpolation:

S = (1− µ) · SAnserini + µ · SBERT

where µ ∈ [0, 1] is a hyperparameter. We tune µ
on 1000 randomly-selected question-answer pairs
from the SQuAD training set, considering all val-
ues in tenth increments.

4 Experimental Results

We adopt exactly the same evaluation methodol-
ogy as Chen et al. (2017), which was also used
in subsequent work. Test questions come from
the development set of SQuAD; since our answers
come from different texts, we only evaluate with
respect to the SQuAD answer spans (i.e., the pas-
sage context is ignored). Our evaluation met-
rics are also the same as Chen et al. (2017): ex-
act match (EM) score and F1 score (at the token
level). In addition, we compute recall (R), the frac-
tion of questions for which the correct answer ap-
pears in any retrieved segment; this is what Chen

10 20 30 40 50 60 70 80 90 100
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

k

M
et

ri
c

Recall
Top k EM
Top 1 EM

Figure 2: Model effectiveness with different numbers
of retrieved paragraphs.

et al. (2017) call the document retrieval results.
Note that this recall is not the same as the token-
level recall component in the F1 score.

Our main results are shown in Table 1, where
we report metrics with different Anserini retrieval
conditions (article, paragraphs, and sentences).
We compare article retrieval at k = 5, paragraph
retrieval at k = 29, and sentence retrieval at
k = 78. The article setting matches the retrieval
condition in Chen et al. (2017). The values of k
for the paragraph and sentence conditions are se-
lected so that the reader considers approximately
the same amount of text: each paragraph contains
2.7 sentences on average, and each article contains
5.8 paragraphs on average. The table also copies
results from previous work for comparison.

We see that article retrieval underperforms para-
graph retrieval by a large margin: the reason, we
believe, is that articles are long and contain many
non-relevant sentences that serve as distractors
to the BERT reader. Sentences perform reason-
ably but not as well as paragraphs because they
often lack the context for the reader to identify
the answer span. Paragraphs seem to represent a
“sweet spot”, yielding a large improvement in ex-
act match score over previous results.

Our next experiment examined the effects of
varying k, the number of text segments consid-
ered by the BERT reader. Here, we focus only
on the paragraph condition, with µ = 0.5 (the
value learned via cross validation). Figure 2 plots
three metrics with respect to k: recall, top k ex-
act match, and top exact match. Recall measures
the fraction of questions for which the correct an-
swer appears in any retrieved segment, exactly as
in Table 1. Top k exact match represents a lenient



75

condition where the system receives credit for a
correctly-identified span in any retrieved segment.
Finally, top exact match is evaluated with respect
to the top-scoring span, comparable to the results
reported in Table 1. Scores for the paragraph con-
dition at k = 100 are also reported in the table:
we note that the exact match score is substantially
higher than the previously-published best result
that we are aware of.

We see that, as expected, scores increase with
larger k values. However, the top exact match
score doesn’t appear to increase much after around
k = 10. The top k exact match score continues
growing a bit longer but also reaches saturation.
Recall appears to continue increasing all the way
up to k = 100, albeit more slowly as k increases.
This means that the BERT reader is unable to take
advantage of these additional answer passages that
appear in the candidate pool.

These curves also provide a failure analysis:
The top recall curve (in blue) represents the up-
per bound with the current Anserini retriever. At
k = 100, it is able to return at least one relevant
paragraph around 86% of the time, and thus we
can conclude that passage retrieval does not ap-
pear to be the bottleneck in overall effectiveness
in the current implementation.

The gap between the top blue recall curve and
the top k exact match curve (in red) quantifies
the room for improvement with the BERT reader;
these represent cases in which the reader did not
identify the correct answer in any paragraph. Fi-
nally, the gap between the red curve and the bot-
tom top exact match curve (in purple) represents
cases where BERT did identify the correct an-
swer, but not as the top-scoring span. This gap
can be characterized as failures in scoring or score
aggregation, and it seems to be the biggest area
for improvement—suggesting that our current ap-
proach (weighted interpolation between the BERT
and Anserini scores) is insufficient. We are explor-
ing reranking models that are capable of integrat-
ing more relevance signals.

One final caveat: this error analysis is based on
the SQuAD ground truth. Although our answers
might not match the SQuAD answer spans, they
may nevertheless be acceptable (for example, dif-
ferent answers to time-dependent questions). In
future work we plan on manually examining a
sample of the errors to produce a more accurate
classification of the failures.

Figure 3: A screenshot of BERTserini in RSVP.ai’s
chatbot interface. These samples from SQuAD illus-
trate the range of questions that the system can answer.

5 Demonstration

We have deployed BERTserini as a chatbot that
users can interact with in two different ways: a
Slackbot and RSVP.ai’s intelligent platform that
allows businesses to construct natural dialogue
services easily and quickly. However, both use
the same backend services. A screenshot of the
RSVP.ai chat platform is shown in Figure 3. The
current interface uses the paragraph indexing con-
dition, but we return only the sentence containing
the answer identified by the BERT reader. The
answer span is highlighted in the response (Lin
et al., 2003). In the screenshot we can see the di-
versity of questions that BERTserini can handle—
different types of named entities as well as queries
whose answers are not noun phrases.

One important consideration in an operational



76

system is the latency of the responses. Informed
by the analysis in Figure 2, in our demonstration
system we set k = 10 under the paragraph con-
dition. While this does not give us the maximum
possible accuracy, it represents a good cost/quality
tradeoff. To quantify processing time, we ran-
domly selected 100 questions from SQuAD and
recorded average latencies; measurements were
taken on a machine with an Intel Xeon E5-2620
v4 CPU (2.10GHz) and a Tesla P40 GPU. Anserini
retrieval (on the CPU) averages 0.5s per question,
while BERT processing time (on the GPU) aver-
ages 0.18s per question.

6 Conclusion

We introduce BERTserini, our end-to-end open-
domain question answering system that integrates
BERT and the Anserini IR toolkit. With a sim-
ple two-stage pipeline architecture, we are able
to achieve large improvements over previous sys-
tems. Error analysis points to room for improve-
ment in retrieval, answer extraction, and answer
aggregation—all of which represent ongoing ef-
forts. In addition, we are also interested in expand-
ing the multilingual capabilities of our system.

References
Payal Bajaj, Daniel Campos, Nick Craswell, Li Deng,

Jianfeng Gao, Xiaodong Liu, Rangan Majumder,
Andrew McNamara, Bhaskar Mitra, Tri Nguyen,
Mir Rosenberg, Xia Song, Alina Stoica, Saurabh Ti-
wary, and Tong Wang. 2016. MS MARCO: A hu-
man generated MAchine Reading COmprehension
dataset. arXiv:1611.09268.

Danqi Chen, Adam Fisch, Jason Weston, and Antoine
Bordes. 2017. Reading Wikipedia to answer open-
domain questions. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1870–
1879.

Christopher Clark and Matt Gardner. 2018. Simple
and effective multi-paragraph reading comprehen-
sion. In Proceedings of the 56th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers), pages 845–855.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. BERT: Pre-training of
deep bidirectional transformers for language under-
standing. arXiv:1810.04805.

Bernhard Kratzwald and Stefan Feuerriegel. 2018.
Adaptive document retrieval for deep question an-
swering. In Proceedings of the 2018 Conference on

Empirical Methods in Natural Language Process-
ing, pages 576–581.

Jinhyuk Lee, Seongjun Yun, Hyunjae Kim, Miyoung
Ko, and Jaewoo Kang. 2018. Ranking paragraphs
for improving answer recall in open-domain ques-
tion answering. In Proceedings of the 2018 Con-
ference on Empirical Methods in Natural Language
Processing, pages 565–569.

Jimmy Lin. 2018. The neural hype and comparisons
against weak baselines. SIGIR Forum, 52(2):40–51.

Jimmy Lin, Dennis Quan, Vineet Sinha, Karun Bak-
shi, David Huynh, Boris Katz, and David R. Karger.
2003. The role of context in question answering
systems. In Extended abstracts of the 2003 Confer-
ence on Human Factors in Computing Systems (CHI
2003), pages 1006–1007.

Sewon Min, Victor Zhong, Richard Socher, and Caim-
ing Xiong. 2018. Efficient and robust question an-
swering from minimal context over documents. In
Proceedings of the 56th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), pages 1725–1735.

Rodrigo Nogueira and Kyunghyun Cho. 2019. Passage
re-ranking with BERT. arXiv:1901.04085.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In Proceedings of the 2018 Confer-
ence of the North American Chapter of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies, Volume 1 (Long Papers), pages
2227–2237.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving language under-
standing by generative pre-training. Technical re-
port.

Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and
Percy Liang. 2016. SQuAD: 100,000+ questions for
machine comprehension of text. In Proceedings of
the 2016 Conference on Empirical Methods in Nat-
ural Language Processing, pages 2383–2392.

Stefanie Tellex, Boris Katz, Jimmy Lin, Gregory Mar-
ton, and Aaron Fernandes. 2003. Quantitative evalu-
ation of passage retrieval algorithms for question an-
swering. In Proceedings of the 26th Annual Interna-
tional ACM SIGIR Conference on Research and De-
velopment in Information Retrieval (SIGIR 2003),
pages 41–47.

Ellen M. Voorhees and Dawn M. Tice. 1999. The
TREC-8 Question Answering Track evaluation. In
Proceedings of the Eighth Text REtrieval Conference
(TREC-8), pages 83–106.

Shuohang Wang, Mo Yu, Xiaoxiao Guo, Zhiguo Wang,
Tim Klinger, Wei Zhang, Shiyu Chang, Gerald
Tesauro, Bowen Zhou, and Jing Jiang. 2017. R3:



77

Reinforced reader-ranker for open-domain question
answering. arXiv:1709.00023.

Peilin Yang, Hui Fang, and Jimmy Lin. 2017. Anserini:
Enabling the use of Lucene for information retrieval
research. In Proceedings of the 40th Annual In-
ternational ACM SIGIR Conference on Research
and Development in Information Retrieval (SIGIR
2017), pages 1253–1256.

Peilin Yang, Hui Fang, and Jimmy Lin. 2018. Anserini:
Reproducible ranking baselines using Lucene. Jour-
nal of Data and Information Quality, 10(4):Article
16.

Yi Yang, Wen-tau Yih, and Christopher Meek. 2015.
WikiQA: A challenge dataset for open-domain ques-
tion answering. In Proceedings of the 2015 Con-
ference on Empirical Methods in Natural Language
Processing, pages 2013–2018.

Xuchen Yao, Benjamin Van Durme, Chris Callison-
burch, and Peter Clark. 2013. Answer extraction as
sequence tagging with tree edit distance. In Pro-
ceedings of the 2013 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
858–867.


