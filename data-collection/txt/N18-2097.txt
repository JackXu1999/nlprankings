



















































A Discourse-Aware Attention Model for Abstractive Summarization of Long Documents


Proceedings of NAACL-HLT 2018, pages 615–621
New Orleans, Louisiana, June 1 - 6, 2018. c©2018 Association for Computational Linguistics

A Discourse-Aware Attention Model for
Abstractive Summarization of Long Documents

Arman Cohan† Franck Dernoncourt? Doo Soon Kim? Trung Bui?
Seokhwan Kim? Walter Chang? Nazli Goharian†

†Department of Computer Science, Georgetown University, Washington, DC
{arman,nazli}@ir.cs.georgetown.edu

?Adobe Research, San Jose, CA
{dernonco,dkim,bui,seokim,wachang}@adobe.com

Abstract
Neural abstractive summarization models have
led to promising results in summarizing rela-
tively short documents. We propose the first
model for abstractive summarization of single,
longer-form documents (e.g., research papers).
Our approach consists of a new hierarchical
encoder that models the discourse structure of
a document, and an attentive discourse-aware
decoder to generate the summary. Empirical
results on two large-scale datasets of scientific
papers show that our model significantly out-
performs state-of-the-art models.

1 Introduction
Existing large-scale summarization datasets

consist of relatively short documents. For exam-
ple, articles in the CNN/Daily Mail dataset (Her-
mann et al., 2015) are on average about 600 words
long. Similarly, existing neural summarization
models have focused on summarizing sentences
and short documents. In this work, we propose a
model for effective abstractive summarization of
longer documents. Scientific papers are an ex-
ample of documents that are significantly longer
than news articles (see Table 1). They also fol-
low a standard discourse structure describing the
problem, methodology, experiments/results, and
finally conclusions (Suppe, 1998).

Most summarization works in the literature
focus on extractive summarization. Examples
of prominent approaches include frequency-based
methods (Vanderwende et al., 2007), graph-based
methods (Erkan and Radev, 2004), topic mod-
eling (Steinberger and Jezek, 2004), and neural
models (Nallapati et al., 2017). Abstractive sum-
marization is an alternative approach where the
generated summary may contain novel words and
phrases and is more similar to how humans sum-
marize documents (Jing, 2002). Recently, neu-
ral methods have led to encouraging results in

abstractive summarization (Nallapati et al., 2016;
See et al., 2017; Paulus et al., 2017; Li et al.,
2017). These approaches employ a general frame-
work of sequence-to-sequence (seq2seq) models
(Sutskever et al., 2014) where the document is
fed to an encoder network and another (recurrent)
network learns to decode the summary. While
promising, these methods focus on summarizing
news articles which are relatively short. Many
other document types, however, are longer and
structured. Seq2seq models tend to struggle with
longer sequences because at each decoding step,
the decoder needs to learn to construct a context
vector capturing relevant information from all the
tokens in the source sequence (Shao et al., 2017).

Our main contribution is an abstractive model
for summarizing scientific papers which are an
example of long-form structured document types.
Our model includes a hierarchical encoder, captur-
ing the discourse structure of the document and a
discourse-aware decoder that generates the sum-
mary. Our decoder attends to different discourse
sections and allows the model to more accurately
represent important information from the source
resulting in a better context vector. We also in-
troduce two large-scale datasets of long and struc-
tured scientific papers obtained from arXiv and
PubMed to support both training and evaluating
models on the task of long document summariza-
tion. Evaluation results show that our method out-
performs state-of-the-art summarization models1.

2 Background
In the seq2seq framework for abstractive sum-

marization, an input document x is encoded using
a Recurrent Neural Network (RNN) with h(e)i be-
ing the hidden state of the encoder at timestep i.
The last step of the encoder is fed as input to an-
other RNN which decodes the output one token
1 Data/code: https://github.com/acohan/long-summarization

615



R
N
N

R
N
N

𝑐"
Context
vector

Encoder Decoder

R
N
N

R
N
N

R
N
N

R
N
N

𝑥$,$

R
N
N

R
N
N

Word
attention

𝑦"𝑥$,' 𝑥$," 𝑥',$ 𝑥',' 𝑥',"

𝑐( 𝑐$ 𝑐'

Section
attention

Predict

Output: 𝑦)3
Section-level RNN

Word-level RNN
R
N
N

R
N
N

R
N
N

𝑦$ 𝑦'

Figure 1: Overview of our model. The word-level RNN
is shown in blue and section-level RNN is shown in
green. The decoder also consists of an RNN (orange)
and a “predict” network for generating the summary.
At each decoding time step t (here t=3 is shown), the
decoder forms a context vector ct which encodes the
relevant source context (c0 is initialized as a zero vec-
tor). Then the section and word attention weights are
respectively computed using the green “section atten-
tion” and the blue “word attention” blocks. The context
vector is used as another input to the decoder RNN and
as an input to the “predict” network which outputs the
next word using a joint pointer-generator network.

at a time. Given an input document along with
the corresponding ground-truth summary y, the
model is trained to output a summary ŷ that is
close to y. The output at timestep t is predicted
using the decoder input x′t, decoder hidden state
h
(d)
t , and some information about the input se-

quence. This framework is the general seq2seq
framework employed in many generation tasks
including machine translation (Sutskever et al.,
2014; Bahdanau et al., 2014) and summarization
(Nallapati et al., 2016; Chopra et al., 2016).
Attentive decoding The attention mechanism
maps the decoder state and the encoder states to
an output vector, which is a weighted sum of the
encoder states and is called context vector (Bah-
danau et al., 2014). Incorporating this context
vector at each decoding timestep (attentive decod-
ing) is proven effective in seq2seq models. For-
mally, the context vector ct is defined as: ct =∑N

i=1 α
(t)
i h

(e)
i where α

(t)
i are the attention weights

calculated as follows:
α
(t)
i =softmax

i
(score(h

(e)
i ,h

(d)
t−1)) (1)

where softmax
i

means that the denominator’s sum
in the softmax function is over i. The score func-
tion can be defined in bilinear, additive, or mul-
tiplicative ways (Luong et al., 2015). We use the
additive scoring function:

score(h
(e)
i ,h

(d)
t−1) = v

>
a tanh

(
linear(h

(e)
i ,h

(d)
t−1)
)

(2)

where va is a weight vector and linear is a linear
mapping function. I.e.,

linear(XXX1, XXX2) = WWW1XXX1 + WWW2XXX2 + b (3)

where WWW1 and WWW2 are weight matrices and b is the
bias vector.

3 Model

We now describe our discourse-aware summa-
rization model (shown in Figure 1).
Encoder Our encoder extends the RNN encoder
to a hierarchical RNN that captures the document
discourse structure. We first encode each dis-
course section and then encode the document. For-
mally, we encode the document as a vector d ac-
cording to the following:

d = RNNdoc
(
{h(s)1 , ...,h

(s)
N }
)

RNN(.) denotes a function which is a recurrent
neural network whose output is the final state of
the network encoding the entire sequence. N is
the number of sections in the document and h(s)j
is representation of section j in the document con-
sisting of a sequence of tokens.

h
(s)
j = RNNsec

(
x(j,1), ...x(j,M)}

)

where x(j,i) are dense embeddings correspond-
ing to the tokens w(j,i) and M is the maximum
section length. The parameters of RNNsec are
shared for all the discourse sections. We use a
single layer bidirectional LSTM (following the
LSTM formulation of Graves et al. (2013)) for
both RNNdoc and RNNsec; further extension to
multilayer LSTMs is straightforward. We com-
bine the forward and backward LSTM states to a
single state using a simple feed-forward network:

h = relu(W([
−→
h ,
←−
h ] + b)

where [, ] shows the concatenation operation.
Throughout, when we mention the RNN (LSTM)
state, we are referring to this combined state of
both forward and backward RNNs (LSTMs).
Discourse-aware decoder When humans sum-
marize a long structured document, depending on
the domain and the nature of the document, they
write about important points from different dis-
course sections of the document. For example,
scientific paper abstracts typically include the de-
scription of the problem, discussion of the meth-
ods, and finally results and conclusions (Suppe,
1998). Motivated by this observation, we propose
a discourse-aware attention method. Intuitively, at
each decoding timestep, in addition to the words

616



in the document, we also attend to the relevant
discourse section (the “section attention” block in
Figure 1). Then we use the discourse-related in-
formation to modify the word-level attention func-
tion. Specifically, the context vector representing
the source document is:

ct =
∑N

j=1

∑M
i=1

α
(t)
(j,i)h

(e)
(j,i) (4)

where h(e)(j,i) shows the encoder state of word i

in discourse section j and α(t)(j,i) shows the cor-
responding attention weight to that encoder state.
The scalar weights α(t)(j,i) are obtained according
to:

α
(t)
(j,i) = softmax(i,j)

(
β
(t)
j score(h

(e)
(j,i),h

(d)
t−1)

)
(5)

The score function is the additive attention func-
tion (Equation 2) and the weights β(t)j are updated
according to:

β
(t)
j = softmaxj

(score(h
(s)
j ,h

(d)
t−1)) (6)

At each timestep t, the decoder state h(d)t and
the context vector ct are used to estimate the prob-
ability distribution of next word yt:

p(yt|y1:t−1) = softmax
(
V> linear

(
h
(d)
t , ct

))
(7)

where V is a vocabulary weight matrix and
softmax is over the entire vocabulary.
Copying from source There has been a surge of
recent works in sequence learning tasks to address
the problem of unkown token prediction by allow-
ing the model to occasionally copy words directly
from source instead of generating a new token (Gu
et al., 2016; See et al., 2017; Paulus et al., 2017;
Wiseman et al., 2017). Following these works,
we add an additional binary variable zt to the de-
coder, indicating generating a word from vocab-
ulary (zt=0) or copying a word from the source
(zt=1). The probability is learnt during training
according to the following equation:

p(zt=1|y1:t−1) = σ(linear(h(d)t , ct,x′t)) (8)
Then the next word yt is generated according to:

p(yt|y1:t−1) =
∑

z

p(yt, zt=z|y1:t−1); z = {0, 1}

The joint probability is decomposed as:

p(yt, zt=z) =

{
pc(yt|y1:t−1) p(zt=z|y1:t−1), z=1
pg(yt|y1:t−1) p(zt=z|y1:t−1), z=0

pg is the probability of generating a word from the
vocabulary and is defined according to Equation 7.

pc is the probability of copying a word from the
source vector x and is defined as the sum of the
word’s attention weights. Specifically, the proba-
bility of copying a word x` is defined as:

pc(yt = x`|y1:t−1) =
∑

(j,i):x(j,i)=x`
α
(t)
(j,i) (9)

Decoder coverage In long sequences, the neu-
ral generation models tend to repeat phrases where
the softmax layer predicts the same phrase multi-
ple times over multiple timesteps. To address this
issue, following See et al. (2017), we track atten-
tion coverage to avoid repeatedly attending to the
same steps. This is done with a coverage vector
cov(t), the sum of attention weight vectors at pre-
vious timesteps: cov(t)(j,i) =

∑t−1
k=0 α

(k)

(j,i)

The coverage implicitly includes information
about the attended document discourse sections.
We incorporate the decoder coverage as an addi-
tional input to the attention function:

α
(t)

(j,i) = softmax
(i,j)

(
β
(t)
j score(h

(e)

(j,i), cov
(t)

(j,i),h
(d)
t−1)

)

4 Related work

Neural abstractive summarization models have
been studied in the past (Rush et al., 2015; Chopra
et al., 2016; Nallapati et al., 2016) and later ex-
tended by source copying (Miao and Blunsom,
2016; See et al., 2017), reinformcement learning
(Paulus et al., 2017), and sentence salience infor-
mation (Li et al., 2017). One model variant of Nal-
lapati et al. (2016) is related to our model in using
sentence-level information in attention. However,
our model is different as it contains a hierarchi-
cal encoder, uses discourse sections in the decod-
ing step, and has a coverage mechanism. Sim-
ilarly, Ling and Rush (2017) proposed a coarse-
to-fine attention model that uses hard attention to
find the text chunks of importance and then only
attend to words in that chunk. In contrast, we
consider all the discourse sections using soft at-
tention. The closest model to ours is that of See
et al. (2017) and Paulus et al. (2017) who used
a joint pointer-generator network for summariza-
tion. However, our model extends theirs by (i) a
hierarchical encoder for modeling long documents
and (ii) a discourse-aware decoder that captures
the information flow from all discourse sections of
the document. Finally, in a recent work, Liu et al.
(2018) proposed a model based on the transformer
network (Vaswani et al., 2017) for abstractive gen-
eration of Wikipedia articles. However, their focus

617



Datasets # docs avg. doc.length (words)
avg. summary
length (words)

CNN 92K 656 43
Daily Mail 219K 693 52
NY Times 655K 530 38
PubMed (this work) 133K 3016 203
arXiv (this work) 215K 4938 220

Table 1: Statistics of our arXiv and PubMed datasets
compared with existing large-scale summarization cor-
pora, CNN and Daily Mail (Nallapati et al., 2016) and
NY Times (Paulus et al., 2017).

is on multi-document summarization.
Our datasets are obtained from scientific pa-

pers. Scientific document summarization has been
recently received extended attention (Qazvinian
et al., 2013; Cohan and Goharian, 2015, 2017b,a).
In contrast to ours, existing approaches are extrac-
tive and rely on external information such as cita-
tions, which may not be available for all papers.

5 Data

Seq2seq models typically have a large number
of parameters and thus they require large training
data with ground truth summaries. Researchers
have constructed such training data from news ar-
ticles (e.g., CNN, Daily Mail and New York Times
articles), where the abstracts or highlights of news
articles are considered as ground truth summaries
(Nallapati et al., 2016; Paulus et al., 2017). How-
ever, news articles are relatively short and not suit-
able for the task of long-from document summa-
rization. Following these works, we take scien-
tific papers as an example of long documents with
discourse information, where their abstracts can
be used as ground-truth summaries. We introduce
two datasets collected from scientific repositories,
arXiv.org and PubMed.com.

The choice of scientific papers for our dataset
is motivated by the fact that scientific papers are
examples of long documents that follow a stan-
dard discourse structure and they already come
with ground truth summaries, making it possible
to train supervised neural models. We follow ex-
isting work in constructing large-scale summariza-
tion datasets that take news article abstracts as
ground truth.

We remove the documents that are excessively
long (e.g., theses) or too short (e.g., tutorial an-
nouncements), or do not have an abstract or dis-
course structure. We use the level-1 section head-
ings as the discourse information. For arXiv, we
use the LATEX files and convert them to plain text

using Pandoc (https://pandoc.org) to preserve the
discourse section information. We remove figures
and tables using regular expressions to only pre-
serve the textual information. We also normalize
math formulas and citation markers with special
tokens. We analyze the document section names
and identify the most common concluding sec-
tions names (e.g. conclusion, concluding remarks,
summary, etc). We only keep the sections up to
the conclusion section of the document and we re-
move sections after the conclusion.

The statistics of our datasets are shown in Ta-
ble 1. In our datasets, both document and sum-
mary lengths are significantly larger than the exist-
ing large-scale summarization datasets. We retain
about 3% (5%) of PubMed (ArXiv) as validation
data and about another 3% (5%) for test; the rest
is used for training.

6 Experiments
Setup Similar to the majority of published re-
search in the summarization literature (Chopra
et al., 2016; Nallapati et al., 2016; See et al., 2017),
evaluation was done using the ROUGE automatic
summarization evaluation metric (Lin, 2004) with
full-length F-1 ROUGE scores. We lowercase all
tokens and perform sentence and word tokeniza-
tion using spaCy (Honnibal and Johnson, 2015).
Implementation details We use Tensorflow 1.4
for implementing our models. We use the hyper-
parameters suggested by See et al. (2017). In par-
ticular, we use two bidirectional LSTMs with cell
size of 256 and embedding dimensions of 128.
Embeddings are trained from scratch and we did
not find any gain using pre-trained embeddings.
The vocabulary size is constrained to 50,000; us-
ing larger vocabulary size did not result in any im-
provement. We use mini-batches of size 16 and
we limit the document length to 2000 and section
length to 500 tokens, and number of sections to
4. We use batch-padding and dynamic unrolling
to handle variable sequence lengths in LSTMs.
Training was done using Adagrad optimizer with
learning rate 0.15 and an initial accumulator value
of 0.1. The maximum decoder size was 210 to-
kens which is in line with average abstract length
in our datasets. We first train the model without
coverage and added it at the last two epochs to help
the model converge faster. We train the models on
NVIDIA Titan X Pascal GPUs. Training is per-
formed for about 10 epochs and each training step
takes about 3.2 seconds. We used beam search at

618



Summarizer RG-1 RG-2 RG-3 RG-L
E

xt
ra

ct
iv

e SumBasic 29.47 6.95 2.36 26.30
LexRank 33.85 10.73 4.54 28.99
LSA 29.91 7.42 3.12 25.67

A
bs

tr
ac

tiv
e Attn-Seq2Seq 29.30 6.00 1.77 25.56

Pntr-Gen-Seq2Seq 32.06 9.04 2.15 25.16
This work †‡35.80 †11.05 †3.62 †‡31.80

Table 2: Results on the arXiv dataset, RG: ROUGE. For our
method † (‡) shows statistically significant improvement with
p<0.05 over other abstractive methods (all other methods).

Summarizer RG-1 RG-2 RG-3 RG-L

E
xt

ra
ct

iv
e SumBasic 37.15 11.36 5.42 33.43

LexRank 39.19 13.89 7.27 34.59
LSA 33.89 9.93 5.04 29.70

A
bs

tr
ac

tiv
e Attn-Seq2Seq 31.55 8.52 7.05 27.38

Pntr-Gen-Seq2Seq 35.86 10.22 7.60 29.69
This work †38.93 †‡15.37 †‡9.97 †‡35.21

Table 3: Results on PubMed dataset, RG:ROUGE. For
our method, † (‡) shows statistically significant improvement
with p<0.05 over abstractive methods (all other methods).

decoding time with beam size of 4. We train the
abstractive baselines for about 250K iterations as
suggested by their authors.

Comparison We compare our method with
several well-known extractive baselines as well
as state-of-the-art abstractive models using their
open-sourced implementations, when available;
we follow the same training setup described in
the corresponding papers. The compared methods
are: LexRank (Erkan and Radev, 2004), SumBa-
sic (Vanderwende et al., 2007), LSA (Steinberger
and Jezek, 2004), Attn-Seq2Seq (Nallapati et al.,
2016; Chopra et al., 2016), Pntr-Gen-Seq2Seq
(See et al., 2017). The first three are extractive
models and last two are abstractive. Pntr-Gen-
Seq2Seq extends Attn-Seq2Seq by using a joint
pointer network during decoding. For Pntr-Gen-
Seq2Seq we use their reported hyperparameters to
ensure that the result differences are not due to hy-
perparameter tuning.

Results Our main results are shown in Tables 2
and 3. Our model significantly outperforms the
state-of-the-art abstractive methods, showing its
effectiveness on both datasets. We observe that
in our ROUGE-1 score is respectively about 4 and
3 points higher than the abstractive model Pntr-
Gen-Seq2Seq for the arXiv and PubMed datasets,
providing a significant improvement. Our method
also outperforms most of the extractive methods
except for LexRank in one of the ROUGE scores.
We note that since extractive methods copy salient
sentences from the document, it is usually easier

Abstract: in this paper , the author proposes a series of multilevel double hash-
ing schemes called cascade hash tables . they use several levels of hash tables
. in each table , we use the common double hashing scheme . higher level
hash tables work as fail - safes of lower level hash tables . by this strategy , it
could effectively reduce collisions in hash insertion . thus it gains a constant
worst case lookup time with a relatively high load factor (@xmath0 ) in random
experiments . different parameters of cascade hash tables are tested .
Pntr-Gen-Seq2Seq: hash table is a common data structure used in large set of
data storage and retrieval . it has an o(1 ) lookup time on average , but the worst
case lookup time can be as bad as . is the size of the hash table . we present a
set of hash table schemes called cascade hash tables . hash table data structures
which consist of several of hash tables with different size .
Our method: cascade hash tables are a common data structure used in large
set of data storage and retrieval . such a time variation is essentially caused
by possibly many collisions during keys hashing . in this paper , we present a
set of hash schemes called cascade hash tables which consist of several levels (
@xmath2 ) of hash tables with different size . after constant probes , if an item
ca ’nt find a free slot in limited probes in any hash table , it will try to find a
cell in the second level , or subsequent lower levels . with this simple strategy
, these hash tables will have descendant load factors , therefore lower collision
probabilities .

Figure 2: Example of a generated summary

for them to achieve higher ROUGE scores.
Figure 2 illustrates the effectiveness of our

model extensions in capturing various discourse
information from the papers. It can be observed
that the state-of-the-art Pntr-Gen-Seq2Seq model
generates a summary that mostly focuses on intro-
ducing the problem, whereas our model generates
a summary that includes more information about
the methodology and impacts of the target paper.
This indicates that the context vector in our model
compared with Pntr-Gen-Seq2Seq is better able to
capture important information from the source by
attending to various discourse sections.

7 Conclusions and future work
This work was the first attempt at addressing

neural abstractive summarization of single, long
documents. We presented a neural sequence-to-
sequence model that is able to effectively summa-
rize long and structured documents such as scien-
tific papers. While our results are encouraging,
there is still much room for improvement for this
challenging task; our new datasets can help the
community to further explore this problem.

We note that following the convention in the
summarization research, our quantitative evalua-
tion is performed by ROUGE automatic metric.
While ROUGE is an effective evaluation frame-
work, nuances in the coherence or coverage of the
summaries are not captured with it. It is non-trivial
to evaluate such qualities especially for long doc-
ument summarization; future work can design ex-
pert human evaluations to explore these nuances.

Acknowledgements
We thank the three anonymous reviewers for

their comments and suggestions.

619



References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473 .

Sumit Chopra, Michael Auli, Alexander M Rush, and
SEAS Harvard. 2016. Abstractive sentence summa-
rization with attentive recurrent neural networks. In
HLT-NAACL. pages 93–98.

Arman Cohan and Nazli Goharian. 2015. Scien-
tific article summarization using citation-context
and article’s discourse structure. In Proceed-
ings of the 2015 Conference on Empirical Meth-
ods in Natural Language Processing. Associa-
tion for Computational Linguistics, Lisbon, Por-
tugal, pages 390–400. http://aclweb.org/
anthology/D15-1045.

Arman Cohan and Nazli Goharian. 2017a. Contextu-
alizing citations for scientific summarization using
word embeddings and domain knowledge. arXiv
preprint arXiv:1705.08063 .

Arman Cohan and Nazli Goharian. 2017b. Scientific
document summarization via citation contextualiza-
tion and scientific discourse. International Journal
on Digital Libraries pages 1–17. https://doi.
org/10.1007/s00799-017-0216-8.

Günes Erkan and Dragomir R Radev. 2004. Lexrank:
Graph-based lexical centrality as salience in text
summarization. Journal of Artificial Intelligence
Research 22:457–479.

Alex Graves, Abdel-rahman Mohamed, and Geoffrey
Hinton. 2013. Speech recognition with deep recur-
rent neural networks. In Acoustics, speech and sig-
nal processing (icassp), 2013 ieee international con-
ference on. IEEE, pages 6645–6649.

Jiatao Gu, Zhengdong Lu, Hang Li, and Victor O.K.
Li. 2016. Incorporating copying mechanism in
sequence-to-sequence learning. In Proceedings of
the 54th Annual Meeting of the Association for
Computational Linguistics (Volume 1: Long Pa-
pers). Association for Computational Linguistics,
Berlin, Germany, pages 1631–1640. http://
www.aclweb.org/anthology/P16-1154.

Karl Moritz Hermann, Tomas Kocisky, Edward
Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su-
leyman, and Phil Blunsom. 2015. Teaching ma-
chines to read and comprehend. In Advances in Neu-
ral Information Processing Systems. pages 1693–
1701.

Matthew Honnibal and Mark Johnson. 2015. An
improved non-monotonic transition system for de-
pendency parsing. In Proceedings of the 2015
Conference on Empirical Methods in Natural
Language Processing. Association for Computa-
tional Linguistics, Lisbon, Portugal, pages 1373–
1378. https://aclweb.org/anthology/
D/D15/D15-1162.

Hongyan Jing. 2002. Using hidden markov modeling
to decompose human-written summaries. Computa-
tional linguistics 28(4):527–543.

Piji Li, Wai Lam, Lidong Bing, Weiwei Guo, and Hang
Li. 2017. Cascaded attention based unsupervised
information distillation for compressive summariza-
tion. In Proceedings of the 2017 Conference on Em-
pirical Methods in Natural Language Processing.
pages 2071–2080.

Chin-Yew Lin. 2004. Rouge: A package for auto-
matic evaluation of summaries. In Text summariza-
tion branches out: Proceedings of the ACL-04 work-
shop. Barcelona, Spain, volume 8.

Jeffrey Ling and Alexander Rush. 2017. Coarse-to-
fine attention models for document summarization.
In Proceedings of the Workshop on New Frontiers
in Summarization. Association for Computational
Linguistics, Copenhagen, Denmark, pages 33–
42. http://www.aclweb.org/anthology/
W17-4505.

Peter J. Liu, Mohammad Saleh, Etienne Pot, Ben
Goodrich, Ryan Sepassi, Lukasz Kaiser, and Noam
Shazeer. 2018. Generating wikipedia by summa-
rizing long sequences. In International Confer-
ence on Learning Representations. https://
openreview.net/forum?id=Hyg0vbWC-.

Minh-Thang Luong, Hieu Pham, and Christopher D
Manning. 2015. Effective approaches to attention-
based neural machine translation. arXiv preprint
arXiv:1508.04025 .

Yishu Miao and Phil Blunsom. 2016. Language
as a latent variable: Discrete generative mod-
els for sentence compression. arXiv preprint
arXiv:1609.07317 .

Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017.
Summarunner: A recurrent neural network based se-
quence model for extractive summarization of docu-
ments. AAAI 1:1.

Ramesh Nallapati, Bowen Zhou, Caglar Gulcehre,
Bing Xiang, et al. 2016. Abstractive text summa-
rization using sequence-to-sequence rnns and be-
yond. arXiv preprint arXiv:1602.06023 .

Romain Paulus, Caiming Xiong, and Richard Socher.
2017. A deep reinforced model for abstractive sum-
marization. arXiv preprint arXiv:1705.04304 .

Vahed Qazvinian, Dragomir R Radev, Saif M Moham-
mad, Bonnie Dorr, David Zajic, Michael Whidby,
and Taesun Moon. 2013. Generating extractive sum-
maries of scientific paradigms. Journal of Artificial
Intelligence Research 46:165–201.

Alexander M Rush, Sumit Chopra, and Jason We-
ston. 2015. A neural attention model for ab-
stractive sentence summarization. arXiv preprint
arXiv:1509.00685 .

620



Abigail See, Christopher Manning, and Peter Liu.
2017. Get to the point: Summarization with pointer-
generator networks. In Association for Computa-
tional Linguistics. https://arxiv.org/abs/
1704.04368.

Yuanlong Shao, Stephan Gouws, Denny Britz, Anna
Goldie, Brian Strope, and Ray Kurzweil. 2017.
Generating high-quality and informative conversa-
tion responses with sequence-to-sequence models.
In Proceedings of the 2017 Conference on Empiri-
cal Methods in Natural Language Processing. pages
2210–2219.

Josef Steinberger and Karel Jezek. 2004. Using latent
semantic analysis in text summarization and sum-
mary evaluation. In Proc. ISIM04. pages 93–100.

Frederick Suppe. 1998. The structure of a scientific
paper. Philosophy of Science 65(3):381–405.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems. pages 3104–3112.

Lucy Vanderwende, Hisami Suzuki, Chris Brockett,
and Ani Nenkova. 2007. Beyond sumbasic: Task-
focused summarization with sentence simplification
and lexical expansion. Information Processing &
Management 43(6):1606–1618.

Ashish Vaswani, Noam Shazeer, Niki Parmar,
Jakob Uszkoreit, Llion Jones, Aidan N Gomez,
Ł ukasz Kaiser, and Illia Polosukhin. 2017.
Attention is all you need. In I. Guyon, U. V.
Luxburg, S. Bengio, H. Wallach, R. Fergus,
S. Vishwanathan, and R. Garnett, editors, Ad-
vances in Neural Information Processing Sys-
tems 30, Curran Associates, Inc., pages 6000–
6010. http://papers.nips.cc/paper/
7181-attention-is-all-you-need.
pdf.

Sam Wiseman, Stuart M Shieber, and Alexander M
Rush. 2017. Challenges in data-to-document gen-
eration. arXiv preprint arXiv:1707.08052 .

621


