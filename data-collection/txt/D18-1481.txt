



















































Learning Universal Sentence Representations with Mean-Max Attention Autoencoder


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 4514–4523
Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics

4514

Learning Universal Sentence Representations
with Mean-Max Attention Autoencoder

Minghua Zhang, Yunfang Wu∗, Weikang Li and Wei Li
Key Laboratory of Computational Linguistics, Ministry of Education

School of Electronics Engineering and Computer Science, Peking University, Beijing, China
{zhangmh,wuyf,wavejkd,liweitj47}@pku.edu.cn

Abstract

In order to learn universal sentence repre-
sentations, previous methods focus on com-
plex recurrent neural networks or supervised
learning. In this paper, we propose a mean-
max attention autoencoder (mean-max AAE)
within the encoder-decoder framework. Our
autoencoder rely entirely on the MultiHead
self-attention mechanism to reconstruct the in-
put sequence. In the encoding we propose a
mean-max strategy that applies both mean and
max pooling operations over the hidden vec-
tors to capture diverse information of the in-
put. To enable the information to steer the re-
construction process dynamically, the decoder
performs attention over the mean-max repre-
sentation. By training our model on a large
collection of unlabelled data, we obtain high-
quality representations of sentences. Experi-
mental results on a broad range of 10 trans-
fer tasks demonstrate that our model outper-
forms the state-of-the-art unsupervised single
methods, including the classical skip-thoughts
(Kiros et al., 2015) and the advanced skip-
thoughts+LN model (Ba et al., 2016). Further-
more, compared with the traditional recurren-
t neural network, our mean-max AAE greatly
reduce the training time. 1

1 Introduction

To automatically get the distributed representa-
tions of texts (words, phrases and sentences) is
a fundamental task for natural language process-
ing (NLP). There have been efficient learning al-
gorithms to acquire the representations of word-
s (Mikolov et al., 2013a), which have shown to
provide useful features for various tasks. Inter-
estingly, the acquired word representations reflect
some observed aspects of human conceptual orga-

∗Corresponding author.
1Our code is publicly available at https://github.

com/Zminghua/SentEncoding.

nization (Hill et al., 2015). In recent years, learn-
ing sentence representations has attracted much at-
tention, which is to encode sentences into fixed-
length vectors that could capture the semantic and
syntactic properties of sentences and can then be
transferred to a variety of other NLP tasks.

The most widely used method is to employ an
encoder-decoder architecture with recurrent neu-
ral networks (RNN) to predict the original input
sentence or surrounding sentences given an in-
put sentence (Kiros et al., 2015; Ba et al., 2016;
Hill et al., 2016; Gan et al., 2017). However,
the RNN becomes time consuming when the se-
quence is long. The problem becomes more se-
rious when learning general sentence representa-
tions that needs training on a large amount of data.
For example, it took two weeks to train the skip-
thought (Kiros et al., 2015). Moreover, the tra-
ditional RNN autoencoder generates words in se-
quence conditioning on the previous ground-truth
words, i.e., teacher forcing training (Williams and
Zipser, 1989). This teacher forcing strategy has
been proven important because it forces the output
of the RNN to stay close to the ground-truth se-
quence. However, at each time step, allowing the
decoder solely to access the previous ground-truth
words weakens the encoder’s ability to learn the
global information of the input sequence.

Some other approaches (Conneau et al., 2017;
Cer et al., 2018; Subramanian et al., 2018) attempt
to use the labelled data to build a generic sentence
encoder, such as the Stanford Natural Language
Inference (SNLI) dataset (Bowman et al., 2015),
but such large-scale high-quality labelled data ap-
propriate for training sentence representations is
generally not available in other languages.

In this paper, we are interested in learning u-
niversal sentence representations based on a large
amount of naturally occurring corpus, without us-
ing any labelled data. We propose a mean-max

https://github.com/Zminghua/SentEncoding
https://github.com/Zminghua/SentEncoding


4515

attention autoencoder (mean-max AAE) to model
sentence representations. Specifically, an encoder
performs the MultiHead self-attention on an input
sentence, and then the combined mean-max pool-
ing operation is employed to produce the laten-
t representation of the sentence. The representa-
tion is then fed into a decoder to reconstruct the
input sequence, which also depends entirely on
the MultiHead self-attention. At each time step,
the decoder performs attention operations over the
mean-max encoding, which on the one hand, en-
ables the decoder to utilize the global information
of the input sequence rather than generating word-
s solely conditioning on the previous ground-truth
words, and on the other hand, allows the decoder
to attend to different representation subspaces dy-
namically.

We train our autoencoder on a large collection
of unlabelled data, and evaluate the sentence em-
beddings across a diverse set of 10 transfer tasks.
The experimental results show that our model out-
performs the state-of-the-art unsupervised single
models, and obtains comparable results with the
combined models. Our mean-max representation-
s yield consistent performance gain over the indi-
vidual mean and max representations. At the same
time, our model can be efficiently parallelized and
so achieves significant improvement in computa-
tional efficiency.

In summary, our contributions are as follows:

• We apply the MultiHead self-attention mech-
anism to train autoencoder for learning uni-
versal sentence representations, which allows
our model to do processing parallelization
and thus greatly reduce the training time in
large unlabelled data.

• we adopt a mean-max representation strate-
gy in the encoding and then the decoder con-
ducts attention over the latent representation-
s, which can well capture the global informa-
tion of the input from different views.

• After training only on naturally occurring un-
ordered sentences, we obtain a simple and
fast sentence encoder, which is an unsuper-
vised single model and achieves state-of-the-
art performance on various transfer tasks.

2 Related Work

With the flourishing of deep learning in NLP re-
search, a variety of approaches have been de-

veloped for mapping word embeddings to fixed-
length sentence representations. The methods
generally fall into the following categories.

Unsupervised training with unordered sen-
tences. This kind of methods depends only
on naturally occurring individual sentences. Le
and Mikolov (2014) propose the paragraph vec-
tor model, which incorporates a global contex-
t vector into the log-linear neural language mod-
el (Mikolov et al., 2013b), but at test time, infer-
ence needs to be performed to compute a new vec-
tor. Arora et al. (2017) propose a simple but ef-
fective Smooth Inverse Frequency (SIF) method,
which represents sentence by a weighted average
of word embeddings. Hill et al. (2016) intro-
duce sequential denoising autoencoders (SDAE),
which employ the denoising objective to predict
the original source sentence given a corrupted ver-
sion. They also implement bag-of-words model-
s such as word2vec-SkipGram, word2vec-CBOW.
Our model belongs to this group, which has no re-
striction on the required training data and can be
trained on sets of sentences in arbitrary order.

Unsupervised training with ordered sen-
tences. This kind of method is trained to predic-
t the surrounding sentences of an input sentence,
based on the naturally occurring coherent texts.
Kiros et al. (2015) propose the skip-thoughts mod-
el, which uses an encoder RNN to encode a sen-
tence and two decoder RNN to predict the sur-
rounding sentences. The skip-thought vectors per-
form well on several tasks, but training this mod-
el is very slow, requiring several days to produce
meaningful results. Ba et al. (2016) further obtain
better results by adding layer-norm regularization
on the skip-thoughts model. Gan et al. (2017) ex-
plore a hierarchical model to predict multiple fu-
ture sentences, using a convolutional neural net-
work (CNN) encoder and a long-short term mem-
ory (LSTM) decoder. Logeswaran and Lee (2018)
reformulate the problem of predicting the contex-
t in which a sentence appears as a classification
task. Given a sentence and its context, a classifi-
er distinguishes context sentences from other con-
trastive sentences based on their vector represen-
tations.

Supervised learning of sentence representa-
tions. Hill et al. (2016) implement models trained
on supervised data, including dictionary defini-
tions, image captions from the COCO dataset
(Lin et al., 2014) and sentence-aligned translat-



4516

ed texts. Conneau et al. (2017) attempt to ex-
ploit the SNLI dataset for building generic sen-
tence encoders. Through examining 7 different
model schemes, they show that a bi-directional L-
STM network with the max pooling yields excel-
lent performance. Cer et al. (2018) apply multi-
task learning to train sentence encoders, including
a skip-thought like task, a conversational input-
response task and classification tasks from the
SNLI dataset. They also explore combining the
sentence and word level transfer models. Sub-
ramanian et al. (2018) also present a multi-task
learning framework for sentence representation-
s, and train their model on several data resources
with multiple training objectives on over 100 mil-
lion sentences.

3 Model Description

Our model follows the encoder-decoder architec-
ture, as shown in Figure 1. The input sequence
is compressed into a latent mean-max representa-
tion via an encoder network, which is then used to
reconstruct the input via a decoder network.

3.1 Notation

In our model, we treat the input sentence as
one sequence of tokens. Let S denote the in-
put, which is comprised of a sequence of token-
s {w1, w2, . . . , wN}, where N denotes the length
of the sequence. An additional “</S>” token
is appended to each sequence. Each word wt
in S is embedded into a k-dimensional vector
et = We[wt], where We ∈ Rdw×V is a word em-
bedding matrix, wt indexes one element in a V -
dimensional set (vocabulary), and We[v] denotes
the v-th column of matrix We.

In order for the model to take account of the se-
quence order, we also add “positional encodings”
(Vaswani et al., 2017) to the input embeddings:

pt[2i] = sin(
t

100002i/dw
) (1)

pt[2i+ 1] = cos(
t

100002i/dw
) (2)

where t is the position and i is the dimension.
Each dimension of the positional encoding corre-
sponds to a sinusoid. Therefore, the input of our
model can be represented as xt = et + pt.

In the following description, we use het and h
d
t

to denote the hidden vectors of the encoder and
decoder respectively, the subscripts of which indi-

multi-head self-attention

LN

fully-connected

Add & LN

Softmax

S
encoder decoder

Linear

LN

mean-max attention

Add & LN

multi-head self-attention

max-pooling mean-pooling

fully-connected

Add & LN

Figure 1: Illustration of the mean-max attention au-
toencoder.

cate timestep t, and the superscripts indicate oper-
ations at the encoding or decoding stage.

3.2 MultiHead Self-Attention
In this subsection, we give a quick overview of
MultiHead Self-Attention mechanism (Vaswani
et al., 2017). The attention is to map a query q
and a set of key-value pairs (K,V ) to an output.
The output is computed as a weighted sum of the
values, where the weight assigned to each value is
computed based on the query and the correspond-
ing key. The MultiHead mechanism applies mul-
tiple attention operations in parallel. Given q and
(K,V ), we can obtain the attention vector a by:

a =MultiHead(q,K, V ) (3)

= concat(head1, . . . , headl) (4)

headi = attention(q,K, V ) (5)

= softmax(
qK

T

√
dk

)V (6)

where

q,K, V = qW qi ,KW
K
i , V W

V
i (7)

W qi , W
K
i and W

V
i are parameter matrices; q ∈

Rdk , K ∈ Rnk×dk and V ∈ Rnk×dv ; dk and dv
are the dimensions of K and V respectively; nk is
the number of key-value pairs.

The MultiHead self-attention allows the mod-
el to jointly attend to information from different



4517

positions. Due to the reduced dimension of each
head and parallel operations, the total computa-
tional cost is similar to that of a single-head at-
tention.

3.3 Attention Encoder

The encoder has two sub-layers. The first is a Mul-
tiHead self-attention mechanism, and the second
is a position-wise fully connected feed-forward
network which consists of two linear transforma-
tions with a ReLU activation in between. Different
from Vaswani et al. (2017), we remove the residual
connections in the MultiHead self-attention layer
and only employ a residual connection in the fully
connected layer, allowing the model to expand the
dimension of hidden vectors to incorporate more
information.

Given the input x = (x1, . . . , xN ), the hidden
vector het at time-step t is computed by:

aet =MultiHead(xt,x,x) (8)

aet = LN(a
e
t ) (9)

h
e
t = max(0, a

e
tW

e
1 + b

e
1)W

e
2 + b

e
2 (10)

het = LN(h
e
t + a

e
t ) (11)

where W e1 ∈ Rdm×df and W e2 ∈ Rdf×dm are pa-
rameter matrices; be1 ∈ Rdf and be2 ∈ Rdm are bias
vectors; dm and df are the dimensions of hidden
vector and fully connected inner layer respective-
ly; LN denotes layer normalization.

Our model can be efficiently parallelized over
the whole input. We can obtain all hidden vec-
tors (he1, . . . , h

e
N ) simultaneously for an input se-

quence, thus greatly reducing the computational
complexity compared with the sequential process-
ing of LSTM.

3.4 Mean-Max Representation

Given the varying number of hidden vectors
{het}t=[1,...,N ], we need to transform these local
hidden vectors into a global sentence representa-
tion. We would like to apply the pooling strategy,
which makes the extracted representation indepen-
dent of the length of the input sequence and ob-
tains a fixed-length vector. Conneau et al. (2017)
examine BiLSTM with mean and max pooling for
fixed-size sentence representation, and they con-
clude that the max pooling operation performs bet-
ter on transfer tasks.

In this work, we propose to apply mean and max
pooling simultaneously. The max pooling takes

the maximum value over the sequence, which tries
to capture the most salient property while filter-
ing out less informative local values. On the oth-
er hand, the mean pooling does not make sharp
choices on which part of the sequence is more im-
portant than others, and so it captures general in-
formation while not focusing too much on specific
features. Obviously, the two pooling strategies can
complement each other. The mean-max represen-
tation is obtained by:

zmax[i] = max
t
heti (12)

zmean =
1

N

∑
t

het (13)

z = [zmax, zmean] (14)

Through combining two different pooling s-
trategies, our model enjoys the following advan-
tages. First, in the encoder, we can summarize
the hidden vectors from different perspectives and
so capture more diverse features of the input se-
quence, which will bring robustness on differen-
t transfer tasks. Second, in the decoder (as de-
scribed in the next subsection), we can perform
attention over the mean-max representation rather
than over the local hidden vectors step by step,
which would potentially make the autoencoder ob-
jective trivial.

3.5 Attention Decoder
As with the encoder, the decoder also applies
the MultiHead self-attention to reconstruct the in-
put sequence. As shown in Figure 1, the en-
coder and decoder are connected through a mean-
max attention layer, which performs attention over
the mean-max representation generated by the en-
coder.

To facilitate expansion of the hidden size, we
employ residual connections in the mean-max at-
tention layer and the fully connected layer, but
not in the MultiHead self-attention layer. Given
y = (x1, . . . , xt−1) and z as the decoder input,
the hidden vector hdt at time step t is obtained by:

adt =MultiHead(yt,y,y) (15)

adt = LN(a
d
t ) (16)

azt =MultiHead(a
d
t , z, z) (17)

azt = LN(a
z
t + a

d
t ) (18)

h
d
t = max(0, a

z
tW

d
1 + b

d
1)W

d
2 + b

d
2 (19)

hdt = LN(h
d
t + a

z
t ) (20)



4518

where W d1 ∈ Rdm×df and W d2 ∈ Rdf×dm are pa-
rameter matrices; bd1 ∈ Rdf and bd2 ∈ Rdm are
bias vectors. z in Equation (17) is the mean-max
representation generated by Equation (14).

Given the hidden vectors (hd1, . . . , h
d
N ), the

probability of generating a sequence S with
length-N is defined as:

P (wt|w<t, z) ∝ exp(W d3 hdt + bd3) (21)

J(θ) =
∑
t

logP (wt|w<t, z) (22)

The model learns to reconstruct the input sequence
by optimizing the objective in Equation (22).

4 Evaluating Sentence Representations

In the previous work, researchers evaluated the
distributed representations of sentences by adding
them as features in transfer tasks (Kiros et al.,
2015; Gan et al., 2017; Conneau et al., 2017). We
use the same benchmarks and follow the same pro-
cedure to evaluate the capability of sentence em-
beddings produced by our generic encoder.

4.1 Transfer Tasks
We conduct extensive experiments on 10 trans-
fer tasks. We first study the classification task
on 6 benchmarks: movie review sentiment (M-
R, SST) (Pang and Lee, 2005; Socher et al.,
2013), customer product reviews (CR) (Hu and
Liu, 2004), subjectivity/objectivity classification
(SUBJ) (Pang and Lee, 2004), opinion polarity
(MPQA) (Wiebe et al., 2005) and question type
classification (TREC) (Li and Roth, 2002).

We also consider paraphrase detection on the
Microsoft Research Paraphrase Corpus (MRPC)
(Dolan et al., 2004), where the evaluation metrics
are accuracy and F1 score.

We then evaluate on the SICK dataset (Marelli
et al., 2014) for both textual entailment (SICK-E)
and semantic relatedness (SICK-R). The evalua-
tion metric is Pearson correlation for SICK-R. We
also evaluate on the SemEval task of STS14 (A-
girre et al., 2014), where the evaluation metrics are
Pearson and Spearman correlations.

The processing on each task is as follows: 1)
Employ the pre-trained attention autoencoder to
encode all sentences into the latent mean-max rep-
resentations. 2) Using the representations as fea-
tures, apply the open SentEval with a logistic re-
gression classifier (Conneau et al., 2017) to au-
tomatically evaluate on all the tasks. For a fair

comparison of the plain sentence embeddings, we
adopt all the default settings.

4.2 Experiment Setup
We train our model on the open Toronto Books
Corpus (Zhu et al., 2015), which was also used
to train the skip-thoughts (Kiros et al., 2015) and
skip-thoughts+LN (Ba et al., 2016). The Toron-
to Book Corpus consists of 70 million sentences
from over 7, 000 books, which is not biased to-
wards any particular domain or application.

The dimensions of hidden vectors and fully con-
nected inner layer are set to 2, 048 and 4, 096 re-
spectively. Hence, our mean-max AAE represents
sentences with 4, 096 dimensional vectors. We set
l = 8 parallel attention heads according to the de-
velopment data.

We use the Adam algorithm (Kingma and Ba,
2014) with learning rate 2×10−4 for optimization.
Gradient clipping is adopted by scaling gradients
when the norm of the parameter vector exceeds a
threshold of 5. We perform dropout (Srivastava
et al., 2014) and set the dropout rate to 0.5. Mini-
batches of size 64 are used. Our model learns un-
til the reconstruction accuracy in the development
data stops improving.

Our aim is to learn a generic sentence encoder
that could encode a large number of words. There
always are some words that haven’t been seen dur-
ing training, and so we use the publicly available
GloVe vectors 2 to expand our encoder’s vocab-
ulary. We set the word vectors in our models as
the corresponding word vectors in GloVe, and do
not update the word embeddings during training.
Thus, any word vectors from GloVe can be nat-
urally used to encode sentences. Our models are
trained with a vocabulary of 21, 583 top frequent
words in the Toronto Book corpus. After vocab-
ulary expansion, we can now successfully cover
2, 196, 017 words.

All experiments are implemented in Tensorflow
(Abadi et al., 2016), using a NVIDIA GeForce
GTX 1080 GPU with 8GB memory.

4.3 Evaluation Results
A summary of our experimental results on 10 tasks
is given in Table 1, in which the evaluation metric
of the first 8 tasks is accuracy. To make a clear
comparison of the overall performance, we com-
pute the “macro” and “micro” average of accuracy

2https://nlp.stanford.edu/projects/
glove/

https://nlp.stanford.edu/projects/glove/
https://nlp.stanford.edu/projects/glove/


4519

Method MR CR SUBJ MPQA SST TREC MRPC SICK-E SICK-R STS14

Unsupervised training of single model

ParagraphVec (DBOW) 60.2 66.9 76.3 70.7 - 59.4 72.9/81.1 - - .42/.43
SDAE 74.6 78.0 90.8 86.9 - 78.4 73.7/80.7 - - .37/.38
SIF (GloVe + WR) - - - - 82.2 - - 84.6 - .69/ -
word2vec BOW† 77.7 79.8 90.9 88.3 79.7 83.6 72.5/81.4 78.7 0.803 .65/.64
GloVe BOW† 78.7 78.5 91.6 87.6 79.8 83.6 72.1/80.9 78.6 0.800 .54/.56
FastSent 70.8 78.4 88.7 80.6 - 76.8 72.2/80.3 - - .63/.64
FastSent+AE 71.8 76.7 88.8 81.5 - 80.4 71.2/79.1 - - .62/.62
uni-skip 75.5 79.3 92.1 86.9 - 91.4 73.0/81.9 - - -
bi-skip 73.9 77.9 92.5 83.3 - 89.4 71.2/81.2 - - -
hierarchical-CNN 75.3 79.3 91.9 88.4 - 90.4 74.2/82.7 - - -
composite-CNN 77.1 80.6 92.1 88.6 - 91.2 74.8/82.2 - - -
skip-thoughts+LN† 79.4 83.1 93.7 89.3 82.9 88.4 - 79.5 0.858 .44/.45

mean-max AAE 78.7 82.3 93.4 88.8 83.8 91.4 75.5/82.6 83.5 0.854 .58/.56

Unsupervised training of combined model

combine-skip† 76.5 80.1 93.6 87.1 82.0 92.2 73.0/82.0 82.3 0.858 .29/.35
combine-CNN 77.7 82.0 93.6 89.3 - 92.6 76.4/83.7 - - -

Trained on supervised data

BiLSTM-Max (on SST) * 83.7 90.2 89.5 * 86.0 72.7/80.9 83.1 0.863 .55/.54
BiLSTM-Max (on SNLI) 79.9 84.6 92.1 89.8 83.3 88.7 75.1/82.3 86.3 0.885 .68/.65
BiLSTM-Max (on AllNLI) 81.1 86.3 92.4 90.2 84.6 88.2 76.2/83.1 86.3 0.884 .70/.67

Table 1: Performance of sentence representation models on 10 transfer tasks. Top 2 results of unsupervised single
models are shown in bold. The results with † are extracted from Conneau et al. (2017).

Method Macro/Micro8 tasks 7 tasks 6 tasks

uni-skip - - 83.0/83.7
bi-skip - - 81.4/82.1
hierarchical-CNN - - 83.3/84.0
composite-CNN - - 84.1/84.8
skip-thoughts+LN - 85.2/85.9 -

mean-max AAE 84.7/85.6 86.0/86.0 85.0/85.9

combine-skip 83.4/84.2 - -
combine-CNN - - 85.3/85.8

BiLSTM-Max(SST) - - -
BiLSTM-Max(SNLI) 85.0/86.2 - -
BiLSTM-Max(AllNLI) 85.7/86.9 - -

Table 2: The macro and micro average accuracy across
different tasks. The bold is the highest score among all
unsupervised models.

in Table 2, where the micro average is weighted
by the number of test samples in each task. In the
previous work, different approaches conduct ex-
periments on different benchmarks. Therefore we
report the average scores on 6 tasks, 7 tasks and 8
tasks, respectively.

We divide related models into three groups. The
first group contains unsupervised single model-
s, including the Paragraph Vector model (Le and
Mikolov, 2014), the SDAE method (Hill et al.,
2016), the SIF model (Arora et al., 2017), the Fast-

Sent (Hill et al., 2016), the skip-thoughts (uni-
skip and bi-skip) (Kiros et al., 2015), the CNN
encoder (hierarchical-CNN and composite-CNN)
(Gan et al., 2017) and skip-thoughts+LN (Ba et al.,
2016). Our mean-max attention autoencoder sits
in this group. The second group consists of un-
supervised combined models, including combine-
skip (Kiros et al., 2015) and combine-CNN (Gan
et al., 2017). In the third group, we list the results
from the work of Conneau et al. (2017) only for
reference, since it is trained on labelled data.

Comparison with skip-thoughts+LN. The
skip-thoughts+LN is the best model among the
existing single models. Compared with the skip-
thoughts+LN, our method obtains better results
on 4 datasets (SST, TREC, SICK-E, STS14) and
comparable results on 3 datastes (SUBJ, MPQA,
SICK-R). Looking at the STS14 results, we ob-
serve that the cosine metrics in our representation
space is much more semantically informative than
in skip-thoughts+LN representation space (pear-
son score of 0.58 compared to 0.44). Consid-
ering the overall performance shown in Table 2,
our model obtains better results both in the macro
and micro average accuracy across 7 considered
tasks. In view of the required training data, the
skip-thoughts+LN needs coherent texts while our



4520

model needs only individual sentences. Moreover,
we train our model in less than 5 hours on a sin-
gle GPU compared to the best skip-thoughts+LN
network trained for a month.

Unsupervised combined models. The result-
s of the individual models (Kiros et al., 2015;
Gan et al., 2017) are not promising. To get bet-
ter performance, they train two separate models
on the same corpus and then combine the laten-
t representations together. As shown in Table 2,
our mean-max attention autoencoder outperform-
s the classical combine-skip model by 1.3 points
in the average performance across 8 considered
tasks. Specially, the pearson correlation of our
model is 2 times over the combine-skip model on
the STS14 task. Looking at the overall perfor-
mance of 6 tasks, our model gets comparable re-
sults with the combine-CNN, which combines the
hierarchical and composite approaches to exploit
the intra-sentence and inter-sentence information.
Obviously, our model is simple and fast to imple-
ment compared with the combined methods.

Supervised representation training. It is un-
fair to directly compare our totally unsupervised
model with the supervised representation learning
method. Conneau et al. (2017) train the BiLSTM-
Max (on ALLNLI) on the high-quality natural lan-
guage inference data. Our model even perform-
s better than the BiLSTM-Max (on ALLNLI) on
the SUBJ and TREC tasks. More importantly, our
model can be easily adapted to other low-resource
languages.

4.4 Model Analysis

Our model contains three main modules: the
mean-max attention layer, the combined pooling
strategy and the encoder-decoder network. We
make a further study on these components. The
experimental results are shown in Table 3.

In our model, the mean-max attention layer al-
lows the decoder to pay attention to the encod-
ing representation of the full sentence at each time
step dynamically. To summarize the contribu-
tion of the mean-max attention layer, we compare
with traditional baselines, including the sequential
denoising autoencoder (SDAE) with LSTM net-
works (Hill et al., 2016) and the CNN-LSTM au-
toencoder (Gan et al., 2017), both of which only
use the encoding representation to set the initial s-
tate of the decoder and follow the teacher forcing
strategy.

We employ both the mean and max pooling op-
erations over the local hidden vectors to obtain
sentence embeddings. To validate the effective-
ness of our mean-max representations, we train
two additional models: (i) an attention autoen-
coder only with max pooling (max AAE) and (ii)
an attention autoencoder only with mean pooling
(mean AAE). The dimension of hidden vectors is
also set to 2, 048.

Our encoder-decoder network depends on the
MultiHead self-attention mechanism to recon-
struct the input sequence. To test the effect of the
MultiHead self-attention mechanism, we replace
it with RNN and implement a mean-max RNN au-
toencoder (mean-max RAE) training on the same
Toronto Books Corpus. A bidirectional LSTM
computes a set of hidden vectors on an input sen-
tence, and then the mean and max pooling oper-
ations are employed to generate the latent mean-
max representation. The representation is then
fed to a LSTM decoder to reconstruct the input
sequence through attention operation over the la-
tent representation. The parameter configurations
are consistent with our other models. Moreover,
we also train two additional models with different
pooling strategies: mean RAE and max RAE.

Analysis on the mean-max attention layer.
Our mean-max attention layer brings significan-
t performance gain over the previous autoen-
coders. Compared the mean RAE with LSTM-
SDAE, both of which use the RNN-RNN encoder-
decoder network to reconstruct the input sequence,
our mean RAE consistently obtains better perfor-
mance than LSTM-SDAE across all considered
tasks. In particular, it yields a performance gain
of 10.4 on the TREC dataset and 29 on the STS14
dataset. Compared with another CNN-LSTM au-
toencoder, our mean RAE also gets better perfor-
mance for all but one task. It demonstrates that
the mean-max attention layer enables the decoder
to attend to the global information of the input se-
quence, thus go beyond the “teacher forcing train-
ing”.

Analysis on the pooling strategy. Considering
the overall performance, our mean-max represen-
tations outperform the individual mean and max
representations both in the attention and RNN net-
works. In our attention autoencoder, the macro av-
erage score of the mean-max AAE is more than
0.6 over the individual pooling strategy. In the
RNN autoencoder, the combined pooling strategy



4521

Method Macro MR CR SUBJ MPQA SST TREC MRPC SICK-E SICK-R STS14

mean AAE 84.1 78.6 81.6 93.3 88.6 83.5 90.2 74.8/82.3 82.2 0.851 .57/.55
max AAE 84.1 78.6 81.4 93.1 88.7 82.8 90.6 75.1/82.5 82.2 0.851 .57/.55

mean-max AAE 84.7 78.7 82.3 93.4 88.8 83.8 91.4 75.5/82.6 83.5 0.854 .58/.56

mean RAE 83.1 77.1 80.2 92.4 88.4 81.9 88.8 74.3/82.2 81.9 0.836 .66/.64
max RAE 83.0 77.2 80.1 92.0 88.4 81.0 88.6 74.3/82.0 82.0 0.851 .68/.66

mean-max RAE 83.6 77.4 80.1 92.2 88.5 82.3 90.6 74.6/82.0 83.2 0.853 .68/.65

LSTM SDAE - 74.6 78.0 90.8 86.9 - 78.4 73.7/80.7 - - .37/.38
CNN-LSTM AE - 75.5 79.0 92.0 88.0 - 89.8 73.6/82.1 - - -

Table 3: Performance of different pooling strategies and different encoder-decoder networks on 10 transfer tasks.
Macro is the macro average over the first 8 tasks whose metric is accuracy.

yields a performance gain of 0.5 over the mean
pooling and 0.6 over the max pooling. The re-
sults indicate that our mean-max pooling captures
more diverse information of the input sequence,
which is robust and effective in dealing with vari-
ous transfer tasks.

Comparison with RNN-based autoencoder.
As shown in Table 3, our MultiHead self-attention
network obtains obvious improvement over the
RNN network in different sets of pooling strate-
gies, and it yields a performance gain of 1.1 when
applying the best combined mean-max pooling
operation. The results demonstrate that the Mul-
tiHead self-attention mechanism enables the sen-
tence representations to capture more useful infor-
mation about the input sequence.

Analysis on computational complexity. A
self-attention layer connects all positions with a
constant number of sequentially executed opera-
tions, whereas a recurrent layer requires O(n) se-
quential operations. Therefore, our model greatly
reduces the computational complexity. Excluding
the number of parameters used in the word embed-
dings, the skip-thought model (Kiros et al., 2015)
contains 40 million parameters, while our mean-
max AAE has approximately 39 million parame-
ters. It took nearly 50.4 and 25.4 minutes to train
the skip-thought model (Kiros et al., 2015) and the
skip-thoughts+LN (Ba et al., 2016) per 1000 mini-
batches respectively. Both the skip-thought and
skip-thought+LN are implemented in Theano. A
recent implementation of the skip-thoughts model
was released by Google 3, which took nearly 25.9
minutes to train 1000 mini-batches on a GTX 1080
GPU. In our experiment, it took 3.3 minutes to
train the mean-max AAE model every 1000 mini-
batches.

3https://github.com/tensorflow/models/
tree/master/research/skip_thoughts

mean max mean max

Figure 2: Two examples illustrate that our mean-max
attention layer could attend to the two different repre-
sentations dynamically.

4.5 Attention Visualization

The above experimental results have proven the ef-
fectiveness of the mean-max attention mechanism
in the decoding. We further inspect the attention
distributions captured by the mean-max attention
layer, as shown in Figure 2. The side-by-side heat
illustrates how much the decoder pay attention to
the mean representation and max representation
respectively at each decoding step. We can see that
the attention layer learns to selectively retrieve the
mean or max representations dynamically, which
relieve the decoder from the burden of generating
words solely conditioning on the previous ground-
truth words. Also, the two different representa-
tions can complement each other, and the mean
representation plays a greater role.

https://github.com/tensorflow/models/tree/master/research/skip_thoughts
https://github.com/tensorflow/models/tree/master/research/skip_thoughts


4522

5 Conclusion

In this paper, we present a mean-max AAE to
learn universal sentence representations from un-
labelled data. Our model applies the MultiHead
self-attention mechanism both in the encoder and
decoder, and employs a mean-max pooling strat-
egy to capture more diverse information of the
input. To avoid the impact of “teacher forcing
training”, our decoder performs attention over the
encoding representations dynamically. To eval-
uate the effectiveness of sentence representation-
s, we conduct extensive experiments on 10 trans-
fer tasks. The experimental results show that our
model obtains state-of-the-art performance among
the unsupervised single models. Furthermore, it
is fast to train a high-quality generic encoder due
to the paralleling operation. In the future, we will
adapt our mean-max AAE to other low-resource
languages for learning universal sentence repre-
sentations.

Acknowledgments

We would like to thank the anonymous reviewers
for their valuable comments. This work is support-
ed by the National Key Basic Research Program of
China (2014CB340504) and National Natural Sci-
ence Foundation of China (61773026, 61572245).
The corresponding author of this paper is Yunfang
Wu.

References
Martı́n Abadi, Ashish Agarwal, Paul Barham, Eugene

Brevdo, Zhifeng Chen, Craig Citro, Greg S Corra-
do, Andy Davis, Jeffrey Dean, Matthieu Devin, et al.
2016. Tensorflow: Large-scale machine learning on
heterogeneous distributed systems. arXiv preprint
arXiv:1603.04467.

Eneko Agirre, Carmen Banea, Claire Cardie, Daniel
Cer, Mona Diab, Aitor Gonzalez-Agirre, Weiwei
Guo, Rada Mihalcea, German Rigau, and Janyce
Wiebe. 2014. Semeval-2014 task 10: Multilingual
semantic textual similarity. In International Work-
shop on Semantic Evaluation, pages 81–91.

Sanjeev Arora, Yingyu Liang, and Tengyu Ma. 2017.
A simple but tough-to-beat baseline for sentence em-
beddings. In ICLR.

Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hin-
ton. 2016. Layer normalization. arXiv preprint arX-
iv:1607.06450.

Samuel R Bowman, Gabor Angeli, Christopher Potts,
and Christopher D Manning. 2015. A large anno-

tated corpus for learning natural language inference.
arXiv preprint arXiv:1508.05326.

Daniel Cer, Yinfei Yang, Sheng-yi Kong, Nan Hua,
Nicole Limtiaco, Rhomni St John, Noah Constan-
t, Mario Guajardo-Cespedes, Steve Yuan, Chris Tar,
et al. 2018. Universal sentence encoder. arXiv
preprint arXiv:1803.11175.

Alexis Conneau, Douwe Kiela, Holger Schwenk, Loic
Barrault, and Antoine Bordes. 2017. Supervised
learning of universal sentence representations from
natural language inference data. arXiv preprint arX-
iv:1705.02364.

Bill Dolan, Chris Quirk, and Chris Brockett. 2004. Un-
supervised construction of large paraphrase corpora:
exploiting massively parallel news sources. In Inter-
national Conference on Computational Linguistics,
page 350.

Zhe Gan, Yunchen Pu, Ricardo Henao, Chunyuan Li,
Xiaodong He, and Lawrence Carin. 2017. Learning
generic sentence representations using convolution-
al neural networks. In Proceedings of the 2017 Con-
ference on Empirical Methods in Natural Language
Processing, pages 2380–2390.

Felix Hill, Kyunghyun Cho, and Anna Korhonen. 2016.
Learning distributed representations of sentences
from unlabelled data. In Proceedings of NAACL-
HLT, pages 1367–1377.

Felix Hill, Roi Reichart, and Anna Korhonen. 2015.
Simlex-999: Evaluating semantic models with (gen-
uine) similarity estimation. Computational Linguis-
tics, 41(4):665–695.

Minqing Hu and Bing Liu. 2004. Mining and summa-
rizing customer reviews. In Tenth ACM SIGKDD
International Conference on Knowledge Discovery
and Data Mining, Seattle, Washington, Usa, August,
pages 168–177.

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Ryan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,
Richard Zemel, Raquel Urtasun, Antonio Torralba,
and Sanja Fidler. 2015. Skip-thought vectors. In
Advances in neural information processing systems,
pages 3294–3302.

Quoc Le and Tomas Mikolov. 2014. Distributed repre-
sentations of sentences and documents. In Proceed-
ings of the 31st International Conference on Ma-
chine Learning (ICML-14), pages 1188–1196.

Xin Li and Dan Roth. 2002. Learning question classi-
fiers. Coling, 12(24):556–562.

Tsung Yi Lin, Michael Maire, Serge Belongie, James
Hays, Pietro Perona, Deva Ramanan, Piotr Dollr,
and C. Lawrence Zitnick. 2014. Microsoft coco:
Common objects in context. In European Confer-
ence on Computer Vision, pages 740–755.



4523

Lajanugen Logeswaran and Honglak Lee. 2018. An
efficient framework for learning sentence represen-
tations. arXiv preprint arXiv:1803.02893.

Marco Marelli, Stefano Menini, Marco Baroni, Luisa
Bentivogli, Raffaella Bernardi, and Roberto Zam-
parelli. 2014. A sick cure for the evaluation of com-
positional distributional semantic models. In Lan-
guage Resources and Evaluation Conference, pages
A–696.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013a. Efficient estimation of word rep-
resentations in vector space. arXiv preprint arX-
iv:1301.3781.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013b. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111–3119.

Bo Pang and Lillian Lee. 2004. A sentimental educa-
tion: sentiment analysis using subjectivity summa-
rization based on minimum cuts. In Meeting on As-
sociation for Computational Linguistics, page 271.

Bo Pang and Lillian Lee. 2005. Seeing stars: Exploit-
ing class relationships for sentiment categorization
with respect to rating scales. In Proceedings of A-
CL, pages 115–124.

Richard Socher, Alex Perelygin, Jean Wu, Jason
Chuang, Christopher D Manning, Andrew Ng, and
Christopher Potts. 2013. Recursive deep models
for semantic compositionality over a sentiment tree-
bank. In Proceedings of the 2013 conference on
empirical methods in natural language processing,
pages 1631–1642.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. Journal of machine learning re-
search, 15(1):1929–1958.

Sandeep Subramanian, Adam Trischler, Yoshua Ben-
gio, and Christopher J Pal. 2018. Learning gener-
al purpose distributed sentence representations via
large scale multi-task learning. arXiv preprint arX-
iv:1804.00079.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. arXiv preprint arXiv:1706.03762.

Janyce Wiebe, Theresa Wilson, and Claire Cardie.
2005. Annotating expressions of opinions and emo-
tions in language. Language Resources and Evalu-
ation, 39(2-3):165–210.

Ronald J Williams and David Zipser. 1989. A learn-
ing algorithm for continually running fully recurren-
t neural networks. Neural computation, 1(2):270–
280.

Yukun Zhu, Ryan Kiros, Richard Zemel, Ruslan
Salakhutdinov, Raquel Urtasun, Antonio Torralba,
and Sanja Fidler. 2015. Aligning books and movies:
Towards story-like visual explanations by watching
movies and reading books. arXiv preprint arX-
iv:1506.06724.


