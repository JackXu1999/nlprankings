



















































Stochastic Contextual Edit Distance and Probabilistic FSTs


Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 625–630,
Baltimore, Maryland, USA, June 23-25 2014. c©2014 Association for Computational Linguistics

Stochastic Contextual Edit Distance and Probabilistic FSTs
Ryan Cotterell and Nanyun Peng and Jason Eisner

Department of Computer Science, Johns Hopkins University
{ryan.cotterell,npeng1,jason}@cs.jhu.edu

Abstract
String similarity is most often measured
by weighted or unweighted edit distance
d(x, y). Ristad and Yianilos (1998) de-
fined stochastic edit distance—a probabil-
ity distribution p(y | x) whose parame-
ters can be trained from data. We general-
ize this so that the probability of choosing
each edit operation can depend on contex-
tual features. We show how to construct
and train a probabilistic finite-state trans-
ducer that computes our stochastic con-
textual edit distance. To illustrate the im-
provement from conditioning on context,
we model typos found in social media text.

1 Introduction

Many problems in natural language processing
can be viewed as stochastically mapping one
string to another: e.g., transliteration, pronuncia-
tion modeling, phonology, morphology, spelling
correction, and text normalization. Ristad and
Yianilos (1998) describe how to train the param-
eters of a stochastic editing process that moves
through the input string x from left to right, trans-
forming it into the output string y. In this paper we
generalize this process so that the edit probabilities
are conditioned on input and output context.

We further show how to model the conditional
distribution p(y | x) as a probabilistic finite-state
transducer (PFST), which can be easily combined
with other transducers or grammars for particu-
lar applications. We contrast our probabilistic
transducers with the more general framework of
weighted finite-state transducers (WFST), explain-
ing why our restriction provides computational ad-
vantages when reasoning about unknown strings.

Constructing the finite-state transducer is tricky,
so we give the explicit construction for use by oth-
ers. We describe how to train its parameters when
the contextual edit probabilities are given by a log-
linear model. We provide a library for training
both PFSTs and WFSTs that works with OpenFST
(Allauzen et al., 2007), and we illustrate its use
with simple experiments on typos, which demon-
strate the benefit of context.

2 Stochastic Contextual Edit Distance

Our goal is to define a family of probability distri-
butions pθ(y | x), where x ∈ Σ∗x and y ∈ Σ∗y are
input and output strings over finite alphabets Σx
and Σy, and θ is a parameter vector.

Let xi denote the ith character of x. If i < 1 or
i > |x|, then xi is the distinguished symbol BOS
or EOS (“beginning/end of string”). Let xi:j denote
the (j − i)-character substring xi+1xi+2 · · ·xj .

Consider a stochastic edit process that reads in-
put string x while writing output string y. Having
read the prefix x0:i and written the prefix y0:j , the
process must stochastically choose one of the fol-
lowing 2|Σy|+ 1 edit operations:
• DELETE: Read xi+1 but write nothing.
• INSERT(t) for some t ∈ Σy: Write yj+1 = t

without reading anything.
• SUBST(t) for some t ∈ Σy: Read xi+1 and

write yj+1 = t. Note that the traditional
COPY operation is obtained as SUBST(xi+1).

In the special case where xi+1 = EOS, the choices
are instead INSERT(t) and HALT (where the latter
may be viewed as copying the EOS symbol).

The probability of each edit operation depends
on θ and is conditioned on the left input context
C1 = x(i−N1):i, the right input context C2 =
xi:(i+N2) , and the left output context C3 =
y(j−N3):j , where the constants N1, N2, N3 ≥ 0
specify the model’s context window sizes.1 Note
that the probability cannot be conditioned on right
output context because those characters have not
yet been chosen. Ordinary stochastic edit dis-
tance (Ristad and Yianilos, 1998) is simply the
case (N1, N2, N3) = (0, 1, 0), while Bouchard-
Côté et al. (2007) used roughly (1, 2, 0).

Now pθ(y | x) is the probability that this pro-
cess will write y as it reads a given x. This is the
total probability (given x) of all latent edit oper-
ation sequences that write y. In general there are
exponentially many such sequences, each imply-
ing a different alignment of y to x.

1IfN2 = 0, so that we do not condition on xi+1, we must
still condition on whether xi+1 = EOS (a single bit). We
gloss over special handling for N2 = 0; but it is in our code.

625



This model is reminiscent of conditional mod-
els in MT that perform stepwise generation of one
string or structure from another—e.g., string align-
ment models with contextual features (Cherry and
Lin, 2003; Liu et al., 2005; Dyer et al., 2013), or
tree transducers (Knight and Graehl, 2005).

3 Probabilistic FSTs

We will construct a probabilistic finite-state
transducer (PFST) that compactly models pθ(y |
x) for all (x, y) pairs.2 Then various computa-
tions with this distribution can be reduced to stan-
dard finite-state computations that efficiently em-
ploy dynamic programming over the structure of
the PFST, and the PFST can be easily combined
with other finite-state distributions and functions
(Mohri, 1997; Eisner, 2001).

A PFST is a two-tape generalization of the well-
known nondeterministic finite-state acceptor. It
is a finite directed multigraph where each arc is
labeled with an input in Σx ∪ {�}, an output in
Σy∪{�}, and a probability in [0, 1]. (� is the empty
string.) Each state (i.e., vertex) has a halt proba-
bility in [0, 1], and there is a single initial state qI.
Each path from qI to a final state qF has

• an input string x, given by the concatenation
of its arcs’ input labels;
• an output string y, given similarly;
• a probability, given by the product of its arcs’

probabilities and the halt probability of qF.

We define p(y | x) as the total probability of all
paths having input x and output y. In our applica-
tion, a PFST path corresponds to an edit sequence
that reads x and writes y. The path’s probability is
the probability of that edit sequence given x.

We must take care to ensure that for any x ∈ Σ∗x,
the total probability of all paths accepting x is 1,
so that pθ(y | x) is truly a conditional probability
distribution. This is guaranteed by the following
sufficient conditions (we omit the proof for space),
which do not seem to appear in previous literature:

• For each state q and each symbol b ∈ Σx, the
arcs from q with input label b or � must have
total probability of 1. (These are the available
choices if the next input character is x.)

2Several authors have given recipes for finite-state trans-
ducers that perform a single contextual edit operation (Kaplan
and Kay, 1994; Mohri and Sproat, 1996; Gerdemann and van
Noord, 1999). Such “rewrite rules” can be individually more
expressive than our simple edit operations of section 2; but it
is unclear how to train a cascade of them to model p(y | x).

• For each state q, the halt action and the arcs
from q with input label � must have total
probability of 1. (These are the available
choices if there is no next input character.)

• Every state q must be co-accessible, i.e., there
must be a path of probability > 0 from q to
some qF . (Otherwise, the PFST could lose
some probability mass to infinite paths. The
canonical case of this involves an loop q → q
with input label � and probability 1.)

We take the first two conditions to be part of the
definition of a PFST. The final condition requires
our PFST to be “tight” in the same sense as a
PCFG (Chi and Geman, 1998), although the tight-
ness conditions for a PCFG are more complex.
In section 7, we discuss the costs and benefits of
PFSTs relative to other options.

4 The Contextual Edit PFST

We now define a PFST topology that concisely
captures the contextual edit process of section 2.
We are given the alphabets Σx,Σy and the context
window sizes N1, N2, N3 ≥ 0.

For each possible context triple C =
(C1, C2, C3) as defined in section 2, we construct
an edit state qC whose outgoing arcs correspond
to the possible edit operations in that context.

One might expect that the SUBST(t) edit oper-
ation that reads s = xi+1 and writes t = yj+1
would correspond to an arc with s, t as its input
and output labels. However, we give a more effi-
cient design where in the course of reaching qC ,
the PFST has already read s and indeed the en-
tire right input context C2 = xi:(i+N2). So our
PFST’s input and output actions are “out of sync”:
its read head is N2 characters ahead of its write
head. When the edit process of section 2 has read
x0:i and written y0:j , our PFST implementation
will actually have read x0:(i+N2) and written y0:j .

This design eliminates the need for nondeter-
ministic guessing (of the right context xi:(i+N2)) to
determine the edit probability. The PFST’s state is
fully determined by the characters that it has read
and written so far. This makes left-to-right com-
position in section 5 efficient.

A fragment of our construction is illustrated in
Figure 1. An edit state qC has the following out-
going edit arcs, each of which corresponds to an
edit operation that replaces some s ∈ Σx ∪ {�}
with some t ∈ Σy ∪ {�}:

626



b     c

y     _

a     bc

z       _

a      b

x      _

a     ba

x       _ε:z
 /

ε:ε /
 

ε:y /

ε:x / 

inse
rt z

insert x

substitute y for b

delet
e b

b      c

x      _   

read c

c:ε / 1

      p(INSERT(x) | (a,bc,x) )

       
p(INS

ERT(
z) | (a

,bc,x
) )

p(SUBST(y) | (a,bc,x) )

      p
(DELE

TE(b)
 | (a,b

c,x) )

a     ba

x       _

a      bc

x       _

Figure 1: A fragment of a PFST withN1 = 1, N2 = 2, N3 =
1. Edit states are shaded. A state qC is drawn with left and
right input contexts C1, C2 in the left and right upper quad-
rants, and left output context C3 in the left lower quadrant.
Each arc is labeled with input:output / probability.

• A single arc with probability p(DELETE | C)
(here s = (C2)1, t = �)
• For each t ∈ Σy, an arc with probability
p(INSERT(t) | C) (here s = �)
• For each t ∈ Σy, an arc with probability
p(SUBST(t) | C) (here s = (C2)1)

Each edit arc is labeled with input � (because s
has already been read) and output t. The arc leads
from qC to qC′ , a state that moves s and t into
the left contexts: C ′1 = suffix(C1s,N1), C ′2 =
suffix(C2, N2 − |s|), C ′3 = suffix(C3t,N3).

Section 2 mentions that the end of x requires
special handling. An edit state qC whose C2 =
EOSN2 only has outgoing INSERT(t) arcs, and has
a halt probability of p(HALT | C). The halt proba-
bility at all other states is 0.

We must also build some non-edit states of the
form qC where |C2| < N2. Such a state does not
have the full N2 characters of lookahead that are
needed to determine the conditional probability of
an edit. Its outgoing arcs deterministically read
a new character into the right input context. For
each s ∈ Σx, we have an arc of probability 1 from
qC to qC′ where C ′ = (C1, C2s, C3), labeled with
input s and output �. Following such arcs from qC
will reach an edit state after N2 − |C2| steps.

The initial state qI with I = (BOSN1 , �, BOSN3)
is a non-edit state. Other non-edit states are con-
structed only when they are reachable from an-
other state. In particular, a DELETE or SUBST arc
always transitions to a non-edit state, since it con-
sumes one of the lookahead characters.

5 Computational Complexity

We summarize some useful facts without proof.
For fixed alphabets Σx and Σy, our final

PFST, T , has O(|Σx|N1+N2 |Σy|N3) states and
O(|Σx|N1+N2 |Σy|N3+1) arcs. Composing this T
with deterministic FSAs takes time linear in the
size of the result, using a left-to-right, on-the-fly
implementation of the composition operator ◦.

Given strings x and y, we can compute pθ(y |
x) as the total probability of all paths in x ◦ T ◦ y.
This acyclic weighted FST has O(|x| · |y|) states
and arcs. It takes onlyO(|x| · |y|) time to construct
it and sum up its paths by dynamic programming,
just as in other edit distance algorithms.

Given only x, taking the output language of
x ◦ T yields the full distribution pθ(y | x)
as a cyclic PFSA with O(|x| · ΣN3y ) states and
O(|x| · ΣN3+1y ) arcs. Finding its most probable
path (i.e., most probable aligned y) takes time
O(|arcs| log |states|), while computing every arc’s
expected number of traversals under p(y | x) takes
time O(|arcs| · |states|).3
pθ(y | x) may be used as a noisy channel

model. Given a language model p(x) repre-
sented as a PFSA X , X ◦ T gives p(x, y) for all
x, y. In the case of an n-gram language model
with n ≤ N1 + N2, this composition is effi-
cient: it merely reweights the arcs of T . We
use Bayes’ Theorem to reconstruct x from ob-
served y: X ◦ T ◦ y gives p(x, y) (proportional
to p(x | y)) for each x. This weighted FSA has
O(ΣN1+N2x · |y|) states and arcs.

6 Parameterization and Training

While the parameters θ could be trained via var-
ious objective functions, it is particularly effi-
cient to compute the gradient of conditional log-
likelihood,

∑
k log pθ(yk | xk), given a sample

of pairs (xk, yk). This is a non-convex objective
function because of the latent x-to-y alignments:
we do not observe which path transduced xk to yk.
Recall from section 5 that these possible paths are
represented by the small weighted FSA xk◦T ◦yk.

Now, a path’s probability is defined by multiply-
ing the contextual probabilities of edit operations
e. As suggested by Berg-Kirkpatrick et al. (2010),
we model these steps using a conditional log-
linear model, pθ(e | C) def= 1ZC exp

(
θ · ~f(C, e)

)
.

3Speedups: In both runtimes, a factor of |x| can be elimi-
nated from |states| by first decomposing x ◦T into its O(|x|)
strongly connected components. And the |states| factor in the
second runtime is unnecessary in practice, as just the first few
iterations of conjugate gradient are enough to achieve good
approximate convergence when solving the sparse linear sys-
tem that defines the forward probabilities in the cyclic PFSA.

627



To increase log pθ(yk | xk), we must raise the
probability of the edits e that were used to trans-
duce xk to yk, relative to competing edits from the
same contexts C. This means raising θ · f(C, e)
and/or lowering ZC . Thus, log pθ(yk | xk) de-
pends only on the probabilities of edit arcs in T
that appear in xk ◦ T ◦ yk, and the competing edit
arcs from the same edit states qC .

The gradient∇θ log pθ(yk | xk) takes the form∑
C,e

c(C, e)

[
~f(C, e)−

∑
e′
pθ(e′ | C)~f(C, e′)

]
where c(C, e) is the expected number of times that
e was chosen in context C given (xk, yk). (That
can be found by the forward-backward algorithm
on xk ◦T ◦ yk.) So the gradient adds up the differ-
ences between observed and expected feature vec-
tors at contexts C, where contexts are weighted by
how many times they were likely encountered.

In practice, it is efficient to hold the counts
c(C, e) constant over several gradient steps, since
this amortizes the work of computing them. This
can be viewed as a generalized EM algorithm that
imputes the hidden paths (giving c) at the “E” step
and improves their probability at the “M” step.

Algorithm 1 provides the training pseudocode.

Algorithm 1 Training a PFST Tθ by EM.
1: while not converged do
2: reset all counts to 0 . begin the “E step”
3: for k ← 1 to K do . loop over training data
4: M = xk ◦ Tθ ◦ yk . small acyclic WFST
5: ~α = FORWARD-ALGORITHM(M )
6: ~β = BACKWARD-ALGORITHM(M )
7: for arc A ∈M , from state q → q′ do
8: if A was derived from an arc in Tθ

representing edit e, from edit state qC , then
9: c(C, e) += αq · prob(A) · βq′/βqI

10: θ ← L-BFGS(θ, EVAL, max iters=5) . the “M step”
11: function EVAL(θ) . objective function & its gradient
12: F ← 0;∇F ← 0
13: for context C such that (∃e)c(C, e) > 0 do
14: count← 0; expected← 0; ZC ← 0
15: for possible edits e in context C do
16: F += c(C, e) · (θ · ~f(C, e))
17: ∇F += c(C, e) · ~f(C, e)
18: count += c(C, e)
19: expected += exp(θ · ~f(C, e)) · ~f(C, e)
20: ZC += exp(θ · ~f(C, e))
21: F -= count · logZC ;∇F -= count ·expected/ZC
22: return (F,∇F )

7 PFSTs versus WFSTs

Our PFST model of p(y | x) enforces a normal-
ized probability distribution at each state. Drop-

ping this requirement gives a weighted FST
(WFST), whose path weightsw(x, y) can be glob-
ally normalized (divided by a constant Zx) to ob-
tain probabilities p(y | x). WFST models of con-
textual edits were studied by Dreyer et al. (2008).

PFSTs and WFSTs are respectively related to
MEMMs (McCallum et al., 2000) and CRFs (Laf-
ferty et al., 2001). They gain added power from
hidden states and � transitions (although to permit
a finite-state encoding, they condition on x in a
more restricted way than MEMMs and CRFs).

WFSTs are likely to beat PFSTs as linguistic
models,4 just as CRFs beat MEMMs (Klein and
Manning, 2002). A WFST’s advantage is that the
probability of an edit can be indirectly affected by
the weights of other edits at a distance. Also, one
could construct WFSTs where an edit’s weight di-
rectly considers local right output context C4.

So why are we interested in PFSTs? Because
they do not require computing a separate normal-
izing contant Zx for every x. This makes it com-
putationally tractable to use them in settings where
x is uncertain because it is unobserved, partially
observed (e.g., lacks syllable boundaries), or nois-
ily observed. E.g., at the end of section 5, X rep-
resented an uncertain x. So unlike WFSTs, PFSTs
are usable as the conditional distributions in noisy
channel models, channel cascades, and Bayesian
networks. In future we plan to measure their mod-
eling disadvantage and attempt to mitigate it.

PFSTs are also more efficient to train under con-
ditional likelihood. It is faster to compute the gra-
dient (and fewer steps seem to be required in prac-
tice), since we only have to raise the probabilities
of arcs in xk ◦ T ◦ yk relative to competing arcs
in xk ◦ T . We visit at most |xk| · |yk| · |Σy| arcs.
By contrast, training a WFST must raise the prob-
ability of the paths in xk ◦ T ◦ yk relative to the
infinitely many competing paths in xk ◦ T . This
requires summing around cycles in xk ◦T , and re-
quires visiting all of its |xk| · |Σy|N3+1 arcs.

8 Experiments

To demonstrate the utility of contextual edit trans-
ducers, we examine spelling errors in social me-
dia data. Models of spelling errors are useful in
a variety of settings including spelling correction
itself and phylogenetic models of string variation

4WFSTs can also use a simpler topology (Dreyer et al.,
2008) while retaining determinism, since edits can be scored
“in retrospect” after they have passed into the left context.

628



-8

-7

-6

-5

-4

2000 4000 6000

# Training Examples

M
ea

n 
Lo

g-
Li

ke
lih

oo
d

Backoff
FALSE
TRUE

Topology
T010
T020
T110
T111 2

3

4

5

6

2000 4000 6000

# Training Examples

M
ea

n 
Ex

pe
ct

ed
 E

di
t D

ist
an

ce

Backoff
FALSE
TRUE

Topology
T010
T020
T110
T111

Figure 2: (a) Mean log p(y | x) for held-out test examples. (b) Mean expected edit distance (similarly).

(Mays et al., 1991; Church and Gale, 1991; Ku-
kich, 1992; Andrews et al., 2014).

To eliminate experimental confounds, we use
no dictionary or language model as one would in
practice, but directly evaluate our ability to model
p(correct | misspelled). Consider (xk, yk) =
(feeel, feel). Our model defines p(y | xk) for all y.
Our training objective (section 6) tries to make this
large for y = yk. A contextual edit model learns
here that e 7→ � is more likely in the context of ee.

We report on test data how much probability
mass lands on the true yk. We also report how
much mass lands “near” yk, by measuring the ex-
pected edit distance of the predicted y to the truth.
Expected edit distance is defined as

∑
y pθ(y |

xk)d(y, yk) where d(y, yk) is the Levenshtein dis-
tance between two strings. It can be computed us-
ing standard finite-state algorithms (Mohri, 2003).

8.1 Data
We use an annotated corpus (Aramaki, 2010) of
50000 misspelled words x from tweets along with
their corrections y. All examples have d(x, y) = 1
though we do not exploit this fact. We randomly
selected 6000 training pairs and 100 test pairs. We
regularized the objective by adding λ·||θ||22, where
for each training condition, we chose λ by coarse
grid search to maximize the conditional likelihood
of 100 additional development pairs.

8.2 Context Windows and Edit Features
We considered four different settings for the con-
text window sizes (N1, N2, N3): (0,1,0)=stochas-
tic edit distance, (1,1,0), (0,2,0), and (1,1,1).

Our log-linear edit model (section 6) includes
a dedicated indicator feature for each contextual
edit (C, e), allowing us to fit any conditional dis-
tribution p(e | C). In our “backoff” setting, each
(C, e) also has 13 binary backoff features that it

shares with other (C ′, e′). So we have a total of 14
feature templates, which generate over a million
features in our largest model. The shared features
let us learn that certain properties of a contextual
edit tend to raise or lower its probability (and the
regularizer encourages such generalization).

Each contextual edit (C, e) can be character-
ized as a 5-tuple (s, t, C1, C ′2, C3): it replaces
s ∈ Σx ∪ {�} with t ∈ Σy ∪ {�} when s falls be-
tween C1 and C ′2 (so C2 = sC ′2) and t is preceded
by C3. Then each of the 14 features of (C, e) in-
dicates that a particular subset of this 5-tuple has a
particular value. The subset always includes s, t,
or both. It never includes C1 or C ′2 without s, and
never includes C3 without t.

8.3 Results

Figures 2a and 2b show the learning curves. We
see that both metrics improve with more training
data; with more context; and with backoff. With
backoff, all of the contextual edit models substan-
tially beat ordinary stochastic edit distance, and
their advantage grows with training size.

9 Conclusion

We have presented a trainable, featurizable model
of contextual edit distance. Our main contribu-
tion is an efficient encoding of such a model as
a tight PFST—that is, a WFST that is guaranteed
to directly define conditional string probabilities
without need for further normalization. We are re-
leasing OpenFST-compatible code that can train
both PFSTs and WFSTs (Cotterell and Renduch-
intala, 2014). We formally defined PFSTs, de-
scribed their speed advantage at training time, and
noted that they are crucial in settings where the in-
put string is unknown. In future, we plan to deploy
our PFSTs in such settings.

629



References
Cyril Allauzen, Michael Riley, Johan Schalkwyk, Wo-

jciech Skut, and Mehryar Mohri. 2007. OpenFst: A
general and efficient weighted finite-state transducer
library. In Implementation and Application of Au-
tomata, pages 11–23. Springer.

Nicholas Andrews, Jason Eisner, and Mark Dredze.
2014. Robust entity clustering via phylogenetic in-
ference. In Proceedings of ACL.

Eiji Aramaki. 2010. Typo corpus. Available at http:
//luululu.com/tweet/#cr, January.

Taylor Berg-Kirkpatrick, Alexandre Bouchard-Côté,
John DeNero, and Dan Klein. 2010. Painless un-
supervised learning with features. In Proceedings of
HLT-NAACL, pages 582–590.

Alexandre Bouchard-Côté, Percy Liang, Thomas L.
Griffiths, and Dan Klein. 2007. A probabilistic ap-
proach to language change. In NIPS.

Colin Cherry and Dekang Lin. 2003. A probability
model to improve word alignment. In Proceedings
of ACL, pages 88–95.

Zhiyi Chi and Stuart Geman. 1998. Estimation
of probabilistic context-free grammars. Computa-
tional Linguistics, 24(2):299–305.

Kenneth W. Church and William A. Gale. 1991. Prob-
ability scoring for spelling correction. Statistics and
Computing, 1(2):93–103.

Ryan Cotterell and Adithya Renduchintala. 2014.
brezel: A library for training FSTs. Technical re-
port, Johns Hopkins University.

Markus Dreyer, Jason R. Smith, and Jason Eisner.
2008. Latent-variable modeling of string transduc-
tions with finite-state methods. In Proceedings of
EMNLP, EMNLP ’08, pages 1080–1089.

Chris Dyer, Victor Chahuneau, and Noah A. Smith.
2013. A simple, fast, and effective reparameteriza-
tion of IBM Model 2. In Proceedings of NAACL-
HLT, pages 644–648.

Jason Eisner. 2001. Expectation semirings: Flexible
EM for learning finite-state transducers. In Proceed-
ings of the ESSLLI Workshop on Finite-State Meth-
ods in NLP.

Dale Gerdemann and Gertjan van Noord. 1999. Trans-
ducers from rewrite rules with backreferences. In
Proceedings of EACL.

Ronald M. Kaplan and Martin Kay. 1994. Regu-
lar models of phonological rule systems. Compu-
tational Linguistics, 20(3):331–378.

Dan Klein and Christopher D. Manning. 2002. Condi-
tional structure versus conditional estimation in NLP
models. In Proceedings of EMNLP, pages 9–16.

Kevin Knight and Jonathan Graehl. 2005. An
overview of probabilistic tree transducers for natural
language processing. In Proc. of the Sixth Interna-
tional Conference on Intelligent Text Processing and
Computational Linguistics (CICLing).

Karen Kukich. 1992. Techniques for automatically
correcting words in text. ACM Computing Surveys
(CSUR), 24(4):377–439.

John Lafferty, Andrew McCallum, and Fernando
Pereira. 2001. Conditional random fields: Prob-
abilistic models for segmenting and labeling se-
quence data. In Proceedings of the International
Conference on Machine Learning.

Yang Liu, Qun Liu, and Shouxun Lin. 2005. Log-
linear models for word alignment. In Proceedings
of ACL, pages 459–466.

Eric Mays, Fred J. Damerau, and Robert L. Mercer.
1991. Context based spelling correction. Informa-
tion Processing & Management, 27(5):517–522.

Andrew McCallum, Dayne Freitag, and Fernando
Pereira. 2000. Maximum entropy Markov mod-
els for information extraction and segmentation. In
Proceedings of ICML.

Mehryar Mohri and Richard Sproat. 1996. An efficient
compiler for weighted rewrite rules. In Proceedings
of ACL, pages 231–238.

Mehryar Mohri. 1997. Finite-state transducers in lan-
guage and speech processing. Computational Lin-
guistics, 23(2):269–311.

Mehryar Mohri. 2003. Edit-distance of weighted au-
tomata: General definitions and algorithms. Inter-
national Journal of Foundations of Computer Sci-
ence, 14(06):957–982.

Eric Sven Ristad and Peter N. Yianilos. 1998. Learn-
ing string edit distance. IEEE Transactions on Pat-
tern Analysis and Machine Intelligence, 20(5):522–
532.

630


