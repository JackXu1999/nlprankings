




































Answer-based Adversarial Training for Generating Clarification Questions


Proceedings of NAACL-HLT 2019, pages 143–155
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

143

Answer-based Adversarial Training for
Generating Clarification Questions

Sudha Rao∗
Microsoft Research, Redmond

Sudha.Rao@microsoft.com

Hal Daumé III
University of Maryland, College Park
Microsoft Research, New York City

me@hal3.name

Abstract

We present an approach for generating clar-
ification questions with the goal of eliciting
new information that would make the given
textual context more complete. We propose
that modeling hypothetical answers (to clarifi-
cation questions) as latent variables can guide
our approach into generating more useful clar-
ification questions. We develop a Generative
Adversarial Network (GAN) where the gener-
ator is a sequence-to-sequence model and the
discriminator is a utility function that models
the value of updating the context with the an-
swer to the clarification question. We eval-
uate on two datasets, using both automatic
metrics and human judgments of usefulness,
specificity and relevance, showing that our
approach outperforms both a retrieval-based
model and ablations that exclude the utility
model and the adversarial training.

1 Introduction

A goal of natural language processing is to de-
velop techniques that enable machines to process
naturally occurring language. However, not all
language is clear and, as humans, we may not
always understand each other (Grice, 1975); in
cases of gaps or mismatches in knowledge, we
tend to ask questions (Graesser et al., 2008). In
this work, we focus on the task of automati-
cally generating clarification questions: questions
that ask for information that is missing from a
given linguistic context. Our clarification ques-
tion generation model builds on the sequence-to-
sequence approach that has proven effective for
several language generation tasks (Sutskever et al.,
2014; Serban et al., 2016; Yin et al., 2016; Du
et al., 2017). Unfortunately, training a sequence-
to-sequence model directly on (context, question)

∗This research performed when the author was still at
University of Maryland, College Park.

pairs yields questions that are highly generic1, cor-
roborating a common finding in dialog systems (Li
et al., 2016b). Our goal is to be able to generate
clarification questions that are useful and specific.

To achieve this, we begin with a recent observa-
tion of Rao and Daumé III (2018), who consider
the task of question reranking: a good clarifica-
tion question is the one whose answer has a high
utility, which they define as the likelihood that this
question would lead to an answer that will make
the context more complete (§2.3). Inspired by this,
we construct a model that first generates a question
given a context, and then generates a hypotheti-
cal answer to that question. Given this (context,
question, answer) triple, we train a utility calcula-
tor to estimate the usefulness of this question. We
then show that this utility calculator can be gen-
eralized using ideas for generative adversarial net-
works (Goodfellow et al., 2014) for text (Yu et al.,
2017), wherein the utility calculator plays the role
of the “discriminator” and the question generator
is the “generator” (§2.2), which we train using the
MIXER algorithm (Ranzato et al., 2015). We eval-
uate our approach on two datasets: Amazon prod-
uct descriptions (Figure 1) and Stack Exchange
posts (Figure 2). Our two main contributions are:

1. An adversarial training approach for gener-
ating clarification questions that models the
utility of updating a context with an answer
to the clarification question. 2

2. An empirical evaluation using both auto-
matic metrics and human judgments to show
that our adversarially trained model generates
questions that are more useful and specific to
the context than all the baseline models.

1For instance, under home appliances, frequently asking
“Is it made in China?” or “What are the dimensions?”

2Code and data: https://github.com/
raosudha89/clarification_question_
generation_pytorch



144

Product T-fal Nonstick Cookware Set,
title 18 pieces, Red

Product Easy non-stick 18pc set includes every
description piece for your everyday meals.

Exceptionally durable dishwasher
safe cookware for easy clean up.
Durable non-stick interior.
Oven safe up to 350.F/177.C

Question Are they induction compatible?

Answer They are aluminium so the answer is NO.

Figure 1: Sample product description from Amazon
paired with a clarification question and answer.

2 Training a Clarification Question
Generator

Our goal is to build a model that, given a context,
can generate an appropriate clarification question.
Our dataset consists of (context, question, answer)
triples where the context is an initial textual con-
text, question is the clarification question that asks
about some missing information in the context and
answer is the answer to the clarification question
(details in § 3.1). Representationally, our ques-
tion generator is a standard sequence-to-sequence
model with attention (§2.1). The learning problem
is: how to train the sequence-to-sequence model
to generate good clarification questions.

An overview of our training setup is shown in
Figure 3. Given a context, our question genera-
tor, which is a sequence-to-sequence model, out-
puts a question. In order to evaluate the usefulness
of this question, we then have a second sequence-
to-sequence model called the “answer generator”
that generates a hypothetical answer based on the
context and the question (§ 2.5). This (context,
generated question and generated answer) triple
is fed into a UTILITY calculator, whose initial
goal is to estimate the probability that this (ques-
tion, answer) pair is useful in this context (§2.3).
This UTILITY is treated as a reward, which is
used to update the question generator using the
MIXER (Ranzato et al., 2015) algorithm (§ 2.2).
Finally, we reinterpret the answer-generator-plus-
utility-calculator component as a discriminator
for differentiating between (context, true question,
generated answer) triples and (context, generated
question, generated answer) triples , and optimize
the generator for this adversarial objective using
MIXER (§2.4).

Title Wifi keeps dropping on 5Ghz network

Post Recently my wireless has been iffy at my
university. I notice I am connected to a 5Ghz
network, while I am connected to a 2.4Ghz
everywhere else (where things work fine).
Sometimes it reconnects, but I have to run
‘sudo service network-manager restart’.
Is it possible a kernel update caused this?

Question what is the make of your wifi card ?

Answer intel corporation wireless 7260 ( rev 73 )

Figure 2: Sample post from stackexchange.com paired
with a clarification question and answer.

2.1 Sequence-to-sequence Model for
Question Generation

We use a standard attention based sequence-to-
sequence model (Luong et al., 2015) for our ques-
tion generator. Given an input sequence (context)
c = (c1, c2, ..., cN ), this model generates an out-
put sequence (question) q = (q1, q2, ..., qT ). The
architecture of this model is an encoder-decoder
with attention. The encoder is a recurrent neural
network (RNN) operating over the input word em-
beddings to compute a source context representa-
tion c̃. The decoder uses this source representation
to generate the target sequence one word at a time:

p(q|c̃) =
T∏
t=1

p(qt|q1, q2, ..., qt−1, c̃t)

=
T∏
t=1

softmax(Wsh̃t) ;

where h̃t = tanh(Wc[c̃t;ht])

(1)

In Eq 1, h̃t is the attentional hidden state of the
RNN at time t and Ws and Wc are parameters of
the model.3 The predicted token qt is the token in
the vocabulary that is assigned the highest prob-
ability using the softmax function. The standard
training objective for sequence-to-sequence model
is to maximize the log-likelihood of all (c, q) pairs
in the training data D which is equivalent to mini-
mizing the following loss,

Lmle(D) = −
∑

(c,q)∈D

T∑
t=1

log p(qt|q1, ..., qt−1, c̃t)

(2)

3Details are in Appendix A.



145

Figure 3: Overview of our GAN-based clarification question generation model (refer preamble of §2)

2.2 Training the Generator to Optimize
UTILITY

Training sequence-to-sequence models for the
task of clarification question generation (with con-
text as input and question as output) using max-
imum likelihood objective unfortunately leads to
the generation of highly generic questions, such as
“What are the dimensions?” when asking ques-
tions about home appliances. Recently, Rao and
Daumé III (2018) observed that the usefulness of
a question can be better measured as the utility
that would be obtained if the context were updated
with the answer to the proposed question. Follow-
ing this observation, we first use a pretrained an-
swer generator (§2.5) to generate an answer given
a context and a question. We then use a pretrained
UTILITY calculator (§ 2.3 ) to predict the likeli-
hood that the generated answer would increase the
utility of the context by adding useful information
to it. Finally, we train our question generator to
optimize this UTILITY based reward.

Similar to optimizing metrics like BLEU and
ROUGE, this UTILITY calculator also operates
on discrete text outputs, which makes optimiza-
tion difficult due to non-differentiability. A suc-
cessful recent approach dealing with the non-
differentiability while also retaining some advan-
tages of maximum likelihood training is the Mixed
Incremental Cross-Entropy Reinforce (Ranzato
et al., 2015) algorithm (MIXER). In MIXER, the
overall loss L is differentiated as in REINFORCE
(Williams, 1992):

L(θ) = −Eqs∼pθr(q
s) ;

∇θL(θ) = −Eqs∼pθr(q
s)∇θ log pθ(qs)

(3)

where qs is a random output sample according to
the model pθ and θ are the parameters of the net-
work. The expected gradient is then approximated
using a single sample qs = (qs1, q

s
2, ..., q

s
T ) from

the model distribution (pθ). In REINFORCE, the
policy is initialized randomly, which can cause
long convergence times. To solve this, MIXER
starts by optimizing maximum likelihood for the
initial ∆ time steps, and slowly shifts to optimiz-
ing the expected reward from Eq 3 for the remain-
ing (T −∆) time steps.

In our model, for the initial ∆ time steps, we
minimize Lmle and for the remaining steps, we
minimize the following UTILITY-based loss:

Lmax-utility = −(r(qp)− r(qb))
T∑
t=1

log p(qt|q1, ..., qt−1, c̃t)

(4)

where r(qp) is the UTILITY based reward on the
predicted question and r(qb) is a baseline reward
introduced to reduce the high variance otherwise
observed when using REINFORCE. To estimate
this baseline reward, we take the idea from the
self-critical training approach Rennie et al. (2017)
where the baseline is estimated using the reward
obtained by the current model under greedy de-
coding during test time. We find that this approach
for baseline estimation stabilizes our model better
than the approach used in MIXER.

2.3 Estimating UTILITY from Data
Given a (context, question, answer) triple, Rao
and Daumé III (2018) introduce a utility calcula-
tor UTILITY(c, q, a) to calculate the value of up-
dating a context c with the answer a to a clarifi-
cation question q. They use the utility calculator



146

to estimate the probability that an answer would
be a meaningful addition to a context. They treat
this as a binary classification problem where the
positive instances are the true (context, question,
answer) triples in the dataset whereas the negative
instances are contexts paired with a random (ques-
tion, answer) from the dataset. Following Rao and
Daumé III (2018), we model our UTILITY calcula-
tor by first embedding the words in c and then us-
ing an LSTM (long-short term memory) (Hochre-
iter and Schmidhuber, 1997) to generate a neural
representation c̄ of the context by averaging the
output of each of the hidden states. Similarly, we
obtain neural representations q̄ and ā of q and a re-
spectively using a question and an answer LSTM
models. Finally, we use a feed forward neural net-
work FUTILITY(c̄, q̄, ā) to predict the usefulness of
the question.

2.4 UTILITY GAN for Clarification Question
Generation

The UTILITY calculator trained on true vs random
samples from real data (as described in the previ-
ous section) can be a weak reward signal for ques-
tions generated by a model due to the large dis-
crepancy between the true data and the model’s
outputs. In order to strengthen the reward signal,
we reinterpret the UTILITY calculator (coupled
with the answer generator) as a discriminator in
an adversarial learning setting. That is, instead of
taking the UTILITY calculator to be a fixed model
that outputs the expected quality of a (question,
answer) pair, we additionally optimize it to dis-
tinguish between true (question, answer) pairs and
model-generated ones. This reinterpretation turns
our model into a form of a generative adversarial
network (GAN) (Goodfellow et al., 2014).

GAN is a training procedure for “generative”
models that can be interpreted as a game between
a generator and a discriminator. The generator is a
model g ∈ G that produces outputs (in our case,
questions). The discriminator is another model
d ∈ D that attempts to classify between true out-
puts and model-generated outputs. The goal of the
generator is to generate data such that it can fool
the discriminator; the goal of the discriminator is
to be able to successfully distinguish between real
and generated data. In the process of trying to fool
the discriminator, the generator produces data that
is as close as possible to the real data distribution.

Generically, the GAN objective is:

LGAN(D,G) = max
d∈D

min
g∈G

Ex∼p̂ log d(x)+

Ez∼pz log(1− d(g(z)))
(5)

where x is sampled from the true data distribution
p̂, and z is sampled from a prior defined on input
noise variables pz .

Although GANs have been successfully used
for image tasks, training GANs for text generation
is challenging due to the discrete nature of out-
puts in text. The discrete outputs from the gener-
ator make it difficult to pass the gradient update
from the discriminator to the generator. Recently,
Yu et al. (2017) proposed a sequence GAN model
for text generation to overcome this issue. They
treat their generator as an agent and use the dis-
criminator as a reward function to update the gen-
erative model using reinforcement learning tech-
niques. Our GAN-based approach is inspired by
this sequence GAN model with two main mod-
ifications: a) We use MIXER algorithm as our
generator (§2.2) instead of a purely policy gradi-
ent approach; and b) We use UTILITY calculator
(§2.3) as our discriminator instead of a convolu-
tional neural network (CNN).

Theoretically, the discriminator should be
trained using (context, true question, true answer)
triples as positive instances and (context, gener-
ated question, generated answer) triples as the
negative instances. However, we find that train-
ing a discriminator using such positive instances
makes it very strong since the generator would
have to not only generate real looking questions
but also generate real looking answers to fool the
discriminator. Since our main goal is question
generation and since we use answers only as latent
variables, we instead use (context, true question,
generated answer) as our positive instances where
we use the pretrained answer generator to get the
generated answer for the true question. Formally,
our objective function is:

LGAN-U(U ,M) =max
u∈U

min
m∈M

Eq∼p̂ log u(c, q,A(c, q))+

Ec∼p̂ log(1− u(c,m(c),A(c,m(c))))
(6)

where U is the UTILITY discriminator, M is the
MIXER generator, p̂ is our data of (context, ques-
tion, answer) triples andA is the answer generator.

2.5 Pretraining
Question Generator. We pretrain our question
generator using the sequence-to-sequence model



147

(§2.1) to maximize the log-likelihood of all (con-
text, question) pairs in the training data. Parame-
ters of this model are updated during adversarial
training.

Answer Generator. We pretrain our answer
generator using the sequence-to-sequence model
(§2.1) to maximize the log-likelihood of all ([con-
text+question], answer) pairs in the training data.
Parameters of this model are kept fixed during the
adversarial training.4

Discriminator. In our UTILITY GAN model
(§ 2.4), the discriminator is trained to differenti-
ate between true and generated questions. How-
ever, since we want to guide our UTILITY based
discriminator to also differentiate between true
(“good”) and random (“bad”) questions, we pre-
train our discriminator in the same way we trained
our UTILITY calculator. For positive instances, we
use a context and its true question, answer from
the training data and for negative instances, we use
the same context but randomly sample a question
from the training data (and use the answer paired
with that random question).

3 Experimental Results

We base our experimental design on the following
research questions:

1. Do generation models outperform simpler re-
trieval baselines?

2. Does optimizing the UTILITY reward im-
prove over maximum likelihood training?

3. Does using adversarial training improve over
optimizing the pretrained UTILITY?

4. How do the models perform when evaluated
for nuances such as specificity & usefulness?

3.1 Datasets

We evaluate our model on two datasets.
Amazon. In this dataset, context is a prod-

uct description on amazon.com combined with the
product title, question is a clarification question
asked to the product and answer is the seller’s
(or other users’) reply to the question. To ob-
tain these data triples, we combine the Amazon
question-answering dataset (McAuley and Yang,
2016) with the Amazon reviews dataset (McAuley
et al., 2015). We show results on the Home &
Kitchen category of this dataset since it con-
tains a large number of questions and is relatively

4We leave the experimentation of updating parameters of
answer generator during adversarial training to future work.

easier for human-based evaluation. It consists of
19, 119 training, 2, 435 tune and 2, 305 test exam-
ples (product descriptions), with 3 to 10 questions
(average: 7) per description.

Stack Exchange. In this dataset, context is a
post on stackexchange.com combined with the ti-
tle, question is a clarification question asked in the
comments section of the post and answer is ei-
ther the update made to the post in response to the
question or the author’s reply to the question in the
comments section. Rao and Daumé III (2018) cu-
rated a dataset of 61, 681 training, 7, 710 tune and
7, 709 test such triples from three related subdo-
mains on stackexchage.com (askubuntu, unix and
superuser). Additionally, for 500 instances each
from the tune and the test set, their dataset includes
1 to 6 other questions identified as valid questions
by expert human annotators from a pool of candi-
date questions.

3.2 Baselines and Ablated Models

We compare three variants (ablations) of our pro-
posed approach, together with an information re-
trieval baseline:

GAN-Utility is our full model which is a UTIL-
ITY calculator based GAN training (§2.4) includ-
ing the UTILITY discriminator and the MIXER
question generator.5

Max-Utility is our reinforcement learning base-
line where the pretrained question generator
model is further trained to optimize the UTILITY
reward (§2.2) without the adversarial training.

MLE is the question generator model pre-
trained on context, question pairs using maximum
likelihood objective (§2.1).

Lucene6 is our information retrieval baseline
similar to the Lucene baseline described in Rao
and Daumé III (2018). Given a context in the test
set, we use Lucene, which is a TF-IDF based doc-
ument ranker, to retrieve top 10 contexts that are
most similar to the given context in the train set.
We randomly choose a question from the human
written questions paired with these 10 contexts in
the train set to construct our Lucene baseline7.

5Experimental details are in Appendix B.
6https://lucene.apache.org/
7For the Amazon dataset, we ignore questions asked to

products of the same brand as the given product since Ama-
zon replicates questions across same brand allowing the true
question to be included in that set.



148

3.3 Evaluation Metrics
We evaluate initially with automated evaluation
metrics, and then more substantially with crowd-
sourced human judgments.

3.3.1 Automatic Metrics
Diversity, which calculates the proportion of
unique trigrams in the output to measure the diver-
sity as commonly used to evaluate dialogue gener-
ation (Li et al., 2016b).
BLEU (Papineni et al., 2002) 8, which evaluates
n-gram precision between the output and the ref-
erences.
METEOR (Banerjee and Lavie, 2005), which is
similar to BLEU but includes stemmed and syn-
onym matches to measure similarity between the
output and the references.

3.3.2 Human Judgements
We use Figure-Eight9, a crowdsourcing platform,
to collect human judgements. Each judgement10

consists of showing the crowdworker a context
and a generated question and asking them to eval-
uate the question along following axes:
Relevance: We ask “Is the question on topic?”
and let workers choose from: Yes (1) and No (0)
Grammaticality: We ask “Is the question gram-
matical?” and let workers choose from: Yes (1)
and No (0)
Seeking new information: We ask “Does the
question ask for new information currently not
included in the description?” and let workers
choose from: Yes (1) and No (0)
Specificity: We ask “How specific is the ques-
tion?” and let workers choose from:
4: Specific pretty much only to this product (or

same product from different manufacturer)
3: Specific to this and other very similar products
2: Generic enough to be applicable to many other

products of this type
1: Generic enough to be applicable to any prod-

uct under Home and Kitchen
0: N/A (Not applicable) i.e. Question is not on

topic OR is incomprehensible
Usefulness: We ask “How useful is the question to
a potential buyer (or a current user) of the prod-
uct?” and let workers choose from:

8https://github.com/moses-smt/
mosesdecoder/blob/master/scripts/
generic/multi-bleu.perl

9https://www.figure-eight.com
10We paid crowdworkers 5 cents per judgment and col-

lected five judgments per question.

Criteria Agreement

Relevance 0.92
Grammaticality 0.92
Seeking new information 0.84
Usefulness 0.65
Specificity 0.72

Table 1: Inter-annotator agreement on the five criteria
used in human-based evaluation.

4: Useful enough to be included in the product
description

3: Useful to a large number of potential buyers
(or current users)

2: Useful to a small number of potential buyers
(or current users)

1: Useful only to the person asking the question
0: N/A (Not applicable) i.e. Question is not on

topic OR is incomprehensible OR is not seek-
ing new information

3.3.3 Inter-annotator Agreement
Table 1 shows the inter-annotator agreement (re-
ported by Figure-Eight as confidence11) on each of
the above five criteria. Agreement on Relevance,
Grammaticality and Seeking new information is
high. This is not surprising given that these crite-
ria are not very subjective. On the other hand, the
agreement on usefulness and specificity is quite
moderate since these judgments can be very sub-
jective.

Since the inter-annotator agreement on the use-
fulness criteria was particularly low, in order to re-
duce the subjectivity involved in the fine grained
annotation, we convert the range [0-4] to a more
coarse binary range [0-1] by mapping the scores 4
and 3 to 1 and the scores 2, 1 and 0 to 0.

3.4 Automatic Metric Results
Table 2 shows the results on the two datasets when
evaluated according to automatic metrics.

In the Amazon dataset, GAN-Utility outper-
forms all ablations on DIVERSITY, suggesting that
it produces more diverse outputs. Lucene, on the
other hand, has the highest DIVERSITY since it
consists of human written questions, which tend
to be more diverse because they are much longer
compared to model generated questions. This
comes at the cost of lower match with the refer-
ence as visible in the BLEU and METEOR scores.

11https://success.figure-eight.com/
hc/en-us/articles/201855939-How-to-
Calculate-a-Confidence-Score



149

Amazon StackExchange
Model DIVERSITY BLEU METEOR DIVERSITY BLEU METEOR

Reference 0.6934 — — 0.7509 — —
Lucene 0.6289 4.26 10.85 0.7453 1.63 7.96

MLE 0.1059 17.02 12.72 0.2183 3.49 8.49
Max-Utility 0.1214 16.77 12.69 0.2508 3.89 8.79
GAN-Utility 0.1296 15.20 12.82 0.2256 4.26 8.99

Table 2: DIVERSITY as measured by the proportion of unique trigrams in model outputs. Bigrams and unigrams
follow similar trends. BLEU and METEOR scores using up to 10 references for the Amazon dataset and up to
six references for the StackExchange dataset. Numbers in bold are the highest among the models. All results for
Amazon are on the entire test set whereas for StackExchange they are on the 500 instances of the test set that have
multiple references.

In terms of BLEU and METEOR, there is incon-
sistency. Although GAN-Utility outperforms all
baselines according to METEOR, the fully ablated
MLE model has a higher BLEU score. This is be-
cause BLEU score looks for exact n-gram matches
and since MLE produces more generic outputs, it
is much more likely that it will match one of 10
references compared to the specific/diverse out-
puts of GAN-Utility, since one of those ten is
highly likely to itself be generic.

In the StackExchange dataset GAN-Utility out-
performs all ablations on both BLEU and ME-
TEOR. Unlike in the Amazon dataset, MLE does
not outperform GAN-Utility in BLEU. This is
because the MLE outputs in this dataset are not
as generic as in the amazon dataset due to the
highly technical nature of contexts in StackEx-
change. As in the Amazon dataset, GAN-Utility
outperforms MLE on DIVERSITY. Interestingly,
the Max-Utility ablation achieves a higher DIVER-
SITY score than GAN-Utility. On manual analysis
we find that Max-Utility produces longer outputs
compared to GAN-Utility but at the cost of being
less grammatical.

3.5 Human Judgements Analysis

Table 3 shows the numeric results of human-based
evaluation performed on the reference and the sys-
tem outputs on 300 random samples from the
test set of the Amazon dataset.12 All approaches
produce relevant and grammatical questions. All
models are all equally good at seeking new infor-
mation, but are weaker than Lucene, which per-
forms better at seeking new information but at the

12We could not ask crowdworkers evaluate the StackEx-
change data due to its highly technical nature.

cost of much lower specificity and lower useful-
ness.

Our full model, GAN-Utility, performs signifi-
cantly better at the usefulness criteria showing that
the adversarial training approach generates more
useful questions. Interestingly, all our models pro-
duce questions that are more useful than Lucene
and Reference, largely because Lucene and Ref-
erence tend to ask questions that are more of-
ten useful only to the person asking the question,
making them less useful for potential other buyers
(see Figure 4). GAN-Utility also performs signifi-
cantly better at generating questions that are more
specific to the product (see details in Figure 5),
which aligns with the higher DIVERSITY score
obtained by GAN-Utility under automatic metric
evaluation.

Table 5 contains example outputs from different
models along with their usefulness and specificity
scores. MLE generates questions such as “is it
waterproof?” and “what is the wattage?”, which
are applicable to many other products. Whereas
our GAN-Utility model generates more specific
question such as “is this shower curtain mildew
resistant?”. Appendix C includes further analy-
sis of system outputs on both Amazon and Stack
Exchange datasets.

4 Related Work

Question Generation. Most previous work on
question generation has been on generating read-
ing comprehension style questions i.e. questions
that ask about information present in a given text
(Heilman, 2011; Rus et al., 2010, 2011; Duan
et al., 2017). Our goal, on the other hand, is to
generate questions whose answer cannot be found



150

Model Relevant [0-1] Grammatical [0-1] New Info [0-1] Useful [0-1] Specific [0-4]

Reference 0.96 0.99 0.93 0.72 3.38

Lucene 0.90 0.99 0.95 0.68 2.87
MLE 0.92 0.96 0.85 0.91 3.05
Max-Utility 0.93 0.96 0.88 0.91 3.29
GAN-Utility 0.94 0.96 0.87 0.96 3.52

Table 3: Results of human judgments on model generated questions on 300 sample Home & Kitchen product
descriptions. Numeric range corresponds to the options described in §3.3. The difference between the bold and the
non-bold numbers is statistically significant with p <0.05. Reference is excluded in the significance calculation.

Figure 4: Human judgements on the usefulness criteria. Figure 5: Human judgements on the specificity criteria.

in the given text. Outside reading comprehen-
sion questions, Liu et al. (2010) use templated
questions to help authors write better related
work sections whereas we generate questions
to fill information gaps. Labutov et al. (2015)
use crowdsourcing to generate question tem-
plates whereas we learn from naturally occurring
questions. Mostafazadeh et al. (2016, 2017)
generate natural and engaging questions, given
an image (and some initial text). Whereas, we
generate questions specifically for identifying
missing information. Stoyanchev et al. (2014)
generate clarification questions to resolve am-
biguity caused by speech recognition failures
during dialog, whereas we generate clarification
questions to resolve ambiguity caused by missing
information. The recent work most relevant to
our work is by Rao and Daumé III (2018). They
build a model which given a context and a set of
candidate clarification questions, ranks them in a
way that more useful clarification questions would
be higher up in the ranking. In our work, we build
on their ideas to propose a model that generates
(instead of ranking) clarification questions given a
context.

Neural Models and Adversarial Training for
Text Generation. Neural network based models
have had significant success at a variety of text
generation tasks, including machine translation
(Bahdanau et al., 2015; Luong et al., 2015), sum-
marization (Nallapati et al., 2016), dialog (Bor-
des et al., 2016; Li et al., 2016a; Serban et al.,
2017), textual style transfer (Jhamtani et al., 2017;
Rao and Tetreault, 2018) and question answering
(Yin et al., 2016; Serban et al., 2016). Our task
is most similar to dialog, in which a wide vari-
ety of possible outputs are acceptable, and where
lack of specificity in generated outputs is com-
mon. We addresses this challenge using an adver-
sarial network approach (Goodfellow et al., 2014),
a training procedure that can generate natural-
looking outputs, which have been effective for
natural image generation (Denton et al., 2015).
Due to the challenges in optimizing over dis-
crete output spaces like text, Yu et al. (2017) in-
troduced a Seq(uence)GAN approach where they
overcome this issue by using REINFORCE to op-
timize. Our GAN-Utility model is inspired by the
SeqGAN model where we replace their policy gra-



151

Title Raining Cats and Dogs Vinyl Bathroom Shower Curtain

Product This adorable shower curtain measures 70 by 72
Description inches and is sure to make a great gift!

Usefulness [0-4] Specificity [0-4]
Reference does the vinyl smells? 3 4
Lucene other than home sweet home, what other sayings on the curtain? 2 4
MLE is it waterproof ? 4 2
Max-Utility is this shower curtain mildew ? 0 0
GAN-Utility is this shower curtain mildew resistant ? 4 4

Title PURSONIC HF200 Pedestal Bladeless Fan & Humidifier All-in-one

Product The first bladeless fan to incoporate a humidifier! This product
Description operates solely as a fan, a humidifier or both simultaneously.

Atomizing function via ultrasonic. 5.5L tank lasts up to 12 hours.

Usefulness [0-4] Specificity [0-4]
Reference i can not get the humidifier to work 1 2
Lucene does it come with the vent kit 3 3
MLE what is the wattage of this fan ? 4 2
Max-Utility is this battery operated ? 3 2
GAN-Utility does this fan have an automatic shut off ? 4 4

Table 4: Example outputs from each of the systems for two product descriptions along with the usefulness and the
specificity score given by human annotators.

dient based generator with a MIXER model and
their CNN based discriminator with our UTILITY
calculator. Li et al. (2017) train an adversarial
model similar to SeqGAN for generating next ut-
terance in a dialog given a context. However, un-
like our work, their discriminator is a binary clas-
sifier trained only to distinguish between human
and machine generated utterances.

5 Conclusion

In this work, we describe a novel approach to
the problem of clarification question generation.
We use the observation of Rao and Daumé III
(2018) that the usefulness of a clarification ques-
tion can be measured by the value of updating a
context with an answer to the question. We use a
sequence-to-sequence model to generate a ques-
tion given a context and a second sequence-to-
sequence model to generate an answer given the
context and the question. Given the (context, gen-
erated question, generated answer) triple, we cal-
culate the utility of this triple and use it as a re-
ward to retrain the question generator using rein-
forcement learning based MIXER model. Further,
to improve upon the utility calculator, we reinter-
pret it as a discriminator in an adversarial setting
and train both the utility calculator and the MIXER
model in a minimax fashion. We find that our ad-
versarial training approach produces more useful
and specific questions compared to both a model

trained using maximum likelihood objective and a
model trained using utility reward based reinforce-
ment learning.

There are several avenues of future work. Fol-
lowing Mostafazadeh et al. (2016), we could com-
bine text input with image input in the Amazon
dataset (McAuley and Yang, 2016) to generate
more relevant and useful questions. One signif-
icant research challenge in the space of free text
generation problems when the set of possible out-
puts is large, is that of automatic evaluation (Lowe
et al., 2016): in our results we saw some corre-
lation between human judgments and automatic
metrics, but not enough to trust the automatic met-
rics completely. Lastly, we hope to integrate such
a question generation model into a real world plat-
form like StackExchange or Amazon to under-
stand the real utility of such models and to unearth
additional research questions.

Acknowledgments

We thank the three anonymous reviewers for their
helpful comments and suggestions. We also thank
the members of the Computational Linguistics and
Information Processing (CLIP) lab at University
of Maryland for helpful discussions. This work
was supported by NSF grant IIS-1618193. Any
opinions, findings, conclusions, or recommenda-
tions expressed here are those of the authors and
do not necessarily reflect the view of the sponsors.



152

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2015. Neural machine translation by jointly
learning to align and translate. In ICLR.

Satanjeev Banerjee and Alon Lavie. 2005. Meteor: An
automatic metric for mt evaluation with improved
correlation with human judgments. In Proceedings
of the acl workshop on intrinsic and extrinsic evalu-
ation measures for machine translation and/or sum-
marization, pages 65–72.

Antoine Bordes, Y-Lan Boureau, and Jason Weston.
2016. Learning end-to-end goal-oriented dialog.
arXiv preprint arXiv:1605.07683.

Emily L Denton, Soumith Chintala, Arthur Szlam, and
Rob Fergus. 2015. Deep generative image models
using a Laplacian pyramid of adversarial networks.
In Advances in Neural Information Processing Sys-
tems, pages 1486–1494.

Xinya Du, Junru Shao, and Claire Cardie. 2017. Learn-
ing to ask: Neural question generation for reading
comprehension. In Proceedings of the 55th Annual
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers), volume 1, pages
1342–1352.

Nan Duan, Duyu Tang, Peng Chen, and Ming Zhou.
2017. Question generation for question answering.
In Proceedings of the 2017 Conference on Empiri-
cal Methods in Natural Language Processing, pages
866–874.

Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza,
Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron
Courville, and Yoshua Bengio. 2014. Generative ad-
versarial nets. In Advances in Neural Information
Processing Systems, pages 2672–2680.

Art Graesser, Vasile Rus, and Zhiqiang Cai. 2008.
Question classification schemes. In Proc. of the
Workshop on Question Generation.

H Paul Grice. 1975. Logic and conversation. 1975,
pages 41–58.

Michael Heilman. 2011. Automatic factual question
generation from text. Ph.D. thesis, Carnegie Mellon
University.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Harsh Jhamtani, Varun Gangal, Eduard Hovy, and Eric
Nyberg. 2017. Shakespearizing modern language
using copy-enriched sequence to sequence models.
In Proceedings of the Workshop on Stylistic Varia-
tion, pages 10–19.

Igor Labutov, Sumit Basu, and Lucy Vanderwende.
2015. Deep questions without deep understanding.
In Proceedings of the 53rd Annual Meeting of the

Association for Computational Linguistics and the
7th International Joint Conference on Natural Lan-
guage Processing (Volume 1: Long Papers), vol-
ume 1, pages 889–898.

Jiwei Li, Michel Galley, Chris Brockett, Georgios Sp-
ithourakis, Jianfeng Gao, and Bill Dolan. 2016a. A
persona-based neural conversation model. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), volume 1, pages 994–1003.

Jiwei Li, Will Monroe, Alan Ritter, Dan Jurafsky,
Michel Galley, and Jianfeng Gao. 2016b. Deep rein-
forcement learning for dialogue generation. In Pro-
ceedings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing, pages 1192–
1202.

Jiwei Li, Will Monroe, Tianlin Shi, Sėbastien Jean,
Alan Ritter, and Dan Jurafsky. 2017. Adversarial
learning for neural dialogue generation. In Proceed-
ings of the 2017 Conference on Empirical Methods
in Natural Language Processing, pages 2157–2169.

Zhiyuan Liu, Wenyi Huang, Yabin Zheng, and
Maosong Sun. 2010. Automatic keyphrase extrac-
tion via topic decomposition. In Proceedings of the
2010 conference on empirical methods in natural
language processing, pages 366–376. Association
for Computational Linguistics.

Ryan Lowe, Iulian V. Serban, Mike Noseworthy, Lau-
rent Charlin, and Joelle Pineau. 2016. On the evalu-
ation of dialogue systems with next utterance classi-
fication. In SIGDIAL.

Thang Luong, Hieu Pham, and Christopher D Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natural
Language Processing, pages 1412–1421.

Julian McAuley, Christopher Targett, Qinfeng Shi, and
Anton Van Den Hengel. 2015. Image-based recom-
mendations on styles and substitutes. In Proceed-
ings of the 38th International ACM SIGIR Confer-
ence on Research and Development in Information
Retrieval, pages 43–52. ACM.

Julian McAuley and Alex Yang. 2016. Addressing
complex and subjective product-related queries with
customer reviews. In Proceedings of the 25th In-
ternational Conference on World Wide Web, pages
625–635. International World Wide Web Confer-
ences Steering Committee.

Nasrin Mostafazadeh, Chris Brockett, Bill Dolan,
Michel Galley, Jianfeng Gao, Georgios Sp-
ithourakis, and Lucy Vanderwende. 2017. Image-
grounded conversations: Multimodal context for
natural question and response generation. In Pro-
ceedings of the Eighth International Joint Confer-
ence on Natural Language Processing (Volume 1:
Long Papers), volume 1, pages 462–472.



153

Nasrin Mostafazadeh, Ishan Misra, Jacob Devlin, Mar-
garet Mitchell, Xiaodong He, and Lucy Vander-
wende. 2016. Generating natural questions about
an image. In Proceedings of the 54th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), volume 1, pages 1802–
1813.

Ramesh Nallapati, Bowen Zhou, Cicero dos Santos,
Caglar Gulcehre, and Bing Xiang. 2016. Ab-
stractive text summarization using sequence-to-
sequence rnns and beyond. In Proceedings of The
20th SIGNLL Conference on Computational Natu-
ral Language Learning, pages 280–290.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of
the 40th annual meeting on association for compu-
tational linguistics, pages 311–318. Association for
Computational Linguistics.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP), pages 1532–1543.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2015. Sequence level train-
ing with recurrent neural networks. arXiv preprint
arXiv:1511.06732.

Sudha Rao and Hal Daumé III. 2018. Learning to ask
good questions: Ranking clarification questions us-
ing neural expected value of perfect information. In
Proceedings of the 56th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), volume 1.

Sudha Rao and Joel Tetreault. 2018. Dear Sir or
Madam, May I introduce the GYAFC Dataset: Cor-
pus, Benchmarks and Metrics for Formality Style
Transfer. In HLT-NAACL. The Association for Com-
putational Linguistics.

Steven J Rennie, Etienne Marcheret, Youssef Mroueh,
Jarret Ross, and Vaibhava Goel. 2017. Self-critical
sequence training for image captioning. In CVPR,
volume 1, page 3.

Vasile Rus, Paul Piwek, Svetlana Stoyanchev, Brendan
Wyse, Mihai Lintean, and Cristian Moldovan. 2011.
Question generation shared task and evaluation chal-
lenge: Status report. In Proceedings of the 13th Eu-
ropean Workshop on Natural Language Generation,
pages 318–320. Association for Computational Lin-
guistics.

Vasile Rus, Brendan Wyse, Paul Piwek, Mihai Lin-
tean, Svetlana Stoyanchev, and Cristian Moldovan.
2010. The first question generation shared task eval-
uation challenge. In Proceedings of the 6th Inter-
national Natural Language Generation Conference,
pages 251–257. Association for Computational Lin-
guistics.

Iulian Vlad Serban, Alessandro Sordoni, Yoshua Ben-
gio, Aaron C Courville, and Joelle Pineau. 2016.
Building end-to-end dialogue systems using gener-
ative hierarchical neural network models. In AAAI,
volume 16, pages 3776–3784.

Iulian Vlad Serban, Alessandro Sordoni, Ryan Lowe,
Laurent Charlin, Joelle Pineau, Aaron C Courville,
and Yoshua Bengio. 2017. A hierarchical latent
variable encoder-decoder model for generating di-
alogues. In AAAI, pages 3295–3301.

Svetlana Stoyanchev, Alex Liu, and Julia Hirschberg.
2014. Towards natural clarification questions in di-
alogue systems. In AISB symposium on questions,
discourse and dialogue, volume 20.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in Neural Information Process-
ing Systems, pages 3104–3112.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. Machine learning, 8(3-4):229–256.

Ronald J Williams and David Zipser. 1989. A learn-
ing algorithm for continually running fully recurrent
neural networks. Neural computation, 1(2):270–
280.

Jun Yin, Xin Jiang, Zhengdong Lu, Lifeng Shang,
Hang Li, and Xiaoming Li. 2016. Neural generative
question answering. In Proceedings of the Twenty-
Fifth International Joint Conference on Artificial In-
telligence, pages 2972–2978. AAAI Press.

Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu.
2017. SeqGAN: Sequence generative adversarial
nets with policy gradient. In arxiv.

A Sequence-to-sequence model details

In this section, we describe some of the details of
the attention based sequence-to-sequence model
introduced in Section 2.1 of the main paper. In
equation 1, h̃t is the attentional hidden state of the
RNN at time t obtained by concatenating the target
hidden state ht and the source-side context vector
c̃t, and Ws is a linear transformation that maps ht
to an output vocabulary-sized vector. Each atten-
tional hidden state h̃t depends on a distinct input
context vector c̃t computed using a global atten-
tion mechanism over the input hidden states as:

c̃t =

N∑
n=1

anthn (7)

ant = align(hn, ht) (8)

= exp
[
hTt Wahn

]/∑
n′

exp
[
hTt Wahn′

]
(9)



154

The attention weights ant is calculated based on
the alignment score between the source hidden
state hn and the current target hidden state ht.

B Experimental Details

In this section, we describe the details of our ex-
perimental setup.

We tokenize and lowercase all inputs (context,
question and answers). We set the max length of
context to be 100, question to be 20 and answer to
be 20. We find that increasing the length of con-
texts (to 150 or 200) of question/ answer (to 40)
yields similar results according to automatic met-
rics with increased experimentation time.

Our sequence-to-sequence model (Section 2.1)
operates on word embeddings which are pre-
trained on in domain data using Glove (Penning-
ton et al., 2014). As frequently used in previous
work on neural network modeling, we use an em-
beddings of size 200 and a vocabulary with cut
off frequency set to 10. During train time, we use
teacher forcing (Williams and Zipser, 1989). Dur-
ing test time, we use beam search decoding with
beam size 5.

We use a hidden layer of size two for both
the encoder and decoder recurrent neural network
models with size of hidden unit set to 100. We use
a dropout of 0.5 and learning ratio of 0.0001. In
the MIXER model, we start with ∆ = T and de-
crease it by 2 for every epoch (we found decreas-
ing ∆ to 0 is ineffective for our task, hence we stop
at 2).

C Analysis of System Outputs

C.1 Amazon Dataset
First half of Table 5 shows the system gener-
ated questions for three product descriptions in the
Amazon dataset.

In the first example, the product is a shower cur-
tain. The Reference question is specific and highly
useful. Lucene, on the other hand, picks a moder-
ately specific (“how to clean it?”) but useful ques-
tion. MLE model generates a generic but useful
“is it waterproof?”. Max-Utility generates com-
paratively a much longer question but in doing so
loses out on relevance. This behavior of gener-
ating two unrelated sentences is observed quite a
few times in both Max-Utility and GAN-Utility
models. This suggests that these models, in trying
to be very specific, end up losing out on relevance.
In the same example, GAN-Utility also generates

a fairly long question which, although awkwardly
phrase, is quite specific and useful.

In the second example, the product is a Du-
vet Cover Set. Both Reference and Lucene ques-
tions here are examples of questions that are pretty
much useful only to the person asking the ques-
tion. We find many such questions in both Ref-
erence and Lucene outputs which is the main rea-
son for the comparatively lower usefulness scores
for their outputs. All three of our models generate
irrelevant questions since the product description
explicitly says that the set is full size.

In the last example, the product is a set of mop-
ping clothes. Reference question is quite specific
but has low usefulness. Lucene picks an irrel-
evant question. MLE and Max-Utility generate
highly specific and useful questions. GAN-Utility
generates an ungrammatical question by repeating
the last word many times. We observe this be-
havior quite a few times in the outputs of both
Max-Utility and GAN-Utility models suggesting
that our sequence-to-sequence models are not very
good at maintaining long range dependencies.

C.2 Stack Exchange Dataset
Second half of Table 5 shows the system generated
questions for three posts from the Stack Exchange
dataset.

The first example is of a post where someone
describes their issue of not being able to recover
from their boot. Reference and Lucene questions
are useful. MLE generates a generic question that
is not very useful. Max-Utility generates a use-
ful question but has slight ungrammaticality in it.
GAN-Utility, on the other hand, generates a spe-
cific and an useful question.

In the second example, again Reference and
Lucene questions are useful. MLE generates a
generic question. Max-Utility and GAN-Utility
both generate fairly specific question but contain
unknown tokens. The Stack Exchange dataset
contains several technical terms leading to a long
tail in the vocabulary. Owing to this, we find that
both Max-Utility and GAN-Utility models gener-
ate many instances of questions with unknown to-
kens.

In the third example, the Reference question
is very generic. Lucene asks a relevant ques-
tion. MLE again generates a generic question.
Both Max-Utility and GAN-Utility generate spe-
cific and relevant questions.



155

Amazon Dataset
Title Extra Wide Shower Curtain for a Clawfoot Tub/opaque with Magnets

Description Approximately 180” Wide 70” Long. Extra Wide to keep the water and heat in.
Opaque in color to let the light in. Can be used as a liner or the curtain itself.

Usefulness [0-4] Specificity [0-4]
Reference does this curtain come with hooks? 4 4
Lucene how to clean it ? i had it over 10 months now . 3 3

and some mildew grow on it
MLE is it waterproof ? 1 2
Max-Utility what is the diameter of the bottom of the shower ? 0 0

i have a kohler shower curtain .
GAN-Utility does this curtain have suction feet on the bottom of the shower curtain ? 3 4

Title Chezmoi Collection 7-piece Chic Ruched White Duvet Cover Set, Full Size (with Throw Pillows)

Description Create a world of romance with the elegantly-styled, ruching,and luxurious all white duvet cover set.

Usefulness [0-4] Specificity [0-4]
Reference How long will it take to ship this to my pin code? 1 1
Lucene and can you use the duvet as is ? 1 4

if not what shall i purchase to put in it for winter or fall ?
MLE what are the dimensions of the king size ? 0 0
Max-Utility what are the dimensions of the king size ? 0 0
GAN-Utility does the king size come with a duvet cover 0 0

or do you have to buy a king duvet ?

Title Microfiber 3-Pack, Pro-Clean Mopping Cloths for Braava Floor Mopping Robot

Description Braavas textured Pro-Clean microfiber mopping cloths remove dirt and hair from your floors. The cloths
can be washed and used hundreds of times. They are compatible with all Braava models, including
the Pro-Clean Reservoir Pad. Each cloth is easy to attach and remove from the magnetic cleaning pad.

Usefulness [0-4] Specificity [0-4]
Reference do i have to use a new cloth every time i want to clean my floor? 2 4

$5/$6 seems expensive per clean
Lucene do they remove pet odor ? 0 0
MLE will these work with the scooba ? 3 3
Max-Utility do these cloths work on hardwood floors ? 3 4
GAN-Utility will this work with the scooba mop mop mop mop mop mop mop 0 0

StackExchange Dataset
Title how can i recover my boot ?

Post since last week i am trying to recover my boot . after the last update for ubuntu 12.04
i lost it and nobody could help me , i used boot-repair but there are problems
with dependences , which can’t be fix . i will be very grateful if somebody could help me .

Reference what happens when you try to boot ?
Lucene can you get into bios ?
MLE how much ram do you have ?
Max-Utility do you have a swap partition partition ?
GAN-Utility what happens when you try to boot into safe mode ?

Title packages have unmet dependencies when trying to install anything

Post i ’m running ubuntu 14.04 lts . ive recently run into this problem with several applications , it seems to
happen to anything i need to update or install . ive tried a lot of solutions and nothing seems to work.

Reference sudo dpkg -reconfigure all ? ?
Lucene if you use the graphical package manager , does n’t add the required packages automatically ?
MLE how long did you wait ?
Max-Utility can you post the output of ‘apt-cache policy UNK ?
GAN-Utility can you post a screenshot of the output of ‘sudo apt-get install UNK

Title full lubuntu installation on usb ( uefi capable )

Post i want to do a full lubuntu installation on a usb stick that can be booted in uefi mode. i do not want
persistent live usb but a full lubuntu installation and that can boot fromanyuefi-capable computer ...

Reference hello and welcome on askubuntu . could you please clarify what you want ?
Lucene so , ubuntu was installed to the pen drive ?
MLE which version of ubuntu ?
Max-Utility do you have a live cd or usb stick ?
GAN-Utility what is the model of the usb stick ?

Table 5: Example outputs from each of the systems for three product descriptions from the Home & Kitchen
category of the Amazon dataset and for three posts of StackExchange dataset.


