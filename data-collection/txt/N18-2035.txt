



















































Olive Oil is Made of Olives, Baby Oil is Made for Babies: Interpreting Noun Compounds Using Paraphrases in a Neural Model


Proceedings of NAACL-HLT 2018, pages 218–224
New Orleans, Louisiana, June 1 - 6, 2018. c©2018 Association for Computational Linguistics

Olive Oil is Made of Olives, Baby Oil is Made for Babies:
Interpreting Noun Compounds using Paraphrases in a Neural Model

Vered Shwartz∗
Computer Science Department

Bar-Ilan University
Ramat-Gan, Israel

vered1986@gmail.com

Chris Waterson
Google Inc.

1600 Amphitheatre Parkway
Mountain View, California 94043
waterson@google.com

Abstract

Automatic interpretation of the relation
between the constituents of a noun com-
pound, e.g. olive oil (source) and baby
oil (purpose) is an important task for many
NLP applications. Recent approaches are
typically based on either noun-compound
representations or paraphrases. While the
former has initially shown promising re-
sults, recent work suggests that the suc-
cess stems from memorizing single pro-
totypical words for each relation. We ex-
plore a neural paraphrasing approach that
demonstrates superior performance when
such memorization is not possible.

1 Introduction

Automatic classification of a noun-compound
(NC) to the implicit semantic relation that holds
between its constituent words is beneficial for ap-
plications that require text understanding. For in-
stance, a personal assistant asked “do I have a
morning meeting tomorrow?” should search the
calendar for meetings occurring in the morning,
while for group meeting it should look for meet-
ings with specific participants. The NC classifica-
tion task is a challenging one, as the meaning of an
NC is often not easily derivable from the meaning
of its constituent words (Spärck Jones, 1983).

Previous work on the task falls into two main
approaches. The first maps NCs to paraphrases
that express the relation between the constituent
words (e.g. Nakov and Hearst, 2006; Nulty and
Costello, 2013), such as mapping coffee cup and
garbage dump to the pattern [w1] CONTAINS [w2].
The second approach computes a representation
for NCs from the distributional representation of
their individual constituents. While this approach

∗Work done during an internship at Google.

yielded promising results, recently, Dima (2016)
showed that similar performance is achieved by
representing the NC as a concatenation of its con-
stituent embeddings, and attributed it to the lexical
memorization phenomenon (Levy et al., 2015).

In this paper we apply lessons learned from
the parallel task of semantic relation classifica-
tion. We adapt HypeNET (Shwartz et al., 2016)
to the NC classification task, using their path em-
beddings to represent paraphrases and combining
with distributional information. We experiment
with various evaluation settings, including settings
that make lexical memorization impossible. In
these settings, the integrated method performs bet-
ter than the baselines. Even so, the performance is
mediocre for all methods, suggesting that the task
is difficult and warrants further investigation.1

2 Background

Various tasks have been suggested to address
noun-compound interpretation. NC paraphrasing
extracts texts explicitly describing the implicit re-
lation between the constituents, for example stu-
dent protest is a protest LED BY, BE SPONSORED
BY, or BE ORGANIZED BY students (e.g. Nakov
and Hearst, 2006; Kim and Nakov, 2011; Hen-
drickx et al., 2013; Nulty and Costello, 2013).
Compositionality prediction determines to what
extent the meaning of the NC can be expressed
in terms of the meaning of its constituents, e.g.
spelling bee is non-compositional, as it is not re-
lated to bee (e.g. Reddy et al., 2011). In this paper
we focus on the NC classification task, which is
defined as follows: given a pre-defined set of re-
lations, classify nc = w1w2 to the relation that
holds between w1 and w2. We review the various

1The code is available at https://github.com/
tensorflow/models/tree/master/research/
lexnet_nc.

218



features used in the literature for classification.2

2.1 Compositional Representations

In this approach, classification is based on a vector
representing the NC (w1 w2), which is obtained
by applying a function to its constituents’ distri-
butional representations: ~vw1 , ~vw2 ∈ Rn. Various
functions have been proposed in the literature.

Mitchell and Lapata (2010) proposed 3 simple
combinations of ~vw1 and ~vw2 (additive, multiplica-
tive, dilation). Others suggested to represent com-
positions by applying linear functions, encoded as
matrices, over word vectors. Baroni and Zam-
parelli (2010) focused on adjective-noun composi-
tions (AN) and represented adjectives as matrices,
nouns as vectors, and ANs as their multiplication.
Matrices were learned with the objective of min-
imizing the distance between the learned vector
and the observed vector (computed from corpus
occurrences) of each AN. The full-additive model
(Zanzotto et al., 2010; Dinu et al., 2013) is a sim-
ilar approach that works on any two-word compo-
sition, multiplying each word by a square matrix:
nc = A · ~vw1 +B · ~vw2 .

Socher et al. (2012) suggested a non-linear
composition model. A recursive neural network
operates bottom-up on the output of a constituency
parser to represent variable-length phrases. Each
constituent is represented by a vector that captures
its meaning and a matrix that captures how it mod-
ifies the meaning of constituents that it combines
with. For a binary NC, nc = g(W · [~vw1 ;~vw2 ]),
where W ∈ R2n×n and g is a non-linear function.

These representations were used as features in
NC classification, often achieving promising re-
sults (e.g. Van de Cruys et al., 2013; Dima and
Hinrichs, 2015). However, Dima (2016) recently
showed that similar performance is achieved by
representing the NC as a concatenation of its con-
stituent embeddings, and argued that it stems from
memorizing prototypical words for each relation.
For example, classifying any NC with the head oil
to the SOURCE relation, regardless of the modifier.

2.2 Paraphrasing

In this approach, the paraphrases of an NC, i.e.
the patterns connecting the joint occurrences of
the constituents in a corpus, are treated as fea-
tures. For example, both paper cup and steel knife

2Leaving out features derived from lexical resources (e.g.
Nastase and Szpakowicz, 2003; Tratz and Hovy, 2010).

may share the feature MADE OF. Séaghdha and
Copestake (2013) leveraged this “relational sim-
ilarity” in a kernel-based classification approach.
They combined the relational information with
the complementary lexical features of each con-
stituent separately. Two NCs labeled to the same
relation may consist of similar constituents (pa-
per-steel, cup-knife) and may also appear with
similar paraphrases. Combining the two informa-
tion sources has shown to be beneficial, but it was
also noted that the relational information suffered
from data sparsity: many NCs had very few para-
phrases, and paraphrase similarity was based on
ngram overlap.

Recently, Surtani and Paul (2015) suggested to
represent NCs in a vector space model (VSM) us-
ing paraphrases as features. These vectors were
used to classify new NCs based on the nearest
neighbor in the VSM. However, the model was
only tested on a small dataset and performed sim-
ilarly to previous methods.

3 Model

We similarly investigate the use of paraphrasing
for NC relation classification. To generate a signal
for the joint occurrences of w1 and w2, we follow
the approach used by HypeNET (Shwartz et al.,
2016). For an w1w2 in the dataset, we collect all
the dependency paths that connect w1 and w2 in
the corpus, and learn path embeddings as detailed
in Section 3.2. Section 3.1 describes the classifi-
cation models with which we experimented.

3.1 Classification Models

Figure 1 provides an overview of the models:
path-based, integrated, and integrated-NC, each
which incrementally adds new features not present
in the previous model. In the following sections, ~x
denotes the input vector representing the NC. The
network classifies NC to the highest scoring rela-
tion: r = argmaxi softmax(~o)i, where ~o is the
output layer. All networks contain a single hidden
layer whose dimension is |x|2 . k is the number of
relations in the dataset. See Appendix A for addi-
tional technical details.

Path-based. Classifies the NC based only on the
paths connecting the joint occurrences of w1 and
w2 in the corpus, denoted P (w1, w2). We define
the feature vector as the average of its path embed-
dings, where the path embedding ~p of a path p is

219



...

coffee cup

...

coffee

cup

...

[w1] of [w2]

[w1] containing [w2]

...

[w2] in [w1]

vw2vw1vnc paths(w1, w2)

mean pooling

· · ·
· · ·

Path LSTM

cup of coffee

prep pobj

cup containing coffee

acl dobj

coffee in cup

prep pobj

Path
Integrated

Integrated-NC

Figure 1: An illustration of the classification models for the NC coffee cup. The model consists of two parts: (1) the
distributional representations of the NC (left, orange) and each word (middle, green). (2) the corpus occurrences
of coffee and cup, in the form of dependency path embeddings (right, purple).

weighted by its frequency fp,(w1,w2):

~x = ~vP (w1,w2) =

∑
p∈P (w1,w2) fp,(w1,w2) · ~p∑
p∈P (w1,w2) fp,(w1,w2)

Integrated. We concatenate w1 and w2’s word
embeddings to the path vector, to add distribu-
tional information: x = [~vw1 , ~vw2 , ~vP (w1,w2)].
Potentially, this allows the network to utilize
the contextual properties of each individual con-
stituent, e.g. assigning high probability to
SUBSTANCE-MATERIAL-INGREDIENT for edible
w1s (e.g. vanilla pudding, apple cake).
Integrated-NC. We add the NC’s observed vec-
tor ~vnc as additional distributional input, providing
the contexts in which w1w2 occur as an NC:
~vnc = [~vw1 , ~vw2 , ~vnc, ~vP (w1,w2)]. Like Dima
(2016), we learn NC vectors using the GloVe algo-
rithm (Pennington et al., 2014), by replacing each
NC occurrence in the corpus with a single token.

This information can potentially help clustering
NCs that appear in similar contexts despite having
low pairwise similarity scores between their con-
stituents. For example, gun violence and abortion
rights belong to the TOPIC relation and may ap-
pear in similar news-related contexts, while (gun,
abortion) and (violence, rights) are dissimilar.

3.2 Path Embeddings
Following HypeNET, for a path p composed of
edges e1, ..., ek, we represent each edge by the
concatenation of its lemma, part-of-speech tag,
dependency label and direction vectors: ~ve =
[~vl, ~vpos, ~vdep, ~vdir]. The edge vectors ~ve1 , ..., ~vek
are encoded using an LSTM (Hochreiter and
Schmidhuber, 1997), and the last output vector ~p
is used as the path embedding.

We use the NC labels as distant supervision.
While HypeNET predicts a word pair’s label from
the frequency-weighted average of the path vec-
tors, we differ from it slightly and compute the
label from the frequency-weighted average of the
predictions obtained from each path separately:

~o =

∑
p∈P (w1,w2) fp,(w1,w2) · softmax(~p)∑

p∈P (w1,w2) fp,(w1,w2)

r = argmaxi ~oi

We conjecture that label distribution averaging al-
lows for more efficient training of path embed-
dings when a single NC contains multiple paths.

4 Evaluation

4.1 Dataset
We follow Dima (2016) and evaluate on the Tratz
(2011) dataset, with 19,158 instances and two lev-
els of labels: fine-grained (Tratz-fine, 37 rela-
tions) and coarse-grained (Tratz-coarse, 12 re-
lations). We report results on both versions. See
Tratz (2011) for the list of relations.

Dataset Splits Dima (2016) showed that a clas-
sifier based only on vw1 and vw2 performs on par
with compound representations, and that the suc-
cess comes from lexical memorization (Levy et al.,
2015): memorizing the majority label of single
words in particular slots of the compound (e.g.
TOPIC for travel guide, fishing guide, etc.). This
memorization paints a skewed picture of the state-
of-the-art performance on this difficult task.

To better test this hypothesis, we evaluate on 4
different splits of the datasets to train, test, and val-
idation sets: (1) random, in a 75:20:5 ratio, (2)
lexical-full, in which the train, test, and validation

220



Dataset Split Best Freq Dist Dist-NC Best Comp Path Int Int-NC

Tratz-fine

Rand 0.319 0.692 0.673 0.725 0.538 0.714 0.692
Lexhead 0.222 0.458 0.449 0.450 0.448 0.510 0.478
Lexmod 0.292 0.574 0.559 0.607 0.472 0.613 0.600
Lexfull 0.066 0.363 0.360 0.334 0.423 0.421 0.429

Tratz-coarse

Rand 0.256 0.734 0.718 0.775 0.586 0.736 0.712
Lexhead 0.225 0.501 0.497 0.538 0.518 0.558 0.548
Lexmod 0.282 0.630 0.600 0.645 0.548 0.646 0.632
Lexfull 0.136 0.406 0.409 0.372 0.472 0.475 0.478

Table 1: All methods’ performance (F1) on the various splits: best freq: best performing frequency baseline (head
/ modifier),3 best comp: best model from Dima (2016).

Dataset Split Train Validation Test

TRATZ-FINE

Lexfull 4,730 1,614 869
Lexhead 9,185 5,819 4,154
Lexmod 9,783 5,400 3,975

Rand 14,369 958 3,831

TRATZ-COARSE

Lexfull 4,746 1,619 779
Lexhead 9,214 5,613 3,964
Lexmod 9,732 5,402 3,657

Rand 14,093 940 3,758

Table 2: Number of instances in each dataset split.

sets each consists of a distinct vocabulary. The
split was suggested by Levy et al. (2015), and it
randomly assigns words to distinct sets, such that
for example, including travel guide in the train set
promises that fishing guide would not be included
in the test set, and the models do not benefit from
memorizing that the head guide is always anno-
tated as TOPIC. Given that the split discards many
NCs, we experimented with two additional splits:
(3) lexical-mod split, in which the w1 words are
unique in each set, and (4) lexical-head split, in
which the w2 words are unique in each set. Ta-
ble 2 displays the sizes of each split.

4.2 Baselines

Frequency Baselines. mod freq classifies w1w2
to the most common relation in the train set for
NCs with the same modifier (w1w′2), while head
freq considers NCs with the same head (w′1w2).

4

Distributional Baselines. Ablation of the path-
based component from our models: Dist uses only
w1 and w2’s word embeddings: ~x = [~vw1 , ~vw2 ],
while Dist-NC includes also the NC embedding:
~x = [~vw1 , ~vw2 , ~vnc]. The network architecture is
defined similarly to our models (Section 3.1).

Compositional Baselines. We re-train Dima’s
(2016) models, various combinations of NC rep-
resentations (Zanzotto et al., 2010; Socher et al.,

3In practice, in lexical-full this is a random baseline, in
lexical-head it is the modifier frequency baseline, and in
lexical-mod it is the head frequency baseline.

4Unseen heads/modifiers are assigned a random relation.

2012) and single word embeddings in a fully con-
nected network.5

4.3 Results

Table 1 shows the performance of various meth-
ods on the datasets. Dima’s (2016) compositional
models perform best among the baselines, and on
the random split, better than all the methods. On
the lexical splits, however, the baselines exhibit
a dramatic drop in performance, and are outper-
formed by our methods. The gap is larger in
the lexical-full split. Finally, there is usually no
gain from the added NC vector in Dist-NC and
Integrated-NC.

5 Analysis

Path Embeddings. To focus on the changes
from previous work, we analyze the performance
of the path-based model on the Tratz-fine ran-
dom split. This dataset contains 37 relations
and the model performance varies across them.
Some relations, such as MEASURE and PER-
SONAL TITLE yield reasonable performance (F1
score of 0.87 and 0.68). Table 3 focuses on these
relations and illustrates the indicative paths that
the model has learned for each relation. We com-
pute these by performing the analysis in Shwartz
et al. (2016), where each path is fed into the path-
based model, and is assigned to its best-scoring
relation. For each relation, we consider paths with
a score ≥ 0.8.

Other relations achieve very low F1 scores, in-
dicating that the model is unable to learn them
at all. Interestingly, the four relations with the
lowest performance in our model6 are also those
with the highest error rate in Dima (2016), very

5We only include the compositional models, and omit the
“basic” setting which is similar to our Dist model. For the
full details of the compositional models, see Dima (2016).

6LEXICALIZED, TOPIC OF COGNITION&EMOTION,
WHOLE+ATTRIBUTE&FEAT, PARTIAL ATTR TRANSFER

221



Relation Path Examples

MEASURE
[w2] varies by [w1] state limit, age limit

2,560 [w1] portion of [w2] acre estate

PERSONAL TITLE
[w2] Anderson [w1] Mrs. Brown
[w2] Sheridan [w1] Gen. Johnson

CREATE-PROVIDE-GENERATE-SELL
[w2] produce [w1] food producer, drug group
[w2] selling [w1] phone company, merchandise store

[w2] manufacture [w1] engine plant, sugar company

TIME-OF1 [w2] begin [w1] morning program[w2] held Saturday [w1] afternoon meeting, morning session

SUBSTANCE-MATERIAL-INGREDIENT [w2] made of wood and [w1] marble table, vinyl siding[w2] material includes type of [w1] steel pipe

Table 3: Indicative paths for selected relations, along with NC examples.

Test NC Most Similar NC

NC Label NC Label

majority party EQUATIVE minority party WHOLE+PART OR MEMBER OF
enforcement director OBJECTIVE enforcement chief PERFORM&ENGAGE IN
fire investigator OBJECTIVE fire marshal ORGANIZE&SUPERVISE&AUTHORITY
stabilization plan OBJECTIVE stabilization program PERFORM&ENGAGE IN
investor sentiment EXPERIENCER-OF-EXPERIENCE market sentiment TOPIC OF COGNITION&EMOTION
alliance member WHOLE+PART OR MEMBER OF alliance leader OBJECTIVE

Table 4: Example of NCs from the Tratz-fine random split test set, along with the most similar NC in the
embeddings, where the two NCs have different labels.

likely since they express complex relations. For
example, the LEXICALIZED relation contains non-
compositional NCs (soap opera) or lexical items
whose meanings departed from the combination of
the constituent meanings. It is expected that there
are no paths that indicate lexicalization. In PAR-
TIAL ATTRIBUTE TRANSFER (bullet train), w1
transfers an attribute to w2 (e.g. bullet transfers
speed to train). These relations are not expected
to be expressed in text, unless the text aims to ex-
plain them (e.g. train as fast as a bullet).

Looking closer at the model confusions shows
that it often defaulted to general relations like OB-
JECTIVE (recovery plan) or RELATIONAL-NOUN-
COMPLEMENT (eye shape). The latter is described
as “indicating the complement of a relational noun
(e.g., son of, price of)”, and the indicative paths
for this relation indeed contain many variants of
“[w2] of [w1]”, which potentially can occur with
NCs in other relations. The model also confused
between relations with subtle differences, such as
the different topic relations. Given that these re-
lations were conflated to a single relation in the
inter-annotator agreement computation in Tratz
and Hovy (2010), we can conjecture that even hu-
mans find it difficult to distinguish between them.

NC Embeddings. To understand why the NC
embeddings did not contribute to the classifi-
cation, we looked into the embeddings of the

Tratz-fine test NCs; 3091/3831 (81%) of them
had embeddings. For each NC, we looked for
the 10 most similar NC vectors (in terms of co-
sine similarity), and compared their labels. We
have found that only 27.61% of the NCs were
mostly similar to NCs with the same label. The
problem seems to be inconsistency of annotations
rather than low embeddings quality. Table 4 dis-
plays some examples of NCs from the test set,
along with their most similar NC in the embed-
dings, where the two NCs have different labels.

6 Conclusion

We used an existing neural dependency path
representation to represent noun-compound para-
phrases, and along with distributional information
applied it to the NC classification task. Following
previous work, that suggested that distributional
methods succeed due to lexical memorization, we
show that when lexical memorization is not pos-
sible, the performance of all methods is much
worse. Adding the path-based component helps
mitigate this issue and increase performance.

Acknowledgments

We would like to thank Marius Pasca, Susanne
Riehemann, Colin Evans, Octavian Ganea, and
Xiang Li for the fruitful conversations, and Corina
Dima for her help in running the compositional
baselines.

222



References

Martı́n Abadi, Ashish Agarwal, Paul Barham, Eugene
Brevdo, Zhifeng Chen, Craig Citro, Greg S Corrado,
Andy Davis, Jeffrey Dean, Matthieu Devin, et al.
2016. Tensorflow: Large-scale machine learning on
heterogeneous distributed systems. arXiv preprint
arXiv:1603.04467 .

Marco Baroni and Roberto Zamparelli. 2010. Nouns
are vectors, adjectives are matrices: Representing
adjective-noun constructions in semantic space. In
Proceedings of the 2010 Conference on Empirical
Methods in Natural Language Processing. Associ-
ation for Computational Linguistics, pages 1183–
1193.

Corina Dima. 2016. Proceedings of the 1st Work-
shop on Representation Learning for NLP, As-
sociation for Computational Linguistics, chapter
On the Compositionality and Semantic Interpreta-
tion of English Noun Compounds, pages 27–39.
https://doi.org/10.18653/v1/W16-1604.

Corina Dima and Erhard Hinrichs. 2015. Automatic
noun compound interpretation using deep neural
networks and word embeddings. IWCS 2015 page
173.

Georgiana Dinu, Nghia The Pham, and Marco Baroni.
2013. General estimation and evaluation of compo-
sitional distributional semantic models. In Proceed-
ings of the Workshop on Continuous Vector Space
Models and their Compositionality. Association for
Computational Linguistics, Sofia, Bulgaria, pages
50–58. http://www.aclweb.org/anthology/W13-
3206.

Iris Hendrickx, Zornitsa Kozareva, Preslav Nakov, Di-
armuid Ó Séaghdha, Stan Szpakowicz, and Tony
Veale. 2013. Semeval-2013 task 4: Free paraphrases
of noun compounds. In Second Joint Conference
on Lexical and Computational Semantics (*SEM),
Volume 2: Proceedings of the Seventh International
Workshop on Semantic Evaluation (SemEval 2013).
Association for Computational Linguistics, pages
138–143. http://aclweb.org/anthology/S13-2025.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation
9(8):1735–1780.

Nam Su Kim and Preslav Nakov. 2011. Large-
scale noun compound interpretation using boot-
strapping and the web as a corpus. In Pro-
ceedings of the 2011 Conference on Empirical
Methods in Natural Language Processing. Associa-
tion for Computational Linguistics, pages 648–658.
http://aclweb.org/anthology/D11-1060.

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980 .

Omer Levy, Steffen Remus, Chris Biemann, and
Ido Dagan. 2015. Do supervised distribu-
tional methods really learn lexical inference re-
lations? In Proceedings of the 2015 Confer-
ence of the North American Chapter of the As-
sociation for Computational Linguistics: Human
Language Technologies. Association for Computa-
tional Linguistics, Denver, Colorado, pages 970–
976. http://www.aclweb.org/anthology/N15-1098.

Jeff Mitchell and Mirella Lapata. 2010. Composition
in distributional models of semantics. Cognitive sci-
ence 34(8):1388–1429.

Preslav Nakov and Marti Hearst. 2006. Using verbs to
characterize noun-noun relations. In International
Conference on Artificial Intelligence: Methodology,
Systems, and Applications. Springer, pages 233–
244.

Vivi Nastase and Stan Szpakowicz. 2003. Explor-
ing noun-modifier semantic relations. In Fifth in-
ternational workshop on computational semantics
(IWCS-5). pages 285–301.

Paul Nulty and Fintan Costello. 2013. General and
specific paraphrases of semantic relations between
nouns. Natural Language Engineering 19(03):357–
384.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP). Association for Computa-
tional Linguistics, Doha, Qatar, pages 1532–1543.
http://www.aclweb.org/anthology/D14-1162.

Siva Reddy, Diana McCarthy, and Suresh Manand-
har. 2011. An empirical study on compositional-
ity in compound nouns. In Proceedings of 5th In-
ternational Joint Conference on Natural Language
Processing. Asian Federation of Natural Language
Processing, Chiang Mai, Thailand, pages 210–218.
http://www.aclweb.org/anthology/I11-1024.

Diarmuid O Séaghdha and Ann Copestake. 2013. In-
terpreting compound nouns with kernel methods.
Natural Language Engineering 19(3):331–356.

Vered Shwartz, Yoav Goldberg, and Ido Dagan. 2016.
Improving hypernymy detection with an integrated
path-based and distributional method. In Pro-
ceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics (Volume
1: Long Papers). Association for Computational
Linguistics, Berlin, Germany, pages 2389–2398.
http://www.aclweb.org/anthology/P16-1226.

Richard Socher, Brody Huval, D. Christopher Man-
ning, and Y. Andrew Ng. 2012. Semantic composi-
tionality through recursive matrix-vector spaces. In
Proceedings of the 2012 Joint Conference on Empir-
ical Methods in Natural Language Processing and

223



Computational Natural Language Learning. Asso-
ciation for Computational Linguistics, pages 1201–
1211. http://aclweb.org/anthology/D12-1110.

Karen Spärck Jones. 1983. Compound noun interpreta-
tion problems. Technical report, University of Cam-
bridge, Computer Laboratory.

Nitesh Surtani and Soma Paul. 2015. A vsm-based sta-
tistical model for the semantic relation interpretation
of noun-modifier pairs. In RANLP. pages 636–645.

Stephen Tratz. 2011. Semantically-enriched parsing
for natural language understanding. University of
Southern California.

Stephen Tratz and Eduard Hovy. 2010. A taxon-
omy, dataset, and classifier for automatic noun
compound interpretation. In Proceedings of the
48th Annual Meeting of the Association for Com-
putational Linguistics. Association for Computa-
tional Linguistics, Uppsala, Sweden, pages 678–
687. http://www.aclweb.org/anthology/P10-1070.

Tim Van de Cruys, Stergos Afantenos, and Philippe
Muller. 2013. Melodi: A supervised distribu-
tional approach for free paraphrasing of noun com-
pounds. In Second Joint Conference on Lex-
ical and Computational Semantics (*SEM), Vol-
ume 2: Proceedings of the Seventh Interna-
tional Workshop on Semantic Evaluation (Se-
mEval 2013). Association for Computational Lin-
guistics, Atlanta, Georgia, USA, pages 144–147.
http://www.aclweb.org/anthology/S13-2026.

Fabio Massimo Zanzotto, Ioannis Korkontzelos,
Francesca Fallucchi, and Suresh Manandhar. 2010.
Estimating linear models for compositional distribu-
tional semantics. In Proceedings of the 23rd Inter-
national Conference on Computational Linguistics.
Association for Computational Linguistics, pages
1263–1271.

A Technical Details

To extract paths, we use a concatenation of En-
glish Wikipedia and the Gigaword corpus.7 We
consider sentences with up to 32 words and depen-
dency paths with up to 8 edges, including satel-
lites, and keep only 1,000 paths for each noun-
compound. We compute the path embeddings in
advance for all the paths connecting NCs in the
dataset (§3.2), and then treat them as fixed embed-
dings during classification (§3.1).

We use TensorFlow (Abadi et al., 2016) to
train the models, fixing the values of the hyper-
parameters after performing preliminary experi-
ments on the validation set. We set the mini-batch
size to 10, use Adam optimizer (Kingma and Ba,
2014) with the default learning rate, and apply
word dropout with probability 0.1. We train up to
30 epochs with early stopping, stopping the train-
ing when the F1 score on the validation set drops
8 points below the best performing score.

We initialize the distributional embeddings with
the 300-dimensional pre-trained GloVe embed-
dings (Pennington et al., 2014) and the lemma em-
beddings (for the path-based component) with the
50-dimensional ones. Unlike HypeNET, we do
not update the embeddings during training. The
lemma, POS, and direction embeddings are initial-
ized randomly and updated during training. NC
embeddings are learned using a concatenation of
Wikipedia and Gigaword. Similarly to the origi-
nal GloVe implementation, we only keep the most
frequent 400,000 vocabulary terms, which means
that roughly 20% of the noun-compounds do not
have vectors and are initialized randomly in the
model.

7https://catalog.ldc.upenn.edu/
ldc2003t05

224


