




































Bidirectional Attentive Memory Networks for Question Answering over Knowledge Bases


Proceedings of NAACL-HLT 2019, pages 2913–2923
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

2913

Bidirectional Attentive Memory Networks for Question Answering over
Knowledge Bases

Yu Chen
Rensselaer Polytechnic Institute

cheny39@rpi.edu

Lingfei Wu
IBM Research

wuli@us.ibm.com

Mohammed J. Zaki
Rensselaer Polytechnic Institute

zaki@cs.rpi.edu

Abstract

When answering natural language questions
over knowledge bases (KBs), different ques-
tion components and KB aspects play differ-
ent roles. However, most existing embedding-
based methods for knowledge base question
answering (KBQA) ignore the subtle inter-
relationships between the question and the KB
(e.g., entity types, relation paths and context).
In this work, we propose to directly model
the two-way flow of interactions between
the questions and the KB via a novel Bidi-
rectional Attentive Memory Network, called
BAMnet. Requiring no external resources
and only very few hand-crafted features, on
the WebQuestions benchmark, our method
significantly outperforms existing information-
retrieval based methods, and remains com-
petitive with (hand-crafted) semantic parsing
based methods. Also, since we use attention
mechanisms, our method offers better inter-
pretability compared to other baselines.

1 Introduction

With the rapid growth in large-scale knowledge
bases (KBs) such as DBPedia (Auer et al., 2007)
and FreeBase (Google, 2018), knowledge base
question answering (KBQA) has drawn increasing
attention over the past few years. Given questions
in natural language (NL), the goal of KBQA is to
automatically find answers from the underlying KB,
which provides a more natural and intuitive way to
access the vast underlying knowledge resources.

One of the most prominent challenges of KBQA
is the lexical gap. For instance, the same question
can be expressed in various ways in NL while a KB
usually has a canonical lexicon. It is therefore non-
trivial to map an NL question to a structured KB.
The approaches proposed to tackle the KBQA task
can be roughly categorized into two groups: se-
mantic parsing (SP) and information retrieval (IR)

approaches. SP-based approaches address the prob-
lem by constructing a semantic parser that converts
NL questions into intermediate logic forms, which
can be executed against a KB. Traditional semantic
parsers (Wong and Mooney, 2007) require anno-
tated logical forms as supervision, and are limited
to narrow domains with a small number of logical
predicates. Recent efforts overcome these limita-
tions via the construction of hand-crafted rules or
features (Abujabal et al., 2017; Hu et al., 2018)
schema matching (Cai and Yates, 2013), and using
weak supervision from external resources (Krish-
namurthy and Mitchell, 2012).

Unlike SP-based approaches that usually assume
a pre-defined set of lexical triggers or rules, which
limit their domains and scalability, IR-based ap-
proaches directly retrieve answers from the KB in
light of the information conveyed in the questions.
These IR-based approaches usually do not require
hand-made rules and can therefore scale better to
large and complex KBs. Recently, deep neural
networks have been shown to produce strong re-
sults on many NLP tasks. In the field of KBQA,
under the umbrella of IR-based approaches, many
embedding-based methods (Bordes et al., 2014b;
Hao et al., 2017) have been proposed and have
shown promising results. These methods adopt
various ways to encode questions and KB sub-
graphs into a common embedding space and di-
rectly match them in that space, and can be typi-
cally trained in an end-to-end manner.

Compared to existing embedding-based meth-
ods that encode questions and KB subgraphs in-
dependently, we introduce a novel Bidirectional
Attentive Memory network, called BAMnet that
captures the mutual interactions between questions
and the underlying KB, which is stored in a content-
addressable memory. We assume that the world
knowledge (i.e., the KB) is helpful for better un-
derstanding the questions. Similarly, the questions



2914

themselves can help us focus on important KB
aspects. To this end, we design a two-layered bidi-
rectional attention network. The primary attention
network is intended to focus on important parts of
a question in light of the KB and important KB
aspects in light of the question. Built on top of
that, the secondary attention network is intended
to enhance the question and KB representations by
further exploiting the two-way attention. Through
this idea of hierarchical two-way attention, we are
able to distill the information that is the most rel-
evant to answering the questions on both sides of
the question and KB.

We highlight the contributions of this paper as
follows: 1) we propose a novel bidirectional at-
tentive memory network for the task of KBQA
which is intended to directly model the two-way in-
teractions between questions and the KB; 2) by
design, our method offers good interpretability
thanks to the attention mechanisms; 3) on the We-
bQuestions benchmark, our method significantly
outperforms previous information-retrieval based
methods while remaining competitive with (hand-
crafted) semantic parsing based methods.

2 Related work

Two broad classes of SP-based and IR-based ap-
proaches have been proposed for KBQA. The for-
mer attempts to convert NL questions to logic
forms. Recent work focused on approaches based
on weak supervision from either external resources
(Krishnamurthy and Mitchell, 2012; Berant et al.,
2013; Yao and Van Durme, 2014; Hu et al., 2018;
Yih et al., 2015; Yavuz et al., 2016), schema match-
ing (Cai and Yates, 2013), or using hand-crafted
rules and features (Unger et al., 2012; Berant et al.,
2013; Berant and Liang, 2015; Reddy et al., 2016;
Bao et al., 2016; Abujabal et al., 2017; Hu et al.,
2018; Bast and Haussmann, 2015; Yih et al., 2015).
A thread of research has been explored to gener-
ate semantic query graphs from NL questions such
as using coarse alignment between phrases and
predicates (Berant et al., 2013), searching partial
logical forms via an agenda-based strategy (Berant
and Liang, 2015), pushing down the disambigua-
tion step into the query evaluation stage (Hu et al.,
2018), or exploiting rich syntactic information in
NL questions (Xu et al., 2018a,b). Notably, an-
other thread of SP-based approaches try to exploit
IR-based techniques (Yao and Van Durme, 2014;
Bast and Haussmann, 2015; Yang et al., 2014; Yih

et al., 2015; Bao et al., 2016; Yavuz et al., 2016;
Liang et al., 2016) by computing the similarity
of two sequences as features, leveraging a neural
network-based answer type prediction model, or
training end-to-end neural symbolic machine via
REINFORCE (Williams, 1992). However, most
SP-based approaches more or less rely on hand-
crafted rules or features, which limits their scala-
bility and transferability.

The other line of work (the IR-based) has fo-
cused on mapping answers and questions into the
same embedding space, where one could query any
KB independent of its schema without requiring
any grammar or lexicon. Bordes et al. (2014b) were
the first to apply an embedding-based approach for
KBQA. Later, Bordes et al. (2014a) proposed the
idea of subgraph embedding, which encodes more
information (e.g., answer path and context) about
the candidate answer. In follow-up work (Bordes
et al., 2015; Jain, 2016), memory networks (We-
ston et al., 2014) were used to store candidates, and
could be accessed iteratively to mimic multi-hop
reasoning. Unlike the above methods that mainly
use a bag-of-words (BOW) representation to en-
code questions and KB resources, (Dong et al.,
2015; Hao et al., 2017) apply more advanced net-
work modules (e.g., CNNs and LSTMs) to encode
questions. Hybrid methods have also been pro-
posed (Feng et al., 2016; Xu et al., 2016; Das et al.,
2017), which achieve improved results by leverag-
ing additional knowledge sources such as free text.
While most embedding-based approaches encode
questions and answers independently, (Hao et al.,
2017) proposed a cross-attention mechanism to en-
code questions according to various candidate an-
swer aspects. Differently, in this work, our method
goes one step further by modeling the bidirectional
interactions between questions and a KB.

The idea of bidirectional attention proposed in
this work is similar to those applied in machine
reading comprehension (Wang and Jiang, 2016;
Seo et al., 2016; Xiong et al., 2016). However,
these previous works focus on capturing the inter-
actions between two bodies of text, in this work,
we focus on modeling the interactions between one
body of text and a KB.

3 A modular bidirectional attentive
memory network for KBQA

Given an NL question, the goal is to fetch answers
from the underlying KB. Our proposed BAMnet



2915

Figure 1: Overall architecture of the BAMnet model.

model consists of four components which are the
input module, memory module, reasoning module
and answer module, as shown in Fig. 1.

3.1 Input module

An input NL question Q = {qi}|Q|i=1 is represented
as a sequence of word embeddings (qi) by applying
a word embedding layer. We then use a bidirec-
tional LSTM (Hochreiter and Schmidhuber, 1997)
to encode the question as HQ (in Rd×|Q|) which is
the sequence of hidden states (i.e., the concatena-
tion of forward and backward hidden states) gener-
ated by the BiLSTM.

3.2 Memory module

Candidate generation Even though all the enti-
ties from the KB could in principle be candidate
answers, this is computationally expensive and un-
necessary in practice. We only consider those en-
tities which are “close” to the main topic entity of
a question. An answer is the text description (e.g.,
a name) of an entity node. For example, Ohio is
the topic entity of the question “Who was the sec-
retary of state of Ohio in 2011?” (see Fig. 2). After
getting the topic entity, we collect all the entities
connected to it within h hops as candidate answers,
which we denote as {Ai}|A|i=1.
KB representation For each candidate answer
from the KB, we encode three types of information:
answer type, path and context.

Answer type Entity type information is an im-
portant clue in ranking answers. For example, if
a question uses the interrogative word where, then
candidate answers with types relevant to the con-
cept of location are more likely to be correct. We
use a BiLSTM to encode its text description to get

Figure 2: A working example from Freebase. Relations
in Freebase have hierarchies where high-level ones pro-
vide too broad or even noisy information about the re-
lation. Thus, we choose to use the lowest level one.

a d-dimensional vector Ht1i (i.e., the concatenation
of last forward and backward hidden states).

Answer path We define an answer path as a
sequence of relations from a candidate answer to
a topic entity. For example, for the Ohio question
(see Fig. 2), the answer path of Jon A. Husted can
be either represented as a sequence of relation ids
[office holder, governing officials] or the text de-
scription [office, holder, governing, officials]. We
thus encode an answer path as Hp1i via a BiLSTM,
and as Hp2i by computing the average of its relation
embeddings via a relation embedding layer.

Answer context The answer context is defined
as the surrounding entities (e.g., sibling nodes)
of a candidate which can help answer questions
with constraints. For example, in Fig. 2, the an-
swer context of Jon A. Husted includes the govern-
ment position title secretary of state and starting
date 2011-01-09. However, for simple questions
without constraints, the answer context is unnec-



2916

essary and can potentially incorporate noise. We
tackle this issue with two strategies: 1) we use a
novel importance module (explained later) to focus
on important answer aspects, and 2) we only con-
sider those context nodes that have overlap with the
question. Specifically, for each context node (i.e.,
a sequence of words) of a candidate, we first com-
pute the longest common subsequence between it
and the question, we then encode it via a BiLSTM
only if we get a non-stopwords substring. Finally,
the answer context of a candidate answer will be
encoded as the average of all context node repre-
sentations, which we denote as Hci .
Key-value memory module In our model, we use
a key-value memory network (Miller et al., 2016)
to store candidate answers. Unlike a basic memory
network (Weston et al., 2014), its addressing stage
is based on the key memory while the reading stage
uses the value memory, which gives greater flexi-
bility to encode prior knowledge via functionality
separation. Thus, after encoding the answer type,
path and context, we apply linear projections on
them as follows:

Mkti = f
k
t (H

t1
i ) M

vt
i = f

v
t (H

t1
i )

M
kp
i = f

k
p ([H

p1
i ;H

p2
i ]) M

vp
i = f

v
p ([H

p1
i ;H

p2
i ])

Mkci = f
k
c (H

c
i ) M

vc
i = f

v
c (H

c
i )

(1)

where Mkti and M
vt
i are d-dimensional key and

value representations of answer type Ati, respec-
tively. Similarly, we have key and value repre-
sentations for answer path and answer context.
We denote M as a key-value memory whose
row Mi = {Mki ,Mvi } (both in Rd×3), where
Mki = [M

kt
i ;M

kp
i ;M

kc
i ] comprises the keys, and

Mvi = [M
vt
i ;M

vp
i ;M

vc
i ] comprises the values.

Here [, ] and [; ] denote row-wise and column-wise
concatenations, respectively.

3.3 Reasoning module
The reasoning module consists of a generalization
module, and our novel two-layered bidirectional
attention network which aims at capturing the two-
way interactions between questions and the KB.
The primary attention network contains the KB-
aware attention module which focuses on the im-
portant parts of a question in light of the KB, and
the importance module which focuses on the im-
portant KB aspects in light of the question. The
secondary attention network (enhancing module in
Fig. 1) is intended to enhance the question and KB
vectors by further exploiting the two-way attention.

Figure 3: KB-aware attention module. CAT: concatena-
tion, SelfAtt: self-attention, AddAtt: additive attention.

KB-aware attention module Not all words in a
question are created equal. We use a KB-aware
attention mechanism to focus on important com-
ponents of a question, as shown in Fig. 3. Specifi-
cally, we first apply self-attention (SelfAtt) over all
question word vectors HQ to get a d-dimensional
question vector q as follows

q = BiLSTM([HQAQQ
T
,HQ])

AQQ = softmax((HQ)THQ)
(2)

where softmax is applied over the last dimension of
an input tensor by default. Using question summary
q, we apply another attention (AddAtt) over the
memory to obtain answer type mt, path mp and
context summary mc:

mx =

|A|∑
i=1

axi ·M
vx
i

ax = Attadd(q,Mkx)

(3)

where x ∈ {t, p, c}, and Attadd(x,y) =
softmax(tanh([xT ,y]W1)W2), with W1 ∈
R2d×d and W2 ∈ Rd×1 being trainable weights.

So far, we have obtained the KB summary
m = [mt;mp;mc] in light of the question. We
proceed to compute the question-to-KB attention
between question word qi and KB aspects as for-
mulated by AQm = HQTm. By applying max
pooling over the last dimension (i.e., the KB aspect
dimension) of AQm, that is, aQi = maxj A

Qm
ij ,

we select the strongest connection between qi and
the KB. The idea behind it is that each word in a
question serves a specific purpose (i.e., indicating
answer type, path or context), and max pooling can
help find out that purpose. We then apply a soft-
max over the resulting vector to obtain ãQ which
is a KB-aware question attention vector since it
indicates the importance of qi in light of the KB.



2917

Importance module The importance module fo-
cuses on important KB aspects as measured by their
relevance to the questions. We start by computing
a |Q| × |A| × 3 attention tensor AQM which indi-
cates the strength of connection between each pair
of {qi, Axj }x={t,p,c}. Then, we take the max of the
question word dimension of AQM and normalize
it to get an attention matrix ÃM , which indicates
the importance of each answer aspect for each can-
didate answer. After that, we proceed to compute
question-aware memory representations M̃k. Thus,
we have:

M̃v = {M̃vi }
|A|
i=1 ∈ R

|A|×d M̃vi =

3∑
j=1

Mvij

M̃k = {M̃ki }
|A|
i=1 ∈ R

|A|×d M̃ki = Ã
M
i M

k
i

ÃM = softmax(AM
T
)T AM = max

i
{AQMi }

|Q|
i=1

AQM =
(
MkHQ

)T
(4)

Enhancing module We further enhance the ques-
tion and KB representations by exploiting two-way
attention. We compute the KB-enhanced question
representation q̃ which incorporates the relevant
KB information by applying max pooling over
the last dimension (i.e., the answer aspect dimen-
sion) of AQM , that is, AQM = maxk{A

QM
.,.,k }

3
k=1,

and then normalizing it to get a question-to-KB
attention matrix ÃQM from which we compute
the question-aware KB summary and incorpo-
rate it into the question representation H̃Q =
HQ + ãQ � (ÃQMM̃v)

T
. Finally, we obtain a d-

dimensional KB-enhanced question representation
q̃ = H̃QãQ.

Similarly, we compute a question-enhanced KB
representation Mk which incorporates the relevant
question information:

M
k
= M̃k + ãM � (ÃMQ (H̃Q)T )

ãM = (ÃQM )
T ãQ ∈ R|A|×1

ÃMQ = softmax(A
Q
M

T
) ∈ R|A|×|Q|

(5)

Generalization module We add a one-hop atten-
tion process before answering. We use the question
representation q̃ to query over the key memory Mk

via an attention mechanism, and fetch the most rel-
evant information from the value memory, which
is then used to update the question vector using a
GRU (Cho et al., 2014). Finally, we apply a resid-
ual layer (He et al., 2016) (i.e., y = f(x) + x)

and batch normalization (BN) (Ioffe and Szegedy,
2015), which help the model performance in prac-
tice. Thus, we have

q̂ = BN(q̃+ q′) q′ = GRU(q̃, m̃)

m̃ =

|A|∑
i=1

ai · M̃vi a = AttGRUadd (q̃,M
k
)

(6)

3.4 Answer module
Given the representation of question Q which is
q̂ and the representation of candidate answers
{Ai}|A|i=1 which is {M

k
i }
|A|
i=1, we compute the

matching score S(q̂,Mki ) between every pair
(Q,Ai) as S(q,a) = qT · a. The candidate an-
swers are then ranked by their scores.

3.5 Training and testing
Training Intermediate modules such as the en-
hancing module generate “premature” represen-
tations of questions (e.g., q̃) and candidate an-
swers (e.g., Mk). Even though these intermediate
representations are not optimal for answer predic-
tion, we can still use them along with the final
representations to jointly train the model, which
we find helps the training probably by providing
more supervision since we are directly forcing in-
termediate representations to be helpful for predic-
tion. Moreover, we directly match interrogative
words to KB answer types. A question Q is repre-
sented by a 16-dimensional interrogative word (we
use “which”, “what”, “who”, “whose”, “whom”,
“where”, “when”, “how”, “why” and “whether”)
embedding qw and a candidate answer Ai is rep-
resented by entity type embedding Ht2i with the
same size. We then compute the matching score
S(qw,Ht2i ) between them. Although we only have
weak labels (e.g., incorrect answers do not neces-
sarily imply incorrect types) for the type matching
task, and there are no shared representations be-
tween two tasks, we find in practice this strategy
helps the training process as shown in Section 4.4.
Loss Function: In the training phase, we force pos-
itive candidates to have higher scores than negative
candidates by using a triplet-based loss function:

o = g(HQãQ,

3∑
j=1

Mk.,j) + g(q̃,M
k
)

+g(q̂,M
k
) + g(qw,Ht2)

(7)

where g(q,M) =
∑

a+∈A+
a−∈A−

`(S(q,Ma+), S(q,Ma−)) ,

and `(y, ŷ) = max(0, 1 + ŷ − y) is a hinge loss



2918

function, and A+ and A− denote the positive (i.e.,
correct) and negative (i.e., incorrect) answer sets,
respectively. Note that at training time, the candi-
date answers are extracted from the KB subgraph
of the gold-standard topic entity, with the memory
size set to Nmax. We adopt the following sampling
strategy which works well in practice: if Nmax is
larger than the number of positive answers |A+|,
we keep all the positive answers and randomly se-
lect negative answers to fill up the memory; oth-
erwise, we randomly select min(Nmax/2, |A−|)
negative answers and fill up the remaining memory
with random positive answers.
Testing At testing time, we need to first find the
topic entity. We do this by using the top result re-
turned by a separately trained topic entity predictor
(we also compare with the result returned by the
Freebase Search API). Then, the answer module re-
turns the candidate answer with the highest scores
as predicted answers. Since there can be multiple
answers to a given question, the candidates whose
scores are close to the highest score within a certain
margin, θ, are regarded as good answers as well.
Therefore, we formulate the inference process as
follows:

Â = {â | â ∈ A & max
a′∈A
{S(q̂,Mka′)} − S(q̂,M

k
â) < θ}

(8)

where maxa′∈A{S(q̂,M
k
a′)} is the score of the

best matched answer and Â is the predicted an-
swer set. Note that θ is a hyper-parameter which
controls the degree of tolerance. Decreasing the
value of θ makes the model become stricter when
predicting answers.

3.6 Topic entity prediction
Given a question Q, the goal of a topic entity pre-
dictor is to find the best topic entity ĉ from the can-
didate set {Ci}|C|i=1 returned by external topic entity
linking tools (we use the Freebase Search API and
S-MART (Yang and Chang, 2016) in our experi-
ments). We use a convolutional network (CNN) to
encode Q into a d-dimensional vector e. For candi-
date topic entity Ci, we encode three types of KB
aspects, namely, the entity name, entity type and
surrounding relations where both entity name and
type are represented as a sequence of words while
surrounding relations are represented as a bag of se-
quences of words. Specifically, we use three CNNs
to encode them into three d-dimensional vectors,
namely, Cni , C

t
i and C

r1
i . Note that for surround-

ing relations, we first encode each of the relations

and then compute their average. Additionally, we
compute an average of the relation embeddings via
a relation embedding layer which we denote as
Cr2i . We then apply linear projections on the above
vectors as follows:

Pki = f
k([Cni ;C

t
i;C

r1
i ;C

r2
i ])

Pvi = f
v([Cni ;C

t
i;C

r1
i ;C

r2
i ])

(9)

where Pki and P
v
i are d-dimensional key and value

representations of candidate Ci, respectively. Fur-
thermore, we compute the updated question vec-
tor ê using the generalization module mentioned
earlier. Next, we use a dot product to compute
the similarity score between Q and Ci. A triplet-
based loss function is used as formulated by o =
g(e,Pki ) + g(ê,P

k
i ) where g(.) is the aforemen-

tioned hinge loss function. When training the pre-
dictor, along with the candidates returned from ex-
ternal entity linking tools, we do negative sampling
(using string matching) to get more supervision. In
the testing phase, the candidate with the highest
score is returned as the best topic entity and no
negative sampling is applied.

4 Experiments

This section provides an extensive evaluation of
our proposed BAMnet model against state-of-
the-art KBQA methods. The implementation
of BAMnet is available at https://github.
com/hugochan/BAMnet.

4.1 Data and metrics

We use the Freebase KB and the WebQuestions
dataset, described below:
Freebase This is a large-scale KB (Google, 2018)
that consists of general facts organized as subject-
property-object triples. It has 41M non-numeric
entities, 19K properties, and 596M assertions.
WebQuestions This dataset (Berant et al., 2013)
(nlp.stanford.edu/software/sempre)
contains 3,778 training examples and 2,032 test
examples. We further split the training instances
into a training set and development set via a
80%/20% split. Approximately 85% of questions
can be directly answered via a single FreeBase
predicate. Also, each question can have multiple
answers. In our experiments, we use a development
version of the dataset (Baudis and Pichl, 2016),
which additionally provides (potentially noisy)
entity mentions for each question.



2919

Following (Berant et al., 2013), macro F1 scores
(i.e., the average of F1 scores over all questions)
are reported on the WebQuestions test set.

4.2 Model settings

When constructing the vocabularies of words, en-
tity types or relation types, we only consider those
questions and their corresponding KB subgraphs
appearing in the training and validation sets. The
vocabulary size of words is V = 100, 797. There
are 1,712 entity types and 4,996 relation types in
the KB subgraphs. Notably, in FreeBase, one en-
tity might have multiple entity types. We only use
the first one available, which is typically the most
concrete one. For those non-entity nodes which are
boolean values or numbers, we use “bool” or “num”
as their types, respectively.

We also adopt a query delexicalization strategy
where for each question, the topic entity mention
as well as constraint entity mentions (i.e., those
belonging to “date”, “ordinal” or “number”) are
replaced with their types. When encoding KB con-
text, if the overlap belongs to the above types, we
also do this delexicalization, which will guarantee
it matches up with the delexicalized question well
in the embedding space.

Given a topic entity, we extract its 2-hop sub-
graph (i.e., h = 2) to collect candidate answers,
which is sufficient for WebQuestions. At training
time, the memory size is limited to Nmax = 96
candidate answers (for the sake of efficiency). If
there are more potential candidates, we do random
sampling as mentioned earlier. We initialize word
embeddings with pre-trained GloVe vectors (Pen-
nington et al., 2014) with word embedding size
dv = 300. The relation embedding size dp, entity
type embedding size dt and hidden size d are set
as 128, 16 and 128, respectively. The dropout rates
on the word embedding layer, question encoder
side and the answer encoder side are 0.3, 0.3 and
0.2, respectively. The batch size is set as 32, and
answer module threshold θ = 0.7. As for the topic
entity prediction, we use the same hyperparame-
ters. For each question, there are 15 candidates
after negative sampling in the training time. When
encoding a question, we use a CNN with filter sizes
2 and 3. A linear projection is applied to merge
features extracted with different filters. When en-
coding a candidate aspect, we use a CNN with filter
size 3. Linear activation and max-pooling are used
together with CNNs. In the training process, we

use the Adam optimizer (Kingma and Ba, 2014)
to train the model. The initial learning rate is set
as 0.001 which is reduced by a factor of 10 if no
improvement is observed on the validation set in 3
consecutive epochs. The training procedure stops
if no improvement is observed on the validation set
in 10 consecutive epochs. The hyper-parameters
are tuned on the development set.

4.3 Performance comparison

As shown in Table 1, our method can achieve an F1
score of 0.557 when the gold topic entity is known,
which gives an upper bound of our model perfor-
mance. When the gold topic entity is unknown,
we report the results using: 1) the Freebase Search
API, which achieves a recall@1 score of 0.857 on
the test set for topic entity linking, and 2) the topic
entity predictor, which achieves a recall@1 score
of 0.898 for entity retrieval.

As for the performance of BAMnet on WebQues-
tions, it achieves an F1 score of 0.518 using the
topic entity predictor, which is significantly bet-
ter than the F1 score of 0.497 using the Freebase
Search API. We can observe that BAMnet signif-
icantly outperforms previous state-of-the-art IR-
based methods, which conclusively demonstrates
the effectiveness of modeling bidirectional interac-
tions between questions and the KB.

It is important to note that unlike the state-of-
the-art SP-based methods, BAMnet relies on no
external resources and very few hand-crafted fea-
tures, but still remains competitive with those ap-
proaches. Based on careful hand-drafted rules,
some SP-based methods (Bao et al., 2016; Yih
et al., 2015) can better model questions with con-
straints and aggregations. For example, (Yih et al.,
2015) applies many manually designed rules and
features to improve performance on questions with
constraints and aggregations, and (Bao et al., 2016)
directly models temporal (e.g., “after 2000”), ordi-
nal (e.g., “first”) and aggregation constraints (e.g.,
“how many”) by adding detected constraint nodes
to query graphs. In contrast, our method is end-to-
end, with very few hand-crafted rules.

Additionally, (Yavuz et al., 2016; Bao et al.,
2016) train their models on external Q&A datasets
to get extra supervision. For a fairer comparison,
we only show their results without training on ex-
ternal Q&A datasets. Similarly, for hyhrid systems
(Feng et al., 2016; Xu et al., 2016), we only report
results without using Wikipedia free text. It is in-



2920

Methods (ref) Macro F1
SP-based

(Berant et al., 2013) 0.357
(Yao and Van Durme, 2014) 0.443

(Wang et al., 2014) 0.453
(Bast and Haussmann, 2015) 0.494

(Berant and Liang, 2015) 0.497
(Yih et al., 2015) 0.525

(Reddy et al., 2016) 0.503
(Yavuz et al., 2016) 0.516
(Bao et al., 2016) 0.524
(Feng et al., 2016) 0.471

(Reddy et al., 2017) 0.495
(Abujabal et al., 2017) 0.510

(Hu et al., 2018) 0.496
IR-based

(Bordes et al., 2014a) 0.392
(Yang et al., 2014) 0.413
(Dong et al., 2015) 0.408

(Bordes et al., 2015) 0.422
(Xu et al., 2016) 0.471
(Hao et al., 2017) 0.429

Our Method: BAMnet

w/ gold topic entity 0.557
w/ Freebase Search API 0.497
w/ topic entity predictor 0.518

Table 1: Results on the WebQuestions test set. Bold:
best in-category performance.

teresting to note that both (Yih et al., 2015) and
(Bao et al., 2016) also use the ClueWeb dataset for
learning more accurate semantics. The F1 score
of (Yih et al., 2015) drops from 0.525 to 0.509 if
ClueWeb information is removed. To summarize,
BAMnet achieves state-of-the-art performance of
0.518 without recourse to any external resources
and relies only on very few hand-crafted features.
If we assume gold-topic entities are given then
BAMnet achieves an F1 of 0.557.

4.4 Ablation study

We now discuss the performance impact of the dif-
ferent modules and strategies in BAMnet. Note
that gold topic entity is assumed to be known when
we do this ablation study, because the error intro-
duced by topic entity prediction might reduce the
real performance impact of a module or strategy.
As shown in Table 2, significant performance drops
were observed after turning off some key attention

Methods Macro F1

all 0.557
w/o two-layered bidirectional attn 0.534
w/o kb-aware attn (+self-attn) 0.544
w/o importance module 0.540
w/o enhancing module 0.550
w/o generalization module 0.542
w/o joint type matching 0.545
w/o topic entity delexicalization 0.529
w/o constraint delexicalization 0.554

Table 2: Ablation results on the WebQuestions test set.
Gold topic entity is assumed to be known.

modules, which confirms that the real power of
our method comes from the idea of hierarchical
two-way attention. As we can see, when turning
off the two-layered bidirectional attention network,
the model performance drops from 0.557 to 0.534.
Among all submodules in the attention network,
the importance module is the most significant since
the F1 score drops to 0.540 without it, thereby
confirming the effectiveness of modeling the query-
to-KB attention flow. On the flip side, the impor-
tance of modeling the KB-to-query attention flow is
confirmed by the fact that replacing the KB-aware
attention module with self-attention significantly
degrades the performance. Besides, the secondary
attention layer, the enhancing module, also con-
tributes to the overall model performance. Finally,
we find that the topic entity delexicalization strat-
egy has a big influence on the model performance
while the constraint delexicalization strategy only
marginally boosts the performance.

Figure 4: Attention heatmap generated by the reason-
ing module. Best viewed in color.

4.5 Interpretability analysis
Here, we show that our method does capture
the mutual interactions between question words



2921

KB
Aspects Questions BAMnet w/o BiAttn. BAMnet Gold Answers

Answer
Type

What degrees did Obama
get in college?

Harvard Law School,
Columbia University,
Occidental College

Bachelor of Arts,
Juris Doctor,

Political Science

Juris Doctor,
Bachelor of Arts

What music period did
Beethoven live in?

Austrian Empire,
Germany, Bonn

Classical music,
Opera

Opera,
Classical music

Answer
Path

Where did Queensland
get its name from? Australia Queen Victoria Queen Victoria

Where does Delaware
river start? Delaware Bay

West Branch
Delaware River,
Mount Jefferson

West Branch
Delaware River,
Mount Jefferson

Answer
Context

What are the major
cities in Ukraine?

Kiev, Olyka,
...

Vynohradiv, Husiatyn
Kiev Kiev

Who is running for vice president
with Barack Obama 2012? David Petraeus Joe Biden Joe Biden

Table 3: Predicted answers of BAMnet w/ and w/o bidirectional attention on the WebQuestions test set.

and KB aspects, by visualizing the attention ma-
trix AQM produced by the reasoning module.
Fig. 4 shows the attention heatmap generated for
a test question “who did location surrender to in

number ” (where “location” and “ number ”
are entity types which replace the topic entity men-
tion “France” and the constraint entity mention
“ww2”, respectively in the original question). As
we can see, the attention network successfully de-
tects the interactions between “who” and answer
type, “surrender to” and answer path, and focuses
more on those words when encoding the question.

To further examine the importance of the two-
way flow of interactions, in Table 3, we show the
predicted answers of BAMnet with and without
the two-layered bidirectional attention network on
samples questions from the WebQuestions test set.
We divide the questions into three categories based
on which kind of KB aspect is the most crucial
for answering them. As we can see, compared to
the simplified version which is not equipped with
bidirectional attention, our model is more capable
of answering all the three types of questions.

4.6 Error analysis

To better examine the limitations of our approach,
we randomly sampled 100 questions on which our
method performed poorly (i.e., with per-question
F1 score less than 0.6), and categorized the errors.
We found that around 33% of errors are due to label
issues of gold answers and are not real mistakes.
This includes incomplete and erroneous labels, and
also alternative correct answers. Constraints are
another source of errors (11%), with temporal con-
straints accounting for most. Some questions have

implicit temporal (e.g., tense) constraints which
our method does not model. A third source of er-
ror is what we term type errors (13%), for which
our method generates more answers than needed
because of poorly utilizing answer type informa-
tion. Lexical gap is another source of errors (5%).
Finally, other sources of errors (38%) include topic
entity prediction error, question ambiguity, incom-
plete answers and other miscellaneous errors.

5 Conclusions and future work

We introduced a novel and effective bidirectional at-
tentive memory network for the purpose of KBQA.
To our best knowledge, we are the first to model the
mutual interactions between questions and a KB,
which allows us to distill the information that is the
most relevant to answering the questions on both
sides of the question and KB. Experimental results
show that our method significantly outperforms
previous IR-based methods while remaining com-
petitive with hand-crafted SP-based methods. Both
ablation study and interpretability analysis verify
the effectiveness of the idea of modeling mutual
interactions. In addition, our error analysis shows
that our method actually performs better than what
the evaluation metrics indicate.

In the future, we would like to explore effec-
tive ways of modeling more complex types of con-
straints (e.g., ordinal, comparison and aggregation).

Acknowledgments

This work is supported by IBM Research AI
through the IBM AI Horizons Network. We thank
the anonymous reviewers for their constructive sug-
gestions.



2922

References
Abdalghani Abujabal, Mohamed Yahya, Mirek Riede-

wald, and Gerhard Weikum. 2017. Automated tem-
plate generation for question answering over knowl-
edge graphs. In WWW, pages 1191–1200.

Sören Auer, Christian Bizer, Georgi Kobilarov, Jens
Lehmann, Richard Cyganiak, and Zachary Ives.
2007. Dbpedia: A nucleus for a web of open data.
In The semantic web, pages 722–735. Springer.

Junwei Bao, Nan Duan, Zhao Yan, Ming Zhou, and
Tiejun Zhao. 2016. Constraint-based question an-
swering with knowledge graph. In COLING, pages
2503–2514.

Hannah Bast and Elmar Haussmann. 2015. More ac-
curate question answering on freebase. In CIKM,
pages 1431–1440. ACM.

Petr Baudis and Jan Pichl. 2016. Dataset factoid we-
bquestions. https://github.com/brmson/
dataset-factoid-webquestions.

Jonathan Berant, Andrew Chou, Roy Frostig, and Percy
Liang. 2013. Semantic parsing on freebase from
question-answer pairs. In EMNLP, pages 1533–
1544.

Jonathan Berant and Percy Liang. 2015. Imitation
learning of agenda-based semantic parsers. TACL,
3:545–558.

Antoine Bordes, Sumit Chopra, and Jason Weston.
2014a. Question answering with subgraph embed-
dings. In EMNLP, pages 615–620.

Antoine Bordes, Nicolas Usunier, Sumit Chopra, and
Jason Weston. 2015. Large-scale simple question
answering with memory networks. arXiv preprint
arXiv:1506.02075.

Antoine Bordes, Jason Weston, and Nicolas Usunier.
2014b. Open question answering with weakly super-
vised embedding models. In ECML-PKDD, pages
165–180. Springer.

Qingqing Cai and Alexander Yates. 2013. Large-scale
semantic parsing via schema matching and lexicon
extension. In ACL, pages 423–433.

Kyunghyun Cho, Bart van Merrienboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder–decoder
for statistical machine translation. In EMNLP, pages
1724–1734.

Rajarshi Das, Manzil Zaheer, Siva Reddy, and
Andrew McCallum. 2017. Question answer-
ing on knowledge bases and text using universal
schema and memory networks. arXiv preprint
arXiv:1704.08384.

Li Dong, Furu Wei, Ming Zhou, and Ke Xu.
2015. Question answering over freebase with multi-
column convolutional neural networks. In ACL-
IJCNLP, volume 1, pages 260–269.

Yansong Feng, Songfang Huang, Dongyan Zhao, et al.
2016. Hybrid question answering over knowledge
base and free text. In COLING, pages 2397–2407.

Google. 2018. Freebase data dumps. https://
developers.google.com/freebase.

Yanchao Hao, Yuanzhe Zhang, Kang Liu, Shizhu He,
Zhanyi Liu, Hua Wu, and Jun Zhao. 2017. An end-
to-end model for question answering over knowl-
edge base with cross-attention combining global
knowledge. In ACL, volume 1, pages 221–231.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian
Sun. 2016. Deep residual learning for image recog-
nition. In CVPR, pages 770–778.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Sen Hu, Lei Zou, Jeffrey Xu Yu, Haixun Wang, and
Dongyan Zhao. 2018. Answering natural language
questions by subgraph matching over knowledge
graphs. TKDE, 30(5):824–837.

Sergey Ioffe and Christian Szegedy. 2015. Batch nor-
malization: Accelerating deep network training by
reducing internal covariate shift. arXiv preprint
arXiv:1502.03167.

Sarthak Jain. 2016. Question answering over knowl-
edge base using factual memory networks. In
NAACL-HLT, pages 109–115.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Jayant Krishnamurthy and Tom M Mitchell. 2012.
Weakly supervised training of semantic parsers. In
EMNLP-CoNLL, pages 754–765.

Chen Liang, Jonathan Berant, Quoc Le, Kenneth D For-
bus, and Ni Lao. 2016. Neural symbolic machines:
Learning semantic parsers on freebase with weak su-
pervision. arXiv preprint arXiv:1611.00020.

Alexander Miller, Adam Fisch, Jesse Dodge, Amir-
Hossein Karimi, Antoine Bordes, and Jason Weston.
2016. Key-value memory networks for directly read-
ing documents. arXiv preprint arXiv:1606.03126.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word rep-
resentation. In EMNLP, pages 1532–1543.

Siva Reddy, Oscar Täckström, Michael Collins, Tom
Kwiatkowski, Dipanjan Das, Mark Steedman, and
Mirella Lapata. 2016. Transforming dependency
structures to logical forms for semantic parsing.
TACL, 4:127–140.



2923

Siva Reddy, Oscar Täckström, Slav Petrov, Mark Steed-
man, and Mirella Lapata. 2017. Universal semantic
parsing. In EMNLP, pages 89–101.

Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2016. Bidirectional attention
flow for machine comprehension. arXiv preprint
arXiv:1611.01603.

Christina Unger, Lorenz Bühmann, Jens Lehmann,
Axel-Cyrille Ngonga Ngomo, Daniel Gerber, and
Philipp Cimiano. 2012. Template-based question
answering over rdf data. In WWW, pages 639–648.
ACM.

Shuohang Wang and Jing Jiang. 2016. Machine com-
prehension using match-lstm and answer pointer.
arXiv preprint arXiv:1608.07905.

Zhenghao Wang, Shengquan Yan, Huaming Wang, and
Xuedong Huang. 2014. An overview of microsoft
deep qa system on stanford webquestions bench-
mark. Technical Report MSR-TR-2014-121, Mi-
crosoft Research.

Jason Weston, Sumit Chopra, and Antoine Bor-
des. 2014. Memory networks. arXiv preprint
arXiv:1410.3916.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. Machine learning, 8(3-4):229–256.

Yuk Wah Wong and Raymond Mooney. 2007. Learn-
ing synchronous grammars for semantic parsing
with lambda calculus. In ACL, pages 960–967.

Caiming Xiong, Victor Zhong, and Richard Socher.
2016. Dynamic coattention networks for question
answering. arXiv preprint arXiv:1611.01604.

Kun Xu, Siva Reddy, Yansong Feng, Songfang Huang,
and Dongyan Zhao. 2016. Question answering on
freebase via relation extraction and textual evidence.
arXiv preprint arXiv:1603.00957.

Kun Xu, Lingfei Wu, Zhiguo Wang, and Vadim
Sheinin. 2018a. Graph2seq: Graph to se-
quence learning with attention-based neural net-
works. arXiv preprint arXiv:1804.00823.

Kun Xu, Lingfei Wu, Zhiguo Wang, Mo Yu, Li-
wei Chen, and Vadim Sheinin. 2018b. Exploit-
ing rich syntactic information for semantic pars-
ing with graph-to-sequence model. arXiv preprint
arXiv:1808.07624.

Min-Chul Yang, Nan Duan, Ming Zhou, and Hae-
Chang Rim. 2014. Joint relational embeddings for
knowledge-based question answering. In EMNLP,
pages 645–650.

Yi Yang and Ming-Wei Chang. 2016. S-mart:
Novel tree-based structured learning algorithms ap-
plied to tweet entity linking. arXiv preprint
arXiv:1609.08075.

Xuchen Yao and Benjamin Van Durme. 2014. Infor-
mation extraction over structured data: Question an-
swering with freebase. In ACL, volume 1, pages
956–966.

Semih Yavuz, Izzeddin Gur, Yu Su, Mudhakar Srivatsa,
and Xifeng Yan. 2016. Improving semantic parsing
via answer type inference. In EMNLP, pages 149–
159.

Scott Wen-tau Yih, Ming-Wei Chang, Xiaodong He,
and Jianfeng Gao. 2015. Semantic parsing via
staged query graph generation: Question answering
with knowledge base. In ACL, pages 1321–1331.


