



















































Open-Source Platform for Language Service Sharing


Proceedings of Workshop on Language Resources, Technology and Services in the Sharing Paradigm, pages 67–74,
Chiang Mai, Thailand, November 12, 2011.

Open-Source Platform for Language Service Sharing 

 
 

Yohei Murakami, Masahiro Tanaka, 
Donghui Lin 

National Institute of Information and 
Communications Technology 

{yohei, mtnk, 
lindh}@nict.go.jp  

Toru Ishida 
Department of Social Informatics 

Kyoto University 
ishida@i.kyoto-u.ac.jp  

 
  

 

Abstract 

 

The Language Grid is an infrastructure for en-
abling users to share language services devel-
oped by language specialists and end user 
communities. Users can also create new ser-
vices to support their intercultural/multilingual 
activities by composing various language ser-
vices. In the Language Grid, there are several 
stakeholders with different incentives: service 
users, service providers, and a Language Grid 
operator. For enhancing the language service 
sharing, it is significant that the Language 
Grid can coordinate them to match their incen-
tives. However, their incentives vary with the 
operation model of the Language Grid. To 
support the various operation models, the 
Language Grid should employ not a general 
platform dealing with various types of opera-
tion models, but a customizable platform. To 
this end, we have developed an open-source 
platform consisting of two types of compo-
nents: core components and optional compo-
nents. The former assures interoperability of 
Language Grids, while the latter provides flex-
ibility of system configuration. It allows de-
velopers to extend the platform, and each op-
erator to adapt the platform to his/her opera-
tion model by selecting the components. To 
validate the customizability, we have con-
structed the private Language Grid for Wiki-
media using the same platform as public Lan-
guage Grid. 

1 Introduction 
Although there are many language resources 
(both data and programs) on the Internet (Chouk-
ri, 2004), most intercultural collaboration activi-
ties still lack multilingual support. To overcome 

language barriers, we aim to construct a novel 
language infrastructure to improve accessibility 
and usability of language resources on the Inter-
net. To this end, the Language Grid has been 
proposed (Ishida, 2006). The Language Grid 
takes a service-oriented collective intelligence 
approach to sharing language resources and cre-
ating new services to support intercultur-
al/multilingual activities by combining language 
resources.  

In previous work, many efforts have been ma-
de to combine language resources, such as UI-
MA (Ferrucci and Lally, 2004), GATE (Cun-
ningham et al., 2002), D-Spin (Boehlke, 2009), 
Hart of Gold (Callmeier et al., 2004), and 
CLARIN (Varadi et al., 2008). Their purpose is 
to analyze a large amount of text data by linguis-
tic processing pipelines. These pipelines consist 
of language resources, most of which are provid-
ed as open source by universities and research 
institutes. Users can thus collect language re-
sources and freely combine them on those 
frameworks without considering other stakehold-
ers. 

Different from the above frameworks, the pur-
pose of the Language Grid is to multilingualize 
texts for supporting intercultural collaboration by 
service workflows. PANACEA (Toral et al., 
2011) is also a project to overcome language bar-
riers by automatically acquiring, producing, up-
dating, and maintaining language resources for 
MT by service workflow. The difference of them 
is that a workflow in the Language Grid com-
bines language resources associated with com-
plex intellectual property issues. These resources 
are provided by service providers who want to 
protect their ownership, and used by service us-
ers who need a part of the resources. Therefore, 
the Language Grid must coordinate these stake-
holders’ motivations. However, their incentives 

67



vary with the operation model of the Language 
Grid. To support the various operation models, 
we proposes open-source platform that enables 
developers to implement several modules and 
Language Grid operators to adapt their platforms 
to their operation models by selecting the mod-
ules. Moreover, by connecting their platforms, 
we can enhance language service sharing among 
different platforms. 

The rest of this paper is organized as follows. 
Section 2 explains the design concept of the plat-
form considering stakeholders’ needs. Section 3 
presents system architecture to satisfy require-
ments of the design concept. Section 4 illustrates 
how to extend and customize the platform. Sec-
tion 5 introduces two types of system configura-
tions to realize a public Language Grid and a 
private Language Grid. To validate the customi-
zability, we show the case study of constructing 
the Language Grid for Wikimedia in Section 6. 

2 Design Concept 
The purpose of Language Grid is to accumulate 
language services and compose them. To realize 
Language Grid, system architecture should be 
designed to satisfy requirements of different op-
eration models. Therefore, this section summa-
rizes requirements of each of the operation mod-
els, and clarifies the required functions of Lan-
guage Grid. 

2.1 Requirements 
Language Grid operators require flexibility of 
system configuration so that they can adapt the 
configuration to their two types of operation 
models: public Language Grid and private Lan-
guage Grid. The former model is more open than 
the latter one. Every stakeholder is different or-
ganization in the public one, while an operator 
operates Language Grid for his/her use in the 
private one. For example, an operator operates a 
private Language Grid on a single cluster of ma-
chines and deploys on the cluster services, the 
provision policies of which are relaxed. Mean-
while, another operator operates a public Lan-
guage Grid in a distributed environment by de-
ploying services on each provider’s server be-
cause the provision policies of the services are 
too strict. In the former case, the operator places 
high priority on performance of services. In the 
latter case, the other operator puts priority on 
resource security. Further, both of them may 
want to expand available services by allowing 

their users to access services on other Language 
Grids. 

2.2 Functions 
The Language Grid platform should provide the 
following functions extracted from the require-
ments in the previous subsection. 
1. Modularization of system components: 

Language Grid operators can change im-
plementations of each component in Lan-
guage Grid platform in order to build their 
own Language Grids compliant with their 
operation models. In particular, it is neces-
sary to switch communication components 
so that they can operate the platform both 
in a centralized environment and a distrib-
uted environment. The platform combines 
implementations of each component based 
on a configuration file defined by operators. 

2. Language Grid composition: Language 
Grid operators can compose several Lan-
guage Grids in order to increase the number 
of language services. The Language Grid 
platform realizes information sharing 
among Language Grids, and service invo-
cation across Language Grids. 

In designing the Language Grid architecture 
that provides the above functions, there are sev-
eral technical constraints. For example, the archi-
tecture should be independent of service inter-
faces because language service interfaces vary 
depending on operators. In addition, the architec-
ture should be independent of specifications of 
service invocations because there are several 
such specifications over HTTP, such as SOAP, 
REST, JSON, and Protocol Buffers. Moreover, it 
is necessary to distribute the platform to handle 
physically distributed services if the services are 
deployed on their providers’ severs. In the next 
section, we explain the system architecture of the 
Language Grid platform considering these con-
straints. 

3 System Architecture 
3.1 Overview 
The Language Grid architecture consists of six 
parts: Service Manager, Service Supervisor, Grid 
Composer, Service Database, Composite Service 
Container, and Atomic Service Container. Figure 
1 (a) focuses on the first four parts, and Figure 1 
(b) focuses on the last two parts. 

 

68



 
Figure 1. Language Grid Architecture 
 

The Service Manager manages domain definition, 
grid information, node information, user infor-
mation, service information and resource infor-
mation registered in Language Grid. The service 
information includes access control settings and 
access logs. Since the information is registered 
through the Service Manager, it plays a front-end 
role for any functions other than service invoca-
tion. The Service Supervisor controls service in-
vocations according to the requirements of the 
service providers. Before invoking the services 
on the Composite Service Container and Atomic 
Service Container, it validates whether the re-
quest satisfies providers’ policies. The Grid 
Composer connects its Language Grid to other 
Language Grids to realize Language Grid com-
position for operators. The connection target is 
set through the Service Manager. The Service 
Database is a repository to store various types of 
information registered through the Service Man-
ager and service invocation logs. The Composite 
Service Container provides composite service 
deployment, composite service execution, and 
dynamic service binding so that service users can 
customize services. The Atomic Service Contain-

er provides several utilities that service providers 
need in deploying atomic services.  

In the remaining parts of this section, we 
provide the details of the Service Manager, Ser-
vice Supervisor, Grid Composer, and Compo-
site/Atomic Service Container. 

3.2 Service Manager 
The Service Manager consists of components 
managing various types of information necessary 
for Language Grid, such as domain definition, 
and grid, node, resource, service, and user infor-
mation. 

The Domain Management handles a domain 
definition that defines language service types, 
standard interfaces of language services, and at-
tributes of language service profiles. 

The Grid Management sets a target Language 
Grid connected by the Grid Composer. Based on 
the settings, the Grid Composer determines 
available services on other Language Grids. The 
Node Management handles information of nodes 
constituting its Language Grid and the connected 
Language Grid. Based on this information, the 
Grid Composer decides whether to save infor-
mation registered on other nodes, and whether to 
distribute information to other nodes. 

The Resource Management and Service Man-
agement handle language resource and language 
service information registered on Language Grid 
and the connected Language Grid. The infor-
mation includes access control settings, service 
endpoints, intellectual properties associated with 
the language resources, and access logs. Based 
on this information, the Service Supervisor vali-
dates service invocation, locates service end-
points, and attaches intellectual property infor-
mation to service responses. 

Finally, the User Management manages user 
information registered on Language Grid. Based 
on this information, the Service Supervisor au-
thenticates users’ service requests. 

3.3 Service Supervisor 
The Service Supervisor controls service invoca-
tion by service users. The control covers access 
control, endpoint locating, load balancing, and 
access logging. To realize architecture inde-
pendent of service specifications such as SOAP 
and REST, the Service Supervisor conducts such 
service invocation control based on an HTTP 
header.  

The User Request Handler extracts infor-
mation necessary to invoke a service from the 
service request over HTTP, and then authenti-

Service	  Database

Service	  Manager
Service	  Management	  

Interface

Service	  Supervisor

Invocation	  Processor

Intra-­‐Grid	  Executor

Web	  UI

Composite	  
Service

Container

Atomic	  
Service
Container

Application	  System

Resources

Web	  Browser

Access	  
Control

Access	  
Logging

SOAP	  API	  

HTTP
Invoker

U
ser

M
anagem

ent
Service

M
anagem

ent
Resource

M
anagem

ent
N
ode

M
anagem

ent
G
rid

M
anagem

ent
Dom

ain
M
anagem

ent

(a)

Domain	  Definition Profile	  Repository
Access	  Log

Java
Method	  
Invoker

User	  Request	  Handler

HTTP	  Request	  Handler Java	  Method	  Handler

Grid	  Composer
Inter-­‐Grid	  Data	  AccessIntra-­‐Grid	  Data	  Access

PostgreSQL
Data Access

Other	  
Service	  
Grid

JXTA	  
Data	  Access

Inter-­‐Grid	  Executor

HTTP	  Invoker

Profile	  Database
(Flexible)

Profile	  List
(Fixed)Definition	  Database

File	  
Access

Composite	  Service	  Container
Service	  

Component	  
Executor

Service	  DecoratorService	  Request	  
Handler

Service	  Workflow	  
Executor

ProtocolBuffers
RPC Handler

Thread	  Control	  
Decorator

Result	  Filter	  
Decorator

Axis	  SOAP	  
(RPC/ENC)	  Handler

BPEL	  Engine Axis	  SOAP	  
(RPC/ENC)	  
Invoker

ProtocolBuffers
RPC	  Invoker

Java	  Method	  
Invoker

Service	  Container	  Framework

Java-­‐Coded	  
Workflow

Java	  Method
Handler

Resources

Atomic	  Service	  Container
Service	  DecoratorService	  Request	  

Handler
Service	  Wrapper	  

Executor

ProtocolBuffers	  
RPC Handler

Thread	  Control	  
Decorator

Result	  Filter	  
Decorator

Axis	  SOAP	  
(RPC/ENC)	  Handler

Java-­‐Coded	  
Wrapper

Service	  Container	  Framework

Java	  Method
Handler

Program

Data

Application
System

JavaScript	  Engine

Parameter	  
Validation	  Decorator

Parameter	  
Validation	  Decorator

WS-­‐BPEL	  Workflow

JavaScript	  Workflow

HTTP SOAP P2P	  sharingprotocol
Protocol
Buffers

Java	  method
invocation

(b)

Other
protocols

Service
Supervisor

…

…

… … …

…

… … … …

… …

…

…

69



cates the requester. The extracted information is 
sent to the Invocation Processor. Using the in-
formation, the Invocation Processor executes a 
sequence of pre-process, service invocation, 
post-process, and logging process. The access 
control is implemented as the pre-process, or the 
post-process. 

After passing the access control, the Intra-
Grid Executor invokes the service within its 
Language Grid. To invoke the service, the Intra-
Grid Executor locates the service endpoint using 
the service ID. If there are multiple endpoints 
associated with the service ID, it chooses the 
endpoint with the lowest load. Finally, it invokes 
the service using Java Method Invoker imple-
mentation or HTTP Invoker implementation, 
which are selected according to the endpoint lo-
cation. 

3.4 Grid Composer 
The Grid Composer not only creates a P2P grid 
network within its Language Grid, but also con-
nects to other Language Grids. The former is 
needed to improve latency if the services are 
physically distributed. The latter is necessary to 
realize composition of Language Grids operated 
by different operators. 

The Intra-Grid Data Access provides 
read/write interfaces for the Service Database 
within its Language Grid. In writing data, the 
Intra-Grid Data Access broadcasts the data to 
other nodes using a P2P network framework so 
that it can share the data with other nodes in the 
same Language Grid. As a result, service users 
can improve latency by sending their requests to 
a node located near the service. In this way, us-
age of the P2P network framework contributes to 
scalability of Language Grid. 

On the other hand, the Inter-Grid Data Access 
shares various types of information with other 
Language Grids. The Inter-Grid Data Access 
also uses the P2P network to share information 
with other nodes across Language Grids. How-
ever, based on grid information registered 
through the Service Manager, the Inter-Grid 
Data Access saves only information related to 
the connected Language Grids. 

The Inter-Grid Executor invokes services reg-
istered on a different Language Grid. To invoke 
a service across Language Grids, it replaces a 
requester’s ID with the operator’s user ID be-
cause the different Language Grid does not store 
user information of the requester, but rather of 
the operator as a Language Grid user. In addition, 
to control access to the services on a different 

Language Grid, the Inter-Grid Executor inserts 
the user ID of the requester into the request in 
invoking the service. By separating Language 
Grid that performs user authentication from the 
different Language Grid that performs access 
control, the two Language Grids do not have to 
share users’ passwords. 

3.5 Service Container 
The Service Container executes composite ser-
vices and atomic services. The Composite Ser-
vice Container that executes composite services 
provides service workflow deployment and exe-
cution, and dynamic service binding. The Atomic 
Service Container that executes atomic services 
wraps language resources of service providers as 
language services with standard interfaces. 

The Service Request Handler has multiple im-
plementations according to service invocation 
protocols. If the Service Container is deployed 
on the same server as the Service Supervisor, the 
Java Method Handler implementation can be 
selected. When receiving a service request, the 
Service Request Handler receives from the Ser-
vice Container Framework a chain of Service 
Decorator, Service Workflow/Wrapper Executor, 
and Service Component Executor, and executes 
the chain.  

In invoking a component service of a compo-
site service, the Service Workflow Executor can 
select a concrete service based on binding infor-
mation included in a service request. This dy-
namic service binding is realized because lan-
guage service interfaces are standardized. 

4 Open Source Customization 
The stakeholders’ incentives vary depending on 
the operation model of Language Grid. If a Lan-
guage Grid operator operates a public Language 
Grid, the operator promotes various users to join 
the Language Grid and most service providers 
may demand intellectual property protection. To 
satisfy these requirements, services are deployed 
on providers’ servers and the Language Grid 
platform should provide access control functions. 
That is, priority is placed on security of resources. 
On the other hand, if a Language Grid operator 
operates a private Language Grid, the operator 
may gather language resources published under 
open source license to reduce the operation cost. 
To this end, services are aggregated and de-
ployed on a cluster of machines, and the Lan-
guage Grid platform does not have to provide 

70



user authentication and access control. That is, 
priority is placed on service performance. 

Thus, the types of stakeholders rely on Lan-
guage Grid operators. This implies that it is im-
possible to develop a general platform dealing 
with various types of operation models before-
hand. Therefore, we selected open-source style 
customization so that each operator can adapt the 
platform to his/her operation model. 

We have published the source codes of the 
Language Grid platform under an LGPL license 
and begun an open source project wherein each 
operator can freely customize the platform. In the 
project, the source codes are classified into a 
core component and optional component with 
different development policies because unregu-
lated derivatives prevent interoperability of Lan-
guage Grids. The specifications of core compo-
nents are decided by core members in the open 
source community. On the other hand, the speci-
fications of optional components can be freely 
changed by developers in the open source project, 
and derivatives can be created. This classifica-
tion is done to improve the interoperability of 
Language Grids. As shown in Figure 1, the core 
components are thick-frame rectangles, and op-
tional components thin-frame ones. In nested 
rectangles, outside ones are APIs and in-side 
ones are their implementations. These implemen-
tations can be changed.  

The Intra-Grid Data Access, Inter-Grid Data 
Access, Intra-grid Service Executor, and Inter-
Grid Service Executor are core components be-
cause they are used to communicate with other 
Language Grids, and they share information with 
other Language Grids. In addition to this, Service 
Decorator, Service Workflow/Wrapper Executor, 
Service Component Executor, and Service Con-
tainer Framework in Composite/Atomic Service 
Container are also core components because the 
implementations of the components are inter-
leaved in atomic services or composite services 
by the Service Container Framework. On the 
other hand, the Service Supervisor and Service 
Manager are optional components so that opera-
tors can extend them according to their operation 
model, because their functions are used only 
within the single Language Grid. 

5 Configuration of the Language Grid 
In this section, we introduce the system configu-
ration of a public Language Grid and private 
Language Grid. In the public Language Grid, 
third parties are expected to join it and every 

stakeholder is different from the operator. In the 
private Language Grid, the operator uses lan-
guage services for its private use. The operator 
often employs language resources published un-
der open source license to reduce the operation 
cost and increase the performance. Moreover, the 
operator of the private Language Grid may con-
nect the private Language Grid with a public 
Language Grid in order to use more language 
services on the private Language Grid. 

5.1 Public Language Grid 
The Department of Social Informatics in Kyoto 
University operates a public Language Grid. 
Service providers may have several provision 
policies to protect their language resources. 
Therefore, the Language Grid prefers security of 
language resources to performance of language 
services. For this reason, the Language Grid ena-
bles service providers to protect their resources 
on their servers, and therefore should coordinate 
the resources deployed on the providers’ servers. 
To realize these functions on the Language Grid, 
we construct it with two different types of server 
nodes: the service node and core node. 

The service node provides only atomic ser-
vices by deploying service wrappers to standard-
ize interfaces of language resources. The service 
nodes are distributed to their service providers. 
On the other hand, the core node controls access 
to services and composes services. Moreover, it 
communicates with other core nodes in other 
Language Grids to realize federated operation of 
the Language Grid. 

 

 
Figure 2. System Configuration of Public Lan-
guage Grid 
 

To instantiate the service node and core node, 
the Language Grid is configured as shown in 
Figure 2. The components surrounded by gray 
lines in the figure are deployed on the same serv-

Service	  Database

Service	  Manager
Service	  Management	  

Interface

Service	  Supervisor

Invocation	  Processor

Intra-­‐Grid	  Executor

Web	  UI

Composite	  
Service

Container

Atomic	  
Service

Container

Application	  System

Resources

Web	  Browser

Access	  
Control

Access	  
Logging

SOAP	  API	  

HTTP	  Invoker

U
ser

M
anagem

ent
Service

M
anagem

ent
Resource

M
anagem

ent
N

ode
M

anagem
ent

G
rid

M
anagem

ent
Dom

ain
M

anagem
ent

Domain	  Definition Profile	  Repository
Access	  Log

User	  Request	  Handler

HTTP	  Request	  Handler

Grid	  Composer
Inter-­‐Grid	  Data	  AccessIntra-­‐Grid	  Data	  Access

PostgreSQL Data	  Access
Other	  
Service	  
Grid

JXTA Data	  Access
Inter-­‐Grid	  Executor

HTTP	  Invoker

Profile	  Database
(Flexible)

Definition	  
Database

HTTP SOAP P2P	  sharingprotocol
Protocol
Buffers

Other
protocols

71



er. The server on which the Service Manager, 
Service Supervisor, Composite Service Container, 
Grid Composer, and Service Database are de-
ployed is called the core node, while that on 
which the Atomic Service Container is deployed 
is called the service node. This system configura-
tion employs an HTTP invoker as the Intra-Grid 
Executor to communicate with language services 
on the Atomic Service Container physically dis-
tributed. Furthermore, the core node includes the 
Inter-Grid Data Access to share language ser-
vices with other Language Grids and the Inter-
Grid Executor to invoke language services on 
other Language Grids. 

5.2 Private Language Grid 
Unlike the system configuration of the public 
Language Grid, a private Language Grid priori-
tizing performance of language services is some-
times required.  

 
Figure 3. System Configuration of Private Lan-
guage Grid 
 

Figure 3 shows the system configuration of 
private Language Grid to satisfy the operator 
preferring performance and simplicity. The sys-
tem configuration excludes the Service Manager, 
Access Control, and Access Logging components 
because the private Language Grid handles only 
language services associated with simple licenses. 
The Inter-Grid Data Access and Inter-Grid Ex-
ecutor are also removed if necessary language 
services can be aggregated into a single location. 
Moreover, the system configuration employs 
Java method invocation for communication be-
tween the Service Supervisor and Compo-
site/Atomic Service Container to improve the 
latency of communication. 

6 Case Study: Multilingual Environ-
ment for Wikimedia 

In the case of employing a Language Grid to 
multilingualize Wikipedia, one of Wikimedia 
projects, by supporting multilingual discussion 
for Wikipedia translation community, the per-
formance of language services should be given 
higher priority due to the huge amount of articles 
and users. Furthermore, the smaller the code size 
of the platform is, the more the Wikipedia opera-
tor likes it due to the low maintenance cost. We 
designed multilingual environment for Wiki-
media considering technical requirements of the 
existing Wikimedia systems. 

6.1 Technical Requirements 
Numerous MediaWiki Extensions are available 
to add new features or enhance the functionality 
of the MediaWiki software from the users’ point 
of view. Our goal in the development was that 
the actual Wikipedia community, which has a 
great number of users internationally, would ac-
cept the multilingual support system. From a 
technical point of view, as in any system devel-
opment project, there are some technical re-
quirements raised by the open-source community. 

The first one is performance. Because Wiki-
media projects such as Wikipedia are viewed by 
a great number of people every day, in particular 
a short response time is one of the very critical 
elements of the system design. 

The second is usability. MediaWiki has its 
own look and feel, which should be consistent 
throughout any other MediaWiki extensions. 
Since Wikimedia projects are viewed by a varie-
ty of people of different age and computer skill, 
usability is one of the key elements to attract us-
ers. 

Lastly, neutrality and independence is im-
portant for the Wikipedia community. The com-
munity does not depend too much on specific 
vendors, services or influence of third parties, 
but employs open source software and services. 

6.2 System Design 
Figure 4 shows the system architecture of multi-
lingual environment using the Language Grid for 
Wikimedia. From the software point of view, the 
architecture consists of MediaWiki, the Lan-
guage Grid for Wikimedia, the Language Grid 
Extension and Multilingual LiquidThreads Ex-
tension.  

In order to develop a multilingual support sys-
tem for Wikipedia discussion, we have intro-

Service	  Database

Service	  Supervisor

Invocation	  Processor

Intra-­‐Grid	  Executor

Composite	  
Service

Container

Atomic	  
Service

Container

Application	  System

Resources

Profile	  Repository

Java	  Method	  Invoker

User	  Request	  Handler

HTTP	  Request	  Handler Java	  Method	  Handler

Grid	  Composer
Intra-­‐Grid	  Data	  Access

Profile	  List	  (Fixed)

File Access

Protocol
Buffers

Java	  method
invocation

Other
protocols

72



duced a private Language Grid, called Language 
Grid for Wikimedia. This employs the same sys-
tem configuration as Figure 3 to prioritize per-
formance and maintainability described in the 
first technical requirement. Wikimedia adminis-
trator operates the private Language Grid and 
aggregates several language services provided by 
volunteers for Wikimedia such as Microsoft and 
Google. Locating the Language Grid between 
MediaWiki and language services, we have pre-
vented strong dependency to the language ser-
vices described in the third technical requirement. 
Since the Language Grid is a multilingual service 
infrastructure, the Language Grid services should 
allow access via Language Grid Extension by 
any other MediaWiki extensions for general pur-
poses. By unifying the access to the Language 
Grid, MediaWiki extensions can employ lan-
guage services by invoking PHP function on the 
Language Grid Extension same as other Me-
diaWiki extensions. This allows MediaWiki de-
velopers to use language services with Me-
diaWiki’s look and feel, as described in the 
second technical requirement. 

 

 
Figure 4. Multilingual Environment for Wiki-
media 
 

7 Conclusion 
In this paper, we have proposed open source 
platform to share and compose services while 
satisfying various stakeholders’ needs. This plat-
form allows an operator to operate two types of 
Language Grid: private Language Grid and pub-
lic Language Grid. The former prioritizes per-
formance and maintainability, while the latter 
prioritizes intellectual property management. 
Moreover, combination of two types of Lan-
guage Grid can complement language services 
on the private Language Grid with language ser-
vices on the public Language Grid. 

This diversity and interoperability of Lan-
guage Grids are realized by classifying system 
architecture of Language Grid into two types of 
components: core components that guarantee the 
interoperability and optional components that 
provide alternative implementations. An open 
source project of Language Grid is expected to 
accelerate the diversity of Language Grid and 
produce other types of operation models of Lan-
guage Grid. 

 
Acknowledgments 
We acknowledge the considerable support of 
National Institute of Information and Communi-
cations Technology, and Department of Social 
Informatics, Kyoto University. A part of this 
work was supported by Strategic Information and 
Communications R&D Promotion Programme 
from Ministry of Internal Affairs. 

References  
Volker Boehlke. 2009. A prototype infrastructure for 

D-spin-services based on a flexible multilayer ar-
chitecture. Text Mining Services Conference 
(TMS’09) 

Ulrich Callmeier, Andreas Eisele, Ulrich Schäfer, 
Melanie Siegel. 2004. The Deep Thought core ar-
chitecture frame-work. The Fourth International 
Conference on Language Resources and Evaluation 
(LREC’04): 1205-1208. 

Khalid Choukri. 2004. European Language Resources 
Association history and recent developments. 
SCALLA Working Conference KC 14/20. 

Hamish Cunningham, Diana Maynard, Kalina Bon-
techeva, Valentin Tablan. 2002. GATE: an archi-
tecture for devel-opment of robust HLT applica-
tions. The Fortieth Annual Meeting of the Associa-
tion for Computational Linguistics (ACL’02): 168-
175. 

David Ferrucci, Adam Lally. 2004. UIMA: an archi-
tectural approach to unstructured information pro-
cessing in the corporate research environment. 
Journal of Natural Language Engineering 10: 327-
348. 

Toru Ishida. 2006. Language Grid: an infrastructure 
for intercultural collaboration. The IEEE/IPSJ 
Symposium on Applications and the Internet 
(SAINT’06): 96-100. 

Antonio Toral, Pavel Pecina, Andy Way, Marc Poch. 
2011. Towards a User-Friendly Webservice Archi-
tecture for Statistical Machine Translation in the 
PANACEA project. The 15th Conference of the Eu-
ropean Association for Machine Translation 
(EAMT’11): 63-70. 

73



Varadi T, Krauwer S,Wittenburg P, Wynne M, 
Koskenniemi K. 2008. CLARIN: common lan-
guage resources and technology infrastructure. The 
Sixth International Conference on Lan-guage Re-
sources and Evaluation (LREC’08): 1244-1248. 

 

74


