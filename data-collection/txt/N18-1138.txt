



















































SHAPED: Shared-Private Encoder-Decoder for Text Style Adaptation


Proceedings of NAACL-HLT 2018, pages 1528–1538
New Orleans, Louisiana, June 1 - 6, 2018. c©2018 Association for Computational Linguistics

SHAPED: Shared-Private Encoder-Decoder for Text Style Adaptation

Ye Zhang∗
UT Austin

yezhang@utexas.edu

Nan Ding Radu Soricut
Google AI

{dingnan,rsoricut}@google.com

Abstract

Supervised training of abstractive language
generation models results in learning condi-
tional probabilities over language sequences
based on the supervised training signal. When
the training signal contains a variety of writ-
ing styles, such models may end up learn-
ing an ’average’ style that is directly influ-
enced by the training data make-up and can-
not be controlled by the needs of an applica-
tion. We describe a family of model archi-
tectures capable of capturing both generic lan-
guage characteristics via shared model param-
eters, as well as particular style characteristics
via private model parameters. Such models
are able to generate language according to a
specific learned style, while still taking advan-
tage of their power to model generic language
phenomena. Furthermore, we describe an ex-
tension that uses a mixture of output distribu-
tions from all learned styles to perform on-the-
fly style adaptation based on the textual input
alone. Experimentally, we find that the pro-
posed models consistently outperform models
that encapsulate single-style or average-style
language generation capabilities.

1 Introduction

Encoder-decoder models have recently pushed
forward the state-of-the-art performance on a va-
riety of language generation tasks, including ma-
chine translation (Bahdanau et al., 2015; Wu et al.,
2016; Vaswani et al., 2017), text summariza-
tion (Rush et al., 2015; Nallapati et al., 2016; See
et al., 2017), dialog systems (Li et al., 2016; As-
ghar et al., 2017), and image captioning (Xu et al.,
2015; Ranzato et al., 2015; Liu et al., 2017). This
framework consists of an encoder that reads the
input data and encodes it as a sequence of vectors,
which is in turn used by a decoder to generate an-

∗Work done as an intern at Google AI.

other sequence of vectors used to produce output
symbols step by step.

The prevalent approach to training such a model
is to update all the model parameters using all
the examples in the training data (over multiple
epochs). This is a reasonable approach, under the
assumption that we are modeling a single underly-
ing distribution in the data. However, in many ap-
plications and for many natural language datasets,
there exist multiple underlying distributions, char-
acterizing a variety of language styles. For in-
stance, the widely-used Gigaword dataset (Graff
and Cieri, 2003) consists of a collection of arti-
cles written by various publishers (The New York
Times, Agence France Presse, Xinhua News, etc.),
each with its own style characteristics. Training a
model’s parameters on all the training examples
results in an averaging effect across style charac-
teristics, which may lower the quality of the out-
puts; additionally, this averaging effect may be
completely undesirable for applications that re-
quire a level of control over the output style. At
the opposite end of the spectrum, one can choose
to train one independent model per each underly-
ing distribution (assuming we have the appropri-
ate signals for identifying them at training time).
This approach misses the opportunity to exploit
common properties shared by these distributions
(e.g., generic characteristics of a language, such as
noun-adjective position), and leads to models that
are under-trained due to limited data availability
per distribution.

In order to address these issues, we propose a
novel neural architecture called SHAPED (shared-
private encoder-decoder). This architecture has
both shared encoder/decoder parameters that are
updated based on all the training examples, as well
as private encoder/decoder parameters that are up-
dated using only examples from their correspond-
ing underlying training distributions. In addition

1528



to learning different parametrization between the
shared model and the private models, we jointly
learn a classifier to estimate the probability of each
example belonging to each of the underlying train-
ing distributions. In such a setting, the shared
parameters (’shared model’) are expected to learn
characteristics shared by the entire set of training
examples (i.e., language generic), whereas each
private parameter set (’private model’) learns par-
ticular characteristics (i.e., style specific) of their
corresponding training distribution. At the same
time, the classifier is expected to learn a probabil-
ity distribution over the labels used to identify the
underlying distributions present in the input data.
At test time, there are two possible scenarios. In
the first one, the input signal explicitly contains in-
formation about the underlying distribution (e.g.,
the publisher’s identity). In this case, we feed
the data into the shared model and also the cor-
responding private model, and perform sequence
generation based on a concatenation of their vec-
tor outputs; we refer to this model as the SHAPED
model. In a second scenario, the information about
the underlying distribution is either not available,
or it refers to a distribution that was not seen dur-
ing training. In this case, we feed the data into
the shared model and all the private models; the
output distribution of the symbols of the decoding
sequence is estimated using a mixture of distribu-
tions from all the decoders, weighted according to
the classifier’s estimates for that particular exam-
ple; we refer to this model as the Mix-SHAPED
model.

We test our models on the headline-generation
task based on the aforementioned Gigaword
dataset. When the publisher’s identity is presented
as part of the input, we show that the SHAPED
model significantly surpasses the performance of
the shared encoder-decoder baseline, as well as
the performance of private models (where one in-
dividual, per-publisher model is trained for each
in-domain style). When the publisher’s identity
is not presented as part of the input (i.e., not pre-
sented at run-time but revealed at evaluation-time
for measurement purposes), we show that the Mix-
SHAPED model exhibits a high level of classifi-
cation accuracy based on textual inputs alone (ac-
curacy percentage in the 80s overall, varying by
individual publisher), while its generation accu-
racy still surpasses the performance of the base-
line models. Finally, when the publisher’s identity

is unknown to the model (i.e., a publisher that was
not part of the training dataset), we show that the
Mix-SHAPED model performance far surpasses
the shared model performance, due to the ability
of the Mix-SHAPED model to perform on-the-fly
adaptation of output style. This feat comes from
our model’s ability to perform two distinct tasks:
match the incoming, previously-unseen input style
to existing styles learned at training time, and use
the correlations learned at training time between
input and output style characteristics to generate
style-appropriate token sequences.

2 Related Work

Encoder-Decoder Models for Structured
Output Prediction

Encoder-decoder architectures have been success-
fully applied to a variety of structure prediction
tasks recently. Tasks for which such architec-
tures have achieved state-of-the-art results include
machine translation (Bahdanau et al., 2015; Wu
et al., 2016; Vaswani et al., 2017), automatic text
summarization (Rush et al., 2015; Chopra et al.,
2016; Nallapati et al., 2016; Paulus et al., 2017;
Nema et al., 2017), sentence simplification (Filip-
pova et al., 2015; Zhang and Lapata, 2017), dia-
log systems (Li et al., 2016, 2017; Asghar et al.,
2017), image captioning (Vinyals et al., 2015; Xu
et al., 2015; Ranzato et al., 2015; Liu et al., 2017),
etc. By far the most used implementation of such
architectures is based on the original sequence-
to-sequence model (Sutskever et al., 2014), aug-
mented with its attention-based extension (Bah-
danau et al., 2015). Although our SHAPED and
Mix-SHAPED model formulations do not depend
on a particular architecture implementation, we do
make use of the (Bahdanau et al., 2015) model to
instantiate our models.

Domain Adaptation for Neural Network
Models

One general approach to domain adaptation for
natural language tasks is to perform data/feature
augmentation that represents inputs as both gen-
eral and domain-dependent data, as originally pro-
posed in (Daumé III, 2009), and ported to neural
models in (Kim et al., 2016). For computer vision
tasks, a line of work related to our approach has
been proposed by Bousmalis et al. (2016) using
what they call domain separation networks. As a
tool for studying unsupervised domain adaptation

1529



for image recognition tasks, their proposal uses
CNNs for encoding an image into a feature rep-
resentation, and also for reconstructing the input
sample. It also makes use of a private encoder
for each domain, and a shared encoder for both
the source and the target domain. The approach
we take in this paper shares this idea of model
parametrization according to the domain/style, but
goes further with the Mix-SHAPED model, per-
forming on-the-fly adaptation of the model out-
puts. Other CNN-based domain adaptation meth-
ods for object recognition tasks are presented
in (Long et al., 2016; Chopra et al., 2013; Tzeng
et al., 2015; Sener et al., 2016).

For NLP tasks, Peng and Dredze (2017) take a
multi-task approach to domain adaptation and se-
quence tagging. They use a shared encoder to rep-
resent instances from all of the domains, and use a
domain projection layer to project the shared layer
into a domain-specific space. They only consider
the supervised domain-adaptation case, in which
labeled training data exists for the target domain.
Glorot et al. (2011) use auto-encoders for learn-
ing a high-level feature extraction across domains
for sentiment analysis, while Zhou et al. (2016)
employ auto-encoders to directly transfer the ex-
amples across different domains also for the same
sentiment analysis task. Hua and Wang (2017)
perform an experimental analysis on domain adap-
tation for neural abstractive summarization.

An important requirement of all the methods in
the related work described above is that they re-
quire access to the (unlabeled) target domain data,
in order to learn a domain-invariant representa-
tion across source and target domains. In contrast,
our Mix-SHAPED model does not need access to
a target domain or style at training time, and in-
stead performs the adaptation on-the-fly, accord-
ing to the specifics of the input data and the corre-
lations learned at training time between available
input and output style characteristics. As such, it
is a more general approach, which allows adapta-
tion for a much larger set of target styles, under the
weaker assumption that there exists one or more
styles present in the training data that can act as
representative underlying distributions.

3 Model Architecture

Generally speaking, a standard encoder-decoder
model has two components: an encoder that
takes as input a sequence of symbols x =

(x1, x2, ..., xTx) and encodes them into a set of
vectors H = (h1, h2, ..., hTx),

H = fenc(x), (1)

where fenc is the computation unit in the encoder;
and, a decoder that generates output symbols at
each time stamp t, conditioned on H as well as
the decoder inputs y1:t−1,

st = fdec(y1:t−1,H), (2)

where fdec is the computation unit in the de-
coder. Instantiations of this framework in-
clude the widely-used attention-based sequence-
to-sequence model (Bahdanau et al., 2015), in
which fenc and fdec are implemented by an RNN
architecture using LSTM (Hochreiter and Schmid-
huber, 1997) or GRU (Chung et al., 2014) units. A
more recent instantiation of this architecture is the
Transformer model (Vaswani et al., 2017), built
using self-attention layers.

3.1 SHAPED: Shared-private
encoder-decoder

The abstract encoder-decoder model described
above is usually trained over all examples in the
training data. We call such a model a shared
encoder-decoder model, because the model pa-
rameters are shared across all training and test
instances. Formally, the shared encoder-decoder
consists of the computation units fsenc and f

s
dec.

Given an instance x, it generates a sequence of
vectors Ss = (ss1, ...s

s
T ) by:

Hs = fsenc(x), s
s
t = f

s
dec(y1:t−1,H

s). (3)

The drawback of the shared encoder-decoder is
that it fails to account for particular properties of
each style that may be present in the data. In
order to capture such particular style characteris-
tics, a straightforward solution is to train a pri-
vate model for each style. Assuming a style set
D = {D1, D2..., D|D|}, such a solution implies
that each style has its own private encoder com-
putation unit and decoder computation unit. At
both training and testing time, each private en-
coder and decoder only process instances that be-
long to their own style. Given an instance along
with its style (x, z) where z ∈ {1, . . . , |D|}, the
private encoder-decoder generates a sequence of
vectors Sz = (sz1, ...s

z
T ) by:

Hz = fzenc(x), s
z
t = f

z
dec(y1:t−1,H

z). (4)

1530



 D1

  D2

Figure 1: Illustration of the SHAPED model using
two stylesD1 andD2. D1 articles pass through the
private encoder f1enc and decoder f

1
dec. D2 articles

pass through the private encoder f2enc and decoder
f2dec. Both of them also go through the shared en-
coder fsdec and decoder f

s
dec.

Although the private encoder/decoder models do
preserve style characteristics, they fail to take
into account the common language features shared
across styles. Furthermore, since each style is rep-
resented by a subset of the entire training set, such
private models may end up as under-trained, due
to limited number of available data examples.

In order to efficiently capture both common and
unique features of data with different styles, we
propose the SHAPED model. In the SHAPED
model, each data-point goes through both the
shared encoder-decoder and its corresponding pri-
vate encoder-decoder. At each step of the decoder,
the output from private and shared ones are con-
catenated to form a new vector:

srzt = [s
z
t , s

s
t ], (5)

that contains both private features for style z and
shared features induced from other styles, as il-
lustrated in Fig 1. The output symbol distribution
over tokens ot ∈ V (where V is the output vocab-
ulary) at step t is given by:

p(ot|x, y1:t−1, z) = Softmax(g(srzt )), (6)

where g is a multi-layer feed-forward
network that maps srzt to a vector of
size |V |. Given N training examples
(x(1),y(1), z(1)), . . . , (x(N),y(N), z(N)), the
conditional probability of the output y(i) given

article x(i) and its style z(i) ∈ {1, . . . , |D|} is:

p(y(i)|x(i), z(i)) =
∏

t

p(ot = y
(i)
t |x(i),y

(i)
1:t−1, z

(i)).

(7)
At inference time, given an article x with style z,
we feed x into f senc, f

s
dec, f

z
enc, f

z
dec (Eq. 3-4) and

obtain symbol distributions at each step t using
Eq. 6. We sample from the distribution and obtain
a symbol ot which will be used as the estimated yt
and fed to the next steps.

3.2 The Mix-SHAPED Model
One limitation of the above model is that it can
only handle test data containing an explicit style
label from D = {D1, D2..., D|D|}. However, there
is frequently the case that, at test time, the style
label is not present as part of the input, or that the
input style is not part of the modeled set D.

We treat both of these cases similarly, as a case
of modeling an unknown style. We first describe
our treatment of such a case at run-time. We use
a latent random variable z ∈ {1, . . . , |D|} to de-
note the underlying style of a given input. When
generating a token at step t, the output token dis-
tribution takes the form of a mixture of SHAPED
(Mix-SHAPED) model outputs:

p(ot|x,y1:t−1) =
|D|∑

d=1

p(ot|x,y1:t−1, z = d)p(z = d|x),
(8)

where p(ot|x,y1:t−1, z = d) is the output symbol
distribution of SHAPED decoder d, evaluated as
in Eq. 6. Fig. 2 contains an illustration of such
a model. In this formulation, p(z|x) denotes the
style conditional probability distribution from a
trainable style classifier.

The joint data likelihood of target sequence y
and target domain label z for input sequence x is:

p(y, z|x) = p(y|z,x) · p(z|x) (9)
Training the Mix-SHAPED model involves mini-
mizing a loss function that combines the negative
log-likelihood of the style labels and the negative
log-likelihood of the symbol sequences (see the
model in Fig 3):

LossMix-SHAPED = −
N∑

i=1

log p(z(i)|x(i))

−
N∑

i=1

log p(y(i)|x(i), z(i)).
(10)

1531



  D?
         Style  
Classifier 

g

 g

Figure 2: Decoding data with unknown style using
a Mix-SHAPED model. The data is run through
all encoders and decoders. The output of private
encoders is fed into a classifier that estimates style
distribution. The output symbol distribution is a
mixture over all decoder outputs.

At run-time, if the style d of the input is available
and d ∈ D, we decode the sequence using Eq. 6.
This also corresponds to the case p(z = d|x) = 1
and 0 for all other styles, and reduces Eq. 8 to
Eq. 6. If the style of the input is unknown (or
known, but with d′ 6∈ D), we decode the se-
quence using Eq. 8, in which case the mixture over
SHAPED models given by p(z|x) is approximat-
ing the desired output style.

4 Model Instantiation

As an implementation of the encoder-decoder
model, we use the attention-based sequence-
to-sequence model from (Bahdanau et al.,
2015), with an RNN architecture using GRU
units (Chung et al., 2014). The input token
sequences are first projected into an embedding
space via an embedding matrix E, resulting in a
sequence of vectors as input representations.

The private and shared RNN cells generate a
sequence of hidden state vectors Hz = {hzj},
z ∈ {1, ..., |D|} and Hs = {hsj}, for j ∈
{1, ..., Tx}. At each step in the encoder, hzj and
hsj are concatenated to form a new output vector
hrzj = [h

z
j , h

s
j ]. The final state of each encoder

is used as the initial state of the corresponding de-
coder. At time step t in the decoder, the private and
shared RNN cell first generate hidden state vec-
tors {szt }, z ∈ {1, ..., |D|} and sst , then sst is con-
catenated with each szt to form new vectors {srzt }
(z ∈ {1, ..., |D|}).

We apply the attention mechanism on srzt , using

 

   Style 
Classifier

CAT SOFTMAX

 D1

  D2

D1

     Style 
Classifier

Figure 3: Training a Mix-SHAPED model. (a)
Each example is fed to all private encoders
f1enc, f

2
enc, whose outputs are concatenated and fed

to a style classifier. (b) The D1 examples only
use f1enc, f

1
dec, f

s
enc, f

s
dec to decode texts. Private

encoder-decoders of other styles are not used.

attention weights calculated as:

qrztj = vatanh(Wah
rz
j + Uas

rz
t ), (11)

which are normalized to a probability distribution:

αrztj =
exp(qrztj )∑Tx
i=1 exp(q

rz
ti )

(12)

Context vectors are computed using normalized
attention weights:

crzt =

Tx∑

j=1

αrztj h
rz
j (13)

Given the context vector and the hidden state vec-
tors, the symbol distribution at step t is:

p(ot|x,y1:t, z) = softmax(g([crzt , srzt ])) (14)

The attention weights in Wa, Ua, and va, as well
as the embedding matrix E and vocabulary V are
shared by all encoders and decoders. We use
Eq. 14 to calculate the symbol loss in Eq. 10.

1532



5 Quantitative Experiments

We perform a battery of quantitative experiments,
designed to answer several main questions: 1) Do
the proposed model improve generation perfor-
mance over alternative approaches? 2) Can a style
classifier built using an auxiliary loss provide a re-
liable estimate on text style? 3) In the case of un-
known style, does the Mix-SHAPED model im-
prove generation performance over alternative ap-
proaches? 4) To what extent do our models cap-
ture style characteristics as opposed to, say, con-
tent characteristics?

We perform our experiments using text sum-
marization as the main task. More precisely, we
train and evaluate headline generation models us-
ing the publicly-available Gigaword dataset (Graff
and Cieri, 2003; Napoles et al., 2012).

5.1 Headline-generation Setup
The Gigaword dataset contains news articles from
seven publishers: Agence France-Presse (AFP),
Associated Press Worldstream (APW), Central
News Agency of Taiwan (CNA), Los Ange-
les Times/Washington Post Newswire Service
(LTW), New York Times (NYT), Xinhua News
Agency (XIN), and Washington Post/Bloomberg
Newswire Service (WPB). We pre-process this
dataset in the same way as in (Rush et al., 2015),
which results in articles with average length 31.4
words, and headlines with average length 8.5
words.

We consider the publisher identity as a proxy
for style, and choose to model as in-domain styles
the set D = {AFP, APW, NYT, XIN}, while hold-
ing out CNA and LTW for out-of-domain style
testing. This results in a training set contain-
ing the following number of (article, headline) in-
stances: 993,584 AFP, 1,493,758 APW, 578,259
NYT, and 946,322 XIN. For the test set, we sam-
ple a total number of 10,000 in-domain examples
from the original Gigawords test dataset, which
include 2,886 AFP, 2,832 APW, 1,610 NYT, and
2,012 XIN. For out-of-domain testing, we ran-
domly sample 10,000 LTW and 10,000 CNA test
data examples. We remove the WPB articles due
to their small number of instances.

5.1.1 Experimental Setup
We compare the following models:

• A Shared encoder-decoder model (S) trained
on all styles in D;

• A suite of Private encoder-decoder models
(P), each one trained on a particular style
from D = {AFP, APW, NYT, XIN};1

• A SHAPED model (SP) trained on all styles
in D; at test time, the style of test data is
provided to the model; the article is only
run through its style-specific private network
and shared network (style classifier is not
needed);

• A Mix-SHAPED model (M-SP) trained on
all styles in D; at test time, the style of arti-
cle is not provided to the model; the output is
computed using the mixture model, with the
estimated style probabilities from the style
classifier used as weights.

When testing on the out-of-domain styles
CNA/LTW, we only compare the Shared (S)
model with the Mix-SHAPED (M-SP) model, as
the others cannot properly handle this scenario.

As hyper-parameters for the model instantia-
tion, we used 500-dimension word embeddings,
and a three-layer, 500-dimension GRU-cell RNN
architecture; the encoder was instantiated as a bi-
directional RNN. The lengths of the input and out-
put sequences were truncated to 40 and 20 tokens,
respectively. All the models were optimized using
Adagrad (Duchi et al., 2011), with an initial learn-
ing rate of 0.01. The training procedure was done
over mini-batches of size 128, and the updates
were done asynchronously across 40 workers for
5M steps. The encoder/decoder word embedding
and the output projection matrices were tied to
minimize the number of parameters. To avoid the
slowness from the softmax operator over large vo-
cabulary sizes, and also mitigate the impact of out-
of-vocabulary tokens, we applied a subtokeniza-
tion method (Wu et al., 2016), which invertibly
transforms a native token into a sequence of subto-
kens from a limited vocabulary (here set to 32K).

Comparison with Previous Work In the next
section, we report our main results using the in-
domain and out-of-domain (w.r.t. the selected
publisher styles) test sets described above, since
these test sets have a balanced publisher style fre-
quency that allows us to measure the impact of our
style-adaptation models. However, we also report

1We also tried to warm-start a private model using the best
checkpoint of the shared model, but found that it cannot im-
prove over the shared model.

1533



AFP/APW/XIN/NYT Test
Rouge-1 Rouge-2 Rouge-L

P 39.14±0.47 19.74±0.48 36.42±0.46
S 39.32±0.26 19.63±0.24 36.51±0.26

SP 40.34±0.26 20.38±0.25 37.52±0.25
M-SP 40.10±0.25 20.21±0.26 37.30±0.26

Table 1: ROUGE F1 scores on the combined
AFP/APW/XIN/NYT in-domain test set.

here the performance of our Shared (S) baseline
model (with the above hyper-parameters) on the
original 2K test set used in (Rush et al., 2015).
On that test set, our S model obtains 30.13 F1
ROUGE-L score, compared to 28.34 ROUGE-L
obtained by the ABS+ model (Rush et al., 2015),
and 30.64 ROUGE-L obtained by the words-lvt2k-
1sent model (Nallapati et al., 2016). This compar-
ison indicates that our S model is a competitive
baseline, making the comparisons against the SP
and M-SP models meaningful when using our in-
domain and out-of-domain test sets.

5.1.2 Main Results
The Rouge scores for the in-domain testing data
are reported in Table 1 (over the combined
AFP/APW/XIN/NYT testset) and Fig. 4a (over
individual-style test sets). The numbers indicate
that the SP and M-SP models consistently outper-
form the S and P model, supporting the conclusion
that the S model loses important characteristics
due to averaging effects, while the P models miss
the opportunity to efficiently exploit the training
data. Additionally, the performance of SP is con-
sistently better than M-SP in this setting, which in-
dicates that the style label is helpful. As shown in
Fig. 4b, the style classifier achieves around 80%
accuracy overall in predicting the style under the
M-SP model, with some styles (e.g., XIN) being
easier to predict than others. The performance of
the classifier is directly reflected in the quantita-
tive difference between the SP and M-SP models
on individual-style test sets (see Fig. 4a, where the
XIN style has the smallest difference between the
two models).

The evaluation results for the out-of-domain
scenario are reported in Table 2. The numbers in-
dicate that the M-SP model significantly outper-
forms the S model, supporting the conclusion that
the M-SP model is capable of performing on-the-
fly adaptation of output style. This conclusion is
further strengthened by the style probability dis-
tributions shown in Fig 5: they indicate that, for

P S SP M-S
P

16.4

16.6

16.8

17.0

17.2

17.4

R
O

U
G

E-
L 

(%
)

NYT

P S SP M-S
P

39.4

39.6

39.8

40.0

40.2

40.4

40.6

AFP

P S SP M-S
P

33.0

33.2

33.4

33.6

33.8

34.0

34.2

34.4

APW

P S SP M-S
P

51.5

52.0

52.5

53.0

53.5

XIN

(a) Rouge-L scores on headline generation, shown sepa-
rately on four in-domain styles.

NYT AFP APW XIN
0.0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8
NYT

NYT AFP APW XIN
0.0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8
AFP

NYT AFP APW XIN
0.0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8
APW

NYT AFP APW XIN
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9

XIN

(b) Average estimated probability distribution by the M-
SP model over the four styles, for each in-domain target
style in the test set.

Figure 4: Experimental results on the headline gen-
eration task, for in-domain styles.

the out-of-domain CNA style, the output mixture
is heavily weighted towards the XIN style (0.6 of
the probability mass), while for the LTW style,
the output mixture weights heavily the NYT style
(0.72 of the probability mass). This result is likely
to reflect true style characteristics shared by these
publishers, since both CNA and XIN are produced
by Chinese news agencies (from Taiwan and main-
land China, respectively), while both LTW and
NYT are U.S. news agencies owned by the same
media corporation.

5.1.3 Experiment Variants

Model capacity In order to remove the possibil-
ity that the improved performance of the SP model
is due simply to an increased model size com-
pared to the S model, we perform an experiment
in which we triple the size of the GRU cell dimen-
sions for the S model. However, we find no sig-
nificant performance difference compared to the

1534



CNA Test LTW Test
Rouge-1 Rouge-2 Rouge-L Rouge-1 Rouge-2 Rouge-L

S 40.73±0.21 17.75±0.18 37.70±0.20 27.08±0.19 8.97±0.15 25.01±0.17
M-SP 42.00±0.20 19.48±0.21 39.24±0.22 27.79±0.19 9.31±0.18 25.60±0.17

Table 2: ROUGE F1 scores on out-of-domain style test sets CNA and LTW.

NYT AFP APW XIN
0.0

0.1

0.2

0.3

0.4

0.5

0.6

0.7
CNA

NYT AFP APW XIN
0.0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8
LTW

Figure 5: Estimated style probabilities over the
four in-domain styles AFP/APW/XIN/NYT, for
out-of-domain styles CNA and LTW.

original dimensions (the ROUGE-L score of the
triple-size S model is 36.61, compared to 36.51
obtained of the original S model).

Style embedding A competitive approach to
modeling different styles is to directly encode
the style information into the embedding space.
In (Johnson et al., 2016), the style label is con-
verted into a one-hot vector and is concatenated
with the word embedding at each time step in
the S model. The outputs of this model are at
36.68 ROUGE-L, slightly higher than the baseline
S model, but significantly lower than the SP model
performance (37.52 ROUGE-L).

Another style embedding approach is to aug-
ment the S model with continuous trainable style
embeddings for each predefined style label, sim-
ilar to (Ammar et al., 2016). The resulting out-
puts achieve 37.2 ROUGE-L, which is better than
the S model with one-hot style embedding, but
still worse than the SP method (statistically signif-
icant at p-value=0.025 using paired t-test). How-
ever, neither of these approaches apply to the cases
when the style is out-of-domain or unknown dur-
ing testing. In contrast, such cases are handled nat-
urally by the proposed M-SP model.

Ensemble model Another question is whether
the SP model simply benefits from ensembling

multiple models rather than style adaptation. To
answer this question, we apply a uniform mix-
ture over the private model output along with
the shared model output, rather than using the
learnt probability distribution from the style classi-
fier. The ROUGE-1/2/L scores are 39.9/19.7/37.0.
They are higher than the S model but significantly
lower than the SP model and the M-SP model (p-
value 0.016). This result confirms that the infor-
mation that the style classifier encodes is benefi-
ciary, and leads to improved performance.

Style vs. Content Previous experiments indi-
cate that the SP and M-SP models have superior
generation accuracy, but it is unclear to what ex-
tent the difference comes from improved modeling
of style versus modeling of content. To clarify this
issue, we performed an experiment in which we
replace the named entities appearing in both arti-
cle and headline with corresponding entity tags, in
effect suppressing almost completely any content
signal. For instance, given an input such as “China
called Thursday on the parties involved in talks on
North Korea’s nuclear program to show flexibil-
ity as a deadline for implementing the first steps
of a breakthrough deal approached.”, paired with
goldtruth output “China urges flexibility as NKo-
rea deadline approaches”, we replaced the named
entities with their types, and obtained: “LOC 0
called Thursday on the ORG 0 involved in NON 2
on LOC 1 ’s NON 3 to show NON 0 as a NON 1
for implementing the first NON 4 of a NON 5 ap-
proached .”, paired with “LOC 0 urges NON 0 as
LOC 1 NON 1 approaches.”

Under this experimental conditions, both the
SP and M-SP models still achieve significantly
better performance compared to the S baseline.
On the combined AFP/APW/XIN/NYT in-domain
test set, the SP model achieves 61.70 ROUGE-L
and M-SP achieves 61.52 ROUGE-L, compared to
60.20 ROUGE-L obtained by the S model. On the
CNA/LTW out-of-domain test set, M-SP achieves
60.75 ROUGE-L, compared to 59.47 ROUGE-L
by the S model.

In Table 3, we show an example which indi-

1535



article the org 2 is to forge non 1 with the org 3 located in loc 2 , loc 1 , the per 0 of
the loc 0 org 4 said tuesday .

title loc 0 org 0 to forge non 0 with loc 1 org 1
output by S org 0 to org 1 in non 0

output by M-SP loc 0 org 0 to forge non 0 with loc 1 org 1
article loc 0 - born per 0 per 0 will pay non 1 here next month to per 1 , the org 2

( org 1 ) per 1 who per 1 perished in an non 2 in february , the org 3 said
thursday .

title per 0 to pay non 0 to late org 1 org 0
output by S per 0 to visit org 0 in non 0

output by M-SP per 0 to pay non 0 to org 1 org 0

Table 3: Examples of input article (and groundtruth title) and output generated by S and M-SP. Named
entities in the training instances (both article and title) are replaced the entity type.

cates the ability of style adaptation benifiting sum-
marization. For instance, we find that both CNA
and XIN make more frequent use of the style pat-
tern “xxx will/to [verb] yyy . . ., zzz said ???day”
(about 15% of CNA articles contain this pattern,
while only 2% of LTW articles have it). From
Table 3, we can see that the S model sometimes
misses or misuses the verb in its output, while the
M-SP model does a much better job at capturing
both the verb/action as well as other relations (via
prepositions, etc.)

Fig. 6 shows the estimated style probabili-
ties over the four styles AFP/APW/XIN/NYT for
CNA and LTW, under this experiment condition.
We observe that, in this version as well, CNA is
closely matching the style of XIN, while LTW is
matching that of NYT. The distribution is similar
to the one in Fig. 5, albeit a bit flatter as a result
of content removal. As such, it supports the con-
clusion that the classifier indeed learns style (in
addition to content) characteristics.

6 Conclusion

In this paper, we describe two new style-
adaptation model architectures for text sequence
generation tasks, SHAPED and Mix-SHAPED.
Both versions are shown to significantly outper-
form models that are either trained in a manner
that ignores style characteristics (and hence ex-
hibit a style-averaging effect in their outputs), or
models that are trained single-style.

The latter is a particularly interesting result, as
a model that is trained (with enough data) on a
single-style and evaluated on the same style would
be expected to exhibit the highest performance.
Our results show that, even for single-style models

NYT AFP APW XIN
0.0

0.1

0.2

0.3

0.4

0.5

CNA

NYT AFP APW XIN
0.0

0.1

0.2

0.3

0.4

0.5

LTW

Figure 6: Estimated style probabilities over the
four in-domain styles AFP/APW/XIN/NYT, for
out-of-domain styles CNA and LTW, after named
entities in the article and summary are replaced
with entity tags.

trained on over 1M examples, their performance is
inferior to the performance of SHAPED models on
that particular style.

Our conclusion is that the proposed architec-
tures are both efficient and effective in modeling
both generic language phenomena, as well as par-
ticular style characteristics, and are capable of pro-
ducing higher-quality abstractive outputs that take
into account style characteristics.

1536



References
Waleed Ammar, George Mulcaire, Miguel Ballesteros,

Chris Dyer, and Noah A. Smith. 2016. Many lan-
guages, one parser. TACL 4:431–444.

Nabiha Asghar, Pascal Poupart, Xin Jiang, and Hang
Li. 2017. Deep active learning for dialogue genera-
tion. In Proceedings of the 6th Joint Conference on
Lexical and Computational Semantics (*SEM 2017).
pages 78–83.

D. Bahdanau, K. Cho, and Y. Bengio. 2015. Neural
machine translation by jointly learning to align and
translate. In Proceedings of ICLR.

Konstantinos Bousmalis, George Trigeorgis, Nathan
Silberman, Dilip Krishnan, and Dumitru Erhan.
2016. Domain separation networks. In Advances in
Neural Information Processing Systems. pages 343–
351.

Sumit Chopra, Michael Auli, Alexander M Rush, and
SEAS Harvard. 2016. Abstractive sentence summa-
rization with attentive recurrent neural networks. In
HLT-NAACL. pages 93–98.

Sumit Chopra, Suhrid Balakrishnan, and Raghuraman
Gopalan. 2013. Dlid: Deep learning for domain
adaptation by interpolating between domains. In
ICML workshop on challenges in representation
learning. volume 2.

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. arXiv preprint arXiv:1412.3555 .

Hal Daumé III. 2009. Frustratingly easy domain adap-
tation. arXiv preprint arXiv:0907.1815 .

John Duchi, Elad Hazan, and Yoram Singer. 2011.
Adaptive subgradient methods for online learning
and stochastic optimization. Journal of Machine
Learning Research 12(Jul):2121–2159.

Katja Filippova, Enrique Alfonseca, Carlos Col-
menares, Lukasz Kaiser, and Oriol Vinyals. 2015.
Sentence compression by deletion with lstms. In
Proceedings of the 2015 Conference on Empir-
ical Methods in Natural Language Processing
(EMNLP’15).

Xavier Glorot, Antoine Bordes, and Yoshua Bengio.
2011. Domain adaptation for large-scale sentiment
classification: A deep learning approach. In Pro-
ceedings of the 28th international conference on ma-
chine learning (ICML-11). pages 513–520.

David Graff and C Cieri. 2003. English gigaword cor-
pus. Linguistic Data Consortium .

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation
9(8):1735–1780.

Xinyu Hua and Lu Wang. 2017. A pilot study of do-
main adaptation effect for neural abstractive summa-
rization. arXiv preprint arXiv:1707.07062 .

Melvin Johnson, Mike Schuster, Quoc V. Le, Maxim
Krikun, Yonghui Wu, Zhifeng Chen, Nikhil Tho-
rat, Fernanda B. Viégas, Martin Wattenberg, Greg
Corrado, Macduff Hughes, and Jeffrey Dean. 2016.
Google’s multilingual neural machine translation
system: Enabling zero-shot translation. CoRR
abs/1611.04558. http://arxiv.org/abs/
1611.04558.

Young-Bum Kim, Karl Stratos, and Ruhi Sarikaya.
2016. Frustratingly easy neural domain adaptation.
In Proceedings of the 26th International Conference
on Computational Linguistics (COLING).

Jiwei Li, Will Monroe, Alan Ritter, Michel Galley,
Jianfeng Gao, and Dan Jurafsky. 2016. Deep rein-
forcement learning for dialogue generation. arXiv
preprint arXiv:1606.01541 .

Jiwei Li, Will Monroe, Tianlin Shi, Alan Ritter,
and Dan Jurafsky. 2017. Adversarial learning
for neural dialogue generation. arXiv preprint
arXiv:1701.06547 .

Siqi Liu, Zhenhai Zhu, Ning Ye, Sergio Guadarrama,
and Kevin Murphy. 2017. Optimization of im-
age description metrics using policy gradient meth-
ods. In International Conference on Computer Vi-
sion (ICCV).

Mingsheng Long, Han Zhu, Jianmin Wang, and
Michael I Jordan. 2016. Unsupervised domain
adaptation with residual transfer networks. In Ad-
vances in Neural Information Processing Systems.
pages 136–144.

Ramesh Nallapati, Bowen Zhou, Caglar Gulcehre,
Bing Xiang, et al. 2016. Abstractive text summa-
rization using sequence-to-sequence RNNs and be-
yond. In Proceedings of CoNLL.

Courtney Napoles, Matthew Gormley, and Benjamin
Van Durme. 2012. Annotated gigaword. In Pro-
ceedings of the Joint Workshop on Automatic Knowl-
edge Base Construction and Web-scale Knowledge
Extraction. Association for Computational Linguis-
tics, pages 95–100.

Preksha Nema, Mitesh Khapra, Anirban Laha, and
Balaraman Ravindran. 2017. Diversity driven atten-
tion model for query-based abstractive summariza-
tion. arXiv preprint arXiv:1704.08300 .

Romain Paulus, Caiming Xiong, and Richard Socher.
2017. A deep reinforced model for abstractive sum-
marization. arXiv preprint arXiv:1705.04304 .

Nanyun Peng and Mark Dredze. 2017. Multi-task do-
main adaptation for sequence tagging. ACL 2017
page 91.

1537



Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2015. Sequence level
training with recurrent neural networks. CoRR
abs/1511.06732.

Alexander M. Rush, Sumit Chopra, and Jason Weston.
2015. A neural attention model for abstractive sen-
tence summarization. In Proceedings of EMNLP.
pages 379–389.

Abigail See, Peter J Liu, and Christopher D Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In Proceedings of ACL.

Ozan Sener, Hyun Oh Song, Ashutosh Saxena, and Sil-
vio Savarese. 2016. Learning transferrable represen-
tations for unsupervised domain adaptation. In Ad-
vances in Neural Information Processing Systems.
pages 2110–2118.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems. pages 3104–3112.

Eric Tzeng, Judy Hoffman, Trevor Darrell, and Kate
Saenko. 2015. Simultaneous deep transfer across
domains and tasks. In Proceedings of the IEEE In-
ternational Conference on Computer Vision. pages
4068–4076.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems.

Oriol Vinyals, Alexander Toshev, Samy Bengio, and
Dumitru Erhan. 2015. Show and tell: A neural im-
age caption generator. In Proceedings of the IEEE
conference on computer vision and pattern recogni-
tion. pages 3156–3164.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V.
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, Jeff Klingner, Apurva Shah, Melvin
Johnson, Xiaobing Liu, ukasz Kaiser, Stephan
Gouws, Yoshikiyo Kato, Taku Kudo, Hideto
Kazawa, Keith Stevens, George Kurian, Nishant
Patil, Wei Wang, Cliff Young, Jason Smith, Ja-
son Riesa, Alex Rudnick, Oriol Vinyals, Greg Cor-
rado, Macduff Hughes, and Jeffrey Dean. 2016.
Google’s neural machine translation system: Bridg-
ing the gap between human and machine transla-
tion. CoRR abs/1609.08144. http://arxiv.
org/abs/1609.08144.

Kelvin Xu, Jimmy Ba, Ryan Kiros, Aaron Courville,
Ruslan Salakhutdinov, Richard Zemel, and Yoshua
Bengio. 2015. Show, attend and tell: Neural image
caption generation with visual attention. In Proc.
of the 32nd International Conference on Machine
Learning (ICML).

Xingxing Zhang and Mirella Lapata. 2017. Sen-
tence simplification with deep reinforcement learn-
ing. arXiv preprint arXiv:1703.10931 .

Guangyou Zhou, Zhiwen Xie, Jimmy Xiangji Huang,
and Tingting He. 2016. Bi-transferring deep neural
networks for domain adaptation. In ACL (1).

1538


