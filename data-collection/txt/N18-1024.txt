



















































Neural Automated Essay Scoring and Coherence Modeling for Adversarially Crafted Input


Proceedings of NAACL-HLT 2018, pages 263–271
New Orleans, Louisiana, June 1 - 6, 2018. c©2018 Association for Computational Linguistics

Neural Automated Essay Scoring and Coherence Modeling for
Adversarially Crafted Input

Youmna Farag Helen Yannakoudakis Ted Briscoe

Department of Computer Science and Technology
The ALTA Institute

University of Cambridge
United Kingdom

{youmna.farag,helen.yannakoudakis,ted.briscoe}@cl.cam.ac.uk

Abstract

We demonstrate that current state-of-the-
art approaches to Automated Essay Scoring
(AES) are not well-suited to capturing adver-
sarially crafted input of grammatical but inco-
herent sequences of sentences. We develop a
neural model of local coherence that can ef-
fectively learn connectedness features between
sentences, and propose a framework for in-
tegrating and jointly training the local coher-
ence model with a state-of-the-art AES model.
We evaluate our approach against a number of
baselines and experimentally demonstrate its
effectiveness on both the AES task and the task
of flagging adversarial input, further contribut-
ing to the development of an approach that
strengthens the validity of neural essay scor-
ing models.

1 Introduction

Automated Essay Scoring (AES) focuses on auto-
matically analyzing the quality of writing and as-
signing a score to the text. Typically, AES models
exploit a wide range of manually-tuned shallow
and deep linguistic features (Shermis and Ham-
mer, 2012; Burstein et al., 2003; Rudner et al.,
2006; Williamson et al., 2012; Andersen et al.,
2013). Recent advances in deep learning have
shown that neural approaches to AES achieve
state-of-the-art results (Alikaniotis et al., 2016;
Taghipour and Ng, 2016) with the additional ad-
vantage of utilizing features that are automatically
learned from the data. In order to facilitate in-
terpretability of neural models, a number of visu-
alization techniques have been proposed to iden-
tify textual (superficial) features that contribute to
model performance (Alikaniotis et al., 2016).

To the best of our knowledge, however, no prior
work has investigated the robustness of neural
AES systems to adversarially crafted input that is
designed to trick the model into assigning desired

missclassifications; for instance, a high score to a
low quality text. Examining and addressing such
validity issues is critical and imperative for AES
deployment. Previous work has primarily focused
on assessing the robustness of “standard” machine
learning approaches that rely on manual feature
engineering; for example, Powers et al. (2002);
Yannakoudakis et al. (2011) have shown that such
AES systems, unless explicitly designed to handle
adversarial input, can be susceptible to subversion
by writers who understand something of the sys-
tems’ workings and can exploit this to maximize
their score.

In this paper, we make the following contribu-
tions:

i. We examine the robustness of state-of-the-art
neural AES models to adversarially crafted
input,1 and specifically focus on input related
to local coherence; that is, grammatical but
incoherent sequences of sentences.2 In addi-
tion to the superiority in performance of neu-
ral approaches against “standard” machine
learning models (Alikaniotis et al., 2016;
Taghipour and Ng, 2016), such a setup allows
us to investigate their potential superiority /
capacity in handling adversarial input with-
out being explicitly designed to do so.

ii. We demonstrate that state-of-the-art neural
AES is not well-suited to capturing adver-
sarial input of grammatical but incoherent
sequences of sentences, and develop a neu-
ral model of local coherence that can effec-
tively learn connectedness features between
sentences.

1We use the terms ‘adversarially crafted input’ and ‘ad-
versarial input’ to refer to text that is designed with the inten-
tion to trick the system.

2Coherence can be assessed locally in terms of transitions
between adjacent sentences.

263



iii. A local coherence model is typically eval-
uated based on its ability to rank coher-
ently ordered sequences of sentences higher
than their incoherent / permuted counterparts
(e.g., Barzilay and Lapata (2008)). We focus
on a stricter evaluation setting in which the
model is tested on its ability to rank coher-
ent sequences of sentences higher than any
incoherent / permuted set of sentences, and
not just its own permuted counterparts. This
supports a more rigorous evaluation that fa-
cilitates development of more robust models.

iv. We propose a framework for integrating and
jointly training the local coherence model
with a state-of-the-art AES model. We eval-
uate our approach against a number of base-
lines and experimentally demonstrate its ef-
fectiveness on both the AES task and the task
of flagging adversarial input, further con-
tributing to the development of an approach
that strengthens AES validity.

At the outset, our goal is to develop a framework
that strengthens the validity of state-of-the-art neu-
ral AES approaches with respect to adversarial in-
put related to local aspects of coherence. For our
experiments, we use the Automated Student As-
sessment Prize (ASAP) dataset,3 which contains
essays written by students ranging from Grade 7
to Grade 10 in response to a number of different
prompts (see Section 4).

2 Related Work

AES Evaluation against Adversarial Input One
of the earliest attempts at evaluating AES mod-
els against adversarial input was by Powers et al.
(2002) who asked writing experts – that had been
briefed on how the e-Rater scoring system works
– to write essays to trick e-Rater (Burstein et al.,
1998). The participants managed to fool the sys-
tem into assigning higher-than-deserved grades,
most notably by simply repeating a few well-
written paragraphs several times. Yannakoudakis
et al. (2011) and Yannakoudakis and Briscoe
(2012) created and used an adversarial dataset of
well-written texts and their random sentence per-
mutations, which they released in the public do-
main, together with the grades assigned by a hu-
man expert to each piece of text. Unfortunately,
however, the dataset is quite small, consisting of

3https://www.kaggle.com/c/asap-aes/

12 texts in total. Higgins and Heilman (2014) pro-
posed a framework for evaluating the susceptibil-
ity of AES systems to gaming behavior.

Neural AES Models Alikaniotis et al. (2016)
developed a deep bidirectional Long Short-Term
Memory (LSTM) (Hochreiter and Schmidhuber,
1997) network, augmented with score-specific
word embeddings that capture both contextual and
usage information for words. Their approach
outperformed traditional feature-engineered AES
models on the ASAP dataset. Taghipour and
Ng (2016) investigated various recurrent and con-
volutional architectures on the same dataset and
found that an LSTM layer followed by a Mean
over Time operation achieves state-of-the-art re-
sults. Dong and Zhang (2016) showed that a two-
layer Convolutional Neural Network (CNN) out-
performed other baselines (e.g., Bayesian Linear
Ridge Regression) on both in-domain and domain-
adaptation experiments on the ASAP dataset.

Neural Coherence Models A number of ap-
proaches have investigated neural models of co-
herence on news data. Li and Hovy (2014) used
a window approach where a sliding kernel of
weights was applied over neighboring sentence
representations to extract local coherence fea-
tures. The sentence representations were con-
structed with recursive and recurrent neural meth-
ods. Their approach outperformed previous meth-
ods on the task of selecting maximally coherent
sentence orderings from sets of candidate permu-
tations (Barzilay and Lapata, 2008). Lin et al.
(2015) developed a hierarchical Recurrent Neural
Network (RNN) for document modeling. Among
others, they looked at capturing coherence be-
tween sentences using a sentence-level language
model, and evaluated their approach on the sen-
tence ordering task. Tien Nguyen and Joty (2017)
built a CNN over entity grid representations, and
trained the network in a pairwise ranking fashion.
Their model outperformed other graph-based and
distributed sentence models.

We note that our goal is not to identify the
“best” model of local coherence on randomly
permuted grammatical sentences in the domain
of AES, but rather to propose a framework that
strengthens the validity of AES approaches with
respect to adversarial input related to local aspects
of coherence.

264



Figure 1: Local Coherence (LC) model architecture using a window of size 3. All hsnt representations are com-
puted the same way as hsnt1 . The figure depicts the process of predicting the first clique score, which is applied to
all the cliques in the text. The output coherence score is the average of all the clique scores. T is the number of
cliques.

3 Models

3.1 Local Coherence (LC) Model

Our local coherence model is inspired by the
model of Li and Hovy (2014) which uses a win-
dow approach to evaluate coherence.4 Figure 1
presents a visual representation of the network ar-
chitecture, which is described below in detail.

Sentence Representation This part of the model
composes the sentence representations that can be
utilized to learn connectedness features between
sentences. Each word in the text is initialized with
a k-dimensional vector w from a pre-trained word
embedding space. Unlike Li and Hovy (2014), we
use an LSTM layer5 to capture sentence compo-
sitionality by mapping words in a sentence s =
{w1, w2, ..., wn} at each time step t (wt, where
t ≤ n) onto a fixed-size vector hwrdt ∈ Rdlstm
(where dlstm is a hyperparameter). The sentence
representation hsnt is then the representation of
the last word in the sentence:

hsnt = hwrdn (1)

Clique Representation Each window of sen-
tences in a text represents a clique q =

4We note that Li and Jurafsky (2017) also present an ex-
tended version of the work by Li and Hovy (2014), evaluated
on different domains.

5LSTMs have been shown to produce state-of-the-art re-
sults in AES (Alikaniotis et al., 2016; Taghipour and Ng,
2016).

{s1, ..., sm}, where m is a hyperparameter indi-
cating the window size. A clique is assigned a
score of 1 if it is coherent (i.e., the sentences are
not shuffled) and 0 if it is incoherent (i.e., the sen-
tences are shuffled). The clique embedding is cre-
ated by concatenating the representations of the
sentences it contains according to Equation 1. A
convolutional operation – using a filter W clq ∈
Rm×dlstm×dcnn , where dcnn denotes the convolu-
tional output size – is then applied to the clique
embedding, followed by a non-linearity in order
to extract the clique representation hclq ∈ Rdcnn :

hclqj = tanh([h
snt
j ; ..;h

snt
j+m−1] ∗W clq) (2)

Here, j ∈ {1, ..., N −m+1}, N is the number of
sentences in the text, and ∗ is the linear convolu-
tional operation.

Scoring The cliques’ predicted scores are calcu-
lated via a linear operation followed by a sigmoid
function to project the predictions to a [0, 1] prob-
ability space:

ŷclqj = sigmoid(h
clq
j . V ) (3)

where V ∈ Rdcnn is a learned weight. The net-
work optimizes its parameters to minimize the
negative log-likelihood of the cliques’ gold scores
yclq, given the network’s predicted scores:

Llocal =
1

T

T∑

j=1

[−yclqj log(ŷ
clq
j )

−(1− yclqj )log(1− ŷ
clq
j )]

(4)

265



Figure 2: AES LSTMT&N model of Taghipour and Ng
(2016). The ŷesy is the final predicted essay score.

where T = N−m+1 (number of cliques in text).
The final prediction of the text’s coherence score is
calculated as the average of all of its clique scores:

ŷcoh =
1

T

T∑

j=1

ŷclqj (5)

This is in contrast to Li and Hovy (2014), who
multiply all the estimated clique scores to gener-
ate the overall document score. This means that if
only one clique is misclassified as incoherent and
assigned a score of 0, the whole document is re-
garded as incoherent. We aim to soften this as-
sumption and use the average instead to allow for
a more fine-grained modeling of degrees of coher-
ence.6

We train the LC model on synthetic data auto-
matically generated by creating random permuta-
tions of highly-scored ASAP essays (Section 4).

3.2 LSTM AES Model

We utilize the LSTM AES model of Taghipour and
Ng (2016) shown in Figure 2 (LSTMT&N), which
is trained, and yields state-of-the-art results on the
ASAP dataset. The model is a one-layer LSTM
that encodes the sequence of words in an essay,
followed by a Mean over Time operation that aver-
ages the word representations generated from the
LSTM layer.7

6Our experiments showed that using the multiplicative ap-
proach gives poor results, as presented in Section 6.

7We note that the authors achieve slightly higher results
when averaging ensemble results of their LSTM model to-
gether with CNN models. We use their main LSTM model

3.3 Combined Models

We propose a framework for integrating the
LSTMT&N model with the Local Coherence (LC)
one. Our goal is to have a robust AES system
that is able to correctly flag adversarial input while
maintaining a high performance on essay scoring.

3.3.1 Baseline: Vector Concatenation
(VecConcat)

The baseline model simply concatenates the out-
put representations of the pre-prediction layers of
the trained LSTMT&N and LC networks, and feeds
the resulting vector to a machine learning algo-
rithm (e.g., Support Vector Machines, SVMs) to
predict the final overall score. In the LSTMT&N
model, the output representation (hereafter re-
ferred to as the essay representation) is the vector
produced from the Mean Over Time operation; in
the LC model, we use the generated clique repre-
sentations (Figure 1) aggregated with a max op-
eration;8 (hereafter referred to as the clique rep-
resentation). Although the LC model is trained
on permuted ASAP essays (Section 4) and the
LSTMT&N model on the original ASAP data, es-
say and clique representations are generated for
both the ASAP and the synthetic essays contain-
ing reordered sentences.

3.3.2 Joint Learning
Instead of training the LSTMT&N and LC models
separately and then concatenating their output rep-
resentations, we propose a framework where both
models are trained jointly, and where the final net-
work has then the capacity to predict AES scores
and flag adversarial input (Figure 3).

Specifically, the LSTMT&N and LC networks
predict an essay and coherence score respectively
(as described earlier), but now they both share the
word embedding layer. The training set is the ag-
gregate of both the ASAP and permuted data to al-
low the final network to learn from both simultane-
ously. Concretely, during training, for the ASAP
essays, we assume that both the gold essay and
coherence scores are the same and equal to the
gold ASAP scores. This is not too strict an as-
sumption, as overall scores of writing competence
tend to correlate highly with overall coherence.
For the synthetic essays, we set the “gold” coher-

which, for the purposes of our experiments, does not affect
our conclusions.

8We note that max aggregation outperformed other aggre-
gation functions.

266



Figure 3: A joint network for scoring essays as well
as detecting adversarial input. The LSTMT&N model is
the one depicted in Figure 2, and the LC in Figure 1.

ence scores to zero, and the “gold” essay scores
to those of their original non-permuted counter-
parts in the ASAP dataset. The intuition is as
follows: firstly, setting the “gold” essay scores of
synthetic essays to zero would bias the model into
over-predicting zeros; secondly, our approach re-
inforces the LSTMT&N’s inability to detect adver-
sarial input, and forces the overall network to rely
on the LC branch to identify such input.9

The two sub-networks are trained together and
the error gradients are back-propagated to the
word embeddings. To detect whether an essay is
adversarial, we further augment the system with
an adversarial text detection component that sim-
ply captures adversarial input based on the differ-
ence between the predicted essay and coherence
scores. Specifically, we use our development set
to learn a threshold for this difference, and flag
an essay as adversarial if the difference is larger
than the threshold. We experimentally demon-
strate that this approach enables the model to per-
form well on both original ASAP and synthetic es-
says. During model evaluation, the texts flagged
as adversarial by the model are assigned a score
of zero, while the rest are assigned the predicted
essay score (ŷesy in Figure 3).

4 Data and Evaluation

We use the ASAP dataset, which contains 12, 976
essays written by students ranging from Grade 7 to

9We note that, during training, the scores are mapped to
a range between 0 and 1 (similarly to Taghipour and Ng
(2016)), and then scaled back to their original range during
evaluation.

Grade 10 in response to 8 different prompts. We
follow the ASAP data split by Taghipour and Ng
(2016), and apply 5-fold cross validation in all ex-
periments using the same train/dev/test splits. For
each prompt, the fold predictions are aggregated
and evaluated together. In order to calculate the
overall system performance, the results are aver-
aged across the 8 prompts.

To create adversarial input, we select high scor-
ing essays per prompt (given a pre-defined score
threshold, Table 1)10 that are assumed coherent,
and create 10 permutations per essay by randomly
shuffling its sentences. In the joint learning setup,
we augment the original ASAP dataset with a sub-
set of the synthetic essays. Specifically, we ran-
domly select 4 permutations per essay to include
in the training set,11 but include all 10 permuta-
tions in the test set. Table 1 presents the details of
the datasets.

We test performance on the ASAP dataset using
Quadratic Weighted Kappa (QWK), which was
the official evaluation metric in the ASAP compe-
tition, while we test performance on the synthetic
dataset using pairwise ranking accuracy (PRA) be-
tween an original non-permuted essay and its per-
muted counterparts. PRA is typically used as an
evaluation metric on coherence assessment tasks
on other domains (Barzilay and Lapata, 2008),
and is based on the fraction of correct pairwise
rankings in the test data (i.e., a coherent essay
should be ranked higher than its permuted coun-
terpart). Herein, we extend this metric and further-
more evaluate the models by comparing each orig-
inal essay to all adversarial / permuted essays in
the test data, and not just its own permuted coun-
terparts – we refer to this metric as total pairwise
ranking accuracy (TPRA).

5 Model Parameters and Baselines

Coherence models We train and test the LC
model described in Section 3.1 on the synthetic
dataset and evaluate it using PRA and TPRA. Dur-
ing pre-processing, words are lowercased and ini-
tialized with pre-trained word embeddings (Zou
et al., 2013). Words that occur only once in the
training set are mapped to a special UNK embed-

10We note that this threshold is different than the one men-
tioned in Section 3.3.2.

11This is primarily done to keep the data balanced: initial
experiments showed that training with all 10 permutations per
essay harms AES performance, but has negligible effect on
adversarial input detection.

267



Prompt #ASAP essays Score Range Synthetic Datasetthreshold #ASAP essays total size
1 1,783 2–12 10 472 5,192
2 1,800 1–6 5 82 902
3 1,726 0–3 3 407 4,477
4 1,772 0–3 3 244 2,684
5 1,805 0–4 4 258 2,838
6 1,800 0–4 4 367 4,037
7 1,569 0–30 23 179 1,969
8 723 0–60 45 72 792

Table 1: Statistics for each dataset per prompt. For the synthetic dataset, the high scoring ASAP essays are selected
based on the indicated score threshold (inclusive). “total size” refers to the number of the ASAP essays selected +
their 10 different permutations.

ding. All network weights are initialized to values
drawn randomly from a uniform distribution with
scale = 0.05, and biases are initialized to zeros.
We apply a learning rate of 0.001 and RMSProp
(Tieleman and Hinton, 2012) for optimization. A
size of 100 is chosen for the hidden layers (dlstm
and dcnn), and the convolutional window size (m)
is set to 3. Dropout (Srivastava et al., 2014) is ap-
plied for regularization to the output of the convo-
lutional operation with probability 0.3. The net-
work is trained for 60 epochs and performance is
monitored on the development sets – we select the
model that yields the highest PRA value.12

We use as a baseline the LC model that is based
on the multiplication of the clique scores (simi-
larly to Li and Hovy (2014)), and compare the
results (LCmul) to our averaged approach. As
another baseline, we use the entity grid (EGrid)
(Barzilay and Lapata, 2008) that models transi-
tions between sentences based on sequences of en-
tity mentions labeled with their grammatical role.
EGrid has been shown to give competitive re-
sults on similar coherence tasks in other domains.
Using the Brown Coherence Toolkit (Eisner and
Charniak, 2011),13 we construct the entity transi-
tion probabilities with length = 3 and salience = 2.
The transition probabilities are then used as fea-
tures that are fed as input to an SVM classifier with
an RBF kernel and penalty parameter C = 1.5 to
predict a coherence score.

LSTMT&N model We replicate and evaluate the
LSTM model of Taghipour and Ng (2016)14 on
ASAP and our synthetic data.

Combined models After training the LC and
LSTMT&N models, we concatenate their output

12Our implementation is available at https:
//github.com/Youmna-H/Coherence_AES

13https://bitbucket.org/melsner/browncoherence
14https://github.com/nusnlp/nea

vectors to build the Baseline: Vector Concate-
nation (VecConcat) model as described in Sec-
tion 3.3.1, and train a Kernel Ridge Regression
model.15

The Joint Learning network is trained on both
the ASAP and synthetic dataset as described in
Section 3.3.2. Adversarial input is detected based
on an estimated threshold on the difference be-
tween the predicted essay and coherence scores
(Figure 3). The threshold value is empirically cal-
culated on the development sets, and set to be
the average difference between the predicted es-
say and coherence scores in the synthetic data:

threshold =
∑M

i=1 ŷ
esy
i − ŷcohi
M

where M is the number of synthetic essays in the
development set.

We furthermore evaluate a baseline where
the joint model is trained without sharing the
word embedding layer between the two sub-
models, and report the effect on performance
(Joint Learningno layer sharing). Finally, we evalu-
ate a baseline where for the joint model we set the
“gold” essay scores of synthetic data to zero (Joint
Learningzero score), as opposed to our proposed ap-
proach of setting them to be the same as the score
of their original non-permuted counterpart in the
ASAP dataset.

6 Results

The state-of-the-art LSTMT&N model, as shown
in Table 2, gives the highest performance on the
ASAP data, but is not robust to adversarial in-
put and therefore unable to capture aspects of lo-
cal coherence, with performance on synthetic data
that is less than 0.5. On the other hand, both

15We use scikit-learn with the following parameters:
alpha=0.1, coef0=1, degree=3, gamma=0.1, kernel=‘rbf’.

268



Model
ASAP Synthetic
QWK PRA TPRA

EGrid − 0.718* 0.706*
LC − 0.946* 0.689*

LCmul − 0.948* 0.620*
LSTMT&N 0.739 0.430 0.473
VecConcat 0.719 0.614* 0.567*

Joint Learning 0.724 0.770* 0.777*

Table 2: Model performance on ASAP and synthetic
test data. Evaluation is based on the average QWK,
PRA and TRPA across the 8 prompts. * indicates
significantly different results compared to LSTMT&N
(two-tailed test with p < 0.01).

our LC model and the EGrid significantly outper-
form LSTMT&N on synthetic data. While EGrid is
slightly better in terms of TPRA compared to LC
(0.706 vs. 0.689), LC is substantially better on
PRA (0.946 vs. 0.718). This could be attributed
to the fact that LC is optimised using PRA on the
development set. The LCmul variation has a per-
formance similar to LC in terms of PRA, but is
significantly worse in terms of TPRA, which fur-
ther supports the use of our proposed LC model.

Our Joint Learning model manages to exploit
the best of both the LSTMT&N and LC approaches:
performance on synthetic data is significantly bet-
ter compared to LSTMT&N (and in particular gives
the highest TPRA value on synthetic data com-
pared to all models), while manages to maintain
the high performance of LSTMT&N on ASAP data
(performance slighly drops from 0.739 to 0.724
though not significantly). When the Joint Learning
model is compared against the VecConcat base-
line, we can again confirm its superiority on both
datasets, giving significant differences on syn-
thetic data.

7 Further Analysis

We furthermore evaluate the performance of the
the Joint Learning model when trained using dif-
ferent parameters (Table 3). When assigning
“gold” essay scores of zero to adversarial essays
(Joint Learningzero score), AES performance on the
ASAP data drops to 0.449 QWK, and the results
are statistically significant.16 This is partly ex-

16Note that we do not report performance of this model
on synthetic data. In this case, the thresholding technique
cannot be applied as both sub-models are trained with the
same “gold” scores and thus have very similar predictions on
synthetic data.

Model
ASAP Synthetic
QWK PRA TPRA

Joint Learning 0.724 0.770 0.777
Joint Learningno layer sharing 0.720 0.741 0.753*

Joint Learningzero score 0.449* − −

Table 3: Evaluation of different Joint Learning model
parameters. * indicates significantly different results
compared to our Joint Learning approach.

plained by the fact that the model, given the train-
ing data gold scores, is biased towards predicting
zeros. The result, however, further supports our
hypothesis that forcing the Joint Learning model
to rely on the coherence branch for adversarial in-
put detection further improves performance. Im-
portantly, we need something more than just train-
ing a state-of-the-art AES model (in our case,
LSTMT&N) on both original and synthetic data.

We also compare Joint Learning to Joint
Learningno layer sharing in which the the two sub-
models are trained separately without sharing the
first layer of word representations. While the dif-
ference in performance on the ASAP test data is
small, the differences are much larger on synthetic
data, and are significant in terms of TPRA. By ex-
amining the false positives of both systems (i.e.,
the coherent essays that are misclassified as adver-
sarial), we find that when the embeddings are not
shared, the system is biased towards flagging long
essays as adversarial, while interestingly, this bias
is not present when the embeddings are shared.
For instance, the average number of words in the
false positive cases of Joint Learningno layer sharing
on the ASAP data is 426, and the average num-
ber of sentences is 26; on the other hand, with the
Joint Learning model, these numbers are 340 and
19 respectively.17 A possible explanation for this
is that training the words with more contextual in-
formation (in our case, via embeddings sharing),
is advantageous for longer documents with a large
number of sentences.

Ideally, no essays in the ASAP data should be
flagged as adversarial as they were not designed
to trick the system. We calculate the number
of ASAP texts incorrectly detected as adversar-
ial, and find that the average error in the Joint
Learning model is quite small (0.382%). This in-
creases with Joint Learningno layer sharing (1%), al-
though still remains relatively small.

17Adversarial texts in the synthetic dataset have an average
number of 306 words and an average number of 18 sentences.

269



Figure 4: Joint Learning model predictions on the synthetic test set for 3 randomly selected prompts. The upper
graphs ((a), (b) and (c)) show the predicted essay and coherence scores on adversarial text, while the bottom ones
((d), (e) and (f)) show the predicted scores for highly scored / coherent ASAP essays. The blue circles represent
the essay scores, and the red pluses the coherence scores. All predicted scores are mapped to their original scoring
scale.

We further investigate the essay and coherence
scores predicted by our best model, Joint Learn-
ing, for the permuted and original ASAP essays
in the synthetic dataset (for which we assume that
the selected, highly scored ASAP essays are co-
herent, Section 4), and present results for 3 ran-
domly selected prompts in Figure 4. The graphs
show a large difference between predicted essay
and coherence scores on permuted / adversarial
data ((a), (b) and (c)), where the system predicts
high essay scores for permuted texts (as a result
of our training strategy), but low coherence scores
(as predicted by the LC model). For highly scored
ASAP essays ((d), (e) and (f)), the system predic-
tions are less varied and positively contributes to
the performance of our proposed approach.

8 Conclusion

We evaluated the robustness of state-of-the-art
neural AES approaches on adversarial input of
grammatical but incoherent sequences of sen-
tences, and demonstrated that they are not well-
suited to capturing such cases. We created a syn-
thetic dataset of such adversarial examples and
trained a neural local coherence model that is able
to discriminate between such cases and their co-
herent counterparts. We furthermore proposed
a framework for jointly training the coherence
model with a state-of-the-art neural AES model,
and introduced an effective strategy for assigning

“gold” scores to adversarial input during training.
When compared against a number of baselines,
our joint model achieves better performance on
randomly permuted sentences, while maintains a
high performance on the AES task. Among oth-
ers, our results demonstrate that it is not enough to
simply (re-)train neural AES models with adver-
sarially crafted input, nor is it sufficient to rely on
“simple” approaches that concatenate output rep-
resentations from different neural models. Finally,
our framework strengthens the validity of neural
AES approaches with respect to adversarial input
designed to trick the system.

Acknowledgements

We gratefully acknowledge the support of
NVIDIA Corporation with the donation of the Ti-
tan X Pascal GPU used for this research. We are
also grateful to Cambridge Assessment for their
support of the ALTA Institute. Special thanks to
Christopher Bryant and Marek Rei for their valu-
able feedback.

References
Dimitrios Alikaniotis, Helen Yannakoudakis, and

Marek Rei. 2016. Automatic text scoring using neu-
ral networks. In Proceedings of the 54th Annual
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers). Association for
Computational Linguistics, pages 715–725.

270



Øistein E Andersen, Helen Yannakoudakis, Fiona
Barker, and Tim Parish. 2013. Developing and test-
ing a self-assessment and tutoring system. In Pro-
ceedings of the Eighth Workshop on Innovative Use
of NLP for Building Educational Applications, BEA.
Association for Computational Linguistics, pages
32–41.

Regina Barzilay and Mirella Lapata. 2008. Modeling
local coherence: An entity-based approach. Compu-
tational Linguistics 34(1):1–34.

Jill Burstein, Martin Chodorow, and Claudia Leacock.
2003. Criterion: Online essay evaluation: An ap-
plication for automated evaluation of student es-
says. In Proceedings of the fifteenth annual con-
ference on innovative applications of artificial intel-
ligence. American Association for Artificial Intelli-
gence, pages 3–10.

Jill Burstein, Karen Kukich, Susanne Wolff, Chi
Lu, Martin Chodorow, Lisa Braden-Harder, and
Mary Dee Harris. 1998. Automated scoring using
a hybrid feature identification technique. In Pro-
ceedings of the 36th Annual Meeting of the Associ-
ation for Computational Linguistics and 17th Inter-
national Conference on Computational Linguistics -
Volume 1. pages 206–210.

Fei Dong and Yue Zhang. 2016. Automatic features
for essay scoring – an empirical study. In Proceed-
ings of the 2016 Conference on Empirical Methods
in Natural Language Processing. pages 1072–1077.

Micha Eisner and Eugene Charniak. 2011. Extending
the entity grid with entity-specific features. In Pro-
ceedings of the 49th Annual Meeting of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies: Short Papers - Volume 2. As-
sociation for Computational Linguistics, pages 125–
129.

Derrick Higgins and Michael Heilman. 2014. Manag-
ing what we can measure: Quantifying the suscep-
tibility of automated scoring systems to gaming be-
havior. Educational Measurement: Issues and Prac-
tice 33:3646.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation
9(8):1735–1780.

Jiwei Li and Eduard Hovy. 2014. A model of co-
herence based on distributed sentence representa-
tion. In Proceedings of the 2014 Conference on
Empirical Methods in Natural Language Processing
(EMNLP). pages 2039–2048.

Jiwei Li and Dan Jurafsky. 2017. Neural net models
for open-domain discourse coherence. In Proceed-
ings of the 2017 Conference on Empirical Methods
in Natural Language Processing. pages 198–209.

Rui Lin, Shujie Liu, Muyun Yang, Mu Li, Ming Zhou,
and Sheng Li. 2015. Hierarchical recurrent neural
network for document modeling. In Proceedings of

the 2015 Conference on Empirical Methods in Nat-
ural Language Processing. pages 899–907.

Donald E. Powers, Jill Burstein, Martin Chodorow,
Mary E. Fowles, and Karen Kukich. 2002. Stump-
ing e-rater: challenging the validity of automated
essay scoring. Computers in Human Behavior
18(2):103–134.

LM Rudner, Veronica Garcia, and Catherine Welch.
2006. An evaluation of IntelliMetric essay scoring
system. The Journal of Technology, Learning, and
Assessment 4(4):1 – 22.

M Shermis and B Hammer. 2012. Contrasting state-
of-the-art automated scoring of essays: analysis. In
Annual National Council on Measurement in Edu-
cation Meeting. pages 1–54.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. Journal of Machine Learning Re-
search 15(1):1929–1958.

Kaveh Taghipour and Hwee Tou Ng. 2016. A neural
approach to automated essay scoring. In Proceed-
ings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing. Association
for Computational Linguistics, pages 1882–1891.

Tijmen Tieleman and Geoffrey Hinton. 2012. Lecture
6.5 - rmsprop. Technical report .

Dat Tien Nguyen and Shafiq Joty. 2017. A neural local
coherence model. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers). Association
for Computational Linguistics, pages 1320–1330.

DM Williamson, Xiaoming Xi, and FJ Breyer. 2012. A
framework for evaluation and use of automated scor-
ing. Educational Measurement: Issues and Practice
31(1):2–13.

Helen Yannakoudakis and Ted Briscoe. 2012. Model-
ing coherence in esol learner texts. In Proceedings
of the Seventh Workshop on Building Educational
Applications Using NLP. Association for Computa-
tional Linguistics, pages 33–43.

Helen Yannakoudakis, Ted Briscoe, and Ben Medlock.
2011. A new dataset and method for automatically
grading esol texts. In Proceedings of the 49th An-
nual Meeting of the Association for Computational
Linguistics: Human Language Technologies-Volume
1. Association for Computational Linguistics, pages
180–189.

Will Y Zou, Richard Socher, Daniel M Cer, and
Christopher D Manning. 2013. Bilingual word em-
beddings for phrase-based machine translation. In
EMNLP. pages 1393–1398.

271


