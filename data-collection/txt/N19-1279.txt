
























































Improving Cross-Domain Chinese Word Segmentation with Word Embeddings


Proceedings of NAACL-HLT 2019, pages 2726–2735
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

2726

Improving Cross-Domain Chinese Word Segmentation with Word
Embeddings

Yuxiao Ye1∗, Yue Zhang2∗†,Weikang Li3, Likun Qiu1†, Jian Sun1
1Alibaba Group, 2Peking University, 3Westlake University

{yuxiao.yyx, likun.qlk, jian.sun}@alibaba-inc.com
yue.zhang@wias.org.cn
wavejkd@pku.edu.cn

Abstract

Cross-domain Chinese Word Segmentation
(CWS) remains a challenge despite recent
progress in neural-based CWS. The limited
amount of annotated data in the target do-
main has been the key obstacle to a satisfac-
tory performance. In this paper, we propose a
semi-supervised word-based approach to im-
proving cross-domain CWS given a baseline
segmenter. Particularly, our model only de-
ploys word embeddings trained on raw text in
the target domain, discarding complex hand-
crafted features and domain-specific dictionar-
ies. Innovative subsampling and negative sam-
pling methods are proposed to derive word
embeddings optimized for CWS. We conduct
experiments on five datasets in special do-
mains, covering domains in novels, medicine,
and patent. Results show that our model can
obviously improve cross-domain CWS, espe-
cially in the segmentation of domain-specific
noun entities. The word F-measure increases
by over 3.0% on four datasets, outperform-
ing state-of-the-art semi-supervised and unsu-
pervised cross-domain CWS approaches with
a large margin. We make our code and data
available on Github.

1 Introduction

Chinese Word Segmentation (CWS) is the first
step for many Chinese Natural Language Process-
ing (NLP) tasks (Cai and Zhao, 2016; Zhao et al.,
2017). Approaches to CWS could be categorized
into two categories: character-based and word-
based. The former treats CWS as a sequence la-
beling problem, labeling each character in a se-
quence with B/I/E/S (Beginning, Internal, End,
Single) labels (Tseng et al., 2005). Traditional
character-based approaches often use Conditional

∗ Yuxiao Ye and Yue Zhang contributed equally to this
work.

†Corresponding authors.

Random Fields (CRF) models to label sequences,
with complex hand-crafted discrete features (Peng
et al., 2004; Tseng et al., 2005). Unlike char-
acter based CWS, word-based CWS operates on
a word-level, directly exploiting word-level fea-
tures. Typical CRF models are replaced with
semi-CRF models, in which labels are assigned
to subsequences instead of characters (Sarawagi
and Cohen, 2005; Liu et al., 2014). Transition-
based approaches have also been used to exploit
larger feature contexts (Zhang and Clark, 2007).
More recent approaches exploit neural networks
including Recurrent Neural Networks (RNN) to
replace hand-crafted discrete features with real-
valued features (Cai and Zhao, 2016; Chen et al.,
2015, 2017).

Existing studies have achieved satisfactory re-
sults for in-domain CWS, with F-scores over
96.0% in the newspaper domain (Chen et al.,
2017). Nevertheless, cross-domain CWS remains
a big challenge (Liu et al., 2014; Liu and Zhang,
2012). The main reason is the lack of anno-
tated data in the target domain, which makes su-
pervised approaches less useful. To tackle this
problem, some unsupervised and semi-supervised
approaches have been proposed. One way is
to exploit complex features including character
types, lexical features and accessor varieties (Wu
et al., 2014), which requires much efforts on fea-
ture engineering. Another way is to deploy ma-
chine learning algorithms including self-training
and model ensemble (Gao and Stephan, 2010; Liu
and Zhang, 2012; Qiu and Zhang, 2015), which is
time-consuming and inefficient.

In this paper, we investigate a different ap-
proach to deploying unsupervised data for cross-
domain CWS, in order to completely break free
from the reliance on manual annotation, complex
feature engineering, and even parametric training
to some extent. We propose a Word-Embedding-



2727

Based CWS (WEB-CWS) model, which aims to
improve the performance of an existing baseline
segmenter in cross-domain CWS. WEB-CWS is
a conceptually simple word-based model, using
word embeddings, which are expected to carry se-
mantic and syntax information (Mitchell and La-
pata, 2010), as the only input of a non-parametric
word segmentor. The basic intuition is that em-
beddings of words within a same context window
should be close to each other (Goldberg and Levy,
2014; Mikolov et al., 2013). If a sequence is in-
correctly segmented, those incorrectly segmented
words are likely to be semantically and syntacti-
cally inconsistent with their surrounding words.
Consequently, the embedding of an incorrectly
segmented word should be far away from embed-
dings of its surrounding words.

Based on the hypothesis above, we propose
WEB-CWS. Word embeddings are first derived
with a CWS-oriented word embedding model with
innovative subsampling and negative sampling
methods. A word-embedding-based decoder is
then used for segmentation, with cosine similar-
ities among word embeddings as the metric for
probability calculation. WEB-CWS is a semi-
supervised model, because it only uses word em-
beddings trained on raw text in the target do-
main, which is first automatically segmented by
the baseline segmenter. The model is also cross-
domain in the sense that it can improve the perfor-
mance of the baseline segmenter, when the source
text for training the baseline segmenter and the tar-
get text to be segmented are in different domains.

The main contributions of this paper include:

• To our knowledge, we are the first to di-
rectly use word embeddings for CWS, with-
out any neural structures, which makes our
model conceptually simpler and run faster.

• We have proposed novel sampling methods
to make the embeddings optimized for CWS,
which has never been used for embedding
training.

• Our model can be used on top of any existing
CWS models to improve their performances,
without the need to re-train those models with
annotated domain specific data.

• On four datasets in different special domains,
our model improves the word F-measure by

more than 3.0%, compared with the state-of-
the-art baseline segmenter. We release our
code and data on Github1.

2 Related Work

Our work is related with existing research
on word-based CWS, cross-domain CWS, and
embedding-based CWS.

2.1 Word-Based CWS

Instead of labeling a sequence character-wise,
word-based CWS tries to pick the most prob-
able segmentation of a sequence. Zhang and
Clark (2007) design a statistical method for word-
based CWS, extracting word-level features di-
rectly from segmented text. The perceptron al-
gorithm (Collins, 2002) is used for training and
beam-search is used for decoding. Cai and Zhao
(2016) use Gated Combination Neural Networks
and LSTM to present both character sequences
and partially segmented word sequences, combin-
ing word scores and link scores for segmentation.
Our work is in line with their work in directly us-
ing word information for CWS. In contrast, our
method is conceptually simpler by directly using
word embeddings. In addition, our work aims
at domain-adaptation, rather than training from
scratch.

2.2 Cross-Domain CWS

Supervised, semi-supervised and unsupervised ap-
proaches have been proposed for domain adapta-
tion for CWS. Chen et al. (2017) use an Adversar-
ial Network to learn shared knowledge for differ-
ent segmentation criteria and domains. This ap-
proach requires annotated data in the target do-
main.

However, one challenge for cross-domain CWS
is the lack of such annotated data. Liu and Zhang
(2012) propose an unsupervised model, in which
they use features derived from character clus-
tering, together with a self-training algorithm to
jointly model CWS and POS-tagging. This ap-
proach is highly time-consuming (Qiu and Zhang,
2015). Another challenge is the segmentation of
domain-specific noun entities. In a task of seg-
menting Chinese novels, Qiu and Zhang (2015)
design a double-propagation algorithm with com-
plex feature templates to iteratively extract noun
entities and their context, to improve segmentation

1 https://github.com/vatile/CWS-NAACL2019



2728

performance. This approach still relies heavily on
feature templates. Similarly, our model does not
require any annotated target data. In contrast to
their work, our model is efficient and feature-free.

2.3 CWS Using Embeddings

There are CWS models deploying embeddings.
Ma and Hinrichs (2015) and Deng and Sun (2018)
propose embedding matching CWS models, in
which embeddings of characters in a sequence
are compared with high dimensional representa-
tions of CWS-specific actions (e.g., separation
and combination) or CWS-specific labels (e.g.,
B/M/E/S). Then each character is labeled accord-
ing to the similarity between its embedding and
the high dimensional representation.

Particularly, Zhou et al. (2017) propose to
use character embeddings trained on a word-based
context to improve the performance of existing
neural CWS models, which is similar to our ap-
proach in terms of making use of CWS-oriented
word embeddings derived with automatically seg-
mented raw corpus. However, in their work, when
doing cross-domain CWS, word embeddings are
fed into the baseline neural model trained on a
large annotated general corpus, with annotated
special domain data as the development set. In our
model, on the contrary, word embeddings are used
directly for CWS with a non-parametric decoder,
which does not require to re-construct the baseline
model, and annotation is not required at all for the
special domain data.

3 Word-Embedding-Based CWS

The overall architecture of our method is shown in
Figure 1. Given a baseline segmenter and a tar-
get domain raw corpus T , we obtain an automat-
ically segmented corpus T

′
by applying the base-

line segmenter to the target corpus. We then ex-
ecute our CWS-oriented word embedding model
(Section 3.1) on T

′
to derive a set of word em-

beddings E. In addition, all tokens from T
′

are
collected as a target domain dictionary D. Finally,
E and D are used to re-segment T with our word-
embedding-based segmenter (Section 3.2).

3.1 CWS-Oriented Word Embedding Model

We use a CWS-oriented model modified from the
Skip-gram model (Mikolov et al., 2013) to derive
word embeddings. A typical Skip-gram model us-
ing negative sampling tries to maximize the fol-

Raw corpus: T

Baseline
segmenter

Segmented corpus: T ’

Embedding
model

Word embeddings: E

WEB-
segmenter

Re-segmented
corpus

Figure 1: The pipeline of WEB-CWS.

lowing objective (Mikolov et al., 2013):

∑
(w,c)∈P

log σ(vw · v>c )+
∑

(w,c′ )∈N

log σ(−vw · v>c′ )

(1)
with P being the set of positive samples (w, c)
consisting of a target word w and a context word
c, N being the set of negative samples (w, c

′
) con-

sisting of a target wordw and a word c
′

drawn ran-
domly from a noise distribution Pn(w), vw being
the word embedding ofw, and σ being the sigmoid
activation function.

Subsampling is applied when choosing the tar-
get word w to reduce training time and to improve
the quality of embeddings of rare words (Mikolov
et al., 2013). For a natural language, the frequency
distribution of all words is expected to obey Zipf’s
law: a word’s frequency is inversely proportional
to its rank in the frequency table (Newman, 2005).
This highly biased distribution makes the training
of the Skip-gram model inefficient, in that very
frequent words can make a large portion of train-
ing samples, but their embeddings may not change
much after being seen for a certain time (Mikolov
et al., 2013). Therefore, a subsampling method is
used by Mikolov et al. (2013), with the probability
for a word w being sampled as:

psub(w) = min(1,

√
�

f(w)
) (2)

where � is an arbitrarily chosen threshold, and
f(w) is the frequency of w.

Since word embeddings in our model are used
for segmentation, we cannot directly use the train-
ing objective in Mikolov et al. (2013), which is
designed for language modeling. To make the
training objective more consistent with the goal
of CWS, we modify the negative sampling Skip-
gram model in various ways, including adding



2729

CWS-oriented negative samples, changing the
method for subsampling multi-character words,
normalizing the dot product of embeddings, and
smoothing the weights of positive and negative
samples in training.

3.1.1 Context Negative Sampling
When training a typical Skip-gram model, a tar-
get word and a word within its context window
are taken together as a positive sample (Mikolov
et al., 2013). From the perspective of CWS, it can
be perceived as teaching the model how to cor-
rectly segment a sequence. From this perspective,
we develop a method to generate negative samples
from a word’s context (i.e., words within the con-
text window), in order to tell the model what the
incorrect segmentations of a sequence are.

Given a target word w and its context C, and
SL/SR as the sequence of characters on the
left/right of w within C, the proposed context neg-
ative sampling method generates negative samples
in the following way: for any substring s

′
of SL

and SR, if s
′

is in the dictionary D but not in C,
(w, s

′
) will be generated as a negative sample.

3.1.2 In-Word Negative Sampling
Another way to generate negative samples con-
cerning CWS is to split multi-character words and
combine its substrings as negative samples. For
instance, given a multi-character target word w =
c1c2c3, supposing that all its substrings are in D,
the proposed in-word negative sampling method
will then generate the following negative samples:
(c1, c2), (c1, c3), (c2, c3), (c1c2, c3) and (c1, c2c3).
By doing so, our model is expected to learn not to
split those multi-character words when segment-
ing.

3.1.3 Subsampling Multi-Character Words
In the Chinese language, there are some frequent
multi-character words consisting of substrings
which are also very frequent words themselves.
For example, the Chinese word ‘dànshı̀ (but)’ can
be decomposed into two words ‘dàn (but)’ and ‘shı̀
(be)’. Due to the nature of the Skip-gram model,
embeddings of frequent words are relatively close
to each other since they co-occur with other words
more frequently. This nature makes our model in-
clined to split such multi-character words when
segmenting. Although the in-word negative sam-
pling method proposed above is expected to pre-
vent our model from incorrectly splitting multi-

character words, we still want our model to pay
more attention to the segmentation of such words.
As a result, for subsampling, we will not discard a
multi-character word w if:

psub(w) <
µ

N

∑
wsub∈S∩D

psub(wsub) (3)

where S is the set of substrings of w, and N is
the size of all wsub ∈ S ∩ D, which is smoothed
by a threshold µ (which is empirically set to 0.5
in our model). By doing so, we can keep those
multi-character words whose substrings are more
frequent words themselves. Our model is thus ex-
pected to learn better how to segment such words
through samples generated with in-word negative
sampling.

3.1.4 Dot Product Normalization

In the original Skip-gram model, the dot product
of embeddings of two words is directly used as
the input for the sigmoid layer (Mikolov et al.,
2013). To make word embeddings derived from
the CWS-oriented word embedding model more
consistent with the metric used for segmentation
as described in Section 3.2.2, we modify the train-
ing objective described in Equation (1) as follows:

∑
(w,c)∈P

log σ(||vw · v>c ||) +
∑

(w,c′ )∈N

log σ(−||vw · v>c′ ||)

(4)

3.1.5 Smoothing Class Weights

For any target word, when training the CWS-
oriented word embedding model, only one posi-
tive sample but many negative samples are gen-
erated. To balance the influence of positive and
negative samples, a different weight is assigned to
each class as follows:

class weight =

{
1.0 , positive

(
Npos
Nneg

+ η)/(1 + η) , negative
(5)

where Npos and Npos are the amount of posi-
tive and negative samples respectively, and η is a
smooth factor. The smooth factor can prevent the
weight of negative samples being too low when
negative samples are much more than positive
samples.



2730

3.2 Word-Embedding-Based Segmentater

In WEB-CWS, we formalize the process of seg-
menting a sequence as a problem of hypotheses-
based Viterbi decoding (Forney, 1973): given
a sequence, generating segmentation hypotheses
character-wise from the first to the last character,
and then searching for the optimal path according
to the predefined metric of probability.

3.2.1 Hypothesis Generation
Given a sentence consisting of n characters S =<
c0 > c1c2...cn < cn+1 > (c0 and cn+1 are mark-
ers of the beginning/end of a sentence), we gener-
ate segmentation hypotheses character-wise from
c0 to cn+1. At each time step t, a hypothesis ht is
defined as:

ht =


SEGt : [w0{c0}w1{c1...cg}...wm{cj ...ck}]

BUFt : [ck+1...ct]
Mt = m+ 1

(6)
which includes a partial segmentation container
SEGt, a buffer container BUFt, and the num-
ber of segmented words Mt. In ht, characters
c0c1...ck are segmented into words w0w1...wm
stored in SEGt; characters ck+1..ct remain un-
segmented and are stored in BUFt. For the initial
hypothesis h0 and the final hypothesis hn+1, the
buffer container will be empty.

Given a character ct+1 and a hypothesis ht, ht+1
can be generated in two ways, by either append-
ing ct+1 to BUFt (t 6= n), or first moving the
sequence in BUFt into SEGt as a new word, and
then appending ct+1 to BUFt (t 6= n). In the for-
mer case:

ht+1 =


SEGt : [w0{c0}...wm{cj ...ck}]

BUFt : [ck+1...ctct+1]
Mt = m+ 1

(7)

In the latter case:

ht+1 =


SEGt = w0{c0}...wm{cj ...ck}wm+1{ck+1...ct}
BUFt = ct+1

Mt = m+ 2

(8)
Particularly, when generating the hypothesis for

cn+1 (the end of sentence marker), the sequence in
BUFn has to be moved into SEGn, and cn+1 also
needs to be moved into SEGn as a new word.

If a word w is not in the dictionary D, we can-
not get its embedding. As a result, any hypothesis
containing w in the segmentation container will
be discarded. Moreover, to reduce search space,
once the size of the sequence in a buffer container
reaches a threshold m (i.e., the maximum word
length), this sequence will be moved into the seg-
mentation container when generating hypotheses
at the next time step.

3.2.2 Probability Calculation
The log probability of a hypothesis ht is defined
as:

log p(ht) =

{
0, t = 0

1
Mt−1 log

∏Mt−1
i=1 p(wi|SEGt, f), t 6= 0

(9)

where f is the window size (e.g., if f = 2,
p(wi|SEGt, f) will be decided by wi−1 and
wi−2).

In WEB-CWS, we use cosine similarity be-
tween embeddings of two words as the met-
ric of probability. Given a hypothesis ht,
p(wi|SEGt, f) is calculated as follows:

p(wi|SEGt, f) =


e0, i = 0

e

1
min(f,i)

min(f,i)∑
j=1

cos(vwi ,vwi−j )
, i 6= 0

(10)

where cos(vwi , vwi−j ) refers to the cosine similar-
ity between embeddings of wi and wi−j .

Given a hypothesis ht, the log probability of
ht+1 can be dynamically computed as:

log p(ht+1) =
1

Mt+1 − 1
((Mt − 1) log p(ht)

+
∑

wi∈{SEGt+1−SEGt}
log p(wi|SEGt+1, f))

(11)

3.2.3 Dynamic Beam-Size and Maximum
Word Length

Theoretically, a sequence of length n can have
at most 2n−1 possible segmentations. By dis-
carding hypotheses containing out-of-vocabulary
(OOV) words and setting the maximum word
length, the search space can be significantly re-
duced. The very limited search space makes dy-
namically deciding the beam-size and the maxi-
mum word length possible.



2731

Given an initial beam-size k, at each time step
t, the segmenter will only keep at most top k hy-
pothesis sorted by log probabilities in a descend-
ing order. Some hypotheses will also be discarded
due to OOV words and the maximum word length
limit. As a result, it is sometimes possible for a
sequence to have no hypothesis at all after some
time steps. Once it happens, the segmenter will
increase the beam-size by 10 and the maximum
word length by 1, and then re-generate hypothesis
from the beginning, till at least one hypothesis is
generated at the final time step.

Dynamic beam-size and maximum word length
ensure that for each sequence, at least one segmen-
tation (the one given by the baseline segmenter)
will be generated as the final segmentation result.
This mechanism can guarantee the efficiency and
reliability of the segmenter at the same time.

3.2.4 Similarity Score Look-up
To improve the decoding speed, we pre-calculate
the cosine similarity of all word pairs co-occurring
at least once in the automatically segmented cor-
pus, and store them in a file (which only consists
of millions of word pairs for a Chinese novel). In
doing so, when decoding, for most word pairs,
we only need to look up to this file for similar-
ity scores, which can significantly improve the de-
coding speed. According to later experiments, this
look-up strategy can cover about 92% of the simi-
larity calculation needed for decoding.

4 Experiments

We conduct experiments on various datasets in dif-
ferent domains to thoroughly evaluate the perfor-
mance of our model.

4.1 Experimental Setup

4.1.1 Datasets
We evaluate our model in terms of cross-domain
CWS on five datasets, including three Chinese
novel datasets (Qiu and Zhang, 2015): DL
(DouLuoDaLu), FR (FanRenXiuXianZhuan) and
ZX (ZhuXian), and two CWS datasets in special
domains (Qiu et al., 2015): DM (dermatology)
and PT (patent). We use the standard split for all
datasets as they are published. Raw test data is
also included for deriving word embeddings.

Statistics of these datasets are shown in Table 1.
Since there are no gold segmentation of full novels
for three Chinese novel datasets, their statistics are

Dataset Sentence (K) Token (K) Character (K)

Full Eval Full Eval Full Eval
DL 40 1 1,982 32 2,867 47
FR 148 1 5,004 17 7,126 25
ZX 59 1 2,131 21 3,006 31
DM 32 1 709 17 1,150 30
PT 17 1 556 34 903 57

Table 1: Statistics of full and evaluation datasets.

based on the segmentation given by the baseline
segmenter.

4.1.2 Pre-Processing

In some studies, pre-processing is applied in or-
der to improve the performance of CWS models,
including substituting consecutive digits and En-
glish letters, Chinese idioms and long words with
unique symbols (Cai and Zhao, 2016; Cai et al.,
2017; Chen et al., 2015). However, we do not de-
ploy such techniques for fair comparison, focus-
ing only on the possible improvements brought
by word embeddings. The only pre-processing
adopted in our model is to first split a sentence
with a set of pre-defined delimiters: characters that
are not Chinese characters, English letters or dig-
its. Those fragments of a sentence are then fed into
the segmenter, and a complete segmented sentence
is returned by reassembling the segmented frag-
ments and delimiters in the original order.

4.1.3 Hyperparameters

Hyperparameters used in our WEB-CWS model
are explained and their values are displayed in Ta-
ble 2. All hyperparameters are tuned on a small
excerpt of ZX, which consists of 300 sentences
(Qiu and Zhang, 2015). It is worth noting that, ac-
cording to Mikolov et al. (2013), for each positive
sample, the optimal number of negative samples
drawn from a noise distribution is usually between
5 to 20. However, in our model, we find that,
for each target word, drawing one negative sample
from a noise distribution is good enough, which
may be caused by the large amount of negative
samples generated by context and in-word nega-
tive sampling. Also, Mikolov et al. (2013) report
that the unigram distribution raised to the 3/4ths
power is better than the uniform distribution for
negative sampling. But in WEB-CWS, using the
uniform distribution leads to better segmentation
results.



2732

H-param Explanation Value

� threshold for overall subsampling 10−5

µ threshold for multi-character word subsampling 0.5

Pn noise distribution for general negative sampling uniform

n number of general negative samples per word 1

d dimension of word embeddings 100

η smoothing factor for class weights 0.2

f window size 4

m initial maximum word length 5

k initial beam-size 10

e number of epochs in Skip-gram training 1

Table 2: Hyperparameters used in WEB-CWS.

4.1.4 Evaluation
For consistency, all segmentation results are au-
tomatically calculated with the script provided in
the SIGHAN Bakeoff (Emerson, 2005) and are re-
ported as word F-measures.

4.2 Baseline Segmenter

Two state-of-the-art CWS models trained on a
People’s Daily corpus in 2000 January are tested.
One is a joint word segmentation and POS-tagging
model (Zhang and Clark, 2010), and the other is a
word-based neural CWS model (Cai et al., 2017).
When training both models, default settings are
used, except that the maximum word length in Cai
et al.’s model is set to 5, which is in line with the
setting of WEB-CWS.

On the evaluation set of PKU (Emerson, 2005),
both models yield comparable results, but on the
evaluation set of DL, Zhang and Clark’s model (F-
measure = 0.905) performs better than Cai et al.’s
model (F-measure = 0.849). It is very possible
that Zhang and Clark’s model can handle cross-
domain CWS more effectively. As a result, we
choose Zhang and Clark’s model as the baseline
segmenter for following experiments.

5 Results

Results in Table 3 show that our WEB-CWS
model can obviously improve CWS on four
datasets in special domains, including DL, FR,
ZX and DM, with an increase of over 3.0% in F-
measure. Those four datasets are all in domains
(novel and dermatology) which are very different
from that of the baseline segmenter (newspaper).
This result suggests that WEB-CWS can effec-
tively improve cross-domain CWS.

However, on another dataset in the special do-
main PT, the improvement is not significant. There

are two possible reasons for this result. First,
the size of PT is the smallest among all datasets,
which may make the quality of word embeddings
unsatisfactory. Second, the PT dataset contains a
huge amount of decimal points (e.g., ‘3.14’), per-
centage signs (e.g., ‘28%’), hyphens (e.g., ‘pMIV-
Pnlp’) and very long English strings (e.g., ‘agct-
gagtcg’), which are all cases that cannot be han-
dled by WEB-CWS without corresponding pre-
processing techniques.

5.1 Comparison with State-of-the-Art
Models

We also compare WEB-CWS with two state-of-
the-art semi-supervised and unsupervised cross-
domain CWS models by Qiu and Zhang (2015)
and Liu and Zhang (2012), both of which use
the same baseline model proposed by Zhang and
Clark (2010) as used in our model. We adopt
the method of combining character clustering and
self-training in Liu and Zhang (2012) with datasets
in our experiments. Results of the model in Qiu
and Zhang (2015) are directly copied from the cor-
responding paper.

Results in Table 3 show that WEB-CWS out-
performs these two state-of-the-art models with a
large margin in terms of F-measure. Particularly,
on the DM dataset, Liu and Zhang’s model only
achieves a relatively low F-score improvement rate
(1.8%), which is likely to be caused by the large
difference between the source and target domains.
This result suggests that WEB-CWS is more ro-
bust to domain dissimilarity compared with self-
training.

5.2 Run Time for Decoding

We test the run time for our decoder on a 3.5 GHz
Intel Core i7 CPU. On all five test sets, the aver-
age decoding speed is 20.3 tokens per millisecond,
when the initial beam-size is set to 10. In the work
of Zhou et al. (2017), the decoding speed of their
model is 14.7 tokens per millisecond for greedy
segmentation. However, these results cannot be
compared directly since they are produced on dif-
ferent machines. Our similarity look-up strategy
is proved to be efficient in improving the decoding
speed.

6 Analysis and Discussion

In order to assess the effect of negative sampling
and subsampling methods, we conduct a series of



2733

Dataset Baseline (%) WEB-CWS (%) IR WEB (%) IR Qiu&Zhang (%) IR Liu&Zhang (%)

DL 90.5 93.5 +3.3 +1.6 +2.1
FR 85.9 89.6 +4.3 +2.9 +2.5
ZX 86.8 89.6 +3.2 +2.2 +2.4
DM 77.9 82.2 +5.5 - +1.8
PT 84.6 85.1 +0.6 - +0.2

Table 3: F-measures of the baseline segmenter and WEB-CWS on datasets in special domains, and F-measure
improvement rates (IR) of WEB-CWS, Qiu and Zhang (2015) and Liu and Zhang (2012).

Model DL (%) FR (%) DM (%)

Baseline 90.5 85.9 77.9
WEB-basic 76.2 72.2 66.6
WEB + c n 92.7 89.3 75.8
WEB + w n 93.0 89.5 76.2
WEB + c w n 93.3 89.2 79.7
WEB + c w n + m s 93.5 89.6 82.2

Table 4: F-measures of WEB-CWS with different sub-
sampling and negative sampling methods.

ablation experiments. A detailed analysis is pre-
sented to understand in what way WEB-CWS can
improve cross-domain CWS. All experiments and
analyses in this section are carried out on three
datasets with most significant improvements in F-
measure: DL, FR and DM.

6.1 Ablation Experiments

In ablation experiments, we study the influence of
two CWS-oriented negative sampling and multi-
character words subsampling. Results in Table
4 show that WEB-CWS using word embeddings
derived with the basic Skip-gram model (‘basic’)
performs obviously worse than the baseline seg-
menter. When CWS-oriented negative sampling
is applied alone, either context (‘c n’) or in-word
(‘w n’) negative sampling, the performance of
WEB-CWS is obviously better than or similar to
that of the baseline segmenter. When both CWS-
oriented negative sampling methods are applied
together (‘c w n’), WEB-CWS is ensured to ob-
viously outperform the baseline segmenter. Also,
when multi-character subsampling (‘m s’) is ap-
plied, the performance of WEB-CWS can further
improve a little.

6.2 Improvements in Noun Entity
Segmentation

To see which words are incorrectly segmented
by the baseline segmenter but correctly by WEB-
CWS, all words occurring at least ten times in the
three datasets are sorted in a descending order,

Word Meaning Pre_base (%) Pre_WEB (%)

nod 0.0 84.6 
beast warrior spirit 18.2 100.0 
glucocorticoid 3.8 76.9 
person name 28.2 97.4 
person name 25.7 94.3 
one on one 33.3 100.0 
to be seen in 34.5 100.0 
cockscomb snake 8.7 73.9 
skin lesions 28.6 92.9 
person name 34.9 98.8 

Table 5: Ten most improved words in terms of segmen-
tation precision. Pre base: segmentation precision by
the baseline segmenter. Pre WEB: segmentation preci-
sion by WEB-CWS.

by improvements in terms of segmentation pre-
cision. Table 5 displays the ten most improved
words. As shown in Table 5, among the ten most
improved words, seven words are domain-specific
noun entities, including person names, disease
names and chemical compound names. For some
noun entities (e.g., glucocorticoid), even if the
baseline segmenter can rarely segment them cor-
rectly, WEB-CWS can still find the correct seg-
mentation in most cases. This result suggests that
WEB-CWS is especially effective in segmenting
domain-specific noun entities.

7 Conclusion

We have proposed WEB-CWS, a semi-supervised
model that can be used to effectively improve
cross-domain CWS. Our model only requires a
baseline segmenter and a raw corpus in the tar-
get domain, deploying only word embeddings for
CWS. WEB-CWS obviously improves the perfor-
mance of the state-of-the-art baseline segmenter
on four datasets in special domains, especially in
segmenting domain-specific noun entities.

Acknowledgments

This paper was partially supported by the Na-
tional Natural Science Foundation of China (No.



2734

61572245). Thanks to You Wang et al. and the
anonymous reviewers for their constructive and in-
sightful comments on this paper.

References

Deng Cai and Hai Zhao. 2016. Neural word seg-
mentation learning for chinese. arXiv preprint
arXiv:1606.04300.

Deng Cai, Hai Zhao, Zhisong Zhang, Yuan Xin,
Yongjian Wu, and Feiyue Huang. 2017. Fast and ac-
curate neural word segmentation for chinese. arXiv
preprint arXiv:1704.07047.

Xinchi Chen, Xipeng Qiu, Chenxi Zhu, Pengfei Liu,
and Xuanjing Huang. 2015. Long short-term mem-
ory neural networks for chinese word segmentation.
In Proceedings of the 2015 Conference on Empiri-
cal Methods in Natural Language Processing, pages
1197–1206.

Xinchi Chen, Zhan Shi, Xipeng Qiu, and Xuanjing
Huang. 2017. Adversarial multi-criteria learning
for chinese word segmentation. arXiv preprint
arXiv:1704.07556.

Michael Collins. 2002. Discriminative training meth-
ods for hidden markov models: Theory and exper-
iments with perceptron algorithms. In Proceedings
of the ACL-02 conference on Empirical methods in
natural language processing-Volume 10, pages 1–8.
Association for Computational Linguistics.

Xiaolong Deng and Yingfei Sun. 2018. An improved
embedding matching model for chinese word seg-
mentation. In 2018 International Conference on Ar-
tificial Intelligence and Big Data (ICAIBD). IEEE.

Thomas Emerson. 2005. The second international chi-
nese word segmentation bakeoff. In Proceedings of
the fourth SIGHAN workshop on Chinese language
Processing.

G David Forney. 1973. The viterbi algorithm. Pro-
ceedings of the IEEE, 61(3):268–278.

Qin Gao and Vogel Stephan. 2010. A multi-layer chi-
nese word segmentation system optimized for out-
of-domain tasks. In CIPS-SIGHAN Joint Confer-
ence on Chinese Language Processing.

Yoav Goldberg and Omer Levy. 2014. Word2vec
explained: Deriving mikolov et al.’s negative-
sampling word-embedding method. arXiv preprint
arXiv:1402.3722.

Yang Liu and Yue Zhang. 2012. Unsupervised domain
adaptation for joint segmentation and pos-tagging.
Proceedings of COLING 2012: Posters, pages 745–
754.

Yijia Liu, Yue Zhang, Wanxiang Che, Ting Liu, and
Fan Wu. 2014. Domain adaptation for crf-based
chinese word segmentation using free annotations.
In Proceedings of the 2014 Conference on Em-
pirical Methods in Natural Language Processing
(EMNLP), pages 864–874.

Jianqiang Ma and Erhard Hinrichs. 2015. Accurate
linear-time chinese word segmentation via embed-
ding matching. In Proceedings of the 53rd Annual
Meeting of the Association for Computational Lin-
guistics and the 7th International Joint Conference
on Natural Language Processing (Volume 1: Long
Papers), volume 1, pages 1733–1743.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111–3119.

Jeff Mitchell and Mirella Lapata. 2010. Composition
in distributional models of semantics. Cognitive sci-
ence, 34(8):1388–1429.

Mark EJ Newman. 2005. Power laws, pareto dis-
tributions and zipf’s law. Contemporary physics,
46(5):323–351.

Fuchun Peng, Fangfang Feng, and Andrew McCallum.
2004. Chinese segmentation and new word detec-
tion using conditional random fields. In Proceed-
ings of the 20th international conference on Compu-
tational Linguistics, page 562. Association for Com-
putational Linguistics.

Likun Qiu, Linlin Shi, and Houfeng Wang. 2015. Con-
struction of chinese dependency tree-bank and anal-
ysis of factors in statistical parsing in various do-
mains. Journal of Chinese Information Processing,
29(5):69–76.

Likun Qiu and Yue Zhang. 2015. Word segmentation
for chinese novels. In AAAI, pages 2440–2446.

Sunita Sarawagi and William W Cohen. 2005. Semi-
markov conditional random fields for information
extraction. In Advances in neural information pro-
cessing systems, pages 1185–1192.

Huihsin Tseng, Pichuan Chang, Galen Andrew, Daniel
Jurafsky, and Christopher Manning. 2005. A condi-
tional random field word segmenter for sighan bake-
off 2005. In Proceedings of the fourth SIGHAN
workshop on Chinese language Processing.

Guohua Wu, Dezhu He, Keli Zhong, Xue Zhou, and
Caixia Yuan. 2014. Leveraging rich linguistic fea-
tures for cross-domain chinese segmentation. In
Proceedings of The Third CIPS-SIGHAN Joint Con-
ference on Chinese Language Processing, pages
101–107.

Yue Zhang and Stephen Clark. 2007. Chinese segmen-
tation with a word-based perceptron algorithm. In



2735

Proceedings of the 45th Annual Meeting of the As-
sociation of Computational Linguistics, pages 840–
847.

Yue Zhang and Stephen Clark. 2010. A fast decoder
for joint word segmentation and pos-tagging using a
single discriminative model. In Proceedings of the
2010 Conference on Empirical Methods in Natural
Language Processing, pages 843–852. Association
for Computational Linguistics.

Hai Zhao, Deng Cai, Yang Xin, Yuzhu Wang, and
Zhongye Jia. 2017. A hybrid model for chi-
nese spelling check. ACM Transactions on Asian
and Low-Resource Language Information Process-
ing (TALLIP), 16(3):21.

Hao Zhou, Zhenting Yu, Yue Zhang, Shujian Huang,
XIN-YU DAI, and Jiajun Chen. 2017. Word-context
character embeddings for chinese word segmenta-
tion. In Proceedings of the 2017 Conference on
Empirical Methods in Natural Language Process-
ing, pages 760–766.


