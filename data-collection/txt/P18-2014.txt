



















































A Walk-based Model on Entity Graphs for Relation Extraction


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 81–88
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

81

A Walk-based Model on Entity Graphs for Relation Extraction

Fenia Christopoulou1,3, Makoto Miwa2,3, Sophia Ananiadou1,3

1National Centre for Text Mining
1School of Computer Science, The University of Manchester, United Kingdom

2Toyota Technological Institute, Nagoya, 468-8511, Japan
3Artificial Intelligence Research Center (AIRC),

National Institute of Advanced Industrial Science and Technology (AIST), Japan
{efstathia.christopoulou, sophia.ananiadou}@manchester.ac.uk

makoto-miwa@toyota-ti.ac.jp

Abstract
We present a novel graph-based neural
network model for relation extraction. Our
model treats multiple pairs in a sentence
simultaneously and considers interactions
among them. All the entities in a sentence
are placed as nodes in a fully-connected
graph structure. The edges are represented
with position-aware contexts around the
entity pairs. In order to consider differ-
ent relation paths between two entities,
we construct up to l-length walks between
each pair. The resulting walks are merged
and iteratively used to update the edge rep-
resentations into longer walks representa-
tions. We show that the model achieves
performance comparable to the state-of-
the-art systems on the ACE 2005 dataset
without using any external tools.

1 Introduction

Relation extraction (RE) is a task of identifying
typed relations between known entity mentions
in a sentence. Most existing RE models treat
each relation in a sentence individually (Miwa
and Bansal, 2016; Nguyen and Grishman, 2015).
However, a sentence typically contains multiple
relations between entity mentions. RE models
need to consider these pairs simultaneously to
model the dependencies among them. The relation
between a pair of interest (namely “target” pair)
can be influenced by other pairs in the same sen-
tence. The example illustrated in Figure 1 explains
this phenomenon. The relation between the pair of
interest Toefting and capital, can be extracted di-
rectly from the target entities or indirectly by in-
corporating information from other related pairs
in the sentence. The person entity (PER) Toeft-
ing is directly related with teammates through the

Toefting was convicted of assaulting a pair of workers during
PER

 a night out with national squad teammates in the capital  ...
PER GPE

PER-SOC
PHYS

PHYS

Figure 1: Relation examples from ACE (Auto-
matic Content Extraction) 2005 dataset (Dodding-
ton et al., 2004).

preposition with. Similarly, teammates is directly
related with the geopolitical entity (GPE) capital
through the preposition in. Toefting and capital
can be directly related through in or indirectly re-
lated through teammates. Substantially, the path
from Toefting to teammates to capital can addi-
tionally support the relation between Toefting and
capital.

Multiple relations in a sentence between entity
mentions can be represented as a graph. Neural
graph-based models have shown significant im-
provement in modelling graphs over traditional
feature-based approaches in several tasks. They
are most commonly applied on knowledge graphs
(KG) for knowledge graph completion (Jiang
et al., 2017) and the creation of knowledge graph
embeddings (Wang et al., 2017; Shi and Weninger,
2017). These models rely on paths between ex-
isting relations in order to infer new associations
between entities in KGs. However, for relation
extraction from a sentence, related pairs are not
predefined and consequently all entity pairs need
to be considered to extract relations. In addition,
state-of-the-art RE models sometimes depend on
external syntactic tools to build the shortest depen-
dency path (SDP) between two entities in a sen-
tence (Xu et al., 2015; Miwa and Bansal, 2016).
This dependence on external tools leads to domain
dependent models.



82

In this study, we propose a neural relation ex-
traction model based on an entity graph, where
entity mentions constitute the nodes and directed
edges correspond to ordered pairs of entity men-
tions. The overview of the model is shown in
Figure 2. We initialize the representation of an
edge (an ordered pair of entity mentions) from the
representations of the entity mentions and their
context. The context representation is achieved
by employing an attention mechanism on context
words. We then use an iterative process to aggre-
gate up-to l-length walk representations between
two entities into a single representation, which
corresponds to the final representation of the edge.

The contributions of our model can be summa-
rized as follows:
• We propose a graph walk based neural model

that considers multiple entity pairs in relation
extraction from a sentence.
• We propose an iterative algorithm to form a

single representation for up-to l-length walks
between the entities of a pair.
• We show that our model performs compara-

bly to the state-of-the-art without the use of
external syntactic tools.

2 Proposed Walk-based Model

The goal of the RE task is given a sentence, en-
tity mentions and their semantic types, to extract
and classify all related entity pairs (target pairs) in
the sentence. The proposed model consists of five
stacked layers: embedding layer, BLSTM Layer,
edge representation layer, walk aggregation layer
and finally a classification layer.

As shown in Figure 2, the model receives word
representations and produces simultaneously a
representation for each pair in the sentence. These
representations combine the target pair, its context
words, their relative positions to the pair entities
and walks between them. During classification
they are used to predict the relation type of each
pair.

2.1 Embedding Layer

The embedding layer involves the creation of nw,
nt, np-dimensional vectors which are assigned to
words, semantic entity types and relative positions
to the target pairs. We map all words and seman-
tic types into real-valued vectors w and t respec-
tively. Relative positions to target entities are cre-
ated based on the position of words in the sen-

Attention

...

e2w3 w5 e3 e1
context target

Attention

Linear

BLSTM

w6w2 w3 w4 w5w1
FACPER

Linear

e3

e1 e3e2
e1

e3 e2

Embed 
Layer

Edge 
Layer

PER
e3e2e1

...

Interpolation

...

e1
e2

blstm

pos1
pos2

type

Softmax

[ e1, e2 ] 

Walk 
Layer

e3w3 e2 w5 e1
context target

[ e1, e3 ]

Bilinear

Figure 2: Overview of the walk-based model.

tence. In the example of Figure 1, the relative po-
sition of teammates to capital is −3 and the rela-
tive position of teammates to Toefting is +16. We
embed real-valued vectors p to these positions.

2.2 Bidirectional LSTM Layer

The word representations of each sentence are
fed into a Bidirectional Long-short Term Memory
(BLSTM) layer, which encodes the context rep-
resentation for every word. The BLSTM outputs
new word-level representations h (Hochreiter and
Schmidhuber, 1997) that consider the sequence of
words.

We avoid encoding target pair-dependent infor-
mation in this BLSTM layer. This has two advan-
tages: (i) the computational cost is reduced as this
computation is repeated based on the number of
sentences instead of the number of pairs, (ii) we
can share the sequence layer among the pairs of a
sentence. The second advantage is particularly im-
portant as it enables the model to indirectly learn
hidden dependencies between the related pairs in
the same sentence.

For each word t in the sentence, we con-
catenate the two representations from left-to-right
and right-to-left pass of the LSTM into a ne-
dimensional vector, et = [

−→
ht;
←−
ht].



83

2.3 Edge Representation Layer
The output word representations of the BLSTM
are further divided into two parts: (i) target pair
representations and (ii) target pair-specific context
representations. The context of a target pair can be
expressed as all words in the sentence that are not
part of the entity mentions. We represent a related
pair as described below.

A target pair contains two entities ei and
ej . If an entity consists of N words, we cre-
ate its BLSTM representation as the average of
the BLSTM representations of the corresponding
words, e = 1|I|

∑
i∈I ei, where I is a set with the

word indices inside entity e.
We first create a representation for each pair en-

tity and then we construct the representation for
the context of the pair. The representation of an
entity ei is the concatenation of its BLSTM repre-
sentation ei, the representation of its entity type
ti and the representation of its relative position
to entity ej , pij . Similarly, for entity ej we use
its relative position to entity ei, pji. Finally, the
representations of the pair entities are as follows:
vi = [ei; ti;pij ] and vj = [ej ; tj ;pji].

The next step involves the construction of the
representation of the context for this pair. For
each context word wz of the target pair ei, ej ,
we concatenate its BLSTM representation ez , its
semantic type representation tz and two relative
position representations: to target entity ei, pzi
and to target entity ej , pzj . The final represen-
tation for a context word wz of a target pair is,
vijz = [ez; tz;pzi;pzj ]. For a sentence, the con-
text representations for all entity pairs can be ex-
pressed as a three-dimensional matrix C, where
rows and columns correspond to entities and the
depth corresponds to the context words.

The context words representations of each tar-
get pair are then compiled into a single represen-
tation with an attention mechanism. Following the
method proposed in Zhou et al. (2016), we calcu-
late weights for the context words of the target-
pair and compute their weighted average,

u = q> tanh(Cij),

α = softmax(u),

cij = Cij α
>,

(1)

where q ∈ Rnd , nd = ne + nt + 2np de-
notes a trainable attention vector, α is the attended
weights vector and cij ∈ Rnd is the context rep-
resentation of the pair as resulted by the weighted

average. This attention mechanism is independent
of the relation type. We leave relation-dependent
attention as future work.

Finally, we concatenate the representations of
the target entities and their context (∈ Rnm). We
use a fully connected linear layer, Ws ∈ Rnm×ns
with ns < nm to reduce the dimensionality of the
resulting vector. This corresponds to the represen-
tation of an edge or a one-length walk between
nodes i and j: v(1)ij = Ws [vi;vj ; cij ] ∈ Rns .

2.4 Walk Aggregation Layer

Our main aim is to support the relation between
an entity pair by using chains of intermediate re-
lations between the pair entities. Thus, the goal of
this layer is to generate a single representation for
a finite number of different lengths walks between
two target entities. To achieve this, we represent
a sentence as a directed graph, where the entities
constitute the graph nodes and edges correspond to
the representation of the relation between the two
nodes. The representation of one-length walk be-
tween a target pair v(1)ij , serves as a building block
in order to create and aggregate representations for
one-to-l-length walks between the pair. The walk-
based algorithm can be seen as a two-step process:
walk construction and walk aggregation. During
the first step, two consecutive edges in the graph
are combined using a modified bilinear transfor-
mation,

f(v
(λ)
ik ,v

(λ)
kj ) = σ

(
v
(λ)
ik � (Wb v

(λ)
kj )
)
, (2)

where v(λ)ij ∈ Rnb corresponds to walks repre-
sentation of lengths one-to-λ between entities ei
and ej , � represents element-wise multiplication,
σ is the sigmoid non-linear function and Wb ∈
Rnb×nb is a trainable weight matrix. This equa-
tion results in walks of lengths two-to-2λ.

In the walk aggregation step, we linearly com-
bine the initial walks (length one-to-λ) and the ex-
tended walks (length two-to-2λ),

v
(2λ)
ij = βv

(λ)
ij + (1− β)

∑
k 6=i,j

f(v
(λ)
ik ,v

(λ)
kj ), (3)

where β is a weight that indicates the importance
of the shorter walks. Overall, we create a represen-
tation for walks of length one-to-two using Equa-
tion (3) and λ = 1. We then create a representation
for walks of length one-to-four by re-applying the



84

equation with λ = 2. We repeat this process un-
til the desired maximum walk length is reached,
which is equivalent to 2λ = l.

2.5 Classification Layer
For the final layer of the network, we pass the re-
sulted pair representation into a fully connected
layer with a softmax function,

y = softmax(Wrv
(l)
ij + br), (4)

where Wr ∈ Rnb×nr is the weight matrix, nr is
the total number of relation types and br is the bias
vector.

We use in total 2r+1 classes in order to consider
both directions for every pair, i.e., left-to-right and
right-to-left. The first argument appears first in a
sentence in a left-to-right relation while the second
argument appears first in a right-to-left relation.
The additional class corresponds to non-related
pairs, namely “no relation” class. We choose the
most confident prediction for each direction and
choose the positive and most confident prediction
when the predictions contradict each other.

3 Experiments

3.1 Dataset
We evaluate the performance of our model on
ACE 20051 for the task of relation extraction.
ACE 2005 includes 7 entity types and 6 relation
types between named entities. We follow the pre-
processing described in Miwa and Bansal (2016).

3.2 Experimental Settings
We implemented our model using the Chainer li-
brary (Tokui et al., 2015).2 The model was trained
with Adam optimizer (Kingma and Ba, 2015).
We initialized the word representations with ex-
isting pre-trained embeddings with dimensionality
of 200.3 Our model did not use any external tools
except these embeddings.

The forget bias of the LSTM layer was initial-
ized with a value equal to one following the work
of Jozefowicz et al. (2015). We use a batchsize of
10 sentences and fix the pair representation dimen-
sionality to 100. We use gradient clipping, dropout
on the embedding and output layers and L2 regu-
larization without regularizing the biases, to avoid

1https://catalog.ldc.upenn.edu/
ldc2006t06

2https://chainer.org/
3https://github.com/tticoin/LSTM-ER

Model P R F1 (%)

SPTree 70.1 61.2 65.3
Baseline 72.5 53.3 61.4∗

No walks l = 1 71.9 55.6 62.7
+ Walks l = 2 69.9 58.4 63.6�

+ Walks l = 4 69.7 59.5 64.2�

+ Walks l = 8 71.5 55.3 62.4

Table 1: Relation extraction performance on ACE
2005 test dataset. * denotes significance at p <
0.05 compared to SPTree, � denotes significance
at p < 0.05 compared to the Baseline.

overfitting. We also incorporate early stopping
with patience equal to five, to chose the number
of training epochs and parameter averaging. We
tune the model hyper-parameters on the respective
development set using the RoBO Toolkit (Klein
et al., 2017). Please refer to the supplementary
material for the values.

We extract all possible pairs in a sentence based
on the number of entities it contains. If a pair is
not found in the corpus, it is assigned the “no re-
lation” class. We report the micro precision, recall
and F1 score following Miwa and Bansal (2016)
and Nguyen and Grishman (2015).

4 Results

Table 1 illustrates the performance of our pro-
posed model in comparison with SPTree sys-
tem Miwa and Bansal (2016) on ACE 2005. We
use the same data split with SPTree to compare
with their model. We retrained their model with
gold entities in order to compare the performances
on the relation extraction task. The Baseline corre-
sponds to a model that classifies relations by using
only the representations of entities in a target pair.

As it can be observed from the table, the Base-
line model achieves the lowest F1 score between
the proposed models. By incorporating attention
we can further improve the performance by 1.3
percent point (pp). The addition of 2-length walks
further improves performance (0.9 pp). The best
results among the proposed models are achieved
for maximum 4-length walks. By using up-to
8-length walks the performance drops almost by
2 pp. We also compared our performance with
Nguyen and Grishman (2015) (CNN) using their
data split.4 For the comparison, we applied our

4The authors kindly provided us with the data split.

https://catalog.ldc.upenn.edu/ldc2006t06
https://catalog.ldc.upenn.edu/ldc2006t06
https://chainer.org/
https://github.com/tticoin/LSTM-ER


85

# Entities l = 1 l = 2 l = 4 l = 8

2 71.2 69.8 72.9 71.0
3 70.1 67.5 67.8 63.5∗

[4, 6) 56.5 59.7 59.3 59.9
[6, 12) 59.2 64.2∗ 62.2 60.4
[12, 23) 54.7 59.3 62.3∗ 55.0

Table 2: Relation extraction performance (F1 %)
on ACE 2005 development set for different num-
ber of entities. * denotes significance at p < 0.05
compared to l = 1.

best performing model (l = 4).5 The obtained per-
formance is 65.8 / 58.4 / 61.9 in terms of P / R /
F1 (%) respectively. In comparison with the per-
formance of the CNN model, 71.5 / 53.9 / 61.3,
we observe a large improvement in recall which
results in 0.6 pp F1 increase.

We performed the Approximate Randomization
test (Noreen, 1989) on the results. The best walks
model has no statistically significant difference
with the state-of-the-art SPTree model as in Ta-
ble 1. This indicates that the proposed model can
achieve comparable performance without any ex-
ternal syntactic tools.

Finally, we show the performance of the pro-
posed model as a function of the number of enti-
ties in a sentence. Results in Table 2 reveal that
for multi-pair sentences the model performs sig-
nificantly better compared to the no-walks mod-
els, proving the effectiveness of the method. Ad-
ditionally, it is observed that for more entity pairs,
longer walks seem to be required. However, very
long walks result to reduced performance (l = 8).

5 Related Work

Traditionally, relation extraction approaches have
incorporated a large variety of hand-crafted fea-
tures to represent related entity pairs (Hermann
and Blunsom, 2013; Miwa and Sasaki, 2014;
Nguyen and Grishman, 2014; Gormley et al.,
2015). Recent models instead employ neural net-
work architectures and achieve state-of-the-art re-
sults without heavy feature engineering. Neu-
ral network techniques can be categorized into
recurrent neural networks (RNNs) and convolu-
tional neural networks (CNNs). The former is

5We kept the same parameters when we apply our model
to the this data split. We did not remove any negative exam-
ples unlike the CNN model.

able to encode linguistic and syntactic properties
of long word sequences, making them preferable
for sequence-related tasks, e.g. natural language
generation (Goyal et al., 2016), machine transla-
tion (Sutskever et al., 2014).

State-of-the-art systems have proved to achieve
good performance on relation extraction using
RNNs (Cai et al., 2016; Miwa and Bansal, 2016;
Xu et al., 2016; Liu et al., 2015). Nevertheless,
most approaches do not take into consideration the
dependencies between relations in a single sen-
tence (dos Santos et al., 2015; Nguyen and Grish-
man, 2015) and treat each pair separately. Cur-
rent graph-based models are applied on knowl-
edge graphs for distantly supervised relation ex-
traction (Zeng et al., 2017). Graphs are defined
on semantic types in their method, whereas we
built entity-based graphs in sentences. Other ap-
proaches also treat multiple relations in a sen-
tence (Gupta et al., 2016; Miwa and Sasaki, 2014;
Li and Ji, 2014), but they fail to model long walks
between entity mentions.

6 Conclusions

We proposed a novel neural network model for
simultaneous sentence-level extraction of related
pairs. Our model exploits target and context
pair-specific representations and creates pair rep-
resentations that encode up-to l-length walks be-
tween the entities of the pair. We compared our
model with the state-of-the-art models and ob-
served comparable performance on the ACE2005
dataset without any external syntactic tools. The
characteristics of the proposed approach are sum-
marized in three factors: the encoding of depen-
dencies between relations, the ability to represent
multiple walks in the form of vectors and the in-
dependence from external tools. Future work will
aim at the construction of an end-to-end relation
extraction system as well as application to differ-
ent types of datasets.

Acknowledgments

This research has been carried out with funding
from AIRC/AIST, the James Elson Studentship
Award, BBSRC grant BB/P025684/1 and MRC
MR/N00583X/1. Results were obtained from a
project commissioned by the New Energy and
Industrial Technology Development Organization
(NEDO). We would finally like to thank the
anonymous reviewers for their helpful comments.



86

References
Rui Cai, Xiaodong Zhang, and Houfeng Wang. 2016.

Bidirectional recurrent convolutional neural network
for relation classification. In Proceedings of the
54th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), vol-
ume 1, pages 756–765.

George R Doddington, Alexis Mitchell, Mark A Przy-
bocki, Lance A Ramshaw, Stephanie Strassel, and
Ralph M Weischedel. 2004. The automatic con-
tent extraction (ace) program-tasks, data, and eval-
uation. In Proceedings of the Fourth International
Conference on Language Resources and Evaluation
(LREC), volume 2, page 1.

Matthew R. Gormley, Mo Yu, and Mark Dredze. 2015.
Improved relation extraction with feature-rich com-
positional embedding models. In Proceedings of the
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 1774–1784. As-
sociation for Computational Linguistics.

Raghav Goyal, Marc Dymetman, and Eric Gaussier.
2016. Natural language generation through
character-based rnns with finite-state prior knowl-
edge. In Proceedings of COLING, the 26th Inter-
national Conference on Computational Linguistics:
Technical Papers, pages 1083–1092.

Pankaj Gupta, Hinrich Schütze, and Bernt Andrassy.
2016. Table filling multi-task recurrent neural net-
work for joint entity and relation extraction. In Pro-
ceedings of COLING, the 26th International Confer-
ence on Computational Linguistics: Technical Pa-
pers, pages 2537–2547.

Karl Moritz Hermann and Phil Blunsom. 2013. The
role of syntax in vector space models of composi-
tional semantics. In Proceedings of the 51st Annual
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers), volume 1, pages
894–904.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Xiaotian Jiang, Quan Wang, Baoyuan Qi, Yongqin Qiu,
Peng Li, and Bin Wang. 2017. Attentive path com-
bination for knowledge graph completion. In Asian
Conference on Machine Learning, pages 590–605.

Rafal Jozefowicz, Wojciech Zaremba, and Ilya
Sutskever. 2015. An empirical exploration of recur-
rent network architectures. In International Confer-
ence on Machine Learning, pages 2342–2350.

Diederik P Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization.

A. Klein, S. Falkner, N. Mansur, and F. Hutter. 2017.
Robo: A flexible and robust bayesian optimization
framework in python. In Proceedings of Workshop
on Bayesian Optimization in the Conference on Neu-
ral Information Processing Systems (NIPS).

Qi Li and Heng Ji. 2014. Incremental joint extrac-
tion of entity mentions and relations. In Proceed-
ings of the 52nd Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 402–412. Association for Computa-
tional Linguistics.

Yang Liu, Furu Wei, Sujian Li, Heng Ji, Ming Zhou,
and Houfeng WANG. 2015. A dependency-based
neural network for relation classification. In Pro-
ceedings of the 53rd Annual Meeting of the Associ-
ation for Computational Linguistics and the 7th In-
ternational Joint Conference on Natural Language
Processing (Volume 2: Short Papers), pages 285–
290. Association for Computational Linguistics.

Makoto Miwa and Mohit Bansal. 2016. End-to-end re-
lation extraction using lstms on sequences and tree
structures. In Proceedings of the 54th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 1105–1116. Asso-
ciation for Computational Linguistics.

Makoto Miwa and Yutaka Sasaki. 2014. Modeling
joint entity and relation extraction with table rep-
resentation. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 1858–1869. Association for Com-
putational Linguistics.

Thien Huu Nguyen and Ralph Grishman. 2014. Em-
ploying word representations and regularization for
domain adaptation of relation extraction. In Pro-
ceedings of the 52nd Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers), volume 2, pages 68–74.

Thien Huu Nguyen and Ralph Grishman. 2015. Rela-
tion extraction: Perspective from convolutional neu-
ral networks. In Proceedings of the 1st Workshop
on Vector Space Modeling for Natural Language
Processing, pages 39–48. Association for Compu-
tational Linguistics.

Eric W Noreen. 1989. Computer-intensive methods for
testing hypotheses. Wiley New York.

Cicero dos Santos, Bing Xiang, and Bowen Zhou.
2015. Classifying relations by ranking with con-
volutional neural networks. In Proceedings of the
53rd Annual Meeting of the Association for Compu-
tational Linguistics and the 7th International Joint
Conference on Natural Language Processing (Vol-
ume 1: Long Papers), pages 626–634. Association
for Computational Linguistics.

Baoxu Shi and Tim Weninger. 2017. Proje: Embed-
ding projection for knowledge graph completion. In
Proceedings of AAAI Conference on Artificial Intel-
ligence, volume 17, pages 1236–1242.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.



87

Seiya Tokui, Kenta Oono, Shohei Hido, and Justin
Clayton. 2015. Chainer: a next-generation open
source framework for deep learning. In Proceedings
of Workshop on Machine Learning Systems (Learn-
ingSys) in the twenty-ninth Annual Conference on
Neural Information Processing Systems (NIPS), vol-
ume 5.

Quan Wang, Zhendong Mao, Bin Wang, and Li Guo.
2017. Knowledge graph embedding: A survey of
approaches and applications. IEEE Transactions
on Knowledge and Data Engineering, 29(12):2724–
2743.

Kun Xu, Yansong Feng, Songfang Huang, and
Dongyan Zhao. 2015. Semantic relation classifi-
cation via convolutional neural networks with sim-
ple negative sampling. In Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 536–540. Association
for Computational Linguistics.

Yan Xu, Ran Jia, Lili Mou, Ge Li, Yunchuan Chen,
Yangyang Lu, and Zhi Jin. 2016. Improved rela-
tion classification by deep recurrent neural networks
with data augmentation. In Proceedings of COL-
ING, the 26th International Conference on Compu-
tational Linguistics: Technical Papers, pages 1461–
1470.

Wenyuan Zeng, Yankai Lin, Zhiyuan Liu, and
Maosong Sun. 2017. Incorporating relation paths
in neural relation extraction. In Proceedings of the
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 1768–1777. As-
sociation for Computational Linguistics.

Peng Zhou, Wei Shi, Jun Tian, Zhenyu Qi, Bingchen
Li, Hongwei Hao, and Bo Xu. 2016. Attention-
based bidirectional long short-term memory net-
works for relation classification. In Proceedings of
the 54th Annual Meeting of the Association for Com-
putational Linguistics (Volume 2: Short Papers),
volume 2, pages 207–212.

A Hyper-parameter Settings

We tuned our proposed model using the RoBO
toolkit (https://github.com/automl/
RoBO). Table 3 provides the selected options we
used for tuning the model.

Optimization Options

Optimization method Bohamiann
Maximizer scipy
Acquisition function log ei
Number of iterations 50
Initial points 3

Table 3: Hyper-parameters optimization options.

The parameters that gave the best performance
for the different models can be found in Tables 4a-
4e.

Parameter Baseline
Position dimension np 25
Type dimension nt 15
LSTM dimension ne 100
Input layer dropout 0.3
Output layer dropout 0.03
Learning rate 0.0018
Regularization 3.2 · 10−5
Gradient clipping 25.63

(a)

Parameter l = 1
Position dimension np 25
Type dimension nt 25
LSTM dimension ne 100
Input layer dropout 0.13
Output layer dropout 0.38
Learning rate 0.0017
Regularization 6.1 · 10−5
Gradient clipping 30

(b)

Parameter l = 2
Position dimension np 25
Type dimension nt 20
LSTM dimension ne 100
β 0.72
Input layer dropout 0.25
Output layer dropout 0.37
Learning rate 0.003
Regularization 0.0001
Gradient clipping 8.6

(c)

Parameter l = 4
Position dimension np 25
Type dimension nt 20
LSTM dimension ne 100
β 0.77
Input layer dropout 0.11
Output layer dropout 0.32
Learning rate 0.002
Regularization 5.7 · 10−5
Gradient clipping 24.4

(d)

https://github.com/automl/RoBO
https://github.com/automl/RoBO


88

Parameter l = 8
Position dimension np 25
Type dimension nt 20
LSTM dimension ne 100
β 0.88
Input layer dropout 0.49
Output layer dropout 0.36
Learning rate 0.001
Regularization 1.88 · 10−5
Gradient clipping 10.5

(e)

Table 4: Best hyper-parameters settings for pro-
posed models.


