



















































The Referential Reader: A Recurrent Entity Network for Anaphora Resolution


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 5918–5925
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

5918

The Referential Reader:
A Recurrent Entity Network for Anaphora Resolution

Fei Liu ∗
The University of Melbourne

Victoria, Australia

Luke Zettlemoyer
Facebook AI Research

University of Washington
Seattle, USA

Jacob Eisenstein
Facebook AI Research

Seattle, USA

Abstract

We present a new architecture for storing and
accessing entity mentions during online text
processing. While reading the text, entity ref-
erences are identified, and may be stored by
either updating or overwriting a cell in a fixed-
length memory. The update operation implies
coreference with the other mentions that are
stored in the same cell; the overwrite opera-
tion causes these mentions to be forgotten. By
encoding the memory operations as differen-
tiable gates, it is possible to train the model
end-to-end, using both a supervised anaphora
resolution objective as well as a supplementary
language modeling objective. Evaluation on
a dataset of pronoun-name anaphora demon-
strates strong performance with purely incre-
mental text processing.

1 Introduction

Reference resolution is fundamental to language
understanding. Current state-of-the-art systems
employ the mention-pair model, in which a clas-
sifier is applied to all pairs of spans (e.g., Lee
et al., 2017). This approach is expensive in both
computation and labeled data, and it is also cogni-
tively implausible: human readers interpret text in
a nearly online fashion (Tanenhaus et al., 1995).

We present a new method for reference resolu-
tion, which reads the text left-to-right while stor-
ing entities in a fixed-size working memory (Fig-
ure 1). As each token is encountered, the reader
must decide whether to: (a) link the token to an
existing memory, thereby creating a coreference
link, (b) overwrite an existing memory and store
a new entity, or (c) disregard the token and move
ahead. As memories are reused, their salience in-
creases, making them less likely to be overwritten.

This online model for coreference resolution is
based on the memory network architecture (We-

∗Work carried out as an intern at Facebook AI Research

M(1)

M(2)

Ismael told Captain Ahab he saw Moby-Dick

o
(1)
1 u

(1)
5

o
(2)
3 u

(2)
4 o

(2)
7

self link

coreferential
not coreferential

7

Figure 1: A referential reader with two memory cells.
Overwrite and update are indicated by o(i)t and u

(i)
t ; in

practice, these operations are continuous gates. Thick-
ness and color intensity of edges between memory cells
at neighboring steps indicate memory salience; 7 indi-
cates an overwrite.

ston et al., 2015), in which memory operations are
differentiable, enabling end-to-end training from
gold anaphora resolution data. Furthermore, the
memory can be combined with a recurrent hidden
state, enabling prediction of the next word. This
makes it possible to train the model from unla-
beled data using a language modeling objective.

To summarize, we present a model that pro-
cesses the text incrementally, resolving references
on the fly (Schlangen et al., 2009). The model
yields promising results on the GAP dataset of
pronoun-name references.1

2 Model

For a given document consisting of a sequence of
tokens {wt}Tt=1, we represent text at two levels:
• Tokens: represented as {xt}Tt=1, where the

vector xt ∈ RDx is computed from any
token-level encoder.
• Entities: represented by a fixed-length mem-

oryMt = {(k(i)t ,v
(i)
t , s

(i)
t )}Ni=1, where each

memory is a tuple of a key k(i)t ∈ RDk , a
1Code available at: https://github.com/

liufly/refreader

https://github.com/liufly/refreader
https://github.com/liufly/refreader


5919

hidden state ht−1 ht ht+1

memory unit Mt−1 Mt Mt+1

pre-recurrent h̃t−1 h̃t h̃t+1

input embeddings xt−1 xt xt+1

Figure 2: Overview of the model architecture.

value v(i)t ∈ RDv , and a salience s
(i)
t ∈ [0, 1].

There are two components to the model: the
memory unit, which stores and tracks the states
of the entities in the text; and the recurrent unit,
which controls the memory via a set of gates. An
overview is presented in Figure 2.

2.1 Recurrent Unit

The recurrent unit is inspired by the Coreferential-
GRU, in which the current hidden state of a gated
recurrent unit (GRU; Chung et al., 2014) is com-
bined with the state at the time of the most re-
cent mention of the current entity (Dhingra et al.,
2018). However, instead of relying on the coref-
erential structure to construct a dynamic compu-
tational graph, we use an external memory unit to
keep track of previously mentioned entities and let
the model learn to decide what to store in each cell.

The memory state is summarized by the
weighted sum over values: mt =

∑N
i=1 s

(i)v
(i)
t .

The current hidden state and the input are
combined into a pre-recurrent state h̃t =
tanh(Wht−1 + Uxt), which is used to control
the memory operations; the matrices W and U
are trained parameters. To compute the next hid-
den state ht, we perform a recurrent update:

ht = GRU(xt, (1− ct)× ht−1 + ct ×mt) (1)

where ct = min(σ(Wch̃t + bc),
∑

i s
(i)
t ) is a gate

that measures the importance of the memory net-
work to the current token. This gate is a sigmoid
function of the pre-recurrent state, clipped by the
sum of memory saliences. This ensures that the
memory network is used only when at least some
memories are salient.

2.2 Memory Unit

The memory gates are a collection of scalars
{(u(i)t , o

(i)
t )}Ni=1, indicating updates and

overwrites to cell i at token wt. To compute

these gates, we first determine whether wt is an
entity mention, using a sigmoid-activated gate
et = σ(φe · h̃t), where φe ∈ RDh is a learnable
vector. We next decide whether wt refers to a pre-
viously mentioned entity: rt = σ(φr · h̃t)× et,
where φr ∈ RDh is a learnable vector.

Updating existing entities. If wt is a referential
entity mention (rt ≈ 1), it may refer to an entity
in the memory. To compute the compatibility be-
tween wt and each memory, we first summarize
the current state as a query vector, qt = fq(h̃t),
where fq is a two-layer feed-forward network.
The query vector is then combined with the mem-
ory keys and the reference gate to obtain atten-
tion scores, α(i)t = rt × SoftMax(k

(i)
t−1 · qt + b),

where the softmax is computed over all cells i, and
b is a learnable bias term, inversely proportional to
the likelihood of introducing a new entity. The up-
date gate is then set equal to the query match α(i)t ,
clipped by the salience, u(i)t = min(α

(i)
t , 2s

(i)
t−1).

The upper bound of 2s(i)t−1 ensures that an update
can at most triple the salience of a memory.

Storing new entities. Overwrite operations are
used to store new entities. The total amount
to overwrite is õt = et −

∑N
i=1 u

(i)
t , which is

the difference between the entity gate and
the sum of the update gates. We pre-
fer to overwrite the memory with the lowest
salience. This decision is made differentiable us-
ing the Gumbel-softmax distribution (GSM; Jang
et al., 2017), o(i)t = õt × GSM(i)(−st−1, τ) and
st = {s(i)t }Ni=1.2

Memory salience. To the extent that each mem-
ory is not updated or overwritten, it is copied along
to the next timestep. The weight of this copy op-
eration is: r(i)t = 1− u

(i)
t − o

(i)
t . The salience

decays exponentially,

λt =(et × γe + (1− et)× γn) (2)

s
(i)
t =λt × r

(i)
t × s

(i)
t−1 + u

(i)
t + o

(i)
t , (3)

where γe and γn represent the salience decay rate
upon seeing an entity or non-entity.3

2Here τ is the “temperature” of the distribution, which is
gradually decreased over the training period, until the distri-
bution approaches a one-hot vector indicating the argmax.

3We set γe = exp(log(0.5)/`e) with `e = 4 denoting the
entity half-life, which is the number of entity mentions before
the salience decreases by half. The non-entity halflife γn is
computed analogously, with `n = 30.



5920

Memory state. To update the memory states,
we first transform the pre-recurrent state h̃t into
the memory domain, obtaining overwrite candi-
dates for the keys and values, k̃t = fk(h̃t) and
ṽt = fv(h̃t), where fk is a two-layer residual
network with tanh nonlinearities, and fv is a lin-
ear projection with a tanh non-linearity. Update
candidates are computed by GRU recurrence with
the overwrite candidate as the input. This yields
the state update,

k
(i)
t = u

(i)
t GRUk(k

(i)
t−1, k̃t) + o

(i)
t k̃t + r

(i)
t k

(i)
t−1

v
(i)
t = u

(i)
t GRUv(v

(i)
t−1, ṽt) + o

(i)
t ṽt + r

(i)
t v

(i)
t−1.

2.3 Coreference Chains

To compute the probability of coreference be-
tween the mentions wt1 and wt2 , we first compute
the probability that each cell i refers to the same
entity at both of those times,

ω
(i)
t1,t2

=

t2∏
t=t1+1

(1− o(i)t ) (4)

Furthermore, the probability that mention t1 is
stored in memory i is u(i)t1 + o

(i)
t1

. The probabil-
ity that two mentions corefer is then the sum over
memory cells,

ψ̂t1,t2 =
N∑
i=1

(u
(i)
t1

+ o
(i)
t1
)× u(i)t2 × ω

(i)
t1,t2

. (5)

2.4 Training

The coreference probability defined in Equation 5
is a differentiable function of the gates, which in
turn are computed from the inputs w1, w2, . . . wT .
We can therefore train the entire network end-to-
end from a cross-entropy objective, where a loss
is incurred for incorrect decisions on the level of
token pairs. Specifically, we set yi,j = 1 when
wi and wj corefer (coreferential links), and also
when both wi and wj are part of the same mention
span (self links). The coreference loss is then the
cross-entropy

∑T
i=1

∑T
j=i+1H(ψ̂i,j , yi,j).

Because the hidden state ht is computed recur-
rently from w1:t, the reader can also be trained
from a language modeling objective, even when
coreference annotations are unavailable. Word
probabilities P (wt+1 | ht) are computed by pro-
jecting the hidden state ht by a matrix of output
embeddings, and applying the softmax operation.

3 Experiments

As an evaluation of the ability of the referential
reader to correctly track entity references in text,
we evaluate against the GAP dataset, recently in-
troduced by Webster et al. (2018). Each instance
consists of: (1) a sequence of tokens w1, . . . , wT
extracted from Wikipedia biographical pages; (2)
two person names (A and B, whose token index
spans are denoted sA and sB); (3) a single-token
pronoun (P with the token index sP ); and (4) two
binary labels (yA and yB) indicating whether P is
referring to A or B.

Language modeling. Given the limited size of
GAP, it is difficult to learn a strong recurrent
model. We therefore consider the task of lan-
guage modeling as a pre-training step. We make
use of the page text of the original Wikipedia arti-
cles from GAP, the URLs to which are included as
part of the data release. This results in a corpus of
3.8 million tokens, which is used for pre-training.
The reader is free to use the memory to improve its
language modeling performance, but it receives no
supervision on the coreference links that might be
imputed on this unlabeled data.

Prediction. At test time, we make coreference
predictions using the procedure defined in § 2.3.
Following Webster et al. (2018), we do not require
exact string match for mention detection: if the
selected candidate is a substring of the gold span,
we consider it as a predicted coreferential link be-
tween the pronoun and person name. Concretely,
we focus on the token index sP of the pronoun
and predict the positive coreferential relation of
the pronoun P and person name A if any (in the
span of sA) of ψ̂sA,sP (if sA < sP ) or ψ̂sP ,sA (oth-
erwise) is greater than a threshold value (selected
on the validation set).4

Evaluation. Performance is measured on the
GAP test set, using the official evaluation script.
We report the overall F1, as well as the scores by
gender (Masculine: FM1 and Feminine: FF1 ), and
the bias (the ratio of FF1 to F

M
1 :

FF1
FM1

).

Systems. We benchmark our model (RefReader)
against a collection of strong baselines presented
in the work of Webster et al. (2018): (1) a state-of-
the-art mention-pair coreference resolution (Lee

4As required by Webster et al. (2018), the model is re-
sponsible for detecting mentions; only the scoring function
accesses labeled spans.



5921

FM1 F
F
1

FF1
FM1

F1

Clark and Manning (2015)† 53.9 52.8 0.98 53.3
Lee et al. (2017)† 67.7 60.0 0.89 64.0
Lee et al. (2017), re-trained 67.8 66.3 0.98 67.0

Parallelism† 69.4 64.4 0.93 66.9
Parallelism+URL† 72.3 68.8 0.95 70.6
RefReader, LM objective‡ 61.6 60.5 0.98 61.1
RefReader, coref objective‡ 69.6 68.1 0.98 68.9
RefReader, LM + coref‡ 72.8 71.4 0.98 72.1
RefReader, coref + BERT? 80.3 77.4 0.96 78.8

Table 1: GAP test set performance. †: reported in Web-
ster et al. (2018); ‡: strictly incremental processing; ?:
average over 5 runs with different random seeds.

et al., 2017); (2) a version of (1) that is retrained on
GAP; (3) a rule-based system based on syntactic
parallelism (Webster et al., 2018); (4) a domain-
specific variant of (3) that incorporates the lex-
ical overlap between each candidate and the ti-
tle of the original Wikipedia page (Webster et al.,
2018). We evaluate a configuration of RefReader
that uses two memory cells; other details are in the
supplement (Appendix A).

Results. As shown in Table 1, RefReader
achieves state-of-the-art performance, outper-
forming strong pretrained and retrained sys-
tems (e.g., Lee et al., 2017), as well as domain-
specific heuristics (Parellelism+URL). Language
model pretraining yields an absolute gain of 3.2
in F1. This demonstrates the ability of RefReader
to leverage unlabeled text, which is a distinctive
feature in comparison with prior work. When
training is carried out in the unsupervised setting
(with the language modeling objective only), the
model is still capable of learning the latent coref-
erential structure between pronouns and names to
some extent, outperforming a supervised coref-
erence system that gives competitive results on
OntoNotes (Clark and Manning, 2015).

We also test a combination of RefReader and
BERT (Devlin et al., 2019), using BERT’s con-
textualized word embeddings as base features xt
(concatenation of the top 4 layers), which yields
substantial improvements in accuracy. While this
model still resolves references incrementally, it
cannot be said to be purely incremental, because
BERT uses “future” information to build its con-
textualized embeddings.5 Note that the gender

5Future work may explore the combination of RefReader

bias increases slightly, possibly due to bias in the
data used to train BERT.
GAP examples are short, containing just a few

entity mentions. To test the applicability of our
method to longer instances, we produce an alter-
native test set in which pairs of GAP instances are
concatenated together, doubling the average num-
ber of tokens and entity mentions. Even with a
memory size of two, performance drops to F1 =
70.2 (from 72.1 on the original test set). This
demonstrates that the model is capable of reusing
memory cells when the number of entities is larger
than the size of the memory. We also test a con-
figuration of RefReader with four memory cells,
and observe that performance on the original test
set decreases only slightly, to F1 = 71.4 (against
RefReader LM + coref).

Case study and visualization. Figure 3 gives an
example of the behavior of the referential reader,
as applied to a concatenation of two instances from
GAP.6 The top panel shows the salience of each
entity as each token is consumed, with the two
memory cells distinguished by color and marker.
The figure elides long spans of tokens whose gate
activations are nearly zero. These tokens are indi-
cated in the x-axis by ellipsis; the corresponding
decrease in salience is larger, because it represents
a longer span of text. The bottom panel shows the
gate activations for each token, with memory cells
again distinguished by color and marker, and oper-
ations distinguished by line style. The gold token-
entity assignments are indicated with color and su-
perscript.

The reader essentially ignores the first name,
Braylon Edwards, making a very weak overwrite
to memory 0 (m0). It then makes a large over-
write to m0 on the pronoun his. When encounter-
ing the token Avant, the reader makes an update
to the same memory cell, creating a cataphoric
link between Avant and his. The name Padbury
appears much later (as indicated by the ellipsis),
and at this point, m0 has lower salience than m1.
For this reason, the reader chooses to overwrite
m0 with this name. The reader ignores the name
Cathy Vespers and overwrites m1 with the adverb
coincidentally. On encountering the final pronoun
she, the reader is conflicted, and makes a partial

and large-scale pretrained incremental language models (e.g.,
Radford et al., 2019).

6For an example involving multi-token spans, see Ap-
pendix B.



5922

0.4

0.6

0.8

1.0

sa
lie

nc
e

0
1

...
be

hi
nd

Br
ay

lo
n2

Ed
wa

rd
s2 .

Du
rin

g
hi

s1

so
ph

om
or

e
se

as
on in

20
03

,
Av

an
t1 ...

Pa
db

ur
y3

ap
pe

ar
ed in

Pi
er

s
Ha

gg
ar

d 's
cu

lt
Br

iti
sh

ho
rro

r
fil

m ... as th
e

un
fo

rtu
na

te
Ca

th
y4

Ve
sp

er
s4 ...

Co
in

cid
en

ta
lly ,

sh
e3

ap
pe

ar
ed ..

.

0.0

0.2

0.4

0.6

0.8

1.0

ga
te

update
overwrite

Figure 3: An example of the application the referential reader to a concatenation of two instances from GAP. The
ground truth is indicated by the color of each token on the x-axis as well as the superscript.

overwrite to m0, a partial update (indicating coref-
erence with Padbury), and a weaker update to m1.
If the update to m0 is above the threshold, then
the reader may receive credit for this coreference
edge, which would otherwise be scored as a false
negative.

The reader ignores the names Braylon Edwards,
Piers Haggard, and Cathy Vespers, leaving them
out of the memory. Edwards and Vespers appear
in prepositional phrases, while Haggard is a pos-
sessive determiner of the object of a prepositional
phrase. Centering theory argues that these syntac-
tic positions have low salience in comparison with
subject and object position (Grosz et al., 1995). It
is possible that the reader has learned this prin-
ciple, and that this is why it chooses not to store
these names in memory. However, the reader also
learns from the GAP supervision that pronouns are
important, and therefore stores the pronoun his
even though it is also a possessive determiner.

4 Related Work

Memory networks provide a general architecture
for online updates to a set of distinct memo-
ries (Weston et al., 2015; Sukhbaatar et al., 2015).
The link between memory networks and incre-
mental text processing was emphasized by Cheng
et al. (2016). Henaff et al. (2017) used memories
to track the states of multiple entities in a text, but
they predefined the alignment of entities to mem-
ories, rather than learning to align entities with
memories using gates. The incorporation of en-
tities into language models has also been explored
in prior work (Yang et al., 2017; Kobayashi et al.,

2017); similarly, Dhingra et al. (2018) augment
the gated recurrent unit (GRU) architecture with
additional edges between coreferent mentions. In
general, this line of prior work assumes that coref-
erence information is available at test time (e.g.,
from a coreference resolution system), rather than
determining coreference in an online fashion. Ji
et al. (2017) propose a generative entity-aware lan-
guage model that incorporates coreference as a
discrete latent variable. For this reason, impor-
tance sampling is required for inference, and the
model cannot be trained on unlabeled data.

5 Conclusion

This paper demonstrates the viability of incremen-
tal reference resolution, using an end-to-end dif-
ferentiable memory network. This enables semi-
supervised learning from a language modeling
objective, which substantially improves perfor-
mance. A key question for future work is the per-
formance on longer texts, such as the full-length
news articles encountered in OntoNotes. Another
direction is to further explore semi-supervised
learning, by reducing the amount of training data
and incorporating linguistically-motivated con-
straints based on morphosyntactic features.

Acknowledgments

We would like to thank the anonymous reviewers
for their valuable feedback, Yinhan Liu, Abdel-
rahman Mohamed, Omer Levy, Kellie Webster,
Vera Axelrod, Mandar Joshi, Trevor Cohn and
Timothy Baldwin for their help and comments.



5923

References
Jianpeng Cheng, Li Dong, and Mirella Lapata. 2016.

Long short-term memory-networks for machine
reading. In Proceedings of the 2016 Conference on
Empirical Methods in Natural Language Process-
ing, pages 551–561.

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. In Proceedings of the NIPS 2014 Deep Learn-
ing and Representation Learning Workshop.

Kevin Clark and Christopher D. Manning. 2015.
Entity-centric coreference resolution with model
stacking. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Linguistics
and the 7th International Joint Conference on Natu-
ral Language Processing (Volume 1: Long Papers),
pages 1405–1415.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2019. BERT: Pre-training of
deep bidirectional transformers for language under-
standing. In Proceedings of the 2019 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, Volume 1 (Long and Short Papers),
pages 4171–4186, Minneapolis, Minnesota. Associ-
ation for Computational Linguistics.

Bhuwan Dhingra, Qiao Jin, Zhilin Yang, William Co-
hen, and Ruslan Salakhutdinov. 2018. Neural mod-
els for reasoning over multiple mentions using coref-
erence. In Proceedings of the 2018 Conference of
the North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies, Volume 2 (Short Papers), pages 42–48. As-
sociation for Computational Linguistics.

Barbara J Grosz, Scott Weinstein, and Aravind K Joshi.
1995. Centering: A framework for modeling the lo-
cal coherence of discourse. Computational linguis-
tics, 21(2):203–225.

Mikael Henaff, Jason Weston, Arthur Szlam, Antoine
Bordes, and Yann LeCun. 2017. Tracking the world
state with recurrent entity networks. In Proceed-
ings of the 5th International Conference on Learn-
ing Representations, Toulon, France.

Eric Jang, Shixiang Gu, and Ben Poole. 2017. Cate-
gorical reparameterization with gumbel-softmax. In
Proceedings of the 5th International Conference on
Learning Representations.

Yangfeng Ji, Chenhao Tan, Sebastian Martschat, Yejin
Choi, and Noah A. Smith. 2017. Dynamic entity
representations in neural language models. In Pro-
ceedings of the 2017 Conference on Empirical Meth-
ods in Natural Language Processing, pages 1830–
1839. Association for Computational Linguistics.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Sosuke Kobayashi, Naoaki Okazaki, and Kentaro Inui.
2017. A neural language model for dynamically rep-
resenting the meanings of unknown words and enti-
ties in a discourse. In Proceedings of the Eighth In-
ternational Joint Conference on Natural Language
Processing (Volume 1: Long Papers), pages 473–
483, Taipei, Taiwan. Asian Federation of Natural
Language Processing.

Kenton Lee, Luheng He, Mike Lewis, and Luke Zettle-
moyer. 2017. End-to-end neural coreference reso-
lution. In Proceedings of the 2017 Conference on
Empirical Methods in Natural Language Process-
ing, pages 188–197, Copenhagen, Denmark. Asso-
ciation for Computational Linguistics.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 1532–1543, Doha,
Qatar. Association for Computational Linguistics.

Alec Radford, Jeffrey Wu, Rewon Child, David Luan,
Dario Amodei, and Ilya Sutskever. 2019. Lan-
guage models are unsupervised multitask learners.
https://d4mucfpksywv.cloudfront.
net/better-language-models/
language-models.pdf.

David Schlangen, Timo Baumann, and Michaela At-
terer. 2009. Incremental reference resolution: The
task, metrics for evaluation, and a Bayesian filtering
model that is sensitive to disfluencies. In Proceed-
ings of the SIGDIAL 2009 Conference: The 10th An-
nual Meeting of the Special Interest Group on Dis-
course and Dialogue, pages 30–37.

Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston,
and Rob Fergus. 2015. End-to-end memory net-
works. In Proceedings of Advances in Neural In-
formation Processing Systems, pages 2440–2448,
Montréal, Canada.

Michael K Tanenhaus, Michael J Spivey-Knowlton,
Kathleen M Eberhard, and Julie C Sedivy. 1995.
Integration of visual and linguistic information
in spoken language comprehension. Science,
268(5217):1632–1634.

Kellie Webster, Marta Recasens, Vera Axelrod, and Ja-
son Baldridge. 2018. Mind the GAP: A balanced
corpus of gendered ambiguous pronouns. Transac-
tions of the Association for Computational Linguis-
tics, 6:605–617.

Jason Weston, Sumit Chopra, and Antoine Bordes.
2015. Memory networks. In Proceedings of the 3rd
International Conference on Learning Representa-
tions, San Diego, USA.

Zichao Yang, Phil Blunsom, Chris Dyer, and Wang
Ling. 2017. Reference-aware language models. In
Proceedings of the 2017 Conference on Empirical
Methods in Natural Language Processing, pages
1850–1859.

https://aclweb.org/anthology/D16-1053
https://aclweb.org/anthology/D16-1053
https://doi.org/10.3115/v1/P15-1136
https://doi.org/10.3115/v1/P15-1136
https://www.aclweb.org/anthology/N19-1423
https://www.aclweb.org/anthology/N19-1423
https://www.aclweb.org/anthology/N19-1423
https://doi.org/10.18653/v1/N18-2007
https://doi.org/10.18653/v1/N18-2007
https://doi.org/10.18653/v1/N18-2007
https://doi.org/10.18653/v1/D17-1195
https://doi.org/10.18653/v1/D17-1195
https://www.aclweb.org/anthology/I17-1048
https://www.aclweb.org/anthology/I17-1048
https://www.aclweb.org/anthology/I17-1048
https://doi.org/10.18653/v1/D17-1018
https://doi.org/10.18653/v1/D17-1018
https://doi.org/10.3115/v1/D14-1162
https://doi.org/10.3115/v1/D14-1162
https://d4mucfpksywv.cloudfront.net/better-language-models/language-models.pdf
https://d4mucfpksywv.cloudfront.net/better-language-models/language-models.pdf
https://d4mucfpksywv.cloudfront.net/better-language-models/language-models.pdf
https://doi.org/10.1162/tacl_a_00240
https://doi.org/10.1162/tacl_a_00240
https://doi.org/10.18653/v1/D17-1197


5924

A Supplemental information

Model configuration. Training is carried out on
the development set of GAP with the Adam opti-
mizer (Kingma and Ba, 2014) and a learning rate
of 0.001. Early stopping is applied based on the
performance on the validation set. We use the fol-
lowing hyperparameters:
• embedding size Dx = 300;
• memory key size Dk = 16 (32 with BERT)

and value size Dv = 300; the hidden layers
in the memory key/value updates fk and fv
are also set to 16 (32 with BERT) and 300
respectively;
• number of memory cells N = 2;
• pre-recurrent and hidden state sizes Dh =
300;
• salience half-life for words and entity men-

tions are 30 and 4 respectively;
• Gumbel softmax starts at temperature τ =
1.0 with an exponential decay rate of 0.5 ap-
plied every 10 epochs;
• dropout is applied to the embedding layer, the

pre-recurrent state h̃t, and the GRU hidden
state ht, with a rate of 0.5;
• self and coreferential links are weighted dif-

ferently in the coreference loss cross-entropy
in § 2.4 with 0.1 and 5.0 and negative coref-
erential links weighted higher than positive
ones with a ratio of 10:1 to penalize false pos-
itive predictions.

For the RefReader model trained only on coref-
erence annotations, the base word embeddings
(xt) are fixed to the pretrained GloVe embed-
dings (Pennington et al., 2014). In the RefReader
models that include language model pretraining,
embeddings are learned on the language model-
ing task. Language modeling pre-training is car-
ried out using the same configuration as above; the
embedding update and early stopping are based on
perplexity on a validation set.

B Multi-token Span Example

In the example shown in Figure 4, the system must
handle multi-token spans Paul Sabatier and Wil-
helm Normann. It does this by overwriting on the
first token, and updating on the second token, in-
dicating that both tokens are part of the name of a
single entity. The reader also correctly handles an
example of cataphora (During his tenure, Smith
voted . . . ). It stores Paul Sabatier in the same
memory as Smith, but overwrites that memory so

as not to create a coreference link. The reader
reuses memory one for both entities because in
the intervening text, memory zero acquired more
salience. Finally, the model perceives some ambi-
guity on the pronoun he at the end: it narrowly fa-
vors coreference with Normann, but assigns some
probability to the creation of a new entity.



5925

0.00

0.25

0.50

0.75

1.00

sa
lie

nc
e

0
1

...
fo

llo
wi

ng
Ri

ch
ar

d2

Ca
rro

ll2 ,
wh

o
wa

s
el

ec
te

d ...
Du

rin
g

hi
s1

te
nu

re ,
Sm

ith
1

vo
te

d
wi

th ... th
e

Fr
en

ch
ch

em
ist

Pa
ul

4

Sa
ba

tie
r4 in

18
97

,
an

d in
19

01 th
e

Ge
rm

an
ch

em
ist

W
ilh

el
m

3

No
rm

an
n3

de
ve

lo
pe

d
th

e
hy

dr
og

en
at

io
n of

fa
ts ,

wh
ich he

3

pa
te

nt
ed ..

.

0.00

0.25

0.50

0.75

ga
te

update
overwrite

Figure 4: Another example of the referential reader, as applied to a concatenation of two instances from GAP.
Again, the ground truth is indicated by the color of each token on the x-axis as well as the superscript.


