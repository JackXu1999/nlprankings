



















































Neural Grammatical Error Correction with Finite State Transducers


Proceedings of NAACL-HLT 2019, pages 4033–4039
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

4033

Neural Grammatical Error Correction with Finite State Transducers

Felix Stahlberg† and Christopher Bryant‡ and Bill Byrne†
†Department of Engineering

‡ Department of Computer Science and Technology
University of Cambridge

United Kingdom
{fs439, cjb255, wjb31}@cam.ac.uk

Abstract

Grammatical error correction (GEC) is one of
the areas in natural language processing in
which purely neural models have not yet su-
perseded more traditional symbolic models.
Hybrid systems combining phrase-based sta-
tistical machine translation (SMT) and neural
sequence models are currently among the most
effective approaches to GEC. However, both
SMT and neural sequence-to-sequence mod-
els require large amounts of annotated data.
Language model based GEC (LM-GEC) is a
promising alternative which does not rely on
annotated training data. We show how to im-
prove LM-GEC by applying modelling tech-
niques based on finite state transducers. We
report further gains by rescoring with neural
language models. We show that our meth-
ods developed for LM-GEC can also be used
with SMT systems if annotated training data
is available. Our best system outperforms the
best published result on the CoNLL-2014 test
set, and achieves far better relative improve-
ments over the SMT baselines than previous
hybrid systems.

1 Introduction

Grammatical error correction (GEC) is the task
of automatically correcting all types of errors in
text; e.g. [In a such situaction → In such a sit-
uation]. Using neural models for GEC is be-
coming increasingly popular (Xie et al., 2016;
Yuan and Briscoe, 2016; Ji et al., 2017; Sakaguchi
et al., 2017; Schmaltz et al., 2017; Chollampatt
and Ng, 2018; Ge et al., 2018a,b), possibly com-
bined with phrase-based SMT (Chollampatt et al.,
2016; Chollampatt and Ng, 2017; Grundkiewicz
and Junczys-Dowmunt, 2018). A potential chal-
lenge for purely neural GEC models is their vast
output space since they assign non-zero probabil-
ity mass to any sequence. GEC is – compared to
machine translation – a highly constrained prob-

lem as corrections tend to be very local, and lexical
choices are usually limited. Finite state transduc-
ers (FSTs) are an efficient way to represent large
structured search spaces. In this paper, we propose
to construct a hypothesis space using standard FST
operations like composition, and then constrain
the output of a neural GEC system to that space.
We study two different scenarios: In the first sce-
nario, we do not have access to annotated train-
ing data, and only use a small development set for
tuning. In this scenario, we construct the hypoth-
esis space using word-level context-independent
confusion sets (Bryant and Briscoe, 2018) based
on spell checkers and morphology databases, and
rescore it with count-based and neural language
models (NLMs). In the second scenario, we as-
sume to have enough training data available to
train SMT and neural machine translation (NMT)
systems. In this case, we make additional use of
the SMT lattice and rescore with an NLM-NMT
ensemble. Our contributions are:

• We present an FST-based adaptation of the
work of Bryant and Briscoe (2018) which al-
lows exact inference, and does not require an-
notated training data. We report large gains
from rescoring with a neural language model.

• Our technique beats the best published result
with comparable amounts of training data on
the CoNLL-2014 (Ng et al., 2014) test set
when applied to SMT lattices. Our combina-
tion strategy yields larger gains over the SMT
baselines than simpler rescoring or pipelining
used in prior work on hybrid systems (Grund-
kiewicz and Junczys-Dowmunt, 2018).

2 Constructing the Hypothesis Space

Constructing the set of hypotheses The core
idea of our approach is to first construct a



4034

(a) The input lattice I without SMT (no annotated training data).

(b) The base lattice B without SMT.

(c) The input lattice I with SMT.

(d) The base lattice B with SMT.

Figure 1: Building the hypothesis space for the input sentence “In a such situaction there is no other way .”.

Figure 2: The edit transducerE. The σ-label can match
any input symbol.

Figure 3: The penalization transducer P . The φ-label
can match any input except <corr> and <mcorr>.

(weighted) hypothesis space H which is large
enough to be likely to contain good corrections,
but constrained enough to embrace the highly
structured nature of GEC. Then, we use H to con-
strain a neural beam decoder. We make exten-
sive use of the FST operations available in Open-
FST (Allauzen et al., 2007) like composition (de-
noted with the ◦-operator) and projection (denoted
with Πinput(·) and Πoutput(·)) to build H . The pro-
cess starts with an input lattice I . In our experi-
ments without annotated training data, I is an FST
which simply maps the input sentence to itself as
shown in Fig. 1(a). If we do have access to enough
annotated data, we train an SMT system on it and
derive I from the SMT n-best list.1 For each hy-
pothesis y we compute the Levenshtein distance
lev(x,y) to the source sentence x. We construct a
string z by prepending lev(x,y) many <mcorr>
tokens to y, and construct I such that:

z = (<mcorr>)lev(x,y) · y (1)
[[I]](z) = −λSMTSMT(y|x). (2)

1In the rare cases in which the n-best list did not contain
the source sentence x we added it in a postprocessing step.



4035

We adapt the notation of Mohri (2003) and denote
the cost I assigns to mapping a string z to itself as
[[I]](z), and set [[I]](z) = ∞ if I does not accept
z. SMT(y|x) is the SMT score. In other words,
I represents the weighted SMT n-best list after
adding lev(x,y) many <mcorr> tokens to each
hypothesis as illustrated in Fig. 1(c). We scale
SMT scores by a factor λSMT for tuning.

Bryant and Briscoe (2018) addressed substi-
tution errors such as non-words, morphology-,
article-, and preposition-errors by creating con-
fusion sets C(xi) that contain possible (context-
independent) 1:1 corrections for each input word
xi. Specifically, they relied on CyHunspell for
spell checking (Rodriguez and Seal, 2014), the
AGID morphology database for morphology er-
rors (Atkinson, 2011), and manually defined con-
fusion sets for determiner and preposition er-
rors, hence avoiding the need for annotated train-
ing data. We use the same confusion sets as
Bryant and Briscoe (2018) to augment our hy-
pothesis space via the edit flower transducer E
shown in Fig. 2. E can map any sequence
to itself via its σ-self-loop. Additionally, it al-
lows the mapping xi → <corr> · y for each
y ∈ C(xi). For example, for the misspelled
word xi = ‘situaction’ and the confusion set
C(‘situaction’) = {‘situation’, ‘acquisition’}, E
allows mapping ‘situaction’ to ‘<corr> situa-
tion’ and ‘<corr> acquisition’, and to itself via
the σ-self-loop. The additional <corr> token
will help us to keep track of the edits. We obtain
our base latticeB which defines the set of possible
hypotheses by composition and projection:

B := Πoutput(I ◦ E). (3)

Fig. 1(d) shows B for our running example.

Scoring the hypothesis space We apply mul-
tiple scoring strategies to the hypotheses in B.
First, we penalize <mcorr> and <corr> tokens
with two further parameters, λmcorr and λcorr, by
composing B with the penalization transducer P
shown in Fig. 3.2 The λmcorr and λcorr parame-
ters control the trade-off between the number and
quality of the proposed corrections since high val-
ues bias towards fewer corrections.

To incorporate word-level language model
scores we train a 5-gram count-based LM with

2Rather than using <mcorr> and <corr> tokens and
the transducer P we could directly incorporate the costs in the
transducers I and E, respectively. We chose to use explicit
correction tokens for clarity.

KenLM (Heafield, 2011) on the One Billion Word
Benchmark dataset (Chelba et al., 2014), and con-
vert it to an FST L using the OpenGrm NGram
Library (Roark et al., 2012). For tuning purposes
we scale weights in L with λKenLM:

[[L]](y) = −λKenLM logPKenLM(y). (4)

Our combined word-level scores can be expressed
with the following transducer:

Hword = B ◦ P ◦ L. (5)

Since we operate in the tropical semiring, path
scores in Hword are linear combinations of correc-
tion penalties, LM scores, and, if applicable, SMT
scores, weighted with the λ-parameters. Note that
exact inference in Hword is possible using FST
shortest path search. This is an improvement over
the work of Bryant and Briscoe (2018) who se-
lected correction options greedily. Our ultimate
goal, however, is to rescore Hword with neural
models such as an NLM and – if annotated train-
ing data is available – an NMT model. Since our
neural models use subword units (Sennrich et al.,
2016, BPEs), we composeHword with a transducer
T which maps word sequences to BPE sequences.
Our final transducer HBPE which we use to con-
strain the neural beam decoder can be written as:

HBPE = Πoutput(Hword ◦ T )
= Πoutput(I ◦ E ◦ P ◦ L ◦ T ).

(6)

To help downstream beam decoding we apply
�-removal, determinization, minimization, and
weight pushing (Mohri, 1997; Mohri and Riley,
2001) to HBPE. We search for the best hypothe-
sis y∗BPE with beam search using a combined score
of word-level symbolic models (represented by
HBPE) and subword unit based neural models:

y∗BPE = arg max
yBPE

(
− [[HBPE]](yBPE)

+ λNLM logPNLM(yBPE)

+ λNMT logPNMT(yBPE|xBPE)
)

(7)

The final decoding pass can be seen as an en-
semble of a neural LM and an NMT model which
is constrained and scored at each time step by the
set of possible tokens in HBPE.



4036

Uses 5-gram NLM CoNLL-2014 JFLEG Test
E FST-LM (BPE) P R M2 GLEU P R M2 GLEU

1 Best published (B&B, 2018) 40.56 20.81 34.09 59.35 76.23 28.48 57.08 48.75
2 X X 40.62 20.72 34.08 64.03 81.08 28.69 59.38 48.95
3 X X X 54.43 25.21 44.19 66.75 79.88 32.99 62.20 50.93
4 X X X 53.64 26.34 44.43 66.89 70.24 38.94 60.51 52.61

Table 1: Results without using annotated training data. Systems are tuned with respect to the metric highlighted in
gray. Input lattices I are derived from the source sentence as in Fig. 1(a).

Uses 5-gram NMT NLM CoNLL-2014 JFLEG Test
E FST-LM (BPE) (BPE) P R M2 GLEU P R M2 GLEU

1 Best published (G&J-D, 2018) 66.77 34.49 56.25 n/a n/a n/a n/a 61.50
2 Unconstrained single NMT 54.98 22.20 42.45 67.19 67.49 38.47 58.64 50.71
3 60.95 26.21 48.18 68.30 66.64 40.68 59.09 50.86
4 X X 57.58 32.39 49.83 68.82 71.60 42.45 62.95 53.20
5 X X 65.26 33.03 54.61 69.92 76.35 40.55 64.89 51.75
6 X X X 64.55 37.33 56.33 70.30 78.85 47.72 69.75 55.39
7 X X(4x) X 66.71 38.97 58.40 70.60 82.15 47.82 71.84 55.60
8 X X(4x) X 66.96 38.62 58.39 70.60 74.19 56.41 69.79 58.63

Table 2: Results with using annotated training data. Systems are tuned with respect to the metric highlighted in
gray. Input lattices I are derived from the Moses 1000-best list as in Fig. 1(c). Row 3 is the SMT baseline.

We have introduced three λ-parameters λcorr,
λKenLM, and λNLM, and three additional parame-
ters λSMT, λmcorr, and λNMT if we make use of an-
notated training data. We also use a word insertion
penalty λwc for our SMT-based experiments. We
tune all these parameters on the development sets
using Powell search (Powell, 1964).3

3 Experiments

Experimental setup In our experiments with
annotated training data we use the SMT system of
Junczys-Dowmunt and Grundkiewicz (2016)4 to
create 1000-best lists from which we derive the in-
put lattices I . All our LMs are trained on the One
Billion Word Benchmark dataset (Chelba et al.,
2014). Our neural LM is a Transformer decoder
architecture in the transformer base con-
figuration trained with Tensor2Tensor (Vaswani
et al., 2018). Our NMT model is a Transformer
model (transformer base) trained on the
concatenation of the NUCLE corpus (Dahlmeier
et al., 2013) and the Lang-8 Corpus of Learner En-
glish v1.0 (Mizumoto et al., 2012). We only keep
sentences with at least one correction (659K sen-
tences in total). Both NMT and NLM models use
byte pair encoding (Sennrich et al., 2016, BPE)
with 32K merge operations. We delay SGD up-
dates by 2 on four physical GPUs as suggested by

3Similarly to Bryant and Briscoe (2018), even in our ex-
periments without annotated training data, we do need a very
small amount of annotated sentences for tuning.

4https://github.com/grammatical/
baselines-emnlp2016

Saunders et al. (2018). We decode with beam size
12 using the SGNMT decoder (Stahlberg et al.,
2017). We evaluate on CoNLL-2014 (Ng et al.,
2014) and JFLEG-Test (Napoles et al., 2017), us-
ing CoNLL-2013 (Ng et al., 2013) and JFLEG-
Dev as development sets. Our evaluation met-
rics are GLEU (Napoles et al., 2015) and M2
(Dahlmeier and Ng, 2012). We generated M2 files
using ERRANT (Bryant et al., 2017) for JFLEG
and Tab. 1 to be comparable to Bryant and Briscoe
(2018), but used the official M2 files in Tab. 2
to be comparable to Grundkiewicz and Junczys-
Dowmunt (2018).

Results Our LM-based GEC results without us-
ing annotated training data are summarized in
Tab. 1. Even when we use the same resources
(same LM and same confusion sets) as Bryant and
Briscoe (2018), we see gains on JFLEG (rows 1
vs. 2), probably because we avoid search errors in
our FST-based scheme. Adding an NLM yields
significant gains across the board. Tab. 2 shows
that adding confusion sets to SMT lattices is ef-
fective even without neural models (rows 3 vs. 4).
Rescoring with neural models also benefits from
the confusion sets (rows 5 vs. 6). With our en-
semble systems (rows 7 and 8) we are able to out-
perform prior work5 (row 1) on CoNLL-2014 and

5We compare our systems to the work of Grundkiewicz
and Junczys-Dowmunt (2018) as they used similar training
data. We note, however, that Ge et al. (2018b) reported
even better results with much more (non-public) training data.
Comparing (Ge et al., 2018a) and (Ge et al., 2018b) suggests
that most of their gains come from the larger training set.

https://github.com/grammatical/baselines-emnlp2016
https://github.com/grammatical/baselines-emnlp2016


4037

G&J-D (2018) This work
CoNLL JFLEG CoNLL JFLEG

(M2) (GLEU) (M2) (GLEU)
SMT 50.27 55.79 48.18 50.86
Hybrid 56.25 61.50 58.40 58.63
Rel. gain 11.90% 10.23% 21.21% 15.28%

Table 3: Improvements over SMT baselines.

come within 3 GLEU on JFLEG. Since the base-
line SMT systems of Grundkiewicz and Junczys-
Dowmunt (2018) were better than the ones we
used, we achieve even higher relative gains over
the respective SMT baselines (Tab. 3).

Error type analysis We also carried out a more
detailed error type analysis of the best CoNLL-
2014 M2 system with/without training data us-
ing ERRANT (Tab. 4). Specifically, this table
shows that while the trained system was consis-
tently better than the untrained system, the degree
of the improvement differs significantly depend-
ing on the error type. In particular, since the un-
trained system was only designed to handle Re-
placement word errors, much of the improvement
in the trained system comes from the ability to cor-
rect Missing and Unnecessary word errors. The
trained system nevertheless still improves upon
the untrained system in terms of replacement er-
rors by 10 F0.5 (45.53 vs. 55.63).

In terms of more specific error types, the trained
system was also able to capture a wider variety of
error types, including content word errors (adjec-
tives, adverbs, nouns and verbs) and other cate-
gories such as pronouns and punctuation. Since
the untrained system only targets spelling, ortho-
graphic and morphological errors however, it is in-
teresting to note that the difference in scores be-
tween these categories tends to be smaller than
others; e.g. noun number (53.43 vs 64.96), orthog-
raphy (62.77 vs 74.07), spelling (67.91 vs 75.21)
and subject-verb agreement (66.67 vs 68.39). This
suggests that an untrained system is already able to
capture the majority of these error types.

Oracle experiments Our FST-based composi-
tion cascade is designed to enrich the search space
to allow the neural models to find better hypothe-
ses. Tab. 5 reports the oracle sentence error rate
for different configurations, i.e. the fraction of ref-
erence sentences in the test set which are not in
the FSTs. Expanding the SMT lattice signifi-
cantly reduces the oracle error rate from 55.63%
to 48.17%.

ERRANT F0.5
Type No train Train
Missing - 51.96
Replacement 45.53 55.63
Unnecessary - 50.38
ADJ - 27.03
ADV - 29.80
DET 19.17 55.01
MORPH 33.20 64.81
NOUN 4.31 34.88
NOUN:NUM 53.43 64.96
NOUN:POSS - 13.51
ORTH 62.77 74.07
OTHER 2.45 18.39
PREP 34.39 56.58
PRON - 40.91
PUNCT - 46.08
SPELL 67.91 75.21
VERB - 37.94
VERB:FORM 48.03 63.33
VERB:SVA 66.67 68.39
VERB:TENSE 35.39 47.90

Table 4: A selection of ERRANT F0.5 error type
scores comparing the best CoNLL-2014 system with
and without training data. A dash means the system
did not attempt to correct the error type.

Hypothesis space Error
rate

Expanded input sentence (Tab. 1) 61.28%
SMT lattice (Tab. 2, rows 3, 5) 55.64%
Expanded SMT lattice (Tab. 2, rows 4, 6-8) 48.17%

Table 5: Oracle error rates for different hypothesis
spaces using the first annotator in CoNLL-2014.

4 Conclusion

We demonstrated that our FST-based approach to
GEC outperforms prior work on LM-based GEC
significantly, especially when combined with a
neural LM. We also applied our approach to SMT
lattices and reported much better relative gains
over the SMT baselines than previous work on hy-
brid systems. Our results suggest that FSTs pro-
vide a powerful and effective framework for con-
straining neural GEC systems.

Acknowledgements

This paper reports on research supported by the
U.K. Engineering and Physical Sciences Research
Council (EPSRC grant EP/L027623/1) and Cam-
bridge Assessment, University of Cambridge.



4038

References
Cyril Allauzen, Michael Riley, Johan Schalkwyk, Wo-

jciech Skut, and Mehryar Mohri. 2007. OpenFst: A
general and efficient weighted finite-state transducer
library. In Implementation and Application of Au-
tomata, pages 11–23. Springer.

Kevin Atkinson. 2011. Automatically generated in-
flection database (AGID). http://wordlist.
aspell.net/other/. [Online; accessed 24-
December-2018].

Christopher Bryant and Ted Briscoe. 2018. Language
model based grammatical error correction without
annotated training data. In Proceedings of the Thir-
teenth Workshop on Innovative Use of NLP for
Building Educational Applications, pages 247–253.
Association for Computational Linguistics.

Christopher Bryant, Mariano Felice, and Ted Briscoe.
2017. Automatic annotation and evaluation of er-
ror types for grammatical error correction. In Pro-
ceedings of the 55th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 793–805. Association for Computa-
tional Linguistics.

Ciprian Chelba, Tomas Mikolov, Mike Schuster, Qi Ge,
Thorsten Brants, Phillipp Koehn, and Tony Robin-
son. 2014. One billion word benchmark for
measuring progress in statistical language mod-
eling. In Fifteenth Annual Conference of the
International Speech Communication Association
(INTERSPEECH-2014), pages 2635–2639.

Shamil Chollampatt and Hwee Tou Ng. 2017. Con-
necting the dots: Towards human-level grammatical
error correction. In Proceedings of the 12th Work-
shop on Innovative Use of NLP for Building Educa-
tional Applications, pages 327–333. Association for
Computational Linguistics.

Shamil Chollampatt and Hwee Tou Ng. 2018. A multi-
layer convolutional encoder-decoder neural network
for grammatical error correction. In Proceedings of
the Thirty-Second AAAI Conference on Artificial In-
telligence, New Orleans, Louisiana, USA.

Shamil Chollampatt, Kaveh Taghipour, and Hwee Tou
Ng. 2016. Neural network translation models for
grammatical error correction. In Proceedings of the
Twenty-Fifth International Joint Conference on Ar-
tificial Intelligence, pages 2768–2774. AAAI Press.

Daniel Dahlmeier and Hwee Tou Ng. 2012. Better
evaluation for grammatical error correction. In Pro-
ceedings of the 2012 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
568–572. Association for Computational Linguis-
tics.

Daniel Dahlmeier, Hwee Tou Ng, and Siew Mei Wu.
2013. Building a large annotated corpus of learner
English: The NUS corpus of learner English. In

Proceedings of the Eighth Workshop on Innovative
Use of NLP for Building Educational Applications,
pages 22–31. Association for Computational Lin-
guistics.

Tao Ge, Furu Wei, and Ming Zhou. 2018a. Fluency
boost learning and inference for neural grammati-
cal error correction. In Proceedings of the 56th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1055–
1065. Association for Computational Linguistics.

Tao Ge, Furu Wei, and Ming Zhou. 2018b. Reaching
human-level performance in automatic grammatical
error correction: An empirical study. arXiv preprint
arXiv:1807.01270.

Roman Grundkiewicz and Marcin Junczys-Dowmunt.
2018. Near human-level performance in grammati-
cal error correction with hybrid machine translation.
In Proceedings of the 2018 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
Volume 2 (Short Papers), pages 284–290. Associa-
tion for Computational Linguistics.

Kenneth Heafield. 2011. KenLM: Faster and smaller
language model queries. In Proceedings of the Sixth
Workshop on Statistical Machine Translation, pages
187–197. Association for Computational Linguis-
tics.

Jianshu Ji, Qinlong Wang, Kristina Toutanova, Yongen
Gong, Steven Truong, and Jianfeng Gao. 2017. A
nested attention neural hybrid model for grammati-
cal error correction. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 753–
762. Association for Computational Linguistics.

Marcin Junczys-Dowmunt and Roman Grundkiewicz.
2016. Phrase-based machine translation is state-of-
the-art for automatic grammatical error correction.
In Proceedings of the 2016 Conference on Empiri-
cal Methods in Natural Language Processing, pages
1546–1556. Association for Computational Linguis-
tics.

Tomoya Mizumoto, Yuta Hayashibe, Mamoru Ko-
machi, Masaaki Nagata, and Yuji Matsumoto. 2012.
The effect of learner corpus size in grammatical er-
ror correction of ESL writings. In Proceedings of
COLING 2012: Posters, pages 863–872. The COL-
ING 2012 Organizing Committee.

Mehryar Mohri. 1997. Finite-state transducers in lan-
guage and speech processing. Computational Lin-
guistics, 23(2).

Mehryar Mohri. 2003. Edit-distance of weighted au-
tomata: General definitions and algorithms. Inter-
national Journal of Foundations of Computer Sci-
ence, 14(06):957–982.

http://wordlist.aspell.net/other/
http://wordlist.aspell.net/other/
https://doi.org/10.18653/v1/W18-0529
https://doi.org/10.18653/v1/W18-0529
https://doi.org/10.18653/v1/W18-0529
https://doi.org/10.18653/v1/P17-1074
https://doi.org/10.18653/v1/P17-1074
http://www.isca-speech.org/archive/interspeech_2014/i14_2635.html
http://www.isca-speech.org/archive/interspeech_2014/i14_2635.html
http://www.isca-speech.org/archive/interspeech_2014/i14_2635.html
https://doi.org/10.18653/v1/W17-5037
https://doi.org/10.18653/v1/W17-5037
https://doi.org/10.18653/v1/W17-5037
http://aclweb.org/anthology/N12-1067
http://aclweb.org/anthology/N12-1067
http://aclweb.org/anthology/W13-1703
http://aclweb.org/anthology/W13-1703
http://aclweb.org/anthology/P18-1097
http://aclweb.org/anthology/P18-1097
http://aclweb.org/anthology/P18-1097
https://doi.org/10.18653/v1/N18-2046
https://doi.org/10.18653/v1/N18-2046
http://aclweb.org/anthology/W11-2123
http://aclweb.org/anthology/W11-2123
https://doi.org/10.18653/v1/P17-1070
https://doi.org/10.18653/v1/P17-1070
https://doi.org/10.18653/v1/P17-1070
https://doi.org/10.18653/v1/D16-1161
https://doi.org/10.18653/v1/D16-1161
http://aclweb.org/anthology/C12-2084
http://aclweb.org/anthology/C12-2084
http://aclweb.org/anthology/J97-2003
http://aclweb.org/anthology/J97-2003


4039

Mehryar Mohri and Michael Riley. 2001. A weight
pushing algorithm for large vocabulary speech
recognition. In Seventh European Conference on
Speech Communication and Technology.

Courtney Napoles, Keisuke Sakaguchi, Matt Post, and
Joel Tetreault. 2015. Ground truth for grammati-
cal error correction metrics. In Proceedings of the
53rd Annual Meeting of the Association for Compu-
tational Linguistics and the 7th International Joint
Conference on Natural Language Processing (Vol-
ume 2: Short Papers), pages 588–593. Association
for Computational Linguistics.

Courtney Napoles, Keisuke Sakaguchi, and Joel
Tetreault. 2017. JFLEG: A fluency corpus and
benchmark for grammatical error correction. In Pro-
ceedings of the 15th Conference of the European
Chapter of the Association for Computational Lin-
guistics: Volume 2, Short Papers, pages 229–234.
Association for Computational Linguistics.

Hwee Tou Ng, Siew Mei Wu, Ted Briscoe, Christian
Hadiwinoto, Raymond Hendy Susanto, and Christo-
pher Bryant. 2014. The CoNLL-2014 shared task
on grammatical error correction. In Proceedings of
the Eighteenth Conference on Computational Natu-
ral Language Learning: Shared Task, pages 1–14.
Association for Computational Linguistics.

Hwee Tou Ng, Siew Mei Wu, Yuanbin Wu, Christian
Hadiwinoto, and Joel Tetreault. 2013. The CoNLL-
2013 shared task on grammatical error correction.
In Proceedings of the Seventeenth Conference on
Computational Natural Language Learning: Shared
Task, pages 1–12. Association for Computational
Linguistics.

Michael JD Powell. 1964. An efficient method for find-
ing the minimum of a function of several variables
without calculating derivatives. The computer jour-
nal, 7(2):155–162.

Brian Roark, Richard Sproat, Cyril Allauzen, Michael
Riley, Jeffrey Sorensen, and Terry Tai. 2012. The
OpenGrm open-source finite-state grammar soft-
ware libraries. In Proceedings of the ACL 2012 Sys-
tem Demonstrations, pages 61–66. Association for
Computational Linguistics.

Tim Rodriguez and Matthew Seal. 2014. Cy-
Hunspell. https://github.com/MSeal/
cython_hunspell. [Online; accessed 24-
December-2018].

Keisuke Sakaguchi, Matt Post, and Benjamin
Van Durme. 2017. Grammatical error correction
with neural reinforcement learning. In Proceedings
of the Eighth International Joint Conference on
Natural Language Processing (Volume 2: Short Pa-
pers), pages 366–372. Asian Federation of Natural
Language Processing.

Danielle Saunders, Felix Stahlberg, Adrià de Gispert,
and Bill Byrne. 2018. Multi-representation en-
sembles and delayed SGD updates improve syntax-
based NMT. In Proceedings of the 56th Annual

Meeting of the Association for Computational Lin-
guistics (Volume 2: Short Papers), pages 319–325.
Association for Computational Linguistics.

Allen Schmaltz, Yoon Kim, Alexander Rush, and Stu-
art Shieber. 2017. Adapting sequence models for
sentence correction. In Proceedings of the 2017
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 2807–2813. Association
for Computational Linguistics.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Neural machine translation of rare words
with subword units. In Proceedings of the 54th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1715–
1725. Association for Computational Linguistics.

Felix Stahlberg, Eva Hasler, Danielle Saunders, and
Bill Byrne. 2017. SGNMT – A flexible NMT de-
coding platform for quick prototyping of new mod-
els and search strategies. In Proceedings of the 2017
Conference on Empirical Methods in Natural Lan-
guage Processing: System Demonstrations, pages
25–30. Association for Computational Linguistics.

Ashish Vaswani, Samy Bengio, Eugene Brevdo, Fran-
cois Chollet, Aidan Gomez, Stephan Gouws, Llion
Jones, Łukasz Kaiser, Nal Kalchbrenner, Niki Par-
mar, Ryan Sepassi, Noam Shazeer, and Jakob
Uszkoreit. 2018. Tensor2tensor for neural machine
translation. In Proceedings of the 13th Confer-
ence of the Association for Machine Translation in
the Americas (Volume 1: Research Papers), pages
193–199. Association for Machine Translation in the
Americas.

Ziang Xie, Anand Avati, Naveen Arivazhagan, Dan Ju-
rafsky, and Andrew Y Ng. 2016. Neural language
correction with character-based attention. arXiv
preprint arXiv:1603.09727.

Zheng Yuan and Ted Briscoe. 2016. Grammatical er-
ror correction using neural machine translation. In
Proceedings of the 2016 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 380–386. Association for Computational Lin-
guistics.

https://doi.org/10.3115/v1/P15-2097
https://doi.org/10.3115/v1/P15-2097
http://aclweb.org/anthology/E17-2037
http://aclweb.org/anthology/E17-2037
https://doi.org/10.3115/v1/W14-1701
https://doi.org/10.3115/v1/W14-1701
http://aclweb.org/anthology/W13-3601
http://aclweb.org/anthology/W13-3601
http://aclweb.org/anthology/P12-3011
http://aclweb.org/anthology/P12-3011
http://aclweb.org/anthology/P12-3011
https://github.com/MSeal/cython_hunspell
https://github.com/MSeal/cython_hunspell
http://aclweb.org/anthology/I17-2062
http://aclweb.org/anthology/I17-2062
http://aclweb.org/anthology/P18-2051
http://aclweb.org/anthology/P18-2051
http://aclweb.org/anthology/P18-2051
https://doi.org/10.18653/v1/D17-1298
https://doi.org/10.18653/v1/D17-1298
https://doi.org/10.18653/v1/P16-1162
https://doi.org/10.18653/v1/P16-1162
https://doi.org/10.18653/v1/D17-2005
https://doi.org/10.18653/v1/D17-2005
https://doi.org/10.18653/v1/D17-2005
http://aclweb.org/anthology/W18-1819
http://aclweb.org/anthology/W18-1819
https://doi.org/10.18653/v1/N16-1042
https://doi.org/10.18653/v1/N16-1042

