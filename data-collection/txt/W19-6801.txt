




































Finite State Transducer based Morphology analysis for
Malayalam Language

Santhosh Thottingal
Swathanthra Malayalam Computing(smc.org.in)

Kerala, India
santhosh.thottingal@gmail.com

Abstract

This paper presents a finite state trans-
ducer approach to morphology analyser
and generator for Malayalam language,
an agglutinative, inflectional Dravid-
ian language spoken by 38 million peo-
ple, mainly by people from Kerala,
India. This system, named as Ml-
morph, is implemented using Stuttgart
Finite State Transducer(SFST) for-
malism and uses Helsinki Finite-State
Technology(HFST) as Toolkit. Evalua-
tions show that it is fast and effective to
address the morphological and phono-
logical nature of Malayalam. Appli-
cations like spellchecker, named entity
recognition, number spell out parser
and generator are also built on top of
Mlmorph.

1 Introduction

Malayalam is a language spoken in India, pre-
dominantly in the state of Kerala with about
38 million speakers. This Dravidian language
has a rich morphology characterized by inflec-
tion and agglutination. Addressing this mor-
phology is a prerequisite for any progress in
language computing. Even though there were
several efforts on this front, there is no func-
tional morphology analyser for Malayalam.
The Malayalam morphology analyser, named
as Mlmorph presented in this paper tries to
solve this. This paper first explains the na-
ture of Malayalam morphology briefly. Then

© 2019 The authors. This article is licensed under a
Creative Commons 4.0 licence, no derivative works, at-
tribution, CC-BY-ND.

the methodology of morphology analyser and
implementation is explained in detail. Evalu-
ation method and results are discussed at the
end. A brief description of some of the appli-
cations already built on top of this analyser is
a lso provided.

2 Malayalam

Malayalam is a heavily agglutinated and in-
flected language(Asher, 2013). The words are
formed by the morphological processes involv-
ing (a) Inflection where a word in a lexical
category undergoes inflection by attaching suf-
fixes to it, generating a new word in the same
category (b) Derivation where a word belong-
ing to a category becomes another category by
attaching a suffix, (c) Compounding where a
new word is formed by combining two or more
nouns, noun and adjective, adjective and noun,
verb and noun, or adverb and verb.

2.1 Morphology of nouns
Nouns get inflected due to gender, number or
cases(nominative, accusative, dative, sociative,
instrumental, genitive and locative). Some ex-
amples:

1. കൾ → <n><pl>
cats → cat<n><pl>

2. ഇലയിൽ → ഇല<n><locative>
on leaf → leaf<n><locative>

Adjectives can be derived from nouns,
changing the root word suffix. An adjective
can get agglutinated with a noun as given be-
low.
പണെ ിയിൽ→ പണം<n><adj> + െപ ി <n><locative>

LoResMT 2019 Dublin, Aug. 19-23, 2019 | p. 1



in money box → money<n><adj> + box
<n><locative>

The above example also illustrate that
derivation, agglutination, inflection - all these
three can happen in a single word. Also, they
can happen more than once in a single word.
Example:

പ സാരമണൽ രികളി മാണ് →
പ സാര<n><adj> + മണൽ<n><adj> +
തരി<n><pl><locative> + ഉം<cnj> + ആണ്<aff> it is in
the sugar-white grainy sands too → sugar<n><adj>
+ sand<n><adj> + grain<n><pl><locative> +
too<cnj> + is<aff>

2.2 Morphology of verbs
Verbs in Malayalam get inflected based on
tense, mood, voice and aspect(Varma, 2006).
Verbs are inflected for present, past and fu-
ture tenses. Perfect, habitual and iterative as-
pects are very common. Iterative aspect has
tense and emphatic variations. Verbs get in-
flected with causative and passive voices as
well. A variety of mood forms such as abilita-
tive, imperative, compulsive, promissive, opta-
tive, purposive, permissive, precative, irrealis,
monitory, conditional, satisfactive exist. All of
these forms are supported by Mlmorph. Some
examples are given below.

ചിരി → ചിരി ക<v><past>
laughed → laugh<v><past>

ചിരി െകാ ി → ചിരി ക<v> <iterative-past-
aspect><adv-clause-rp-past>

the one who kept laughing → laugh <v><iterative-
past-aspect><adv-clause-rp-past>

Nouns can be derived from verbs and then
it can undergo all nominal inflections or agglu-
tinations.

പാടിെ ാ ിരി ൽ → പാ ക<v><iterative-
aspect><n><deriv>

continuous singing → sing<v><iterative-
aspect><n><deriv>

3 Methodology
Mlmorph is based on Finite State Transducer
technology. A finite state transducer (FST)
maps strings from one regular language (sur-
face language) onto strings from another regu-
lar language (analysis language). This process
is reversible too. The same transducer can be
used to generate (i) analyses for a surface form
(in analysis mode) and (ii) surface forms for an

analysis (in generation mode). The number of
generated or analysed output strings is usually
one, but can be more than one while handling
morphology variations specific to a language.

3.1 Implementation
The Mlmorph is written in the SFST trans-
ducer specification language which is based
on extended regular expressions with vari-
ables and operators for concatenation, con-
junction, disjunction, repetition, composition,
negation, context-dependent replacement, and
more(Schmid, 2005). A compiler translates
the transducer specifications to an optimal au-
tomata. The generator automata can be re-
versed to create the analyser automata us-
ing the same compiler. For Mlmorph, the
SFST based morphology model is compiled
using Helsinki Finite-State Technology(HFST)
toolkit (Lindén et al., 2011). HFST pro-
vides programming language interfaces such as
python binding, and several tools to work with
the compiled automata. SFST is one of the
backends HFST supports.
Mlmorph has the following top level compo-

sition.

$ana lys i s−f i l t e r $ | | $morph$ | | $phon$
| | $de lete−pos$

This composition results in a morphology
generator. Reversing the order of compo-
sition, we get analyser. First, the anal-
ysis symbols are passed through a filter
$analysis-filter$. It accepts only the
known characters and tags for Mlmorph. It
then goes through the morphology rules de-
fined by $morph$. The results of morphol-
ogy generation is applied with the phonolog-
ical rules defined by $phon$. Finally, all POS
tags and intermediate tags used internally are
removed using $delete-pos$. The output is
the generated word.
In the transducer $morph$, we define what

is a word model for Malayalam - $word$.
We define it is a union of nouns($nouns$),
verbs($verbs$), adjectives, adverbs, interjec-
tion, quantifiers etc. Kleene’s plus(+) and
star(*) operators has their usual meaning to
denote number of occurrences.

$word$ = $punctuations$ ? ( $nouns$ \

LoResMT 2019 Dublin, Aug. 19-23, 2019 | p. 2



| $verb$ | $noun_verb_compounds$ \
| $ad jec t ive$+ | $adverb$+ \
. . .
) ? $punctuations$ ∗

For the sake of brevity, we will explain
noun and verb transducer here. A noun is
formed by a union of singular nouns or plu-
ral nouns. A demonstrative($dem$) or adjec-
tive($adjective$) can precede it. The nom-
inal inflectional forms [#ninfl#], postposi-
tions, conjuctions, polarity forms, quantifiers
etc. can be suffixes. The whole word then goes
through the nominal inflection rules defined by
$ninfl$ transducer.

$ s u f f i x e s $ = $pos tpos i t i ons$ |
$conjunction$ | $po la r i ty$ |
$ q u a n t i f i e r s $

$noun$ = $dem$ | ( $dem$? $ad jec t ive$ ? (
$singular_noun$ | $plural_noun$ )

[# n i n f l #]? $ s u f f i x e s $ ? ) | | $ n i n f l $

The verb model is defined as a verb stem
from the defined lexicon going through a com-
position of union of tense, mood, aspect and
adverb forms of verbal inflection.

$verb$ = $vstem$ | | ( $verb−tenses$ |
$verb−moods$ | $verb−aspects$ |
$verb−adverbs$ )

The phonological transducer $phon$ applies
the composition of phonological rules on the re-
sults of previous steps. The changes are mainly
based on the last letter of first joining mor-
pheme and first letter of second morpheme.
A python library is implemented on top of

the automata generated1, that abstracts anal-
ysis and generation, making Mlmorph easy to
use in other applications. A web interface is
also available to try out2. It also provides web
APIs for other applications to consume.

3.2 Lexicon
The lexicon of Mlmorph contains the root
words, classified and tagged into the follow-
ing categories: nouns, person names, place
names, postpositions, pronouns, quantifiers,
abbreviations, adjectives, verbs, adverb, af-
firmatives, conjunctions, demonstratives, En-
glish borrowed nouns, Sanskrit rooted nouns,
interjections and language names.
1https://pypi.org/project/mlmorph/
2https://morph.smc.org.in/

This lexicon is sourced from Malayalam
Wiktionary, Wikipedia(based on categories
there), CLDR(for language, place names) etc.
The collected words are manually proofread
and cleaned up. This task is tedious, but is
very critical to the quality of analysis. It is
also observed that the coverage ratio of Ml-
morph largely depends on lexicon size.

3.3 POS tags
There is no agreement or standard on the POS
tagging schema to be used for Malayalam. The
general disagreement is about naming, which
is very trivial to fix using a tag name map-
per. The other issue is classification of fea-
tures, which I found that there no elaborate
schema that can cover Malayalam. So Ml-
morph uses its own POS tagging schema and
wherever possible the POS tags from Univer-
sal dependencies3 (McDonald et al., 2013) are
used. So far Mlmorph has defined 87 POS tags.

4 Applications
A morphology analyser and generator is the
foundation for many language computing ap-
plications. As we have a functional morphol-
ogy analyser now, a few applications were built
on top of it, mainly to showcase some use cases.

4.1 Malayalam number spell out
In Malayalam, the spell out of numbers forms
a single word. For example, a number 108 is

െ ് – a single word. This word is formed by
adjective form of റ്(100) with എ ്(8). While
these two words are glued, Malayalam phono-
logical rules are also applied, resulting com-
pounded word െ ്. Parsing the number

െ ് and interpreting it as 108 or convert-
ing 108 to െ ് is an interesting problem in
Malayalam computing.(Thottingal, 2017).

4.2 Spelling checker
The productive morphology of Malayalam
causes practically infinite vocabulary. So
a word list based approach for spellcheck
won’t work. A morphology analyser based
spellchecker was developed and found to be ef-
fective in addressing this long pending need for
the language(Thottingal, 2018). A word is cor-
rectly spelled if the word can be analysed using
3http://universaldependencies.org/

LoResMT 2019 Dublin, Aug. 19-23, 2019 | p. 3



morphology analyser. If not, a variety of cor-
rection strategies were applied to find spelling
correction candidates.

4.3 Named entity recognition
Identifying the named entities in words that
are inflected or agglutinated was a challenge,
but with the morphology analyser it is now
possible to easily identify them by analysing
each words. It is also possible to get better
search results for named entities like people
names, person names or places in large text
for content using the same approach. (Thot-
tingal, 2019).

5 Evaluation and Results
The evaluation of the system is done in three
levels:
1. The Mlmorph is developed in a test driven

approach. A manually prepared test case
containing a word and its morphology
analysis is first added to the collection
of test cases. Then the analyser is en-
hanced to pass this test while not breaking
any other tests that are already existing.
About 450 such tests are present in the
system. The same tests are used for mor-
phology generator. So every analysis in
the test case should generate the word by
passing through the morphology genera-
tor. The test success rate is 100%

2. A set of 50,000 Malayalam words from the
Malayalam corpus project of SMC4 were
used for the coverage analysis. The con-
tent in this set is already proofread and
cleaned up to avoid words from other lan-
guages. It was found that 84% of words
are analysed by Mlmorph. For the words
that are not able to parse by the analyser,
a frequency analysis is done, and top items
in that list are considered for the tests in
first level.

3. 1.4 million words collection, from all arti-
cles of Malayalam Wikipedia as of Jan-
uary 1, 2019 is used for testing. It
can have spelling mistakes, words and
acronyms from other languages like En-
glish. Also it can have many named enti-
ties that are not present in the lexicon of

4https://gitlab.com/smc/corpus

Mlmorph compared to the processed cor-
pus in previous step of evaluation. The
current coverage for this corpus is 45%.

5.1 Performance
The Mlmorph implementation is reasonably
fast as illustrated in Table 1. There is a con-
stant time delay to load the whole automata
of 12MB to memory and get ready for process-
ing words. The time given in Table 1 includes
that. The performance of the applications are
very similar to this.

Number of words Time taken for analysis
800 2 seconds
40,000 5 seconds
1400000 90 seconds

Table 1: Performance of Mlmorph. System: 64bit
4×i7-7600U CPU @ 2.80GHz, 15GB RAM

6 Future work

From the evaluation, it was observed that most
of the words that the analyser failed to analyse
are less frequent, but valid named entities such
as person names, place names, brand names,
language names etc. Adding more such words
to lexicon is a never ending task, but having
a better coverage based on large corpus eval-
uation, the effectiveness of Mlmorph can be
enhanced. A few automated lexicon enhance-
ments and possible sources for such words are
being actively explored.

7 Concluding remarks

This paper presented the first functional sys-
tem for Malayalam morphology. The trans-
ducer has addressed the agglutinational and
inflectional properties of Malayalam. The sys-
tem has the potential to be of an important
component of language computing tools such
as spell checker, search, named entity recog-
nition and machine translation. The code is
available under a free/open-source license(MIT
license)5. The analyser, generator, named en-
tity recognition applications are available at
project website6.

5https://gitlab.com/smc/mlmorph
6https://morph.smc.org.in

LoResMT 2019 Dublin, Aug. 19-23, 2019 | p. 4



References
Asher, Ronald E. 2013. Malayalam. Routledge.

Lindén, Krister, Erik Axelson, Sam Hardwick,
Tommi A Pirinen, and Miikka Silfverberg. 2011.
Hfst—framework for compiling and applying
morphologies. In International Workshop on
Systems and Frameworks for Computational
Morphology, pages 67–85. Springer.

McDonald, Ryan, Joakim Nivre, Yvonne
Quirmbach-Brundage, Yoav Goldberg, Di-
panjan Das, Kuzman Ganchev, Keith Hall,
Slav Petrov, Hao Zhang, Oscar Täckström,
et al. 2013. Universal dependency annotation
for multilingual parsing. In Proceedings of the
51st Annual Meeting of the Association for
Computational Linguistics (Volume 2: Short
Papers), volume 2, pages 92–97.

Schmid, Helmut. 2005. A programming language
for finite state transducers. In FSMNLP, volume
4002, pages 308–309.

Thottingal, Santhosh. 2017. Num-
ber spellout and generation in malay-
alam using morphology analyser.
http://thottingal.in/blog/2017/12/10/number-
spellout-and-generation-in-malayalam-using-
morphology-analyser/. Accessed: 2019-05-15.

Thottingal, Santhosh. 2018. Malay-
alam spellchecker – a morphol-
ogy analyser based approach.
https://thottingal.in/blog/2018/09/08/malayalam-
spellchecker-a-morphology-analyser-based-
approach/. Accessed: 2019-05-15.

Thottingal, Santhosh. 2019. Malayalam named
entity recognition using morphology analyser.
https://thottingal.in/blog/2019/03/10/malayalam-
named-entity-recognition-using-morphology-
analyser/. Accessed: 2019-05-15.

Varma, AR Rajaraja. 2006. Keralapanineeyam.
DC books, 8 edition.

LoResMT 2019 Dublin, Aug. 19-23, 2019 | p. 5


