



















































Interconnected Question Generation with Coreference Alignment and Conversation Flow Modeling


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 4853–4862
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

4853

Interconnected Question Generation with Coreference Alignment and
Conversation Flow Modeling

Yifan Gao1∗ Piji Li2 Irwin King1 Michael R. Lyu1
1 Department of Computer Science and Engineering,

The Chinese University of Hong Kong, Shatin, N.T., Hong Kong
2 Tencent AI Lab

1{yfgao,king,lyu}@cse.cuhk.edu.hk 2pijili@tencent.com

Abstract

We study the problem of generating intercon-
nected questions in question-answering style
conversations. Compared with previous works
which generate questions based on a single
sentence (or paragraph), this setting is dif-
ferent in two major aspects: (1) Questions
are highly conversational. Almost half of
them refer back to conversation history using
coreferences. (2) In a coherent conversation,
questions have smooth transitions between
turns. We propose an end-to-end neural model
with coreference alignment and conversation
flow modeling. The coreference alignment
modeling explicitly aligns coreferent men-
tions in conversation history with correspond-
ing pronominal references in generated ques-
tions, which makes generated questions inter-
connected to conversation history. The con-
versation flow modeling builds a coherent con-
versation by starting questioning on the first
few sentences in a text passage and smoothly
shifting the focus to later parts. Extensive ex-
periments show that our system outperforms
several baselines and can generate highly con-
versational questions. The code implementa-
tion is released at https://github.com/
Evan-Gao/conversaional-QG.

1 Introduction

Question Generation (QG) aims to create human-
like questions from a range of inputs, such as
natural language text (Heilman and Smith, 2010),
knowledge base (Serban et al., 2016) and image
(Mostafazadeh et al., 2016). QG is helpful for
the knowledge testing in education, i.e., the intel-
ligence tutor system, where an instructor can ac-
tively ask questions to students given reading com-
prehension materials (Heilman and Smith, 2010;
Du et al., 2017). Besides, raising good questions

∗ This work was partially done when Yifan Gao was an
intern at Tencent AI Lab.

Passage: Incumbent Democratic President Bill Clinton was ineligible to serve
a third term due to term limitations in the 22nd Amendment of the Constitution,
and Vice President Gore was able to secure the Democratic nomination with
relative ease. Bush was seen as the early favorite for the Republican nomina-
tion and, despite a contentious primary battle with Senator John McCain and
other candidates, secured the nomination by Super Tuesday. Bush chose ...
Q1: What political party is Clinton a member of? A1: Democratic
Q2: What was he ineligible to serve? A2: third term
Q3: Why? A3: term limitations
Q4: Based on what amendment? A4: 22nd
Q5: Of what document? A5: Constitution
Q6: Who was his vice president? A6: Gore
Q7: Who was the early Republican favorite for A7: Bush

the nomination?
Q8: Who was the primary battle with? A8: John McCain
Q9: What is his title? A9: Senator
Q10: When did Bush secure the nomination by? A10: Tuesday

Table 1: An example for conversational question gener-
ation from a conversational question answering dataset
CoQA (Reddy et al., 2019). Each turn contains a ques-
tion Qi and an answer Ai.

in a conversational can enhance the interactive-
ness and persistence of human-machine interac-
tions (Wang et al., 2018).

Recent works on question generation for knowl-
edge testing are mostly formalized as a standalone
interaction (Yuan et al., 2017; Song et al., 2018),
while it is a more natural way for human be-
ings to test knowledge or seek information through
conversations involving a series of interconnected
questions (Reddy et al., 2019). Furthermore, the
inability for virtual assistants to ask questions
based on previous discussions often leads to un-
satisfying user experiences. In this paper, we con-
sider a new setting called Conversational Question
Generation (CQG). In this scenario, a system
needs to ask a series of interconnected ques-
tions grounded in a passage through a question-
answering style conversation. Table 1 provides an
example under this scenario. In this dialogue, a
questioner and an answerer chat about the above
passage. Every question after the first turn is de-
pendent on the conversation history.

Considering that the goal of the task is to gen-
erate interconnected questions in conversational

https://github.com/Evan-Gao/conversaional-QG
https://github.com/Evan-Gao/conversaional-QG


4854

1

Tu
rn

 C
hu

nk

Passage Chunk

2
3
4
5
6
7
8
9

10

Figure 1: Passage chunks of interest for each turn
chunks. Each row contains 10 bands distinguished by
different colors. Each band represents a passage chunk.
The width of a passage chunk indicates the concentra-
tion of conversation in that turn. The y-axis indicates
turn chunk number. Same passage chunks share the
same color across different turn chunks. (Best viewed
in color)

question answering, CQG is challenging in a few
aspects. Firstly, a model should learn to generate
conversational interconnected questions depend-
ing on the conversation so far. As shown in Table
1, Q3 is a single word ‘Why?’, which should be
‘Why was he ineligible to serve a third term?’ in a
standalone interaction. Moreover, many questions
in this conversation refer back to the conversa-
tion history using coreferences (e.g., Q2, Q6, Q9),
which is the nature of questions in a human con-
versation. Secondly, a coherent conversation must
have smooth transitions between turns (each turn
contains a question-answer pair). We expect the
narrative structure of passages can influence the
conversation flow of our interconnected questions.
We further investigate this point by conducting an
analysis on our experiment dataset CoQA (Reddy
et al., 2019). We first split passages and turns of
QA pairs into 10 uniform chunks and identify pas-
sage chunks of interest for each turn chunk. Figure
1 portrays the conversation flow between passage
chunks and turn chunks. We see that in Figure
1, a question-answering style conversation usually
starts focusing on the first few chunks in the pas-
sage and as the conversation advances, the focus
shifts to the later passage chunks.

Previous works on question generation employ
attentional sequence-to-sequence models on the
crowd-sourced machine reading comprehension
dataset SQuAD (Rajpurkar et al., 2016). They
mainly focus on generating questions based on
a single sentence (or paragraph) and an answer
phrase (Du et al., 2017; Sun et al., 2018; Zhao
et al., 2018), while in our setting, our model
needs to not only ask a question on the given pas-
sage (paragraph) but also make the questions con-
versational by considering the conversation his-

tory. Meanwhile, some researchers study question
generation in dialogue systems to either achieve
the correct answer through interactions (Li et al.,
2017) or enhance the interactiveness and persis-
tence of conversations (Wang et al., 2018). Al-
though questions in our setting are conversational,
our work is different from these because our con-
versations are grounded in the given passages
rather than open-domain dialogues.

We propose a framework based on the at-
tentional encoder-decoder model (Luong et al.,
2015) to address this task. To generate conver-
sational questions (first challenge), we propose a
multi-source encoder to jointly encode the pas-
sage and the conversation so far. At each decoding
timestep, our model can learn to focus more on the
passage to generate content words or on the con-
versation history to make the question succinct.
Furthermore, our coreference alignment modeling
explicitly aligns coreferent mentions in conversa-
tion history (e.g. Clinton in Q1 Table 1) with
corresponding pronominal references in generated
questions (e.g. he in Q2), which makes gener-
ated questions interconnected to conversation his-
tory. The coreference alignment is implemented
by adding extra supervision to bias the attention
probabilities through a loss function. The loss
function explicitly guides our model to resolve to
the correct non-pronominal coreferent mentions
in the attention distribution and generate the cor-
rect pronominal references in target questions. To
make the conversations coherent (second chal-
lenge), we propose to model the conversation flow
to transit focus inside the passage smoothly across
turns. The conversation flow modeling achieves
this goal via a flow embedding and a flow loss.
The flow embedding conveys the correlations be-
tween number of turns and narrative structure of
passages. The flow loss explicitly encourages our
model to focus on sentences contain key informa-
tion to generate the current turn question and ig-
nore sentences questioned several turns ago.

In evaluations on a conversational question an-
swering dataset CoQA (Reddy et al., 2019), we
find that our proposed framework outperforms
several baselines in both automatic and human
evaluations. Moreover, the coreference alignment
can greatly improve the precision and recall of
generated pronominal references. The conversa-
tion flow modeling can learn the smooth transition
of conversation flow across turns.



4855

Current 
Evidence 
Sentence

Passage Encoder

!" !# !$
…

%" %# %$
…

&" &# &$
…

'" '# '$
…

Word Emb

Answer Pos. Emb

Turn Num. Emb
Chunk Emb

Conversation Encoder

C
on

ve
rs

at
io

n
H

is
to

ry

…

…

Clinton he
Coreference Alignment

History Evidence 
Sentence

Conversation Flow Modeling

()
*",) *,-.,) *,-",)

Pa
ss

ag
e 

A
tte

nt
io

n

C
on

ve
rs

at
io

n
A

tte
nt

io
n

V
ocabulary

D
istribution

/,-" 0,-"

/# 0#
/" 0"

… …

Flow
 Em

b

<BOS> What

Decoder with Attention & Copy

was

…

… …

P2

Attention

345

'4

Figure 2: The framework of our proposed model. For clarity, we omit to plot the copy mechanism in the figure.
(Best viewed in color)

2 Problem Setting

In this section, we define the Conversation Ques-
tion Generation (CQG) task. Given a passage P , a
conversation historyCi−1 = {(Q1, A1), ..., (Qi−1,
Ai−1)} and the aspect to ask (the current answer
Ai), the task of CQG is to generate a question Qi
for the next turn:

Qi = arg max
Qi

Prob(Qi|P,Ai, Ci−1), (1)

in which the generated question should be as con-
versational as possible.

Note that we formalize this setting as an answer-
aware QG problem (Zhao et al., 2018), which as-
sumes answer phrases are given before generating
questions. Moreover, answer phrases are shown
as text fragments in passages. Similar problems
have been addressed in (Du and Cardie, 2018;
Zhao et al., 2018; Sun et al., 2018). Our prob-
lem setting can also be generalized to the answer-
ignorant case. Models can identify which answers
to ask first by combining question-worthy phrases
extraction methods (Du and Cardie, 2018; Wang
et al., 2019).

3 Model Description

As shown in Figure 2, our framework consists of
four components: (1) multi-source encoder; (2)
decoder with copy mechanism; (3) coreference
alignment; (4) conversation flow modeling.

3.1 Multi-Source Encoder

Since a conversational question is dependent on a
certain aspect of the passage P and the conver-
sation context Ci−1 so far, we jointly encode in-

formation from two sources via a passage encoder
and a conversation encoder.

Passage Encoder. The passage encoder is a
bidirectional-LSTM (bi-LSTM) (Hochreiter and
Schmidhuber, 1997), which takes the concatena-
tion of word embeddings w and answer position
embeddings a as input xi = [wi;ai]. We de-
note the answer span using the typical BIO tag-
ging scheme and map each token in the paragraph
into the corresponding answer position embedding
(i.e., B ANS, I ANS, O). Then the whole passage
can be represented using the hidden states of the
bi-LSTM encoder, i.e., (hp1, ...,h

p
m), where m is

the sequence length.

Conversation Encoder. The conversation his-
tory Ci−1 is a sequence of question-answer pairs
{(Q1, A1), ..., (Qi−1, Ai−1)}. We use segmenters
<q><a>to concatenate each question answer
pair (Q,A) into a sequence of tokens (<q>,
q1, ..., qm; <a>, a1, ..., am). We design a hier-
archical structure to conduct conversation history
modeling. We first employ a token level bi-LSTM
to get contextualized representation of question-
answer pairs (hwi−k,1, ...,h

w
i−k,m), where i − k is

the turn number and k ∈ [1, i). To model the
dependencies across turns in the conversation his-
tory, we adopt a context level bi-LSTM to learn the
contextual dependency (hc1, ...,h

c
i−1) across dif-

ferent turns (denoted in the subscript 1, ..., i − 1)
of question-answer pairs.

3.2 Decoder with Attention & Copy

The decoder is another LSTM to predict the
word probability distribution. At each decoding
timestep t, it reads the word embedding wt and the



4856

hidden state of previous timestep hdt−1 to generate
the current hidden state hdt = LSTM(wt,h

d
t−1).

To generate a conversational question grounded
in the passage, the decoder itself should decide
to focus more on passage hidden states hpj or
the hidden states of conversation history hwi−k,j
at each decoding timestep. Therefore, we flat
token level conversation hidden states hwi,j and
aggregate the passage hidden states hpj with to-
ken level conversation hidden states hwi,j into a
unified memory: (hp1, ...,h

p
m; hw1,1, ...,h

w
1,m; ...

; hwi−1,1, ...,h
w
i−1,m), where h

w
i,j denotes the j-

th token of the i-th turn in token level conver-
sation hidden states. Then we attend the uni-
fied memory with the standard attention mecha-
nism (Luong et al., 2015) for the passage attention
(α1, ..., αm) and the hierarchical attention mecha-
nism for the conversation attention (β1,1, ..., β1,m;
...; βi−1,1, ..., βi−1,m):

epj = h
p
j
>
Wph

d
t , (2)

ewi−k,j = h
w
i−k,j

>Wwh
d
t , (3)

eci−k = h
c
i−k
>Wch

d
t , (4)

αj =
epj
etotal

, βi−k,j =
ewi−k,j ∗ eci−k

etotal
, (5)

where etotal = Σje
p
j + Σk,je

w
i−k,j ∗ eci−k and Wp,

Ww, Wc are learnable weights.
Finally, we derive the context vector ct and the

final vocabulary distribution PV :

ct = Σjαjh
p
j + Σj,kβi−k,jh

w
i−k,j ,

PV = softmax(Wv(tanh(Wa[hdt ; ct]) + bv),

where Wv, Wa are learnable weights. Please re-
fer to See et al. (2017) for more details on the copy
mechanism.

3.3 Coreference Alignment
Using coreferences to refer back is an essen-
tial property of conversational questions. Almost
half of the questions contains explicit coreference
markers such as he, she, it in CoQA (Reddy et al.,
2019). Therefore, we propose the coreference
alignment to enable our model such ability. Take
Q2 in Table 1 as an example, traditional question
generation system can only generate question like
“What was Clinton ineligible to serve?”, while
our system with coreference alignment can align
the name “Clinton” to its pronominal reference
“he” and generate a more conversational question
“What was he ineligible to serve?”.

The coreference alignment modeling tells the
decoder to look at the correct non-pronominal
coreferent mention in the conversation attention
distribution to produce the pronominal reference
word. We achieve this via two stages. In the pre-
processing stage, given the conversation history
Ci−1 and the question Qi which has a pronom-
inal reference (e.g., he for Q2 in Table 1), we
first run a coreference resolution system (Clark
and Manning, 2016) to find its coreferent mention
(wc1, ...w

c
m) (e.g. Clinton) in the conversation his-

tory Ci−1, where the superscript c denotes tokens
identified as the coreferent mention. During train-
ing, we introduce a novel loss function built on the
conversation attention of coreferent mentions βci
and the output word probability of its pronominal
reference word pcoref ∈ PV . As shown in Figure
2, when our model need to refer back to the coref-
erent mention, we ask the model focus correctly
on the antecedent (e.g. Clinton) and maximize the
probability of its pronominal reference (e.g. he)
pcoref in the output vocabulary distribution PV ,

Lcoref = −(λ1log
Σjβ

c
j

Σk,jβi−k,j
+ λ2logpcoref) ∗ sc,

where λ1, λ2 are hyperparameters, sc is the confi-
dence score between the non-pronominal corefer-
ent mention and the pronoun obtained during the
pre-processing stage.

3.4 Conversation Flow Modeling

Another key challenge in CQG is that a coher-
ent conversation must have smooth transitions be-
tween turns. As illustrated in Figure 1, we find that
as the conversations go on, most of the questioners
transit their focus from the beginning of passages
to the end. Following this direction, we model
the conversation flow to learn smooth transitions
across turns of the conversation.

Flow Embedding. As shown in Figure 2, we
feed our model with the current turn number indi-
cator in the conversation and the relative position
for each token in the passage, which, intuitively,
are useful for modeling the conversation flow. We
achieve this goal via two additional embeddings.
The turn number embedding is a learned lookup
table [t1, ..., tn] to map the turn number i into its
feature embedding space, where n is the maxi-
mum turn we consider. For encoding the rela-
tive position of each token, we split the passage



4857

into L uniform chunks. Each token in the pas-
sage is mapped to its corresponding chunk em-
bedding [c1, ..., cL]. The final input to the pas-
sage encoder is the concatenation of word embed-
ding, answer position embedding (introduced in
Section 3.1) and these two additional embeddings:
xi = [wi;ai; ti; ci].

We further add a gated self-attention model-
ing mechanism (Zhao et al., 2018) in the pas-
sage encoder. Motivating our use of self-attention
we consider two desiderata. One is self-attention
with answer position embedding can aggregate
answer-relevant information from the whole pas-
sage for question generation. Another is we want
to learn the latent alignment between the turn
number embedding and the chunk embedding for
better modeling the conversation flow. We first
match the rich-feature enhanced passage represen-
tation Hp = [hp1; ...;h

p
m] with itself h

p
j to com-

pute the self-matching representation upj , and then
combine it with the original representation hpj :

apj = softmax(H
p>Wsh

p
j ), u

p
j = H

papj (6)

fpj = tanh(Wf [h
p
j ;u

p
j ]), (7)

The final representation h̃pj is derived via a gated
summation through a learnable gate vector gpj ,

gpt = sigmoid(Wg[h
p
j ;u

p
j ]) (8)

h̃pj = g
p
t � f

p
j + (1− g

p
t )� h

p
j (9)

where Ws, Wf , Wg are learnable weights, �
is the element-wise multiplication. Self matching
enhanced representation h̃pj takes the place of the
passage representation hpj for calculating the pas-
sage attention.

Flow Loss. In Section 3.1, our answer position
embedding can help model the conversation flow
by showing the position of answer fragments in-
side the passage. However, it is still helpful to
tell the model explicitly which sentences around
the answer are of high informativity to generate
the current turn question. The flow loss is de-
signed to help our model to locate the evidence
sentences correctly. Firstly, we define two kinds of
sentences in the passage. If a sentence is informa-
tive to the current question, we call it Current
Evidence Sentence (CES). If a sentence
is informative to questions in the conversation his-
tory and irrelevant to the current question, we call
it History Evidence Sentence (HES).

Then our model is taught to focus on current ev-
idence sentences and ignore the history evidence
sentences in the passage attention αj via the fol-
lowing flow loss:

Lflow = −λ3log
Σj:wj∈CESαj

Σjαj
+ λ4

Σj:wj∈HESαj

Σjαj

where λ3, λ4 are hyperparameters, and wj ∈
CES/HES indicates the token wj is inside the sen-
tence with a CES/HES label.

3.5 Joint Training
Considering all the aforementioned components,
we define a joint loss function as:

L = Lnll + Lcoref + Lflow, (10)

in which Lnll = −log Prob(Qi|P,Ai, Ci−1) is the
the negative log-likelihood loss in the sequence to
sequence learning (Sutskever et al., 2014).

4 Experiments

4.1 Dataset Preparation
We conduct experiments on the CoQA dataset
(Reddy et al., 2019). It is a large-scale conver-
sational question answering dataset for measuring
the ability of machines to participate in a question-
answering style conversation. The authors employ
Amazon Mechanical Turk to collect 8k conversa-
tions with 127k QA pairs. Specifically, they pair
two crowd-workers: a questioner and an answerer
to chat about a passage. The answerers are asked
to firstly highlight extractive spans in the passage
as rationales and then write the free-form answers.
We first extract each data sample as a quadruple
of passage, question, answer and conversation his-
tory (previous n turns of QA pairs) from CoQA.
Then we filter out QA pairs with yes, no or un-
known as answers (28.7% of total QA pairs) be-
cause there is too little information to generate the
question to the point. Finally, we randomly split
the dataset into a training set (80%, 66298 sam-
ples), a validation set (10%, 8409 samples) and a
testing set (10%, 8360 samples). The average pas-
sage, question and answer lengths are 332.9, 6.3
and 3.2 tokens respectively.

4.2 Implementation Details
Locating Extractive Answer Spans. As stud-
ied by Yatskar (2018), abstractive answers in
CoQA are mostly small modifications to spans oc-
curring in the context. The maximum achievable



4858

performance by a model that predicts spans from
the context is 97.8 F1 score. Therefore, we find the
extractive spans from the passage which have the
maximum F1 score with answers and treat them as
answers for our answer position embedding.

Number of Turns in Conversation History.
Reddy et al. (2019) find that in CoQA dataset,
most questions in a conversation have a limited de-
pendency within a bound of two turns. Therefore,
we choose the number of history turns as n = 3
to ensure the target questions have enough conver-
sation history information to generate and avoid
introducing too much noise from all turns of QA
pairs.

Labeling Evidence Sentences. As mentioned in
Section 4.1, the crowd-workers label the extractive
spans in the passage as rationales for actual an-
swers. We treat sentences containing the rationale
as Current Evidence Sentence.

Model Settings. We employ the teacher-forcing
training, and in the generating stage, we set the
maximum length for output sequence as 15 and
block unigram repeated token, the beam size k is
set to 5. All hyperparameters and models are se-
lected on the validation set and the results are re-
ported on the test set.

4.3 Baselines and Ablations

We compare with the state-of-the-art baselines
and conduct ablations as follows: PGNet is the
pointer-generator network (See et al., 2017). We
concatenate the passage P , the conversation his-
tory Ci−1 and the current answer Ai as a sequence
for the input. NQG (Du and Cardie, 2018) is sim-
ilar to the previous one but it takes current an-
swer features concatenated with the word embed-
dings during encoding. MSNet is our base model
Multi-Source encoder decoder network (Section
3.1 & 3.2). CorefNet is our proposed Coreference
alignment model (Section 3.3). FlowNet is our
proposed conversation Flow model (Section 3.4).
CFNet is the model with both the Coreference
alignment and the conversation Flow modeling.

5 Results and Analysis

5.1 Main Results

Since the average length of questions is 6.3 to-
kens only, we employ BLEU (1-3) (Papineni et al.,
2002) and ROUGE-L (R-L) (Lin, 2004) scores

B1 B2 B3 R-L
PGNet 28.84* 13.74* 8.16* 39.18*
NQG 35.56* 21.14* 14.84* 45.58*
MSNet 36.27* 21.92* 15.51* 46.01*
CorefNet 36.89 22.28 15.77 46.53
FlowNet 36.87 22.49 15.98 46.64
CFNet 37.38 22.81 16.25 46.90

Table 2: Main results of baselines and our mod-
els. t-test is conducted between our CFNet and base-
lines/ablations. (underline: p-value <0.05, *: p-value
<0.01).

to evaluate n-gram similarity between the gener-
ated questions with the ground truth. We evaluate
baselines and our models by predicting the current
question given a passage, the current answer, and
the ground truth conversation history.

Table 2 shows the main results, and we have the
following observations:

• NQG outperforms PGNet by a large margin.
The improvement shows that the answer posi-
tion embedding (Zhou et al., 2017) is helpful for
asking questions to the point.
• Our base model MSNet outperforms NQG,

which reveals that the hierarchical encoding and
the hierarchical attention to conversation history
can model the dependency across different turns
in conversations.
• Both our CorefNet and FlowNet outperform our

base model. We will analyze the effectiveness
of our coreference alignment and conversation
flow modeling in the following two sections re-
spectively.
• Our CFNet is significantly better than two base-

lines (PGNet, NQG), our MSNet, and our
CorefNet. However, the difference between our
CFNet and our FlowNet is not significant. This
is because the conversation flow modeling im-
proves all test samples while the coreference
alignment contributes only to questions contain-
ing pronominal references.

5.2 Coreference Alignment Analysis

As we discussed in Section 3.3, it is the nature of
conversational questions to use coreferences to re-
fer back. In order to demonstrate the effectiveness
of the proposed coreference alignment, we evalu-
ate models on a subset of the test set called coref-
erence set. Each sample in the coreference set re-
quires a pronoun resolution between the conversa-
tion history and the current question (e.g., Q2, Q6,



4859

B1 B2 B3 R-L P R F
PGNet 27.66* 13.82* 8.96* 38.40* 26.87* 25.17* 25.68*
NQG 34.75* 21.52* 15.96* 45.04* 34.46* 32.97* 33.25*
MSNet 36.31* 22.92 17.07 45.97* 35.34* 33.80* 34.07*
CorefNet 37.51 24.14 18.44 47.45 42.09 40.35 40.64

Table 3: Evaluation results on the coreference test set.
Precision (P), Recall (R) and F-score (F) of predicted
pronouns are also reported. Significant tests with t-test
are conducted between CorefNet and models without
the coreference alignment. (underline: p-value <0.05,
*: p-value <0.01).

Passage: … however , mccain has a very different life story . he grew up 
in a navy family and was a pilot during the vietnam war in the 1960s …
Conversation History:

<q> what war was mccain in ?
0.0000 0.0001 0.0049 0.0138 0.7710 0.0055 0.0069

<a> vietnam war
0.0000 0.0140 0.0095

<q> was he in the army ?
0.0000 0.0045 0.1303 0.0005 0.0139 0.0001 0.0250

<a> no
0.0000 0.0000

Question (Human): what was his job ?
Question (Our Model): what was his job ?
Passage: … incumbent democratic president bill clinton was ineligible to 
serve a third term due to term limitations in the 22nd amendment of the 
constitution …
Conversation History:

<q> what political party is clinton a
0.0000 0.0000 0.0002 0.0063 0.0045 0.9260 0.0430
member of ? <a> democratic
0.0008 0.0006 0.0026 0.0000 0.0160

Question (Human): what was he ineligible to serve ?
Question (Our Model): what was he ineligible for ?

Figure 3: Examples for the coreference alignment
model. We show the attention probability (renormalize
to 1) when the CorefNet predicts a pronoun (red color
in Question). The current answers are underlined in the
passages. (Best viewed in color)

Q9 in Table 1). In additional to the BLEU(1-3)
and ROUGE-L metrics, we also calculate the Pre-
cision (P), Recall (R) and F-score (F) of pronouns
in the generated questions with regard to pronouns
in the ground truth questions.

The results are depicted in Table 3. With the
help of the coreference alignment, CorefNet sig-
nificantly improves the precision, recall, and f-
score of the predicted pronouns. Moreover, the
performance on n-gram overlapping metrics is
also boosted. To gain more insights into how the
coreference alignment model influence the gener-
ation process, in Figure 3, we visualize the con-
versation attention distribution βj at the timestep
the model predicts a pronoun. The conversation
history distribution βj is renormalized to Σjβj =
1. All two examples show that our model put
the highest attention probability on the coreferent

mentions (i.e. McCain/Clinton) when it generates
the pronominal references (his/he). We can con-
clude that our coreference alignment model can
align correct coreferent mentions to generate cor-
responding pronouns.

5.3 Conversation Flow Modeling Analysis
As discussed in Section 3.4, a coherent conversa-
tion should have smooth transitions between turns,
and we design our model to follow the narrative
structure of the passage. Figure 4 shows an ex-
ample illustrating the transition of passage atten-
tion distribution aj (normalize to 1) during first
11 turns of a conversation. We see that the model
transits its focus smoothly across the first 11 turns
from the first sentence in the passage to later parts.
Sometimes the model drills down with two ques-
tions for the same sentence such as turn 2 & 3, 4
& 5 and 10 & 11.

To quantitatively validate the effectiveness of
our conversation flow modeling, we study the
alignment between passage attention αj and sen-
tences of interest in the passage. Ideally, a suc-
cessful model should focus on sentences of inter-
est (i.e., Current Evidence Sentence) and ignore
sentences questioned several turns ago (i.e., His-
tory Evidence Sentence). We validate this intu-
ition by calculating Σj:wj∈CESαj and Σj:wj∈HESαj
for all examples in test set. Results show that
Σj:wj∈CESαj and Σj:wj∈HESαj for our model with
conversation flow modeling are 0.9966 and 0.0010
on average, which demonstrates that our conver-
sation flow modeling can locate the current evi-
dence sentences precisely and ignore the history
evidence sentence. For the model without the flow
modeling (CorefNet), Σj:wj∈CESαj = 0.4093,
Σj:wj∈HESαj = 0.1778, which proves our intu-
ition in Section 3.4 that the answer position em-
bedding cannot have comparable effects on the
conversation flow modeling.

5.4 Human Evaluation
We randomly sample 93 questions with the asso-
ciated passage and conversation history to conduct
human evaluation. We hire 5 workers to evalu-
ate the questions generated by PGNet, MSNet, and
our CFNet. All models are evaluated in terms of
following 3 metrics: “Grammaticality”, “Answer-
ability” and “Interconnectedness”. “Grammatical-
ity” measures the grammatical correctness and flu-
ency of the generated questions. “Answerability”
evaluates whether the generated question can be



4860

annie s sister , julia , was having a birthday party in the afternoon .
annie 's mother was going to bake the cake for the party . mother asked
annie to help her bake the cake . they chose to make a chocolate cake
with chocolate frosting . annie got the bowls and the ingredients they would need for
the cake . she helped measure the flour , the sugar and the cocoa .

: 2nd & 3rdTurn number: : 4th &5th : 6th : 7th &8th : 9th : 10th &11th

Figure 4: The transition of passage attention distribution between turns. Different colors are correspond to different
turns. To show attention probability of different turns in one place, we only draw attention probability αj >0.1
here. If two turns focus on the same sentence, we average the attention probability between them. (Best viewed in
color)

Grammaticality Answerability Interconnectedness
PGNet 2.74 1.39 1.59
MSNet 2.85 2.39 1.74
CFNet 2.89 2.74* 2.67*

Table 4: Manual evaluation results. All metrics are
rated on a 1-3 scale (3 for the best). Two-tailed t-
test results are shown for our CFNet compared to
PGNet/MSNet. * indicates p-value <0.01.

answered by the current answer. “Interconnect-
edness” measures whether the generated questions
are conversational or not. If a question refers back
to the conversation history using coreference or is
dependent on the conversation history such as in-
complete questions ‘Why?’, ‘Of what?’, we de-
fine it as a conversational question. All metrics
are rated on a 1-3 scale (3 for the best).

The results are shown in Table 4. All mod-
els achieve high scores on “Grammaticality”, ow-
ing to the strong language modeling capability
of neural models. MSNet and our CFNet per-
form well on “Answerability” while PGNet does
not. This demonstrates our base model MSNet
and our CFNet can ask questions to the point. Fi-
nally, our CFNet outperforms the other two mod-
els in terms of “Interconnectedness” by a large
gap, which proves that the proposed coreference
alignment and conversation flow modeling can ef-
fectively make questions conversational.

6 Related Work

The task of Question Generation (QG) aims at
generating natural questions from given input con-
texts. Some template-based approaches (Vander-
wende, 2007; Heilman and Smith, 2010) were
proposed initially, where well-designed rules and
heavy human labor are required for declarative-
to-interrogative sentence transformation. With the
rise of data-driven learning approach and sequence

to sequence (seq2seq) framework (Sutskever et al.,
2014), Du et al. (2017) first formulate QG as a
seq2seq problem with attention mechanism. They
extract sentences and pair them with questions
from SQuAD (Rajpurkar et al., 2016), a large-
scale reading comprehension dataset. Recent
works along this line focus on how to utilize the
answer information better to generate questions to
the point (Zhou et al., 2017; Gao et al., 2019b; Sun
et al., 2018), how to generate questions with spe-
cific difficulty levels (Gao et al., 2019a) and how to
effectively use the contexts in paragraphs to gen-
erate questions that cover context beyond a single
sentence (Zhao et al., 2018; Du and Cardie, 2018).

In parallel to question generation for reading
comprehension, some researchers recently inves-
tigate question generation in dialogue systems. Li
et al. (2017) show that asking questions through
interactions can receive useful feedbacks to reach
the correct answer. Wang et al. (2018) consider
asking questions in open-domain conversational
systems with typed decoders to enhance the inter-
activeness and persistence of conversations.

In this paper, we propose a new setting which is
related to the above two lines of research. We con-
sider asking questions grounded in a passage via a
question-answering style conversation. Since the
questions and answers are in the format of a con-
versation, questions in our setting are highly con-
versational and interconnected to conversation his-
tory. This setting is challenging because we need
to jointly model the attention shifting in the pas-
sage and the structure of a conversation (Grosz and
Sidner, 1986). A limitation of the conversation in
our setting is that we can only generate a series of
interconnected questions according to predefined
answers but in a real dialog the questioner can ask
different questions according to the answers’ re-
sponse.



4861

7 Conclusion and Future Work

In this paper, we study the problem of question-
answering style Conversational Question Gener-
ation (CQG), which has never been investigated
before. We propose an end-to-end neural model
with coreference alignment and conversation flow
modeling to solve this problem. The coreference
alignment enables our framework to refer back to
the conversation history using coreferences. The
conversation flow modeling builds a coherent con-
versation between turns. Experiments show that
our proposed framework achieves the best perfor-
mance in automatic and human evaluations.

There are several future directions for this set-
ting. First, the presented system is still contingent
on highlighting answer-like nuggets in the declar-
ative text. Integrating answer span identification
into the presented system is a promising direction.
Second, in our setting, the roles of the questioner
and the answerer are fixed. However, questions
can be raised by either part in real scenario.

Acknowledgments

This work is supported by the Research Grants
Council of the Hong Kong Special Administra-
tive Region, China (No. CUHK 14208815 and
No. CUHK 14210717 of the General Research
Fund). We thank Department of Computer Sci-
ence and Engineering, The Chinese University of
Hong Kong for the conference grant support. We
would like to thank Wang Chen and Jingjing Li for
their comments.

References
Kevin Clark and Christopher D. Manning. 2016. Deep

reinforcement learning for mention-ranking coref-
erence models. In Proceedings of the 2016 Con-
ference on Empirical Methods in Natural Language
Processing, pages 2256–2262, Austin, Texas. Asso-
ciation for Computational Linguistics.

Xinya Du and Claire Cardie. 2018. Harvest-
ing paragraph-level question-answer pairs from
Wikipedia. In Proceedings of the 56th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 1907–1917, Mel-
bourne, Australia. Association for Computational
Linguistics.

Xinya Du, Junru Shao, and Claire Cardie. 2017. Learn-
ing to ask: Neural question generation for reading
comprehension. In Proceedings of the 55th An-
nual Meeting of the Association for Computational

Linguistics (Volume 1: Long Papers), pages 1342–
1352, Vancouver, Canada. Association for Compu-
tational Linguistics.

Yifan Gao, Lidong Bing, Wang Chen, Michael R. Lyu,
and Irwin King. 2019a. Difficulty controllable gen-
eration of reading comprehension questions. In Pro-
ceedings of the Twenty-Eightth International Joint
Conference on Artificial Intelligence, IJCAI-19. In-
ternational Joint Conferences on Artificial Intelli-
gence Organization.

Yifan Gao, Lidong Bing, Piji Li, Irwin King, and
Michael R. Lyu. 2019b. Generating distractors for
reading comprehension questions from real exami-
nations. In AAAI Conference on Artificial Intelli-
gence.

Barbara J. Grosz and Candace L. Sidner. 1986. Atten-
tion, intentions, and the structure of discourse. Com-
putational Linguistics, 12(3):175–204.

Michael Heilman and Noah A. Smith. 2010. Good
question! statistical ranking for question genera-
tion. In Human Language Technologies: The 2010
Annual Conference of the North American Chap-
ter of the Association for Computational Linguistics,
pages 609–617, Los Angeles, California. Associa-
tion for Computational Linguistics.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long
short-term memory. Neural Computation, 9:1735–
1780.

Jiwei Li, Alexander H. Miller, Sumit Chopra,
Marc’Aurelio Ranzato, and Jason Weston. 2017.
Learning through dialogue interactions by asking
questions. In ICLR.

Chin-Yew Lin. 2004. ROUGE: A package for auto-
matic evaluation of summaries. In Text Summa-
rization Branches Out: Proceedings of the ACL-04
Workshop, pages 74–81, Barcelona, Spain. Associa-
tion for Computational Linguistics.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1412–1421, Lis-
bon, Portugal. Association for Computational Lin-
guistics.

Nasrin Mostafazadeh, Ishan Misra, Jacob Devlin, Mar-
garet Mitchell, Xiaodong He, and Lucy Vander-
wende. 2016. Generating natural questions about
an image. In Proceedings of the 54th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 1802–1813, Berlin,
Germany. Association for Computational Linguis-
tics.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of

https://doi.org/10.18653/v1/D16-1245
https://doi.org/10.18653/v1/D16-1245
https://doi.org/10.18653/v1/D16-1245
https://www.aclweb.org/anthology/P18-1177
https://www.aclweb.org/anthology/P18-1177
https://www.aclweb.org/anthology/P18-1177
https://doi.org/10.18653/v1/P17-1123
https://doi.org/10.18653/v1/P17-1123
https://doi.org/10.18653/v1/P17-1123
https://www.aclweb.org/anthology/J86-3001
https://www.aclweb.org/anthology/J86-3001
https://www.aclweb.org/anthology/N10-1086
https://www.aclweb.org/anthology/N10-1086
https://www.aclweb.org/anthology/N10-1086
https://www.aclweb.org/anthology/W04-1013
https://www.aclweb.org/anthology/W04-1013
https://doi.org/10.18653/v1/D15-1166
https://doi.org/10.18653/v1/D15-1166
https://doi.org/10.18653/v1/P16-1170
https://doi.org/10.18653/v1/P16-1170
https://doi.org/10.3115/1073083.1073135
https://doi.org/10.3115/1073083.1073135


4862

40th Annual Meeting of the Association for Com-
putational Linguistics, pages 311–318, Philadelphia,
Pennsylvania, USA. Association for Computational
Linguistics.

Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and
Percy Liang. 2016. SQuAD: 100,000+ questions for
machine comprehension of text. In Proceedings of
the 2016 Conference on Empirical Methods in Natu-
ral Language Processing, pages 2383–2392, Austin,
Texas. Association for Computational Linguistics.

Siva Reddy, Danqi Chen, and Christopher D Manning.
2019. CoQA: A conversational question answering
challenge. Transactions of the Association for Com-
putational Linguistics.

Abigail See, Peter J. Liu, and Christopher D. Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1073–
1083, Vancouver, Canada. Association for Compu-
tational Linguistics.

Iulian Vlad Serban, Alberto Garcı́a-Durán, Caglar
Gulcehre, Sungjin Ahn, Sarath Chandar, Aaron
Courville, and Yoshua Bengio. 2016. Generating
factoid questions with recurrent neural networks:
The 30M factoid question-answer corpus. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 588–598, Berlin, Germany. Associa-
tion for Computational Linguistics.

Linfeng Song, Zhiguo Wang, Wael Hamza, Yue Zhang,
and Daniel Gildea. 2018. Leveraging context in-
formation for natural question generation. In Pro-
ceedings of the 2018 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, Vol-
ume 2 (Short Papers), pages 569–574, New Orleans,
Louisiana. Association for Computational Linguis-
tics.

Xingwu Sun, Jing Liu, Yajuan Lyu, Wei He, Yan-
jun Ma, and Shi Wang. 2018. Answer-focused and
position-aware neural question generation. In Pro-
ceedings of the 2018 Conference on Empirical Meth-
ods in Natural Language Processing, pages 3930–
3939, Brussels, Belgium. Association for Computa-
tional Linguistics.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in Neural Information Pro-
cessing Systems 27, pages 3104–3112. Curran As-
sociates, Inc.

Lucy Vanderwende. 2007. Answering and questioning
for machine reading. In AAAI Spring Symposium:
Machine Reading.

Siyuan Wang, Zhongyu Wei, Zhihao Fan, Yang Liu,
and Xuanjing Huang. 2019. A multi-agent commu-

nication framework for question-worthy phrase ex-
traction and question generation. In AAAI Confer-
ence on Artificial Intelligence.

Yansen Wang, Chenyi Liu, Minlie Huang, and Liqiang
Nie. 2018. Learning to ask questions in open-
domain conversational systems with typed decoders.
In Proceedings of the 56th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), pages 2193–2203, Melbourne, Aus-
tralia. Association for Computational Linguistics.

Mark Yatskar. 2018. A qualitative comparison of coqa,
squad 2.0 and quac. CoRR, abs/1809.10735.

Xingdi Yuan, Tong Wang, Caglar Gulcehre, Alessan-
dro Sordoni, Philip Bachman, Saizheng Zhang,
Sandeep Subramanian, and Adam Trischler. 2017.
Machine comprehension by text-to-text neural ques-
tion generation. In Proceedings of the 2nd Workshop
on Representation Learning for NLP, pages 15–25,
Vancouver, Canada. Association for Computational
Linguistics.

Yao Zhao, Xiaochuan Ni, Yuanyuan Ding, and Qifa
Ke. 2018. Paragraph-level neural question gener-
ation with maxout pointer and gated self-attention
networks. In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Process-
ing, pages 3901–3910, Brussels, Belgium. Associ-
ation for Computational Linguistics.

Qingyu Zhou, Nan Yang, Furu Wei, Chuanqi Tan,
Hangbo Bao, and Ming Zhou. 2017. Neural ques-
tion generation from text: A preliminary study. In
Proceedings of the 6th CCF International Confer-
ence on Natural Language Processing and Chi-
nese Computing (NLPCC), pages 662–671, Dalian,
China.

https://doi.org/10.18653/v1/D16-1264
https://doi.org/10.18653/v1/D16-1264
https://doi.org/10.18653/v1/P17-1099
https://doi.org/10.18653/v1/P17-1099
https://doi.org/10.18653/v1/P16-1056
https://doi.org/10.18653/v1/P16-1056
https://doi.org/10.18653/v1/P16-1056
https://doi.org/10.18653/v1/N18-2090
https://doi.org/10.18653/v1/N18-2090
https://www.aclweb.org/anthology/D18-1427
https://www.aclweb.org/anthology/D18-1427
http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf
http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf
https://www.aclweb.org/anthology/P18-1204
https://www.aclweb.org/anthology/P18-1204
https://doi.org/10.18653/v1/W17-2603
https://doi.org/10.18653/v1/W17-2603
https://www.aclweb.org/anthology/D18-1424
https://www.aclweb.org/anthology/D18-1424
https://www.aclweb.org/anthology/D18-1424

