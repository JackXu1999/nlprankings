



















































Natural Language Generation for Spoken Dialogue System using RNN Encoder-Decoder Networks


Proceedings of the 21st Conference on Computational Natural Language Learning (CoNLL 2017), pages 442–451,
Vancouver, Canada, August 3 - August 4, 2017. c©2017 Association for Computational Linguistics

Natural Language Generation for Spoken Dialogue System
using RNN Encoder-Decoder Networks

Van-Khanh Tran1,2 and Le-Minh Nguyen1
1Japan Advanced Institute of Science and Technology, JAIST

1-1 Asahidai, Nomi, Ishikawa, 923-1292, Japan
{tvkhanh, nguyenml}@jaist.ac.jp

2University of Information and Communication Technology, ICTU
Thai Nguyen University, Vietnam
tvkhanh@ictu.edu.vn

Abstract

Natural language generation (NLG) is a
critical component in a spoken dialogue
system. This paper presents a Recurrent
Neural Network based Encoder-Decoder
architecture, in which an LSTM-based de-
coder is introduced to select, aggregate se-
mantic elements produced by an attention
mechanism over the input elements, and
to produce the required utterances. The
proposed generator can be jointly trained
both sentence planning and surface real-
ization to produce natural language sen-
tences. The proposed model was exten-
sively evaluated on four different NLG
datasets. The experimental results showed
that the proposed generators not only con-
sistently outperform the previous methods
across all the NLG domains but also show
an ability to generalize from a new, un-
seen domain and learn from multi-domain
datasets.

1 Introduction

Natural Language Generation (NLG) plays a crit-
ical role in Spoken Dialogue Systems (SDS) with
task is to convert a meaning representation pro-
duced by the Dialogue Manager into natural lan-
guage utterances. Conventional approaches still
rely on comprehensive hand-tuning templates and
rules requiring expert knowledge of linguistic rep-
resentation, including rule-based (Mirkovic et al.,
2011), corpus-based n-gram models (Oh and Rud-
nicky, 2000), and a trainable generator (Stent
et al., 2004).

Recently, Recurrent Neural Networks (RNNs)
based approaches have shown promising perfor-
mance in tackling the NLG problems. The RNN-
based models have been applied for NLG as a joint

training model (Wen et al., 2015a,b) and an end-
to-end training model (Wen et al., 2016c). A re-
curring problem in such systems is requiring anno-
tated datasets for particular dialogue acts1 (DAs).
To ensure that the generated utterance representing
the intended meaning of the given DA, the previ-
ous RNN-based models were further conditioned
on a 1-hot vector representation of the DA. Wen
et al. (2015a) introduced a heuristic gate to en-
sure that all the slot-value pair was accurately cap-
tured during generation. Wen et al. (2015b) sub-
sequently proposed a Semantically Conditioned
Long Short-term Memory generator (SC-LSTM)
which jointly learned the DA gating signal and
language model.

More recently, Encoder-Decoder networks
(Vinyals and Le, 2015; Li et al., 2015), especially
the attentional based models (Wen et al., 2016b;
Mei et al., 2015) have been explored to solve
the NLG tasks. The Attentional RNN Encoder-
Decoder (Bahdanau et al., 2014) (ARED) based
approaches have also shown improved perfor-
mance on a variety of tasks, e.g., image captioning
(Xu et al., 2015; Yang et al., 2016), text summa-
rization (Rush et al., 2015; Nallapati et al., 2016).

While the RNN-based generators with DA
gating-vector can prevent the undesirable seman-
tic repetitions, the ARED-based generators show
signs of better adapting to a new domain. How-
ever, none of the models show significant advan-
tage from out-of-domain data. To better analyze
model generalization to an unseen, new domain
as well as model leveraging the out-of-domain
sources, we propose a new architecture which is
an extension of the ARED model. In order to
better select, aggregate and control the seman-
tic information, a Refinement Adjustment LSTM-
based component (RALSTM) is introduced to the

1A combination of an action type and a set of slot-value
pairs. e.g. inform(name=’Bar crudo’; food=’raw food’)

442



decoder side. The proposed model can learn from
unaligned data by jointly training the sentence
planning and surface realization to produce natural
language sentences. We conducted experiments
on four different NLG domains and found that
the proposed methods significantly outperformed
the state-of-the-art methods regarding BLEU (Pa-
pineni et al., 2002) and slot error rate ERR scores
(Wen et al., 2015b). The results also showed
that our generators could scale to new domains by
leveraging the out-of-domain data. To sum up, we
make three key contributions in this paper:

• We present an LSTM-based component
called RALSTM cell applied on the decoder
side of an ARED model, resulting in an end-
to-end generator that empirically shows sig-
nificant improved performances in compari-
son with the previous approaches.

• We extensively conduct the experiments to
evaluate the models training from scratch on
each in-domain dataset.

• We empirically assess the models’ ability to:
learn from multi-domain datasets by pool-
ing all available training datasets; and adapt
to a new, unseen domain by limited feeding
amount of in-domain data.

We review related works in Section 2. Following
a detail of proposed model in Section 3, Section 4
describes datasets, experimental setups, and eval-
uation metrics. The resulting analysis is presented
in Section 5. We conclude with a brief summary
and future work in Section 6.

2 Related Work

Recently, RNNs-based models have shown
promising performance in tackling the NLG
problems. Zhang and Lapata (2014) proposed
a generator using RNNs to create Chinese po-
etry. Xu et al. (2015); Karpathy and Fei-Fei
(2015); Vinyals et al. (2015) also used RNNs in
a multi-modal setting to solve image captioning
tasks. The RNN-based Sequence to Sequence
models have applied to solve variety of tasks:
conversational modeling (Vinyals and Le, 2015;
Li et al., 2015, 2016), machine translation (Luong
et al., 2015; Li and Jurafsky, 2016)

For task-oriented dialogue systems, Wen et al.
(2015a) combined a forward RNN generator, a
CNN reranker, and a backward RNN reranker to

generate utterances. Wen et al. (2015b) proposed
SC-LSTM generator which introduced a control
sigmoid gate to the LSTM cell to jointly learn the
gating mechanism and language model. A recur-
ring problem in such systems is the lack of suffi-
cient domain-specific annotated data. Wen et al.
(2016a) proposed an out-of-domain model which
was trained on counterfeited data by using seman-
tically similar slots from the target domain in-
stead of the slots belonging to the out-of-domain
dataset. The results showed that the model can
achieve a satisfactory performance with a small
amount of in-domain data by fine tuning the tar-
get domain on the out-of-domain trained model.

More recently, RNN encoder-decoder based
models with attention mechanism (Bahdanau
et al., 2014) have shown improved performances
in various tasks. Yang et al. (2016) proposed a
review network to the image captioning, which
reviews all the information encoded by the en-
coder and produces a compact thought vector.
Mei et al. (2015) proposed RNN encoder-decoder-
based model by using two attention layers to
jointly train content selection and surface realiza-
tion. More close to our work, Wen et al. (2016b)
proposed an attentive encoder-decoder based gen-
erator which computed the attention mechanism
over the slot-value pairs. The model showed a
domain scalability when a very limited amount of
data is available.

Moving from a limited domain dialogue system
to an open domain dialogue system raises some
issues. Therefore, it is important to build an open
domain dialogue system that can make as much
use of existing abilities of functioning from other
domains. There have been several works to tackle
this problem, such as (Mrkšić et al., 2015) using
RNN-based networks for multi-domain dialogue
state tracking, (Wen et al., 2016a) using a pro-
cedure to train multi-domain via multiple adapta-
tion steps, or (Gašić et al., 2015; Williams, 2013)
adapting of SDS components to new domains.

3 Recurrent Neural Language Generator

The recurrent language generator proposed in this
paper is based on a neural language generator
(Wen et al., 2016b), which consists of three main
components: (i) an Encoder that incorporates the
target meaning representation (MR) as the model
inputs, (ii) an Aligner that aligns and controls the
semantic elements, and (iii) an RNN Decoder that

443



Figure 1: Unrolled presentation of the RNNs-
based neural language generator. The Encoder
part is a BiLSTM, the Aligner is an attention
mechanism over the encoded inputs, and the De-
coder is the proposed RALSTM model condi-
tioned on a 1-hot representation vector s. The fad-
ing color of the vector s indicates retaining infor-
mation for future computational time steps.

generates output sentences. The generator archi-
tecture is shown in Figure 1. The Encoder first en-
codes the MR into input semantic elements which
are then aggregated and selected by utilizing an
attention-based mechanism by the Aligner. The
input to the RNN Decoder at each time step is a
1-hot encoding of a token2 wt and an attentive DA
representation dt. At each time step t, RNN De-
coder also computes how much the feature value
vector st�1 retained for the next computational
steps, and adds this information to the RNN output
which represents the probability distribution of the
next token wt+1. At generation time, we can sam-
ple from this conditional distribution to obtain the
next token in a generated sentence, and feed it as
the next input to the RNN Decoder. This process
finishes when an end sign is generated (Karpa-
thy and Fei-Fei, 2015), or some constraints are
reached (Zhang and Lapata, 2014). The model can
produce a sequence of tokens which can finally be
lexicalized3 to form the required utterance.

2Input texts are delexicalized where slot values are re-
placed by its corresponding slot tokens.

3The process in which slot token is replaced by its value.

Figure 2: The RALSTM cell proposed in this pa-
per, which consists of three components: an Re-
finement Cell, a traditional LSTM Cell, and an
Adjustment Cell. At time step t, while the Refine-
ment cell computes new input tokens xt based on
the original input tokens and the attentional DA
representation dt, the Adjustment Cell calculates
how much information of the slot-value pairs can
be generated by the LSTM Cell.

3.1 Encoder

The slots and values are separated parameters used
in the encoder side. This embeds the source infor-
mation into a vector representation zi which is a
concatenation of embedding vector representation
of each slot-value pair, and is computed by:

zi = ui � vi (1)

where ui, vi are the i-th slot and value embedding
vectors, respectively, and � is vector concatena-
tion. The i index runs over the L given slot-value
pairs. In this work, we use a 1-layer, Bidirectional
LSTM (Bi-LSTM) to encode the sequence of slot-
value pairs4 embedding. The Bi-LSTM consists
of forward and backward LSTMs which read the
sequence of slot-value pairs from left-to-right and
right-to-left to produce forward and backward se-
quence of hidden states (�!e1 , ..,�!eL), and ( �e1 , .., �eL),
respectively. We then obtain the sequence of en-
coded hidden states E = (e1, e2, .., eL) where ei

4We treated the set of slot-value pairs as a sequence and
use the order specified by slot’s name (e.g., slot address
comes first, food follows address). We have tried treating
slot-value pairs as a set with natural order as in the given DAs.
However, this yielded even worse results.

444



is a sum of the forward hidden state �!ei and the
backward one �ei as follows:

ei = �!ei + �ei (2)

3.2 Aligner
The Aligner utilizes attention mechanism to calcu-
late the DA representation as follows:

�t,i =
exp et,iP
j exp et,j

(3)

where
et,i = a(ei, ht�1) (4)

and �t,i is the weight of i-th slot-value pair calcu-
lated by the attention mechanism. The alignment
model a is computed by:

a(ei, ht�1) = v>a tanh(Waei + Uaht�1) (5)

where va, Wa, Ua are the weight matrices to learn.
Finally, the Aligner calculates dialogue act embed-
ding dt as follows:

dt = a�
X

i
�t,iei (6)

where a is vector embedding of the action type.

3.3 RALSTM Decoder
The proposed semantic RALSTM cell applied for
Decoder side consists of three components: a Re-
finement cell, a traditional LSTM cell, and an Ad-
justment cell:

Firstly, instead of feeding the original input to-
ken wt into the RNN cell, the input is recomputed
by using a semantic gate as follows:

rt = �(Wrddt + Wrhht�1)
xt = rt � wt

(7)

where Wrd and Wrh are weight matrices.
Element-wise multiplication � plays a part in
word-level matching which not only learns the
vector similarity, but also preserves information
about the two vectors. Wrh acts like a key phrase
detector that learns to capture the pattern of gener-
ation tokens or the relationship between multiple
tokens. In other words, the new input xt consists
of information of the original input token wt, the
DA representation dt, and the hidden context ht�1.
rt is called a Refinement gate because the input to-
kens are refined by a combination gating informa-
tion of the attentive DA representation dt and the

previous hidden state ht�1. By this way, we can
represent the whole sentence based on the refined
inputs.

Secondly, the traditional LSTM network pro-
posed by Hochreiter and Schmidhuber (2014) in
which the input gate ii, forget gate ft and output
gates ot are introduced to control information flow
and computed as follows:0BB@

it
ft
ot
ĉt

1CCA =
0BB@

�
�
�

tanh

1CCA W4n,4n
0@ xtdt

ht�1

1A (8)
where n is hidden layer size, W4n,4n is model pa-
rameters. The cell memory value ct is modified to
depend on the DA representation as:

ct = ft � ct�1 + it � ĉt + tanh(Wcrrt)
h̃t = ot � tanh(ct)

(9)

where h̃t is the output.
Thirdly, inspired by work of Wen et al. (2015b)

in which the generator was further conditioned on
a 1-hot representation vector s of given dialogue
act, and work of Lu et al. (2016) that proposed a
visual sentinel gate to make a decision on whether
the model should attend to the image or to the sen-
tinel gate, an additional gating cell is introduced
on top of the traditional LSTM to gate another
controlling vector s. Figure 6 shows how RAL-
STM controls the DA vector s. First, starting from
the 1-hot vector of the DA s0, at each time step t
the proposed cell computes how much the LSTM
output h̃t affects the DA vector, which is computed
as follows:

at = �(Waxxt + Wahh̃t)
st = st�1 � at

(10)

where Wax, Wah are weight matrices to be
learned. at is called an Adjustment gate since its
task is to control what information of the given DA
have been generated and what information should
be retained for future time steps. Second, we con-
sider how much the information preserved in the
DA st can be contributed to the output, in which
an additional output is computed by applying the
output gate ot on the remaining information in st
as follows:

ca = Wosst
h̃a = ot � tanh(ca)

(11)

445



where Wos is a weight matrix to project the DA
presentation into the output space, h̃a is the Ad-
justment cell output. Final RALSTM output is
a combination of both outputs of the traditional
LSTM cell and the Adjustment cell, and computed
as follows:

ht = h̃t + h̃a (12)

Finally, the output distribution is computed by
applying a softmax function g, and the distribution
can be sampled to obtain the next token,

P (wt+1 | wt, ...w0, DA) = g(Whoht)
wt+1 ⇠ P (wt+1 | wt, wt�1, ...w0, DA)

(13)

where DA = (s, z).

3.4 Training

The objective function was the negative log-
likelihood and computed by:

F(✓) = �
TX

t=1

y>t log pt (14)

where: yt is the ground truth token distribution, pt
is the predicted token distribution, T is length of
the input sentence. The proposed generators were
trained by treating each sentence as a mini-batch
with l2 regularization added to the objective func-
tion for every 5 training examples. The models
were initialized with a pretrained Glove word em-
bedding vectors (Pennington et al., 2014) and op-
timized by using stochastic gradient descent and
back propagation through time (Werbos, 1990).
Early stopping mechanism was implemented to
prevent over-fitting by using a validation set as
suggested in (Mikolov, 2010).

3.5 Decoding

The decoding consists of two phases: (i) over-
generation, and (ii) reranking. In the over-
generation, the generator conditioned on both rep-
resentations of the given DA use a beam search
to generate a set of candidate responses. In the
reranking phase, cost of the generator is computed
to form the reranking score R as follows:

R = F(✓) + �ERR (15)

where � is a trade off constant and is set to a
large value in order to severely penalize nonsensi-
cal outputs. The slot error rate ERR, which is the

number of slots generated that is either missing or
redundant, and is computed by:

ERR =
p + q

N
(16)

where N is the total number of slots in DA, and
p, q is the number of missing and redundant slots,
respectively.

4 Experiments

We extensively conducted a set of experiments to
assess the effectiveness of the proposed models by
using several metrics, datasets, and model archi-
tectures, in order to compare to prior methods.

4.1 Datasets

We assessed the proposed models on four differ-
ent NLG domains: finding a restaurant, finding
a hotel, buying a laptop, and buying a television.
The Restaurant and Hotel were collected in (Wen
et al., 2015b), while the Laptop and TV datasets
have been released by (Wen et al., 2016a) with a
much larger input space but only one training ex-
ample for each DA so that the system must learn
partial realization of concepts and be able to re-
combine and apply them to unseen DAs. This
makes the NLG tasks for the Laptop and TV do-
mains become much harder. The dataset statistics
are shown in Table 1.

Table 1: Dataset statistics.

Restaurant Hotel Laptop TV
# train 3,114 3,223 7,944 4,221

# validation 1,039 1,075 2,649 1,407
# test 1,039 1,075 2,649 1,407

# distinct DAs 248 164 13,242 7,035
# DA types 8 8 14 14

# slots 12 12 19 15

4.2 Experimental Setups

The generators were implemented using the Ten-
sorFlow library (Abadi et al., 2016) and trained
with training, validation and testing ratio as 3:1:1.
The hidden layer size, beam size were set to be
80 and 10, respectively, and the generators were
trained with a 70% of dropout rate. We performed
5 runs with different random initialization of the
network and the training is terminated by using
early stopping. We then chose a model that yields
the highest BLEU score on the validation set as
shown in Table 2. Since the trained models can

446



Table 2: Performance comparison on four datasets in terms of the BLEU and the error rate ERR(%)
scores. The results were produced by training each network on 5 random initialization and selected
model with the highest validation BLEU score. ] denotes the Attention-based Encoder-Decoder model.
The best and second best models highlighted in bold and italic face, respectively.

Model
Restaurant Hotel Laptop TV

BLEU ERR BLEU ERR BLEU ERR BLEU ERR
HLSTM 0.7466 0.74% 0.8504 2.67% 0.5134 1.10% 0.5250 2.50%

SCLSTM 0.7525 0.38% 0.8482 3.07% 0.5116 0.79% 0.5265 2.31%
Enc-Dec] 0.7398 2.78% 0.8549 4.69% 0.5108 4.04% 0.5182 3.18%

w/o A] 0.7651 0.99% 0.8940 1.82% 0.5219 1.64% 0.5296 2.40%
w/o R] 0.7748 0.22% 0.8944 0.48% 0.5235 0.57% 0.5350 0.72%

RALSTM] 0.7789 0.16% 0.8981 0.43% 0.5252 0.42% 0.5406 0.63%

Table 3: Performance comparison of the proposed models on four datasets in terms of the BLEU and the
error rate ERR(%) scores. The results were averaged over 5 randomly initialized networks. bold denotes
the best model.

Model
Restaurant Hotel Laptop TV

BLEU ERR BLEU ERR BLEU ERR BLEU ERR
w/o A 0.7619 2.26% 0.8913 1.85% 0.5180 1.81% 0.5270 2.10%
w/o R 0.7733 0.23% 0.8901 0.59% 0.5208 0.60% 0.5321 0.50%

RALSTM 0.7779 0.20% 0.8965 0.58% 0.5231 0.50% 0.5373 0.49%

differ depending on the initialization, we also re-
port the results which were averaged over 5 ran-
domly initialized networks. Note that, except the
results reported in Table 2, all the results shown
were averaged over 5 randomly initialized net-
works. We set � to 1000 to severely discourage the
reranker from selecting utterances which contain
either redundant or missing slots. For each DA,
we over-generated 20 candidate sentences and se-
lected the top 5 realizations after reranking. More-
over, in order to better understand the effectiveness
of our proposed methods, we: (i) performed an ab-
lation experiments to demonstrate the contribution
of each proposed cells (Tables 2, 3), (ii) trained the
models on the Laptop domain with varied propor-
tion of training data, starting from 10% to 100%
(Figure 3), (iii) trained general models by merg-
ing all the data from four domains together and
tested them in each individual domain (Figure 4),
and (iv) trained adaptation models on merging data
from restaurant and hotel domains, then fine tuned
the model on laptop domain with varied amount of
adaptation data (Figure 5).

4.3 Evaluation Metrics and Baselines

The generator performance was assessed on the
two evaluation metrics: the BLEU and the slot
error rate ERR by adopting code from an open
source benchmark toolkit for Natural Language

Generation5. We compared the proposed mod-
els against three strong baselines which have been
recently published as state-of-the-art NLG bench-
marks5.

• HLSTM proposed by Wen et al. (2015a)
which used a heuristic gate to ensure that all
of the slot-value information was accurately
captured when generating.

• SCLSTM proposed by Wen et al. (2015b)
which can jointly learn the gating signal and
language model.

• Enc-Dec proposed by Wen et al. (2016b)
which applied the attention-based encoder-
decoder architecture.

5 Results and Analysis

5.1 Results
We conducted extensive experiments on our mod-
els and compared against the previous methods.
Overall, the proposed models consistently achieve
the better performance regarding both evaluation
metrics across all domains in all test cases.

Model Comparison in an Unseen Domain
The ablation studies (Tables 2, 3) demonstrate
the contribution of different model components

5https://github.com/shawnwun/RNNLG

447



Figure 3: Performance comparison of the models trained on Laptop domain.

Figure 4: Performance comparison of the general models on four different domains.

Figure 5: Performance on Laptop domain with varied amount of the adaptation training data when adapt-
ing models trained on Restaurant+Hotel dataset.

in which the models were assessed without Ad-
justment cell (w/o A), or without Refinement cell
(w/o R). It clearly sees that the Adjustment cell
contributes to reducing the slot error rate ERR
score since it can effectively prevent the undesir-
able slot-value pair repetitions by gating the DA
vector s. A comparison between the ARED-based
models (denoted by ] in Table 2) shows that the
proposed models not only have better performance
with higher the BLEU score but also significantly
reduce the slot error rate ERR score by a large
margin about 2% to 4% in every datasets. More-
over, a comparison between the models with gat-
ing the DA vector also indicates that the proposed
models (w/o R, RALSTM) have significant im-
proved performance on both the evaluation metrics
across the four domains compared to the SCLSTM
model. The RALSTM cell without the Refine-
ment cell is similar as the SCLSTM cell. How-
ever, it obtained the results much better than the

SCLSTM baselines. This stipulates the neces-
sary of the LSTM encoder and the Aligner in ef-
fectively partial learning the correlated order be-
tween slot-value representation in the DAs, espe-
cially for the unseen domain where there is only
one training example for each DA. Table 3 fur-
ther demonstrates the stable strength of our mod-
els since the results’ pattern stays unchanged com-
pared to those in Table 2.

Figure 3 shows a comparison of three models
(Enc-Dec, SCLSTM, and RALSTM) which were
trained from scratch on the unseen laptop domain
in varied proportion of training data, from 1% to
100%. It clearly shows that the RALSTM outper-
forms the previous models in all cases, while the
Enc-Dec has a much greater ERR score comparing
to the two models.

A comparison of top responses generated for
some input DAs between different models are
shown in Table 4. While the previous models still

448



Table 4: Comparison of top responses generated for some input dialogue acts between different models.
Errors are marked in color (missing, misplaced information). All2* are general models.

# Model Generated Responses from Laptop Domain
1 Input DA ?compare(name=”satellite notus 19”, pricerange=”budget”, drive=”500 gb”, name=”portege thanatos 98”,

pricerange=”expensive”, drive=”128 gb”)
Reference the satellite notus 19 has a 500 gb drive and is in the budget price range . on the other hand the portege thanatos 98

has a 128 gb drive and is in the expensive price range . which would you prefer
HLSTM the satellite notus 19 is a budget priced laptop with a 500 gb drive and a 128 gb drive . which one do you prefer

[portege thanatos 98, expensive]
Enc-Dec the satellite notus 19 is in the budget price range . the portege thanatos 98 has a 500 gb drive and is in the expensive

price range . which one do you prefer [128 gb]
SCLSTM the satellite notus 19 is in the budget price range and has a 500 gb drive and the portege thanatos 98 has a 128 gb

drive . which one do you prefer [expensive]
RALSTM the satellite notus 19 is in the budget price range with a 500 gb drive , while the portege thanatos 98 is in the

expensive price range and has a 128 gb drive . which one do you prefer
All2Laptop the satellite notus 19 is a budget price range with a 500 gb drive and the portege thanatos 98 has a 128 gb drive and

is in the expensive price range . which one do you prefer
# Model Generated Responses from TV Domain
2 Input DA inform count(count=”73”, type=”television”, hasusbport=”dontcare”, hdmiport=”2”, screensizerange=”dontcare”)

Reference there are 73 televisions if you do not care about whether it has usb port or not, with 2 hdmi ports and if you do not
care about the screen size

HLSTM there are 73 televisions with 2 hdmi ports and if you do not care about the number of usb ports [screensizerange]
Enc-Dec there are 73 televisions with 2 hdmi ports if you do not care about usb ports [screensizerange]
SCLSTM there are 73 televisions with 2 hdmi ports if you do not care about the screen size and if you do not care about the

number of usb ports
RALSTM there are 73 televisions with 2 hdmi ports if you do not care about screen size or usb ports
All2Tv there are 73 televisions with 2 hdmi ports if you do not care about screen size or usb ports

produce some errors (missing and misplaced in-
formation), the proposed models (RALSTM and
the models All2* trained by pooling all datasets
together) can generate appropriate sentences. We
also found that the proposed models tend to gener-
ate more complete and concise sentences than the
other models.

All these prove the importance of the proposed
components: the Refinement cell in aggregating
and selecting the attentive information, and the
Adjustment cell in controlling the feature vector
(see Examples in Figure 6).

General Models

Figure 4 shows a comparison performance of gen-
eral models as described in Section 4.2. The re-
sults are consistent with the Figure 3, in which the
RALSTM has better performance than the Enc-Dec
and SCLSTM on all domains in terms of the BLEU
and the ERR scores, while the Enc-Dec has diffi-
culties in reducing the ERR score. This indicates
the relevant contribution of the proposed compo-
nent Refinement and Adjustment cells to the orig-
inal ARED architecture, in which the Refinement
with attentional gating can effectively select and
aggregate the information before putting them into
the traditional LSTM cell, while the Adjustment
with gating DA vector can effectively control the

(a) An example from the Laptop domain.

(b) An example from the TV domain.

Figure 6: Example showing how RALSTM drives
down the DA feature value vector s step-by-step,
in which the model generally shows its ability to
detect words and phases describing a correspond-
ing slot-value pair.

information flow during generation.

Adaptation Models
Figure 5 shows domain scalability of the three
models in which the models were first trained on

449



the merging out-of-domain Restaurant and Hotel
datasets, then fine tuned the parameters with var-
ied amount of in-domain training data (laptop do-
main). The RALSTM model outperforms the pre-
vious model in both cases where the sufficient in-
domain data is used (as in Figure 5-left) and the
limited in-domain data is used (Figure 5-right).
The Figure 5-right also indicates that the RALSTM
model can adapt to a new, unseen domain faster
than the previous models.

6 Conclusion and Future Work

We present an extension of ARED model, in
which an RALSTM component is introduced to
select and aggregate semantic elements produced
by the Encoder, and to generate the required sen-
tence. We assessed the proposed models on four
NLG domains and compared to the state-of-the-
art generators. The proposed models empirically
show consistent improvement over the previous
methods in both the BLEU and ERR evaluation
metrics. The proposed models also show an abil-
ity to extend to a new, unseen domain no mat-
ter how much the in-domain training data was
fed. In the future, it would be interesting to ap-
ply the proposed model to other tasks that can be
modeled based on the encoder-decoder architec-
ture, i.e., image captioning, reading comprehen-
sion, and machine translation.

Acknowledgements

This work was supported by JSPS Kakenhi
Grant Number JP15K16048 and JST CREST JP-
MJCR1513. The first author would like to thank
the Vietnamese Government Scholarship (911
project).

References
Martın Abadi, Ashish Agarwal, Paul Barham, Eugene

Brevdo, Zhifeng Chen, Craig Citro, Greg S Corrado,
Andy Davis, Jeffrey Dean, Matthieu Devin, et al.
2016. Tensorflow: Large-scale machine learning on
heterogeneous distributed systems. arXiv preprint
arXiv:1603.04467 .

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473 .

Milica Gašić, Dongho Kim, Pirros Tsiakoulis, and
Steve Young. 2015. Distributed dialogue poli-
cies for multi-domain statistical dialogue manage-
ment. In Acoustics, Speech and Signal Processing

(ICASSP), 2015 IEEE International Conference on.
IEEE, pages 5371–5375.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long
short-term memory. Neural computation .

Andrej Karpathy and Li Fei-Fei. 2015. Deep visual-
semantic alignments for generating image descrip-
tions. In Proceedings of the IEEE Conference
CVPR. pages 3128–3137.

Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao,
and Bill Dolan. 2015. A diversity-promoting objec-
tive function for neural conversation models. arXiv
preprint arXiv:1510.03055 .

Jiwei Li, Michel Galley, Chris Brockett, Georgios P
Spithourakis, Jianfeng Gao, and Bill Dolan. 2016.
A persona-based neural conversation model. arXiv
preprint arXiv:1603.06155 .

Jiwei Li and Dan Jurafsky. 2016. Mutual information
and diverse decoding improve neural machine trans-
lation. arXiv preprint arXiv:1601.00372 .

Jiasen Lu, Caiming Xiong, Devi Parikh, and Richard
Socher. 2016. Knowing when to look: Adaptive at-
tention via a visual sentinel for image captioning.
arXiv preprint arXiv:1612.01887 .

Minh-Thang Luong, Quoc V Le, Ilya Sutskever, Oriol
Vinyals, and Lukasz Kaiser. 2015. Multi-task
sequence to sequence learning. arXiv preprint
arXiv:1511.06114 .

Hongyuan Mei, Mohit Bansal, and Matthew R Walter.
2015. What to talk about and how? selective gen-
eration using lstms with coarse-to-fine alignment.
arXiv preprint arXiv:1509.00838 .

Tomas Mikolov. 2010. Recurrent neural network based
language model.

Danilo Mirkovic, Lawrence Cavedon, Matthew Purver,
Florin Ratiu, Tobias Scheideck, Fuliang Weng,
Qi Zhang, and Kui Xu. 2011. Dialogue manage-
ment using scripts and combined confidence scores.
US Patent 7,904,297.

Nikola Mrkšić, Diarmuid O Séaghdha, Blaise Thom-
son, Milica Gašić, Pei-Hao Su, David Vandyke,
Tsung-Hsien Wen, and Steve Young. 2015. Multi-
domain dialog state tracking using recurrent neural
networks. arXiv preprint arXiv:1506.07190 .

Ramesh Nallapati, Bowen Zhou, Caglar Gulcehre,
Bing Xiang, et al. 2016. Abstractive text summa-
rization using sequence-to-sequence rnns and be-
yond. arXiv preprint arXiv:1602.06023 .

Alice H Oh and Alexander I Rudnicky. 2000. Stochas-
tic language generation for spoken dialogue sys-
tems. In Proceedings of the 2000 ANLP/NAACL
Workshop on Conversational systems-Volume 3. As-
sociation for Computational Linguistics, pages 27–
32.

450



Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of the
40th ACL. Association for Computational Linguis-
tics, pages 311–318.

Jeffrey Pennington, Richard Socher, and Christopher D
Manning. 2014. Glove: Global vectors for word
representation. In EMNLP. volume 14, pages 1532–
43.

Alexander M Rush, Sumit Chopra, and Jason We-
ston. 2015. A neural attention model for ab-
stractive sentence summarization. arXiv preprint
arXiv:1509.00685 .

Amanda Stent, Rashmi Prasad, and Marilyn Walker.
2004. Trainable sentence planning for complex in-
formation presentation in spoken dialog systems. In
Proceedings of the 42nd ACL. Association for Com-
putational Linguistics, page 79.

Oriol Vinyals and Quoc Le. 2015. A neural conversa-
tional model. arXiv preprint arXiv:1506.05869 .

Oriol Vinyals, Alexander Toshev, Samy Bengio, and
Dumitru Erhan. 2015. Show and tell: A neural im-
age caption generator. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recog-
nition. pages 3156–3164.

Tsung-Hsien Wen, Milica Gašić, Dongho Kim, Nikola
Mrkšić, Pei-Hao Su, David Vandyke, and Steve
Young. 2015a. Stochastic Language Generation
in Dialogue using Recurrent Neural Networks with
Convolutional Sentence Reranking. In Proceedings
SIGDIAL. Association for Computational Linguis-
tics.

Tsung-Hsien Wen, Milica Gasic, Nikola Mrksic,
Lina M Rojas-Barahona, Pei-Hao Su, David
Vandyke, and Steve Young. 2016a. Multi-domain
neural network language generation for spoken dia-
logue systems. arXiv preprint arXiv:1603.01232 .

Tsung-Hsien Wen, Milica Gašic, Nikola Mrkšic,
Lina M Rojas-Barahona, Pei-Hao Su, David
Vandyke, and Steve Young. 2016b. Toward multi-
domain language generation using recurrent neural
networks .

Tsung-Hsien Wen, Milica Gašić, Nikola Mrkšić, Pei-
Hao Su, David Vandyke, and Steve Young. 2015b.
Semantically conditioned lstm-based natural lan-
guage generation for spoken dialogue systems. In
Proceedings of EMNLP. Association for Computa-
tional Linguistics.

Tsung-Hsien Wen, David Vandyke, Nikola Mrksic,
Milica Gasic, Lina M Rojas-Barahona, Pei-Hao Su,
Stefan Ultes, and Steve Young. 2016c. A network-
based end-to-end trainable task-oriented dialogue
system. arXiv preprint arXiv:1604.04562 .

Paul J Werbos. 1990. Backpropagation through time:
what it does and how to do it. Proceedings of the
IEEE 78(10):1550–1560.

Jason Williams. 2013. Multi-domain learning and gen-
eralization in dialog state tracking. In Proceedings
of SIGDIAL. Citeseer, volume 62.

Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho,
Aaron Courville, Ruslan Salakhudinov, Rich Zemel,
and Yoshua Bengio. 2015. Show, attend and tell:
Neural image caption generation with visual at-
tention. In International Conference on Machine
Learning. pages 2048–2057.

Zhilin Yang, Ye Yuan, Yuexin Wu, William W Cohen,
and Ruslan R Salakhutdinov. 2016. Review net-
works for caption generation. In Advances in Neural
Information Processing Systems. pages 2361–2369.

Xingxing Zhang and Mirella Lapata. 2014. Chinese
poetry generation with recurrent neural networks. In
EMNLP. pages 670–680.

451


