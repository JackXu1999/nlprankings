




































Well-Nested Tree Languages and Attributed Tree Transducers

Uwe Mönnich
Theoretische Computerlinguistik

Universität Tübingen
Wilhelmstr. 19

72074 Tübingen
uwe.moennich@uni-tuebingen.de

Abstract

Well-nested word languages have been adver-
tised as adequate formalizations of the notion
of mild context-sensitivity. The main result of
this paper is a characterization of well-nested
tree languages in terms of simple attributed
tree transducers.

1 Introduction

The intuitive notion of mild context-sensitivity has
led to two competing candidates claiming to be an
exact formal rendering of the intentions Joshi (1985)
was trying to capture when introducing this con-
cept. On the one hand multiple context-free gram-
mars and their equivalents exhibiting a variety of
wildly different specifications provide impressive
evidence that this precise counterpart of the infor-
mal description of mild context-sensitivity consti-
tutes a natural class. On the other hand the well-
nested subclass of the multiple context-free gram-
mars has recently been advertised as a formalization
more in accordance with Joshi’s original intentions
((Kanazawa, 2009), (Kuhlmann, 2007)). Both can-
didates have counterparts in the realm of tree lan-
guages and it is in this context that they are eas-
ily recognized as mathematically precise charac-
terizations of two leading linguistic models, min-
imalist syntax and tree adjoining grammars (cf.
(Harkema, 2001), (Michaelis, 2001), (Kepser and
Rogers, 2007), (Mönnich, 1997), (Mönnich, 2007)).

The tree languages in question are the multi-
ple regular tree languages ((Raoult, 1997)) and
the simple context-free tree languages ((Engelfriet

and Maneth, 2000)). Both language families are
proper subfamilies of the tree languages generated
by context-free hyperedge-replacement graph gram-
mars and the latter family is identical with the output
languages of logical tree-to-tree transductions ap-
plied to regular tree languages. The obvious ques-
tion that poses itself is whether the two restricted
rule formats or their corresponding tree transducers,
finite-copying top-down tree transducers and simple
macro tree transducers (MTT ), respectively, can
be given an equivalent logical characterization in
terms of restrictions on the logical formulae defin-
ing the relations in the target structures of logical
transductions. This is indeed the case. From re-
sults presented in (Bloem and Engelfriet, 2000) and
in (Engelfriet and Maneth, 1999) it follows that the
tree languages which are the output of finite-copying
top-down tree transducers applied to regular tree lan-
guages are exactly the output tree languages of logi-
cal tree transducers which are direction preserving
in the sense that edges in the output trees corre-
spond to directed paths in the input trees. As a pre-
liminary step towards an analogous result for lan-
guages generated by simple context-free tree gram-
mars (CFTsp) we’ll show in this paper that they are
equivalent to the output languages of a highly re-
stricted form of attributed tree transducers (ATT ).
As emphasized by (Bloem and Engelfriet, 2000),
attribute grammars are to be regarded as a specifi-
cation language and, as such, they are much closer
to logical specifications than context-free tree gram-
mars.

In previous work Duske et al. (1977) have char-
acterized the inside-out macro languages due to

Well-Nested Tree Languages and Attributed Tree Transducers

35



(Fischer, 1968) as the output string languages of
attribute grammars with one synthesized attribute
only. In a nutshell, we lift their result to the tree level
and restrict it to the case of well-nested tree lan-
guages, which are immune to differences of deriva-
tion mode ((Kepser and Mönnich, 2006)) and, a for-
tiori, are inside-out. In their paper mentioned above
Engelfriet and Maneth (2000) point out that well-
nested tree grammars can be regarded as a notational
variant of simple MTTs. Our result could accord-
ingly be interpreted as showing the equivalence be-
tween simple ATTs and simple MTTs. We be-
lieve that our construction that avoids the detour via
MTTs has the advantage of establishing a direct
link between a procedural and a declarative formal-
ization of well-nestedness.

After these introductory remarks we will recall
some basic concepts from the theory of tree lan-
guages and the theory of attributed tree transduc-
ers. The following section is an attempt at reviewing
briefly the notion of mild context-sensitivity from
the perspective of context-free graph languages. We
will then proceed to prove the equivalence of CFTsp
and simple ATTs with one attribute only (1S −
ATTss,si). We shall close with some remarks re-
garding the problems to be solved for a logical char-
acterization of CFTsp.

2 Preliminaries

For any set A, A∗ is the set of all strings over A.
ε is the empty string, |w| is the length of a string
w. N denotes the set {0, 1, 2, 3, . . .} of nonnegative
integers.

Let S be a finite set of sorts. An S-signature is a
set Σ given with two mappings ar : Σ → S∗ (the
arity mapping) and so : Σ → S (the sort mapping).
The length of ar(σ) is called the rank of σ, and is
denoted by rank(σ). The type of σ (σ ∈ Σ) is the
pair 〈ar(σ), so(σ)〉. The elements of Σε,s are also
called constants (of sort s).

In case S is a singleton set {s}, i.e. in case Σ
is a single-sorted or ranked alphabet (over sort s),
we usually write Σ(n) to denote the (unique) set of
operators of rank n ∈ N ; we also write σ(n) to in-
dicate that rank(σ) = n. In this case, which is of
particular interest to us, the set of trees TΣ is de-
fined recursively as follows. Each constant of Σ,

i.e., each symbol of rank 0, is a tree. If σ is of
rank k and t1, . . . , tk are trees, then σ(t1, . . . , tk)
is a tree. A tree language L ⊆ TΣ over Σ is a
subset of TΣ. With each tree t ∈ TΣ we can as-
sociate a string s ∈ Σ∗0 by reading the leaves of
t from left to right. This string is called the yield
of t, denoted by yd(t). More formally, yd(t) = t
if t ∈ Σ0, and yd(t) = yd(t1) · · · yd(tk) when-
ever t = σ(t1, . . . , tk) with k ≥ 1. The yield
of tree language L is defined straightforwardly as
yd(L) = {yd(t)|t ∈ L}.

If A is a set (of symbols) disjoint from Σ, then
TΣ(A) (alternatively T (Σ, A)) denotes the set of
trees TΣ∪A where all elements of A are taken
as constants. Let X = {x1, x2, x3, . . .} be a
fixed denumerable set of input variables and Y =
{y1, y2, y3, . . .} be a fixed denumerable set of pa-
rameters. Let X0 = Y0 = ∅ and, for k ≥ 1, Xk =
{x1, . . . , xk} ⊂ X , and Yk = {y1, . . . , yk} ⊂ Y .
For k ≥ 0,m ≥ 0, t ∈ TΣ(Xk), and t1, . . . , tk ∈
TΣ(Xm), we denote by t[t1, . . . , tk] the result of
substituting ti for xi in t. Note that t[t1, . . . , tk] is in
TΣ(Xm). Note also that for k = 0, t[t1, . . . , tk] = t.

Definition 1 A context-free tree (CFT ) grammar is
a tuple G = (F ,Ω, S, P ) whereF and Ω are ranked
alphabets of non-terminals and terminals, respec-

tively, S ∈ F (0) is the start symbol and P is a finite
set of productions of the form

F (y1, . . . , ym)→ ξ

where F ∈ F and ξ is a tree over F , Ω and Ym.
If for every F ∈ F (m) each y ∈ Ym occurs ex-

actly once on the right-hand side of the correspond-
ing rule then the context-free tree grammar is called
simple in the parameters (sp). The family of tree
languages which is generated by context-free tree
grammars which are simple in their parameters is
designated as CFTsp.

A grammar G = F ,Ω, S, P ) is called a regular
tree (REGT) grammar if F = F (0), i.e., if all non-
terminals are of rank 0.

Attributed tree transducers are a variant of at-
tribute grammars in which all attribute values are
trees. Besides meaning names which transmit infor-
mation in a top-down manner, attributed tree trans-
ducers contain explicit context names which allow
information to be passed up from a node to its

Uwe Mönnich

36



mother. Consequently, arbitrary tree walks can be
realized by attributed tree transducers.

Definition 2 An attributed tree transducer (ATT ) is
a tuple

A = (Syn, Inh,Σ,Ω, αm, R),

where Syn and Inh are disjoint alphabets of syn-
thesized and inherited attributes, respectively, Σ and
Ω are ranked alphabets of input and output symbols,
respectively, αm is a synthesized attribute, and R is

a finite set of rules of the following form: For every

σ ∈ Σ(m), for every (γ, ρ) ∈ insσ (the set of inside
attributes of σ), there is exactly one rule in Rσ:

(γ, ρ)→ ξ

where ξ ∈ TΩ∪outσ and outσ is the set of outside
attributes of σ.

Definition 3 For every σ ∈ Σ(m), the set of inside
attributes is the set insσ = {(α, π)|α ∈ Syn} ∪
{(β, πi)|β ∈ Inh, i ≤ m} and the set of outside
attributes is the set outσ = {(β, π)|β ∈ Inh} ∪
{(α, πi)|α ∈ Syn, i ≤ m}. π and ρ are path vari-
ables ranging over node occurrences in the input

tree.

ATTs with rules Rσ at an input symbol σ in
which each outside attribute occurs exactly once are
called simple attributed tree transducers. We de-
note this class by ATTss,si on the model of macro
tree transducers that are simple, i.e., linear and non-
deleting, both in their input variables and in their
parameters (MTTsi,sp).

The dependencies between attribute occurrences
in an input tree s can be represented with the help
of Rσ. An instance of an attribute occurrence (α, π)
depends on another occurrence (α′, π′) if σ labels
node u in s, Rσ contains the rule (α′, π′) → ξ and
(α, π) labels one of the leaves in ξ.

The dependency graph D(s) of an input tree s ∈
TΣ consists of the set of attribute occurrences to-
gether with the dependencies according to the rules
in R. Reversing the direction of these dependencies
leads to the notion of a semantic graph S(s) of an
input tree s ∈ TΣ.

An attributed tree transducer is noncircular if the
paths of attribute dependencies are noncircular. It is

well known that noncircular ATT s have unique dec-
orations dec, functions which assign each attribute
occurrence a tree over Ω ∪ outσ in accordance with
the productions Rσ.

Definition 4 The transduction realized by a noncir-
cular attributed tree transducer A is the function

τA = {(s, t)|s ∈ Tσ, t ∈ TΩ, t = decs(αm, ǫ)}

Remark 1 ATT s which have synthesized attributes
only are very close to top-down tree tranducers.

Their rules

(γ, ρ)→ ξ in Rσ
correspond to tree transducer rules

α(σ(x1, . . . , xm))→ ξ′

where σ ∈ Σ(m) and ξ′ is obtained from ξ by substi-
tuting every (α, πi) by α(xi).

3 Mild Context-Sensitivity

Even though the list of characteristic properties
Joshi (1985) has suggested as characteristic features
of a linguistically adequate extension of context-
freeness can hardly be considered as a formally ex-
plicit definition it has become accepted as an in-
formal description of a precise counterpart that has
turned out to be remarkably stable with respect to
a variety of wildly different specifications. This
stability provides impressive evidence that the pre-
cise counterpart of the informal description of mild
context-sensitivity constitutes a natural class. Over
the last couple of years the formal characterizations
assembled in Tabel 1, which all satisfy the crite-
ria for membership in the class of mildly context-
sensitive languages, have turned out to be weakly
equivalent.

Besides this group of attempts at providing a
formal explication for a framework adapted to the
level of complexity found in natural language syn-
tax another proposal for an exact definition of
mild context-sensitivity is currently the focus of
attention among linguists. We referred above to
Kanazawa’s claim that the so-called well-nested
multiple context-free word grammars constitute a
more faithful approximation of Joshi’s original ideas
than the multiple context-free grammars that were

Well-Nested Tree Languages and Attributed Tree Transducers

37



MCFL =languages generated by multiple context-free grammars
MCTAL =languages generated by multi-component tree adjoining grammars
LCFRL =languages generated by linear context-free rewriting systems
LUSCL =languages generated by local unordered scattered context grammars

STR(HR) =languages generated by string generating hyperedge replacement grammars
OUT (DTWT ) =output languages of deterministic tree-walking tree-to-string transducers

ydDTfc(REGT ) =yields of images of regular tree languages
under deterministic finite-copying top-down tree transduction

PGRPT =languages defined by pregroups with tupling

Table 1: Classes of mildly context-sensitive word languages

the most prominent member of the first mathe-
matically precise rendering of the notion of mild
context-sensitivity. Well-nested multiple context-
free string grammars satisfy the additional condi-
tion of a matching-like or well-nested rearrangement
of the arguments of non-terminals on the right-hand
sides of possible rules allowed by this type of gram-
mar. Furthermore, it is obvious that well-nested
multiple context-free languages are included in the
multiple context-free languages in general. Besides
this formal characterization in terms of well-nested
multiple context-free languages, a number of further
precise representatives of this second version of mild
context-sensitivity have been found. This group as-
sembled in Table 2 may not be as impressive as the
long list of equivalent formalizations that was listed
in connection with the first proposal for a formal ren-
dering of mild context-sensitivity. Still, the equiv-
alence of such wildly different systems as abstract
categorial grammars and (subclasses of) macro tree
transducers cannot be a pure coincidence, but has to
be accepted as a sign of an underlying conceptual
coherence.

The Table 2 contains besides examples of well-
nestedness on the level of word languages two spec-
imens of well-nested tree languages. Needless to
say, the derived tree structures are well-nested in
both alternatives suggested as formal renderings of
mild-context-sensitivity. The well-nestedness con-
dition concerns exclusively the rule format. In
sharp contrast with the situation on the word level
the multiple regular tree languages and the sim-
ple context-free languages mentioned in the intro-
duction as candidate formalizations of minimalist
syntax and tree adjoining grammars, respectively,
are proper subfamilies of the tree languages gen-

MSOTT (REGT ) = TR(HR)

MREGT =

MSOTTdir(REGT ) =

Tfc(REGT )

CFTsp =

? =

MTTsi,sp(REGT )

Figure 1: Classes of mildly context-sensitive tree lan-
guages

erated by context-free hyperedge-replacement graph
grammars (TR(HR)) and the latter family is iden-
tical with the output languages of logical tree-
to-tree transductions applied to regular tree lan-
guages (MSOTT (REGT )). Both mildly context-
sensitive subfamilies of tree languages can be given
descriptions in terms of grammatical systems and
syntax-directed tree transducers. To repeat their
formal characterizations, the multiple regular tree
languages are exactly the output tree languages
of finite-copying top-down tree transducers (Tfc)
which, in turn, are the same as the output tree lan-
guages of direction preserving logical transductions
(MSOTTdir). The simple context-free tree lan-
guages, analogously, are exactly the output tree lan-
guages of simple macro tree transducers which, in
turn, are the same as the output tree languages of
simple attributed tree transducers with one synthe-
sized attribute only, as shown in this paper. Their
logical characterization is still open. Figure 1 sum-
marizes the overview of the previous discussion con-
cerning the inclusion relation among mildly context-
sensitive tree languages.

Given the incomparability of the two families of
mildly context-sensitive tree languages, the investi-

Uwe Mönnich

38



MCFLwn = well-nested multiple context-free languages
MACsp = simple macro languages

ydCFTsp = yields of context-free tree languages
ydMTTsi,sp(REGT ) = yields of output languages of tree transductions realized

by simple macro tree transducers taking regular tree languages as input
CFTsp = simple context-free tree languages

ACG(2,3) = abstract categorial languages with abstract vocabulary
of order at most 2 and lexical images of atomic types of order at most 3

Table 2: Classes of well-nested mildly context-sensitive word and tree languages

gation of their formal properties is of obvious inter-
est for the evaluation of the corresponding linguistic
frameworks. Should it turn out that ill-nested struc-
tures are needed for an adequate representation of
structures exemplified in natural syntax the theory
of ”mildly context-sensitive” graph languages might
still be the framework of choice as long as these
structures are more tree- than graph-like.

Trees can be uniquely characterised by specifying
their hierarchical structure, they can be enumerated
by means of a production system and they can be fed
into an abstract automaton. For graphs no suitable
notion of finite automaton has been proposed. Sim-
ilarly, Graph grammars, on the other hand, do not
generate their output in a way that is patterned by
an independently given hierarchical structure which
would be intrinsic to this data type.

In spite of this difference of the two data struc-
tures, the fact that certain linguistic phenomena are
graphs does not as such preclude the possibility of
an approach which sees them as the result of a logi-
cally defined tree transduction. Bauderon and Cour-
celle (1987) present an approach to graphs by defin-
ing a (generally infinite) set of graph operations such
that every finite graph can be constructed by finitely
many applications of these graph operations. For the
particular licensing theory, head-driven phrase struc-
ture grammar (HPSG), we have shown ((Kepser
and Mönnich, 2003)) that the classes of finite graphs
defined by a finite HPSG signature and grammar
are indeed such that they cannot be generated by a
finite set of graph operations. But this purely meta-
theoretic limitation of HPSG in general is not sup-
ported by the amount of tree-likeness retained in
concrete analysis structures proposed for grammati-
cal phenomena in languages like Serbo-Croatian. It
is thus not excluded that the general approach in

terms of syntax-directed morphisms by means of
tree-to-tree or tree-to-(tree-like) graph transducers
can also be applied to a conceptual framework in
which ill-nested derived structures enjoy full citizen-
ship.

4 Main Result

In this section we will present our main result. The
proof requires two constructions that reduce sim-
ple context-free tree grammars (CFGsp) to simple
attributed tree transducers with one synthesized at-
tribute only (1S −ATTss,si) and vice versa.

4.1 From CFTsp to 1S −ATTss,si
Before showing that for every CFGspG an 1S −
ATTss,siAG can be constructed with the same out-
put language we first regularize G by translating its
rules into terms over a new signature that is obtained
from the original one by a so-called lifting process
(cf. (Maibaum, 1974)). It would have been possible
to reduce a given CFGsp directly into an equiva-
lent 1S − ATTss,si. We have opted for the indirect
approach, because the lifting technique is closely re-
lated to a decomposition result for MTTs to the ef-
fect that the transformation performed by this family
of tree transducers can be split into a symbolic re-
placement and a second-order substitution (cf. (En-
gelfriet and Vogler, 1985)). We shall see in the
last section that the recourse to context attributes in
coping with the second-order substitution cannot be
avoided, destroying the prospect of a characteriza-
tion of well-nestedness by means of straightforward
tree homomorphisms.

Definition 5 (LIFT) Let Σ be a ranked alphabet
and X a finite set of variables. The derived N -sorted
alphabet Σ′ is defined as follows: For each n ≥ 0,

Well-Nested Tree Languages and Attributed Tree Transducers

39



Figure 2: Derivation of aabccd.

Σ′ε,n = {f ′ | f ∈ Σn} is a new set of symbols of
type 〈ε, n〉; for each n ≥ 1 and each i, 1 ≤ i ≤ n,
πni is a new symbol, the ith projection symbol of type
〈ε, n〉; for each n, k ≥ 0 the new symbol c(n,k) is the
(n, k)th composition symbol of type 〈nk1 · · · kn, k〉
with k1 = . . . = kn = k.

For k ≥ 0, LIFTΣk : T (Σ, Xk) → T (Σ′, k) is
defined as follows:

LIFTΣk (xi) = π
k
i

LIFTΣk (f) = c0,k(f
′) for f ∈ Σ0

LIFTΣk (f(t1, . . . , tn)) =

cn,k(f
′, LIFTΣk (t1), . . . , LIFT

Σ
k (tn)) for f ∈ Σn ,

n ≥ 1
By way of example, we consider the effect of

the lifting transformation on a CFTsp G that gen-
erates the language L(G) = {anbmcndm}, where
we have omitted the concatenation symbols. The
grammar consists of the terminal alphabet Ω =
{ε(0), a(0), b(0), c(0), d(0), •(2)}, the non-terminal al-
phabet F = {S(0), F (4)}and the following group P
of rules:

S → ε
S → F (a, ε, c, ε)
S → F (ε, b, ε, d)

F (x1, x2, x3, x4) → F (•(a, x1), x2, •(c, x3), x4))
F (x1, x2, x3, x4) → F (x1, •(b, x2), x3, •(d, x4))
F (x1, x2, x3, x4) → •(•(•(x1, x2), x3), x4)

Figure 2 illustrates a derivation of the string
aabccd with explicit concatenation.

Figure 3: Dervation of lifted aabccd.

The process of applying the lifting transformation
to the grammar G given above returns a regular tree
grammar G′ with the following group of rules P ′:

S ′ → ε
S ′ → c(F ′, a′, ε, c′, ε)
S ′ → c(F ′, ε, b′, ε, d′)
F ′ → c(F ′, c(•′, a′, π41), π42, c(•′, c′, π43), π44)
F ′ → c(F ′, π41, c(•′, b′, π42), π43, c(•′, d′, π44))
F ′ → c(•′, c(•′, c(•′, π41, π42), π43), π44)

We parallel the derivation of the example string
aabccd with the corresponding derivation in the
lifted grammar G′ in Figure 3.

The terminal tree in Fig 3 over the lifted signature
is yet to be translated into the structures generated by
the CFTsp G. These latter structures are coded into
the lifted trees and are easily retrieved by unraveling
the information contained in the projection and com-
position symbols. Algebraically speaking, the step
from the lifted to the intended structures is nothing
but the value of the unique homomorphism from the
free term algebra into the substitution algebra over
the lifted signature. This homomorphism is simu-
lated by the attributed tree transducer which consti-
tutes the core of the proof of the crucial lemma.

Lemma 1 For every CFTsp G, there is an 1S −
ATTss,si AG that outputs the same language when

applied to the lifted derivation trees of G′.

Uwe Mönnich

40



Proof For a given CFGsp G = (F ,Ω, S, P ) an
1S −ATTss,si = (Syn, Inh,Σ,Ω, αm, R)AG that
outputs the same language is defined from the com-
ponents of Gs lifted version in the following way.

• Syn = {α} with α = αm at the root node

• Inh = {βj |1 ≤ j ≤ m} with m the maximal
sort of a lifted non-terminal F ′

• Every symbol in the derivation trees is assigned
one synthesized attribute.

• Every projection symbol is assigned one inher-
ited attribute

• Every lifted terminal symbol f ′ of sort n is as-
signed n inherited attributes.

• The function assinh assigning inherited sym-
bols to composition symbols c is defined by
structural induction on the trees on the rhs of
P ′:

assinh(t) = proj(assinh(t1)

where t = c(t1, . . . , tn) and where proj
deletes all inherited attributes of t1 that have no
counterparts in assinh(ti) (2 ≤ i).

• Each Rπni contains the rule

απ → βiπ

• Each Rf ′ contains the rule

απ → f(β1, . . . , βn)

where n is the sort of f ′.

• Each Rc contains the rules

απ → απ1
βiπ1 → απi+ 1
βiπj → βiπ

provided that the inherited attributes belong to
the outside attributes of the composition sym-
bol c.

The correctness of the construction follows from
an easy rule induction.

Remark 2 In the proof of Lemma 1 we have slightly
departed from the official definition of an ATT by

assigning inherited attributes to composition sym-

bols in a context-dependent way. This could be

repaired by labeling composition symbols with the

non-terminals on the lhs of P.

By way of example, consider the slightly sim-
plified lifted tree in Figure 4 which is decorated
with both the synthesized and inherited attributes
and their values. Evaluating the meaning attribute
αm by traveling along the semantic graph results in
the output tree •(•(•(•(a, a), ε), •(c, c)), ε).

4.2 From 1S −ATTss,si to CFGsp
It was mentioned above that attributed tree trans-
ducers are attribute grammars with all their attribute
values restricted to trees and their semantic func-
tions to substitution of trees for dependent leaves.
Second–order substitution for internal nodes of trees
is achieved through the upward information trans-
port that is made possible by the inherited attributes.
Integrating this information transfer with the leaf
substitution leads to the kind of substitution or ad-
junction, for that matter, characteristic of context-
free grammars.

Lemma 2 For every 1S − ATTss,siA, there exists
an equivalent CFGspGA.

Proof Let A = (Syn, Inh,Σ,Ω, αm, R) be an
attributed tree transducer with one synthesized at-
tribute only such that each outside attribute at an in-
put symbol σ occurs exactly once in Rσ. An equiva-
lent simple context-free tree grammar GA is defined
as follows:

• F = Σ where the arity of non-terminals is
given by the number of interited attributes as-
signed to them in the input tree.

• Ω = Ω

• S = {σ(0)} with σ ∈ Σ labeling the root of an
input tree.

• For every σ ∈ Σ we construct a rule

σ(x1, . . . , xn)→ t

where t = COMP (ξ) and ξ is the right-hand
side of the only synthesized attribute α in Rσ.

Well-Nested Tree Languages and Attributed Tree Transducers

41



c(0)αm(α1)

β(α2)c(1)α(α11)

β(α12)c(11)α(α111)

. . .β(β11) •′ •′′ •′′′ (111)α(•′(•′′(•′′′(β111), . . .)))

β(β1)c(12)α(α121)

β′(α123) •′ (121)α(•′(β121,β′121)) a′(122) β(β12)π1(123)α(β123)

π2(13) c(14) π4(15)

a′(2)α(a′) ε(3) c′(4) ε(5)

Figure 4: Evaluation of lifted sample tree

The right-hand sides of rules in Rσ are desig-
nated by rhs(γπ, σ) in the following:

(i) If ξ = απi then

COMP (ξ) = ρ(t1, . . . , tm)

where ρ labels the ith daughter of σ, m is the
arity of ρ and

tj = COMP (rhs(βjπi, σ))

(ii) If ξ = βjπ then

COMP (ξ) = xi

(iii) If ξ = f(ξ1, . . . , ξr) for f ∈ Ω(r)

COMP (ξ) = f(COMP (ξ1), . . . , COMP (ξr))

By a routine inspection it is easy to verify that the
resulting grammar GA is indeed simple and that it
generates exactly the output language of A.

Remark 3 The construction in the preceding lemma
is inspired by the proofs of Lemma 6.1 in (Engelfriet

and Maneth, 1999) and of Lemma 5.11 in (Fülöp

and Vogler, 1998). In these references it was shown

how to turn an ATT into an equivalent MTT .
MTTs can be regarded as tree grammars in which
the generation process is controlled by the input

trees. In the present case these input structures as-

sume the role of derivation trees. This leads to a cer-

tain amount of proliferation in the rule component of

the resulting grammar. It is not difficult to prove that

this rule proliferation is of no consequence for the

derived tree language, i.e., the derived structures.

By Lemmas 1 and 2 we obtain our main result.

Theorem 1 The well-nested tree languages are ex-
actly the output languages of simple attributed tree

transducers with one synthesized attribute only ap-

plied to regular tree languages.

5 Envoi

Bloem and Engelfriet (2000) have shown that the
output language of single use attributed tree trans-
ducers applied to regular tree languages are equal to
the translations definable by monadic second-order
logic. By the result presented in this paper this
could be extended to a logical description of simple
context-free tree languages. The question, though,
of how to give a logical characterization for this fam-
ily of tree languages is still open. The same question
regarding the special case of monadic context-free
tree languages was answered in (Mönnich, 2008).
The main theorem of that talk states that the edge
definitions of a logical characterization with respect
to these languages are either direction preserving or
direction reversing. This characterization depends
crucially on the possibility of proving a Greibach
normal form for monadic simple context-free gram-
mars, a result that would require a completely differ-
ent proof in the case of non-monadic alphabets.

An alternative way out by means of a bimorphic
characterization is not open, either. Bimorphisms
were introduced by Nivat (1968) for word languages
and later extended to trees by Arnold and Dauchet
(1982). A bimorphism is a triple B = (φ, L, ψ)
where L is a regular language and φ and ψ are ho-
momorphisms. A bimorphism induces a relation B

Uwe Mönnich

42



defined as B = {(φ(t), ψ(t) | t ∈ L}. It is interest-
ing to note that the relations specified by tree trans-
ducers are captured by bimorphisms in which ψ is
unrestricted and φ is a relabeling. Shieber (2004)
has shown that the relations defined by synchronous
tree-substitution grammars correspond exactly to bi-
morphism relations in which both homomorphisms
are linear and non-deleting. An analogous result is
not possible for simple context-free tree grammars.
Take the familiar example of a simple context-free
tree grammar G over a monadic alphabet that gen-
erates the language L = {an(bn(e))}. According
to a well-known theorem due to Rounds (1970) ev-
ery monadic output tree language of a tree trans-
ducer applied to a regular language is regular. Con-
sequently, there is no hope of giving a characteri-
zation of context-free tree languages without having
recourse to context attributes enabling an upward in-
formation transport in the controlling input tree.

References

André Arnold and Max Dauchet. 1982. Morphismes
et bimorphismes d’arbres. Theoretical Computer Sci-
ence, 20:33–93.

Michel Bauderon and Bruno Courcelle. 1987. Graph ex-
pressions and graph rewritings. Mathematical Systems
Theory, 20:83–127.

Roderick Bloem and Joost Engelfriet. 2000. A Com-
parison of Tree Transductions Defined by Monadic
Second-Order Logic and by Attribute Grammars. J.
Comp. System Sci., 61:1–50.

J. Duske, R. Parchmann, M. Sedello, and J. Specht. 1977.
Io-macrolanguages and attributed translations. Infor-
mation and Control, 35:87–105.

Joost Engelfriet and Sebastian Maneth. 1999. Macro
Tree Transducers, Attribute Grammars, and MSO De-
finable Tree Translations. Information and Computa-
tion, 154:34–91.

Joost Engelfriet and Sebastian Maneth. 2000. Tree Lan-
guages Generated by Context-Free Graph Grammars.
In Hartmut Ehrig et al., editor, Graph Transformation,
number 1764 in LNCS, pages 15–29. Springer.

Joost Engelfriet and Heiko Vogler. 1985. Macro tree
transducers. Journal of Computer and System Sci-
ences, 31(1):71–146.

Michael J. Fischer. 1968. Grammars with Macro-Like
Productions. In Proc. 9th IEEE Symp. on Switching
and Automata Theory, pages 131–142.

Zoltán Fülöp and Heiko Vogler. 1998. Syntax-Directed
Semantics - Formal Models Based on Tree Transduc-

ers. Springer, New York and Berlin.
Hendrik Harkema. 2001. Parsing Minimalist Lan-

guages. Ph.D. thesis, University of California at Los
Angeles.

Aravind Joshi. 1985. Tree adjoining grammars: How
much context-sensitivity is required to provide reason-
able structural descriptions. In David Dowty, Lauri
Karttunen, and Arnold Zwicky, editors, Natural Lan-
guage Parsing, pages 206–250. Cambridge University
Press.

M. Kanazawa. 2009. The convergence of well-nested
mildly context-sensitive grammar formalisms. In 14th
Conference on Formal Grammar. Slides available at
http://research.nii.jp/˜kanazawa/.

Stephan Kepser and Uwe Mönnich. 2003. (Un- )Decid-
ability results for head-driven phrase structure gram-
mar. In Giuseppe Scollo and Anton Nijholt, editors,
Proceedings Algebraic Methods in Language Process-

ing (AMiLP-3), pages 141–152.
Stephan Kepser and Uwe Mönnich. 2006. Closure prop-

erties of linear context-free tree languages with an ap-
plication to optimality theory. Theoretical Computer
Science, 354:82–97.

S. Kepser and J. Rogers. 2007. The equivalence of tree
adjoining grammars and monadic linear context-free
tree grammars. In M. Kracht, G. Penn, and E. Stabler,
editors, Mathematics of Language 10.

M. Kuhlmann. 2007. Dependency Structures and and
Lexicalized Grammars. Ph.D. thesis, Saarland Uni-
versity.

Thomas S. E. Maibaum. 1974. A generalized approach
to formal languages. Journal of Computer and System
Sciences, 8(3):409–439.

Jens Michaelis. 2001. On Formal Properties of Mini-
malist Grammar, volume 13 of Linguistics in Potsdam.
Universität Potsdam.

Uwe Mönnich. 1997. Adjunction as substitution. In G-
J. M. Kruijff, G. Morill, and R. Oehrle, editors, Formal
Grammar ’97, pages 169–178.

U. Mönnich. 2007. Minimalist syntax, multiple regular
tree grammars and direction preserving tree transduc-
tions. In J. Rogers and S. Kepser, editors, Proceedings
Model Theoretic Syntax at 10.

Uwe Mönnich. 2008. How to Church a Joshi. In TAG+9.
Maurice Nivat. 1968. Transductions des langages de

chomyky. Thèse d’état, Paris 1968.
Jean-Claude Raoult. 1997. Rational Tree Relations.

Bull. Belg. Math. Soc., 4:149–176.
William C. Rounds. 1970. Mappings and grammars on

trees. Mathematical Systems Theory, 4(3):257–287.
Stuart M. Shieber. 2004. Synchronous grammars as tree

transducers. In Proceedings TAG+7.

Well-Nested Tree Languages and Attributed Tree Transducers

43



Uwe Mönnich

44


