



















































Unsupervised Timeline Generation for Wikipedia History Articles


Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 2343–2349,
Austin, Texas, November 1-5, 2016. c©2016 Association for Computational Linguistics

Unsupervised Timeline Generation for Wikipedia History Articles

Sandro Bauer and Simone Teufel
Computer Laboratory

University of Cambridge
Cambridge, United Kingdom

{sandro.bauer, simone.teufel}@cl.cam.ac.uk

Abstract

This paper presents a generic approach to con-
tent selection for creating timelines from in-
dividual history articles for which no exter-
nal information about the same topic is avail-
able. This scenario is in contrast to existing
works on timeline generation, which require
the presence of a large corpus of news arti-
cles. To identify salient events in a given his-
tory article, we exploit lexical cues about the
article’s subject area, as well as time expres-
sions that are syntactically attached to an event
word. We also test different methods of en-
suring timeline coverage of the entire histori-
cal time span described. Our best-performing
method outperforms a new unsupervised base-
line and an improved version of an existing
supervised approach. We see our work as a
step towards more semantically motivated ap-
proaches to single-document summarisation.

1 Introduction

While there has been much work on generating his-
tory timelines automatically, these approaches are
commonly evaluated on events that took place in re-
cent decades, as they depend on the availability of
large numbers of articles describing the same his-
torical period. If such a rich data source is avail-
able, it is possible to exploit document creation
times, redundancy across documents, as well as
back-references to earlier events in order to identify
salient events. For instance, the start of the Iraq War
in 2003 is mentioned frequently in a general news
corpus, including in articles published years after the

event took place. The high number of mentions sug-
gests that the beginning of the Iraq War was an im-
portant historical event.

However, for most historical periods covered in
history articles (e.g., Antiquity or the Middle Ages),
such cues are not commonly available, as no news
articles from these eras exist. Generating event time-
lines for arbitrary historical periods is therefore a
much harder problem, which requires methods that
rely less heavily on the types of rich, parallel and
dense information contained in news clusters.

To investigate this problem, we approach timeline
generation as a special single-document summarisa-
tion task. In other words, we assume that the in-
formation to be summarised is contained in a single
history article, and that no further mentions of spe-
cific events exist externally. This is a realistic sce-
nario, for instance, for a specialist article describing
the history of music in Ancient China.

We introduce a method for selecting salient con-
tent in history articles of any subject area, as long as
the events in the text are roughly ordered chronolog-
ically. The hypothesis is that knowledge of an text’s
subject area can help decide which content should
be selected. Another intuition is that certain com-
binations of events should be avoided in a timeline.
We therefore investigate ways of encouraging a bal-
anced selection of content from all parts of the text.

2 Related work

Timeline extraction has mostly been explored in
a multi-document summarisation setting using cor-
pora of news articles (Tran et al., 2015; Swan and
Allan, 2000; Yan et al., 2011; Chieu and Lee, 2004;

2343



Allan et al., 2001). This task definition allows the
exploitation of features such as document creation
times and headlines. The most important feature
is redundancy between articles, which facilitates the
identification of salient events.

A second important strand of work focuses on ex-
tracting all events from a single input text and an-
choring them in time. The creation of the TimeML
specification language (Pustejovsky et al., 2003) laid
the foundations for the TempEval series of shared
tasks (Verhagen et al., 2007; Verhagen et al., 2010;
UzZaman et al., 2013), in which systems had to
identify TimeML events and temporal expressions
in free-form text. Further subtasks included the nor-
malisation of temporal expressions and the creation
of links between events and temporal expressions. A
further shared task investigated the use of TimeML
annotation for the downstream task of question an-
swering (Llorens et al., 2015). Kolomiyets et al.
(2012) created a connected timeline for a text based
on TimeML annotations; a dependency parser infers
dependency structures between events. Finally, a re-
cent SemEval task (Minard et al., 2015) explored the
related problem of cross-document event ordering.
Here, relevant events and temporal expressions con-
cerning a single target entity of interest have to be
identified in more than one input document.

Chasin et al. (2014) try to identify important
events in single texts, but their approach is limited to
articles on wars and battles, and the problem is not
approached as a summarisation task. Their method
is lightly supervised, using features such as the pres-
ence of negation or past tense verbs in the sentence,
and TextRank (Mihalcea and Tarau, 2004) for identi-
fying salient sentences. We use an improved version
of this system as a baseline.

3 Overall approach

Our problem is that of finding an optimal sequence
of events (of a given maximum length) in a given
input article. We follow the literature on event ex-
traction and use TimeML events (Pustejovsky et
al., 2003). Most TimeML events are verbs, but
some are nominalisations such as “invasion” or
other event-like words such as “war”. The use of
TimeML events, aside from the practical advan-
tage that commonly-available event extraction algo-

rithms exist, allows us to evaluate content selection
at the event rather than at the sentence level.

We assume that there are both local and global
factors that determine which events should be con-
tained in the timeline. Local factors reflect how
important an event is in its own right. Global fac-
tors represent intuitions about which combinations
of events should or should not be selected. Our ap-
proach, which is unsupervised, takes into account
the factors described in what follows.

3.1 Date presence

Intuitively, we expect that many important events
have a date attached to them, as authors tend to give
the reader this information if it is available. This
is true for all historical periods from prehistory on-
wards, since for most events at least an approxi-
mate date is known. We considered two alternatives:
The simplest approach is to only use sentences that
contain a date, regardless of where in the sentence
the date is located. A more sophisticated alterna-
tive verifies that the date is syntactically attached to
the event, such as in “Richelieu died in 1642”. To
identify such cases, we constructed a parse tree us-
ing the C&C dependency parser (Clark and Curran,
2007) and only considered a TimeML event to be
“dated” if it is at most two outgoing dependencies
away from a temporal expression. We used Heidel-
Time (Strötgen and Gertz, 2013), a the state-of-the-
art temporal expression software package, to iden-
tify such temporal expressions.

3.2 Lexical cues

The key component we use to judge the importance
of any event are lexical cues about the input text’s
subject area. Examples of such subject areas in-
clude INVENTION and FOOD/DRINK. The subject
area of a text should give us prior knowledge about
which types of events are likely to be important. For
instance, we would expect that a timeline describing
the history of a country should contain information
about revolutions, invasions, elections and similar
events, whereas a timeline about science will instead
focus on discoveries, publications, and Nobel prizes.

To mine knowledge about such subject-area-
specific preferences, we make use of Wikipedia as
a background corpus. Only history-specific articles
whose title starts with “History of” are considered.

2344



We start by generating sets of all Wikipedia history
articles belonging to a given subject area, e.g. AGPE
or AINVENTION. To do this, we make use of the
Wikipedia category system. For instance, for con-
structing a set of articles for the subject area FIELD
OF SCIENCE, we collected all history articles that
belong to the Wikipedia category “History of sci-
ence by discipline”. For each subject area g, we then
calculate a preference score for each word lemma l
found in any of the articles in the corresponding list
Ag, using the following formula:

sc(g, l) =

freq(Ag ,l)
freq(Ag ,∗)
freq(∗,l)
freq(∗,∗)

where freq(Ag, l) is the summed frequency of word
lemma l in all documents belonging to subject area
g, and “*” stands for any. The numerator de-
notes how often lemma l appears in the subject-area-
specific set of articles Ag, normalised by the total
number of tokens found in this set. The denomina-
tor is invariant across all subject areas. If the ratio is
high, lemma l is more likely to appear in articles of
subject area g than in Wikipedia overall, suggesting
that it is typical for the given subject area.

For each event e in the input text, a local impor-
tance score imp(e) is calculated as

imp(e) =

∑
w∈R(e)

sc(g,l)
1+dist(we,w)

N

where R(e) is a window of words around the word
representing the event (including the event word
we itself), and dist(w1, w2) refers to the absolute
distance in words between two words w1 and w2.
imp(e) is a weighted average of the preference
scores of all words in a window. The intuition is
that context words of the event word can also be ex-
pected to be indicative of the subject area (consider
“publish a paper”) in many cases. 1+dist(we, w) is
used as a distance penalty in order to give more im-
portance to words that are closer to the event word
we. N is a constant which normalises the score by
the sum of all distance penalties, to account for cases
where the event word occurs at the beginning or end
of a sentence. Table 1 shows examples of words with
high and low preference scores.

3.3 Temporal coverage
We would like to avoid cases where too many events
are selected from a small portion of the document,

GPE INVENTION FOOD/DRINK
absolutism gas-works yerba
protectorate reverse-angle hamburger

serfdom flashback saffron
club season play
game team member

season school bear
Table 1: Words with high (top) and low (bottom) preference
scores for three subject areas

even if all these events are relevant. For instance,
an article might list all a country’s elections of the
past few years, while mentioning only very impor-
tant elections in earlier time periods. In this case,
knowing that elections are important in the history
of a country is not helpful, since this would lead to
insufficient coverage of the remaining events in the
article. We therefore take into account global factors
as well. We experiment with two different methods:

Exploiting document structure. We select
salient events from each section of the Wikipedia
article in a round-robin fashion. The algorithm
operates in a greedy fashion by selecting the most
locally important remaining event for each section,
until the desired timeline length has been reached.

Integer linear program. We use an integer linear
program to encode the intuition that no two timeline
entries should have the same year. The ILP max-
imises the following objective function for each ar-
ticle (E refers to the set of all dated events):

∑
ei∈E

xi · imp(ei)−
∑
ei∈E

∑
ej∈E

bij · pen(ei, ej)

subject to the constraints:

bij ≤ xi ∀i, j ∈ E
xi + xj − bij ≤ 1 ∀i, j ∈ E

xi ∈ {0, 1} ∀i ∈ E bij ∈ {0, 1} ∀i, j ∈ E∑
ei∈E

xi = Lmax

This is similar to the model used by McDon-
ald (2007) for multi-document summarisation. The
model tries to find a set of locally important events
while discouraging the selection of events that have
the same date. xi is a variable denoting whether
the corresponding event ei has been selected. bij
is a variable which is 1 if and only if both events i
and j have been selected. pen(ei, ej) is a penalty
function that is 1 if the two events ei and ej have

2345



the same date, otherwise 0. Each event was linked
to the preceding temporal expression identified by
HeidelTime; this heuristic was found to work well.
The last constraint ensures that not more than Lmax
events are chosen, where Lmax is the desired time-
line length for the article considered.

4 Evaluation

For evaluating our algorithms, the methodology we
introduced in (Bauer and Teufel, 2015) is used,
along with the accompanying Cambridge Single-
Document Timeline Corpus (CSDTC, version 2.0),
which has been made publicly available1.

4.1 Cambridge Single-Document Timeline
Corpus

The CSDTC contains 10 articles from 3 sub-
ject areas: GPE (geo-political entities such as
countries and cities), FIELD OF SCIENCE and
INVENTION. To tune our algorithms, we con-
structed a development set of a further 30 annotated
history articles from the subject areas in the CSDTC
and one additional subject area (FOOD/DRINK).
Due to the high annotation cost, only a single time-
line creator was used. Important events were di-
rectly marked up in the source text (as opposed to
the CSDTC, where timeline entries were written by
hand), and exactly one HCU2 was created per event.
Using this development corpus, the window size of
words considered for calculating local importance
scores (cf. Section 3.2) was set to 3. We report the
performance of all algorithms on both the develop-
ment set and the test set (the CSDTC).

Although the number of subject areas in the two
corpora is rather small owing to the considerable an-
notation effort, we believe that the resulting system
would generalise rather well to other subject areas,
were they added, as the subject areas in the corpus
are very different in nature from each other. Care
was taken when constructing the CSDTC to use a
set of subject areas that is representative for human-
written timelines on the Web.

1The corpus is available on the first author’s website:
http://www.cl.cam.ac.uk/˜smb89/form.html

2As opposed to the CSDTC, HCUs in the development set
always have a weight of 1, as only timeline writer was used.

4.2 Evaluation based on Historical Content
Units

The evaluation is based on abstract (“deep”) mean-
ing units called Historical Content Units (HCUs).
HCUs were derived on the basis of human-created
timelines. Between 32 and 80 HCUs per article were
annotated for the articles in the CSDTC.

Each HCU is weighted by the number of time-
line creators who expressed its semantic content
in their timelines. Because HCUs are linked to
TimeML events in the surface text, it is possible to
perform automatic deep evaluation without requir-
ing any manual annotation of system summaries.

Algorithms are evaluated on a given input arti-
cle using an adapted version of the pyramid score
(Nenkova and Passonneau, 2004), which is calcu-
lated as the ratio between the sum of all rewards for
HCUs chosen by the algorithm normalised by the
maximum possible score scoremax:

score =

∑
h∈HCUs

wh·Cov(h,E,T )

scoremax

where wh is the weight of HCU h (a number be-
tween 1 and the number of annotators), E is the set
of events in the article, T are the events in the sys-
tem timeline, and the coverage score Cov(h,E, T )
is a number between 0 and 1 that indicates to what
extent the events chosen by the algorithm jointly ex-
press the semantic content of HCU h. The basic ver-
sion of Cov(h,E, T ) is defined as follows:

Cov(h,E, T ) = min(1.0,
∑

ej∈E vh,ej · s(T, ej))
where vh,ej is an anchor weight between 0 and 1
which denotes to what extent event ej expresses the
semantic content of HCU h, and s(T, e) is a helper
function that returns 1 if the set of selected events T
includes event e, and 0 otherwise.

The coverage score for each HCU is calculated
by summing up the anchor weights of those events
that the algorithm has selected. A coverage score of
0 means that the events mentioned in the timeline
do not express the HCU’s semantic content at all,
while a score of 1 occurs where the HCU’s content
is fully expressed by the timeline. Scores between 0
and 1 occur in a large number of cases. For instance,
an HCU may express the fact that a country was in-
vaded and destroyed. If the system timeline merely
contains a TimeML event that refers to the invasion,
it is assigned a coverage score of 0.5 for this HCU,

2346



as it expresses only half of the HCU’s semantic con-
tent. Where the sum exceeds 1, the coverage score is
set to a hard upper limit of 1. This ensures that algo-
rithms are not doubly rewarded for selecting mul-
tiple TimeML events expressing the same seman-
tic content. The final formula we used to calculate
coverage scores is slightly more complex, as some
TimeML events in the CSDTC have been grouped
together into event groups. A detailed description is
given in the documentation of the corpus.

Pyramid scores are recall-based: The evaluation
assumes a maximum number of timeline entries n,
and the maximum possible score is the sum of the
HCU weights of the n most highly weighted HCUs.
The values for n are given in the CSDTC.

4.3 System and baselines

We report the performance of two systems. Both
systems first remove all events that do not have a
date, or whose date is too far away, as described
in Section 3.1. Our first system (“ILP-based”) se-
lects events based on the integer linear program de-
scribed, while the second system (“Round-robin”)
selects locally important events per section.

We have speculated above that dates are impor-
tant for our task. We therefore compare against a
date baseline which selects events randomly from
the list of all dated events. We also compare against
several modified versions of our method: To inves-
tigate the influence of the parser in identifying suit-
able dated events, we report the results for a simpler
method which considers all events that have a date in
the same sentence (“Round-robin, simple date crite-
rion”). Two alternative systems select locally impor-
tant events from all (not only dated) events (“Round-
robin, without date criterion”) or salient dated events
from the entire article without considering document
structure (“Local importance + date criterion”).

The supervised baseline (“Chasin et al. (2014)”)
was re-implemented using LibSVM (Chang and Lin,
2011), and SVM parameters were tuned using grid
search. 25 of the 30 articles were used for training
and 5 for development. We improved their system
by defining some of their sentence-level features at
the event level. Probability estimates as described
by Platt (2000) were used as importance scores.

System Dev Test
ILP-based 0.22N 0.30N
Round-robin 0.20N 0.30N

Round-robin w/o local importance 0.18 0.26
Local importance + date criterion 0.21N 0.29
Round-robin, simple date criterion 0.19 0.25
Round-robin without date criterion 0.14 0.18
Date baseline 0.18 0.25
Chasin et al. (2014) (improved) – 0.12
Random baseline 0.08 0.10

Table 2: Average pyramid scores across all articles (N = signif-
icantly better than the date baseline)

4.4 Results

The results in Table 2 show that only a combina-
tion of all three factors (date presence, local impor-
tance, coverage) results in a statistically significant
improvement over the date baseline at α = 0.05 ac-
cording to Wilcoxon’s signed-rank test on the test
set. Both our systems perform comparably on the
test set; removing any of the three components re-
sults in lower performance. Using a parser to iden-
tify dated events has a strong positive effect (see
“Round-robin, simple date criterion”). Our system
also outperforms the improved supervised baseline
by a large margin. The fact that a completely un-
supervised system performs best is encouraging, as
training data for this task is very expensive to ob-
tain. Our results suggest that it might be worth in-
vestigating other types of prior knowledge about the
semantics of an input text in further research. The
crucial advantage of such generic methods is that no
texts on exactly the same topic are needed, which is
a requirement with texts about niche topics.

5 Conclusion

We have introduced an unsupervised method for
the challenging problem of timeline generation from
single history articles, a scenario where parallel texts
cannot be assumed to exist. Our method results in a
significant improvement over a novel unsupervised
baseline as well as an existing supervised approach.

Acknowledgments

The first author received financial support from Mi-
crosoft Research, St John’s College Cambridge and
the Cambridge University Computer Laboratory.

2347



References
James Allan, Rahul Gupta, and Vikas Khandelwal. 2001.

Temporal Summaries of New Topics. In Proceedings
of the 24th Annual International ACM SIGIR Confer-
ence on Research and Development in Information Re-
trieval, SIGIR ’01, pages 10–18, New York, NY, USA.
ACM.

Sandro Bauer and Simone Teufel. 2015. A Methodology
for Evaluating Timeline Generation Algorithms based
on Deep Semantic Units. In Proceedings of the 53rd
Annual Meeting of the Association for Computational
Linguistics and the 7th International Joint Conference
on Natural Language Processing of the Asian Federa-
tion of Natural Language Processing, ACL 2015, July
26-31, 2015, Beijing, China, Volume 2: Short Papers,
pages 834–839.

Chih-Chung Chang and Chih-Jen Lin. 2011. LIBSVM:
A library for support vector machines. ACM Transac-
tions on Intelligent Systems and Technology, 2:27:1–
27:27. Software available at http://www.csie.
ntu.edu.tw/˜cjlin/libsvm.

Rachel Chasin, Daryl Woodward, Jeremy Witmer, and
Jugal Kalita. 2014. Extracting and Displaying Tempo-
ral and Geospatial Entities from Articles on Historical
Events. Comput. J., 57(3):403–426.

Hai Leong Chieu and Yoong Keok Lee. 2004. Query
Based Event Extraction Along a Timeline. In Pro-
ceedings of the 27th Annual International ACM SIGIR
Conference on Research and Development in Informa-
tion Retrieval, SIGIR ’04, pages 425–432, New York,
NY, USA. ACM.

Stephen Clark and James R. Curran. 2007. Wide-
Coverage Efficient Statistical Parsing with CCG and
Log-Linear Models. Computational Linguistics,
33(4):493–552.

Oleksandr Kolomiyets, Steven Bethard, and Marie-
Francine Moens. 2012. Extracting Narrative Time-
lines as Temporal Dependency Structures. In The 50th
Annual Meeting of the Association for Computational
Linguistics, Proceedings of the Conference, July 8-14,
2012, Jeju Island, Korea - Volume 1: Long Papers,
pages 88–97.

Hector Llorens, Nathanael Chambers, Naushad UzZa-
man, Nasrin Mostafazadeh, James Allen, and James
Pustejovsky. 2015. SemEval-2015 Task 5: QA Tem-
pEval - Evaluating Temporal Information Understand-
ing with Question Answering. In Proceedings of the
9th International Workshop on Semantic Evaluation
(SemEval 2015), pages 792–800, Denver, Colorado,
June. Association for Computational Linguistics.

Ryan McDonald. 2007. A Study of Global Inference Al-
gorithms in Multi-document Summarization. In Pro-
ceedings of the 29th European Conference on IR Re-

search, ECIR’07, pages 557–564, Berlin, Heidelberg.
Springer-Verlag.

Rada Mihalcea and Paul Tarau. 2004. TextRank: Bring-
ing Order into Text. In Proceedings of the 2004 Con-
ference on Empirical Methods in Natural Language
Processing , EMNLP 2004, A meeting of SIGDAT, a
Special Interest Group of the ACL, held in conjunction
with ACL 2004, 25-26 July 2004, Barcelona, Spain,
pages 404–411.

Anne-Lyse Minard, Manuela Speranza, Eneko Agirre,
Itziar Aldabe, Marieke van Erp, Bernardo Magnini,
German Rigau, and Ruben Urizar. 2015. SemEval-
2015 Task 4: TimeLine: Cross-Document Event Or-
dering. In Proceedings of the 9th International Work-
shop on Semantic Evaluation (SemEval 2015), pages
778–786, Denver, Colorado, June. Association for
Computational Linguistics.

Ani Nenkova and Rebecca Passonneau. 2004. Evaluat-
ing Content Selection in Summarization: The Pyramid
Method. In Daniel Marcu Susan Dumais and Salim
Roukos, editors, HLT-NAACL 2004: Main Proceed-
ings, pages 145–152, Boston, Massachusetts, USA,
May 2 - May 7. Association for Computational Lin-
guistics.

J. Platt. 2000. Probabilistic outputs for support vector
machines and comparisons to regularized likelihood
methods. In Advances in Large Margin Classifiers.

James Pustejovsky, José Castaño, Robert Ingria, Roser
Saurı́, Robert Gaizauskas, Andrea Setzer, and Graham
Katz. 2003. TimeML: Robust specification of event
and temporal expressions in text. In Fifth Interna-
tional Workshop on Computational Semantics (IWCS-
5), pages 1–11.

Jannik Strötgen and Michael Gertz. 2013. Multilingual
and Cross-domain Temporal Tagging. Language Re-
sources and Evaluation, 47(2):269–298.

Russell Swan and James Allan. 2000. TimeMine
(Demonstration Session): Visualizing Automatically
Constructed Timelines. In Proceedings of the 23rd
Annual International ACM SIGIR Conference on Re-
search and Development in Information Retrieval, SI-
GIR ’00, pages 393–, New York, NY, USA. ACM.

Giang Tran, Eelco Herder, and Katja Markert. 2015.
Joint Graphical Models for Date Selection in Timeline
Summarization. In Proceedings of the 53rd Annual
Meeting of the Association for Computational Linguis-
tics and the 7th International Joint Conference on Nat-
ural Language Processing (Volume 1: Long Papers),
pages 1598–1607, Beijing, China, July. Association
for Computational Linguistics.

Naushad UzZaman, Hector Llorens, Leon Derczynski,
James Allen, Marc Verhagen, and James Pustejovsky.
2013. SemEval-2013 Task 1: TempEval-3: Evaluating
Time Expressions, Events, and Temporal Relations.

2348



In Second Joint Conference on Lexical and Compu-
tational Semantics (*SEM), Volume 2: Proceedings of
the Seventh International Workshop on Semantic Eval-
uation (SemEval 2013), pages 1–9, Atlanta, Georgia,
USA, June. Association for Computational Linguis-
tics.

Marc Verhagen, Robert Gaizauskas, Frank Schilder,
Mark Hepple, Graham Katz, and James Pustejovsky.
2007. SemEval-2007 Task 15: TempEval Temporal
Relation Identification. In Proceedings of the 4th In-
ternational Workshop on Semantic Evaluations, Se-
mEval ’07, pages 75–80, Stroudsburg, PA, USA. As-
sociation for Computational Linguistics.

Marc Verhagen, Roser Saurı́, Tommaso Caselli, and
James Pustejovsky. 2010. SemEval-2010 Task 13:
TempEval-2. In Proceedings of the 5th Interna-
tional Workshop on Semantic Evaluation, SemEval
’10, pages 57–62, Stroudsburg, PA, USA. Association
for Computational Linguistics.

Rui Yan, Xiaojun Wan, Jahna Otterbacher, Liang Kong,
Xiaoming Li, and Yan Zhang. 2011. Evolutionary
Timeline Summarization: A Balanced Optimization
Framework via Iterative Substitution. In Proceedings
of the 34th International ACM SIGIR Conference on
Research and Development in Information Retrieval,
SIGIR ’11, pages 745–754, New York, NY, USA.
ACM.

2349


