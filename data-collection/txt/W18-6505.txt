



















































End-to-End Content and Plan Selection for Data-to-Text Generation


Proceedings of The 11th International Natural Language Generation Conference, pages 46–56,
Tilburg, The Netherlands, November 5-8, 2018. c©2018 Association for Computational Linguistics

46

End-to-End Content and Plan Selection for Data-to-Text Generation

Sebastian Gehrmann
Harvard SEAS

gehrmann@seas.harvard.edu

Falcon Z. Dai
TTI-Chicago

dai@ttic.edu

Henry Elder
ADAPT

henry.elder@adaptcentre.ie

Alexander M. Rush
Harvard SEAS

srush@seas.harvard.edu

Abstract

Learning to generate fluent natural lan-
guage from structured data with neural
networks has become an common ap-
proach for NLG. This problem can be
challenging when the form of the struc-
tured data varies between examples. This
paper presents a survey of several exten-
sions to sequence-to-sequence models to
account for the latent content selection
process, particularly variants of copy at-
tention and coverage decoding. We fur-
ther propose a training method based on
diverse ensembling to encourage models
to learn distinct sentence templates during
training. An empirical evaluation of these
techniques shows an increase in the qual-
ity of generated text across five automated
metrics, as well as human evaluation.

1 Introduction

Recent developments in end-to-end learning with
neural networks have enabled methods to gener-
ate textual output from complex structured inputs
such as images and tables. These methods may
also enable the creation of text-generation mod-
els that are conditioned on multiple key-value at-
tribute pairs. The conditional generation of flu-
ent text poses multiple challenges since a model
has to select content appropriate for an utter-
ance, develop a sentence layout that fits all se-
lected information, and finally generate fluent lan-
guage that incorporates the content. End-to-end
methods have already been applied to increas-
ingly complex data to simultaneously learn sen-
tence planning and surface realization but were of-
ten restricted by the limited data availability (Wen
et al., 2015; Mei et al., 2015; Dušek and Jurčı́ček,
2016; Lampouras and Vlachos, 2016). The re-

MR

name: The Golden Palace,
eatType: coffee shop,
food: Fast food,
priceRange: cheap,
customer rating: 5 out of 5,
area: riverside

Reference

A coffee shop located on the riverside
called The Golden Palace,
has a 5 out of 5 customer rating.
Its price range are fairly cheap
for its excellent Fast food.

Figure 1: An example of a meaning representa-
tion and utterance pair from the E2E NLG dataset.
Each example comprises a set of key-value pairs
and a natural language description.

cent creation of datasets such as the E2E NLG
dataset (Novikova et al., 2017) provides an oppor-
tunity to further advance methods for text gener-
ation. In this work, we focus on the generation
of language from meaning representations (MR),
as shown in Figure 1. This task requires learn-
ing a semantic alignment from MR to utterance,
wherein the MR can comprise a variable number
of attributes.

Recently, end-to-end generation has been han-
dled primarily by Sequence-to-sequence (S2S)
models (Sutskever et al., 2014; Bahdanau et al.,
2014) that encode some information and decode
it into a desired format. Extensions for summa-
rization and other tasks have developed a mecha-
nism to copy words from the input into a generated
text (Vinyals et al., 2015; See et al., 2017).

We begin with a strong S2S model with copy-
mechanism for the E2E NLG task and include
methods that can help to control the length of
a generated text and how many inputs a model
uses (Tu et al., 2016; Wu et al., 2016). Finally,



47

we also present results of the Transformer archi-
tecture (Vaswani et al., 2017) as an alternative S2S
variant. We show that these extensions lead to im-
proved text generation and content selection.

We further propose a training approach based
on the diverse ensembling technique (Guzman-
Rivera et al., 2012). In this technique, multiple
models are trained to partition the training data
during the process of training the model itself,
thus leading to models that follow distinct sen-
tence templates. We show that this approach im-
proves the quality of generated text, but also the
robustness of the training process to outliers in the
training data.

Experiments are run on the E2E NLG chal-
lenge1. We show that the application of this tech-
nique increases the quality of generated text across
five different automated metrics (BLEU, NIST,
METEOR, ROUGE, and CIDEr) over the multiple
strong S2S baseline models (Dušek and Jurčı́ček,
2016; Vaswani et al., 2017; Su et al., 2018; Fre-
itag and Roy, 2018). Among 60 submissions to the
challenge, our approach ranked first in METEOR,
ROUGE, and CIDEr scores, third in BLEU, and
sixth in NIST.

2 Related Work

Traditional approaches to natural language gener-
ation separate the generation of a sentence plan
from the surface realization. First, an input is
mapped into a format that represents the lay-
out of the output sentence, for example, an ad-
equate pre-defined template. Then, the surface
realization transforms the intermediary structure
into text (Stent et al., 2004). These represen-
tations often model the hierarchical structure of
discourse relations (Walker et al., 2007). Early
data-driven approach used phrase-based language
models for generation (Oh and Rudnicky, 2000;
Mairesse and Young, 2014), or aimed to predict
the best fitting cluster of semantically similar tem-
plates (Kondadadi et al., 2013). More recent work
combines both steps by learning plan and realiza-
tion jointly using end-to-end trained models (e.g.
Wen et al., 2015). Several approaches have looked
at generation from abstract meaning representa-
tions (AMR), and Peng et al. (2017) apply S2S
models to the problem. However, Ferreira et al.
(2017) show that S2S models are outperformed by

1http://www.macs.hw.ac.uk/
InteractionLab/E2E/

phrase-based machine translation models in small
datasets. To address this issue, Konstas et al.
(2017) propose a semi-supervised training method
that can utilize English sentences outside of the
training set to train parts of the model. We ad-
dress the issue by using copy-attention to enable
the model to copy words from the source, which
helps to generate out of vocabulary and rare words.
We note that end-to-end trained models, includ-
ing our approach, often do not explicitly model
the sentence planning stage, and are thus not di-
rectly comparable to previous work on sentence
planning. This is especially limiting for genera-
tion of complex argument structures that rely on
hierarchical structure.

For the task of text generation from simple key-
value pairs, as in the E2E task, Juraska et al.
(2018) describe a heuristic based on word-overlap
that provides unsupervised slot alignment between
meaning representations and open slots in sen-
tence plans. This method allows a model to op-
erate with a smaller vocabulary and to be agnos-
tic to actual values in the meaning representations.
To account for syntactic structure in templates, Su
et al. (2018) describe a hierarchical decoding strat-
egy that generates different part of speech at differ-
ent steps, filling in slots between previously gen-
erated tokens. In contrast, our model uses copy-
attention to fill in latent slots inside of learned tem-
plates. Juraska et al. (2018) also describe a data
selection process in which they use heuristics to
filter a dataset to the most natural sounding exam-
ples according to a set of rules. Our work aims
at the unsupervised segmentation of data such that
one model learns the most natural sounding sen-
tence plans.

3 Background: Sequence-to-Sequence
Generation

We start by introducing the standard a text-to-
text problem and discuss how to map struc-
tured data into a sequential form. Let
(x(0), y(0)), . . . (x(N), y(N)) ∈ (X ,Y) be a set
of N aligned source and target sequence pairs,
with (x(i), y(i)) denoting the ith element in (X ,Y)
pairs. Further, let x = x1, . . . , xm be the sequence
of m tokens in the source, and y = y1, . . . , yn the
target sequence of length n. Let V be the vocabu-
lary of possible tokens, and [n] the list of integers
up to n, [1, . . . , n].

S2S aims to learn a distribution parametrized

http://www.macs.hw.ac.uk/InteractionLab/E2E/
http://www.macs.hw.ac.uk/InteractionLab/E2E/


48

by θ to maximize the conditional probability of
pθ(y|x). We assume that the target is gener-
ated from left to right, such that pθ(y|x) =∏n
t=1 pθ(yt|y[t−1], x), and that pθ(yt|y[t−1], x)

takes the form of an encoder-decoder architecture
with attention. The training aims to maximize the
log-likelihood of the observed training data.

We evaluate the performance of both the
LSTM (Hochreiter and Schmidhuber, 1997) and
Transformer (Vaswani et al., 2017) architecture.
We additionally experiment with two attention for-
mulations. The first uses a dot-product between
the hidden states of the encoder and decoder (Lu-
ong et al., 2015). The second uses a multi-layer
perceptron with the hidden states as inputs (Bah-
danau et al., 2014). We refer to them as dot and
MLP respectively. Since dot attention does not re-
quire additional parameters, we hypothesize that it
performs well in a limited data environment.

In order to apply S2S models, a list of attributes
in an MR has to be linearized into a sequence
of tokens (Konstas et al., 2017; Ferreira et al.,
2017). Not all attributes have to appear for all
inputs, and each attribute might have multi-token
values, such as area: city centre. We use special
start and stop tokens for each possible attribute to
mark value boundaries; for example, an attribute
area: city centre becomes start area city cen-
tre end area . These fragments are concate-
nated into a single sequence to represent the origi-
nal MR as an input sequence to our models. In this
approach, no values are delexicalized, in contrast
to Juraska et al. (2018) and others who delexical-
ize a subset of attributes. An alternative approach
by Freitag and Roy (2018) treats the attribute type
as an additional feature and learn embeddings for
words and types separately.

4 Learning Content Selection

We extend the vanilla S2S system with methods
that address the related problem of text summa-
rization. In particular, we implement the pointer-
generator network similar to that introduced by
Nallapati et al. (2016) and See et al. (2017), which
can generate content by copying tokens from an
input during the generation process.

Copy Model The copy model introduces a bi-
nary variable zt for each decoding step t that acts
as a switch between copying from the source and
generating words. We model the joint probabil-
ity following the procedure described by Gulcehre

et al. (2016) as

p(yt, zt|y[t−1], x) =
∑

z∈{0,1}

p(yt, zt = z|y[t−1], x)

To calculate the switching probability
p(zt|y[t−1], x), let v ∈ Rdhid be a trainable
parameter. The hidden state of the decoder ht is
used to compute p(zt) = σ(hTt v) and decompose
the joint distribution into two parts:

p(yt|y[t−1], x) = p(zt = 1)× p(yt|zt = 1)
+ p(zt = 0)× p(yt|zt = 0),

where every term is conditioned on x and y[t−1].
p(yt|zt = 0) is the distribution generated by the
previously described S2S model, and p(yt|zt = 1)
is a distribution over x that is computed using
the same attention mechanism with separate
parameters.

In our problem, all values in the MR’s should
occur in the generated text and are typically words
that would not be generated by a language model.
This allows us to use an assumption by Gulcehre
et al. (2016) that every word that occurs in both
source and target was copied, which avoids having
to marginalize over z. Then, the log-likelihood
of yt and zt is maximized during training. This
approach has the further advantage that it can
handle previously unseen input by learning to
copy these words into the correct position.

Coverage and Length Penalty We observed
that generated text using vanilla S2S models with
and without copy mechanism commonly omits
some of the values in their inputs. To mitigate this
effect, we use two penalty terms during inference;
a length and a coverage penalty. We are using a
coverage penalty during inference only, opposed
to Tu et al. (2016) who introduced a coverage
penalty term into the attention of an S2S model for
neural machine translation and See et al. (2017)
who used the same idea for abstractive summariza-
tion. Instead, we use the penalty term cp defined
by Wu et al. (2016) as

cp(x, y) = β ·
|x|∑
i=1

log(min(

|y|∑
t=1

ati, 1.0)).

Here, β is a parameter to control the strength of
the penalty. This penalty term increases when too
many generated words attend to the same input.
We typically do not want to repeat the name of the



49

x

f1(x)

fi(x)

fK(x)

...

L1

Li

LK

...
...

...

0

0

Li Li

Figure 2: The multiple-choice loss for a single
training example. Li has the smallest loss and re-
ceives parameter updates.

restaurant or the type of food it serves. Thus, we
only want to attend to the restaurant name once
when we actually generate it. We also use the
length penalty lp by Wu et al. (2016), defined as

lp(y) =
(5 + |y|)α

(5 + 1)α
,

where α is a tunable parameter that controls how
much the likelihoods of longer generated texts
are discounted. The penalties are used to re-rank
beams during the inference procedure such that the
full score function s becomes

s(x, y, z) =
log p(y, z|x)

lp(y)
+ cp(x, y).

A final inference time restriction of our model
is the blocking of repeat sentence beginnings. Au-
tomatic metrics do not punish a strong parallelism
between sentences, but repeat sentence beginnings
interrupt the flow of a text and make it look unnat-
ural. We found that since each model follows a
strict latent template during generation, the gener-
ated text would often begin every sentence with
the same words. Therefore, we encourage syn-
tactic variation by pruning beams during beam
search that start two sentences with the same bi-
gram. Paulus et al. (2017) use similar restrictions
for summarization by blocking repeated trigrams
across the entire generated text. Since automated
evaluation does not punish repeat sentences, we
only enable this restriction when generating text
for the human evaluation.

5 Learning Latent Sentence Templates

Each generated text follows a latent sentence tem-
plate to describe the attributes in its MR. The
model has to associate each attribute with its loca-
tion in a sentence template. However, S2S models
can learn wrong associations between inputs and

targets with limited data, which was also shown
by Ferreira et al. (2017). Additionally, consider
that we may see the generated texts for similar
inputs: There is an expensive British Restaurant
called the Eagle. and The Eagle is an expensive,
British Restaurant.. Both incorporate the same in-
formation but have a different structure. A model
that is trained on both styles simultaneously might
struggle to generate a single output sentence. To
address this issue and to learn a set of diverse gen-
eration styles, we train a mixture of models where
every sequence is still generated by a single model.
The method aims to force each model to learn a
distinct sentence template.

The mixture aims to split the training data be-
tween the models such that each model trains only
on a subset of a data, and can learn a different tem-
plate structure. Thus, one model does not have to
fit all the underlying template structures simulta-
neously. Moreover, it implicitly removes outlier
training examples from all but one part of the mix-
ture. Let f1, . . . , fK be the K models in the mix-
ture. These models can either be completely dis-
joint or share a subset of their parameters (e.g. the
word embeddings, the encoder, or both encoder
and decoder). Following Guzman-Rivera et al.
(2012), we introduce an unobserved random vari-
able w ∼ Cat(1/K) that assigns a weight to each
model for each input. Let pθ(y|x, w) denote the
probability of an output y for an input x with a
given segmentation w. The likelihood for each
point is defined as a mixture of the individual like-
lihoods,

log p(y|x) = log
∑
w

p(y, w|x)

= log
∑
w

p(w)× p(y|w, x).

By constraining w to assume either 0 or 1, the
optimization problem over the whole dataset be-
comes a joint optimization of assignments of mod-
els to data points and parameters to models.

To maximize the target, Guzman-Rivera et al.
(2012) propose a multiple-choice loss (MCL) to
segment training data similar to a hard EM al-
gorithm or k-Means clustering. With MCL, af-
ter each training epoch, each training point is as-
signed to the model that predicts it with the min-
imal loss. After this segmentation, each model is
trained for a further epoch using only its assigned



50

start_name end_name end_areacentrecityEagle start_area ...
<s>       Near       the        city       centre ...

<s>      Eagle        is        near        the ...
...

Figure 3: An illustration of the diverse ensembling method with K = 2 and a shared encoder. The
encoder, shown on the left, reads the meaning representation and generates the contextual representations
of the input tokens. The context is then used in parallel by the two separate decoders. Here, ⊕ represents
the duplication of the input representation. The two decoders generate text independently from each
other. Finally, only the decoder with the better generated text receives a parameter update. The exclusive
choice is illustrated by the ⊗ operation.

data points. This process repeats until the point as-
signments converge. Related work by Kondadadi
et al. (2013) has shown that models compute clus-
ters of templates

Further work by Lee et al. (2016) reduce the
computational overhead by introducing a stochas-
tic MCL (sMCL) variant that does not require
retraining. They compute the posterior over
p(w|x, y) in the E-Step by choosing the best model
for an example k̂ = argmaxk∈[K]pθ(y|x, wk =
1, w¬k = 0). Setting wĥ to 1 and all other en-
tries in w to 0 achieves a hard segmentation for
this point. After this assignment, only the model
k̂ with the minimal negative log-likelihood is up-
dated in the M-Step. A potential downside of this
approach is the linear increase in complexity since
a forward pass has to be repeated for each model.

We illustrate the process of a single forward-
pass in Figure 2, in which a model fi has the
smallest loss L〉 and is thus updated. Figure 3
demonstrates an example with K = 2 in which
the two models generate text according to two dif-
ferent sentence layouts. We find that averaging
predictions of multiple models during inference,
a technique commonly used with traditional en-
sembling approaches, does not lead to increased
performance. We further confirm findings by Lee
et al. (2017) who state that these models overesti-
mate their confidence when generating text. Since
it is our goal to train a model that learns the best

Attribute Value

area city centre, riverside, . . .
customerRating 1 out of 5, average, . . .
eatType coffee shop, restaurant, . . .
familyFriendly yes / no
food Chinese, English, . . .
name Wildwood, The Wrestlers, . . .
near Café Sicilia, Clare Hall, . . .
priceRange less than £20, cheap, . . .

Table 1: A list of all possible attributes and some
example values for the E2E NLG dataset.

underlying template instead of generating diverse
predictions, we instead generate text using only
the model in the ensemble with the best perplexity
on the validation set.

6 Experiments

We apply our method to the crowd-sourced E2E
NLG dataset of Novikova et al. (2017) that com-
prises 50,000 examples of dialogue act-based MRs
and reference pairs in the restaurant domain. Each
input is a meaning representation of on average
5.43 attribute-value pairs, and the target a corre-
sponding natural language utterance. A list of pos-
sible attributes is shown in Table 1. The dataset
is split into 76% training, and 9% validation, and
15% test data. The validation and test data are



51

# Setup BLEU NIST METEOR ROUGE CIDEr

TGEN (Dušek and Jurčı́ček, 2016) 69.3 8.47 47.0 72.6 2.39
Ensemble with Slot Filling (Juraska et al., 2018) 69.3 8.41 43.8 70.1 /
Hierarchical Decoding (Su et al., 2018) 44.1 / / 53.8 /
S2S with Slot Embeddings (Freitag and Roy, 2018) 72.7 8.3 / 75.1 /

(1) mlp 70.6 8.35 47.3 73.8 2.38
(2) dot 71.1 8.43 47.4 73.7 2.35
(3) mlp, copy 71.4 8.44 47.0 74.1 2.43
(4) dot, copy 69.8 8.20 47.8 74.3 2.51

(5) mlp, K = 2 72.6 8.70 48.5 74.8 2.52
(6) dot, K = 2 73.3 8.68 49.2 76.3 2.61
(7) mlp, copy, K = 2 73.6 8.74 48.5 75.5 2.62
(8) dot, copy, K = 2 74.3 8.76 48.1 75.3 2.55

(9) Transformer 69.0 8.22 47.8 74.9 2.45
(10) Transformer, K = 2 73.7 8.75 48.9 76.3 2.56

Table 2: Results of different S2S approaches and published baseline models on the E2E NLG validation
set. The second section shows models without diverse ensembling, the third section with it. The fourth
section shows results of the Transformer model. / indicates that numbers were not reported.

multi-reference; the validation set has on average
8.1 references for each MR. A separate test set
with previously unseen combinations of attributes
contains 630 MR’s and its references are unseen
and used for evaluation in the E2E NLG challenge.

For all LSTM-based S2S models, we use a two-
layer bidirectional LSTM encoder, and hidden and
embedding sizes of 750. During training, we ap-
ply dropout with probability 0.2 and train mod-
els with Adam (Kingma and Ba, 2014) and an
initial learning rate of 0.002. We evaluate both
mlp and dot attention types. The Transformer
model has 4 layers with hidden and embedding
sizes 512. We use the training rate schedule de-
scribed by Vaswani et al. (2017), using Adam and
a maximum learning rate of 0.1 after 2,000 warm-
up steps. The diverse ensembling technique is
applied to all approaches, pre-training all mod-
els for 4 epochs and then activating the sMCL
loss. All models are implemented in OpenNMT-
py (Klein et al., 2017)2. The parameters were
found by grid search starting from the param-
eters used in the TGEN model by Dušek and
Jurčı́ček (2016). Unless stated otherwise, mod-
els do not block repeat sentence beginnings, since
it results in worse performance in automated met-

2Code and documentation can be found at
https://github.com/sebastianGehrmann/
diverse_ensembling

rics. We show results on the multi-reference val-
idation and the blind test sets for the five metrics
BLEU (Papineni et al., 2002), NIST (Doddington,
2002), METEOR (Denkowski and Lavie, 2014),
ROUGE (Lin, 2004), and CIDEr (Vedantam et al.,
2015).

7 Results

7.1 Results on the Validation Set

Table 2 shows the results of different models on
the validation set. During inference, we set the
length penalty parameter α to 0.4, the coverage
penalty parameter β to 0.1, and use beam search
with a beam size of 10. Our models outperform
all shown baselines, which represent all published
results on this dataset to date. Except for the copy-
only condition, the data-efficient dot outperforms
mlp. Both copy-attention and diverse ensem-
bling increase performance, and combining the
two methods yields the highest BLEU and NIST
scores across all conditions. The Transformer per-
forms similarly to the vanilla S2S models, with
a lower BLEU but higher ROUGE score. Di-
verse ensembling also increases the performance
with the Transformer model, leading to the high-
est ROUGE score across all model configurations.
Table 3 shows generated text from different mod-
els. We can observe that the model without copy
attention omits the rating, and without ensem-

https://github.com/sebastianGehrmann/diverse_ensembling
https://github.com/sebastianGehrmann/diverse_ensembling


52

bling, the sentence structure repeats and thus looks
unnatural. With ensembling, both models produce
sensible output with different sentence layouts.
We note that often, only the better of the two mod-
els in the ensemble produces output better than the
baselines. We further analyze how many attributes
are omitted by the systems in Section 7.3.

To analyze the effect of length and coverage
penalties, we show the average relative change
across all metrics for model (8) while varying α
and β in Figure 4. Both penalties increase average
performance slightly, with an average increase of
the scores by up to 0.82%. We find that recall-
based metrics increase while the precision-based
metrics decrease when applying the penalty, which
can be explained by an increase in the average
length of the generated text by up to 2.4 words.
Results for ensembling variations of model (8) are
shown in Table 4. While increasing K can lead
to better template representations, every individ-
ual model will be trained on fewer data points.
This can result in an increased generalization er-
ror. Therefore, we evaluate updating the top 2
models during the M-step and setting K=3. While
increasing K from 2 to 3 does not show a major
increase in performance when updating only one
model, theK=3 approach slightly outperforms the
K=2 one with the top 2 updates.

Having the K models model completely dis-
joint data sets and use a disjoint set of parame-
ters could be too strong of a separation. There-
fore, we investigate the effect of sharing a subset
of the parameters between individual models. Our
results in rows (5)-(7) of Table 4 show only a mi-
nor improvement in recall-based approaches when
sharing the word embeddings between models but
at the cost of a much lower BLEU and NIST
score. Sharing more parameters further harms the
model’s performance.

7.2 Results on the Blind Test Set

We next report results of experiments on a held-
out test set, conducted by the E2E NLG chal-
lenge organizers (Dušek et al., 2018), shown in
Table 5. The results show the validity of the ap-
proach, as our systems outperform competing sys-
tems in these; ranking first in ROUGE and CIDEr
and sharing the first rank in METEOR. The first
row of the table shows the results with blocked re-
peat sentence beginnings. While this modification
leads to slightly reduced scores on the automated

0.0 0.2 0.4 0.6

0.2

0.1

0.0

0.75 0.82 0.79 0.78

0.54 0.76 0.79 0.81

0 0.47 0.75 0.82

0.0

0.2

0.4

0.6

0.8

1.0
MRs generated [in %]

Figure 4: Relative change of performance aver-
aged over all five metrics when varying inference
parameters for model (8). Length penalty parame-
ter α controls length, and coverage penalty param-
eter β penalizes source values with no attention.

MR name: Wildwood; eatType: coffee shop;
food: English; priceRange: moderate; cus-
tomerRating: 3 out of 5; near: Ranch

(1) Wildwood is a coffee shop providing English
food in the moderate price range. It is lo-
cated near Ranch.

(4) Wildwood is a coffee shop providing English
food in the moderate price range. It is near
Ranch. Its customer rating is 3 out of 5.

(8).1 Wildwood is a moderately priced English
coffee shop near Ranch. It has a customer
rating of 3 out of 5.

(8).2 Wildwood is an English coffee shop near
Ranch. It has a moderate price range and a
customer rating of 3 out of 5.

Table 3: Examples of generated text by different
systems for the same MR, shown in the first line.
Numbers correspond to model configurations in
Table 2.

metrics, it makes the text look more natural, and
we thus use this output in the human evaluation.

The human evaluation compared the output to
19 other systems. For a single meaning repre-
sentation, crowd workers were asked to rank out-
put from five systems at a time. Separate ranks
were collected for the quality and naturalness of
the generations. The ranks for quality aim to re-
flect the grammatical correctness, fluency, and ad-
equacy of the texts with respect to the structured
input. In order to gather ranks for the natural-
ness, generations were shown without the mean-
ing representation and rated based on how likely
an utterance could have been produced by a na-



53

# Setup BLEU NIST METEOR ROUGE CIDEr

(1) K = 1 69.8 8.20 47.8 74.3 2.51
(2) K = 2 74.3 8.76 48.1 75.3 2.55
(3) K = 3 73.6 8.73 48.8 75.5 2.64
(4) K = 3, top 2 74.2 8.81 48.6 76.1 2.56

(5) K = 2, share embedding 73.1 8.61 48.6 75.4 2.58
(6) K = 2, share encoder 72.2 8.56 47.8 74.4 2.50
(7) K = 2, share encoder + decoder 72.4 8.43 47.3 74.6 2.50

Table 4: Variants of diverse ensembling. The top section shows results of varying the number of models
in a diverse ensemble on the validation set. The bottom section shows results with different numbers of
shared parameters between two models in a diverse ensemble. All results are generated with setup (8)
from Table 2.

Setup BLEU NIST METEOR ROUGE CIDEr

TGEN (Dušek and Jurčı́ček, 2016) 65.9 8.61 44.8 68.5 2.23
Slot Filling (Juraska et al., 2018) 66.2 8.31 44.5 67.7 2.26

dot, K = 3, top 2, block repeats 65.0 8.53 43.9 68.7 2.09
dot, K = 3, top 2 65.8 8.57 (8) 44.1 68.9 (9) 2.11
Transformer, K = 2 66.2 (8) 8.60 (7) 45.7 (1) 70.4 (3) 2.34 (1)
dot, copy, K = 2 67.4 (3) 8.61 (6) 45.2 (4) 70.8 (1) 2.31 (3)

Table 5: The results of our model on the blind E2E NLG test set. Notable rankings within the 60
submitted systems are shown in parentheses. Systems by Freitag and Roy (2018) and Su et al. (2018)
were not evaluated on this set.

tive speaker. The results were then analyzed us-
ing the TrueSkill algorithm by Sakaguchi et al.
(2014). The algorithm produced 5 clusters of sys-
tems for both quality and naturalness. Within clus-
ters, no statistically significant difference between
systems can be found. In both evaluations, our
main system was placed in the second best cluster.
One difference between our and the system ranked
first in quality by Juraska et al. (2018) is that our
model frequently fails to generate text about inputs
despite the coverage penalty.

7.3 Which Attributes do the Models
Generate?

Vanilla S2S models frequently miss to include at-
tributes of an MR, even though almost all the
training examples use all of them. While Juraska
et al. (2018) adds an explicit penalty for each at-
tribute that is not part of a generated text, we aim
to implicitly reduce this number with the cover-
age penalty. To investigate the effectiveness of
the model extensions, we apply a heuristic that
matches an input with exact word matches in the
generated text. This provides a lower bound to the

number of generated attributes since paraphrases
are not captured. We omit the familyFriendly cat-
egory from this figure since it does not work with
this heuristic.

In Figure 5 (a) we show the cumulative effect
of model extensions on generated attributes across
all categories. Copy attention and the coverage
penalty have a major effect on this number, while
the ensembling only slightly improves it. In Fig-
ure 5 (b), we show a breakdown of the generated
attributes per category. The base model struggles
with area, price range, and customer rating. Price
range and customer rating are frequently para-
phrased, for example by stating that a restaurant
with a 4 out of 5 rating has a good rating, while
the area cannot be rephrased. While customer rat-
ing is one of the most prevalent attributes in the
data set, the other two are more uncommon. The
full model improves across almost all of the cate-
gories but also has problems with the price range.
The only category in which it performs worse is
the name category, which could be a side effect
of the particular split of the data that the model
learned. Despite the decrease in mistakenly omit-



54

(b)(a) (b)

Figure 5: (a): The figure shows a lower bound on the percentage of all attributes the model is generating
for each model type. The base model is missing almost 40% of all inputs. (b) The figure shows a
breakdown per attribute how many the model is generating compared to the reference.

ted attributes, the model still misses up to 20% of
attributes. We hope to address this issue in future
work by explicitly modeling the underlying slots
and penalizing models when they ignore them.

8 Conclusion

In this paper, we have shown three contributions
toward end-to-end models for data-to-text prob-
lems. We surveyed existing S2S modeling meth-
ods and extensions to improve content selection in
the NLG problem. We further showed that apply-
ing diverse ensembling to model different under-
lying generation styles in the data can lead to a
more robust learning process for noisy data. Fi-
nally, an empirical evaluation of the investigated
methods showed that they lead to improvements
across multiple automatic evaluation metrics. In
future work, we aim to extend the shown meth-
ods to address generation from more complex in-
puts, and for challenging domains such as data-to-
document generation.

9 Acknowledgements

We thank the three anonymous reviewers for their
valuable feedback. This work was supported by a
Samsung Research Award.

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473.

Michael Denkowski and Alon Lavie. 2014. Meteor
universal: Language specific translation evaluation
for any target language. In Proceedings of the ninth

workshop on statistical machine translation, pages
376–380.

George Doddington. 2002. Automatic evaluation
of machine translation quality using n-gram co-
occurrence statistics. In Proceedings of the second
international conference on Human Language Tech-
nology Research, pages 138–145. Morgan Kauf-
mann Publishers Inc.

Ondřej Dušek and Filip Jurčı́ček. 2016. Sequence-
to-sequence generation for spoken dialogue via
deep syntax trees and strings. arXiv preprint
arXiv:1606.05491.

Ondrej Dušek, Jekaterina Novikova, and Verena Rieser.
2018. Findings of the E2E NLG challenge. In (in
prep.).

Thiago Castro Ferreira, Iacer Calixto, Sander Wubben,
and Emiel Krahmer. 2017. Linguistic realisation as
machine translation: Comparing different mt mod-
els for amr-to-text generation. In Proceedings of the
10th International Conference on Natural Language
Generation, pages 1–10.

Markus Freitag and Scott Roy. 2018. Unsupervised
natural language generation with denoising autoen-
coders. arXiv preprint arXiv:1804.07899.

Caglar Gulcehre, Sungjin Ahn, Ramesh Nallap-
ati, Bowen Zhou, and Yoshua Bengio. 2016.
Pointing the unknown words. arXiv preprint
arXiv:1603.08148.

Abner Guzman-Rivera, Dhruv Batra, and Pushmeet
Kohli. 2012. Multiple choice learning: Learning to
produce multiple structured outputs. In Advances
in Neural Information Processing Systems, pages
1799–1807.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Juraj Juraska, Panagiotis Karagiannis, Kevin Bowden,
and Marilyn Walker. 2018. A deep ensemble model



55

with slot alignment for sequence-to-sequence natu-
ral language generation. In Proceedings of the 2018
Conference of the North American Chapter of the
Association for Computational Linguistics: Human
Language Technologies, Volume 1 (Long Papers),
volume 1, pages 152–162.

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Guillaume Klein, Yoon Kim, Yuntian Deng, Jean
Senellart, and Alexander M Rush. 2017. Opennmt:
Open-source toolkit for neural machine translation.
arXiv preprint arXiv:1701.02810.

Ravi Kondadadi, Blake Howald, and Frank Schilder.
2013. A statistical nlg framework for aggregated
planning and realization. In Proceedings of the 51st
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 1: Long Papers), vol-
ume 1, pages 1406–1415.

Ioannis Konstas, Srinivasan Iyer, Mark Yatskar, Yejin
Choi, and Luke Zettlemoyer. 2017. Neural amr:
Sequence-to-sequence models for parsing and gen-
eration. In Proceedings of the 55th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), volume 1, pages 146–157.

Gerasimos Lampouras and Andreas Vlachos. 2016.
Imitation learning for language generation from un-
aligned data. In Proceedings of COLING 2016,
the 26th International Conference on Computational
Linguistics: Technical Papers, pages 1101–1112.
The COLING 2016 Organizing Committee.

Kimin Lee, Changho Hwang, KyoungSoo Park, and
Jinwoo Shin. 2017. Confident multiple choice learn-
ing. arXiv preprint arXiv:1706.03475.

Stefan Lee, Senthil Purushwalkam Shiva Prakash,
Michael Cogswell, Viresh Ranjan, David Crandall,
and Dhruv Batra. 2016. Stochastic multiple choice
learning for training diverse deep ensembles. In Ad-
vances in Neural Information Processing Systems,
pages 2119–2127.

Chin-Yew Lin. 2004. Rouge: A package for auto-
matic evaluation of summaries. In Text summariza-
tion branches out: Proceedings of the ACL-04 work-
shop, volume 8. Barcelona, Spain.

Minh-Thang Luong, Hieu Pham, and Christopher D
Manning. 2015. Effective approaches to attention-
based neural machine translation. arXiv preprint
arXiv:1508.04025.

François Mairesse and Steve Young. 2014. Stochastic
language generation in dialogue using factored lan-
guage models. Computational Linguistics.

Hongyuan Mei, Mohit Bansal, and Matthew R Walter.
2015. What to talk about and how? selective gen-
eration using lstms with coarse-to-fine alignment.
arXiv preprint arXiv:1509.00838.

Ramesh Nallapati, Bowen Zhou, Caglar Gulcehre,
Bing Xiang, et al. 2016. Abstractive text summa-
rization using sequence-to-sequence rnns and be-
yond. arXiv preprint arXiv:1602.06023.

Jekaterina Novikova, Ondrej Dušek, and Verena Rieser.
2017. The E2E dataset: New challenges for end-
to-end generation. In Proceedings of the 18th
Annual Meeting of the Special Interest Group on
Discourse and Dialogue, Saarbrücken, Germany.
ArXiv:1706.09254.

Alice H Oh and Alexander I Rudnicky. 2000. Stochas-
tic language generation for spoken dialogue sys-
tems. In Proceedings of the 2000 ANLP/NAACL
Workshop on Conversational systems-Volume 3,
pages 27–32. Association for Computational Lin-
guistics.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of
the 40th annual meeting on association for compu-
tational linguistics, pages 311–318. Association for
Computational Linguistics.

Romain Paulus, Caiming Xiong, and Richard Socher.
2017. A deep reinforced model for abstractive sum-
marization. arXiv preprint arXiv:1705.04304.

Xiaochang Peng, Chuan Wang, Daniel Gildea, and Ni-
anwen Xue. 2017. Addressing the data sparsity is-
sue in neural amr parsing. In Proceedings of the
15th Conference of the European Chapter of the As-
sociation for Computational Linguistics: Volume 1,
Long Papers, volume 1, pages 366–375.

Keisuke Sakaguchi, Matt Post, and Benjamin
Van Durme. 2014. Efficient elicitation of annota-
tions for human evaluation of machine translation.
In WMT@ ACL, pages 1–11.

Abigail See, Peter J Liu, and Christopher D Manning.
2017. Get to the point: Summarization with pointer-
generator networks. Proceedings of the 55th Annual
Meeting of the Association for Computational Lin-
guistics, ACL 2017, Vancouver, Canada, July 30 -
August 4, Volume 1: Long Papers.

Amanda Stent, Rashmi Prasad, and Marilyn Walker.
2004. Trainable sentence planning for complex in-
formation presentation in spoken dialog systems. In
Proceedings of the 42nd annual meeting on associa-
tion for computational linguistics, page 79. Associ-
ation for Computational Linguistics.

Shang-Yu Su, Kai-Ling Lo, Yi Ting Yeh, and Yun-
Nung Chen. 2018. Natural language generation by
hierarchical decoding with linguistic patterns. In
Proceedings of the 2018 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
Volume 2 (Short Papers), volume 2, pages 61–66.

https://arxiv.org/abs/1706.09254
https://arxiv.org/abs/1706.09254


56

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

Zhaopeng Tu, Zhengdong Lu, Yang Liu, Xiaohua
Liu, and Hang Li. 2016. Modeling coverage
for neural machine translation. arXiv preprint
arXiv:1601.04811.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. CoRR, abs/1706.03762.

Ramakrishna Vedantam, C Lawrence Zitnick, and Devi
Parikh. 2015. Cider: Consensus-based image de-
scription evaluation. In Proceedings of the IEEE
conference on computer vision and pattern recog-
nition, pages 4566–4575.

Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly.
2015. Pointer networks. In Advances in Neural In-
formation Processing Systems, pages 2692–2700.

Marilyn A Walker, Amanda Stent, François Mairesse,
and Rashmi Prasad. 2007. Individual and domain
adaptation in sentence planning for dialogue. Jour-
nal of Artificial Intelligence Research, 30:413–456.

Tsung-Hsien Wen, Milica Gasic, Nikola Mrksic, Pei-
Hao Su, David Vandyke, and Steve Young. 2015.
Semantically conditioned lstm-based natural lan-
guage generation for spoken dialogue systems.
arXiv preprint arXiv:1508.01745.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V.
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, Jeff Klingner, Apurva Shah, Melvin
Johnson, Xiaobing Liu, Lukasz Kaiser, Stephan
Gouws, Yoshikiyo Kato, Taku Kudo, Hideto
Kazawa, Keith Stevens, George Kurian, Nishant
Patil, Wei Wang, Cliff Young, Jason Smith, Jason
Riesa, Alex Rudnick, Oriol Vinyals, Greg Corrado,
Macduff Hughes, and Jeffrey Dean. 2016. Google’s
neural machine translation system: Bridging the gap
between human and machine translation. CoRR,
abs/1609.08144.

http://arxiv.org/abs/1706.03762
http://arxiv.org/abs/1706.03762
http://arxiv.org/abs/1609.08144
http://arxiv.org/abs/1609.08144
http://arxiv.org/abs/1609.08144

