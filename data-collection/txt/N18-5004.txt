



















































CL Scholar: The ACL Anthology Knowledge Graph Miner


Proceedings of NAACL-HLT 2018: Demonstrations, pages 16–20
New Orleans, Louisiana, June 2 - 4, 2018. c©2018 Association for Computational Linguistics

CL Scholar: The ACL Anthology Knowledge Graph Miner

Mayank Singh, Pradeep Dogga∗, Sohan Patro∗, Dhiraj Barnwal∗, Ritam Dutt∗,
Rajarshi Haldar, Pawan Goyal and Animesh Mukherjee

Department of Computer Science and Engineering
Indian Institute of Technology, Kharagpur, WB, India

mayank.singh@cse.iitkgp.ernet.in

Abstract

We present CL Scholar, the ACL Anthol-
ogy knowledge graph miner to facilitate high-
quality search and exploration of current re-
search progress in the computational linguis-
tics community. In contrast to previous works,
periodically crawling, indexing and process-
ing of new incoming articles is completely au-
tomated in the current system. CL Scholar
utilizes both textual and network information
for knowledge graph construction. As an
additional novel initiative, CL Scholar sup-
ports more than 1200 scholarly natural lan-
guage queries along with standard keyword-
based search on constructed knowledge graph.
It answers binary, statistical and list based
natural language queries. The current system
is deployed at http://cnerg.iitkgp.
ac.in/aclakg. We also provide REST
API support along with bulk download facility.
Our code and data are available at https:
//github.com/CLScholar.

1 Introduction

ACL Anthology1 is one of the popular initiatives
of the Association for Computational Linguistics
(ACL) to curate all publications related to compu-
tational linguistics and natural language process-
ing at one common place. At present, it hosts
more than 44,000 papers and is actively updated
and maintained by Min Yen Kan. Since its in-
ception, ACL Anthology functions as a repository
with the collection of papers from ACL and related
organizations in computational linguistics. How-
ever, it does not provide any additional statistics
about authors, papers, venues, and topics. Also, it
lacks advance search features such as article rank-
ing by factoring in popularity or relevance, natu-
ral language query support, author profiles, topical
search etc.

∗*These authors contributed equally to the study.
1https://aclweb.org/anthology/

1.1 Previous systems built on ACL anthology

Owing to above limitations, ACL anthology re-
mained an archival repository for quite a long
time. Bird et al. (2008) developed the ACL An-
thology Reference Corpus (ACL ARC) as a collab-
orative attempt to provide a standardized testbed
reference corpus based on the ACL Anthology.
Later, Radev et al. (2009) have invested humon-
gous manual efforts to construct The ACL Anthol-
ogy Network Corpus (AAN). AAN consists of a
manually curated database of citations, collabora-
tions, and summaries and statistics about the net-
work. They have utilized two OCR processing
tools PDFBox2 and ParsCit (Councill et al., 2008)
for curation. AAN was continuously updated till
2013 (Radev et al., 2013). Recently, this project
has been moved to Yale University as part of the
new LILY group3.

1.2 The computational linguistic knowledge
graph

As a similar initiative, in this paper, we demon-
strate the development of CL Scholar which au-
tomatically mines ACL anthology and constructs
computational linguistic knowledge graph (here-
after ‘CLKG’). The current framework automati-
cally crawls new articles, processes, indexes, con-
structs knowledge graph and generates searchable
statistics without involving tedious manual anno-
tations. We leverage state-of-the-art scientific ar-
ticle processing tool OCR++ (Singh et al., 2016)
for robust and automatic information extraction
from scientific articles. OCR++ is an open-source
framework that can extract from scholarly articles
the metadata, the structure and the bibliography.

The constructed CLKG is modeled as a hetero-
geneous graph (Sun et al., 2009) consisting of four

2https://pdfbox.apache.org/
3http://tangra.cs.yale.edu/newaan/

16



Figure 1: Data processing flow diagram.

entities: author, paper, venue, and field. We utilize
metapaths (Sun and Han, 2012) to implement the
query retrieval framework.

1.3 Natural language queries
In the first-of-its-kind initiative, we extend the
functionalities of CL Scholar to answer natural
language queries (hereafter ‘NLQ’) along with
standard keyword-based queries. Currently, it
answers binary, statistical and list based NLQ.
Overall, we handle more than 1200 variations of
NLQ.
Outline: The rest of the paper is organized as
follows. Section 2 describes the ACL Anthology
dataset. Section 3 details step by step extraction
procedure for CLKG construction. In section 4,
we describe CLKG. We describe our framework
in section 5. We conclude in section 6 and identify
future work.

Table 2: General statistics about the ACL Anthology
dataset.

Number of papers 42,069
Year range 1965–2017
Total authors 37,752
Total unique authors 33,372
Total unified venues 33

2 Dataset

CL Scholar uses metadata and full-text PDF re-
search articles crawled from ACL Anthology.
ACL Anthology consists of more than 40,000 re-
search articles published in more than 33 computa-
tional linguistic events (venues) including confer-
ences, workshops, and journals. Table 2 presents
general statistics of the crawled dataset.

We crawl both metadata information (unique ar-
ticle identifier, article title, authors’ names, and
venue) as well as full-text PDF articles. Next, we
describe in detail several pre-processing steps and
knowledge graph construction methodology.

3 Pre-processing and knowledge graph
construction

We process full-text PDFs using state-of-the-art
extraction tool OCR++ (Singh et al., 2016). We
extract references, citation contexts, author affil-
iations and URLs from full-text. OCR++ also
provides reference to citation contexts mapping.
Raw information with several variations like au-
thor names, venue names and affiliations are as-
signed unique identifiers using standard indexing
approaches. We only consider those reference pa-
pers that are present in ACL anthology. This rich
textual, as well as citation relationship informa-
tion, is utilized in the construction of CLKG. Fig-
ure 1 presents the CLKG construction from meta-
data and full-text PDF files crawled from ACL an-
thology.

4 Computational linguistic knowledge
graph

Computational linguistic knowledge graph
(CLKG) is a heterogeneous graph (Sun et al.,
2009) consisting of four entities: author (A),
paper (P ), venue (V ) and field (F ) as nodes.
Each entity is associated with few properties,
for example, properties of P are publication
year, title, abstract, etc. Similarly, properties
of A are name, publication trend, affiliation
etc. We utilize metapaths (Sun and Han, 2012)
between entities to express semantic relations. For

17



example, simple metapaths like A→P and V→P
represent “author of” and “published at” relations
respectively, whereas complex metapaths like
V→A→P and F→A→P represent “authors of
papers published at” and “authors of papers in”
relations respectively. We leverage metapaths
to develop CL Scholar (described in the next
section).

Figure 3: CL Scholar framework.

5 CL Scholar

CL scholar fetches information from CLKG as
per the input query from the user. The current
framework is divided into two modules – 1) nat-
ural language based query retrieval, and 2) en-
tity specific query retrieval. Figure 3 shows CL
Scholar framework.

5.1 Natural language query retrieval
The first module answers natural language queries
(NLQ). It consists of two sub-modules, 1) the
query classifier, and 2) the NL query processor.
Query classifier classifies user input into one of
the three basic types of NLQ using regular ex-
pression patterns. NL query processor processes
query based on its type determined by query clas-
sifier. Given an input natural language query, we
utilize longest subsequence match to identify en-
tity instances. The three types of NLQ are:

1. Binary queries: These represent a set of
queries for which user demands a ‘yes’ or

‘no’ type answer. Table 4 lists few interest-
ing binary queries.

2. Statistical queries: These represent set of
queries which the knowledge base returns
with some statistics. Currently, we sup-
port three types of statistics – 1) temporal,
2) cumulative, and 3) comparison. Tem-
poral represents year-wise statistics, cumu-
lative represents overall statistics and com-
parison represents comparative statistics be-
tween two or more instances of the same en-
tity type. Table 4 lists few representative sta-
tistical queries.

3. List queries: These represent set of queries
for which the knowledge base returns a list of
papers, authors or venues. Table 4 also enu-
merates few representative list queries.

5.2 Entity specific query retrieval

CL scholar also supports entity specific retrieval.
As described in section 4, CLKG consists of four
entities: paper, author, venue, and field. Currently,
our system supports three4 entity specific retrieval
schemes handled by three sub-modules:

1. Paper specific: This sub-module returns pa-
per specific information. Currently, we re-
trieve and display author names and affilia-
tions, abstract, publication year and venue,
cumulative and year-wise citations, list of ref-
erences, citer papers, co-cited papers present
in ACL anthology and list of URLs present
in the paper text. We also show average sen-
timent score received by the queried paper
by utilizing incoming citation contexts. Ta-
ble 5 shows three representative paper spe-
cific queries.

2. Author specific: This sub-module handles
author specific queries. Given an author
name, the system shows its cumulative and
year-wise publication and citation count, col-
laborator list with an average number of col-
laborations, current and temporal H-index
and temporal topic distribution. We also list
author’s publications in ACL anthology. Ta-
ble 5 lists three author specific queries with
first name, last name and full name respec-
tively.

3. Venue specific: We also answer venue spe-
cific queries. For each venue specific query,
the system shows cumulative and year-wise

4The fourth sub-module is still under development.

18



Table 4: Representative queries from three natural language query classes. A represents author, P represents paper,
V represents venue and F represents field. The list of supported queries is available online at CL Scholar portal.

Binary queries Statistical queries List queries

1. Is V accepting papers from F How many F papers are pub-
lished in V over the years

List the papers from F ac-
cepted in V

2. Has A published any paper How many papers are pub-
lished by A

List the papers published by
A

3. Does A publish papers on F How many papers are pub-
lished by A in F

List the papers published by
A on F

4. Are there any papers pub-
lished by A1 and A2 together

How many papers are pub-
lished by A1 and A2 together

List the papers published by
A1 and A2 together

5. Are there any papers of A
with positive sentiment

How many papers are there
of A with positive sentiment

List of papers with positive
sentiment of A

publication and citation count, 2-year impact
factor, recently held year and list of collabo-
rating venues. Table 5 shows three represen-
tative venue specific queries.

Table 5: Representative entity specific queries.

Paper
specific

Author
specific

Venue
specific

OCR Chris NAACL
Deep learning Singh SIGDAT

Word embeddings Aravind Joshi ACL

5.3 Additional insights

We provide two additional insights by analyzing
incoming citation contexts. First, we present a
summary generated from incoming the citation
contexts (Qazvinian and Radev, 2008). Currently,
we show five summary sentences against each pa-
per. Second, we also compute sentiment score of
each citation context by leveraging a standard sen-
timent analyzer (Athar and Teufel, 2012). We ag-
gregate by averaging over the sentiment score of
all the incoming citation contexts.

5.4 Ranking

Currently, we employ popularity based ranking of
retrieved results. We utilize current citation count
as a measure of popularity. In future, we plan
to deploy other ranking schemes like recency, im-
pact, sentiment, relevance, etc.

5.5 Deployment

CL Scholar is developed using ReactJS frame-
work. The system also supports REST API re-
quests which are powered by a NodeJS server with
data being served using MongoDB. It is currently

accessible at our research group page5. More in-
formation about API usage is available at API
support page6. In addition, the entire knowledge
graph can also be easily downloaded in a plain
text format. Figure 6 shows a snapshot of the CL
Scholar landing page.

Figure 6: Snapshot of CL Scholar landing page.

The current system is still under development.
Currently, we assume that spellings are correct for
NLQ. We do not support instant query search. We
also do not support query recommendations.

6 Conclusion

In this paper, we propose a fully automatic ap-
proach for the development of computational lin-
guistic knowledge graph from full-text PDF arti-
cles available in ACL Anthology. We also de-
velop first-of-its-kind academic natural language
query retrieval system. Currently, our system can
answer three different types of natural language
queries. In future, we plan to extend the query
set. We also plan to append structural information
within knowledge graphs such as section labeling
of citations, figure and table captions etc. We also
plan to conduct extensive evaluation to compare
CL Scholar with state-of-the-art systems.

5http://cnerg.iitkgp.ac.in/aclakg
6http://cnerg.iitkgp.ac.in/aclakg/api

19



References
Awais Athar and Simone Teufel. 2012. Context-

enhanced citation sentiment detection. In Proceed-
ings of the 2012 Conference of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies, NAACL
HLT ’12, pages 597–601, Stroudsburg, PA, USA.
Association for Computational Linguistics.

Steven Bird, Robert Dale, Bonnie J Dorr, Bryan Gib-
son, Mark Thomas Joseph, Min-Yen Kan, Dongwon
Lee, Brett Powley, Dragomir R Radev, and Yee Fan
Tan. 2008. The acl anthology reference corpus: A
reference dataset for bibliographic research in com-
putational linguistics.

Isaac G Councill, C Lee Giles, and Min-Yen Kan. 2008.
Parscit: an open-source crf reference string parsing
package. In LREC, volume 8, pages 661–667.

Vahed Qazvinian and Dragomir R. Radev. 2008. Sci-
entific paper summarization using citation summary
networks. In Proceedings of the 22Nd International
Conference on Computational Linguistics - Volume
1, COLING ’08, pages 689–696, Stroudsburg, PA,
USA. Association for Computational Linguistics.

Dragomir R Radev, Pradeep Muthukrishnan, and Va-
hed Qazvinian. 2009. The acl anthology network
corpus. In Proceedings of the 2009 Workshop on
Text and Citation Analysis for Scholarly Digital

Libraries, pages 54–61. Association for Computa-
tional Linguistics.

DragomirR. Radev, Pradeep Muthukrishnan, Vahed
Qazvinian, and Amjad Abu-Jbara. 2013. The acl an-
thology network corpus. Language Resources and
Evaluation, pages 1–26.

Mayank Singh, Barnopriyo Barua, Priyank Palod,
Manvi Garg, Sidhartha Satapathy, Samuel Bushi,
Kumar Ayush, Krishna Sai Rohith, Tulasi Gamidi,
Pawan Goyal, and Animesh Mukherjee. 2016.
Ocr++: A robust framework for information extrac-
tion from scholarly articles. In Proceedings of COL-
ING 2016, the 26th International Conference on
Computational Linguistics: Technical Papers, pages
3390–3400, Osaka, Japan. The COLING 2016 Or-
ganizing Committee.

Yizhou Sun and Jiawei Han. 2012. Mining heteroge-
neous information networks: principles and method-
ologies. Synthesis Lectures on Data Mining and
Knowledge Discovery, 3(2):1–159.

Yizhou Sun, Yintao Yu, and Jiawei Han. 2009.
Ranking-based clustering of heterogeneous informa-
tion networks with star network schema. In Pro-
ceedings of the 15th ACM SIGKDD international
conference on Knowledge discovery and data min-

ing, pages 797–806. ACM.

20


