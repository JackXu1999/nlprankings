



















































Extract with Order for Coherent Multi-Document Summarization


Proceedings of TextGraphs-11: the Workshop on Graph-based Methods for Natural Language Processing, ACL 2017, pages 51–56,
Vancouver, Canada, August 3, 2017. c©2017 Association for Computational Linguistics

Extract with Order for Coherent Multi-Document Summarization

Mir Tafseer Nayeem
University of Lethbridge
Lethbridge, AB, Canada

mir.nayeem@uleth.ca

Yllias Chali
University of Lethbridge
Lethbridge, AB, Canada
chali@cs.uleth.ca

Abstract

In this work, we aim at developing an ex-
tractive summarizer in the multi-document
setting. We implement a rank based sen-
tence selection using continuous vector
representations along with key-phrases.
Furthermore, we propose a model to
tackle summary coherence for increas-
ing readability. We conduct experiments
on the Document Understanding Confer-
ence (DUC) 2004 datasets using ROUGE
toolkit. Our experiments demonstrate that
the methods bring significant improve-
ments over the state of the art methods in
terms of informativity and coherence.

1 Introduction

The task of automatic document summarization
aims at finding the most relevant informations in
a text and presenting them in a condensed form.
A good summary should retain the most important
contents of the original document or a cluster of
documents, while being coherent, non-redundant
and grammatically readable. There are two types
of summarizations: abstractive summarization and
extractive summarization. Abstractive methods,
which are still a growing field are highly complex
as they need extensive natural language genera-
tion to rewrite the sentences. Therefore, research
community is focusing more on extractive sum-
maries, which selects salient (important) sentences
from the source document without any modifica-
tion to create a summary. Summarization is classi-
fied as single-document or multi-document based
upon the number of source document. The infor-
mation overlap between the documents from the
same topic makes the multi-document summariza-
tion more challenging than the task of summariz-
ing single documents.

One crucial step in generating a coherent sum-
mary is to order the sentences in a logical manner
to increase the readability. A wrong order of sen-
tences convey entirely different idea to the reader
of the summary and also make it difficult to under-
stand. In a single document, summary information
can be presented by preserving the sentence posi-
tion in the original document. In multi-document
summarization, the sentence position in the origi-
nal document does not provide clue to the sentence
arrangement. Hence it is a very challenging task to
perform the arrangement of sentences in the sum-
mary.

2 Related Work

During a decade, several extractive approaches
have been developed for automatic summary gen-
eration that implement a number of machine learn-
ing, graph-based and optimization techniques.
LexRank (Erkan and Radev, 2004) and TextRank
(Mihalcea and Tarau, 2004) are graph-based meth-
ods of computing sentence importance for text
summarization. The RegSum system (Hong and
Nenkova, 2014) employs a supervised model for
predicting word importance. Treating multi-
document summarization as a submodular maxi-
mization problem has proven successful by (Lin
and Bilmes, 2011). Unfortunately, none of the
above systems care about the coherence of the fi-
nal extracted summary.

In very recent works using neural network,
(Cheng and Lapata, 2016) proposed an attentional
encoder-decoder and (Nallapati et al., 2017) used
a simple recurrent network based sequence clas-
sifier to solve the problem of extractive summa-
rization. However, they are limited to single
document settings, where sentences are implic-
itly ordered according to the sentence position.
(Parveen and Strube, 2015; Parveen et al., 2015)

51



proposed graph-based techniques to tackle coher-
ence, which is also limited to single document
summarization. Moreover, a recent work (Wang
et al., 2016) actually proposed a multi-document
summarization system that combines both coher-
ence and informativeness but this system is limited
to syntactic linkages between entities.

In this paper, we implement a rank based sen-
tence selection using continuous vector represen-
tations along with key-phrases. We also model the
coherence using semantic relations between enti-
ties and sentences to increase the readability.

3 Sentence Extraction

We here successively describe each of the steps
involved in the sentence extraction process such
as sentence ranking, sentence clustering, and sen-
tence selection.

3.1 Preprocessing

Our system first takes a set of related texts as input
and preprocesses them which includes tokeniza-
tion, Part-Of-Speech (POS) tagging, removal of
stopwords and Lemmatization. We use NLTK
toolkit1 to preprocess each sentence to obtain a
more accurate representation of the information.

3.2 Sentence Similarity

We take the pre-trained word embeddings2

(Mikolov et al., 2013) of all the non stopwords in
a sentence and take the weighted vector sum ac-
cording to the term-frequency (TF ) of a word(w)
in a sentence(S). Where, E is the word embed-
ding model and idx(w) is the index of the word
w. More formally, for a given sentence S in the
document D, the weighted sum becomes,

S =
∑
w∈S

TF (w, S) · E[idx(w)]

Then we calculate cosine similarity between the
sentence vectors obtained from the above equation
to find the relative distance between Si and Sj .
We also calculate NESim(Si, Sj) by finding the
Named Entities present in Si and Sj using NLTK
Toolkit, then calculating their overlap.

CosSim(Si, Sj) =
Si · Sj
||Si|| ||Sj ||

1http://www.nltk.org/
2https://code.google.com/archive/p/word2vec/

NESim(Si, Sj) =
|NE(Si) ∩NE(Sj)|

min(|NE(Si)|, |NE(Sj)|)

Sim(Si, Sj) = λ ·NESim(Si, Sj) +
(1− λ) · CosSim(Si, Sj) (1)

The overall similarity calculation involves both
CosSim(Si, Sj) and NESim(Si, Sj) where,
0 ≤ λ ≤ 1 decides the relative contributions of
them to the overall similarity computation. This
standalone similarity function will be used in this
work with different λ values to accomplish differ-
ent tasks.

3.3 Sentence Ranking

In this section, we rank the sentences by applying
TextRank algorithm (Mihalcea and Tarau, 2004)
which involves constructing an undirected graph
where sentences are vertices, and weighted edges
are formed connecting sentences by a similarity
metric. TextRank determines the similarity based
on the lexical overlap between two sentences.
However, this algorithm has a serious drawback:
If two sentences are talking about the same topic
without using any overlapped words, there will be
no edge between them. Instead, we use the con-
tinuous skip-gram model introduced by (Mikolov
et al., 2013) to measure the semantic similarity
along with the entity overlap. We use the similar-
ity function described in Equation (1) by setting
λ = 0.3.

After we have our graph, we can run the main
algorithm on it. This involves initializing a score
of 1 for each vertex, and repeatedly applying the
TextRank update rule until convergence. The up-
date rule is:

Rank(Si) = (1− d) + d ∗∑
Sj∈N(Si)

Sim(Si, Sj)∑
Sk∈N(Sj) Sim(Sj , Sk)

Rank(Sj)

Where, Rank(Si) indicates the importance
score assigned to sentence Si. N(Si) is the set
of neighboring sentences of Si, and 0 ≤ d ≤ 1 is
a dampening factor, which the literature suggests
its setting to 0.85. After reaching convergence, we
extract the sentences along with TextRank scores.

52



3.4 Sentence Clustering

The sentence clustering step allows us to group
similar sentences. We use a hierarchical agglom-
erative clustering (Murtagh and Legendre, 2014)
with a complete linkage criteria. This method pro-
ceeds incrementally, starting with each sentence
considered as a cluster, and merging the pair of
similar clusters after each step using bottom up ap-
proach. The complete linkage criteria determines
the metric used for the merge strategy. In com-
puting the clusters, we use the similarity function
described in Equation (1) with λ = 0.4. We set
a similarity threshold (τ = 0.5) to stop the clus-
tering process. If we cannot find any cluster pair
with a similarity above the threshold, the process
stops, and the clusters are released. The clusters
may be small, but are highly coherent as each sen-
tence they contain must be similar to every other
sentence in the same cluster.

This sentence clustering step is very important
due to two main reasons, (1) Selecting at most
one sentence from each cluster of related sen-
tences will decrease redundancy from the sum-
mary side (2) Selecting sentences from the diverse
set of clusters will increase the information cover-
age from the document side as well.

3.5 Sentence Selection

In this work, we use the concept-based ILP frame-
work introduced in (Gillick and Favre, 2009) with
some suitable changes to select the best subset of
sentences. This approach aims to extract sentences
that cover as many important concepts as possi-
ble, while ensuring the summary length is within
a given budgeted constraint. Unlike (Gillick and
Favre, 2009) which uses bigrams as concepts, we
use keyphrases as concepts. Keyphrases are the
words or phrases that represent the main topics of
a document. Sentences containing the most rel-
evant keyphrases are important for the summary
generation. We extracted the keyphrases from
the document cluster using RAKE3 (Rose et al.,
2010). We assign a weight to each keyphrase us-
ing the score returned by RAKE.

Let wi be the weight of keyphrase i and ki
a binary variable that indicates the presence of
keyphrase i in the extracted sentences. Let lj be
the number of words in sentence j, sj a binary
variable that indicates the presence of sentence j
in the extracted sentence set and L the length limit

3https://github.com/aneesha/RAKE

for the set. Let Occij indicate the occurrence of
keyphrase i in sentence j, the ILP formulation is,

Maximize : (
∑

i

wiki+
∑

j

Rank(Sj)·sj) (2)

Subject to :
∑

j

ljsj ≤ L (3)

sjOccij ≤ ki, ∀i, j (4)
∑

j

sjOccij ≥ ki, ∀i (5)

∑
j∈gc

sj ≤ 1, ∀gc (6)

ki ∈ {0, 1} ∀i (7)

sj ∈ {0, 1} ∀j (8)
We try to maximize the weight of the

keyphrases (2) in the extracted sentences, while
avoiding repetition of those keyphrases (4, 5) and
staying under the maximum number of words al-
lowed for the sentence extraction (3).

In addition to (Gillick and Favre, 2009), we put
some extra features like maximizing the sentence
rank scores returned from the sentence ranking
section. In order to ensure only one sentence per
cluster in the extracted sentences we add an ex-
tra constraint (6). In this process, we extract the
optimal combination of sentences that maximize
informativity while minimizing redundancy (Fig-
ure 1 illustrates our sentence extraction process in
brief).

4 Sentence Ordering

Classic reordering approaches include inferring
order from weighted sentence graph (Barzilay
et al., 2002), or perform a chronological ordering
algorithm (Cohen et al., 1999) that sorts sentences
based on timestamp and position.

We here propose a simple greedy approach to
sentence ordering in multi-document settings. Our
assumption is that a good sentence order implies
the similarity between all adjacent sentences since
word repetition (more specifically, named entity
repetition) is one of the formal sign of text coher-
ence (Barzilay et al., 2002). We define coherence
of document D which consists of sentences from

53



System Models R-1 R-2 R-SU4 Coherence

Baseline LexRank 35.95 7.47 12.48 0.39GreedyKL 37.98 8.53 13.25 0.46

State-of-the-art Submodular 39.18 9.35 14.22 0.51ICSISumm 38.41 9.78 13.31 0.44
Proposed System ILPRankSumm 39.45 10.12 14.09 0.68

Table 1: Results on DUC 2004 (Task-2) for the baseline, state-of-the-art and our system.

Figure 1: Sentence Extraction Process

S1 to Sn in the following equation. For calculat-
ing Sim(Si , Si+1), we use the similarity function
described in equation (1) with λ = 0.5, giving the
named entities a little more preference.

Coherence(D) =
∑n−1

i=1 Sim(Si , Si+1)
n− 1

We propose a greedy algorithm for placing a
sentence in a document based on the coherence
score we discussed above4. At the beginning, we
randomly select a sentence from the extracted sen-
tences without any position information and place
the sentence in the ordered set D. We then incre-
mentally add each extracted sentences to the doc-
ument set D using Algorithm (1) to get the final
order of summary sentences.

4Note that, we didn’t take any position information of the
original sentences to be extracted from the document.

Algorithm 1: Place a sentence to a document
Procedure SentencePositioning(D, Sn)

Data: Input document D which is assumed sorted.
New sentence Sn which we will place in the
document D.

Result: Return new document Dn after placing the
sentence Sn.

t← 1;
Cohmax ← 0 ;
Dtmp ← D ;
l← DocLength(D) ;
while t ≤ l + 1 do
⇒Place the Sn in tth position of Dtmp ;
Cohtmp ← Coherence(Dtmp);
if Cohtmp > Cohmax then

Dn ← Dtmp;
Cohmax ← Cohtmp;
⇒ Remove Sn from the tth position of

the document Dtmp ;
end
t← t + 1;

end
return Dn;

5 Evaluation

We evaluate our system ILPRankSumm (ILP
based sentence selection with TextRank for Ex-
tractive Summarization) using ROUGE5 (Lin,
2004) on DUC 2004 (Task-2, Length limit(L) =
100 words). However, ROUGE scores are biased
towards lexical overlap at surface level and insen-
sitive to summary coherence. Moreover, sophis-
ticated coherence evaluation metrics are seldom
adopted for summarization thus many of the previ-
ous systems used human evaluation for measuring
readability. For this reason, we evaluate our sum-
mary coherence using (Lapata and Barzilay, 2005)
(Barzilay and Lapata, 2008) which defines coher-
ence probabilities for an ordered set of sentences.

5.1 Baseline Systems

We compare our system with baseline (LexRank,
GreedyKL) and state of the art systems (Submod-
ular, ICSISumm). LexRank(Erkan and Radev,
2004) represents input texts as graph where nodes

5ROUGE-1.5.5 with options: -n 2 -m -u -c 95 -x -r 1000
-f A -p 0.5 -t 0

54



are the sentences and the edges are formed be-
tween two sentences if the cosine similarity is
above a certain threshold. Sentence importance
is calculated by running the PageRank algorithm
on the graph. GreedyKL (Haghighi and Vander-
wende, 2009) iteratively selects the next sentence
for the summary that will minimize the KL diver-
gence between the estimated word distributions.
(Lin and Bilmes, 2011) treat the document sum-
marization problem as maximizing a Submod-
ular function under a budget constraint. They
achieved a near-optimal information coverage and
non-redundancy using a modified greedy algo-
rithm. On the other hand, ICSISumm (Gillick and
Favre, 2009) employs a global linear optimization
framework, finding the globally optimal summary
rather than choosing sentences according to their
importance in a greedy fashion.

The summaries generated by the baselines and
the state-of-the-art extractive summarizers on the
DUC 2004 dataset were collected from (Hong
et al., 2014).

5.2 Results
Our results include R-1, R-2, and R-SU4, which
counts matches in unigrams, bigrams, and skip-
bigrams respectively. The skip-bigrams allow four
words in between. According to Table 1, R-1, R-
2 scores obtained by our system outperform all
the baselines and state of the art systems on DUC
2004 datasets. One of the main reasons of get-
ting the improved R-1 and R-2 score is the use
of keyphrases. Moreover, there is no significant
difference between our proposed system and sub-
modular in case of R-SU4. We also get better co-
herence probability because of our sentence order-
ing technique. The system’s output for a randomly
selected document set (e.g. d30015t) from DUC
2004 is shown in Table 2.

5.3 Limitations
One of the essential properties of the text summa-
rization systems is the ability to generate a sum-
mary with a fixed length (DUC 2004, Task-2:
Length limit = 100 words). According to (Hong
et al., 2014) all the summarizer from the previous
research either truncated the summary to 100th

word, or removed the last sentence from the sum-
mary set. In this paper, we follow the second one
to produce grammatical summary. However, the
first one produces a certain ungrammatical sen-
tence, later one can lose a lot of information in

Summary Generated (After Sentence Extraction)
But U.S. special envoy Richard Holbrooke said the
situation in the southern Serbian province was as bad
now as two weeks ago. A Western diplomat said up to
120 Yugoslav army armored vehicles, including tanks,
have been pulled out. On Sunday,Milosevic met with
Russian Foreign Minister Igor Ivanov and Defense
Minister Igor Sergeyev, Serbian President Milan
Milutinovic and Yugoslavia’s top defense officials.
To avoid such an attack, Yugoslavia must end the
hostilities, withdraw army and security forces, take
urgent measures to overcome the humanitarian crisis,
ensure that refugees can return home and take part
in peace talks, he said.

Summary Generated (After Sentence Ordering)
On Sunday, Milosevic met with Russian Foreign
Minister Igor Ivanov and Defense Minister Igor
Sergeyev, Serbian President Milan Milutinovic and
Yugoslavia’s top defense officials. But U.S. special
envoy Richard Holbrooke said the situation in the
southern Serbian province was as bad now as two
weeks ago. A Western diplomat said up to 120
Yugoslav army armored vehicles, including tanks,
have been pulled out. To avoid such an attack,
Yugoslavia must end the hostilities, withdraw army
and security forces, take urgent measures to
overcome the humanitarian crisis, ensure that
refugees can return home and take part in peace talks,
he said.

Table 2: System’s output (100 words) for the doc-
ument set d30015t from DUC 2004.

the worst case, if the sentences are long. We more
focus on the grammaticality of the final summary.

6 Conclusion and Future Work

In this work, we implemented an ILP based sen-
tence selection along with TextRank scores and
key phrases for extractive multi-document sum-
marization. We further model the coherence to in-
crease the readability of the generated summary.
Evaluation results strongly indicate the benefits of
using continuous word vector representations in
all the steps involved in the overall system. In fu-
ture, we will focus on jointly extracting the sen-
tences to maximize informativity and readability
while minimizing redundancy using the same ILP
model. Moreover, we will also try to propose a
solution for the length limit problem.

Acknowledgments

We would like to thank the anonymous review-
ers for their useful comments. The research re-
ported in this paper was conducted at the Uni-
versity of Lethbridge and supported by the Nat-
ural Sciences and Engineering Research Council
(NSERC) of Canada discovery grant and the Uni-
versity of Lethbridge.

55



References
Regina Barzilay, Noemie Elhadad, and Kathleen R.

McKeown. 2002. Inferring strategies for sentence
ordering in multidocument news summarization. J.
Artif. Int. Res. 17(1):35–55.

Regina Barzilay and Mirella Lapata. 2008. Modeling
local coherence: An entity-based approach. Com-
put. Linguist. 34(1):1–34.

Jianpeng Cheng and Mirella Lapata. 2016. Neural
summarization by extracting sentences and words.
In Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers). Association for Computational Lin-
guistics, Berlin, Germany, pages 484–494.

William W. Cohen, Robert E. Schapire, and Yoram
Singer. 1999. Learning to order things. J. Artif. Int.
Res. 10(1):243–270.

Günes Erkan and Dragomir R. Radev. 2004. Lexrank:
Graph-based lexical centrality as salience in text
summarization. J. Artif. Int. Res. 22(1):457–479.

Dan Gillick and Benoit Favre. 2009. A scalable global
model for summarization. In Proceedings of the
Workshop on Integer Linear Programming for Natu-
ral Langauge Processing. Association for Computa-
tional Linguistics, Stroudsburg, PA, USA, ILP ’09,
pages 10–18.

Aria Haghighi and Lucy Vanderwende. 2009. Explor-
ing content models for multi-document summariza-
tion. In Proceedings of Human Language Tech-
nologies: The 2009 Annual Conference of the North
American Chapter of the Association for Compu-
tational Linguistics. Association for Computational
Linguistics, Stroudsburg, PA, USA, NAACL ’09,
pages 362–370.

Kai Hong, John Conroy, Benoit Favre, Alex Kulesza,
Hui Lin, and Ani Nenkova. 2014. A repository of
state of the art and competitive baseline summaries
for generic news summarization. In Proceedings of
the Ninth International Conference on Language Re-
sources and Evaluation (LREC’14). European Lan-
guage Resources Association (ELRA), Reykjavik,
Iceland, pages 1608–1616. ACL Anthology Iden-
tifier: L14-1070.

Kai Hong and Ani Nenkova. 2014. Improving the
estimation of word importance for news multi-
document summarization. In Proceedings of the
14th Conference of the European Chapter of the
Association for Computational Linguistics. Associ-
ation for Computational Linguistics, Gothenburg,
Sweden, pages 712–721.

Mirella Lapata and Regina Barzilay. 2005. Auto-
matic evaluation of text coherence: Models and rep-
resentations. In Proceedings of the 19th Interna-
tional Joint Conference on Artificial Intelligence.
Morgan Kaufmann Publishers Inc., San Francisco,
CA, USA, IJCAI’05, pages 1085–1090.

Chin-Yew Lin. 2004. Rouge: A package for auto-
matic evaluation of summaries. In Stan Szpakowicz
Marie-Francine Moens, editor, Text Summarization
Branches Out: Proceedings of the ACL-04 Work-
shop. Association for Computational Linguistics,
Barcelona, Spain, pages 74–81.

Hui Lin and Jeff Bilmes. 2011. A class of submodular
functions for document summarization. In Proceed-
ings of the 49th Annual Meeting of the Association
for Computational Linguistics: Human Language
Technologies - Volume 1. Association for Computa-
tional Linguistics, Stroudsburg, PA, USA, HLT ’11,
pages 510–520.

Rada Mihalcea and Paul Tarau. 2004. Textrank: Bring-
ing order into texts. In Dekang Lin and Dekai Wu,
editors, Proceedings of EMNLP 2004. Association
for Computational Linguistics, Barcelona, Spain,
pages 404–411.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg Cor-
rado, and Jeffrey Dean. 2013. Distributed represen-
tations of words and phrases and their composition-
ality. In Proceedings of the 26th International Con-
ference on Neural Information Processing Systems.
Curran Associates Inc., USA, NIPS’13, pages 3111–
3119.

Fionn Murtagh and Pierre Legendre. 2014. Ward’s hi-
erarchical agglomerative clustering method: Which
algorithms implement ward’s criterion? J. Classif.
31(3):274–295.

Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017.
Summarunner: A recurrent neural network based se-
quence model for extractive summarization of doc-
uments. In Proceedings of the Thirty-First AAAI
Conference on Artificial Intelligence, February 4-9,
2017, San Francisco, California, USA.. pages 3075–
3081.

Daraksha Parveen, Hans-Martin Ramsl, and Michael
Strube. 2015. Topical coherence for graph-based ex-
tractive summarization. In Proceedings of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing. Association for Computational
Linguistics, Lisbon, Portugal, pages 1949–1954.

Daraksha Parveen and Michael Strube. 2015. Integrat-
ing importance, non-redundancy and coherence in
graph-based extractive summarization. In Proceed-
ings of the 24th International Conference on Ar-
tificial Intelligence. AAAI Press, IJCAI’15, pages
1298–1304.

Stuart Rose, Dave Engel, Nick Cramer, and Wendy
Cowley. 2010. Automatic keyword extraction from
individual documents. Text Mining pages 1–20.

Xun Wang, Masaaki Nishino, Tsutomu Hirao, Kat-
suhito Sudoh, and Masaaki Nagata. 2016. Exploring
text links for coherent multi-document summariza-
tion. In Proceedings of COLING 2016, the 26th In-
ternational Conference on Computational Linguis-
tics: Technical Papers. The COLING 2016 Organiz-
ing Committee, Osaka, Japan, pages 213–223.

56


