



















































A Neural Network for Coordination Boundary Prediction


Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 23–32,
Austin, Texas, November 1-5, 2016. c©2016 Association for Computational Linguistics

A Neural Network for Coordination Boundary Prediction

Jessica Ficler
Computer Science Department

Bar-Ilan University
Israel

jessica.ficler@gmail.com

Yoav Goldberg
Computer Science Department

Bar-Ilan University
Israel

yoav.goldberg@gmail.com

Abstract

We propose a neural-network based model for
coordination boundary prediction. The net-
work is designed to incorporate two signals:
the similarity between conjuncts and the ob-
servation that replacing the whole coordina-
tion phrase with a conjunct tends to produce
a coherent sentences. The modeling makes
use of several LSTM networks. The model
is trained solely on conjunction annotations in
a Treebank, without using external resources.
We show improvements on predicting coor-
dination boundaries on the PTB compared to
two state-of-the-art parsers; as well as im-
provement over previous coordination bound-
ary prediction systems on the Genia corpus.

1 Introduction

Coordination is a common syntactic phenomena, ap-
pearing in 38.8% of the sentences in the Penn Tree-
bank (PTB) (Marcus et al., 1993), and in 60.71%
of the sentences in the Genia Treebank (Ohta et al.,
2002). However, predicting the correct conjuncts
span remain one of the biggest challenges for state-
of-the-art syntactic parsers. Both the Berkeley and
Zpar phrase-structure parsers (Petrov et al., 2006;
Zhang and Clark, 2011) achieve F1 scores of around
69% when evaluated on their ability to recover coor-
dination boundaries on the PTB test set. For exam-
ple, in:

“He has the government’s blessing to [build churches]
and [spread Unificationism] in that country.”

the conjuncts are incorrectly predicted by both
parsers:

Berkeley: “He has the government’s blessing to [build
churches] and [spread Unificationism in that country].”
Zpar: “He [has the government’s blessing to build
churches] and [spread Unificationism in that country].”

In this work we focus on coordination boundary
prediction, and suggest a specialized model for this
task. We treat it as a ranking task, and learn a scor-
ing function over conjuncts candidates such that the
correct candidate pair is scored above all other can-
didates. The scoring model is a neural network with
two LSTM-based components, each modeling a dif-
ferent linguistic principle: (1) conjuncts tend to be
similar (“symmetry”); and (2) replacing the coor-
dination phrase with each of the conjuncts usually
result in a coherent sentence (“replacement”). The
symmetry component takes into account the con-
juncts’ syntactic structures, allowing to capture sim-
ilarities that occur in different levels of the syntac-
tic structure. The replacement component considers
the coherence of the sequence that is produced when
connecting the participant parts. Both of these sig-
nals are syntactic in nature, and are learned solely
based on information in the Penn Treebank. Our
model substantially outperforms both the Berkeley
and Zpar parsers on the coordination prediction task,
while using the exact same training corpus. Seman-
tic signals (which are likely to be based on resources
external to the treebank) are also relevant for coor-
dination disambiguation (Kawahara and Kurohashi,
2008; Hogan, 2007) and provide complementary in-
formation. We plan to incorporate such signals in
future work.

23



2 Background

Coordination is a very common syntactic construc-
tion in which several sentential elements (called con-
juncts) are linked. For example, in:

“The Jon Bon Jovi Soul Foundation [was founded in
2006] and1 [exists to combat issues that force (fam-
ilies) and2 (individuals) into economic despair].”

The coordinator and1 links the conjuncts surrounded
with square brackets and the coordinator and2 links
the conjuncts surrounded with round brackets.

Coordination between NPs and between VPs are
the most common, but other grammatical functions
can also be coordinated: “[relatively active]ADJP
but [unfocused]ADJP” ; “[in]IN and [out]IN the
market”. While coordination mostly occurs be-
tween elements with the same syntactic category,
cross-category conjunctions are also possible: (“Al-
ice will visit Earth [tomorrow]NP or [in the next
decade]PP”). Less common coordinations involve
non-constituent elements “[equal to] or [higher
than]”, argument clusters (“Alice visited [4 plan-
ets] [in 2014] and [3 more] [since then]”), and gap-
ping (“[Bob lives on Earth] and [Alice on Saturn]”)
(Dowty, 1988).

2.1 Symmetry between conjuncts

Coordinated conjuncts tend to be semantically re-
lated and have a similar syntactic structure. For ex-
ample, in (a) and (b) the conjuncts include similar
words (China/Asia, marks/yen) and have identical
syntactic structures.

PP

PP

IN

for

NP

NNP

China

CC

and

PP

IN

for

NP

NNP

Asia

(a)

NP

NP

CD

1.8690

NNS

marks

CC

and

NP

CD

139.75

NNS

yen

(b)

Symmetry holds also in larger conjuncts, such as in:

(c)

NP

NP

NN

income

PP

IN

of

NP

NP

QP

429.9 billion

NNS

rubles

PRN

(US$ 693.4)

CC

and

NP

VBZ

expenditures

PP

IN

of

NP

NP

QP

489.9 billion

NNS

rubles

PRN

(US$ 790.2)

Similarity between conjuncts was used as a guiding
principle in previous work on coordination disam-
biguation (Hogan, 2007; Shimbo and Hara, 2007;
Hara et al., 2009).

2.2 Replaceability

Replacing a conjunct with the whole coordination
phrase usually produce a coherent sentence (Hud-
dleston et al., 2002). For example, in “Ethan has
developed [new products] and [a new strategy]”,
replacement results in: “Ethan has developed new
products”; and “Ethan has developed a new strat-
egy”, both valid sentences. Conjuncts replace-
ment holds also for conjuncts of different syntac-
tic types, e.g.: “inactivation of tumor-suppressor
genes, [alone] or [in combination], appears crucial
to the development of such scourges as cancer.”.

While both symmetry and replacebility are strong
characteristics of coordination, neither principle
holds universally. Coordination between syntacti-
cally dissimilar conjuncts is possible (“tomorrow
and for the entirety of the next decade”), and the
replacement principle fails in cases of ellipsis, gap-
ping and others (“The bank employs [8,000 people
in Spain] and [2,000 abroad]”).

2.3 Coordination in the PTB

Coordination annotation in the Penn Treebank (Mar-
cus et al., 1993) is inconsistent (Hogan, 2007) and
lacks internal structure for NPs with nominal mod-
ifiers (Bies et al., 1995). In addition, conjuncts in
the PTB are not explicitly marked. These deficien-
cies led previous works on coordination disambigua-
tion (Shimbo and Hara, 2007; Hara et al., 2009;
Hanamoto et al., 2012) to use the Genia treebank
of biomedical text (Ohta et al., 2002) which explic-
itly marks coordination phrases. However, using the
Genia corpus is not ideal since it is in a specialized

24



domain and much smaller than the PTB. In this work
we rely on a version of the PTB released by Ficler
and Goldberg (2016) in which the above deficiencies
are manually resolved. In particular, coordinating
elements, coordination phrases and conjunct bound-
aries are explicitly marked with specialized function
labels.

2.4 Neural Networks and Notation
We use w1:n to indicate a list of vectors
w1, w2, . . . wn and wn:1 to indicate the reversed list.
We use ◦ for vector concatenation. When a discrete
symbol w is used as a neural network’s input, the
corresponding embedding vector is assumed.

A multi-layer perceptron (MLP) is a non linear
classifier. In this work we take MLP to mean a
classifier with a single hidden layer: MLP (x) =
V · g(Wx + b) where x is the network’s input, g
is an activation function such as ReLU or Sigmoid,
and W , V and b are trainable parameters. Recurrent
Neural Networks (RNNs) (Elman, 1990) allow the
representation of arbitrary sized sequences. In this
work we use LSTMs (Hochreiter and Schmidhuber,
1997), a variant of RNN that was proven effective in
many NLP tasks. LSTM(w1:n) is the outcome vec-
tor resulting from feeding the sequence w1:n into the
LSTM in order. A bi-directional LSTM (biLSTM)
takes into account both the past w1:i and the future
wi:n when representing the element in position i:

biLSTM(w1:n, i) = LSTMF (w1:i) ◦ LSTMB(wn:i)

where LSTMF reads the sequence in its regular or-
der and LSTMB reads it in reverse.

3 Task Definition and Architecture

Given a coordination word in a sentence, the coor-
dination prediction task aims to returns the two con-
juncts that are connected by it, or NONE if the word
does not function as a coordinating conjunction of a
relevant type.1 Figure 1 provides an example.

Our system works in three phases: first, we deter-
mine if the coordinating word is indeed part of a con-
junction of a desired type. We then extract a ranked
list of candidate conjuncts, where a candidate is a

1We consider and, or, but, nor as coordination words. In
case of more than two coordinated elements (conjuncts), we fo-
cus on the two conjuncts which are closest to the coordinator.

Sentence:
And1 the city decided to treat its guests more
like royalty or2 rock stars than factory owners.
Expected output:
and1: NONE
or2: (11-11) royalty ; (12-13) rock stars
Sentence:
The president is expected to visit Minnesota, New
York and1 North Dakota by the end of the year.
Expected output:
and1: (9-10) New York ; (12-13) North Dakota

Figure 1: The coordination prediction task.

pair of spans of the form ((i, j), (l,m)). The can-
didates are then scored and the highest scoring pair
is returned. Section 4 describes the scoring model,
which is the main contribution of this work. The
coordination classification and candidate extraction
components are described in Section 5.

4 Candidate Conjunctions Scoring

Our scoring model takes into account two signals,
symmetry between conjuncts and the possibility of
replacing the whole coordination phrase with its par-
ticipating conjuncts.

4.1 The Symmetry Component
As noted in Section 2.1, many conjuncts spans have
similar syntactic structure. However, while the sim-
ilarity is clear to human readers, it is often not easy
to formally define, such as in:

“about/IN half/NN its/PRP$ revenue/NN
and/CC

more/JJR than/IN half/NN its/PRP$ profit/NN”
If we could score the amount of similarity be-

tween two spans, we could use that to identify cor-
rect coordination structures. However, we do not
know the similarity function. We approach this by
training the similarity function in a data-dependent
manner. Specifically, we train an encoder that en-
codes spans into vectors such that vectors of similar
spans will have a small Euclidean distance between
them. This architecture is similar to Siamese Net-
works, which are used for learning similarity func-
tions in vision tasks (Chopra et al., 2005).

25



VP

VB

cut

NP

PRP$

their

NNS

risks

VP

VB

take

NP

NNS

profits

R

VP

VB

cut

cut
V

B
V

P R

L

VP

R

NP

PRP$

their

their
PR

P$
N

P R
V

P L

VP

L

NP

NNS

risks

risks
N

N
S

N
P L

V
P

R

VP

VB

take

take
V

B
V

P R

L

VP

NP

NNS

profits
profits
N

N
S

N
P

V
P L

Euclidean Distance

Figure 2: Illustration of the symmetry scoring component that takes into account the conjuncts syntactic structures. Each conjunct
tree is decomposed into paths that are fed into the path-LSTMs (squares). The resulting vectors are fed into the symmetry LSTM
function (circles). The outcome vectors (blue circles) are then fed into the euclidean distance function.

Given two spans of lengths k and m with cor-
responding vector sequences u1:k and v1:m we en-
code each sequences using an LSTM, and take the
euclidean distance between the resulting representa-
tions:

Sym(u1:k, v1:m) = ||LSTM(u1:k)− LSTM(v1:m)||

The network is trained such that the distance is min-
imized for compatible spans and large for incompat-
ible ones in order to learn that vectors that represent
correct conjuncts are closer than vectors that do not
represent conjuncts.

What are the elements in the sequences to be com-
pared? One choice is to take the vectors ui to cor-
respond to embeddings of the ith POS in the span.
This approach works reasonably well, but does not
consider the conjuncts’ syntactic structure, which
may be useful as symmetry often occurs on a higher
level than POS tags. For example, in:

NP

NP

NN

tomorrow

PP

IN

at

CD

16:00

CC

or

NP

NP

NP

the day

PP

after tomorrow

PP

IN

at

CD

12:00

the similarity is more substantial in the third level of
the tree than in the POS level.

A way to allow the model access to higher levels
of syntactic symmetry is to represent each word as
the projection of the grammatical functions from the
word to the root.2 For example, the projections for
the first conjunct in Figure 2 are:

2Similar in spirit to the spines used in Carreras et al. (2008)
and Shen et al. (2003).

VP

VB

cut

VP

NP

PRP$

their

VP

NP

NNS

risks

This decomposition captures the syntactic context
of each word, but does not uniquely determine the
structure of the tree. To remedy this, we add to
the paths special symbols, R and L, which marks
the lowest common ancestors with the right and left
words respectively. These are added to the path
above the corresponding nodes. For example con-
sider the following paths which corresponds to the
above syntactic structure:

R

VP

VB

cut

L

VP

R

NP

PRP$

their

VP

L

NP

NNS

risks

The lowest common ancestor of “their” and “risks”
is NP. Thus, R is added after NP in the path of
“their” and L is added after NP in the path of
“risks”. Similarly, L and R are added after the VP
in the “their” and “cut” paths.

The path for each word is encoded using an
LSTM receiving vector embeddings of the elements
in the path from the word to the root. We then use the
resulting encodings instead of the POS-tag embed-
dings as input to the LSTMs in the similarity func-
tion. Figure 2 depicts the complete process for the
spans “cut their risks” and “take profits”.

Using syntactic projections requires the syntactic
structures of the conjuncts. This is obtained by run-
ning the Berkeley parser over the sentence and tak-
ing the subtree with the highest probability from the

26



Sentence:

Rudolph Agnew, [55 years old] and [former chairman of CGF PLC] ,was named a nonexecutive director.
wi−1 wi wj wk wl wm wm+1

︸ ︷︷ ︸ ︸ ︷︷ ︸ ︸ ︷︷ ︸ ︸ ︷︷ ︸
Pre Conj1 Conj2 Post

Expansions:

Rudolph Agnew, 55 years old ,was named a nonexecutive director.
Rudolph Agnew, former chairman of CGF PLC ,was named a nonexecutive director.

Figure 3: The correct conjuncts spans of the coordinator and in the sentence and the outcome expansions.

corresponding cell in the CKY chart.3 In both ap-
proaches, the POS embeddings are initialized with
vectors that are pre-trained by running word2vec
(Mikolov et al., 2013) on the POS sequences in PTB
training set.

4.2 The Replacement Component

The replacement component is based on the obser-
vation that, in many cases, the coordination phrase
can be replaced with either one of its conjuncts while
still preserving a grammatical and semantically co-
herent sentence (Section 2.2)

When attempting such a replacement on incorrect
conjuncts, the resulting sentence is likely to be either
syntactically or semantically incorrect. For exam-
ple, in the following erroneous analysis: “Rudolph
Agnew, [55 years old] and [former chairman] of
Consolidated Gold Fields PLC” replacing the con-
junction with the first conjunct results in the se-
mantically incoherent sequence “Rudolph Agnew,
55 years old of Consolidated Golden Fields, PLC”.4

Our goal is to distinguish replacements resulting
from correct conjuncts from those resulting from er-
roneous ones. To this end, we focus on the connec-
tion points. A connection point in a resulting sen-
tence is the point where the sentence splits into two
sequences that were not connected in the original
sentence. For example, consider the sentence in Fig-
ure 3. It has four parts, marked as Pre, Conj1, Conj2
and Post. Replacing the coordination phrase Conj1
and Conj2 with Conj2 results in a connection point

3The parser’s CKY chart did not include a tree for 10% of
the candidate spans, which have inside probability 0 and outside
probability > 0. For those, we obtained the syntactic structure
by running the parser on the span words only.

4While uncommon, incorrect conjuncts may also result in
valid sentences, e.g. “He paid $ 7 for cold [drinks] and [pizza]
that just came out of the oven.”

between Pre and Conj2. Likewise, replacing the co-
ordination phrase with Conj1 results in connection
point between Conj1 and Post.

In order to model the validity of the connection
points, we represent each connection point as the
concatenation of a forward and reverse LSTMs cen-
tered around that point. Specifically, for the spans in
Figure 3 the two connection points are represented
as:
LSTMF (Rudolph,...,old)◦LSTMB(director,...,was,,)
and
LSTMF (Rudolph,Agnew,,)◦LSTMB(director,...,former)

Formally, assuming wordsw1:n in a sentence with
coordination at position k and conjuncts wi:j and
wl:m,5 the connection points are between w1:j and
wm+1:n; and between w1:i−1 and wl:n. The two
connection points representations are then concate-
nated, resulting in a replacement vector:

REPL(w1:n, i, j, l,m) =

CONPOINT(w1:n, i− 1, l) ◦ CONPOINT(w1:n, j,m+ 1)

where:

CONPOINT(w1:n, i, j) =

LSTMF (w1:i) ◦ LSTMB(wn:j)

We use two variants of the replacement vectors,
corresponding to two levels of representation. The
first variant is based on the sentence’s words, while
the second is based on its POS-tags.

4.3 Parser based Features
In addition to the symmetry and replacement sig-
nals, we also incorporate some scores that are de-
rived from the Berkeley parser. As detailed in Sec-
tion 5, a list of conjuncts candidates are extracted

5Usually j = k − 1 and l = k + 1, but in some cases
punctuation symbols may interfere.

27



from the CKY chart of the parser. The candidates
are then sorted in descending order according to the
multiplication of inside and outside scores of the
candidate’s spans:6 I(i,j) ×O(i,j) × I(l,m) ×O(l,m).
Each candidate {(i, j), (l,m)} is assigned two nu-
merical features based on this ranking: its position in
the ranking, and the ratio between its score and the
score of the adjacent higher-ranked candidate. We
add an additional binary feature indicating whether
the candidate spans are in the 1-best tree predicted
by the parser. These three features are denoted as
Feats(i, j, l,m).

4.4 Final Scoring and Training

Finally, the score of a candidate {(i, j), (l,m)} in a
sentence with words w1:n and POS tags p1:n is com-
puted as:

SCORE(w1:n, p1:n, {(i, j), (l,m)}) =
MLP (

Sym(vPathi:j , v
Path
l:m )

◦Repl(w1:n, i, j, l,m)
◦Repl(p1:n, i, j, l,m)
◦ Feats(i, j, l,m) )

where vPathi:j and v
Path
l:m are the vectors resulting from

the path LSTMs, and Sym, Repl and Feats are the
networks defined in Sections 4.1 – 4.3 above. The
network is trained jointly, attempting to minimize a
pairwise ranking loss function, where the loss for
each training case is given by:

loss = max(0, 1− (ŷ − yg))
where ŷ is the highest scoring candidate and yg is
the correct candidate. The model is trained on all
the coordination cases in Section 2–21 in the PTB.

5 Candidates Extraction and Supporting
Classifiers

Candidates Extraction We extract candidate
spans based on the inside-outside probabilities as-
signed by the Berkeley parser. Specifically, to obtain

6Inside-Outside probabilities (Goodman, 1998) represent
the probability of a span with a given non-terminal symbol.
The inside probability I(N,i,j) is the probability of generating
words wi, wi+1, ..., wj given that the root is the non-terminal
N . The outside probability O(N,i,j) is the probability of gen-
erating words w1, w2, ..., wi−1, the non-terminal N and the
words wj+1, wj+2, ..., wn with the root S.

candidates for conjunct span we collect spans that
are marked with COORD, are adjacent to the coor-
dinating word, and have non-zero inside or outside
probabilities. We then take as candidates all possi-
ble pairs of collected spans. On the PTB dev set,
this method produces 6.25 candidates for each co-
ordinating word on average and includes the correct
candidates for 94% of the coordinations.

Coordination Classification We decide whether a
coordination word wk in a sentence w1:n functions
as a coordinator by feeding the biLSTM vector cen-
tered around wk into a logistic classifier:

σ(v · biLSTM(w1:n, k) + b).
The training examples are all the coordination words
(marked with CC) in the PTB training set. The
model achieves 99.46 F1 on development set and
99.19 F1 on test set.

NP coordinations amount to about half of the
coordination cases in the PTB, and previous work
is often evaluated specifically on NP coordination.
When evaluating on NP coordination, we depart
from the unrealistic scenario used in most previous
work where the type of coordination is assumed to
be known a-priori, and train a specialized model for
predicting the coordination type. For a coordination
candidate {(i, j), (l,m)} with a coordinator wk, we
predict if it is NP coordination or not by feeding
a logistic classifier with a biLSTM vector centered
around the coordinator and constrained to the candi-
date spans:

σ(v · biLSTM(wi:m, k) + b).
The training examples are coordinations in the PTB
training set, where where a coordinator is consid-
ered of type NP if its head is labeled with NP or
NX. Evaluating on gold coordinations results in F1
scores of 95.06 (dev) and 93.89 (test).

6 Experiments

We evaluate our models on their ability to identify
conjunction boundaries in the extended Penn Tree-
bank (Ficler and Goldberg, 2016) and Genia Tree-
bank (Ohta et al., 2002)7.

When evaluating on the PTB, we compare to the
conjunction boundary predictions of the generative

7http://www-tsujii.is.s.u-tokyo.ac.jp/GENIA

28



Dev Test
P R F P R F

Berkeley 70.14 70.72 70.42 68.52 69.33 68.92
Zpar 72.21 72.72 72.46 68.24 69.42 68.82
Ours 72.34 72.25 72.29 72.81 72.61 72.7

Table 1: Coordination prediction on PTB (All coordinations).

Dev Test
P R F P R F

Berkeley 67.53 70.93 69.18 69.51 72.61 71.02
Zpar 69.14 72.31 70.68 69.81 72.92 71.33
Ours 75.17 74.82 74.99 76.91 75.31 76.1

Table 2: Coordination prediction on PTB (NP coordinations).

Berkeley parser (Petrov et al., 2006) and the discrim-
inative Zpar parser (Zhang and Clark, 2011). When
evaluating on the Genia treebank, we compare to the
results of the discriminative coordination-prediction
model of Hara et al. (2009).8

6.1 Evaluation on PTB

Baseline Our baseline is the performance of the
Berkeley and Zpar parsers on the task presented in
Section 3, namely: for a given coordinating word,
determine the two spans that are being conjoined
by it, and return NONE if the coordinator is not
conjoining spans or conjoins spans that are not of
the expected type. We convert predicted trees to
conjunction predictions by taking the two phrases
that are immediately adjacent to the coordinator
on both sides (ignoring phrases that contain solely
punctuation). For example, in the following Zpar-
predicted parse tree the conjunct prediction is (“Feb.
8, 1990”,“May 10, 1990”).

NP

NP

Feb. 8, 1990

CC

and

NP

May 10, 1990

,

,

ADJP

respectively

Cases in which the coordination word is the left-
most or right-most non-punctuation element in its
phrase (e.g. (PRN (P -)(CC and)(S it’s
been painful)(P -))) are considered as no-
coordination (“None”).

8Another relevant model in the literature is (Hanamoto et al.,
2012), however the results are not directly comparable as they
use a slightly different definition of conjuncts, and evaluate on
a subset of the Genia treebank, containing only trees that were
properly converted to an HPSG formalism.

We consider two setups. In the first we are inter-
ested in all occurrences of coordination, and in the
second we focus on NP coordination. The second
scenario requires typed coordinations. We take the
type of a parser-predicted coordination to be the type
of the phrase immediately dominating the coordina-
tion word.
Evaluation Metrics We measure precision and re-
call compared to the gold-annotated coordination
spans in the extended PTB, where an example
is considered correct if both conjunct boundaries
match exactly. When focusing on NPs coordina-
tions, the type of the phrase above the CC level must
match as well, and phrases of type NP/NX are con-
sidered as NP coordination.
Results Tables (1) and (2) summarize the results.
The Berkeley and Zpar parsers perform similarly
on the coordination prediction task. Our proposed
model outperforms both parsers, with a test-set F1
score of 72.7 (3.78 F1 points gain over the better
parser) when considering all coordinations, and test-
set F1 score of 76.1 (4.77 F1 points gain) when con-
sidering NP coordination.

6.2 Evaluation on Genia

To compare our model to previous work, we evalu-
ate also on the Genia treebank (Beta), a collection
of constituency trees for 4529 sentences from Med-
line abstracts. The Genia treebank coordination an-
notation explicitly marks coordination phrases with
a special function label (COOD), making the cor-
pus an appealing resource for previous work on co-
ordination boundary prediction (Shimbo and Hara,
2007; Hara et al., 2009; Hanamoto et al., 2012).
Following Hara et al. (2009), we evaluate the mod-
els’ ability to predict the span of the entire coordi-
nation phrase, disregarding the individual conjuncts.
For example, in “My plan is to visit Seychelles, ko
Samui and Sardinia by the end of the year” the goal
is to recover “Seychelles, ko Samui and Sardinia”.
This is a recall measure. We follow the exact proto-
col of Hara et al. (2009) and train and evaluate the
model on 3598 coordination phrases in Genia Tree-
bank Beta and report the micro-averaged results of
a five-fold cross validation run.9 As shown by Hara

9We thank Kazuo Hara for providing us with the exact de-
tails of their splits.

29



Sym
Correct: Retail sales volume was [down 0.5% from the previous three months] and [up 1.2% from a year earlier].
Incorrect: Everyone was concerned about the [general narrowness of the rally] and [failure of the OTC market] to get into plus territory.

Repw
Correct: The newsletter said [she is 44 years old] and [she studied at the University of Puerto Rico School of Medicine].
Incorrect: But Robert Showalter said no special [bulletins] or [emergency meetings of the investors’ clubs] are planned .

Repp
Correct: [On the Big Board floor] and [on trading desks], traders yelped their approval.
Incorrect: It suddenly burst upward 7.5 as Goldman, Sachs & Co. [stepped in] and [bought almost] every share offer, traders said.

Figure 4: Correct in incorrect predictions by the individual components.

COOD # Our Model Hara et al.
Overall 3598 64.14 61.5

NP 2317 65.08 64.2
VP 465 71.82 54.2

ADJP 321 74.76 80.4
S 188 17.02 22.9

PP 167 56.28 59.9
UCP 60 51.66 36.7

SBAR 56 91.07 51.8
ADVP 21 80.95 85.7
Others 3 33.33 66.7

Table 3: Recall on the Beta version of Genia corpus. Numbers
for Hara et al. are taken from their paper.

et al. (2009), syntactic parsers do not perform well
on the Genia treebank. Thus, in our symmetry com-
ponent we opted to not rely on predicted tree struc-
tures, and instead use the simpler option of repre-
senting each conjunct by its sequence of POS tags.
To handle coordination phrases with more than two
conjuncts, we extract candidates which includes up
to 7 spans and integrate the first and the last span
in the model features. Like Hara et al., we use gold
POS.
Results Table 3 summarizes the results. Our pro-
posed model achieves Recall score of 64.14 (2.64
Recall points gain over Hara et al.) and significantly
improves the score of several coordination types.

6.3 Technical Details

The neural networks (candidate scoring model and
supporting classifiers) are implemented using the
pyCNN package.10.

In the supporting models we use words embed-
ding of size 50 and the Sigmoid activation function.
The LSTMs have a dimension of 50 as well. The
models are trained using SGD for 10 iterations over
the train-set, where samples are randomly shuffled
before each iteration. We choose the model with the
highest F1 score on the development set.

All the LSTMs in the candidate scoring model
have a dimension of 50. The input vectors for the

10https://github.com/clab/cnn/tree/master/pycnn

All types NPs
P R F P R F

Sym 67.13 67.06 67.09 69.69 72.08 70.86
Repp 69.26 69.18 69.21 69.73 71.16 70.43
Repw 56.97 56.9 56.93 59.78 64.3 61.95
Feats 70.92 70.83 70.87 72.23 73.22 72.72
Joint 72.34 72.25 72.29 75.17 74.82 74.99

Table 4: Performance of the individual components on PTB
section 22 (dev). Sym: Symmetry. Repp: POS replace-
ment. Repw: Word replacement. Feats: features extracted from
Berkeley parser. Joint: the complete model.

symmetry LSTM is of size 50 as well. The MLP
in the candidate scoring model uses the Relu acti-
vation function, and the model is trained using the
Adam optimizer. The words and POS embeddings
are shared between the symmetry and replacment
components. The syntactic label embeddings are for
the path-encoding LSTM, We perform grid search
with 5 different seeds and the following: [1] MLP
hidden layer size (100, 200, 400); [2] input embed-
dings size for words, POS and syntactic labels (100,
300). We train for 20 iterations over the train set,
randomly shuffling the examples before each itera-
tion. We choose the model that achieves the highest
F1 score on the dev set.

7 Analysis

Our model combines four signals: symmetry, word-
level replacement, POS-level replacement and fea-
tures from Berkeley parser. Table 4 shows the PTB
dev-set performance of each sub-model in isolation.
On their own, each of the components’ signals is
relatively weak, seldom outperforming the parsers.
However, they provide complementary information,
as evident by the strong performance of the joint
model. Figure 4 lists correct and incorrect predic-
tions by each of the components, indicating that the
individual models are indeed capturing the patterns
they were designed to capture – though these pat-
terns do not always lead to correct predictions.

30



8 Related Work

The similarity property between conjuncts was ex-
plored in several previous works on coordination
disambiguation. Hogan (2007) incorporated this
principle in a generative parsing model by changing
the generative process of coordinated NPs to condi-
tion on properties of the first conjunct when gener-
ating the second one. Shimbo and Hara (2007) pro-
posed a discriminative sequence alignment model to
detect similar conjuncts. They focused on disam-
biguation of non-nested coordination based on the
learned edit distance between two conjuncts. Their
work was extended by Hara et al. (2009) to han-
dle nested coordinations as well. The discrimina-
tive edit distance model in these works is similar in
spirit to our symmetry component, but is restricted
to sequences of POS-tags, and makes use of a se-
quence alignment algorithm. We compare our re-
sults to Hara et al.’s in Section 6.2. Hanamoto et al.
(2012) extended the previous method with dual de-
composition and HPSG parsing. In contrast to these
symmetry-directed efforts, Kawahara et al. (2008)
focuses on the dependency relations that surround
the conjuncts. This kind of semantic information
provides an additional signal which is complemen-
tary to the syntactic signals explored in our work.
Our neural-network based model easily supports in-
corporation of additional signals, and we plan to ex-
plore such semantic signals in future work.

9 Conclusions

We presented an neural-network based model for re-
solving conjuncts boundaries. Our model is based
on the observation that (a) conjuncts tend to be sim-
ilar and (b) that replacing the coordination phrase
with a conjunct results in a coherent sentence. Our
models rely on syntactic information and do not
incorporate resources external to the training tree-
banks, yet improve over state-of-the-art parsers on
the coordination boundary prediction task.

Acknowledgments

This work was supported by The Israeli Science
Foundation (grant number 1555/15) as well as
the German Research Foundation via the German-
Israeli Project Cooperation (DIP, grant DA 1600/1-
1).

References

Ann Bies, Mark Ferguson, Karen Katz, Robert Mac-
Intyre, Victoria Tredinnick, Grace Kim, Mary Ann
Marcinkiewicz, and Britta Schasberger. 1995. Brack-
eting guidelines for treebank ii style penn treebank
project. University of Pennsylvania, 97:100.

Xavier Carreras, Michael Collins, and Terry Koo. 2008.
Tag, dynamic programming, and the perceptron for
efficient, feature-rich parsing. In Proceedings of the
Twelfth Conference on Computational Natural Lan-
guage Learning, pages 9–16. Association for Compu-
tational Linguistics.

Sumit Chopra, Raia Hadsell, and Yann LeCun. 2005.
Learning a similarity metric discriminatively, with ap-
plication to face verification. In Computer Vision and
Pattern Recognition, 2005. CVPR 2005. IEEE Com-
puter Society Conference on, volume 1, pages 539–
546. IEEE.

David Dowty. 1988. Type raising, functional compo-
sition, and non-constituent conjunction. In Catego-
rial grammars and natural language structures, pages
153–197. Springer.

Jeffrey L Elman. 1990. Finding structure in time. Cog-
nitive science, 14(2):179–211.

Jessica Ficler and Yoav Goldberg. 2016. Coordination
annotation extension in the penn tree bank. Associa-
tion for Computational Linguistics.

Joshua Goodman. 1998. Parsing inside-out. arXiv
preprint cmp-lg/9805007.

Atsushi Hanamoto, Takuya Matsuzaki, and Jun’ichi Tsu-
jii. 2012. Coordination structure analysis using dual
decomposition. In Proceedings of the 13th Conference
of the European Chapter of the Association for Com-
putational Linguistics, pages 430–438. Association for
Computational Linguistics.

Kazuo Hara, Masashi Shimbo, Hideharu Okuma, and
Yuji Matsumoto. 2009. Coordinate structure analysis
with global structural constraints and alignment-based
local features. In Proceedings of the Joint Conference
of the 47th Annual Meeting of the ACL and the 4th
International Joint Conference on Natural Language
Processing of the AFNLP: Volume 2-Volume 2, pages
967–975. Association for Computational Linguistics.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long
short-term memory. Neural computation, 9(8):1735–
1780.

Deirdre Hogan. 2007. Coordinate noun phrase disam-
biguation in a generative parsing model. Association
for Computational Linguistics.

Rodney Huddleston, Geoffrey K Pullum, et al. 2002.
The cambridge grammar of english. Language. Cam-
bridge: Cambridge University Press, page 1275.

31



Daisuke Kawahara and Sadao Kurohashi. 2008. Coor-
dination disambiguation without any similarities. In
Proceedings of the 22nd International Conference on
Computational Linguistics-Volume 1, pages 425–432.
Association for Computational Linguistics.

Mitchell P Marcus, Mary Ann Marcinkiewicz, and Beat-
rice Santorini. 1993. Building a large annotated cor-
pus of english: The penn treebank. Computational lin-
guistics, 19(2):313–330.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey
Dean. 2013. Efficient estimation of word representa-
tions in vector space. arXiv preprint arXiv:1301.3781.

Tomoko Ohta, Yuka Tateisi, and Jin-Dong Kim. 2002.
The genia corpus: An annotated research abstract cor-
pus in molecular biology domain. In Proceedings of
the second international conference on Human Lan-
guage Technology Research, pages 82–86. Morgan
Kaufmann Publishers Inc.

Slav Petrov, Leon Barrett, Romain Thibaux, and Dan
Klein. 2006. Learning accurate, compact, and inter-
pretable tree annotation. In Proceedings of the 21st
International Conference on Computational Linguis-
tics and the 44th annual meeting of the Association for
Computational Linguistics, pages 433–440. Associa-
tion for Computational Linguistics.

Libin Shen, Anoop Sarkar, and Aravind K Joshi. 2003.
Using ltag based features in parse reranking. In Pro-
ceedings of the 2003 conference on Empirical methods
in natural language processing, pages 89–96. Associ-
ation for Computational Linguistics.

Masashi Shimbo and Kazuo Hara. 2007. A discrimi-
native learning model for coordinate conjunctions. In
EMNLP-CoNLL, pages 610–619.

Yue Zhang and Stephen Clark. 2011. Syntactic process-
ing using the generalized perceptron and beam search.
Computational linguistics, 37(1):105–151.

32


