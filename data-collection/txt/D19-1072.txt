



















































Latent Part-of-Speech Sequences for Neural Machine Translation


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 780–790,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

780

Latent Part-of-Speech Sequences for Neural Machine Translation

Xuewen Yang1, Yingru Liu1, Dongliang Xie2, Xin Wang1, and Niranjan Balasubramanian1,3

1Stony Brook University
2Beijing University of Posts and Telecommunications

1{xuewen.yang,yingru.liu,x.wang}@stonybrook.edu
2xiedl@bupt.edu.cn

3niranjan@cs.stonybrook.edu

Abstract

Learning target side syntactic structure has
been shown to improve Neural Machine Trans-
lation (NMT). However, incorporating syntax
through latent variables introduces additional
complexity in inference, as the models need
to marginalize over the latent syntactic struc-
tures. To avoid this, models often resort to
greedy search which only allows them to ex-
plore a limited portion of the latent space.

In this work, we introduce a new latent vari-
able model, LaSyn, that captures the co-
dependence between syntax and semantics,
while allowing for effective and efficient in-
ference over the latent space. LaSyn decou-
ples direct dependence between successive la-
tent variables, which allows its decoder to ex-
haustively search through the latent syntactic
choices, while keeping decoding speed pro-
portional to the size of the latent variable vo-
cabulary. We implement LaSyn by modifying
a transformer-based NMT system and design
a neural expectation maximization algorithm
that we regularize with part-of-speech infor-
mation as the latent sequences. Evaluations
on four different MT tasks show that incorpo-
rating target side syntax with LaSyn improves
both translation quality, and also provides an
opportunity to improve diversity.

1 Introduction

Syntactic information has been shown to im-
prove the translation quality in NMT models. On
the source side, syntax can be incorporated in
multiple ways — either directly during encod-
ing (Chen et al., 2018; Sennrich and Haddow,
2016; Eriguchi et al., 2016), or indirectly via
multi-task learning to produce syntax informed
representations (Eriguchi et al., 2017; Baniata
et al., 2018; Niehues and Cho, 2017; Zaremoodi
et al., 2018). On the target side, however, incor-
porating the syntax is more challenging due to the

additional complexity in inference when decoding
over latent states. To avoid this, existing meth-
ods resort to approximate inference over the latent
states using a two-step decoding process (Gū et al.,
2018; Wang et al., 2018a; Wu et al., 2017; Aha-
roni and Goldberg, 2017). Typically, the first stage
decoder produces a beam of latent states, which
serve as conditions to feed into the second stage
decoder to obtain the target words. Thus, training
and inference in these models can only explore a
limited sub-space of the latent states.

In this work, we introduce LaSyn, a new tar-
get side syntax model that allows exhaustive ex-
ploration of the latent states to ensure a better
translation quality. Similar to prior work, LaSyn
approximates the co-dependence between syntax
and semantics of the target sentences by model-
ing the joint conditional probability of the target
words and the syntactic information at each po-
sition. However, unlike prior work, LaSyn elim-
inates the sequential dependence between the la-
tent variables and simply infers the syntactic in-
formation at a given position based on the source
text and the partial translation context. This allows
LaSyn to search over a much larger set of latent
state sequences. In terms of time complexity, un-
like typical latent sequential models, LaSyn only
introduces an additional term that is linear in the
size of latent variable vocabulary and the length of
the sentence.

We implement LaSyn by modifying a
transformer-based encoder-decoder model.
The implementation uses a hybrid decoder
that predicts two posterior distributions: the
probability of syntactic choices at each posi-
tion P (zn|x,y<n), and the probability of the
word choices at each position conditioned on
each of the possible values for the latent states
P (yn|zn,x,y<n). The model cannot be trained
by directly optimizing the data log-likelihood



781

because of its non-convex property. We devise
a neural expectation maximization (NEM) al-
gorithm, whose E-step computes the posterior
distribution of latent states under current model
parameters, and M-step updates model parameters
using gradients from back-propagation. Given
some supervision signal for the latent variables,
we can modify this EM algorithm to obtain a
regularized training procedure. We use parts-
of-speech (POS) tag sequences, automatically
generated by an existing tagger, as the source of
supervision.

Because the decoder is exposed to more latent
states during training, it is more likely to gener-
ate diverse translation candidates. To obtain di-
verse sequences, we can decode the most likely
translations for different POS tag sequences. This
is a more explicit and effective way of perform-
ing diverse translation than other methods based
on diverse or re-ranking beam search (Vijayaku-
mar et al., 2018; Li and Jurafsky, 2016), or coarse
codes planning (Shu and Nakayama, 2018).

We evaluate LaSyn on four translation tasks.
Evaluations show that LaSyn outperforms models
that only use partial exploration of the latent states
for incorporating target side syntax. A diversity
based evaluation also shows that when using dif-
ferent POS tag sequences during inference, LaSyn
produces more diverse and meaningful transla-
tions compared to existing models.

2 A Latent Syntax Model for Decoding

In a standard sequence-to-sequence model, the de-
coder directly predicts the target sequence y con-
ditioned on the source input x. The translation
probability P (y|x) is modeled directly using the
probability of each target word yn at time step n
conditioned on the source sequence x and the cur-
rent partial target sequence y<n as follows:

P (y|x;θ) =
N∏

n=1

P (yn|x,y<n;θ) (1)

where, θ denotes the parameters of both the en-
coder and the decoder.

In this work, we model syntactic information
of target tokens using an additional sequence of
variables, which captures the syntactic choices1 at

1The variables can be used to model any linguistic infor-
mation that can be expressed as choices for each word posi-
tion (e.g., morphological choices).

(a) Full co-dependence model.

(b) Two-step decoding model.

(c) LaSyn: Our Latent syntax model

Figure 1: Target-side Syntax Models: (a) An ideal so-
lution that captures full co-dependence between syn-
tax and semantics. (b) A widely-used two-step decod-
ing model (Wang et al., 2018a; Wu et al., 2017; Aha-
roni and Goldberg, 2017). (c) LaSyn, our latent syntax
model that uses non-sequential latent variables for ex-
haustive search of latent states.

each time step. There are multiple ways of incor-
porating this additional information in a sequence-
to-sequence model.

An ideal solution should capture the co-
dependence between syntax and semantics. In a
sequential translation process, the word choices at
each time step depend on both the semantics and
the syntax of the words generated at the previous
time steps. The same dependence also holds for
the syntactic choices at each time step. Figure 1a
shows a graphical model that captures this full
co-dependence between the syntactic variable se-
quence z1, . . . , zN and the output word sequence
y1, . . . ,yN . Such a model can be implemented
using two decoders, one to decode syntax and the
other to decode output words. The main diffi-
culty, however, is that inference in this model is
intractable since it involves marginalizing over the
latent z sequences.

To keep inference tractable, existing approaches
treat syntactic choices z as observed sequential
variables (Gū et al., 2018; Wang et al., 2018a;
Wu et al., 2017; Aharoni and Goldberg, 2017), as
shown in Figure 1b. These models use a two-stage
decoding process, where for each time step they



782

first produce most likely latent state zn and then
use this as input to a second stage that decodes
words. However, this process is unsatisfactory
in two respects. First, the inference of syntactic
choices is still approximate as it does not explore
the full space of z. Second, these models are not
well-suited for controllable or diverse translations.
Using such a model to decode from an arbitrary z
sequence is a divergence from its training, where
it only learns to decode from a limited space of z
sequences.

2.1 Model Description

Our goal is to design a model that allows for ex-
haustive search over syntactic choices. We intro-
duce LaSyn, a new latent model shown in Fig-
ure 1c. The syntactic choices are modeled as true
latent variables i.e., unobserved variables. Com-
pared to the ideal model in Figure 1a, LaSyn in-
cludes two simplifications for tractability: (i) The
dependence between successive syntactic choices
is modeled indirectly, via the word choices made
in the previous time steps. (ii) The word choice at
each position depends only on the syntactic choice
at the current position and the previous predicted
words. Dependence on previous syntactic choices
is modeled indirectly.

Under this model, the joint conditional proba-
bility of the target word yn together with its corre-
sponding latent syntactic choice zn2 is given by:

P (yn, zn|x,y<n) = P (yn|zn,x,y<n)
× P (zn|x,y<n)

(2)

We implement LaSyn by modifying the
Transformer-based encoder-decoder architec-
ture (Vaswani et al., 2017). As shown in Figure 2,
LaSyn consists of a shared encoder for encoding
source sentence x and a hybrid decoder that
manages the decoding of the latent sequence
z (left branch) and the target sentence y (right
branch) separately.

The encoder consists of the standard self-
attention layer, which generates representations of
each token in the source sentence x. The hybrid
decoder consists of a self-attention layer that en-
codes the output generated thus far (i.e., the par-
tial translation), followed by a inter-attention layer

2Note that zn ∈ Vz, where Vz is the vocabulary of la-
tent syntax for the target, which differs from language to lan-
guage.

Figure 2: The architecture of LaSyn.

which computes the attention across the encoder
and decoder representations.

The decoder’s left branch predicts the latent
variable distribution P (zn|x,y<n) by applying a
simple linear transformation and softmax on the
inter-attention output, which contains information
about the encoded input x and the partial transla-
tion y<n.

The right branch predicts the target word distri-
bution P (yn|zn,x,y<n) using the inter-attention
output and the embeddings of all the available
choices for zn. The choices for zn are represented
as embeddings that can be learned during train-
ing. We then combine the inter-attention output
and the latent choice embeddings through an Add
operation, which is a simple composition function
that captures all combinations of additive interac-
tions between the two. The dimension of the inter-
attention is n × dmodel and that of the latent em-
beddings is |Vz| × dmodel, where |Vz| is the to-
tal number of choices for zn or the size of the la-
tent variable vocabulary. We broadcast them to the
same dimension n × |Vz| × dmodel and then sim-
ply add them together point-wise as shown in Fig-
ure 2. This is then fed to a linear transform and
softmax over the target word vocabulary.

2.2 Inference with Exhaustive Search for
Latent States

When using additional variables to model target
side syntax, exact inference requires marginalizing
over these additional variables.

P (y|x) =
∑

z∈F (z)

P (y|z,x)P (z|x) (3)

To avoid this exponential complexity, prior
works use a two-step decoding process with mod-
els similar to the one shown in Figure 1b. They use
greedy or beam search to explore a subset B(z) of



783

the latent space to compute the posterior distribu-
tion as follows:

P (y|x) '
∑

z∈B(z)

P (y|z,x)P (z|x) (4)

Finding the most likely translation using LaSyn
also requires marginalizing over the latent states.
However, because the latent states in LaSyn don’t
directly depend on each other, we can exhaustively
search over the latent states. In particular, we can
show that when y is fixed (observed), the {zn}Nn=1
variables are d-separated (Bishop, 2006) i.e., are
mutually independent. As a result, the time com-
plexity for searching latent sequence z drops from
|Vz|N to N |Vz|.

The posterior distribution for the translation
probability at a time step n can be computed as
follows:

P (yn|x,y<n)

=
∑

zn∈F (zn)

P (yn, zn|x,y<n)

=
∑

zn∈F (zn)

P (yn|zn,x,y<n)× P (zn|x,y<n)

(5)
where, F (zn) is the full search space of latent
states zn and the joint probability is factorized as
specified in Equation 2.

For decoding words, we use standard beam
search3 with P (yn, zn|x,y<n) as the beam cost.
With this inference scheme, we can easily con-
trol decoding for diversity, by feeding differ-
ent z sequences to the right branch of the de-
coder and decode diverse yn by directly using
P (yn|zn,x,y<n) as the beam cost. Unlike the
two-step decoding models which only evaluate a
small number of zn values at each time step (con-
strained by beam size), LaSyn evaluates all possi-
ble values for zn at each time step, while avoiding
the evaluation of all possible sequences.

2.3 Training with Neural Expectation
Maximization

The log-likelihood of LaSyn’s parameters θ4 com-
puted on one training pair 〈x,y〉 ∈ D is given by:

3Note our primary goal is to perform exhaustive search
in the latent space. Search in the target vocabulary space re-
mains exponential in our model.

4This includes the trainable parameters of the encoder, de-
coder, and the latent state embeddings.

L(θ) = logP (y|x;θ)

=

N∑
n=1

logP (yn|x,y<n;θ)

=

N∑
n=1

log
∑

zn∈Vz

P (yn, zn|x,y<n)

(6)

Directly optimizing the log-likelihood function
(equation 6) with respect to model parameter θ
is challenging because of the highly non-convex
function P (yn, zn|x,y<n) and the marginaliza-
tion over zn.5 Alternatively, we optimize the
system parameters by Expectation Maximization
(EM).

Using Jensen’s inequality, equation (6) can be
re-written as:

L(θ) =
N∑

n=1

log
∑

zn∈Vz

Q(zn)
P (yn, zn|x,y<n)

Q(zn)

≥
N∑

n=1

∑
zn∈Vz

Q(zn) log
P (yn, zn|x,y<n)

Q(zn)

=Llower(Q,θ)
(7)

where Llower(Q,θ) is the lower bound of the log-
likelihood and Q is any auxiliary probability dis-
tribution defined on zn. θ is omitted from the ex-
pression for simplicity.

We set Q(zn) = P (zn|x,y≤n;θold), the prob-
ability of the latent state computed by the decoder
(shown in the left branch in Figure 2). Substituting
this in equation (7), we obtain the lower bound as

Llower(Q,θ) =
N∑

n=1

∑
zn∈Vz

P (zn|x,y≤n;θold)× logP (yn, zn|x,y<n;θ)

− P (zn|x,y≤n;θold)× logP (zn|x,y≤n;θold)
= Q(θ,θold) + C

(8)

5Note that marginalization is an issue during training, un-
like in inference. As P (yn, zn) is already an non-convex
function with respect to θ, summing P (yn, zn) over different
values of zn makes the function more complicated. Besides,
we also need to compute gradients to update the parameters
and computing the gradient of a log-of-sum function is costly
and unstable. During the translation, we only need to com-
pute the value of L(θ) as score for beam searching. There-
fore, the marginalization is not an issue.



784

where

Q(θ,θold) =
N∑

n=1

∑
zn∈Vz

P (zn|x,y≤n;θold)

× logP (yn, zn|x,y<n;θ)

(9)

EM algorithm for optimizing Q(θ,θold) con-
sists of two major steps. In the E-step, we com-
pute the posterior distribution of zn with respect
to θold by

γ(zn = i) = P (zn = i|x,y≤n)

=
P (yn, zn = i|x,y<n)∑

zn=j
P (yn, zn = j|x,y<n)

(10)

where γ(zn = i) is the responsibility of zn = i
given yn, and can be calculated by equation (2).

In the M-step, we aim to find the configura-
tion of θ that would maximize the expected log-
likelihood using the posteriors computed in the E-
step. In conventional EM algorithm for shallow
probabilistic graphical model, the M-step is gener-
ally supposed to have closed-form solution. How-
ever, we model the probabilistic dependencies by
deep neural networks, where Q(θ,θold) is highly
non-convex and non-linear with respect to network
parameters θ. Therefore, there exists no analytical
solution to maximize it. However, since deep neu-
ral network is differentiable, we can update θ by
taking a gradient ascent step:

θnew = θold + η
∂Q(θ,θold)

∂θ
, (11)

The resulting algorithm belongs to the class of
generalized EM algorithms and is guaranteed (for
a sufficiently small learning rate η) to converge to
a (local) optimum of the data log likelihood (Wu,
1983).

2.4 Regularized EM training
The EM training we derived does not assume any
supervision for the latent variables z. This can
be seen as inferring the latent syntax of the tar-
get sentences by clustering the target side tokens
into |Vz| different categories. Given some token-
level syntactic information, we can modify the
training procedure to regularize the generation of
latent sequence P (zn|x,y<n) such that true la-
tent sequences have higher probabilities under the
model. In this work, we consider parts-of-speech

sequences of the target sentences for regulariza-
tion.

The regularized EM training objective is thus
redefined as

Ltotal(θ) = Llower(θ) + λLz(θ), (12)

where Llower(θ) is the EM lower bound in equa-
tion (7) and Lz(θ) denotes cross entropy loss be-
tween P (zn|x,y<n) and the true POS tag se-
quences and λ is a hyper-parameter that controls
the impact of the regularization.

This regularized training algorithm is shown in
Algorithm 1.

Algorithm 1 Training NMT with latent POS tag
sequences through Regularized Neural EM

Objective: Maximize the log likelihood function
Q(θ,θold) with respect to θ over observed variable y and
latent variable z, governed by parameters θ.
Input: Parallel corpus training data 〈x,y〉; POS tag se-
quence z of target sentence; the number of EM update
steps per batch K.
Initialize: Initialize random values for the parameters
θold.
while Training loss has not converged do

Select 〈x,y〉 ∈ D, parse z of y.
for k ← 1 to K do

1. E-step: Evaluate γ(zn = i) for i ≤ |Vz|.
2. M-step: Evaluate θnew given by equation (11).
3. Let θold ← θnew.

end for
end while

3 Evaluation

We evaluate LaSyn on four translation tasks, in-
cluding three with moderate sized datasets IWSLT
2014 (Cettolo et al., 2015) German-English (De-
En), English-German (En-De), English-French
(En-Fr), and one with a relatively larger dataset,
the WMT 2014 English-German (En-De). We de-
scribe the datasets in more details in the appendix.

We compare against three types of baselines:
(i) general Seq2Seq models that use no syntac-
tic information, (ii) models that incorporate source
side syntax directly, and multitask learning models
which include syntax indirectly, and (iii) models
that use syntax on the target side. We also define a
LaSyn Empirical Upper Bound (EUB), which is
our proposed model using true POS tag sequences
for inference.

We use BLEU as the evaluation metric (Pap-
ineni et al., 2002) for translation quality. For di-
verse translation evaluation, we utilize distinct-1
score (Li et al., 2016) as the evaluation metric,



785

which is the number of distinct unigrams divided
by total number of generated words.

For all translation tasks, we choose the base
configuration of Transformer with dmodel =
512. During training, we choose Adam opti-
mizer (Kingma and Ba, 2015) with β1 = 0.9, β2 =
0.98 with initial learning rate is 0.0002 with 4000
warm-up steps. We describe additional implemen-
tation and training details in the Appendix.

3.1 Results on IWSLT’14 Tasks

Table 1 compares LaSyn versions against some
of the state-of-the-art models on the IWSLT’14
dataset. LaSyn-K rows show results when vary-
ing the number of EM update steps per batch (K).

On the De-En task, LaSyn provides a 1.7
points improvements over the Transformer base-
line, demonstrating that the LaSyn’s improve-
ments come from incorporating target side syn-
tax effectively. This result is also better than a
transformer-based source side syntax model by 1.5
points. LaSyn results are also better than the pub-
lished numbers for LSTM-based models that use
multi-task learning for source side and models that
uses target side syntax. Note that since the under-
lying architectures are different, we only present
these results to show that the results with LaSyn
are comparable with other models that have incor-
porated syntax.

On the En-De task, our model achieves 29.2 in
terms of BLEU score, with 2.6 points improve-
ment over the Transformer baseline and 2.4 points
improvement over Transformer-based Source Side
Syntax model. Compared with NPMT (Huang
et al., 2018), which is a BiLSTM based model, we
achieve 3.84 point improvement.

On the En-Fr task, our model set a new state-of-
the-art with a BLEU score of 40.6, which is 1.7
points improvement over the second best model
which uses Transformer to incorporate source side
syntax knowledge. Our model also surpasses the
basic Transformer model by about 2.1 points.

We notice that across all tasks, the performance
of our model improves with number of EM update
steps per batch (K). With larger K values, we
get better lower bounds Llower(θ) on each train-
ing batch, thus leading to better optimization. For
update steps beyondK > 5, the performance does
not improve any more.

Last, the EUB row indicates the performance
that can be obtained when feeding in the true POS

tags. The large improvement here shows the po-
tential for improvement when modeling target side
syntax.

Table 2 shows one example where LaSyn pro-
duces correct translations for a long input sen-
tence. The output of LaSyn is close to the refer-
ence and the output of LaSyn when given the gold
POS tag sequence is even better, demonstrating
the benefits of modeling syntax. The transformer
model however fails to decode the later portions of
the long input accurately.

3.2 Speed

We compare the speeds of our (un-optimized) im-
plementation of LaSyn with a vanilla transformer
with no latents in its decoder. Table 3 shows the
training time per epoch, and the inference time for
the whole test set. computed on the IWSLT’14 De-
En task. When K = 1, LaSyn takes almost twice
as much time as the vanilla transformer for train-
ing. Increasing K increases training time further.
For inference, LaSyn takes close to four times as
much time compared to the vanilla Transformer.
In terms of complexity, LaSyn only adds a lin-
ear term (in POS tag size to the decoding com-
plexity. Specifically, its decoding complexity is
B ×O(m)×O(|Vz| ×N) where B is beam size,
m is a constant proportional to the tag set size and
N is output size. As the table shows, empirically,
our current implementation incurs m ' 4. We
leave further optimizations for future work.

3.3 Diversity

We compare the diversity of translations using
distinct-1 score (Li et al., 2016), which is simply
the number of distinct unigrams divided by total
number of generated words. We use our model to
generate 10 translations for each source sentence
of the test dataset. We then compare our results
with baseline Transformer. The result is shown in
Table 4. Much like translation quality, LaSyn’s di-
versity increases with number of EM updates and
is better than diversity of the transformer and a
source side encoder model.

3.3.1 Controlling Diversity with POS
Sequences

One of the main strengths of LaSyn is that it
can generate translations conditioned on a given
POS sequence. First, we present some examples
that we generate by decoding over different POS
tag sequences. Given a source sentence, we use



786

Method Type Model BLEUDe-En En-De En-Fr

BiLSTM

BiLSTM (Denkowski and Neubig, 2017) – – 34.8
Dual Learning (Wang et al., 2018b) 32.35 – –

AST (Cheng et al., 2018) – – 38.03
NPMT (Huang et al., 2018) – 25.36 –

Multi-Task (BiLSTM) MTL-NMT (Niehues and Cho, 2017) 27.78 – –

Source Side Syn. (Transformer) Source-NMT (Sennrich and Haddow, 2016) 33.5 26.8 38.9

Target Side Syn. (BiLSTM) DSP-NMT (Shu and Nakayama, 2018) 29.78 – –Tree-decoder (Wang et al., 2018a) 32.65 – –

Transformer

Transformer 33.3 26.6 38.5
LaSyn (Unsupervised) 30.8 25.2 34.5

LaSyn (K=1) 34.63 28.1 39.7
LaSyn (K=3) 34.91 28.9 40.4
LaSyn (K=5) 35.0 29.2 40.6
LaSyn EUB 51.4 47.3 54.2

Table 1: IWSLT’14 English-German and English-French results - shown are the BLEU scores of various
models on TED talks translation tasks. We highlight the best model in bold.

SRC letztes jahr habe ich diese beiden folien gezeigt , um zu veranschaulichen , dass die arktische eiskappe ,
die fr annhernd drei millionen jahre die grsse der unteren 48 staaten hatte , um 40 prozent geschrumpft
ist .

REF last year i showed these two slides so that demonstrate that the arctic ice cap , which for most of the last
three million years has been the size of the lower 48 states , has shrunk by 40 percent .

Transformer last year , i showed these two slides to illustrate that the arctic ice caps that had the size of the lower 48
million states to 40 percent .

LaSyn last year , i showed these two slides to illustrate that the arctic ice cap , which for nearly three million
years had the size of the lower 48 states , was shrunk by 40 percent .

LaSyn (groundtrue POS) last year i showed these two slides just to illustrate that the arctic ice cap , which for nearly about the
last three million years has been the size of the lower 48 states , has shrunk by 40 percent .

Table 2: Translation examples on IWSLT’14 De-En dataset from our model and the Transformer baseline. We put
correct translation segment in blue and highlight the wrong one in red.

Model Training Time/Epoch↓ Inference Time↓

Transformer 3.6 min 12.8 s
LaSyn (K=1) 6.3 min 56.1 s
LaSyn (K=3) 18.1 min 55.6 s
LaSyn (K=5) 28.0 min 55.6 s

Table 3: IWSLT’14 De-En training and inference
speed evaluation. ↓ means the smaller the better. We
highlight the best model in bold.

LaSyn to provide the most-likely target pos tag se-
quence. Then, we obtain a random set of valid
POS tag sequences that differ from this maximum
likely sequence by some edit distance. For each of
these randomly sampled POS tag sequences, we
let LaSyn generate a translation that fits the se-
quence. Table 5 shows some example sentences.
LaSyn is able to generate diverse translations that
reflect the sentence structure implied by the input
POS tags. However, in trying to fit the translation
into the specified sequence, it deviates somewhat

Model distinct-1De-En En-De En-Fr

Transformer 0.231 0.242 0.258
Source-NMT 0.232 0.244 0.260

LaSyn (Unsupervised) 0.228 0.231 0.239
LaSyn (K=1) 0.237 0.251 0.265
LaSyn (K=3) 0.241 0.253 0.270
LaSyn (K=5) 0.245 0.255 0.273
LaSyn EUB 0.328 0.516 0.354

Table 4: IWSLT’14 En-De/De-En/En-Fr diversity
translation evaluation. We highlight the best model
in bold.

from the ideal translation.

To understand how diversity plays against trans-
lation quality, we also conduct a small scale quan-
titative evaluation. We pick a subset of the test
dataset, and for each source sentence in this sub-
set, we sample 10 POS tag sequences whose edit
distance to their corresponding Top-1 POS tag se-
quence equal to a specific value, we then use them



787

Figure 3: Diversity vs. Translation Quality: BLEU
and distinct-1 scores for targets decoded using POS se-
quences of increasing edit distance.

SRC und natrlich auch , wie nimmt gestaltung einfluss auf
die wahrnehmung .

REF and of course how design affects perception .

0 cc in nn wrb nn vbz vbz nn .
and of course how design is affecting perception .

20 ls rb vb in dt nn vbz jj jj jj .
i also think that the design is affecting perception .

30 rb , dt nn nn dt nn in prp rb .
also , the way design adds influence in perception too
.

30 prp vbz in prp vb vbn rb in nn .
it turns out it included design impact on perception .

Table 5: Examples of translations decoded from
specified POS sequences with different edit distances
(shown as values in first column). SRC: source sen-
tence. REF: reference sentence.

to decode W translations. We calculate their final
BLEU and distinct-1 scores. The results are shown
in Figure: 3. As the edit distance increases, diver-
sity increases dramatically but at the cost of trans-
lation quality. Since the POS tag sequence acts as
a template for generation, as we move further from
the most likely template, the model struggles to fit
the content accurately. Understanding this trade-
off can be useful for re-ranking or other scoring
functions.

3.4 Results on WMT’14 En-De
To assess the impact on a larger dataset, we show
results on the WMT’14 English-German in ta-
ble 6. Compared to the previously reported sys-
tems, we see that our transformer implementation
is a strong baseline. LaSyn produces small gains,
with the best gain at K=5 – a BLEU score im-
provement of 0.6. This demonstrates that syntactic
information can contribute more to the increase of
translation quality on a smaller dataset.

4 Related Work

Attention-based Neural Machine Translation
(NMT) models have shown promising results in

Model BLEU

BiRNN+GCN (Bastings et al., 2017) 23.9
ConvS2S (Gehring et al., 2017) 25.16

MoE (Shazeer et al., 2017) 26.03
Transformer (base) 27.3
LaSyn (K=1) (base) 27.6
LaSyn (K=3) (base) 27.8
LaSyn (K=5) (base) 27.9

Table 6: WMT’14 English-German results - shown
are the BLEU scores of various models on TED talks
translation tasks. We highlight the best model in bold.

various large scale translation tasks (Bahdanau
et al., 2015; Luong et al., 2015; Sennrich et al.,
2016; Vaswani et al., 2017) using an Seq2Seq
structure. Many Statistical Machine Translation
(SMT) approaches have leveraged benefits from
modeling syntactic information (Chiang et al.,
2009; Huang and Knight, 2006; Shen et al.,
2008). Recent efforts have demonstrated that
incorporating syntax can also be useful in neural
methods as well.

One branch uses features on the source side to
help improve the translation performance (Sen-
nrich and Haddow, 2016; Morishita et al., 2018;
Eriguchi et al., 2016). Sennrich et al. (2016) ex-
plored linguistic features like lemmas, morpho-
logical features, POS tags and dependency labels
and concatenate their embeddings with sentence
features to improve the translation quality. In a
similar vein, Morishita et al. (2018) and Eriguchi
et al. (2016), incorporated hierarchical subword
features and phrase structure into the source side
representations. Despite the promising improve-
ments, these approaches are limited in that the
trained translation model requires the availabil-
ity of external tools during inference – the source
text needs to be processed first to extract syntactic
structure (Eriguchi et al., 2017).

Another branch uses multitask learning, where
the encoder of the NMT model is trained to pro-
duce multiple tasks such as POS tagging, named-
entity recognition, syntactic parsing or semantic
parsing (Eriguchi et al., 2017; Baniata et al., 2018;
Niehues and Cho, 2017; Zaremoodi et al., 2018).
These can be seen as models that implicitly gener-
ate syntax informed representations during encod-
ing. With careful model selection, these methods
have demonstrate some benefits in NMT.

The third branch directly models the syntax of



788

the target sentence during decoding (Gū et al.,
2018; Wang et al., 2018a; Wu et al., 2017; Aha-
roni and Goldberg, 2017; Bastings et al., 2017; Li
et al., 2018). Aharoni et al. (2017) treated con-
stituency trees as sequential strings and trained a
Seq2Seqmodel to translate source sentences into
these tree sequences. Wang et al. (2018a) and Wu
et al. (2017) proposed to use two RNNs, a Rule
RNN and a Word RNN, to generate a target sen-
tence and its corresponding tree structure. Gu et
al. (2018) proposed a model to translate and parse
at the same time. However, apart from the com-
plex tree structure to model, they all have a similar
architecture as shown in Figure 1b, which limits
them to only exploring a small portion of the syn-
tactic space during inference.

LaSyn uses simpler parts-of-speech information
in a latent syntax model, avoiding the typical expo-
nential search complexity in the latent space with a
linear search complexity and is optimized by EM.
This allows for better translation quality as well
as diversity. Similar to our work, (Shankar et al.,
2018) and (Shankar and Sarawagi, 2019) proposed
a latent attention mechanism to further reduce the
complexity of model implementation by taking a
top-K approximation instead of the EM algorithm
as in LaSyn.

5 Conclusion

Modeling target-side syntax through true latent
variables is difficult because of the additional
inference complexity. In this work, we pre-
sented LaSyn, a latent syntax model that allows
for efficient exploration of a large space of la-
tent sequences. This yields significant gains
on four translation tasks, IWSLT’14 English-
German, German-English, English-French and
WMT’14 English-German. The model also allows
for better decoding of diverse translation candi-
dates. This work only explored parts-of-speech se-
quences for syntax. Further extensions are needed
to tackle tree-structured syntax information.

6 Acknowledgements

This work is supported in part by the National Sci-
ence Foundation under Grants NSF CNS 1526843
and IIS 1815358. We thank Jiangbo Yuan, Wany-
ing Ding, Yang Liu, Guillaume Rabusseau and
Jeffrey Heinz for valuable discussions.

References
Roee Aharoni and Yoav Goldberg. 2017. Towards

string-to-tree neural machine translation. In Pro-
ceedings of the 55th Annual Meeting of the Associa-
tion for Computational Linguistics, pages 132–140.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In 3rd Inter-
national Conference on Learning Representations,
ICLR 2015.

Laith H. Baniata, Seyoung Park, and Seong-Bae Park.
2018. A multitask-based neural machine translation
model with part-of-speech tags integration for arabic
dialects. Applied Sciences, 8.

Joost Bastings, Ivan Titov, Wilker Aziz, Diego
Marcheggiani, and Khalil Simaan. 2017. Graph
convolutional encoders for syntax-aware neural ma-
chine translation. In Proceedings of the 2017 Con-
ference on Empirical Methods in Natural Language
Processing, pages 1957–1967.

Christopher M. Bishop. 2006. Pattern Recognition and
Machine Learning. Springer.

Mauro Cettolo, Jan Niehues, Sebastian Stüker, Luisa
Bentivogli, and Marcello Federico. 2015. Report on
the 11 th iwslt evaluation campaign , iwslt 2014. In
Proceedings of IWSLT 2014.

Kehai Chen, Rui Wang, Masao Utiyama, Eiichiro
Sumita, and Tiejun Zhao. 2018. Syntax-directed at-
tention for neural machine translation. In Proceed-
ings of the Thirty-Second AAAI Conference on Arti-
ficial Intelligence, pages 4792–4799.

Yong Cheng, Zhaopeng Tu, Fandong Meng, Junjie
Zhai, and Yang Liu. 2018. Towards robust neural
machine translation. In Proceedings of the 56th An-
nual Meeting of the Association for Computational
Linguistics, pages 1756–1766.

David Chiang, Kevin Knight, and Wei Wang. 2009.
11,001 new features for statistical machine trans-
lation. In Proceedings of Human Language Tech-
nologies: The 2009 Annual Conference of the North
American Chapter of the Association for Computa-
tional Linguistics, pages 218–226.

Michael Denkowski and Graham Neubig. 2017.
Stronger baselines for trustable results in neural ma-
chine translation. In Proceedings of the First Work-
shop on Neural Machine Translation, pages 18–27.

Akiko Eriguchi, Kazuma Hashimoto, and Yoshimasa
Tsuruoka. 2016. Tree-to-sequence attentional neu-
ral machine translation. In Proceedings of the 54th
Annual Meeting of the Association for Computa-
tional Linguistics, pages 823–833.

Akiko Eriguchi, Yoshimasa Tsuruoka, and Kyunghyun
Cho. 2017. Learning to parse and translate improves
neural machine translation. In Proceedings of the



789

55th Annual Meeting of the Association for Compu-
tational Linguistics, pages 72–78.

Jonas Gehring, Michael Auli, David Grangier, De-
nis Yarats, and Yann N. Dauphin. 2017. Convolu-
tional sequence to sequence learning. In Proceed-
ings of the 34th International Conference on Ma-
chine Learning, pages 1243–1252.

Jetic Gū, Hassan S. Shavarani, and Anoop Sarkar.
2018. Top-down tree structured decoding with syn-
tactic connections for neural machine translation and
parsing. In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Process-
ing, pages 401–413.

Bryant Huang and Kevin Knight. 2006. Relabeling
syntax trees to improve syntax-based machine trans-
lation quality. In Proceedings of the Human Lan-
guage Technology Conference of the NAACL, pages
240–247.

Po-Sen Huang, Chong Wang, Sitao Huang, Dengyong
Zhou, and Li Deng. 2018. Towards neural phrase-
based machine translation. In International Confer-
ence on Learning Representations.

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In ICLR.

Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao,
and Bill Dolan. 2016. A diversity-promoting objec-
tive function for neural conversation models. In Pro-
ceedings of the 2016 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
110–119.

Jiwei Li and Dan Jurafsky. 2016. Mutual information
and diverse decoding improve neural machine trans-
lation. CoRR, abs/1601.00372.

Xintong Li, Lemao Liu, Zhaopeng Tu, Shuming Shi,
and Max Meng. 2018. Target foresight based at-
tention for neural machine translation. In Proceed-
ings of the 2018 Conference of the North American
Chapter of the Association for Computational Lin-
guistics, pages 1380–1390.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natural
Language Processing, pages 1412–1421.

Makoto Morishita, Jun Suzuki, and Masaaki Nagata.
2018. Improving neural machine translation by in-
corporating hierarchical subword features. In COL-
ING, pages 618–629.

Jan Niehues and Eunah Cho. 2017. Exploiting linguis-
tic resources for neural machine translation using
multi-task learning. In Proceedings of the Second
Conference on Machine Translation.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of
40th Annual Meeting of the Association for Compu-
tational Linguistics, pages 311–318.

Rico Sennrich and Barry Haddow. 2016. Linguistic
input features improve neural machine translation.
In Proceedings of the First Conference on Machine
Translation.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Improving neural machine translation models
with monolingual data. In ACL 2016.

Shiv Shankar, Siddhant Garg, and Sunita Sarawagi.
2018. Surprisingly easy hard-attention for sequence
to sequence learning. In EMNLP.

Shiv Shankar and Sunita Sarawagi. 2019. Posterior at-
tention models for sequence to sequence learning.
In International Conference on Learning Represen-
tations.

Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz,
Andy Davis, Quoc Le, Geoffrey Hinton, and Jeff
Dean. 2017. Outrageously large neural networks:
The sparsely-gated mixture-of-experts layer. In
ICLR.

Libin Shen, Jinxi Xu, and Ralph Weischedel. 2008. A
new string-to-dependency machine translation algo-
rithm with a target dependency language model. In
Proceedings of ACL, pages 577–585.

Raphael Shu and Hideki Nakayama. 2018. Discrete
structural planning for neural machine translation.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Ł ukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 5998–6008.

Ashwin K. Vijayakumar, Michael Cogswell, Ram-
prasaath R. Selvaraju, Qing Sun, Stefan Lee,
David J. Crandall, and Dhruv Batra. 2018. Diverse
beam search for improved description of complex
scenes. In AAAI, pages 7371–7379.

Xinyi Wang, Hieu Pham, Pengcheng Yin, and Graham
Neubig. 2018a. A tree-based decoder for neural ma-
chine translation. In Proceedings of the 2018 Con-
ference on Empirical Methods in Natural Language
Processing, pages 4772–4777.

Yijun Wang, Yingce Xia, Li Zhao, Jiang Bian, Tao
Qin, GuiQuan liu, and Tie-Yan Liu. 2018b. Dual
transfer learning for neural machine translation with
marginal distribution regularization. In Proceedings
of the Thirty-Second AAAI Conference on Artificial
Intelligence.

CF Jeff Wu. 1983. On the convergence properties of
the EM algorithm. The Annals of statistics, pages
95–103.

http://arxiv.org/abs/1808.04525
http://arxiv.org/abs/1808.04525


790

Shuangzhi Wu, Dongdong Zhang, Nan Yang, Mu Li,
and Ming Zhou. 2017. Sequence-to-dependency
neural machine translation. In Proceedings of the
55th Annual Meeting of the Association for Compu-
tational Linguistics, pages 698–707.

Poorya Zaremoodi, Wray Buntine, and Gholamreza
Haffari. 2018. Adaptive knowledge sharing in
multi-task learning: Improving low-resource neural
machine translation. In Proceedings of the 56th An-
nual Meeting of the Association for Computational
Linguistics.


