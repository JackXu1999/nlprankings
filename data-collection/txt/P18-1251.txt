



















































Composing Finite State Transducers on GPUs


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 2697–2705
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

2697

Composing Finite State Transducers on GPUs

Arturo Argueta and David Chiang
Department of Computer Science and Engineering

University of Notre Dame
{aargueta,dchiang}@nd.edu

Abstract

Weighted finite state transducers (FSTs)
are frequently used in language process-
ing to handle tasks such as part-of-speech
tagging and speech recognition. There has
been previous work using multiple CPU
cores to accelerate finite state algorithms,
but limited attention has been given to par-
allel graphics processing unit (GPU) im-
plementations. In this paper, we introduce
the first (to our knowledge) GPU imple-
mentation of the FST composition oper-
ation, and we also discuss the optimiza-
tions used to achieve the best performance
on this architecture. We show that our ap-
proach obtains speedups of up to 6× over
our serial implementation and 4.5× over
OpenFST.

1 Introduction

Finite-state transducers (FSTs) and their algo-
rithms (Mohri, 2009) are widely used in speech
and language processing for problems such as
grapheme-to-phoneme conversion, morphological
analysis, part-of-speech tagging, chunking, named
entity recognition, and others (Mohri et al., 2002;
Mohri, 1997). Hidden Markov models (Baum
et al., 1970), conditional random fields (Lafferty
et al., 2001) and connectionist temporal classifica-
tion (Graves et al., 2006) can also be thought of as
finite-state transducers.

Composition is one of the most important oper-
ations on FSTs, because it allows complex FSTs to
be built up from many simpler building blocks, but
it is also one of the most expensive. Much work
has been done on speeding up composition on a
single CPU processor (Pereira and Riley, 1997;
Hori and Nakamura, 2005; Dixon et al., 2007; Al-
lauzen and Mohri, 2008; Allauzen et al., 2009;

Ladner and Fischer, 1980; Cheng et al., 2007).
Methods such as on-the-fly composition, shared
data structures, and composition filters have been
used to improve time and space efficiency.

There has also been some successful work
on speeding up composition using multiple CPU
cores (Jurish and Würzner, 2013; Mytkowicz
et al., 2014; Jung et al., 2017). This is a chal-
lenge because many of the algorithms used in
NLP do not parallelize in a straightforward way
and previous work using multi-core implementa-
tions do not handle the reduction of identical edges
generated during the composition. The problem
becomes more acute on the graphics processing
units (GPUs) architecture, which have thousands
of cores but limited memory available. Another
problem with the composition algorithm is that
techniques used on previous work (such as com-
position filters and methods to expand or gather
transitions using dictionaries or hash tables) do
not translate well to the GPU architecture given
the hardware limitations and communication over-
heads.

In this paper, we parallelize the FST compo-
sition task across multiple GPU cores. To our
knowledge, this is the first successful attempt to
do so. Our approach treats the composed FST as
a sparse graph and uses some techniques from the
work of Merrill et al. (2012); Jung et al. (2017)
to explore the graph and generate the composed
edges during the search. We obtain a speedup of
4.5× against OpenFST’s implementation and 6×
against our own serial implementation.

2 Finite State Transducers

In this section, we introduce the notation that
will be used throughout the paper for the com-
position task. A weighted FST is a tuple M =
(Q,Σ,Γ, s, F, δ), where



2698

• Q is a finite set of states.

• Σ is a finite input alphabet.

• Γ is a finite output alphabet.

• s ∈ Q is the start state.

• F ⊆ Q are the accept states.

• δ : Q × Σ × Γ × Q → R is the transition
function. If δ(q, a, b, r) = p, we write

q
a:b/p
−−−−→ r.

Note that we don’t currently allow epsilon transi-
tions; this would require implementation of com-
position filters (Allauzen et al., 2009), which is not
a trivial task on the GPU architecture given the
data structures and memory needed. Hence, we
leave this for future work.

For the composition task, we are given two
weighted FSTs:

M1 = (Q1,Σ,Γ, s1, F1, δ1)

M2 = (Q2,Γ,∆, s2, F2, δ2).

Call Γ, the alphabet shared between the two trans-
ducers, the inner alphabet, and let m = |Γ|. Call
Σ and ∆, the input alphabet of M1 and the output
alphabet of M2, the outer alphabets.

The composition of M1 and M2 is the weighted
FST

M1 ◦ M2 = (Q1 × Q2,Σ,∆, s1s2, F1 × F2, δ)

where

δ(q1q2, a, b, r1r2) =∑
b∈Γ

δ1(q1, a, c, r1) · δ2(q2, c, b, r2).

That is, for each pair of transitions with the same
inner symbol,

q1
a:b/p1−−−−−→ r1

q2
b:c/p2−−−−−→ r2,

the composed transducer has a transition

q1q2
a:c/p1 p2−−−−−−→ r1r2.

Transitions with the same source, target, input, and
output symbols are merged, adding their weights.

0

1

2

3

0 1 2 3

0,0

1,1

2,2

3,3

1,2

2,1

1,0 2,0 3,0

0,1 3,1

0,2 3,2

0,3 1,3 2,3

M2

M
1

t
h
e
:
l
a
/0

.3o
n
e
:
u
n
a
/0

.7

c
a
t
:
g
a
t
a
/1

.0

c
a
t
:
g
a
t
a
/1

.0

la:die/0.6

una:eine/0.4

gata:Katze/1.0

gata:Katze/1.0

th
e:
di
e/

0.1
8

on
e:
ei
ne

/0.
28

ca
t:
Ka
tz
e/

1.0
0

ca
t:
Ka
tz
e/

1.0

ca
t:
Ka
tz
e/1

.0

c
a
t
:
K
a
t
z
e
/1

.0

Figure 1: Example composition of two finite state
transducers: M1 translates English to Spanish, M2
translates Spanish to German. The center of the
image contains the composition of the two input
transducers. This new transducer translates En-
glish to German. The dotted states and transitions
are those that cannot be reached from the start
state.

3 Method

In this section, we describe our composition
method and its implementation.

3.1 Motivation
If implemented naı̈vely, the above operation is
inefficient. Even if M1 and M2 are trim (have
no states that are unreachable from the start state
or cannot reach the accept state), their composi-
tion may have many unreachable states. Figure 1
shows a clear example where the transducers used
for composition are trim, yet several states (drawn
as dotted circles) on the output transducers cannot
be reached from the start state. The example also
shows composed transitions that originate from
unreachable states. As a result, a large amount of
time and memory may be spent creating states and
composing transitions that will not be reachable
nor needed in practice. One solution to avoid the
problem is to compose only the edges and states
that are reachable from the start state on the out-
put transducer to avoid unnecessary computations
and reduce the overall memory footprint.

We expect this problem to be more serious when
the FSTs to be composed are sparse, that is, when
there are many pairs of states without a transition
between them. And we expect that FSTs used in



2699

Data Transitions Nonzero % Nonzero
1k

de-en 21.7M 16.5k 0.076%
en-de 12.3M 15.4k 0.125%
en-es 12.5M 15.5k 0.124%
en-it 13.1M 16.3k 0.124%

10
k

de-en 394M 114k 0.029%
en-de 138M 93.9k 0.067%
en-es 135M 93.3k 0.068%
en-it 143M 97.2k 0.067%

15
k

de-en 634M 158k 0.025%
en-de 201M 126k 0.062%
en-es 195M 125k 0.064%
en-it 209M 131k 0.062%

Table 1: FSTs used in our experiments. Key: Data
= language pair used to generate the transduc-
ers; Transitions = maximum possible number of
transitions; Nonzero = number of transitions with
nonzero weight; % Nonzero = percent of possible
transitions with nonzero weight. The left column
indicates the number of parallel sentences used to
generate the transducers used for testing.

natural language processing, whether they are con-
structed by hand or induced from data, will often
be sparse.

For example, below (Section 4.1), we will de-
scribe some FSTs induced from parallel text that
we will use in our experiments. We measured the
sparsity of these FSTs, shown in Table 1. These
FSTs contain very few non-zero connections be-
tween their states, suggesting that the output of
the composition will have a large number of un-
reachable states and transitions. The percentage
of non-zero transitions found in the transducers
used for testing decreases as the transducer gets
larger. Therefore, when composing FSTs, we want
to construct only reachable states, using a traversal
scheme similar to breadth-first search to avoid the
storage and computation of irrelevant elements.

3.2 Serial composition

We first present a serial composition algorithm
(Algorithm 2). This algorithm performs a breadth-
first search (BFS) of the composed FST beginning
from the start state, so as to avoid creating inac-
cessible states. As is standard, the BFS uses two
data structures, a frontier queue (A) and a visited
set (Q), which is always a superset of A. For each
state q1q2 popped from A, the algorithm composes

Algorithm 1 Serial composition algorithm.
Input Transducers: M1 = (Q1,Σ,Γ, s1, F1, δ1)

M2 = (Q2,Γ,∆, s2, F2, δ2)

Output Transducer: M1 ◦ M2
1: A← {s1s2} . Queue of states to process
2: Q← {s1s2} . Set of states created so far
3: δ← ∅ . Transition function
4: while |A| > 0 do
5: q1q2 ← pop(A)
6: for q1

a:b/p1−−−−−→ r1 ∈ δ1 do
7: for q2

b:c/p2−−−−−→ r2 ∈ δ2 do
8: δ(q1q2, a, c, r1r2) += p1 p2
9: if r1r2 < Q then

10: Q← Q ∪ {r1r2}
11: push(A, r1r2)
12: return (Q,Σ,∆, s1s2, F1 × F2, δ)

la gata una

R 0 1 1 2

T 1 2

O the one

P 0.3 0.7

la gata una

R 0 1 1 2

T 1 2

O die eine

P 0.6 0.4

M1 M2

Figure 2: Example CSR-like representation of
state 0 for transducers M1 and M2 from Figure 1.

all transitions from q1 with all transitions from q2
that have the same inner symbol. The composed
edges are added to the final transducer, and the
corresponding target states q1q2 are pushed into A
for future expansion. The search finishes once A
runs out of states to expand.

3.3 Transducer representation

Our GPU implementation stores FST transition
functions in a format similar to compressed sparse
row (CSR) format, as introduced by our previous
work Argueta and Chiang (2017). For the com-
position task we use a slightly different represen-
tation. An example of the adaptation is shown in
Figure 2. The transition function δ for the result is
stored in a similar fashion. The storage method is
defined as follows:



2700

• z is the number of transitions with nonzero
weight.

• R is an array of length |Q|m + 1 containing
offsets into the arrays T , O, and P. If the
states are numbered 0, . . . , |Q| − 1 and the in-
ner symbols are numbered 0, . . .m − 1, then
state q’s outgoing transitions on inner symbol
b can be found starting at the offset stored in
R[qm + b]. The last offset index, R[|Q|m + 1],
must equal z.

• T [k] is the target state of the kth transition.

• O[k] is the outer symbol of the kth transition.

• P[k] is the weight of the kth transition.

Similarly to several toolkits (such as OpenFST),
we require the edges in T,O, P to be sorted by
their inner symbols before executing the algo-
rithm, which allows faster indexing and simpler
parallelization.

3.4 Parallel composition
Our parallel composition implementation has the
same overall structure as the serial algorithm, and
is shown in Algorithm 2. The two transducers
to be composed are stored on the GPU in global
memory, in the format described in Section 3.3.
Both transducers are sorted according to their in-
ner symbol on the CPU and copied to the device.
The memory requirements for a large transducer
complicates the storage of the result on the GPU
global memory. If the memory of states and edges
generated by both inputs does not fit on the GPU,
then the composition cannot be computed using
only device memory. The execution time will also
be affected if the result lives on the device and
there is a limited amount of memory available for
temporary variables created during the execution.
Therefore, the output transducer must be stored on
the host using page-locked memory, with the edge
transitions unsorted.

Page-locked, or pinned, memory is memory
that will not get paged out by the operating sys-
tem. Since this memory cannot be paged out, the
amount of RAM available to other applications
will be reduced. This enables the GPU to access
the host memory quickly. Pinned memory pro-
vides better transfer speeds since the GPU creates
different mappings to speed up cudaMemcpy oper-
ations on host memory. Allocating pinned mem-
ory consumes more time than a regular malloc,

Algorithm 2 Parallel composition algorithm.
Input Transducers: M1 = (Q1,Σ,Γ, s1, F1, δ1)

M2 = (Q2,Γ,∆, s2, F2, δ2)

Output Transducer: M1 ◦ M2
1: A← {s1s2} . Queue of states to process
2: Q← {s1s2} . Set of states visited
3: δ← [] . List of transitions
4: while |A| > 0 do
5: q1q2 ← pop(A)
6: δd ← []
7: Ad ← ∅
8: H ← ∅
9: red ← false

10: parfor b ∈ Γ do . kernels
11: parfor q1

a:b/p1−−−−−→ r1 do . threads
12: parfor q2

b:c/p2−−−−−→ r2 do . threads
13: append q1q2

a:c/p1 p2−−−−−−→ r1r2 to δd
14: if h(a, c, r1r2) ∈ H then
15: red ← true
16: else
17: add h(a, c, r1r2) to H
18: if r1r2 < Q then
19: Ad ← Ad ∪ {r1r2}
20: Q← Q ∪ {r1r2}
21: concatenate δd to δ
22: for q ∈ Ad do push(A, q)
23: if red then
24: sort δ[q1q2]
25: reduce δ[q1q2]
26: return (Q,Σ,∆, s1s2, F1 × F2, δ)

therefore it should be done sporadically. In this
work, pinned memory is allocated only once at
start time and released once the composition has
been completed. Using page-locked memory on
the host side as well as pre-allocating memory on
the device decreases the time to both copy the re-
sults back from the GPU, and the time to reuse de-
vice structures used on different kernel methods.

Generating transitions The frontier queue A is
stored on the host. For each state q1q2 popped
from A, we need to compose all outgoing tran-
sitions of q1 and q2 obtained from M1 and M2
respectively. Following previous work (Merrill
et al., 2012; Jurish and Würzner, 2013), we cre-
ate these in parallel, using the three parfor loops
in lines 10–12. Although these three loops are
written the same way in pseudocode for simplic-



2701

ity, in actuality they use two different paralleliza-
tion schemes in the actual implementation of the
algorithm.

The outer loop launches a CUDA kernel for
each inner symbol b ∈ Γ. For example, to com-
pose the start states in Figure 1, three kernels will
be launched (one for la, gata, and una). Each of
these kernels composes all outgoing transitions of
q1 with output b with all outgoing transitions of q2
with input b. Each of these kernels is executed in a
unique stream, so that a higher parallelization can
be achieved. Streams are used in CUDA program-
ming to minimize the number of idle cores dur-
ing execution. A stream is a group of commands
that execute in-order on the GPU. What makes
streams useful in CUDA is the ability to execute
several asynchronously. If more than one kernel
can run asynchronously without any interdepen-
dence, the assignment of kernel calls to different
streams will allow a higher speedup by minimiz-
ing the amount of idling cores during execution.
All kernel calls using streams are asynchronous to
the host making synchronization between several
different streams necessary if there exist data de-
pendencies between different parts of the execu-
tion pipeline. Asynchronous memory transactions
can also benefit from streams, if these operations
do not have any data dependencies.

We choose a kernel block size of 32 for the ker-
nel calls since this is the amount of threads that
run in parallel on all GPU streaming multiproces-
sors at any given time. If the number of threads re-
quired to compose a tuple of states is not divisible
by 32, the number of threads is rounded up to the
closest multiple. When several input tuples gener-
ate less than 32 edges, multiple cores will remain
idle during execution. Our approach obtains bet-
ter speedups when the input transducers are able
to generate a large amount of edges for each sym-
bol b and each state tuple on the result. In gen-
eral, the kernels may take widely varying lengths
of time based on the amount of composed edges;
using streams enables the scheduler to minimize
the number of idle cores.

The two inner loops represent the threads of
the kernel; each composes a pair of transitions
sharing an inner symbol b. Because these transi-
tions are stored contiguously (Figure 2), the reads
can be coalesced, meaning that the memory reads
from the parallel threads can be combined into one
transaction for greater efficiency. Figure 2 shows

how the edges for a transducer are stored in global
memory to achieve coalesced memory operations
each time the edges of a symbol b associated with
a state tuple q1,q2 need to be composed.

Figure 2 shows how the edges leaving the
start state tuple for transducers M1 and M2 are
stored. As mentioned above, three kernels will
be launched to compose the transitions leaving the
start states, but only two will be executed (be-
cause there are no transitions on gata for both
start states). For R[la] on machine M1, only one
edge can output la given R[la + 1] − R[la] =
1, and machine M2 has one edge that reads la
given R[la + 1] − R[la] = 1. For this example,
R[la] points to index 0 on T,O, P for both states.
This means that only one edge will be generated

from the composition (0, 0
the:die/0.18−−−−−−−−−−→ 1, 1). For

symbol gata, no edges can be composed given
R[gata + 1] − R[gata] = 0 on both machines,
meaning that no edges read or output that sym-
bol. Finally, for R[una] on machine M1 and M2,

one edge can be generated (0, 0
one:eine/0.28−−−−−−−−−−−→ 2, 2)

given the offsets in R for both input FSTs. If n1
edges can be composed for a symbol b on one ma-
chine and n2 from the other one, the kernel will
generate n1n2 edges.

The composed transitions are first appended to
a pre-allocated buffer δd on the GPU. After pro-
cessing the valid compositions leaving q1q2, all
the transitions added in δd are appended in bulk
to δ on the host.

Updating frontier and visited set Each desti-
nation state r1r2, if previously unvisited, needs to
be added to both A and Q. Instead of adding it di-
rectly to A (which is stored on the host), we add
it to a buffer Ad stored on the device to minimize
the communication overhead between the host and
the device. After processing q1q2 and synchroniz-
ing all streams, Ad is appended in bulk to A using
a single cudaMemcpy operation.

The visited set Q is stored on the GPU device
as a lookup table of length |Q1||Q2|. Merrill et al.
(2012) perform BFS using two stages to obtain the
states and edges needed for future expansion. Sim-
ilarly, our method performs the edge expansion us-
ing two steps by using the lookup table Q. The
first step of the kernel updates Q and all visited
states that need to be added to Ad. The second step
appends all the composed edges to δ in parallel.
Since several threads check the table in parallel,



2702

an atomic operation (atomicOr) is used to check
and update each value on the table in a consistent
fashion. Q also functions as a map to convert the
state tuple q1q2 into a single integer. Each time a
tuple is not in Q, the structure gets updated with
the total number of states generated plus one for a
specific pair of states.

Reduction Composed edges with the same
source, target, input, and output labels must be
merged, summing their probabilities. This is done
in lines 23–25, which first sort the transitions and
then merge and sum them. To do this, we pack the
transitions into an array of keys and an array of
values. Each key is a tuple (a, c, r1r2) packed into
a 64-bit integer. We then use the sort-by-key and
reduce-by-key operations provided by the Thrust
library. The mapping of tuples to integers is re-
quired for the sort operation since the comparisons
required for the sorting can be made faster than us-
ing custom data structures with a custom compar-
ison operator. 1

Because the above reduction step is rather ex-
pensive, lines 14–17 use a heuristic to avoid it if
possible. H is a set of transitions represented as
a hash table without collision resolution, so that
lookups can yield false positives. If red is false,
then there were no collisions, so the reduction
step can be skipped. The hash function is sim-
ply h(a, c, r1r2) = a + c|Σ|. In more detail, H ac-
tually maps from hashes to integers. Clearing H
(line 8) actually just increments a counter i; stor-
ing a hash k is implemented as H[k] ← i, so we
can test whether k is a member by testing whether
H[k] = i. An atomic operation (atomicExch) is
used to consistently check H since several threads
update this variable asynchronously.

4 Experiments

We tested the performance of our implementation
by constructing several FSTs of varying sizes and
comparing our implementation against other base-
lines.

4.1 Setup

In our previous work (Argueta and Chiang, 2017),
we created transducers for a toy translation task.
We trained a bigram language model (as in Fig-
ure 3a) and a one-state translation model (as
in Figure 3) with probabilities estimated from

1https://thrust.github.io/

0

1

2

3

la
/0.

8

una/0.2

gata/1.0

ga
ta

/1.
0

la
:th
e/0

.6 una:the/0.4

gata:cat/1

(a) (b)

Figure 3: The transducers used for testing were
obtained by pre-composing: (a) a language model
and (b) a translation model. These two composed
together form a transducer that can translate an in-
put sequence from one language (here, Spanish)
into another language (here, English).

GIZA++ Viterbi word alignments. Both were
trained on the Europarl corpus. We then pre-
composed them using the Carmel toolkit (Graehl,
1997).

We used the resulting FSTs to test our parallel
composition algorithm, composing a German-to-
English transducer with a English-to-t transducer
to translate German to language t, where t is Ger-
man, Spanish, or Italian.

Our experiments were tested using two different
architectures. The serial code was measured using
a 16-core Intel Xeon CPU E5-2650 v2, and the
parallel implementation was executed on a system
with a GeForce GTX 1080 Ti GPU connected to a
24-core Intel Xeon E5-2650 v4 processor.

4.2 Baselines

In this work, OpenFST (Allauzen et al., 2007)
and our serial implementation (Algorithm 1) were
used as a baseline for comparison. OpenFST is a
toolkit developed by Google as a successor of the
AT&T Finite State Machine library. For consis-
tency, all implementations use the OpenFST text
file format to read and process the transducers.

4.3 Results

OpenFST’s composition operation can potentially
create multiple transitions (that is, two or more
transitions with the same source state, destina-
tion state, input label, and output label); a sepa-
rate function (ArcSumMapper) must be applied to
merge multiple transitions and sum their weights.
Previous work also requires an additional step if
identical edges need to be merged. For this reason,

https://thrust.github.io/


2703

Training size (lines)
1000 10000 15000

Method Hardware Target Time Ratio Time Ratio Time Ratio

OpenFST Xeon E5 DE 0.52 0.78 69.51 3.56 157.16 4.38
our serial Xeon E5 DE 0.21 0.31 28.47 1.45 72.33 2.02
our parallel GeForce GTX 1080 DE 0.67 1.00 19.54 1.00 35.89 1.00

OpenFST Xeon E5 ES 0.46 0.72 55.62 2.97 137.16 4.07
our serial Xeon E5 ES 0.19 0.30 23.30 1.24 62.42 1.85
our parallel GeForce GTX 1080 ES 0.64 1.00 18.72 1.00 33.71 1.00

OpenFST Xeon E5 IT 0.54 0.79 60.66 3.05 136.06 3.91
our serial Xeon E5 IT 0.21 0.31 25.58 1.28 119.84 3.45
our parallel GeForce GTX 1080 IT 0.68 1.00 19.88 1.00 34.76 1.00

Table 2: This table shows how the total running time of our GPU implementation compares against
all other methods. Times (in seconds) are for composing two transducers using English as the shared
input/output vocabulary and German as the source language of the first transducer (de-en,en-*). Ratios
are relative to our parallel algorithm on the GeForce GTX 1080 Ti.

we compare our implementation against Open-
FST both with and without the reduction of transi-
tions with an identical source,target,input, and out-
put. We analyzed the time to compose all possible
edges without performing any reductions (Algo-
rithm 1, line 8). The second setup analyzes the
time it takes to compute the composition and the
arc summing of identical edges generated during
the process.

Table 2 shows the performance of the paral-
lel implementation and the baselines without re-
ducing identical edges. For the smallest trans-
ducers, our parallel implementation is slower than
the baselines (0.72× compared to OpenFST and
0.30× compared to our serial version). With larger
transducers, the speedups increase up to 4.38×
against OpenFST and 2.02× against our serial im-
plementation. Larger speedups are obtained for
larger transducers because the GPU can utilize
the streaming multiprocessors more fully. On the
other hand, the overhead created by CUDA calls,
device synchronization, and memory transfers be-
tween the host CPU and the device might be too
expensive when the inputs are too small.

Table 3 shows the performance of all implemen-
tations with the reduction operation. Again, for the
smallest transducers we can see a similar behav-
ior, our parallel implementation is slower (0.30×
against OpenFST and 0.39× against our serial ver-
sion). Speedups improve with the larger trans-
ducers, eventually achieving a 4.52× speedup over
OpenFST and a 6.26× speedup over our serial im-

plementation of the composition algorithm.

4.4 Discussion

One comparison missing above is a comparison
against a multicore processor. We attempted to
compare against a parallel implementation using
OpenMP on a single 16-core processor, but it did
not yield any meaningful speedup, and even slow-
downs of up to 10%. We think the reason for this
is that because the BFS-like traversal of the FST
makes it impractical to process states in parallel,
the best strategy is to process and compose tran-
sitions in parallel. This very fine-grained paral-
lelism does not seem suitable for OpenMP, as the
overhead due to thread initialization and synchro-
nization is higher than the time to execute the par-
allel sections of the code where the actual com-
position is calculated. According to our measure-
ments, the average time to compose two transi-
tions is 7.4 nanoseconds, while the average time to
create an OpenMP thread is 10.2 nanoseconds. By
contrast, the overhead for creating a CUDA thread
seems to be around 0.4 nanoseconds. While a dif-
ferent parallelization strategy may exist for mul-
ticore architectures, at present, our finding is that
GPUs, or other architectures with a low cost to cre-
ate and destroy threads, are much more suitable for
the fine grained operations used for the composi-
tion task.



2704

Training size (lines)
1000 10000 15000

Method Hardware Target Time Ratio Time Ratio Time Ratio

OpenFST Xeon E5 DE 0.87 0.41 148.11 3.19 374.72 4.52
our serial Xeon E5 DE 0.96 0.45 213.27 4.59 518.97 6.26
our parallel GeForce GTX 1080 DE 2.11 1.00 47.70 1.00 82.88 1.00

OpenFST Xeon E5 ES 0.60 0.30 116.45 2.66 279.85 3.57
our serial Xeon E5 ES 0.77 0.39 202.15 4.61 390.29 4.97
our parallel GeForce GTX 1080 ES 2.00 1.00 45.30 1.00 78.38 1.00

OpenFST Xeon E5 IT 0.76 0.36 130.61 2.87 309.28 3.79
our serial Xeon E5 IT 1.06 0.50 158.57 3.48 427.51 5.24
our parallel GeForce GTX 1080 IT 2.12 1.00 47.04 1.00 81.54 1.00

Table 3: This table shows how the total running time of our GPU implementation compares against all
other methods. Times (in seconds) are for composing two transducers and performing edge reduction
using English as the shared input/output vocabulary and German as the source language of the first
transducer (de-en,en-*). Ratios are relative to our parallel algorithm on the GeForce GTX 1080 Ti.

5 Future Work

For future work, other potential bottlenecks could
be addressed. The largest bottleneck is the queue
used on the host to keep track of the edges to ex-
pand on the GPU. Using a similar data structure
on the GPU to keep track of the states to expand
would yield higher speedups. The only challenge
of using such a data structure is the memory con-
sumption on the GPU. If the two input transducers
contain a large number of states and transitions,
the amount of memory needed to track all the
states and edges generated will grow significantly.
Previous work (Harish and Narayanan, 2007) has
shown that state queues on the GPU cause a large
memory overhead. Therefore, if state expansion
is moved to the GPU, the structures used to keep
track of the states must be compressed or occupy
the least amount of memory possible on the de-
vice in order to allocate all structures required on
the device. The queue will also require a mech-
anism to avoid inserting duplicate tuples into the
queue.

For the reduction step, speedups can be
achieved if the sort and reduce operations can
be merged with the edge expansion part of the
method. The challenge of merging identical edges
during expansion is the auxiliary memory that
will be required to store and index intermediate
probabilities. It can be doable if the transducers
used for the composition are small. In that case,
the reduce operation might not yield significant

speedups given the fact that the overhead to com-
pose small transducers is too high when using a
GPU architecture.

6 Conclusion

This is the first work, to our knowledge, to de-
liver a parallel GPU implementation of the FST
composition algorithm. We were able to obtain
speedups of up to 4.5× over a serial OpenFST
baseline and 6× over the serial implementation of
our method. This parallel method considers sev-
eral factors, such as host to device communication
using page-locked memory, storage formats on the
device, thread configuration, duplicate edge detec-
tion, and duplicate edge reduction. Our implemen-
tation is available as open-source software.2

Acknowledgements

We thank the anonymous reviewers for their help-
ful comments. This research was supported in part
by an Amazon Academic Research Award and a
hardware grant from NVIDIA.

References
Cyril Allauzen and Mehryar Mohri. 2008. 3-way com-

position of weighted finite-state transducers. In Im-
plementation and Applications of Automata, pages
262–273. Springer.

2https://bitbucket.org/aargueta2/parallel_
composition

https://bitbucket.org/aargueta2/parallel_composition
https://bitbucket.org/aargueta2/parallel_composition


2705

Cyril Allauzen, Michael Riley, and Johan Schalkwyk.
2009. A generalized composition algorithm for
weighted finite-state transducers. In Proceedings of
the Conference of the International Speech Commu-
nication Association (ISCA), pages 1203–1206.

Cyril Allauzen, Michael Riley, Johan Schalkwyk, Wo-
jciech Skut, and Mehryar Mohri. 2007. OpenFst: A
general and efficient weighted finite-state transducer
library. In Implementation and Application of Au-
tomata, pages 11–23. Springer.

Arturo Argueta and David Chiang. 2017. Decoding
with finite-state transducers on GPUs. In Proceed-
ings of EACL, pages 1044–1052.

Leonard E. Baum, Ted Petrie, George Soules, and Nor-
man Weiss. 1970. A maximization technique occur-
ring in the statistical analysis of probabilistic func-
tions of Markov chains. The Annals of Mathemati-
cal Statistics, 41(1):164–171.

Octavian Cheng, John Dines, and Mathew Magimai
Doss. 2007. A generalized dynamic composition al-
gorithm of weighted finite state transducers for large
vocabulary speech recognition. In Acoustics, Speech
and Signal Processing, 2007. ICASSP 2007. IEEE
International Conference on, volume 4, pages IV–
345. IEEE.

Paul R. Dixon, Diamantino A Caseiro, Tasuku Oonishi,
and Sadaoki Furui. 2007. The Titech large vocabu-
lary WFST speech recognition system. In Proceed-
ings of the IEEE Workshop on Automatic Speech
Recognition & Understanding (ASRU), pages 443–
448.

Jonathan Graehl. 1997. Carmel finite-state toolkit.
ISI/USC.

Alex Graves, Santiago Fernández, Faustino Gomez,
and Jürgen Schmidhuber. 2006. Connectionist
temporal classification: labelling unsegmented se-
quence data with recurrent neural networks. In Pro-
ceedings of ICML, pages 369–376.

Pawan Harish and P. J. Narayanan. 2007. Accel-
erating large graph algorithms on the GPU using
CUDA. In Proceedings of High Performance Com-
puting (HiPC), volume 7, pages 197–208.

Takaaki Hori and Atsushi Nakamura. 2005. Gen-
eralized fast on-the-fly composition algorithm for
WFST-based speech recognition. In Proceedings of
INTERSPEECH, pages 557–560.

Minyoung Jung, Jinwoo Park, Johann Blieberger, and
Bernd Burgstaller. 2017. Parallel construction of si-
multaneous deterministic finite automata on shared-
memory multicores. In Proceedings of the Inter-
national Conference on Parallel Processing (ICPP),
pages 271–281.

Bryan Jurish and Kay-Michael Würzner. 2013. Multi-
threaded composition of finite-state-automata. In
Proceedings of FSMNLP, pages 81–89.

Richard E. Ladner and Michael J. Fischer. 1980. Par-
allel prefix computation. Journal of the ACM,
27(4):831–838.

John D. Lafferty, Andrew McCallum, and Fernando
C. N. Pereira. 2001. Conditional random fields:
Probabilistic models for segmenting and labeling se-
quence data. In Proceedings of ICML, pages 282–
289.

Duane Merrill, Michael Garland, and Andrew
Grimshaw. 2012. Scalable GPU graph traversal.
In Proceedings of the ACM SIGPLAN Symposium
on Principles and Practice of Parallel Programming
(PPoPP), pages 117–128.

Mehryar Mohri. 1997. Finite-state transducers in lan-
guage and speech processing. Computational Lin-
guistics, 23(2):269–311.

Mehryar Mohri. 2009. Weighted automata algorithms.
In Handbook of Weighted Automata, pages 213–254.
Springer.

Mehryar Mohri, Fernando Pereira, and Michael Ri-
ley. 2002. Weighted finite-state transducers in
speech recognition. Computer Speech & Language,
16(1):69–88.

Todd Mytkowicz, Madanlal Musuvathi, and Wolfram
Schulte. 2014. Data-parallel finite-state machines.
In Proceedings of Architectural Support for Pro-
gramming Languages and Operating Systems (AS-
PLOS), pages 529–542.

Fernando C. N. Pereira and Michael D. Riley. 1997.
Speech recognition by composition of weighted fi-
nite automata. In Emmanuel Roche and Yves
Schabes, editors, Finite-State Language Processing.
MIT Press.

https://aclanthology.info/pdf/E/E17/E17-1098.pdf
https://aclanthology.info/pdf/E/E17/E17-1098.pdf
https://www.isi.edu/licensed-sw/carmel/
http://www.aclweb.org/anthology/W13-1813
http://www.aclweb.org/anthology/W13-1813
https://doi.org/10.1145/322217.322232
https://doi.org/10.1145/322217.322232

