



















































SANTO: A Web-based Annotation Tool for Ontology-driven Slot Filling


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics-System Demonstrations, pages 68–73
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

68

SANTO: A Web-based Annotation Tool for
Ontology-driven Slot Filling

Matthias Hartung1∗, Hendrik ter Horst1∗, Frank Grimm1,
Tim Diekmann1, Roman Klinger1,2 and Philipp Cimiano1

1CITEC, Bielefeld University
2Institut für Maschinelle Sprachverarbeitung, University of Stuttgart
{mhartung,hterhors,fgrimm,tdiekmann,cimiano}@

techfak.uni-bielefeld.de
roman.klinger@ims.uni-stuttgart.de

Abstract

Supervised machine learning algorithms re-
quire training data whose generation for
complex relation extraction tasks tends to
be difficult. Being optimized for relation
extraction at sentence level, many annota-
tion tools lack in facilitating the annota-
tion of relational structures that are widely
spread across the text. This leads to non-
intuitive and cumbersome visualizations,
making the annotation process unnecessar-
ily time-consuming. We propose SANTO,
an easy-to-use, domain-adaptive annota-
tion tool specialized for complex slot filling
tasks which may involve problems of cardi-
nality and referential grounding. The web-
based architecture enables fast and clearly
structured annotation for multiple users in
parallel. Relational structures are formu-
lated as templates following the conceptual-
ization of an underlying ontology. Further,
import and export procedures of standard
formats enable interoperability with exter-
nal sources and tools.

1 Introduction

In most scientific and technical domains, the main
medium for knowledge communication is unstruc-
tured text. Growing efforts are spent into literature-
based knowledge discovery (Henry and McInnes,
2017) using information extraction or machine
reading approaches for knowledge base population.
The goal is to automatically transform the available
domain knowledge into structured formats that can
be leveraged for downstream analytical tasks.

Recent approaches reduced information extrac-
tion problems to binary relation extraction tasks
at sentence level (Adel et al., 2016; Zhang et al.,

∗The first two authors contributed equally to this paper.

2017, i. a.). In such cases, the annotation procedure
is comparably straight-forward to formulate. How-
ever, a substantial subset of information extraction
tasks can be described as typed n-ary relation ex-
traction or slot filling, in which pre-defined sets of
typed slots (templates) need to be assigned from
information that may be widely spread across a
text (Freitag, 2000). As such templates can con-
tain many slots which may be recursively nested,
an appropriate visualization is mandatory during
annotation to handle the complexity of the task.

Relevant use cases for template-based informa-
tion extraction exist in several fields of application:
In the biomedical domain, there is a large body of
work on database population from text in order to
support translational medicine (Zhu et al., 2013;
ter Horst et al., 2018, i. a.). In digital humanities,
there is a vital interest in detecting descriptions of
historical events or artifacts from cultural heritage
(Ruotsalo et al., 2009; Segers et al., 2011). In the
context of manufacturing or retail, structured prod-
uct descriptions are extracted from web pages or
customer reviews (Bing et al., 2016; Petrovski and
Bizer, 2017) to enable product comparisons.

In this work, we present SANTO, a lightweight,
easy-to-use, domain-adaptive, web-based annota-
tion tool specialized for complex slot filling tasks.
SANTO is designed to address particular user
needs that are recurrent in such scenarios. It en-
ables data annotation and export into a machine-
readable format based on the following features:
• Being based on information models such as

ontologies for specifying the template scheme,
it can be flexibly adapted to different domains
and use cases.
• It enables annotations both at the textual and

the template level; it is designed to support
fast and seamless instantiation of new tem-
plates and their population from textual anno-
tations, particularly in cases where slot fillers



69

pertaining to one template are widely dis-
tributed across the text.
• As common in slot filling, the tool builds on

top of the fact that extraction models do not
need to find every mention of an entity or
relation in the text. Instead, the focus is on
enabling the user to instantiate the correct car-
dinality of templates and ensuring referential
uniqueness of slot fillers or templates.
• Annotations can be flexibly imported from

different external sources. The RDF export
of annotated relations within templates is con-
form to the underlying information model.
• It enables easy curation of annotations (e. g.,

from multiple imports).
• It is implemented as a web service in order

to support remote annotation workflows for
multiple users in parallel.

Availability and License. A demo installa-
tion is available at http://psink.techfak.
uni-bielefeld.de/santo/. The source
code of the application is publicly available under
the Apache 2.0 License at https://github.
com/ag-sc/SANTO.

2 Related Work

Most annotation frameworks for text focus on the
sentence level. Examples include syntactic pars-
ing (Burchardt et al., 2006) or semantic role label-
ing (Kakkonen, 2006; Yimam et al., 2013). Other
tools focus on segmentation annotation tasks, for
instance Callisto (Day et al., 2004), WordFreak
(Morton and LaCivita, 2003), MMax2 (Müller and
Strube, 2006), or GATE Teamware (Bontcheva
et al., 2013) (though the latter also supports more
complex schemata).

Brat (Stenetorp et al., 2012), WebAnno (Yimam
et al., 2013), eHost (South et al., 2012) and CAT
(Lenzi et al., 2012) support approaches for rela-
tional annotations. These tools are easy to use and
highly flexible regarding the specification of anno-
tation schemes. Projects are easy to manage due
to administration interfaces and remote annotation
is supported. However, these approaches share the
limitation that all relational structures need to be
anchored at the textual surface. Thus, annotating
complex templates as in Figure 1 becomes tedious
and visually cumbersome, especially in cases of
complex nestings within or across templates, or
when fillers are widely dispersed across multiple
sentences in a text.



ORGANISMMODEL
AGE “six-week-old”
SPECIES SpragueDawleyRat
GENDER Female
AGECATEGORY Adult
WEIGHT “192–268g“




Figure 1: Example template following a schema
derived from the Spinal Cord Injury Ontology.

We propose a tool to frame complex relational
annotation problems as slot filling tasks. To our
knowledge, the only existing tool for this purpose
is the Protégé plugin Knowtator (Ogren, 2006),
which is, however, not web-based, comparably dif-
ficult to use with multiple annotators, and no longer
actively supported since 2009. Thus, our main con-
tribution is an annotation tool which combines the
advantages of (i) enabling complex relational slot
filling with distant fillers, and (ii) ease of use in
web-based environments in order to facilitate re-
mote collaboration.

SANTO is ontology-based, i. e., entity and re-
lation types are derived from an underlying ontol-
ogy. The same idea is prominent in several annota-
tion tools within the Semantic Web community (cf.
Oliveira and Rocha, 2013). Contrary to SANTO,
these tools support annotations only at the level
of individual entities without capturing relational
structures as given in template-based slot filling.

3 Use Case: Information Extraction for
Database Population

SANTO is designed to create machine-readable
annotation data. As a motivating example, our pre-
sentation is guided by the use case of generating
annotated training data for an ontology-based in-
formation extraction system that supports database
population in the PSINK project1 (ter Horst et al.,
2018). In this context, our goal is to annotate sci-
entific publications reporting on the outcomes of
pre-clinical trials in the spinal cord injury domain.
The annotation schema complies to definitions of
the Spinal Cord Injury Ontology (SCIO; Brazda
et al., 2017). SCIO provides the concept RESULT
as a top-level class which subsumes all classes
and properties to represent the key parameters of
an outcome in a study. Several properties are re-
cursively sub-structured (e. g., EXPERIMENTAL-

1http://psink.de

http://psink.techfak.uni-bielefeld.de/santo/
http://psink.techfak.uni-bielefeld.de/santo/
https://github.com/ag-sc/SANTO
https://github.com/ag-sc/SANTO
http://psink.de


70

Figure 2: Entity Annotation: Relevant text mentions spanning one or multiple tokens are highlighted in
green; entity type annotations are displayed on top of them. A new WEIGHT annotation is being added
using the filtered drop-down menu.

Figure 3: Curation: Annotations of several annotators are displayed colorized. Annotations on the same
token are on top of each other. Correct or spurious annotations can be accepted or rejected, respectively.
Accepted annotations keep the color code, but are marked with dotted boundaries.

GROUPs, INVESTIGATIONMETHOD, ORGANISM-
MODEL). The annotation task is framed as slot
filling, i. e., pre-defined templates (corresponding
to classes in SCIO) need to be populated based on
evidence found in the document.

Figure 1 shows an example template which un-
folds the ORGANISMMODEL concept from SCIO
into slots (corresponding to ontological properties)
and their fillers. Fillers for such templates may
be distributed across an entire document, which
holds in particular for complex, recursively sub-
structured templates such as RESULT.

4 User Interface and Annotation
Workflow

Our web application provides three views to the
user, which reflect the typical annotation workflow
that is encountered in (slot filling) annotation tasks:
(i) entity annotation, (ii) curation, (iii) template
instantiation and slot filling.

4.1 Entity Annotation

In order to annotate entities at the level of tokens in
the text, we support two workflows: Annotations
are created by an annotator from scratch, or ex-
isting annotations can be imported in order to be
altered by the annotator. In SANTO, this is done
in the entity annotation view (cf. Figure 2). A new
annotation can be created by selecting tokens in the
text. Being forced to span full tokens, annotations
are automatically adjusted to the onset of the first
and the offset of the last token. Entity types are

chosen from a drop-down menu2. Discontinuous
annotations are supported as well. Existing anno-
tations can be altered by expanding or shrinking
their span, or by changing the entity type (with-
out the need to remove the existing annotation and
adding a new one). After a document has been
marked as complete by an annotator, it is available
for curation.

4.2 Curation

The curation view is designed to help a curator ad-
judicating possibly divergent mention annotations
produced by several annotators. For that purpose,
the curator can select annotations of multiple an-
notators that should be displayed for adjudication.
Each annotator corresponds to a unique color. As
can be seen from Figure 3, all annotations are ar-
ranged on top of each other in order to make di-
vergences clearly visible at a glance. Based on
this visualization, the curator can select individual
annotations and accept or reject them. Accepted an-
notations are marked with dotted boundaries while
keeping the color. During curation, the original
annotations are not altered but cloned into a new
curation document which serves as the basis for the
subsequent slot filling.3

4.3 Template Instantiation and Slot Filling

In this mode, SANTO provides a combined view
of curated entity annotations and pre-defined tem-

2The list can be filtered by name prefixes or taxonomically.
3If no curation is needed, all annotations can be easily

batch-accepted.



71

Figure 4: Slot filling view displaying a combined view of curated entity annotations at text level (left) and
templates to be filled (right). Type compatibilities between annotated entities and possible target slots are
automatically highlighted by the tool.

plates to be filled (cf. Figure 4). During template
filling, it is no longer possible to change entity an-
notations. Instead, the goal is to support the user
in instantiating the correct cardinality of different
template types, and filling their slots with previ-
ously annotated entities, while taking referential
grounding into account where necessary.

Cardinality of Templates. Often, the number of
instantiations of a particular template (e. g., number
of EXPERIMENTALGROUPs in a study) is variable
and not known a priori. Thus, correctly determin-
ing the cardinality of the set of instantiated tem-
plates per type is a crucial subproblem in the slot
filling task. In SANTO, users can add, remove,
or duplicate instances of referential templates and
rename them for easy reference (e. g., naming EX-
PERIMENTALGROUPS as “ChABC-treated group”
or “Untreated control group”).

Slot Filling. Based on their pre-defined role in
the annotation schema, we distinguish three dif-
ferent types of slots in a template: simple slots,
recursive slots and template slots.

Simple slots are directly filled with entity annota-
tions (e. g., STATISTICALTEST in Figure 5). In ad-
dition to be filled with entity annotations, recursive
slots have subordinate slots (e. g., INVESTIGATION-
METHOD in Figure 5, marked with a drop-down
symbol on the left). Simple and recursive slots can
either be filled by clicking on an existing annotation
in the document, or by selecting an annotation from
a drop-down menu that appears when clicking on
the slot. Here, it is also possible to select an entity
type without textual reference, if necessary (e. g.,
JUDGEMENT in Figure 5). In order to facilitate slot
filling, all suitable annotation candidates are high-
lighted in the document while hovering over a slot
and vice versa.4 Template slots are special cases
of recursive slots in order to facilitate referential
grounding (see below).

4Based on type constraints defined in the ontology.

Figure 5: Slot filling view (template pane only) dis-
playing the six main templates according to SCIO.
The RESULT template is opened; it includes sim-
ple slots (JUDGEMENT), recursive slots (e. g., IN-
VESTIGATIONMETHOD) and template slots (e. g.,
REFERENCEEXPERIMENTALGROUP, selectable
via drop-down).

Slots can be defined to accept multiple annota-
tions from the text. In such cases, a new slot value
can be added by clicking on the + symbol (e. g.,
OBSERVATION or TESTFORFUNCTION in Fig. 5).

Referential Grounding. Slot filling tasks re-
quire referential grounding when several instances
of complex sub-templates have to be distributed
over various governing templates; e. g., an instance
of an EXPERIMENTALGROUP might take part in
several, but not all of the RESULTs reported in a
study. Moreover, the same instance of an EXPERI-
MENTALGROUP may fill the TARGETEXPERIMEN-
TALGROUP slot in one RESULT and the REFER-
ENCEEXPERIMENTALGROUP in another. SANTO
supports these cases by explicitly assigning previ-
ously instantiated templates to appropriate template
slots via a drop-down menu (cf. Figure 5 for slot
REFERENCEEXPERIMENTALGROUP), thus ensur-
ing referential uniqueness of fillers. Only templates
of the appropriate type are available for selection.



72

5 Technical Properties

Application Details. The application is hosted
on a standard Linux web stack using Apache 2.4,
PHP 5.6 with a MySQL (version 5.5) database
backend. The frontend uses HTML-5, CSS-3,
jQuery5 with jQuery UI6 to provide a fast and
robust user experience compatible across modern
browsers.

Specification of Annotation Scheme. As initial
input, the system requires a description of the un-
derlying annotation scheme which can be derived
from an ontology. This includes the description
of entity types and roles (Class vs. NamedIndi-
vidual etc.), the hierarchical structure of entities
(subclass relations) and their relational structure
(object-type and data-type properties). Further, the
template types that are available for slot filling
need to be specified. All specifications are pro-
vided in configuration files in CSV format. Thus,
instead of a fully-fledged ontology, an ad-hoc in-
formation model can be provided as well. Support
for automatically translating an RDF ontology to
the custom specification format is currently lim-
ited to the following syntactic elements: owl:class,
rdfs:subClassOf, owl:NamedIndividual, rdf:type,
owl:objectTypeProperty, owl:dataTypeProperty,
and rdfs:description.

Pre-Processing of Input Documents. All docu-
ments need to be pre-processed before being up-
loaded to the application. This includes sentence
splitting and tokenization. Note that entity annota-
tions are limited to sentence boundaries and only
full tokens can be annotated.

Import and Export of Annotations. For each
document, it is possible to import entity annotations
for individual annotators from different sources
(e. g., external annotation platforms or automated
systems). The syntactic format for importing anno-
tations is based on a shallow tab-separated formal-
ism in order to facilitate a wide range of annota-
tion sources such as existing information extraction
tools, lexicon matching routines, or manual work-
flows. Entity and template annotations can be eas-
ily exported. While entity annotations are simply
described in a CSV-structured file, template annota-
tions are exported as RDF following the underlying
ontology and annotation schema.

5https://jquery.com
6https://jqueryui.com

User Management. User roles in SANTO com-
prise annotators and curators. Individual views per
annotator and curator enable multiple annotations,
curations and slot fillings for each document. The
web-based architecture supports multiple annota-
tions in parallel.

6 Conclusion

We have presented SANTO, the first web-based
annotation tool which enables easy annotation of
complex relational structures in a template-based
slot filling setting. The tool is web-based and flex-
ibly configurable. Being designed in order to ad-
dress typical user needs in slot filling workflows,
we expect SANTO to have a positive impact on
research aiming at automated acquisition of com-
prehensive, highly structured domain knowledge
from textual sources, as in biomedical information
extraction, digital humanities, or similar fields.

Acknowledgments

This work has been funded by the Federal Ministry
of Education and Research (BMBF, Germany) in
the PSINK project (grant 031L0028A). We thank
our PSINK colleagues Nicole Brazda, Veronica
Estrada, Jessica Schira and Hans Werner Müller for
helping shape the user requirements for SANTO.

References
Heike Adel, Benjamin Roth, and Hinrich Schütze.

2016. Comparing convolutional neural networks to
traditional models for slot filling. In Proc. of the
2016 Conference of the North American Chapter of
the Association for Computational Linguistics: Hu-
man Language Technologies, pages 828–838, San
Diego, California.

Lidong Bing, Tak-Lam Wong, and Wai Lam. 2016. Un-
supervised extraction of popular product attributes
from e-commerce web sites by considering customer
reviews. ACM Trans. Internet Technol., 16(2):12:1–
12:17.

Kalina Bontcheva, Hamish Cunningham, Ian Roberts,
Angus Roberts, Valentin Tablan, Niraj Aswani, and
Genevieve Gorrell. 2013. GATE Teamware: a
web-based, collaborative text annotation framework.
Language Resources and Evaluation, 47(4):1007–
1029.

Nicole Brazda, Hendrik ter Horst, Matthias Hartung,
Cord Wiljes, Veronica Estrada, Roman Klinger,
Wolfgang Kuchinke, Hans Werner Müller, and
Philipp Cimiano. 2017. SCIO: An Ontology to Sup-
port the Formalization of Pre-Clinical Spinal Cord

https://jquery.com
https://jqueryui.com
http://www.aclweb.org/anthology/N16-1097
http://www.aclweb.org/anthology/N16-1097


73

Injury Experiments. In Proc. of the 3rd JOWO Work-
shops: Ontologies and Data in the Life Sciences.

Aljoscha Burchardt, Katrin Erk, Anette Frank, Andrea
Kowalski, and Sebastian Pado. 2006. SALTO: A
versatile multi-level annotation tool. In Proc. of
LREC-2006, Genoa, Italy.

David Day, Chad McHenry, Robyn Kozierok, and Lau-
rel Riek. 2004. Callisto: A configurable annotation
workbench. In Proc. of the Internation Conference
on Language Resources and Evaluation.

Dayne Freitag. 2000. Machine learning for informa-
tion extraction in informal domains. Machine Learn-
ing, 39(2-3):169–202.

Sam Henry and Bridget T. McInnes. 2017. Literature
based discovery: Models, methods, and trends. J
Biomed Inform, 74:20–32.

Hendrik ter Horst, Matthias Hartung, Roman Klinger,
Nicole Brazda, Hans Werner Müller, and Philipp
Cimiano. 2018. Assessing the impact of single and
pairwise slot constraints in a factor graph model
for template-based information extraction. In Max
Silberztein and Elisabeth Métais, editors, Proc. of
NLDB 2018, volume 10859 of Lecture Notes in Com-
puter Science, pages 179–190. Springer.

Tuomo Kakkonen. 2006. DepAnn – An Annotation
Tool for Dependency Treebanks. In Proc. of the 11th
ESSLLI Student Session, Malaga, Spain. 18th Euro-
pean Summer School in Logic, Language and Infor-
mation (ESSLLI 2006).

Valentina Bartalesi Lenzi, Giovanni Moretti, and
Rachele Sprugnoli. 2012. CAT: the CELCT Anno-
tation Tool. In Proc. of the Eighth International
Conference on Language Resources and Evaluation
(LREC-2012), pages 333–338, Istanbul, Turkey. Eu-
ropean Language Resources Association (ELRA).
ACL Anthology Identifier: L12-1072.

Thomas Morton and Jeremy LaCivita. 2003. Wordf-
reak: An open tool for linguistic annotation. In Proc.
of the 2003 Conference of the North American Chap-
ter of the Association for Computational Linguistics
on Human Language Technology: Demonstrations
- Volume 4, NAACL-Demonstrations ’03, pages 17–
18, Stroudsburg, PA, USA.

Christoph Müller and Michael Strube. 2006. Multi-
level annotation of linguistic data with MMAX2. In
Sabine Braun, Kurt Kohn, and Joybrato Mukher-
jee, editors, Corpus Technology and Language Ped-
agogy: New Resources, New Tools, New Methods,
pages 197–214. Peter Lang, Frankfurt, Germany.

Philip V. Ogren. 2006. Knowtator: a Protégé plug-
in for annotated corpus construction. In Proc. of
the 2006 Conference of the North American Chapter
of the Association for Computational Linguistics on
Human Language Technology, pages 273–275, Mor-
ristown, NJ, USA.

Pedro Oliveira and João Rocha. 2013. Semantic anno-
tation tools survey. 2013 IEEE Symposium on Com-
putational Intelligence and Data Mining (CIDM),
pages 301–307.

Petar Petrovski and Christian Bizer. 2017. Extracting
attribute-value pairs from product specifications on
the web. In Proc. of the International Conference on
Web Intelligence, pages 558–565, Leipzig, Germany.

Tuukka Ruotsalo, Lora Aroyo, and Guus Schreiber.
2009. Knowledge-based linguistic annotation of dig-
ital cultural heritage collections. IEEE Intelligent
Systems, 24(2):64–75.

Roxane Segers, Marieke van Erp, Lourens van der
Meij, Lora Aroyo, Guus Schreiber, Bob Wielinga,
Jacco van Ossenbruggen, Johan Oomen, and Geertje
Jacobs. 2011. Hacking history: Automatic historical
event extraction for enriching cultural heritage multi-
media collections. In Proc. of the Workhop on Detec-
tion, Representation, and Exploitation of Events in
the Semantic Web (DeRiVE 2011), Bonn, Germany.

Brett South, Shuying Shen, Jianwei Leng, Tyler For-
bush, Scott DuVall, and Wendy Chapman. 2012. A
prototype tool set to support machine-assisted an-
notation. In BioNLP: Proc. of the 2012 Workshop
on Biomedical Natural Language Processing, pages
130–139, Montréal, Canada. Association for Com-
putational Linguistics.

Pontus Stenetorp, Sampo Pyysalo, Goran Topić,
Tomoko Ohta, Sophia Ananiadou, and Jun’ichi Tsu-
jii. 2012. Brat: a Web-based Tool for NLP-Assisted
Text Annotation. In Proc. of the Demonstrations at
the 13th Conference of the European Chapter of the
Association for Computational Linguistics, pages
102–107, Avignon, France.

Seid Muhie Yimam, Iryna Gurevych, Richard
Eckart de Castilho, and Chris Biemann. 2013.
Webanno: A flexible, web-based and visually sup-
ported system for distributed annotations. In Proc.
of the 51st Annual Meeting of the Association for
Computational Linguistics: System Demonstrations,
pages 1–6, Sofia, Bulgaria.

Yuhao Zhang, Victor Zhong, Danqi Chen, Gabor An-
geli, and Christopher D. Manning. 2017. Position-
aware attention and supervised data improve slot fill-
ing. In Proc. of the 2017 Conference on Empirical
Methods in Natural Language Processing, pages 35–
45, Copenhagen, Denmark.

Fei Zhu, Preecha Patumcharoenpol, Cheng Zhang,
Yang Yang, Jonathan Chan, Asawin Meechai,
Wanwipa Vongsangnak, and Bairong Shen. 2013.
Biomedical text mining and its applications in can-
cer research. Journal of Biomedical Informatics,
46(2):200 – 211.

http://www.lrec-conf.org/Proc.\ /lrec2012/pdf/216_Paper.pdf
http://www.lrec-conf.org/Proc.\ /lrec2012/pdf/216_Paper.pdf
https://doi.org/10.3115/1073427.1073436
https://doi.org/10.3115/1073427.1073436
https://doi.org/http://dx.doi.org/10.3115/1225785.1225791
https://doi.org/http://dx.doi.org/10.3115/1225785.1225791
http://www.aclweb.org/anthology/W12-2416
http://www.aclweb.org/anthology/W12-2416
http://www.aclweb.org/anthology/W12-2416
http://www.aclweb.org/anthology/E12-2021
http://www.aclweb.org/anthology/E12-2021
http://www.aclweb.org/anthology/P13-4001
http://www.aclweb.org/anthology/P13-4001

