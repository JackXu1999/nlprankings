



















































Proceedings of the...


D S Sharma, R Sangal and J D Pawar. Proc. of the 11th Intl. Conference on Natural Language Processing, pages 126–132,
Goa, India. December 2014. c©2014 NLP Association of India (NLPAI)

Creating a PurposeNet Ontology: An insight into the issues encountered
during ontology creation

Rishabh Srivastava
LTRC

IIIT Hyderabad
(rishabh.srivastava@research.,

Soma Paul
LTRC

IIIT Hyderabad
soma@)iiit.ac.in

Abstract

PurposeNet is an ontology based on the
principle that all artifacts (man-made ob-
jects) exist for a purpose and all its fea-
tures and relations with other entities are
giverened by its purpose. We provide
instances of ontology creation for two
varied domains from scratch in the Pur-
poseNet architecture. These domains in-
clude MMTS domain and recipe domain.
The methodology of creation was totally
different for the two domains. MMTS do-
main was more computaionally oriented
ontology while recipe domain required
a post-processing after manually entering
the data. The post-processing step uses hi-
erarchical clustering to cluster very close
actions. MMTS ontology is further used
to create a simple template based QA sys-
tem and the results are compared with a
database system for the same domain.

1 Introduction

This paper shows the procedure, advantages and
disadvantages of enriching the datasets. The raw
data we observed was different for the 2 domains.
Once we decide the structure, the MMTS domain
data was collected automatically. Although the in-
tegral actions had to be entered manually. On the
other hand, for the recipe domain, after the ini-
tial manual population of data, post-processing for
clubbing the nearest actions had to be carried out.

A question answering application in the domain
of MMTS train timing has also been talked about
in brief in this paper. The results are very satisfac-
tory as they show a significant improvement over
a similar RDBMS system. The prepared ontology
can be put to use in several applications. Ques-
tion answering, dialog systems, machine transla-
tion systems, etc.

1.1 Literature Review

Multiple attempts have been made in the past for
populating data in PurposeNet. Some have tried
automatic means while the others do it manu-
ally. (Singh and Srivastava, 2011a) have used sur-
face text patterns (STPs) to extract information di-
rectly from Wikipedia text. They had tried popu-
lating only some of the descriptor features of the
ontology. Other major works in automatic pop-
ulation for PurposeNet Ontology (Mayee et al.,
2010a; Mayee et al., 2010b) have also tried to
populate purpose of the artifact directly into Pur-
poseNet using surface text pattern, typed depen-
dency parser and neural networks. Although, the
results of the dependency parser are quite convinc-
ing, the methodology by both the aforementioned
techniques cannot be used to populate the com-
plete ontology. (Singh and Srivastava, 2011b) give
a deep insight into the various kinds of artifacts
one can find in the real world. They also give a
brief introduction to extract these into an ontology.
None of the ontologies created in the PurposeNet
architecture have been created completely using
automatic methods.

One key thing to notice here is that both the do-
mains chosen deal with abstract artifacts. When
we talk of the MMTS timing domain, we talk
about the artifact journey and MMTS train is just
a medium to complete that journey, whereas when
considering the recipe domain, we talk about an
abstract artifact (a knowledge which can aid us in
preparation of a physical artifact (Recipe is com-
parable to knowledge as mentioned by Singh and
Srivastava (2011b)) . PurposeNet till now has only
been populated for physical artifacts (vehicle and
hotel (Rallapalli and Paul, 2012) artifacts).

Recently, a very active interest can be seen in
the community for complex domains(Kambhatla
et al., 2012). A very early work dealing with
train-scheduling expert system has been reported126



in (Chang, 1988). They have made the system for
engineers to construct and schedule an AC elec-
trified railways. Chinese train ontology has been
created using UML has been presented in (Hu et
al., 2006).

Works of Kalem and Turhan (2005) try to ex-
plain how to create a recipe ontology in detail.
The difference however is that it captures only the
description part of the recipe and for the actual
recipe, redirects user to the url. It doesn’t cap-
ture the series of steps and intermediates required
for a recipe. Our work is much influenced by Col-
ibriCook (DeMiguel et al., 2008). Ontology de-
fined in TAAABLE is also nearly the same as Pur-
poseNet recipe ontology created by us (Badra et
al., 2008).

1.2 PuporseNet Architecture

The architecture of PurposeNet is described in de-
tails in (Sangal et al., 2013). There a few major
points we would like to emphasize here:

• All artifacts exist for a purpose, and all its components
aid the artifact to satisfy its purpose.

• PurposeNet defines 3 kinds of relations, namely decrip-
tor features, action features and action frames and rela-
tionships with other artifacts. They have listed a series
of relations below these 3 categories. With a change of
domain, one can change these listed relations, but one
cannot change the 3 basic relations. PurposeNet by de-
fault allows:

– 8 artifact-artifact relation
– 25 descriptor properties
– 3 action features (4 including maintenance)

which totals to 37 relations.

• Similar is the claim for action frame. Precondition,
subaction, outcome and semantic roles are enough to
complete an action frame. Although one can increase
the number of semantic roles according to a domain.
PurposeNet by default allows:

– 4 action frames (7 in nested)
– 21 semantic relations

which totals to 28 relations. Total default PurposeNet
relations equals to 65 relations.

• Descriptor features can also be changed according to
the domain.

Sanctity of these rules must be maintained, if
one wants to create a PurposeNet ontology. For
various domains, one needs to have a substantial
amount of data to understand all the possible vari-
ations.

1.3 Ontology reasoning

We emphasize on using OWL because firstly, it is
a W3C standard for ontologies and secondly, on-
tologies can help in inferencing of facts. Even a
proposition expressed in FOL (first order logic)
is more expressible than its sibling in relational
database. OWL supports description logic while
is a higher logic than FOL.

2 MMTS domain

Figure 1 shows the structure of the MMTS ontol-
ogy.

2.1 Entities, Actions and Relations

In this section we explain the additional features
provided to the Ontology which contribute to the
real richness of the Ontology.

2.1.1 Entities
The prime entities featuring in the ontology in-

clude:

1. Day

2. Money

3. Coach

4. Place

• Station
• Non-Station

5. Route

6. Ticket

7. Train

• AllDayTrain
• AllPublicTrain
• LadiesTrain
• SundayTrain

2.1.2 Actions

1. Buy

2. Travel

3. StopAtStation

2.1.3 Relations
We had to include certain relations in the

MMTS ontology as PurposeNet architecture
doesn’t completely clarify its support on timing,
duration, routes or stoppages. Apart from the rela-
tions declared by PurposeNet, we had to include:

1. atStation: to mark the stop of a train at a station.

2. comprisesOf (inverse belongsTo): to mark what a route
comprises of.

3. forRoute: to mark the stop is for what route.

4. hasStopNo (inverse ofTrain): to mark the stops of a
train.

1sr means semantic roles127



Artifact

Train

MMTS
Train

to go from one
place to another
in a local train

Coach

Ladies
Coach

General
Coach

Route Station

Train Stop X

Stop

Train Stop Y AbstractConcept

Duration

Time

subtype subtype
subtype

subtype

subtype subtype

subtype

subtype

subtype

subtype

subtype

purpose

component

theme:sr

subaction

precondition

outcome departureTime:sr

arrivalTime:sr

byTrain:sr

onRoute:sr

atStation:sr source:sr
destination:sr

haltDuration:sr

Figure 1: Figure shows the ontological structure of the MMTS train domain. Solid green boxes represent
entities, blue rounded boxes represent actions and white trapeziums represent states. The upper ontology
has not been shown for diagram clarity. 1

5. isTravelledBy (inverse travelsThrough): to mark the
trains which travel through a route.

6. reverseRouteOf (symmetric): to mark the route which
is reverse of a route.

7. runs: to mark the days on which a train runs.

8. arrivesOn: to mark the arrival time of a train at a sta-
tion.

9. departsAt: to mark the departure time of a train from a
station.

10. stationHaltTime: to mark the halt time of a train at a

station.

2.2 Algorithm for ontology population
The ontology population was primarily divided
into 2 sections. One of them dealt with the train
and stop information (Section 2.2.1), while ther
other with the actions part of the ontology (Sec-
tion 2.2.2).

2.2.1 Train Ontology
We start with the data from the MMTS website2

and then apply the algorithm 1 for data population.

2.2.2 Action Ontology
The major actions in the MMTS train domain

include:

2http://www.mmtstraintimings.in/

1. Pick a route.

2. For all the trains that run in the route start.

3. Start from the train with the earliest starting time.

4. Start from the first stop and proceed towards the last
and for each stop enter the following information.

• route
• train number

• station
• departing time

Algorithm 1: Algorithm shows the steps to
be followed to populate MMTS ontology using
MMTS online data.

1. buying a ticket

2. boarding a train at a
stop

3. travelleing

4. alighting a train at an-

other stop

They are basic actions and the information
about them cannot be found in texts. We have tried
to break these actions into more basic ones. eg. for
buying a ticket, one has to pay money and receive
ticket.

3 Recipe domain

We started populating this ontology from scratch,
manually. All the information was filled in the
PurposeNet framework. One of the interesting ob-
servations was that the recipe domain contained a
lot of states which cannot be named. We called128



preparation1

Artifact3
(Food)

Artifact1
(Food)

subaction1 subaction2

subaction12subaction11 intermediate1preparation2

Artifact2
(Food)

intermediate11

preparation3

patient1

location1

instrument1

subaction
precondition

birth

birthhasPatient

hasInstrument

hasLocation

subaction

subaction
subaction

birth

subaction subaction result

result precondition

precondition

precondition

result

result

theme

result

result

precondition

precondition

precondition

Figure 2: Figure shows the ontological structure of the recipe domain. Solid green boxes represent
entities, blue rounded boxes represent actions and white trapeziums represent states. Dashed arrows
represent the inferred relations.

them intermediates in our ontology. All the four
action features including preconditions, subac-
tions, semantic roles and outcomes, played a ma-
jor roles in describing the ontological details. Lo-
cation and themes were the two most prominent
semantic roles in the action ontology. To describe
an action or state, theme stated the artifacts. Fig-
ure 2 shows the structure of the recipe ontology.

3.1 Entities, Actions and Relations
3.1.1 Entities

A well structured list of Entities including the
major classes of food so that hierarchy can later
be explited has been included in the ontology. The
upper hierarchy is enlisted below.

1. Natural artifacts

• Spices
• Vegetables

2. Physical artifacts

• Food Artifact
– Item Food

Artifact

– Prepared
Food Ar-
tifact

– Processed
Food Arti-
fact

• Intermediate
Artifact

• Kitchen Arti-
fact

3.1.2 Actions
This is a long list of basic actions which are

used in the cooking domain. We have tried to build
a hierarchy of actions here. Some part of this work
is onfluenced by the work of Rajan (2013). The
upper action hierarchy include:

1. Add

• Apply
• Fill
• Sprinkle

2. Cool

3. Heat

• Boil
• Fry
• Roast

4. Make

• Prepare

5. Mix

• Knead

6. Place

• Cover

7. Press

8. Roll

9. Separate

• Break
• Chop

– Grate
• Cut
• Mash
• Peel
• Scoop

3.1.3 Relations
No special relation has been added as the core-

PurposeNet architecture is sufficient for recipe on-
tology.

3.2 Algorithm for ontology population
For every dish, we seached for a legitimate recipe
on the web and followed the algorithm 2.

3.3 Post-processing
Although the data populated by following algo-
rithm 2 was quite correct, we identified 2 major
areas where post processing was required.

1. We did not extract the components/ingredients required
for making a dish. Section 3.3.1 talks about the solution
of this problem.

2. There was a need for structuring the ontology. The

identification of problem is discussed in section 3.3.2129



• Continue from the first sentence. All the sentences
will have an action.

• If the action is already existant, link it.

• else, create the action and find the thematic roles.

• Mostly, there will be 4 thematic roles, which include:

– location

– instrument

– patient
– theme

There is a posibility of precondition also.

• if these are existing (or are raw material), add them, or
create an entry.

• for the outcome, if it is existing add it, else
– if the outcome is a named entity, i.e. it can be

called something, create the named entity,
– else, create an intermediate.

Algorithm 2: Algorithm shows the steps to pop-
ulate recipe ontology using web recipes.

while section 3.3.3 talks about the solution of this prob-

lem.

3.3.1 Extracting raw materials and
intermediates for a recipe

To identify the components of a dish, one in-
formation was to identify the preconditions. But
as we have already seen, the subactions as well as
the conditions can be recursive and so the identi-
fication of all the raw materials and intermediates
becomes somewhat difficult3. To ease it, we have
put in 4 set of rules in the ontology itself which are
as follows:

1. If the birth of an artifact needs another as precondition,
then the former requires latter.

2. Defines requires as a transitive entity.

3. If the requirement is a food artifact, then the food arti-
fact is a component.

4. If the requirement is a natural thing, then the natural

thing is a component.

3.3.2 Need for extraction of hierarchy
Although the process was quite straight-

forward, on studying recipes from various web-
sites, we got a different picture altogether.

• Same subdish is prepared by Multiple dishes
(aloo gobhi paratha: 1.5 cups mashed potatoes)

(aloo paratha: 2 1/2 cups boiled , peeled and mashed
potatoes)

3We have not differenciated core-coponents from other
components as of now.

• different recipe documents of the same recipe have dif-
ferent text representation. In our ontology, we try to
capture a generic version of those variation of dishes.

(aloo paratha source 1: hierarchy)

(aloo paratha source 2: flat)

• all the recipe documents consider different individuals
as their starting point (ingredients)

(3 medium potatoes or aloo)

(2 1/2 cups boiled , peeled and mashed potatoes)

• some recipe documents give chunked information
– for clarity

(Masala dosa: Preparing the Dosa Batter,
Preparing the potato filling-sabzi, Preparing the
Masala Dosa)

– sometimes chronology plays a part of subgroup-
ing sub part of the dishes
(Preparing the Dosa Batter: Cover and let the
batter ferment for 8-9 hours.)

• similar/trivial activities are given together in recipe
documents

(chop the aloo and add all the spice powders, green
chilies, salt.)

(add the mashed potatoes. add chopped green chilies.

mix well and keep aside.)

After the manual population of the PurposeNet
data with the recipe information step by step, we
got a rough data prepared. The next task at hand
was to cluster the similar elements in an ontology
so that the ontology can be properly structured.
Section 3.3.3 explains how we post-process the
ontology semi-automatically to create a structured
ontology.

3.3.3 Extracting hierarchy of action in recipe
domain

To begin with the experiments, we populated
the ontology with our previous algorithm. We then
apply agglomerative hierarchical clustering on this
data to identify the sub-clusters/subgraphs which
are very close. As the hierarchical clustering re-
quires a metric, we chose the metrics as the fre-
quency of edges required for making all the dishes
(equations 1, 2 and 3).

FrequencySet(FS) = ν(e),

∀e ∈ all edges in the graph (1)

max(FS) = argmax(FS) (2)

merge(FS(i)), ∀n(i) = k,
where max(FS) ≥ k ≥ threshold (3)130



To identify the clusters in the recipes, we iden-
tified the edges which were most common in the
various recipes. We fixed a certain threshhold and
being above that threshhold the edges were se-
lected. A subgraph of the selected edges is created
and the outgoing edge of this subgraph is declared
as the output of the subgraph. A subaction consist-
ing all the actions and relations of tbis subgraph is
entered into the ontology. The actions for which
these subactions were a subaction is replaced with
a higher subaction.

An example: Suppose we enter 5 dishes, 3
of which need a peeled boiled potato. So when
we traverse the graph once to enquire the edges
being traversed, we find the edges of boiling a
potato, getting boiled potato as an outcome, peel-
ing a potato and the outcome boiled peeled potato
thrice. Now we create a subgraph of these 4 edges,
with boiled peeled potato as outcome. We club
these 4 into a single cluster.

Figure 3 represents the process of clubbing sub-
actions in which Figure 3a shows 3 dishes all of
which contain boiled and peeled potato either as
a precondition or as a result of some subactions.
Figure 3b shows the result of running the algo-
rithm after which a new action prepare peeled
boiled potato is introduced which has the subac-
tion as boil potato and peel potato.

3.3.4 Algorithm
Algorithm 3 is used for extracting the sub-

graphs.

4 QA Application

To test the effectiveness of the MMTS ontology,
we created a dummy QA application which an-
swers questions related to the MMTS train tim-
ings. The input was html templates, which con-
tained 20 different types of questions and these
were internally mapped to sparql (PrudHommeaux
et al., 2008) queries. The pellet reasoner was run-
ning over the MMTS ontology. The system is
compared with a similar system created in mysql
(RDBMS). Table 1 shows the results of the two
system for same questions.

The results clearly show that by using an ontol-
ogy one can answer a lot more questions by just in-
ferring than answering by the information already
provided. Traversal is not a very positive step, but
at least one does not need to provide an extra in-
formation for the same. 14 questions out of 20 are

• For all the food artifacts, choose their preparation
actions and for all such preparations, do the following,

– Create a graph around the preparations.
– create an indices of edges with the preparation.
– While creating the dag keep an account of all the

edges traversed.
– Keep on incrimenting the edges as and when

they are traversed.

• Sort the edges according to the frequency of their
occurence.

• Set a threshhold below which the edges will not be
considered.

• for all the frequqncies try to form a subgraph.

• The final state(s) will be taken as the outlet.

• Check in the index and in all the dishes where any one
of the considered edges occurs, replace the subactions
enlisted which occur in subgraph with a precondition
of the final state in the obtained in the above step.

Algorithm 3: Algorithm shows the steps to post
process the recipe domain ontology.

Table 1: Table shows the number of questions an-
swered by both the system categorized by the type
of answer required. The numbers in red indicate
the strenghth of an ontology

.

Category DB OWL
Inference based answering 8 14
Information based answering 6 2
Traversal based answering 5 4
N.A. 1 0
Total 20 20

inference based and 4 are traversal based for an on-
tology. Only information for 2 questions needed to
be specifically provided.

5 Summary

In this paper, we have explained the various data
preparation techniques used in this work. A de-
tailed explaination of the MMTS and recipe do-
main that follow with the structural changes and
entity, action and relations is introduced. The
methodology of creation was totally different for
the two domains emphasizing on the point that a
generic framework working for all domains and all
resource types cannot be prepared. A small appli-
cation for QA is also developed and comparison
gives Ontology a clear upper hand over RDBMS
system.

131



peeled
boiled potato

peel potatoboil potato

boiled potato

Prepare
Dish1

Other
subactions1

Prepare
Dish2

Other
subactions2PrepareDish3

Other
subactions3

subaction subaction

subaction
subaction

subaction

result precondition result

precondition

subactionsubaction

(a) Figure shows the ontological structure of the recipe domain
with example of 3 dishes.

peeled
boiled potato

prepare peeled
boiled potato

(Introduced action)

peel potatoboil potato

boiled potato

Prepare
Dish1

Other
subactions1

Prepare
Dish2

Other
subactions2

Prepare
Dish3

Other
subactions3

subaction subaction

subaction

subaction
subaction

result
precondition

result
precondition

subaction

subaction

result

(b) Figure shows the change in the ontological structure after
the grouping of identical actions. boil potato and peel potato
form a cluster and prepare boiled peeled potato takes its place
wherever possible. They become a subaction of the newly in-
troduced action.

Figure 3: Figure shows the how the most frequently occuring action is combined to give a new infor-
mation keeping the original information intact. Solid green boxes represent entities, rounded blue boxes
represent actions and white trapeziums represent states. Dashed lines represent inferd infoormation.

References
Fadi Badra, Rokia Bendaoud, Rim Bentebibel, Pierre-

Antoine Champin, Julien Cojan, Amélie Cordier,
Sylvie Després, Stéphanie Jean-Daubias, Jean
Lieber, Thomas Meilender, et al. 2008. Taaable:
Text mining, ontology engineering, and hierarchical
classification for textual case-based cooking. In 9th
European Conference on Case-Based Reasoning-
ECCBR 2008, Workshop Proceedings.

C Chang. 1988. Development of a train-scheduling
expert system for ac railway electrification. In Con-
trol, 1988. CONTROL 88., International Conference
on, pages 259–264. IET.

Juan DeMiguel, Laura Plaza, and Belén Dı́az-Agudo.
2008. Colibricook: A cbr system for ontology-
based recipe retrieval and adaptation. In ECCBR
Workshops, pages 199–208.

Xiao-Hui Hu, Xing-she Zhou, and Jian-Wu Dang.
2006. A designing method of simulation software
for chinese train control system based on hybrid
software agent model. In Machine Learning and Cy-
bernetics, 2006 International Conference on, pages
148–153. IEEE.

Güler Kalem and Çiğdem Turhan. 2005. Semantic
web application: Ontology-driven recipe querying.
Atılım University.

Nanda Kambhatla, Sachindra Joshi, Ganesh Ramakr-
ishnan, Kiran Kate, and Priyanka Agrawal, editors.
2012. Proceedings of the Workshop on Question An-
swering for Complex Domains. The COLING 2012
Organizing Committee, Mumbai, India, December.

P. Kiran Mayee, R Sangal, and S Paul. 2010a. Auto-
matic extraction and incorporation of purpose data
into purposenet. In Computer Engineering and
Technology (ICCET), 2010 2nd International Con-
ference on, volume 6, pages V6–154. IEEE.

P. Kiran Mayee, Rajeev Sangal, and Soma Paul. 2010b.
Neural networks based detection of purpose data in
text. In ICT, pages 606–609.

Eric PrudHommeaux, Andy Seaborne, et al. 2008.
Sparql query language for rdf. W3C recommenda-
tion, 15.

Kavitha Rajan. 2013. Understanding verbs based on
overlapping verbs senses. ACL 2013, page 59.

Sruti Rallapalli and Soma Paul. 2012. Evaluating
scope for interpreting nominal compounds using on-
tology.

Rajeev Sangal, Soma Paul, and P Kiran Mayee. 2013.
Purposenet: A knowledge base organized around
purpose. In Conceptual Structures for STEM Re-
search and Education, pages 29–30. Springer.

Chandni Singh and Rishabh Srivastava. 2011a. Pur-
poseNet: Knowledge Representation and Extrac-
tion. PDPM-Indian Institute of Information Tech-
nology Design and Manufacturing Jabalpur.

Chandni Singh and Rishabh Srivastava. 2011b. Study
and population of artifacts. International Journal of
Computer Technology and Electronics Engineering,
(NCETCSIT-Dec’2011):1–5.

132


