




































Proceedings of the 12th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+12), pages 48–57,
Düsseldorf, Germany, June 29 - July 1, 2016.

Argument linking in LTAG:
A constraint-based implementation with XMG

Laura Kallmeyer and Timm Lichte and Rainer Osswald and Simon Petitjean
University of Düsseldorf, Germany

{kallmeyer,lichte,osswald,petitjean}@phil.hhu.de

Abstract

This paper develops a first systematic
approach to argument linking in LTAG,
building on typologically oriented work in
Van Valin (2005). While Van Valin’s ar-
gument linking mechanism is procedurally
defined, we propose a constraint-based im-
plementation. The advantage is that we
can separate between the linguistic gen-
eralizations to be captured and algorith-
mic considerations. The implementation is
couched into the metagrammar framework
eXtensible MetaGrammar (XMG).

1 Introduction

The syntax-semantics interface of Lexicalized
Tree Adjoining Grammar (LTAG) builds on the as-
sumptions that (i) the elementary tree of a predi-
cate contains slots for the arguments of the predi-
cate, (ii) this elementary tree is paired with a se-
mantic representation with semantic arguments,
(iii) there is a linking between syntactic argument
slots and semantic arguments that makes sure that
the filling of an argument node in the syntax trig-
gers the insertion of a corresponding semantic rep-
resentation into the linked semantic argument po-
sition. This holds for the unification-based ap-
proach from Kallmeyer and Joshi (2003), Gar-
dent and Kallmeyer (2003) and Kallmeyer and
Romero (2008) using predicate logic, for the ap-
proach based on synchronous TAG (Shieber, 1994;
Nesson and Shieber, 2006; Nesson and Shieber,
2008) and also for the frame-based approach of
Kallmeyer and Osswald (2013). However, none of
these approaches has implemented a theory which
explains why only certain patterns of argument
linking are allowed. In Fig. 1, for instance, the
elementary tree for ate is paired with the upper
frame while the lower frame is not grammatical

S

VP[E= 0 ]

NP[I= 2 ]V

ate

NP[I= 1 ]

0






eating

AGENT 1

THEME 2






0






eating

AGENT 2

THEME 1






Figure 1: Simple linking example

in combination with this tree because of the incor-
rect linking. The AGENT has to be contributed by
the subject while the THEME slot is filled via the
object substitution node.

The principles and constraints underlying link-
ing have been extensively investigated (Levin and
Rappaport Hovav, 2005; Wechsler, 2015). Dowty
(1991), for instance, introduces proto-AGENT and
proto-PATIENT as intermediate roles linking syn-
tax to semantics. Van Valin (2005) presents an
elaborated linking algorithm based on the macro-
roles ACTOR and UNDERGOER and on the actor-
undergoer-hierarchy. This algorithm is not fully
formalized, however, and it is formulated in a
procedural way that mixes constraints which ex-
press linguistic generalizations with algorithmic
aspects. The latter point is problematic insofar
as Van Valin’s linking system is intended to be
used both for language understanding and lan-
guage generation. It is thus desirable for a for-
malization and implementation of the system to
keep the principles and constraints separate from
aspects of processing order.

Based on Van Valin’s proposal, this paper pro-
vides a constraint-based implementation of link-
ing principles that captures the systematic relation
between syntactic arguments and semantic roles.
These constraints restrict the set of possible ele-

48



mentary pairs of tree and semantic representation.
In other words, they act on the level of elementary
structures in the grammar and are therefore part
of the metagrammar, together with syntactic tree
fragments and fragments of semantic representa-
tions. This is the part of the grammar that pro-
vides a systematic constraint-based definition of
the set of elementary trees along with the seman-
tic representations they can be paired with (Crabbé
and Duchier, 2004; Duchier et al., 2004). We will
use the metagrammar compiler XMG (Crabbé et
al., 2013; Lichte and Petitjean, 2015) with frames
as semantic representations (Kallmeyer and Oss-
wald, 2013). Since argument linking is indepen-
dent from the choice of the semantic representa-
tion, our analysis could also be applied to an LTAG
syntax-semantics interface using one of the other
frameworks mentioned above.

2 The syntax-semantics interface

We assume familiarity with the basic notions of
LTAG (Joshi and Schabes, 1997; Abeillé and
Rambow, 2000), enriched with syntactic feature
structures in the usual way (Vijay-Shanker and
Joshi, 1988).

Following Kallmeyer and Osswald (2013), we
pair syntactic trees with frame-semantic represen-
tations, which instantiate a slightly extended vari-
ant of typed feature structure. An example is given
in Fig. 2. We use interface features on the syn-
tactic nodes that are responsible for triggering se-
mantic composition (i.e., frame unification) via
the syntactic feature unifications during substitu-
tion and adjunction. These features here are I (for
“individual”) and E (for “event”), whose values are
variables that also occur in the frames. Upon sub-
stituting the elementary tree of John into the sub-
ject NP slot of the elementary tree of ate, the vari-
ables 1 and 3 get equated, hence triggering the
unification of the frame of John with the AGENT
component of the frame of ate.

In the rest of the paper, we will be focusing on
the properties of single elementary entries of verbs
such as ate.

3 Constraints on elementary entries

Given that in LTAG, the set of composition op-
erations is rather small, the actual domain of lin-
guistic theorizing lies mainly in the way elemen-
tary entries like that of ate in Fig. 2 are designed,
or rather constrained. Hence, constraints pertain-

NP[I= 3 ]

John

3

[

person
]

S

VP[E= 0 ]

NP[I= 2 ]V

ate

NP[I= 1 ]

0







eating

AGENT 1

THEME 2







NP[I= 4 ]

pizza

4

[

pizza
]

Figure 2: Sample derivation

ing to the tree structure, the frame-semantic rep-
resentation, and the linking among the two make
up an important part of theories expressed within
this framework. These constraints on elemen-
tary structures constitute what is commonly called
a metagrammar, the general outline of which is
shown in Fig.3.

3.1 Constraints on tree structure

The most explicit and systematic proposal to
constrain the shape and structure of elementary
trees was made in works of Robert Frank (1992;
2002).1 Based on the Fundamental TAG Hypothe-
sis (“Every syntactic dependency is expressed lo-
cally within an elementary tree.”), the inner struc-
ture (Condition on Elementary Tree Minimality)
and the number of non-terminal leaf nodes (θ-
Criterion for TAG) are covered, the latter aspect,
of course, being the more relevant here. The θ-
Criterion for TAG states that there is a bijective
mapping between “θ-roles”, i.e. semantic argu-
ments, and non-terminal leaf nodes. This is met,
for example, in the tree of ate based on the shown
eating frame. Yet there is no particular constrain-
ing on what this mapping might look like. In other
words, it is unclear how to prevent the deficient
linking pattern in Fig. 1 from coming into exis-
tence. This is exactly the gap that our contribution
is supposed to fill.

One important remaining issue is the status of
the θ-Criterion for TAG when dealing with se-
mantic frames. In its original formulation, the
θ-Criterion requires the numbers of syntactic and
semantic arguments to be equal, whereas modi-
fiers are neglected. However, in a frame, there is
no principled distinction between arguments and
modifiers anymore – both get represented as or-
dinary functional attributes. Hence, combining

1But see also Abeillé and Rambow (2000).

49



the θ-Criterion, as is, with frame semantics would
have the unwanted effect that modifiers are repre-
sented as nonterminal leaves just like arguments.
This is unwanted because it would increase the
number and size of elementary trees massively,
though not ad infinitum due to the functional na-
ture of frame attributes (therefore being reminis-
cent of the treatment of optional arguments). Pos-
sible remedies could be to apply the θ-Criterion
to descriptions of lexical frames where modifiers
have not yet entered, or to insert a mediating va-
lency layer that helps to abstract away from the full
set of semantic roles (cf. Lichte, 2015). However,
this discussion touches the issue of argument-
modifier distinction more generally, and therefore
should be treated elsewhere.

3.2 Constraints on frame structure

Following Kallmeyer and Osswald (2013), we for-
malize semantic frames as typed feature struc-
tures with base labels and relations. The frame
constraints used in this paper are basically Horn
clauses built from atomic attribute-value descrip-
tions of the form P : a and P

.
=Q, where P and Q

are (possibly empty) feature paths and a is a type
(including ⊤ and ⊥). For example, the constraint
that eating involves an ACTOR and a THEME but no
PATH can be formalized in this logic as follows:

eating ⇒ ACTOR :⊤ ∧ THEME :⊤
eating ∧ PATH :⊤ ⇒ ⊥

3.3 Constraints on argument linking

The linking constraints in the metagrammar ba-
sically combine tree constraints with frame con-
straints. For instance, regarding the elementary
entry of ate in Fig. 2, one such constraint could be
paraphrased as “in an active sentence, the AGENT is
realized as the subject, and the THEME is realized
as the object”. We will learn about a systematic
and typologically oriented linking theory in Sec-
tion 5, which will be the starting point for our im-
plementation in Section 6. The overall structure of
the metagrammar, together with the metagrammar
compiler, is shown in Fig. 3.

4 eXtensible MetaGrammar

The framework of eXtensible MetaGrammar
(XMG, Crabbé et al., 2013) provides description
languages and dedicated compilers for generating
a wide range of linguistic resources.2 Descriptions

2https://sourcesup.cru.fr/xmg/

tree

constraints

frame

constraints

linking

constraints

metagrammar compiler

language-specific

elementary constructions

universal + 

language-specific

Figure 3: Metagrammar components

are organized into classes, alluding to the class
concept in object-oriented programming. Simi-
larly, classes have encapsulated name spaces and
inheritance relations may hold between them. The
crucial elements of a class are dimensions. They
can be equipped with specific description lan-
guages and are compiled independently, thereby
enabling the grammar writer to treat the levels of
linguistic information separately.

As our focus is on argument linking, the follow-
ing three class dimensions, which contain the three
different sorts of constraints mentioned in Fig. 3,
are most relevant to us: <syn> holds tree con-
straints that express dominance and precedence re-
lations among nodes. Moreover, the nodes may
carry (untyped) feature structures. <frame>
holds frame descriptions, i.e. descriptions of typed
feature structures. Feature structure constraints,
on the other hand, are specified globally outside
classes. Finally, <iface> is an interface dimen-
sion where (non-typed) feature structures are used
to share information between other dimensions
and classes. This dimension will obviously serve
as a place for expressing linking constraints. The
general structure of a class then looks as follows:
class classname

import someOtherClass[]

export ?someVariable

declare ?someVariable

{
<syn>{ ... };
<frame>{ ... };
<iface> { ... }

}

Note that import, export, and declare be-
have similarly to the corresponding constructs in
object-oriented programming. The operator ; ex-

50



presses the conjunction of contents. One can also
express disjunction with the operator |.

The description language used inside <frame>
is a simple recursive bracket notation with the fol-
lowing ingredients:
?variable1 [

type1, type2 , ... ,

feature2:?variable2,

feature3:?variable3[ ... ]

]

Variables here correspond to the boxed variables
in Fig. 1 and 2 and are optional as well. Also
note that there can be more than one atomic type
specified (making up conjunctive types). Fea-
tures and their values are separated with the colon
(:), and values can be either variables, or feature
structures. See Lichte and Petitjean (2015) for
a detailed definition. The descriptions inside the
<iface> dimension look very similar, the main
difference being that the feature-value separator is
the equal sign (=) for historical reasons. As far as
the description language in <syn> is concerned,
we will ignore it for now and use graphical repre-
sentations in the further presentation.

As mentioned before, feature structure con-
straints (and type constraints), which hold
globally for all frame structures inside the classes,
are specified externally (see, again, Lichte and
Petitjean, 2015). They are constructed in the fol-
lowing way, building on the description language
from (Kallmeyer and Osswald, 2013) as sketched
in Section 3.2:

Constraint ::= Description -> Description

Description ::= type ... type |
feature ... feature:type |
feature ... feature = feature ... feature

-> is the implication operator, feature ...
feature stands for a path in the feature

structure, and feature ... feature =
feature ... feature for a path equation.
The atomic types which can be used in the con-
straints are defined by the user. To this set are
added the predefined types + and −, standing for
⊤ (the most generic type) and ⊥ (the “false” type).

Note that constraints are treated differently in
the compiler: type constraints (with only types on
the left-hand side) are precompiled into a type hi-
erarchy, that is, the constraints on types are used
to compute the set of valid conjunctive types. The
result is a maximal model of the type constraints,
meaning that all combinations of atomic types
which are not explicitly prohibited are authorized.

The remaining set of constraints is checked at run-
time.

Based on a set of constraints, XMG compiles
full models (i.e., trees and frames such as in
Fig. 2), which then enter into parsing. Hence, un-
der this perspective, the metagrammar constraints
act as lexical constraints proper. Note, however,
that metagrammar constraints could also be used
in parsing more directly (de la Clergerie, 2013).

5 Argument linking in Van Valin (2005)

In this section, we describe the core general-
izations on argument linking proposed in Van
Valin (2005), which will serve as a basis for
our constraint-based implementation of argument
linking in elementary trees. The basic idea is to as-
sign the macroroles ACTOR (AC) and UNDERGOER
(UG) to certain semantic arguments, which are
then syntactically realized in a specific way that
depends on the language and the voice type ex-
pressed in the elementary tree, among others. For
the purposes of this paper, we put aside the link-
ing of a possible third, non-macrorole argument,
which is typically realized with oblique case or by
a prepositional phrase.

The relation between semantic roles and macro-
roles is captured in the actor-undergoer hierar-
chy shown in Fig. 4. Since our approach employs
frame-semantic representations, we do not make
use of the positional encoding in logical structures
sketched in the top line of the figure but build di-
rectly on the associated semantic roles. Depend-
ing on its semantic role, an event participant ob-
tains a higher or a lower rank with respect to
the hierarchy. For example, Fig. 4 implies that
a STIMULUS argument gets assigned a lower rank
than an EXPERIENCER argument. (Note that rank 1
is considered the highest rank while rank 4 is the
lowest rank.)

The relation between the actor-undergoer hier-
archy and the macrorole assignment is then as fol-
lows: If a rank 1 argument is present, it is the actor.
If a rank 4 argument is present, it is the undergoer.
A rank 2 argument is the actor if there is no rank
1 argument. A rank 2 argument is the undergoer if
there is a rank 1 argument and no rank 3 or rank 4
undergoer. A rank 3 argument is the undergoer if it
is not the actor and if there is no rank 4 argument.
A rank 3 argument cannot be an actor unless it is
at the same time a rank 1 argument. In this latter
case, it counts as rank 1 in our constraints.

51



UNDERGOERACTOR

Arg. of
DO

1st arg. of
do′(x, . . .)

1st arg.
of P(x,y)

2nd arg.
of P(x,y)

Arg. of
stat. P(x)

AGENT EFFECTOR
MOVER
ST-MOVER
L-EMITTER
S-EMITTER
PERFORMER
CONSUMER
CREATOR
OBSERVER
USER

LOCATION
PERCEIVER
COGNIZER
WANTER
JUDGER
POSSESSOR
EXPERIENCER
EMOTER
ATTRIBUTANT
IDENTIFIED
VARIABLE

THEME
STIMULUS
CONTENT
DESIRE
JUDGMENT
POSSESSED
SENSATION
TARGET
ATTRIBUTE
IDENTITY
VALUE
PERFORMANCE
CONSUMED
CREATION
IMPLEMENT

PATIENT
ENTITY

rank 1 rank 2 rank 3 rank 4

Figure 4: Actor-undergoer hierarchy with seman-
tic roles; adapted from Van Valin (2005, p. 58)

Macrorole assignment is only one of the steps of
the linking algorithm laid out in Van Valin (2005);
the subsequent step is concerned with the morpho-
syntactic realization of arguments based on the
assigned marcroroles. This step is dependent on
the language type and it is also sensitive to voice-
modulation, among others. In the case of English,
for instance, if a transitive verb is anchored to an
active-voice elementary tree, which can be seen
as the default anchoring, then the highest ranking
argument, i.e. the actor, is realized as the privi-
leged syntactic argument, i.e. in subject position,
while the undergoer is realized as the direct ob-
ject. In passive voice, on the other hand, the
undergoer becomes the privileged syntactic argu-
ment while the actor may be optionally realized
by a by-clause. The general observation is that
in languages with an accusative syntactic system
such as German and English, the highest ranking
argument is by default realized as the privileged
syntactic argument. In particular, the macrorole
assignment does not matter for intransitive verbs
(since there is only one argument); the single argu-
ment becomes the privileged syntactic argument,
which receives nominative case in German (1-b).

(1) a. Der
the.NOM

Junge
boy[AC].NOM

zerbrach
broke

den
the.ACC

Teller.
plate[UG].ACC

b. Der
the.NOM

Teller
plate[UG].NOM

zerbrach.
broke

In ergative languages, by contrast, the lowest argu-

ment with respect to the hierarchy is by default se-
lected as the privileged syntactic argument, which
appears in the absolutive case. If the language is
syntactically accusative but morphologically erga-
tive then the highest ranking argument becomes
the privileged syntactic argument while the lowest
ranking argument receives absolutive case. This is
illustrated in the following Warlpiri examples (Van
Valin, 2005, p. 109; taken from Hale 1973): the
actor in (2-a) and the undergoer in (2-b) both re-
ceive absolutive case.

(2) a. Ngaju-∅
1SG[AC]-ABS

ka-rna
PRES-1SG

purla-mi.
shout-NPAST

‘I am shouting.’
b. Ngaju-rlu

1SG[AC]-ERG
ka-rna-∅
PRES-1SG-3SG

wawiri-∅
kangaroo[UG]-ABS

pura-mi.
cook-NPAST

‘I am cooking the kangaroo.’

As mentioned at the beginning of this section,
the linking rules just sketched capture only the
very core of Van Valin’s system, namely the case
of intransitive and simple transitive verbs where
all arguments are macrorole arguments. In addi-
tion, the lexicon may contain verbs with two argu-
ments of which only one is a macrorole argument,
which means that the other argument is realized
by an oblique case or a prepositional phrase ac-
cording to certain rules. Similarly, there are rules,
which are partly language-specific, for assigning
dative, instrumental or another oblique case to the
non-macrorole argument of verbs with three argu-
ments. Moreover, these verbs often permit vari-
able undergoer choice, which is then reflected in
alternations such as the dative and the locative al-
ternation. Finally, languages differ with respect
to whether the privileged syntactic argument of a
construction is restricted to macrorole arguments
(as in German or Italian), or whether also non-
macrorole arguments can serve as the privileged
syntactic argument (as, e.g., in Icelandic). While
the implementation presented in the following is
restricted to the basic linking of macroroles de-
scribed above, the long-term goal is to succes-
sively extend the implementation towards a full
coverage of Van Valin’s linking system.

52



6 Constraint-based implementation of

Van Valin (2005)

6.1 Universal constraints on semantic frames

As a first element of our linking system, we de-
fine universal constraints on semantic roles and on
macroroles. Macroroles are taken to be attributes
in our semantic frames, just like semantic roles.

A selection of these constraints is given in
Fig. 5. The constraints are notated with the
XMG syntax. They correspond to formulas in the
frame logic introduced in Kallmeyer and Osswald
(2013), the last constraint in Fig. 5 for instance
corresponds to change-of-state ⇒ PATIENT

.
=

RESULT PATIENT in this logic. The first two con-
straints express the fact that rank 1 arguments (=
EFFECTOR) are actors while rank 4 arguments are
undergoers. The next two constraints are two of
many constraints on hierarchical relations between
roles. The roles listed in Fig. 4 under a specific
rank, for instance rank 2, are hierarchically or-
dered. The last three constraints in this list are
constraints for lifting semantic roles from the re-
cursive structure of an event to a higher level. Take
for instance the frame at the top of Fig. 6 for a
smashing event, which is analyzed as a causation
involving an activity as the causing event. The
5th constraint in Fig. 5 tells us that in a causa-
tion event, the EFFECTOR of the embedded CAUSE
is also the EFFECTOR of the entire causation.

To support these constraints, XMG’s frame di-
mension has been extended, compared to Lichte
and Petitjean (2015), such that it allows not only
single attributes but also sequences of attributes on
the left-hand sides of the φ1->φ2 implications.

The example in Fig. 6 shows how these con-
straints enrich the frame structure by adding new
attributes to it. At the top, we have the frame rep-
resenting lexical semantics of smash. A smashing
event is a causation where an effector performs
some activity and, as a result of this, a patient
changes its state into the state of being smashed.
The second frame in Fig. 6 shows the enriched
frame we obtain when applying the constraints
from Fig. 5 to this first frame.

6.2 Semantic argument classes

The universal constraints introduced so far take
care of the fact that rank 1 arguments are actors
and rank 4 arguments are undergoers. But for rank
2 and rank 3 arguments, macrorole assignment is
more complicated. In the following, we introduce

0
















causation

CAUSE

[

activity

EFFECTOR 1

]

EFFECT







change-of-state

PATIENT 2

RESULT

[

smashed-state
]






















Applying the constraints from Fig. 5 yields

0


































causation

EFFECTOR 1

ACTOR 1

PATIENT 2

UNDERGOER 2

CAUSE






activity

EFFECTOR 1

ACTOR 1






EFFECT














change-of-state

PATIENT 2

UNDERGOER 2

RESULT






smashed-state

PATIENT 2

UNDERGOER 2




















































Figure 6: Frame for smashing

XMG classes for these arguments and for the dif-
ferent ways of linking them to the macroroles. In
contrast to the universal constraints, these classes
describe possible frame fragments, i.e., they are
used as being existentially quantified whenever
they are integrated into some class that gets com-
piled in the MG. Fig. 7 gives the classes for the
arguments with a disjunction of the possible se-
mantic roles. In all the XMG classes given in this
section, ?e and ?x are XMG variables that are al-
ways exported.

Concerning macrorole assignment, we have to
make sure that for combinations of these argu-
ments, macroroles are assigned in accordance with
the constraints stated above. To this end, we use
interface features. Interface features are a spe-
cial dimension in our XMG classes, the <iface>
dimension. They form an untyped non-recursive
feature structure. When combining two classes,
the interface features have to unify. In other words,
their values (where specified) have to be equal.
For our purposes, we need the following link-
ing interface features: A feature highest-rank
that gives the highest rank in the combination of
arguments, and boolean features und-lower2
and und-lower3 that indicate whether there
is an undergoer of rank lower than 2 (resp. 3).

53



constraint explanation
effector:+ -> effector=actor if an effector exists, then it is the actor

patient:+ -> patient=undergoer a patient is always an undergoer

mover:+ -> mover=effector a mover is always an effector

emoter:+ -> emoter=experiencer an emoter is always an experiencer

cause effector:+ ->

cause effector=effector

if the cause of a causation has an effector, then
this is also the effector of the entire causation

effect patient:+ ->

effect patient=patient

if the effect of a causation has a patient, this is
also the patient of the causation event

change-of-state ->

patient=result patient

the patient of a change-of-state is the patient of
the embedded result state

Figure 5: Universal constraints for semantic roles and macroroles

class argRank1

<frame>{?e[event, effector:?x] |
?e[event, mover:?x] |

?e[event, st-mover:?x] | ...}

class argRank2

<frame>{?e[event, location:?x] |
?e[event, perceiver:?x] | ...}

class argRank3

<frame>{?e[event, theme:?x] |
?e[event, stimulus:?x] | ...}

class argRank4

<frame>{?e[event, patient:?x] |
?e[event, entity:?x] }

Figure 7: XMG classes for rank i arguments

These features are needed for macrorole assign-
ment. In addition, we also need the following in-
terface features for linking the resulting semantic
frame with a syntactic tree: features ranki that
give the frame node of the argument with rank i,
if it is present, and features highest-arg and
lowest-arg where highest-arg gives the
frame node of the argument with the highest rank
while lowest-arg gives the one with the low-
est rank provided there exists a higher ranked ar-
gument.

As a further step of factorizing possible argu-
ment realizations in the metagrammar, for each
rank, we then introduce new classes for argu-
ments of this rank a) being an actor, b) be-
ing an undergoer, c) without macrorole and d)
not realized (if applicable). Fig. 8 gives these
classes for rank 2, where all four cases are pos-
sible. For each possibility, the interface features
are set accordingly. For instance, if a rank 2
argument is an undergoer (see the second class
in Fig. 8), there has to be a higher argument

class Rank2_actor

import argRank2[]

<frame>{?e[event, actor:?x]};
<iface>{[highest-rank=r2,highest-arg=?x,

rank2=?x]}

class Rank2_undergoer

import argRank2[]

<frame>{?e[event,undergoer:?x]};
<iface>{[highest-rank=r1,rank2=?x,

und-lower2=false,lowest-arg=?x]}

class Rank2_no_macrorole

import argRank2[]

<iface>{[highest-rank=r1,
und-lower2=true,rank2=?x]}

class Rank2_no_arg

<frame>{?e[event]}

Figure 8: Rank-specific XMG classes for the dif-
ferent macrorole assignments: classes for rank 2

(highest-rank=r1) and there cannot be any
other lower undergoer (und-lower2=false,
und-lower3=false).

The classes for rank 3 arguments are given in
Fig. 9. Such an argument can either be the un-
dergoer (no rank 4 argument is present) or with-
out macrorole (there is a rank 4 argument) or not
realized. In the latter case, captured in the class
class Rank3 no arg, the interface features
state that either there is no undergoer lower than
rank 2, which allows for combinations with the
first two rank 2 classes in Fig. 8. Or there is a rank
4 undergoer. In this case, a rank 2 undergoer is ex-
cluded via the assignment und-lower2=true.

Finally, for each rank i, we have a class Ranki
that is just a disjunction of the different possibili-
ties captured in the Ranki ... classes, and, fur-
thermore, there is a general class event that com-

54



class Rank3_undergoer

import argRank3[]

{<frame>{?e0[event, undergoer:?x]};
<iface>{[und-lower3=false,

und-lower2=true, rank3=?x,

lowest-rank=r3, lowest-arg=?x]}}

class Rank3_no_macrorole

import argRank3[]

{<iface>{[und-lower3=true, rank3=?x]}}

class Rank3_no_arg

<frame>{?e[event]};
{<iface>{[und-lower2=false]} |

<iface>{[und-lower2=true,
und-lower3=true]}}

Figure 9: Classes for different macrorole assign-
ments for arguments of rank 3

bines these Ranki classes (see Fig. 10).

class Rank2

{?arg=Rank2_actor[] |
?arg=Rank2_no_arg[] |

?arg=Rank2_undergoer[] |

?arg=Rank2_no_macrorole[]};
?e=?arg.?e

class event

import Rank1[] Rank2[] Rank3[] Rank4[]

Figure 10: XMG classes Rank2 and event

XMG compiles the class event into all pos-
sible semantic role combinations while comput-
ing the correct macrorole assignments, creating
thereby all possible event frames.

6.3 Linking syntax and semantics

The part of the MG described in the previous two
sections is language-independent. Depending on
the language, the arguments with the highest and
the lowest rank are realized differently in the syn-
tax (see section 5). In the following, we will only
introduce the XMG classes for syntax-semantics
linking for English.

Recall that the interface feature
highest-arg gives the argument with the
highest rank and that lowest-arg gives the
one with the lowest, provided there is a higher
one. Besides these two, we also use the interface
features ranki for linking.

A simplified version of the syntactic XMG
classes implemented for English is given in
Fig. 11. The two classes for subject and object
combine into the class n0Vn1 for transitive verbs.
Note that in our actual implementation, Subject
if further decomposed and, furthermore, a range of

class Subject

<syn>{ S

VP[I=?e]

V[VOICE=?Voice]

NP[I=?arg1]

};
{{?Voice=active;
<iface>{[highest-arg=?arg1]}} |

{?Voice=passive;
<iface>{[lowest-arg=?arg1]}}}

class Object

<syn>{ VP[I=?e]

NP[I=?arg2]V };
{<iface>{[rank2=?arg2]} |
<iface>{[rank3=?arg2]} |
<iface>{[rank4=?arg2]}}

class n0Vn1

import Subject[] Object[] event[]

Figure 11: Language-specific XMG classes for
English (simplified)

additional boolean interface features is used in or-
der to constrain the combinations of arguments of
different ranks in the two syntactic argument slots.
The Subject class expresses that in active sen-
tences, the highest-arg fills the subject slot
while in passive sentences, this slot is filled by
the lowest-arg. Further boolean interface fea-
tures check that in these cases, highest-arg
and lowest-arg are actually given.

When limiting the semantic argument classes
argRanki to just one single semantic role, the
XMG compiler yields 16 different frames when
compiling the class event (each argument rank
can be present or absent and the rank combination
determines the macrorole assignments) and a to-
tal of 25 tree frame pairs when compiling n0Vn1,
which corresponds to the correct 25 linking pat-
terns that we expect here: In active sentences, ei-
ther a) the subject is of rank 1, then there are 3
possible object ranks and the other two ranks can
be each present or absent in the frame or b) the
subject is of rank 2, then the object has rank 3
or 4 and the rank among {3, 4} that is not ob-
ject can be present or not in the frame or c) the
subject has rank 3 and the object rank 4. In pas-
sive sentences, either a) the subject is of rank 4,
then the object can be 3 or 2 and the remaining
two ranks can be present or absent in the frame,
or b) the subject is of rank 3, the object of rank 2
and rank 1 is present or absent in the frame. Fur-

55



thermore, a rank 2 argument requires a rank 3 ar-
gument that could, however, be promoted to the
rank 1. The implementation yields a total of 23
linking patterns. Note that this simplified imple-
mentation of n0Vn1 leaves out a lot of possibil-
ities for argument realizations. It considers only
the case of canonical subject and object positions
and does not take the possibility into account that
the highest argument in passive constructions can
be realized as a by-PP. All these other cases would
of course lead to more tree frame pairs.

Our analysis allows for tree frame pairs where
only some of the arguments listed in the frame
have corresponding syntactic slots. In other
words, we implement a relaxation of the θ-
criterion for LTAG mentioned in section 3 that re-
quires that each syntactic argument slot in the el-
ementary tree of a predicate corresponds to a se-
mantic argument slot in the frame but not nec-
essarily vice versa. To what extend the stronger
version of the θ-criterion, requiring a bijection be-
tween syntactic and semantic arguments, should
be applied, is an open question (see section 7).

6.4 Lexical insertion

When combining a lexical item, for instance
smashed paired with the frame from Fig. 6, with
an unanchored class such as n0Vn1, the two event
frames unify. Due to our relaxed implementation
of the θ-criterion, this unification can enrich the
lexical frame with further semantic roles and there
might even be roles coming from the lexical ele-
ment that do not have a corresponding syntactic
argument slot. Sometimes this might be desired.
The semantics of walk for instance does not nec-
essarily contain a GOAL component. Such a com-
ponent can however be added by a directed-motion
construction as in (3).

(3) John walked into the house.

One way to prevent additional roles from being
added is to constrain the frame via the interface
features. We have implemented this for the ex-
ample of smash to the effect that when anchoring
our n0Vn1 class with the lemma smash, we ob-
tain only the elementary tree frame pair where we
have active voice, the EFFECTOR linked to the sub-
ject and the PATIENT linked to the object.

7 Conclusion

We proposed a constraint-based formulation of the
principles underlying the linking algorithm from
Van Valin (2005), instead of a procedural speci-
fication. The advantage is not only that we can
separate between the linguistic generalizations to
be captured and algorithmic considerations. There
is also a straightforward way to implement this
with XMG and, within this metagrammar frame-
work, to connect it with existing implementations
of LTAG, allowing for a neat separation between
language-specific and language-independent link-
ing constraints. From a less technical perspective,
the presented work can be seen as the first attempt
to fill an important gap in the theory of the shape
of elementary entries that Frank’s θ-Criterion left
open.

Acknowledgments

We thank the three anonymous reviewers for help-
ful comments. The work presented in this paper
was financed by the Deutsche Forschungsgemein-
schaft (DFG) within the CRC 991.

References

Anne Abeillé and Owen Rambow. 2000. Tree Ad-
joining Grammar: An Overview. In Anne Abeillé
and Owen Rambow, editors, Tree Adjoining Gram-
mars: Formalisms, Linguistic Analysis and Process-
ing, pages 1–68. CSLI.

Benoit Crabbé and Denys Duchier. 2004. Metagram-
mar Redux. In International Workshop on Con-
straint Solving and Language Processing, Copen-
hagen.

Benoit Crabbé, Denys Duchier, Claire Gardent, Joseph
Le Roux, and Yannick Parmentier. 2013. XMG:
eXtensible MetaGrammar. Computational Linguis-
tics, 39(3):1–66.

Éric Villemonte de la Clergerie. 2013. Exploring
beam-based shift-reduce dependency parsing with
DyALog: Results from the SPMRL 2013 shared
task. In 4th Workshop on Statistical Parsing of Mor-
phologically Rich Languages (SPMRL’2013), Seat-
tle.

David Dowty. 1991. Thematic proto-roles and argu-
ment selection. Language, 67(3):547–619.

D. Duchier, J. Le Roux, and Y. Parmentier. 2004. The
Metagrammar Compiler: an NLP application with
a Multi-Paradigm Architecture. In Proceedings of
the 2nd international Mozart-Oz Conference MOZ
2004, Lecture Notes in Computer Science, Vol. 3389,
Springer, Charleroi, Belgium.

56



Robert Frank. 1992. Syntactic Locality and Tree Ad-
joining Grammar: Grammatical, Acquisition and
Processing Perspectives. Ph.D. thesis, University of
Pennsylvania.

Robert Frank. 2002. Phrase Structure Composi-
tion and Syntactic Dependencies. MIT Press, Cam-
bridge, Mass.

Claire Gardent and Laura Kallmeyer. 2003. Seman-
tic Construction in FTAG. In Proceedings of EACL
2003, pages 123–130, Budapest.

Aravind K. Joshi and Yves Schabes. 1997. Tree-
Adjoning Grammars. In G. Rozenberg and A. Salo-
maa, editors, Handbook of Formal Languages, pages
69–123. Springer, Berlin.

Laura Kallmeyer and Aravind K. Joshi. 2003. Factor-
ing Predicate Argument and Scope Semantics: Un-
derspecified Semantics with LTAG. Research on
Language and Computation, 1(1–2):3–58.

Laura Kallmeyer and Rainer Osswald. 2013. Syntax-
driven semantic frame composition in Lexicalized
Tree Adjoining Grammar. Journal of Language
Modelling, 1:267–330.

Laura Kallmeyer and Maribel Romero. 2008. Scope
and situation binding in LTAG using semantic uni-
fication. Research on Language and Computation,
6(1):3–52.

Beth Levin and Malka Rappaport Hovav. 2005. Ar-
gument Realization. Cambridge University Press,
Cambridge.

Timm Lichte and Simon Petitjean. 2015. Implement-
ing semantic frames as typed feature structures with
XMG. Journal of Language Modelling, 3(1):185–
228.

Timm Lichte. 2015. Syntax und Valenz. Zur Mod-
ellierung kohärenter und elliptischer Strukturen mit
Baumadjunktionsgrammatiken. Number 1 in Empir-
ically Oriented Theoretical Morphology and Syntax.
Language Science Press, Berlin.

Rebecca Nesson and Stuart M. Shieber. 2006. Simpler
TAG semantics through synchronization. In Pro-
ceedings of the 11th Conference on Formal Gram-
mar, Malaga, Spain, 29–30 July.

Rebecca Nesson and Stuart M. Shieber. 2008. Syn-
chronous vector tag for syntax and semantics: Con-
trol verbs, relative clauses, and inverse linking. In
Proceedings of the Ninth International Workshop on
Tree Adjoining Grammars and Related Formalisms
(TAG+ 9), Tübingen, Germany.

Stuart M. Shieber. 1994. Restricting the weak-
generative capacity of synchronous Tree-Adjoining
Grammars. Computational Intelligence, 10(4):271–
385.

Robert D. Van Valin, Jr. 2005. Exploring the Syntax-
Semantics Interface. Cambridge University Press.

K. Vijay-Shanker and Aravind K. Joshi. 1988. Feature
structures based tree adjoining grammar. In Pro-
ceedings of COLING, pages 714–719, Budapest.

Stephen Wechsler. 2015. Word Meaning and Syntax.
Oxford Surveys in Syntax and Morphology. Oxford
University Press, Oxford.

57


