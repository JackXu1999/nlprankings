



















































Enhancing PTB Universal Dependencies for Grammar-Based Surface Realization


Proceedings of The 9th International Natural Language Generation conference, pages 232–236,
Edinburgh, UK, September 5-8 2016. c©2016 Association for Computational Linguistics

Enhancing PTB Universal Dependencies for
Grammar-Based Surface Realization

David King and Michael White
Department of Linguistics
The Ohio State University

Columbus, OH 43210, USA
king.2138@osu.edu,mwhite@ling.osu.edu

Abstract

Grammar-based surface realizers require
inputs compatible with their reversible,
constraint-based grammars, including a
proper representation of unbounded de-
pendencies and coordination. In this pa-
per, we report on progress towards creat-
ing realizer inputs along the lines of those
used in the first surface realization shared
task that satisfy this requirement. To do
so, we augment the Universal Dependen-
cies that result from running the Stanford
Dependency Converter on the Penn Tree-
bank with the unbounded and coordina-
tion dependencies in the CCGbank, since
only the latter takes the Penn Treebank’s
trace information into account. An evalu-
ation against gold standard dependencies
shows that the enhanced dependencies
have greatly enhanced recall with mod-
erate precision. We conclude with a dis-
cussion of the implications of the work
for a second realization shared task.

1 Introduction

Surface realization systems employing re-
versible, broad coverage constraint-based gram-
mars together with statistical ranking mod-

els have achieved impressive results in multi-
ple languages, using a variety of formalisms
(HPSG, TAG, LFG, CCG). However, these
systems all require somewhat different inputs,
making comparative evaluation difficult. In
the first surface realization shared task (Belz
et al., 2011, henceforth SR-11), which aimed
to ameliorate these difficulties, attempts to
use grammar-based realizers were unsuccess-
ful, as converting shared task inputs to system-
native inputs turned out to be more difficult
than anticipated. Subsequently, Narayan &
Gardent (2012) demonstrated that grammar-
based systems can be substantially improved
with error mining techniques, and Gardent and
Narayan (2013) showed that augmenting the
(shallow) SR-11 representation of coordina-
tion to include shared dependencies can bene-
fit grammar-based realizers. White (2014) then
showed that even better results can be achieved
by inducing a grammar (Kwiatkowski et al.,
2011; Artzi and Zettlemoyer, 2013) that is di-
rectly compatible with (an enhanced version of)
the SR-11 inputs. However, as explained be-
low, subsequent analysis revealed substantial
remaining issues with the data, which this pa-
per takes a step towards addressing.

232



A common thread in work on reversible,
constraint-based grammars is emphasis on
properly representing unbounded dependencies
and coordination. For parsing, this emphasis
has been shown to pay off in improved recall of
unbounded dependencies (Rimell et al., 2009;
Nguyen et al., 2012; Oepen et al., 2014). For re-
alization, however, it remains an open question
as to whether approaches based on constraint-
based grammars can likewise yield an empiri-
cal payoff, given the continuing lack of a com-
mon input representation that adequately treats
unbounded dependencies and coordination, as
these grammars require.

With this issue in mind, White (2014) exper-
imented with a version of the shallow SR-11 in-
puts (created by Richard Johansson) which in-
cluded extra dependencies for unbounded de-
pendencies and coordination, yielding depen-
dency graphs extending core dependency trees.
Unlike the rewrite rules employed by Gardent
and Narayan (2013), the extra dependencies
were derived from the gold traces in the Penn
Treebank (Marcus et al., 1993, PTB), which is
necessary to adequately handle right node rais-
ing and relativization. However, this version
was still found to be incomplete, in particular
because it was missing cases where the extra de-
pendencies are encoded structurally in the PTB.

Since then, Universal Dependencies (Nivre
et al., 2016, UDs), which aim to represent
syntactic dependencies similarly across lan-
guages, have become increasingly prominent.
Building on the enhanced Stanford dependen-
cies for English (de Marneffe et al., 2013)—
which were designed to properly represent un-
bounded dependencies in dependency graphs—
enhanced UDs for English have been partially
implemented in the Stanford Dependency Con-
verter (Schuster and Manning, 2016, SDC).
The SDC transforms automatic or gold PTB-

style trees into UDs; unfortunately, however, it
was not designed to take traces into account,
and thus the treatment of unbounded dependen-
cies and coordination is only heuristic. To ad-
dress this impasse, in this paper we report on
progress towards creating SR-11–style realizer
inputs that are both based on enhanced UDs and
which accurately represent unbounded depen-
dencies and coordination. To do so, we aug-
ment the UDs that result from running the SDC
on the PTB with the dependencies in the CCG-
bank (Hockenmaier and Steedman, 2007), since
the latter includes lexicalized dependencies de-
rived from gold PTB traces.

2 Background

Figures 1–2 show an example where the CCG-
bank preserves the information provided by the
trace in a free relative clause along with a cru-
cial structurally encoded dependency. In Fig-
ure 1 (left), the unbounded dependency between
what and achieve is annotated via a trace in the
PTB. Figure 1 (right) shows the SDC output
for the sentence. While the SDC manages to
capture the unbounded dependency in this case,
what is not recognized as the head of the free
relative clause and there is no direct dependency
from the copula to what, contrary to de Marn-
effe et al.’s (2013) specifications. The inade-
quacy of the representation here—which is es-
sentially the same as the SR-11 representation
for the sentence—has serious implications for
realization, as it will be difficult for any realizer
to determine that what should appear at the start
of the free relative clause rather than following
achieve, where direct objects would normally
appear (or perhaps sentence initially). By con-
trast, Figure 2 shows how the Combinatory Cat-
egorial Grammar (Steedman, 2000; Steedman
and Baldridge, 2011, CCG) derivation yields

233



( (S
(NP-SBJ (PRP It) )
(VP (VBZ is)

(SBAR-PRD
(WHNP-1 (WP what) )
(S
(NP-SBJ-2 (JJ federal) (NN support) )
(VP (MD should)
(VP (VB try)
(ADVP-MNR (RBS hardest) )
(S
(NP-SBJ (-NONE- *-2) )
(VP (TO to)
(VP (VB achieve)
(NP (-NONE- *T*-1) )))))))))

(. .) ))

It is what federal support should try hardest to achieve .
nsubj

root dobj

amod
nsubj

nsubj

aux

ccomp

advmod mark

xcomp

punct

dobj

acl:relcl

Figure 1: Left: An example of PTB annotation of a free relative clause (wsj 2412.80); note the co-indexation between
the trace *T*-1 and WHNP-1. Right: Automatic SDC output of the gold annotated PTB structure treats try as the head of

the copula’s complement and has no direct dependency from the copula to what, contrary to de Marneffe et al.’s (2013)

specifications. Dashed lines show new (below) and deleted (above) dependencies in this work.

It is what federal support should try hardest to achieve

NP1 (S[dcl]\NP1)/NP2 NP2/(S[dcl]/NP2) S[dcl]/(S[to]\NP) (S[to]\NP)/(S[b]\NP) (S[b]\NP)/NP2
>B

(S[to]\NP)/NP2
>B

S[dcl]/NP2
>

NP2
>

S[dcl]\NP1
<

S[dcl]

Figure 2: Abbreviated CCGbank derivation showing how PTB trace information is preserved via NP co-indexation;
composition operations enable the missing object of achieve to be passed up to where its role can be filled by what.

a structural dependency between what and is
along with the unbounded dependency between
what and achieve. (More commonly, the SDC
captures the structural dependency but not the
unbounded one, especially in right node raising
and object relatives.)

3 Using the CCGbank to Augment
PTB Universal Dependencies

Unlike UDs, CCGbank dependencies are nu-
meric and depend on the lexical category of the
functor (e.g. what fills the second argument of
the category for achieve in Figure 2). To de-
termine UD labels, we employ a maxent clas-
sifier taking information from CCGbank as in-

put. Comparing the CCGbank and SDC output,
the classifier is trained where their dependen-
cies overlap and predicts both a label and head-
dependent direction. Features used are functor
and argument categories; functor and argument
tokens; functor and argument POS tags; and
functor and argument relative directionality.

Our system for augmenting the SDC’s PTB
output begins by combining the SDC basic and
enhanced output, since the basic representation
does not skip words while the enhanced rep-
resentation already includes many correct extra
dependencies. The system then scans the SDC
output and CCGbank for 3 triggers: (i) shared
arguments in coordination (e.g. shared objects

234



All items Without CCG gaps
exact SDC 51 51

System 82** 86**
unlabeled SDC 57 57

System 86** 91**
Table 1: Results from Rimell et al’s (2009) dev set (Wall
Street Journal portion). ** – p < 0.01

All items Without CCG gaps
exact SDC 42 44

System 68*** 70***
unlabeled SDC 50 52

System 75*** 78***
Table 2: Results from Rimell et al’s (2009) test set (Wall
Street Journal portion). *** – p ≤ 0.0001

in right node raising), (ii) CCGbank unbounded
dependency annotations, and (iii) underspeci-
fied SDC dep relations (i.e. instances where the
SDC cannot determine the appropriate depen-
dency relation). In each case, the maxent clas-
sifier is used to predict UD labels for the CCG-
bank dependencies in question. Predictions are
only added to the corpus if there is no (non-
dep) SDC dependency already present. In ad-
dition, ccomp and csubj relations that co-occur
with free relatives are remapped to make the
relative the head of the clause. Finally, struc-
tural changes for coordination and compound-
ing along SR-11 lines are carried out.

4 Evaluation

The system’s recall was evaluated on Rimell
et al.’s (2009) unbounded dependency corpus,
a hand-curated corpus with gold annotations
for constructions including object free relatives,
right node raising, subject extraction, and object
extraction. During the creation of CCGbank,
some problematic sentences involving gapping
were left out of the CCGbank. As a result, we
evaluate the system using four different criteria:
with and without the skipped CCG sentences,

and with both exact and unlabeled matches. Ta-
bles 1 and 2 show significant improvements
across the board over the SDC.

Precision was evaluated by manually exam-
ining 401 predictions from the system’s output
to see whether the proposed edits adhered to UD
specifications. Precision from the converter is
70% for exact label matches and 91% for unla-
beled matches.

5 Discussion and Future Work

We have adapted and extended White’s (2014)
CCG induction algorithm to work with the aug-
mented UDs that our system produces. White’s
algorithm assumed CCG phrases are only rarely
projected from a dependent rather than a head—
e.g., where an NP is projected from a deter-
miner, which is a dependent of the head noun—
and thus could be easily handled by handcrafted
lexical entries. Since such cases are very com-
mon in UDs, the algorithm needed to be ex-
tended to induce such categories automatically.
Once this was done, the algorithm yielded com-
plete derivations in most cases (approx. 94%).
In particular, derivations were induced that cap-
tured all but one of the extra dependencies in
Table 1 that appear in the CCGbank dev section,
and realization experiments with the UD-based
representations are underway.

With the augmented UD reported in this pa-
per, we expect the resulting dependency graphs
to serve as a promising basis for a second sur-
face realization challenge (with using just the
basic dependency trees as an option). A re-
maining obstacle, however, are the dependent
cluster and gapping cases in the PTB, for which
the SDC produces rather degenerate output. A
promising avenue here would be to adapt Gar-
dent and Narayan’s (2013) method of enhancing
the SR-11 representations for these cases.

235



Acknowledgments

We thank Marie-Catherine de Marneffe, Micha
Elsner, the OSU Clippers group and the anony-
mous reviewers for helpful feedback. This work
was supported in part by NSF grant 1319318.

References
Yoav Artzi and Luke Zettlemoyer. 2013. Weakly

supervised learning of semantic parsers for map-
ping instructions to actions. TACL, 1:49–62.

Anja Belz, Michael White, Dominic Espinosa,
Eric Kow, Deirdre Hogan, and Amanda Stent.
2011. The first surface realisation shared task:
Overview and evaluation results. In Proc. ENLG.

Marie-Catherine de Marneffe, Miriam Connor, Na-
talia Silveira, Samuel R Bowman, Timothy
Dozat, and Christopher D Manning. 2013. More
Constructions, More Genres: Extending Stanford
Dependencies. In Proc. DepLing 2013.

Claire Gardent and Shashi Narayan. 2013. Gener-
ating elliptic coordination. In Proceedings of the
14th European Workshop on Natural Language
Generation, pages 40–50.

Julia Hockenmaier and Mark Steedman. 2007.
CCGbank: A Corpus of CCG Derivations
and Dependency Structures Extracted from the
Penn Treebank. Computational Linguistics,
33(3):355–396.

Tom Kwiatkowski, Luke Zettlemoyer, Sharon Gold-
water, and Mark Steedman. 2011. Lexical gener-
alization in CCG grammar induction for seman-
tic parsing. In Proceedings of the Conference
on Empirical Methods in Natural Language Pro-
cessing, pages 1512–1523.

Mitchell P. Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. 1993. Building a large an-
notated corpus of English: The Penn Treebank.
Computational linguistics, 19(2):313–330.

Shashi Narayan and Claire Gardent. 2012. Error
mining with suspicion trees: Seeing the forest for
the trees. In Proc. COLING.

Luan Nguyen, Marten Van Schijndel, and William
Schuler. 2012. Accurate unbounded dependency

recovery using generalized categorial grammars.
In Proceedings of COLING 2012, pages 2125–
2140.

Joakim Nivre, Marie-Catherine de Marneffe, Filip
Ginter, Yoav Goldberg, Jan Hajič, Christopher
Manning, Ryan McDonald, Slav Petrov, Sampo
Pyysalo, Natalia Silveira, et al. 2016. Univer-
sal dependencies v1: A multilingual treebank col-
lection. In Proceedings of the 10th International
Conference on Language Resources and Evalua-
tion (LREC 2016).

Stephan Oepen, Marco Kuhlmann, Yusuke Miyao,
Daniel Zeman, Dan Flickinger, Jan Hajic, An-
gelina Ivanova, and Yi Zhang. 2014. Semeval
2014 task 8: Broad-coverage semantic depen-
dency parsing. In Proceedings of the 8th Inter-
national Workshop on Semantic Evaluation (Se-
mEval 2014), pages 63–72.

Laura Rimell, Stephen Clark, and Mark Steed-
man. 2009. Unbounded Dependency Recov-
ery for Parser Evaluation. In Proceedings of the
2009 Conference on Empirical Methods in Nat-
ural Language Processing: Volume 2-Volume 2,
pages 813–821.

Sebastian Schuster and Christopher D. Manning.
2016. Enhanced english universal dependencies:
An improved representation for natural language
understanding tasks. In Proceedings of the Tenth
International Conference on Language Resources
and Evaluation (LREC 2016).

Mark Steedman and Jason Baldridge. 2011.
Combinatory Categorial Grammar. Non-
Transformational Syntax: Formal and Explicit
Models of Grammar. Wiley-Blackwell.

Mark Steedman. 2000. The syntactic process. MIT
Press, Cambridge, MA, USA.

Michael White. 2014. Towards surface real-
ization with CCGs induced from dependencies.
In Proceedings of the 8th International Natural
Language Generation Conference (INLG), pages
147–151.

236


