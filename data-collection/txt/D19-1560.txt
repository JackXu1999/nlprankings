
























































jjwang_HRL_EMNLP2019_camera_ready.pdf


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 5581–5590,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

5581

Human-Like Decision Making: Document-level Aspect Sentiment
Classification via Hierarchical Reinforcement Learning

Jingjing Wang1, Changlong Sun2, Shoushan Li1,∗ , Jiancheng Wang1,
Luo Si2, Min Zhang1, Xiaozhong Liu2, Guodong Zhou1

1School of Computer Science and Technology, Soochow University, China
2Alibaba Group, China

{djingwang, lishoushan, minzhang, gdzhou}@suda.edu.cn,
jiancheng.wang@qq.com, {changlong.scl, xiaozhong.lxz, luo.si}@alibaba-inc.com

Abstract
Recently, neural networks have shown promis-
ing results on Document-level Aspect Senti-
ment Classification (DASC). However, these
approaches often offer little transparency w.r.t.
their inner working mechanisms and lack in-
terpretability. In this paper, to simulating the
steps of analyzing aspect sentiment in a docu-
ment by human beings, we propose a new Hi-
erarchical Reinforcement Learning (HRL) ap-
proach to DASC. This approach incorporates
clause selection and word selection strategies
to tackle the data noise problem in the task
of DASC. First, a high-level policy is pro-
posed to select aspect-relevant clauses and dis-
card noisy clauses. Then, a low-level policy
is proposed to select sentiment-relevant words
and discard noisy words inside the selected
clauses. Finally, a sentiment rating predictor
is designed to provide reward signals to guide
both clause and word selection. Experimental
results demonstrate the impressive effective-
ness of the proposed approach to DASC over
the state-of-the-art baselines.

1 Introduction

Document-level Aspect Sentiment Classification
(DASC) is a fine-grained sentiment classification
task in the field of sentiment analysis (Pang and
Lee, 2007; Li et al., 2010). This task aims to
predict the sentiment rating for each given aspect
mentioned in a document-level review. For in-
stance, Figure 1 shows a review document with
four given aspects of a hotel (i.e., location, room,
value, service). The goal of DASC is to predict
the rating score towards each aspect by analyz-
ing the whole document. In the last decade, this
task has been drawing more and more interests
of researchers in the Natural Language Processing
community (Titov and McDonald, 2008; Yin et al.,
2017; Li et al., 2018). In previous studies, neu-

∗Corresponding author

Review Document

[[[This hotel is close to railway station]]]Clause1 [[[and
very convenient to eat around]]]Clause2 [[[but room of Hilton

is a little uncomfortable .]Clause3 [[[I’m often nitpicking
for room decoration.]]]Clause4 [[[Besides, the price is
very expensive ]]]Clause5 [[[although the staff service is

professional .]]]Clause6

Rating of Each Aspect
- location: � � � � � (5) - room: � � � � � (3)
- value: � � � � � (1) - service: � � � � � (4)

Figure 1: An example of a review document, where
clauses and words with different colors refer to

different aspects.

ral models have shown to be effective for perfor-
mance improvement on DASC. Despite the advan-
tages, these complex neural network approaches
often offer little transparency w.r.t. their inner
working mechanisms and suffer from the lack of
interpretability. However, clearly understanding
where and how such a model makes such a deci-
sion is rather important for developing real-world
applications (Liu et al., 2018; Marcus, 2018).

As human beings, if asked to evaluate the senti-
ment rating for a specific aspect in a document, we
often perform sentiment prediction in two steps.
First, we select some aspect-relevant snippets
(e.g., sentences/clauses) inside the document. Sec-
ond, we select some sentiment-relevant words
(e.g., sentiment words) inside these snippets to
make a rating decision. For instance, for aspect
location in Figure 1, we first select the aspect-
relevant clauses, i.e., Clause1 and Clause2, and
then select sentiment-relevant words, i.e., “ close”
and “very convenient” inside the two clauses, for
making the rating decision (5 stars).

Inspired by the above cognitive process of hu-
man beings, one ideal and interpretable solution
for DASC is to select aspect-relevant clauses and
sentiment-relevant words, discarding those noisy
parts of a document for decision making. In this



5582

solution, two major challenges exist which are il-
lustrated as follows.

The first challenge is how to select aspect-
relevant clauses and discard those irrelevant and
noisy clauses. For instance, for aspect location,
Clause5 mentioning another aspect value (only
1 star) may induce the noise and should be dis-
carded, because the noise can provide wrong sig-
nals to mislead the model into assigning very low
sentiment rating to aspect location. One possi-
ble way to alleviate this noisy problem is to lever-
age the soft-attention mechanism as proposed in
Li et al. (2018) and Wang et al. (2018). How-
ever, this soft-attention mechanism has the lim-
itation that the softmax function always assigns
small but non-zero probabilities to noisy clauses,
which will weaken the attention given to the few
truly significant clauses for a particular aspect.
Therefore, a well-behaved approach should dis-
card noisy clauses for a specific aspect during
model training.

The second challenge is how to select
sentiment-relevant words and discard those
irrelevant and noisy words. For instance, for
aspect location, words “this”, “is” in Clause1 are
noisy words and should be discarded since they
make no contribution to implying the sentiment
rating. One possible way to alleviate this problem
is to also leverage the soft-attention mechanism
as proposed in Li et al. (2018). However, this
soft-attention mechanism may induce additional
noise and lack interpretability because it tends to
assign higher weights to some domain-specific
words rather than real sentiment-relevant words
(Mudinas et al., 2012; Zou et al., 2018). For
instance, this soft-attention mechanism tends to
regard the name of a hotel “Hilton” with a good
reputation in Clause3 as a positive word which
could mislead the model into assigning a higher
rating to aspect room. Therefore, a well-behaved
approach should highlight sentiment-relevant
words and discard noisy words for a specific
aspect during model training.

In this paper, we propose a Hierarchical Rein-
forcement Learning (HRL) approach with a high-
level policy and a low-level policy to address the
above two challenges in DASC. First, a high-
level policy is leveraged to select aspect-relevant
clauses and discard noisy clauses during model
training. Then, a low-level policy is leveraged to
select sentiment-relevant words and discard noisy

words inside the above selected clauses. Finally,
a sentiment rating predictor is designed to pro-
vide reward signals to guide both clause and word
selection. The empirical studies show that the
proposed approach performs well by incorporat-
ing the clause selection and word selection strate-
gies and significantly outperforms several state-of-
the-art approaches including those with the soft-
attention mechanism.

2 Hierarchical Reinforcement Learning

Figure 2 shows the overall framework of our Hier-
archical Reinforcement Learning (HRL) approach
which contains three components: a high-level
policy for clause selection (Section 2.2); a low-
level policy for word selection (Section 2.3); a sen-
timent rating predictor for providing reward sig-
nals to guide both the above clause and word se-
lection (Section 2.4).

As a preprocessing, we adopt RST style dis-
course segmentation1 (MANN, 1988) to segment
all documents in corpus C into Elementary Dis-
course Units (EDUs), and consider thse EDUs as
clauses by following Wang et al. (2018).

In summary, we formulate the task of DASC
as a semi-Markov Decision process (Sutton et al.,
1999b), i.e., hierarchical reinforcement learning
with a high-level policy and a low-level policy. In
particular, our HRL approach for DASC works as
follows. Given a review document with a clause
sequence and an aspect, the high-level policy de-
cides whether a clause mentions this aspect. If
yes, the high-level policy selects this clause and
launches the low-level policy, which scans the
words inside this selected clause one by one in or-
der to select sentiment-relevant words. Otherwise,
the high-level policy skips current clause and turns
to the next clause until all clauses in the review
document are scanned. During clause and word
selection, a sentiment rating predictor is employed
to provide reward signals to guide the above clause
and word selection.

2.1 Clause Selection with High-level Policy

Assume that a review document D with a given
aspect xaspect has been segmented into a clause
sequence {u1, ..., un}, high-level policy πh aims

1In preliminary experiments, we tried directly adopting
sentence segmentation by following Li et al. (2018) rather
than clause splitting and found that adopting clause splitting
achieves better performance. Detailed comparison results are
presented in ablation study of Section 3.2.



5583

LSTM

LSTML

discard 

Clause 
Sequence

Word 
Sequence

Aspect 
= 0

t

Word Selection with Low-level Policy 

Clause Selection with High-level Policy 

select 

discard 

select 

discard 

= 0

Reward Signals

Sentiment 
Rating

 Predictor
concatenate

Figure 2: Overall architecture of our Hierarchical Reinforcement Learning (HRL) approach.

to select clause ui which truly mentions aspect
xaspect and discard noisy ones. Here, clause ui
consists of ki words {xi,1, ..., xi,ki}. Once a clause
is selected, it is passed to the low-level policy for
further word selection.

During clause selection, we adopt a stochastic
policy as high-level policy πh, which can gener-
ate a conditional probability distribution πh(o|·)
over option (i.e., high-level action) sequence o =
[o1, ..., on]. Here, oi = 1 indicates ui is selected;
otherwise oi = 0 indicates ui is discarded. More
specifically, we adopt a LSTM model LSTMh

to construct high-level policy πh for performing
clause selection over the clause sequence. In
LSTMh, the hidden state v̂i ∈ Rd of clause ui
and memory cell chi at i-th time-step are given by,

v̂i, c
h
i =

{
f(v̂i−1, chi−1, vi) oi = 1
v̂i−1, chi−1 oi = 0

(1)

where vi is the vector representation of clause ui
and initialized by hidden state ŵi,ki of the last
word x̂i,ki in clause ui. Here, ŵi,ki is obtained
from the pre-trained LSTMl (presented in line 3
of Algorithm 1); f denotes all gate functions and
update function of LSTMh. Note that if oi = 0,
LSTMh will skip (i.e., discard) and not encode
clause ui, memory cell chi and hidden state v̂i of
current time-step i are then directly copied from
the previous time-step i− 1.

In principle, the high-level policy πh uses a Re-
ward to guide clause selection over the clause se-
quence. It samples an Option oi with the proba-
bility πh(oi|shi ; θh) at each State shi . More con-
cretely, the state, option and reward of πh are de-
fined as follows.

• State. The state shi at i-th time-step should
provide adequate information for deciding to se-

lect a clause or not for xaspect. Thus, state shi ∈
R
4d is composed of four parts, i.e., v̂i−1, chi−1, vi

and va, defined as shi = v̂i−1 ⊕ chi−1 ⊕ vi ⊕ va,
where va ∈ Rd is aspect embedding2 of xaspect.
• Option. πh samples option oi ∈ {0, 1} by the

conditional probability πh(oi|shi ; θh) which could
be cast as a binary classification problem. Thus,
we adopt logistic function to define πh(oi|shi ; θh).

oi ∼ πh(oi|shi ; θh) = oiσ(W hshi + bh)
+(1− oi)(1− σ(W hshi + bh))

(2)

where θh = {W h ∈ R1×4d, bh ∈ R} is the train-
able parameter; ∼ denotes sampling operation; σ
denotes sigmod function.

• Reward. In order to select aspect-relevant
clauses inside a clause sequence {u1, ..., un},
given a sampled option trajectory τh =
(sh1 , o1, r

h
1 , ..., s

h
n, on, r

h
n) ∼ πh, we compute the

high-level cumulative reward rhi at i-th time-step
as follows:

rhi = λ1

n∑
t=i

γt−i log cos(va, v̂t)

+ λ2

n∑
t=i

γt−irl(ut) + λ3 log pθ(y|v̂n)

(3)

where rhi consists of three different terms: 1) The
first term log cos(va, v̂t) is a cosine intermediate
reward computed by cosine similarity between as-
pect embedding va ∈ Rd and hidden state v̂t ∈ Rd
of the t-th clause ut. This reward provides as-
pect supervision signals to guide the policy to se-
lect aspect-relevant clauses. 2) The second term

2Aspect embedding is initialized by an average of its key-
words embeddings. Keywords for aspects (e.g., keywords for
aspect service are service, smile etc.) are obtained from Yin
et al. (2017).



5584

rl(ut) =
∑kt

j=1 r
l
t,j is an intermediate reward from

low-level policy after the word selection in the se-
lected clause ut is finished. Note that if clause
ut is discarded, rl(ut) = 0. This reward pro-
vides a feedback to indicate how well clause se-
lection is. 3) The third term log pθ(y|v̂n) is a de-
lay reward from sentiment rating predictor. After
LSTMh finishes all options, we feed the last hid-
den state v̂n of LSTMh to the softmax decoder of
sentiment rating predictor and then obtain a rating
probability pθ(y|v̂n) for ground-truth rating label
y to compute this delay reward. This reward pro-
vides additional reward signals to guide policy to
select discriminative clauses. Besides, γ is the dis-
count factor; λ1, λ2 and λ3 are weight parameters.

2.2 Word Selection with Low-level Policy
Given a word sequence {xi,1, ..., xi,ki} of clause
ui selected by the high-level policy, low-level pol-
icy πl aims to select the sentiment-relevant word
xi,j and discard noisy ones.

During word selection, we still adopt a stochas-
tic policy as low-level policy πl, which can gen-
erate a conditional probability distribution πl(a|·)
over action sequence a = [ai,1, ..., ai,ki ], where
ai,j = 1 indicates j-th word xij in i-th clause is
selected; ai,j = 0 indicates xi,j is discarded. Sim-
ilar to clause selection, we adopt another LSTM
model LSTMl to construct low-level policy πl

for performing word selection over word sequence
{xi,1, ..., xi,ki} of each clause (Note that, as shown
in Figure 2, LSTMl is shared by all selected
clauses from high-level policy). In LSTMl, the
hidden state ŵi,j ∈ Rd of word xi,j and memory
cell clj at j-th time-step (Here, we omit the clause
index and only use j to denote the j-th time-step
in i-th clause ui) are given by,

ŵi,j , c
l
i,j =

{
f(ŵi,j−1, cli,j−1, wi,j) ai,j = 1
ŵi,j−1, cli,j−1 ai,j = 0

(4)
where wi,j is word embedding of xi,j . Similar to
LSTMh, in LSTMl, if ai,j = 0, i.e., word xi,j
is discarded, memory cell and hidden state of cur-
rent time-step are directly copied from the previ-
ous time-step. Then, we illustrate state, action and
reward of low-level policy as follows.

• State. The state sli,j at j-th time-step should
provide adequate information for deciding to se-
lect a word or not. Thus, the state sli,j ∈ R3d is
composed of three parts, i.e., ŵi,i−1, cli,j−1, wi,j ,
defined as sli,j = ŵi,j−1 ⊕ cli,j−1 ⊕ wi,j .

• Action. πl samples action ai,j ∈ {0, 1} by the
conditional probability πl(ai,j |sli,j ; θl). Thus, sim-
ilar to high-level policy, we adopt logistic function
to define πl(ai,j |sli,j ; θl).
ai,j ∼ πl(ai,j |sli,j ; θl) = ai,jσ(W lsli,j + bl)

+(1− ai,j)(1− σ(W lsli,j + bl))
(5)

where θl = {W l ∈ R1×3d, bl ∈ R} is the trainable
parameter.

• Reward. Similarly, in order to select
sentiment-relevant words inside a word sequence
{xi,1, ..., xi,ki}, given a sampled action trajectory
τ l = (sli,1, ai,1, r

l
i,1, ..., s

l
i,ki

, ai,ki , r
l
i,ki

) ∼ πl, we
compute the low-level cumulative reward rli,j at j-
th time-step as:

rli,j = λ
′
1 log pθ(y|ŵi,ki) + λ′2(−N ′)/N (6)

where rli,j consists of two terms: 1) Similar to
high-level policy, the first term log pθ(y|ŵi,ki) is
a delay reward provided by sentiment rating pre-
dictor. After LSTMl finishes all actions, we feed
last hidden state ŵi,ki in i-th clause to softmax de-
coder of sentiment rating predictor and then we
can obtain this delay reward. This reward pro-
vides rating supervision information to guide pol-
icy to select discriminative words, i.e., sentiment-
relevant words. 2) The second term γ(−N ′)/N
is a penalty delay reward. N ′ =

∑ki
j=1 ai,j de-

notes the number of selected words. The basic
idea of using this penalty reward is to select words
as small as possible because sentiment-relevant
words is usually a small subset of all words inside
the clause. Note that, we could also adopt external
sentiment lexicons to achieve this goal, but senti-
ment lexicons are difficult to obtain in many real-
world applications. Besides, λ′1, λ′2 are weight pa-
rameters.

2.3 Sentiment Rating Predictor
The goal of sentiment rating predictor lies in two-
fold. On one hand, during model training, the goal
of sentiment rating predictor is to use a softmax
decoder to provide rating probabilities as the re-
ward signals (see Eq.(3) and Eq.(6)) to guide both
clause and word selection.

On the other hand, when model training is fin-
ished, i.e., both high-level and low-level policy
finish all their selections, the goal of sentiment
rating predictor is to perform DASC. Specifically,
we first regard last state v̂n of LSTMh as the rep-
resentation of all selected clauses while last state



5585

ŵn,kn of LSTM
l as the representation of all se-

lected words. Then, we concatenate v̂n and ŵn,kn
to compute the final representation z of the review
document D as: z = v̂n ⊕ ŵn,kn , where ⊕ de-
notes concatenation operation. Finally, to perform
DASC, we feed z to a softmax decoder as follows:

Softmax Decoder. We first feed z to a soft-
max classifier m = Wz + b, where m ∈ RC
is output vector; θ = {W, b} is trainable param-
eter. Then, the probability of labeling sentence
with sentiment rating ŷ ∈ [1, C] is computed by
pθ(ŷ|z) = exp(mŷ)∑C

�=1 exp(m�)
. Finally, the label with the

highest probability stands for the predicted senti-
ment rating for xaspect.

Note that, for an aspect, if no clauses and words
are finally selected from a review document, the
model will assign a random rating for this aspect.

2.4 Model Training via Policy Gradient and
Back-Propagation

The parameters in HRL are learned according to
Algorithm 1. Specifically, these parameters can be
divided into two groups: 1) θh and θl of high-level
policy πh and low-level policy πl respectively. 2)
θ of LSTMh, LSTMl and softmax decoder.

For θh of high-level policy, we optimize it with
policy gradient (REINFORCE) (Williams, 1992;
Sutton et al., 1999a). The policy gradient w.r.t.
θh is computed by differentiating the maximized
expected reward J(θh) as follows:

∇θhJ(θh) = Eτh∼πh [
n∑

i=1

Rh∇θh log πh(oi|shi ; θh)]

(7)

where Rh = rhi − b(τh) is the advantage estimate
of the high-level reward. Here, b(τh) is the base-
line (Williams, 1992) which is used to reduce the
variance of the high-level reward without altering
its expectation theoretically. In practical use, we
sample some trajectories τh1 , τ

h
2 , ..., τ

h
m over the

clause sequence with the current high-level policy.
The model will assign a reward score to each se-
quence according to the designed scores function,
and then estimates b(τh) as the average of those
rewards. Similarly, the policy gradient w.r.t. θl of
low-level policy is given by,

∇θlJ(θl) = Eτ l∼πl [
ki∑
j=1

Rl∇θl log πl(ai,j |sli,j ; θl)]

(8)

Algorithm 1 Hierarchical reinforcement learning
1: Input: Corpus C; a review document D with a clause

sequence {u1, ..., un}; a clause ui with a word sequence
{xi,1, ..., xi,ki}.

2: Initialize parameters θ, θh and θl randomly;
3: Pre-train LSTMl by forcing πl to select all words for

classification, and update θ of LSTMl by Eq.(9);
4: Pre-train LSTMh by forcing πh to select all clauses for

classification, and update θ of LSTMh by Eq.(9);
5: Fix all parameters θ and update θh, θl as follows:
6: for review document D ∈ C do
7: for clause ui ∈ {u1, ..., un} do
8: Sample option oi ∼ πh(oi|shi ; θh);
9: if option oi = 1 then

10: for word xi,j ∈ {xi,1, ..., xi,ki} do
11: Sample action ai,j ∼ πh(ai,j |sli,j ; θh);
12: end for
13: Compute rli,j by Eq.(6);
14: Update θl by Eq.(8);
15: end if
16: end for
17: Compute rhi by Eq.(3);
18: Update θh by Eq.(7);
19: end for

Datasets #documents #words/doc #Aspect
TripUser 58632 181.03 7

TripAdvisor 29391 251.7 7

BeerAdvocate 51020 144.5 4

Table 1: Statistics of three datasets. #words/doc
denotes the number of words (average per document).
#Aspect denotes the number of aspects in each dataset.

The rating scales of TripAdvisor and BeerAdvocate
are 1-5 and 1-10 respectively.

where Rl = rli,j − b(τ l) is the advantage estimate
of the low-level reward. Similarly, b(τ l) is used to
reduce the variance of the low-level reward.

For θ, we optimize it with back-propagation.
The objective of learning θ is to minimize the
cross-entropy loss in the classification phase, i.e.,

J(θ) = E(D,xaspect,y)∼C [− log pθ(y|z)] +
δ

2
||θ||22

(9)

where (D, xaspect, y) denotes a review document
D with a given aspect xaspect from corpus C; y is
ground-truth sentiment rating for aspect xaspect. δ
is a L2 regularization.

3 Experimentation

3.1 Experimental Settings

Data. We conduct our experiments on three public
datasets on DASC, i.e., TripUser (Li et al., 2018),
TripAdvisor (Wang et al., 2010) and BeerAdvo-
cate (McAuley et al., 2012; Lei et al., 2016). In
the experiment, we adopt Discourse Segmentation



5586

Approaches
TripUser TripAdvisor BeerAdvocate

Development Test Development Test Development Test
Acc.↑ MSE↓ Acc.↑ MSE↓ Acc.↑ MSE↓ Acc.↑ MSE↓ Acc.↑ MSE↓ Acc.↑ MSE↓

SVM - - 46.35† 1.025† 34.30‡ 1.982‡ 35.26‡ 1.963‡ 25.70‡ 3.286‡ 25.79‡ 3.270‡

LSTM 53.23 0.787 52.74 0.794 43.85‡ 1.525‡ 44.02‡ 1.470‡ 35.23‡ 2.112‡ 34.78‡ 2.097‡

MAMC - - 55.49† 0.583† 46.21‡ 1.091‡ 46.56‡ 1.083‡ 39.43‡ 1.696‡ 38.06‡ 1.755‡

HARN - - 58.15† 0.528† - - 48.21‡ 0.923‡ 39.81 1.672 38.19 1.751
HUARN - - 60.70† 0.514† - - - - - - - -
C-HAN 58.49 0.602 57.38 0.543 47.61 0.914 47.08 0.955 38.67 1.703 37.95 1.801
HS-LSTM 59.75 0.566 59.01 0.524 48.45 0.947 46.84 1.013 37.43 1.870 36.83 1.912
RL-Word-Selection 60.15 0.475 59.55 0.519 48.55 0.913 48.51 0.917 39.92 1.648 38.45 1.697
RL-Clause-Selection 61.32 0.433 60.54 0.461 51.05 0.762 50.02 0.781 41.39 1.505 39.76 1.622
HRL 62.97 0.336 62.84 0.351 52.71 0.652 52.27 0.662 43.41 1.416 41.39 1.503

Table 2: Comparison of our approaches and other baseline approaches to DASC. The results with symbol † are
retrieved from Li et al. (2018) and those with ‡ are from Yin et al. (2017)

Tool3 to segment all reviews in the three datasets
into EDUs (i.e., clauses). Moreover, we adopt
training/development/testing settings (8:1:1) by
following Yin et al. (2017); Li et al. (2018). Ta-
ble 1 shows the statistics of the three datasets.

Implementation Details. We adopt the pre-
trained 200-dimension word embeddings provided
by Yin et al. (2017). The dimension of LSTM
hidden states is set to be 200. The other hyper-
parameters are tuned according to the performance
in the development set. Specifically, we adopt
Adam optimizer (Kingma and Ba, 2014) with an
initial learning rate of 0.012 for cross-entropy
training and adopt SGD optimizer with a learning
rate of 0.008 for all policy gradients training. For
rewards of high-level and low-level policies, γ is
0.8; λ1, λ2 and λ3 are 0.25, 0.25 and 0.5 respec-
tively. λ′1, λ′2 are 0.6 and 0.4. Additionally, the
batch size is set to be 64, regularization weight is
set to be 10−5 and the dropout rate is 0.2.

Evaluation Metrics. The performance is eval-
uated using Accuracy (Acc.) and MSE as Yin
et al. (2017). Moreover, t-test is used to evalu-
ate the significance of the performance difference
between two approaches (Yang and Liu, 1999).

Baselines. We compare HRL with the follow-
ing baselines: 1) SVM (Yin et al., 2017). This
approach only adopts unigram, bigram as fea-
tures to train an SVM classifier. 2) LSTM (Tang
et al., 2015). This is a neural network approach
to document-level sentiment classification which
employs gated LSTM to learn text representation.
3) MAMC (Yin et al., 2017). This approach
employs hierarchical iterative attention to learn
aspect-specific representation. This is a state-of-

3http://alt.qcri.org/tools/discourse-parser/

the-art approach to DASC. 4) HARN (Li et al.,
2018). This approach adopts hierarchical attention
to incorporate overall rating and aspect informa-
tion so as to learn aspect-specific representation.
This is another state-of-the-art approach to DASC.
5) HUARN (Li et al., 2018). This approach ex-
tends HARN by integrating additional user infor-
mation. This is another state-of-the-art approach
to DASC. 6) C-HAN (Wang et al., 2018). This ap-
proach adopts hierarchical attention to incorporate
clause and aspect information so as to learn text
representation. Although this is a state-of-the-art
approach to sentence-level ASC, it could also be
directly applied in DASC. 7) HS-LSTM (Zhang
et al., 2018). This is a reinforcement learning ap-
proach to text classification, which employs a hi-
erarchically LSTM to learn text representation. 8)
RL-Word-Selection. Our approach which lever-
ages only the word selection strategy by using the
low-level policy. 9) RL-Clause-Selection. Our
approach which leverages only the clause selec-
tion strategy by using the high-level policy.

3.2 Experimental Results

Table 2 shows the performance comparison of
different approaches. From this table, we can
see that, all LSTM-based approaches outperform
SVM, showing that LSTM has potentials in au-
tomatically learning text representations and can
bring performance improvement for DASC.

Four state-of-the-art ASC approaches including
MAMC, HARN, HUARN and C-HAN all per-
form better than LSTM. These results confirm the
helpfulness of considering aspect information in
DASC. Besides, we find the reinforcement learn-
ing based approach HS-LSTM without consid-



5587

Approaches TripUser TripAdvisor BeerAdvocate
Acc.↑ MSE↓ Acc.↑ MSE↓ Acc.↑ MSE↓

HRL 62.84 0.351 52.27 0.662 41.39 1.503
w/o cosine intermediate reward in Eq.(3) 60.15 0.487 49.02 0.811 38.72 1.673
w/o penalty delay reward in Eq.(6) 61.52 0.425 51.15 0.711 40.13 1.577
w/o the representation of selected clauses 58.40 0.622 46.33 1.207 38.61 1.684
w/o the representation of selected words 60.08 0.497 48.94 0.886 39.92 1.626
using sentence splitting instead of clause 59.74 0.504 50.11 0.842 39.33 1.651

Table 3: Ablation study of HRL on three different datasets.

ering aspect information can achieve comparable
performance with MAMC, HARN, C-HAN, and
even beat MAMC on two datasets TripUser and
TripAdvisor, which demonstrates that using rein-
forcement learning is a good choice to learn text
representation for DASC.

Our approach RL-Word-Selection and RL-
Clause-Selection outperform most above ap-
proaches and they only perform slightly worse
than HUARN. This result encourages to perform
clause or word selection in DASC. Among all
these approaches, our approach HRL performs
best and it significantly outperforms (p-value <
0.01) strong baseline HUARN which actually con-
siders some other kinds of external information,
such as the overall rating and the user information.
These results encourage to perform both clause
and word selection in DASC.

Ablation Study. Further, we conduct the abla-
tion study of HRL to evaluate the contribution of
each component. The results are shown in Table
3. From this table, we can see that 1) Using cosine
intermediate reward in Eq.(3) can averagely im-
prove Acc. by 2.87% on three different datasets.
2) Using penalty delay reward in Eq.(6) can aver-
agely improve Acc. by 1.23%. 3) To concatenate
additional representation of the selected clauses in
rating predictor can improve Acc. by 4.38%. 4)
To concatenate additional representation of the se-
lected words in rating predictor can improve Acc.
by 2.72%. 5) Using the clause splitting instead of
sentence splitting could improve Acc. by 2.44%.
This confirms that it is more appropriate to con-
sider clauses as the segmentation units than sen-
tences. This is because that 90% of clauses con-
tain only one opinion expression as proposed in
Bayoudhi et al. (2015). For instance, as shown in
Figure 1, if we use the sentences as the segmenta-
tion units, Clause1-Clause3 will be assigned into
one unit while they talk about two aspects, i.e., lo-
cation and room. In this scenario, sentence selec-
tion will not be able to discard noisy parts inside

10 20 30 40 50
0

0.25

0.5

0.75

Training Epochs

Av
er

ag
e

R
ew

ar
d

High-level Reward
Low-level Reward

Figure 3: Training reward with different epochs

the sentence for the aspect location or room.

4 Analysis and Discussion

Analysis of HRL Training. Figure 3 shows two
average rewards (each epoch) of high-level and
low-level policy on BeerAdvocate respectively. To
clearly observe the change of the reward, follow-
ing Lillicrap et al. (2016), all rewards are normal-
ized to (0, 1). From this figure, we can see that,
both the high-level and low-level reward increase
as the training algorithm iterates. This result indi-
cates that our HRL approach is capable of stably
revising its policies to obtain more discriminative
clauses and words for better performing.

Analysis of Clause and Word Selection. Fig-
ure 4 shows visualizations of our HRL approach
which performs the clause selection and word se-
lection on a review document. From this fig-
ure, we can see that HRL is able to precisely
select aspect-relevant clauses, i.e., Clause1 and
Clause2, for aspect location while select Clause3
and Clause4 for room. Further, HRL is able to se-
lect all sentiment-relevant words, such as “close”
and “very convenient” for aspect location, while
“a little uncomfortable” and “nitpicking”for room.

Error Type Breakdown. We analyze error
cases in the experiments and broadly categorize
them into three types: (1) The first type of errors
are due to negation words. For instance, for the
review “The taste of this beer is not good, don’t
buy it”, HRL could precisely select the sentiment



5588

[This  hotel  is  close  to  railway  station ]
[and    very  convenient    to    eat    around]

[although  the  staff  service  is  professional .]

[but   room of  Hilton  is    a   little  uncomfortable  .]
[I   am   often   nitpicking   for   room   decoration  .]
[Besides  ,   the   price   is   very  expensive]

Clause1
Clause2

Clause3
Clause4

Clause5
Clause6

(a) For aspect location

[This  hotel  is  close  to  railway  station]
[and    very  convenient    to    eat    around]

[although  the  staff  service  is  professional .]

[but   room of  Hilton  is    a   little  uncomfortable  .]
[I   am   often   nitpicking   for   room   decoration  .]
[Besides  ,   the   price   is   very  expensive]

Clause1
Clause2

Clause3
Clause4

Clause5
Clause6

(b) For aspect room

Figure 4: Visualizations of clause selection (along with the row ↓) and word selection (along with the column →)
for aspect (a) location and (b) room. Red denotes the clause has been selected, blue denotes the word has been

selected and other colors denote the token has been discarded.

“good”, but fail to select the negation word “not”.
This inspires us to work on optimizing our ap-
proach in order to capture negation scope better
in our future work. (2) The second type of er-
rors are due to comparative opinions. For instance,
for the review “The room of Sheraton is much bet-
ter than this one.”, HRL incorrectly predicts high
rating (5 stars) to aspect room. It would be in-
teresting to see if incorporating syntactic informa-
tion can solve this problem and bring performance
improvement. (3) Finally, some errors are due to
mistakes during clause splitting (i.e., EDU split-
ting). For instance, for the review “[This hotel
having good location] [often needs lots of time to
check in.]”, it is assigned into one clause while it
talks two aspects, i.e., location and check in/front
desk. This encourages to improve the performance
of clause splitting for informal review texts.

5 Related Work

Aspect Sentiment Classification. Traditional
studies for DASC mainly focus on feature en-
gineering to explore efficient features for DASC
(Titov and McDonald, 2008; Lu et al., 2011;
McAuley et al., 2012). Recently, neural networks
with the characteristic of automatically mining
features have shown promising results on DASC.
Lei et al. (2016) focused on extracting rationales
for aspects and build a neural text regressor to pre-
dict aspect rating; Yin et al. (2017) focused on us-
ing hierarchical iterative attention to learn aspect-
specific text representation for DASC; Li et al.
(2018) employed a hierarchical attention approach
to DASC which incorporates both the external user
and overall rating information. Besides, neural
networks have been widely adopted for perform-
ing a closely related task, i.e., Sentence-level As-
pect Sentiment Classification (Wang et al., 2016;
Tang et al., 2016; Wang and Lu, 2018).

Reinforcement Learning. In recent years, re-

inforcement learning has been applied success-
fully to some NLP tasks. Guo (2015) employed
deep Q-learning to improve the seq2seq model
for the text generation task; Li et al. (2016)
showed how to apply deep reinforcement learn-
ing to model future reward in the chatbot dia-
logue task; Takanobu et al. (2018) employed hi-
erarchical reinforcement learning to model the re-
lation extraction task; Zhang et al. (2018) com-
bined LSTM with reinforcement learning to learn
structured representations for the text classifica-
tion task, which is inspirational to our approach.

Unlike all above studies, inspired by the cogni-
tive process of human beings, this paper proposes
a new HRL approach to DASC task. To the best of
our knowledge, this is the first attempt to address
DASC with HRL.

6 Conclusion

In this paper, we propose a hierarchical reinforce-
ment learning approach to DASC. The main idea
of the proposed approach is to perform sentiment
classification like human beings. Specifically, our
approach employs a high-level policy and a low-
level policy to perform clause selection and word
selection in DASC respectively. Experimentation
shows that both the clause and word selection are
effective for DASC and the proposed approach
significantly outperforms several state-of-the-art
baselines for DASC.

In our future work, we would like to solve other
challenges in DASC, e.g., negation detection prob-
lem, to further improve the performance. Further-
more, we would like to apply our HRL approach to
other sentiment analysis tasks, such as aspect and
opinion co-extraction, and dialog-level sentiment
analysis.



5589

Acknowledgments

We thank our anonymous reviewers for their help-
ful comments. This work was supported by three
NSFC grants, i.e., No.61672366, No.61702149
and No.61525205. This work was also supported
by the joint research project of Alibaba Group
and Soochow University, and a Project Funded by
the Priority Academic Program Development of
Jiangsu Higher Education Institutions (PAPD).

References
A. Bayoudhi, H. Ghorbel, H. Koubaa, and L. Belguith.

2015. Sentiment classification at discourse segment
level: Experiments on multi-domain arabic corpus.
JLCL, 30(1).

Hongyu Guo. 2015. Generating text with deep rein-
forcement learning. CoRR, abs/1510.09202.

D. Kingma and J. Ba. 2014. Adam: A method for
stochastic optimization. CoRR, abs/1412.6980.

T. Lei, R. Barzilay, and T. Jaakkola. 2016. Rationaliz-
ing neural predictions. In Proceedings of EMNLP.

J. Li, H. Yang, and C. Zong. 2018. Document-level
multi-aspect sentiment classification by jointly mod-
eling users, aspects, and overall ratings. In Proceed-
ings of COLING.

Jiwei Li, Will Monroe, Alan Ritter, Michel Galley,
Jianfeng Gao, and Dan Jurafsky. 2016. Deep rein-
forcement learning for dialogue generation. CoRR,
abs/1606.01541.

S. Li, C. Huang, G. Zhou, and Sophia Yat Mei Lee.
2010. Employing personal/impersonal views in su-
pervised and semi-supervised sentiment classifica-
tion. In Proceedings of ACL.

Timothy P. Lillicrap, Jonathan J. Hunt, Alexander
Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa,
David Silver, and Daan Wierstra. 2016. Continuous
control with deep reinforcement learning. In Pro-
ceedings of ICLR.

X. Liu, L. Mou, H. Cui, Z. Lu, and S. Song. 2018.
JUMPER: learning when to make classification de-
cisions in reading. CoRR, abs/1807.02314.

B. Lu, M. Ott, C. Cardie, and B. K. Tsou. 2011. Multi-
aspect sentiment analysis with topic models. In Pro-
ceedings of ICDM.

W. MANN. 1988. Rhetorical structure theory : To-
ward a functional theory of text organization. Text,
8(3):243–281.

G. Marcus. 2018. Deep learning: A critical appraisal.
CoRR, abs/1801.00631.

J. McAuley, J. Leskovec, and D. Jurafsky. 2012. Learn-
ing attitudes and attributes from multi-aspect re-
views. In Proceedings of ICDM.

Andrius Mudinas, Dell Zhang, and Mark Levene. 2012.
Combining lexicon and learning based approaches
for concept-level sentiment analysis. In Proceedings
of the first international workshop on issues of sen-
timent discovery and opinion mining, page 5. ACM.

B. Pang and L. Lee. 2007. Opinion mining and senti-
ment analysis. Foundations and Trends in Informa-
tion Retrieval, 2(1-2).

R. Sutton, D. McAllester, and etc. 1999a. Policy gra-
dient methods for reinforcement learning with func-
tion approximation. In Proceedings of NIPS.

R. Sutton, D. Precup, and S. Singh. 1999b. Between
mdps and semi-mdps: A framework for temporal ab-
straction in reinforcement learning. Artif. Intell.

Ryuichi Takanobu, Tianyang Zhang, Jiexi Liu, and
Minlie Huang. 2018. A hierarchical framework
for relation extraction with reinforcement learning.
CoRR, abs/1811.03925.

D. Tang, B. Qin, and T. Li. 2015. Document modeling
with gated recurrent neural network for sentiment
classification. In Proceedings of EMNLP.

D. Tang, B. Qin, and T. Liu. 2016. Aspect level sen-
timent classification with deep memory network. In
Proceedings of EMNLP.

I. Titov and R. McDonald. 2008. A joint model of text
and aspect ratings for sentiment summarization. In
Proceedings of ACL.

B. Wang and W. Lu. 2018. Learning latent opinions for
aspect-level sentiment classification. In Proceed-
ings of AAAI.

H. Wang, Y. Lu, and C. Zhai. 2010. Latent aspect rat-
ing analysis on review text data: a rating regression
approach. In Proceedings of KDD.

J. Wang, J. Li, S. Li, Y. Kang, M. Zhang, L. Si, and
G. Zhou. 2018. Aspect sentiment classification with
both word-level and clause-level attention networks.
In Proceedings of IJCAI.

Y. Wang, M. Huang, X. Zhu, and L. Zhao. 2016.
Attention-based LSTM for aspect-level sentiment
classification. In Proceedings of EMNLP.

R. Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. Machine Learning, 8.

Y. Yang and X. Liu. 1999. A re-examination of text
categorization methods. In Proceedings of SIGIR.

Y. Yin, Y. Song, and M. Zhang. 2017. Document-
level multi-aspect sentiment classification as ma-
chine comprehension. In Proceedings of EMNLP.



5590

T. Zhang, M. Huang, and L. Zhao. 2018. Learning
structured representation for text classification via
reinforcement learning. In Proceedings of AAAI.

Y. Zou, T. Gui, Q. Zhang, and X. Huang. 2018. A
lexicon-based supervised attention model for neural
sentiment analysis. In Proceedings of COLING.


