



















































Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics


Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 275–280
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-2043

Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 275–280
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-2043

Oracle Summaries of Compressive Summarization

Tsutomu Hirao and Masaaki Nishino and Masaaki Nagata
NTT Communication Science Laboratories, NTT Corporation
2-4 Hikaridai, Seika-cho, Soraku-gun, Kyoto, 619-0237, Japan

{hirao.tsutomu,nishino.masaaki,nagata.masaaki}@lab.ntt.co.jp

Abstract

This paper derives an Integer Linear Pro-
gramming (ILP) formulation to obtain an
oracle summary of the compressive sum-
marization paradigm in terms of ROUGE.
The oracle summary is essential to re-
veal the upper bound performance of the
paradigm. Experimental results on the
DUC dataset showed that ROUGE scores
of compressive oracles are significantly
higher than those of extractive oracles
and state-of-the-art summarization sys-
tems. These results reveal that com-
pressive summarization is a promising
paradigm and encourage us to continue
with the research to produce informative
summaries.

1 Introduction

Compressive summarization, a joint model inte-
grating sentence extraction and sentence compres-
sion within a unified framework, has been attract-
ing attention in recent years (Martins and Smith,
2009; Berg-Kirkpatrick et al., 2011; Almeida and
Martins, 2013; Qian and Liu, 2013; Kikuchi et al.,
2014; Yao et al., 2015). Since compressive sum-
marization methods can use a sub-sentence as an
atomic unit, they can pack more information into
summaries than extractive methods, which em-
ploy sentences as atomic units. Thus, compres-
sive summarization is essential when we want to
produce summaries under tight length constraints.
There are two approaches to compress entire doc-
ument(s) to be grammatical; one is trimming the
phrase structure trees (Berg-Kirkpatrick et al.,
2011) and the other is trimming the dependency
trees obtained from the document(s) (Martins and
Smith, 2009; Almeida and Martins, 2013; Qian
and Liu, 2013; Kikuchi et al., 2014; Yao et al.,

2015). This paper focuses on the latter approach
because recently it has been receiving much atten-
tion.

To measure the performance of compressive
summarization methods, ROUGE (Lin, 2004),
an automatic evaluation metric, is widely used.
ROUGE evaluates a system summary by exploit-
ing a set of human-made reference summaries to
give a score in the range [0,1]. When n-gram
occurrences of the system summary agree with
those in a set of reference summaries, the value
is 1. However, system summaries cannot achieve
ROUGE=1 since summarization systems cannot
reproduce reference summaries in most cases. In
other words, the maximum ROUGE score that can
be achieved by compressive summarization is un-
clear. As a result, researchers cannot know how
much room for further improvement is left. Thus,
it is beneficial to reveal the upper bound summary
that achieves the maximum ROUGE score and can
be produced by the systems. The upper bound
summary is known as the oracle summary. To
obtain the oracle summary on extractive summa-
rization paradigms, several approaches have been
proposed. Sipos et al. (2012) utilized a greedy al-
gorithm, and Kubina et al. (2013) utilized exhaus-
tive search based on heuristics. However, their
oracle summaries do not always retain the opti-
mal (maximum) ROUGE score. Recently, Hirao
et al. (2017) derived an Integer Linear Program-
ming (ILP) formulation to obtain the optimal or-
acle summary. Their oracle summary can help
researchers to comprehend the strict limitation of
the extractive summarization paradigm. However,
their method cannot be applied to obtain compres-
sive oracle summaries.

To reveal the ultimate limitation of the compres-
sive summarization paradigm, we propose an ILP
formulation to obtain a compressive oracle sum-
mary that maximizes the ROUGE score. We con-

275

https://doi.org/10.18653/v1/P17-2043
https://doi.org/10.18653/v1/P17-2043


ducted experimental evaluation on the Document
Understanding Conference (DUC) 2004 dataset.
The result demonstrated that ROUGE scores of
compressive oracle summaries completely outper-
formed those of extractive oracle summaries and
those of state-of-the-art summarization methods.
This indicates that compressive summarization is
a promising paradigm for leveraging research re-
sources.

2 Definition of Compressive Oracle
Summaries

Before defining compressive oracle summary, we
briefly describe ROUGEn. Given K reference
summaries R={R1, . . . , RK} and a system sum-
mary S. Let G={gn1 , . . . , gnM} be the set of all
n-grams appearing in reference summaries. Let
|G|=M . ROUGEn is defined as follows:

ROUGEn(R, S) =
∑K

k=1

∑M
j=1min{N(gnj , Rk), N(gnj , S)}∑K
k=1

∑M
j=1N(g

n
j , Rk)

(1)

gnj represents the j-th n-gram appearing in refer-
ence summaries. N(gnj , Rk) and N(g

n
j , S) are the

number of occurrences of n-gram gnj in Rk and S,
respectively. Thus, compressive oracle summaries
are defined as follows:

O =argmax
S⊆T

ROUGEn(R, S)

s.t. `(S) ≤ Lmax.
(2)

T is the set of all valid word subsequences1 ob-
tained from sentences contained in the input docu-
ment(s), and Lmax is the length limitation of the
oracle summary. `(S) indicates the number of
words in the summary. Neither approximation nor
exact algorithms are known for solving this prob-
lem.

3 ILP Formulation to Obtain the
Compressive Oracle Summary

3.1 Dependency Structure of a Sentence

In this paper, we follow the dependency tree trim-
ming approach proposed by Filippova et al. (2008;
2013). They proposed rules that transform a
tree that represents dependency relation between

1Word subsequences can be regarded as grammatical sen-
tences. We regard rooted subtrees of dependency trees as
valid word subsequences. For details, see Section 3.1.

words into a tree that represents dependency re-
lation between chunks (consisting of a word or
word sequence). Since we can trim their depen-
dency trees without loss of grammatical consis-
tency, Thus, we employ the trees in our compres-
sive summarization framework. Figure 1 shows
examples.

3.2 ILP Formulation

maximize
K∑

k=1

M∑

j=1

zk,j (3)

s.t.
|D|∑

i=1

Ei∑

u=1

`i,ubi,u ≤ Lmax (4)

∀j :
∑

τ∈T (gnj )
mτ ≥ zk,j (5)

∀j : N(gnj , Rk) ≥ zk,j (6)
∀i, u : bi,parent(i,u) ≥ bi,u (7)

∀i, v, q ∈ Vi(wi,v) : bi,q ≥ mi,v (8)
∀i, v, p ∈ Ui(wi,v) : bi,p ≤ 1−mi,v (9)

∀i, u : mi,v ∈ {0, 1} (10)
∀i, v : bi,u ∈ {0, 1} (11)
∀k, j : zk,j ∈ Z+. (12)

Since the denominator of equation (1) is constant
for a given set of reference summaries, we can find
an oracle summary by maximizing the numerator
of equation (1). Equation (3) is the objective func-
tion that corresponds to maximization of the nu-
merator of equation (1). zk,j is the count of the
j-th n-gram that is contained in both the k-th refer-
ence summary and the oracle summary. Equation
(4) ensures that the length of the oracle summary
is less than Lmax. bi,u is a binary decision variable
indicating whether u-th chunk in i-th sentence is
contained in an oracle summary or not. `i,u indi-
cates the number of the words in u-th chunk in the
i-th sentence. D is a set of sentences and Ei is
the number of chunks in the i-th sentence. Equa-
tions (5) and (6) represent min operation in equa-
tion (1). wi,v is the v-th possible word sequence
whose length is n and that is contained in the i-
th sentence, and mi,v is a binary decision vari-
able indicating whether wi,v is contained in the
oracle summary or not. T (gnj ) is a set of tuples
consisting of indices (i, v) whose word sequence
corresponds to gnj , i.e., T (gnj )={(i, v)|wi,v=gnj }.
Thus, zk,j=min{N(gnj , Rk), N(gnj , S)}. Equa-
tion (7) ensures that an oracle summary consists

276



w1,1: Most_dolphins, w1,2: Most_live, w1,3: Most_in, w1,4: dolphins_live, w1,5: dolphins_in, w1,6: live_in, 
w1,7: in_ervery, w1,8:every_ocean.

w2,1: Some_dolphins, w2,2: dolphins_live, w2,3: dolphins_in, w2,4: dolphins_in, w2,5: live_in, w2,6: live_in, 
w2,7: rivers_in, w2,8: in_some, w2,9: some_regions.

[Most]c1,1 [dolphins]c1,2 [live]c1,3 [in every ocean.]c1,4

ROOT	

S1:	

[Some dolphins]c2,1 [live]c2,2 [in rivers]c2,3 [in some regions.]c2,4	
	

ROOT	

S2:	

[Dolphins]c3,1 [usually]c3,2 [live]c3,3 [20-40 years]c3,4 [in the wild.]c3,5 	S3:	

ROOT	

w3,1: Dolphins_usually, w3,2: Dolphins_live, w3,3: Dolphins_20-40, w3,4: Dolphins_in, w3,5: usually_live 
w3,6:usually_20-40, w3,7: usually_in, w3,8: live_20-40, w3,9: live_in, w3,10: years_in, w3,11: in_the, w3,12: the_wild.

Figure 1: Examples of trees that represent dependency relations between chunks, and word sequences
(whose length is 2). Chunks are enclosed in square brackets. Note that we disregard word sequences
that are generated by destroying the structure of chunks such as “live every” in S1, “dolphins in” in S2,
“live wild” in S3.

of a set of rooted subtrees of the sentences in the
entire document(s). Function parent (i, u) returns
the index of the parent chunk of the u-th chunk in
the dependency tree obtained from the i-th sen-
tence. Equations (8) and (9) represent the de-
pendency relation between n-grams and chunks.
When we include wi,v in the oracle summary, we
have to include all chunks that contain the words
in wi,v. In addition, when the above chunks have
gap(s), we have to drop chunk(s) within the gap(s).
Here, Vi(wi,v) is a set of indices of chunks that
includes words in wi,v, and Ui(wi,v) is a set of
indices of chunks within the gap(s), defined as
{h|min(Vi(wi,v)) < h < max(Vi(wi,v))} and
h /∈ Vi(wi,v).

We give an example to show how chunks
and word sequences are related. When we
pack a bigram “live in” in an oracle summary,
there are four candidates in the source document
(Fig. 1). Word subsequences, w1,6,w2,5,w2,6
and w3.9 match “live in”. Thus, T (live in) =
{(1, 6), (2, 5), (2, 6), (3, 9)}. Here, when we want
to pack w2,6 into the oracle summary, we have to
pack both chunks c2,2 and c2,4 (b2,2 = b2,4 = 1)
because U2(w2,6) = {2, 4}. Then, we have to
drop chunk c2,3(b2,3 = 0) because c2,3 is within
the gap between chunks c2,2 and c2,4 (V2(w2,6) =
3). Similarly, when we pack w3,9 into an oracle
summary, we have to pack both chunks c3,3 and
c3,5 and drop chunk c3,4. However, this compres-

sion is not allowed since there is no dependency
relationship between c3,3 and c3,5.

After solving the ILP problem, we can ob-
tain compressive oracle summaries by collecting
chunks according to bi,u=1.

4 Experiments

To investigate the potential limitation of the com-
pressive summarization paradigm, we compare
ROUGE scores of compressive oracle summaries
with those of extractive oracle summaries and
those obtained from state-of-the-art summariza-
tion systems. Extractive oracle summaries are ob-
tained by solving the ILP formulation proposed
by (Hirao et al., 2017). System summaries are
extracted from a public repository2 (Hong et al.,
2014).

4.1 Settings

We conducted experimental evaluation on the
DUC-2004 dataset for multiple document sum-
marization evaluation, a widely used benchmark
test set for generic multiple document summariza-
tion tasks. The dataset consists of 50 topics, each
of which contains 10 newspaper articles. To ob-
tain oracle summaries based on the ILP formula-
tion described in section 3.2, first, we applied the
Stanford parser (de Marneffe et al., 2006) to all

2http://www.cis.upenn.edu/˜nlp/
corpora/sumrepo.html

277



Method
Metric

n=1 n=2 n=1+2 Sent.
n=1 42.6 13.1 24.1 5.34

Ext. n=2 36.6 16.9 24.3 5.06
n=1+2 40.9 16.1 25.4 5.24
n=1 50.9 13.8 27.7 10.6

Comp. n=2 40.9 21.3 28.6 7.82
n=1+2 47.9 19.7 30.3 8.48

RegSum 33.1 10.2 18.8 4.9
ICSISumm 31.0 10.3 18.0 4.2

Table 1: ROUGE scores and the number of sen-
tences of extractive and compressive oracle sum-
maries and those obtained from state-of-the-art
summarization systems, RegSum and ICSISumm.
n= 1 corresponds to ROUGE1, n=2 corresponds
to ROUGE2, n=1+2 corresponds to ROUGE-SU0.
“Sent.” indicates the average number of sentences
in the summaries.

sentences in the dataset to obtain dependency re-
lations between words, and then we transformed
them into trees that represent the dependency re-
lations between chunks by applying Filippova’s
rules (Filippova and Strube, 2008; Filippova and
Altun, 2013). To solve the ILP problem, we uti-
lized CPLEX version 12.5.1.0.

We obtained and evaluated oracle summaries
based on three variants of ROUGE, ROUGE1,
ROUGE2 and ROUGE-SU0, with the following
conditions3: (1) ROUGE1, utilizing unigrams ex-
cluding stopwords (2) ROUGE2, utilizing bigrams
with stopwords, and (3) ROUGE-SU0, which is an
extension of ROUGEn, utilizing unigram and bi-
gram (excluding skip-bigram) statistics.

4.2 Results and Discussion

Table 1 shows ROUGE scores of compressive and
extractive oracle summaries and those of RegSum
(Hong and Nenkova, 2014) that achieved the best
ROUGE1 and ICSISumm (Gillick and Favre, 2009;
Gillick et al., 2009) that achieved the best ROUGE2
on the DUC-2004 dataset, respectively.

We compare ROUGE scores of compressive or-
acle summaries with extractive oracle summaries.
The best scores are obtained when we use the same
ROUGE variant for both computation and evalu-
ation (see bolded scores in Table 1). There are
large differences between the best scores of ex-

3With stop words: options “-n 2 -s -m -x” are used. With-
out stop words: options “-n 2 -m -x” are used.

Method Score

Ext.
n=1 4.55
n=2 4.58

Comp.
n=1 3.88
n=2 4.07

Table 2: Readability evaluation by human subjects

tractive method and compressive method. The dif-
ferences are 8.3 points, 4.4 points and 4.9 points
for ROUGE1, ROUGE2, ROUGE-SU0, respectively.
As one of the reasons for the above results, com-
pressive oracle summaries have a much larger
number of (sub-)sentences than extractive oracle
summaries for the same length limitation. This is
an advantage of compressive summarization over
extractive summarization.

However, we have to note that compressive or-
acle summaries optimized to ROUGE1 may not
be desirable since they are produced by com-
pressing sentences by ignoring contexts. In fact,
they obtained remarkable gain for ROUGE1 score
(8.3 points), while they obtained modest gains in
ROUGE2 and ROUGE-SU0 (0.7 and 3.6 points, re-
spectively). This may suggest that the resultant
summaries overfit to the unigrams in the reference
summaries.

We compare ROUGE scores of compressive or-
acle summaries with those of system summaries,
ROUGE scores of compressive oracle summaries
completely outperformed those of state-of-the-art
systems. The differences are in a range from 11 to
17 points.

The results demonstrated that compressive sum-
marization is a promising approach to produce
more informative summaries, and room still exists
for further improvement. Thus, compressive sum-
marization is important research topic to leverage
our resources.

4.3 Readability evaluation

We conducted human evaluation to compare read-
ability of extractive oracle summaries to that of
compressive oracle summaries. We presented the
oracle summaries to five human subjects and asked
them to rate the summaries using an integer scale
from 1 (very poor) to 5 (very good). Table 2 shows
the results. Extractive oracle summaries achieved
near perfect scores. Although the scores of com-
pressive oracle summaries are inferior to those of
extractive oracle summaries, they achieved good

278



Reference:
The Wye River accord has not been implemented. As the Israeli cabinet was considering the agreement, Islamic Jihad
militants exploded a car bomb in nearby Mahane Yehuda market. The cabinet suspended ratification of the agreement,
demanding the Palestinian Authority take steps against terrorism. Further, after the bombing, Israeli Prime Minister
Netanyahu announced the resumption of construction of a new settlement, Har Homa, in a traditionally Arab area east of
Jerusalem. Israel also demands that Arafat outlaw the military wings of Islamic Jihad and Hamas. The attack injured 24
Israelis, but only the two assailants, Sughayer and Tahayneh, were killed.

Extractive oracle summary n = 1:
The procedure is part of the Wye River agreement negotiated last month. The radical group Islamic Jihad claimed
responsibility Saturday for the market bombing and vowed more attacks to try to block the new peace accord. Most recently,
Israel’s Cabinet put off a vote to ratify the accord after a suicide bombing Friday in Jerusalem that killed the two assailants and
injured 21 Israelis. David Bar-Illan, a top aide to Israeli Prime Minister Benjamin Netanyahu, said Sunday that Israel expects
Palestinian leader Yasser Arafat to formally outlaw the military wings of Islamic Jihad and the larger militant group Hamas.

Compressive oracle summary n = 1:
The Israeli cabinet suspended ratification of the Wye agreement. A Prime Minister Benjamin Netanyahu said that Israel would
continue to build Jewish neighborhoods throughout Jerusalem including at a site in the Arab sector of the city. Netanyahu’s
Cabinet delayed action on the peace accord. The radical group Islamic Jihad claimed responsibility for the bombing and
vowed attacks. Implementation of the Israeli-Palestinian land-for-security accord was to have begun. David Bar-Illan said that
Israel expects Palestinian Yasser Arafat to outlaw the military wings of Islamic Jihad and the Hamas. Their car-bomb blew in a
Jerusalem market killing men and wounding 24 people.

Extractive oracle summary n = 2:
In response to the attack, the Israeli cabinet suspended ratification of the Wye agreement until there “ is verification that the
Palestinian authority is indeed fighting terrorism.” The radical group Islamic Jihad claimed responsibility Saturday for the
market bombing and vowed more attacks to try to block the new peace accord. Most recently, Israel’s Cabinet put off a vote to
ratify the accord after a suicide bombing Friday in Jerusalem that killed the two assailants and injured 21 Israelis. Their
car-bomb blew apart two hours later in a Jerusalem market, killing both men and wounding 24 people. I’m going to Paradise. ”

Compressive oracle summary n = 2:
The Israeli cabinet suspended ratification of the agreement. Hassan Asfour said the Palestinian Authority condemned the
attack. Two people were killed. The procedure is part of the Wye River agreement. The radical group Islamic Jihad claimed
responsibility for the bombing and vowed more attacks. Israel is demanding that the military wings of two radical Islamic
groups be outlawed. Implementation of the land-for-security accord was to have begun. Israel’s Cabinet put off a vote to ratify
the accord after a bombing in Jerusalem that killed the two assailants and injured 21 Israelis. Their car-bomb blew in a
Jerusalem market killing men.

Figure 2: Summaries obtained from topic:D30010

enough score, around 4. The results support that
our trimming approach based on chunk is effec-
tive. We show examples of oracle summaries in
Figure 2.

5 Conclusion

To reveal the ultimate limitations of the compres-
sive summarization paradigm, this paper proposed
an Integer Linear Programming (ILP) formula-
tion to obtain compressive oracle summaries in
terms of ROUGE. Evaluation results obtained from
the DUC 2004 dataset demonstrated that ROUGE
scores of compressive summaries are significantly
superior to those of extractive oracle summaries
and those of the state-of-the-art systems. These
results imply that the compressive summarization
paradigm is a promising direction to produce in-
formative summaries and encourage leveraging of
further resources for the research.

References
Miguel B. Almeida and André F.T. Martins. 2013. Fast

and robust compressive summarization with dual de-
composition and multi-task learning. In Proc. of the
51st Annual Meeting of the Association for Compu-
tational Linguistics (ACL). pages 196–206.

Taylor Berg-Kirkpatrick, Dan Gillick, and Dan Klein.
2011. Jointly learning to extract and compress. In
Proc. of the 49th Annual Meeting of the Association
for Computational Linguistics (ACL). pages 481–
490.

Marie-Catherine de Marneffe, Bill MacCartney, and
Christopher D. Manning. 2006. Generating typed
dependency parses from phrase structure parses.
In In Proceedings of International Conference on
Language Resources and Evaluation (LREC). pages
449–454.

Katja Filippova and Yasemin Altun. 2013. Overcom-
ing the lack of parallel data in sentence compres-
sion. In Proc. of the 2013 Conference on Em-
pirical Methods in Natural Language Processing
(EMNLP). pages 1481–1491.

Katja Filippova and Michael Strube. 2008. Depen-
dency tree based sentence compression. In Proc. of

279



the 5th International Natural Language Generation
Conference (INLG). pages 25–32.

Dan Gillick and Benoit Favre. 2009. A scalable global
model for summarization. In Proc. of the Workshop
on Integer Linear Programming for Natural Lan-
guage Processing. pages 10–18.

Dan Gillick, Benoit Favre, Dilek Hakkani-Tur, Berndt
Bohnet, Yang Liu, and Shasha Xie. 2009. The
ICSI/UTD summarization system at TAC 2009. In
Proc. of the Text Analysis Conference (TAC).

Tsutomu Hirao, Masaaki Nishino, Jun Suzuki, and
Masaaki Nagata. 2017. Enumeration of extractive
oracle summaries. In Proc. of the 15th Conference
of the European Chapter of the Association for Com-
putational Linguistics (EACL). pages 386–396.

Kai Hong, John Conroy, Benoit Favre, Alex Kulesza,
Hui Lin, and Ani Nenkova. 2014. A repository
of state of the art and competitive baseline sum-
maries for generic news summarization. In Proc.
of the Ninth International Conference on Language
Resources and Evaluation (LREC’14). pages 1608–
1616.

Kai Hong and Ani Nenkova. 2014. Improving the
estimation of word importance for news multi-
document summarization. In Proc. of the 14th Con-
ference of the European Chapter of the Association
for Computational Linguistics (EACL). pages 712–
721.

Yuta Kikuchi, Tsutomu Hirao, Hiroya Takamura, Man-
abu Okumura, and Masaaki Nagata. 2014. Single
document summarization based on nested tree struc-
ture. In Proc. of the 52nd Annual Meeting of the
Association for Computational Linguistics (ACL).
pages 315–320.

Jeff Kubina, John Conroy, and Judith Schlesinger.
2013. ACL 2013 multiling pilot overview. In Proc.
of the MultiLing 2013 Workshop on Multilingual
Multi-document Summarization. pages 29–38.

Chin-Yew Lin. 2004. ROUGE: A Package for Auto-
matic Evaluation of Summaries. In Proc. of Work-
shop on Text Summarization Branches Out. pages
74–81.

Andre Martins and Noah A. Smith. 2009. Summa-
rization with a joint model for sentence extraction
and compression. In Proc. of the Workshop on Inte-
ger Linear Programming for Natural Language Pro-
cessing. pages 1–9.

Xian Qian and Yang Liu. 2013. Fast joint compression
and summarization via graph cuts. In Proc. of the
2013 Conference on Empirical Methods in Natural
Language Processing (EMNLP). pages 1492–1502.

Ruben Sipos, Pannaga Shivaswamy, and Thorsten
Joachims. 2012. Large-margin learning of submod-
ular summarization models. In Proc. of the 13th

Conference of the European Chapter of the Associ-
ation for Computational Linguistics (EACL). pages
224–233.

Jin-ge Yao, Xiaojun Wan, and Jianguo Xiao. 2015.
Compressive document summarization via sparse
optimization. In Proc. of the 24th International
Joint Conference on Artificial Intelligence (IJCAI
2015). pages 1376–1382.

280


	Oracle Summaries of Compressive Summarization

