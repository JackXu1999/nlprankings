



















































Grammatical Error Detection and Correction using a Single Maximum Entropy Model


Proceedings of the Eighteenth Conference on Computational Natural Language Learning: Shared Task, pages 74–82,
Baltimore, Maryland, 26-27 July 2014. c©2014 Association for Computational Linguistics

Grammatical Error Detection and Correction
using a Single Maximum Entropy Model∗

Peilu Wang, Zhongye Jia and Hai Zhao†
Key Laboratory of Shanghai Education Commission for

Intelligent Interaction and Cognitive Engineering,
Center for Brain-Like Computing and Machine Intelligence

Department of Computer Science and Engineering, Shanghai Jiao Tong University
800 Dongchuan Road, Shanghai 200240, China

{plwang1990,jia.zhongye}@gmail.com,zhaohai@cs.sjtu.edu.cn
Abstract

This paper describes the system of Shang-
hai Jiao Tong Unvierity team in the
CoNLL-2014 shared task. Error correc-
tion operations are encoded as a group of
predefined labels and therefore the task
is formulized as a multi-label classifica-
tion task. For training, labels are obtained
through a strict rule-based approach. For
decoding, errors are detected and correct-
ed according to the classification results.
A single maximum entropy model is used
for the classification implementation in-
corporated with an improved feature selec-
tion algorithm. Our system achieved pre-
cision of 29.83, recall of 5.16 and F 0.5
of 15.24 in the official evaluation.

1 Introduction

The task of CoNLL-2014 is grammatical error cor-
rection which consists of detecting and correcting
the grammatical errors in English essays written
by non-native speakers (Ng et al., 2014). The re-
search of grammatical error correction can poten-
tially help millions of people in the world who are
learning English as foreign language. Although
there have been many works on grammatical error
correction, the current approaches mainly focus on
very limited error types and the result is far from
satisfactory.

The CoNLL-2014 shared task, compared with
the previous Help Our Own (HOO) tasks (Dale et
al., 2012) considering only determiner and prepo-
sition errors and the CoNLL-2013 shared task fo-

∗This work was partially supported by the National Natu-
ral Science Foundation of China (Grant No.60903119, Grant
No.61170114, and Grant No.61272248), the National Ba-
sic Research Program of China (Grant No.2013CB329401),
the Science and Technology Commission of Shanghai Mu-
nicipality (Grant No.13511500200), and the European Union
Seventh Framework Program (Grant No.247619).

†Corresponding author

cusing on five major types of errors, requires to
correct all 28 types of errors (Ng et al., 2014).

One traditional strategy is designing a system
combined of a set of sub-models, where each sub-
model is specialized for a specific subtask, for ex-
ample, correcting one type of errors. This strat-
egy is computationally efficient and can adopt d-
ifferent favorable features for each subtask. Top
ranked systems in CoNLL-2013 (Rozovskaya et
al., 2013; Kao et al., 2013; Xing et al., 2013;
Yoshimoto et al., 2013; Xiang et al., 2013) are
based on this strategy. However, the division of
the model relies on prior-knowledges and the de-
signing of different features for each sub-model
requires a large amount of manual works. This
shortage is especially notable in CoNLL-2014
shared task, since the number of error types is
much larger and the composition of errors is more
complicated than before.

In contrast, we follow the work in (Jia et al.,
2013a; Zhao et al., 2009a), integrating everything
into one model. This integrated system holds a
merit that a one-way feature selection benefits the
whole system and no additional process is needed
to deal with the conflict or error propagation of ev-
ery sub-models. Here is a glance of this method: A
set of more detailed error types are generated auto-
matically from the original 28 types of errors. The
detailed error type can be regarded as the label of
a word, thus the task of grammatical error detec-
tion is transformed to a multi-label classification
task using maximum entropy model (Berger et al.,
1996; Zhao et al., 2013). A feature selection ap-
proach is introduced to get effective features from
large amounts of feature candidates. Once errors
are detected through word label classification, a
rule-based method is used to make corrections ac-
cording to their labels.

The rest of the paper is organized as follows.
Section 2 describes the system architecture. Sec-
tion 3 introduces the feature selection approach

74



and the features we used. Experiments and result-
s are presented in section 5, followed by conclu-
sion.

2 System Architecture

In our approach, the grammatical error detection
is regarded as a multi-label classification task. At
first, each token in training corpus is assigned a la-
bel according to the golden annotation. The con-
struction of labels is rule based using an extend-
ed version of Levenshtein edit distance algorith-
m which will be discussed in the following sub-
section. Each label maps an edit operation to do
the correction, thus the generated labels are much
more detailed than the originial 28 error types.
Then, a maximum entropy (ME) model is adopted
as the classifier. With the labeled data, the process
of grammatical error correction is just applying the
edit operation mapped by each label, which is ba-
sically the reverse of the labeling phase.

2.1 Data Labeling
In CoNLL-2014 shared task, there are 28 error
types but they can not be used directly as class la-
bels, since these types are too general that they can
hardly be corrected by applying one rule-based
edit. For example, the correction of Vform (ver-
b form) error type includes all verb form inflec-
tions such as converting a verb to its infinitive for-
m, gerund form, past form and past participle and
so on. Previous works (Dahlmeier et al., 2012;
Rozovskaya et al., 2012; Kochmar et al., 2012)
manually decompose each error types to more de-
tailed subtypes. For example, in (Dahlmeier et al.,
2012), the determinater errors are decomposed in-
to:

• replacement determiner (RD): { a → the }
• missing determiner (MD): { ϵ → a }
• unwanted determiner (UD): { a → ϵ }
For a task with a few error types such as merely

determinative and preposition error in HOO 2012,
manually decomposition may be sufficient. How-
ever, for CoNLL-2014, all 28 error types are re-
quired to be corrected and some of these types
such as Rloc- (Local redundancy) and Um (Un-
clear meaning) are quite complex that the manu-
al decomposition is time consuming and requires
lots of grammatical knowledges. Therefore, an au-
tomatica decomposition method is proposed. It is

extended from the Levenshtein edit distance algo-
rithm and can divide error types into more detailed
subtypes that each subtype can be corrected by ap-
plying one simple rule. How to calculate the ex-
tended Levenshtein edit distance is described in
Algorithm 1.

Algorithm 1 Extended Levenshtein Edit Distance
INPUT: tokssrc, toksdst
OUTPUT: E, P
lsrc, ldst ← len(tokssrc), len(toksdst)
D[0 . . . lsrc][0 . . . ldst]← 0
B[0 . . . lsrc][0 . . . ldst]← (0, 0)
E[0 . . . lsrc][0 . . . ldst]← ϕ
for i← 1 . . . lsrc do

D[i][0]← i
B[i][0]← (i-1, 0)
E[i][0]← D

end for
for j ← 1 . . . ldst do

D[0][j]← j
B[0][j]← (0, j-1)
E[0][j]← A

end for
for i← 1 . . . lsrc; do

for j ← 1 . . . ldst do
if tokssrc[i-1] = toksdst[j-1] then

D[i][j]← D[i-1][j-1]
B[i][j]← (i-1, j-1)
E[i][j]← U

else
m = min(D[i-1][j-1], D[i-1][j], D[i][j-1])
if m = D[i-1][j-1] then

D[i][j]← D[i-1][j-1] + 1
B[i][j]← (i-1, j-1)
if lemma(tokssrc[i-1])

= lemma(toksdst[j-1]) then
E[i][j]← S

else
E[i][j]← I

end if
else if m = D[i-1][j] then

D[i][j]← D[i-1][j] + 1
B[i][j]← (i-1, j)
E[i][j]← D

else if m = D[i][j-1] then
D[i][j]← D[i][j-1] + 1
B[i][j]← (i, j-1)
E[i][j]← A

end if
end if

end for
end for
i, j ← lsrc, ldst
while i > 0 ∨ j > 0 do

insert E[i][j] into head of E
insert toksdst[j − 1] into head of P
(i, j)← B[i][j]

end while
return (E, P)

In this algorithm, tokssrc represents the tokens
that are annotated with one grammatical error and
toksdst represents the corrected tokens of tokssrc.
At first, three two dimensional matrixes D, B and

75



E are initialized. For all i and j, D[i][j] holds
the Levenshtein distance between the first i tokens
of tokssrc and first j tokens of toksdst. B stores
the path of the Levenshtein distance and E stores
the edit operations in this path. The original Lev-
enshtein edit distance has 4 edit operations: un-
change (U ), addition (A), deletion (D) and substi-
tution (S). We extend the “substitution” edit into
two types of edits: inflection (I) and the original
substitution (S). If two different words have the
same lemma, the substitution operation is I, else is
S. lemma(x) returns the lemma of token x. This
algorithm returns the edit operations E and the pa-
rameters of these operations P. Here is a simple
sample illustrating this algorithm. For the golden
edit {a red apple is → red apples are}, tokssrc is
a red apple is, toksdst is red apples are, the output
edits E will be {D,U , I,S}, and the parameters P
will be {-, red, apples, are}.

Then with the output of this extended Leven-
shtein distance algorithm, labels can be generated
by transforming these edit operations into readable
symbols. For those tokens without errors, we di-
rectly assign a special label “⊙” to them. A tricky
part of the labeling process is the problem of the
edit “addition”, A. A new token can only be added
before or after an existing token. Thus for edit op-
eration with addition, we must find an existing to-
ken that the label can be assigned to, and this sort
of token is defined as pivot. A pivot can be a token
that is not changed in an edit operation, such as the
“apple” in edit {apple → an apple}, or some oth-
er types of edit such as the inflection of “look” to
“looking” in edit {look → have been looking at}.

The names of these labels are based on BNF
syntax which is defined in Figure 1. The non-
terminal ⟨word⟩ can be substituted by all words
in the vocabulary. The non-terminal ⟨inflection-
rules⟩ can be substituted by terminals of inflection
rules that are used for correcting the error types of
noun number, verb form, and subject-verb agree-
ment errors. All the inflection rules are listed in
Table 1.

With the output of extended Levenshtein edits
distance algorithm, Algorithm 2 gives the process
to generate labels whose names are based on the
syntax defined in Figure 1. It takes the output E, P
of Algorithm 1 as inputs and returns the generat-
ed set of labels L. Each label in L corresponds to
one token in tokssrc in order. For our previous ex-
ample of edit {a red apple is → red apples are},

⟨label⟩ ::= ⟨simple-label⟩ | ⟨compound-label⟩

⟨simple-label⟩ ::= ⟨pivot⟩ | ⟨add-before⟩ |
⟨add-after⟩

⟨compound-label⟩ ::= ⟨add-before⟩ ⟨pivot⟩
| ⟨pivot⟩ ⟨add-after⟩
| ⟨add-before⟩ ⟨pivot⟩ ⟨add-after⟩

⟨pivot⟩ ::= ⟨unchange⟩ | ⟨substitution⟩ |
⟨inflection⟩

| ⟨deletion⟩

⟨add-before⟩ ::= ⟨word⟩⊕
| ⟨word⟩⊕⟨add-before⟩

⟨add-after⟩ ::= ⊕⟨word⟩
| ⊕⟨word⟩⟨add-after⟩

⟨substitution⟩ ::= ⟨word⟩

⟨inflection⟩ ::= ⟨inflection-rules⟩

⟨unchange⟩ ::= ⊙

⟨deletion⟩ ::= ⊖

Figure 1: BNF syntax of label

Rules Description
LEMMA change word to its lemma
NPLURAL change noun to its plural form
VSINGULAR change verb to its singular form
GERUND change verb to its gerund form
PAST change verb to its past form
PART change verb to its past partici-

ple

Table 1: Inflection rules

the L returned by Algorithm 2 is {⊖, ⊙, NPLU-
RAL, ARE} corresponding to the tokens {a, red,
apple, is} in tokssrc. Some other examples of the
generated labels are presented in Table 2.

These labels are elaborately designed that each
of them can be interpreted easily as a series of ed-
it operations. Once the labels are determined by
classifier, the correction of the grammatical errors
is conducted by applying the edit operations inter-
preted from these labels.

76



Algorithm 2 Labeling Algorithm
1: INPUT: E, P
2: OUTPUT: L
3: pivot← number of edits in E that are not A
4: L← ϕ
5: L← ′′
6: while i < length(E) do
7: if E[i] = A then
8: L← L+ label of edit E[i] with P[i]
9: i← i + 1

10: else
11: l← L+ label of edit E[i] with P[i]
12: pivot← pivot− 1
13: if pivot = 0 then
14: i← i + 1
15: while i < length of E do
16: l← l +⊕+ P[i]
17: i← i + 1
18: end while
19: end if
20: push l into L
21: L← ′′
22: end if
23: end while
24: L← upper case of L
25: return L

Tokens Edit Label
to {to reveal→revealing} ⊖reveal GERUND
a {a woman→women} ⊖woman NPLURAL
developing {developing world THE⊕
wold →the developing world} ⊙
a {a→ ϵ} ⊖
in {in→on} ON
apple {apple→an apple} AN⊕

Table 2: Examples of labeling

2.2 Label Classification

Using the approach described above, the training
corpus is converted to a sequence of words with
labels. Maximum entropy model is used as the
classifier. It allows a very rich set of features to be
used in a model and has shown good performance
in similiar tasks (Zhao et al., 2013). The features
we used are discussed in the next section.

3 Feature Selection and Generation

One key factor affecting the performance of maxi-
mum entropy classifier is the features it used. A
good feature that contains useful information to
guide classification will significantly improve the
performance of the classifier. One direct way to
involve more good features is involving more fea-
tures.

In our approach, large amounts of candidate
features are collected at first. We carefully exam-

ine the factors involved in a wide range of fea-
tures that have been or can be used to the word
label classification task. Many features that are
considered effective in various of previous work-
s (Dahlmeier et al., 2012; Rozovskaya et al.,
2012; Han et al., 2006; Rozovskaya et al., 2011;
Tetreault, Joel R and Chodorow, Martin, 2008)
are included. Besides, features that are used in
the similar spell checking tasks (Jia et al., 2013b;
Yang et al., 2012) and some novel features show-
ing effectiveness in other NLP tasks (Wang et al.,
2013; Zhang and Zhao, 2013; Xu and Zhao, 2012;
Ma and Zhao, 2012; Zhao, 2009; Zhao et al.,
2009b) are also included. However, using too
many features is time consuming. Besides, it in-
creases the probability of overfitting and may lead
to a poor solution of the maximum-likelihood pa-
rameter estimate in the ME training.

Algorithm 3 Greedy Feature Selection
1: INPUT: all feature candidates F
2: OUTPUT: selected features S
3: S = {f0, f1, . . . , fk}, a random subset of F
4: while do
5: C = RECRUITMORE(S)
6: if C = {} then
7: return S
8: end if
9: S′ = SHAKEOFF(S+C)

10: if scr(M(S)) ≥ scr(M(S′)) then
11: return S
12: end if
13: S = S′

14: end while
15: function RECRUITMORE(S)
16: C = {}, and p = scr(M(S))
17: for each f ∈ F − S do
18: if p < scr(M(S + {f})) then
19: C = C + {f}
20: end if
21: end for
22: end function
23: function SHAKEOFF(S)
24: while do
25: S′ = S0 = S
26: for each f ∈ S do
27: if scr(M(S′)) < scr(M(S′ − {f})) then
28: S′ = S′ − {f}
29: end if
30: end for
31: S = S′

32: if S′ = S0 then
33: return S′
34: end if
35: end while
36: end function

Therefore a feature selection algorithm is intro-
duced to filter out “bad” features at first and the re-
maining features will be used to generate new fea-
tures. The feature selection algorithm has shown

77



effectiveness in (Zhao et al., 2013) and is present-
ed in Algorithm 3.

In this algorithm, M(S) represents the model
using feature set S and scr(M) represents the e-
valuation score of model M on a development da-
ta set. It repeats two main steps until no further
performance gain is achievable:

1. Include any features from the rest of F into
the current set of candidate features if the in-
clusion would lead to a performance gain.

2. Exclude any features from the current set of
candidate templates if the exclusion would
lead to no deterioration in performance.

By repeatedly adding the useful and removing
the useless features, the algorithm aims to return
a better and smaller set of features for next round.
Only 55 of the 109 candidate features remain af-
ter using this algorithm and they are presented in
Table 4. Table 3 gives an interpretation of the ab-
breviations used in Table 4. Each feature of a word
is set to that listed in feature column if the word
satisfies the condition listed in current word col-
umn, else the feature is set to “NULL”. For ex-
ample, if the current word satisfies the condition
in the first row of Table 4 which is the first word
in the left of a NC, feature 1 of this word is set to
all words in the NC, otherwise, feature 1 is set to
“NULL”.

4 Experiment

4.1 Data Sets

The CoNLL-2014 training data is a corpus of
learner English provided by (Dahlmeier et al.,
2013). This corpus consists of 1,397 articles, 12K
sentences and 116K tokens. The official blind test
data consists of 50 articles, 245 sentences and 30K
tokens. More detailed information about this data
is described in (Ng et al., 2014; Dahlmeier et al.,
2013).

In development phase, the entire training corpus
is splited by sentence. 80% sentences are picked
up randomly and used for training and the rest
20% are used as the developing corpus. For the fi-
nal submission, the entire corpus is used for train-
ing.

Abbreviation Description
NP Noun Phrase
NC Noun Compound and is ac-

tive if second to last word in
NP is tagged as noun

VP Verb Phrase
cw Current Word
pos part-of-speech of the current

word
X.li the ith word in the left of X
X.ri the ith word in the right of X
NP[0] the first word of NP
NP.head the head word of NP
NP.(DT or
IN or TO)

word in NP whose pos is DT
or IN or TO

VP.verb word in VP whose pos is ver-
b

VP.NP NP in VP
dp the dependency relation gen-

erated by standford depen-
dency parser

dp.dep the dependent in the depen-
dency relation

dp.head the head in the dependency
relation

dp.rel the type of the dependency
relation

Table 3: The interpretation of the abbrevations in
Table 4

4.2 Data Labeling

The labeling algorithm described in section 2.1 is
firstly applied to the training corpus. Total 7047
labels are generated and those whose count is larg-
er than 15 is presented in Table 5. Directly ap-
plying these 7047 labels for correction receives an
M2 score of precision=90.2%, recall=87.0% and
F 0.5=89.5%. However, the number of labels
is too large that the training process is time con-
suming and those labels appears only few times
will hurt the generalization of the trained model.
Therefore, labels with low frequency which ap-
pear less than 30 times are cut out and 109 labels
remain. The M2 score of the system using this re-
fined labels is precision=83.9%, recall=64.0% and
F 0.5=79.0%. Note that even applying all labels,
the F 0.5 is not 100%. It is because some annota-
tions in the training corpus are not consistency.

78



current word feature
NC.l1 NC
NP.l1 NP
NP[0] NP.l1.pos
NC.l1 NC
NC.l1 NC.l1.pos
NC.l1 and pos=DT NC
NC.l1 and pos=VB NC
NP.l1 and pos=VB NP
pos=VB cw
pos=DT cw
the cw.r1
a cw.r1
an cw.r1
NP[0] cw
NP[0] NP.l1
NP[0] NP.l2
NP[0] NP.l3
NP[0] NP.l1.pos
NP[0] NP.l2.pos
NP[0] NP.l3.pos
NP.l1 NP.head
NP.l1 NP.head.pos
NP.head NP. head
NP.head NP. head.bag
NP.head NP. head.pos
NP.head NP. head.pos.bag
NP.head NP. (JJ or CC)
NP.(DT or IN or TO) NP
NP.(DT or IN or TO) NP.head
NP.(DT or IN or TO) NP.head.pos
dp.dep dp.head
dp.head dp.dep
dp.dep dp.head.pos
dp.head dp.dep.pos
dp.dep dp.rel
dp.head dp.rel
VP.verb VP.NP
VP.verb VP.NP.head
VP.NP.head VP.verb
VP.verb VP.NP.head.pos
VP.NP.head VP.verb.pos
cw cw.li, i ∈ {0, 1, 2, 3}
cw cw.ri, i ∈ {1, 2, 3}
cw cw.li.pos, i ∈ {0, 1, 2, 3}
cw cw.ri.pos, i ∈ {1, 2, 3}

Table 4: Remained features after the feature selec-
tion.

Count Label
1091911 ⊙
31507 ⊖
3637 NPLURAL
2822 THE⊕
2600 LEMMA
948 ,⊕

300˜900 A⊕ PAST THE IN TO . IS OF ARE FOR
GERUND ,

50˜100 AND ON AN⊕ A VSINGULAR WAS THEIR
20˜50 ELDERLY IT OF⊕ THEY WITH TO⊕

WERE THIS ; ITS .⊕ THAT ’S⊕ AND⊕
THAT⊕ HAVE⊕ CAN AS HAVE⊕PART
FROM BE WOULD BY

15˜20 HAVE HAS⊕WILL HAS AT AN THESE ⊕,
THEM IN⊕ INTO #⊕ ARE⊕ WHICH PEO-
PLE HAS⊕PART ECONOMIC IS⊕ BE⊕ SO
COULD TO⊕LEMMA MANY PART MAY
LESS IT⊕ FOR⊕ BEING⊕

15˜20 NOT ABOUT WILL⊕LEMMA SHOULD
HIS BECAUSE AGED SUCH ALSO
WHICH⊕ HAVE⊕PAST WILL⊕ WHO
WHEN MUCH

15˜20 ON⊕ ’ THROUGH BE⊕PAST MORE
IF HELP THE⊕ELDERLY ’S ONE AS⊕
THERE THEIR⊕ WITH⊕ HAVE⊕⊙
ECONOMY DEVELOPMENT CON-
CERNED PEOPLE⊕ PROBLEMS BUT
MEANS THEREFORE HOWEVER BE-
ING : UP PROBLEM ’⊕ THE⊕LEMMA
IN⊕ADDITION HOWEVER⊕,⊕ AMONG
;⊕ WHERE THUS ONLY HEALTH
HAS⊕PAST FUNDING EXTENT ALSO⊕
TECHNOLOGICAL ” OR HAD WOULD⊕
VERY .⊕THIS ITS⊕ IMPORTANT DEVEL-
OPED ⊕BEEN AGE ABOUT⊕WHO⊕ USE
THEY⊕ THAN NUMBER HOWEVER⊕,
GOVERNMENT FURTHERMORE DURING
BUT⊕ YOUNGER RIGHT POPULATION
PERSON⊕ FEWER ENVIRONMENTAL-
LY WOULD⊕LEMMA OTHER MAY⊕
LIMITED HE COULD⊕HAVE BEEN STIL-
L SPENDING SAFETY OVER ONE⊕’S
MAKE MADE LIFE HUMAN HAD⊕
FUNDS CARE ARGUED ALL ”⊕ WHEN⊕
TIME THOSE SOCIETY RESEARCH
PROVIDE OLD NEEDS INCREASING DE-
VELOPING BECOME BE⊕⊙ ADDITION

Table 5: Labels whose count is larger than 15.

current word feature
NC.l1 NC, cw, cw.l1, cw.l1.pos,

cw.r1, cw.r1.pos
NP[0] NP.head, NP.l1, NP.l2 ,

cw, cw.l1, cw.l1.pos,
NP.head NP[0], NP.l1, NP.l2 , cw,

cw.l1, cw.l1.pos,
dp.head cw, cw.l1, cw.l2 dp.dep,

dp.dep.pos, dp.rel

Table 6: Examples of the new generated features.

79



4.3 Data Refinement

The training corpus is refined before used that sen-
tences which do not contain errors are filtered out.
Only 38% of the total sentences remain. With less
training corpus, it takes less time to train the ME
model. Table 7 presents the performance of sys-
tems using the unrefined training corpus and re-
fined corpus.

System Presicion Recall F 0.5
unrefined 26.99% 1.67% 6.71%
refined 11.17% 3.1% 7.34%

Table 7: Comparison of systems with differen-
t training corpus.

All sets of these systems are kept the same ex-
cept the training corpus they use. It can be seen
that the refinement also improves the performance
of the system.

4.4 Feature Selection

Figure 2 shows the results of systems with dif-
ferent feature sets. sys 10 is the system with

Figure 2: Performance of systems with different
features.

10 randomly chosen features which are used as
the initial set of features in Algorithm 3, sys 55
is the system with the refined 55 features. With
these refined features, various of new features are
generated by combining different features. This
combination is conducted empirically that features
which are considered having relations are com-
bined to generate new features. Using this method,
165 new features are generated and total 220 fea-
tures are used in sys 220. Table 6 gives a few
of examples showing the combined features. The
performance is evaluated by the precision, recal-

l and F 0.5 score of the M2 scorer according
to (Dahlmeier and Ng, 2012). It can be seen
that sys 220 with the most number of features
achieves the best performance.

4.5 Evaluation Result

The final system we use is sys 220 with refined
training data, the performance of our system on the
developing corpus and the blind official test data is
presented in Table 8. The score is calculated using
M2 scorer.

Data Set Precision Recall F 0.5
DEV 13.52% 6.41% 11.07%
OFFICIAL 29.83% 5.16% 15.24%

Table 8: Evaluation Results

5 Conclusion

In this paper, we describe the system of Shang-
hai Jiao Tong Univerity team in the CoNLL-2014
shared task. The grammatical error detection is re-
garded as a multi-label classification task and the
correction is conducted by applying a rule-based
approach based on these labels. A single max-
imum entropy classifier is introduced to do the
multi-label classification. Various features are in-
volved and a feature selection algorithm is used
to refine these features. Finally, large amounts of
feature templates that are generated by the combi-
nation of the refined features are used. This system
achieved precision of 29.83%, recall of 5.16% and
F 0.5 of 15.24% in the official evaluation.

References
Adam L Berger, Vincent J Della Pietra, and Stephen

A Della Pietra. 1996. A maximum entropy ap-
proach to natural language processing. Computa-
tional linguistics, 22(1):39–71.

Daniel Dahlmeier and Hwee Tou Ng. 2012. Better
evaluation for grammatical error correction. In Pro-
ceedings of the 2012 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies (NAA-
CL 2012), pages 568–572, Montreal, Canada.

Daniel Dahlmeier, Hwee Tou Ng, and Eric Jun Feng
Ng. 2012. NUS at the HOO 2012 Shared Task. In
Proceedings of the Seventh Workshop on Building E-
ducational Applications Using NLP, pages 216–224,
Montréal, Canada, June. Association for Computa-
tional Linguistics.

80



Daniel Dahlmeier, Hwee Tou Ng, and Siew Mei Wu.
2013. Building a large annotated corpus of learner
english: The nus corpus of learner english. In Pro-
ceedings of the Eighth Workshop on Innovative Use
of NLP for Building Educational Applications (BEA
2013), pages 22–31, Atlanta, Georgia, USA.

Robert Dale, Ilya Anisimoff, and George Narroway.
2012. Hoo 2012: A report on the preposition and
determiner error correction shared task. In Proceed-
ings of the Second Workshop on Building Education-
al Applications Using NLP, pages 54–62, Montréal,
Canada, June. Association for Computational Lin-
guistics.

NA-RAE Han, Martin Chodorow, and Claudia Lea-
cock. 2006. Detecting Errors in English Article
Usage by Non-Native Speakers. Natural Language
Engineering, 12:115–129, 5.

Zhongye Jia, Peilu Wang, and Hai Zhao. 2013a.
Grammatical error correction as multiclass classi-
fication with single model. In Proceedings of the
Seventeenth Conference on Computational Natural
Language Learning: Shared Task, pages 74–81,
Sofia, Bulgaria, August. Association for Computa-
tional Linguistics.

Zhongye Jia, Peilu Wang, and Hai Zhao. 2013b. Graph
model for chinese spell checking. In Proceedings
of the Seventh SIGHAN Workshop on Chinese Lan-
guage Processing, pages 88–92, Nagoya, Japan, Oc-
tober. Asian Federation of Natural Language Pro-
cessing.

Ting-hui Kao, Yu-wei Chang, Hsun-wen Chiu, Tzu-Hsi
Yen, Joanne Boisson, Jian-cheng Wu, and Jason S.
Chang. 2013. Conll-2013 shared task: Grammati-
cal error correction nthu system description. In Pro-
ceedings of the Seventeenth Conference on Compu-
tational Natural Language Learning: Shared Task,
pages 20–25, Sofia, Bulgaria, August. Association
for Computational Linguistics.

Ekaterina Kochmar, Øistein Andersen, and Ted
Briscoe. 2012. HOO 2012 Error Recognition and
Correction Shared Task: Cambridge University Sub-
mission Report. In Proceedings of the Seventh
Workshop on Building Educational Applications Us-
ing NLP, pages 242–250, Montréal, Canada, June.
Association for Computational Linguistics.

Xuezhe Ma and Hai Zhao. 2012. Fourth-order depen-
dency parsing. In Proceedings of COLING 2012:
Posters, pages 785–796, Mumbai, India, December.
The COLING 2012 Organizing Committee.

Hwee Tou Ng, Siew Mei Wu, Ted Briscoe, Christian
Hadiwinoto, Raymond Hendy Susanto, and Christo-
pher Bryant. 2014. The conll-2014 shared task
on grammatical error correction. In Proceedings of
the Eighteenth Conference on Computational Natu-
ral Language Learning: Shared Task (CoNLL-2014
Shared Task), Baltimore, Maryland, USA.

Alla Rozovskaya, Mark Sammons, Joshua Gioja, and
Dan Roth. 2011. University of Illinois System in
HOO Text Correction Shared Task. In Proceedings
of the 13th European Workshop on Natural Lan-
guage Generation, pages 263–266. Association for
Computational Linguistics.

Alla Rozovskaya, Mark Sammons, and Dan Roth.
2012. The UI System in the HOO 2012 Shared Task
on Error Correction. In Proceedings of the Seventh
Workshop on Building Educational Applications Us-
ing NLP, pages 272–280, Montréal, Canada, June.
Association for Computational Linguistics.

Alla Rozovskaya, Kai-Wei Chang, Mark Sammons,
and Dan Roth. 2013. The university of illinois sys-
tem in the conll-2013 shared task. In Proceedings of
the Seventeenth Conference on Computational Natu-
ral Language Learning: Shared Task, pages 13–19,
Sofia, Bulgaria, August. Association for Computa-
tional Linguistics.

Tetreault, Joel R and Chodorow, Martin. 2008. The
Ups and Downs of Preposition Error Detection in
ESL Writing. In Proceedings of the 22nd Inter-
national Conference on Computational Linguistics-
Volume 1, pages 865–872. Association for Compu-
tational Linguistics.

Rui Wang, Masao Utiyama, Isao Goto, Eiichro Sumi-
ta, Hai Zhao, and Bao-Liang Lu. 2013. Convert-
ing continuous-space language models into n-gram
language models for statistical machine translation.
In Proceedings of the 2013 Conference on Empiri-
cal Methods in Natural Language Processing, pages
845–850, Seattle, Washington, USA, October. Asso-
ciation for Computational Linguistics.

Yang Xiang, Bo Yuan, Yaoyun Zhang, Xiaolong Wang,
Wen Zheng, and Chongqiang Wei. 2013. A hybrid
model for grammatical error correction. In Proceed-
ings of the Seventeenth Conference on Computation-
al Natural Language Learning: Shared Task, pages
115–122, Sofia, Bulgaria, August. Association for
Computational Linguistics.

Junwen Xing, Longyue Wang, Derek F. Wong, Lidi-
a S. Chao, and Xiaodong Zeng. 2013. Um-checker:
A hybrid system for english grammatical error cor-
rection. In Proceedings of the Seventeenth Confer-
ence on Computational Natural Language Learn-
ing: Shared Task, pages 34–42, Sofia, Bulgaria, Au-
gust. Association for Computational Linguistics.

Qiongkai Xu and Hai Zhao. 2012. Using deep lin-
guistic features for finding deceptive opinion spam.
In Proceedings of COLING 2012: Posters, pages
1341–1350, Mumbai, India, December. The COL-
ING 2012 Organizing Committee.

Shaohua Yang, Hai Zhao, Xiaolin Wang, and Bao
liang Lu. 2012. Spell checking for chinese.
In Nicoletta Calzolari (Conference Chair), Khalid
Choukri, Thierry Declerck, Mehmet Uğur Doğan,
Bente Maegaard, Joseph Mariani, Jan Odijk, and

81



Stelios Piperidis, editors, Proceedings of the Eighth
International Conference on Language Resources
and Evaluation (LREC-2012), pages 730–736, Is-
tanbul, Turkey, May. European Language Resources
Association (ELRA). ACL Anthology Identifier:
L12-1423.

Ippei Yoshimoto, Tomoya Kose, Kensuke Mitsuza-
wa, Keisuke Sakaguchi, Tomoya Mizumoto, Yuta
Hayashibe, Mamoru Komachi, and Yuji Matsumo-
to. 2013. Naist at 2013 conll grammatical error
correction shared task. In Proceedings of the Seven-
teenth Conference on Computational Natural Lan-
guage Learning: Shared Task, pages 26–33, Sofi-
a, Bulgaria, August. Association for Computational
Linguistics.

Jingyi Zhang and Hai Zhao. 2013. Improving function
word alignment with frequency and syntactic infor-
mation. In Proceedings of the Twenty-Third inter-
national joint conference on Artificial Intelligence,
pages 2211–2217. AAAI Press, August.

Hai Zhao, Wenliang Chen, and Chunyu Kit. 2009a.
Semantic dependency parsing of nombank and prop-
bank: An efficient integrated approach via a large-
scale feature selection. In Proceedings of the 2009
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 30–39, Singapore, August.
Association for Computational Linguistics.

Hai Zhao, Yan Song, Chunyu Kit, and Guodong Zhou.
2009b. Cross language dependency parsing using a
bilingual lexicon. In Proceedings of the Joint Con-
ference of the 47th Annual Meeting of the ACL and
the 4th International Joint Conference on Natural
Language Processing of the AFNLP, pages 55–63,
Suntec, Singapore, August. Association for Compu-
tational Linguistics.

Hai Zhao, Xiaotian Zhang, and Chunyu Kit. 2013. In-
tegrative semantic dependency parsing via efficien-
t large-scale feature selection. Journal of Artificial
Intelligence Research, 46:203–233.

Hai Zhao. 2009. Character-level dependencies in chi-
nese: Usefulness and learning. In Proceedings of
the 12th Conference of the European Chapter of the
ACL (EACL 2009), pages 879–887, Athens, Greece,
March. Association for Computational Linguistics.

82


