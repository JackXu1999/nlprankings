



















































Formalising the Swedish Constructicon in Grammatical Framework


Proceedings of the Grammar Engineering Across Frameworks (GEAF) Workshop, 53rd Annual Meeting of the ACL and 7th IJCNLP, pages 49–56,
Beijing, China, July 26-31, 2015. c©2015 Association for Computational Linguistics

Formalising the Swedish Constructicon in Grammatical Framework

Normunds Gruzitis1 Dana Dannélls2 Benjamin Lyngfelt2 Aarne Ranta1
1Department of Computer Science and Engineering

2Department of Swedish
University of Gothenburg

1{name.surname}@cse.gu.se, 2{name.surname}@svenska.gu.se

Abstract

This paper presents a semi-automatic ap-
proach to acquire a computational con-
struction grammar from the semi-formal
Swedish Constructicon. The implemen-
tation is based on the resource grammar
library provided by Grammatical Frame-
work and can be seen as an extension to
the existing Swedish resource grammar.
An important consequence of this work is
that it generates feedback, explicit and im-
plicit, on how to improve the annotation
consistency and adequacy of the original
construction resource.

1 Introduction

Constructicon is a collection of conventionalized
pairings of form and meaning (or function), typ-
ically based on principles of Construction Gram-
mar (Goldberg, 2013).

The formalisation and implementation of a wide
coverage construction grammar is a highly rele-
vant task. From the linguistic point of view, it
leads to new insights on the interaction between
the lexicon and the grammar, as well as it al-
lows for testing the linguistic descriptions of con-
structions. From the language technology point of
view, the account of constructions facilitates lan-
guage processing in both monolingual and multi-
lingual settings, e.g. in information extraction and
machine translation.

Several approaches to Construction Grammar
have been proposed. Remarkable examples in-
clude Sign-Based Construction Grammar (Boas
and Sag, 2012) that uses Head-Driven Phrase
Structure Grammar (Pollard and Sag, 1994) as the
underlying formalism, Fluid Construction Gram-
mar (Steels, 2013) and Embodied Construction
Grammar (Bergen and Chang, 2013).

While the previous work has been mainly fo-
cused on English, our work is currently focused on

Swedish. However, the main difference is that we
test Grammatical Framework, GF (Ranta, 2004),
as a formalism and a toolkit for implementing
computational construction grammars. GF pro-
vides a built-in support for multilingual grammars,
which has a great potential for implementing, uni-
fying and interlinking constructions of different
languages, which, in turn, would be particularly
beneficial for the use in machine translation and
second-language learning.

In this paper we describe a methodology on how
to systematically formalise the semi-formal rep-
resentation of the Swedish Constructicon in GF,
showing that a GF construction grammar can be,
to a large extent, acquired automatically. A side
result of our work is that it has also helps to im-
prove the original construction resource.

2 Background

2.1 Swedish Constructicon (SweCcn)

SweCcn1 is a comparatively large open database
of Swedish constructions – partially schematic
multi-word units having both fixed and variable
parts (Lyngfelt et al., 2012). It particularly ad-
dresses constructions of relevance for second-
language learning, but also covers argument struc-
ture constructions, which concern matters of tran-
sitivity, voice, and event structure. Construction
descriptions are manually derived from corpus ex-
amples, and some of the examples are manually
annotated and added to each SweCcn entry. A
simplified example of how a construction is de-
scribed in SweCcn is given in Table 1.

Construction elements (CE) are either internal
or external. The internal CEs are a part of the
construction while the external CEs are a part of
the valency of the construction. In the structure
sketches, the internal CEs are bounded by brack-
ets. CEs are described in more detail by attribute-

1http://spraakbanken.gu.se/eng/sweccn

49



Name REFLEXIV RESULTATIV
Category VP
Frame CAUSATION
Defintion [Someone/something]NP performs/under-

goes [an action]Activity that leads (or is
supposed to lead) the [actor/theme]Pn,
expressed by reflexive, to [a state]Result.

Structure NP [V Pnrefl AP]
Internal Activity: {cat=V, role=Activity}

Pn: {cat=Pnrefl, role=Actor|Theme}
Result: {cat=AP, role=Result}

External NP: {cat=NP, role=Actor|Theme}
Example PeterNP [äterActivity sigPn mättResult]

Table 1: A simplified description of the Swedish
construction REFLEXIV RESULTATIV. The exam-
ple literally translates as ‘Peter eats himself full’.

value matrices that specify their syntactic and se-
mantic features.

Fixed CEs are represented by lexical units
(LU), and they refer to entries in SALDO, the
Swedish Associative Thesaurus (Borin et al.,
2013), which is the core lexicon of a large
macro-resource for Swedish, developed within the
Swedish FrameNet++ project (Borin et al., 2010).

Many constructions have a referential meaning,
more specifically, they are frame-bearing and are
thus linked to FrameNet frames. There is also an
ongoing work to link, when possible, the SweCcn
constructions with constructions in Berkeley Con-
structicon (Bäckström et al., 2014) as well as other
constructicons, notably the one for Brazilian Por-
tuguese (Torrent et al., 2014).

It should be noted that a central part of con-
struction descriptions in SweCcn is the free text
definitions. For example, the construction RE-
FLEXIV RESULTATIV roughly means ‘become AP
by V-ing’. Hence, äta sig mätt ‘eat himself full’
and skrika sig hes ‘shouting himself hoarse’ are
instances of the construction, whereas känna sig
trött ‘feel himself tired’ and skratta sig lycklig
‘laugh himself lucky’ are not. The difference is
captured by the free text definition, but not by the
formal features, therefore it unfortunately gets lost
in the automatic translation to GF.

In this experiment, we use a recent version of
SweCcn (a snapshot taken on June 9, 2015) which
contains 374 entries describing constructions of
different grammatical categories such as VP, NP
and S (see Table 2).

Category Total Ratio FrameNet
VP 105 28% 77
NP 85 23% 54
S 77 21% 50
PP 26 7% 22
AdvP 23 6% 19
XP 16 4% 4
AP 14 4% 13
other 28 7% 19

Table 2: The number of constructions in SweCcn.
The category XP represents any phrase type. The
column FrameNet shows the number of construc-
tions linked to the Swedish FrameNet.

2.2 Grammatical Framework (GF)

GF (Ranta, 2004) is a grammar formalism char-
acterized by its two-level approach to natural lan-
guage representation. One level, the abstract syn-
tax, accounts for the language-independent as-
pects, and the other level, the concrete syntax,
accounts for the language-specific aspects. The
same abstract syntax can be equipped with many
concrete syntaxes – reversible mappings from ab-
stract syntax trees to records (feature structures)
and strings – making the grammar multilingual.

Most importantly, GF provides a general-
purpose resource grammar library, RGL (Ranta,
2009), for currently 30 languages, all implement-
ing the same abstract syntax.

In order to hide the low-level details, RGL
has a high-level interface that provides construc-
tors like mkCl: NP -> VP -> Cl for building a
clause from a NP and a VP.2 The resource gram-
mars take care of agreement and word order.

One of the most developed languages in RGL,
in terms of syntactic and lexical coverage, is
Swedish. Its resource grammar also includes over
100,000 lexical entries from SALDO.3

3 Preprocessing of SweCcn

In the current experiment, we consider only the
105 constructions of type VP (verb phrase) from
which we exclude 9 whose status is ‘suggestion’.
Descriptions of the suggested constructions are
too immature to be processed. Currently we also

2http://www.grammaticalframework.org/lib/doc/
synopsis.html

3http://www.grammaticalframework.org/lib/src/
swedish/DictSwe.gf

50



do not include the 16 XP constructions which are
relevant to any phrase type, including VP.

We have chosen to begin with VP constructions
because they are dominating in SweCcn, and they
have the most complex internal structure – if our
approach can handle these constructions then it
should also be applicable for the rest.

According to the SweCcn annotation manual,4

constructions are described at two levels of detail:

1. A flat structure sketch that lists the formal el-
ements in the construction (see Structure in
Table 1). Each CE is represented in terms
of grammatical category (either word class or
phrase type), LU or just word form. The list
of CEs follows the expected word order. A
structure sketch may specify alternative real-
isation patterns of the same construction.

2. A set of feature matrices, one per CE (see
Internal and External in Table 1), that spec-
ify additional morphosyntactic constraints
which may be omitted in the more general
sketch for the sake of simplicity to a human
reader. Additionally, the feature matrices of-
ten specify the semantic roles and grammat-
ical functions, but we do not take this infor-
mation into account in the current work.
The word order is encoded only by the struc-
ture sketches; it is not reflected by the cor-
responding feature matrices as they can be
potentially reused by alternative patterns of
the same construction. Because the linking
between the sketches and matrices is not ex-
plicit, and the implicit links (matching cate-
gories, LUs etc.) are not unique in general,
the automatic mapping can be ambiguous. In
practice, however, it happens rarely.

Constructions may have optional CEs, alterna-
tive types of CEs or alternative LUs, and even al-
ternative word order. In the structure sketches, op-
tional CEs are delimited by parentheses, and alter-
native types/LUs are separated by a bar:

[V av1 Pnrefl (NP)]

[behöva1 NP1 till1 NP2|VP]

[snacka1|prata1|tala1 NPindef]

[N|Adj+städa1]
4https://svn.spraakdata.gu.se/sb/fnplusplus/

pub/constructicon/manual/sweccnmanual.pdf

Note that the variable CEs (represented by
grammatical categories) may have indices denot-
ing difference, formal identity (repetition), co-
reference, etc. In the case of a lexical construction
that represents a compound word, its internal CEs
are delimited by the plus sign indicating the con-
catenation. Suffixation is indicated by the hyphen.

The automatic preprocessing of SweCcn entries
consists of four steps:

1. Normalization of the structure sketches and
attribute values in the feature matrices.
SweCcn entries have been annotated manu-
ally, therefore inconsistently used spaces, in-
consistently used delimiters of alternative CE
types as well as inconsistent representation of
auxiliary or function CEs (e.g. sig1 vs. Pnrefl
vs. refl) is common.

2. In case of optional CEs and alternative
types of CEs, there are formally several
constructions compressed in one. The
original structures are rewritten so that
for each combination there is a sepa-
rate alternative structure. For instance,
[V av1 Pnrefl (NP)] is rewritten to
[V av1 Pnrefl NP] | [V av1 Pnrefl].
This however does not apply to alternative
LUs. If a CE is represented by a fixed set of
LUs, we assume that they are interchange-
able (synonymous). Otherwise they should
be either split into alternative constructions
(separate entries), or the CE should be made
more general.5

3. The rewritten structure sketches are enriched
with additional morphosyntactic information
from the feature matrices, so that a complete
description is at hand. The mapping of CEs
between the two layers of annotation is based
on values of the grammatical category and
LU attributes in the feature matrices (see Ta-
ble 1). Although such mapping in general is
based on a partial comparison as well as it can
be ambiguous, it has not led to incorrect re-
sults in the selected dataset,6 because we do
not consider the semantic roles.

5If a list of non-interchangeable but frame-evoking LUs is
replaced by a general grammatical category, the set of possi-
ble target words is still implicitly restricted by the FrameNet
frame which is evoked by the whole construction.

6Provided that the specifications are consistent across the
two layers.

51



4. The grammatical categories used in SweCcn
are converted to GF RGL categories. In spe-
cific cases, the conversion may lead into a
more general or more specific description as
well as it may include the morphosyntactic
tags and may depend on CEs in the con-
text. For instance, categories Adv, AdvP
and PP are all generalized to Adv while the
specification NPindef is elaborated in three
alternative substructures: [aSg Det CN] |
[aPl Det CN] | CN, where aSg Det is a
function representing the indefinite arti-
cle and requiring the singular agreement,
aPl Det requires the plural agreement, and
CN is a category that represents common
nouns (including modifiers, except determin-
ers). This requires a subsequent rewriting of
the whole construction as described in Step 2.
Few categories are not converted at this step;
their conversion is postponed to the genera-
tion of the GF grammar. For instance, Pc
(participle) and PcP (participle phrase) are
not converted to V and VP respectively, as
they have to be treated differently in the
concrete syntax: PcP is a VP that is fur-
ther converted to AP or Adv as illustrated
by FÅ RESULTATIV.AGENTIV in Sections 4.1
and 4.2.

Out of the 96 VP constructions that were pro-
cessed, only 43 turned out to be consistent in the
first attempt. For more than a half of constructions,
various inconsistencies were detected and reported
to SweCcn developers for manual inspection and
correction. After several iterations, the number of
consistent VP constructions increased to 93. The
remaining 3 are different corner cases that are ac-
tually consistent but are not yet supported by the
preprocessor and are thus skipped.

The following is a list of representative VP con-
structions with their original and rewritten struc-
ture descriptions that we use in Section 4 to illus-
trate the automatic generation of the GF grammar:

BEHÖVA NÅGOT TILL NÅGOT:
behöva mat till festen ‘need food to the party’
behöva1 NP1 till1 NP2|VP→
behövaV NP1 tillPrep NP2

| behövaV NP tillPrep VP

FÅ RESULTATIV.AGENTIV:
få gräsmattan klippt ‘get the lawn trimmed’
få0 NP PcP → fåV NP PcPperf

GÖRA SIG ADVP:
gör sig bra ‘does himself well’
göra1 Pnrefl AdvP → göraV reflPron Adv

SNACKA NP:
prata skolminnen ‘talk school memories’
snacka1|prata1|tala1 NPindef →
snacka|prata|talaV aSg Det CN
| snacka|prata|talaV aPl Det CN
| snacka|prata|talaV CN

VERBA AV SIG.TRANSITIV:
ta av mig skorna ‘take off myself shoes’
V av1 Pnrefl (NP)→
V avPrep reflPron NP | V avPrep reflPron

X-STÄDA:
storstäda ‘bigclean’
N|Adj+städa1 → N + städaV | A + städaV

Note that we ignore the SALDO sense identi-
fiers. We ignore the external CEs in the current ap-
proach as well, as they should be attached to con-
structions by the general syntactic rules already
provided by GF RGL. It is satisfactory also from
the future translation point of view, as the transla-
tion of external CEs should be compositional.

4 Generation of a GF Grammar

The rewritten structural descriptions of construc-
tions, as described in Section 3, provide sufficient
information to generate both the abstract and the
concrete syntax of a SweCcn-based construction
grammar, an extension to the Swedish GF resource
grammar.7

4.1 Abstract Syntax

The generation of the abstract syntax is rather
straight forward. Each construction is represented
by one or more functions depending on how many
alternative structure descriptions are produced in
the preprocessing steps. The name of a function
corresponds to the name of the construction suf-
fixed by an index if there is more than one function
per construction. For the current input data, the 93
VP constructions resulted in 127 functions. The
maximum and average numbers are respectively 6
and 1.4 functions per construction.8

7https://github.com/GrammaticalFramework/
gf-contrib/tree/master/SweCcn

8The max number is produced by SNACKA NP.EMFAS:
[snacka1|prata1 (AP) NPindef].

52



Each function takes one or more arguments that
correspond to the variable CEs of the respective
alternative construction description. In the rewrit-
ten structure descriptions, the variable CEs can be
formally distinguished from fixed CEs (LUs and
structural words) by the first letter of each CE: the
variable CEs always start with an upper case letter
while the fixed CEs start with a lower case letter.
The fixed CEs are not represented by the abstract
syntax. The variable CEs are represented only by
their grammatical categories; other morphosyntac-
tic constraints (if any) are handled by the concrete
syntax.

Constructions listed at the end of Section 3 are
represented by the following abstract functions:

behöva något till något1: NP -> NP -> VP

behöva något till något2: NP -> VP -> VP

få resultativ agentiv: NP -> VP -> VP

göra sig AdvP: Adv -> VP

snacka NP1: CN -> VP

snacka NP2: CN -> VP

snacka NP3: CN -> VP

verba av sig transitiv1: V -> NP -> VP

verba av sig transitiv2: V -> VP

x städa1: N -> VP

x städa2: A -> VP

4.2 Concrete Syntax
As our initial investigation unveiled, many con-
structions can be implemented in GF by system-
atically applying the high-level RGL constructors.
For instance, behöva något till något1 can be
implemented as shown in Figure 1 by first mak-
ing a two-place verb (V2) from the V element and
then combining it with the first NP element into a
VP. The preposition can be combined with the sec-
ond NP element into a prepositional phrase (Adv)
which can then be attached to the VP. The ques-
tion is how to make such constructor applications
systematically given the various construction de-
scriptions.

Essentially, this is a parsing problem itself. We
can look at CEs as words in the construction de-
scription language for which we need a grammar
to combine the lists of CEs into trees of RGL con-
structors and their arguments.

In order to address this issue, we have de-
fined an auxiliary GF grammar to generate the

behöva_något_till_något1 np1 np2 =
mkVP
(mkVP (mkV2 (mkV "behöver")) np1)

(mkAdv (mkPrep "till") np2)

Figure 1: The expected implementation for the
function behöva något till något1.

implementation of functions in the GF construc-
tion grammar. To keep the code-generating gram-
mar simple, it accepts only the categories of CEs,
some additional constraints and certain structural
words. The preprocessed construction descrip-
tions are generalized before parsing; LUs are in-
serted back in a post-processing step. For in-
stance, behövaV NP1 tillPrep NP2 is generalised
to {V} NP {Prep} NP, where the curly brack-
ets indicate fixed CEs. Fragments of the code-
generating grammar related to this structure are
listed in Figure 2 and Figure 3.

fun mkV2: V -> V2

fun mkVP__V2_NP: V2 -> NP -> VP
fun mkVP__VP_Adv: VP -> Adv -> VP

fun mkAdv: Prep -> NP -> Adv

fun _mkV_: V

fun _mkPrep_: Prep

fun _NP_: NP

Figure 2: A simplified fragment of the abstract
syntax of the auxiliary code-generating grammar.

According to the auxiliary grammar, the parse
tree for “{V} NP {Prep} NP” is
mkVP__VP_Adv
(mkVP__V2_NP (mkV2 _mkV_) _NP_)
(mkAdv _mkPrep_ _NP_)

which corresponds to the expected implementa-
tion as shown in Figure 1 after the post-processing
is done. The post-processing involves three steps:

1. Remove all suffixes delimited by the dou-
ble underscore. The suffixes are used just to
make the function names unique in the auxil-
iary grammar.

2. Sequentially replace all placeholders of the
fixed CEs, annotated as mkX , by the actual
lexical constructors. In case of verbs, con-
structors (inflectional paradigms) specified in

53



param Voice = Act | Pass

lincat

V, V2 = Voice => Str
VP, NP, Adv, Prep = Str

lin

mkV2 v = \\voice => v ! voice
mkVP__V2_NP v2 np = v2 ! Act ++ np
mkVP__VP_Adv vp adv = vp ++ adv

mkAdv prep np = prep ++ np

_mkV_ = table {
Act => "{V}"
Pass => "{Vpass}"}

_mkPrep_ = "{Prep}"
_NP_ = "NP"

Figure 3: A simplified fragment of the concrete
syntax of the auxiliary code-generating grammar.

the GF implementation of SALDO (see Sec-
tion 2.2) are reused.

3. Sequentially replace all placeholders of the
variable CEs, annotated as X , by the actual
variable names, e.g. replace the first NP by
np1 and the second NP by np2.

Note that the auxiliary code-generating gram-
mar, in general, is ambiguous – it can return sev-
eral alternative code skeletons for a given CE list.
However, it should hold that all alternatives accept
and linearise the same strings. Our heuristics is
to take the shortest implementation, which is sup-
ported by the intuition that the shortest ones corre-
late with the simplest ones.

If we consider the alternative realization of
BEHÖVA NÅGOT TILL NÅGOT represented by the
function behöva något till något2 , the pars-
ing with the auxiliary grammar fails at the element
VP. Indeed, there is no straightforward constructor
provided by RGL that would combine a Prep with
a VP or an Adv (as the in-order-to-VP should be
first converted to Adv). Thus, a lower level means
have to be applied to implement this function.

The implementation generated for the rest of
functions listed in Section 4.1 is given below (in
a slightly simplified form):

få_resultativ_agentiv np vp = mkVP
(mkV2A (mkV "få"))
np (PresPartAP vp)

göra_sig_AdvP adv = mkVP
(mkVP (reflV (mkV "göra"))) adv

snacka_NP1 cn = mkVP

(mkV2 (mkV ("snacka"|"prata"|..)))
(mkNP aSg_Det cn)

snacka_NP2 cn = mkVP

(mkV2 (mkV ("snacka"|"prata"|..)))
(mkNP aPl_Det cn)

snacka_NP3 cn = mkVP

(mkV2 (mkV ("snacka"|"prata"|..)))
(mkNP cn)

verba_av_sig_transitiv1 v np = mkVP
(mkV2 (reflV
(partV v (toStr (mkPrep "av")))))

np

verba_av_sig_transitiv2 v = mkVP
(reflV
(partV v (toStr (mkPrep "av"))))

x_städa1 n = mkVP
(prefixV (toStr n) (mkV "städar"))

x_städa2 a = mkVP
(prefixV (toStr a) (mkV "städar"))

As it was already mentioned, for some functions
the implementation has to be based not only on
the high-level language-independent interface of
RGL but also on low-level language-specific pa-
rameters. To keep the GF code generation flexible
and functional, we have defined some helper func-
tions (in the construction grammar) that wrap the
low-level code and make it reusable. For instance,
the helper function toStr takes a preposition, ad-
jective or noun and returns its base form as a plain
string which can then be passed, for instance, to
the RGL function partV to make a particle verb, or
to another helper function prefixV to make a com-
pound verb.

As for LUs, note that they are implemented, in
general, as free alternatives, which means that any
of them will be accepted while parsing but the first
one will always be used for the linearisation.

In the result, given the 127 functions in the ab-
stract syntax, we have automatically generated the
implementation for 98 functions (77%). At least
one function is implemented for 73 out of 93 con-
structions (78%).

5 Analysis of the Initial Results

We conducted two evaluations, manual and auto-
matic, to determine whether the automatically im-
plemented functions can successfully parse the re-
spective Swedish constructions and whether they

54



Functions Examples
Exemplified

functions
Implemented 51 57 24
Pending 13 16 6
Total 64 73 30

Table 3: Statistics of the manually compiled test
corpus: the number of examples belonging to the
implemented and pending concrete functions in
the generated construction grammar, and the num-
ber of functions having at least one test example.

can cope with different linguistic phenomena. The
manual evaluation was based on a subset of se-
lected VP constructions and selected examples
from the annotated sentences in SweCcn. The
automatic evaluation was based on the whole
SweCcn dataset of all VP constructions.

For the manual evaluation, we complied a small
test corpus containing 73 annotated examples, of
which 57 turned out to have a corresponding con-
crete function in the construction grammar. Ta-
ble 3 summarizes the total number of examples
that belong to any of the implemented functions
and the total number of examples that belong to
the functions whose implementation is pending, as
well as the number of functions that have at least
one test example. In the manually compiled cor-
pus, only about half of the functions have at least
one test example, and for those that have, there are
two examples on average.

Out of the 57 examples that have a correspond-
ing concrete function, 53 examples were success-
fully parsed yielding a coverage of 93%. It is
important to mention that the relatively high cov-
erage is achieved partially because we replaced
all the compounds and proper names which were
missing in the lexicon (17 words in total). The re-
maining 7% are examples for which no parse tree
was returned. A closer look at those cases unveils
that the parser mostly failed because of: (i) annota-
tion errors in the SweCcn database, for instance, a
feature matrix constrains the singular form of a NP
although the plural form exists among the anno-
tated examples; (ii) ill-formed sentences (with re-
spect to the grammar), often containing coordinat-
ing conjunctions, for instance, jag och min sambo
ska till våra vänner ‘me and my partner shall to
our friends’ – the parser expects a verb such as gå
‘go’ after ska ‘shall’.

Errors grounded in the manual annotation of the

Functions Examples
Exemplified

functions
Implemented 98 224 65
Pending 29 40 11
Total 127 264 76

Table 4: Statistics of the automatically acquired
test corpus. Compare to Table 3.

SweCcn entries were reported to SweCcn devel-
opers and are already partially corrected. Errors
grounded in the automatic grammar generation re-
quire a closer analysis of how these constructions
can be systematically implemented using lower
level means of RGL.

For the automatic evaluation, we implemented a
script which pre-processes the annotated SweCcn
sentences belonging to the VP constructions and
parses each example using the generated GF gram-
mar. Several heuristics on how to insert the sub-
ject to make a proper clause before it is parsed are
applied. Heuristics mainly concern the tense and
type of the verb given a construction with which
it should be parsed. Table 4 summarizes the auto-
matically acquired test corpus.

Out of the 224 examples for which the corre-
sponding concrete function is implemented, 157
were successfully parsed, yielding a coverage of
70%. An investigation of the examples that failed
to parse unveils that these examples: (i) con-
tain multi-word compounds; (ii) are more than
10 words long, containing irrelevant phrases and
punctuations that fall outside the construction;
(iii) contain complex syntactic structures that in-
volve coordination and subordination.

Our analysis shows that many of the failures
lead to false negative evaluation results. To avoid
these and to allow for a more adequate evalua-
tion, there are several complementary options we
have to consider. First, the grammatical cate-
gories could be included in the annotated exam-
ples, but it depends on the SweCcn developers.
Second, we could prepare a treebank, at least one
abstract tree for each function, to allow for the op-
posite testing – to check if the functions gener-
ate correct linearizations. Third, we could manu-
ally derive a larger post-edited test corpus from the
SweCcn dataset of annotated examples. For func-
tions having no test example, we might exploit
the GF’s built-in support for generating random
trees. The linearizations could then be presented

55



to SweCcn developers for examination and con-
sideration of whether an example should be added
to the database.

When it comes to the lexicon, the coverage of
lexical units is very high. Most of the words the
parser fails with are proper names and compounds.
These could be extracted from the SweCcn corpus
and added to the lexicon if access to the grammat-
ical categories is available.

6 Conclusions and Future Work

We have taken a functional view to acquire a com-
putational construction grammar in Grammatical
Framework from the semi-formal representation
of the Swedish Constructicon. We have presented
an approach to detect and correct inconsistencies
and errors in the original resource of construc-
tions. We were able to improve the quality of the
resource and thereby increase its value for the use
in language technology applications.

Following the proposed approach, the imple-
mentation of a construction grammar can be au-
tomatically generated for nearly 80% of the con-
structions (functions) achieving a 70–90% accu-
racy, and there is clear space for improvement.
However, it is still an open question how far we
should advance the automation in order to keep it
cost effective; the rest can be implemented or post-
edited manually. So far we have avoided any man-
ual intervention in the generated grammar because
SweCcn is being actively improved and extended
in parallel to our work, and this would complicate
the synchronisation of changes.

Regarding future work, a rather short-term goal
is to extend the grammar generator to cover the
other major types of constructions as well. This
would primarily require the extension of the aux-
iliary code generating grammar. Among the long-
term goals is to take this approach from the mono-
lingual construction grammar to a multilingual
one. This would require not only taking the links
to FrameNet into account but also adapting the
processing and generation pipeline to the con-
structicons of other languages. This also relates
to our previous research on implementing a multi-
lingual FrameNet-based grammar in GF (Dannélls
and Gruzitis, 2014). The GF construction gram-
mar and FrameNet grammar approaches are com-
plementary to each other, at least with regard to
constructions with a referential meaning, and an
integration of them would be mutually beneficial.

Acknowledgements

This work was supported by Swedish Research
Council under Grant No. 2012-5746 (Reliable
Multilingual Digital Communication) and by the
Centre for Language Technology in Gothenburg.

References
Linnéa Bäckström, Benjamin Lyngfelt, and Emma

Sköldberg. 2014. Towards interlingual construc-
ticography. On correspondence between constructi-
con resources for English and Swedish. Frames,
constructions and computation. Special issue of
Constructions and Frames, 6(1).

Benjamin K. Bergen and Nancy Chang. 2013. Embod-
ied Construction Grammar. In The Oxford Hand-
book of Construction Grammar.

Hans C. Boas and Ivan A. Sag, editors. 2012. Sign-
based Construction Grammar. CSLI Publications.

Lars Borin, Dana Dannélls, Markus Forsberg, Maria
Toporowska Gronostaj, and Dimitrios Kokkinakis.
2010. The past meets the present in Swedish
FrameNet++. In Proceedings of EURALEX.

Lars Borin, Markus Forsberg, and Lennart Lönngren.
2013. SALDO: a touch of yin to WordNet’s yang.
Language Resources and Evaluation, 47(4).

Dana Dannélls and Normunds Gruzitis. 2014. Extract-
ing a bilingual semantic grammar from FrameNet-
annotated corpora. In Proceedings of LREC.

Adele E. Goldberg. 2013. Constructionist approaches.
In The Oxford Handbook of Construction Grammar.

Benjamin Lyngfelt, Lars Borin, Markus Forsberg, Ju-
lia Prentice, Rudolf Rydstedt, Emma Sköldberg, and
Sofia Tingsell. 2012. Adding a constructicon to the
Swedish resource network of Språkbanken. In Pro-
ceedings of KONVENS.

Carl Pollard and Ivan A. Sag. 1994. Head-Driven
Phrase Structure Grammar. University of Chicago
Press.

Aarne Ranta. 2004. Grammatical Framework, a type-
theoretical grammar formalism. Journal of Func-
tional Programming, 14(2).

Aarne Ranta. 2009. The GF Resource Grammar Li-
brary. LiLT, 2(2).

Luc Steels. 2013. Fluid Construction Grammar. In
The Oxford Handbook of Construction Grammar.

Tiago Timponi Torrent, Ludmila Meireles Lage,
Thais Fernandes Sampaio, Tatiane da Silva Tavares,
and Ely Edison da Silva Matos. 2014. Revisiting
border conflicts between FrameNet and Construc-
tion Grammar. Constructions and Frames, 6(1).

56


