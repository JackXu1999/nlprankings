

















































Dependently-Typed Montague Semantics in the Proof Assistant Agda-flat

Colin Zwanziger
Department of Philosophy

Carnegie Mellon University
Pittsburgh, PA, USA
zwanzig@cmu.edu

Abstract

We apply the Agda-flat proof assistant (Vez-
zosi, 2019) to computational semantics. Com-
putational semantics in Agda-flat is distin-
guished from the approach based on Coq
(Chatzikyriakidis and Luo, 2014) in that it al-
lows an implementation of the classical, inten-
sional semantic analyses of Montague (1973).
That is, it synthesizes the modern dependent
type theory and Montague intensional logic
traditions in the computational semantics set-
ting. To demonstrate this, we show how to
replicate Montague’s analyses in the type the-
ory of Zwanziger (2018), which closely corre-
sponds to the Agda-flat system. Accompany-
ing code type-checks these analyses in Agda-
flat.

1 Introduction

Proof assistants, e.g. Coq (Chatzikyriakidis and
Luo, 2014), have been applied in computational
semantics to support natural language inference.
By translating (declarative) sentences of a natural
language into the language of a proof assistant, the
problem of whether one natural language sentence
implies another is reduced to finding a proof of
implication in that proof assistant. Ideally, both
the translation and the proof search are automated.

While proof assistants like Coq and the similar
system Agda are adequate for implementing most
semantic analyses given in the modern dependent
type theory tradition (Ranta, 1994), they do not
provide an obvious implementation of the clas-
sical intensional semantic analyses of Montague
(1973). The criterion that a computational seman-
tics system be general enough to capture Mon-
tague’s analyses has been termed the “Montague
Test” (Morrill and Valentı́n, 2016).

The present work introduces computational se-
mantics in the Agda-flat proof assistant. Agda-flat
(Vezzosi, 2019) is a variation on ordinary Agda

implementing a so-called comonadic modal de-
pendent type theory. Agda-flat was created by An-
drea Vezzosi (c. 2017-2019) as a tool for verifying
mathematical theorems in type-theoretical foun-
dations. The logic behind the most recent mode
of Agda-flat is essentially similar to CHoTT,
which was isolated by Zwanziger (2018) as a
natural dependently-typed, optionally hyperinten-
sional analog of Montague’s simply-typed inten-
sional logic. As such, Agda-flat passes (the rele-
vant incarnation of) the Montague Test. Further-
more, CHoTT can be used as a readable notation
for Agda-flat.

Below, we develop enough of natural language
semantics in CHoTT and Agda-flat to pass the
Montague Test. In Section 2, we review the
type theory CHoTT of Zwanziger (2018), which
closely corresponds to the Agda-flat system, and
is seen to provide a dependently-typed version
of Montague intensional logic. In Section 3,
the Montague Test sentences are translated into
CHoTT. In Section 4, we discuss the Agda-flat
system, and in particular the straightforward ren-
dering of CHoTT sentences therein. Pursuant to
the translations given in Section 3, an auxiliary
repository is provided type-checking the transla-
tions of all Montague Test sentences.

2 Comonadic Homotopy Type Theory

We review the type theory CHoTT of Zwanziger
(2018), which provides a dependently-typed ver-
sion of the intensional logic IL of Montague
(1973). To motivate CHoTT, a preview of the cor-
respondence between CHoTT and IL is given in
Subsection 2.1. Furthermore, some context for the
development of CHoTT is provided in Subsection
2.2. The technical discussion of CHoTT is in Sub-
section 2.3.



IL CHoTT English Gloss
t Prop “type of truth values/propositions”

xs, ay 5A “type of intensions of terms of type a/A”
pα t5 “the intension of term α/t”
qα t5 “the extension of term α/t”
2φ 2φ “necessarily φ”

Table 1: An IL-to-CHoTT Dictionary

2.1 Cheat Sheet for CHoTT

As any extension of intensional logic should, the
type theory CHoTT will include analogs of the
intension, extension, and other operators of IL.
These are foreshadowed in Table 1. The variant
notation from IL follows Shulman (2018), and re-
flects the essentially independent origins of IL and
Shulman’s system.

Pursuant to the correspondence of Table 1, the
translations of the Montague Test sentences given
in Section 3 will bear an obvious similarity to
those of Montague. There will be a few techni-
cal points of divergence between CHoTT and IL,
though, discussed in the course of Subsection 2.3.
Though these particularities of CHoTT can be jus-
tified on technical grounds, it is also worthwhile
to understand CHoTT and its relation to IL in the
context of the literature.

2.2 Provenance of CHoTT

We here review some historical context and justi-
fication for CHoTT. A reader less concerned by
such matters can skip ahead to Subsection 2.3 for
the technical development.

The type theory CHoTT is a “comonadic ho-
motopy type theory”, combining a version of
Montague’s intensional logic (“comonadic type
theory”) with homotopy type theory (HoTT), a
version of dependent type theory. We visit each
of these aspects in turn.

2.2.1 Intensional Logic and Comonadic Type
Theory

The identification of Montague intensional logic
with comonadic type theory dates to joint work
of the author (Awodey et al., 2015), and is devel-
oped in the M.S. thesis of the author (Zwanziger,
2017), in both syntactic and semantic aspects.
Comonadic type theory is a variety of modal type
theory which was first treated systematically in
the 1990’s, with approaches due to Bierman and
de Paiva (2000) and Davies and Pfenning (Pfen-

ning and Davies, 2001). Montague’s intensional
logic can thus be understood retrospectively as
the original comonadic type theory. However,
Montague’s syntax lacks β-conversion (AKA λ-
conversion) and the usual rules for quantifiers, an
issue addressable within these modern approaches
(Zwanziger, 2017). The present paper follows the
Davies and Pfenning approach, and and in particu-
lar Shulman (2018)’s extension to homotopy type
theory.

2.2.2 Homotopy Type Theory

HoTT (Univalent Foundations Program, 2013) is
a proposed type-theoretic alternative to axiomatic
set theory as a foundation for math. HoTT incor-
porates dependent type theory, a framework which
has been fruitfully applied in natural language se-
mantics since Sundholm (1989) and Ranta (1994).
Recently, dependent type theory has been called
“modern type theory” in the context of natural lan-
guage semantics, to distinguish it from the simply-
typed intensional logic of Montague (Chatzikyri-
akidis and Luo, 2018). Particularly appealing ap-
plications of dependent type theory in natural lan-
guages semantics, dating to the early work, in-
clude the use of the baked-in bounded quantifica-
tion to model the bounded quantification of natural
language (part of the “common nouns-as-types”
viewpoint) (Luo, 2012), and a natural approach to
dynamic semantics.

As for the “homotopy” part, it is argued in
Zwanziger (2018) that this provides a natural ap-
proach to hyperintensional natural language se-
mantics. As a homotopy type theory, CHoTT in-
cludes two notions of equality: definitional equal-
ity, written”, and thought of as (hyper)intensional
equality, and typal equality, written“, and thought
of as an a posteriori equality. In line with this
intuition, ” is stronger than “. In CHoTT, we
find ‘intensional’ operators which respect only ”,
not “. Furthermore, this more “granular” inten-
sional equality need not conflate statements with



ctx-Emp.
¨ | ¨ ctx

∆ | Γ $ B : U
ctx-Ext.e

∆ | Γ, x : B ctx
∆ | Γ, x : A,Γ1 ctx

Var.e
∆ | Γ, x : A,Γ1 $ x : A

∆ | ¨ $ B : U
ctx-Ext.i

∆, u : t5u B | ¨ ctx
∆, u : t5u A,∆1 | Γ ctx

Var.i
∆, u : t5u A,∆1 | Γ $ u : A

Table 2: The Extensional (´e) and Intensional (´i) Context Rules

the same truth conditions. A hyperintensional se-
mantics of CHoTT, inspired by the homotopy-
theoretic semantics of HoTT, is the subject of
other research by the author (Zwanziger, 2019).

In summary, CHoTT and the closely related
Agda-flat, while building directly on a separate
tradition than intensional logic, do incorporate in-
tensional logic, together with additional features.
Furthermore, these extra features have various
uses for the natural language semanticist, rather
than being peculiarities inflicted on them by the
Agda-flat system. That said, since our intention
is to make a beeline for formalizing the Montague
Test sentences, these modeling advantages will not
be pursued below, with the exception of common
nouns-as-types.

2.3 The System CHoTT

We now turn to delineating the system CHoTT,
with a focus on the similarities and differences
with IL.

Officially, CHoTT is the fragment of Shulman
(2018) consisting of the usual notions of homo-
topy type theory, together with the comonadic type
operator 5, which we think of as an intension
type operator performing the role of Montague’s
xs,´y. In less condensed terms, we have the fol-
lowing:

In the tradition of Pfenning and Davies (2001)
and Shulman (2018), CHoTT has two variable
judgements,

u : t5u A

and
x : A

We will say (at variance with prior terminology)
that “u is an intensional variable of type A,” when
u : t5u A and that “x is an extensional variable of
type A,” when x : A.

Remark 1 Intuitively, having an assumption u :
t5u A of an intensional variable of type A is akin
to having an assumption x : 5A of an extensional
variable of the type of intensions of terms of type
A. Indeed, such assumptions will turn out to be in-
terchangeable.

The hypothetical judgements of CHoTT have
the form

∆ | Γ $ t : B

and
∆ | Γ $ t ” u : B

where ∆ represents a list of intensional typed vari-
ables, and Γ a list of extensional typed variables.
This ∆ | Γ is called the context, and we will have,
as usual, that a type appearing in the context may
depend only on typed variables to its left. So types
in Γ can depend on variables in ∆, but not vice
versa.

Due to the two variable judgements, there is a
duplication of the rules for context extension and
variables, with variants for extensional and inten-
sional variables. These are given in Table 2. In
view of Remark 1, the rule Var.i is understood as
the principle that an assumption of an intension of
a term of type A yields a term of type A. This
rule is, naturally, implicated in the derivation of
the Montague extension operator, below.

We import the usual homotopy-type-theoretical
notions (Univalent Foundations Program, 2013),
including

ś

- and
ř

-types (analogs of the quan-
tifiers @ and D), type universes and universe
polymorphism, “-types, higher inductive types
(HITs), and univalence. However, as a simplifying
assumption, the typing rules are assumed to ma-
nipulate extensional variables only. For instance,
the formation rule for

ś

is

∆ | Γ $ A : U ∆ | Γ, x : A $ B : U
∆ | Γ $

ś

x:AB : U



∆ | ¨ $ B : U
5-Form. (Montague’s xs,´y)

∆ | Γ $ 5B : U
∆ | ¨ $ t : B

5-Intro. (Montague’s pp´q)
∆ | Γ $ t5 : 5B

∆ | Γ, x : 5A $ B : U ∆ | Γ $ s : 5A ∆, u : t5u A | Γ $ t : Bru5{xs
5-Elim.

∆ | Γ $ plet u5 :“ s in tq : Brs{xs

∆ | Γ, x : 5A $ B : U ∆ | ¨ $ s : A ∆, u : t5u A | Γ $ t : Bru5{xs
5-β-Conversion

∆ | Γ $ let u5 :“ s5 in t ” trs{us : Brs5{xs

Table 3: The Rules for 5

∆ | ¨ $ B : U
Weakening

∆ | Γ, x : 5B $ B : U ∆ | Γ $ t : 5B Var.
i

∆, u : t5u B | Γ $ u : B
5-Elim.

∆ | Γ $ plet u5 :“ t in uq ”: t5 : B

Figure 1: Derivation of 5-Elim.-Simp. (Montague’s qp´q)

in which x : A is required to be extensional.

Finally, we have a comonad 5 corresponding to
Montague’s xs,´y, the rules for which appear as
Table 3.

Note that the 5-Form. and 5-Intro. (intension
operator) rules only apply “in an intensional con-
text”, that is, when no extensional variables are
present in the context.1 Thus, in a well-typed term,
any intensional operator (5p´q or p´q5) that ap-
pears must have been adduced during a phase of
the derivation with an intensional context.2 Since
variables within the scope of an intensional oper-
ator must receive de re interpretation (Zwanziger,
2017), and only intensional variables occur within
the scope of an intensional operator, intensional
variables can be motivated as a technical device
for keeping track of which locations within a term
receive de re interpretation.

The 5-Elim. rule provides a way of substituting
a term of type 5A for an intensional variable of
type A via an explicit let-notation. This principle
is in keeping with Remark 1. Furthermore, it gives
a benign way of “substituting into an intensional

1While IL does not place any similar restriction on the in-
tension operator p p´q, Montague does stipulate a constant-
domain Kripke semantics for IL. The analogous Kripke-
Montague semantics for CHoTT need not stipulate constant
domains. But a type 5A of intensions will, naturally, have a
constant domain interpretation regardless. Remark 1 relates
extensional variables of type 5A with intensional variables of
type A.

2In the current terminology, then, an intensional context is
not, as traditionally, defined by the presence of an intensional
operator, but rather a more primitive notion that is prerequi-
site for the presence of an intensional operator.

context”. To illustrate, such a substitution

let u5 :“ s in tpu5q5 ,

in which s receives de re interpretation, does not
in general 5-β-reduce to the de dicto form

tpsq5 ,

and thus avoids the usual pitfall of substitution into
intensional contexts. As a corollary, β-conversion
(for function types) clearly gives

pλx.let u5 :“ x in tpu5q5qpsq ”
let u5 :“ s in tpu5q5 ,

not

pλx.let u5 :“ x in tpu5q5qpsq ” tpsq5 ,

explaining why β-conversion is benign in
CHoTT.

Though 5-Elim. is subtle, the reader may take
heart that we can use it to derive an ‘extension’ op-
erator corresponding to Montague’s qp´q, which,
again following Shulman (2018), we call p´q5.
That is, the rule

∆ | Γ $ t : 5B
5-Elim.-Simple

∆ | Γ $ t5 : B
is derivable (Figure 1). As foreshadowed above,
this derivation also makes crucial use of the rule
Var.i.

Furthermore, we have the conversion pt5q5 ” t,
familiar from Montague. That is, the principle

∆ | ¨ $ t : B
5-β-Conv.-Simp.

∆ | Γ $ pt5q5 ” t : B



is derivable, obtained with

pt5q5 ” let u5 :“ t5 in u pDef’n. of p´q5q
” t p5-β-Conv.q

as calculation.
It is with all the comonadic rules in concert that

Remark 1 is ultimately justified. The reader may
confirm, for instance, that the principles

u : t5u A | ¨ $ t : B
¨ | x : 5A $ let u5 :“ x in t : let u5 :“ x in B

and

¨ | x : 5A $ t : B
u : t5u A | ¨ $ tru5{xs : Bru5{xs

are derivable.

3 Natural Language Semantics in
CHoTT

We now set about rendering the Montague Test
sentences in CHoTT.

To illustrate the issues involved, let’s examine
what will be the translations of the sentence, “John
believes that a fish walks.” This sentence is tradi-
tionally held to have two construals, a de dicto and
a de re. These construals are to be represented by

believepj, pDpx : fishq.walkpipxqqq5q

and

Dpx : fishq.let u5 :“ ipxq in
believepj, walkpu5q5q ,

respectively. These formulas exhibit several less
familiar features which bear discussion, including
defined (non-primitive) notation for logic inside
HoTT (D), common nouns-as-types (x : fish) and
associated type coercions (i), and the handling of
de re with (let-substitutions for) intensional vari-
ables.

In Subsection 3.1, we explicate any prerequisite
defined notation and associated theory. In Sub-
section 3.2, we give the CHoTT renderings of the
Montague Test sentences.

3.1 Defined Notations
We now develop several notions for eventual use
in Subsection 3.2. Unless otherwise specified, the
definitions of the present subsection are adapted
from Chapter 3 of the HoTT Book (Univalent
Foundations Program, 2013).

3.1.1 Predicate Logic
Central to the approach of the current section is the
use of the type Prop of “propositions” in lieu of
Montague’s type t of “truth values”. Within HoTT,
propositions are identified with those types that
have at most one term (up to the equality “). In-
tuitively, such types encode no more (extensional)
information than whether they have a term (“are
inhabited”) or not. In such case, truth is identified
with inhabitation. Formally speaking, we have the
following definitions:

Definition 2 For any type A : U , let
isProppAq :”

ś

x,y:A x “ y.
When isProppAq is inhabited, we say that A is a
proposition, and when such A is inhabited, we say
A is true.

Definition 3 Prop :”
ř

A:U isProppAq
Whereas a sequent of form ∆ | Γ, x : A $

B : U is thought of as a type depending on A,
a sequent of form ∆ | Γ, x : A $ P : Prop
may be thought of as a predicate on A, rather than
a “proposition depending on A”. This notion of
predicate gives rise to a notion of predicate logic
inside type theory with the following constructs:

Definition 4

J :” 1
K :” 0

P ^Q :” P ˆQ
P _Q :” ‖P `Q‖
P ñ Q :” P Ñ Q

 P :” P ñ K

@px : AqP pxq :”
ź

x:A

P pxq

Dpx : AqP pxq :” ‖
ÿ

x:A

P pxq‖ ,

where ∆ | Γ, x : A $ P,Q : Prop.
Here, ‖´‖ denotes “propositional truncation”, as
defined in Chapter 3 of the HoTT Book (Univalent
Foundations Program, 2013), which quotients any
type to a proposition.

To the logic of the HoTT Book, we do add one
definition:

Definition 5 Let ∆, u : t5u A | ¨ $ P : Prop.
Then 2P :” ‖5P‖.
This pregnant and perhaps surprising definition
can be understood in terms of the type-theoretic



E : U

j, b : 5E
walk,man, talk, fish, woman, unicorn, park : 5E Ñ Prop

believe : 5Prop Ñ 5E Ñ Prop
seek, catch, eat, find, love, lose : 5p5p5E Ñ Propq Ñ Propq Ñ 5E Ñ Prop

slowly, try : 5p5E Ñ Propq Ñ 5E Ñ Prop
in : 5p5p5E Ñ Propq Ñ Propq Ñ 5p5E Ñ Propq Ñ

5E Ñ Prop

Figure 2: Lexicon for the Montague Test

tendency to conflate truth with inhabitation. In
Kripke-Montague semantics, intensions for (the
interpretation of) a typeA only exist when (the do-
main interpreting) A at each world is non-empty.
So 5A at a world is non-empty (i.e. true) when A
is nonempty (i.e. true) at every world.3

3.1.2 Subtypes and Coercions
We will have reason to view common nouns as
types (for the purposes of type-bounded quantifi-
cation). Yet predicates like “talks” are apt to apply
to women, men, donkeys (perhaps), etc. Conse-
quently, “talks” is better interpreted as a predicate
on a type of entities subsuming women, men, and
donkeys. To accommodate both impulses, we re-
quire a notion of subtype and type coercion, which
will allow us to write logical forms like, e.g., @px :
manq.talkpipxqq for “Every man talks.” This mo-
tivates our use of the subtypes of HoTT, defined as
follows:

Definition 6 Let ∆ | Γ, x : A $ P : Prop. Then
tx : A | P pxqu :”

ř

x:A P pxq. Furthermore let
i :” π1 :

ř

x:A P pxq Ñ A.

This tx : A | P pxqu is said to be the subtype
of A satisfying property P , and i the inclusion or
coercion of tx : A | P pxqu into A.

For readability, we will furthermore coin the
following abuse of notation:

Convention 7 The type tx : A | P pxqu, where
∆ | Γ, x : A $ P : Prop, may simply be denoted
by P , where confusion is unlikely.

3It would be more satisfying to have simply 2P :” 5P ,
but CHoTT is apparently too weak to prove that 5P is a
proposition, as desired of 2P . This gives a hint that CHoTT,
despite its advantages, may not be the last word in comonadic
type theory.

The formula @px : manq.talkpipxqq is now un-
derstood as using Convention 7, as well as a coer-
cion.

3.2 The Montague Test Sentences

With the benefit of the foregoing, we now render
the Montague Test sentences in CHoTT. We will
treat exactly the sentence suite formulated by Mor-
rill and Valentı́n (2016) in introducing the Mon-
tague Test.

We assume a ground type E, together with
a number of constants that serve as the transla-
tions of natural language terms, detailed in Fig-
ure 2. These are simply taken from Dowty et al.
(1981), Chapter 7, using the correspondences sug-
gested by Table 1, plus a single important stipu-
lation: wherever the type e appears for Dowty et
al., 5E (rather than E) appears for us. This un-
fortunate technical device is necessitated by our
approach to de re readings, which makes use of
let-substitution. One can substitute terms of type
5E using let, but not E.4

The CHoTT forms for the Montague Test sen-
tences are given in Table 4, below. Any refer-
ence numbers come from Chapter 7 of Dowty et
al. (1981).

Overall, CHoTT formulas of Table 4 closely re-
flect those given by Montague (1973). To illus-
trate the similarities and differences, we return, at
last, to the translations of “John believes that a fish
walks.” The de dicto reading is translated as

believepj, pDpx : fishq.walkpipxqqq5q .

4One way around this problem would be to use adjoint
type theory (Benton and Wadler, 1996; Licata and Shulman,
2016), in which some ground types already have “constant
domain”, in lieu of comonadic type theory.



Ref. No. Sentence Translation(s)
7 John walks. walkpjq
16 Every man talks. @px : manq.talkpipxqq
19 The fish walks. Dpx : fishq.walkpipxqq ^ @py : fishq.‖y “ x‖
32 Every man walks or talks. @px : manq.walkpipxqq _ talkpipxqq
34 Every man walks or every man talks. p@px : manq.walkpipxqqq _ p@px : manq.talkpipxqqq
39 A woman walks and she talks. Dpx : womanq.walkpipxqq ^ talkpipxqq
43 John believes that a fish walks. believepj, pDpx : fishq.walkpipxqqq5q
45 Dpx : fishq.let u5 :“ ipxq in believepj, walkpu5q5q
48 Every man believes that a fish walks. Dpx : fishq.let u5 :“ i1pxq in

@py : manq.believepi2pyq, walkpu5q5q
49 @py : manq.Dpx : fishq.let u5 :“ i1pxq in

believepi2pyq, walkpu5q5q
n/a @py : manq.believepi2pyq, pDpx : fishq.walkpi1pxqqq5q
57 Every fish such that it walks talks. @px : fish^ walkq.talkpipxqq
60 John seeks a unicorn. seekpj, pλpP : 5p5E Ñ Propqq.Dpx : unicornq.P5pipxqqq5q
62 Dpx : unicornq.let u5 :“ ipxq in

seekpj, pλpP : 5p5E Ñ Propqq.P5pu5qq5q
73 John is Bill. ‖j “ b‖
76 John is a man. manpjq
83 Necessarily, John walks. 2pwalkpjqq
86 John walks slowly. slowlypwalk5qpjq
91 John tries to walk. trypj, walk5q
94 John tries to catch a fish and eat it. trypj, pλpy : 5Eq.let u5 :“ y in Dpx : fishq.

catch1ppλpP : 5p5E Ñ Propqq.P5pu5qq5qpipxqq^
eat1ppλpP : 5p5E Ñ Propqq.P5pu5qq5qpipxqqq5q

98 John finds a unicorn. Dpx : unicornq.let u5 :“ ipxq in
findppλpP : 5p5E Ñ Propqq.P5pu5qq5qpjq

105 Every man such that he loves a woman Dpy : womanq.let u5 :“ i2pyq in
loses her. @px : man^ loveppλpP : 5p5E Ñ Propqq.P5pu5qq5qq.

loseppλpP : 5p5E Ñ Propqq.P5pu5qq5qpi1pxqq
110 John walks in a park. Dpx : parkq.let u5 :“ ipxq in

inppλpP : 5p5E Ñ Propqq.P5pu5qq5qpwalk5qpjq
116 Every man doesn’t walk.  @px : manq.walkpipxqq
118 @px : manq. walkpipxqq

Table 4: Montague Test Sentences

Aside from being pleasingly compact, in keeping
with dependent type theory’s type-bounded quan-
tification, this formula is hardly changed from
Montague (1973).

Things get more interesting for the de re read-
ing, which is represented by

Dpx : fishq.let u5 :“ ipxq in
believepj, walkpu5q5q ,

making use of the let-substitution not familiar
from IL. To explicate, it is perhaps helpful to think

of walkpu5q as walkpyqru5{ys. That is, walkpyq
was altered to have an intensional variable, in
keeping with Remark 1. As discussed in Section
2.3, the intensional variable u signals de re inter-
pretation, and makes it possible to adduce an in-
tension operator, forming walkpu5q5. We later de-
sire a(n extensional) quantification, so we switch
back to extensional variables by substituting into
the intensional context, forming

let u5 :“ ipxq in believepj, walkpu5q5q ,

and then quantify.



In sum, this example, as well as the rest of
the Montague Test sentences, are well-handled in
CHoTT, and manifestly similarly to in IL.

4 Agda-flat

We now discuss Agda-flat, and the implementa-
tion therein of the Montague Test sentences, as
rendered in CHoTT in the previous section.

4.1 About Agda-flat

Agda-flat (Vezzosi, 2019) is a proof assistant due
to Andrea Vezzosi (c. 2017-2019). It is a branch
of the Agda proof assistant (Norell, 2007) which
grew out of Vezzosi’s work on modal dependent
type theory (Nuyts et al., 2017). Agda is similar
to other dependently-typed proof assistants, like
Coq. Agda-flat adds on a modal operator, 5.

Agda-flat was intended as a proof assistant for
mathematical theorems. Early mathematical uses
include Licata et al. (2018) and Wellen (2018).
The original version of Agda-flat is largely in-
compatible with linguistic applications, due to its
relatively strong proof theory. Amongst other
things, one can prove that 5 is idempotent (that
is, 55A » 5A), which does not hold in the famil-
iar model of Montague (1973). Following a 2019
request from the author, Vezzosi implemented a
new mode, called (“no-flat-split”), with a weaker
proof theory. It is this “no-flat-split” mode which
corresponds closely to CHoTT, and thus provides
a setting for (optionally hyperintensional) Mon-
tague semantics.

4.2 Agda-flat for Computational Semantics

4.2.1 Installation and Configuration
Agda-flat is available for download at: https:
//github.com/agda/agda/tree/flat.
Unfortunately, the process of installing Agda and
turning on Agda-flat is system-dependent and
potentially complex. The Agda Wiki (Agda Col-
laboration) can provide guidance, and one may
wish to avail oneself of a friendly Agda user,
including online.

As mentioned in Section 4.1, the “no-flat-split”
option is necessary for computational semantics
applications. To engage the “no-flat-split” option,
place the code

{-# OPTIONS --no-flat-split #-}

at the beginning of a module.

4.2.2 Use

Agda-flat and CHoTT are similar, with both ad-
mitting a 5-operator, and in particular having a way
of restricting the 5-Form. and 5-Intro operations.
Whereas in CHoTT, this is achieved by restrict-
ing these operations to an intensional context, in
Agda, the variable contexts are not made explicit,
and instead heavy use is made of

ś

-types. Of ne-
cessity, then, the

ś

-types of Agda-flat are permit-
ted to be of the form

ź

u:t5u A
P , in which an inten-

sional variable is bound. In “Agda notation”, how-
ever,

ź

u:t5u A
P is written (u :{5} A) Ñ P.

Agda-flat allows a similar manipulation of in-
tensional variables by the rules for inductive types.
Furthermore, 5 is actually defined as an inductive
type in Agda-flat, and uses pattern matching in-
stead of an Elim. rule, as for any inductive types
in Agda.

That is, 5 is defined as an inductive type by, in
pseudo-code,

data 5 (A :{5} Type) : Type where
int : (a :{5} A) Ñ 5A .

Whenever the 5-Elim. rule would be used in
CHoTT, we instead use pattern matching. For in-
stance, we define Montague’s extension operator
thus:

ext: {A :{5} Type} Ñ (5A Ñ A)
ext (int u) = u .

Once the 5 operator is defined, and the above
stylistic differences between CHoTT and Agda-
flat accounted for, the rendering of CHoTT terms
in Agda-flat proceeds as expected.

4.2.3 The Montague Test

The logical forms given in Table 4 are ren-
dered in type-checkable code, available on the
GitHub of the author at https://github.
com/zwanzigerc/Montague-Test. This
repository makes use of the conventions and code-
base of the HoTT-Agda library (Brunerie et al.).
In addition to the “official” renderings, there are
also alternative ones which use the universe Type
in lieu of the more complex Prop.

Agda-flat thus satisfies the Montague Test, and
is seen to accommodate computational depen-
dently typed Montague semantics.

https://github.com/agda/agda/tree/flat
https://github.com/agda/agda/tree/flat
https://github.com/zwanzigerc/Montague-Test
https://github.com/zwanzigerc/Montague-Test


5 Future Work

With the basic setup of intensional computational
semantics in Agda-flat achieved, a key goal be-
comes automation, both of the translation from
natural language into Agda-flat, and of proof
search. Since Agda is so similar to Coq, it is
possible that Agda-flat could be integrated with
the translation from Grammatical Framework used
in FraCoq (Bernardy and Chatzikyriakidis, 2017).
As for proof search, Agda has some limited au-
tomation options, such as the command “auto”,
which should be explored. Ultimately the per-
formance of Agda-flat at natural language infer-
ence should be compared to other systems that sat-
isfy the Montague Test, such as CatLog3 (Morrill,
2017).

In summary, CHoTT and the closely related
Agda-flat, while building directly on a separate
tradition than intensional logic, do incorporate in-
tensional logic, together with additional features.
Furthermore, these extra features have various
uses for the natural language semanticist, rather
than being peculiarities inflicted on them by the
Agda-flat system. That said, since our intention is
to m

Agda-flat (without the assumption of inten-
sional “-induction) is furthermore an appropriate
system to implement hyperintensional semantics
in the style of Zwanziger (2018). A full discus-
sion of this is deferred to later work.

Acknowledgments

This paper was made possible by Andrea Vez-
zosi’s programming of Agda-flat. In particular,
many thanks are due for the new option, “no-flat-
split”, which makes the system general enough for
the purposes of the present paper. Felix Wellen
and Zesen Qian provided valuable help with Agda.
And thank you to Steve Awodey for suggesting
and supporting my focus on Agda-flat.

The logical forms given for purposes of the
Montague Test (which in particular do not use
common noun types to model verb selectional re-
strictions) were influenced by personal communi-
cation with Carl Pollard.

Any errors in the present work are my own.

References
The Agda Collaboration. The Agda wiki.
https://wiki.portal.chalmers.se/

agda/pmwiki.php. Accessed: 2019-04-22.

Steve Awodey, Ulrik Buchholtz, and Colin Zwanziger.
2015. Comonadic categorical semantics of mon-
tague’s intensional logic. In Slides from Dynamics
Semantics Workshop: Modern Type Theoretic and
Category Theoretic Approaches, Ohio State Univer-
sity, Columbus, Ohio.

Nick Benton and Philip Wadler. 1996. Linear logic,
monads and the lambda calculus. In Proceedings
11th Annual IEEE Symposium on Logic in Computer
Science, pages 420–431. IEEE.

Jean-Philippe Bernardy and Stergios Chatzikyriakidis.
2017. A type-theoretical system for the FraCaS test
suite: Grammatical framework meets Coq. In Long
Papers of the 12th International Conference on on
Computational Semantics (IWCS).

Gavin Bierman and Valeria de Paiva. 2000. On an in-
tuitionistic modal logic. Studia Logica, 65(3):383–
416.

Guillaume Brunerie, Kuen-Bang Hou (Favonia), Evan
Cavallo, Tim Baumann, Eric Finster, Jesper Cockx,
Christian Sattler, Chris Jeris, Michael Shulman,
et al. Homotopy type theory in Agda. https://
github.com/HoTT/HoTT-Agda. Accessed:
2019-04-22.

Stergios Chatzikyriakidis and Zhaohui Luo. 2014. Nat-
ural language inference in Coq. Journal of Logic,
Language and Information, 23(4):441–480.

Stergios Chatzikyriakidis and Zhaohui Luo. 2018. For-
mal Semantics in Modern Type Theories. Wiley and
ISTE Science Publishing Ltd.

David R. Dowty, Robert Wall, and Stanley Pe-
ters. 1981. Introduction to Montague Semantics.
Springer Science and Business Media.

Daniel R. Licata, Ian Orton, Andrew M. Pitts, and
Bas Spitters. 2018. Internal universes in mod-
els of homotopy type theory. arXiv preprint
arXiv:1801.07664.

Daniel R. Licata and Michael Shulman. 2016. Ad-
joint logic with a 2-category of modes. In Interna-
tional Symposium on Logical Foundations of Com-
puter Science, pages 219–235. Springer.

Zhaohui Luo. 2012. Common nouns as types. In Pro-
ceedings of the International Conference on Logical
Aspects of Computational Linguistics, pages 173–
185. Springer.

Richard Montague. 1973. The proper treatment of
quantification in ordinary English. In K. Hintikka,
J. Moravcsik, and Suppes P., editors, Approaches to
Natural Language, pages 221–242. D. Reidel, Dor-
drecht.

https://wiki.portal.chalmers.se/agda/pmwiki.php
https://wiki.portal.chalmers.se/agda/pmwiki.php
https://github.com/HoTT/HoTT-Agda
https://github.com/HoTT/HoTT-Agda


Glyn Morrill. 2017. Parsing logical grammar: Cat-
Log3. In Proceedings of the Workshop on Logic
and Algorithms in Computational Linguistics 2017,
pages 107–131, Stockholm. Stockholm University.

Glyn Morrill and José Oriol Valentı́n. 2016. Computa-
tional coverage of type logical grammar: The Mon-
tague Test. In Empirical Issues in Syntax and Se-
mantics 11, pages 141–170.

Ulf Norell. 2007. Towards a practical programming
language based on dependent type theory. Ph.D. the-
sis, Chalmers University of Technology.

Andreas Nuyts, Andrea Vezzosi, and Dominique De-
vriese. 2017. Parametric quantifiers for dependent
type theory. In Proceedings of the ACM on Pro-
gramming Languages, ICFP. ACM.

Frank Pfenning and Rowan Davies. 2001. A judg-
mental reconstruction of modal logic. Mathematical
Structures in Computer Science, 11(4):511–540.

Aarne Ranta. 1994. Type-Theoretical Grammar. Ox-
ford University Press.

Michael Shulman. 2018. Brouwer’s fixed-point theo-
rem in real-cohesive homotopy type theory. Mathe-
matical Structures in Computer Science, 28(6):856–
941.

Göran Sundholm. 1989. Constructive generalized
quantifiers. Synthese, 79(1):1–12.

The Univalent Foundations Program. 2013. Homotopy
Type Theory: Univalent Foundations of Mathemat-
ics. https://homotopytypetheory.org/
book, Institute for Advanced Study, Princeton.

Andrea Vezzosi. 2019. Agda-flat. https://
github.com/agda/agda/tree/flat. Ac-
cessed: 2019-04-22.

Felix Wellen. 2018. Flat. https://github.
com/felixwellen/DCHoTT-Agda/blob/
master/Flat.agda. Code library. Accessed:
2019-04-22.

Colin Zwanziger. 2017. Montague’s intensional logic
as comonadic type theory. M.S. thesis, Carnegie
Mellon University, Pittsburgh.

Colin Zwanziger. 2018. Propositional attitude
operators in homotopy type theory: Extended
abstract. https://colinzwanziger.
com/wp-content/uploads/2019/06/
nlcs-2018-extended-abstract.pdf. In
Fifth Workshop on Natural Language and Computer
Science, Oxford.

Colin Zwanziger. 2019. Natural model semantics for
comonadic and adjoint modal type theory. In Pro-
ceedings of the Second Applied Category Theory
Conference, Compositonality.

https://homotopytypetheory.org/book
https://homotopytypetheory.org/book
https://github.com/agda/agda/tree/flat
https://github.com/agda/agda/tree/flat
https://github.com/felixwellen/DCHoTT-Agda/blob/master/Flat.agda
https://github.com/felixwellen/DCHoTT-Agda/blob/master/Flat.agda
https://github.com/felixwellen/DCHoTT-Agda/blob/master/Flat.agda
https://colinzwanziger.com/wp-content/uploads/2019/06/nlcs-2018-extended-abstract.pdf
https://colinzwanziger.com/wp-content/uploads/2019/06/nlcs-2018-extended-abstract.pdf
https://colinzwanziger.com/wp-content/uploads/2019/06/nlcs-2018-extended-abstract.pdf

