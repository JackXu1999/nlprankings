



















































Implementing a Reverse Dictionary, based on word definitions, using a Node-Graph Architecture


Proceedings of COLING 2016, the 26th International Conference on Computational Linguistics: Technical Papers,
pages 2797–2806, Osaka, Japan, December 11-17 2016.

Implementing a Reverse Dictionary, based on word definitions, using a
Node-Graph Architecture

Sushrut Thorat
Center for Mind/Brain Sciences

University of Trento
Rovereto, TN 38068, Italy

sushrut.thorat94@gmail.com

Varad Choudhari
Department of Computer Science

Rajarambapu Institute of Technology
Islampur, MH 415414, India

varad.choudhari@gmail.com

Abstract

In this paper, we outline an approach to build graph-based reverse dictionaries using word defi-
nitions. A reverse dictionary takes a phrase as an input and outputs a list of words semantically
similar to that phrase. It is a solution to the Tip-of-the-Tongue problem. We use a distance-based
similarity measure, computed on a graph, to assess the similarity between a word and the input
phrase. We compare the performance of our approach with the Onelook Reverse Dictionary and
a distributional semantics method based on word2vec, and show that our approach is much better
than the distributional semantics method, and as good as Onelook, on a 3k lexicon. This simple
approach sets a new performance baseline for reverse dictionaries.1

1 Introduction

A forward dictionary (FD) maps words to their definitions. A reverse dictionary (RD) (Sierra, 2000),
also known as an inverse dictionary, or search-by-concept dictionary (Calvo et al., 2016), maps phrases
to single words that approximate the meaning of those phrases. In the Oxford Learner’s Dictionary2,
one definition of ‘brother’ is ‘a boy or man who has the same mother and father as another person’. A
reverse dictionary will map not only this phrase to ‘brother’, but also phrases such as ‘son of my parents’.
A reverse dictionary is primarily a solution to the Tip of the Tongue problem (Schwartz and Metcalfe,
2011) which regularly plagues people when they want to articulate their thoughts. It can also be used in
the treatment of word selection anomic aphasia (Rohrer et al., 2008), a neurological disorder in which
patients can identify objects and understand semantic properties, but cannot name the object or produce
one word to describe the concept.

Popular languages let us create a multitude of phrases from a finite number of words. A static database
of all possible phrases is unbound, if not infinite (Ziff, 1974). We need to dynamically compute the
output word(s) from the input phrase. To map a phrase to a word, we have to compute the meanings of
the phrase and the word (Fromkin et al., 2011). The principle of compositionality states that the meaning
of an expression is composed of the meaning of its parts and the way they are combined structurally.
The most basic parts, words, can be defined in terms of word definitions, references to objects, or lexical
relations and hierarchies. Computing the meaning of a phrase requires constructing the constituent tree
and recognising the relationship between the constituents, which is a complex, open problem.

Compositional Distributional Semantic Models have been used towards computing the meaning of
a phrase, with partial success (Baroni, 2013; Erk, 2012). Recurrent neural networks show promise in
learning continuous phrase representations. They are used towards syntactic parsing beyond discrete
categories such as NP and VP, in an attempt to capture phrasal semantics (Socher et al., 2010). A
recent work has used neural language embedding models (RNNs with LSTMs) to understand phrases by
embedding dictionaries (Hill et al., 2015). But it doesn’t perform exceptionally better than the existing
reverse dictionaries (OneLook, etc.)

This work is licensed under a Creative Commons Attribution 4.0 International Licence.
Licence details: http://creativecommons.org/licenses/by/4.0/

1The test data and a demo code can be found at: https://github.com/novelmartis/RD16demo
2www.oxfordlearnersdictionaries.com; Accessed: February, 2016

2797



Figure 1 Figure 2

Figure 1: Operation of the Reverse Dictionary. The graphs’ connectivities are based on the reverse map,
a concept we will introduce shortly.
Figure 2: Each solid arrow indicates a in the definition of relation. This is the reverse map leading the
phrase ‘Son of my parents’ to the word ‘brother’, after extraction of the input words. Note that this is
one of the many sets of connections to all words on the graph from that phrase.

If we are to ignore the ordering of words in a phrase, the performance of such a system would not be
maximal. But we could then work just with well-studied lexical relations. Research into building reverse
dictionaries has mainly focused on lexical relations than the structural or contextual combination of
words. The attempts in defining a similarity measure between words have been summarised in (Mihalcea
et al., 2006). An attempt towards situational understanding and contextual selection of words can be
seen in (Granger, 1982). The creation of WordNet (Miller, 1995) boosted the use of lexical relations and
hierarchies, as in (Dutoit and Nugues, 2002; El-Kahlout and Oflazer, 2004; Shaw et al., 2013; Méndez
et al., 2013; Calvo et al., 2016). Most of these approaches extract input words from the input phrase
and expand their search through lexical relations and hierarchies, towards a similarity measure between
the phrase and the words. (Zock and Schwab, 2008) take inspiration from human word synthesis and
implement a user-guided search to the desired word. All the mentioned approaches have achieved partial
success, but the problem stays unsolved.

We explore the possibility of using word definitions towards establishing semantic similarity between
words and phrases. Definitions are dense sources of semantic information about the words (which makes
it difficult to extract information from them without using exact syntactic structures such as constituent
trees), and we employ them exclusively in our approach. We assume that the significance of the meaning
of a word to a definition is proportional to its frequency throughout the definitions in the FD. We extract
the meaning from the content words (Fromkin et al., 2011) contained in the phrase. We split the in-
put phrase into these component input words, implement a graph-search through related words (relation
through definition), and use a distance-based similarity measure to compute words which are represen-
tative of the meaning of the input phrase. A graph encodes the word relations in its connectivity matrix,
on which the similarity measures are computed. We now detail our approach.

2 System Description

The block diagram of the operation of the RD is depicted in Fig. 1. We now discuss the concept of the
reverse map, central to the structure of our graph, and the process of obtaining the connectivity matrix
underlying our graph.

2.1 The Reverse Map

In a forward map, words branch out to the words that are contained in their definitions. In a reverse map,
words branch out to the words whose definitions they are contained in. An example of a reverse map3 is
shown in Fig. 2.

If the input phrase is a definition, a search depth of one (branching out from the words of the input
phrase to the definitions they are contained in) of the reverse map will lead to the required word. A search
depth beyond one provides us with semantic information about the words whose definitions encompass

3Based on the definitions from the Oxford Learner’s Dictionary.

2798



or relate to the concepts that encompass or relate to the input words, and so on. Increasing search
depth obscures the relationship between words, which is the basis for the definition of the similarity
measure we employ. A reverse map suggests semantic convergence in a shallow search, although the
convergence might occur on multiple words, which is acceptable as they might be semantically-similar
words. Intuitively, a forward search seems to ‘fragment’ the meaning of the input word, and is expected
to perform worse than the reverse search in defining word relationships in our approach.

2.2 Connectivity Matrix of the Reverse Map

The steps in the construction of the connectivity matrix, based on the reverse map, are as follows. Our
inputs are a forward dictionary, a list of functional words, and a lemmatizer. We process the forward
dictionary to retain content words in their base form. We then construct the forward-linked list, transform
it into a back-linked list, and then construct the back-linked connectivity matrix. We can also construct
the forward-linked connectivity matrix in a similar way.

2.2.1 Processing the Forward Dictionary

A forward dictionary (FD) is a two-dimensional list. The rows in the first column contain the words, and
the rows in the second column contain the corresponding definitions. We reduce all words in column one
to their lemmas, their base forms4. We then delete all the functional words5 (Fromkin et al., 2011), and
the corresponding definitions in column two. For our purposes, we pool all the definitions of a particular
word into a single cell, parse them through the lemmatizers and delete all the functional words within
them. We term the resulting list the forward-linked list. We now generate the back-linked matrix.

2.2.2 The Back-Linked Matrix

We number the words in column one of the forward-linked list in the alphabetical order (word-id). We
substitute all the words in column two by their word-ids. We then create a list which points a word
(written in column one) to the words whose definitions it lies in (written in column two). We call this list
the back-linked list.

We then generate the back-linked matrix (BLM) which represents the connections (weights) between
the nodes (words, in this case). If j is a word-id in the second column of the back-linked list, and i is
the word-id in the corresponding row, but in column one, then the element (j, i) in the BLM is turned
to 1. After iterating through all the elements in the list, we set the diagonals of the BLM to zero (no
self-connections).

We will see in section 3 that many words in a dictionary do not appear in any definition, and so cannot
contact all words in the wordlist through the reverse map. But we would like to obtain the similarity
measure between any two words in the wordlist. As a simple measure in ensuring complete connectivity,
we build a mixed back-linked matrix (mBLM) which has forward-linked connections for words that do
not have sufficient back-linked connections (they cannot connect to all the words in the lexicon, through
the reverse map). We will assess in section 4 the change in performance by the inclusion of the said
forward links.

2.3 The Node-Graph Architecture

Each word is represented by a node in the graph. The connections between the nodes in our graph
are given by the BLM. We create a graph for each input word (we obtain these from the input phrase
by parsing it through the same operations as the definitions), and activate the input word node in its
corresponding graph (the explanation is provided in section 5). We then simultaneously evolve the graphs
one hop at a time. We are, in effect, expanding the tree of words to be able to effectively implement the
similarity measure. If we implement n hops, we term it a n-layered search (n is also termed as the
‘depth’ of search).

4Using the pattern lemmatizer (Smedt and Daelemans, 2012) and wordnet morphy (Bird et al., 2009).
5The functional words were obtained from Higgins, 2014: http://myweb.tiscali.co.uk/wordscape/museum/funcword.html

2799



2.4 The Similarity Measure
We use a distance-based measure of similarity.

We define the distance dY,X from a word X to another word Y as the depth of search required to
evolve a state with only SX = 1, to the first state with SY = 1. Note that dY,X 6= dX,Y .

We calculate the frequencies of appearances, {νZ} throughout definitions, for all words {Z} in the
wordlist.

We define the similarity measure EW,P of a word W to an input phrase P containing the input words
{Pi} as:

EW,P =
∑

i (νPi × dW,Pi)−1∑
i ν
−1
Pi

We weighted the inverse of the distances between the words with the inverse of the frequencies of the
input words. So, the similarity measure includes a measure of ‘semantic importance’ of each input word
in the input phrase. We calculate the similarity measure of each word to the input phrase, and output the
words in the decreasing order of similarity. As every word is connected to every other word in the reverse
map given apt search depth, the similarity measure becomes important in finding relevant output. Our
similarity measure states, the smaller the distances from the input words, the more similar is the word to
the input phrase. Minimal distances ensure that the semantic similarity remains meaningful.

2.5 System Summary
The user inputs a phrase. Input (content) words are extracted from the phrase. Graphs are generated for
each input word, and in each graph, the state of the node corresponding to the input word is turned to
1. The graphs are evolved to the maximum non-redundant search depth (see section 3). The similarity
measure, to the input phrase, is computed for every word in the lexicon, and the words are ranked
according to their similarity measures, leading to the output.

3 Graph exploration

We construct BLMs and mBLMs based on the processed6 Oxford 3000 wordlist7, and a BLM for the
entire WordNet (Miller, 1995) lexicon (WL). We use the Oxford Learner’s dictionary (OLD), Merriam-
Webster dictionary8 (MW), and WordNet (WN) as forward dictionaries for the Oxford 3000 wordlist,
and WordNet for the WordNet lexicon (WL). We also build a BLM and a mBLM by pooling definitions
(Fusion BLM) from the three forward dictionaries, for the 3k wordlist, to check the effect of using
multiple dictionaries on performance.

Before we move on to analyse the performances, let’s look deeper into the connectivity matrices we
generated. All the BLMs and mBLMs are sparse9. We use the compressed sparse row format from
SciPy (Jones et al., 2001) to store and process our matrices.

In the 3k wordlist case, the number of connections in the Fusion BLM is greater than the BLMs built
with individual FDs. In Fig. 3(a), we see that there are 190 words which cannot excite the entire graph
through the Fusion BLM. So, we build a mBLM, as proposed in section 2.2.2, and ensure complete
connectivity of the graph, as seen in Fig. 3(b). As all words can connect to all other words at the most in
9 steps, a search depth greater than 9 would be redundant when we use the Fusion BLM. The maximum
non-redundant search depths for the individual BLMs are as follows: 11 (OLD), 9 (WN), and 11 (MW).

The maximum required search depth for the WordNet lexicon BLM is 19. 53, 711 words out of 82, 603
do not map to any word in the reverse map. Those words are infrequent in the language and are not used
to define other words. Fig. 4(b) depicts the distribution of the number of back-linked connections from
the words in the reverse map for the 80k WL BLM (µ = 7.81, σ = 62.86, max = 6163), as compared to
the distribution for the 3k WN BLM (µ = 18.10, σ = 36.14, max = 615) in Fig. 4(a). The huge number

6Words which appeared in Oxford Learner’s dictionary definitions, but were not part of the wordlist, were added to the
wordlist for consistency. The modified wordlist contains 3107 words, and is referred to as 3k, in this paper.

7http://www.oxfordlearnersdictionaries.com/about/oxford3000
8Accessed: February, 2016
9Sparsity (proportion of 0’s in the matrices): 0.99 (3k Fusion BLM), and 0.99 (WordNet lexicon BLM)

2800



Figure 3 Figure 4

Figure 3: Distribution of the minimum search depth required by a word to excite the entire graph. If a
word is not able to do that, a value of zero is assigned to its minimum search depth.
Figure 4: Distribution of the number of back-linked connections, for each word, in the reverse map.

of backward-linked connections for some words in 80k WL BLM would confound the accuracy of the
similarity measures, and a drop in performance is expected.

4 Performance Analysis

The only available online reverse dictionary is the Onelook Reverse Dictionary (Beeferman, 2003), with
which we will compare our algorithm’s performance. Onelook is a commercial application, and its
architecture is proprietary. We know that it indexes 1061 dictionaries and resources such as Wikipedia
and WordNet. The lexicon of Onelook is much bigger than 3k. In the performance comparison, we state
the performance with (termed as ‘corr’) and without adapting the outputs to the 3k lexicon.

We also compare our approach with a distributional semantics method, based on word2vec which
represents words as vectors in a linear structure that allows analogical reasoning. In that vector space,
the vector ‘king + woman - man’ will have a high similarity with the vector for ‘queen’ (Mikolov et al.,
2013a; Mikolov et al., 2013b). We average the vector representations of input words, and search the word
vectors most similar to the resulting vector (cosine similarity). This is an established method of building
phrase representations from word representations (Mitchell and Lapata, 2010). The performance of such
an approach10 is shown in Table. 1 (as W2V).

4.1 Performance Test

The reverse dictionary outputs multiple candidate words. We introduced users to the concept of the
reverse dictionary and asked them to generate phrases they would use to get to a given word, if they
would have forgotten the word but retained the concept. 25 such users generated 179 phrases, a sample
of which is presented in Figure. 5. The performance is gauged by the ranks of the words in the outputs
of their user-generated phrases11.

We also test all the approaches on one-line definitions for the 179 words, obtained from the Macmillian
Dictionary12.

4.2 Performance results

Example runs of the RD, using the 3k Fusion mBLM, are presented in Fig. 6. The distributions of ranks,
for the various BLMs/mBLMs (whichever has greater % of ranks under 100 for each case), word2vec,
and Onelook, are stated in Table. 1. Onelook did not provide any outputs for 18 phrases out of the 179
user-generated phrases, and 72 out of the 179 definitions from the Macmillan dictionary. Instead of

10Based on the implementation of word2vec by Daniel Rodriguez at https://github.com/danielfrg/word2vec, trained on a
corpus with 15.8 million words, and a vocabulary of 98k.

11An input phrase can have multiple semantically similar words. Analysing the semantic quality of each output would be
the ideal test. This could be done using a function of the sum of the ranks of each output weighted with their distances (in a
high-dimensional semantic space such as word2vec) from the target word. However, previous approaches have used just the
rank of the target word (which is nevertheless a good indicator of performance), and here we do the same.

12Accessed: May, 2016

2801



Words Phrases
Variation A change or changes between

two or more things
Attractive Something that is catchy
Plus The operation used to increase
Church Place to meet god
Possession Taking full control over a thing

Figure 5
Figure 6

Figure 5: Sample user-generated phrases, used for testing the performance of the RD.
Figure 6: The first 10 outputs obtained using the 3k Fusion mBLM (n=9), for three input phrases.

Test Type→ Macmillian Word Definitions (179) User Concept Descriptions (179)
Evaluation→ Accuracy Rank Rank Accuracy Rank Rank
Models ↓ @1/10/100 Median σ @1/10/100 Median σ
Onelook .19/.41/.65 5 24 .04/.21/.40 10 26
Onelook, corr* .20/.46/.68 3 20 .07/.26/.52 13 30
W2V .01/.06/.20 23 30 .01/.05/.18 34 28
W2V, corr* .02/.11/.29 21 26 .01/.08/.26 21 29
Chance, 3k 10−4/10−3/.03 50 29 10−4/10−3/.03 50 29
Fusion, FLM .02/.10/.21 12 28 .01/.07/.22 16 21
Fusion, mBLM .25/.55/.84 4 22 .10/.23/.53 14 26
OLD, mBLM .26/.52/.78 4 23 .04/.17/.43 14 25
WN, BLM .08/.27/.54 11 26 .06/.18/.41 14 26
MW, mBLM .17/.39/.63 5 20 .05/.20/.43 15 25
WL, 80k .03/.15/.36 18 26 .05/.11/.24 14 25
WL, corr* .07/.26/.52 10 25 .07/.18/.35 10 23

Table 1: Performance of the various models. Accuracy @n is the fraction of the phrases with the rank
of the target word less than or equal to n, in their outputs. σ is the standard deviation. Only the phrases
with target words having ranks less than 100 were considered in calculating the median and variance.
The 3k cases (OLD, WN, MW, Fusion) were evaluated at a search depth of 11, and the 80k case (WL) at
a search depth of 19. *corr indicates the cases where the outputs were truncated to fit in the 3k lexicon,
for fair comparison. (Note: Accuracy - higher is better; Rank median - lower is better; Rank variance -
lower is better.)

considering these as failures, we factor out these phrases while evaluating Onelook. The performance of
all approaches is significantly better than chance, as seen through the comparison of performance with
‘Chance’ which represents the expected values of performance for random rank assignments to the target
words13 (considering the 3k lexicon). The cases of interest are highlighted in the table.

All the 3k cases using a BLM/mBLM have a higher performance than the 3k Fusion forward-linked
matrix (FLM). Fusion of the individual 3k BLMs yields better performance. The 3k Fusion BLM per-
forms at least as well as Onelook. The use of mBLMs is fruitful as they increase the performance in
some cases. The performance does not change much across search depth as seen in Table. 2, suggesting
that our approach works well even at a shallow search. Deeper search is required only when a phrase
is semantically vague or non-specific, and markedly different from dictionary definitions. Both our ap-

13The expected value of the accuracy @k, over random rank assignments, is given by:
∑Pr

n=0
n

Pr
.

Pr Cnkn(N−k)Pr−n
NPr

= k
N

,
where Pr is the number of test phrases, and N is the size of the lexicon.

2802



Accuracy ↓ n = 1 n = 2 n = 3 n = 10
@1 .08 .07 .10 .10
@10 .25 .22 .23 .23

@100 .55 .52 .53 .53

Table 2: Performance across search depth (n) for the Fusion mBLM case. The output becomes stable
beyond a search depth of 3. The search depth at which the output becomes stable varies with the BLMs.

proach and Onelook outperform the W2V approach. We conclude that our approach works well with a
3k wordlist. Although the ranks’ median and variance are indicative of the performance (hit rate, and
robustness), they are marred by the accuracies, so we do not use them in our inferences.

However, the performance drops significantly when the entire processed WordNet lexicon (WL, 80k)
is the FD. The words that lie in the definitions of other words are a small subset of the WL wordlist. As
seen in Fig. 4, there are 163 words in the WL wordlist which map to more than 500 words in the reverse
map. Therefore, the distances of multiple words to the input words are similar, obscuring the semantic
content of the similarity measure. This is a potential limitation of our approach, for which there is no
trivial fix.

We also assessed the performance of the Fusion mBLM on the 200 test phrases used in (Hill et al.,
2015). The size of their lexicon is 66k. We cannot upscale the outputs of our 3k cases to 66k, so a direct
fair comparison with their results is not possible. However, we can downscale the outputs of Onelook
(on the 200 phrases) to 3k and compare with it, thus providing an indirect comparison with the approach
used by Hill et al. The @1/10/100 accuracies of the Fusion mBLM are .16/.39/.62. But 33 target words
do not lie in the 3k lexicon. The accuracies excluding the corresponding phrases are .19/.46/.74. The
@1/10/100 accuracies of the Onelook (scaled to 3k) are .08/.21/.30. But 101 phrases do not return any
outputs. The accuracies excluding those phrases are .16/.42/.61. The accuracies of Onelook and the
RNN approaches in Hill et al. are equivalent. We thus conclude that the performance of our approach is
at least as good as the RNN approaches, on a 3k lexicon.

5 Recommendations

The graph structure opens up a semantic dimension by letting us mutate the level of significance a word
has in a definition, through the connectivity matrix. We can introduce this information in the similarity
measure by scaling the weights of the connections between the words with distances equal to one. The
definitions provided in the dictionary cannot populate the new dimension. One could consider the use
of semantic rules, or lexical relations, or user feedback. Such a learning algorithm could use further
exploration.

There are multiple points in our approach which could use either improvement or emphasis. We
use multiple graphs for calculating the similarity measure. This is done because we do not want the
distance of a word from an input word to be a function of all the input words. Using Spiking Neural
Networks (Ghosh-Dastidar and Adeli, 2009), we could implement the similarity measure using a sin-
gle graph by frequency tagging the distances from each input word, although it isn’t clear how much
advantage it would confer in terms of performance.

A matrix of pair-wise distances between all words could be used to evaluate the similarity measures,
instead of evolving a graph. Such a matrix won’t be sparse, and in the case of a 80k lexicon would
be 50 gigabytes in size (compared to 10 megabytes in CSR sparse format for the BLM), making it im-
practical to deploy the algorithm on mobile devices. Execution time and memory requirement are not a
problem for our approach. Our approach is an easy and computationally cheap method of implementing
semantic search with a graph, which performs at least as well as the Onelook reverse dictionary.

The performance drops significantly when the WordNet 80k lexicon is used (the mBLM doesn’t help).
Use of multiple forward dictionaries might boost the performance, as in the case of Fusion mBLM, but as
mentioned in section 4.2, the branching factor of the graph is too high, obscuring the similarity measure.
Although this might make the approach impractical, it does serve as a new baseline. A simple approach

2803



like ours can rival the performance of sophisticated algorithms used by Onelook and (Hill et al., 2015),
suggesting that the information being retrieved by those algorithms is somewhat basic. This calls for
methods which could significantly outperform a simple approach like ours, towards encoding deeper
phrasal semantics.

Dealing with multi-word expressions isn’t straightforward in our approach. We separate all words in
the input phrase towards implementing our similarity measure. Detecting multi-word expressions would
require recursive parsing of the phrase, something which is more suited to recurrent neural network-
based approaches (Hill et al., 2015). This isn’t a major concern for our task though, as the input phrase
is supposed to be a simple description of the concept in mind, in which case the user is more likely to
input ‘to die’ than ‘kick the bucket’. Multi-word expressions are also rarely used to define words or other
multi-word expressions. So, they could be treated as one node with no back-linked connections but with
multiple forward-linked connections (the definition of that expression), and thus be encompassed in our
approach as outputs, but not as inputs (which we do in the 80k WordNet case).

6 Concluding Remarks

We reported the construction of a reverse dictionary based on a node-graph architecture, which derives its
semantic information exclusively from dictionary definitions. The approach works at least as well as the
Onelook reverse dictionary and a RNN-based approach described in (Hill et al., 2015), on a lexical size
of 3k words, but the performance deteriorates, to below Onelook’s, when scaled to a lexicon with 80k
words. The performance still stays significant (as compared to the ‘Chance’), and greater than a forward
map approach. Furthermore, this approach can be generalised to any language given an appropriate
forward dictionary, lemmatizer, and a list of functional words.

Recent distributional approaches use vector representations for word meaning, derived through sim-
ilarities gauged by the occurrences and co-occurrences of words in a large corpus (Erk, 2012). The
performance of one of these approaches, known as word2vec (Mikolov et al., 2013a; Mikolov et al.,
2013b), on our test is poor, as seen in Table. 1 (under ‘W2V’). The performance suggests that phrasal
semantics doesn’t necessarily follow a linear additive structure. Indeed, researchers have been trying to
find other mathematical structures and approaches which would be suitable for phrasal semantics (Baroni
and Zamparelli, 2010; Socher et al., 2011), but with partial success and on specific types of phrases.

A class of Artificial Neural Networks (ANNs), called Recurrent Neural Networks (RNNs) are be-
ing used for tasks such as machine translation (Cho et al., 2014) and generating natural image cap-
tions (Karpathy and Fei-Fei, 2015), among others (Zhang and Zong, 2015). These ‘deep’ networks are
not trained on, or to obtain, discrete syntactic categories such as NP and VP. Instead they are provided
with the inputs and expected outputs (task-dependent) while training. The learning paradigm generates
features (often incomprehensible in terms of classical linguistics) to effectively implement the given
task14, which seems to be better than using predetermined features. (Hill et al., 2015) use such a network
to implement a reverse dictionary, and it performs at least as well as Onelook. The performance is note-
worthy, but the fact that a simple approach like ours can rival it suggests that the RNN-based approaches
require further research before doing for reverse dictionaries (and phrasal semantics, in general) what
Convolutional Neural Networks (CNNs) did for visual object classification (Chatfield et al., 2014).

It seems that the focus on constituent trees and the structural combination of words cannot be compro-
mised upon. RNNs might be the way forward, in this regard, as they could develop properties encom-
passing and surpassing those classical linguistic features.

References
Marco Baroni and Roberto Zamparelli. 2010. Nouns are vectors, adjectives are matrices: Representing adjective-

noun constructions in semantic space. In Proceedings of the 2010 Conference on Empirical Methods in Natural
Language Processing, pages 1183–1193. Association for Computational Linguistics.

14“The Unreasonable Effectiveness of Recurrent Neural Networks” by Andrej Karpathy -
http://karpathy.github.io/2015/05/21/rnn-effectiveness/

2804



Marco Baroni. 2013. Composition in distributional semantics. Language and Linguistics Compass, 7:511–522.

Doug Beeferman. 2003. Onelook reverse dictionary. http://onelook.com/reverse-dictionary.shtml.

Slaven Bilac, Wataru Watanabe, Taiichi Hashimoto, Takenobu Tokunaga, and Hozumi Tanaka. 2004. Dictionary
search based on the target word description. In Proc. of the Tenth Annual Meeting of The Association for Natural
Language Processing (NLP2004), pages 556–559.

Steven Bird, Ewan Klein, and Edward Loper. 2009. Natural Language Processing with Python. O’Reilly Media
Inc.

Hiram Calvo, Oscar Mndez, and Marco A. Moreno-Armendriz. 2016. Integrated concept blending with vector
space models. Computer Speech & Language.

Ken Chatfield, Karen Simonyan, Andrea Vedaldi, and Andrew Zisserman. 2014. Return of the devil in the details:
Delving deep into convolutional nets. arXiv preprint arXiv:1405.3531.

Kyunghyun Cho, Bart Van Merriënboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares, Holger Schwenk,
and Yoshua Bengio. 2014. Learning phrase representations using rnn encoder-decoder for statistical machine
translation. arXiv preprint arXiv:1406.1078.

Dominique Dutoit and Pierre Nugues. 2002. A lexical database and an algorithm to find words from definitions.
In ECAI, pages 450–454.

Ilknur Durgar El-Kahlout and Kemal Oflazer. 2004. Use of wordnet for retrieving words from their meanings. In
Proceedings of the global Wordnet conference, GWC2004, pages 118–123.

Katrin Erk. 2012. Vector space models of word meaning and phrase meaning: A survey. Language and Linguistics
Compass, 6:635–653.

Victoria Fromkin, Robert Rodman, and Nina Hyams. 2011. An Introduction to Language. Wadsworth, Cengage
Learning, 9 edition.

Samawoy Ghosh-Dastidar and Hojjat Adeli. 2009. Spiking neural networks. International Journal of Neural
Systems, 19(04):295–308.

Richard H. Granger. 1982. Scruffy text understanding: design and implementation of ‘tolerant’ understanders. In
Proceedings of the 20th annual meeting on Association for Computational Linguistics, ACL’82, pages 157–160.

Felix Hill, Kyunghyun Cho, Anna Korhonen, and Yoshua Bengio. 2015. Learning to understand phrases by
embedding the dictionary. arXiv preprint arXiv:1504.00548.

Eric Jones, Travis Oliphant, Pearu Peterson, et al. 2001. SciPy: Open source scientific tools for Python. [Online;
accessed 2016-03-16].

Andrej Karpathy and Li Fei-Fei. 2015. Deep visual-semantic alignments for generating image descriptions. In
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 3128–3137.

Omer Levy and Yoav Goldberg. 2014. Neural word embedding as implicit matrix factorization. In Advances in
Neural Information Processing Systems, pages 2177–2185.

Oscar Méndez, Hiram Calvo, and Marco A. Moreno-Armendáriz. 2013. A reverse dictionary based on semantic
analysis using wordnet. In Proceedings of the Mexican International Conference on Artificial Intelligence,
MICAI 2013, pages 275–285.

Rada Mihalcea, Courtney Corley, and Carlo Strapparava. 2006. Corpus-based and knowledge-based measures
of text semantic similarity. In Proceedings of the 21st national conference on Artificial intelligence, AAAI’06,
volume 1, pages 775–780.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013a. Efficient estimation of word representations
in vector space. ICLR Workshop.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeff Dean. 2013b. Distributed representations
of words and phrases and their compositionality. In Advances in neural information processing systems, pages
3111–3119.

George A. Miller. 1995. Wordnet: A lexical database for english. In Communications of the ACM, volume 38,
pages 39–41.

2805



Jeff Mitchell and Mirella Lapata. 2010. Composition in distributional models of semantics. Cognitive science,
34(8):1388–1429.

Jonathan D. Rohrer, William D. Knight, Jane E. Warren, Nick C. Fox, Martin N. Rossor, and Jason D. Warren.
2008. Word-finding difficulty: a clinical analysis of the progressive aphasias. Brain, 131:8–38.

Bennett L. Schwartz and Janet Metcalfe. 2011. Tip-of-the-tongue (tot) states: retrieval, behavior, and experience.
Mem Cognit., 39(5):737–749.

Bennett L. Schwartz. 1999. Sparkling at the end of the tongue: The etiology of tip-of-the-tongue phenomenology.
Psychonomic Bulletin and Review, 6(3):379–393.

Ryan Shaw, Anindya Datta, Debra VanderMeer, and Kaushik Dutta. 2013. Building a scalable database-driven
reverse dictionary. IEEE Transactions on Knowledge and Data Engineering, 25(3):528–540.

Gerardo Sierra. 2000. The onomasiological dictionary: a gap in lexicography. In Proceedings of the Ninth
EURALEX International Congress, EURALEX 2000, pages 223–235.

Tom De Smedt and Walter Daelemans. 2012. Pattern for python. Journal of Machine Learning Research,
13:2063–2067.

Richard Socher, Christopher D Manning, and Andrew Y Ng. 2010. Learning continuous phrase representations
and syntactic parsing with recursive neural networks. In Proceedings of the NIPS-2010 Deep Learning and
Unsupervised Feature Learning Workshop, pages 1–9.

Richard Socher, Eric H Huang, Jeffrey Pennin, Christopher D Manning, and Andrew Y Ng. 2011. Dynamic
pooling and unfolding recursive autoencoders for paraphrase detection. In Advances in Neural Information
Processing Systems, pages 801–809.

Jiajun Zhang and Chengqing Zong. 2015. Deep neural networks in machine translation: An overview. IEEE
Intelligent Systems, 15.

Paul Ziff. 1974. The number of english sentences. In Foundations of Language, volume 11, pages 519–532.
Springer.

Michael Zock and Didier Schwab. 2008. Lexical access based on underspecified input. In Proceedings of the
Workshop on Cognitive Aspects of the Lexicon, COGALEX ’08, pages 9–17.

2806


