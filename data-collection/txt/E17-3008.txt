



















































Alto: Rapid Prototyping for Parsing and Translation


Proceedings of the EACL 2017 Software Demonstrations, Valencia, Spain, April 3-7 2017, pages 29–32
c©2017 Association for Computational Linguistics

Alto: Rapid Prototyping for Parsing and Translation

Johannes Gontrum Jonas Groschwitz∗ Alexander Koller∗ Christoph Teichmann∗
University of Potsdam, Potsdam, Germany / ∗ Saarland University, Saarbrücken, Germany

gontrum@uni-potsdam.de / ∗ {groschwitz|koller|teichmann}@coli.uni-saarland.de

Abstract

We present Alto, a rapid prototyping tool
for new grammar formalisms. Alto im-
plements generic but efficient algorithms
for parsing, translation, and training for
a range of monolingual and synchronous
grammar formalisms. It can easily be ex-
tended to new formalisms, which makes
all of these algorithms immediately avail-
able for the new formalism.

1 Introduction

Whenever a new grammar formalism for natu-
ral language is developed, there is a prototyp-
ing phase in which a number of standard algo-
rithms for the new formalism must be worked
out and implemented. For monolingual grammar
formalisms, such as (probabilistic) context-free
grammar or tree-adjoining grammar, these include
algorithms for chart parsing and parameter estima-
tion. For synchronous grammar formalisms, we
also want to decode inputs into outputs, and bina-
rizing grammars becomes nontrivial. Implement-
ing these algorithms requires considerable thought
and effort for each new grammar formalism, and
can lead to faulty or inefficient prototypes. At the
same time, there is a clear sense that these algo-
rithms work basically the same across many dif-
ferent grammar formalisms, and change only in
specific details.

In this demo, we address this situation by intro-
ducing Alto, the Algebraic Language Toolkit. Alto
is based on Interpreted Regular Tree Grammars
(IRTGs; (Koller and Kuhlmann, 2011)), which
separate the derivation process (described by prob-
abilistic regular tree grammars) from the interpre-
tation of a derivation tree into a value of the lan-
guage. In this way, IRTGs can capture a wide
variety of monolingual and synchronous grammar

formalisms (see Fig. 1 for some examples). By
selecting an appropriate algebra in which the val-
ues of the language are constructed, IRTGs can
describe languages of objects that are not strings,
including string-to-tree and tree-to-tree mappings,
which have been used in machine translation, and
synchronous hyperedge replacement grammars,
which are being used in semantic parsing.

One advantage of IRTGs is that a variety of
algorithms, including the ones listed above, can
be expressed generically in terms of operations
on regular tree grammars. These algorithms ap-
ply identically to all IRTG grammars and Alto of-
fers optimized implementations. Only an algebra-
specific decomposition operation is needed for
each new algebra. Thus prototyping for a new
grammar formalism amounts to implementing an
appropriate algebra that captures new interpreta-
tion operations. All algorithms in Alto then be-
come directly available for the new formalism,
yielding an efficient prototype at a much reduced
implementation effort.

Alto is open source and regularly adds new fea-
tures. It is available via its website:
https://bitbucket.org/tclup/alto.

2 An example grammar

Let us look at an example to illustrate the Alto
workflow. We will work with a synchronous
string-to-graph grammar, which Alto’s GUI dis-
plays as in Fig. 2. The first and second column
describe a weighted regular tree grammar (wRTG,
(Comon et al., 2007)), which specifies how to
rewrite nonterminal symbols such as S and NP re-
cursively in order to produce derivation trees. For
instance, the tree shown in the leftmost panel of
Fig. 3 can be derived using this grammar, starting
with the start symbol S, and is assigned a weight
(= probability) of 0.24. These derivation trees

29



Formalism Reference Algebra(s)
Context-Free Grammars (CFGs) (Hopcroft and Ullman, 1979) String

Hyperedge Replacement Grammars (HRGs) (Chiang et al., 2013) Graph
Tree Substitution Grammars (Sima’an et al., 1994) String / Tree

Tree-Adjoining Grammars (TAGs) (Joshi et al., 1975) TAG string / TAG tree
Synchronous CFGs (Chiang, 2007) String / String
Synchronous HRGs (Chiang et al., 2013) String / Graph

String to Tree Transducer (Galley et al., 2004) String / Tree
Tree to Tree Transducer (Graehl et al., 2008) Tree / Tree

Figure 1: Some grammar formalisms that Alto can work with.

serve as abstract syntactic representations, along
the lines of derivation trees in TAG.

Next, notice the column “english” in Fig. 2.
This column describes how to interpret the deriva-
tion tree in an interpretation called “english”. It
first specifies a tree homomorphism, which maps
derivation trees into terms over some algebra by
applying certain rewrite rules bottom-up. For in-
stance, the “boy” node in the example derivation
tree is mapped to the term t1 = ∗(the, boy). The
entire subtree then maps to a term of the form
∗(?1, ∗(wants, ∗(to, ?2))), as specified by the row
for “wants2” in the grammar, where ?1 is replaced
by t1 and ?2 is replaced by the analogous term for
“go”. The result is shown at the bottom of the mid-
dle panel in Fig. 3. Finally, this term is evaluated
in the underlying algebra; in this case, a simple
string algebra, which interprets the symbol * as
string concatenation. Thus the term in the middle
panel evaluates to the string “the boy wants to go”,
shown in the “value” field.

The example IRTG also contains a column
called “semantics”. This column describes a sec-
ond interpretation of the derivation tree, this time
into an algebra of graphs. Because the graph al-
gebra is more complex than the string algebra, the
function symbols look more complicated. How-
ever, the general approach is exactly the same as
before: the grammar specifies how to map the
derivation tree into a term (bottom of rightmost
panel in Fig. 3), and then this term is evaluated
in the respective algebra (here, the graph shown at
the top of the rightmost panel).

Thus the example grammar is a synchronous
grammar which describes a relation between
strings and graphs. When we parse an input string
w, we compute a parse chart that describes all
grammatically correct derivation trees that inter-
pret to this input string. We do this by computing

a decomposition grammar for w, which describes
all terms over the string algebra that evaluate to w;
this step is algebra-specific. From this, we calcu-
late a regular tree grammar for all derivation trees
that the homomorphism maps into such a term,
and then intersect it with the wRTG. These opera-
tions can be phrased in terms of generic operations
on RTGs; implementing these efficiently is a chal-
lenge which we have tackled in Alto. We can com-
pute the best derivation tree from the chart, and
map it into an output graph. Similarly, we can also
decode an input graph into an output string.

3 Algorithms in Alto

Alto can read IRTG grammars and corpora from
files, and implements a number of core algorithms,
including: automatic binarization of monolingual
and synchronous grammars (Büchse et al., 2013);
computation of parse charts for given input ob-
jects; computing the best derivation tree; comput-
ing the k-best derivation trees, along the lines of
(Huang and Chiang, 2005); and decoding the best
derivation tree(s) into output interpretations. Alto
supports PCFG-style probability models with both
maximum likelihood and expectation maximiza-
tion estimation. Log-linear probability models are
also available, and can be trained with maximum
likelihood estimation. All of these functions are
available through command-line tools, a Java API,
and a GUI, seen in Fig. 2 and 3.

We have invested considerable effort into mak-
ing these algorithms efficient enough for practical
use. In particular, many algorithms for wRTGs in
Alto are implemented in a lazy fashion, i.e. the
rules of the wRTG are only calculated by need;
see e.g. (Groschwitz et al., 2015; Groschwitz et
al., 2016). Obviously, Alto cannot be as effi-
cient for well-established tasks like PCFG parsing

30



Figure 2: An example IRTG with an English and a semantic interpretation (Alto screenshot).

Figure 3: A derivation tree with interpreted values (Alto screenshot).

as a parser that was implemented and optimized
for this specific grammar formalism. Nonethe-
less, Alto is fast enough for practical use with
treebank-scale gramars, and for less mainstream
grammar formalisms can be faster than special-
ized implementations for these formalisms. For
instance, Alto is the fastest published parser for
Hyperedge Replacement Grammars (Groschwitz
et al., 2015). Alto contains multiple algorithms for
computing the intersection and inverse homomor-
phism of RTGs, and a user can choose the combi-
nation that works best for their particular grammar
formalism (Groschwitz et al., 2016).

The most recent version adds further perfor-
mance improvements through the use of a num-
ber of pruning techniques, including coarse-to-fine
parsing (Charniak et al., 2006). With these, Sec-
tion 23 of the WSJ corpus can be parsed in a cou-
ple of minutes.

4 Extending Alto

As explained above, Alto can capture any gram-
mar formalism whose derivation trees can be de-
scribed with a wRTG, by interpreting these into
different algebras. For instance, the difference

between Context-Free and Tree-Adjoining Gram-
mars in Alto is that CFGs use the simple string al-
gebra outlined in Section 2, whereas for TAG we
use a special “TAG string algebra” which defines
string wrapping operations (Koller and Kuhlmann,
2012). All algorithms mentioned in Section 3 are
generic and do not make any assumptions about
what algebras are being used. As explained above,
the only algebra-specific step is to compute de-
composition grammars for input objects.

In order to implement a new algebra, a user of
Alto simply derives a class from the abstract base
class Algebra, which amounts to specifying the
possible values of the algebra (as a Java class) and
implementing the operations of the algebra as Java
methods. If Alto is also to parse objects from this
algebra, the class needs to implement a method for
computing decomposition grammars for the alge-
bra’s values. Alto comes with a number of alge-
bras built in, including string algebras for Context-
Free and Tree-Adjoining grammars as well as tree,
set, and graph algebras. All of these can be used
in parsing. By parsing sets in a set-to-string gram-
mar for example, Alto can generate referring ex-
pressions (Engonopoulos and Koller, 2014).

31



Finally, Alto has a flexible system of input and
output codecs, which can map grammars and alge-
bra values to string representations and vice versa.
A key use of these codecs is reading grammars
in native input format and converting them into
IRTGs. Users can provide their own codecs to
maximize interoperability with existing code.

5 Conclusion and Future Work

Alto is a flexible tool for the rapid implementation
of new formalisms. This flexibility is based on a
division of concerns between the generation and
the interpretation of grammatical derivations. We
hope that the research community will use Alto on
newly developed formalisms and on novel combi-
nations for existing algebras. Further, the toolkit’s
focus on balancing generality with efficiency sup-
ports research using larger datasets and grammars.

In the future, we will implement algorithms for
the automatic induction of IRTG grammars from
corpora, e.g. string-to-graph corpora, such as the
AMRBank, for semantic parsing (Banarescu et al.,
2013). This will simplify the prototyping process
for new formalisms even further, by making large-
scale grammars for them available more quickly.
Furthermore, we will explore ways for incorpo-
rating neural methods into Alto, e.g. in terms of
supertagging (Lewis et al., 2016).

Acknowledgements

This work was supported by DFG grant KO
2916/2-1.

References
L. Banarescu, C. Bonial, S. Cai, M. Georgescu,

K. Griffitt, U. Hermjakob, K. Knight, P. Koehn,
M. Palmer, and N. Schneider. 2013. Abstract mean-
ing representation for sembanking. In Proceedings
of the 7th Linguistic Annotation Workshop.

M. Büchse, A. Koller, and H. Vogler. 2013. Generic
binarization for parsing and translation. In Proceed-
ings of the 51st Annual Meeting of the Association
for Computational Linguistics.

E. Charniak, M. Johnson, M. Elsner, J. Austerweil,
D. Ellis, I. Haxton, C. Hill, R. Shrivaths, J. Moore,
M. Pozar, and T. Vu. 2006. Multilevel coarse-to-
fine pcfg parsing. In Proceedings of the Human Lan-
guage Technology Conference of the North Ameri-
can Chapter of the ACL.

D. Chiang, J. Andreas, D. Bauer, K. M. Hermann,
B. Jones, and K. Knight. 2013. Parsing graphs with

hyperedge replacement grammars. In Proceedings
of the 51st Annual Meeting of the Association for
Computational Linguistics.

D. Chiang. 2007. Hierarchical phrase-based transla-
tion. Computational Linguistics, 33(2):201–228.

H. Comon, M. Dauchet, R. Gilleron, F. Jacquemard,
D. Lugiez, S. Tison, M. Tommasi, and C. Löd-
ing. 2007. Tree Automata Techniques and Ap-
plications. published online - http://tata.
gforge.inria.fr/.

N. Engonopoulos and A. Koller. 2014. Generating ef-
fective referring expressions using charts. In Pro-
ceedings of the INLG and SIGDIAL 2014.

M. Galley, M. Hopkins, K. Knight, and D. Marcu.
2004. What’s in a translation rule? In HLT-NAACL
2004: Main Proceedings.

J. Graehl, K. Knight, and J. May. 2008. Training tree
transducers. Computational Linguistics, 34(3):391–
427.

J. Groschwitz, A. Koller, and C. Teichmann. 2015.
Graph parsing with s-graph grammars. In Proceed-
ings of the 53rd Annual Meeting of the Association
for Computational Linguistics and the 7th Interna-
tional Joint Conference on Natural Language Pro-
cessing.

J. Groschwitz, A. Koller, and M. Johnson. 2016. Effi-
cient techniques for parsing with tree automata. In
Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics.

J. E. Hopcroft and J. Ullman. 1979. Introduction
to Automata Theory, Languages, and Computation.
Addison-Wesley, Reading, Massachusetts.

L. Huang and D. Chiang. 2005. Better k-best parsing.
In Proceedings of the Ninth International Workshop
on Parsing Technology.

A. K. Joshi, L. S. Levy, and M. Takahashi. 1975. Tree
adjunct grammars. Journal of Computer and System
Sciences, 10(1):136–163.

A. Koller and M. Kuhlmann. 2011. A generalized
view on parsing and translation. In Proceedings of
the 12th International Conference on Parsing Tech-
nologies.

A. Koller and M. Kuhlmann. 2012. Decompos-
ing tag algorithms using simple algebraizations. In
Proceedings of the 11th International Workshop on
Tree Adjoining Grammars and Related Formalisms
(TAG+11).

M. Lewis, K. Lee, and L. Zettlemoyer. 2016. LSTM
CCG parsing. In Proceedings of NAACL-HLT.

K. Sima’an, R. Bod, S. Krauwer, and R. Scha. 1994.
Efficient disambiguation by means of stochastic tree
substitution grammars. In Proceedings of Interna-
tional Conference on New Methods in Language
Processing.

32


