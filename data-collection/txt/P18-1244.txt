















































A Purely End-to-End System for Multi-speaker Speech Recognition


Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 2620–2630
Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics

2620

A Purely End-to-end System for Multi-speaker Speech Recognition

Hiroshi Seki1,2∗, Takaaki Hori1, Shinji Watanabe3, Jonathan Le Roux1, John R. Hershey1
1Mitsubishi Electric Research Laboratories (MERL)

2Toyohashi University of Technology
3Johns Hopkins University

Abstract

Recently, there has been growing inter-
est in multi-speaker speech recognition,
where the utterances of multiple speak-
ers are recognized from their mixture.
Promising techniques have been proposed
for this task, but earlier works have re-
quired additional training data such as
isolated source signals or senone align-
ments for effective learning. In this paper,
we propose a new sequence-to-sequence
framework to directly decode multiple la-
bel sequences from a single speech se-
quence by unifying source separation and
speech recognition functions in an end-to-
end manner. We further propose a new ob-
jective function to improve the contrast be-
tween the hidden vectors to avoid generat-
ing similar hypotheses. Experimental re-
sults show that the model is directly able
to learn a mapping from a speech mix-
ture to multiple label sequences, achieving
83.1% relative improvement compared to
a model trained without the proposed ob-
jective. Interestingly, the results are com-
parable to those produced by previous end-
to-end works featuring explicit separation
and recognition modules.

1 Introduction

Conventional automatic speech recognition (ASR)
systems recognize a single utterance given a
speech signal, in a one-to-one transformation.
However, restricting the use of ASR systems to sit-
uations with only a single speaker limits their ap-
plicability. Recently, there has been growing inter-

∗This work was done while H. Seki, Ph.D. candidate at
Toyohashi University of Technology, Japan, was an intern at
MERL.

est in single-channel multi-speaker speech recog-
nition, which aims at generating multiple tran-
scriptions from a single-channel mixture of mul-
tiple speakers’ speech (Cooke et al., 2009).

To achieve this goal, several previous works
have considered a two-step procedure in which the
mixed speech is first separated, and recognition
is then performed on each separated speech sig-
nal (Hershey et al., 2016; Isik et al., 2016; Yu et al.,
2017; Chen et al., 2017). Dramatic advances have
recently been made in speech separation, via the
deep clustering framework (Hershey et al., 2016;
Isik et al., 2016), hereafter referred to as DPCL.
DPCL trains a deep neural network to map each
time-frequency (T-F) unit to a high-dimensional
embedding vector such that the embeddings for
the T-F unit pairs dominated by the same speaker
are close to each other, while those for pairs dom-
inated by different speakers are farther away. The
speaker assignment of each T-F unit can thus be
inferred from the embeddings by simple cluster-
ing algorithms, to produce masks that isolate each
speaker. The original method using k-means clus-
tering (Hershey et al., 2016) was extended to al-
low end-to-end training by unfolding the cluster-
ing steps using a permutation-free mask inference
objective (Isik et al., 2016). An alternative ap-
proach is to perform direct mask inference using
the permutation-free objective function with net-
works that directly estimate the labels for a fixed
number of sources. Direct mask inference was first
used in Hershey et al. (2016) as a baseline method,
but without showing good performance. This ap-
proach was revisited in Yu et al. (2017) and Kol-
baek et al. (2017) under the name permutation-
invariant training (PIT). Combination of such
single-channel speaker-independent multi-speaker
speech separation systems with ASR was first con-
sidered in Isik et al. (2016) using a conventional
Gaussian Mixture Model/Hidden Markov Model



2621

(GMM/HMM) system. Combination with an end-
to-end ASR system was recently proposed in (Set-
tle et al., 2018). Both these approaches either
trained or pre-trained the source separation and
ASR networks separately, making use of mixtures
and their corresponding isolated clean source ref-
erences. While the latter approach could in princi-
ple be trained without references for the isolated
speech signals, the authors found it difficult to
train from scratch in that case. This ability can
nonetheless be used when adapting a pre-trained
network to new data without such references.

In contrast with this two-stage approach, Qian
et al. (2017) considered direct optimization of a
deep-learning-based ASR recognizer without an
explicit separation module. The network is opti-
mized based on a permutation-free objective de-
fined using the cross-entropy between the system’s
hypotheses and reference labels. The best per-
mutation between hypotheses and reference labels
in terms of cross-entropy is selected and used for
backpropagation. However, this method still re-
quires reference labels in the form of senone align-
ments, which have to be obtained on the clean iso-
lated sources using a single-speaker ASR system.
As a result, this approach still requires the original
separated sources. As a general caveat, generation
of multiple hypotheses in such a system requires
the number of speakers handled by the neural net-
work architecture to be determined before train-
ing. However, Qian et al. (2017) reported that the
recognition of two-speaker mixtures using a model
trained for three-speaker mixtures showed almost
identical performance with that of a model trained
on two-speaker mixtures. Therefore, it may be
possible in practice to determine an upper bound
on the number of speakers.

Chen et al. (2018) proposed a progressive
training procedure for a hybrid system with ex-
plicit separation motivated by curriculum learn-
ing. They also proposed self-transfer learning
and multi-output sequence discriminative training
methods for fully exploiting pairwise speech and
preventing competing hypotheses, respectively.

In this paper, we propose to circumvent the
need for the corresponding isolated speech sources
when training on a set of mixtures, by using an
end-to-end multi-speaker speech recognition with-
out an explicit speech separation stage. In sep-
aration based systems, the spectrogram is seg-
mented into complementary regions according to

sources, which generally ensures that different ut-
terances are recognized for each speaker. Without
this complementarity constraint, our direct multi-
speaker recognition system could be susceptible to
redundant recognition of the same utterance. In
order to prevent degenerate solutions in which the
generated hypotheses are similar to each other, we
introduce a new objective function that enhances
contrast between the network’s representations of
each source. We also propose a training procedure
to provide permutation invariance with low com-
putational cost, by taking advantage of the joint
CTC/attention-based encoder-decoder network ar-
chitecture proposed in (Hori et al., 2017a). Ex-
perimental results show that the proposed model
is able to directly convert an input speech mix-
ture into multiple label sequences without requir-
ing any explicit intermediate representations. In
particular no frame-level training labels, such as
phonetic alignments or corresponding unmixed
speech, are required. We evaluate our model on
spontaneous English and Japanese tasks and ob-
tain comparable results to the DPCL based method
with explicit separation (Settle et al., 2018).

2 Single-speaker end-to-end ASR

2.1 Attention-based encoder-decoder
network

An attention-based encoder-decoder net-
work (Bahdanau et al., 2016) predicts a target
label sequence Y = (y1, . . . , yN ) without requir-
ing intermediate representation from a T -frame
sequence of D-dimensional input feature vectors,
O = (ot ∈ RD|t = 1, . . . , T ), and the past label
history. The probability of the n-th label yn is
computed by conditioning on the past history
y1:n−1:

patt(Y |O) =
N∏
n=1

patt(yn|O, y1:n−1). (1)

The model is composed of two main sub-modules,
an encoder network and a decoder network. The
encoder network transforms the input feature vec-
tor sequence into a high-level representation H =
(hl ∈ RC |l = 1, . . . , L). The decoder net-
work emits labels based on the label history y
and a context vector c calculated using an atten-
tion mechanism which weights and sums the C-
dimensional sequence of representationH with at-
tention weight a. A hidden state e of the decoder is



2622

updated based on the previous state, the previous
context vector, and the emitted label. This mecha-
nism is summarized as follows:

H = Encoder(O), (2)

yn ∼ Decoder(cn, yn−1), (3)
cn, an = Attention(an−1, en, H), (4)

en = Update(en−1, cn−1, yn−1). (5)

At inference time, the previously emitted labels
are used. At training time, they are replaced by
the reference label sequence R = (r1, . . . , rN ) in
a teacher-forcing fashion, leading to conditional
probability patt(YR|O), where YR denotes the out-
put label sequence variable in this condition. The
detailed definitions of Attention and Update are
described in Section A of the supplementary mate-
rial. The encoder and decoder networks are trained
to maximize the conditional probability of the ref-
erence label sequence R using backpropagation:

Latt = Lossatt(YR, R) , − log patt(YR = R|O),
(6)

where Lossatt is the cross-entropy loss function.

2.2 Joint CTC/attention-based
encoder-decoder network

The joint CTC/attention approach (Kim et al.,
2017; Hori et al., 2017a), uses the connection-
ist temporal classification (CTC) objective func-
tion (Graves et al., 2006) as an auxiliary task to
train the network. CTC formulates the condi-
tional probability by introducing a framewise la-
bel sequence Z consisting of a label set U and an
additional blank symbol defined as Z = {zl ∈
U ∪ {’blank’}|l = 1, · · · , L}:

pctc(Y |O) =
∑
Z

L∏
l=1

p(zl|zl−1, Y )p(zl|O), (7)

where p(zl|zl−1, Y ) represents monotonic align-
ment constraints in CTC and p(zl|O) is the frame-
level label probability computed by

p(zl|O) = Softmax(Linear(hl)), (8)

where hl is the hidden representation generated
by an encoder network, here taken to be the en-
coder of the attention-based encoder-decoder net-
work defined in Eq. (2), and Linear(·) is the final
linear layer of the CTC to match the number of

labels. Unlike the attention model, the forward-
backward algorithm of CTC enforces monotonic
alignment between the input speech and the out-
put label sequences during training and decod-
ing. We adopt the joint CTC/attention-based
encoder-decoder network as the monotonic align-
ment helps the separation and extraction of high-
level representation. The CTC loss is calculated
as:

Lctc = Lossctc(Y,R) , − log pctc(Y = R|O).
(9)

The CTC loss and the attention-based encoder-
decoder loss are combined with an interpolation
weight λ ∈ [0, 1]:

Lmtl = λLctc + (1− λ)Latt. (10)

Both CTC and encoder-decoder networks are
also used in the inference step. The final hypothe-
sis is a sequence that maximizes a weighted condi-
tional probability of CTC in Eq. ( 7) and attention-
based encoder decoder network in Eq. (1):

Ŷ = arg max
Y

{
γ log pctc(Y |O)

+ (1− γ) log patt(Y |O)
}
, (11)

where γ ∈ [0, 1] is an interpolation weight.

3 Multi-speaker end-to-end ASR

3.1 Permutation-free training
In situations where the correspondence between
the outputs of an algorithm and the references is
an arbitrary permutation, neural network training
faces a permutation problem. This problem was
first addressed by deep clustering (Hershey et al.,
2016), which circumvented it in the case of source
separation by comparing the relationships between
pairs of network outputs to those between pairs of
labels. As a baseline for deep clustering, Hershey
et al. (2016) also proposed another approach to ad-
dress the permutation problem, based on an ob-
jective which considers all permutations of refer-
ences when computing the error with the network
estimates. This objective was later used in Isik et
al. (2016) and Yu et al. (2017). In the latter, it was
referred to as permutation-invariant training.

This permutation-free training scheme extends
the usual one-to-one mapping of outputs and la-
bels for backpropagation to one-to-many by se-
lecting the proper permutation of hypotheses and



2623

references, thus allowing the network to generate
multiple independent hypotheses from a single-
channel speech mixture. When a speech mixture
contains speech uttered by S speakers simulta-
neously, the network generates S label sequence
variables Y s = (ys1, . . . , y

s
Ns

) with Ns labels from
the T -frame sequence ofD-dimensional input fea-
ture vectors, O = (ot ∈ RD|t = 1, . . . , T ):

Y s ∼ gs(O), s = 1, . . . , S, (12)

where the transformations gs are implemented as
neural networks which typically share some com-
ponents with each other. In the training stage, all
possible permutations of the S sequences Rs =
(rs1, . . . , r

s
N ′s

) of N ′s reference labels are consid-
ered (considering permutations on the hypotheses
would be equivalent), and the one leading to min-
imum loss is adopted for backpropagation. Let P
denote the set of permutations on {1, . . . , S}. The
final loss L is defined as

L = min
π∈P

S∑
s=1

Loss(Y s, Rπ(s)), (13)

where π(s) is the s-th element of a permutation
π. For example, for two speakers, P includes two
permutations (1, 2) and (2, 1), and the loss is de-
fined as:

L = min(Loss(Y 1, R1) + Loss(Y 2, R2),
Loss(Y 1, R2) + Loss(Y 2, R1)). (14)

Figure 1 shows an overview of the proposed
end-to-end multi-speaker ASR system. In the fol-
lowing Section 3.2, we describe an extension of
encoder network for the generation of multiple
hidden representations. We further introduce a
permutation assignment mechanism for reducing
the computation cost in Section 3.3, and an ad-
ditional loss function LKL for promoting the dif-
ference between hidden representations in Sec-
tion 3.4.

3.2 End-to-end permutation-free training

To make the network output multiple hypotheses,
we consider a stacked architecture that combines
both shared and unshared (or specific) neural net-
work modules. The particular architecture we con-
sider in this paper splits the encoder network into
three stages: the first stage, also referred to as
mixture encoder, processes the input mixture and

Figure 1: End-to-end multi-speaker speech recog-
nition. We propose to use the permutation-free
training for CTC and attention loss functions
Lossctc and Lossatt, respectively.

outputs an intermediate feature sequence H; that
sequence is then processed by S independent en-
coder sub-networks which do not share param-
eters, also referred to as speaker-differentiating
(SD) encoders, leading to S feature sequencesHs;
at the last stage, each feature sequence Hs is inde-
pendently processed by the same network, also re-
ferred to as recognition encoder, leading to S final
high-level representations Gs.

Let u ∈ {1 . . . , S} denote an output index (cor-
responding to the transcription of the speech by
one of the speakers), and v ∈ {1 . . . , S} de-
note a reference index. Denoting by EncoderMix
the mixture encoder, EncoderuSD the u-th speaker-
differentiating encoder, and EncoderRec the
recognition encoder, an input sequence O corre-
sponding to an input mixture can be processed by
the encoder network as follows:

H = EncoderMix(O), (15)

Hu = EncoderuSD(H), (16)

Gu = EncoderRec(H
u). (17)

The motivation for designing such an architecture
can be explained as follows, following analogies
with the architectures in (Isik et al., 2016) and
(Settle et al., 2018) where separation and recog-



2624

nition are performed explicitly in separate steps:
the first stage in Eq. (15) corresponds to a speech
separation module which creates embedding vec-
tors that can be used to distinguish between the
multiple sources; the speaker-differentiating sec-
ond stage in Eq. (16) uses the first stage’s output
to disentangle each speaker’s speech content from
the mixture, and prepare it for recognition; the fi-
nal stage in Eq. (17) corresponds to an acoustic
model that encodes the single-speaker speech for
final decoding.

The decoder network computes the conditional
probabilities for each speaker from the S outputs
of the encoder network. In general, the decoder
network uses the reference label R as a history to
generate the attention weights during training, in
a teacher-forcing fashion. However, in the above
permutation-free training scheme, the reference
label to be attributed to a particular output is not
determined until the loss function is computed, so
we here need to run the attention decoder for all
reference labels. We thus need to consider the con-
ditional probability of the decoder output variable
Y u,v for each output Gu of the encoder network
under the assumption that the reference label for
that output is Rv:

patt(Y
u,v|O) =

∏
n

patt(y
u,v
n |O, y

u,v
1:n−1), (18)

cu,vn , a
u,v
n = Attention(a

u,v
n−1, e

u,v
n , G

u), (19)

eu,vn = Update(e
u,v
n−1, c

u,v
n−1, r

v
n−1), (20)

yu,vn ∼ Decoder(cu,vn , rvn−1). (21)

The final loss is then calculated by considering all
permutations of the reference labels as follows:

Latt = min
π∈P

∑
s

Lossatt(Y
s,π(s), Rπ(s)). (22)

3.3 Reduction of permutation cost
In order to reduce the computational cost, we fixed
the permutation of the reference labels based on
the minimization of the CTC loss alone, and used
the same permutation for the attention mechanism
as well. This is an advantage of using a joint
CTC/attention based end-to-end speech recogni-
tion. Permutation is performed only for the CTC
loss by assuming synchronous output where the
permutation is decided by the output of CTC:

π̂ = arg min
π∈P

∑
s

Lossctc(Y
s, Rπ(s)), (23)

where Y u is the output sequence variable corre-
sponding to encoder output Gu. Attention-based
decoding is then performed on the same hidden
representations Gu, using teacher forcing with the
labels determined by the permutation π̂ that mini-
mizes the CTC loss:

patt(Y
u,π̂(u)|O) =

∏
n

patt(y
u,π̂(u)
n |O, y

u,π̂(u)
1:n−1 ),

cu,π̂(u)n , a
u,π̂(u)
n =Attention(a

u,π̂(u)
n−1 , e

u,π̂(u)
n , G

u),

eu,π̂(u)n = Update(e
u,π̂(u)
n−1 , c

u,π̂(u)
n−1 , r

π̂(u)
n−1 ),

yu,π̂(u)n ∼ Decoder(cu,π̂(u)n , r
π̂(u)
n−1 ).

This corresponds to the “permutation assignment”
in Fig. 1. In contrast with Eq. (18), we only need
to run the attention-based decoding once for each
output Gu of the encoder network. The final loss
is defined as the sum of two objective functions
with interpolation λ:

Lmtl = λLctc + (1− λ)Latt, (24)

Lctc =
∑
s

Lossctc(Y
s, Rπ̂(s)), (25)

Latt =
∑
s

Lossatt(Y
s,π̂(s), Rπ̂(s)). (26)

At inference time, because both CTC and
attention-based decoding are performed on the
same encoder output Gu and should thus pertain
to the same speaker, their scores can be incorpo-
rated as follows:

Ŷ u = arg max
Y u

{
γ log pctc(Y

u|Gu)

+ (1− γ) log patt(Y u|Gu)
}
, (27)

where pctc(Y u|Gu) and patt(Y u|Gu) are obtained
with the same encoder output Gu.

3.4 Promoting separation of hidden vectors

A single decoder network is used to output mul-
tiple label sequences by independently decoding
the multiple hidden vectors generated by the en-
coder network. In order for the decoder to gener-
ate multiple different label sequences the encoder
needs to generate sufficiently differentiated hidden
vector sequences for each speaker. We propose to
encourage this contrast among hidden vectors by
introducing in the objective function a new term
based on the negative symmetric Kullback-Leibler



2625

(KL) divergence. In the particular case of two-
speaker mixtures, we consider the following ad-
ditional loss function:

LKL = −η
∑
l

{
KL(Ḡ1(l) || Ḡ2(l))

+ KL(Ḡ2(l) || Ḡ1(l))
}
, (28)

where η is a small constant value, and
Ḡu = (softmax(Gu(l)) | l = 1, . . . , L) is ob-
tained from the hidden vector sequence Gu at the
output of the recognition encoder EncoderRec as
in Fig. 1 by applying an additional frame-wise
softmax operation in order to obtain a quantity
amenable to a probability distribution.

3.5 Split of hidden vector for multiple
hypotheses

Since the network maps acoustic features to la-
bel sequences directly, we consider various archi-
tectures to perform implicit separation and recog-
nition effectively. As a baseline system, we use
the concatenation of a VGG-motivated CNN net-
work (Simonyan and Zisserman, 2014) (referred
to as VGG) and a bi-directional long short-term
memory (BLSTM) network as the encoder net-
work. For the splitting point in the hidden vector
computation, we consider two architectural varia-
tions as follows:

• Split by BLSTM: The hidden vector is split at
the level of the BLSTM network. 1) the VGG
network generates a single hidden vector H; 2)
H is fed into S independent BLSTMs whose
parameters are not shared with each other;
3) the output of each independent BLSTM
Hu, u=1, . . . , S, is further separately fed into a
unique BLSTM, the same for all outputs. Each
step corresponds to Eqs. (15), (16), and (17).

• Split by VGG: The hidden vector is split at the
level of the VGG network. The number of filters
at the last convolution layer is multiplied by the
number of mixtures S in order to split the out-
put into S hidden vectors (as in Eq. (16)). The
layers prior to the last VGG layer correspond to
the network in Eq. (15), while the subsequent
BLSTM layers implement the network in (17).

4 Experiments

4.1 Experimental setup
We used English and Japanese speech corpora,
WSJ (Wall street journal) (Consortium, 1994;

Table 1: Duration (hours) of unmixed and mixed
corpora. The mixed corpora are generated by Al-
gorithm 1 in Section B of the supplementary ma-
terial, using the training, development, and evalu-
ation set respectively.

TRAIN DEV. EVAL
WSJ (UNMIXED) 81.5 1.1 0.7
WSJ (MIXED) 98.5 1.3 0.8
CSJ (UNMIXED) 583.8 6.6 5.2
CSJ (MIXED) 826.9 9.1 7.5

Garofalo et al., 2007) and CSJ (Corpus of spon-
taneous Japanese) (Maekawa, 2003). To show the
effectiveness of the proposed models, we gener-
ated mixed speech signals from these corpora to
simulate single-channel overlapped multi-speaker
recording, and evaluated the recognition perfor-
mance using the mixed speech data. For WSJ, we
used WSJ1 SI284 for training, Dev93 for develop-
ment, and Eval92 for evaluation. For CSJ, we fol-
lowed the Kaldi recipe (Moriya et al., 2015) and
used the full set of academic and simulated pre-
sentations for training, and the standard test sets 1,
2, and 3 for evaluation.

We created new corpora by mixing two utter-
ances with different speakers sampled from exist-
ing corpora. The detailed algorithm is presented
in Section B of the supplementary material. The
sampled pairs of two utterances are mixed at vari-
ous signal-to-noise ratios (SNR) between 0 dB and
5 dB with a random starting point for the overlap.
Duration of original unmixed and generated mixed
corpora are summarized in Table 1.

4.1.1 Network architecture
As input feature, we used 80-dimensional log Mel
filterbank coefficients with pitch features and their
delta and delta delta features (83 × 3 = 249-
dimension) extracted using Kaldi tools (Povey
et al., 2011). The input feature is normalized to
zero mean and unit variance. As a baseline sys-
tem, we used a stack of a 6-layer VGG network
and a 7-layer BLSTM as the encoder network.
Each BLSTM layer has 320 cells in each direc-
tion, and is followed by a linear projection layer
with 320 units to combine the forward and back-
ward LSTM outputs. The decoder network has
an 1-layer LSTM with 320 cells. As described in
Section 3.5, we adopted two types of encoder ar-
chitectures for multi-speaker speech recognition.
The network architectures are summarized in Ta-
ble 2. The split-by-VGG network had speaker
differentiating encoders with a convolution layer



2626

Table 2: Network architectures for the en-
coder network. The number of layers is indi-
cated in parentheses. EncoderMix, EncoderuSD,
and EncoderRec correspond to Eqs. (15), (16),
and (17).

SPLIT BY EncoderMix EncoderuSD EncoderRec
NO VGG (6) — BLSTM (7)
VGG VGG (4) VGG (2) BLSTM (7)
BLSTM VGG (6) BLSTM (2) BLSTM (5)

(and the following maxpooling layer). The split-
by-BLSTM network had speaker differentiating
encoders with two BLSTM layers. The architec-
tures were adjusted to have the same number of
layers. We used characters as output labels. The
number of characters for WSJ was set to 49 includ-
ing alphabets and special tokens (e.g., characters
for space and unknown). The number of charac-
ters for CSJ was set to 3,315 including Japanese
Kanji/Hiragana/Katakana characters and special
tokens.

4.1.2 Optimization
The network was initialized randomly from uni-
form distribution in the range -0.1 to 0.1. We
used the AdaDelta algorithm (Zeiler, 2012) with
gradient clipping (Pascanu et al., 2013) for opti-
mization. We initialized the AdaDelta hyperpa-
rameters as ρ = 0.95 and � = 1−8. � is de-
cayed by half when the loss on the development set
degrades. The networks were implemented with
Chainer (Tokui et al., 2015) and ChainerMN (Ak-
iba et al., 2017). The optimization of the networks
was done by synchronous data parallelism with 4
GPUs for WSJ and 8 GPUs for CSJ.

The networks were first trained on single-
speaker speech, and then retrained with mixed
speech. When training on unmixed speech, only
one side of the network only (with a single speaker
differentiating encoder) is optimized to output the
label sequence of the single speaker. Note that
only character labels are used, and there is no
need for clean source reference corresponding to
the mixed speech. When moving to mixed speech,
the other speaker-differentiating encoders are ini-
tialized using the already trained one by copying
the parameters with random perturbation, w′ =
w × (1 + Uniform(−0.1, 0.1)) for each param-
eter w. The interpolation value λ for the multiple
objectives in Eqs. (10) and (24) was set to 0.1 for
WSJ and to 0.5 for CSJ. Lastly, the model is re-
trained with the additional negative KL divergence
loss in Eq. (28) with η = 0.1.

Table 3: Evaluation of unmixed speech without
multi-speaker training.

TASK AVG.
WSJ 2.6
CSJ 7.8

4.1.3 Decoding
In the inference stage, we combined a pre-
trained RNNLM (recurrent neural network lan-
guage model) in parallel with the CTC and de-
coder network. Their label probabilities were lin-
early combined in the log domain during beam
search to find the most likely hypothesis. For the
WSJ task, we used both character and word level
RNNLMs (Hori et al., 2017b), where the charac-
ter model had a 1-layer LSTM with 800 cells and
an output layer for 49 characters. The word model
had a 1-layer LSTM with 1000 cells and an output
layer for 20,000 words, i.e., the vocabulary size
was 20,000. Both models were trained with the
WSJ text corpus. For the CSJ task, we used a char-
acter level RNNLM (Hori et al., 2017c), which
had a 1-layer LSTM with 1000 cells and an out-
put layer for 3,315 characters. The model parame-
ters were trained with the transcript of the training
set in CSJ. We added language model probabilities
with an interpolation factor of 0.6 for character-
level RNNLM and 1.2 for word-level RNNLM.

The beam width for decoding was set to 20 in
all the experiments. Interpolation γ in Eqs. (11)
and (27) was set to 0.4 for WSJ and 0.5 for CSJ.

4.2 Results
4.2.1 Evaluation of unmixed speech
First, we examined the performance of the base-
line joint CTC/attention-based encoder-decoder
network with the original unmixed speech data.
Table 3 shows the character error rates (CERs),
where the baseline model showed 2.6% on WSJ
and 7.8% on CSJ. Since the model was trained and
evaluated with unmixed speech data, these CERs
are considered lower bounds for the CERs in the
succeeding experiments with mixed speech data.

4.2.2 Evaluation of mixed speech
Table 4 shows the CERs of the generated mixed
speech from the WSJ corpus. The first col-
umn indicates the position of split as mentioned
in Section 3.5. The second, third and forth
columns indicate CERs of the high energy speaker
(HIGH E. SPK.), the low energy speaker (LOW
E. SPK.), and the average (AVG.), respectively.
The baseline model has very high CERs because



2627

Table 4: CER (%) of mixed speech for WSJ.
SPLIT HIGH E. SPK. LOW E. SPK. AVG.
NO (BASELINE) 86.4 79.5 83.0
VGG 17.4 15.6 16.5
BLSTM 14.6 13.3 14.0
+ KL LOSS 14.0 13.3 13.7

Table 5: CER (%) of mixed speech for CSJ.
SPLIT HIGH E. SPK. LOW E. SPK. AVG.
NO (BASELINE) 93.3 92.1 92.7
BLSTM 11.0 18.8 14.9

it was trained as a single-speaker speech recog-
nizer without permutation-free training, and it can
only output one hypothesis for each mixed speech.
In this case, the CERs were calculated by du-
plicating the generated hypothesis and comparing
the duplicated hypotheses with the correspond-
ing references. The proposed models, i.e., split-
by-VGG and split-by-BLSTM networks, obtained
significantly lower CERs than the baseline CERs,
the split-by-BLSTM model in particular achieving
14.0% CER. This is an 83.1% relative reduction
from the baseline model. The CER was further re-
duced to 13.7% by retraining the split-by-BLSTM
model with the negative KL loss, a 2.1% rela-
tive reduction from the network without retrain-
ing. This result implies that the proposed negative
KL loss provides better separation by actively im-
proving the contrast between the hidden vectors
of each speaker. Examples of recognition results
are shown in Section C of the supplementary ma-
terial. Finally, we profiled the computation time
for the permutations based on the decoder network
and on CTC. Permutation based on CTC was 16.3
times faster than that based on the decoder net-
work, in terms of the time required to determine
the best match permutation given the encoder net-
work’s output in Eq. (17).

Table 5 shows the CERs for the mixed speech
from the CSJ corpus. Similarly to the WSJ ex-
periments, our proposed model significantly re-
duced the CER from the baseline, where the aver-
age CER was 14.9% and the reduction ratio from
the baseline was 83.9%.

4.2.3 Visualization of hidden vectors

We show a visualization of the encoder networks
outputs in Fig. 2 to illustrate the effect of the neg-
ative KL loss function. Principal component anal-
ysis (PCA) was applied to the hidden vectors on
the vertical axis. Figures 2(a) and 2(b) show the
hidden vectors generated by the split-by-BLSTM
model without the negative KL divergence loss

for an example mixture of two speakers. We can
observe different activation patterns showing that
the hidden vectors were successfully separated to
the individual utterances in the mixed speech, al-
though some activity from one speaker can be seen
as leaking into the other. Figures 2(c) and 2(d)
show the hidden vectors generated after retrain-
ing with the negative KL divergence loss. We
can more clearly observe the different patterns and
boundaries of activation and deactivation of hid-
den vectors. The negative KL loss appears to reg-
ularize the separation process, and even seems to
help in finding the end-points of the speech.

4.2.4 Comparison with earlier work

We first compared the recognition performance
with a hybrid (non end-to-end) system including
DPCL-based speech separation and a Kaldi-based
ASR system. It was evaluated under the same
evaluation data and metric as in (Isik et al., 2016)
based on the WSJ corpus. However, there are dif-
ferences in the size of training data and the op-
tions in decoding step. Therefore, it is not a fully
matched condition. Results are shown in Table 6.
The word error rate (WER) reported in (Isik et al.,
2016) is 30.8%, which was obtained with jointly
trained DPCL and second-stage speech enhance-
ment networks. The proposed end-to-end ASR
gives an 8.4% relative reduction in WER even
though our model does not require any explicit
frame-level labels such as phonetic alignment, or
clean signal reference, and does not use a phonetic
lexicon for training. Although this is an unfair
comparison, our purely end-to-end system outper-
formed a hybrid system for multi-speaker speech
recognition.

Next, we compared our method with an end-
to-end explicit separation and recognition net-
work (Settle et al., 2018). We retrained our model
previously trained on our WSJ-based corpus using
the training data generated by Settle et al. (2018),
because the direct optimization from scratch on
their data caused poor recognition performance
due to data size. Other experimental conditions
are shared with the earlier work. Interestingly,
our method showed comparable performance to
the end-to-end explicit separation and recognition
network, without having to pre-train using clean
signal training references. It remains to be seen if
this parity of performance holds in other tasks and
conditions.



2628

Figure 2: Visualization of the two hidden vector sequences at the output of the split-by-BLSTM encoder
on a two-speaker mixture. (a,b): Generated by the model without the negative KL loss. (c,d): Generated
by the model with the negative KL loss.

Table 6: Comparison with conventional ap-
proaches

METHOD WER (%)
DPCL + ASR (ISIK ET AL., 2016) 30.8
Proposed end-to-end ASR 28.2
METHOD CER (%)
END-TO-END DPCL + ASR (CHAR LM)

(SETTLE ET AL., 2018) 13.2
Proposed end-to-end ASR (char LM) 14.0

5 Related work

Several previous works have considered an ex-
plicit two-step procedure (Hershey et al., 2016;
Isik et al., 2016; Yu et al., 2017; Chen et al., 2017,
2018). In contrast with our work which uses a sin-
gle objective function for ASR, they introduced an
objective function to guide the separation of mixed
speech.

Qian et al. (2017) trained a multi-speaker
speech recognizer using permutation-free training
without explicit objective function for separation.
In contrast with our work which uses an end-to-
end architecture, their objective function relies on
a senone posterior probability obtained by align-
ing unmixed speech and text using a model trained
as a recognizer for single-speaker speech. Com-
pared with (Qian et al., 2017), our method di-
rectly maps a speech mixture to multiple character
sequences and eliminates the need for the corre-
sponding isolated speech sources for training.

6 Conclusions

In this paper, we proposed an end-to-end multi-
speaker speech recognizer based on permutation-

free training and a new objective function pro-
moting the separation of hidden vectors in order
to generate multiple hypotheses. In an encoder-
decoder network framework, teacher forcing
at the decoder network under multiple refer-
ences increases computational cost if implemented
naively. We avoided this problem by employing
a joint CTC/attention-based encoder-decoder net-
work.

Experimental results showed that the model is
able to directly convert an input speech mixture
into multiple label sequences under the end-to-end
framework without the need for any explicit inter-
mediate representation including phonetic align-
ment information or pairwise unmixed speech. We
also compared our model with a method based
on explicit separation using deep clustering, and
showed comparable result. Future work includes
data collection and evaluation in a real world
scenario since the data used in our experiments
are simulated mixed speech, which is already ex-
tremely challenging but still leaves some acous-
tic aspects, such as Lombard effects and real room
impulse responses, that need to be alleviated for
further performance improvement. In addition,
further study is required in terms of increasing
the number of speakers that can be simultane-
ously recognized, and further comparison with the
separation-based approach.



2629

References
Takuya Akiba, Keisuke Fukuda, and Shuji Suzuki.

2017. ChainerMN: Scalable Distributed Deep
Learning Framework. In Proceedings of Work-
shop on ML Systems in The Thirty-first Annual Con-
ference on Neural Information Processing Systems
(NIPS).

Dzmitry Bahdanau, Jan Chorowski, Dmitriy Serdyuk,
Philemon Brakel, and Yoshua Bengio. 2016. End-
to-end attention-based large vocabulary speech
recognition. In IEEE International Conference on
Acoustics, Speech and Signal Processing (ICASSP),
pages 4945–4949.

Zhehuai Chen, Jasha Droppo, Jinyu Li, and Wayne
Xiong. 2018. Progressive joint modeling in unsu-
pervised single-channel overlapped speech recogni-
tion. IEEE/ACM Transactions on Audio, Speech,
and Language Processing, 26(1):184–196.

Zhuo Chen, Yi Luo, and Nima Mesgarani. 2017. Deep
attractor network for single-microphone speaker
separation. In IEEE International Conference on
Acoustics, Speech and Signal Processing (ICASSP),
pages 246–250.

Jan K Chorowski, Dzmitry Bahdanau, Dmitriy
Serdyuk, Kyunghyun Cho, and Yoshua Bengio.
2015. Attention-based models for speech recogni-
tion. In Advances in Neural Information Processing
Systems (NIPS), pages 577–585.

Linguistic Data Consortium. 1994. CSR-II (wsj1)
complete. Linguistic Data Consortium, Philadel-
phia, LDC94S13A.

Martin Cooke, John R Hershey, and Steven J Ren-
nie. 2009. Monaural speech separation and recog-
nition challenge. Computer Speech and Language,
24(1):1–15.

John Garofalo, David Graff, Doug Paul, and David Pal-
lett. 2007. CSR-I (wsj0) complete. Linguistic Data
Consortium, Philadelphia, LDC93S6A.

Alex Graves, Santiago Fernández, Faustino Gomez,
and Jürgen Schmidhuber. 2006. Connectionist
temporal classification: labelling unsegmented se-
quence data with recurrent neural networks. In
International Conference on Machine learning
(ICML), pages 369–376.

John R Hershey, Zhuo Chen, Jonathan Le Roux, and
Shinji Watanabe. 2016. Deep clustering: Discrim-
inative embeddings for segmentation and separa-
tion. In IEEE International Conference on Acous-
tics, Speech and Signal Processing (ICASSP), pages
31–35.

Takaaki Hori, Shinji Watanabe, and John R Hershey.
2017a. Joint CTC/attention decoding for end-to-end
speech recognition. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (ACL): Human Language Technologies:
long papers.

Takaaki Hori, Shinji Watanabe, and John R Hershey.
2017b. Multi-level language modeling and decod-
ing for open vocabulary end-to-end speech recog-
nition. In IEEE Workshop on Automatic Speech
Recognition and Understanding (ASRU).

Takaaki Hori, Shinji Watanabe, Yu Zhang, and Chan
William. 2017c. Advances in joint CTC-Attention
based end-to-end speech recognition with a deep
CNN encoder and RNN-LM. In Interspeech, pages
949–953.

Yusuf Isik, Jonathan Le Roux, Zhuo Chen, Shinji
Watanabe, and John R. Hershey. 2016. Single-
channel multi-speaker separation using deep cluster-
ing. In Proc. Interspeech, pages 545–549.

Suyoun Kim, Takaaki Hori, and Shinji Watanabe.
2017. Joint CTC-attention based end-to-end speech
recognition using multi-task learning. In IEEE In-
ternational Conference on Acoustics, Speech and
Signal Processing (ICASSP), pages 4835–4839.

Morten Kolbæk, Dong Yu, Zheng-Hua Tan, and Jes-
per Jensen. 2017. Multitalker speech separation
with utterance-level permutation invariant training
of deep recurrent neural networks. IEEE/ACM
Transactions on Audio, Speech, and Language Pro-
cessing, 25(10):1901–1913.

Kikuo Maekawa. 2003. Corpus of Spontaneous
Japanese: Its design and evaluation. In ISCA &
IEEE Workshop on Spontaneous Speech Processing
and Recognition.

Takafumi Moriya, Takahiro Shinozaki, and Shinji
Watanabe. 2015. Kaldi recipe for Japanese sponta-
neous speech recognition and its evaluation. In Au-
tumn Meeting of ASJ, 3-Q-7.

Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio.
2013. On the difficulty of training recurrent neu-
ral networks. International Conference on Machine
Learning (ICML), pages 1310–1318.

Daniel Povey, Arnab Ghoshal, Gilles Boulianne, Lukas
Burget, Ondrej Glembek, Nagendra Goel, Mirko
Hannemann, Petr Motlicek, Yanmin Qian, Petr
Schwarz, Jan Silovsky, Georg Stemmer, and Karel
Vesely. 2011. The kaldi speech recognition toolkit.
In IEEE Workshop on Automatic Speech Recogni-
tion and Understanding (ASRU).

Yanmin Qian, Xuankai Chang, and Dong Yu. 2017.
Single-channel multi-talker speech recognition with
permutation invariant training. arXiv preprint
arXiv:1707.06527.

Shane Settle, Jonathan Le Roux, Takaaki Hori, Shinji
Watanabe, and John R. Hershey. 2018. End-to-end
multi-speaker speech recognition. In IEEE Interna-
tional Conference on Acoustics, Speech and Signal
Processing (ICASSP), pages 4819–4823.

Karen Simonyan and Andrew Zisserman. 2014. Very
deep convolutional networks for large-scale image
recognition. arXiv preprint arXiv:1409.1556.

http://learningsys.org/nips17/assets/papers/paper_25.pdf
http://learningsys.org/nips17/assets/papers/paper_25.pdf
https://doi.org/10.1109/TASLP.2017.2765834
https://doi.org/10.1109/TASLP.2017.2765834
https://doi.org/10.1109/TASLP.2017.2765834
https://doi.org/10.1109/ICASSP.2017.7952155
https://doi.org/10.1109/ICASSP.2017.7952155
https://doi.org/10.1109/ICASSP.2017.7952155
https://doi.org/10.1016/j.csl.2009.02.006
https://doi.org/10.1016/j.csl.2009.02.006
https://doi.org/10.1145/1143844.1143891
https://doi.org/10.1145/1143844.1143891
https://doi.org/10.1145/1143844.1143891
https://doi.org/10.1109/ICASSP.2016.7471631
https://doi.org/10.1109/ICASSP.2016.7471631
https://doi.org/10.1109/ICASSP.2016.7471631
https://doi.org/10.21437/Interspeech.2016-1176
https://doi.org/10.21437/Interspeech.2016-1176
https://doi.org/10.21437/Interspeech.2016-1176
https://doi.org/10.1109/ICASSP.2017.7953075
https://doi.org/10.1109/ICASSP.2017.7953075
https://doi.org/10.1109/TASLP.2017.2726762
https://doi.org/10.1109/TASLP.2017.2726762
https://doi.org/10.1109/TASLP.2017.2726762


2630

Seiya Tokui, Kenta Oono, Shohei Hido, and Justin
Clayton. 2015. Chainer: a next-generation open
source framework for deep learning. In Proceedings
of Workshop on Machine Learning Systems (Learn-
ingSys) in NIPS.

Dong Yu, Morten Kolbk, Zheng-Hua Tan, and Jesper
Jensen. 2017. Permutation invariant training of deep
models for speaker-independent multi-talker speech
separation. In IEEE International Conference on
Acoustics, Speech and Signal Processing (ICASSP),
pages 241–245.

Matthew D Zeiler. 2012. ADADELTA: an adap-
tive learning rate method. arXiv preprint
arXiv:1212.5701.

https://doi.org/10.1109/ICASSP.2017.7952154
https://doi.org/10.1109/ICASSP.2017.7952154
https://doi.org/10.1109/ICASSP.2017.7952154

