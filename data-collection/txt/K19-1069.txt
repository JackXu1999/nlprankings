



















































TripleNet: Triple Attention Network for Multi-Turn Response Selection in Retrieval-Based Chatbots


Proceedings of the 23rd Conference on Computational Natural Language Learning, pages 737–746
Hong Kong, China, November 3-4, 2019. c©2019 Association for Computational Linguistics

737

TripleNet: Triple Attention Network for Multi-Turn Response Selection in
Retrieval-based Chatbots

Wentao Ma†, Yiming Cui‡†, Nan Shao†,
Su He†, Wei-Nan Zhang‡, Ting Liu‡, Shijin Wang†§, Guoping Hu†

†State Key Laboratory of Cognitive Intelligence, iFLYTEK Research, China
‡Research Center for Social Computing and Information Retrieval (SCIR),

Harbin Institute of Technology, Harbin, China
§iFLYTEK AI Research (Hebei), Langfang, China

†§{wtma,ymcui,nanshao,suhe,sjwang3,gphu}@iflytek.com
‡{ymcui,wnzhang,tliu}@ir.hit.edu.cn

Abstract

We consider the importance of different ut-
terances in the context for selecting the
response usually depends on the current
query.1 In this paper, we propose the model
TripleNet to fully model the task with the
triple 〈context, query, response〉 instead of
〈context, response〉 in previous works. The
heart of TripeNet is a novel attention mecha-
nism named triple attention to model the rela-
tionships within the triple at four levels. The
new mechanism updates the representation for
each element based on the attention with the
other two concurrently and symmetrically. We
match the triple 〈C,Q,R〉 centered on the re-
sponse from char to context level for predic-
tion. Experimental results on two large-scale
multi-turn response selection datasets show
that the proposed model can significantly out-
perform the state-of-the-art methods. 2

1 Introduction

To establish a human-machine dialogue system
is one of the most challenging tasks in Artifi-
cial Intelligence (AI). Existing works on build-
ing dialogue systems are mainly divided into two
categories: retrieval-based method (Yan et al.,
2016; Zhou et al., 2016), and generation-based
method (Vinyals and Le, 2015). The retrieval-
based method retrieves multiple candidate re-
sponses from the massive repository and selects
the best one as the system’s response, while
the generation-based method uses the encoder-
decoder framework to generate the response,
which is similar to machine translation.

1In this paper, we define the last message which is waiting
for a response as the ‘query,’ the conversation history includ-
ing the query as ‘context,’ and each message in the context as
an ‘utterance.’

2 TripleNet source code is available at https://
github.com/wtma/TripleNet.

A: i downloaded angry ip scanner and now it doesn’t
work and i can’t uninstall it
B: you installed it via package or via some

:::::
binary

::::::
installer
A: i installed from ubuntu soft center
B: hm i do n’t know what package it is but it should let
you remove it the same way
A: ah makes sense then ... hm

:::
was

:
it
:
a
::::

deb
::
file

True Response: i think
:
it
::::
was

::::::
another

:::::
format mayge

sth starting with r
False Response: thanks i appreciate it try sudo apt-get
install libxine-extracodecs

Figure 1: A real example in the Ubuntu Corpus. The
upper part is the conversation between speaker A and
B. The speaker A want to uninstall the ip scanner and
the current query is about the format of the package, so
the true response is about the format, but the existing
conversation model can be easily misled by the high
frequency term ‘install’ as they deal with the query and
other utterances in the same way.

In this paper, we are focusing on the retrieval-
based method because it is more practical in ap-
plications. Selecting a response from a set of can-
didates is an important and challenging task for
the retrieval-based method. Many of the previous
approaches are based on Deep Neural Network
(DNN) to select the response for single-turn con-
versation (Lu and Li, 2013). We study multi-turn
response selection in this paper, which is rather
difficult because it not only requires identification
of the important information such as keywords,
phrases, and sentences, but also the latent depen-
dencies between the context, query, and candidate
response.

Previous works (Zhou et al., 2018; Wu et al.,
2017) show that representing the context at dif-
ferent granularities is vital for multi-turn response
selection. However, it is not enough for multi-turn
response selection. Figure 1 illustrates the prob-
lem with a real example in Ubuntu Corpus. As
demonstrated, the following two points should be

https://github.com/wtma/TripleNet
https://github.com/wtma/TripleNet


738

modeled to solve the problem: (1) the importance
of current query should be highlighted, because it
has great impact on the importance of different ut-
terances in the context. For example, the query in
the case is about the format of the file (‘deb file’),
which leads the last two utterances (including the
query) are more important than the previous ones.
If we only match the response with the context, the
model may be misled by the high frequency word
‘install’ and choose the false candidate. (2) the
information of different granularities is important,
which includes not only the word, utterance, and
context level, but also the char level. For exam-
ple, the different tenses (‘install,’ ‘installed’) and
the misspelling word (‘angry’) appear constantly
in the conversation. Similar to the role of ques-
tion for the task of machine reading comprehen-
sion (Seo et al., 2016; Cui et al., 2017; Chen et al.,
2019), the query in this task is also the key to se-
lecting the response. In this paper, we propose
a model named TripleNet to excavate the role of
query. The main contributions of our work are
listed as follows.

• we use a novel triple attention mechanism to
model the relationships within 〈C,Q,R〉 in-
stead of 〈C,R〉;

• we propose a hierarchical representation
module to fully model the conversation from
char to context level;

• The experimental results on Ubuntu and
Douban corpus show that TripleNet signifi-
cantly outperform the state-of-the-art result.

2 Related Works

Earlier works on building the conversation sys-
tems are generally based on rules or templates
(Walker et al., 2001), which are designed for
the specific domain and need much human ef-
fort to collect the rules and domain knowledge.
As the portability and coverage of such systems
are far from satisfaction, people pay more atten-
tion to the data-driven approaches for the open-
domain conversation system (Ritter et al., 2011;
Higashinaka et al., 2014). The main challenge for
open-domain conversation is to produce a corre-
sponding response based on the current context.
As mentioned previously, the retrieval-based and
generation-based methods are the mainstream ap-
proaches for conversational response generation.

In this paper, we focus on the task response selec-
tion which belongs to retrieval-based approach.

The early studies of response selection gener-
ally focus on the single-turn conversation, which
use only the current query to select the response
(Lu and Li, 2013; Ji et al., 2014; Wang et al.,
2015). Since it is hard to get the topic and inten-
tion of the conversation by single-turn, researchers
turn their attention to multi-turn conversation and
model the context instead of the current query to
predict the response. First, Lowe et al. (2015) re-
leased the Ubuntu Dialogue dataset and proposed
a neural model which matches the context and
response with corresponding representations via
RNNs and LSTMs. Kadlec et al. (2015) eval-
uate the performances of various models on the
dataset, such as LSTMs, Bi-LSTMs, and CNNs.
Later, Yan et al. (2016) concatenated utterances
with the reformulated query and various features
in a deep neural network. Baudiš et al. (2016) re-
garded the task as sentence pair scoring and imple-
mented an RNN-CNN neural network model with
attention. Zhou et al. (2016) proposed a multi-
view model with CNN and RNN, modeling the
context in both word and utterance view. Further,
Xu et al. (2017) proposed a deep neural network
to incorporate background knowledge for conver-
sation by LSTM with a specially designed recall
gate. Wu et al. (2017) proposed matching the con-
text and response by their word and phrase rep-
resentations, which had significant improvement
from previous work. Zhang et al. (2018) intro-
duced a self-matching attention to route the vital
information in each utterance, and used RNN to
fuse the matching result. Zhou et al. (2018) used
self-attention and cross-attention to construct the
representations at different granularities, achiev-
ing a state-of-the-art result.

Our model is different from the previous meth-
ods: first we model the task with the triple
〈C,Q,R〉 instead of 〈C,R〉 in the early works, and
use a novel triple attention matching mechanism
to model the relationships within the triple. Then
we represent the context from low (character) to
high (context) level, which constructs the repre-
sentations for the context more comprehensively.

3 Model

In this section, we will give a detailed introduction
of the proposed model TripleNet. We first formal-



739

Response

Word 
Level

Utterance 
Level

Context
Level

Char Input

Self-
attention

Utterance1 Utterancen

Context

g(C,Q,R)
Hier-LSTM

…

…

R

Query

 Word embedding

Char embedding

Char 
Level

CNN CNN CNN

…Word Input

P Q

Dot

Dot

Sub & BN

Softmax

Q’

Bi-directional Attention Function (BAF)

Sub & BN

Softmax
Transpose

Dot

P’

C Q

RBAF BAF

BAF

C’

R’

Q’

Triple Attention

Input

Input Input

C Q

C Q

C Q

C Q

R

R

R

C Q

RBAF BAF

BAF

C’

R’

Q’

C Q

RBAF BAF

BAF

C’

R’

Q’

C Q

RBAF BAF

BAF

C’

R’

Q’

C Q

RBAF BAF

BAF

C’

R’

Q’

Output

Match

C1

C2

R2 R1

Q2

Q1

Figure 2: The neural architecture of the model TripleNet. (best viewed in color)

ize the problem of the response selection for multi-
turn conversation. Then we briefly introduce the
overall architecture of the proposed model. Fi-
nally, the details of each part of our model will
be illustrated.

3.1 Task Definition
For the response selection, we define the task as
given the context C, current query Q and candi-
date response R, which is different from almost
all the previous works (Zhou et al., 2018; Wu
et al., 2017). We aim to build a model function
g(C,Q,R) to predict the possibility of the candi-
date response to be the correct response.

score = g(C,Q,R) (1)

The information in context is composed of four
levels: context, utterances, words and char-
acters, which can be formulated as C =
(u1, u2, ..., ui, ..., un), where ui represents the ith
utterance, and n is the maximum utterance num-
ber. The last utterance in the context is query
Q = Un; we still use query as the end of con-
text to maintain the integrity of the information in

context. Each utterance can be formulated as ui =
(w1, ..., wj , .., wm), where wj is the jth word in
the utterance and m is the maximum word num-
ber in the utterance. Each word can be represented
by multiply characters wj = (ch1, ..., chk, .., chl),
where chk is the kth char and l is the length of the
word in char-level. The latter two levels are simi-
lar in the query and response.

3.2 Model Overview

The overall architecture of the model TripleNet is
displayed in Figure 2. The model has a bottom-
up architecture that organizes the calculation from
char to context level. In each level, we first uses
the hierarchical representation module to construct
the representations of context, response and query.
Then the triple attention mechanism is applied to
update the representations. At last, the model
matches them while focused on the response and
fuses the result for prediction.

In the hierarchical representation module, we
represent the conversation in four perspectives in-
cluding char, word, utterance, and context. In the
char-level, a convolutional neural network (CNN)



740

is applied to the embedding matrix of each word
and produces the embedding of the word by con-
volution and maxpooling operations as the char-
level representation. In word-level, we use a
shared LSTM layer to obtain the word-level em-
bedding for each word. After that, we use self-
attention to encode the representation of each ut-
terance into a vector which is the utterance-level
representation. At last, the utterance-level rep-
resentation of each utterance is fed into another
LSTM layer to further model the information
among different utterances, forming the context-
level representation.

The structure of the triple attention mechanism
can be seen in the right part of Figure 2. We first
design a bi-directional attention function (BAF) to
calculate the attention between two sequences and
output their new representations. To model the re-
lationship of the triple 〈C,Q,R〉, we apply BAF to
each pair within the triple and get two new repre-
sentations for each one element, and then we add
them together as its final attention-based represen-
tation. In the triple attention mechanism, we can
update the representation of each one based on the
attention result with the other two simultaneously,
and each element participates in the whole calcu-
lation in the same way.

3.3 Hierarchical Representation
Char-level Representation. At first, we embed
the characters in each word into fixed size vec-
tors and use a CNN followed by max-pooling to
get character-derived embeddings for each word,
which can be formulated by

chj,t = tanh(W
j
1 ∗ xt:t+sj−1 + b

j
1) (2)

chj =MaxPooling
L
t=0[chj,t] (3)

where W j1 , b
j
1 are parameters, xt:t+sj−1 refers

to the concatenation of the embedding of
(xt,...,xt+sj−1), sj is the window size of jth fil-
ter, and the ch is the representation of the word in
char-level.
Word-level Representation. Furthermore, we
embed word x by pre-trained word vectors, and
we also introduce a word matching (MF) feature
to the embedding to make the model more sensi-
tive to concurrent words. If the word appears in
the response and context or query simultaneously,
we set the feature to 1, otherwise to 0.

e(x) = [We · x; ch(x);MF ] (4)

where e(x) to denotes the embedding representa-
tion, We is the pre-trained word embedding, and
ch(x) is the character embedding function. We
use a shared bi-directional LSTM to get contex-
tual word representations in each utterance, query,
and the response. The representation of each word
is formed by concatenating the forward and back-
ward LSTM hidden output.

←−−
h(x) =

←−−−−
LSTM(e(x)) (5)

−−→
h(x) =

−−−−→
LSTM(e(x)) (6)

h(x) = [
←−−
h(x);

−−→
h(x)] (7)

where h(x) is the representation of the word. We
denote the word-level representation of the context
as hu ∈ Rm∗dw and the response as hr ∈ Rm∗dw ,
where dw is the dimension of Bi-LSTMs. Un-
til now, we have constructed the representations
of context, query, and response in char and word
level, and we only represent the latter two in these
two levels because they don’t have such rich con-
textual information as the context.
Utterance-level Representation. Given the
kth utterance uk = [hiuk ]

m
i=1, we construct

the utterance-level representation by self-attention
(Lin et al., 2017):

αki = softmax(W3tanh(W2huk(i)
T )) (8)

uk =
∑m

i=1
hiukα

k
i (9)

where W2 ∈ Rd∗dw , W3 ∈ Rd are trainable
weights, d is a hyperparameter, uk is the utterance-
level representation, and αki is the attention weight
for the ith word in the kth utterance, which signi-
fies the importance of the word in the utterance.
Context-level Representation. To further model
the continuity and contextual information among
the utterances, we fed the utterance-level repre-
sentations into another bi-directional LSTM layer
to obtain the representation for each utterance in
context perspective.

ck = Bi-LSTM([uk]nk=1) (10)

where ck ∈ Rdc is the context-level representation
for the kth utterance in the context and dc is the
output size of the Bi-LSTM.

3.4 Triple Attention
In this part, we update the representations of
context, query, and response in each level



741

by triple attention, the motivation of which
is to model the latent relationships within
〈context, query, response〉 .

Given the triple 〈C,Q,R〉 , we fed each of its
pairs into bi-directional attention function (BAF).

C1, Q1 = BAF (C,Q) (11)

C2, R1 = BAF (C,Q) (12)

Q2, R2 = BAF (C,R) (13)

C ′ = BN(C1 + C2) (14)

Q′ = BN(Q1 +Q2) (15)

R′ = BN(R1 +R2) (16)

where BN denotes the batch normalization layer
(Ioffe and Szegedy, 2015) which is conducive to
preventing vanishing or exploding of gradients.
BAF produces the new representations for two
sequences (P, Q) by the attention from two direc-
tions, which is inspired by Seo et al. (2016). We
can formulate it by

Mpq = P
T tanh(W3Q) (17)

Attpq = softmax(Mpq) (18)

Attqp = softmax(M
T
pq) (19)

P ′ = P − Q̃; Q̃ = QAttpq; (20)
Q′ = Q− P̃ ; P̃ = PAttqp; (21)

where Attpq, Attqp are the attention between P
and Q in two directions, P ′, Q′ are the new repre-
sentations the two sequences (P, Q), and we apply
a batch normalization layer upon them too.

We find that the triple attention has some inter-
esting features: (1) triple, the representation for
each element in the triple 〈C,Q,R〉 is updated
based on the attention to the other two concur-
rently; (2) symmetrical, which means each ele-
ment in the triple plays the same role in the struc-
ture because their contents are similar in the whole
conversation; (3) unchanged dimension, all the
outputs of triple attention has the same dimensions
as the inputs, so we can stack multiple layers as
needed.

3.5 Triple Matching and Prediction

Triple Matching. We match the triple 〈C,Q,R〉
in each level with the cosine distance using new
representations produced by triple attention. This
process focuses on the response because it is our
target. For example, in the char-level, we match

the triple by

M̃1rc(i, k, j) = cosine(ch
′
r(i), ch

′
uk
(j)) (22)

M1rc(i, k) = max
0<j<m

M̃1(i, j, k) (23)

M1rq(i, j) = cosine(ch
′
r(i), ch

′
q(j)) (24)

M1 = [M
1
rc(i, k);M

1
rq(i, j)] (25)

where ch′ is the representation updated by triple
attention, M1 ∈ Rm∗(n+m) is the char-level
matching result, the word-level matches the triple
in the same way, and the utterance and the con-
text level match the triple without the maxpooling
operation. We use M2, M3, M4 as the matching
results in the word, utterance and context levels.
Fusion. After obtaining the four-level matching
matrix, we use hierarchical RNN to get highly ab-
stract features. Firstly, we concatenate the four
matrices to form a 3D cube M ∈ Rm∗(n+m)∗4 and
we use m as one of the matrix in M , which de-
notes the matching result for one word in response
in four levels.

M = [M1;M2;M3;M4] (26)

m̃ =MaxPoolingn+mi=0 [Bi-LSTM(mi)] (27)

v =MaxPoolingmj=0[Bi-LSTM(m̃j)] (28)

Where mi and m̃j are the ith, jth row in the ma-
trix m and m̃. We merge the results from different
time steps in the outputs of LSTM by max-pooling
operation. Until now, we encode the matching re-
sult into a single feature vector v.
Final Prediction. For the final prediction, we fed
the vector V into a full-connected layer with sig-
moid output activation.

g(C,Q,R) = sigmoid(W4 · v + b4) (29)

where W4, b4 are trainable weights. Our purpose
is to predict the matching score between the con-
text, query and candidate response, which can be
seen as a binary classification task. To train our
model, we minimize the cross entropy loss be-
tween the prediction and ground truth.

4 Experiments

4.1 Dataset
We first evaluate our model on Ubuntu Dialogue
Corpus (Lowe et al., 2015) because it is the largest
public multi-turn dialogue corpus which consists
of about one million conversations in the specific
domain. To reduce the number of unknown words,



742

Ubuntu Dialogue Corpus Douban Conversation Corpus
R2@1 R10@1 R10@2 R10@5 MAP MRR P@1 R10@1 R10@2 R10@5

DualEncoder 90.1 63.8 78.4 94.9 48.5 52.7 32.0 18.7 34.3 72.0
MV-LSTM 90.6 65.3 80.4 94.6 49.8 53.8 34.8 20.2 35.1 71.6
Match-LSTM 90.4 65.3 80.4 94.6 49.8 53.8 34.8 20.2 34.8 71.0
DL2R 89.9 62.6 78.3 94.4 48.8 52.7 33.0 19.3 34.2 70.5
Multi-View 90.8 66.2 80.1 95.1 50.5 54.3 34.2 20.2 35.0 72.9
SMN 92.6 72.6 84.7 96.1 52.9 56.9 39.7 23.3 39.6 72.4

RNN-CNN 91.1 67.2 80.9 95.6 - - - - - -
DUA - 75.2 86.8 96.2 55.1 59.9 42.1 24.3 42.1 78.0
DAM 93.8 76.7 87.4 96.9 55.0 60.1 42.7 25.4 41.0 75.7

TripleNet 94.3 79.0 88.5 97.0 56.4 61.8 44.7 26.8 42.6 77.8
TripleNetelmo 95.1 80.5 89.7 97.6 60.9 65.0 47.0 27.8 48.7 81.4
TripleNetensemble 95.6 82.1 90.9 98.0 63.2 67.8 51.5 31.3 49.4 83.2

Table 1: Experimental results on two public dialogue datasets. The table is segmented into three sections: Non-
Attention models, Attention-based models and our models. The italics denotes the previous best results, and the
scores in bold express the new state-of-the-art result of single model without any pre-training layer.

we use the shared copy of the Ubuntu corpus
by Xu et al. (2017) which replaces the numbers,
paths, and URLs by specific symbols.3 Further-
more, to verify the generalization of our model,
we also carry out experiments on Douban Con-
versation Corpus (Wu et al., 2017), which shares
similar format with the Ubuntu corpus but is open-
domain and in the Chinese language.

For the Ubuntu corpus, we use the recall at
position k in n candidate responses (Rn@k) as
evaluation metrics, and we use MAP (Mean Av-
erage Precision), MRR (Mean Reciprocal Rank),
and Precision-at-one as the additional metrics for
Douban corpus, following the previous work (Wu
et al., 2017).

4.2 Experiment Setup

We implement our model by Keras (Chollet et al.,
2015) with TensorFlow backend. In the Embed-
ding Layer, the word embeddings are pre-trained
using the training set via GloVe (Pennington et al.,
2014), the weights of which are trainable. For char
embedding, we set the kernel shape as 3 and filter
number as 200 in the CNN layer. For all the Bi-
directional LSTM layers, we set their hidden size
to 200. We use Adamax (Kingma and Ba, 2014)
for weight updating with an initial learning rate of
0.002. For ensemble models, we generate 6 mod-
els for each corpus using different random seeds
and merge the result by voting.

For better comparison with the baseline mod-
els, the main super parameters in TripleNet, such

3https://www.dropbox.com/s/
2fdn26rj6h9bpvl/ubuntudata.zip

as the embedding size, max length of each turn,
and the vocabularies, are the same as those of the
baseline models. The maximum number of con-
versation turns, which changes with the models, is
12 in our model, 9 in DAM (Wu et al., 2017), and
10 in SMN (Wu et al., 2017).

4.3 Baseline Models

We basically divided baseline models into two cat-
egories for comparisons.
Non-Attention Models. The majority of the
previous works on this task are designed with-
out attention mechanisms, including the Sequen-
tial Matching Network (SMN) (Wu et al., 2017),
Multi-View model (Zhou et al., 2016), Deep
Learning to Respond (DL2R) (Yan et al., 2016),
Match-LSTM (Wang and Jiang, 2016), MV-
LSTM (Wan et al., 2016), and DualEncoder (Lowe
et al., 2015).
Attention-based Models. The attention-based
models typically match the context and the candi-
date response based on the attention among them,
including DAM (Zhou et al., 2018), DUA (Zhang
et al., 2018), and RNN-CNN (Baudiš et al., 2016).

4.4 Overall Results

The overall results on two datasets are depicted
in Table 1. Our results are obviously bet-
ter on the two datasets compared with recently
attention-based model DAM, which exceeds 2.3%
inR10@1 of Ubuntu and 2.6% in P@1 of Douban.
Furthermore, our score is significantly exceeding
in almost all metrics except the R10@5 in Douban
when compared with DUA, which may be be-

https://www.dropbox.com/s/ 2fdn26rj6h9bpvl/ubuntudata.zip
https://www.dropbox.com/s/ 2fdn26rj6h9bpvl/ubuntudata.zip


743

cause the metric is not very stable as the test set
in Douban is very small (1000).

To further improve the performance, we utilize
pre-trained ELMo (Peters et al., 2018) and fine-
tune it on the training set in the Ubuntu condi-
tion while we train ELMo from scratch using the
Douban training set. As the baseline of Douban
corpus is relatively lower, we observe much big-
ger improvements in the corpus using ELMo. The
model ensemble has further improvements based
on the single model with ELMo; the score of
R10@1 in Ubuntu is close to the average per-
formance of human experts at 83.8 (Lowe et al.,
2016).

Compared to non-attention models such as the
SMN and Multi-view, which match the context
and response at two levels, TripleNet shows sub-
stantial improvements. On R10@1 for Ubuntu
corpus, there is a 6.3% absolute improvement
from SMN and 12.8% from Multi-view, showing
the effectiveness of triple attention.

4.5 Model Ablation

To better demonstrate the effectiveness of
TripleNet, we conduct the ablations on the model
under the Ubuntu corpus for its larger data size.

We first remove the triple attention and match-
ing parts (-TAM); the result shows a marked de-
cline (2.4% in R10@1), which is in the second
part of Table 2. The performance of the model
is similar to the baseline model DAM. This in-
dicates that our four-level hierarchical represen-
tation may play a similar role to the five stacks
Transformer in DAM. We then remove the triple
attention part, which means we match the pairs
〈C,R〉 and 〈Q,R〉 with their original represen-
tation in each level; the score of R10@1 drops
1.4%, which shows the effect of triple attention.
We also have tried to remove all the parts related
to the query (-Query). That means the attention
and matching parts are only calculated within the
pair 〈C,R〉. It is worth mentioning that the infor-
mation of the query is still contained at the end of
the context. The performance also has a marked
drop (1.6% inR10@1), which shows that it is nec-
essary to model the query separately. To find out
which subsection in those parts is more important,
we remove each one of them.
Triple attention matching ablation. As we can
see in the third part of Table 2, when attention be-
tween context and response is removed (-ACR),

R2@1 R10@1 R10@2 R10@5

TripleNet 94.3 79.0 88.5 97.0

-TAM 93.5 76.6 86.8 96.6
-Atri 93.8 77.6 87.6 96.9
-Query 93.8 77.4 87.3 96.6

-ACR 94.1 78.4 87.9 97.0
-AQR 94.1 78.5 88.1 97.0
-ACQ 94.3 78.7 88.3 97.0
-MCR 93.7 76.9 87.0 96.7
-MQR 94.4 78.5 88.1 97.1

-char 94.1 78.3 88.0 97.1
-word 94.3 78.5 88.2 97.0
-utterance 94.1 78.6 88.1 97.1
-context 94.0 78.4 88.0 97.0

Table 2: Ablation studies on Ubuntu Dialogue Corpus.
The letter ‘A’ stands for the subsection in triple atten-
tion, and ‘M’ the is triple matching part.

the largest decrease (0.6% in R10@1) appears,
which indicates that the relationship between con-
text and response is most important in the triple.
The attentions in the other two pairs 〈C,Q〉 and
〈Q,R〉 all lead to a slight performance drop (0.3
and 0.5 in R10@1), which may be because they
overlap with each other for updating the represen-
tation of the triple.

When we remove the matching between con-
text and response, we find that the performance
of the model has a marked drop (2.1 in R10@1),
which shows that the relationship within 〈C,R〉 is
the base for selecting the response. The query and
response matching part also leads to a significant
decline. This shows that we should pay more at-
tention to query within the whole context.
Hierarchical representation ablation. To find
out the calculation of which level is most impor-
tant, we also tried to remove each level calcu-
lation from the hierarchical representation mod-
ule, which can be seen in the fourth part of Ta-
ble 2. To our surprise, when we remove char (-
char) and context level calculation (-context), we
observe that the reduction (0.5 in R10@1) is more
significant than the other two, indicating that we
should pay more attention to the lowest and high-
est level information. Also by removing the other
two levels, there is also a significant reduction
from TripleNet, which means each level of the
three is indispensable for our TripleNet .

From the experiments in this part, we find that
each subsection of the hierarchical representation
module only leads to a slight performance drop.
Maybe it’s because the representation from each



744

Figure 3: The attention visualization among the query, context, and response in word-level.

level represent the conversation from a unique
and indispensable perspective, and the information
conveyed by different representations may have
some overlap.

5 Analysis and Discussion

5.1 Visualization

By decoding our model for the case in Figure 1,
we find that our model TripleNet can choose the
true response. To analyze in detail how triple at-
tention works, we get the attention in word-level as
the example and visualize it in Figure 3. As there
are so many words in the context, we only use the
second utterance in the upper part of Figure 1 for
its relatively rich semantics.

In the query-context attention, the query mainly
pays attention to the keyword ‘package.’ This is
helpful to get the topic of the conversation. While
the attention of context focuses on the word ‘a’
which is near the key phrase ‘deb file,’ which may
be because the representation of the word catches
some information from the words nearby by Bi-
LSTM. In the query-response attention, the result
shows that the attention of the query mainly fo-
cuses on the word ‘format,’ which is the most im-
portant word in the response. But we can also
find that the response does not catch the impor-
tant words in the query. In the response-context
attention, the response pays more attention to the
word ‘binary,’ which is another important word in
the context.

From the three maps, we find that each attention
can catch some important information but miss
some useful information too. If we join the infor-
mation in query-context and response-context at-
tention, we can catch the most import information
in the context. Furthermore, the query-response
attention can help us catch the most important
word in the response. So it is natural for TripleNet

Figure 4: The decrease of the performance when the
utterancei is removed in Ubuntu Corpus.

to select the right response because the model can
integrate the three attentions together.

5.2 Discussion

In this section, we will discuss the importance of
different utterances in the context. To find out the
importance of different utterances in the context,
we conduct an experiment by removing each one
of them with the model (-Query) in the ablation
experiment part because the model deals all the
utterances include the query in the same way. For
each experiment in this part, we remove the ith
(0 < i < 13 and Q = U12) utterance in the con-
text both in training and evaluation processes and
report the decrease of performance in Figure 4. We
find that the removing of the query leads the most
significant decline (more than 6% in R10@1), that
indicates the query is much more important than
any other utterances. Furthermore, the decrease is
stable before the 9th utterances and raises rapidly
in the last 3 utterances. We can deduce that the last
three utterances are more important than the other
ones.

From the whole result, we can conclude that it’s
better to model the query separately than deal all
of the utterances in the same way for their signif-
icantly different importance; we also find that we
should pay more attention to the utterances near



745

the query because they are more important.

6 Conclusion

In this paper, we propose a model TripleNet for
multi-turn response selection. We model the con-
text from low (character) to high (context) level,
update the representation by triple attention within
〈C,Q,R〉, match the triple focused on response,
and fuse the matching results with hierarchical
LSTM for prediction. Experimental results show
that the proposed model achieves state-of-the-art
results on both Ubuntu and Douban corpus, which
ranges from a specific domain to open domain,
and English to Chinese language, demonstrating
the effectiveness and generalization of our model.
In the future, we will apply the proposed triple at-
tention mechanism to other NLP tasks to further
testify its extensibility.

Acknowledgement

We would like to thank all anonymous review-
ers for their hard work on reviewing and provid-
ing valuable comments on our paper. We also
would like to thank Yunyi Anderson for proofread-
ing our paper thoroughly. This work is supported
by National Key R&D Program of China via grant
2018YFC0832100.

References
Petr Baudiš, Jan Pichl, Tomáš Vyskočil, and Jan

Šedivỳ. 2016. Sentence pair scoring: Towards
unified framework for text comprehension. arXiv
preprint arXiv:1603.06127.

Zhipeng Chen, Yiming Cui, Wentao Ma, Shijin Wang,
and Guoping Hu. 2019. Convolutional spatial
attention model for reading comprehension with
multiple-choice questions. Proceedings of the AAAI.
Honolulu, HI.

François Chollet et al. 2015. Keras. https://
keras.io.

Yiming Cui, Zhipeng Chen, Si Wei, Shijin Wang,
Ting Liu, and Guoping Hu. 2017. Attention-over-
attention neural networks for reading comprehen-
sion. In Proceedings of the 55th Annual Meeting
of ACL (Volume 1: Long Papers), pages 593–602.
Association for Computational Linguistics.

Ryuichiro Higashinaka, Kenji Imamura, Toyomi Me-
guro, Chiaki Miyazaki, Nozomi Kobayashi, Hi-
roaki Sugiyama, Toru Hirano, Toshiro Makino, and
Yoshihiro Matsuo. 2014. Towards an open-domain
conversational system fully based on natural lan-
guage processing. In Proceedings of COLING

2014, the 25th International Conference on Compu-
tational Linguistics: Technical Papers, pages 928–
939. Dublin City University and Association for
Computational Linguistics.

Sergey Ioffe and Christian Szegedy. 2015. Batch nor-
malization: Accelerating deep network training by
reducing internal covariate shift. In International
Conference on Machine Learning, pages 448–456.

Zongcheng Ji, Zhengdong Lu, and Hang Li. 2014. An
information retrieval approach to short text conver-
sation. arXiv preprint arXiv:1408.6988.

Rudolf Kadlec, Martin Schmid, and Jan Kleindienst.
2015. Improved deep learning baselines for ubuntu
corpus dialogs. arXiv preprint arXiv:1510.03753.

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Zhouhan Lin, Minwei Feng, Cicero Nogueira dos San-
tos, Mo Yu, Bing Xiang, Bowen Zhou, and Yoshua
Bengio. 2017. A structured self-attentive sentence
embedding. arXiv preprint arXiv:1703.03130.

Ryan Lowe, Nissan Pow, Iulian Serban, and Joelle
Pineau. 2015. The ubuntu dialogue corpus: A large
dataset for research in unstructured multi-turn dia-
logue systems. In Proceedings of the 16th Annual
Meeting of the Special Interest Group on Discourse
and Dialogue, pages 285–294. Association for Com-
putational Linguistics.

Ryan Lowe, Iulian V Serban, Mike Noseworthy, Lau-
rent Charlin, and Joelle Pineau. 2016. On the evalu-
ation of dialogue systems with next utterance classi-
fication. arXiv preprint arXiv:1605.05414.

Zhengdong Lu and Hang Li. 2013. A deep architec-
ture for matching short texts. In International Con-
ference on Neural Information Processing Systems,
pages 1367–1375.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of EMNLP 2014,
pages 1532–1543. Association for Computational
Linguistics.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In Proceedings of NAACL-HLT-2018,
pages 2227–2237. Association for Computational
Linguistics.

Alan Ritter, Colin Cherry, and William B. Dolan. 2011.
Data-driven response generation in social media. In
Proceedings of EMNLP 2011, pages 583–593. As-
sociation for Computational Linguistics.

Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2016. Bidirectional attention
flow for machine comprehension. arXiv preprint
arXiv:1611.01603.

https://keras.io
https://keras.io
https://doi.org/10.18653/v1/P17-1055
https://doi.org/10.18653/v1/P17-1055
https://doi.org/10.18653/v1/P17-1055
http://www.aclweb.org/anthology/C14-1088
http://www.aclweb.org/anthology/C14-1088
http://www.aclweb.org/anthology/C14-1088
https://doi.org/10.18653/v1/W15-4640
https://doi.org/10.18653/v1/W15-4640
https://doi.org/10.18653/v1/W15-4640
http://aclweb.org/anthology/D14-1162
http://aclweb.org/anthology/D14-1162
https://doi.org/10.18653/v1/N18-1202
https://doi.org/10.18653/v1/N18-1202
http://www.aclweb.org/anthology/D11-1054


746

Oriol Vinyals and Quoc Le. 2015. A neural conversa-
tional model. arXiv preprint arXiv:1506.05869.

Marilyn A Walker, Rebecca Passonneau, and Julie E
Boland. 2001. Quantitative and qualitative evalu-
ation of darpa communicator spoken dialogue sys-
tems. In Proceedings of ACL 2001, pages 515–522.
Association for Computational Linguistics.

Shengxian Wan, Yanyan Lan, Jun Xu, Jiafeng Guo,
Liang Pang, and Xueqi Cheng. 2016. Match-srnn:
Modeling the recursive matching structure with spa-
tial rnn. arXiv preprint arXiv:1604.04378.

Mingxuan Wang, Zhengdong Lu, Hang Li, and Qun
Liu. 2015. Syntax-based deep matching of short
texts. arXiv preprint arXiv:1503.02427.

Shuohang Wang and Jing Jiang. 2016. Learning natu-
ral language inference with lstm. In Proceedings of
NAACL-HLT, pages 1442–1451.

Yu Wu, Wei Wu, Chen Xing, Ming Zhou, and Zhou-
jun Li. 2017. Sequential matching network: A
new architecture for multi-turn response selection
in retrieval-based chatbots. In Proceedings of ACL
2017, pages 496–505. Association for Computa-
tional Linguistics.

Zhen Xu, Bingquan Liu, Baoxun Wang, Chengjie Sun,
and Xiaolong Wang. 2017. Incorporating loose-
structured knowledge into conversation modeling
via recall-gate lstm. In International Joint Confer-
ence on Neural Networks, pages 3506–3513.

Rui Yan, Yiping Song, and Hua Wu. 2016. Learning
to respond with deep neural networks for retrieval-
based human-computer conversation system. In In-
ternational ACM SIGIR Conference on Research
and Development in Information Retrieval, pages
55–64.

Zhuosheng Zhang, Jiangtong Li, Pengfei Zhu, Hai
Zhao, and Gongshen Liu. 2018. Modeling multi-
turn conversation with deep utterance aggregation.
In Proceedings of the 27th International Conference
on Computational Linguistics, pages 3740–3752.

Xiangyang Zhou, Daxiang Dong, Hua Wu, Shiqi Zhao,
Dianhai Yu, Hao Tian, Xuan Liu, and Rui Yan. 2016.
Multi-view response selection for human-computer
conversation. In Proceedings of EMNLP 2016,
pages 372–381. Association for Computational Lin-
guistics.

Xiangyang Zhou, Lu Li, Daxiang Dong, Yi Liu, Ying
Chen, Wayne Xin Zhao, Dianhai Yu, and Hua Wu.
2018. Multi-turn response selection for chatbots
with deep attention matching network. In Proceed-
ings of ACL 2018, volume 1, pages 1118–1127.

https://doi.org/10.18653/v1/P17-1046
https://doi.org/10.18653/v1/P17-1046
https://doi.org/10.18653/v1/P17-1046
https://doi.org/10.18653/v1/D16-1036
https://doi.org/10.18653/v1/D16-1036

