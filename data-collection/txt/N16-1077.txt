



















































Morphological Inflection Generation Using Character Sequence to Sequence Learning


Proceedings of NAACL-HLT 2016, pages 634–643,
San Diego, California, June 12-17, 2016. c©2016 Association for Computational Linguistics

Morphological Inflection Generation Using
Character Sequence to Sequence Learning

Manaal Faruqui1 Yulia Tsvetkov1 Graham Neubig2 Chris Dyer1
1Language Technologies Institute, Carnegie Mellon University, USA

2Graduate School of Information Science, Nara Institute of Science and Technology, Japan
{mfaruqui,ytsvetko,cdyer}@cs.cmu.edu neubig@is.naist.jp

Abstract

Morphological inflection generation is the
task of generating the inflected form of a given
lemma corresponding to a particular linguis-
tic transformation. We model the problem of
inflection generation as a character sequence
to sequence learning problem and present a
variant of the neural encoder-decoder model
for solving it. Our model is language inde-
pendent and can be trained in both supervised
and semi-supervised settings. We evaluate our
system on seven datasets of morphologically
rich languages and achieve either better or
comparable results to existing state-of-the-art
models of inflection generation.

1 Introduction

Inflection is the word-formation mechanism to ex-
press different grammatical categories such as tense,
mood, voice, aspect, person, gender, number and
case. Inflectional morphology is often realized by
the concatenation of bound morphemes (prefixes
and suffixes) to a root form or stem, but noncon-
catenative processes such as ablaut and infixation are
found in many languages as well. Table 1 shows the
possible inflected forms of the German stem Kalb
(calf) when it is used in different cases and numbers.
The inflected forms are the result of both ablaut (e.g.,
a→ä) and suffixation (e.g., +ern).

Inflection generation is useful for reducing data
sparsity in morphologically complex languages. For
example, statistical machine translation suffers from
data sparsity when translating morphologically-rich
languages, since every surface form is considered an

singular plural
nominative Kalb Kälber
accusative Kalb Kälber
dative Kalb Kälbern
genitive Kalbes Kälber

Table 1: An example of an inflection table from the German
noun dataset for the word Kalb (calf).

independent entity. Translating into lemmas in the
target language, and then applying inflection gener-
ation as a post-processing step, has been shown to
alleviate the sparsity problem (Minkov et al., 2007;
Toutanova et al., 2008; Clifton and Sarkar, 2011;
Fraser et al., 2012; Chahuneau et al., 2013a). Mod-
eling inflection generation has also been used to im-
prove language modeling (Chahuneau et al., 2013b),
identification of multi-word expressions (Oflazer et
al., 2004), among other applications.

The traditional approach to modeling inflec-
tion relies on hand-crafted finite state transducers
and lexicography, e.g., using two-level morphology
(Koskenniemi, 1983; Kaplan and Kay, 1994). Such
systems are appealing since they correspond to lin-
guistic theories, but they are expensive to create,
they can be fragile (Oflazer, 1996), and the com-
posed transducers can be impractically large. As
an alternative, machine learning models have been
proposed to generate inflections from root forms
as string transduction (Yarowsky and Wicentowski,
2000; Wicentowski, 2004; Dreyer and Eisner, 2011;
Durrett and DeNero, 2013; Ahlberg et al., 2014;
Hulden, 2014; Ahlberg et al., 2015; Nicolai et al.,
2015). However, these impose either assumptions
about the set of possible morphological processes

634



inflection 
generation

kalb
kälbercase=nominative 

number=plural

Figure 1: A general inflection generation model.

(e.g. affixation) or require careful feature engineer-
ing.

In this paper, we present a model of inflection
generation based on a neural network sequence to
sequence transducer. The root form is represented
as sequence of characters, and this is the input to
an encoder-decoder architecture (Cho et al., 2014;
Sutskever et al., 2014). The model transforms its in-
put to a sequence of output characters representing
the inflected form (§4). Our model makes no as-
sumptions about morphological processes, and our
features are simply the individual characters. The
model is trained on pairs of root form and inflected
forms obtained from inflection tables extracted from
Wiktionary.1 We improve the supervised model with
unlabeled data, by integrating a character language
model trained on the vocabulary of the language.

Our experiments show that the model achieves
better or comparable results to state-of-the-art meth-
ods on the benchmark inflection generation tasks
(§5). For example, our model is able to learn long-
range relations between character sequences in the
string aiding the inflection generation process re-
quired by Finnish vowel harmony (§6), which helps
it obtain the current best results in that language.

2 Inflection Generation: Background

Durrett and DeNero (2013) formulate the task of su-
pervised inflection generation for a given root form,
based on a large number of training inflection ta-
bles extracted from Wiktionary. Every inflection ta-
ble contains the inflected form of a given root word
corresponding to different linguistic transformations
(cf. Table 1). Figure 1 shows the inflection genera-
tion framework. Since the release of the Wiktionary
dataset, several different models have reported per-
formance on this dataset. As we are also using this
dataset, we will now review these models.

We denote the models of Durrett and DeNero
1www.wiktionary.org

k a l b<w> </w>
k ä l b e r<w> </w>
k a l b<w> </w>e s

(a)

x1 a x2<w> </w>
ä er<w> </w>
a<w> </w>es

x2x1
x1 x2

(b) </w>

er </w>
</w>es

a
ä
a

(c)

(d) a
ä

a
a

</w>

er </w>
</w>

es </w>
k
k

l
l

b
b

Figure 2: Rule extraction: (a) Character aligned-table; (b)
Table-level rule of AFH14, AFH15 (c) Vertical rules of DDN13

and (d) Atomic rules of NCK15.

(2013), Ahlberg et al. (2014), Ahlberg et al. (2015),
and Nicolai et al. (2015), by DDN13, AFH14,
AFH15, and NCK15 respectively. These models
perform inflection generation as string transduction
and largely consist of three major components: (1)
Character alignment of word forms in a table; (2)
Extraction of string transformation rules; (3) Appli-
cation of rules to new root forms.

The first step is learning character alignments
across inflected forms in a table. Figure 2 (a) shows
alignment between three word forms of Kalb. Dif-
ferent models use different heuristic algorithms for
alignments such as edit distance, dynamic edit dis-
tance (Eisner, 2002; Oncina and Sebban, 2006),
and longest subsequence alignment (Bergroth et al.,
2000). Aligning characters across word forms pro-
vide spans of characters that have changed and spans
that remain unchanged. These spans are used to ex-
tract rules for inflection generation for different in-
flection types as shown in Figure 2 (b)–(d).

By applying the extracted rules to new root forms,
inflected words can be generated. DDN13 use a
semi-Markov model (Sarawagi and Cohen, 2004) to
predict what rules should be applied, using charac-
ter n-grams (n = 1 to 4) as features. AFH14 and
AFH15 use substring features extracted from words
to match an input word to a rule table. NCK15 use
a semi-Markov model inspired by DDN13, but ad-
ditionally use target n-grams and joint n-grams as
features sequences while selecting the rules.

Motivation for our model. Morphology often
makes references to segmental features, like place
or manner of articulation, or voicing status (Chom-

635



sky and Halle, 1968). While these can be encoded
as features in existing work, our approach treats seg-
ments as vectors of features “natively”. Our ap-
proach represents every character as a bundle of con-
tinuous features, instead of using discrete surface
character sequence features. Also, our model uses
features as part of the transduction rules themselves,
whereas in existing work features are only used to
rescore rule applications.

In existing work, the learner implicitly speci-
fies the class of rules that can be learned, such
as “delete” or “concatenate”. To deal with phe-
nomenona like segment lengthening in English: run
→ running; or reduplication in Hebrew: Kelev →
Klavlav, Chatul → Chataltul; (or consonant grada-
tion in Finnish), where the affixes are induced from
characters of the root form, one must engineer a new
rule class, which leads to poorer estimates due to
data sparsity. By modeling inflection generation as
a task of generating a character sequence, one char-
acter at a time, we do away with such problems.

3 Neural Encoder-Decoder Models

Here, we describe briefly the underlying framework
of our inflection generation model, called the recur-
rent neural network (RNN) encoder-decoder (Cho et
al., 2014; Sutskever et al., 2014) which is used to
transform an input sequence ~x to output sequence ~y.
We represent an item by x, a sequence of items by
~x, vectors by x, matrices by X, and sequences of
vectors by ~x.

3.1 Formulation

In the encoder-decoder framework, an encoder reads
a variable length input sequence, a sequence of vec-
tors ~x = 〈x1, · · · ,xT 〉 (corresponding to a sequence
of input symbols ~x = 〈x1, · · · , xT 〉) and generates
a fixed-dimensional vector representation of the se-
quence. xt ∈ Rl is an input vector of length l. The
most common approach is to use an RNN such that:

ht = f(ht−1,xt) (1)

where ht ∈ Rn is a hidden state at time t, and f
is generally a non-linear transformation, producing
e := hT+1 as the input representation. The decoder
is trained to predict the next output yt given the

encoded input vector e and all the previously pre-
dicted outputs 〈y1, · · · yt−1〉. In other words, the de-
coder defines a probability over the output sequence
~y = 〈y1, · · · , yT ′〉 by decomposing the joint proba-
bility into ordered conditionals:

p(~y|~x) =
∏T ′

t=1
p(yt|e, 〈y1, · · · , yt−1〉) (2)

With a decoder RNN, we can first obtain the hidden
layer at time t as: st = g(st−1, {e,yt−1}) and feed
this into a softmax layer to obtain the conditional
probability as:

p(yt = i|e, ~y<t) = softmax(Wsst + bs)i (3)

where, ~y<t = 〈y1, · · · , yt−1〉. In recent work, both
f and g are generally LSTMs, a kind of RNN which
we describe next.

3.2 Long Short-Term Memory (LSTM)
In principle, RNNs allow retaining information from
time steps in the distant past, but the nonlinear
“squashing” functions applied in the calculation of
each ht result in a decay of the error signal used in
training with backpropagation. LSTMs are a vari-
ant of RNNs designed to cope with this “vanish-
ing gradient” problem using an extra memory “cell”
(Hochreiter and Schmidhuber, 1997; Graves, 2013).
Past work explains the computation within an LSTM
through the metaphors of deciding how much of the
current input to pass into memory or forget. We refer
interested readers to the original papers for details.

4 Inflection Generation Model

We frame the problem of inflection generation as a
sequence to sequence learning problem of charac-
ter sequences. The standard encoder-decoder mod-
els were designed for machine translation where
the objective is to translate a sentence (sequence of
words) from one language to a semantically equiv-
alent sentence (sequence of words) in another lan-
guage. We can easily port the encoder-decoder
translation model for inflection generation. Our
model predicts the sequence of characters in the in-
flected string given the characters in the root word
(input).

However, our problem differs from the above set-
ting in two ways: (1) the input and output character

636



k a l b<w> </w>
e
k

e
a

<w> k

k ä l b e r </w>

e
l
ä

e
b
l

e
ε
b

e
ε
e

e
ε
r

e

Figure 3: The modified encoder-decoder architecture for inflection generation. Input characters are shown in black and predicted
characters are shown in red. · indicates the append operation.
sequences are mostly similar except for the inflec-
tions; (2) the input and output character sequences
have different semantics. Regarding the first differ-
ence, taking the word play as an example, the in-
flected forms corresponding to past tense and con-
tinuous forms are played and playing. To better use
this correspondence between the input and output
sequence, we also feed the input sequence directly
into the decoder:

st = g(st−1, {e,yt−1,xt}) (4)

where, g is the decoder LSTM, and xt and yt are the
input and output character vectors respectively. Be-
cause the lengths of the input and output sequences
are not equal, we feed an � character in the decoder,
indicating null input, once the input sequence runs
out of characters. These � character vectors are pa-
rameters that are learned by our model, exactly as
other character vectors.

Regarding the second difference, to provide the
model the ability to learn the transformation of se-
mantics from input to output, we apply an affine
transformation on the encoded vector e:

e←Wtranse + btrans (5)

where, Wtrans,btrans are the transformation pa-
rameters. Also, in the encoder we use a bi-
directional LSTM (Graves et al., 2005) instead of
a uni-directional LSTM, as it has been shown to
capture the sequence information more effectively
(Ling et al., 2015; Ballesteros et al., 2015; Bah-
danau et al., 2015). Our resultant inflection gener-
ation model is shown in Figure 3.

4.1 Supervised Learning
The parameters of our model are the set of
character vectors, the transformation parameters
(Wtrans,btrans), and the parameters of the encoder
and decoder LSTMs (§3.2). We use negative log-
likelihood of the output character sequence as the
loss function:

−log p(~y|~x) = −
∑T ′

t=1
log p(yt|e, ~y<t) (6)

We minimize the loss using stochastic updates with
AdaDelta (Zeiler, 2012). This is our purely super-
vised model for inflection generation and we evalu-
ate it in two different settings as established by pre-
vious work:

Factored Model. In the first setting, we learn a
separate model for each type of inflection indepen-
dent of the other possible inflections. For example,
in case of German nouns, we learn 8, and for Ger-
man verbs, we learn 27 individual encoder-decoder
inflection models (cf. Table 3). There is no param-
eter sharing across these models. We call these fac-
tored models of inflection generation.

Joint Model. In the second setting, while learn-
ing a model for an inflection type, we also use the
information of how the lemma inflects across all
other inflection types i.e., the inflection table of a
root form is used to learn different inflection mod-
els. We model this, by having the same encoder
in the encoder-decoder model across all inflection
models.2 The encoder in our model is learning a

2We also tried having the same encoder and decoder across
inflection types, with just the transformation matrix being dif-

637



pLM(~y) p(~y|~x)
len(~y) - len(~x) levenshtein(~y, ~x)

same-suffix(~y, ~x)? subsequence(~y, ~x)?
same-prefix(~y, ~x)? subsequence(~x, ~y)?

Table 2: Features used to rerank the inflected outputs. ~x, ~y
denote the root and inflected character sequences resp.

representation of the input character sequence. Be-
cause all inflection models take the same input but
produce different outputs, we hypothesize that hav-
ing the same encoder can lead to better estimates.

4.2 Semi-supervised Learning

The model we described so far relies entirely on the
availability of pairs of root form and inflected word
form for learning to generate inflections. Although
such supervised models can be used to obtain inflec-
tion generation models (Durrett and DeNero, 2013;
Ahlberg et al., 2015), it has been shown that unla-
beled data can generally improve the performance
of such systems (Ahlberg et al., 2014; Nicolai et al.,
2015). The vocabulary of the words of a language
encode information about what correct sequences of
characters in a language look like. Thus, we learn
a language model over the character sequences in
a vocabulary extracted from a large unlabeled cor-
pus. We use this language model to make predic-
tions about the next character in the sequence given
the previous characters, in following two settings.

Output Reranking. In the first setting, we first
train the inflection generation model using the su-
pervised setting as described in §4.1. While mak-
ing predictions for inflections, we use beam search
to generate possible output character sequences and
rerank them using the language model probability
along with other easily extractable features as de-
scribed in Table 2. We use pairwise ranking opti-
mization (PRO) to learn the reranking model (Hop-
kins and May, 2011). The reranker is trained on the
beam output of dev set and evaluated on test set.

Language Model Interpolation. In the second
setting, we interpolate the probability of observing
the next character according to the language model
with the probability according to our inflection gen-

ferent (equ. 5), and observed consistently worse results.

Dataset root forms Infl.
German Nouns (DE-N) 2764 8
German Verbs (DE-V) 2027 27
Spanish Verbs (ES-V) 4055 57
Finnish NN & Adj. (FI-NA) 6400 28
Finnish Verbs (FI-V) 7249 53
Dutch Verbs (NL-V) 11200 9
French Verbs (FR-V) 6957 48

Table 3: The number of root forms and types of inflections
across datasets.

eration model. Thus, the loss function becomes:

−log p(~y|~x) = 1
Z

∑T ′
t=1
− log p(yt|e, ~y<t)
− λlog pLM(yt|~y<t) (7)

where pLM (yt|~y<t) is the probability of observing
the word yt given the history estimated according to
a language model, λ ≥ 0 is the interpolation pa-
rameter which is learned during training and Z is
the normalization factor. This formulation lets us
use any off-the-shelf pre-trained character language
model easily (details in §5).
4.3 Ensembling
Our loss functions (equ. 6 & 7) formulated using a
neural network architecture are non-convex in nature
and are thus difficult to optimize. It has been shown
that taking an ensemble of models which were ini-
tialized differently and trained independently leads
to improved performance (Hansen and Salamon,
1990; Collobert et al., 2011). Thus, for each model
type used in this work, we report results obtained
using an ensemble of models. So, while decoding
we compute the probability of emitting a charac-
ter as the product-of-experts of the individual mod-
els in the ensemble: pens(yt|·) = 1Z

∏k
i=1 pi(yt|·)

1
k

where, pi(yt|·) is the probability according to i-th
model and Z is the normalization factor.

5 Experiments

We now conduct experiments using the described
models. Note that not all previously published mod-
els present results on all settings, and thus we com-
pare our results to them wherever appropriate.

Hyperparameters. Across all models described
in this paper, we use the following hyperparameters.

638



In both the encoder and decoder models we use sin-
gle layer LSTMs with the hidden vector of length
100. The length of character vectors is the size of
character vocabulary according to each dataset. The
parameters are regularized with `2, with the regular-
ization constant 10−5.3 The number of models for
ensembling are k = 5. Models are trained for at
most 30 epochs and the model with best result on
development set is selected.

5.1 Data

Durrett and DeNero (2013) published the Wik-
tionary inflection dataset with training, development
and test splits. The development and test sets con-
tain 200 inflection tables each and the training sets
consist of the remaining data. This dataset con-
tains inflections for German, Finnish and Span-
ish. This dataset was further augmented by (Nico-
lai et al., 2015), by adding Dutch verbs extracted
from CELEX lexical database (Baayen et al., 1995),
French verbs from Verbsite, an online French con-
jugation dictionary and Czech nouns and verbs
from the Prague Dependnecy Treebank (Hajič et al.,
2001). As the dataset for Czech contains many in-
complete tables, we do not use it for our experi-
ments. These datasets come with pre-specified train-
ing/dev/test splits, which we use. For each of these
sets, the training data is restricted to 80% of the to-
tal inflection tables, with 10% for development and
10% for testing. We list the size of these datasets in
Table 3.

For semi-supervised experiments, we train a 5-
gram character language model with Witten-Bell
smoothing (Bell et al., 1990) using the SRILM
toolkit (Stolcke, 2002). We train the character lan-
guage models on the list of unique word types ex-
tracted from the Wikipedia dump for each language
after filtering out words with characters unseen in
the inflection generation training dataset. We ob-
tained around 2 million unique words for each lan-
guage.

5.2 Results

Supervised Models. The individual inflected
form accuracy for the factored model (§4.1) is shown
in Table 4. Across datasets, we obtain either com-

3Using dropout did not improve our results.

DDN13 NCK15 Ours
DE-V 94.76 97.50 96.72
DE-N 88.31 88.60 88.12
ES-V 99.61 99.80 99.81
FI-V 97.23 98.10 97.81
FI-NA 92.14 93.00 95.44
NL-V 90.50 96.10 96.71
FR-V 98.80 99.20 98.82
Avg. 94.47 96.04 96.20

Table 4: Individual form prediction accuracy for factored su-
pervised models.

DDN13 AFH14 AFH15 Ours
DE-V 96.19 97.01 98.11 97.25
DE-N 88.94 87.81 89.88 88.37
ES-V 99.67 99.52 99.92 99.86
FI-V 96.43 96.36 97.14 97.97
FI-NA 93.41 91.91 93.68 94.71
Avg. 94.93 94.53 95.74 95.63
NL-V 93.88 – – 96.16
FR-V 98.60 – – 98.74
Avg. 95.30 – – 96.15

Table 5: Individual form prediction accuracy for joint super-
vised models.

parable or better results than NCK15 while obtain-
ing on average an accuracy of 96.20% which is
higher than both DDN13 and NCK15. Our factored
model performs better than DDN13 and NCK15
on datasets with large training set (ES-V, FI-V, FI-
NA, NL-V, FR-V) as opposed to datasets with small
training set (DE-N, DE-V). In the joint model set-
ting (cf. Table 5), on average, we perform better
than DDN13 and AFH14 but are behind AFH15
by 0.11%. Our model improves in performance
over our factored model for DE-N, DE-V, and ES-V,
which are the three smallest training datasets. Thus,
parameter sharing across different inflection types
helps the low-resourced scenarios.4

Semi-supervised Models. We now evaluate the
utility of character language models in inflection
generation, in two different settings as described ear-
lier (§4.2). We use the factored model as our base
model in the following experiments as it performed

4Although NCK15 provide results in the joint model setting,
they also use raw data in the joint model which makes it incom-
parable to our model and other previous models.

639



AFH14 NCK15 Interpol Rerank
DE-V 97.87 97.90 96.79 97.11
DE-N 91.81 89.90 88.31 89.31
ES-V 99.58 99.90 99.78 99.94
FI-V 96.63 98.10 96.66 97.62
FI-NA 93.82 93.60 94.60 95.66
Avg. 95.93 95.88 95.42 95.93
NL-V – 96.60 96.66 96.64
FR-V – 99.20 98.81 98.94
Avg. – 96.45 96.08 96.45

Table 6: Individual form prediction accuracy for factored
semi-supervised models.

Model Accuracy
Encoder-Decoder 79.08
Encoder-Decoder Attention 95.64
Ours W/O Encoder 84.04
Ours 96.20

Table 7: Avg. accuracy across datasets of the encoder-decoder,
attentional encoder-decoder & our model without encoder.

better than the joint model (cf. Table 4 & 5). Our
reranking model which uses the character language
model along with other features (cf. Table 2) to se-
lect the best answer from a beam of predictions, im-
proves over almost all the datasets with respect to the
supervised model and is equal on average to AFH14
and NCK15 semi-supervised models with 96.45%
accuracy. We obtain the best reported results on
ES-V and FI-NA datasets (99.94% and 95.66% re-
spectively). However, our second semi-supervised
model, the interpolation model, on average obtains
96.08% and is surprisingly worse than our super-
vised model (96.20%).

Comparison to Other Architectures. Finally it
is of interest how our proposed model compares to
more traditional neural models. We compare our
model against a standard encoder-decoder model,
and an encoder-decoder model with attention, both
trained on root form to inflected form character
sequences. In a standard encoder-decoder model
(Sutskever et al., 2014), the encoded input sequence
vector is fed into the hidden layer of the decoder as
input, and is not available at every time step in con-
trast to our model, where we additionally feed in xt
at every time step as in equ. 4. An attentional model
computes a weighted average of the hidden layer of

5 10 15 20
Word length

90

92

94

96

98

100

A
cc

u
ra

cy
 (

%
)

Ours

DDN13

NCK15

Figure 4: Plot of inflection prediction accuracy against the
length of gold inflected forms. The points are shown with minor

offset along the x-axis to enhance clarity.

the input sequence, which is then used along with
the decoder hidden layer to make a prediction (Bah-
danau et al., 2015). These models also do not take
the root form character sequence as inputs to the de-
coder. We also evaluate the utility of having an en-
coder which computes a representation of the input
character sequence in a vector e by removing the en-
coder from our model in Figure 3. The results in Ta-
ble 7 show that we outperform the encoder-decoder
model, and the model without an encoder substan-
tially. Our model is slightly better than the atten-
tional encoder-decoder model, and is simpler as it
does not have the additional attention layer.

6 Analysis

Length of Inflected Forms. In Figure 4 we show
how the prediction accuracy of an inflected form
varies with respect to the length of the correct in-
flected form.To get stable estimates, we bin the in-
flected forms according to their length: < 5, [5, 10),
[10, 15), and ≥ 15. The accuracy for each bin is
macro-averaged across 6 datasets5 for our factored
model and the best models of DDN13 and NCK15.
Our model consistently shows improvement in per-
formance as word length increases and is signifi-
cantly better than DDN13 on words of length more
than 20 and is approximately equal to NCK15. On
words of length< 5, we perform worse than DDN13

5We remove DE-N as its the smallest and shows high vari-
ance in results.

640



but better than NCK15. On average, our model has
the least error margin across bins of different word
length as compared to both DDN13 and NCK15.
Using LSTMs in our model helps us make better
predictions for long sequences, since they have the
ability to capture long-range dependencies.

Finnish Vowel Harmony. Our model obtains the
current best result on the Finnish noun and adjective
dataset, this dataset has the longest inflected words,
some of which are> 30 characters long. Finnish ex-
hibits vowel harmony, i.e, the occurrence of a vowel
is controlled by other vowels in the word. Finnish
vowels are divided into three groups: front (ä, ö,
y), back (a, o, u), and neutral (e, i). If back vow-
els are present in a stem, then the harmony is back
(i.e, front vowels will be absent), else the harmony is
front (i.e, back vowels will be absent). In compound
words the suffix harmony is determined by the final
stem in the compound. For example, our model cor-
rectly inflects the word fasisti (fascist) to obtain fa-
sisteissa and the compound tärkkelyspitoinen (starch
containing) to tärkkelyspitoisissa. The ability of our
model to learn such relations between these vowels
helps capture vowel harmony. For FI-NA, our model
obtains 99.87% for correctly predicting vowel har-
mony, and NCK15 obtains 98.50%.We plot the char-
acter vectors of these Finnish vowels (cf. Figure 5)
using t-SNE projection (van der Maaten and Hin-
ton, 2008) and observe that the vowels are correctly
grouped with visible transition from the back to the
front vowels.

7 Related Work

Similar to the encoder in our framework, Rastogi et
al. (2016) extract sub-word features using a forward-
backward LSTM from a word, and use them in a tra-
ditional weighted FST to generate inflected forms.
Neural encoder-decoder models of string transduc-
tion have also been used for sub-word level transfor-
mations like grapheme-to-phoneme conversion (Yao
and Zweig, 2015; Rao et al., 2015).

Generation of inflectional morphology has been
particularly useful in statistical machine transla-
tion, both in translation from morphologically rich
languages (Goldwater and McClosky, 2005), and
into morphologically rich languages (Minkov et al.,
2007; Toutanova et al., 2008; Clifton and Sarkar,

Figure 5: Plot of character vectors of Finnish vowels. Their
organization shows that front, back and neutral vowel groups

have been discovered. The arrows show back and front vowel

correspondences.

2011; Fraser et al., 2012). Modeling the morpholog-
ical structure of a word has also shown to improve
the quality of word clusters (Clark, 2003) and word
vector representations (Cotterell and Schütze, 2015).

Inflection generation is complementary to the task
of morphological and phonological segmentation,
where the existing word form needs to be segmented
to obtained meaningful sub-word units (Creutz and
Lagus, 2005; Snyder and Barzilay, 2008; Poon et
al., 2009; Narasimhan et al., 2015; Cotterell et al.,
2015; Cotterell et al., 2016). An additional line of
work that benefits from implicit modeling of mor-
phology is neural character-based natural language
processing, e.g., part-of-speech tagging (Santos and
Zadrozny, 2014; Ling et al., 2015) and dependency
parsing (Ballesteros et al., 2015). These models
have been successful when applied to morphologi-
cally rich languages, as they are able to capture word
formation patterns.

8 Conclusion

We have presented a model that generates inflected
forms of a given root form using a neural network
sequence to sequence string transducer. Our model
obtains state-of-the-art results and performs at par or
better than existing inflection generation models on
seven different datasets. Our model is able to learn
long-range dependencies within character sequences
for inflection generation which makes it specially
suitable for morphologically rich languages.

641



Acknowledgements

We thank Mans Hulden for help in explaining
Finnish vowel harmony, and Garrett Nicolai for
making the output of his system available for com-
parison. This work was sponsored in part by the
National Science Foundation through award IIS-
1526745.

References
Malin Ahlberg, Markus Forsberg, and Mans Hulden.

2014. Semi-supervised learning of morphological
paradigms and lexicons. In Proc. of EACL.

Malin Ahlberg, Markus Forsberg, and Mans Hulden.
2015. Paradigm classification in supervised learning
of morphology. Proc. of NAACL.

Harald R. Baayen, Richard Piepenbrock, and Leon Gu-
likers. 1995. The CELEX Lexical Database. Release
2 (CD-ROM). LDC, University of Pennsylvania.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In Proc. of ICLR.

Miguel Ballesteros, Chris Dyer, and Noah A. Smith.
2015. Improved transition-based parsing by model-
ing characters instead of words with lstms. In Proc. of
EMNLP.

Timothy C Bell, John G Cleary, and Ian H Witten. 1990.
Text compression. Prentice-Hall, Inc.

Lasse Bergroth, Harri Hakonen, and Timo Raita. 2000.
A survey of longest common subsequence algorithms.
In Proc. of SPIRE.

Victor Chahuneau, Eva Schlinger, Noah A. Smith, and
Chris Dyer. 2013a. Translating into morphologically
rich languages with synthetic phrases. In Proc. of
EMNLP.

Victor Chahuneau, Noah A Smith, and Chris Dyer.
2013b. Knowledge-rich morphological priors for
bayesian language models. In Proc. of NAACL.

Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre,
Dzmitry Bahdanau, Fethi Bougares, Holger Schwenk,
and Yoshua Bengio. 2014. Learning phrase represen-
tations using rnn encoder–decoder for statistical ma-
chine translation. In Proc. of EMNLP.

N. Chomsky and M. Halle. 1968. The Sound Pattern of
English. Harper & Row, New York, NY.

Alexander Clark. 2003. Combining distributional and
morphological information for part of speech induc-
tion. In Proc. of EACL.

Ann Clifton and Anoop Sarkar. 2011. Combin-
ing morpheme-based machine translation with post-
processing morpheme prediction. In Proc. of ACL.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa. 2011.
Natural language processing (almost) from scratch.
The Journal of Machine Learning Research, 12:2493–
2537.

Ryan Cotterell and Hinrich Schütze. 2015. Morphologi-
cal word-embeddings. In Proc. of NAACL.

Ryan Cotterell, Nanyun Peng, and Jason Eisner. 2015.
Modeling word forms using latent underlying morphs
and phonology. Transactions of the Association for
Computational Linguistics, 3:433–447.

Ryan Cotterell, Tim Vieria, and Hinrich Schütze. 2016.
A joint model of orthography and morphological seg-
mentation. In Proc. of NAACL.

Mathias Creutz and Krista Lagus. 2005. Unsuper-
vised morpheme segmentation and morphology induc-
tion from text corpora using Morfessor 1.0. Helsinki
University of Technology.

Markus Dreyer and Jason Eisner. 2011. Discover-
ing morphological paradigms from plain text using a
dirichlet process mixture model. In Proc. of EMNLP.

Greg Durrett and John DeNero. 2013. Supervised learn-
ing of complete morphological paradigms. In Proc. of
NAACL.

Jason Eisner. 2002. Parameter estimation for probabilis-
tic finite-state transducers. In Proc. of ACL.

Alexander Fraser, Marion Weller, Aoife Cahill, and Fa-
bienne Cap. 2012. Modeling inflection and word-
formation in SMT. In Proc. of EACL.

Sharon Goldwater and David McClosky. 2005. Improv-
ing statistical MT through morphological analysis. In
Proc. of EMNLP, pages 676–683.

Alex Graves, Santiago Fernández, and Jürgen Schmidhu-
ber. 2005. Bidirectional lstm networks for improved
phoneme classification and recognition. In Proc. of
ICANN.

Alex Graves. 2013. Generating sequences with recurrent
neural networks. CoRR, abs/1308.0850.

Jan Hajič, Barbora Vidová-Hladká, and Petr Pajas. 2001.
The Prague Dependency Treebank: Annotation struc-
ture and support. In Proc. of the IRCS Workshop on
Linguistic Databases.

Lars Kai Hansen and Peter Salamon. 1990. Neural net-
work ensembles. In Proc. of PAMI.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long
short-term memory. Neural Computation, 9(8):1735–
1780.

Mark Hopkins and Jonathan May. 2011. Tuning as rank-
ing. In Proc. of EMNLP.

Mans Hulden. 2014. Generalizing inflection tables into
paradigms with finite state operations. In Proc. of the
Joint Meeting of SIGMORPHON and SIGFSM.

642



Ronald M Kaplan and Martin Kay. 1994. Regular mod-
els of phonological rule systems. Computational lin-
guistics, 20(3):331–378.

Kimmo Koskenniemi. 1983. Two-level morphology: A
general computational model for word-form recogni-
tion and production. University of Helsinki.

Wang Ling, Tiago Luı́s, Luı́s Marujo, Rámon Fernan-
dez Astudillo, Silvio Amir, Chris Dyer, Alan W Black,
and Isabel Trancoso. 2015. Finding function in form:
Compositional character models for open vocabulary
word representation. In Proc. of EMNLP.

Einat Minkov, Kristina Toutanova, and Hisami Suzuki.
2007. Generating complex morphology for machine
translation. In Proc. of ACL.

Karthik Narasimhan, Regina Barzilay, and Tommi
Jaakkola. 2015. An unsupervised method for uncov-
ering morphological chains. TACL.

Garrett Nicolai, Colin Cherry, and Grzegorz Kondrak.
2015. Inflection generation as discriminative string
transduction. In Proc. of NAACL.

Kemal Oflazer, Özlem çetinoğlu, and Bilge Say. 2004.
Integrating morphology with multi-word expression
processing in turkish. In Proc. of the Workshop on
Multiword Expressions.

Kemal Oflazer. 1996. Error-tolerant finite-state recog-
nition with applications to morphological analysis
and spelling correction. Computational Linguistics,
22(1):73–89.

Jose Oncina and Marc Sebban. 2006. Learning stochas-
tic edit distance: Application in handwritten character
recognition. Pattern recognition, 39(9):1575–1587.

Hoifung Poon, Colin Cherry, and Kristina Toutanova.
2009. Unsupervised morphological segmentation with
log-linear models. In Proc. of NAACL.

Kanishka Rao, Fuchun Peng, Hasim Sak, and Françoise
Beaufays. 2015. Grapheme-to-phoneme conversion
using long short-term memory recurrent neural net-
works. In Proc. of ICASSP.

Pushpendre Rastogi, Ryan Cotterell, and Jason Eisner.
2016. Weighting finite-state transductions with neural
context. In Proc. of NAACL.

Cicero D. Santos and Bianca Zadrozny. 2014. Learning
character-level representations for part-of-speech tag-
ging. In Proc. of ICML.

Sunita Sarawagi and William W Cohen. 2004. Semi-
markov conditional random fields for information ex-
traction. In Proc. of NIPS.

Benjamin Snyder and Regina Barzilay. 2008. Unsuper-
vised multilingual learning for morphological segmen-
tation. In In The Annual Conference of the.

Andreas Stolcke. 2002. Srilm-an extensible language
modeling toolkit. In Proc. of Interspeech.

Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. 2014.
Sequence to sequence learning with neural networks.
In Proc. of NIPS.

Kristina Toutanova, Hisami Suzuki, and Achim Ruopp.
2008. Applying morphology generation models to
machine translation. In Proc. of ACL, pages 514–522.

Laurens van der Maaten and Geoffrey Hinton. 2008.
Visualizing Data using t-SNE. Journal of Machine
Learning Research, 9:2579–2605.

Richard Wicentowski. 2004. Multilingual noise-robust
supervised morphological analysis using the word-
frame model. In Proc. of SIGPHON.

Kaisheng Yao and Geoffrey Zweig. 2015. Sequence-to-
sequence neural net models for grapheme-to-phoneme
conversion. In Proc. of ICASSP.

David Yarowsky and Richard Wicentowski. 2000. Min-
imally supervised morphological analysis by multi-
modal alignment. In Proc. of ACL.

Matthew D Zeiler. 2012. Adadelta: An adaptive learning
rate method. arXiv preprint arXiv:1212.5701.

643


