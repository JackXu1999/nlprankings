















































Deep Enhanced Representation for Implicit Discourse Relation Recognition


Proceedings of the 27th International Conference on Computational Linguistics, pages 571–583
Santa Fe, New Mexico, USA, August 20-26, 2018.

571

Deep Enhanced Representation for
Implicit Discourse Relation Recognition

Hongxiao Bai1,2, Hai Zhao1,2,∗
1Department of Computer Science and Engineering,

Shanghai Jiao Tong University, Shanghai, China
2Key Laboratory of Shanghai Education Commission for Intelligent Interaction

and Cognitive Engineering, Shanghai Jiao Tong University, Shanghai, China
baippa@sjtu.edu.cn, zhaohai@cs.sjtu.edu.cn

Abstract
Implicit discourse relation recognition is a challenging task as the relation prediction without
explicit connectives in discourse parsing needs understanding of text spans and cannot be easily
derived from surface features from the input sentence pairs. Thus, properly representing the
text is very crucial to this task. In this paper, we propose a model augmented with different
grained text representations, including character, subword, word, sentence, and sentence pair
levels. The proposed deeper model is evaluated on the benchmark treebank and achieves state-
of-the-art accuracy with greater than 48% in 11-way and F1 score greater than 50% in 4-way
classifications for the first time according to our best knowledge.

1 Introduction

Discourse parsing is a fundamental task in natural language processing (NLP) which determines the
structure of the whole discourse and identifies the relations between discourse spans such as clauses
and sentences. Improving this task can be helpful to many downstream tasks such as machine trans-
lation (Li et al., 2014), question answering (Jansen et al., 2014), and so on. As one of the important
parts of discourse parsing, implicit discourse relation recognition task is to find the relation between two
spans without explicit connectives (e.g., but, so, etc.), and needs recovering the relation from semantic
understanding of texts.

The Penn Discourse Treebank 2.0 (PDTB 2.0) (Prasad et al., 2008) is a benchmark corpus for discourse
relations. In PDTB style, the connectives can be explicit or implicit, and one entry of the data is separated
into Arg1 and Arg2, accompanied with a relation sense. Since the release of PDTB 2.0 dataset, many
methods have been proposed, ranging from traditional feature-based methods (Lin et al., 2009; Pitler
et al., 2009) to latest neural-based methods (Qin et al., 2017; Lan et al., 2017). Especially through
many neural network methods used for this task such as convolutional neural network (CNN) (Qin et al.,
2016b), recursive neural network (Ji and Eisenstein, 2015), embedding improvement (Wu et al., 2017),
attention mechanism (Liu and Li, 2016), gate mechanism (Chen et al., 2016), multi-task method (Lan et
al., 2017), the performance of this task has improved a lot since it was first introduced. However, this
task is still very challenging with the highest reported accuracy still lower than 50% due to the hardness
for the machines to understand the text meaning and the relatively small task corpus.

In this work, we focus on improving the learned representations of sentence pairs to address the im-
plicit discourse relation recognition. It is well known that text representation is the core part of state-of-
the-art deep learning methods for NLP tasks, and improving the representation from all perspective will
benefit the concerned task.

The representation is improved by two ways in our model through three-level hierarchy. The first way
is embedding augmentation. Only with informative embeddings, can the final representations be bet-
ter. This is implemented in our word-level module. We augment word embeddings with subword-level

∗Corresponding author. This paper was partially supported by National Key Research and Development Program of China
(No. 2017YFB0304100), National Natural Science Foundation of China (No. 61672343 and No. 61733011), Key Project of
National Society Science Foundation of China (No. 15-ZDA041), The Art and Science Interdisciplinary Funds of Shanghai
Jiao Tong University (No. 14JCRZ04).
This work is licenced under a Creative Commons Attribution 4.0 International Licence. Licence details: http://
creativecommons.org/licenses/by/4.0/



572

embeddings and pre-trained ELMo embeddings. Subwords coming from unsupervised segmentation
demonstrate a better consequent performance than characters for being a better minimal representation
unit. The pre-trained contextualized word embeddings (ELMo) can make the embeddings contain more
contextual information which is also involved with character-level inputs. The second way is a deep
residual bi-attention encoder. Since this task is about classifying sentence pairs, the encoder is imple-
mented in sentence and sentence-pair levels. A deeper model can support richer representations but is
hard to train, especially with a small dataset. So we apply residual connections (He et al., 2016) to each
module for facilitating signal propagation and alleviating gradient degradation. The stacked encoder
blocks make the single sentence representation richer and bi-attention module mixes two sentence rep-
resentations focusingly. With introducing richer and deeper representation enhancement, we report the
deepest model so far for the task.

Our representation enhanced model will be evaluated on the benchmark PDTB 2.0 and demonstrate
state-of-the-art performance to verify its effectiveness.

This paper is organized as follows. Section 2 reviews related work. Section 3 introduces our model.
Section 4 shows our experiments and analyses the results. Section 5 concludes this work.

2 Related Work

After the release of Penn Discourse Treebank 2.0, many works have been made to solve this concerned
task. Lin et al. (2009) is the first work who considered the second-level classification of the task by
empirically evaluating the impact of surface features. Feature based methods (Pitler et al., 2009; Zhou et
al., 2010; Chen et al., 2015; Li et al., 2016) mainly focused on using linguistic, or semantic features from
the discourse units, or the relations between unit pairs and word pairs. Zhang et al. (2015) is the first
one who modeled this task using end-to-end neural network and gained great performance improvement.
Neural network methods also used by lots of works (Zhang et al., 2016; Cai and Zhao, 2016) for better
performance. Since then, a lot of methods have been proposed. Braud and Denis (2015) found that
word embeddings trained by neural networks is very useful to this task. Qin et al. (2016a) augmented
their system with character-level and contextualized embeddings. Recurrent networks and convolutional
networks have been used as basic blocks in many works (Ji et al., 2016; Rönnqvist et al., 2017; Qin
et al., 2016b). Ji and Eisenstein (2015) used recursive neural networks. Attention mechanism was used
by Liu and Li (2016), Cai and Zhao (2017) and others. Wu et al. (2016) and Lan et al. (2017) applied
multi-task component. Qin et al. (2017) utilized adversarial nets to migrate the connective-based features
to implicit ones.

Sentence representation is a key component in many NLP tasks. Usually, better representation means
better performance. Plenty of work on language modeling has been done, as language modeling can
supply better sentence representations. Since the pioneering work of Bengio et al. (2006), neural lan-
guage models have been well developed (Mikolov and Zweig, 2012; Williams et al., 2015; Kim et al.,
2016). Sentence representation is directly handled in a series of work. Lin et al. (2017) used self attention
mechanism and used matrix to represent sentence, and Conneau et al. (2017) used encoders pre-trained
on SNLI (Bowman et al., 2015) and MultiNLI (Williams et al., 2017).

Different from all the existing work, for the first time to our best knowledge, this work is devoted
to an empirical study on different levels of representation enhancement for implicit discourse relation
classification task.

3 Model

3.1 Overview
Figure 1 illustrates an overview of our model, which is mainly consisted of three parts: word-level
module, sentence-level module, and pair-level module. Token sequences of sentence pairs (Arg1 and
Arg2) are encoded by word-level module first and every token becomes a word embedding augmented
by subword and ELMo. Then these embeddings are fed to sentence-level module and processed by
stacked encoder blocks (CNN or RNN encoder block). Every block layer outputs representation for
each token. Furthermore, the output of each layer is processed by bi-attention module in the pair-level



573

Sub Sub Sub Sub

Word Word Word Word

Encoder Block(1,1)

Encoder Block(1,2)

Encoder Block(1,3)

ELMo ELMo ELMo ELMo

CharChar Char Char

Encoder Block(2,1)

Encoder Block(2,2)

Encoder Block(2,3)

Sub Sub Sub Sub

Word Word Word Word

ELMo ELMo ELMo ELMo

CharChar Char Char

biAttn

Res 2Res 2Res 2

biAttn

biAttn

Pair Representation

Relation Classifier Connective Classifier

Arg 1 Arg 2

word-level module
sentence-level module
pair-level module

(Res 1)

(Res 1)

(Res 1)

(Res 1)

(Res 1)

(Res 1)

Figure 1: Model overview.

module, and concatenated to pair representation, which is finally sent to classifiers which are multiple
layer perceptrons (MLP) with softmax. The model details are given in the rest of this section.

3.2 Word-Level Module

An inputed token sequence of lengthN is encoded by the word-level module into an embedding sequence
(e1, e2, e3, · · · , eN ). For each embedded token ei, it is concatenated from three parts,

ei = [e
w
i ; e

s
i ; e

c
i ] ∈ Rde (1)

ewi ∈ Rdw is pre-trained word embedding for this token, and is fixed during the training procedure. Our
experiments show that fine-tuning the embeddings slowed down the training without better performance.
esi ∈ Rds is subword-level embedding encoded by subword encoder. eci ∈ Rdc is contextualized word
embedding encoded by pre-trained ELMo encoders, whose parameters are also fixed during training.
Subword is merged from single-character segmentation and the input of ELMo encoder is also character.

Subword Encoder
Character-level embeddings have been used widely in lots of works and its effectiveness is verified for
out-of-vocabulary (OOV) or rare word representation. However, character is not a natural minimal unit
for there exists word internal structure, we thus introduce a subword-level embedding instead.

Subword units can be computationally discovered by unsupervised segmentation over words that are
regarded as character sequences. We adopt byte pair encoding (BPE) algorithm introduced by Sennrich
et al. (2016) for this segmentation. BPE segmentation actually relies on a series of iterative merging
operation over bigrams with the highest frequency. The number of merging operation times is roughly
equal to the result subword vocabulary size.



574

Sub

Conv1 + max Conv2 + max

Sub

Highway

Concat

Sub

Figure 2: Subword encoder.

For each word, the subword-level embedding is encoded by a subword encoder as in Figure 2.
Firstly, the subword sequence (of length n) of the word is mapped to subword embedding sequence
(se1, se2, se3, · · · , sen) (after padding), which is randomly initialized. Then K (we empirically set
K=2) convolutional operations Conv1, Conv2, · · · , ConvK followed by max pooling operation are ap-
plied to the embedding sequence, and the sequence is padded before the convolutional operation. For the
i-th convolution kernel Convi, suppose the kernel size is ki, then the output of Convi on embeddings
sej to sej+ki−1 is

Cj = tanh
(
Convi[sej : sej+ki−1]

)
The final output of Convi after max pooling is

ui = maxpool (C1, · · · , Cj , · · · , Cn)

Finally, the K outputs are concatenated,

u = [u1; u2; · · · ; uK ] ∈ Rds

to feed a highway network (Srivastava et al., 2015),

g = σ(Wgu
T + bg) ∈ Rds

esi = g �ReLU(WhuT + bh) + (1− g)� u
∈ Rds (2)

where g denotes the gate, and Wg ∈ Rds×ds ,bg ∈ Rds ,Wh ∈ Rds×ds ,bh ∈ Rds are parameters. � is
element-wise multiplication. The above Eq. 2 gives the subword-level embedding for the i-th word.

ELMo
ELMo (Embeddings from Language Models) (Peters et al., 2018) is a pre-trained contextualized word
embeddings involving character-level representation. It is shown useful in some works (He et al., 2018;
Lee et al., 2018). This embedding is trained by bidirectional language models on large corpus using char-
acter sequence for each word token as input. The ELMo encoder employs CNN and highway networks
over characters, whose output is given to a multiple-layer biLSTM with residual connections. Then the
output is contextualized embeddings for each word. It is also can be seen as a hybrid encoder for charac-
ter, word, and sentence. This encoder can add lots of contextual information to each word, and can ease
the semantics learning of the model.



575

For the pre-trained ELMo encoder, the output is the result of the last two biLSTM layers. Suppose ci
is the character sequence of i-th word in a sentence, then the encoder output is

[· · · ,h0i , · · · ; · · · ,h1i , · · · ] = ELMo(· · · , ci, · · · )

where h0i and h
1
i denote the outputs of first and second layers of ELMo encoder for i-th word.

Following Peters et al. (2018), we use a self-adjusted weighted average of h0i ,h
1
i ,

s = softmax(w) ∈ R2

h = γ
1∑

j=0

sjh
j
i ∈ R

d′c

where γ ∈ R and w ∈ R2 are parameters tuned during training and d′c is the dimension of the ELMo
encoder’s outputs. Then the result is fed to a feed forward network to reduce its dimension,

eci = Wch
T + bc ∈ Rdc (3)

Wc ∈ Rd
′
c×dc and bc ∈ Rdc are parameters. The above Eq. 3 gives ELMo embedding for the i-th word.

3.3 Sentence-Level Module

The resulting word embeddings ei (Eq. 1) are sent to sentence-level module. The sentence-level module
is composed of stacked encoder blocks. The block in each layer receives output of the previous layer
as input and sends output to next layer. It also sends its output to the pair-level module. Parameters in
different layers are not the same.

We consider two encoder types, convolutional type and recurrent type. We only use one encoder type
in one experiment.

For the sentence-level module for different arguments (Arg1 and Arg2), many previous works used
same parameters to encode different arguments, that is, one encoder for two type arguments. But as indi-
cated by Prasad et al. (2008), Arg1 and Arg2 may have different semantic perspective, we thus introduce
argument-aware parameter settings for different arguments.

Conv Conv Conv Conv

GLU GLU GLU GLU

Res 1

Figure 3: Convolutional encoder block.

FFN

biGRU

FFN FFN FFN
Res 1

Figure 4: Recurrent encoder block.

Convolutional Encoder Block
Figure 3 is the convolutional encoder block. Suppose the input for the encoder block is xi (i =
1, · · · , N), then xi ∈ Rde . The input is sent to a convolutional layer and mapped to output yi =
[Ai Bi] ∈ R2de . After the convolutional operation, gated linear units (GLU) (Dauphin et al., 2016) is
applied, i.e.,

zi = Ai � σ(Bi) ∈ Rde

There is also a residual connection (Res 1) in the block, which means adding the output of GLU and the
input of the block as final output, so zi +xi is the output of the block corresponding to the input xi. The
output zi + xi for all i = 1, · · · , N is sent to both the next layer and the pair-level module as input.



576

Recurrent Encoder Block
Similar to the convolutional one, recurrent encoder block is shown in Figure 4. The input xi is encoded
by a biGRU (Cho et al., 2014) layer first,

yi = biGRU(xi) ∈ R2de

then this is sent to a feed forword network,

zi = Wry
T
i + br ∈ Rde (4)

Wr ∈ R2de×de and br ∈ Rde are parameters. There is also a similar residual connection (Res 1) in the
block, so zi + xi for all i = 1, · · · , N is the final output of the recurrent encoder block.

3.4 Pair-Level Module
Through the sentence-level module, the word representations are contextualized, and these contextual-
ized representations of each layer are sent to pair-level module.

Suppose the encoder block layer number is l, and the outputs of j-th block layer for Arg1 and Arg2
are vj1,v

j
2 ∈ RN×de , each row of which is the embedding for the corresponding word. N is the length

of word sequence (sentence). Each sentence is padded or truncated to let all sentences have the same
length. They are sent to a bi-attention module, the attention matrix is

Mj = (FFN(v
j
1))v

j
2

T ∈ RN×N

FFN is a feed froward network (similar to Eq. 4) applied to the last dimension corresponding to the
word. Then the projected representations are

wj2 = softmax(Mj)v
j
2 ∈ R

N×de

wj1 = softmax(M
T
j )v

j
1 ∈ R

N×de

where the softmax is applied to each row of the matrix. We apply 2-max pooling on each projected
representation and concatenate them as output of the j-th bi-attention module

oj = [top2(w
j
1); top2(w

j
2)] ∈ R

4de

The number of max pooling operation (top-2) is selected from experiments and it is a balance of more
salient features and less noise. The final pair representation is

o = [o1,o2, · · · ,ol] ∈ R4lde (5)

Since the output is concatenated from different layers and the outputs of lower layers are sent directly to
the final representation, this also can be seen as residual connections (Res 2). Then the output as Eq. 5
is fed to an MLP classifier with softmax. The parameters for bi-attention modules in different levels are
shared.

3.5 Classifier
We use two classifiers in our model. One is for relation classification, and another one is for connective
classification. The classifier is only a multiple layer perceptron (MLP) with softmax layer. Qin et al.
(2017) used adversarial method to utilize the connectives, but this method is not suitable for our adopted
attention module since the attended part of a sentence will be distinctly different when the argument is
with and without connectives. They also proposed a multi-task method that augments the model with
an additional classifier for connective prediction, and the input of it is also the pair representation. It is
straightforward and simple enough, and can help the model learn better representations, so we include
this module in our model. The implicit connectives are provided by PDTB 2.0 dataset, and the connective
classifier is only used during training. The loss function for both classifiers is cross entropy loss, and the
total loss is the sum of the two losses, i.e., Loss = Lossrelation + Lossconnective.



577

4 Experiments1

Our model is evaluated on the benchmark PDTB 2.0 for two types of classification tasks.
PDTB 2.0 has three levels of senses: Level-1 Class, Level-2 Type, and Level-3 Subtypes. The first

level consists of four major relation Classes: COMPARISON, CONTINGENCY, EXPANSION, and
TEMPORAL. The second level contains 16 Types.

All our experiments are implemented by PyTorch2. The pre-trained ELMo encoder is from AllenNLP
toolkit (Gardner et al., 2017) 3.

4.1 11-way Classification

Dataset Setup

Following the settings of Qin et al. (2017), we use two splitting methods of PDTB dataset for comprehen-
sive comparison. The first is PDTB-Lin (Lin et al., 2009), which uses section 2-21, 22 and 23 as training,
dev and test sets respectively. The second is PDTB-Ji (Ji and Eisenstein, 2015), which uses section 2-20,
0-1, and 21-22 as training, dev and test sets respectively. According to Ji and Eisenstein (2015), five
relation types have few training instances and no dev and test instance. Removing the five types, there
remain 11 second level types. During training, instances with more than one annotated relation types are
considered as multiple instances, each of which has one of the annotations. At test time, a prediction
that matches one of the gold types is considered as correct. All sentences in the dataset are padded or
truncated to keep the same 100-word length.

Model Details

For the results of both splitting methods, we share some hyperparameters. Table 1 is some of the shared
hyperparameter settings. The pre-trained word embeddings are 300-dim word2vec (Mikolov et al., 2013)
pre-trained from Google News4. So dw = 300, ds = 100, dc = 300, then for the final embedding (ei),
de = 700. For the encoder block in sentence-level module, kernel size is same for every layer. We use
AdaGrad optimization (Duchi et al., 2011).

The encoder block layer number is different for the two splitting methods. The layer number for
PDTB-Ji splitting method is 4, and the layer number for PDTB-Lin splitting method is 5.

Hyperparameter Value Hyperparameter Value
BPE merge operation num. 1k classifier layer num. 1

subword embedding dim. (ds) 50 embedding dropout 0.4
subword CNN kernel num. 2 encoder block dropout 0.4
subword CNN kernel size [2, 3] classifier dropout 0.3

reduced ELMo embedding dim. 300 learning rate 0.001
encoder block type Conv. batch size 64

encoder block kernel size 5

Table 1: Shared hyperparameter settings. Before dimension reducing, the dimension of pre-trained
ELMo embedding is 1024.

Results

Compared to other recent state-of-the-art systems in Table 2, our model achieves new state-of-the-art
performance in two splitting methods with great improvements. As to our best knowledge, our model is
the first one that exceeds the 48% accuracy in 11-way classification.

1The code for this paper is available at https://github.com/diccooo/Deep_Enhanced_Repr_for_IDRR
2http://pytorch.org/
3http://allennlp.org/
4https://code.google.com/archive/p/word2vec/



578

Model PDTB-Lin PDTB-Ji
Lin et al. (2009) 40.20 -
Lin et al. (2009)+Brown clusters - 40.66
Ji and Eisenstein (2015) - 44.59
Qin et al. (2016a) 43.81 45.04
Qin et al. (2017) 44.65 46.23
Ours 45.73 48.22

Table 2: Accuracy (%) comparison with others’ results on PDTB 2.0 test set for 11-way classification.

Analysis
Ablation Study

To illustrate the effectiveness of our model and the contribution of each module, we use the PTDB-Ji
splitting method to do a group of experiments. For the baseline model, we use 4 layer stacked convo-
lutional encoder blocks without the residual connection in the block with only pre-trained word embed-
dings. We only use the output of the last layer and the output is processed by 2-max pooling without
attention and sent to the relation classifier and connective classifier. Without the two residual connec-
tions, using 4 layers may be not the best for baseline model but is more convenient to comparison.

Firstly, we add modules from high level to low level accumulatively to observe the performance im-
provement. Table 3 is the results, which demonstrate that every module has considerable effect on the
performance.

Then we test the effects of the two residual connections on the performance. The results are in Table 4.
The baseline+ means baseline + bi-attention, i.e., the second row of Table 3. We find that Res 1 (residual
connection in the block) is much more useful than Res 2 (residual connection for pair representation),
and they work together can bring even better performance.

Level Model Performance
- baseline 41.48

pair + bi-attention 42.25
sentence + Res 46.29

word + subword 47.03
word + ELMo 48.22

Table 3: Accumulatively performance test result.

Model Performance
baseline+ 42.25

baseline+ + Res 1 45.33
baseline+ + Res 2 43.57

baseline+ + Res 1 + Res 2 46.29

Table 4: The effects of residual connections.

Without ELMo (the same setting as 4-th row in Table 3), our data settings is the same as Qin et al.
(2017) whose performance was state-of-the-art and will be compared directly. We see that even without
the pre-trained ELMo encoder, our performance is better, which is mostly attributed to our better sentence
pair representations.

Subword-Level Embedding For the usefulness of subword-level embedding, we compare its perfor-
mance to a model with character-level embedding, which was ever used in Qin et al. (2016a). We use
the same model setting as the 4-th row of Table 3, and then replace subword with character sequence.
The subword embedding augmented result is 47.03%, while the character embedding result is 46.37%,
which verifies that the former is a better input representation for the task.

Parameters for Sentence-Level Module As previously discussed, argument specific parameter set-
tings may result in better sentence-level encoders. We use the model which is the same as the third row
in Table 3. If shared parameters are used, the result is 45.97%, which is lower than argument specific pa-
rameter settings (46.29%). The comparison shows argument specific parameter settings indeed capture
the difference of argument representations and facilitate the sentence pair representation.

Encoder Block Type and Layer Number In section 3.3, we consider two encoder types, here we
compare their effects on the model performance. Like the previous part, The model setting is also the
same as the third row in Table 3 except for the block type and layer number. The results are shown in



579

Figure 5.

43.50
43.00
42.50

44.00
44.50
45.00

A
cc

 (%
)

45.50

46.00
46.50

recurrent type
convolutional type

1
layer number

2 3 4 5 6

Figure 5: Effects of block type and layer number.

The results in the figure show that both types may reach similar level of top accuracies, as the order
of word is not important to the task. We also try to add position information to the convolutional type
encoder, and receive a dropped accuracy. This further verifies the order information does not matter too
much for the task. For most of the other numbers of layers, the recurrent type shows better, as the number
of layers has an impact on the window size of convolutional encoders. When convolutional type is used,
the training procedure is much faster, but choosing the suitable kernel size needs extra efforts.

Bi-Attention

“

It

’s

ve
ry

fru
str

ati
ng

.

”

He

tem
po

rar
ily

ab
an

do
ne

d his
sea

rch for the

Re
ute

rs
sha

res .

“

It

’s

ve
ry

fru
str

ati
ng

.

”

He

tem
po

rar
ily

ab
an

do
ne

d his
sea

rch for the

Re
ute

rs
sha

res .

“

It

’s

ve
ry

fru
str

ati
ng

.

”

He

tem
po

rar
ily

ab
an

do
ne

d his
sea

rch for the

Re
ute

rs
sha

res .

“

It

’s

ve
ry

fru
str

ati
ng

.

”

He

tem
po

rar
ily

ab
an

do
ne

d his
sea

rch for the

Re
ute

rs
sha

res .

Layer 1 Layer 2

Layer 3 Layer 4

Figure 6: Attention visualization.

We visualize the attention weight of one instance in Figure 6. For lower layers, the attended part is
more concentrated. For higher layers, the weights are more average and the attended part moves to the



580

sentence border. This is because the window size is bigger for higher layers, and the convolutional kernel
may have higher weights on words at the window edge.

4.2 Binary and 4-way Classification

Settings For the first level classification, we perform both 4-way classification and one-vs-others binary
classification. Following the settings of previous works, the dataset splitting method is the same as
PDTB-Ji without removing instances. The model uses 5 block layers with kernel size 3, other details are
the same as that for 11-way classification on PDTB-Ji.

Results Table 5 is the result comparison on first level classification. For binary classification, the result
is computed by F1 score (%), and for 4-way classification, the result is computed by macro average F1
score (%). Our model gives the state-of-the-art performance for 4-way classification by providing an F1
score greater than 50% for the first time according to our best knowledge.

Model Comp. Cont. Exp. Temp. 4-way
Zhang et al. (2015) 33.22 52.04 69.59 30.54 -
Ji and Eisenstein (2015) 35.93 52.78 - 27.63 -
Chen et al. (2016) 40.17 54.76 - 31.32 -
Qin et al. (2016c) 41.55 57.32 71.50 35.43 -
Liu and Li (2016) 39.86 54.48 70.43 38.84 46.29
Qin et al. (2017) 40.87 54.56 72.38 36.20 -
Lan et al. (2017) 40.73 58.96 72.47 38.50 47.80
Lei et al. (2018) 43.24 57.82 72.88 29.10 47.15
Ours 47.85 54.47 70.60 36.87 51.06

Table 5: F1 score (%) comparison on binary and 4-way classification.

5 Conclusion

In this paper, we propose a deeper neural model augmented by different grained text representations for
implicit discourse relation recognition. These different module levels work together and produce task-
related representations of the sentence pair. Our experiments show that the model is effective and achieve
the state-of-the-art performance. As to our best knowledge, this is the first time that an implicit discourse
relation classifier gives an accuracy higher than 48% for 11-way and an F1 score higher than 50% for
4-way classification tasks.

References
Yoshua Bengio, Holger Schwenk, Jean-Sébastien Senécal, Fréderic Morin, and Jean-Luc Gauvain. 2006. Neural

probabilistic language models. In Innovations in Machine Learning: Theory and Applications, pages 137–186.
Berlin, Heidelberg.

Samuel R. Bowman, Gabor Angeli, Christopher Potts, and Christopher D. Manning. 2015. A large annotated
corpus for learning natural language inference. In Proceedings of the 2015 Conference on Empirical Methods
in Natural Language Processing (EMNLP), pages 632–642, Lisbon, Portugal, September.

Chloé Braud and Pascal Denis. 2015. Comparing word representations for implicit discourse relation classifica-
tion. In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing (EMNLP),
pages 2201–2211, Lisbon, Portugal, September.

Deng Cai and Hai Zhao. 2016. Neural Word Segmentation Learning for Chinese. In Proceedings of the 54th
Annual Meeting of the Association for Computational Linguistics (ACL), pages 409–420, Berlin, Germany,
August.

Deng Cai and Hai Zhao. 2017. Pair-aware neural sentence modeling for implicit discourse relation classification.
In Advances in Artificial Intelligence: From Theory to Practice, pages 458–466, Cham.



581

Changge Chen, Peilu Wang, and Hai Zhao. 2015. Shallow discourse parsing using constituent parsing tree. In
Proceedings of the Nineteenth Conference on Computational Natural Language Learning (CoNLL) - Shared
Task, pages 37–41, Beijing, China, July.

Jifan Chen, Qi Zhang, Pengfei Liu, Xipeng Qiu, and Xuanjing Huang. 2016. Implicit discourse relation detection
via a deep architecture with gated relevance network. In Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics (ACL) (Volume 1: Long Papers), pages 1726–1735, Berlin, Germany,
August.

Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares, Holger Schwenk,
and Yoshua Bengio. 2014. Learning phrase representations using RNN encoder–decoder for statistical machine
translation. In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing
(EMNLP), pages 1724–1734, Doha, Qatar, October.

Alexis Conneau, Douwe Kiela, Holger Schwenk, Loı̈c Barrault, and Antoine Bordes. 2017. Supervised learning of
universal sentence representations from natural language inference data. In Proceedings of the 2017 Conference
on Empirical Methods in Natural Language Processing (EMNLP), pages 670–680, Copenhagen, Denmark,
September.

Yann N. Dauphin, Angela Fan, Michael Auli, and David Grangier. 2016. Language modeling with gated convolu-
tional networks. arXiv preprint arXiv:1612.08083.

John Duchi, Elad Hazan, and Yoram Singer. 2011. Adaptive subgradient methods for online learning and stochas-
tic optimization. The Journal of Machine Learning Research, 12:2121–2159.

Matt Gardner, Joel Grus, Mark Neumann, Oyvind Tafjord, Pradeep Dasigi, Nelson Liu, Matthew Peters, Michael
Schmitz, and Luke Zettlemoyer. 2017. AllenNLP: A deep semantic natural language processing platform.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Deep residual learning for image recognition.
In IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 770–778, Las Vegas, USA.

Shexia He, Zuchao Li, Hai Zhao, Hongxiao Bai, and Gongshen Liu. 2018. Syntax for semantic role labeling, to
be, or not to be. In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics
(ACL) (Volume 1: Long Papers), Melbourne, Australia, July.

Peter Jansen, Mihai Surdeanu, and Peter Clark. 2014. Discourse complements lexical semantics for non-factoid
answer reranking. In Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics
(ACL), pages 977–986, Baltimore, Maryland, June.

Yangfeng Ji and Jacob Eisenstein. 2015. One vector is not enough: Entity-augmented distributed semantics for
discourse relations. Transactions of the Association for Computational Linguistics (TACL), 3:329–344.

Yangfeng Ji, Gholamreza Haffari, and Jacob Eisenstein. 2016. A latent variable recurrent neural network for
discourse-driven language models. In Proceedings of the 2016 Conference of the North American Chapter of
the Association for Computational Linguistics: Human Language Technologies (NAACL:HLT), pages 332–342,
San Diego, California, June.

Yoon Kim, Yacine Jernite, David Sontag, and Alexander Rush. 2016. Character-aware neural language models.
In Thirtieth AAAI Conference on Artificial Intelligence (AAAI), pages 2741–2749, Phoenix, USA.

Man Lan, Jianxiang Wang, Yuanbin Wu, Zheng-Yu Niu, and Haifeng Wang. 2017. Multi-task attention-based
neural networks for implicit discourse relationship representation and identification. In Proceedings of the 2017
Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1299–1308, Copenhagen,
Denmark, September.

Kenton Lee, Luheng He, and Luke Zettlemoyer. 2018. Higher-order coreference resolution with coarse-to-fine
inference. In Proceedings of the 2018 Conference of the North American Chapter of the Association for Com-
putational Linguistics: Human Language Technologies (NAACL:HLT), New Orleans, Louisiana.

Wenqiang Lei, Yuanxin Xiang, Yuwei Wang, Qian Zhong, Meichun Liu, and Min-Yen Kan. 2018. Linguistic
properties matter for implicit discourse relation recognition: Combining semantic interaction, topic continuity
and attribution. In Thirty-Second AAAI Conference on Artificial Intelligence (AAAI), New Orleans, USA.

Junyi Jessy Li, Marine Carpuat, and Ani Nenkova. 2014. Assessing the discourse factors that influence the quality
of machine translation. In Proceedings of the 52nd Annual Meeting of the Association for Computational
Linguistics (ACL) (Volume 2: Short Papers), pages 283–288, Baltimore, Maryland, June.



582

Zhongyi Li, Hai Zhao, Chenxi Pang, Lili Wang, and Huan Wang. 2016. A constituent syntactic parse tree based
discourse parser. In Proceedings of the Twentieth Conference on Computational Natural Language Learning
(CoNLL) - Shared Task, pages 60–64, Berlin, Germany, August.

Ziheng Lin, Min-Yen Kan, and Hwee Tou Ng. 2009. Recognizing implicit discourse relations in the Penn Dis-
course Treebank. In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Process-
ing (EMNLP), pages 343–351, Singapore, August.

Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen Zhou, and Yoshua Bengio.
2017. A structured self-attentive sentence embedding. In International Conference on Learning Representa-
tions (ICLR).

Yang Liu and Sujian Li. 2016. Recognizing implicit discourse relations via repeated reading: Neural networks
with multi-level attention. In Proceedings of the 2016 Conference on Empirical Methods in Natural Language
Processing (EMNLP), pages 1224–1233, Austin, Texas, November.

Tomas Mikolov and Geoffrey Zweig. 2012. Context dependent recurrent neural network language model. In
Spoken Language Technology (SLT) Workshop, pages 234–239.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeff Dean. 2013. Distributed representations of
words and phrases and their compositionality. In Advances in Neural Information Processing Systems 26, pages
3111–3119.

Matthew E. Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke Zettle-
moyer. 2018. Deep contextualized word representations. In Proceedings of the 2018 Conference of the
North American Chapter of the Association for Computational Linguistics: Human Language Technologies
(NAACL:HLT), New Orleans, Louisiana.

Emily Pitler, Annie Louis, and Ani Nenkova. 2009. Automatic sense prediction for implicit discourse relations in
text. In Proceedings of the Joint Conference of the 47th Annual Meeting of he Association for Computational
Linguistics and the 4th International Joint Conference on Natural Language Processing (ACL-IJCNLP), pages
683–691, Suntec, Singapore, August.

Rashmi Prasad, Nikhil Dinesh, Alan Lee, Eleni Miltsakaki, Livio Robaldo, Aravind K Joshi, and Bonnie L Webber.
2008. The Penn Discourse TreeBank 2.0. In Proceedings of the Sixth conference on International Language
Resources and Evaluation (LREC-2008), pages 2961–2968, Marrakech, Morocco, May.

Lianhui Qin, Zhisong Zhang, and Hai Zhao. 2016a. Implicit discourse relation recognition with context-aware
character-enhanced embeddings. In Proceedings of the 26th International Conference on Computational Lin-
guistics (COLING): Technical Papers, pages 1914–1924.

Lianhui Qin, Zhisong Zhang, and Hai Zhao. 2016b. Shallow discourse parsing using convolutional neural network.
In Proceedings of the Twentieth Conference on Computational Natural Language Learning (CoNLL) - Shared
Task, pages 70–77, Berlin, Germany, August.

Lianhui Qin, Zhisong Zhang, and Hai Zhao. 2016c. A stacking gated neural architecture for implicit discourse
relation classification. In Proceedings of the 2016 Conference on Empirical Methods in Natural Language
Processing (EMNLP), pages 2263–2270, Austin, Texas, November.

Lianhui Qin, Zhisong Zhang, Hai Zhao, Zhiting Hu, and Eric Xing. 2017. Adversarial connective-exploiting
networks for implicit discourse relation classification. In Proceedings of the 55th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL) (Volume 1: Long Papers), pages 1006–1017, Vancouver, Canada,
July.

Samuel Rönnqvist, Niko Schenk, and Christian Chiarcos. 2017. A recurrent neural model with attention for the
recognition of Chinese implicit discourse relations. In Proceedings of the 55th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL) (Volume 2: Short Papers), pages 256–262, Vancouver, Canada,
July.

Rico Sennrich, Barry Haddow, and Alexandra Birch. 2016. Neural machine translation of rare words with subword
units. In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (ACL)
(Volume 1: Long Papers), pages 1715–1725, Berlin, Germany, August.

Rupesh Kumar Srivastava, Klaus Greff, and Jürgen Schmidhuber. 2015. Training very deep networks. arXiv
preprint arXiv:1507.06228.



583

Will Williams, Niranjani Prasad, David Mrva, Tom Ash, and Tony Robinson. 2015. Scaling recurrent neural
network language models. In IEEE International Conference on Acoustics, Speech and Signal Processing
(ICASSP), pages 5391–5395, South Brisbane, Queensland, Australia.

Adina Williams, Nikita Nangia, and Samuel R. Bowman. 2017. A broad-coverage challenge corpus for sentence
understanding through inference. arXiv preprint arXiv:1704.05426.

Changxing Wu, Xiaodong Shi, Yidong Chen, Yanzhou Huang, and Jinsong Su. 2016. Bilingually-constrained
synthetic data for implicit discourse relation recognition. In Proceedings of the 2016 Conference on Empirical
Methods in Natural Language Processing (EMNLP), pages 2306–2312, Austin, Texas, November.

Changxing Wu, Xiaodong Shi, Yidong Chen, Jinsong Su, and Boli Wang. 2017. Improving implicit discourse
relation recognition with discourse-specific word embeddings. In Proceedings of the 55th Annual Meeting of
the Association for Computational Linguistics (ACL) (Volume 2: Short Papers), pages 269–274, Vancouver,
Canada, July.

Biao Zhang, Jinsong Su, Deyi Xiong, Yaojie Lu, Hong Duan, and Junfeng Yao. 2015. Shallow convolutional
neural network for implicit discourse relation recognition. In Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP), pages 2230–2235, Lisbon, Portugal, September.

Zhisong Zhang, Hai Zhao, and Lianhui Qin. 2016. Probabilistic graph-based dependency parsing with convo-
lutional neural network. In Proceedings of the 54th Annual Meeting of the Association for Computational
Linguistics (ACL), pages 1382–1392, Berlin, Germany, August.

Zhi-Min Zhou, Yu Xu, Zheng-Yu Niu, Man Lan, Jian Su, and Chew Lim Tan. 2010. Predicting discourse con-
nectives for implicit discourse relation recognition. In Proceedings of the 23rd International Conference on
Computational Linguistics (COLING), pages 1507–1514, Beijing, China, August.


