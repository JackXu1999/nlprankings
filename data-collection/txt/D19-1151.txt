



















































Efficient Convolutional Neural Networks for Diacritic Restoration


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 1442–1448,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

1442

Efficient Convolutional Neural Networks for Diacritic Restoration

Sawsan Alqahtani∗2,3 and Ajay Mishra1 and Mona Diab1,2
1AWS, Amazon AI

2The George Washington University
3Princess Nourah Bint Abdul Rahman University

sawsanq@gwu.edu, misaja@amazon.com, diabmona@amazon.com

Abstract

Diacritic restoration has gained importance
with the growing need for machines to under-
stand written texts. The task is typically mod-
eled as a sequence labeling problem and cur-
rently Bidirectional Long Short Term Mem-
ory (BiLSTM) models provide state-of-the-art
results. Recently, Bai et al. (2018) show the
advantages of Temporal Convolutional Neu-
ral Networks (TCN) over Recurrent Neural
Networks (RNN) for sequence modeling in
terms of performance and computational re-
sources. As diacritic restoration benefits from
both previous as well as subsequent timesteps,
we further apply and evaluate a variant of
TCN, Acausal TCN (A-TCN), which incor-
porates context from both directions (previ-
ous and future) rather than strictly incorporat-
ing previous context as in the case of TCN.
A-TCN yields significant improvement over
TCN for diacritization in three different lan-
guages: Arabic, Yoruba, and Vietnamese. Fur-
thermore, A-TCN and BiLSTM have compa-
rable performance, making A-TCN an effi-
cient alternative over BiLSTM since convo-
lutions can be trained in parallel. A-TCN
is significantly faster than BiLSTM at infer-
ence time (270%∼334% improvement in the
amount of text diacritized per minute).

1 Introduction

A diacritic is a mark that is added above, below, or
within a letter, constructing a new letter or charac-
terizing it with a different sound (Wells, 2000).
In languages such as Arabic and Hebrew, some
vowels are not part of the alphabet and diacritics
are used for vowel specification. Moreover, many
languages that include diacritics such as Yoruba
and Vietnamese sometimes omit them in writing

∗*The work was done while the author was an intern at
AWS, Amazon AI.

for various reasons such as difficulty in typing di-
acritics on keyboards or digitizing electronic text
(Scannell, 2011).

Arabic, on the other hand, considers diacritics
as an optional choice in writing even in formal
settings,1 and familiarity with the language is re-
lied upon to derive the meaning based on context.
Although people can extrapolate missing diacrit-
ics with near perfect accuracy in such languages,
missing diacritics pose a challenge for computa-
tional models due to increased ambiguity.

Diacritization is the process of automatically
restoring missing diacritics for each character in
written text. It is important in many NLP ap-
plications such as automatic speech recognition
(Vergyri and Kirchhoff, 2004) and speech synthe-
sis (Ungurean et al., 2008). Most state-of-the-
art diacritization models use Bidirectional Long
Short Term Memory (BiLSTM) (Hochreiter and
Schmidhuber, 1997) as a sequential classification
problem, or as a sequence-to-sequence transduc-
tion problem to convert the original text into dia-
critized form (Orife, 2018; Zalmout and Habash,
2017; Belinkov and Glass, 2015). Generally
speaking, LSTM has shown great success for se-
quential data, leveraging long range dependencies
and preserving the temporal order of the sequence
(Cho et al., 2014; Graves, 2013). However, LSTM
requires intensive computational resources both
for training and inference due to its sequential na-
ture.

As an alternative, recent NLP technologies such
as machine translation (Gehring et al., 2017) and
language modeling (Dauphin et al., 2016) have in-
vestigated other models such as convolutional neu-
ral networks (CNN). Convolutional-based archi-
tectures utilize hierarchical rather than sequential
relationships between the input elements. Tem-

1With the exception of religious scripture and educational
books for children, which are always diacritized.



1443

poral Convolutional Networks (TCN) is a generic
family of architectures that has been developed
to alleviate the problem of training deep sequen-
tial models and is shown to provide significant
improvement over LSTMs across different bench-
marks (Bai et al., 2018; Lea et al., 2017). TCNs
integrate causal convolutions where output at a
certain time is convolved only with elements from
earlier times in the previous layers. In addition,
it is possible to train deep sequential models in
parallel and use lower computational requirements
rendering TCNs scalable to larger datasets.

In this study, we evaluate the application of the
TCN architecture as described in (Bai et al., 2018)
but devised as a character-level sequence model
for diacritization since character-based models
generalize better to unseen data compared to
word-based models for most languages. Because
diacritization is dependent on both past and fu-
ture states, we further apply a variant of TCNs,
namely Acausal Temporal Convolutional Network
(A-TCN) (Lea et al., 2017), allowing the model to
learn from previous as well as future context. We
evaluate the architectures on three very different
languages: Arabic, Vietnamese, and Yoruba.

To the best of our knowledge, TCN and A-TCN
have not been investigated before for diacritiza-
tion. In this paper, we show that A-TCN out-
performs TCN while yielding comparable perfor-
mance to BiLSTM but with the added advantage
of being more efficient (speed and less computa-
tional footprint, i.e. decreased need for significant
computational resources).

2 Related Work

A fair number of studies have been developed for
the task of diacritization for different languages
that include diacritics (Yarowsky, 1994; De Pauw
et al., 2007; Scannell, 2011; Alqahtani et al., 2016,
2019). Feature engineering and classical ma-
chine learning algorithms such as Hidden Markov
Models, Maximum Entropy Models, and Finite
State Transducer were the dominant approaches
(Nelken and Shieber, 2005; Zitouni et al., 2006;
Elshafei et al., 2006). However, recent studies
show significant improvement using deep neural
networks (Belinkov and Glass, 2015; Pham et al.,
2017; Orife, 2018). While these deep models
achieve state-of-the-art performance, they mainly
rely on the use of recurrent architectures such as
BiLSTM, which are relatively inefficient.

Pham et al. (2017) view the task of diacriti-
zation for Vietnamese as a machine transduction
problem from undiacritized to diacritized text at
the word level. Orife (2018) addresses the prob-
lem on Yoruba in a similar way and compares soft-
and self- attention sequence-to-sequence perfor-
mance on the word level empirically showing that
self-attention significantly outperforms BiLSTM.

Náplava et al. (2018) uses BiLSTM models
with residual connections to train deeper models at
the character level in several languages, including
Vietnamese. For inference, they use beam search
coupled with a language model to select among
the possible diacritic patterns from the output.
Zalmout and Habash (2017) develops a morpho-
logical disambiguation model to determine Ara-
bic morphological features including diacritiza-
tion. They train the model using BiLSTM while
leveraging a LSTM-based language model as well
as other morphological features to rank and score
the output analyses.

3 Approach

We evaluate the performance of convolutional se-
quence models, TCN and A-TCN, in the context
of diacritization and compare that to the recurrent
sequential models, LSTM and BiLSTM. The task
is formulated as a sequence classification such that
we predict a diacritic for each character in the in-
put.2

3.1 Convolutional Neural Network (TCN)

As TCN is a generic family of models, multi-
ple architectures have been successfully developed
(Dauphin et al., 2016; Kalchbrenner et al., 2016;
Oord et al., 2016; Gehring et al., 2017; Lea et al.,
2017; Bai et al., 2018). We choose the TCN ar-
chitecture described in (Bai et al., 2018) [BAI18]
as it integrates best techniques from the previous
architectures while maintaining simplicity.

BAI18’s TCN model satisfies the two main
characteristics that allows sequential modeling:
1. Using 1-D fully convolutional network (Long
et al., 2015) to ensure that the length of each layer
is the same as the input by zero padding; 2. Us-
ing causal convolutions, which convolve output at
time t with elements from time t− 1 and earlier in
the previous layers. As Bai et al. (2018) indicated,

2We have also investigated BiLSTM-CRF, the model
training time has been greatly increased without substantial
improvement in terms of accuracy.



1444

developing a TCN architecture that only consid-
ers these two characteristics restricts how far the
model can utilize previous information. Thus,
to ensure learning from longer effective history,
BAI18 further integrate dilated convolutions (Yu
and Koltun, 2015), enabling an exponentially large
receptive field correlated with the depth of the net-
work. To enable deeper learning, they integrate
a residual block (He et al., 2016), in which each
block includes two layers of dilated causal convo-
lution as fully illustrated in (Bai et al., 2018).

3.2 Acausal Convolutional Neural Network
(A-TCN)

TCN is beneficial for applications that restrict in-
formation flow from the past, such as language
modeling (Bai et al., 2018; Dauphin et al., 2016);
however, this is not sufficient for diacritization. In-
corporating future and past context has been pre-
viously integrated in different versions of TCN
(Lea et al., 2017; Gehring et al., 2017) but it ei-
ther did not enhance the performance of their tasks
or it was evaluated on convolutional sequence-to-
sequence models rather than sequential models as
in the case of our study.

To incorporate both future and past context,
we relax the causality constraint by integrating
acausal convolution rather than causal convolu-
tion, hence A-TCN, as illustrated in Figure 1. A-
TCN is a tweaked variant of TCN such that the
model convolves information from xt−d to xt+d
(previous and following states) instead of xt−d to
xt (previous states) only.3 In our implementation,
we use layer normalization (Ba et al., 2016) rather
than weight normalization. The extent in which
context is considered is influenced by the number
of layers as well as the kernel size. Each char-
acter is constructed from itself and k − 1 charac-
ters, where (k: kernel size) . Additionally, as we
go deeper, the model further incorporates different
additional k−1 characters, skipping d−1 charac-
ters, where (d: dilation factor), to incorporate the
character at the dth position from both sides (see
Figure 1).

4 Experimental Setup

Dataset: For Arabic, we use the Arabic Tree-
bank (ATB) dataset: parts 1, 2, and 3 and fol-
low the same data division as (Diab et al., 2013).

3Lea et al. (2017) investigated acausal convolution in
their architecture but reported insignificant improvement over
causal convolution in their problem space.

Figure 1: A dilated acausal convolution with 3 as a fil-
ter size and dilation factors equals to 1,2, and 4. White
slots represent zero padding while colored slots repre-
sent characters. The remaining components of A-TCN
are fully explained in (Bai et al., 2018).

Data Arabic Vietnamese Yoruba
Train 502,938 800,022 800,771
Test 63,168 786,236 44,598
Dev 63,126 408,093 44,314
OOV 7.3% 1.3% 2.6%

Table 1: Number of word tokens as well as Out-Of-
Vocabulary (OOV) rate. OOV rate indicates the per-
centage of undiacritized words in the test set not ob-
served during training.

We use datasets provided by Orife (2018) and
Jakub Nplava (2018) for Yoruba and Vietnamese,
respectively. Most languages, especially those that
are severely impacted by diacritics, rarely have
such amounts of diacritized datasets. Thus, we
sample a moderate size subset of the training data
for Vietnamese, roughly 3.7% to train the models.
In the process, we remove from the training set all
sentences that have at least one word of more than
10 characters,4 or that do not have at least one di-
acritic, or that contain more than 70 words. Table
1 illustrates the dataset statistics.

To augment the dataset without requiring ad-
ditional annotated dataset, we segment each sen-
tence into space tokenized units;5 each unit is
further segmented into its characters and passed
through the model along with a specific number
of previous and future words. We add the spe-
cial word boundary “<w>” between words with
a window size of 10 words before and after the
target word (21 words in total).6

Parameter Setting: The character embedding
vectors are of dimension size 45, randomly ini-

4Vietnamese is characterized by having short word length.
5We did not investigate different types of tokenization.

Relying on white space is simple and avoids additional pre-
processing steps.

6We empirically tuned the window size on dev data.



1445

tialized with a uniform distribution between [-
0.1,0.1]. We use Adam optimization (Kingma and
Ba, 2014) with 0.001 learning rate. For LSTM and
BiLSTM, we use 3 layers and 250 hidden units.
For TCN and A-TCN, we use 3 layers, 500 hid-
den units, and a kernel size of 5. Hidden units
are initialized randomly using Xavier (Glorot and
Bengio, 2010) with a magnitude of 3. For regular-
ization, the dropout is set to 0.5 (Srivastava et al.,
2014). We increase the dilation factor in TCN ex-
ponentially with the depth of the network.

5 Results

System DER WER OOV
Arabic

Pasha et al. (2014) - 12.3% 29.8%
Zalmout and Habash
(2017)

- 8.3% 20.2%

LSTM 19.2% 51.9% 86.6%
TCN 17.5% 47.6% 87.2%
BiLSTM 2.8% 8.2% 33.6%
A-TCN 3.0% 10.2% 36.3%

Vietnamese
Náplava et al. (2018) 11.2% 44.5% -
LSTM 13.3% 39.5% 33.1%
TCN 11.1% 32.9% 32.4%
BiLSTM 2.6% 7.8% 15.3%
A-TCN 2.5% 7.7% 15.3%

Yoruba
Orife (2018) - 4.6% -
LSTM 13.4% 37.2% 84.9%
TCN 12.7% 35.5% 83.8%
BiLSTM 3.6% 12.1% 69.3%
A-TCN 3.8% 12.6% 70.2%

Table 2: Models’ performance on all words and OOV
words per language. For Vietnamese, Náplava et al.
(2018) reports 2.45% for WER on a much larger dataset
(∼25M words), which is significantly better than our
model.

We use two standard accuracy measures for
evaluation: Diacritic Error Rate (DER) and Word
Error Rate (WER). Table 2 shows the performance
of the considered architectures across the sample
languages.

Importance of modeling past and future con-
text: A-TCN yields significant improvement
over TCN, which indicates the importance of con-
sidering future and previous context for diacriti-
zation. Similarily BiLSTM significantly outper-
forms LSTM across all three languages. Overall,
architectures that allow only unidirectional infor-
mation flow provide lower performance than those
that utilize context from both directions.

Recurrent vs. convolutional architectures: In
line with prior work, across all three languages,
TCN outperforms LSTM in the unidirectional ar-
chitectures. A-TCN yields comparable results to
BiLSTM except in the case of Arabic where the
WER drops by ∼2%.

OOV rate performance To evaluate the
model’s robustness beyond observed training
data, we specifically compare their WER per-
formance on Out-Of-Vocabulary (OOV) words.
BiLSTM has better ability to generalize on unseen
data compared to A-TCN in Arabic and Yoruba,
whereas both architectures are comparable in
Vietnamese.

Qualitative Analysis: For Arabic, we further
examine the impact of both BiLSTM and A-TCN
on syntactic diacritics, aka inflectional diacritics
which reflect syntactic case and mood primarily.
These inflectional diacritics typically occur word
finally in broken plurals and singular nouns as di-
acritics indicating syntactic case. Verbal mood is
also marked word finally on verbs. We approxi-
mate the inflectional diacritics by computing the
percentage of incorrectly predicted diacritics for
the last characters of each word. BiLSTM yields a
better performance (5.1% WER) compared to A-
TCN (5.9% WER).

In addition, we randomly choose 20 sentences
(605 words) to examine their categorical errors.
We found similar errors in both architectures
which include passive and active voice (e.g. �H�Qå

�
�

�	
�

/ na$arat7 “spread” and �H�Qå��
�	
� / nu$irat “been

spread”), inflectional diacritics (e.g.
�

Èñ
�


�
ð /

wuSuwla and
�

Èñ
�


�
ð / wuSuwlu, both mean “ar-

rival” but have different syntactic positions), and
named entities.8 Thus, incorporating information
from longer history in TCN architectures such as
A-TCN compared to recurrent models such BiL-
STM did not enhance learning inflectional diacrit-
ics.

We analyzed the confusion matrix and found
that both architectures BiLSTM and A-TCN ex-
hibit similar trends in the types of generated er-
rors. In Arabic, the top two diacritics that are in-

7We adopt Buckwalter Transliteration encod-
ing into Latin script for rendering Arabic text
http://www.qamus.org/transliteration.htm.

8Diacritics in named entities are usually not consistent
even among native speakers.



1446

Lang BiLSTM A-TCN Difference
Time Efficiency

AR 376.85 132.55 -64.8% +284%
VI 4187.81 1542.34 -63.2% +271%

YO 461.19 138.45 -70.0% +334%

Table 3: Inference time in seconds for each architec-
ture across languages. Efficiency is defined in terms of
text diacritization rate (amount of text diacritized per
minute).

correctly diacritized by both A-TCN and BiLSTM
(normalized by their frequencies) are N and ∼N
which represent indefiniteness with and without
doubling the consonants. The least diacritics that
are incorrectly diacritized are no diacritics, sukun
which represents the absence of diacritics, and two
short vowels i and a. This is consistent with the
frequency of diacritics in Arabic except that in the
diacritic u which is also frequent but falls in the
middle range of errors; this diacritic usually repre-
sents passive voice in Arabic which relies on syn-
tactic relations between words. The same behavior
can be found in Vietnamese and Yoruba where top
and least erroneous diacritics are shared between
both architectures.

Efficiency Comparison: We provide a compar-
ative analysis of models’ training and inference
runtime (Table 3). During training time, A-TCN
yields similar efficiency gains across all three lan-
guages with comparable performance in terms of
accuracy. The convergence criteria was set as
at least 1% improvement in accuracy from the
previous epoch. During inference time, A-TCN
was 2.7∼3.3X faster in diacritizing text while
providing comparable accuracy. This leads to
271∼334% improvement in terms of text diacriti-
zation rate in the amount of text diacritized per
minute. This supports our overall observation that
A-TCN is a solid alternative to BiLSTM for this
problem space due to its efficient performance es-
pecially for industrial settings where time is a cru-
cial factor. All experiments were carried out on a
single Tesla P100 GPU.

For Arabic, for instance, BiLSTM took ∼19
hours to converge while A-TCN took ∼14 hours.
The DER were 2.8% and 3.0% respectively. Thus,
A-TCN was 24% faster than BiLSTM while being
marginally lower by 0.2% in terms of DER.

Comparison to Prior Work: Table 2 shows
the performance of previous models trained on
the same data. For Arabic, both A-TCN and

BiLSTM provide significantly better performance
than MADAMIRA (Pasha et al., 2014), which
is a morphological disambiguation tool for Ara-
bic. The performance of Zalmout and Habash
(2017)’s model falls in between BiLSTM and A-
TCN. As opposed to our character-based models,
both previous models use other morphological fea-
tures along with a language model to rank all pos-
sible diacritic choices. We believe that this ad-
ditional semantic and morphological information
help their models perform better on OOV words.

For Vietnamese, when we re-train Náplava et al.
(2018) model on the same sample discussed in
Section 4, both A-TCN and BiLSTM provide sig-
nificantly better results. Náplava et al. (2018) also
use BiLSTM but with different parameter settings
and different dataset preparation.9 For Yoruba,
both character-based architectures provide lower
performance than Orife (2018)’s model. However,
Orife (2018) uses seq2seq modeling which gener-
ate diacritized sentences that are not of the same
length as the input and can generate words not
present in the original sentence (hallucinations).
This is unpleasant behaviour for diacritization es-
pecially if used in text-to-speech applications.

6 Conclusion

In this study, we show that character-based convo-
lutional architectures for diacritization yield com-
parable performance to both word and character
based RNN ones for multiple languages, albeit at
a significantly lower computational cost. More-
over, character based modeling yields better per-
formance overall for the diacritization task.

In all cases, A-TCN performs much better than
TCN, with a reduction of up to 40% in error
rate, which means that using future information
is crucial in diacritization. All in all, the deci-
sion whether to use A-TCN or BiLSTM is a trade-
off between accuracy and efficiency. A-TCN pro-
vides efficient solutions with comparable accu-
racy and comes in more handy for applications
that need predicting diacritics on the fly such as
text-to-speech applications and simultaneous ma-
chine translation. A-TCN was 2.7∼3.3X faster
than BiLSTM at inference time (271%∼334% im-
provement in the amount of text diacritized per
minute), crucially at comparable accuracies, mak-
ing it a very attractive solution for industrial appli-
cations in particular.

9We augment the dataset as explained in Section 4.



1447

References
Sawsan Alqahtani, Hanan Aldarmaki, and Mona Diab.

2019. Homograph disambiguation through selective
diacritic restoration. In Proceedings of the Fourth
Arabic Natural Language Processing Workshop.

Sawsan Alqahtani, Mahmoud Ghoneim, and Mona
Diab. 2016. Investigating the impact of various par-
tial diacritization schemes on arabic-english statisti-
cal machine translation. In AMTA.

Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hin-
ton. 2016. Layer normalization. arXiv preprint
arXiv:1607.06450.

Shaojie Bai, J. Zico Kolter, and Vladlen Koltun. 2018.
An empirical evaluation of generic convolutional
and recurrent networks for sequence modeling.

Yonatan Belinkov and James Glass. 2015. Arabic di-
acritization with recurrent neural networks. In Pro-
ceedings of the 2015 Conference on Empirical Meth-
ods in Natural Language Processing, pages 2281–
2285.

Kyunghyun Cho, Bart Van Merriënboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014. On the properties
of neural machine translation: Encoder-decoder ap-
proaches. arXiv preprint arXiv:1409.1259.

Yann N Dauphin, Angela Fan, Michael Auli, and
David Grangier. 2016. Language modeling with
gated convolutional networks. arXiv preprint
arXiv:1612.08083.

Guy De Pauw, Peter W Wagacha, and Gilles-Maurice
De Schryver. 2007. Automatic diacritic restora-
tion for resource-scarce languages. In International
Conference on Text, Speech and Dialogue, pages
170–179. Springer.

Mona Diab, Nizar Habash, Owen Rambow, and Ryan
Roth. 2013. LDC Arabic treebanks and associated
corpora: Data divisions manual.

Moustafa Elshafei, Husni Al-Muhtaseb, and Mansour
Alghamdi. 2006. Statistical methods for automatic
diacritization of Arabic text. In The Saudi 18th Na-
tional Computer Conference. Riyadh, volume 18,
pages 301–306.

Jonas Gehring, Michael Auli, David Grangier, De-
nis Yarats, and Yann N Dauphin. 2017. Convolu-
tional sequence to sequence learning. arXiv preprint
arXiv:1705.03122.

Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difficulty of training deep feedforward neu-
ral networks. In Proceedings of the thirteenth in-
ternational conference on artificial intelligence and
statistics, pages 249–256.

Alex Graves. 2013. Generating sequences with
recurrent neural networks. arXiv preprint
arXiv:1308.0850.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian
Sun. 2016. Deep residual learning for image recog-
nition. In Proceedings of the IEEE conference on
computer vision and pattern recognition, pages 770–
778.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Pavel Strak Jan Haji Jakub Nplava, Milan Straka. 2018.
Diacritics restoration using neural networks. LREC.

Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan,
Aaron van den Oord, Alex Graves, and Koray
Kavukcuoglu. 2016. Neural machine translation in
linear time. arXiv preprint arXiv:1610.10099.

Diederik P. Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization.

Colin Lea, Michael D. Flynn, Rene Vidal, Austin Re-
iter, and Gregory D. Hager. 2017. Temporal con-
volutional networks for action segmentation and de-
tection. 2017 IEEE Conference on Computer Vision
and Pattern Recognition (CVPR).

Jonathan Long, Evan Shelhamer, and Trevor Darrell.
2015. Fully convolutional networks for semantic
segmentation. In Proceedings of the IEEE confer-
ence on computer vision and pattern recognition,
pages 3431–3440.

Jakub Náplava, Milan Straka, Pavel Straňák, and Jan
Hajič. 2018. Diacritics restoration using neural
networks. In Proceedings of the 11th Language
Resources and Evaluation Conference, Miyazaki,
Japan. European Language Resource Association.

Rani Nelken and Stuart M Shieber. 2005. Arabic di-
acritization using weighted finite-state transducers.
In Proceedings of the ACL Workshop on Computa-
tional Approaches to Semitic Languages, pages 79–
86. Association for Computational Linguistics.

Aaron van den Oord, Sander Dieleman, Heiga Zen,
Karen Simonyan, Oriol Vinyals, Alex Graves,
Nal Kalchbrenner, Andrew Senior, and Koray
Kavukcuoglu. 2016. Wavenet: A generative model
for raw audio. arXiv preprint arXiv:1609.03499.

Iroro Orife. 2018. Attentive sequence-to-sequence
learning for diacritic restoration of Yorùbá language
text. Interspeech 2018.

Arfath Pasha, Mohamed Al-Badrashiny, Mona T Diab,
Ahmed El Kholy, Ramy Eskander, Nizar Habash,
Manoj Pooleery, Owen Rambow, and Ryan Roth.
2014. Madamira: A fast, comprehensive tool for
morphological analysis and disambiguation of Ara-
bic. In LREC, volume 14, pages 1094–1101.

Thai-Hoang Pham, Xuan-Khoai Pham, and Phuong Le-
Hong. 2017. On the use of machine translation-
based approaches for vietnamese diacritic restora-
tion. 2017 International Conference on Asian Lan-
guage Processing (IALP).

http://arxiv.org/abs/1803.01271
http://arxiv.org/abs/1803.01271
http://arxiv.org/abs/1309.5652
http://arxiv.org/abs/1309.5652
http://arxiv.org/abs/1412.6980
http://arxiv.org/abs/1412.6980
https://doi.org/10.1109/cvpr.2017.113
https://doi.org/10.1109/cvpr.2017.113
https://doi.org/10.1109/cvpr.2017.113
https://www.aclweb.org/anthology/L18-1247
https://www.aclweb.org/anthology/L18-1247
https://doi.org/10.21437/interspeech.2018-42
https://doi.org/10.21437/interspeech.2018-42
https://doi.org/10.21437/interspeech.2018-42
https://doi.org/10.1109/ialp.2017.8300596
https://doi.org/10.1109/ialp.2017.8300596
https://doi.org/10.1109/ialp.2017.8300596


1448

Kevin P. Scannell. 2011. Statistical unicodification of
African languages. Language resources and evalu-
ation, 45(3):375–386.

Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. The Journal of Machine Learning
Research, 15(1):1929–1958.

Cătălin Ungurean, Dragoş Burileanu, Vladimir
Popescu, Cristian Negrescu, and Aurelian Dervis.
2008. Automatic diacritic restoration for a TTS-
based e-mail reader application. UPB Scientific
Bulletin, Series C, 70(4):3–12.

Dimitra Vergyri and Katrin Kirchhoff. 2004. Auto-
matic diacritization of Arabic for acoustic model-
ing in speech recognition. In COLING 2004 Com-
putational Approaches to Arabic Script-based Lan-
guages, pages 66–73, Geneva, Switzerland. COL-
ING.

JC Wells. 2000. Orthographic diacritics and multilin-
gual computing. Language problems and language
planning, 24(3):249–272.

David Yarowsky. 1994. Decision lists for lexical am-
biguity resolution. Proceedings of the 32nd annual
meeting on Association for Computational Linguis-
tics -.

Fisher Yu and Vladlen Koltun. 2015. Multi-scale con-
text aggregation by dilated convolutions.

Nasser Zalmout and Nizar Habash. 2017. Don’t throw
those morphological analyzers away just yet: Neural
morphological disambiguation for Arabic. In Pro-
ceedings of the 2017 Conference on Empirical Meth-
ods in Natural Language Processing, pages 704–
713, Copenhagen, Denmark. Association for Com-
putational Linguistics.

Imed Zitouni, Jeffrey S Sorensen, and Ruhi Sarikaya.
2006. Maximum entropy based restoration of Ara-
bic diacritics. In Proceedings of the 21st Interna-
tional Conference on Computational Linguistics and
the 44th annual meeting of the Association for Com-
putational Linguistics, pages 577–584. Association
for Computational Linguistics.

https://doi.org/10.1007/s10579-011-9150-3
https://doi.org/10.1007/s10579-011-9150-3
https://www.aclweb.org/anthology/W04-1612
https://www.aclweb.org/anthology/W04-1612
https://www.aclweb.org/anthology/W04-1612
https://doi.org/10.3115/981732.981745
https://doi.org/10.3115/981732.981745
http://arxiv.org/abs/1511.07122
http://arxiv.org/abs/1511.07122
https://doi.org/10.18653/v1/D17-1073
https://doi.org/10.18653/v1/D17-1073
https://doi.org/10.18653/v1/D17-1073

