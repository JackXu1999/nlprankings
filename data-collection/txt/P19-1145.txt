



















































Lightweight and Efficient Neural Natural Language Processing with Quaternion Networks


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 1494–1503
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

1494

Lightweight and Efficient Neural Natural Language Processing
with Quaternion Networks

1Yi Tay, 2Aston Zhang, 3Luu Anh Tuan, 4Jinfeng Rao∗, 5Shuai Zhang
6Shuohang Wang, 7Jie Fu, 8Siu Cheung Hui

1,8Nanyang Technological University, 2Amazon AI, 3MIT CSAIL
4Facebook AI, 5UNSW, 6Singapore Management University,

7Mila and Polytechnique Montréal
ytay017@e.ntu.edu.sg

Abstract

Many state-of-the-art neural models for NLP
are heavily parameterized and thus memory
inefficient. This paper proposes a series of
lightweight and memory efficient neural ar-
chitectures for a potpourri of natural language
processing (NLP) tasks. To this end, our mod-
els exploit computation using Quaternion al-
gebra and hypercomplex spaces, enabling not
only expressive inter-component interactions
but also significantly (75%) reduced parame-
ter size due to lesser degrees of freedom in
the Hamilton product. We propose Quaternion
variants of models, giving rise to new architec-
tures such as the Quaternion attention Model
and Quaternion Transformer. Extensive exper-
iments on a battery of NLP tasks demonstrates
the utility of proposed Quaternion-inspired
models, enabling up to 75% reduction in pa-
rameter size without significant loss in perfor-
mance.

1 Introduction

Neural network architectures such as Transform-
ers (Vaswani et al., 2017; Dehghani et al., 2018)
and attention networks (Parikh et al., 2016; Seo
et al., 2016; Bahdanau et al., 2014) are dominant
solutions in natural language processing (NLP) re-
search today. Many of these architectures are pri-
marily concerned with learning useful feature rep-
resentations from data in which providing a strong
architectural inductive bias is known to be ex-
tremely helpful for obtaining stellar results.

Unfortunately, many of these models are known
to be heavily parameterized, with state-of-the-art
models easily containing millions or billions of
parameters (Vaswani et al., 2017; Radford et al.,
2018; Devlin et al., 2018; Radford et al., 2019).
This renders practical deployment challenging. As
such, the enabling of efficient and lightweight

∗ Work done while at University of Maryland.

adaptations of these models, without significantly
degrading performance, would certainly have a
positive impact on many real world applications.

To this end, this paper explores a new way to
improve/maintain the performance of these neural
architectures while substantially reducing the pa-
rameter cost (compression of up to 75%). In or-
der to achieve this, we move beyond real space,
exploring computation in Quaternion space (i.e.,
hypercomplex numbers) as an inductive bias. Hy-
percomplex numbers comprise of a real and three
imaginary components (e.g., i, j, k) in which inter-
dependencies between these components are en-
coded naturally during training via the Hamilton
product ⊗. Hamilton products have fewer degrees
of freedom, enabling up to four times compres-
sion of model size. Technical details are deferred
to subsequent sections.

While Quaternion connectionist architectures
have been considered in various deep learn-
ing application areas such as speech recogni-
tion (Parcollet et al., 2018b), kinematics/human
motion (Pavllo et al., 2018) and computer vi-
sion (Gaudet and Maida, 2017), our work is the
first hypercomplex inductive bias designed for a
wide spread of NLP tasks. Other fields have mo-
tivated the usage of Quaternions primarily due
to their natural 3 or 4 dimensional input features
(e.g., RGB scenes or 3D human poses) (Parcol-
let et al., 2018b; Pavllo et al., 2018). In a similar
vein, we can similarly motivate this by considering
the multi-sense nature of natural language (Li and
Jurafsky, 2015; Neelakantan et al., 2015; Huang
et al., 2012). In this case, having multiple em-
beddings or components per token is well-aligned
with this motivation.

Latent interactions between components may
also enjoy additional benefits, especially pertain-
ing to applications which require learning pair-
wise affinity scores (Parikh et al., 2016; Seo



1495

et al., 2016). Intuitively, instead of regular (real)
dot products, Hamilton products ⊗ extensively
learn representations by matching across multiple
(inter-latent) components in hypercomplex space.
Alternatively, the effectiveness of multi-view and
multi-headed (Vaswani et al., 2017) approaches
may also explain the suitability of Quaternion
spaces in NLP models. The added advantage
to multi-headed approaches is that Quaternion
spaces explicitly encodes latent interactions be-
tween these components or heads via the Hamilton
product which intuitively increases the expressive-
ness of the model. Conversely, multi-headed em-
beddings are generally independently produced.

To this end, we propose two Quaternion-
inspired neural architectures, namely, the Quater-
nion attention model and the Quaternion Trans-
former. In this paper, we devise and formulate
a new attention (and self-attention) mechanism in
Quaternion space using Hamilton products. Trans-
formation layers are aptly replaced with Quater-
nion feed-forward networks, yielding substantial
improvements in parameter size (of up to 75%
compression) while achieving comparable (and
occasionally better) performance.

Contributions All in all, we make the following
major contributions:

• We propose Quaternion neural models for
NLP. More concretely, we propose a novel
Quaternion attention model and Quaternion
Transformer for a wide range of NLP tasks.
To the best of our knowledge, this is the first
formulation of hypercomplex Attention and
Quaternion models for NLP.

• We evaluate our Quaternion NLP models on
a wide range of diverse NLP tasks such as
pairwise text classification (natural language
inference, question answering, paraphrase
identification, dialogue prediction), neural
machine translation (NMT), sentiment anal-
ysis, mathematical language understanding
(MLU), and subject-verb agreement (SVA).

• Our experimental results show that Quater-
nion models achieve comparable or better
performance to their real-valued counterparts
with up to a 75% reduction in parameter
costs. The key advantage is that these mod-
els are expressive (due to Hamiltons) and also
parameter efficient. Moreover, our Quater-

nion components are self-contained and play
well with real-valued counterparts.

2 Background on Quaternion Algebra

This section introduces the necessary background
for this paper. We introduce Quaternion algebra
along with Hamilton products, which form the
crux of our proposed approaches.

Quaternion A Quaternion Q ∈ H is a hy-
percomplex number with three imaginary compo-
nents as follows:

Q = r + xi+ yj+ zk, (1)

where ijk = i2 = j2 = k2 = −1 and noncom-
mutative multiplication rules apply: ij = k, jk =
i,ki = j, ji = −k,kj = −i, ik = −j. In (1), r is
the real value and similarly, x, y, z are real num-
bers that represent the imaginary components of
the Quaternion vector Q. Operations on Quater-
nions are defined in the following.

Addition The addition of two Quaternions is de-
fined as:

Q+ P = Qr + Pr + (Qx + Px)i

+(Qy + Py)j+ (Qz + Pz)k,

where Q and P with subscripts denote the real
value and imaginary components of Quaternion Q
and P . Subtraction follows this same principle
analogously but flipping + with −.

Scalar Multiplication Scalar α multiplies
across all components, i.e.,

αQ = αr + αxi+ αyj+ αzk.

Conjugate The conjugate of Q is defined as:

Q∗ = r − xi− yj− zk.

Norm The unit Quaternion Q/ is defined as:

Q/ =
Q√

r2 + x2 + y2 + z2
.

Hamilton Product The Hamilton product,
which represents the multiplication of two
Quaternions Q and P , is defined as:

Q⊗ P = (QrPr −QxPx −QyPy −QzPz)
+ (QxPr +QrPx −QzPy +QyPz) i
+ (QyPr +QzPx +QrPy −QxPz) j
+ (QzPr −QyPx +QxPy +QrPz) k,

(2)



1496

which intuitively encourages inter-latent interac-
tion between all the four components of Q and
P . In this work, we use Hamilton products exten-
sively for vector and matrix transformations that
live at the heart of attention models for NLP.

3 Quaternion Models of Language

In this section, we propose Quaternion neural
models for language processing tasks. We be-
gin by introducing the building blocks, such as
Quaternion feed-forward, Quaternion attention,
and Quaternion Transformers.

3.1 Quaternion Feed-Forward

A Quaternion feed-forward layer is similar to a
feed-forward layer in real space, while the former
operates in hypercomplex space where Hamilton
product is used. Denote by W ∈ H the weight pa-
rameter of a Quaternion feed-forward layer and let
Q ∈ H be the layer input. The linear output of the
layer is the Hamilton product of two Quaternions:
W ⊗Q.

Saving Parameters? How and Why In lieu of
the fact that it might not be completely obvious at
first glance why Quaternion models result in mod-
els with smaller parameterization, we dedicate the
following to address this.

For the sake of parameterization comparison,
let us express the Hamilton product W ⊗ Q in
a Quaternion feed-forward layer in the form of
matrix multiplication, which is used in real-space
feed-forward. Recall the definition of Hamilton
product in (2). Putting aside the Quaterion unit
basis [1, i, j,k]>, W ⊗Q can be expressed as:

Wr −Wx −Wy −Wz
Wx Wr −Wz Wy
Wy Wz Wr −Wx
Wz −Wy Wx Wr



r
x
y
z

 , (3)
where W = Wr +Wxi +Wyj +Wzk and Q is
defined in (1).

We highlight that, there are only 4 distinct pa-
rameter variable elements (4 degrees of freedom),
namely Wr,Wx,Wy,Wz , in the weight matrix
(left) of (3), as illustrated by Figure 1; while in
real-space feed-forward, all the elements of the
weight matrix are different parameter variables
(4 × 4 = 16 degrees of freedom). In other
words, the degrees of freedom in Quaternion feed-
forward is only a quarter of those in its real-space

r x

x’

y z

z’y’r’

Wx Wr -Wz Wy

r x y z

r’

Wr -Wx -Wy -Wz

Wy Wz Wr -Wx Wz
-Wy

Wx Wr

r x

x’

y z

r x y z

y’

r x y z

z’

Figure 1: 4 weight parameter variables
(Wr,Wx,Wy,Wz) are used in 16 pairwise con-
nections between components of the input and output
Quaternions.

counterpart, resulting in a 75% reduction in pa-
rameterization. Such a parameterization reduction
can also be explained by weight sharing (Parcollet
et al., 2018b,a).

Nonlinearity Nonlinearity can be added to a
Quaternion feed-forward layer and component-
wise activation is adopted (Parcollet et al., 2018a):

α(Q) = α(r) + α(x)i+ α(y)j++α(z)k,

where Q is defined in (1) and α(.) is a nonlinear
function such as tanh or ReLU.

3.2 Quaternion Attention
Next, we propose a Quaternion attention model to
compute attention and alignment between two se-
quences. Let A ∈ H`a×d and B ∈ H`b×d be input
word sequences, where `a, `b are numbers of to-
kens in each sequence and d is the dimension of
each input vector. We first compute:

E = A⊗B>,

where E ∈ H`a×`b . We apply Softmax(.) to E
component-wise:

G = ComponentSoftmax(E)

B′ = GRBR +GXBX i+GYBY j+GZBZk,

where G and B with subscripts represent the real
and imaginary components ofG andB. Similarly,
we perform the same on A which is described as
follows:

F = ComponentSoftmax(E>)

A′ = FRAR + FXAX i+ FYAY j+ FZAZk,



1497

where A′ is the aligned representation of B and
B′ is the aligned representation of A. Next, given
A′ ∈ R`b×d, B′ ∈ R`A×d we then compute and
compare the learned alignments:

C1 =
∑

QFFN([A′i;Bi, A
′
i ⊗Bi;A′i −Bi])

C2 =
∑

QFFN([B′i;Ai, B
′
i ⊗Ai;B′i −Ai]),

where QFFN(.) is a Quaternion feed-forward layer
with nonlinearity and [; ] is the component-wise
contatentation operator. i refers to word positional
indices and

∑
over words in the sequence. Both

outputs C1, C2 are then passed

Y = QFFN([C1;C2;C1 ⊗ C2;C1 − C2]),

where Y ∈ H is a Quaternion valued output. In or-
der to train our model end-to-end with real-valued
losses, we concatenate each component and pass
into a final linear layer for classification.

3.3 Quaternion Transformer
This section describes our Quaternion adaptation
of Transformer networks. Transformer (Vaswani
et al., 2017) can be considered state-of-the-art
across many NLP tasks. Transformer networks
are characterized by stacked layers of linear trans-
forms along with its signature self-attention mech-
anism. For the sake of brevity, we outline the spe-
cific changes we make to the Transformer model.

Quaternion Self-Attention The standard self-
attention mechanism considers the following:

A = softmax(
QK>√
dk

)V,

where Q,K, V are traditionally learned via linear
transforms from the input X . The key idea here is
that we replace this linear transform with a Quater-
nion transform.

Q =Wq ⊗X;K =Wk ⊗X;V =Wv ⊗X,

where ⊗ is the Hamilton product and X is the in-
put Quaternion representation of the layer. In this
case, since computation is performed in Quater-
nion space, the parameters of W is effectively re-
duced by 75%. Similarly, the computation of self-
attention also relies on Hamilton products. The
revised Quaternion self-attention is defined as fol-
lows:

A = ComponentSoftmax(
Q⊗K√

dk
)V. (4)

Note that in (4), Q ⊗ K returns four ` × `
matrices (attention weights) for each component
(r, i, j, k). Softmax is applied component-wise,
along with multiplication with V which is multi-
plied in similar fashion to the Quaternion attention
model. Note that the Hamilton product in the self-
attention itself does not change the parameter size
of the network.

Quaternion Transformer Block Aside from
the linear transformations for forming query, key,
and values. Tranformers also contain position
feed-forward networks with ReLU activations.
Similarly, we replace the feed-forward connec-
tions (FFNs) with Quaternion FFNs. We denote
this as Quaternion Transformer (full) while denot-
ing the model that only uses Quaternion FFNs in
the self-attention as (partial). Finally, the remain-
der of the Transformer networks remain identical
to the original design (Vaswani et al., 2017) in the
sense that component-wise functions are applied
unless specified above.

3.4 Embedding Layers
In the case where the word embedding layer is
trained from scratch (i.e., using Byte-pair encod-
ing in machine translation), we treat each embed-
ding to be the concatenation of its four compo-
nents. In the case where pre-trained embeddings
such as GloVe (Pennington et al., 2014) are used,
a nonlinear transform is used to project the embed-
dings into Quaternion space.

3.5 Connection to Real Components
A vast majority of neural components in the deep
learning arsenal operate in real space. As such,
it would be beneficial for our Quaternion-inspired
components to interface seamlessly with these
components. If input to a Quaternion module
(such as Quaternion FFN or attention modules),
we simply treat the real-valued input as a concate-
nation of components r, x, y, z. Similarly, the out-
put of the Quaternion module, if passed to a real-
valued layer, is treated as a [r;x; y; z], where [; ] is
the concatenation operator.

Output layer and Loss Functions To train our
model, we simply concatenate all r, i, j, k compo-
nents into a single vector at the final output layer.
For example, for classification, the final Softmax
output is defined as following:

Y = Softmax(W ([r;x; y; z]) + b),



1498

where Y ∈ R|C| where |C| is the number of
classes and x, y, z are the imaginary components.
Similarly for sequence loss (for sequence trans-
duction problems), the same can be also done.

Parameter Initialization It is intuitive that spe-
cialized initialization schemes ought to be devised
for Quaternion representations and their mod-
ules (Parcollet et al., 2018b,a).

w = |w|(cos(θ) + q/imag sin(θ),

where q/imag is the normalized imaginary con-
structed from uniform randomly sampling from
[0, 1]. θ is randomly and uniformly sampled from
[−π, π]. However, our early experiments show
that, at least within the context of NLP appli-
cations, this initialization performed comparable
or worse than the standard Glorot initialization.
Hence, we opt to initialize all components inde-
pendently with Glorot initialization.

4 Experiments

This section describes our experimental setup
across multiple diverse NLP tasks. All experi-
ments were run on NVIDIA Titan X hardware.

Our Models On pairwise text classification, we
benchmark Quaternion attention model (Q-Att),
testing the ability of Quaternion models on pair-
wise representation learning. On all the other
tasks, such as machine translation and subject-
verb agreement, we evaluate Quaternion Trans-
formers. We evaluate two variations of Transform-
ers, full and partial. The full setting converts all
linear transformations into Quaternion space and
is approximately 25% of the actual Transformer
size. The second setting (partial) only reduces
the linear transforms at the self-attention mech-
anism. Tensor2Tensor1 is used for Transformer
benchmarks, which uses its default Hyperparam-
eters and encoding for all experiments.

4.1 Pairwise Text Classification

We evaluate our proposed Quaternion attention
(Q-Att) model on pairwise text classification tasks.
This task involves predicting a label or ranking
score for sentence pairs. We use a total of seven
data sets from problem domains such as:

1https://github.com/tensorflow/
tensor2tensor.

• Natural language inference (NLI) - This
task is concerned with determining if two
sentences entail or contradict each other.
We use SNLI (Bowman et al., 2015), Sc-
iTail (Khot et al., 2018), MNLI (Williams
et al., 2017) as benchmark data sets.

• Question answering (QA) - This task in-
volves learning to rank question-answer
pairs. We use WikiQA (Yang et al., 2015)
which comprises of QA pairs from Bing
Search.

• Paraphrase detection - This task involves
detecting if two sentences are paraphrases of
each other. We use Tweets (Lan et al., 2017)
data set and the Quora paraphrase data set
(Wang et al., 2017).

• Dialogue response selection - This is a re-
sponse selection (RS) task that tries to se-
lect the best response given a message. We
use the Ubuntu dialogue corpus, UDC (Lowe
et al., 2015).

Implementation Details We implement Q-Att
in TensorFlow (Abadi et al., 2016), along with the
Decomposable Attention baseline (Parikh et al.,
2016). Both models optimize the cross entropy
loss (e.g., binary cross entropy for ranking tasks
such as WikiQA and Ubuntu). Models are op-
timized with Adam with the learning rate tuned
amongst {0.001, 0.0003} and the batch size tuned
amongst {32, 64}. Embeddings are initialized
with GloVe (Pennington et al., 2014). For Q-
Att, we use an additional transform layer to
project the pre-trained embeddings into Quater-
nion space. The measures used are generally
the accuracy measure (for NLI and Paraphrase
tasks) and ranking measures (MAP/MRR/Top-1)
for ranking tasks (WikiQA and Ubuntu).

Baselines and Comparison We use the Decom-
posable Attention model as a baseline, adding
[ai; bi; ai � bi; ai − bi] before the compare2 lay-
ers since we found this simple modification to in-
crease performance. This also enables fair com-
parison with our variation of Quaternion attention
which uses Hamilton product over Element-wise
multiplication. We denote this as DeAtt. We eval-
uate at a fixed representation size of d = 200

2This follows the matching function of (Chen et al.,
2016).

https://github.com/tensorflow/tensor2tensor
https://github.com/tensorflow/tensor2tensor


1499

Task NLI QA Paraphrase RS
Measure Accuracy MAP/MRR Accuracy Top-1
Model SNLI SciTail MNLI WikiQA Tweet Quora UDC # Params

DeAtt (d = 50) 83.4 73.8 69.9/70.9 66.0/67.1 77.8 82.2 48.7 200K
DeAtt (d = 200) 86.2 79.0 73.6/73.9 67.2/68.3 80.0 85.4 51.8 700K
Q-Att (d = 50) 85.4 79.6 72.3/72.9 66.2/68.1 80.1 84.1 51.5 200K (-71%)

Table 1: Experimental results on pairwise text classification and ranking tasks. Q-Att achieves comparable or
competitive results compared with DeAtt with approximately one third of the parameter cost.

Model IMDb SST # Params
Transformer 82.6 78.9 400K

Quaternion Transformer (full) 83.9 (+1.3%) 80.5 (+1.6%) 100K (-75.0%)
Quaternion Transformer (partial) 83.6 (+1.0%) 81.4 (+2.5%) 300K (-25.0%)

Table 2: Experimental results on sentiment analysis on IMDb and Stanford Sentiment Treebank (SST) data sets.
Evaluation measure is accuracy.

(equivalent to d = 50 in Quaternion space). We
also include comparisons at equal parameteriza-
tion (d = 50 and approximately 200K parame-
ters) to observe the effect of Quaternion represen-
tations. We selection of DeAtt is owing to simplic-
ity and ease of comparison. We defer the prospect
of Quaternion variations of more advanced mod-
els (Chen et al., 2016; Tay et al., 2017b) to future
work.

Results Table 1 reports results on seven differ-
ent and diverse data sets. We observe that a tiny
Q-Att model (d = 50) achieves comparable (or
occasionally marginally better or worse) perfor-
mance compared to DeAtt (d = 200), gaining a
68% parameter savings. The results actually im-
prove on certain data sets (2/7) and are compara-
ble (often less than a percentage point difference)
compared with the d = 200 DeAtt model. More-
over, we scaled the parameter size of the DeAtt
model to be similar to the Q-Att model and found
that the performance degrades quite significantly
(about 2% − 3% lower on all data sets). This
demonstrates the quality and benefit of learning
with Quaternion space.

4.2 Sentiment Analysis

We evaluate on the task of document-level sen-
timent analysis which is a binary classification
problem.

Implementation Details We compare our pro-
posed Quaternion Transformer against the vanilla
Transformer. In this experiment, we use the tiny
Transformer setting in Tensor2Tensor with a vo-
cab size of 8K. We use two data sets, namely

IMDb (Maas et al., 2011) and Stanford Sentiment
Treebank (SST) (Socher et al., 2013).

Results Table 2 reports results the sentiment
classification task on IMDb and SST. We observe
that both the full and partial variation of Quater-
nion Transformers outperform the base Trans-
former. We observe that Quaternion Transformer
(partial) obtains a +1.0% lead over the vanilla
Transformer on IMDb and +2.5% on SST. This
is while having a 24.5% saving in parameter
cost. Finally the full Quaternion version leads
by +1.3%/1.6% gains on IMDb and SST respec-
tively while maintaining a 75% reduction in pa-
rameter cost. This supports our core hypothesis of
improving accuracy while saving parameter costs.

4.3 Neural Machine Translation

We evaluate our proposed Quaternion Transformer
against vanilla Transformer on three data sets
on this neural machine translation (NMT) task.
More concretely, we evaluate on IWSLT 2015 En-
glish Vietnamese (En-Vi), WMT 2016 English-
Romanian (En-Ro) and WMT 2018 English-
Estonian (En-Et). We also include results on the
standard WMT EN-DE English-German results.

Implementation Details We implement models
in Tensor2Tensor and trained for 50k steps for
both models. We use the default base single GPU
hyperparameter setting for both models and aver-
age checkpointing. Note that our goal is not to ob-
tain state-of-the-art models but to fairly and sys-
tematically evaluate both vanilla and Quaternion
Transformers.



1500

BLEU
Model IWSLT’15 En-Vi WMT’16 En-Ro WMT’18 En-Et # Params

Transformer Base 28.4 22.8 14.1 44M
Quaternion Transformer (full) 28.0 18.5 13.1 11M (-75%)

Quaternion Transformer (partial) 30.9 22.7 14.2 29M (-32%)

Table 3: Experimental results on neural machine translation (NMT). Results of Transformer Base on EN-VI
(IWSLT 2015), EN-RO (WMT 2016) and EN-ET (WMT 2018). Parameter size excludes word embeddings. Our
proposed Quaternion Transformer achieves comparable or higher performance with only 67.9% parameter costs
of the base Transformer model.

Results Table 3 reports the results on neural
machine translation. On the IWSLT’15 En-Vi
data set, the partial adaptation of the Quater-
nion Transformer outperforms (+2.5%) the base
Transformer with a 32% reduction in parameter
cost. On the other hand, the full adaptation comes
close (−0.4%) with a 75% reduction in paramter
cost. On the WMT’16 En-Ro data set, Quaternion
Transformers do not outperform the base Trans-
former. We observe a −0.1% degrade in per-
formance on the partial adaptation and −4.3%
degrade on the full adaptation of the Quaternion
Transformer. However, we note that the drop in
performance with respect to parameter savings is
still quite decent, e.g., saving 32% parameters for
a drop of only 0.1 BLEU points. The full adapta-
tion loses out comparatively. On the WMT’18 En-
Et dataset, the partial adaptation achieves the best
result with 32% less parameters. The full adapta-
tion, comparatively, only loses by 1.0 BLEU score
from the original Transformer yet saving 75% pa-
rameters.

WMT English-German Notably, Quater-
nion Transformer achieves a BLEU score of
26.42/25.14 for partial/full settings respectively
on the standard WMT 2014 En-De benchmark.
This is using a single GPU trained for 1M steps
with a batch size of 8192. We note that results do
not differ much from other single GPU runs (i.e.,
26.07 BLEU) on this dataset (Nguyen and Joty,
2019).

4.4 Mathematical Language Understanding

We include evaluations on a newly released
mathematical language understanding (MLU) data
set (Wangperawong, 2018). This data set is a
character-level transduction task that aims to test
a model’s the compositional reasoning capabili-
ties. For example, given an input x = 85, y =
−523, x ∗ y the model strives to decode an output
of −44455. Several variations of these problems

exist, mainly switching and introduction of new
mathematical operators.

Implementation Details We train Quaternion
Transformer for 100K steps using the de-
fault Tensor2Tensor setting following the original
work (Wangperawong, 2018). We use the tiny
hyperparameter setting. Similar to NMT, we re-
port both full and partial adaptations of Quater-
nion Transformers. Baselines are reported from
the original work as well, which includes com-
parisons from Universal Transformers (Dehghani
et al., 2018) and Adaptive Computation Time
(ACT) Universal Transformers. The evaluation
measure is accuracy per sequence, which counts
a generated sequence as correct if and only if the
entire sequence is an exact match.

Results Table 4 reports our experimental re-
sults on the MLU data set. We observe a mod-
est +7.8% accuracy gain when using the Quater-
nion Transformer (partial) while saving 24.5% pa-
rameter costs. Quaternion Transformer outper-
forms Universal Transformer and marginally is
outperformed by Adaptive Computation Universal
Transformer (ACT U-Transformer) by 0.5%. On
the other hand, a full Quaternion Transformer still
outperforms the base Transformer (+2.8%) with
75% parameter saving.

4.5 Subject Verb Agreement

Additionally, we compare our Quaternion Trans-
former on the subject-verb agreement task (Linzen
et al., 2016). The task is a binary classification
problem, determining if a sentence, e.g., ‘The keys
to the cabinet .’ follows by a plural/singular.

Implementation We use the Tensor2Tensor
framework, training Transformer and Quaternion
Transformer with the tiny hyperparameter setting
with 10k steps.

Results Table 5 reports the results on the SVA
task. Results show that Quaternion Transform-



1501

Model Acc / Seq # Params
Universal Transformer 78.8 -
ACT U-Transformer 84.9 -

Transformer 76.1 400K
Quaternion Transformer (full) 78.9 (+2.8%) 100K (-75%)

Quaternion Transformer (partial) 84.4 (+8.3%) 300K ( -25%)

Table 4: Experimental results on mathematical language understanding (MLU). Both Quaternion models outper-
form the base Transformer model with up to 75% parameter savings.

ers perform equally (or better) than vanilla Trans-
formers. On this task, the partial adaptation per-
forms better, improving Transformers by +0.7%
accuracy while saving 25% parameters.

Model Acc Params
Transformer 94.8 400K

Quaternion (full) 94.7 100K
Quaternion (partial) 95.5 300K

Table 5: Experimental results on subject-verb agree-
ment (SVA) number prediction task.

5 Related Work

The goal of learning effective representations lives
at the heart of deep learning research. While most
neural architectures for NLP have mainly explored
the usage of real-valued representations (Vaswani
et al., 2017; Bahdanau et al., 2014; Parikh et al.,
2016), there have also been emerging interest in
complex (Danihelka et al., 2016; Arjovsky et al.,
2016; Gaudet and Maida, 2017) and hypercom-
plex representations (Parcollet et al., 2018b,a;
Gaudet and Maida, 2017).

Notably, progress on Quaternion and hyper-
complex representations for deep learning is still
in its infancy and consequently, most works on
this topic are very recent. Gaudet and Maida pro-
posed deep Quaternion networks for image clas-
sification, introducing basic tools such as Quater-
nion batch normalization or Quaternion initializa-
tion (Gaudet and Maida, 2017). In a similar vein,
Quaternion RNNs and CNNs were proposed for
speech recognition (Parcollet et al., 2018a,b). In
parallel Zhu et al. proposed Quaternion CNNs
and applied them to image classification and de-
noising tasks (Zhu et al., 2018). Comminiello et
al. proposed Quaternion CNNs for sound detec-
tion (Comminiello et al., 2018). (Zhang et al.,
2019) proposed Quaternion embeddings of knowl-
edge graphs. A common theme is that Quaternion

representations are helpful and provide utility over
real-valued representations.

The interest in non-real spaces can be attributed
to several factors. Firstly, complex weight ma-
trices used to parameterize RNNs help to com-
bat vanishing gradients (Arjovsky et al., 2016).
On the other hand, complex spaces are also in-
tuitively linked to associative composition, along
with holographic reduced representations (Plate,
1991; Nickel et al., 2016; Tay et al., 2017a).
Asymmetry has also demonstrated utility in do-
mains such as relational learning (Trouillon et al.,
2016; Nickel et al., 2016) and question answer-
ing (Tay et al., 2018). Complex networks (Trabelsi
et al., 2017), in general, have also demonstrated
promise over real networks.

In a similar vein, the hypercomplex Hamilton
product provides a greater extent of expressive-
ness, similar to the complex Hermitian product, al-
beit with a 4-fold increase in interactions between
real and imaginary components. In the case of
Quaternion representations, due to parameter sav-
ing in the Hamilton product, models also enjoy a
75% reduction in parameter size.

Our work draws important links to multi-
head (Vaswani et al., 2017) or multi-sense (Li
and Jurafsky, 2015; Neelakantan et al., 2015) rep-
resentations that are highly popular in NLP re-
search. Intuitively, the four-component structure
of Quaternion representations can also be inter-
preted as some kind of multi-headed architec-
ture. The key difference is that the basic operators
(e.g., Hamilton product) provides an inductive bias
that encourages interactions between these com-
ponents. Notably, the idea of splitting vectors has
also been explored (Daniluk et al., 2017), which
is in similar spirit to breaking a vector into four
components.



1502

6 Conclusion

This paper advocates for lightweight and efficient
neural NLP via Quaternion representations. More
concretely, we proposed two models - Quaternion
attention model and Quaternion Transformer. We
evaluate these models on eight different NLP tasks
and a total of thirteen data sets. Across all data
sets the Quaternion model achieves comparable
performance while reducing parameter size. All
in all, we demonstrated the utility and benefits of
incorporating Quaternion algebra in state-of-the-
art neural models. We believe that this direction
paves the way for more efficient and effective rep-
resentation learning in NLP. Our Tensor2Tensor
implementation of Quaternion Transformers
will be released at https://github.com/
vanzytay/QuaternionTransformers.

7 Acknowledgements

The authors thank the anonymous reviewers of
ACL 2019 for their time, feedback and comments.

References
Martı́n Abadi, Paul Barham, Jianmin Chen, Zhifeng

Chen, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Geoffrey Irving, Michael Isard,
et al. 2016. Tensorflow: A system for large-scale
machine learning. In 12th {USENIX} Symposium
on Operating Systems Design and Implementation
({OSDI} 16). pages 265–283.

Martin Arjovsky, Amar Shah, and Yoshua Bengio.
2016. Unitary evolution recurrent neural networks.
In International Conference on Machine Learning.
pages 1120–1128.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473 .

Samuel R Bowman, Gabor Angeli, Christopher Potts,
and Christopher D Manning. 2015. A large anno-
tated corpus for learning natural language inference.
arXiv preprint arXiv:1508.05326 .

Qian Chen, Xiaodan Zhu, Zhenhua Ling, Si Wei,
Hui Jiang, and Diana Inkpen. 2016. Enhanced
lstm for natural language inference. arXiv preprint
arXiv:1609.06038 .

Danilo Comminiello, Marco Lella, Simone Scarda-
pane, and Aurelio Uncini. 2018. Quaternion con-
volutional neural networks for detection and lo-
calization of 3d sound events. arXiv preprint
arXiv:1812.06811 .

Ivo Danihelka, Greg Wayne, Benigno Uria, Nal
Kalchbrenner, and Alex Graves. 2016. Asso-
ciative long short-term memory. arXiv preprint
arXiv:1602.03032 .

Michał Daniluk, Tim Rocktäschel, Johannes Welbl,
and Sebastian Riedel. 2017. Frustratingly short at-
tention spans in neural language modeling. arXiv
preprint arXiv:1702.04521 .

Mostafa Dehghani, Stephan Gouws, Oriol Vinyals,
Jakob Uszkoreit, and Łukasz Kaiser. 2018. Univer-
sal transformers. arXiv preprint arXiv:1807.03819
.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805 .

Chase Gaudet and Anthony Maida. 2017. Deep quater-
nion networks. arXiv preprint arXiv:1712.04604 .

Eric H Huang, Richard Socher, Christopher D Man-
ning, and Andrew Y Ng. 2012. Improving word
representations via global context and multiple word
prototypes. In Proceedings of the 50th Annual Meet-
ing of the Association for Computational Linguis-
tics: Long Papers-Volume 1. Association for Com-
putational Linguistics, pages 873–882.

Tushar Khot, Ashish Sabharwal, and Peter Clark. 2018.
Scitail: A textual entailment dataset from science
question answering. In Thirty-Second AAAI Con-
ference on Artificial Intelligence.

Wuwei Lan, Siyu Qiu, Hua He, and Wei Xu. 2017.
A continuously growing dataset of sentential para-
phrases. arXiv preprint arXiv:1708.00391 .

Jiwei Li and Dan Jurafsky. 2015. Do multi-sense em-
beddings improve natural language understanding?
arXiv preprint arXiv:1506.01070 .

Tal Linzen, Emmanuel Dupoux, and Yoav Goldberg.
2016. Assessing the ability of lstms to learn syntax-
sensitive dependencies. Transactions of the Associ-
ation for Computational Linguistics 4:521–535.

Ryan Lowe, Nissan Pow, Iulian Serban, and Joelle
Pineau. 2015. The ubuntu dialogue corpus: A large
dataset for research in unstructured multi-turn dia-
logue systems. arXiv preprint arXiv:1506.08909 .

Andrew L. Maas, Raymond E. Daly, Peter T. Pham,
Dan Huang, Andrew Y. Ng, and Christopher Potts.
2011. Learning word vectors for sentiment analysis.
In Proceedings of the 49th Annual Meeting of the
Association for Computational Linguistics: Human
Language Technologies. Association for Computa-
tional Linguistics, Portland, Oregon, USA, pages
142–150. http://www.aclweb.org/anthology/P11-
1015.

https://github.com/vanzytay/QuaternionTransformers
https://github.com/vanzytay/QuaternionTransformers
http://www.aclweb.org/anthology/P11-1015
http://www.aclweb.org/anthology/P11-1015
http://www.aclweb.org/anthology/P11-1015


1503

Arvind Neelakantan, Jeevan Shankar, Alexandre
Passos, and Andrew McCallum. 2015. Effi-
cient non-parametric estimation of multiple embed-
dings per word in vector space. arXiv preprint
arXiv:1504.06654 .

Phi Xuan Nguyen and Shafiq Joty.
2019. Phrase-based attentions.
https://openreview.net/forum?id=r1xN5oA5tm.

Maximilian Nickel, Lorenzo Rosasco, and Tomaso
Poggio. 2016. Holographic embeddings of knowl-
edge graphs. In Thirtieth Aaai conference on artifi-
cial intelligence.

Titouan Parcollet, Mirco Ravanelli, Mohamed
Morchid, Georges Linarès, Chiheb Trabelsi, Renato
De Mori, and Yoshua Bengio. 2018a. Quater-
nion recurrent neural networks. arXiv preprint
arXiv:1806.04418 .

Titouan Parcollet, Ying Zhang, Mohamed Morchid,
Chiheb Trabelsi, Georges Linarès, Renato De Mori,
and Yoshua Bengio. 2018b. Quaternion con-
volutional neural networks for end-to-end au-
tomatic speech recognition. arXiv preprint
arXiv:1806.07789 .

Ankur P Parikh, Oscar Täckström, Dipanjan Das, and
Jakob Uszkoreit. 2016. A decomposable attention
model for natural language inference. arXiv preprint
arXiv:1606.01933 .

Dario Pavllo, David Grangier, and Michael Auli. 2018.
Quaternet: A quaternion-based recurrent model for
human motion. arXiv preprint arXiv:1805.06485 .

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP). pages 1532–1543.

Tony Plate. 1991. Holographic reduced representa-
tions: Convolution algebra for compositional dis-
tributed representations.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving language under-
standing by generative pre-training .

Alec Radford, Jeffrey Wu, Rewon Child, David Luan,
Dario Amodei, and Ilya Sutskever. 2019. Language
models are unsupervised multitask learners .

Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2016. Bidirectional attention
flow for machine comprehension. arXiv preprint
arXiv:1611.01603 .

Richard Socher, Alex Perelygin, Jean Wu, Jason
Chuang, Christopher D Manning, Andrew Ng, and
Christopher Potts. 2013. Recursive deep models
for semantic compositionality over a sentiment tree-
bank. In Proceedings of the 2013 conference on
empirical methods in natural language processing.
pages 1631–1642.

Yi Tay, Anh Tuan Luu, and Siu Cheung Hui. 2018.
Hermitian co-attention networks for text matching
in asymmetrical domains.

Yi Tay, Minh C Phan, Luu Anh Tuan, and Siu Cheung
Hui. 2017a. Learning to rank question answer pairs
with holographic dual lstm architecture. In Proceed-
ings of the 40th International ACM SIGIR Confer-
ence on Research and Development in Information
Retrieval. ACM, pages 695–704.

Yi Tay, Luu Anh Tuan, and Siu Cheung Hui. 2017b.
Compare, compress and propagate: Enhancing
neural architectures with alignment factorization
for natural language inference. arXiv preprint
arXiv:1801.00102 .

Chiheb Trabelsi, Olexa Bilaniuk, Ying Zhang, Dmitriy
Serdyuk, Sandeep Subramanian, João Felipe Santos,
Soroush Mehri, Negar Rostamzadeh, Yoshua Ben-
gio, and Christopher J Pal. 2017. Deep complex net-
works. arXiv preprint arXiv:1705.09792 .

Théo Trouillon, Johannes Welbl, Sebastian Riedel, Éric
Gaussier, and Guillaume Bouchard. 2016. Com-
plex embeddings for simple link prediction. In In-
ternational Conference on Machine Learning. pages
2071–2080.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems. pages 5998–6008.

Zhiguo Wang, Wael Hamza, and Radu Florian. 2017.
Bilateral multi-perspective matching for natural lan-
guage sentences. arXiv preprint arXiv:1702.03814
.

Artit Wangperawong. 2018. Attending to math-
ematical language with transformers. CoRR
abs/1812.02825. http://arxiv.org/abs/1812.02825.

Adina Williams, Nikita Nangia, and Samuel R Bow-
man. 2017. A broad-coverage challenge corpus for
sentence understanding through inference. arXiv
preprint arXiv:1704.05426 .

Yi Yang, Wen-tau Yih, and Christopher Meek. 2015.
Wikiqa: A challenge dataset for open-domain ques-
tion answering. In Proceedings of the 2015 Con-
ference on Empirical Methods in Natural Language
Processing. pages 2013–2018.

Shuai Zhang, Yi Tay, Lina Yao, and Qi Liu. 2019.
Quaternion knowledge graph embeddings. arXiv
preprint arXiv:1904.10281 .

Xuanyu Zhu, Yi Xu, Hongteng Xu, and Changjian
Chen. 2018. Quaternion convolutional neural net-
works. In Proceedings of the European Conference
on Computer Vision (ECCV). pages 631–647.

https://openreview.net/forum?id=r1xN5oA5tm
https://openreview.net/forum?id=r1xN5oA5tm
http://arxiv.org/abs/1812.02825
http://arxiv.org/abs/1812.02825
http://arxiv.org/abs/1812.02825

