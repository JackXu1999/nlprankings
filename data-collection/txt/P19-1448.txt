




































Representing Schema Structure with Graph Neural Networks for Text-to-SQL Parsing


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 4560–4565
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

4560

Representing Schema Structure with Graph Neural Networks for
Text-to-SQL Parsing

Ben Bogin1 Matt Gardner2 Jonathan Berant1,2

1School of Computer Science, Tel-Aviv University
2Allen Institute for Artificial Intelligence

ben.bogin@cs.tau.ac.il,mattg@allenai.org,joberant@cs.tau.ac.il

Abstract

Research on parsing language to SQL has
largely ignored the structure of the database
(DB) schema, either because the DB was very
simple, or because it was observed at both
training and test time. In SPIDER, a recently-
released text-to-SQL dataset, new and com-
plex DBs are given at test time, and so the
structure of the DB schema can inform the pre-
dicted SQL query. In this paper, we present
an encoder-decoder semantic parser, where the
structure of the DB schema is encoded with
a graph neural network, and this representa-
tion is later used at both encoding and decod-
ing time. Evaluation shows that encoding the
schema structure improves our parser accuracy
from 33.8% to 39.4%, dramatically above the
current state of the art, which is at 19.7%.

1 Introduction

Semantic parsing (Zelle and Mooney, 1996;
Zettlemoyer and Collins, 2005) has recently taken
increased interest in parsing questions into SQL
queries, due to the popularity of SQL as a query
language for relational databases (DBs).

Work on parsing to SQL (Zhong et al., 2017;
Iyer et al., 2017; Finegan-Dollak et al., 2018; Yu
et al., 2018a) has either involved simple DBs that
contain just one table, or had a single DB that is
observed at both training and test time. Conse-
quently, modeling the schema structure received
little attention. Recently, Yu et al. (2018b) pre-
sented SPIDER, a text-to-SQL dataset, where at
test time questions are executed against unseen
and complex DBs. In this zero-shot setup, an in-
formative representation of the schema structure
is important. Consider the questions in Figure 1:
while their language structure is similar, in the
first query a ‘join’ operation is necessary because
the information is distributed across three tables,
while in the other query no ‘join’ is needed.

x : Find the age of students who do not have a cat pet.
y : SELECT age FROM student WHERE
student NOT IN (SELECT ... FROM student JOIN
has pet ... JOIN pets ... WHERE ...)
x : What are the names of teams that do not have match season record?
y : SELECT name FROM team WHERE
team id NOT IN (SELECT team FROM match season)

Figure 1: Examples from SPIDER showing how similar
questions can have different SQL queries, conditioned
on the schema. Table names are underlined.

In this work, we propose a semantic parser that
strongly uses the schema structure. We represent
the structure of the schema as a graph, and use
graph neural networks (GNNs) to provide a global
representation for each node (Li et al., 2016; De
Cao et al., 2019; Sorokin and Gurevych, 2018).
We incorporate our schema representation into the
encoder-decoder parser of Krishnamurthy et al.
(2017), which was designed to parse questions
into queries against unseen semi-structured tables.
At encoding time we enrich each question word
with a representation of the subgraph it is related
to, and at decoding time we emit symbols from the
schema that are related through the graph to previ-
ously decoded symbols.

We evaluate our parser on SPIDER, and show
that encoding the schema structure improves ac-
curacy from 33.8% to 39.4% (and from 14.6%
to 26.8% on questions that involve multiple ta-
bles), well beyond 19.7%, the current state-
of-the-art. We make our code publicly avail-
able at https://github.com/benbogin/
spider-schema-gnn.

2 Problem Setup

We are given a training set {(x(k), y(k), S(k))}Nk=1,
where x(k) is a natural language question, y(k)

is its translation to a SQL query, and S(k) is the
schema of the DB where y(k) is executed. Our



4561

Figure 2: The decoder we base our work on (Krishna-
murthy et al., 2017). The input to the LSTM (gj) at step
j is a learned embedding of the last decoded grammar
rule, except when the last rule is schema-specific (g3),
where the input is a learned embedding of the schema
item type. A grammar rule is selected based on the
LSTM output (oj) and the attended hidden state of the
input LSTM (cj).

goal is to learn a function that maps an unseen
question-schema pair (x, S) to its correct SQL
query. Importantly, the schema S was not seen
at training time, that is, S 6= S(k) for all k.

A DB schema S includes: (a) The set of DB
tables T (e.g., singer), (b) a set of columns Ct
for each t ∈ T (e.g., singer name), and (c) a set
of foreign key-primary key column pairsF , where
each (cf , cp) ∈ F is a relation from a foreign-
key cf in one table to a primary-key cp in another.
We term all schema tables and columns as schema
items and denote them by V = T ∪ {Ct}t∈T .

3 A Neural Semantic Parser for SQL

We base our model on the parser of Krishnamurthy
et al. (2017), along with a grammar for SQL pro-
vided by AllenNLP (Gardner et al., 2018; Lin
et al., 2019), which covers 98.3% of the examples
in SPIDER. This parser uses a linking mechanism
for handling unobserved DB constants at test time.
We review this model in the context of text-to-
SQL parsing, focusing on components we expand
upon in §4.

Linking schema items To handle unseen
schema items, Krishnamurthy et al. (2017) learn
a similarity score slink(v, xi) between a word xi
and a schema item v that has type τ .1 The score
is based on learned word embeddings and a few
manually-crafted features.

1Types are tables, string columns, number columns, etc.

The linking score is used to compute

plink(v | xi) =
exp(slink(v, xi))∑

v′∈Vτ∪{∅} exp(slink(v
′, xi))

,

where Vτ are all schema items of type τ and
slink(∅, ·) = 0 for words that do not link to any
schema item. The functions plink(·) and slink(·)
will be used to decode unseen schema items.

Encoder A Bidirectional LSTM (Hochreiter
and Schmidhuber, 1997) provides a contextual-
ized representation hi for each question word xi.
Importantly, the encoder input at time step i is
[wxi ; li]: the concatenation of the word embedding
for xi and li =

∑
τ

∑
v∈Vτ plink(v | xi) · rv, where

rv is a learned embedding for the schema item v,
based on the type of v and its schema neighbors.
Thus, plink(v | xi) augments every word xi with
information on the schema items it should link to.

Decoder We use a grammar-based (Xiao et al.,
2016; Cheng et al., 2017; Yin and Neubig, 2017;
Rabinovich et al., 2017) LSTM decoder with at-
tention on the input question (Figure 2). At each
decoding step, a non-terminal of type τ is ex-
panded using one of the grammar rules. Rules
are either schema-independent and generate non-
terminals or SQL keywords, or schema-specific
and generate schema items.

At each decoding step j, the decoding LSTM
takes a vector gj as input, which is an embedding
of the grammar rule decoded in the previous step,
and outputs a vector oj . If this rule is schema-
independent, gj is a learned global embedding. If
it is schema-specific, i.e., a schema item v was
generated, gj is a learned embedding τ(v) of its
type. An attention distribution aj over the input
words is computed in a standard manner (Bah-
danau et al., 2015), where the attention score for
every word is h>i oj . It is then used to compute the
weighted average of the input cj =

∑
i ajhj . Now

a distribution over grammar rules is computed by:

s
glob
j = FF(

[
oj ; cj

]
) ∈ RGlegal ,

slocj = Slinkaj ∈ RVlegal ,

pj = softmax([s
glob
j ; s

loc
j ]),

where Glegal, Vlegal are the number of legal rules
(according to the grammar) that can be chosen at
time step j for schema-independent and schema-
specific rules respectively. The score sglobj is com-
puted with a feed-forward network, and the score



4562

Figure 3: Left: DB schema and question. Middle: A graph representation of the schema. Bold nodes are tables,
other nodes are columns. Dashed red (blue) edges are foreign (primary) keys edges, green edges are table-column
edges. Right: Use of the schema by the decoder. For clarity, the decoder outputs tokens rather than grammar rules.

slocj is computed for all legal schema items by mul-
tiplying the matrix Slink ∈ RVlegal×|x|, which con-
tains the relevant linking scores slink(v, xi), with
the attention vector aj . Thus, decoding unseen
schema items is done by first attending to the ques-
tion words, which are linked to the schema items.

4 Modeling Schemas with GNNs

Schema structure is informative for predicting the
SQL query. Consider a table with two columns,
where each is a foreign key to two other tables
(student semester table in Figure 3). Such
a table is commonly used for describing a many-
to-many relation between two other tables, which
affects the output query. We now show how we
represent this information in a neural parser and
use it to improve predictions.

At a high-level our model has the following
parts (Figure 3). (a) The schema is converted to a
graph. (b) The graph is softly pruned conditioned
on the input question. (c) A Graph neural network
generates a representation for nodes that is aware
of the global schema structure. (d) The encoder
and decoder use the schema representation. We
will now elaborate on each part.

Schema-to-graph To convert the schema S to a
graph (Figure 3, left), we define the graph nodes
as the schema items V . We add three types of
edges: for each column ct in a table t, we add
edges (ct, t) and (t, ct) to the edge set E↔ (green
edges). For each foreign-primary key column pair
(ct1 , ct2) ∈ F , we add edges (ct1 , ct2) and (t1, t2)
to the edge set E→ and edges (ct2 , ct1) and (t2, t1)
to E← (dashed edges). Edge types are used by the
graph neural network to capture different ways in

which columns and tables relate to one another.

Question-conditioned relevance Each question
refers to different parts of the schema, and thus,
our representation should change conditioned on
the question. For example, in Figure 3, the re-
lation between the tables student semester
and program is irrelevant. To model that, we
re-use the distribution plink(·) from §3, and de-
fine a relevance score for a schema item v: ρv =
maxi plink(v | xi) — the maximum probability of
v for any word xi. We use this score next to create
a question-conditioned graph representation. Fig-
ure 3 shows relevant schema items in dark orange,
and irrelevant items in light orange.

Neural graph representation To learn a node
representation that considers its relevance score
and the global schema structure, we use gated
GNNs (Li et al., 2016). Each node v is given
an initial embedding conditioned on the relevance
score: h(0)v = rv · ρv. We then apply the GNN
recurrence for L steps. At each step, each node
re-computes its representation based on the repre-
sentation of its neighbors in the previous step:

a(l)v =
∑

type∈{→,↔}

∑
(u,v)∈Etype

Wtypeh
l−1
u + btype,

and then h(l)v is computed as following, using a
standard GRU (Cho et al., 2014) update:

h(l)v = GRU(h
(l−1)
v , a

(l)
v )

(see Li et al. (2016) for further details).
We denote the final representation of each

schema item after L steps by ϕv = h
(L)
v . We now

show how this representation is used by the parser.



4563

Encoder In §3, a weighted average over schema
items li was concatenated to every word xi. To
enjoy the schema-aware representations, we com-
pute lϕi =

∑
τ

∑
v∈Vτ ϕvplink(v | xi), which is

identical to li, except ϕv is used instead of rv. We
concatenate lϕi to the output of the encoder hi, so
that each word is augmented with the graph struc-
ture around the schema items it is linked to.

Decoder As mentioned (§3), when a schema
item v is decoded, the input in the next time step is
its type τ(v). A first change is to replace τ(v) by
ϕv, which has knowledge of the structure around
v. A second change is a self-attention mechanism
that links to the schema, which we describe next.

When scoring a schema item, its score should
depend on its relation to previously decoded
schema items. E.g., in Figure 3, once the table
semester has been decoded, it is likely to be
joined to a related table. We capture this intuition
with a self-attention mechanism.

For each decoding step j, we denote by uj
the hidden state of the decoder, and by Ĵ =
(i1, . . . , i|Ĵ |) the list of time steps before j where a
schema item has been decoded. We define the ma-
trix Û ∈ Rd×|Ĵ | = [ui1 , . . . , ui|Ĵ| ], which concate-
nates the hidden states from all these time steps.
We now compute a self-attention distribution over
these time steps, and score schema items based on
this distribution (Figure 3, right):

âj = softmax(ÛTuj) ∈ R|Ĵ |,
sattj = âjS

att,

pj = softmax([s
glob
j ; s

loc
j + s

att
j ]),

where the matrix Satt ∈ R|Ĵ |×Vlegal com-
putes a similarity between schema items that
were previously decoded, and schema items that
are legal according to the grammar: Sattv1,v2 =
F (ϕv1)

>F (ϕv2), where F (·) is a feed-forward
network. Thus, the score of a schema item
increases, if substantial attention is placed on
schema items to which it bears high similarity.

Training We maximize the log-likelihood of the
gold sequence during training, and use beam-
search (of size 10) at test time, similar to Krish-
namurthy et al. 2017 and prior work. We run the
GNN for L = 2 steps.

Model Acc. SINGLE MULTI
SQLNET 10.9% 13.6% 3.3%
SYNTAXSQLNET 18.9% 23.1% 7.0%
NO GNN 34.9% 52.3% 14.6%
GNN 40.7% 52.2% 26.8%
- NO SELF ATTEND 38.7% 54.5% 20.3%
- ONLY SELF ATTEND 35.9% 47.1% 23.0%
- NO REL. 37.0% 50.4% 21.5%
GNN ORACLE REL. 54.3% 63.5% 43.7%

Table 1: Development set accuracy for all models.

5 Experiments and Results

Experimental setup We evaluate on SPI-
DER (Yu et al., 2018b), which contains
7,000/1,034/2,147 train/development/test ex-
amples.

We pre-process examples to remove table
aliases (AS T1/T2/...) from the queries and
use the explicit table name instead (i.e. we re-
place T1.col with table1 name.col), as in
the majority of the cases (> 99% in SPIDER) these
aliases are redundant. In addition, we add a table
reference to all columns that do not have one (i.e.
we replace col with table name.col).

We use the official evaluation script from SPI-
DER to compute accuracy, i.e., whether the pre-
dicted query is equivalent to the gold query.

Results Our full model (GNN) obtains 39.4%
accuracy on the test set, substantially higher than
prior state-of-the-art (SYNTAXSQLNET), which
is at 19.7%. Removing the GNN from the parser
(NO GNN), which results in the parser of Krishna-
murthy et al. (2017), augmented with a grammar
for SQL, obtains an accuracy of 33.8%, showing
the importance of encoding the schema structure.

Table 1 shows results on the development set
for baselines and ablations. The first column de-
scribes accuracy on the entire dataset, and the
next two columns show accuracy when partition-
ing examples to queries involving only one table
(SINGLE) vs. more than one table (MULTI).

GNN dramatically outperforms previously pub-
lished baselines SQLNET and SYNTAXSQLNET,
and improves the performance of NO GNN from
34.9% to 40.7%. Importantly, using schema struc-
ture specifically improves performance on ques-
tions with multiple tables from 14.6% to 26.8%.

We ablate the major novel components of our
model to assess their impact. First, we remove
the self-attention component (NO SELF ATTEND).
We observe that performance drops by 2 points,
where SINGLE slightly improves, and MULTI



4564

drops by 6.5 points. Second, to verify that im-
provement is not only due to self-attention, we ab-
late all other uses of the GNN. Namely, We use a
model identical to NO GNN, except it can access
the GNN representations through the self-attention
(ONLY SELF ATTEND). We observe a large drop
in performance to 35.9%, showing that all compo-
nents are important. Last, we ablate the relevance
score by setting ρv = 1 for all schema items (NO
REL.). Indeed, accuracy drops to 37.0%.

To assess the ceiling performance possible with
a perfect relevance score, we run an oracle experi-
ment, where we set ρv = 1 for all schema items
that are in the gold query, and ρv = 0 for all
other schema items (GNN ORACLE REL.). We
see that a perfect relevance score substantially im-
proves performance to 54.3%, indicating substan-
tial headroom for future research.
join analysis For any model, we can ex-
amine the proportion of predicted queries with
a join, where the structure of the join is
“bad”: (a) when the join condition clause
uses the same table twice (ON t1.column1 =
t1.column2), and (b) when the joined table are
not connected through a primary-foreign key rela-
tion.

We find that NO GNN predicts such joins
in 83.4% of the cases, while GNN does so in
only 15.6% of cases. When automatically omit-
ting from the beam candidates where condition (a)
occurs, NO GNN predicts a “bad” join in 14.2%
of the cases vs. 4.3% for GNN (total accuracy in-
creases by 0.3% for both models). As an exam-
ple, in Figure 3, slocj scores the table student
the highest, although it is not related to the previ-
ously decoded table semester. Adding the self-
attention score sattj corrects this and leads to the
correct student semester, probably because
the model learns to prefer connected tables.

6 Conclusion

We present a semantic parser that encodes the
structure of the DB schema with a graph neu-
ral network, and uses this representation to make
schema-aware decisions both at encoding and de-
coding time. We demonstrate the effectivness of
this method on SPIDER, a dataset that contains
complex schemas which are not seen at training
time, and show substantial improvement over cur-
rent state-of-the-art.

Acknowledgments

We thank Kevin Lin and Mark Neumann from
Allen Institute for Artificial Intelligence for their
help with the SQL grammar. This research was
supported by Facebook. This work was completed
in partial fulfillment for the Ph.D degree of the first
author.

References
D. Bahdanau, K. Cho, and Y. Bengio. 2015. Neural

machine translation by jointly learning to align and
translate. In International Conference on Learning
Representations (ICLR).

J. Cheng, S. Reddy, V. Saraswat, and M. Lapata. 2017.
Learning structured natural language representations
for semantic parsing. In Association for Computa-
tional Linguistics (ACL).

K. Cho, B. van Merrienboer, C. Gulcehre, D. Bah-
danau, F. Bougares, H. Schwenk, and Y. Bengio.
2014. Learning phrase representations using RNN
encoder-decoder for statistical machine translation.
In Empirical Methods in Natural Language Process-
ing (EMNLP), pages 1724–1734.

N. De Cao, W. Aziz, and I. Titov. 2019. Question an-
swering by reasoning across documents with graph
convolutional networks. In North American Associ-
ation for Computational Linguistics (NAACL).

C. Finegan-Dollak, J. K. Kummerfeld, L. Zhang,
K. Ramanathan, S. Sadasivam, R. Zhang, and
D. Radev. 2018. Improving text-to-sql evaluation
methodology. In Association for Computational
Linguistics (ACL).

M. Gardner, J. Grus, M. Neumann, O. Tafjord,
P. Dasigi, N. Liu, M. Peters, M. Schmitz, and
L. Zettlemoyer. 2018. AllenNLP: A deep seman-
tic natural language processing platform. arXiv
preprint arXiv:1803.07640.

S. Hochreiter and J. Schmidhuber. 1997. Long short-
term memory. Neural Computation, 9(8):1735–
1780.

S. Iyer, I. Konstas, A. Cheung, J. Krishnamurthy, and
L. Zettlemoyer. 2017. Learning a neural semantic
parser from user feedback. In Association for Com-
putational Linguistics (ACL).

J. Krishnamurthy, P. Dasigi, and M. Gardner. 2017.
Neural semantic parsing with type constraints for
semi-structured tables. In Empirical Methods in
Natural Language Processing (EMNLP).

Y. Li, D. Tarlow, M. Brockschmidt, and R. Zemel.
2016. Gated graph sequence neural networks. In
International Conference on Learning Representa-
tions (ICLR).



4565

K. Lin, B. Bogin, M. Neumann, J. Berant, and
M. Gardner. 2019. Grammar-based neural text-to-
sql generation. arXiv preprint arXiv:1905.13326.

M. Rabinovich, M. Stern, and D. Klein. 2017. Abstract
syntax networks for code generation and semantic
parsing. In Association for Computational Linguis-
tics (ACL).

D. Sorokin and I. Gurevych. 2018. Modeling seman-
tics with gated graph neural networks for knowledge
base question answering. In International Confer-
ence on Computational Linguistics (COLING).

C. Xiao, M. Dymetman, and C. Gardent. 2016.
Sequence-based structured prediction for semantic
parsing. In Association for Computational Linguis-
tics (ACL).

P. Yin and G. Neubig. 2017. A syntactic neural model
for general-purpose code generation. In Association
for Computational Linguistics (ACL), pages 440–
450.

T. Yu, M. Yasunaga, K. Yang, R. Zhang, D. Wang,
Z. Li, and D. Radev. 2018a. SyntaxSQLNet: Syntax
tree networks for complex and cross-domaintext-to-
SQL task. In Empirical Methods in Natural Lan-
guage Processing (EMNLP).

T. Yu, R. Zhang, K. Yang, M. Yasunaga, D. Wang,
Z. Li, J. Ma, I. Li, Q. Yao, S. Roman, Z. Zhang,
and D. Radev. 2018b. Spider: A large-scale human-
labeled dataset for complex and cross-domain se-
mantic parsing and text-to-SQL task. In Em-
pirical Methods in Natural Language Processing
(EMNLP).

M. Zelle and R. J. Mooney. 1996. Learning to parse
database queries using inductive logic program-
ming. In Association for the Advancement of Arti-
ficial Intelligence (AAAI), pages 1050–1055.

L. S. Zettlemoyer and M. Collins. 2005. Learning to
map sentences to logical form: Structured classifica-
tion with probabilistic categorial grammars. In Un-
certainty in Artificial Intelligence (UAI), pages 658–
666.

V. Zhong, C. Xiong, and R. Socher. 2017. Seq2sql:
Generating structured queries from natural lan-
guage using reinforcement learning. arXiv preprint
arXiv:1709.00103.


