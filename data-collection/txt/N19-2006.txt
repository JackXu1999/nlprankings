
























































Diversifying Reply Suggestions Using a Matching-Conditional Variational Autoencoder


Proceedings of NAACL-HLT 2019, pages 40–47
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

40

Diversifying Reply Suggestions using a Matching-Conditional Variational
Autoencoder

Budhaditya Deb Peter Bailey

Microsoft Search, Assistance and Intelligence
{budeb, pbailey, milads}@microsoft.com

Milad Shokouhi

Abstract

We consider the problem of diversifying au-
tomated reply suggestions for a commercial
instant-messaging (IM) system (Skype). Our
conversation model is a standard matching
based information retrieval architecture, which
consists of two parallel encoders to project
messages and replies into a common feature
representation. During inference, we select
replies from a fixed response set using near-
est neighbors in the feature space. To diver-
sify responses, we formulate the model as a
generative latent variable model with Condi-
tional Variational Auto-Encoder (M-CVAE).
We propose a constrained-sampling approach
to make the variational inference in M-CVAE
efficient for our production system. In offline
experiments, M-CVAE consistently increased
diversity by ∼ 30 − 40% without significant
impact on relevance. This translated to a 5%
gain in click-rate in our online production sys-
tem.

1 Introduction

Automated reply suggestions or smart-replies
(SR) are increasingly becoming common in many
popular applications such as Gmail (2016), Skype
(2017), Outlook (2018), LinkedIn (2017), and
Facebook Messenger.

Given a message, the problem that SR solves is
to suggest short and relevant responses that a per-
son may select with a click to avoid any typing.
For example, for a message such as Want to
meet up for lunch? an SR system may
suggest the following three responses {Sure; No
problem!; Ok}. While these are all relevant
suggestions, they are semantically equivalent. In
this paper, we consider how we can diversify
the suggestions such as with {Sure; Sorry I
can’t; What time?} without losing any rel-
evance. Our hypothesis is that encompassing
greater semantic variability and intrinsic diversity
will lead to higher click-rates for suggestions.

Smart-reply has been modeled as an sequence-
to-sequence (S2S) process (Li et al., 2016; Kan-
nan et al., 2016; Vinyals and Le, 2015) inspired by
their success in machine translation. It has also
been modeled as an Information Retrieval (IR)
task (Henderson et al., 2017). Here, replies are se-
lected from a fixed list of responses, using two par-
allel Matching networks to encode messages and
replies in a common representation. Our produc-
tion system uses such a Matching architecture.

There are several practical factors in favor of the
Matching-IR approach. Production systems typi-
cally maintain a curated response-set (to have bet-
ter control on the feature and to prevent inappro-
priate responses) due to which they rarely require
a generative model. Moreover, inference is effi-
cient in the matching architecture as vectors for
the fixed response set can be pre-computed and
hashed for fast lookup. Qualitatively, S2S also
tends to generate generic, and sometimes incorrect
responses due to label and exposure bias. Solu-
tions for S2S during training (Wiseman and Rush,
2016) and inference (Li et al., 2016) have high
overhead. Matching architectures on the other
hand, can incorporate a global normalization fac-
tor during training to mitigate this issue (Sountsov
and Sarawagi, 2016).

In practice we found that the Matching model
retrieves responses which are semantically very
similar in lexical content and underlying intent as
shown in (Table 1). This behavior is not surprising
and even expected since we optimize the model as
a point estimation on golden message-reply (m-
r) pairs. In fact, it illustrates the effectiveness of
encoding similar intents in the common feature
space. While this leads to individual responses
being highly relevant, the model needs to diver-
sify the responses to improve the overall relevance
of the set by covering a wider variety of intents.
We hypothesize that diversity would improve the
click rates in our production system. This is the



41

Figure 1: Training and inference graph for Match-
ing. During inference, the response side stack is pre-
computed (shaded grey).

main focus of this paper. We provide two base-
lines approaches using lexical clustering and max-
imal marginal relevance (MMR) for diversification
in the Matching model.

Since we typically do not have multiple re-
sponses in one-on-one conversational data (and
thus cannot train for multiple-intents), we con-
sider a generative Latent Variable Model (LVM) to
learn the hidden intents from individual m-r pairs.
Our key hypothesis is that intents can be encoded
through a latent variable, which can be then be uti-
lized to generate diverse responses.

To this end, we propose the Matching-CVAE
(M-CVAE) architecture, which introduces a gen-
erative LVM on the Matching-IR model using
the neural variational autoencoder (VAE) frame-
work (Kingma and Welling, 2014). M-CVAE is
trained to generate the vector representation of
the response conditioned on the input message
and a stochastic latent variable. During inference
we sample responses for a message and use vot-
ing to rank candidates. To reduce latency, we
propose a constrained sampling strategy for M-
CVAE which makes variational inference feasible
for production systems. We show that the Match-
ing architecture maintains the relevance advan-
tages and inference-efficiency required for a pro-
duction system while CVAE allows diversification
of responses.

We first describe our current production model
and diversification approaches. Next, we present
our key contribution: Matching-CVAE. Finally we
report on our results from offline and online exper-
iments, including production system performance.

Table 1: The top responses (without de-duplication) for
Matching and M-CVAE.

2 Matching Model

Our training data consists of message reply (m-
r) pairs [xi, yi] from one-on-one IM conversa-
tions1. A parallel stack of embedding and bi-
directional LSTM layers encodes the raw text of
m-r by concatenating the last hidden state of the
backward and forward recurrences as ΦX(xi) and
ΦY (yi) (Figure 1). The encodings are trained
to map to a common feature representation using
the symmetric-loss: a probabilistic measure of the
similarity as a normalized dot product Θxiyi =
ΦX(xi) · ΦY (yi) in equation 1. We maximize the
− ln p(Θ) during training.

Note the denominator in the symmetric-loss is
different from a softmax (where the marginaliza-
tion is usually over the y terms) to approximate
p(yi|xi). Instead, it the sums over each message
w.r.t. all responses and vice-versa. This normal-
ization (analogous to a Jaccard index) in both di-
rections enforces stronger constraints for a dialog
pair2. Thus, it is more appropriate for a conversa-
tional model where the goal is conversation com-
patibility rather than content similarity. Symmet-
ric loss improved the relevance in our model. We
omit the results here, to focus on diversity.

p(Θxiyi) =
eΘxiyi∑

yj
e

Θxiyj +
∑
xj
e

Θxjyi − eΘxiyi
(1)

Sk(x) = softmaxk[topk[ΦX(x) · ΦY (YR) + αlm(YR)]]
(2)

During inference, we pre-compute the response
vectors ΦY (YR) for a fixed response set YR. We
encode an input x as ΦX(x), and find the K
nearest responses YRk , using a score composed
of the dot product of ΦX(x) and ΦY (YR) and a

1Multi-user conversations were difficult to align reliably,
given highly restricted access to preserve our users privacy.

2Li et al. (2016) made a similar argument with Mutual
Information penalty during inference.



42

language-model penalty lm(YR)3 in equation 2.
The lm(YR) is intended to suppress very specific
responses similar to (Henderson et al., 2017). The
α parameter is tuned separately on an evaluation
set. We de-duplicate the YRk candidates and se-
lect top three as suggested replies. The training
and inference graph is shown in Figure 1.

2.1 Response Diversification
The matching model by itself, retrieves very sim-
ilar responses as shown in Table 1. Clearly, the
responses need to be de-duplicated to improve the
quality of suggestions. We present two baseline
approaches to increase diversity.

Lexical Clustering (LC): Table 1, motivates
the use of simple lexical rules for de-duplication.
We cluster responses which only differ in punc-
tuations (Thanks!, Thanks.), contractions
(cannot:can’t, okay:ok), synonyms
(yeah, yes, ya) etc. We further refine
the clusters by joining responses with one-word
edit distance between them (Thank you so
much. Thank you very much) except
for negations. During inference, we de-duplicate
candidates belonging to the same clusters.

Maximal Marginal Relevance (MMR): As a
way to increase the diversity in IR, (Carbonell
and Goldstein, 1998) introduced the MMR cri-
terion to penalize the query-document similarity
with inter-document similarity to rank candidates
using marginal relevance.

In the context of the SR, we apply the MMR
principle as follows. First, we select the K can-
didates, (with scores Sk(x) and response vectors
ΦY (YRk )) using equation 2. Next, we compute the
the novelty Nk (or marginal relevance) of the kth

response with respect to the otherK−1 candidates
using equation 3. Finally, we re-rank the candi-
dates using the MMR score computed from equa-
tion 4. Our MMR implementation is an approxi-
mation of the original (which is iterative). Never-
theless, it allows the ranking in one single forward
pass and thus is very efficient in terms of latency.

Nk =
1

K − 1

K∑
j 6=k

CosSim(ΦY (YRk ),ΦY (YRj )) (3)

MMRk(x) = βSk(x)− (1− β)Nk (4)

Table 3 shows that LC and MMR are quite ef-
fective at reducing duplicates. We have also ex-

3We train an LSTM language model on the training data.

plored other clustering approaches using embed-
dings from unsupervised models, but they were
not as effective as LC or MMR.

3 Matching-CVAE (M-CVAE)

Neither MMR nor LC solves the core issue with
diversification i.e., learning to suggest diverse re-
sponses from individual m-r pairs. Privacy restric-
tions prevent any access to the underlying train-
ing data for explicit annotation and modeling for
intents. Instead, we model the hidden intents in
individual m-r pairs using a latent variable model
(LVM) in M-CVAE.

In M-CVAE we generate a response vector con-
ditioned on the message vector and a stochastic la-
tent vector. The generated response vector is then
used to select the corresponding raw response text.

M-CVAE relies on two hypotheses. First, the
encoded vectors are accurate distributional in-
dexes for raw text. Second, the latent variable en-
codes intents (i.e. a manifold assumption that sim-
ilar intents have the same latent structure). Thus,
samples from different latent vectors can be used
to generate and select diverse responses within the
Matching-IR framework.

We start with a base Matching model which en-
codes an m-r pair as ΦX(xi) and ΦY (yi). We
assume a stochastic vector z which encodes a la-
tent intent, such that ΦY (yi) is generated condi-
tioned on ΦX(xi) and z. The purpose of learning
the LVM is to maximize the probability of obser-
vations ΦX ,ΦY by marginalizing over z. This is
typically infeasible in a high dimensional space.

Instead, the variational framework seeks to
learn a posterior Qφ(z|ΦX ,ΦY ) and a generating
pϕ (ΦY |ΦX , z) function to directly approximate
the marginals. In the neural variational framework
(Kingma and Welling, 2014) and the conditional
variant CVAE (Sohn et al., 2015), the functionals
Qφ and pϕ are approximated using non-linear neu-
ral layers4, and trained using Stochastic Gradient
Variational Bayes (SGVB).

We use two feed forward layers for Qφ and pϕ
as shown in equations 5 and 7. Here, ←→ de-
notes the concatenation of two vectors. To sample
from Qφ, we use the re-parameterization trick of
Kingma (2014). First, we encode the input vectors
interpreted as mean and variance

[
µ, σ2

]
. Next,

we transform to a multivariate Gaussian form by

4Also referred as inference/recognition and reconstruc-
tion networks, they appear like an auto-encoder network.



43

Re-parameterization 

ϕ (𝑌𝑅) 𝑙𝑚 (𝑌𝑅)

Raw Message Raw Response

Embedding Embedding

Bi-LSTM 
Encoder

Bi-LSTM 
Encoder

𝜱(𝒙𝒊)

𝜱(𝒚𝒊)

Training graph, Matching

Symmetric loss
[𝜱(𝒙𝒊), 𝜱(𝒚𝒊)] 

[𝜱(𝒙𝒊), 𝜱(𝒚𝒊)]

KL Loss

Symmetric Loss 
[෡Ф(𝒚𝒊),Ф(𝒚𝒊)]

𝜺~𝓝(𝟎, 𝑰)

෡Ф(𝒚𝒊)

𝒑𝝋

dense 
projection

tanh layer

μ

σ

h:tanh layer 𝑸𝝓

Training graph, CVAE

Raw Message

Embedding

Bi-LSTM 
Encoder

𝜱(𝒙𝒊)

z~𝓝(𝟎, 𝑰)

[𝜱(𝒙𝒊),z]

𝜱(𝒚𝟏)

𝜱(𝒚𝟐)

𝜱(𝒚𝒓)

𝒍𝒎(𝒚𝟏)

𝒍𝒎(𝒚𝟐)

𝒍𝒎(𝒚𝒓)

Argmax ෡Ф(𝒚𝒊) .𝜱(𝒀𝑹) + 𝜶𝒍𝒎(𝒀𝑹)

𝒛 = 𝝁 + 𝝈𝜺

𝒑𝝋 : ෡Ф(𝒚𝒊)

Inference graph, M-CVAE

[𝜱(𝒙𝒊),z]

Single sample of the response

Pre-computed for the 
fixed response set

Figure 2: Matching (left) and CVAE (center) training models. Dotted arrows show the inputs to the loss functions.
Right side shows the M-CVAE inference network where the shaded region shows the pre-computed values of the
fixed response set..

sampling ε ∼ N (0, I), and apply the linear trans-
formation in equation 6. We reconstruct the re-
sponse vector as Φ̂Y with pϕ (equation 7). Figure
2 shows the complete M-CVAE architecture.

The network is trained with the evidence lower
bound objective (ELBO) by conditioning the stan-
dard VAE loss with message vector ΦX in equa-
tion 8. The first term can be computed in closed
form as it is the KL Divergence between two Nor-
mal distributions. The second term denotes the
reconstruction loss for the response vector. We
compute the reconstruction error using the sym-
metric loss, p(Φ̂Y (yi),ΦY (yi)) from equation 1 in
the training minibatch. As is standard in SGVB,
we use only one sample per item during training.

h = tanh
(
wφµ1 ·

←−−−→
ΦXΦY + b

φ
µ1

)
µ = wφµ2 · h+ b

φ
µ2

σ = exp
((
wφσ2 · h+ b

φ
σ2

)
/2
) (5)

z ∼ Qφ = µ+ σ · ε, where ε ∼ N (0, I) (6)

Φ̂Y : pϕ = w
ϕ
2 · tanh

(
wϕ1 ·

←−→
zΦX + b

ϕ
1

)
+ bϕ2 (7)

ELBO = −DKL [Qφ (z|ΦX ,ΦY ) ‖p (z|ΦX ,ΦX)]
+E [ln pϕ(ΦY |z,ΦX)] (8)

Predict : ArgmaxYR [Φ̂Y (yi) · ΦY (YR) + lm(YR)] (9)

3.1 Inference in CVAE

During inference, We pre-compute the response
vectors ΦY (YR) and lm(YR) scores as before.
However, instead of matching the message vec-
tor with the response vectors, we find the nearest-
neighbors of the generated response vector, Φ̂Y

with ΦY (YR) . We use a sampling and voting
strategy to rank the response candidates.

Sampling Responses: To generate Φ̂Y , we first
sample z ∼ N (0, I), concatenate with Φ(x) and
generate Φ̂(y) with the decoder pϕ from equation
7. The sampling process is shown Figure 2 (right).

Voting Responses: The predicted response
sample for a given input and a z sample is given
by equation 9. In each sample, a candidate re-
sponse (argmax) gets the winning vote. We gen-
erate a large number of such samples and use the
total votes accumulated by responses as a proxy to
estimate the likelihood p(y|x). Finally, we use the
voting-score to rank the candidates in M-CVAE.

3.2 Constrained sampling in CVAE

To deploy M-CVAE in production we needed to
solve two issues. First, generating a large num-
ber of samples significantly increased the latency
compared to Matching. Reducing the number of
samples leads to higher variance where M-CVAE
can sometimes select diverse but irrelevant re-
sponses (compared to Matching which selects rel-
evant but duplicate responses). We propose a con-
strained sampling strategy which solves both these
problems by allowing better trade off between di-
versity and relevance at a reduced cost.

We note that the latency bottleneck is essen-
tially in the large dot product with pre-computed
response vectors (our response set size is ˜30k) in
equation 9. Here, the number of matrix multipli-
cations for N samples is 600 ∗ 30000 ∗ N (with
encoding dimension size of 600). However, dur-
ing the sampling process, only a few relevant can-



44

didates actually get a vote. Thus, we can reduce
this cost by pre-selecting top K candidates using
the Matching score (eq. 2) and then pruning the
response vector to the selectedK candidates. This
constrains the dot-product in each sampling step
to only K vectors, and reduces the number of ma-
trix multiplications for N samples to 600∗K ∗N ,
where K � 30000.

By pruning the response set, we are able to fit
all the sampling vectors within a single matrix, and
apply the entire sampling and voting step as matrix
operations in one forward pass through the net-
work. This leads to an extremely efficient graph
and allows us to deploy the model in production.

Sampling with MMR: As seen in Table 1, the
candidates selected using Matching score can have
very low diversity to begin with and can reduce
the effectiveness of M-CVAE. To diversify the ini-
tial candidates, we can use our MMR ranking ap-
proach as follows. We first select top 2K re-
sponses using Matching and compute the MMR
scores from equation 4. Next, we use the MMR
scores to select the top K diverse responses for
use in constrained sampling in M-CVAE.

All the inference components (Matching,
MMR, and constrained sampling), when applied
together requires just one forward pass through the
network. Thus, we can not only trade-off diversity
and relevance, but also control the latency at the
same time. Constrained sampling was critical for
deploying to production systems.

4 Experiments and Results

Our current production model in Skype is a paral-
lel Matching stack (Figure 1) with embedding size
of 320 and 2 Bi-LSTM layers with hidden size
of 300 for both messages and replies. The token
vocabulary is ˜100k (tokens with a minimum fre-
quency of 50 in the training set), and the response
set size is ˜30k. It selects top 15 candidates and de-
duplicates using lexical clustering to suggest three
responses. The entire system is implemented on
the Cognitive Toolkit (CNTK) which provides ef-
ficient training and run-time libraries, particularly
suited to RNN based architectures.

We analyze the M-CVAE model in compari-
son to this production model 5. The production
model is also used as the control for online A/B

5Since the production model has gone through numerous
parameter tuning and flights, we assume it to be a strong base-
line to compare with.

testing, so it is natural to use the same model for
offline analysis. To train the M-CVAE, we use
the base Matching model, freeze its parameters,
and then train the CVAE layers on top. We apply
a dropout rate of 0.2 after the initial embedding
layer (for both Matching and M-CVAE) and use
the Adadelta learner for training. We use the loss
on a held out validation set for model selection.

Training data: We sample ˜100 million pairs of
m-r pairs from one-on-one IM conversations. We
filter out multi-user and multi-turn conversations
since they were difficult to align reliably. We set
aside 10% of the data to compute validation losses
for model selection. The data is completely eyes-
off i.e., neither the training nor the validation set is
accessible for eyes-on analysis.

Response set: To generate the response set, we
filter replies from the m-r pairs with spam, offen-
sive, and English vocabulary filters and clean them
of personally identifiable information. Next, we
select top 100k responses based on frequency and
then top 30k based on lm-scores. We pre-compute
the lm-scores, lexical-clusters and encodings for
the response set and embed them inside the infer-
ence graphs as shown in Figure 1 and 2.

Evaluation metrics and set: The model pre-
dicts three responses per message for which we
compute two metrics: Defects (a response is
deemed incorrect) and Duplicates (at least 2 out
of 3 responses are semantically similar). We use
crowd sourced human judgments with at least 5
judges per sample. Judges are asked to provide a
binary Yes/No answer on defects and duplicates.
Judge consensus (inter annotator agreement) of
4 and above is considered for metrics, with 3
deemed as no-consensus (around 5%). Since train-
ing/validation sets are not accessible for analysis,
we created an evaluation set of 2000 messages us-
ing crowd sourcing for reporting our metrics.

M-CVAE parameters: We consider three pa-
rameters for ablation studies in M-CVAE: size of
latent vector z, number of samples s and the re-
sponse pruning size k for constrained sampling.
The results are shown in Table 2. The M-CVAE
numbers (row 2 onwards) are relative to the base
Matching model in row 1. First, row 2 shows that
latent vector size of 256 provides a suitable bal-
ance between defects and duplicates, but in gen-
eral, the size of the latent variable is not a signif-
icant factor in performance. Next, in row 3, we
see that the response-pruning size k, is an effective



45

Table 2: Relative change in Defect and Duplicate met-
rics for different hyper-parameters of M-CVAE w.r.t. to
the baseline Matching (row 1). In all cases, M-CVAE
significantly reduces duplicates with minor increase in
defects w.r.t. to the baseline model. Row highlighted in
green is the configuration chosen for online A/B test.

Table 3: Contribution of baseline diversification tech-
niques, LC and MMR on duplicate reduction.

control to trade-off defects and duplicates. Thus,
constrained sampling not only reduces the latency
but also provides quality control required in a pro-
duction system. In row 4, we see that more sam-
ples lead to better metrics but the improvements
are marginal beyond 300 samples. In all cases,
M-CVAE significantly reduces duplicates (by as
much as 40%) without any major increase in de-
fects. We select the model with hyper-parameters
[k = 15, z = 256, s = 300] for further analysis.

Diversification with LC: The first two rows
of Table 3 analyzes the impact of LC based de-
duplication. LC can significantly reduce the du-
plicates in the base matching model. However, M-
CVAE (even without LC) reduces the rates by al-
most 50% as shown in column 4 in row 1. Using
LC as a post processing step after M-CVAE, can
give further boosts in diversity (row 2).

Diversification with MMR: Table 3 also re-
ports the impact of MMR re-ranking. For Match-
ing+MMR, duplicates can reduce significantly as
we increase the β parameter, but at the cost of

Table 4: Summary metrics comparing architectures.

Table 5: Latency (in ms) in production servers.

increased defects. With MMR+M-CVAE, further
diversification can be achieved, and typically at a
lower defect rate. This shows the advantage of us-
ing M-CVAE which conditions the responses on
the message and hence has stronger controls on
the relevance than MMR.

Comparison with other architectures: We
have considered two other architectures for our
SR system. First is a standard S2S with atten-
tion (Bahdanau et al., 2014) with equivalent pa-
rameters for embedding and LSTMs as our base
model, and inference using beam search decoding
with width 15. Second, is a feed-forward (instead
of an LSTM) based Matching encoder architec-
ture which is equivalent to the one in (Henderson
et al., 2017). All models use LC for de-duplication
after 15 candidate responses are selected. Table
4 validates our architectural preference towards
Matching/Bi-LSTM which has a superior perfor-
mance in terms of defects.

Inference latency: Architecture choices were
also driven by latency requirements in our produc-
tion system. The results are summarized in Table 5
for different architectures. S2S and unconstrained
sampling in M-CVAE were unsuitable for produc-
tion due to their high latencies. With constrained
sampling (including MMR), the latency increases
marginally compared to the base model, and al-
lows us to put the model in production.

Online experiments: Offline metrics were used
principally for selecting the best candidate mod-
els for online A/B experiments. We selected
M-CVAE model with parameters [z=256, k=15,
s=300] from Table 2. Using our existing produc-
tion model as the control, and a treatment group
consisting of 10% of our IM client users (with



46

Table 6: Click rates for the M-CVAE flighted model.
The control is the Matching model in production.

the same population properties as the control), we
conducted an online A/B test for two weeks. Table
6 shows that the click-rate for M-CVAE compared
to the Matching model increased by ˜5% overall.

Gains were driven by the increase in the 2nd
(10.3%) and 3rd (6.7%) suggested reply positions
with virtually no impact in the 1st position. This
correlates with our offline analysis since M-CVAE
typically differs from the base model at these two
positions. Intuitively, the three positions point
to the head, torso and tail intents of responses6.
Gains at these positions show that M-CVAE ex-
tracts diverse responses without sacrificing the rel-
evance of these tail intents.

Driven by these gains, we have switched our
production system in Skype to use M-CVAE for
100% of users.

5 Related work

Several researchers have used CVAEs (Sohn et al.,
2015) for generating text (Miao et al., 2016; Guu
et al., 2018; Bowman et al., 2016), modeling
conversations (Park et al., 2018), diversifying re-
sponses in dialogues (Zhao et al., 2017; Shen et al.,
2017) and improving translations (Schulz et al.,
2018). These papers use S2S architectures which
we found impractical for production. We demon-
strate similar objectives without having to rely on
any sequential generative process, in an IR setting.

VAE has been also used in IR (Chaidaroon and
Fang, 2017) to generate hash maps for semanti-
cally similar documents and top-n recommenda-
tion systems (Chen and de Rijke, 2018). In con-
trast, we demonstrate semantic-diversity in intents
in a conversational IR model with M-CVAE.

Novelty and diversity are well-studied problems
in IR (Yue and Joachims, 2008; Clarke et al., 2008)
where it is assumed that document topics are avail-
able (and not latent) during training. Diversifica-
tion effect as shown in (Chen and Karger, 2006)
relies on relevance (click) data, and thus is not

6which was validated by the absolute click rates for each
of these positions but not shown in the table

directly applicable in our system. MMR (Car-
bonell and Goldstein, 1998) is a relevant prior
work which we use as a baseline.

6 Conclusions

We formulate the IR-based conversational model
as a generative LVM, optimized with the CVAE
framework. M-CVAE learns to diversify re-
sponses from single m-r pairs without any supervi-
sion. Online results show that diversity increases
the click rates in our system. Using efficient con-
strained sampling approach, we have successfully
shipped the M-CVAE model to production.

Increase in click rates over millions of users is
incredibly hard. We have also experimented with
the M-CVAE model trained for suggesting replies
to emails in Outlook Web App (significantly dif-
ferent characteristics than IM) and seen similar
gains. The results across domains suggests strong
generalization properties of the M-CVAE model
and validates our hypothesis that increased diver-
sity leads to higher click-rates by encompassing
greater semantic variability of intents.

Perhaps the most important quality of the M-
CVAE is that response vector can be flexibly con-
ditioned on the input and thus a transduction pro-
cess. In contrast, in the Matching IR model, re-
sponse vectors are pre-computed and independent
of the input. M-CVAE thus opens up new avenues
to improve the quality of responses further through
personalization and stylization. This is the subject
of future work.

Acknowledgments

We gratefully acknowledge the contributions of
Lei Cui, Shashank Jain, Pankaj Gulhane and Na-
man Mody in different parts of our production sys-
tem on which this work builds upon. We also
thank Chris Quirk and Kieran McDonald for their
insightful feedback during the initial development
of this work. Finally, we thank our partner teams
(Skype, infrastructure, and online experimenta-
tion) for their support.

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua

Bengio. 2014. Neural Machine Translation by
Jointly Learning to Align and Translate. CoRR,
abs/1409.0473.

Samuel R. Bowman, Luke Vilnis, Oriol Vinyals, An-
drew M. Dai, Rafal Józefowicz, and Samy Ben-

http://arxiv.org/abs/1409.0473
http://arxiv.org/abs/1409.0473


47

gio. 2016. Generating sentences from a continuous
space. In CoNLL.

Jaime Carbonell and Jade Goldstein. 1998. The Use
of MMR, Diversity-based Reranking for Reordering
Documents and Producing Summaries. In SIGIR.

Suthee Chaidaroon and Yi Fang. 2017. Neural Varia-
tional Inference for Text Processing. In SIGIR.

Harry Chen and David R. Karger. 2006. Less is more.
Probabilistic models for retrieving fewer relevant
documents. In SIGIR.

Yifan Chen and Maarten de Rijke. 2018. A Collective
Variational Autoencoder for Top-N Recommenda-
tion with Side Information. CoRR, abs/1807.05730.

Charles L.A. Clarke, Maheedhar Kolla, Gordon V.
Cormack, Olga Vechtomova, Azin Ashkan, Stefan
Büttcher, and Ian MacKinnon. 2008. Novelty and
Diversity in Information Retrieval Evaluation. In SI-
GIR.

CNTK. The Microsoft Cognitive Toolkit.
https://www.microsoft.com/en-us/cognitive-toolkit/.

Kelvin Guu, Tatsunori B. Hashimoto, Yonatan Oren,
and Percy Liang. 2018. Generating Sentences by
Editing Prototypes. Transactions of the Association
of Computational Linguistics, 6:437–450.

Matthew Henderson, Rami Al-Rfou’, Brian Strope,
Yun-Hsuan Sung, László Lukács, Ruiqi Guo, San-
jiv Kumar, Balint Miklos, and Ray Kurzweil. 2017.
Efficient Natural Language Response Suggestion for
Smart Reply. CoRR, abs/1705.00652.

Anjuli Kannan, Karol Kurach, Sujith Ravi, Tobias
Kaufmann, Andrew Tomkins, Balint Miklos, Gre-
gory S. Corrado, László Lukács, Marina Ganea, Pe-
ter Young, and Vivek Ramavajjala. 2016. Smart Re-
ply: Automated Response Suggestion for Email. In
KDD.

Diederik P. Kingma and Max Welling. 2014. Auto-
Encoding Variational Bayes. ICLR.

Jiwei Li, Michel Galley, Chris Brockett, Jianfeng
Gao, and William B. Dolan. 2016. A Diversity-
Promoting Objective Function for Neural Conversa-
tion Models. In HLT-NAACL.

Yishu Miao, Lei Yu, and Phil Blunsom. 2016. Neural
Variational Inference for Text Processing. In ICML.

Microsoft. 2018. Designed to be fast - The Outlook
on the web user experience gets simpler and more
powerful.

Yookoon Park, Jaemin Cho, and Gunhee Kim. 2018.
A Hierarchical Latent Structure for Variational Con-
versation Modeling . In NAACL.

Jeff Pasternack and Nimesh Chakravarthi. 2017. Build-
ing Smart Replies for Member Messages.

Philip Schulz, Wilker Aziz, and Trevor Cohn. 2018. A
Stochastic Decoder for Neural Machine Translation.
In ACL.

Xiaoyu Shen, Hui Su, Yanran Li, Wenjie Li, Shuzi
Niu, Yang Zhao, Akiko Aizawa, and Guoping Long.
2017. A Conditional Variational Framework for Di-
alog Generation. In ACL.

Skype-Team. 2017. Introducing Cortana in Skype.

Kihyuk Sohn, Honglak Lee, and Xinchen Yan. 2015.
Learning Structured Output Representation using
Deep Conditional Generative Models. In NIPS.

Pavel Sountsov and Sunita Sarawagi. 2016. Length
bias in Encoder Decoder Models and a Case for
Global Conditioning. In EMNLP.

Oriol Vinyals and Quoc V. Le. 2015. A Neural Conver-
sational Model. In ICML Deep Learning Workshop.

Sam Wiseman and Alexander M. Rush. 2016.
Sequence-to-Sequence Learning as Beam-Search
Optimization. In EMNLP.

Yisong Yue and Thorsten Joachims. 2008. Predicting
Diverse Subsets Using Structural SVMs. In ICML.

Tiancheng Zhao, Ran Zhao, and Maxine Eskénazi.
2017. Learning Discourse-level Diversity for Neu-
ral Dialog Models using Conditional Variational Au-
toencoders. In ACL.

https://www.microsoft.com/en-us/cognitive-toolkit/
https://www.microsoft.com/en-us/cognitive-toolkit/
https://techcommunity.microsoft.com/t5/Outlook-Blog/
https://techcommunity.microsoft.com/t5/Outlook-Blog/
https://techcommunity.microsoft.com/t5/Outlook-Blog/
https://engineering.linkedin.com/blog/2017/10/building-smart-replies-for-member-messages
https://engineering.linkedin.com/blog/2017/10/building-smart-replies-for-member-messages
https://blogs.skype.com/news/2017/10/09/

