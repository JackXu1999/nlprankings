

















































N-ary Relation Extraction using Graph-State LSTM


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 2226–2235
Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics

2226

N -ary Relation Extraction using Graph State LSTM

Linfeng Song1⇤, Yue Zhang3⇤, Zhiguo Wang2 and Daniel Gildea1
1Department of Computer Science, University of Rochester, Rochester, NY 14627

2IBM T.J. Watson Research Center, Yorktown Heights, NY 10598
3School of Engineering, Westlake University, China

Abstract

Cross-sentence n-ary relation extraction de-
tects relations among n entities across multi-
ple sentences. Typical methods formulate an
input as a document graph, integrating vari-
ous intra-sentential and inter-sentential depen-
dencies. The current state-of-the-art method
splits the input graph into two DAGs, adopt-
ing a DAG-structured LSTM for each. Though
being able to model rich linguistic knowledge
by leveraging graph edges, important infor-
mation can be lost in the splitting procedure.
We propose a graph-state LSTM model, which
uses a parallel state to model each word, recur-
rently enriching state values via message pass-
ing. Compared with DAG LSTMs, our graph
LSTM keeps the original graph structure, and
speeds up computation by allowing more par-
allelization. On a standard benchmark, our
model shows the best result in the literature.

1 Introduction

As a central task in natural language processing,
relation extraction has been investigated on news,
web text and biomedical domains. It has been
shown to be useful for detecting explicit facts,
such as cause-effect (Hendrickx et al., 2009), and
predicting the effectiveness of a medicine on a
cancer caused by mutation of a certain gene in
the biomedical domain (Quirk and Poon, 2017;
Peng et al., 2017). While most existing work ex-
tracts relations within a sentence (Zelenko et al.,
2003; Palmer et al., 2005; Zhao and Grishman,
2005; Jiang and Zhai, 2007; Plank and Moschitti,
2013; Li and Ji, 2014; Gormley et al., 2015;
Miwa and Bansal, 2016; Zhang et al., 2017),
the task of cross-sentence relation extraction has
received increasing attention (Gerber and Chai,
2010; Yoshikawa et al., 2011). Recently, Peng

⇤Equal contribution

The deletion mutation on exon-19 of EGFR
gene was present in 16 patients, while the 858E
point mutation on exon-21 was noted in 10.
All patients were treated with gefitinib and
showed a partial response.

Table 1: An example showing that tumors with L858E
mutation in EGFR gene respond to gefitinib treatment.

et al. (2017) extend cross-sentence relation extrac-
tion by further detecting relations among several
entity mentions (n-ary relation). Table 1 shows
an example, which conveys the fact that cancers
caused by the 858E mutation on EGFR gene can
respond to the gefitinib medicine. The three en-
tity mentions form a ternary relation yet appear in
distinct sentences.

Peng et al. (2017) proposed a graph-structured
LSTM for n-ary relation extraction. As shown in
Figure 1 (a), graphs are constructed from input
sentences with dependency edges, links between
adjacent words, and inter-sentence relations, so
that syntactic and discourse information can be
used for relation extraction. To calculate a hidden
state encoding for each word, Peng et al. (2017)
first split the input graph into two directed acyclic
graphs (DAGs) by separating left-to-right edges
from right-to-left edges (Figure 1 (b)). Then, two
separate gated recurrent neural networks, which
extend tree LSTM (Tai et al., 2015), were adopted
for each single-directional DAG, respectively. Fi-
nally, for each word, the hidden states of both di-
rections are concatenated as the final state. The
bi-directional DAG LSTM model showed superior
performance over several strong baselines, such as
tree-structured LSTM (Miwa and Bansal, 2016),
on a biomedical-domain benchmark.

However, the bidirectional DAG LSTM model
suffers from several limitations. First, important
information can be lost when converting a graph



2227

DET
NN

The ?  deletion ?  mutation ?  on ?  exon-19  ?   of ?  EGFR ?  gene ?  was ?  presented ?  in ?  16 ?  patients ...
(a)

PREP_ON PREP_OF

NN

NSUBJ

COP

ROOT
PREP_IN

NUM

(b)

Figure 1: (a) A fraction of the dependency graph of the example in Table 1. For simplicity, we omit edges of
discourse relations. (b) Results after splitting the graph into two DAGs.

into two separate DAGs. For the example in Fig-
ure 1, the conversion breaks the inner structure of
“exon-19 of EGFR gene”, where the relation be-
tween “exon-19” and “EGFR” via the dependency
path “exon-19 PREP OF�����! gene NN��! EGFR” is lost
from the original subgraph. Second, using LSTMs
on both DAGs, information of only ancestors and
descendants can be incorporated for each word.
Sibling information, which may also be important,
is not included.

A potential solution to the problems above is to
model a graph as a whole, learning its representa-
tion without breaking it into two DAGs. Due to the
existence of cycles, naive extension of tree LSTMs
cannot serve this goal. Recently, graph convolu-
tional networks (GCN) (Kipf and Welling, 2017;
Marcheggiani and Titov, 2017; Bastings et al.,
2017) and graph recurrent networks (GRN) (Song
et al., 2018; Zhang et al., 2018) have been pro-
posed for representing graph structures for NLP
tasks. Such methods encode a given graph by hi-
erarchically learning representations of neighbor-
ing nodes in the graphs via their connecting edges.
While GCNs use CNN for information exchange,
GRNs take gated recurrent steps to this end. For
fair comparison with DAG LSTMs, we build a
graph LSTM by extending Song et al. (2018),
which strictly follow the configurations of Peng
et al. (2017) such as the source of features and hy-
per parameter settings. In particular, the full in-
put graph is modeled as a single state, with words
in the graph being its sub states. State transitions
are performed on the graph recurrently, allowing
word-level states to exchange information through
dependency and discourse edges. At each recur-
rent step, each word advances its current state by
receiving information from the current states of
its adjacent words. Thus with increasing numbers

of recurrent steps each word receives information
from a larger context. Figure 2 shows the recurrent
transition steps where each node works simultane-
ously within each transition step.

Compared with bidirectional DAG LSTM, our
method has several advantages. First, it keeps the
original graph structure, and therefore no informa-
tion is lost. Second, sibling information can be
easily incorporated by passing information up and
then down from a parent. Third, information ex-
change allows more parallelization, and thus can
be very efficient in computation.

Results show that our model outperforms
a bidirectional DAG LSTM baseline by 5.9%
in accuracy, overtaking the state-of-the-art sys-
tem of Peng et al. (2017) by 1.2%. Our
code is available at https://github.com/
freesunshine0316/nary-grn.

Our contributions are summarized as follows.

• We empirically compared graph LSTM with
DAG LSTM for n-ary relation extraction
tasks, showing that the former is better by
more effective use of structural information;

• To our knowledge, we are the first to investi-
gate a graph recurrent network for modeling
dependency and discourse relations.

2 Task Definition

Formally, the input for cross-sentence n-ary rela-
tion extraction can be represented as a pair (E , T ),
where E = (✏1, . . . , ✏N ) is the set of entity men-
tions, and T = [S1; . . . ;SM ] is a text consisting
of multiple sentences. Each entity mention ✏i be-
longs to one sentence in T . There is a predefined
relation set R = (r1, . . . , rL,None), where None
represents that no relation holds for the entities.



2228

This task can be formulated as a binary classifi-
cation problem of determining whether ✏1, . . . , ✏N
together form a relation (Peng et al., 2017), or
a multi-class classification problem of detecting
which relation holds for the entity mentions. Take
Table 1 as an example. The binary classification
task is to determine whether gefitinib would have
an effect on this type of cancer, given a cancer
patient with 858E mutation on gene EGFR. The
multi-class classification task is to detect the exact
drug effect: response, resistance, sensitivity, etc.

3 Baseline: Bi-directional DAG LSTM

Peng et al. (2017) formulate the task as a graph-
structured problem in order to adopt rich depen-
dency and discourse features. In particular, Stan-
ford parser (Manning et al., 2014) is used to assign
syntactic structure to input sentences, and heads of
two consecutive sentences are connected to rep-
resent discourse information, resulting in a graph
structure. For each input graph G = (V,E), the
nodes V are words within input sentences, and
each edge e 2 E connects two words that ei-
ther have a relation or are adjacent to each other.
Each edge is denoted as a triple (i, j, l), where
i and j are the indices of the source and target
words, respectively, and the edge label l indicates
either a dependency or discourse relation (such as
“nsubj”) or a relative position (such as “next tok”
or “prev tok”). Throughout this paper, we use
Ein(j) and Eout(j) to denote the sets of incom-
ing and outgoing edges for word j.

For a bi-directional DAG LSTM baseline, we
follow Peng et al. (2017), splitting each input
graph into two separate DAGs by separating left-
to-right edges from right-to-left edges (Figure 1).
Each DAG is encoded by using a DAG LSTM
(Section 3.2), which takes both source words and
edge labels as inputs (Section 3.1). Finally, the
hidden states of entity mentions from both LSTMs
are taken as inputs to a logistic regression classi-
fier to make a prediction:

ŷ = softmax(W0[h✏1 ; . . . ;h✏N ] + b0), (1)

where h✏j is the hidden state of entity ✏j . W0 and
b0 are parameters.

3.1 Input Representation

Both nodes and edge labels are useful for model-
ing a syntactic graph. As the input to our DAG

LSTM, we first calculate the representation for
each edge (i, j, l) by:

xli,j = W1
⇣
[el; ei]

⌘
+ b1, (2)

where W1 and b1 are model parameters, ei is the
embedding of the source word indexed by i, and
el is the embedding of the edge label l.

3.2 State transition
The baseline LSTM model learns DAG represen-
tations sequentially, following word orders. Tak-
ing the edge representations (such as xli,j) as input,
gated state transition operations are executed on
both the forward and backward DAGs. For each
word j, the representations of its incoming edges
Ein(j) are summed up as one vector:

xinj =
X

(i,j,l)2Ein(j)

xli,j (3)

Similarly, for each word j, the states of all incom-
ing nodes are summed to a single vector before
being passed to the gated operations:

hinj =
X

(i,j,l)2Ein(j)

hi (4)

Finally, the gated state transition operation for the
hidden state hj of the j-th word can be defined as:

ij = �(Wix
in
j + Uih

in
j + bi)

oj = �(Wox
in
j + Uoh

in
j + bo)

fi,j = �(Wfx
l
i,j + Ufhi + bf )

uj = �(Wux
in
j + Uuh

in
j + bu)

cj = ij � uj +
X

(i,j,l)2Ein(j)

fi,j � ci

hj = oj � tanh(cj),

(5)

where ij , oj and fi,j are a set of input, output and
forget gates, respectively, and Wx, Ux and bx (x 2
{i, o, f, u}) are model parameters.

3.3 Comparison with Peng et al. (2017)
Our baseline is computationally similar to Peng
et al. (2017), but different on how to utilize edge
labels in the gated network. In particular, Peng
et al. (2017) make model parameters specific to
edge labels. They consider two model variations,
namely Full Parametrization (FULL) and Edge-
Type Embedding (EMBED). FULL assigns distinct



2229

...

...

...

...

time

0     1    ...          t-1

t

...
...

...

...

...

...

...

...

Figure 2: Graph state transitions via message passing,
where each wi is a word.

Us (in Equation 5) to different edge types, so that
each edge label is associated with a 2D weight ma-
trix to be tuned in training. On the other hand, EM-
BED assigns each edge label to an embedding vec-
tor, but complicates the gated operations by chang-
ing the Us to be 3D tensors.1

In contrast, we take edge labels as part of the
input to the gated network. In general, the edge
labels are first represented as embeddings, before
being concatenated with the node representation
vectors (Equation 2). We choose this setting for
both the baseline and our graph state LSTM model
in Section 4, since it requires fewer parameters
compared with FULL and EMBED, thus being less
exposed to overfitting on small-scaled data.

4 Graph State LSTM

Our input graph formulation strictly follows Sec-
tion 3. In particular, our model adopts the same
methods for calculating input representation (as in
Section 3.1) and performing classification as the
baseline model. However, different from the base-
line bidirectional DAG LSTM model, we leverage
a graph-structured LSTM to directly model the in-
put graph, without splitting it into two DAGs.

Figure 2 shows an overview of our model. For-
mally, given an input graph G = (V,E), we define
a state vector hj for each word vj 2 V . The state
of the graph consists of all word states, and thus
can be represented as:

g = {hj}|vj2V (6)
1For more information please refer Section 3.3 of Peng

et al. (2017).

In order to capture non-local information, our
model performs information exchange between
words through a recurrent state transition pro-
cess, resulting in a sequence of graph states
g0, g1, . . . , gt, where gt = {hjt}|vj2V . The ini-
tial graph state g0 consists of a set of initial word
states hj0 = h0, where h0 is a zero vector.

4.1 State transition
Following the approches of Song et al. (2018) and
Zhang et al. (2018), a recurrent neural network is
utilized to model the state transition process. In
particular, the transition from gt�1 to gt consists
of hidden state transition for each word, as shown
in Figure 2. At each step t, we allow information
exchange between a word and all words that are
directly connected to the word. To avoid gradi-
ent diminishing or bursting, gated LSTM cells are
adopted, where a cell cjt is taken to record mem-
ory for hjt . We use an input gate i

j
t , an output gate

ojt and a forget gate f
j
t to control information flow

from the inputs and to hjt .
The inputs to a word vj , include representations

of edges that are connected to vj , where vj can be
either the source or the target of the edge. Simi-
lar to Section 3.1, we define each edge as a triple
(i, j, l), where i and j are indices of the source and
target words, respectively, and l is the edge label.
xli,j is the representation of edge (i, j, l). The in-
puts for vj are distinguished by incoming and out-
going directions, where:

xij =
X

(i,j,l)2Ein(j)

xli,j

xoj =
X

(j,k,l)2Eout(j)

xlj,k
(7)

Here Ein(j) and Eout(j) denote the sets of incom-
ing and outgoing edges of vj , respectively.

In addition to edge inputs, a cell also takes the
hidden states of its incoming and outgoing words
during a state transition. In particular, the states
of all incoming words and outgoing words are
summed up, respectively:

hij =
X

(i,j,l)2Ein(j)

hit�1

hoj =
X

(j,k,l)2Eout(j)

hkt�1,
(8)

Based on the above definitions of xij , x
o
j , h

i
j and

hoj , the recurrent state transition from gt�1 to gt,



2230

as represented by hjt , is defined as:

ijt = �(Wix
i
j + Ŵix

o
j + Uih

i
j + Ûih

o
j + bi)

ojt = �(Wox
i
j + Ŵox

o
j + Uoh

i
j + Ûoh

o
j + bo)

f jt = �(Wfx
i
j + Ŵfx

o
j + Ufh

i
j + Ûfh

o
j + bf )

ujt = �(Wux
i
j + Ŵux

o
j + Uuh

i
j + Ûuh

o
j + bu)

cjt = f
j
t � c

j
t�1 + i

j
t � u

j
t

hjt = o
j
t � tanh(c

j
t ),

where ijt , o
j
t and f

j
t are the input, output and

forget gates, respectively. Wx, Ŵx, Ux, Ûx, bx
(x 2 {i, o, f, u}) are model parameters.

Graph State LSTM vs bidirectional DAG
LSTM A contrast between the baseline DAG
LSTM and our graph LSTM can be made from
the perspective of information flow. For the base-
line, information flow follows the natural word
order in the input sentence, with the two DAG
components propagating information from left to
right and from right to left, respectively. In con-
trast, information flow in our graph state LSTM is
relatively more concentrated at individual words,
with each word exchanging information with all
its graph neighbors simultaneously at each sate
transition. As a result, wholistic contextual infor-
mation can be leveraged for extracting features for
each word, as compared to separated handling of
bi-directional information flow in DAG LSTM. In
addition, arbitrary structures, including arbitrary
cyclic graphs, can be handled.

From an initial state with isolated words, in-
formation of each word propagates to its graph
neighbors after each step. Information exchange
between non-neighboring words can be achieved
through multiple transition steps. We experiment
with different transition step numbers to study the
effectiveness of global encoding. Unlike the base-
line DAG LSTM encoder, our model allows par-
allelization in node-state updates, and thus can be
highly efficient using a GPU.

5 Training

We train our models with a cross-entropy loss over
a set of gold standard data:

l = � log p(yi|Xi; ✓), (9)

where Xi is an input graph, yi is the gold class la-
bel of Xi, and ✓ is the model parameters. Adam
(Kingma and Ba, 2014) with a learning rate of

Data Avg. Tok. Avg. Sent. Cross
TERNARY 73.9 2.0 70.1%
BINARY 61.0 1.8 55.2%

Table 2: Dataset statistics. Avg. Tok. and Avg. Sent. are
the average number of tokens and sentences, respec-
tively. Cross is the percentage of instances that contain
multiple sentences.

0.001 is used as the optimizer, and the model that
yields the best devset performance is selected to
evaluate on the test set. Dropout with rate 0.3 is
used during training. Both training and evaluation
are conducted using a Tesla K20X GPU.

6 Experiments

We conduct experiments for the binary relation de-
tection task and the multi-class relation extraction
task discussed in Section 2.

6.1 Data
We use the dataset of Peng et al. (2017), which
is a biomedical-domain dataset focusing on drug-
gene-mutation ternary relations,2 extracted from
PubMed. It contains 6987 ternary instances about
drug-gene-mutation relations, and 6087 binary in-
stances about drug-mutation sub-relations. Table
2 shows statistics of the dataset. Most instances
of ternary data contain multiple sentences, and the
average number of sentences is around 2. There
are five classification labels: “resistance or non-
response”, “sensitivity”, “response”, “resistance”
and “None”. We follow Peng et al. (2017) and bi-
narize multi-class labels by grouping all relation
classes as “Yes” and treat “None” as “No”.

6.2 Settings
Following Peng et al. (2017), five-fold cross-
validation is used for evaluating the models,3 and
the final test accuracy is calculated by averaging
the test accuracies over all five folds. For each
fold, we randomly separate 200 instances from the
training set for development. The batch size is set
as 8 for all experiments. Word embeddings are
initialized with the 100-dimensional GloVe (Pen-
nington et al., 2014) vectors, pretrained on 6 bil-
lion words from Wikipedia and web text. The edge
label embeddings are 3-dimensional and randomly

2The dataset is available at
http://hanover.azurewebsites.net.

3The released data has been separated into 5 portions, and
we follow the exact split.



2231

Figure 3: Dev accuracies against transition steps for the
graph state LSTM model.

initialized. Pretrained word embeddings are not
updated during training. The dimension of hidden
vectors in LSTM units is set to 150.

6.3 Development Experiments
We first analyze our model on the drug-gene-
mutation ternary relation dataset, taking the first
among 5-fold cross validation settings for our data
setting. Figure 3 shows the devset accuracies of
different state transition numbers, where forward
and backward execute our graph state model only
on the forward or backward DAG, respectively.
Concat concatenates the hidden states of forward
and backward. All executes our graph state model
on original graphs.

The performance of forward and backward lag
behind concat, which is consistent with the intu-
ition that both forward and backward relations are
useful (Peng et al., 2017). In addition, all gives
better accuracies compared with concat, demon-
strating the advantage of simultaneously consider-
ing forward and backward relations during repre-
sentation learning. For all the models, more state
transition steps result in better accuracies, where
larger contexts can be integrated in the represen-
tations of graphs. The performance of all starts to
converge after 4 and 5 state transitions, so we set
the number of state transitions to 5 in the remain-
ing experiments.

6.4 Final results
Table 3 compares our model with the bidirec-
tional DAG baseline and the state-of-the-art results
on this dataset, where EMBED and FULL have
been briefly introduced in Section 3.3. +multi-
task applies joint training of both ternary (drug-
gene-mutation) relations and their binary (drug-
mutation) sub-relations. Quirk and Poon (2017)
use a statistical method with a logistic regres-
sion classifier and features derived from shortest
paths between all entity pairs. Bidir DAG LSTM

Model Single Cross
Quirk and Poon (2017) 74.7 77.7
Peng et al. (2017) - EMBED 76.5 80.6
Peng et al. (2017) - FULL 77.9 80.7

+ multi-task – 82.0
Bidir DAG LSTM 75.6 77.3
GS GLSTM 80.3* 83.2*

Table 3: Average test accuracies for TERNARY drug-
gene-mutation interactions. Single represents experi-
ments only on instances within single sentences, while
Cross represents experiments on all instances. *: sig-
nificant at p < 0.01

is our bidirectional DAG LSTM baseline, and GS
GLSTM is our graph state LSTM model.

Using all instances (the Cross column in Table
3), our graph state LSTM model shows the highest
test accuracy among all methods, which is 5.9%
higher than our baseline.4 The accuracy of our
baseline is lower than EMBED and FULL of Peng
et al. (2017), which is likely due to the differences
mentioned in Section 3.3. Our final results are bet-
ter than Peng et al. (2017), despite the fact that we
do not use multi-task learning.

We also report accuracies only on instances
within single sentences (column Single in Table
3), which exhibit similar contrasts. Note that all
systems show performance drops when evaluated
only on single-sentence relations, which are actu-
ally more challenging. One reason may be that
some single sentences cannot provide sufficient
context for disambiguation, making it necessary to
study cross-sentence context. Another reason may
be overfitting caused by relatively fewer training
instances in this setting, as only 30% instances are
within a single sentence. One interesting obser-
vation is that our baseline shows the least perfor-
mance drop of 1.7 points, in contrast to up to 4.1
for other neural systems. This can be a supporting
evidence for overfitting, as our baseline has fewer
parameters at least than FULL and EMBED.

6.5 Analysis
Efficiency. Table 4 shows the training and de-

coding time of both the baseline and our model.
Our model is 8 to 10 times faster than the base-
line in training and decoding speeds, respectively.
By revisiting Table 2, we can see that the average
number of tokens for the ternary-relation data is

4p < 0.01 using t-test. For the remaining of this paper,
we use the same measure for statistical significance.



2232

Model Train Decode
Bidir DAG LSTM 281s 27.3s
GS GLSTM 36.7s 2.7s

Table 4: The average times for training one epoch
and decoding (seconds) over five folds on drug-gene-
mutation TERNARY cross sentence setting.

74, which means that the baseline model has to ex-
ecute 74 recurrent transition steps for calculating
a hidden state for each input word. On the other
hand, our model only performs 5 state transitions,
and calculations between each pair of nodes for
one transition are parallelizable. This accounts for
the better efficiency of our model.

Accuracy against sentence length Figure 5
(a) shows the test accuracies on different sentence
lengths. We can see that GS GLSTM and Bidir
DAG LSTM show performance increase along in-
creasing input sentence lengths. This is likely be-
cause longer contexts provide richer information
for relation disambiguation. GS GLSTM is consis-
tently better than Bidir DAG LSTM, and the gap is
larger on shorter instances. This demonstrates that
GS GLSTM is more effective in utilizing a smaller
context for disambiguation.

Accuracy against the maximal number of
neighbors Figure 5 (b) shows the test accura-
cies against the maximum number of neighbors.
Intuitively, it is easier to model graphs containing
nodes with more neighbors, because these nodes
can serve as a “supernode” that allow more ef-
ficient information exchange. The performances
of both GS GLSTM and Bidir DAG LSTM in-
crease with increasing maximal number of neigh-
bors, which coincide with this intuition. In addi-
tion, GS GLSTM shows more advantage than Bidir
DAG LSTM under the inputs having lower maxi-
mal number of neighbors, which further demon-
strates the superiority of GS GLSTM over Bidir
DAG LSTM in utilizing context information.

Case study Figure 4 visualizes the merits of
GS GLSTM over Bidir DAG LSTM using two ex-
amples. GS GLSTM makes the correct predictions
for both cases, while Bidir DAG LSTM fails to.

The first case generally mentions that Gefitinib
does not have an effect on T790M mutation on
EGFR gene. Note that both “However” and “was
not” serve as indicators; thus incorporating them
into the contextual vectors of these entity men-

Model Single Cross
Quirk and Poon (2017) 73.9 75.2
Miwa and Bansal (2016) 75.9 75.9
Peng et al. (2017) - EMBED 74.3 76.5
Peng et al. (2017) - FULL 75.6 76.7

+ multi-task – 78.5
Bidir DAG LSTM 76.9 76.4
GS GLSTM 83.5* 83.6*

Table 5: Average test accuracies in five-fold cross-
validation for BINARY drug-mutation interactions.

tions is important for making a correct prediction.
However, both indicators are leaves of the depen-
dency tree, making it impossible for Bidir DAG
LSTM to incorporate them into the contextual vec-
tors of entity mentions up the tree through depen-
dency edges.5 On the other hand, it is easier for GS
GLSTM. For instance, “was not” can be incorpo-
rated into “Gefitinib” through “suppressed

agent���!
treatment nn�! Gefitinib”.

The second case is to detect the relation among
“cetuximab” (drug), “EGFR” (gene) and “S492R”
(mutation), which does not exist. However, the
context introduces further ambiguity by mention-
ing another drug “Panitumumab”, which does
have a relation with “EGFR” and “S492R”. Being
sibling nodes in the dependency tree, “can not” is
an indicator for the relation of “cetuximab”. GS
GLSTM is correct, because “can not” can be easily
included into the contextual vector of “cetuximab”
in two steps via “bind

nsubj���!cetuximab”.

6.6 Results on Binary Sub-relations

Following previous work, we also evaluate our
model on drug-mutation binary relations. Table 5
shows the results, where Miwa and Bansal (2016)
is a state-of-the-art model using sequential and
tree-structured LSTMs to jointly capture linear
and dependency contexts for relation extraction.
Other models have been introduced in Section 6.4.

Similar to the ternary relation extraction exper-
iments, GS GLSTM outperforms all the other sys-
tems with a large margin, which shows that the
message passing graph LSTM is better at encoding
rich linguistic knowledge within the input graphs.
Binary relations being easier, both GS GLSTM and
Bidir DAG LSTM show increased or similar per-
formances compared with the ternary relation ex-

5As shown in Figure 1, a directional DAG LSTM propa-
gates information according to the edge directions.



2233

However , the phosphorylation level of EGFR in EGFR2 T790M3 mutatnt  cells  ( H1975TM/ LR ) was not suppressed by Gefitinib1 treatment  .
(a)

det

advmod

nn

nsubjpass

prep
nn

nn
amod

prep

appos auxpassneg

agent

nn

Panitumumab    can   still   bind  to  an   EGFR2     mutant   S492R3  to  which   cetuximab1   can    not   bind    to      .  
advmod

nsubj prep
det

nn dep

rel
nsubj

aux
neg

rcmod

prep
aux

(b)

Figure 4: Example cases. Words with subindices 1, 2 and 3 represent drugs, genes and mutations, respectively.
References for both cases are “No”. For both cases, GS GLSTM makes the correct predictions, while Bidir DAG
LSTM does incorrectly.

74.6 75.3
78.781.5 82.2

84.4

60

70

80

90

[0.0, 45.0) [45.0, 75.0) [75.0,	+∞)

Bidir DAG LSTM GS GLSTM

75.7 76.6

82.582 83.5
84

70

75

80

85

[0.0, 10.0) [10.0, 15.0) [15.0,	+∞)

Bidir DAG LSTM GS GLSTM

(b)

(a)

Figure 5: Test set performances on (a) different sen-
tence lengths, and (b) different maximal number of
neighbors.

periments. On this set, our bidirectional DAG
LSTM model is comparable to FULL using all in-
stances (“Cross”) and slightly better than FULL
using only single-sentence instances (“Single”).

6.7 Fine-grained Classification

Our dataset contains five classes as mentioned in
Section 6.1. However, previous work only investi-
gates binary relation detection. Here we also study
the multi-class classification task, which can be
more informative for applications.

Table 6 shows accuracies on multi-class relation
extraction, which makes the task more ambigu-
ous compared with binary relation extraction. The
results show similar comparisons with the binary
relation extraction results. However, the perfor-
mance gaps between GS GLSTM and Bidir DAG
LSTM dramatically increase, showing the superi-
ority of GS GLSTM over Bidir DAG LSTM in uti-
lizing context information.

7 Related Work

N -ary relation extraction N -ary relation ex-
tractions can be traced back to MUC-7 (Chinchor,

Model TERNARY BINARY
Bidir DAG LSTM 51.7 50.7
GS GLSTM 71.1* 71.7*

Table 6: Average test accuracies for multi-class relation
extraction with all instances (“Cross”).

1998), which focuses on entity-attribution rela-
tions. It has also been studied in biomedical do-
main (McDonald et al., 2005), but only the in-
stances within a single sentence are considered.
Previous work on cross-sentence relation extrac-
tion relies on either explicit co-reference annota-
tion (Gerber and Chai, 2010; Yoshikawa et al.,
2011), or the assumption that the whole document
refers to a single coherent event (Wick et al., 2006;
Swampillai and Stevenson, 2011). Both simplify
the problem and reduce the need for learning bet-
ter contextual representation of entity mentions. A
notable exception is Quirk and Poon (2017), who
adopt distant supervision and integrated contex-
tual evidence of diverse types without relying on
these assumptions. However, they only study bi-
nary relations. We follow Peng et al. (2017) by
studying ternary cross-sentence relations.

Graph encoder Liang et al. (2016) build a
graph LSTM model for semantic object parsing,
which aims to segment objects within an image
into more fine-grained, semantically meaningful
parts. The nodes of an input graph come from im-
age superpixels, and the edges are created by con-
necting spatially neighboring nodes. Their model
is similar as Peng et al. (2017) by calculating node
states sequentially: for each input graph, a start
node and a node sequence are chosen, which de-
termines the order of recurrent state updates. In
contrast, our graph LSTM do not need ordering of
graph nodes, and is highly parallelizable.



2234

Graph convolutional networks (GCNs) and very
recently graph recurrent networks (GRNs) have
been used to model graph structures in NLP tasks,
such as semantic role labeling (Marcheggiani and
Titov, 2017), machine translation (Bastings et al.,
2017), text generation (Song et al., 2018), text
representation (Zhang et al., 2018) and seman-
tic parsing (Xu et al., 2018b,a). In particular,
Zhang et al. (2018) use GRN to represent raw
sentences by building a graph structure of neigh-
boring words and a sentence-level node, showing
that the encoder outperforms BiLSTMs and Trans-
former (Vaswani et al., 2017) on classification and
sequence labeling tasks; Song et al. (2018) build a
GRN for encoding AMR graphs, showing that the
representation is superior compared to BiLSTM
on serialized AMR. Our work is in line with their
work in the investigation of GRN on NLP. To our
knowledge, we are the first to use GRN for repre-
senting dependency and discourse structures. Un-
der the same recurrent framework, we show that
modeling the original graphs with one GRN model
is more useful than two DAG LSTMs for our rela-
tion extraction task. We choose GRN as our main
method because it gives a more fair comparison
with DAG LSTM. We leave it to future work to
compare GCN and GRN for our task.

8 Conclusion

We explored a graph-state LSTM model for cross-
sentence n-ary relation extraction, which uses a
recurrent state transition process to incrementally
refine a neural graph state representation capturing
graph structure contexts. Compared with a bidi-
rectional DAG LSTM baseline, our model has sev-
eral advantages. First, it does not change the input
graph structure, so that no information can be lost.
For example, it can easily incorporate sibling in-
formation when calculating the contextual vector
of a node. Second, it is better parallelizable. Ex-
periments show significant improvements over the
previously reported numbers, including that of the
bidirectional graph LSTM model.

For future work, we consider adding corefer-
ence information as an entity mention can have
coreferences, which help on information collec-
tion. Another possible direction is including word
sense information. Confusing caused by word
senses can be a severe problem. Not only content
words, but also propositions can introduce word
sense problem (Gong et al., 2018).

Acknowledge We thank the anonymized re-
viewers for their insightful comments, and the
Center for Integrated Research Computing (CIRC)
of University of Rochester for making special
reservations for computation resources.

References
Joost Bastings, Ivan Titov, Wilker Aziz, Diego

Marcheggiani, and Khalil Simaan. 2017. Graph
convolutional encoders for syntax-aware neural ma-
chine translation. In Conference on Empirical Meth-
ods in Natural Language Processing (EMNLP-17).

Nancy A Chinchor. 1998. Overview of muc-7/met-2.
Technical report, SCIENCE APPLICATIONS IN-
TERNATIONAL CORP SAN DIEGO CA.

Matthew Gerber and Joyce Chai. 2010. Beyond nom-
bank: A study of implicit arguments for nominal
predicates. In Proceedings of the 48th Annual Meet-
ing of the Association for Computational Linguistics
(ACL-10).

Hongyu Gong, Suma Bhat, and Pramod Viswanath.
2018. Embedding syntax and semantics of prepo-
sitions via tensor decomposition. In Proceedings
of the 2018 Meeting of the North American chap-
ter of the Association for Computational Linguistics
(NAACL-18).

Matthew R. Gormley, Mo Yu, and Mark Dredze. 2015.
Improved relation extraction with feature-rich com-
positional embedding models. In Conference on
Empirical Methods in Natural Language Processing
(EMNLP-15).

Iris Hendrickx, Su Nam Kim, Zornitsa Kozareva,
Preslav Nakov, Diarmuid Ó Séaghdha, Sebastian
Padó, Marco Pennacchiotti, Lorenza Romano, and
Stan Szpakowicz. 2009. Semeval-2010 task 8:
Multi-way classification of semantic relations be-
tween pairs of nominals. In Proceedings of
the Workshop on Semantic Evaluations: Recent
Achievements and Future Directions.

Jing Jiang and ChengXiang Zhai. 2007. A systematic
exploration of the feature space for relation extrac-
tion. In Proceedings of the 2015 Meeting of the
North American chapter of the Association for Com-
putational Linguistics (NAACL-15).

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980 .

Thomas N. Kipf and Max Welling. 2017. Semi-
supervised classification with graph convolutional
networks. In International Conference on Learning
Representations (ICLR).

Qi Li and Heng Ji. 2014. Incremental joint extraction
of entity mentions and relations. In Proceedings
of the 52nd Annual Meeting of the Association for
Computational Linguistics (ACL-14).



2235

Xiaodan Liang, Xiaohui Shen, Jiashi Feng, Liang Lin,
and Shuicheng Yan. 2016. Semantic object pars-
ing with graph LSTM. In European Conference on
Computer Vision.

Christopher D. Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven J. Bethard, and David Mc-
Closky. 2014. The Stanford CoreNLP natural lan-
guage processing toolkit.

Diego Marcheggiani and Ivan Titov. 2017. Encoding
sentences with graph convolutional networks for se-
mantic role labeling. In Conference on Empirical
Methods in Natural Language Processing (EMNLP-
17).

Ryan McDonald, Fernando Pereira, Seth Kulick, Scott
Winters, Yang Jin, and Pete White. 2005. Simple
algorithms for complex relation extraction with ap-
plications to biomedical IE. In Proceedings of the
43rd Annual Meeting of the Association for Compu-
tational Linguistics (ACL’05).

Makoto Miwa and Mohit Bansal. 2016. End-to-end re-
lation extraction using LSTMs on sequences and tree
structures. In Proceedings of the 54th Annual Meet-
ing of the Association for Computational Linguistics
(ACL-16).

Martha Palmer, Daniel Gildea, and Paul Kingsbury.
2005. The proposition bank: An annotated corpus of
semantic roles. Computational linguistics 31(1):71–
106.

Nanyun Peng, Hoifung Poon, Chris Quirk, Kristina
Toutanova, and Wen-tau Yih. 2017. Cross-sentence
n-ary relation extraction with graph LSTMs. Trans-
actions of the Association for Computational Lin-
guistics 5:101–115.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. GloVe: Global vectors for
word representation. In Conference on Empirical
Methods in Natural Language Processing (EMNLP-
14).

Barbara Plank and Alessandro Moschitti. 2013. Em-
bedding semantic similarity in tree kernels for do-
main adaptation of relation extraction. In Proceed-
ings of the 51st Annual Meeting of the Association
for Computational Linguistics (ACL-13).

Chris Quirk and Hoifung Poon. 2017. Distant super-
vision for relation extraction beyond the sentence
boundary. In Proceedings of the 15th Conference
of the European Chapter of the ACL (EACL-17).

Linfeng Song, Yue Zhang, Zhiguo Wang, and Daniel
Gildea. 2018. A graph-to-sequence model for amr-
to-text generation. In Proceedings of the 56th An-
nual Meeting of the Association for Computational
Linguistics (ACL-18).

Kumutha Swampillai and Mark Stevenson. 2011. Ex-
tracting relations within and across sentences. In
Proceedings of the International Conference Recent
Advances in Natural Language Processing 2011.

Kai Sheng Tai, Richard Socher, and Christopher D.
Manning. 2015. Improved semantic representations
from tree-structured long short-term memory net-
works. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Linguistics
(ACL-15).

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Ł ukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In I. Guyon, U. V. Luxburg, S. Bengio,
H. Wallach, R. Fergus, S. Vishwanathan, and R. Gar-
nett, editors, Advances in Neural Information Pro-
cessing Systems 30, pages 5998–6008.

Michael Wick, Aron Culotta, and Andrew McCal-
lum. 2006. Learning field compatibilities to extract
database records from unstructured text. In Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP-06).

Kun Xu, Lingfei Wu, Zhiguo Wang, and Vadim
Sheinin. 2018a. Graph2seq: Graph to se-
quence learning with attention-based neural net-
works. arXiv preprint arXiv:1804.00823 .

Kun Xu, Lingfei Wu, Zhiguo Wang, Mo Yu, Li-
wei Chen, and Vadim Sheinin. 2018b. Exploit-
ing rich syntactic information for semantic parsing
with graph-to-sequence model. In Conference on
Empirical Methods in Natural Language Processing
(EMNLP-18).

Katsumasa Yoshikawa, Sebastian Riedel, Tsutomu Hi-
rao, Masayuki Asahara, and Yuji Matsumoto. 2011.
Coreference based event-argument relation extrac-
tion on biomedical text. Journal of Biomedical Se-
mantics 2(5):S6.

Dmitry Zelenko, Chinatsu Aone, and Anthony
Richardella. 2003. Kernel methods for relation
extraction. Journal of machine learning research
3(Feb):1083–1106.

Meishan Zhang, Yue Zhang, and Guohong Fu. 2017.
End-to-end neural relation extraction with global op-
timization. In Conference on Empirical Methods in
Natural Language Processing (EMNLP-17).

Yue Zhang, Qi Liu, and Linfeng Song. 2018. Sentence-
state lstm for text representation. In Proceedings of
the 56th Annual Meeting of the Association for Com-
putational Linguistics (ACL-18).

Shubin Zhao and Ralph Grishman. 2005. Extracting
relations with integrated information using kernel
methods. In Proceedings of the 43rd Annual Meet-
ing of the Association for Computational Linguistics
(ACL’05).


