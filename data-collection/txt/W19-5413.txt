



















































Unbabel's Submission to the WMT2019 APE Shared Task: BERT-Based Encoder-Decoder for Automatic Post-Editing


Proceedings of the Fourth Conference on Machine Translation (WMT), Volume 3: Shared Task Papers (Day 2) pages 118–123
Florence, Italy, August 1-2, 2019. c©2019 Association for Computational Linguistics

118

Unbabel’s Submission to the WMT2019 APE Shared Task:
BERT-based Encoder-Decoder for Automatic Post-Editing

António V. Lopes
Unbabel

M. Amin Farajian
Unbabel

Gonçalo M. Correia
Instituto de Telecomunicações

Jonay Trenous
Unbabel

André F. T. Martins
Unbabel

{antonio.lopes, amin, sony,andre.martins}@unbabel.com
goncalo.correia@lx.it.pt

Abstract

This paper describes Unbabel’s submission
to the WMT2019 APE Shared Task for
the English-German language pair. Follow-
ing the recent rise of large, powerful, pre-
trained models, we adapt the BERT pretrained
model to perform Automatic Post-Editing in
an encoder-decoder framework. Analogously
to dual-encoder architectures we develop a
BERT-based encoder-decoder (BED) model in
which a single pretrained BERT encoder re-
ceives both the source src and machine trans-
lation mt strings. Furthermore, we explore a
conservativeness factor to constrain the APE
system to perform fewer edits. As the official
results show, when trained on a weighted com-
bination of in-domain and artificial training
data, our BED system with the conservative-
ness penalty improves significantly the trans-
lations of a strong Neural Machine Translation
(NMT) system by −0.78 and +1.23 in terms
of TER and BLEU, respectively. Finally, our
submission achieves a new state-of-the-art, ex-
aequo, in English-German APE of NMT.

1 Introduction

Automatic Post Editing (APE) aims to improve the
quality of an existing Machine Translation (MT)
system by learning from human edited samples. It
first started by the automatic article selection for
English noun phrases (Knight and Chander, 1994)
and continued by correcting the errors of more
complex statistical MT systems (Bojar et al., 2015,
2016; Chatterjee et al., 2018a). In 2018, the orga-
nizers of the WMT shared task introduced, for the
first time, the automatic post-editing of neural MT
systems (Chatterjee et al., 2018b).

Despite its successful application to SMT sys-
tems, it has been more challenging to automati-
cally post edit the strong NMT systems (Junczys-
Dowmunt and Grundkiewicz, 2018). This mostly

is due to the fact that high quality NMT sys-
tems make fewer mistakes, limiting the improve-
ments obtained by state-of-the-art APE systems
such as self-attentive transformer-based models
(Tebbifakhr et al., 2018; Junczys-Dowmunt and
Grundkiewicz, 2018). In spite of these findings
and considering the dominance of the NMT ap-
proach in both the academic and industrial appli-
cations, the WMT shared task organizers decided
to move completely to the NMT paradigm this
year and ignore the SMT technology. They also
provide the previous year in-domain training set
(i.e. 13k of <src,mt,pe> triplets) further in-
creasing the difficulty of the task.

Training state-of-the-art APE systems capable
of improving high quality NMT outputs requires
large amounts of training data, which is not al-
ways available, in particular for this WMT shared
task. Augmenting the training set with artificially
synthesized data is one of the popular and effec-
tive approaches for coping with this challenge. It
was first used to improve the quality of NMT sys-
tems (Sennrich et al., 2016) and then it was applied
to the APE task (Junczys-Dowmunt and Grund-
kiewicz, 2016). This approach, however, showed
limited success on automatically post editing the
high quality translations of APE systems.

Transfer learning is another solution to deal
with data sparsity in such tasks. It is based on
the assumption that the knowledge extracted from
other well-resourced tasks can be transferred to
the new tasks/domains. Recently, large models
pre-trained on multiple tasks with vast amounts
of data, for instance BERT and MT-DNN (Devlin
et al., 2018a; Liu et al., 2019), have obtained state-
of-the-art results when fine-tuned over a small set
of training samples. Following Correia and Mar-
tins (2019), in this paper we use BERT (Devlin
et al., 2018a) within the encoder-decoder frame-
work (§2.1) and formulate the task of Automatic



119

Post Editing as generating pe which is (possi-
bly) the modified version of mt given the original
source sentence src. As discussed in §2.1, in-
stead of using multi-encoder architecture, in this
work we concatenate the src and mt with the
BERT special token (i.e. [SEP] and feed them
to our single encoder.

We also introduce the conservativeness penalty,
a simple yet effective mechanism that controls the
freedom of our APE in modifying the given MT
output. As we show in §2.2, in the cases where
the automatic translations are of high quality, this
factor forces the APE system to do less modifi-
cations, hence avoids the well-known problem of
over-correction.

Finally, we augmented our original in-domain
training data with a synthetic corpus which con-
tains around 3M <src,mt,pe> triplets (§3.1).
As discussed in §4, our system is able to im-
prove significantly the MT outputs by −0.78
TER (Snover et al., 2016) and +1.23 BLEU (Pa-
pineni et al., 2002), achieving an ex-aequo first-
place in the English-German track.

2 Approach

In this section we describe the main features of our
APE system: the BERT-based encoder-decoder
(BED) and the conservativeness penalty.

2.1 BERT-based encoder-decoder

Following (Correia and Martins, 2019) we adapt
the BERT model to the APE task by integrating
the model in an encoder-decoder architecture. To
this aim we use a single BERT encoder to obtain
a joint representation of the src and mt sen-
tence and a BERT-based decoder where the multi-
head context attention block is initialized with the
weights of the self-attention block. Both the en-
coder and the decoder are initialized with the pre-
trained weights of the multilingual BERT1 (Devlin
et al., 2018b). Figure 1 depicts our BED model.

Instead of using multiple encoders to separately
encode src and mt, we use BERT pre-training
scheme, where the two strings after being con-
catenated by the [SEP] special symbol are fed
to the single encoder. We treat these sentences as
sentenceA and sentenceB in (Devlin et al.,
2018b) and assign different segment embeddings
to each of them. This emulates a similar setting

1https://github.com/google-research/
bert

Context
Attention

(Multi-Head Att.)

Input
Embedding

Output
Probabilities

Add & Norm

Linear

Softmax

Add & Norm

Add & Norm

Add & Norm

Add & Norm

Feed Forward

Feed Forward

N×

N×

Self-Attention
(Multi-Head Att.)

Self-Attention
(Multi-Head Att.)

Output
Embedding

Segments
Positions

Tokens pe1, …, peMmt1, …, mtKsrc1, …, srcN
B, …, BB, …, BA, …, A

0, …, M-10, …, K-10, …, N-1

Figure 1: BERT encoder decoder, taken from Correia
and Martins (2019).

to (Junczys-Dowmunt and Grundkiewicz, 2018)
where a dual-source encoder with shared parame-
ters is used to encode both input strings.

On the target side, following (Correia and Mar-
tins, 2019) we use a single decoder where the
context attention block is initialized with the self
attention weights, and all the weights of the
self-attention are shared with the respective self-
attention weights in the encoder.

2.2 Conservativeness penalty

With domain specific NMT systems making rel-
atively few translation errors, APE systems face
new challenges. This means more careful deci-
sions have to be made by the APE system, making
the least possible edits to the raw mt. To this aim,
we introduce our “conservativeness” penalty de-
veloped on the post editing penalty proposed by
(Junczys-Dowmunt and Grundkiewicz, 2016). It
is a simple yet effective method to penalize/reward
hypotheses in the beam, at inference time, that di-
verge far from the original input.

More formally, let V be the source and target
vocabulary. We define Vc = {Vsrc ∪ Vmt} as
the conservative tokens of an APE triplet, where
Vsrc, Vmt ⊂ V are the src and mt tokens, re-

https://github.com/google-research/bert
https://github.com/google-research/bert


120

spectively. For the sake of argument we define Vc
for decoding a single APE triplet, which can be
generalized to batch decoding with Vc defined for
each batch element. Given the |V | sized vector of
candidates ht at each decoding step t, we modify
the score/probability of each candidate v as:

ht(v) =

{
ht(v)− c if v ∈ V \ Vc
ht(v) otherwise

(1)

where c is the conservativeness penalty, penalizing
(or rewarding for negative values) all tokens of V
not present in Vc. Note that, this penalty can be
applied to either the raw non-normalized outputs
of the model (logit) or the final probabilities (log
probabilities).

As the log probabilities and logit scores have
different bounds of (−∞, 0) and (−∞,+∞), re-
spectively, c is set accordingly. Hence, for posi-
tive values of conservativeness the aim is to avoid
picking tokens not in the src and mt, thus, limit-
ing the number of corrections. On the other hand,
negative values enable over correction.

Moreover, in order to apply the penalty in the
log probabilities, there are some considerations
to take into account as we don’t renormalize af-
ter the transformation. For positive values, the
factor lowers the probability of all non conser-
vative tokens, either increasing the confidence of
an already picked conservative token, or favouring
these tokens that are close to the best candidate –
thus being closer to scores rather than probabili-
ties. In contrast, negative penalties might require
carefully selected values and truncating at the up-
per boundary – we did not experiment with nega-
tive values in this work, however the Quality Esti-
mation shared task winning system used an APE-
QE system with negative conservativeness (Kepler
et al., 2019).

In contrast with Junczys-Dowmunt and Grund-
kiewicz, our model takes into account both src
and mt, allowing to copy either of them directly.
This is beneficial to handle proper nouns as they
should be preserved in the post edition without
any modification. Moreover, instead of setting the
penalty as a fixed value of−1, we define it as a hy-
perparameter which enables a more dynamic con-
trol of our model’s post-editions to the mt input.

3 Experiments

3.1 Data

This year for the English-German language pair
the participants were provided an in-domain train-
ing set and the eSCAPE corpus, an artificially syn-
thesized generic training corpus for APE (Negri
et al., 2018). In addition to these corpora, they
were allowed to use any additional data to train
their systems. Considering this, and the fact that
the in-domain training set belongs to the IT do-
main, we decided to use our own synthetic training
corpus. Thus, we trained our models on a combi-
nation of the in-domain data released by the APE
task organizers and this synthetic dataset.

In-domain training set: we use the 13k triplets
of <src,mt,pe> in the IT domain without any
preprocessing as they are already preprocessed by
the shared task organizers. Despite the previous
year where the mt side was generated either by
a phrase-based or a neural MT system, this year
all the source sentences were translated only by a
neural MT system unknown to the participants.

Synthetic training set: instead of the eSCAPE
corpus provided by the organizers we created our
own synthetic corpus using the parallel data pro-
vided by the Quality Estimation shared task2. We
found this corpus closer to the IT domain which is
the target domain of the APE task. To create this
corpus we performed the following steps:

1. Split the corpus into 5 folds fi.

2. Use OpenNMT (Klein et al., 2017) to train 5
LSTM based translation models, one model
Mi for every subset created by removing fold
fi from the training data.

3. Translate each fold fi using the translation
ModelMi.

4. Join the translations to get an unbiased ma-
chine translated version of the full corpus.

5. Remove empty lines.

The final corpus has 3.3M triplets. We then
oversampled the in-domain training data 20 times
(Junczys-Dowmunt and Grundkiewicz, 2018) and
used them together with our synthetic data to train
our models.

2Dataset can be found under Additional Resouces at
http://www.statmt.org/wmt19/qe-task.html

http://www.statmt.org/wmt19/qe-task.html


121

System Beam ↓w/o c ↓best c ↓worst c
MT Baseline - 15.08 - -

BED
4 15.65 - -
6 15.61 - -

+ logprobs
4 - 14.84 (c = 1.5) 15.06 (c = 2.3)
6 - 14.87 (c = 1.5) 15.01 (c = 2.5)

+ logits
4 - 15.03 (c = 1.7) 15.25 (c = 0.9)
6 - 15.05 (c = 1.7) 15.23 (c = 0.9)

Table 1: TER scores of the baseline NMT system and our BERT encoder-decoder ape model. The columns “w/o
c”, “best c”, and “worst c” presents the scores of our system without the conservativeness penalty, with the best
and the worst conservativeness penalty settings on our dev corpus, respectively. “logprobs” and “logits” refer,
respectively, to the state where we apply the conservativeness factor (see §2.2)

3.2 BED training

We follow Correia and Martins for training our
BERT-based Encoder-Decoder APE models. In
particular, we set the learning rate to 5e−5 and use
bertadam optimizer to perform 200k steps from
which 20k are warmup steps. We set the effective
batch size to 2048 tokens. Furthermore, we also
use a shared matrix for the input and output token
embedddings and the projection layer (Press and
Wolf, 2017). Finally, we share the self-attention
weights between the encoder and the decoder and
initialize the multi-head attention of the decoder
with the self-attention weights of the encoder.

Similarly to Junczys-Dowmunt (2018), we ap-
ply a data weighting strategy during training.
However, we use a different weighting approach,
where each sample si is assigned a weight, wsi ,
defined as 1 − TER(si). This results in assign-
ing higher weights to the samples with less MT
errors and vice versa, which might sound counter
intuitive since in the APE task the goal is to learn
more from the samples with larger number of er-
rors. However, in this task, where the translations
are provided by strong NMT systems with very
small number of errors, our APE system needs to
be conservative and learn to perform limited num-
ber of modifications to the mt.

3.3 BED decoding

In the decoding step we perform the standard
beam decoding with our conservativeness factor.
We fine tuned the this factor on the dev set pro-
vided by the organizers. Furthermore, in our ex-
periments we set restrict the search to c ∈ [0,+5]
and use beam sizes of 4 and 6. In our prelimi-
nary experiments larger beam sizes didn’t help to
improve the performance further. Finally, we used

the evaluation script available on the website to ac-
cess the performance of our model.

4 Results and discussion

In our preliminary experiments we noticed that
using the pure BED model does not improve
the quality of the translations provided by strong
NMT systems. As Table 1 shows, it actually de-
grades the performance by−0.57 TER scores. Al-
though the scores in Correia and Martins are actu-
ally closer to the baseline, we find that using the
BED model only, without controlling the conser-
vativeness to the original MT can lead to baseline
level scores (on dev). Hence, we applied different
conservativeness penalties during the beam decod-
ing and as the results in Table1 show, different val-
ues for this hyperparameter significantly changes
the performance of our model. For the sake of
compactness, here we present only the best (i.e.
best c) and worst (i.e. worst c) scores by our
model, to compare the effect of this factor.

Furthermore, intuitively, logits stands as the
best candidate to apply the penalty, not only it
was done in a similar fashion previously (Junczys-
Dowmunt and Grundkiewicz, 2018), but also, af-
ter the normalization of the weights, the conserva-
tive tokens should have large peaks while having a
stable behaviour. However, we achieved our best
scores with penalties over the log probabilities,
suggesting pruning hypothesis directly after nor-
malizing the logits leads to more conservative out-
puts. Nonetheless, we leave as future work further
investigations on the impact of pruning before and
after normalizing the logits, as well as exploring
renormalization of the log probabilities. Finally,
we hypothesize that not only our BED model but
also other APE models could benefit from the con-



122

servativeness penalty. We, however, leave it to be
explored in future work.

Regarding the performance of our model on the
official test set, as the results of Table 2 show, we
outperform last year’s winning systems by almost
−0.4 TER and +0.5 BLEU, which for strong per-
forming NMT systems is significant. In addition,
our submission ranks first in the official results 3,
ex aequo with 3 other systems. Table 3 depicts the
official results of the shared task, considering only
the best submission of each team.

↓TER ↑BLEU
Baseline 16.84 74.73
(Tebbifakhr et al., 2018) 16.46 75.53
Primary 16.08 75.96
Contrastive 16.21 75.70

Table 2: Submission at the WMT APE shared task.

Although in this paper we did not present an ab-
lation analysis (due to time constraints), we hy-
pothesize that three BED training and decoding
techniques used in this work were influential on
the final result obtained for this task: i) the syn-
thetic training corpus contains more IT domain
samples than the generic eSCAPE corpus, mak-
ing it a suitable dataset to train APE systems for
this domain; ii) the data weighting mechanism
enforces the system to be more conservative and
learn fewer edits which is crucial for strong spe-
cialized NMT engines, and, finally, iii) the con-
servativeness factor is crucial to avoid the well-
known problem of over-correction posed generally
by APE systems over the high quality NMT out-
puts, guaranteeing faithfulness to the original MT.

5 Conclusion

We presented Unbabel’s submissions to the APE
shared task at WMT 2019 for the English-
German language pair. Our model uses the BERT
pre-trained language model within the encoder-
decoder framework and applies a conservative fac-
tor to control the faithfulness of APE system to the
original input stream.

The result of the official evaluation show that
our system is able to effectively detect and correct
the few errors made by the strong NMT system,
improving the score by −0.8 and +1.2 in terms of
TER and BLEU, respectively.

3Available at http://www.statmt.org/wmt19/
ape-task.html under Results.

System ↓Ter ↑BLEU
Ours (Unbabel) 16.06? 75.96
POSTECH 16.11? 76.22
USSAR DFKI 16.15? 75.75
FBK 16.37? 75.71
UdS MTL 16.77 75.03
IC USFD 16.78 74.88
Baseline 16.84 74.73
ADAP DCU 17.07 74.30

Table 3: APE Results as provided by the shared task or-
ganizers. We only present the best score of each team.
? indicates not statistically significantly different, ex
aequo.

Finally, using APE to improve strong in-
domain Neural Machine Translation systems is in-
creasingly more challenging, and ideally the edit-
ing system will tend to perform less and less mod-
ifications of the raw mt. In line with Junczys-
Dowmunt and Grundkiewicz’s suggestion, study-
ing how to apply APE to engines in generic data
(domain agnostic) can be a more challenging task,
as it would require more robustness and general-
ization of the APE system.

Acknowledgments

The authors would like to thank the anonymous
reviewers for the feedback. Moreover, we would
like to thank António Góis, Fábio Kepler, and
Miguel Vera for the fruitful discussions and help.
We would also like to thank the support provided
by the EU in the context of the PT2020 project
(contracts 027767 and 038510), by the European
Research Council (ERC StG DeepSPIN 758969),
and by the Fundação para a Ciência e Tecnologia
through contract UID/EEA/50008/2019.

References
Ondřej Bojar, Rajen Chatterjee, Christian Federmann,

Yvette Graham, Barry Haddow, Matthias Huck,
Antonio Jimeno Yepes, Philipp Koehn, Varvara
Logacheva, Christof Monz, Matteo Negri, Aure-
lie Neveol, Mariana Neves, Martin Popel, Matt
Post, Raphael Rubino, Carolina Scarton, Lucia Spe-
cia, Marco Turchi, Karin Verspoor, and Marcos
Zampieri. 2016. Findings of the 2016 conference
on machine translation. In Proceedings of the First
Conference on Machine Translation, pages 131–
198, Berlin, Germany. Association for Computa-
tional Linguistics.

Ondřej Bojar, Rajen Chatterjee, Christian Federmann,

http://www.statmt.org/wmt19/ape-task.html
http://www.statmt.org/wmt19/ape-task.html
https://doi.org/10.18653/v1/W16-2301
https://doi.org/10.18653/v1/W16-2301


123

Barry Haddow, Matthias Huck, Chris Hokamp,
Philipp Koehn, Varvara Logacheva, Christof Monz,
Matteo Negri, Matt Post, Carolina Scarton, Lucia
Specia, and Marco Turchi. 2015. Findings of the
2015 workshop on statistical machine translation.
In Proceedings of the Tenth Workshop on Statistical
Machine Translation, pages 1–46, Lisbon, Portugal.
Association for Computational Linguistics.

Rajen Chatterjee, Matteo Negri, Raphael Rubino, and
Marco Turchi. 2018a. Findings of the WMT 2018
shared task on automatic post-editing. In Proceed-
ings of the Third Conference on Machine Trans-
lation: Shared Task Papers, pages 710–725, Bel-
gium, Brussels. Association for Computational Lin-
guistics.

Rajen Chatterjee, Matteo Negri, Raphael Rubino, and
Marco Turchi. 2018b. Findings of the WMT 2018
shared task on automatic post-editing. In Proceed-
ings of the Third Conference on Machine Trans-
lation: Shared Task Papers, pages 710–725, Bel-
gium, Brussels. Association for Computational Lin-
guistics.

Gonçalo Correia and André Martins. 2019. A sim-
ple and effective approach to automatic post-editing
with transfer learning. In Proceedings of the 57th
annual meeting on association for computational
linguistics. Association for Computational Linguis-
tics.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018a. Bert: Pre-training of
deep bidirectional transformers for language under-
standing. arXiv preprint arXiv:1810.04805.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018b. Bert: Pre-training of
deep bidirectional transformers for language under-
standing. arXiv preprint arXiv:1810.04805.

Marcin Junczys-Dowmunt. 2018. Microsoft’s submis-
sion to the wmt2018 news translation task: How i
learned to stop worrying and love the data. In Pro-
ceedings of the Third Conference on Machine Trans-
lation: Shared Task Papers, pages 425–430.

Marcin Junczys-Dowmunt and Roman Grundkiewicz.
2016. Log-linear combinations of monolingual and
bilingual neural machine translation models for au-
tomatic post-editing. In Proceedings of the First
Conference on Machine Translation, pages 751–
758, Berlin, Germany. Association for Computa-
tional Linguistics.

Marcin Junczys-Dowmunt and Roman Grundkiewicz.
2018. MS-UEdin submission to the WMT2018 APE
shared task: Dual-source transformer for automatic
post-editing. In Proceedings of the Third Confer-
ence on Machine Translation: Shared Task Papers,
WMT 2018, Belgium, Brussels, October 31 - Novem-
ber 1, 2018, pages 822–826.

Fabio Kepler, Jonay Trénous, Marcos Treviso, Miguel
Vera, António Góis, M. Amin Farajian, António
V. Lopes, and André F. T. Martins. 2019. Unbabels
participation in the wmt19 translation quality esti-
mation shared task. In Proceedings of the Fourth
Conference on Machine Translation, Florence, Italy.
Association for Computational Linguistics.

Guillaume Klein, Yoon Kim, Yuntian Deng, Jean
Senellart, and Alexander M. Rush. 2017. Open-
NMT: Open-source toolkit for neural machine trans-
lation. In Proc. ACL.

Kevin Knight and Ishwar Chander. 1994. Automated
postediting of documents. In Proceedings of the
Twelfth AAAI National Conference on Artificial In-
telligence, AAAI’94, pages 779–784. AAAI Press.

Xiaodong Liu, Pengcheng He, Weizhu Chen, and Jian-
feng Gao. 2019. Multi-task deep neural networks
for natural language understanding. arXiv preprint
arXiv:1901.11504.

Matteo Negri, Marco Turchi, Rajen Chatterjee, and
Nicola Bertoldi. 2018. escape: a large-scale syn-
thetic corpus for automatic post-editing. In LREC
2018, Eleventh International Conference on Lan-
guage Resources and Evaluation, pages 24–30. Eu-
ropean Language Resources Association (ELRA).

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of
the 40th annual meeting on association for compu-
tational linguistics, pages 311–318. Association for
Computational Linguistics.

Ofir Press and Lior Wolf. 2017. Using the output em-
bedding to improve language models. In Proceed-
ings of the 15th Conference of the European Chap-
ter of the Association for Computational Linguistics:
Volume 2, Short Papers, pages 157–163, Valencia,
Spain. Association for Computational Linguistics.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Improving neural machine translation mod-
els with monolingual data. In Proceedings of the
54th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), pages
86–96, Berlin, Germany. Association for Computa-
tional Linguistics.

Matthew Snover, Bonnie Dorr, Richard Schwartz, Lin-
nea Micciulla, and John Makhoul. 2016. A study of
translation edit rate with targeted human annotation.
In Proceedings of association for machine transla-
tion in the Americas, pages Vol. 200, No. 6.

Amirhossein Tebbifakhr, Ruchit Agrawal, Matteo Ne-
gri, and Marco Turchi. 2018. Multi-source trans-
former with combined losses for automatic post edit-
ing. In Proceedings of the Third Conference on Ma-
chine Translation: Shared Task Papers, pages 846–
852, Belgium, Brussels. Association for Computa-
tional Linguistics.

https://doi.org/10.18653/v1/W15-3001
https://doi.org/10.18653/v1/W15-3001
https://www.aclweb.org/anthology/W18-6452
https://www.aclweb.org/anthology/W18-6452
https://www.aclweb.org/anthology/W18-6452
https://www.aclweb.org/anthology/W18-6452
https://doi.org/10.18653/v1/W16-2378
https://doi.org/10.18653/v1/W16-2378
https://doi.org/10.18653/v1/W16-2378
https://aclanthology.info/papers/W18-6467/w18-6467
https://aclanthology.info/papers/W18-6467/w18-6467
https://aclanthology.info/papers/W18-6467/w18-6467
https://doi.org/10.18653/v1/P17-4012
https://doi.org/10.18653/v1/P17-4012
https://doi.org/10.18653/v1/P17-4012
http://dl.acm.org/citation.cfm?id=2891730.2891850
http://dl.acm.org/citation.cfm?id=2891730.2891850
https://doi.org/10.18653/v1/P16-1009
https://doi.org/10.18653/v1/P16-1009
https://www.aclweb.org/anthology/W18-6471
https://www.aclweb.org/anthology/W18-6471
https://www.aclweb.org/anthology/W18-6471

