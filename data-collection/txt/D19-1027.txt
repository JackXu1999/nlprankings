




































Open Event Extraction from Online Text using a Generative Adversarial Network


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 282–291,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

282

Open Event Extraction from Online Text using a Generative Adversarial
Network

Rui Wang† Deyu Zhou†∗ Yulan He§
†School of Computer Science and Engineering, Key Laboratory of Computer Network

and Information Integration, Ministry of Education, Southeast University, China
§Department of Computer Science, University of Warwick, UK
{rui wang, d.zhou}@seu.edu.cn, yulan.he@warwick.ac.uk

Abstract

To extract the structured representations of
open-domain events, Bayesian graphical mod-
els have made some progress. However, these
approaches typically assume that all words in
a document are generated from a single event.
While this may be true for short text such as
tweets, such an assumption does not generally
hold for long text such as news articles. More-
over, Bayesian graphical models often rely on
Gibbs sampling for parameter inference which
may take long time to converge. To address
these limitations, we propose an event extrac-
tion model based on Generative Adversarial
Nets, called Adversarial-neural Event Model
(AEM). AEM models an event with a Dirich-
let prior and uses a generator network to cap-
ture the patterns underlying latent events. A
discriminator is used to distinguish documents
reconstructed from the latent events and the
original documents. A byproduct of the dis-
criminator is that the features generated by the
learned discriminator network allow the visu-
alization of the extracted events. Our model
has been evaluated on two Twitter datasets and
a news article dataset. Experimental results
show that our model outperforms the baseline
approaches on all the datasets, with more sig-
nificant improvements observed on the news
article dataset where an increase of 15% is ob-
served in F-measure.

1 Introduction

With the increasing popularity of the Internet,
online texts provided by social media platform
(e.g. Twitter) and news media sites (e.g. Google
news) have become important sources of real-
world events. Therefore, it is crucial to automati-
cally extract events from online texts.

Due to the high variety of events discussed on-
line and the difficulty in obtaining annotated data

∗corresponding author

for training, traditional template-based or super-
vised learning approaches for event extraction are
no longer applicable in dealing with online texts.
Nevertheless, newsworthy events are often dis-
cussed by many tweets or online news articles.
Therefore, the same event could be mentioned by
a high volume of redundant tweets or news arti-
cles. This property inspires the research commu-
nity to devise clustering-based models (Popescu
et al., 2011; Abdelhaq et al., 2013; Xia et al., 2015)
to discover new or previously unidentified events
without extracting structured representations.

To extract structured representations of events
such as who did what, when, where and why,
Bayesian approaches have made some progress.
Assuming that each document is assigned to a sin-
gle event, which is modeled as a joint distribu-
tion over the named entities, the date and the loca-
tion of the event, and the event-related keywords,
Zhou et al. (2014) proposed an unsupervised La-
tent Event Model (LEM) for open-domain event
extraction. To address the limitation that LEM re-
quires the number of events to be pre-set, Zhou
et al. (2017) further proposed the Dirichlet Pro-
cess Event Mixture Model (DPEMM) in which
the number of events can be learned automatically
from data. However, both LEM and DPEMM have
two limitations: (1) they assume that all words
in a document are generated from a single event
which can be represented by a quadruple <entity,
location, keyword, date>. However, long texts
such news articles often describe multiple events
which clearly violates this assumption; (2) Dur-
ing the inference process of both approaches, the
Gibbs sampler needs to compute the conditional
posterior distribution and assigns an event for each
document. This is time consuming and takes long
time to converge.

To deal with these limitations, in this paper,
we propose the Adversarial-neural Event Model



283

(AEM) based on adversarial training for open-
domain event extraction. The principle idea is
to use a generator network to learn the projection
function between the document-event distribution
and four event related word distributions (entity
distribution, location distribution, keyword distri-
bution and date distribution). Instead of provid-
ing an analytic approximation, AEM uses a dis-
criminator network to discriminate between the re-
constructed documents from latent events and the
original input documents. This essentially helps
the generator to construct a more realistic docu-
ment from a random noise drawn from a Dirichlet
distribution. Due to the flexibility of neural net-
works, the generator is capable of learning compli-
cated nonlinear distributions. And the supervision
signal provided by the discriminator will help gen-
erator to capture the event-related patterns. Fur-
thermore, the discriminator also provides low-
dimensional discriminative features which can be
used to visualize documents and events.

The main contributions of the paper are summa-
rized below:

• We propose a novel Adversarial-neural Event
Model (AEM), which is, to the best of our
knowledge, the first attempt of using adver-
sarial training for open-domain event extrac-
tion.

• Unlike existing Bayesian graphical modeling
approaches, AEM is able to extract events
from different text sources (short and long).
And a significant improvement on computa-
tional efficiency is also observed.

• Experimental results on three datasets show
that AEM outperforms the baselines in terms
of accuracy, recall and F-measure. In addi-
tion, the results show the strength of AEM in
visualizing events.

2 Related Work

Our work is related to two lines of research, event
extraction and Generative Adversarial Nets.

Event Extraction
Recently there has been much interest in event
extraction from online texts, and approaches
could be categorized as domain-specific and open-
domain event extraction.

Domain-specific event extraction often focuses
on the specific types of events (e.g. sports events

or city events). Panem et al. (2014) devised a
novel algorithm to extract attribute-value pairs and
mapped them to manually generated schemes for
extracting the natural disaster events. Similarly, to
extract the city-traffic related event, Anantharam
et al. (2015) viewed the task as a sequential tag-
ging problem and proposed an approach based on
the conditional random fields. Zhang (2018) pro-
posed an event extraction approach based on im-
itation learning, especially on inverse reinforce-
ment learning.

Open-domain event extraction aims to extract
events without limiting the specific types of
events. To analyze individual messages and in-
duce a canonical value for each event, Benson
et al. (2011) proposed an approach based on a
structured graphical model. By representing an
event with a binary tuple which is constituted by
a named entity and a date, Ritter et al. (2012) em-
ployed some statistic to measure the strength of
associations between a named entity and a date.
The proposed system relies on a supervised la-
beler trained on annotated data. In (Abdelhaq
et al., 2013), Abdelhaq et al. developed a real-
time event extraction system called EvenTweet,
and each event is represented as a triple consti-
tuted by time, location and keywords. To extract
more information, Wang el al. (2015) developed a
system employing the links in tweets and comb-
ing tweets with linked articles to identify events.
Xia el al. (2015) combined texts with the location
information to detect the events with low spatial
and temporal deviations. Zhou et al. (2014; 2017)
represented event as a quadruple and proposed two
Bayesian models to extract events from tweets.

Generative Adversarial Nets

As a neural-based generative model, Generative
Adversarial Nets (Goodfellow et al., 2014) have
been extensively researched in natural language
processing (NLP) community.

For text generation, the sequence generative
adversarial network (SeqGAN) proposed in (Yu
et al., 2017) incorporated a policy gradient strat-
egy to optimize the generation process. Based
on the policy gradient, Lin et al. (2017) pro-
posed RankGAN to capture the rich structures
of language by ranking and analyzing a collec-
tion of human-written and machine-written sen-
tences. To overcome mode collapse when deal-
ing with discrete data, Fedus et al. (2018) pro-



284

~df

Online Text Corpus Sampling ~dr

Generator Network (G) Discriminator Networks (D)

Document Representation

Din
Dout~µ » Dir(~µj~®)

Hidden

layer

Document-event

distribution layer

Document level word

distributions

E-dim

H-dim

V-dim

entity

loc

key

date Discriminative feature

layer

H-dim

~def

~dlf

~dkf

~ddf

Figure 1: The framework of the Adverarial-neural Event Model (AEM), and d⃗ef , d⃗
l
f , d⃗

k
f and d⃗

d
f denote the gen-

erated entity distribution, location distribution, keyword distribution and date distribution corresponding to event
distribution θ⃗.

posed MaskGAN which used an actor-critic con-
ditional GAN to fill in missing text conditioned
on the surrounding context. Along this line,
Wang et al. (2018) proposed SentiGAN to gen-
erate texts of different sentiment labels. Besides,
Li et al. (2018) improved the performance of
semi-supervised text classification using adversar-
ial training, (Zeng et al., 2018; Qin et al., 2018)
designed GAN-based models for distance super-
vision relation extraction.

Although various GAN based approaches have
been explored for many applications, none of these
approaches tackles open-domain event extraction
from online texts. We propose a novel GAN-
based event extraction model called AEM. Com-
pared with the previous models, AEM has the fol-
lowing differences: (1) Unlike most GAN-based
text generation approaches, a generator network
is employed in AEM to learn the projection func-
tion between an event distribution and the event-
related word distributions (entity, location, key-
word, date). The learned generator captures event-
related patterns rather than generating text se-
quence; (2) Different from LEM and DPEMM,
AEM uses a generator network to capture the
event-related patterns and is able to mine events
from different text sources (short and long). More-
over, unlike traditional inference procedure, such
as Gibbs sampling used in LEM and DPEMM,
AEM could extract the events more efficiently due

to the CUDA acceleration; (3) The discrimina-
tive features learned by the discriminator of AEM
provide a straightforward way to visualize the ex-
tracted events.

3 Methodology

We describe Adversarial-neural Event Model
(AEM) in this section. An event is represented
as a quadruple <e, l, k, d>, where e stands for
non-location named entities, l for a location, k
for event-related keywords, d for a date, and
each component in the tuple is represented by
component-specific representative words.

AEM is constituted by three components: (1)
The document representation module, as shown at
the top of Figure 1, defines a document represen-
tation approach which converts an input document
from the online text corpus into d⃗r ∈ RV which
captures the key event elements; (2) The genera-
tor G, as shown in the lower-left part of Figure1,
generates a fake document d⃗f which is constituted
by four multinomial distributions using an event
distribution θ⃗ drawn from a Dirichlet distribution
as input; (3) The discriminator D, as shown in
the lower-right part of Figure1, distinguishes the
real documents from the fake ones and its output
is subsequently employed as a learning signal to
update the G and D. The details of each compo-
nent are presented below.



285

3.1 Document Representation

Each document doc in a given corpus C is rep-
resented as a concatenation of 4 multinomial dis-
tributions which are entity distribution (d⃗er), lo-
cation distribution (d⃗lr), keyword distribution (d⃗

k
r )

and date distribution (d⃗dr) of the document. As four
distributions are calculated in a similar way, we
only describe the computation of the entity distri-
bution below as an example.

The entity distribution d⃗er is represented by a
normalized Ve-dimensional vector weighted by
TF-IDF, and it is calculated as:

tf ei,doc =
nei,doc∑
ve
neve,doc

idfei = log
|Ce|
|Cei |

tf -idfei,doc = tf
e
i,doc × idfei

der,i =
tf -idfei,doc∑
ve
tf -idfeve,doc

where Ce is the pseudo corpus constructed by re-
moving all non-entity words from C, Ve is the to-
tal number of distinct entities in a corpus, nei,doc
denotes the number of i-th entity appeared in doc-
ument doc, |Ce| represents the number of docu-
ments in the corpus, and |Cei | is the number of doc-
uments that contain i-th entity, and the obtained
der,i denotes the relevance between i-th entity and
document doc.

Similarly, location distribution d⃗lr, keyword dis-
tribution d⃗kr and date distribution d⃗

d
r of doc could

be calculated in the same way, and the dimen-
sions of these distributions are denoted as Vl,
Vk and Vd, respectively. Finally, each docu-
ment doc in the corpus is represented by a V -
dimensional (V =Ve+Vl+Vk+Vd) vector d⃗r by con-
catenating four computed distributions.

3.2 Network Architecture

3.2.1 Generator
The generator network G is designed to learn the
projection function between the document-event
distribution θ⃗ and the four document-level word
distributions (entity distribution, location distribu-
tion, keyword distribution and date distribution).

More concretely, G consists of a E-dimensional
document-event distribution layer, H-dimensional
hidden layer and V -dimensional event-related
word distribution layer. Here, E denotes the event

number, H is the number of units in the hid-
den layer, V is the vocabulary size and equals to
Ve+Vl+Vk+Vd. As shown in Figure 1, G firstly
employs a random document-event distribution θ⃗
as an input. To model the multinomial property of
the document-event distribution, θ⃗ is drawn from a
Dirichlet distribution parameterized with α⃗ which
is formulated as:

p(θ⃗|α⃗) =Dir(θ⃗|α⃗) ≜ 1
△ (α⃗)

E∏
t=1

θαt−1t (1)

where α⃗ is the hyper-parameter of the dirich-
let distribution, E is the number of events which
should be set in AEM, △(α⃗) =

∏E
t=1 Γ(αt)

Γ(
∑E

t=1 αt)
, θt ∈

[0, 1] represents the proportion of event t in the
document and

∑E
t=1 θt = 1.

Subsequently, G transforms θ⃗ into a H-
dimensional hidden space using a linear layer fol-
lowed by layer normalization, and the transforma-
tion is defined as:

s⃗h = LN(Whθ⃗ + b⃗h) (2)

o⃗h = max(s⃗h, lp × s⃗h) (3)

where Wh ∈ RH×E represents the weight matrix
of hidden layer, and b⃗h denotes the bias term, lp
is the parameter of LeakyReLU activation and is
set to 0.1, s⃗h and o⃗h denote the normalized hidden
states and the outputs of the hidden layer, and LN
represents the layer normalization.

Then, to project o⃗h into four document-level
event related word distributions (d⃗ef , d⃗

l
f , d⃗

k
f and

d⃗df shown in Figure 1), four subnets (each contains
a linear layer, a batch normalization layer and a
softmax layer) are employed in G. And the exact
transformation is based on the formulas below:

h⃗ew = W
e
wo⃗h + b⃗

e
w, d⃗

e
f = SM(BN (⃗h

e
w)) (4)

h⃗lw = W
l
wo⃗h + b⃗

l
w, d⃗

l
f = SM(BN (⃗h

l
w)) (5)

h⃗kw = W
k
wo⃗h + b⃗

k
w, d⃗

k
f = SM(BN (⃗h

k
w)) (6)

h⃗dw = W
d
wo⃗h + b⃗

d
w, d⃗

d
f = SM(BN (⃗h

d
w)) (7)

where SM means softmax layer, W ew ∈ RVe×H ,
W lw ∈ RVl×H , W kw ∈ RVk×H and W dw ∈ RVd×H
denote the weight matrices of the linear layers in
subnets, b⃗ew, b⃗

l
w, b⃗

k
w and b⃗

d
w represent the corre-

sponding bias terms, h⃗ew, h⃗
l
w, h⃗

k
w and h⃗

d
w are state

vectors. d⃗ef , d⃗
l
f , d⃗

k
f and d⃗

d
f denote the generated

entity distribution, location distribution, keyword



286

distribution and date distribution, respectively, that
correspond to the given event distribution θ⃗. And
each dimension represents the relevance between
corresponding entity/location/keyword/date term
and the input event distribution.

Finally, four generated distributions are con-
catenated to represent the generated document d⃗f
corresponding to the input θ⃗:

d⃗f = [d⃗
e
f ; d⃗

l
f ; d⃗

k
f ; d⃗

d
f ] (8)

3.2.2 Discriminator
The discriminator network D is designed as a
fully-connected network which contains an input
layer, a discriminative feature layer (discrimina-
tive features are employed for event visualization)
and an output layer. In AEM, D uses fake docu-
ment d⃗f and real document d⃗r as input and outputs
the signal Dout to indicate the source of the input
data (lower value denotes that D is prone to pre-
dict the input data as a fake document and vice
versa).

As have previously been discussed in (Arjovsky
et al., 2017; Gulrajani et al., 2017), lipschitz con-
tinuity of D network is crucial to the training of
the GAN-based approaches. To ensure the lips-
chitz continuity of D, we employ the spectral nor-
malization technique (Miyato et al., 2018). More
concretely, for each linear layer ld(⃗h) = Wh⃗ (bias
term is omitted for simplicity) in D, the weight
matrix W is normalized by σ(W ). Here, σ(W ) is
the spectral norm of the weight matrix W with the
definition below:

σ(W ) := max
h⃗:⃗h̸=0⃗

∥Wh⃗∥2
∥h⃗∥2

= max
∥h⃗∥2≤1

∥Wh⃗∥2 (9)

which is equivalent to the largest singular value
of W . The weight matrix W is then normalized
using:

ˆWSN := W/σ(W ) (10)

Obviously, the normalized weight matrix ˆWSN
satisfies that σ( ˆWSN ) = 1 and further ensures
the lipschitz continuity of the D network (Miyato
et al., 2018). To reduce the high cost of comput-
ing spectral norm σ(W ) using singular value de-
composition at each iteration, we follow (Yoshida
and Miyato, 2017) and employ the power iteration
method to estimate σ(W ) instead. With this sub-
stitution, the spectral norm can be estimated with
very small additional computational time.

3.3 Objective and Training Procedure
The real document d⃗r and fake document d⃗f
shown in Figure 1 could be viewed as random
samples from two distributions Pr and Pg, and
each of them is a joint distribution constituted
by four Dirichlet distributions (corresponding to
entity distribution, location distribution, keyword
distribution and date distribution). The training
objective of AEM is to let the distribution Pg (pro-
duced by G network) to approximate the real data
distribution Pr as much as possible.

To compare the different GAN losses, Kurach
(2018) takes a sober view of the current state of
GAN and suggests that the Jansen-Shannon diver-
gence used in (Goodfellow et al., 2014) performs
more stable than variant objectives. Besides, Ku-
rach also advocates that the gradient penalty (GP)
regularization devised in (Gulrajani et al., 2017)
will further improve the stability of the model.
Thus, the objective function of the proposed AEM
is defined as:

Ld = − E
d⃗r∼Pr

[log(D(d⃗r))]− E
d⃗f∼Pg

[log(1−D(d⃗f ))]

(11)

Lgp = E
d⃗∗∼Pd∗

[(∥ ∇
d⃗∗D(d⃗

∗) ∥2 −1)2] (12)

L = Ld + λLgp (13)

where Ld denotes the discriminator loss, Lgp rep-
resents the gradient penalty regularization loss, λ
is the gradient penalty coefficient which trade-off
the two components of objective, d⃗∗ could be ob-
tained by sampling uniformly along a straight line
between d⃗r and d⃗f , Pd∗ denotes the corresponding
distribution.

The training procedure of AEM is presented in
Algorithm 1, where E is the event number, nd de-
notes the number of discriminator iterations per
generator iteration, m is the batch size, α′ rep-
resents the learning rate, β1 and β2 are hyper-
parameters of Adam (Kingma and Ba, 2014), pa
denotes {α′, β1, β2}. In this paper, we set λ = 10,
nd = 5, m = 32. Moreover, α′, β1 and β2 are set
as 0.0002, 0.5 and 0.999.

3.4 Event Generation
After the model training, the generator G learns
the mapping function between the document-event
distribution and the document-level event-related
word distributions (entity, location, keyword and
date). In other words, with an event distribution



287

Algorithm 1 Training procedure for AEM
Input: E, λ, nd, m, α′, β1, β2
Output: the trained G and D.

1: Initial D parameters ωd and G parameter ωg
2: while ωg has not converged do
3: for t = 1, ..., nd do
4: for j = 1, ...,m do
5: Sample d⃗r ∼ Pr,
6: Sample a random θ⃗ ∼ Dir(θ⃗|α⃗)
7: Sample a random number ϵ ∼ U [0, 1]
8: d⃗f ← G(θ⃗)
9: d⃗∗ ← ϵd⃗r + (1− ϵ)d⃗f

10: L
(j)
d = − log[D(d⃗r)]− log[1−D(d⃗f )]

11: L
(j)
gp = (∥ ∇d⃗∗D(d⃗∗) ∥ −1)

2

12: L(j) ← L(j)d + λL
(j)
gp

13: end for
14: ωd ← Adam(∇ωd 1m

m∑
j=1

L(j), ωd, pa)

15: end for
16: Sample m noise

{
θ⃗(j) ∼ Dir(θ⃗|α⃗)

}
17: ωg ← Adam(∇ωg 1m

m∑
j=1

log[1 −

D(G(θ⃗(j)))], ωg, pa)
18: end while

θ⃗′ as input, G could generate the corresponding
entity distribution, location distribution, keyword
distribution and date distribution.

In AEM, we employ event seed s⃗t∈{1,...,E},
an E-dimensional vector with one-hot encod-
ing, to generate the event related word distribu-
tions. For example, in ten event setting, s⃗1 =
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0]⊺ represents the event seed
of the first event. With the event seed s⃗1 as input,
the corresponding distributions could be generated
by G based on the equation below:

[ϕ⃗1e; ϕ⃗
1
l ; ϕ⃗

1
k; ϕ⃗

1
d] = G(s⃗1) (14)

where ϕ⃗1e, ϕ⃗
1
l , ϕ⃗

1
k and ϕ⃗

1
d denote the entity distri-

bution, location distribution, keyword distribution
and date distribution of the first event respectively.

4 Experiments

In this section, we firstly describe the datasets and
baseline approaches used in our experiments and
then present the experimental results.

4.1 Experimental Setup

To validate the effectiveness of AEM for ex-
tracting events from social media (e.g. Twitter)
and news media sites (e.g. Google news), three
datasets (FSD (Petrovic et al., 2013), Twitter,
and Google datasets1) are employed. Details are
summarized below:

• FSD dataset (social media) is the first story
detection dataset containing 2,499 tweets.
We filter out events mentioned in less than
15 tweets since events mentioned in very few
tweets are less likely to be significant. The
final dataset contains 2,453 tweets annotated
with 20 events.

• Twitter dataset (social media) is collected
from tweets published in the month of
December in 2010 using Twitter streaming
API. It contains 1,000 tweets annotated with
20 events.

• Google dataset (news article) is a subset of
GDELT Event Database1, documents are
retrieved by event related words. For exam-
ple, documents which contain ‘malaysia’,
‘airline’, ‘search’ and ‘plane’ are retrieved
for event MH370. By combining 30 events
related documents, the dataset contains
11,909 news articles.

We choose the following three models as the
baselines:

• K-means is a well known data clustering
algorithm, we implement the algorithm using
sklearn2 toolbox, and represent documents
using bag-of-words weighted by TF-IDF.

• LEM (Zhou et al., 2014) is a Bayesian
modeling approach for open-domain event
extraction. It treats an event as a latent
variable and models the generation of an
event as a joint distribution of its individual
event elements. We implement the algorithm

1http://data.gdeltproject.org/events/index.html
2https://scikit-learn.org/



288

Figure 2: Visualization of the ten randomly selected events on each dataset. Each point denotes a document.
Different color denotes different events.

Figure 3: Comparison of methods and parameter settings,‘n’ and ‘h’ denote parameter nd and H , other parameters
follow the default setting. The vertical axis represents methods/parameter settings, the horizontal axis denotes the
corresponding performance value. All blue histograms with different intensity are those obtained by AEM.

with the default configuration.

• DPEMM (Zhou et al., 2017) is a non-
parametric mixture model for event extrac-
tion. It addresses the limitation of LEM that
the number of events should be known be-
forehand. We implement the model with the
default configuration.

For social media text corpus (FSD and Twit-
ter), a named entity tagger3 specifically built for
Twitter is used to extract named entities including
locations from tweets. A Twitter Part-of-Speech
(POS) tagger (Gimpel et al., 2010) is used for
POS tagging and only words tagged with nouns,
verbs and adjectives are retained as keywords. For
the Google dataset, we use the Stanford Named
Entity Recognizer4 to identify the named enti-
ties (organization, location and person). Due to
the ‘date’ information not being provided in the

3http://fithub.com/aritter/twitter-nlp
4https://nlp.stanford.edu/software/CRF-NER.html

Google dataset, we further divide the non-location
named entities into two categories (‘person’ and
‘organization’) and employ a quadruple <organi-
zation, location, person, keyword> to denote an
event in news articles. We also remove common
stopwords and only keep the recognized named
entities and the tokens which are verbs, nouns or
adjectives.

4.2 Experimental Results
To evaluate the performance of the proposed ap-
proach, we use the evaluation metrics such as pre-
cision, recall and F-measure. Precision is defined
as the proportion of the correctly identified events
out of the model generated events. Recall is de-
fined as the proportion of correctly identified true
events. For calculating the precision of the 4-tuple,
we use following criteria:

• (1) Do the entity/organization, location,
date/person and keyword that we have ex-
tracted refer to the same event?

• (2) If the extracted representation contains



289

keywords, are they informative enough to tell
us what happened?

Dataset Method Precision (%) Recall (%) F-measure (%)

FSD

K-means 84.0 55.0 66.5
LEM 80.0 80.0 80.0

DPEMM 84.6 85.0 84.8
AEM 88.0 85.0 86.5

Twitter

K-means 68.0 75.0 71.3
LEM 68.0 80.0 73.5

DPEMM 69.2 80.0 74.2
AEM 72.0 85.0 77.9

Google

K-Means 60.0 56.7 58.3
LEM 71.4 73.3 72.4

DPEMM 29.7 66.7 41.3
AEM 85.7 90.0 87.8

Table 1: Comparison of the performance of event ex-
traction on the three datasets.

Table 1 shows the event extraction results on the
three datasets. The statistics are obtained with the
default parameter setting that nd is set to 5, num-
ber of hidden units H is set to 200, and G contains
three fully-connected layers. The event number E
for three datasets are set to 25, 25 and 35, respec-
tively. The examples of extracted events are shown
in Table.2.

It can be observed that K-means performs the
worst over all three datasets. On the social me-
dia datasets, AEM outpoerforms both LEM and
DPEMM by 6.5% and 1.7% respectively in F-
measure on the FSD dataset, and 4.4% and 3.7% in
F-measure on the Twitter dataset. We can also ob-
serve that apart from K-means, all the approaches
perform worse on the Twitter dataset compared
to FSD, possibly due to the limited size of the
Twitter dataset. Moreover, on the Google dataset,
the proposed AEM performs significantly better
than LEM and DPEMM. It improves upon LEM
by 15.5% and upon DPEMM by more than 30%
in F-measure. This is because: (1) the assump-
tion made by LEM and DPEMM that all words
in a document are generated from a single event
is not suitable for long text such as news articles;
(2) DPEMM generates too many irrelevant events
which leads to a very low precision score. Overall,
we see the superior performance of AEM across
all datasets, with more significant improvement on
the for Google datasets (long text).

We next visualize the detected events based on
the discriminative features learned by the trained
D network in AEM. The t-SNE (Maaten and Hin-
ton, 2008) visualization results on the datasets are
shown in Figure 2. For clarity, each subplot is
plotted on a subset of the dataset containing ten

randomly selected events. It can be observed that
documents describing the same event have been
grouped into the same cluster.

To further evaluate if a variation of the parame-
ters nd (the number of discriminator iterations per
generator iteration), H (the number of units in hid-
den layer) and the structure of generator G will im-
pact the extraction performance, additional experi-
ments have been conducted on the Google dataset,
with nd set to 5, 7 and 10, H set to 100, 150 and
200, and three G structures (3, 4 and 5 layers).
The comparison results on precision, recall and F-
measure are shown in Figure 3. From the results,
it could be observed that AEM with the 5-layer
generator performs the best and achieves 96.7% in
F-measure, and the worst F-measure obtained by
AEM is 85.7%. Overall, the AEM outperforms
all compared approaches acorss various parameter
settings, showing relatively stable performance.

Finally, we compare in Figure 4 the train-
ing time required for each model, excluding the
constant time required by each model to load
the data. We could observe that K-means runs
fastest among all four approaches. Both LEM and
DPEMM need to sample the event allocation for
each document and update the relevant counts dur-
ing Gibbs sampling which are time consuming.
AEM only requires a fraction of the training time
compared to LEM and DPEMM. Moreover, on a
larger dataset such as the Google dataset, AEM
appears to be far more efficient compared to LEM
and DPEMM.

Figure 4: Comparison of training time of models.

5 Conclusions and Future Work

In this paper, we have proposed a novel ap-
proach based on adversarial training to extract
the structured representation of events from on-
line text. The experimental comparison with the
state-of-the-art methods shows that AEM achieves
improved extraction performance, especially on



290

FSD dataset

Earthquake
in Viriginia

e: nbc coast tremor east eastern
US

debt ceiling

e: hous gifford us gabriell repres
l: virginia russian eal croydon washington l: virginia russian eal croydon washington
k: earthquak feel center magnitud hit k: debt bill hous ceil vote
d: 2011/8/23 2011/7/23 2011/8/06 2011/9/07 2011/9/12 d: 2011/8/01 2011/7/23 2011/8/23 2011/8/06 2011/9/13

South sudan
independent

e: south sudan independ earthquak tremor
US

credit downgrade

e: aaa aa yahoo standard obama
l: earth senat congress york nyc l: state america tottenham congress seattl
k: independ celebr countri congrat challeng k: credit rate downgrad histori lose
d: 2011/7/09 2011/8/06 2011/8/23 2011/7/23 2011/9/07 d: 2011/8/06 2011/7/23 2011/8/23 2011/9/07 2011/9/12

Somalia
declare famine

e: somalia africa bakool southern nation
Norway youth
camp attack

e: eyewit norway norweigan rock us
l: somalia africa rome independ southern l: norway island germani state libya
k: declar famin drought part region k: camp attack youth bomb shoot
d: 2011/7/20 2011/7/23 2011/8/06 2011/8/23 2011/9/07 d: 2011/7/22 2011/7/23 2011/8/23 2011/8/06 2011/8/10

Twitter dataset

Russia hosts
world cup

e: world cup william russia sport
Larry King’s

last show

e: king larri cnn red vega
l: qatar russia china europ beij l: uk state richardson unit south
k: host cup reaction world triumph k: final show broadcast night year
d: 2010/9/3 2010/9/10 2010/9/9 2010/9/8 2010/9/17 d: 2010/9/17 2010/9/10 2010/9/8 2010/9/9 2010/9/26

Coach Urban
Meyer step down

e: meyer urban reid florida gator
Boxer floyd

Maweath is arrested

e: boxer floyd mayweath vega obama
l: florida univers senat europ hous l: vega las beij europ itali
k: coach step univers footbal accord k: guard boxer secur assault arrest
d: 2010/9/8 2010/9/10 2010/9/9 2010/9/18 2010/9/17 d: 2010/9/17 2010/9/9 2010/9/18 2010/9/8 2010/9/26

Christian violence
in nigeria

e: christian muslim polit concord eve
Xiaobo Liu

award nobel prize

e: xiaobo liu nobel prize china
l: nigeria jos congress christian of l: china oslo congress continent europ
k: religion church violenc plagu peopl k: award live nobel ceremoni dissid
d: 2010/9/25 2010/9/28 2010/9/26 2010/9/6 2010/9/8 d: 2010/9/10 2010/9/8 2010/9/17 2010/9/9 2010/9/18

Google dataset

Sexual assault
in campus

o: university federal college department white
Lockett is executed

death penalty
in Oklahoma

o: warner state department cohen robert
l: obama princeton ohio columbia harvard l: lockett oklahoma states texas ohio
p: mccaskill rose catherine brown duncan p: lockett clayton patton stephanie charles
k: sexual assault campus title colleges k: execution death penalty lethal minutes

Apple & Samsung
patent jury

o: apple samsung google inc motorola

MH370

o: airlines air transport boeing najib
l: california south santa us calif l: malaysia australia beijing malacca houston
p: judge steve dunham schmidt mueller p: najib hishammuddin hussein clark dolan
k: patent jury smartphone verdict trial k: search plane flight aircraft ocean

Afghanistan
landslide

o: afghanistan united taliban kabul un
South Africa

election

o: anc national mandela congress eff
l: afghanistan badakhshan kabul tajikistan pakistan l: zuma africa south africans nkandla
p: karzai shah hill mark angela p: zuma jacob president nelson malema
k: landslide village rescue mud province k: election apartheid elections voters economic

Table 2: The event examples extracted by AEM.

long text corpora with an improvement of 15%
observed in F-measure. AEM only requires a
fraction of training time compared to existing
Bayesian graphical modeling approaches. In fu-
ture work, we will explore incorporating external
knowledge (e.g. word relatedness contained in
word embeddings) into the learning framework for
event extraction. Besides, exploring nonparamet-
ric neural event extraction approaches and detect-
ing the evolution of events over time from news
articles are other promising future directions.

6 Acknowledgments

We would like to thank anonymous reviewers
for their valuable comments and helpful sugges-
tions. This work was funded by the National
Key Research and Development Program of China
(2017YFB1002801), the National Natural Sci-
ence Foundation of China (61772132), the Nat-
ural Science Foundation of Jiangsu Province of
China (BK20161430) and Innovate UK (grant no.
103652).

References
Hamed Abdelhaq, Christian Sengstock, and Michael

Gertz. 2013. Eventweet: Online localized event de-
tection from twitter. Proceedings of the VLDB En-
dowment, 6(12):1326–1329.

Pramod Anantharam, Payam Barnaghi, Krishnaprasad
Thirunarayan, and Amit Sheth. 2015. Extract-
ing city traffic events from social streams. ACM
Transactions on Intelligent Systems and Technology
(TIST), 6(4):43.

Martin Arjovsky, Soumith Chintala, and Léon Bot-
tou. 2017. Wasserstein gan. arXiv preprint
arXiv:1701.07875.

Edward Benson, Aria Haghighi, and Regina Barzilay.
2011. Event discovery in social media feeds. In
Proceedings of the 49th Annual Meeting of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies-Volume 1, pages 389–398. As-
sociation for Computational Linguistics.

William Fedus, Ian Goodfellow, and Andrew M Dai.
2018. Maskgan: Better text generation via filling in
the . arXiv preprint arXiv:1801.07736.

Kevin Gimpel, Nathan Schneider, Brendan O’Connor,
Dipanjan Das, Daniel Mills, Jacob Eisenstein,



291

Michael Heilman, Dani Yogatama, Jeffrey Flanigan,
and Noah A Smith. 2010. Part-of-speech tagging
for twitter: Annotation, features, and experiments.
Technical report, Carnegie-Mellon Univ Pittsburgh
Pa School of Computer Science.

Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza,
Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron
Courville, and Yoshua Bengio. 2014. Generative ad-
versarial nets. In Advances in neural information
processing systems, pages 2672–2680.

Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vin-
cent Dumoulin, and Aaron C Courville. 2017. Im-
proved training of wasserstein gans. In Advances
in Neural Information Processing Systems, pages
5769–5779.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Karol Kurach, Mario Lucic, Xiaohua Zhai, Marcin
Michalski, and Sylvain Gelly. 2018. The gan land-
scape: Losses, architectures, regularization, and nor-
malization. arXiv preprint arXiv:1807.04720.

Yan Li and Jieping Ye. 2018. Learning adversarial
networks for semi-supervised text classification via
policy gradient. In Proceedings of the 24th ACM
SIGKDD International Conference on Knowledge
Discovery & Data Mining, pages 1715–1723. ACM.

Kevin Lin, Dianqi Li, Xiaodong He, Zhengyou Zhang,
and Ming-Ting Sun. 2017. Adversarial ranking for
language generation. In Advances in Neural Infor-
mation Processing Systems, pages 3155–3165.

Laurens van der Maaten and Geoffrey Hinton. 2008.
Visualizing data using t-sne. Journal of machine
learning research, 9(Nov):2579–2605.

Takeru Miyato, Toshiki Kataoka, Masanori Koyama,
and Yuichi Yoshida. 2018. Spectral normalization
for generative adversarial networks. arXiv preprint
arXiv:1802.05957.

Sandeep Panem, Manish Gupta, and Vasudeva Varma.
2014. Structured information extraction from natu-
ral disaster events on twitter. In Proceedings of the
5th International Workshop on Web-scale Knowl-
edge Representation Retrieval & Reasoning, pages
1–8. ACM.

Sasa Petrovic, Miles Osborne, Richard McCreadie,
Craig Macdonald, Iadh Ounis, and Luke Shrimpton.
2013. Can twitter replace newswire for breaking
news? In Seventh international AAAI conference
on weblogs and social media.

Ana-Maria Popescu, Marco Pennacchiotti, and Deepa
Paranjpe. 2011. Extracting events and event descrip-
tions from twitter. In Proceedings of the 20th inter-
national conference companion on World wide web,
pages 105–106. ACM.

Pengda Qin, Weiran Xu, and William Yang Wang.
2018. Dsgan: Generative adversarial training
for distant supervision relation extraction. arXiv
preprint arXiv:1805.09929.

Alan Ritter, Oren Etzioni, Sam Clark, et al. 2012. Open
domain event extraction from twitter. In Proceed-
ings of the 18th ACM SIGKDD international con-
ference on Knowledge discovery and data mining,
pages 1104–1112. ACM.

Ke Wang and Xiaojun Wan. 2018. Sentigan: Gener-
ating sentimental texts via mixture adversarial net-
works. In IJCAI, pages 4446–4452.

Yu Wang, David Fink, and Eugene Agichtein. 2015.
Seeft: Planned social event discovery and attribute
extraction by fusing twitter and web content. In
ICWSM, pages 483–492.

Chaolun Xia, Jun Hu, Yan Zhu, and Mor Naaman.
2015. What is new in our city? a framework for
event extraction using social media posts. In Pacific-
Asia Conference on Knowledge Discovery and Data
Mining, pages 16–32. Springer.

Yuichi Yoshida and Takeru Miyato. 2017. Spec-
tral norm regularization for improving the gen-
eralizability of deep learning. arXiv preprint
arXiv:1705.10941.

Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu.
2017. Seqgan: Sequence generative adversarial nets
with policy gradient. In AAAI, pages 2852–2858.

Daojian Zeng, Yuan Dai, Feng Li, R Simon Sherratt,
and Jin Wang. 2018. Adversarial learning for distant
supervised relation extraction. Computers, Materi-
als & Continua, 55(1):121–136.

Tongtao Zhang and Heng Ji. 2018. Event extraction
with generative adversarial imitation learning. arXiv
preprint arXiv:1804.07881.

Deyu Zhou, Liangyu Chen, and Yulan He. 2014. A
simple bayesian modelling approach to event extrac-
tion from twitter. In Proceedings of the 52nd Annual
Meeting of the Association for Computational Lin-
guistics (Volume 2: Short Papers), volume 2, pages
700–705.

Deyu Zhou, Xuan Zhang, and Yulan He. 2017.
Event extraction from twitter using non-parametric
bayesian mixture model with word embeddings. In
Proceedings of the 15th Conference of the European
Chapter of the Association for Computational Lin-
guistics: Volume 1, Long Papers, volume 1, pages
808–817.


