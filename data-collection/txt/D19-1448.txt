



















































The Bottom-up Evolution of Representations in the Transformer: A Study with Machine Translation and Language Modeling Objectives


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 4396–4406,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

4396

The Bottom-up Evolution of Representations in the Transformer:
A Study with Machine Translation and Language Modeling Objectives

Elena Voita1,2 Rico Sennrich4,3 Ivan Titov3,2

1Yandex, Russia 2University of Amsterdam, Netherlands
3University of Edinburgh, Scotland 4University of Zurich, Switzerland

lena-voita@yandex-team.ru
sennrich@cl.uzh.ch ititov@inf.ed.ac.uk

Abstract

We seek to understand how the representations
of individual tokens and the structure of the
learned feature space evolve between layers in
deep neural networks under different learning
objectives. We focus on the Transformers for
our analysis as they have been shown effec-
tive on various tasks, including machine trans-
lation (MT), standard left-to-right language
models (LM) and masked language model-
ing (MLM). Previous work used black-box
probing tasks to show that the representations
learned by the Transformer differ significantly
depending on the objective. In this work, we
use canonical correlation analysis and mutual
information estimators to study how informa-
tion flows across Transformer layers and how
this process depends on the choice of learning
objective. For example, as you go from bot-
tom to top layers, information about the past
in left-to-right language models gets vanished
and predictions about the future get formed.
In contrast, for MLM, representations initially
acquire information about the context around
the token, partially forgetting the token iden-
tity and producing a more generalized token
representation. The token identity then gets
recreated at the top MLM layers.

1 Introduction

Deep (i.e. multi-layered) neural networks have be-
come the standard approach for many natural lan-
guage processing (NLP) tasks, and their analysis
has been an active topic of research. One popular
approach for analyzing representations of neural
models is to evaluate how informative they are for
various linguistic tasks, so-called “probing tasks”.
Previous work has made some interesting observa-
tions regarding these representations; for example,
Zhang and Bowman (2018) show that untrained
LSTMs outperform trained ones on a word iden-
tity prediction task; and Blevins et al. (2018) show

that up to a certain layer performance of represen-
tations obtained from a deep LM improves on a
constituent labeling task, but then decreases, while
with representations obtained from an MT encoder
performance continues to improve up to the high-
est layer. These observations have, however, been
somewhat anecdotal and an explanation of the pro-
cess behind such behavior has been lacking.

In this paper, we attempt to explain more gen-
erally why such behavior is observed. Rather than
measuring the quality of representations obtained
from a particular model on some auxiliary task, we
characterize how the learning objective determines
the information flow in the model. In particular,
we consider how the representations of individual
tokens in the Transformer evolve between layers
under different learning objectives.

We look at this task from the information bottle-
neck perspective on learning in neural networks.
Tishby and Zaslavsky (2015) state that “the goal
of any supervised learning is to capture and ef-
ficiently represent the relevant information in the
input variable about the output-label variable” and
hence the representations undergo transformations
which aim to encode as much information about
the output label as possible, while ‘forgetting’ ir-
relevant details about the input. As we study se-
quence encoders and look into representations of
individual tokens rather than the entire input, our
situation is more complex. In our model, the infor-
mation preserved in a representation of a token is
induced due to two roles it plays: (i) predicting the
output label from a current token representation;1

(ii) preserving information necessary to build rep-
resentations of other tokens. For example, a lan-
guage model constructs a representation which is
not only useful for predicting an output label (in
this case, the next token), but also informative for

1We will clarify how we define output labels for LM,
MLM and MT objectives in Section 2.



4397

producing representations of subsequent tokens in
a sentence. This is different from the MT set-
ting, where there is no single encoder state from
which an output label is predicted. We hypothe-
size that the training procedure (or, in our notation,
the task) defines

1. the nature of changes a token representation
undergoes, from layer to layer;

2. the process of interactions and relationships
between tokens;

3. the type of information which gets lost and
acquired by a token representation in these
interactions.

In this work, we study how the choice of ob-
jective affects the process by which information
is encoded in token representations of the Trans-
former (Vaswani et al., 2017), as this architec-
ture achieves state-of-the-art results on tasks with
very different objectives such as machine trans-
lation (MT) (Bojar et al., 2018; Niehues et al.,
2018), standard left-to-right language modeling
(LM) (Radford et al., 2018) and masked language
modeling (MLM) (Devlin et al., 2018). The Trans-
former encodes a sentence by iteratively updating
representations associated with each token start-
ing from a context-agnostic representation consist-
ing of a positional and a token embedding. At
each layer token representations exchange infor-
mation among themselves via multi-head attention
and then this information is propagated to the next
layer via a feed-forward transformation. We inves-
tigate how this process depends on the choice of
objective function (LM, MLM or MT) while keep-
ing the data and model architecture fixed.

We start with illustrating the process of infor-
mation loss and gain in representations of individ-
ual tokens by estimating the mutual information
between token representations at each layer and
the input token identity (i.e. the word type) or the
output label (e.g., the next word for LM).

Then, we investigate behavior of token repre-
sentations from two perspectives: how they influ-
ence and are influenced by other tokens. Using
canonical correlation analysis, we evaluate the ex-
tent of change the representation undergoes and
the degree of influence. We reveal differences in
the patterns of this behavior for different tasks.

Finally, we study which type of information
gets lost and gained in the interactions between

tokens and to what extent a certain property is
important for defining a token representation at
each layer and for each task. As the properties,
we consider token identities (‘word type’), posi-
tions, identities of surrounding tokens and CCG
supertags. In these analyses we rely on similarity
computations.

We find, that (1) with the LM objective, as
you go from bottom to top layers, information
about the past gets lost and predictions about the
future get formed; (2) for MLMs, representa-
tions initially acquire information about the con-
text around the token, partially forgetting the token
identity and producing a more generalized token
representation; the token identity then gets recre-
ated at the top layer; (3) for MT, though repre-
sentations get refined with context, less process-
ing is happening and most information about the
word type does not get lost. This provides us with
a hypothesis for why the MLM objective may be
preferable in the pretraining context to LM. LMs
may not be the best choice, because neither infor-
mation about current token and its past nor future
is represented well: the former since this informa-
tion gets discarded, the latter since the model does
not have access to the future.

Our key contributions are as follows:

• we propose to view the evolution of a token
representation between layers from the com-
pression/prediction trade-off perspective;

• we conduct a series of experiments support-
ing this view and showing that the two pro-
cesses, losing information about input and
accumulating information about output, take
place in the evolution of representations (for
MLM, these processes are clearly distin-
guished and can be viewed as two stages,
‘context encoding’ and ‘token prediction’);

• we relate to some findings from previous
work, putting them in the proposed perspec-
tive, and provide insights into the internal
workings of Transformer trained with differ-
ent objectives;

• we propose an explanation for superior per-
formance of the MLM objective over the LM
one for pretraining.

All analysis is done in a model-agnostic man-
ner by investigating properties of token represen-



4398

tations at each layer, and can, in principle, be ap-
plied to other multi-layer deep models (e.g., multi-
layer RNN encoders).

2 Tasks
In this section, we describe the tasks we consider.
For each task, we define input X and output Y .

2.1 Machine translation
Given source sentence X = (x1, x2, ..., xS) and a
target sentence Y = (y1, y2, ..., yT ), NMT mod-
els predict words in the target sentence, word by
word, i.e. provide estimates of the conditional dis-
tribution p(yi|X, y1,i−1, θ).

We train a standard Transformer for the transla-
tion task and then analyze its encoder. In contrast
to the other two tasks we describe below, represen-
tations from the top layers are not directly used to
predict output labels but to encode the information
which is then used by the decoder.

2.2 Language modeling
LMs estimate the probability of a word
given the previous words in a sen-
tence P (xt|x1, . . . , xt−1, θ). More formally, the
model is trained with inputs X = (x1, . . . , xt−1)
and outputs Y = (xt), where xt is the output label
predicted from the final (i.e. top-layer) representa-
tion of a token xt−1. It is straightforward to apply
the Transformer to this task (Radford et al., 2018;
Lample and Conneau, 2019).

2.3 Masked language modeling
We also consider the MLM objective (Devlin
et al., 2018), randomly sampling 15% of the to-
kens to be predicted. We replace the correspond-
ing input token by [MASK] or a random token in
80% and 10% of the time, respectively, keeping it
unchanged otherwise.

For a sentence (x1, x2, ..., xS), where token
xi is replaced with x̃i, the model receives
X=(x1, . . . , xi−1, x̃i, xi+1, . . . , xS) as input and
needs to predict Y =(xi). The label xi is predicted
from the final representation of the token x̃i.

3 Data and Setting

As described below, for a fair comparison, we use
the same training data, model architecture and pa-
rameter initialization across all the tasks. In order
to make sure that our findings are reliable, we also
use multiple datasets and repeat experiments with
different random initializations for each task.

We train all models on the data from the
WMT news translation shared task. We con-
duct separate series of experiments using two lan-
guage pairs: WMT 2017 English-German (5.8m
sentence pairs) and WMT 2014 English-French
(40.8m sentence pairs). For language model-
ing, we use only the source side of the parallel
data. We remove randomly chosen 2.8m sentence
pairs from the English-French dataset and use the
source side for analysis. English-French models
are trained on the remaining 38m sentence pairs.
We consider different dataset sizes (2.5m and 5.8m
for English-German, 2.5m, 5.8m and 38m for
English-French). We find that our findings are true
for all languages, dataset sizes and initializations.
In the following, all the illustrations are provided
for the models trained on the full English-German
dataset (5.8m sentence pairs).

We follow the setup and training procedure
of the Transformer base model (Vaswani et al.,
2017). For details, see the appendix.

4 The Information-Bottleneck Viewpoint
In this section, we give an intuitive explanation of
the Information Bottleneck (IB) principle (Tishby
et al., 1999) and consider a direct application of
this principle to our analysis.

4.1 Background
The IB method (Tishby et al., 1999) considers
a joint distribution of input-output pairs p(X,Y )
and aims to extract a compressed representation
X̃ for an input X such that X̃ retains as much
as possible information about the output Y . More
formally, the IB method maximizes the mutual in-
formation (MI) with the output I(X̃;Y ), while
penalizing for MI with the input I(X̃;X). The
latter term in the objective ensures that the rep-
resentation is indeed a compression. Intuitively,
the choice of the output variable Y determines the
split ofX into irrelevant and relevant features. The
relevant features need to be retained while irrele-
vant ones should be dropped.

Tishby and Zaslavsky (2015) argue that compu-
tation in a multi-layered neural model can be re-
garded as an evolution towards the theoretical op-
timum of the IB objective. A sequence of layers
is viewed as a Markov chain, and the process of
obtaining Y corresponds to compressing the rep-
resentation as it flows across layers and retaining
only information relevant to predicting Y . This
implies that Y defines the information flow in the



4399

model. Since Y is different for each model, we ex-
pect to see different patterns of information flow in
models, and this is the focus of our study.

4.2 IB for token representations

In this work, we view every sequence model (MT,
LM and MLM) as learning a function from input
X to output Y . The input is a sequence of tokens
X = (x1, x2, . . . , xn) and the output Y is defined
in Section 2. Recall that we focus on representa-
tions of individual tokens in every layer rather than
the representation of the entire sequence.

We start off our analysis of divergences in the
information flow for different objectives by esti-
mating the amount of information about input or
output tokens retained in the token representation
at each layer.

4.2.1 Estimating mutual information
Inspired by Tishby and Zaslavsky (2015), we es-
timate MI between token representations at a cer-
tain layer and an input token. To estimate MI, we
need to consider token representations at a layer
as samples from a discrete distribution. To get
such distribution, in the original works (Shwartz-
Ziv and Tishby, 2017), the authors binned the neu-
ron’s arctan activations. Using these discretized
values for each neuron in a layer, they were able
to treat a layer representation as a discrete vari-
able. They considered neural networks with maxi-
mum 12 neurons at a layer, but in practical scenar-
ios (e.g. we have 512 neurons in each layer) this
approach is not feasible. Instead, similarly to Saj-
jadi et al. (2018), we discretize the representations
by clustering them into a large number of clusters.
Then we use cluster labels instead of the continu-
ous representations in the MI estimator.

Specifically, we take only representations of the
1000 most frequent (sub)words. We gather rep-
resentations for 5 million occurrences of these at
each layer for each of the three models. We then
cluster the representations into N = 10000 clus-
ters using mini-batch k-means with k = 100. In
the experiments studying the mutual information
between a layer and source (or target) labels we
further filter occurrences. Namely, we take only
occurrences where the source and target labels are
among the top 1000 most frequent (sub)words.

4.2.2 Results
First, we estimate the MI between an input token
and a representation of this token at each layer. In

Figure 1: The mutual information between an input to-
ken and a representation of this token at each layer.

(a) LM (b) MLM
Figure 2: The mutual information of token representa-
tions at a layer and source (or target) tokens. For MLM,
only tokens replaced at random are considered to get
examples where input and output are different.

this experiment, we form data for MLM as in the
test regime; in other words, the input token is al-
ways the same as the output token. Results are
shown in Figure 1. For LM, the amount of rele-
vant information about the current input token de-
creases. This agrees with our expectations: some
of the information about the history is intuitively
not relevant for predicting the future. MT shows
a similar behavior, but the decrease is much less
sharp. This is again intuitive: the information
about the exact identity is likely to be useful for
the decoder. The most interesting and surprising
graph is for MLM: first, similarly to other mod-
els, the information about the input token is getting
lost but then, at two top layers, it gets recovered.
We will refer to these phases in further discussion
as context encoding and token reconstruction, re-
spectively. Whereas such non-monotonic behavior
is impossible when analyzing entire layers, as in
Tishby and Zaslavsky (2015), in our case, it sug-
gests that this extra information is obtained from
other tokens in the context.

We perform the same analysis but now measur-
ing MI with the output label for LM and MLM.
In this experiment, we form data for MLM as in
training, masking or replacing a fraction of tokens.
We then take only tokens replaced with a random
one to get examples where input and output to-
kens are different. Results are shown in Figure 2.
We can see that, as expected, MI with input tokens



4400

decreases while MI with output tokens increases.
Both LM and MLM are trained to predict a token
(next for LM and current for MLM) by encoding
input and context information. While in Figure 1
we observed monotonic behavior of LM, when
looking at the information with both input and out-
put tokens, we can see the two processes, losing
information about input and accumulating infor-
mation about output, for both LM and MLM mod-
els. For MLM these processes are more distinct
and can be thought of as the context encoding and
token prediction (compression/prediction) stages.
For MT, since nothing is predicted directly, we see
only the encoding stage of this process. This ob-
servation relates also to the findings by Blevins
et al. (2018). They show that up to a certain layer
the performance of representations obtained from
a deep multi-layer RNN LM improves on a con-
stituent labeling task, but then decreases, while for
representations obtained from an MT encoder per-
formance continues to improve up to the highest
layer. We further support this view with other ex-
periments in Section 6.3.

Even though the information-theoretic view
provides insights into processes shaping the rep-
resentations, direct MI estimation from finite sam-
ples for densities on multi-dimensional spaces is
challenging (Paninski, 2003). For this reason
in the subsequent analysis we use more well-
established frameworks such as canonical corre-
lation analysis to provide new insights and also to
corroborate findings we made in this section (e.g.,
the presence of two phases in MLM encoding).
Even though we will be using different machin-
ery, we will focus on the same two IB-inspired
questions: (1) how does information flow across
layers? and (2) what information does a layer rep-
resent?

5 Analyzing Changes and Influences
In this section, we analyze the flow of informa-
tion. The questions we ask include: how much
processing is happening in a given layer; which
tokens influence other tokens most; which tokens
gain most information from other tokens. As we
will see, these questions can be reduced to a com-
parison between network representations. We start
by describing the tool we use.

5.1 Canonical Correlation Analysis
We rely on recently introduced projection
weighted Canonical Correlation Analysis

(PWCCA) (Morcos et al., 2018), which is an
improved version of SVCCA (Raghu et al., 2017).
Both approaches are based on classic Canonical
Correlation Analysis (CCA) (Hotelling, 1936).

CCA is a multivariate statistical method for re-
lating two sets of observations arising from an un-
derlying process. In our setting, the underlying
process is a neural network trained on some task.
The two sets of observations can be seen as ‘two
views’ on the data. Intuitively, we look at the same
data (tokens in a sentence) from two standpoints.
For example, one view is one layer and another
view is another layer. Alternatively, one view can
be l-th layer in one model, whereas another view
can be the same l-th layer in another model. CCA
lets us measure similarity between pairs of views.

Formally, given a set of tokens (x1, x2, . . . , xN )
(with the sentences they occur in), we gather their
representations produced by two models (m1 and
m2) at layers l1 and l2, respectively. To achieve
this, we encode the whole sentences and take rep-
resentations of tokens we are interested in. We
get two views of these tokens by the models:
vm1,l1 = (xm1,l11 , x

m1,l1
2 , . . . , x

m1,l1
N ) and v

m2,l2 =

(xm2,l21 , x
m2,l2
2 , . . . , x

m2,l2
N ). The representations

are gathered in two matrices X1 ∈ Ma,N and
X2 ∈ Mb,N , where a and b are the numbers of
neurons in the models.2 These matrices are then
given to CCA (specifically, PWCCA). CCA iden-
tifies a linear relation maximizing the correlation
between the matrices and computes the similarity.
The values of PWCCA range from 0 to 1, with 1
indicating that the observations are linear transfor-
mations of each other, 0 indicating no correlation.

In the next sections, we vary two aspects of this
process: tokens and the ‘points of view’.

5.2 A coarse-grained view

We start with the analysis where we do not attempt
to distinguish between different token types.

5.2.1 Distances between tasks
As the first step in our analysis, we measure the
difference between representations learned for dif-
ferent tasks. In other words, we compare repre-
sentations for vm1,l and vm2,l at different layers l.
Here the data is all tokens of 5000 sentences. We
also quantify differences between representations
of models trained with the same objective but dif-
ferent random initializations. The results are pro-

2In our experiments, N > 100000.



4401

(a) (b)

Figure 3: PWCCA distance (a) between representa-
tions of different models at each layer (“init.” indicates
different initializations), (b) between consecutive lay-
ers of the same model.

vided in Figure 3a.
First, differences due to training objective are

much larger than the ones due to random initial-
ization of a model. This indicates that PWCCA
captures underlying differences in the types of in-
formation learned by a model rather than those due
to randomness in the training process.

MT and MLM objectives produce representa-
tions that are closer to each other than to LM’s
representations. The reason for this might be two-
fold. First, for LM only preceding tokens are in the
context, whereas for MT and MLM it is the entire
sentence. Second, both MT and MLM focus on a
given token, as it either needs to be reconstructed
or translated. In contrast, LM produces a repre-
sentation needed for predicting the next token.

5.2.2 Changes between layers
In a similar manner, we measure the difference
between representations of consecutive layers in
each model (Figure 3b). In this case we take views
vm,l and vm,l+1 and vary layers l and tasks m.

For MT, the extent of change monotonically de-
creases when going from the bottom to top lay-
ers, whereas there is no such monotonicity for LM
and MLM. This mirrors our view of LM and es-
pecially MLM as undergoing phases of encoding
and reconstruction (see Section 4.2), thus requir-
ing a stage of dismissing information irrelevant to
the output, which, in turn, is accompanied by large
changes in the representations between layers.

5.3 Fine-grained analysis

In this section, we select tokens with some pre-
defined property (e.g., frequency) and investigate
how much the tokens are influenced by other to-
kens or how much they influence other tokens.
Amount of change. We measure the extent of
change for a group of tokens as the PWCCA dis-
tance between the representations of these tokens

(a) MT (b) LM

(c) MLM
Figure 4: Token change vs its frequency.

for a pair of adjacent layers (l, l + 1). This quan-
tifies the amount of information the tokens receive
in this layer.
Influence. To measure the influence of a token
at lth layer on other tokens, we measure PWCCA
distance between two versions of representations
of other tokens in a sentence: first after encoding
as usual, second when encoding first l − 1 layers
as usual and masking out the influencing token at
the lth layer.3

5.3.1 Varying token frequency
Figure 4 shows a clear dependence of the amount
of change on token frequency. Frequent tokens
change more than rare ones in all layers in both
LM and MT. Interestingly, unlike MT, for LM
this dependence dissipates as we move towards top
layers. We can speculate that top layers focus on
predicting the future rather than incorporating the
past, and, at that stage, token frequency of the last
observed token becomes less important.

The behavior for MLM is quite different. The
two stages for MLMs could already be seen in Fig-
ures 1 and 3b. They are even more pronounced
here. The transition from a generalized token
representation, formed at the encoding stage, to
recreating token identity apparently requires more
changes for rare tokens.

When measuring influence, we find that rare to-
kens generally influence more than frequent ones
(Figure 5). We notice an extreme influence of rare

3By masking out we mean that other tokens are forbidden
to attend to the chosen one.



4402

(a) MT (b) LM

(c) MLM

Figure 5: Token influence vs its frequency.

tokens at the first MT layer and at all LM layers. In
contrast, rare tokens are not the most influencing
ones at the lower layers of MLM. We hypothesize
that the training procedure of MLM, with masking
out some tokens or replacing them with random
ones, teaches the model not to over-rely on these
tokens before their context is well understood. To
test our hypothesis, we additionally trained MT
and LM models with token dropout on the input
side (Figure 6). As we expected, there is no ex-
treme influence of rare tokens when using this reg-
ularization, supporting the above interpretation.

Interestingly, our earlier study of the MT Trans-
former (Voita et al., 2019) shows how this influ-
ence of rare tokens is implemented by the model.
In that work, we observed that, for any consid-
ered language pair, there is one dedicated atten-
tion head in the first encoder layer which tends to
point to the least frequent tokens in every sentence.
The above analysis suggest that this phenomenon
is likely due to overfitting.

We also analyzed the extent of change and in-
fluence splitting tokens according to their part of
speech; see appendix for details.

6 What does a layer represent?

Whereas in the previous section we were inter-
ested in quantifying the amount of information ex-
changed between tokens, here we primarily want
to understand what representation in each layer
‘focuses’ on. We evaluate to what extent a cer-
tain property is important for defining a token rep-

(a) MT (b) LM

Figure 6: Token influence vs its frequency for models
trained with word dropout (in training, each input token
is replaced with a random with the probability 10%).

resentation at each layer by (1) selecting a large
number of token occurrences and taking their rep-
resentations; (2) validating if a value of the prop-
erty is the same for token occurrences correspond-
ing to the closest representations. Though our ap-
proach is different from probing tasks, we choose
the properties which will enable us to relate to
other works reporting similar behaviour (Zhang
and Bowman, 2018; Blevins et al., 2018; Tenney
et al., 2019a). The properties we consider are to-
ken identity, position in a sentence, neighboring
tokens and CCG supertags.

6.1 Methodology

For our analysis, we take 100 random word types
from the top 5,000 in our vocabulary. For each
word type, we gather 1,000 different occurrences
along with the representations from all three mod-
els. For each representation, we take the closest
neighbors among representations at each layer and
evaluate the percentage of neighbors with the same
value of the property.

6.2 Preserving token identity and position

In this section, we track the loss of information
about token identity (i.e., word type) and position.
Our motivation is three-fold. First, this will help
us to confirm the results provided on Figure 1;
second, to relate to the work reporting results for
probing tasks predicting token identity. Finally,
the Transformer starts encoding a sentence from a
positional and a word embedding, thus it is natural
to look at how this information is preserved.

6.2.1 Preserving token identity
We want to check to what extent a model confuses
representations of different words. For each of the
considered words we add 9000 representations of
words which potentially could be confused with



4403

(a) (b)

Figure 7: Preserving (a) token identity, (b) position

Figure 8: t-SNE of different occurrences of the tokens
“is” (red), “are” (orange), “was” (blue), “were” (light-
blue). On the x-axis are layers.

it.4 For this extended set of representations, we
follow the methodology described above.

Results are presented in Figure 7a. Reassur-
ingly, the plot is very similar to the one computed
with MI estimators (Figure 1), further supporting
the interpretations we gave previously (Section 4).
Now, let us recall the findings by Zhang and Bow-
man (2018) regarding the superior performance of
untrained LSTMs over trained ones on the task of
token identity prediction. They mirror our view
of the evolution of a token representation as going
through compression and prediction stages, where
the learning objective defines the process of for-
getting information. If a network is not trained, it
is not forced to forget input information.

Figure 8 shows how representations of differ-
ent occurrences of the words “is”, “are”, “was”,
“were” get mixed in MT and LM layers and dis-
ambiguated for MLM. For MLM, 15% of tokens
were masked as in training. In the first layer, these
masked states form a cluster separate from the oth-
ers, and then they get disambiguated as we move
bottom-up across the layers.

6.2.2 Preserving token position
We evaluate the average distance of position of the
current occurrence and the top 5 closest represen-
tations. The results are provided in Figure 7b. This

4See appendix for the details.

Figure 9: t-SNE of different occurrences of the token
“it”, position is in color (the larger the word index the
darker its color). On the x-axis are layers.

(a) left (b) right

Figure 10: Preserving immediate neighbors

illustrates how the information about input (in this
case, position), potentially not so relevant to the
output (e.g., next word for LM), gets gradually dis-
missed. As expected, encoding input positions is
more important for MT, so this effect is more pro-
nounced for LM and MLM. An illustration is in
Figure 9. For MT, even on the last layer ordering
by position is noticeable.

6.3 Lexical and syntactic context

In this section, we will look at the two properties:
identities of immediate neighbors of a current to-
ken and CCG supertag of a current token. On the
one hand, these properties represent a model’s un-
derstanding of different types of context: lexical
(neighboring tokens identity) and syntactic. On
the other, they are especially useful for our anal-
ysis since they can be split into information about
‘past’ and ‘future’ by taking either left or right
neighbor or part of a CCG tag.

6.3.1 The importance of neighboring tokens

Figure 10 supports our previous expectation that
for LM the importance of a previous token de-
creases, while information about future token is
being formed. For MLM, the importance of neigh-
bors gets higher until the second layer and de-
creases after. This may reflect stages of context
encoding and token reconstruction.



4404

(a) (b) (c)

Figure 11: Preserving CCG supertag.

6.3.2 The importance of CCG tags
Results are provided in Figure 11a.5 As in pre-
vious experiments, importance of CCG tag for
MLM degrades at higher layers. This agrees with
the work by Tenney et al. (2019a). The authors ob-
serve that for different tasks (e.g., part-of-speech,
constituents, dependencies, semantic role label-
ing, coreference) the contribution6 of a layer to a
task increases up to a certain layer, but then de-
creases at the top layers. Our work gives insights
into the underlying process defining this behavior.

For LM these results are not really informative
since it does not have access to the future. We
go further and measure importance of parts of a
CCG tag corresponding to previous (Figure 11b)
and next (Figure 11c) parts of a sentence. It can
be clearly seen that LM first accumulates infor-
mation about the left part of CCG, understanding
the syntactic structure of the past. Then this infor-
mation gets dismissed while forming information
about future.

Figure 12 shows how representations of differ-
ent occurrences of the token “is” get reordered in
the space according to CCG tags (colors corre-
spond to tags).

7 Additional related work

Previous work analyzed representations of MT
and/or LM models by using probing tasks. Dif-
ferent levels of linguistic analysis have been con-
sidered including morphology (Belinkov et al.,
2017a; Dalvi et al., 2017; Bisazza and Tump,
2018), syntax (Shi et al., 2016; Tenney et al.,
2019b) and semantics (Hill et al., 2017; Belinkov
et al., 2017b; Raganato and Tiedemann, 2018;
Tenney et al., 2019b). Our work complements this

5To derive CCG supertags, we use Yoshikawa et al. (2017)
tagger, the latest version with ELMO: https://github.
com/masashi-y/depccg.

6In their experiments, representations are pooled across
layers with the scalar mixing technique similar to the one
used in the ELMO model (Peters et al., 2018). The prob-
ing classifier is trained jointly with the mixing weights, and
the learned coefficients are used to estimate the contribution
of different layers to a particular task.

Figure 12: t-SNE of different occurrences of the token
“is”, CCG tag is in color (intensity of a color is a token
position). On the x-axis are layers.

line of research by analyzing how word represen-
tations evolve between layers and gives insights
into how models trained on different tasks come
to represent different information.

Canonical correlation analysis has been previ-
ously used to investigate learning dynamics of
CNNs and RNNs, to measure the intrinsic dimen-
sionality of layers in CNNs and compare represen-
tations of networks which memorize and general-
ize (Raghu et al., 2017; Morcos et al., 2018). Bau
et al. (2019) used SVCCA as one of the methods
used for identifying important individual neurons
in NMT models. Saphra and Lopez (2019) used
SVCCA to investigate how representations of lin-
guistic structure are learned over time in LMs.

8 Conclusions

In this work, we analyze how the learning objec-
tive determines the information flow in the model.
We propose to view the evolution of a token
representation between layers from the compres-
sion/prediction trade-off perspective. We conduct
a series of experiments supporting this view and
propose a possible explanation for superior perfor-
mance of MLM over LM for pretraining. We re-
late our findings to observations previously made
in the context of probing tasks.

Acknowledgments

We would like to thank the anonymous review-
ers for their comments. The authors also thank
Artem Babenko, David Talbot and Yandex Ma-
chine Translation team for helpful discussions and
inspiration. Ivan Titov acknowledges support of
the European Research Council (ERC StG Broad-
Sem 678254) and the Dutch National Science
Foundation (NWO VIDI 639.022.518). Rico Sen-
nrich acknowledges support from the Swiss Na-
tional Science Foundation (PP00P1_176727).

https://github.com/masashi-y/depccg
https://github.com/masashi-y/depccg


4405

References
Anthony Bau, Yonatan Belinkov, Hassan Sajjad, Nadir

Durrani, Fahim Dalvi, and James Glass. 2019. Iden-
tifying and controlling important neurons in neural
machine translation. In International Conference on
Learning Representations, New Orleans.

Yonatan Belinkov, Nadir Durrani, Fahim Dalvi, Has-
san Sajjad, and James Glass. 2017a. What do neu-
ral machine translation models learn about morphol-
ogy? In Proceedings of the 55th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers), pages 861–872. Association
for Computational Linguistics.

Yonatan Belinkov, Lluís Màrquez, Hassan Sajjad,
Nadir Durrani, Fahim Dalvi, and James Glass.
2017b. Evaluating layers of representation in neural
machine translation on part-of-speech and semantic
tagging tasks. In Proceedings of the Eighth Interna-
tional Joint Conference on Natural Language Pro-
cessing (Volume 1: Long Papers), pages 1–10. Asian
Federation of Natural Language Processing.

Arianna Bisazza and Clara Tump. 2018. The lazy en-
coder: A fine-grained analysis of the role of mor-
phology in neural machine translation. In Proceed-
ings of the 2018 Conference on Empirical Methods
in Natural Language Processing, pages 2871–2876,
Brussels, Belgium. Association for Computational
Linguistics.

Terra Blevins, Omer Levy, and Luke Zettlemoyer.
2018. Deep RNNs encode soft hierarchical syntax.
In Proceedings of the 56th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 2:
Short Papers), pages 14–19, Melbourne, Australia.
Association for Computational Linguistics.

Ondřej Bojar, Christian Federmann, Mark Fishel,
Yvette Graham, Barry Haddow, Matthias Huck,
Philipp Koehn, and Christof Monz. 2018. Find-
ings of the 2018 conference on machine translation
(wmt18). In Proceedings of the Third Conference
on Machine Translation, Volume 2: Shared Task Pa-
pers, pages 272–307, Belgium, Brussels. Associa-
tion for Computational Linguistics.

Fahim Dalvi, Nadir Durrani, Hassan Sajjad, Yonatan
Belinkov, and Stephan Vogel. 2017. Understanding
and improving morphological learning in the neu-
ral machine translation decoder. In Proceedings of
the Eighth International Joint Conference on Natu-
ral Language Processing (Volume 1: Long Papers),
pages 142–151. Asian Federation of Natural Lan-
guage Processing.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805.

Felix Hill, Kyunghyun Cho, Sébastien Jean, and
Y Bengio. 2017. The representational geometry of

word meanings acquired by neural machine transla-
tion models. Machine Translation, 31.

Harold Hotelling. 1936. Relations between two sets of
variates. Biometrika, 28:321–337.

Guillaume Lample and Alexis Conneau. 2019. Cross-
lingual language model pretraining. arXiv preprint
arXiv:1901.07291.

Christopher D. Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven J. Bethard, and David Mc-
Closky. 2014. The Stanford CoreNLP natural lan-
guage processing toolkit. In Proceedings of 52nd
Annual Meeting of the Association for Computa-
tional Linguistics: System Demonstrations, pages
55–60, Baltimore, Maryland. Association for Com-
putational Linguistics.

Ari S. Morcos, Maithra Raghu, and Samy Bengio.
2018. Insights on representational similarity in neu-
ral networks with canonical correlation. In NeurIPS,
Montreal, Canada.

Jan Niehues, Ronaldo Cattoni, Sebastian Stüker,
Mauro Cettolo, Marco Turchi, and Marcello Fed-
erico. 2018. The IWSLT 2018 Evaluation Cam-
paign. In Proceedings of the 15th International
Workshop on Spoken Language Translation, pages
118–123, Bruges, Belgium.

Liam Paninski. 2003. Estimation of entropy and mu-
tual information. Neural computation, 15(6):1191–
1253.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In Proceedings of the 2018 Confer-
ence of the North American Chapter of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies, Volume 1 (Long Papers), pages
2227–2237, New Orleans, Louisiana. Association
for Computational Linguistics.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving language under-
standing by generative pre-training.

Alessandro Raganato and Jörg Tiedemann. 2018. An
analysis of encoder representations in transformer-
based machine translation. In Proceedings of the
2018 EMNLP Workshop BlackboxNLP: Analyzing
and Interpreting Neural Networks for NLP, pages
287–297, Brussels, Belgium. Association for Com-
putational Linguistics.

Maithra Raghu, Justin Gilmer, Jason Yosinski, and
Jascha Sohl-Dickstein. 2017. Svcca: Singular vec-
tor canonical correlation analysis for deep learning
dynamics and interpretability. In NeurIPS, Los An-
geles.

Mehdi S. M. Sajjadi, Olivier Bachem, Mario Lucic,
Olivier Bousquet, and Sylvain Gelly. 2018. Assess-
ing generative models via precision and recall. In

https://openreview.net/pdf?id=H1z-PsR5KX
https://openreview.net/pdf?id=H1z-PsR5KX
https://openreview.net/pdf?id=H1z-PsR5KX
https://doi.org/10.18653/v1/P17-1080
https://doi.org/10.18653/v1/P17-1080
https://doi.org/10.18653/v1/P17-1080
http://aclweb.org/anthology/I17-1001
http://aclweb.org/anthology/I17-1001
http://aclweb.org/anthology/I17-1001
http://www.aclweb.org/anthology/D18-1313
http://www.aclweb.org/anthology/D18-1313
http://www.aclweb.org/anthology/D18-1313
https://www.aclweb.org/anthology/P18-2003
http://www.aclweb.org/anthology/W18-6401
http://www.aclweb.org/anthology/W18-6401
http://www.aclweb.org/anthology/W18-6401
http://aclweb.org/anthology/I17-1015
http://aclweb.org/anthology/I17-1015
http://aclweb.org/anthology/I17-1015
https://arxiv.org/abs/1810.04805
https://arxiv.org/abs/1810.04805
https://arxiv.org/abs/1810.04805
https://doi.org/10.1007/s10590-017-9194-2
https://doi.org/10.1007/s10590-017-9194-2
https://doi.org/10.1007/s10590-017-9194-2
https://arxiv.org/abs/1901.07291
https://arxiv.org/abs/1901.07291
https://doi.org/10.3115/v1/P14-5010
https://doi.org/10.3115/v1/P14-5010
https://papers.nips.cc/paper/7815-insights-on-representational-similarity-in-neural-networks-with-canonical-correlation.pdf
https://papers.nips.cc/paper/7815-insights-on-representational-similarity-in-neural-networks-with-canonical-correlation.pdf
https://doi.org/10.18653/v1/N18-1202
https://doi.org/10.18653/v1/N18-1202
https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf
https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf
http://www.aclweb.org/anthology/W18-5431
http://www.aclweb.org/anthology/W18-5431
http://www.aclweb.org/anthology/W18-5431
https://papers.nips.cc/paper/7188-svcca-singular-vector-canonical-correlation-analysis-for-deep-learning-dynamics-and-interpretability.pdf
https://papers.nips.cc/paper/7188-svcca-singular-vector-canonical-correlation-analysis-for-deep-learning-dynamics-and-interpretability.pdf
https://papers.nips.cc/paper/7188-svcca-singular-vector-canonical-correlation-analysis-for-deep-learning-dynamics-and-interpretability.pdf
http://papers.nips.cc/paper/7769-assessing-generative-models-via-precision-and-recall.pdf
http://papers.nips.cc/paper/7769-assessing-generative-models-via-precision-and-recall.pdf


4406

Advances in Neural Information Processing Systems
31, pages 5228–5237.

Naomi Saphra and Adam Lopez. 2019. Understand-
ing learning dynamics of language models with
SVCCA. In Proceedings of the 2019 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, Volume 1 (Long and Short Papers),
pages 3257–3267, Minneapolis, Minnesota. Associ-
ation for Computational Linguistics.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Neural machine translation of rare words
with subword units. In Proceedings of the 54th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1715–
1725, Berlin, Germany. Association for Computa-
tional Linguistics.

Xing Shi, Inkit Padhi, and Kevin Knight. 2016. Does
string-based neural mt learn source syntax? In Pro-
ceedings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing, pages 1526–
1534. Association for Computational Linguistics.

Ravid Shwartz-Ziv and Naftali Tishby. 2017. Opening
the black box of deep neural networks via informa-
tion. arXiv preprint arXiv:1703.00810.

Ian Tenney, Dipanjan Das, and Ellie Pavlick. 2019a.
BERT rediscovers the classical NLP pipeline. In
Proceedings of the 57th Annual Meeting of the Asso-
ciation for Computational Linguistics, pages 4593–
4601, Florence, Italy. Association for Computa-
tional Linguistics.

Ian Tenney, Patrick Xia, Berlin Chen, Alex Wang,
Adam Poliak, R Thomas McCoy, Najoung Kim,
Benjamin Van Durme, Samuel R Bowman, Dipan-
jan Das, et al. 2019b. What do you learn from con-
text? probing for sentence structure in contextual-
ized word representations. In International Confer-
ence on Learning Representations.

Naftali Tishby, Fernando C Pereira, and William
Bialek. 1999. The information bottleneck method.
In Proceedings of the 37-th Annual Allerton Con-
ference on Communication, Control and Computing,
pages 368–377.

Naftali Tishby and Noga Zaslavsky. 2015. Deep learn-
ing and the information bottleneck principle. 2015
IEEE Information Theory Workshop (ITW), pages 1–
5.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems 30, pages 5998–6008, Los Angeles.

Elena Voita, David Talbot, Fedor Moiseev, Rico Sen-
nrich, and Ivan Titov. 2019. Analyzing multi-head
self-attention: Specialized heads do the heavy lift-
ing, the rest can be pruned. In Proceedings of the

57th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), pages
5797–5808, Florence, Italy. Association for Compu-
tational Linguistics.

Masashi Yoshikawa, Hiroshi Noji, and Yuji Mat-
sumoto. 2017. A* CCG parsing with a supertag and
dependency factored model. In Proceedings of the
55th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), pages
277–287, Vancouver, Canada. Association for Com-
putational Linguistics.

Kelly Zhang and Samuel Bowman. 2018. Language
modeling teaches you more than translation does:
Lessons learned through auxiliary syntactic task
analysis. In Proceedings of the 2018 EMNLP
Workshop BlackboxNLP: Analyzing and Interpret-
ing Neural Networks for NLP, pages 359–361, Brus-
sels, Belgium. Association for Computational Lin-
guistics.

https://doi.org/10.18653/v1/N19-1329
https://doi.org/10.18653/v1/N19-1329
https://doi.org/10.18653/v1/N19-1329
https://doi.org/10.18653/v1/P16-1162
https://doi.org/10.18653/v1/P16-1162
https://doi.org/10.18653/v1/D16-1159
https://doi.org/10.18653/v1/D16-1159
https://arxiv.org/abs/1703.00810
https://arxiv.org/abs/1703.00810
https://arxiv.org/abs/1703.00810
https://www.aclweb.org/anthology/P19-1452
https://openreview.net/pdf?id=SJzSgnRcKX
https://openreview.net/pdf?id=SJzSgnRcKX
https://openreview.net/pdf?id=SJzSgnRcKX
https://www.cs.huji.ac.il/labs/learning/Papers/allerton.pdf
http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
https://www.aclweb.org/anthology/P19-1580
https://www.aclweb.org/anthology/P19-1580
https://www.aclweb.org/anthology/P19-1580
https://doi.org/10.18653/v1/P17-1026
https://doi.org/10.18653/v1/P17-1026
https://www.aclweb.org/anthology/W18-5448
https://www.aclweb.org/anthology/W18-5448
https://www.aclweb.org/anthology/W18-5448
https://www.aclweb.org/anthology/W18-5448

