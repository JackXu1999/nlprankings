



















































Learning Representation Mapping for Relation Detection in Knowledge Base Question Answering


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 6130–6139
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

6130

Learning Representation Mapping for Relation Detection in
Knowledge Base Question Answering

Peng Wu1,2, Shujian Huang1,2 , Rongxiang Weng1,2, Zaixiang Zheng1,2,
Jianbing Zhang1,2, Xiaohui Yan3, Jiajun Chen1,2

1National Key Laboratory for Novel Software Technology, Nanjing, China
2Nanjing University, Nanjing, China

3Poisson Lab, Huawei Technologies, Beijing, China
{wup, wengrx, zhengzx}@nlp.nju.edu.cn
{huangsj, zjb, chenjj}@nju.edu.cn

yanxiaohui2@huawei.com

Abstract

Relation detection is a core step in many nat-
ural language process applications including
knowledge base question answering. Previous
efforts show that single-fact questions could
be answered with high accuracy. However,
one critical problem is that current approaches
only get high accuracy for questions whose
relations have been seen in the training data.
But for unseen relations, the performance will
drop rapidly. The main reason for this prob-
lem is that the representations for unseen re-
lations are missing. In this paper, we propose
a simple mapping method, named representa-
tion adapter, to learn the representation map-
ping for both seen and unseen relations based
on previously learned relation embedding. We
employ the adversarial objective and the re-
construction objective to improve the mapping
performance. We re-organize the popular Sim-
pleQuestion dataset to reveal and evaluate the
problem of detecting unseen relations. Ex-
periments show that our method can greatly
improve the performance of unseen relations
while the performance for those seen part is
kept comparable to the state-of-the-art.1

1 Introduction

The task of Knowledge Base Question Answer-
ing (KBQA) has been well developed in recent
years (Berant et al., 2013; Bordes et al., 2014; Yao
and Van Durme, 2014). It answers questions using
an open-domain knowledge base, such as Freebase
(Bollacker et al., 2008), DBpedia (Lehmann et al.,
2015) or NELL (Carlson et al., 2010). The knowl-
edge base usually contains a large set of triples.

1Our code and data are available at https://github.
com/wudapeng268/KBQA-Adapter.

Each triple is in the form of 〈subject, relation, ob-
ject〉, indicating the relation between the subject
entity and the object entity.

Typical KBQA systems (Yao and Van Durme,
2014; Yin et al., 2016; Dai et al., 2016; Yu et al.,
2017; Hao et al., 2018) can be divided into two
steps: the entity linking step first identifies the tar-
get entity of the question, which corresponds to
the subject of the triple; the relation detection step
then determines the relation that the question asks
from a set of candidate relations. After the two
steps, the answer could be obtained by extracting
the corresponding triple from the knowledge base
(as shown in Figure 1).

Our main focus in this paper is the relation de-
tection step, which is more challenging because
it needs to consider the meaning of the whole
question sentence (e.g., the pattern “where was
... born”), as well as the meaning of the candi-
date relation (e.g., “place of birth”). For compari-
son, the entity linking step benefits more from the
matching of surface forms between the words in
the question and subject entity (e.g., “Mark Mif-
sud”).

In recent deep learning based relation detection
approaches, each word or relation is represented
by a dense vector representation, called embed-
ding, which is usually learned automatically while
optimizing the relation detection objective. Then,
the inference processes of these approaches are ex-
ecuted by neural network computations. Such ap-
proaches enjoy great success in common KBQA
datasets, such as SimpleQuestion (Bordes et al.,
2015), achieving over 90% accuracy in relation
detection. In the words of Petrochuk and Zettle-
moyer (2018), “SimpleQuestion is nearly solved.”
However, we notice that in the common split of

https://github.com/wudapeng268/KBQA-Adapter
https://github.com/wudapeng268/KBQA-Adapter


6131

Question:

Candidate 
Relations:

Triple:

where was Mark Mifsud born?

people.person.nationality

<Mark Mifsud, people.person.place_of_birth, Malta>

people.person.place_of_birth

people.person.profession

…

Figure 1: A KBQA example. The bold words in the
question are the target entity, identified in the entity
linking step. The relation detection step selects the cor-
rect relation (marked with bold font) from a set of can-
didate relations. The answer of this question is the ob-
ject entity of the triple extracted from the knowledge
base.

the SimpleQuestion dataset, 99% of the relations
in the test set also exist in the training data, which
means their embeddings could be learned well
during training. On the contrary, for those re-
lations which are never seen in the training data
(called unseen relations), their embeddings have
never been trained since initialization. As a result,
the corresponding detection performance could be
arbitrary, which is a problem that has not been
carefully studied.

We emphasize that the detection for these un-
seen relations is critical because it is infeasi-
ble to build training data for all the relations
in a large-scale knowledge base. For exam-
ple, SimpleQuestion is a large-scale human anno-
tated dataset, which contains 108,442 natural lan-
guage questions for 1,837 relations sampled from
FB2M (Bordes et al., 2015). FB2M is a subset
of FreeBase (Bollacker et al., 2008) which have 2
million entities, 6,700 relations. A large portion of
these relations can not be covered by the human-
annotated dataset such as SimpleQuestion. There-
fore, for building up a practical KBQA system that
could answer questions based on FB2M or other
large-scale knowledge bases, dealing with the un-
seen relations is very important and challenging.
This problem could be considered as a zero-shot
learning problem (Palatucci et al., 2009) where the
labels for test instances are unseen in the training
dataset.

In this paper, we present a detailed study on this
zero-shot relation detection problem. Our contri-
butions could be summarized as follows:

1. Instead of learning the relation representation
barely from the training data, we employ methods
to learn the representations from the whole knowl-
edge graph which has much wider coverage.

2. We propose a mapping mechanism, called
representation adapter, or simply adapter, to in-
corporate the learned representations into the re-
lation detection model. We start with the simple
mean square error loss for the non-trivial training
of the adapter and propose to incorporate adver-
sarial and reconstruction objectives to improve the
training process.

3. We re-organize the SimpleQuestion dataset
as SimpleQuestion-Balance to evaluate the perfor-
mance for seen and unseen relations, separately.

4. We present experiments showing that our
proposed method brings a great improvement to
the detection of unseen relations, while still keep
comparable to the state-of-the-art method for the
seen relations.

2 Representation Adapter

2.1 Motivation

Representation learning of human annotated data
is limited by the size and coverage of the train-
ing data. In our case, because the unseen relations
and their corresponding questions do not occur in
the training data, their representations cannot be
properly trained, leading to poor detection perfor-
mance. A possible solution for this problem is to
employ a large number of unannotated data, which
may be much easier to obtain, to provide better
coverage.

Usually, pre-trained representations are not di-
rectly applicable to specific tasks. One popular
way to utilize these representations is using them
as initialization. These initialized representations
are then fine-tuned on the labeled training data,
with a task specific objective. However, with the
above mentioned coverage issues, the representa-
tions of unseen relations will not be updated prop-
erly during fine-tuning, leading to poor test perfor-
mance.

To solve this problem, we keep the represen-
tation unchanged during training, and propose a
representation adapter to bridge the gap between
general purposed representations and task specific
ones. We will then present the basic adapter
framework, introduce the adversarial adapter and
the reconstruction objective as enhancements.

Throughout this paper, we use the following no-
tations: let r denote a single relation; S and U de-
note the set of seen and unseen relations, respec-
tively; e(r) or e denote the embedding of r; specif-
ically, we use eg to denote the general pre-trained



6132

Input eg

Output eo

̂eTarget 

G

Input eg

Output eo

̂eTarget 

G

Output 

Input

̂eTarget 

Recon.  e′�o

eo

eg

G′�G

Basic Adapter Adver. Adapter Adapter with recon. loss

lossDlossmse lossmse/lossD

lossR

Figure 2: The structures of representation adapter. On
the left is the basic adapter; on the middle is the ad-
versarial adapter; on the right is the adapter with the
reconstruction loss. Adver. and recon. are the abbrevi-
ation of adversarial and reconstruction, respectively.

embedding.

2.2 Basic Adapter
Pseudo Target Representations The basic idea
is to use a neural network representation adapter to
perform the mapping from the general purposed
representation to the task specific one. The in-
put of the adapter is the embedding learned from
the knowledge base. However, the output of the
adapter is undecided, because there is no ora-
cle representation for the relation detection task.
Therefore, we first train a traditional relation de-
tection model similar to Yu et al. (2017). Dur-
ing training, the representations for relations in the
training set (seen relations) will be updated for the
relation detection task. We use these representa-
tions as pseudo target representations, denoted as
ê, for training the adapter.

Linear Mapping Inspired by Mikolov et al.
(2013), which shows the representation space of
similar languages can be transferred by a linear
mapping, we also employ a linear mapping func-
tion G(·) to map the general embedding eg to the
task specific (pseudo target) representation ê (Fig-
ure 2, left).

The major difference between our adapter and
an extra layer of neural network is that specific
losses are designed to train the adapter, instead
of implicitly learning the adapter as a part of the
whole network. We train the adapter to optimize
the following objective function on the seen rela-
tions:

Ladapter =
∑
r∈S

loss(ê, G(eg)). (1)

Here the loss function could be any metric that
evaluates the difference between the two represen-
tations. The most common and simple one is the
mean square error loss (Equation (2)), which we
employ in our basic adapter. We will discuss other
possibilities in the following sub-sections.

lossMSE(ê, G(eg)) = ||ê−G(eg)||22 (2)

2.3 Adversarial Adapter
The mean square error loss only measures the ab-
solute distance between two embedding vectors.
Inspired by the popular generative adversarial net-
works (GAN) (Goodfellow et al., 2014; Arjovsky
et al., 2017) and some previous works in unsuper-
vised machine translation (Conneau et al., 2018;
Zhang et al., 2017a,b), we use a discriminator to
provide an adversarial loss to guide the training
(Figure 2, middle). It is a different way to mini-
mize the difference between G(e) and ê.

In detail, we train a discriminator, D(·) , to dis-
criminate the “real” representation, i.e., the fine-
tuned relation embedding ê, from the “fake” rep-
resentation, which is the output of the adapter.
The adapter G(·) is acting as the generator in
GAN, which tries to generate a representation that
is similar to the “real” representation. We use
WassersteinGAN (Arjovsky et al., 2017) to train
our adapter. For any relations sampled from the
training set, the objective function for the discrim-
inator lossD and generator lossG are:

lossD = Er∈S [D(G(eg))]− Er∈S [D(ê)] (3)

lossG = −Er∈S [D(G(eg))] (4)

Here for D(·), we use a feed forward neural net-
work without the sigmoid function of the last
layer (Arjovsky et al., 2017).

2.4 Reconstruction Loss
The adapter could only learn the mapping by us-
ing the representations of seen relations, which ne-
glects the potential large set of unseen relations.
Here we propose to use an additional reconstruc-
tion loss to augment the adapter (Figure 2, right).
More specifically, we employ a reversed adapter
G′(·), mapping the representation G(e) back to e.

The advantage of introducing the reversed train-
ing is two-fold. On the one hand, the reversed
adapter could be trained with the representation



6133

for all the relations, both seen and unseen ones.
On the other hand, the reversed mapping could
also serve as an extra constraint for regularizing
the forward mapping.

For the reversed adapter G′(·), We simply use
a similar linear mapping function as for G(·), and
train it with the mean square error loss:

lossR =
∑

r∈S∪U
||G′(G(eg))− eg||22 (5)

Please note that, different from previous loss func-
tions, this reconstruction loss is defined for both
seen and unseen relations.

3 Relation Detection with the Adapter

We integrate our adapter into the state-of-the-art
relation detection framework (Yu et al., 2017, Hi-
erarchical Residual BiLSTM (HR-BiLSTM)).

Framework The framework uses a question
network to encode the question sentence as a vec-
tor qf and a relation network to encode the rela-
tion as a vector rf. Both of the two networks are
based on the Bi-LSTM with max-pooling opera-
tion. Then, the cosine similarity is introduced to
compute the distance between the qf and rf, which
determines the detection result. Our adapter is an
additional module which is used in the relation
network to enhance this framework (Figure 3).

Adapting the Relation Representation The re-
lation network proposed in Yu et al. (2017) has two
parts for relation representations: one is at word-
level and the other is at relation-level. The two
parts are fed into the relation network to generate
the final relation representation.

Different from previous approaches, we employ
the proposed adapter G(·) on the relation-level
representations to solve unseen relation detection
problem. There are several approaches to obtain
the relation representations from the knowledge
base into a universal space (Bordes et al., 2013;
Wang et al., 2014; Han et al., 2018). In prac-
tice, we use the JointNRE embedding (Han et al.,
2018), because its word and relation representa-
tions are in the same space.

Training Following Yu et al. (2017), the relation
detection model is trained by the hinge loss (Ben-
gio et al., 2003) which tries to separate the score
of each negative relation from the positive relation

G(eg)

Question Relation

Adapter

egq1 q3q2 q4 w1 w2 w3

Max Pooling

qf rf

Max Pooling

Lower Hidden  States 

Cosine Similarity

Upper Hidden  States 

Figure 3: KBQA baseline with the adapter. Shared
Bi-LSTM is marked with the same color. The adapter
maps task independent representations for each relation
to the task specific ones, which are fed into the relation
network.

by a margin:

Lrd =
∑

max(0, γ−s(qf, r+f )+s(qf, r
−
f )), (6)

where γ is the margin; r+f is the positive relation
from the annotated training data; r−f is the relation
negative sampled from the rest relations; s(·, ·) is
the cosine distance between qf and rf.

The basic relation detection model is pre-
trained to get the pseudo target representations.
Then, the adapter is incorporated into the train-
ing process, and jointly optimized with the rela-
tion detection model. For the adversarial adapter,
the generator and the discriminator are trained al-
ternatively following the common practice.

4 SimpleQuestion-Balance (SQB)

As mentioned before, SimpleQuestion (SQ) is a
large-scale KBQA dataset. Each sample in SQ in-
cludes a human annotated question and the cor-
responding knowledge triple. However, the dis-
tribution of the relations in the test set is unbal-
anced. Most of the relations in the test set have
been seen in the training data. To better evalu-
ate the performance of unseen relation detection,
we re-organize the SQ dataset to balance the num-
ber of seen and unseen relations in development
and test sets, and the new dataset is denoted as
SimpleQuestion-Balance (SQB).

The re-organization is performed by randomly
shuffle and split into 5 sets, i.e. Train, Dev-seen,
Den-unseen, Test-seen and Test-unseen, while



6134

Datasets SQ SQB
Train 75,910 75,819
Dev-seen 10,774 5,383
Dev-unseen 71 5,758
Test-seen 21,526 10,766
Test-unseen 161 10,717

Table 1: The number of instances in each sub-
set from SimpleQuestion (SQ) and SimpleQuestion-
Balance (SQB) datasets. Dev-seen and Dev-unseen are
seen and unseen part of development set; Test-seen and
Test-unseen are seen and unseen part of test set, respec-
tively.

checking the overlapping of relations and the per-
centage of seen/unseen samples in each set. We
require the sizes of the training, development and
test sets are similar to SQ.

The details of the resulting SQB and SQ are
shown in Table 1. The SQ dataset only have 0.65%
(71 / 10845) and 0.74% (161 / 21687) of the un-
seen samples in the dev set (Dev-unseen) and test
set (Test-unseen), respectively.

5 Experiment

5.1 Settings
Implementation Details We use RM-
Prop (Tieleman and Hinton, 2012) as the
optimization strategy to train the proposed
adapter. The learning rate is set as 10−4. We set
the batch size as 256. Following Arjovsky et al.
(2017), we clip the parameters of discriminator
into [−c, c], where c is 0.1. Dropout rate is set as
0.2 to regularize the adapter.

The baseline relation detection model is almost
same as Yu et al. (2017), except that the word
embedding and relation embedding of our model
are pre-trained by JointNRE (Han et al., 2018) on
FB2M and Wikipedia , with the default settings re-
ported in the Han et al. (2018). The embeddings
are fine-tuned with the model.

More specifically, the dimension of relation rep-
resentation is 300. The dimension for the hidden
state of Bi-LSTM is set to 256. Parameters in the
neural models are initialized using a uniform sam-
pling. The number of negative sampled relations
is 256. The γ in hinge loss (Equation (6)) is set to
0.1.

Evaluation To evaluate the performance of re-
lation detection, we assume that the results of en-
tity linking are correct. Two metrics are employed.
Micro average accuracy (Tsoumakas et al., 2010)

is the average accuracy of all samples, which is
the metric used in previous work. Macro average
accuracy (Sebastiani, 2002; Manning et al., 2008;
Tsoumakas et al., 2010) is the average accuracy of
the relations.

Please note that because different relations may
correspond to the different number of samples in
the test set, the micro average accuracy may be af-
fected by the distribution of unseen relations in the
test set. In this case, the macro average accuracy
will serve as an alternative indicator.

We report the average and standard deviation
(std) of 10-folds cross validation to avoid contin-
gency.

5.2 Main Results

Main results for baseline and the proposed model
with the different settings are listed in Table 2. The
detailed comparison is as follows:

Baseline The baseline HR-BiLSTM (line 1)
shows the best performance on Test-seen, but
the performance is much worse on Test-unseen.
For comparison, training the model without fine-
tuning (line 2) achieves much better results on
Test-unseen, demonstrating our motivation that
the embeddings are the reason for the weak perfor-
mance on unseen relations, and fine-tuning makes
them worse.

Using Adapters Line 3 shows the results of
adding an extra mapping layer of neural networks
between the pretrained embedding and the relation
detection networks, without any loss. Although
ideally, it is possible to learn the mapping implic-
itly with the training, in practice, this does not lead
to a better result (line 3 v.s. line 2).

While keeping similar performance on the Test-
seen with the HR-BiLSTM, all the models using
the representation adapter achieve great improve-
ment on the Test-unseen set. With the simplest
form of adapter (line 4), the accuracy on Test-
unseen improves to 76.0% / 69.5%. It shows that
our model can predict unseen relation with better
accuracy.

Using adversarial adapter (line 6) can further
improve the performance on the Test-unseen in
both micro and macro average scores.

Using Reconstruction Loss Adding reconstruc-
tion loss to basic adapter can also improve the per-
formance (line 5 v.s. line 4) slightly. The sim-
ilar improvement is obtained for the adversarial



6135

# Model Micro / Macro Average Accuracy on SQB (%)Test-seen Test-unseen All
1 HR-BiLSTM 93.5±0.6 / 84.7±1.4 33.0±5.7 / 49.3±1.7 63.3±3.6 / 71.2±1.3
2 + no fine-tune 93.4±0.7 / 83.8±0.7 57.8±9.8 / 60.8±2.0 75.6±5.0 / 75.0±0.6
3 + no fine-tune + mapping 93.3±0.7 / 84.0±1.6 52.0±7.2 / 60.6±2.1 72.7±3.8 / 75.1±1.3
4 + Basic-Adapter 92.8±0.7 / 84.1±1.2 76.0±7.5† / 69.5±2.0† 84.5±3.5 / 78.5±1.3
5 + reconstruction 93.0±0.5 / 84.4±0.8 76.1±7.0† / 70.7±1.8† 84.6±3.3 / 79.2±0.8
6 + Adversarial-Adapter 92.6±0.9 / 86.4±1.4 77.1±7.1† / 73.2±2.1† 84.9±3.2 / 81.4±1.4
7 + reconstruction [Final] 92.4±0.8 / 86.1±0.7 77.3±7.6† / 73.0±1.7† 84.9±3.5 / 81.1±0.8

Table 2: The micro average accuracy and macro average accuracy of relation detection on the SQB dataset. “†”
indicates statistically significant difference (p < 0.01) from the HR-BiLSTM.

adapter in micro average accuracy (line 7 v.s. line
6).

Finally, using all the techniques together (line
7) gets the score of 77.3% / 73.0% on Test-unseen,
and 84.9% / 81.1% on the union of Test-seen and
Test-unseen in micro/macro average accuracy, re-
spectively. We mainly use this model as our final
model for further comparison and analysis.

We notice that the results of our model on Test-
seen are slightly lower than that of HR-BiLSTM.
It is because we use the mapped representations
for the seen relations instead of the directly fine-
tuned representations. This dropping is negligible
compared with the improvement in the unseen re-
lations.

Integration to the KBQA To confirm the in-
fluence of unseen relation detection for the entire
KBQA, we integrate our relation detection model
into a prototype KBQA framework. During the
entity linking step, we use FocusPrune (Dai et al.,
2016) to get the mention of questions. Then, the
candidate mentions are linked to the entities in the
knowledge base. Because the FreeBase API was
deprecated 2, we restrict the entity linking to an
exact match for simplicity. The candidate relations
are the set of relations linked with candidate sub-
jects. We evaluate the KBQA results using the mi-
cro average accuracy introduced in Bordes et al.
(2015), which considers the prediction as correct
if both the subject and relation are correct.

As shown in Table 3, the proposed adapter
method can improve KBQA from 48.5% to 63.7%.
Comparing with the result of relation detection,
we find that the boost of relation detection could
indeed lead to the improvement of a KBQA sys-
tem.

2https://developers.google.com/
freebase/

Model Accuracy (%)
HR-BiLSTM 48.5±3.3

+ no fine-tune 56.4±3.4
Final 63.7±3.2

Table 3: The micro average accuracy of the whole
KBQA system with different relation detection models.

Model Seen Rate ↓ (%)
HR-BiLSTM 47.2±2.0

+ no fine-tune 34.8±2.3
Final 21.2±1.7

Table 4: Seen relation prediction rate in the Test-
unseen set. We calculate the macro average of this rate.

5.3 Analysis

Seen Relation Bias We use macro-average to
calculate the percentage of instances whose rela-
tions are wrongly predicted to be a seen relation on
Test-unseen. We call this indicator the seen rate,
the lower the better. Because the seen relations
are better learned after fine-tuning, while the rep-
resentations for unseen relations are not updated
well. So the relation detection model may have a
strong trend to select those seen relations as the an-
swer. The result in Table 4 shows that our adapter
makes the trend of choosing seen relation weaker,
which helps to promote a fair choice between seen
and unseen relations.

Influence of Number of Relations for Training
We discuss the influence of the number of relations
in the training set for our adapter. Our adapter
are trained mainly by the seen relations, because
we can get pseudo target representation for these
relations. In this experiment, we random sample
60,000 samples from the training set to perform
the training, and plot the accuracy against the dif-
ferent number of relations for training. We report
the macro average accuracy on Test-unseen.

https://developers.google.com/freebase/
https://developers.google.com/freebase/


6136

Figure 4: Macro average accuracy for different relation
size in the training set.

(a) JointNRE (b) HR-BiLSTM (c) Final

(d) JointNRE* (e) HR-BiLSTM* (f) Final*

Figure 5: Relation Representation Visualization of dif-
ferent models. The yellow (light) point represent the
seen relation, and the blue (dark) point represent the
unseen relation.

As shown in Figure 4, with different number
of relations, our model still perform better than
HR-BiLSTM. Note that, our adapter can beat HR-
BiLSTM with even a smaller number of seen rela-
tions. When there are more relations for training,
the performance will be improved as expected.

Relation Representation Analysis We visual-
ize the relation representation in JointNRE, HR-
BiLSTM and the output representation of our final
adapter by principal component analysis (PCA)
with the help of TensorBoard. We use the yellow
(light) point represents the seen relation, and the
blue (dark) point represents the unseen relation.

As shown in Figure 5a), the JointNRE repre-
sentation is pre-trained by the interaction between
knowledge graph and text. Because without know-
ing the relation detection tasks, seen and unseen
relations are randomly distributed. 3

3We also notice that there is a big cluster of relations on
the left hand side. This is presumably the set of less updated

Model Accuracy
Final 77.3±7.6 / 73.0±1.7
Final* 77.5±6.0 / 72.4±1.8

Table 5: Results on Test-unseen with and without the
adapter in training JointNRE.

After training with HR-BiLSTM (Figure 5b),
the seen and unseen relations are easily separated,
because the training objective is to discriminate
the seen relations from the other relations for the
corresponding question. Although the embed-
dings of unseen relations are also updated due to
negative sampling, they are never updated towards
their correct position in the embedding space. As
a result, the relation detection accuracy for the un-
seen relations is poor.

The training of our final model uses the adapter
to fit the training data, instead of directly updating
the embeddings. Despite the comparable perfor-
mance on seen relations, the distribution of seen
and unseen relations (Figure 5c) is much similar
to the original JointNRE, which is the core reason
for its ability to obtain better results on unseen re-
lations.

Adapting JointNRE Interestingly, we notice
that JointNRE is to train the embedding of rela-
tions with a corpus of text that may not cover all
the relations, which is also a process that needs
the adapter. As a simple solution, we use a
similar adapter to adapt the representation from
TransE 4 (Lin et al., 2015) to the training of Joint-
NRE. With the resulting relation embedding, de-
noted as JointNRE*, we train the baseline and
final relation detection models, denoted as HR-
BiLSTM* and Final*, respectively.

We visualize the relation representation in these
models again. Clearly, the distribution of seen
and unseen relations in JointNRE* (Figure 5d)
looks more reasonable than before. This distribu-
tion is interrupted by fine-tuning process of HR-
BiLSTM* (Figure 5e), while is retained by our
adapter model (Figure 5f).

Furthermore, as shown in Table 5, using Joint-
NRE* can further improve the unseen relation de-
tection performance (77.5% v.s. 77.3%). This pro-
vides further evidence of the importance of repre-

relations in the training of JointNRE, due to lack of corre-
spondence with the text data. This cluster does not affect our
main observation with adapter training.

4https://github.com/thunlp/Fast-TransX

https://github.com/thunlp/Fast-TransX


6137

Question 1 who produced recording Twenty One
Candidate
Relations

music.recording.producer
music.recording.artist

HR-BiLSTM music.recording.artist
Final music.recording.producer
Question 2 what is Tetsuo Ichikawa’s profession
Candidate
Relations

people.person.gender
people.person.profession

HR-BiLSTM people.person.profession
Final people.person.profession
Question 3 which village is in Arenac county ?
Candidate
Relations

location.us county.hud county place
location.location.contains

HR-BiLSTM location.us county.hud county place
Final location.us county.hud county place

Table 6: Case studies for relation detection using dif-
ferent models. For each question, the gold relation is
marked with bold font; the gold target entity of the
question is marked with italic font. The models and
notations are the same as in Table 2.

sentations for unseen relations.

Case Study In the first case of Table 6,
Twenty One is the subject of question. “mu-
sic.recording.producer” is the gold relation, but it
is an unseen relation. The baseline model pre-
dicts “music.recording.artist” because this relation
is seen and perhaps relevant in the training set. A
dig into the set of relations shown that there is a
seen relation, “music.recording.engineer”, which
happens to be the closest relation in the mapped
representation to the gold relation. It is possible
that the knowledge graph embedding is able to
capture the relatedness between the two relations.

In the second case, although the gold relation
“people.person.profession” is unseen, both base-
line and our model predict the correct answer be-
cause of strong lexical evidences: “profession”.

In the last case, both the gold relation
and predict error relation are unseen relation.
“Hud county place” refers to the name of a town
in a county, but “location.location.contains” has a
broader meaning. When asked about “village”,
“location.location.contains” is more appropriate.
This case shows that our model still can not pro-
cess the minor semantic difference between word.
We will leave it for future work.

6 Related Work

Relation Detection in KBQA Yu et al. (2017)
first noticed the zero-shot problem in KBQA re-
lation detection. They split relation into word se-

quences and use it as a part of the relation repre-
sentation. In this paper, we push this line further
and present the first in-depth discussion about this
zero-shot problem. We propose the first relation-
level solution and present a re-organized dataset
for evaluation as well.

Embedding Mapping Our main idea of embed-
ding mapping is inspired by previous work about
learning the mapping of bilingual word embed-
ding. Mikolov et al. (2013) observed the lin-
ear relation of bilingual word embedding, and
used a small starting dictionary to learn this map-
ping. Zhang et al. (2017a) use Generative Ad-
versarial Nets (Goodfellow et al., 2014) to learn
the mapping of bilingual word embedding in an
unsupervised manner. Different from this work
which maps words in different languages, we per-
form mappings between representations generated
from heterogeneous data, i.e., knowledge base and
question-triple pairs.

Zero-Shot Learning Zero-shot learning has
been studied in the area of natural language pro-
cess. Hamaguchi et al. (2017) use a neighbor-
hood knowledge graph as a bridge between out
of knowledge base entities to train the knowledge
graph. Levy et al. (2017) connect nature language
question with relation query to tackle zero shot re-
lation extraction problem. Elsahar et al. (2018) ex-
tend the copy actions (Luong et al., 2015) to solve
the rare words problem in text generation. Some
attempts have been made to build machine transla-
tion systems for language pairs without direct par-
allel data, where they relying on one or more other
languages as the pivot (Firat et al., 2016; Ha et al.,
2016; Chen et al., 2017). In this paper, we use
knowledge graph embedding as a bridge between
seen and unseen relations, which shares the same
spirit with previous work. However, less study has
been done in relation detection.

7 Conclusion

In this paper, we discuss unseen relation detec-
tion in KBQA, where the main problem lies in
the learning of representations. We re-organize
the SimpleQuestion dataset as SimpleQuestion-
Balance to reveal and evaluate the problem, and
propose an adapter which significantly improves
the results.

We emphasize that for any other tasks which
contain a large number of unseen samples, train-



6138

ing, fine-tuning the model according to the perfor-
mance on the seen samples alone is not fair. Sim-
ilar problems may exist in other NLP tasks, which
will be interesting to investigate in the future.

Acknowledgement

We would like to thank the anonymous reviewers
for their insightful comments. Shujian Huang is
the corresponding author. This work is supported
by the National Science Foundation of China (No.
61772261), the Jiangsu Provincial Research Foun-
dation for Basic Research (No. BK20170074).
Part of this research is supported by the Huawei
Innovation Research Program (HO2018085291).

References
Martin Arjovsky, Soumith Chintala, and Léon Bottou.

2017. Wasserstein gan. In NIPS.

Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and
Christian Jauvin. 2003. A neural probabilistic lan-
guage model. JMLR.

Jonathan Berant, Andrew Chou, Roy Frostig, and Percy
Liang. 2013. Semantic parsing on freebase from
question-answer pairs. In EMNLP.

Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim
Sturge, and Jamie Taylor. 2008. Freebase: a col-
laboratively created graph database for structuring
human knowledge. In SIGMOD Conference.

Antoine Bordes, Sumit Chopra, and Jason Weston.
2014. Question answering with subgraph embed-
dings. In EMNLP.

Antoine Bordes, Nicolas Usunier, Sumit Chopra, and
Jason Weston. 2015. Large-scale simple question
answering with memory networks. CoRR.

Antoine Bordes, Nicolas Usunier, Alberto Garcia-
Duran, Jason Weston, and Oksana Yakhnenko.
2013. Translating embeddings for modeling multi-
relational data. In NIPS.

Andrew Carlson, Justin Betteridge, Bryan Kisiel,
Burr Settles, Estevam R Hruschka Jr, and Tom M
Mitchell. 2010. Toward an architecture for never-
ending language learning. In AAAI.

Yun Chen, Yang Liu, Yong Cheng, and Victor OK
Li. 2017. A teacher-student framework for zero-
resource neural machine translation. In ACL.

Alexis Conneau, Guillaume Lample, Marc’Aurelio
Ranzato, Ludovic Denoyer, and Hervé Jégou. 2018.
Word translation without parallel data. In ICLR.

Zihang Dai, Lei Li, and Wei Xu. 2016. Cfo: Condi-
tional focused neural question answering with large-
scale knowledge bases. In ACL.

Hady Elsahar, Christophe Gravier, and Frederique
Laforest. 2018. Zero-shot question generation from
knowledge graphs for unseen predicates and entity
types. In NAACL.

Orhan Firat, Baskaran Sankaran, Yaser Al-Onaizan,
Fatos T Yarman Vural, and Kyunghyun Cho. 2016.
Zero-resource translation with multi-lingual neural
machine translation. In EMNLP.

Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza,
Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron
Courville, and Yoshua Bengio. 2014. Generative ad-
versarial nets. In NIPS.

Thanh-Le Ha, Jan Niehues, and Alexander Waibel.
2016. Toward multilingual neural machine transla-
tion with universal encoder and decoder. CoRR.

Takuo Hamaguchi, Hidekazu Oiwa, Masashi Shimbo,
and Yuji Matsumoto. 2017. Knowledge transfer for
out-of-knowledge-base entities: A graph neural net-
work approach. In IJCAI.

Xu Han, Zhiyuan Liu, and Maosong Sun. 2018. Neural
knowledge acquisition via mutual attention between
knowledge graph and text. In AAAI.

Yanchao Hao, Hao Liu, Shizhu He, Kang Liu, and Jun
Zhao. 2018. Pattern-revising enhanced simple ques-
tion answering over knowledge bases. In COLING.

Jens Lehmann, Robert Isele, Max Jakob, Anja
Jentzsch, Dimitris Kontokostas, Pablo N Mendes,
Sebastian Hellmann, Mohamed Morsey, Patrick
Van Kleef, Sören Auer, et al. 2015. Dbpedia–a
large-scale, multilingual knowledge base extracted
from wikipedia. Semantic Web.

Omer Levy, Minjoon Seo, Eunsol Choi, and Luke
Zettlemoyer. 2017. Zero-shot relation extraction via
reading comprehension. In CoNLL.

Yankai Lin, Zhiyuan Liu, Maosong Sun, Yang Liu, and
Xuan Zhu. 2015. Learning entity and relation em-
beddings for knowledge graph completion. In AAAI.

Minh-Thang Luong, Ilya Sutskever, Quoc V Le, Oriol
Vinyals, and Wojciech Zaremba. 2015. Addressing
the rare word problem in neural machine translation.
In ACL.

Christopher D. Manning, Prabhakar Raghavan, and
Hinrich Schütze. 2008. Introduction to Information
Retrieval. Cambridge University Press, New York,
NY, USA.

Tomas Mikolov, Quoc V Le, and Ilya Sutskever. 2013.
Exploiting similarities among languages for ma-
chine translation. CoRR.

Mark Palatucci, Dean Pomerleau, Geoffrey E Hinton,
and Tom M Mitchell. 2009. Zero-shot learning with
semantic output codes. In NIPS.



6139

Michael Petrochuk and Luke Zettlemoyer. 2018. Sim-
plequestions nearly solved: A new upperbound and
baseline approach. In EMNLP.

Fabrizio Sebastiani. 2002. Machine learning in auto-
mated text categorization. ACM Comput. Surv.

Tijmen Tieleman and Geoffrey Hinton. 2012. Lecture
6.5-rmsprop: Divide the gradient by a running av-
erage of its recent magnitude. COURSERA: Neural
networks for machine learning.

Grigorios Tsoumakas, Ioannis Katakis, and Ioannis
Vlahavas. 2010. Mining multi-label data. In Data
Mining and Knowledge Discovery Handbook, 2nd
ed. Springer.

Zhen Wang, Jianwen Zhang, Jianlin Feng, and Zheng
Chen. 2014. Knowledge graph embedding by trans-
lating on hyperplanes. In AAAI.

Xuchen Yao and Benjamin Van Durme. 2014. Infor-
mation extraction over structured data: Question an-
swering with freebase. In ACL.

Wenpeng Yin, Mo Yu, Bing Xiang, Bowen Zhou, and
Hinrich Schütze. 2016. Simple question answering
by attentive convolutional neural network. In COL-
ING.

Mo Yu, Wenpeng Yin, Kazi Saidul Hasan, Cicero dos
Santos, Bing Xiang, and Bowen Zhou. 2017. Im-
proved neural relation detection for knowledge base
question answering. In ACL.

Meng Zhang, Yang Liu, Huanbo Luan, and Maosong
Sun. 2017a. Adversarial training for unsupervised
bilingual lexicon induction. In ACL.

Meng Zhang, Yang Liu, Huanbo Luan, and Maosong
Sun. 2017b. Earth mover’s distance minimization
for unsupervised bilingual lexicon induction. In
EMNLP.


