



















































JEDI: Joint Entity and Relation Detection using Type Inference


Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics—System Demonstrations, pages 61–66,
Berlin, Germany, August 7-12, 2016. c©2016 Association for Computational Linguistics

JEDI: Joint Entity and Relation Detection using Type Inference

Johannes Kirschnick1, Holmer Hemsen1, Volker Markl1,2
1DFKI Project Office Berlin, Alt-Moabit 91c, Berlin

firstname.lastname@dfki.de
2Technische Univeristät Berlin

Database Systems and Information Management Group
Einsteinufer 17, 10587 Berlin, Germany

firstname.lastname@tu-berlin.de

Abstract

FREEBASE contains entities and relation
information but is highly incomplete. Rel-
evant information is ubiquitous in web
text, but extraction deems challenging. We
present JEDI, an automated system to
jointly extract typed named entities and
FREEBASE relations using dependency
pattern from text. An innovative method
for constraint solving on entity types of
multiple relations is used to disambiguate
pattern. The high precision in the evalua-
tion supports our claim that we can detect
entities and relations together, alleviating
the need to train a custom classifier for an
entity type1.

1 Introduction

Finding, tagging and extracting relations in web
text is one of the more challenging tasks in In-
formation Extraction (IE). It consists of correctly
labeling entities as instances of a particular type
(such as Person, Organization or Location) and de-
tecting relations between them, such as worksIn,
bornIn or even more fine grained ones such as re-
ceiveDegree. These relations are stored for fur-
ther analysis in knowledge bases, but often exist-
ing ones are highly incomplete. Min et al. (2013)
report that in the collaborative-edited FREEBASE2

knowledge base 93.8% of the person entities are
missing a place of birth entry. To close the cap au-
tomated methods are needed that can detect these
relations, by analyzing the abundance of web text.

A typical process to detect relations uses the
linking words (pattern) between two entities to la-
bel a relation, but this poses the challenge of deal-
ing with ambiguous pattern.

1Demonstrator is available at jedi.textmining.tu-berlin.de
2Freebase is available at www.freebase.com

Dependency 
Parse

Detect Relations
Create Candidate 

Multigraph

Pattern Corpus

Input Text Entities and Relations

JE
D

I S
ys

te
m

Figure 1: JEDI System Overview. Text is anno-
tated with dependency information. Candidate en-
tities connecting shortest path pattern are scored
against a corpus. Constraint solving on the rela-
tion types resolves ambiguities and determines the
final relations.

Consider the following sentences that both con-
tain the pattern receive indicating completely dif-
ferent relations: “Bill received his B.A. in Bibli-
cal Studies from Wheaton College.”, and “Leo re-
ceived an Oscar for Revenant.”.

The first sentence contains the binary relation
receiveDegree, linking a person to a degree, but
in the second, the same pattern indicates the per-
sonAward relation. To correctly disambiguate, we
need to incorporate context. This paper proposes
the novel method of using the entity types of mul-
tiple binary relations to solve the disambiguation.

Motivation Typically labeling relations and en-
tities is done in sequence, leading to a pipeline
architecture which first detects entities and subse-
quently tries to link them to extract relations. As
detection errors can easily propagate, there is po-
tential in executing these steps jointly. It is driven
by the motivation that instead of focusing on indi-
vidual binary assignments, multiple entities found
in the text can be used to constraint and restrict
each other’s entity and relation types.

Figure 1 shows an overview of the entire solu-
tion. Entity mentions and potential relations indi-

61



cated by a pattern form a multi graph. Selecting
a particular type for an entity prunes the number
of potential relations that this entity can partici-
pate in. Furthermore, having established a relation
between a pair of entities further restricts the po-
tential relations that can hold between any other
entity and one of the pair’s members due to in-
ferred type restrictions. Thus all candidate entities
in a sentence are considered together to support or
restrict any contained relations.

Contributions This paper presents and evalu-
ates JEDI a system to translate the relation detec-
tion problem into a constraint satisfaction prob-
lem. The graph of entities and potential relations
forms a resolution graph, where each entity is con-
strained on the potential types it can hold. Solv-
ing this problem jointly resolves entity and rela-
tion types without training an entity classifier, al-
lowing to detect the large number of relation and
types defined in FREEBASE.

The evaluation shows high precision across a
variety of texts and relations. We furthermore re-
lease the implementation as open source and pro-
vide a web demonstrator to showcase the system.

2 Related Work

Most prominent for relation extraction is the idea
that entities that co-occur with a similar context
have similar meanings, driven by the distribu-
tional hypothesis (Harris, 1954). The shortest
path kernel is a good estimator for approximat-
ing the distribution and has been used by Bunescu
and Mooney (2005). Culotta and Sorensen (2004)
showed that it is possible to train a relation clas-
sifier on the extracted pattern to predict a small
number of relations.

Kate and Mooney (2010) proposed a card style
resolution algorithm, which infers recursively the
most probable relation assignment for a given en-
tity pair, but still requires an entity classifier and
only works for a small number of relations.

Mintz et al. (2009) proposed to use clustering
to group together entity co-occurrences based on
their shortest path, to extract relation types. This
eliminates the need for a classifier for relation de-
tection, but requires one for entity extraction. Pat-
tern can only be assigned to one relation and thus
capture only the most dominating meaning. The
problem of relation extraction can also be solved
using matrix decomposition, as shown by Riedel
et al. (2013). Their work targets FREEBASE rela-

tions, but demands a complex training step which
decomposes the co-occurrence matrix and is de-
pendent on the text domain as well.

The SOFIE system (Suchanek et al., 2009) uses
logical reasoning to find instances of a relation
in text. It does not require any pre-training as it
learns the extraction rules alongside the relation
detection, but is limited in the amount of data it
can process, because of the costly resolution step.
Similar to our approach Singh et al. (2013) pro-
posed to model the entity tagging and relation ex-
traction problem jointly, using belief propagation
to find relation instances, but targeting a much
smaller number of relations. The idea to incorpo-
rate types into the relation extraction process was
explored by Koch et al. (2014) improving the re-
lation detection performance.

Contrary to existing systems JEDI does not need
a pre-trained entity classifier. We leverage a very
large corpus of shortest path patterns as reference
and use constraint propagation to solve ambigui-
ties. Our system also maps into the large number
of predefined FREEBASE relations, alleviating the
need to manually specify any relations. The sys-
tem can be easily incorporated into a more com-
plex IE pipeline that uses the results for example
for entity linking.

3 Pattern Corpus

To detect meaningful patterns we use FREEPAL
(Kirschnick et al., 2014). A dataset of 10 mil-
lion lexico-syntactic pattern-relation assignments
built using distant supervision (Mintz et al., 2009).
Each pattern was generated from a shortest depen-
dency path between two known FREEBASE enti-
ties in a sentence that participate in a known rela-
tion. The corpus uses CLUEWEB09 as text basis
and the FACC1 entity annotations (Gabrilovich et
al., 2013) to generate a distribution of relations
over pattern. An entropy score indicates the degree
of ambiguity, which we use for scoring the relation
assignments. Overall more than 75% of the con-
tained pattern were observed with more than one
relation, requiring a disambiguation method.

4 Jointly Detecting Entities and
Relations

The process of detecting relations is described in
Figure 2 and consists of the following steps, de-
scribed in the following:

• Pre-process input text

62



1. Input Text

2. Candidate 
Entities

3. Shortest Path Between Entities 4. Pattern-relation assignment Database
Entity1 (X)
Bill Gothard
Bill Gothard
B.A.

Entity2 (Y)
B.A.
Wheaton College
Wheaton College

Shortest Path
[X] receive [Y]
[X] receive from [Y]
receive [X] from [Y]

Dependency Path
[X] receive [Y] 

[X] receive from [Y]

receive [X[ from [Y]

 

Typed Relation
personDegree
personNomiantedForAward
personReceivedAward
personEducationInstitution
personEmployeeHistoryCompany
awardPresentingOrganization
awardPresentedBy
degreeFromEducationInstitution
 

B.A. {Degree, Award}
Bill Gothard {Person, Award}
Wheaton College {Educational Institution, Organization}

     BA = Degree    Wheaton College = Educational Institute
  BA = Award   Wheaton College = Organization

     Bill Gothard = Person   B.A. = Degree
  Bill Gothard = Person   B.A. = Award 

     Bill Gothard = Person   Wheaton College = Educational Institution
  Bill Gothard = Person   Wheaton College = Organization

Type Domain of Entities

Constraints

Entity1 (X)
Bill Gothard
Bill Gothard
B.A.

Entity2 (Y)
B.A.
Wheaton College
Wheaton College

Relation
personDegree 
personEducationInstitution
degreeFromEducationInstitution

7. Solution to constraint problem

Bill 
Gothard

B.A.

Wheaton 
College[X] receive from [Y]

[X] receive [Y]

5. Entity Multigraph

receive [X] from [Y]

Figure 2: Solution overview: Candidate Entities (2) are selected from the source text (1). Shortest path
in the dependency tree is extracted (3), pruned against pattern-relation assignment database (4), type
information is translated into a multi graph (5) which defines the constraint satisfaction problem (6). The
solution yields an assignment of entity types and relations (7). (Types are omitted for readability)

• Selection of candidate entities
• Extract shortest dependency path (pattern)

between all pairwise candidate entities
• Match the pattern using the FREEPAL corpus

to determine candidate relations
• Translate the relation detection into a con-

straint satisfaction problem which determines
the potential types of all entities and thus the
connecting relations

4.1 Pre-Processing

The target text is annotated with part-of-speech
tags and dependency information using the Stan-
ford CoreNLP Toolkit (Manning et al., 2014). Co-
reference resolution is applied to further link en-
tity mentions across sentence boundaries provid-
ing more link targets between entities.

4.2 Selecting Candidate Entities

Instead of trying to find any of the 10 million pat-
tern from the pattern corpus in a given text, where
every match would provide a candidate subject

and object pair for a relation, we reverse the prob-
lem and produce a set of candidate entities and try
to match the connecting pattern with the corpus.

JEDI works with any candidate entities, pro-
duced for example by an existing entity tagger or
just based on simple heuristics. One such simple
heuristic is to use nouns, with the extension to join
together adjacent nouns to effectively form noun
phrases. Nouns are grouped, if they are directly
adjacent and connected through a dependency link
of the type poss or nsubj, while also allowing the
connecting word “of”. This captures entities of
the form “University of Illinois” and “Wheaton
College”, but fails to separate appositions such as
“Bishop Oldham” or ”Professor Smith”, but this
can be later rectified. This heuristic can be easily
changed as the remaining processing does not de-
pend on the text form or type of the entities. Using
nouns also helps in finding entities generally not
covered by specific NER systems, such as ”bibli-
cal studies” as a field of study, without specifically
training a tagger for this target type.

63



4.3 Extracting the Shortest Path

Finding the shortest path between two entities
equals finding a path in the dependency graph be-
tween the head words of each entity. We use a
simplified instance of Collins Head finding rule
(Collins, 2003) to determine the head in multi-
word entities. The pattern is derived by picking
up all tokens in their lemmatized form on the path,
substituting the start with X and the end with the
label Y. To make the pattern more readable, all to-
kens are sorted based on their appearance in the
source text.

This produces pattern of the form [X] receive
[Y] [1-dobj-2,1-nsubj-0]. The pattern is further
enriched with the individual dependency annota-
tions to differentiate similar textual pattern3.

Conjunctions We apply a simple normalization
to conjunctions inspired by CLAUSIE (Corro and
Gemulla, 2013). Removing the last token in pat-
terns containing a conjunction dependency.

Coreference Resolution Coreference informa-
tion expands mentions across sentence bound-
aries. Mentions that are connected through a chain
are treated as if they are the same entity, if the
source of the chain is marked as a candidate entity.
Thus we substitute the coreference target with the
source in the extraction process.

4.4 Pattern-Relation Assignments

The shortest path generation process generates a
large number of pattern. To reduce the search
space, all extracted pattern are matched against the
FREEPAL corpus. This produces for each match
a list of potential relations that this pattern has
been observed with. Only pattern with an entropy
smaller than 3.74 and that have been observed at
least five times are considered. This reduces the
noise by filtering out very unspecific pattern such
as [X] be [Y], but at the same time still allows for
a lot of ambiguous pattern.

Each pattern is associated with a list of FREE-
BASE relations, for which the argument types are
retrieved. This is used to restrict the X and Y en-
tity types of the pattern respectively. We use the
FREEBASE type normalization presented in FIGER
(Ling and Weld, 2012) to reduce the number of en-
tity types down to 112.

3Dependency information for all pattern is omitted in the
paper for readability, but used during the resolution process.

4This entropy cutoff was derived empirically.

To address the problem of arbitrary granularity,
we broaden the accepted argument types using a
simple type hierarchy. For example, the diedIn
relation, which indicates that a person died in a
particular location, restricts the subject argument
to be of type deceased person. While this is very
specific it prevents linking to this entity in other
relations, which only accept the more generic per-
son type. The type hierarchy is generated by re-
trieving the type hints category for each type, us-
ing the FREEBASE API. While this does not pro-
duce a complete type hierarchy, it adds the most
commonly used sub types for a given type.

4.5 Constraint Solving using Type Inference

The extracted pattern for each pair of entities form
a multi-graph, where edges are assigned a confi-
dence score based on the FREEPAL entropy. The
resolution process tries to eagerly generate a type
assignment for each entity, so that at least one edge
between connected vertices, a particular relation,
holds according to the type requirements. The
choco library (Prud’homme et al., 2015) is used
for constraint solving. Each edge is transformed
into a constraint, using logical conjunctions be-
tween all connected vertex pairs and disjunction
for each edge between two vertices and their types.
This emits for each relation a constraint with all
possible type and subtype combinations.

Scoring Constraint solving produces more than
one potential solution. We use a scoring mecha-
nism to rank the different solutions, taking into ac-
count the number of matched entities, the entropy
score taken from the FREEPAL dataset, as well as
the type hierarchy. This ensures that if possible,
the most specific type assignment for a large num-
ber of entities is favored in the resolution process.

Backtracking If there is no assignment possi-
ble - there is a conflict in the graph. Conflicts
can arise when detecting relations that are not part
of the corpus for a given pattern or wrong pat-
tern as a result of erroneously linking entities in
a co-reference chain. Backtracking is used to re-
peatedly remove vertices and all associated edges
from the graph until either a solution is found or
all nodes are removed in which case there is no
solution. To find the highest scoring assignment
backtracking is used to evaluate multiple different
graphs, even when a solution is found.

64



Relation P R F
Education Degree 0 0 0
Place of Birth 0.76 0.60 0.68
Place of Death 0.89 0.27 0.41
Student Graduate 0.78 0.41 0.53

Table 1: Baseline performance. Precision, Re-
call and F-measure without Coreference Resolu-
tion and type inference using the Noun strategy.

Stopping The search is terminated early when
an adjustable time limit is hit, to ensure that the
most probable solution is found early. This trade-
off guarantees that the algorithm finishes in fi-
nite time, at the expense of not always finding the
global optimal solution.

Result Once a solution is found, all vertices of
the graph are bound to a type. The qualifying re-
lation between any two connected vertices is se-
lected as the one which has the highest score as-
sociated with it. This produces triples of the form
<entity, entity, relation>.

5 Evaluation

The “Relation Extraction Corpus”5 is used for
evaluation – comparing precision, recall and F-
measure. The corpus contains text snippets for
four separate relations: person holding an educa-
tion degree educationDegree (1580 triples), place
of death (1955 triples), place of birth (8703
triples) and person graduated from education in-
stitute studentGraduate (32653 triples). Each ex-
cerpt is annotated by humans as to whether it sup-
ports a particular binary relation.

5.1 Results

Baseline Table 1 shows the baseline perfor-
mance of the noun strategy without constraint
solving, using the most likely relation for an iden-
tified pattern based on the FREEPAL entropy score.

The results show high precision for all relations
except for education degree. This supports the
use of the FREEPAL dataset for relation extrac-
tion, as it covers already a large variety of pattern
instances. No instances of the education degree
relation were found as almost all pattern for this
relation are dominated by the received award rela-
tion.

5https://code.google.com/p/relation-extraction-corpus/

Relation P R F
Education Degree 0.94 0.61 0.74
Place of Birth 0.77 0.60 0.67
Place of Death 0.88 0.35 0.50
Student Graduate 0.76 0.37 0.50

Table 2: Type inference performance without
Coreference Resolution using the Noun strategy.

Resolution Strategies and Comparison Results
Named Entities Nouns Akbik (2014)

Relation P R F P R F P R F
Education Degree 0.96 0.03 0.05 0.96 0.74 0.83 0.87 0.29 0.44
Place of Birth 0.77 0.52 0.62 0.83 0.58 0.68 0.82 0.19 0.31
Place of Death 0.92 0.48 0.63 0.92 0.48 0.63 0.82 0.13 0.22
Student Graduate 0.78 0.51 0.62 0.77 0.51 0.61 0.92 0.17 0.29

Table 3: Performance with type inference and
Coreference Resolution using Named Entities
and Nouns as entity markers, comparing to Ak-
bik (2014), reporting Precision, Recall and F-
measures.

Type Inference The effect of type inference can
be seen in Table 2. Instances of the degree rela-
tion are found with high precision, while the other
relations are still found, highlighting that the reso-
lution process is not introducing errors.

Table 3 shows the performance of the entity
candidate selection strategy (See section 4.2), in-
cluding Coreference Resolution. The Noun strat-
egy is compared with Named Entities obtained
with the Stanford NER classifier (Finkel et al.,
2005). For reference we present the results from
Akbik et al. (2014), where the authors used a man-
ual process to find a set of extraction pattern for a
given relation.

Using the simple NOUNS strategy for selecting
candidate entities performs on par or better to the
NER strategy. Coreferences further improve the
F-measure by up to .11 points. This supports our
claim that we can detect entities and relations to-
gether, alleviating the need to train a custom clas-
sifier for an entity type - nouns are sufficient. The
education degree relation (not part of the results)
is a good example for an entity type, where the
standard NER tagger almost always fails to iden-
tify the degree entity.

6 Conclusion

We present JEDI a system to extract typed named
entities and FREEBASE relations together. Short-
est dependency pattern are used to link entities,
and constraint solving on the relation argument

65



Figure 3: Demo system showing output of the re-
lation detection process with found entity types
and connecting FREEBASE relations.

types is used to disambiguate pattern with multi-
ple meanings.

The evaluation shows that the method increases
the precision and recall scores for ambiguous re-
lations significantly. As the resolution takes ad-
vantage of entities that are connected in chains, it
is further possible to detect n-ary relations using
only binary pattern. The method proves to work
well without any pre-training of NER classifiers
and validates that pattern learned using distant su-
pervision are effective. This makes it possible to
expand existing knowledge bases with information
found in web text.

A web demonstrator of the complete sys-
tem as shown in Figure 3 is available at
jedi.textmining.tu-berlin.de. The system is imple-
mented as an UIMA module such that it can be
easily incorporated into existing IE pipelines, the
source code is hosted at github.com/jkirsch/jedi.

Acknowledgments

We would like to thank the anonymous reviewers
for their helpful comments. Johannes Kirschnick
received funding from the German Federal Min-
istry of Economics and Energy (BMWi) un-
der grant agreement 01MD15007B (SD4M) and
Holmer Hemsen under 01MD15010A (SDW).

References
Alan Akbik, Thilo Michael, and Christoph Boden.

2014. Exploratory Relation Extraction in Large Text
Corpora. In COLING, pages 2087–2096.

Razvan C Bunescu and Raymond J Mooney. 2005. A
shortest path dependency kernel for relation extrac-
tion. In HLT/EMNLP, pages 724–731.

Michael Collins. 2003. Head-driven statistical mod-
els for natural language parsing. Computational lin-
guistics, 29(4):589–637.

Luciano Del Corro and Rainer Gemulla. 2013.
ClausIE : Clause-Based Open Information Extrac-
tion. In WWW, pages 355–365.

Aron Culotta and Jeffrey Sorensen. 2004. Dependency
tree kernels for relation extraction. ACL, pages 423–
429.

Jenny Rose Finkel, Trond Grenager, and Christopher
Manning. 2005. Incorporating non-local informa-
tion into information extraction systems by Gibbs
sampling. ACL, pages 363–370.

Evgeniy Gabrilovich, Michael Ringgaard, and Amar-
nag Subramanya. 2013. FACC1: Freebase anno-
tation of ClueWeb corpora, Version 1 (Release date
2013-06-26, Format version 1, Correction level 0).

ZS Harris. 1954. Distributional structure. Word, pages
775–794.

Rohit J. Kate and Raymond J. Mooney. 2010. Joint en-
tity and relation extraction using card-pyramid pars-
ing. CoNLL, pages 203–212.

Johannes Kirschnick, Alan Akbik, and Holmer Hem-
sen. 2014. Freepal: A Large Collection of Deep
Lexico-Syntactic Patterns for Relation Extraction.
In LREC, pages 2071–2075.

Mitchell Koch, John Gilmer, Stephen Soderland, and
Daniel S Weld. 2014. Type-Aware Distantly Super-
vised Relation Extraction with Linked Arguments.
In EMNLP, pages 1891–1901.

Xiao Ling and DS Weld. 2012. Fine-Grained Entity
Recognition. AAAI, pages 94–100.

Christopher D Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven J Bethard, and David Mc-
Closky. 2014. The Stanford CoreNLP Natural Lan-
guage Processing Toolkit. In ACL (System Demon-
strations), pages 55–60.

Bonan Min, Ralph Grishman, Li Wan, Chang Wang,
and David Gondek. 2013. Distant supervision for
relation extraction with an incomplete knowledge
base. In HLT-NAACL, pages 777–782.

Mike Mintz, Steven Bills, Rion Snow, and Dan Juraf-
sky. 2009. Distant supervision for relation extrac-
tion without labeled data. ACL, pages 1003–1011.

Charles Prud’homme, Jean-Guillaume Fages, and
Xavier Lorca, 2015. Choco Documentation. Avail-
able at http://www.choco-solver.org.

Sebastian Riedel, Limin Yao, Andrew McCallum, and
Benjamin M Marlin. 2013. Relation Extraction
with Matrix Factorization and Universal Schemas.
In HLT-NAACL, pages 74–84.

Sameer Singh, Sebastian Riedel, Brian Martin, Jiap-
ing Zheng, and Andrew McCallum. 2013. Joint
inference of entities, relations, and coreference. In
AKBC, pages 1–6.

Fabian M. Suchanek, Mauro Sozio, and Gerhard
Weikum. 2009. SOFIE: A Self-Organizing Frame-
work for Information Extraction. In WWW 2009.

66


