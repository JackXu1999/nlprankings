



















































Handling Noisy Labels for Robustly Learning from Self-Training Data for Low-Resource Sequence Labeling


Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Student Research Workshop, pages 29–34
Minneapolis, Minnesota, June 3 - 5, 2019. c©2017 Association for Computational Linguistics

29

Handling Noisy Labels for Robustly Learning from Self-Training Data for
Low-Resource Sequence Labeling

Debjit Paul∗§, Mittul Singh†§, Michael A. Hedderich‡, Dietrich Klakow‡
∗Research Training Group AIPHES, Institute for Computational Linguistics,

Heidelberg University, Germany
†Department of Signal Processing and Acoustics, Aalto University, Finland

‡Spoken Language Systems (LSV), Saarland Informatics Campus,
Saarland University, Germany

paul@cl.uni-heidelberg.de, mittul.singh@aalto.fi,

{mhedderich, dietrich.klakow}@lsv.uni-saarland.de

Abstract

In this paper, we address the problem of effec-
tively self-training neural networks in a low-
resource setting. Self-training is frequently
used to automatically increase the amount of
training data. However, in a low-resource sce-
nario, it is less effective due to unreliable anno-
tations created using self-labeling of unlabeled
data. We propose to combine self-training
with noise handling on the self-labeled data.
Directly estimating noise on the combined
clean training set and self-labeled data can lead
to corruption of the clean data and hence, per-
forms worse. Thus, we propose the Clean
and Noisy Label Neural Network which trains
on clean and noisy self-labeled data simul-
taneously by explicitly modelling clean and
noisy labels separately. In our experiments on
Chunking and NER, this approach performs
more robustly than the baselines. Complemen-
tary to this explicit approach, noise can also be
handled implicitly with the help of an auxil-
iary learning task. To such a complementary
approach, our method is more beneficial than
other baseline methods and together provides
the best performance overall.

1 Introduction

For many low-resource languages or domains,
only small amounts of labeled data exist. Raw or
unlabeled data, on the other hand, is usually avail-
able even in these scenarios. Automatic annota-
tion or distant supervision techniques are an option
to obtain labels for this raw data, but they often
require additional external resources like human-
generated lexica which might not be available in
a low-resource context. Self-training is a popu-
lar technique to automatically label additional text.
There, a classifier is trained on a small amount
of labeled data and then used to obtain labels for

§This work was started while the authors were at Saarland
University.

unlabeled instances. However, this can lead to
unreliable or noisy labels on the additional data
which impede the learning process (Pechenizkiy
et al., 2006; Nettleton et al., 2010). In this pa-
per, we focus on overcoming this slowdown of
self-training. Hence, we propose to apply noise-
reduction techniques during self-training to clean
the self-labeled data and learn effectively in a low-
resource scenario.

Inspired by the improvements shown by the
Noisy Label Neural Network (NLNN, Bekker and
Goldberger (2016)), we can directly apply NLNN
to the combined set of the existing clean data and
the noisy self-labeled data. However, such an ap-
plication can be detrimental to the learning pro-
cess (Section 6). Thus, we introduce the Clean and
Noisy Label Neural Network (CNLNN) that treats
the clean and noisy data separately while training
on them simultaneously (Section 3).

This approach leads to two advantages over
NLNN (Section 6 and 7) when evaluating on two
sequence-labeling tasks, Chunking and Named
Entity Recognition. Firstly, when adding noisy
data, CNLNN is robust showing consistent im-
provements over the regular neural network,
whereas NLNN can lead to degradation in per-
formance. Secondly, when combining with an
indirect-noise handling technique, i.e. with an
auxiliary target in a multi-task fashion, CNLNN
complements better than NLNN in the multi-task
setup and overall leads to the best performance.

2 Related Work

Self-training has been applied to various NLP
tasks, e.g. Steedman et al. (2003) and Sagae and
Tsujii (2007). While McClosky et al. (2006) are
able to leverage self-training for parsing, Charniak
(1997) and Clark et al. (2003) obtain only minimal
improvements at best on parsing and POS-tagging



30

respectively. In some cases, the results even dete-
riorate. Other successful approaches of automati-
cally labeling data include using a different classi-
fier trained on out-of-domain data (Petrov et al.,
2010) or leveraging external knowledge (Dem-
bowski et al., 2017).

A detailed review of learning in the presence
of noisy labels is given in (Frénay and Verleysen,
2014). Recently, several approaches have been
proposed for modeling the noise using a confu-
sion matrix in a neural network context. Many
works assume that all the data is noisy-labeled
(Bekker and Goldberger, 2016; Goldberger and
Ben-Reuven, 2017; Sukhbaatar et al., 2015). Hed-
derich and Klakow (2018) and Hendrycks et al.
(2018) propose a setting where a mix of clean
and unlabeled data is used. However, they require
external knowledge sources for labeling the data
or evaluate on synthetic noise. Alternatively, in-
stances with incorrect labels might be filtered out,
e.g. in the work by Guan et al. (2011) or Han et al.
(2018), but this involves the risk of also filtering
out difficult but correct instances. Another orthog-
onal approach is the use of noise-robust loss func-
tions (Zhang and Sabuncu, 2018).

3 Clean and Noisy Label Neural Network

The Noisy Label Neural Network (NLNN, Bekker
and Goldberger (2016)) assumes that all observed
labels in the training set pass through a noise
channel flipping some of them from a correct to
an incorrect label (see left part of Figure 1). In
our scenario, this means that both the human-
annotated and the additional automatically-labeled
(self-training) corpora are assumed to be noisy. In
our experiments (Section 6 and 7), treating both
corpora in this fashion degrades the overall per-
formance. To remedy this effect, we propose to
treat the human-annotated data as clean data and
the self-training data as noisy.

We assume a similar setup as Bekker and Gold-
berger (2016), training a multi-class neural net-
work soft-max classifier

p(y = i|x;w) = exp(u
T
i h)∑k

j=1 exp(u
T
j h)

where x is the feature vector, y is the label, w de-
notes the network weights, k is the number of pos-
sible labels, u are soft-max weights and h = h(x)
denotes the multi-layer neural network applied to
x. In contrast to Bekker and Goldberger (2016),
we assume that not all of the training data passes

Figure 1: A representation of NLNN (left) compared
to our proposed CNLNN model. The complementary
multi-task component (aux. task) is dashed.

through a noisy channel changing the correct la-
bels y to noisy ones (z ∈ N ). A part of the training
set remains clean (z ∈ C) such that |C|+ |N | n
where n is the total number of training examples.
The clean labels are a copy of the corresponding
correct labels. A schematic representation of this
model is shown on the right side of Figure 1. The
correct labels y and the noise distribution θ are
hidden for the noisy labels.

We define the probability of observing a label
z, which can either be noisy or clean and is, thus,
dependent on the label’s membership to C or N :

p(z j|x,w, θ)


∑k

i 1 p(z j|y i; θ)p(y i|x;w)
if z ∈ N

p(y j|x;w) if z ∈ C i.e. z y

Using this probability function and t to index
training instances, the log-likelihood of the model
parameters is defined as

L(w, θ) =
∑
zt∈C

log p(zt|xt, w)

+
∑
zt∈N

log(

k∑
i 1

(p(zt|yt i; θ) · p(yt i|xt;w))

As in Bekker and Goldberger (2016) the model
parameters are computed using Expectation Max-
imization. In the E-step, θ and w are fixed and an
estimate c of the true labels y is obtained for the
noisy labels z:

cti p(yt i|xt, zt;w, θ)
p(zt|yt i, θ)p(yt i|xt;w)∑
j p(zt|yt j; θ)p(yt j|xt, w)

for zt ∈ N

Note that the estimate c is calculated only for
the noisy labels whereas the clean labels remain
unchanged. Similarly, the noise distribution θ is
calculated only for the noisy labels. The initializa-
tion of θ and the θ’s update step in M-step remain
the same as in Bekker and Goldberger (2016), also



31

0 10K 40K 90K 190K
Self-trained Automatically-Labeled Data

90.5

91.0

91.5

92.0

92.5

93.0
F 1

-s
co

re

91
.1

90
.8

91
.3

91
.3

91
.3

91
.1

91
.1

91
.4 91

.5

91
.2

91
.1 9

1.
3 9

1.
5 9

1.
7

92
.0

91
.2

91
.5

91
.5

91
.8 91

.9

91
.2

91
.1 91

.2 91
.3

92
.1

91
.2

91
.9

91
.8

92
.1

92
.5

Chunking
NN
NLNN
CNLNN
MTL
MTL+NLNN
MTL+CNLNN

0 10K 40K 90K 190K
Self-trained Automatically-Labeled Data

44

50

55

60

64

F 1
-s

co
re

45
.9 47

.1

53
.0 5

4.
7

54
.9

45
.9

48
.1

53
.1 54

.2

54
.5

45
.9

49
.1

57
.0

57
.1

57
.4

51
.5

57
.3 5

8.
9

58
.8

58
.4

51
.5

58
.3

58
.5 5

9.
9

58
.1

51
.5

59
.1 60

.0 6
1.

5

62
.0

NER

Figure 2: Micro-averaged F1-scores (averaged over five runs) on English Penn Treebank’s Chunking and En-
glish CoNLL 2003’s NER tasks of models from Section 5 are plotted (with error bars) against the amount of
automatically-labeled data. 0 on the x-axis represents models trained with only the clean training set (10k tokens).

shown below.

θ(i, j) =

∑
t cti1{zt=j}∑

t cti
i, j ∈ {1, ..., k}, zt ∈ N

During the M-step, the neural network weights
w are estimated as well. The loss function, how-
ever, changes compared to the original approach
(Bekker and Goldberger, 2016) to (1) and thus,
changing the calculation of the gradient to (2):

S(w) =
∑
zt∈C

log p(zt|xt, w)+
∑
zt∈N

k∑
i 1

cti log p(yt i|xt;w)

(1)
∂S

∂ui

∑
zt∈C

(1{zt i} − p(zt|xt, w))h(xt)

+
∑
zt∈N

(cti − p(yt|xt, w))h(xt) (2)

Interestingly, the gradient calculation (2) is a
summation of two parts: one to learn from the
clean labels and another to learn from the noisy
labels. We refer to this model as the Clean and
Noisy Label Neural Network (CNLNN).

4 Training with Noisy Labels in a
Multi-Task Setup

NLNN and CNLNN form explicit ways of handling
noise as the noise distribution is calculated dur-
ing training. In contrast, we can apply a Deep
Multi-Task Learning (MTL) approach (Søgaard
and Goldberg, 2016), which, unlike NLNN and
CNLNN, does not estimate the noise directly and
thus, is an implicit noise-cleaning approach. The
MTL method leverages an auxiliary task that aug-
ments the data providing other reliable labels and
hence, ignoring noisy labels (Ruder, 2017). In our
experiments, we combine the implicit noise han-
dling of Deep MTL with the explicit noise han-

dling of NLNN and CNLNN to complement each
other and obtain a more powerful noise handling
model than the individual models. Schematic de-
piction of combining MTL and CNLNN is shown
in Figure 1. MTL and NLNN can also be combined
in a similar way.

5 Experimental Setup

We evaluate CNLNN and other methods on a
Chunking and a Named Entity Recognition (NER)
task with F1-score as the metric in each case. For
Chunking, we use the same data splits as (Søgaard
and Goldberg, 2016) based on the English Penn
Treebank dataset (Marcus et al., 1993). For NER,
the data splits of the English CoNLL 2003 task are
used (Sang and Buchholz, 2000). Note that in our
NER setup, we evaluate using BIO-2 labels, so F1-
scores reported below might not be comparable to
prior work.

To mimic a low resource setting, we limit each
training set to the first 10k tokens. The devel-
opment sets are randomly chosen sentences from
the original training set restricted to 1k tokens.
The test sets remain unchanged. For the rest of
the training data, the original labels are removed
and the words are automatically labeled using the
baseline model (NN described below). We add
variable amounts of this automatically-annotated
data for self-training in our experiments.

5.1 Models

We apply the following models to the above two
tasks: NN (the simple baseline) is an architec-
ture with bidirectional LSTMs (Hochreiter and
Schmidhuber, 1997). For Chunking, we use three
LSTM layers, for NER five. The NN model, only



32

trained on the clean data, is used for automatically
labeling the raw data (obtaining the noisy data).
NLNN combines the NN with the original noise
channel (Bekker and Goldberger, 2016), training
it both on clean and noisy instances. CNLNN
is our new approach of modeling noise, treating
clean and noisy labels separately (section 3).

In contrast to the explicit noise handling of
NLNN and CNLNN, we also apply MTL for im-
plicit noise handling. Here, we use NN as the base
architecture and POS-tagging as an auxiliary task.
We hypothesise that this low-level task helps the
model to generalise its representation and that the
POS-tags are helpful because e.g. many named
entities are proper nouns. The auxiliary task is
trained jointly with the first LSTM layer of NN
for Chunking and with the second LSTM layer for
NER. In our low-resource setting, we use the first
10k tokens of section 0 of Penn Treebank for the
auxiliary POS-tagging task for the MTL (Søgaard
and Goldberg, 2016). This data is disjunct from
the other datasets.

Additionally, we combine both the explicit and
implicit noise handling. In the low-resource set-
ting, in general, such a combination addresses the
data scarcity better than the individual models.
NLNN and CNLNN combinations with MTL are
labeled as MTL+NLNN and MTL+CNLNN re-
spectively.

5.2 Implementation Details

During training, we minimize the cross entropy
loss which sums over the entire sentence. The
networks are trained with Stochastic Gradient De-
scent (SGD). To determine the number of itera-
tions for both the NN model and the EM algo-
rithm we use the development data. All models
are trained with word embeddings of dimension-
ality 64 that are initialized with pre-trained Poly-
got embeddings (Al-Rfou et al., 2013). We add
Dropout (Srivastava et al., 2014) with p=0.1 in be-
tween the word embedding layer and the LSTM.

6 Results

In Figure 2, we present the F1 scores of the mod-
els introduced in the previous section. We per-
form experiments on Chunking and NER with
various amounts of added, automatically-labeled
data. In general, adding additional, noisy data
tends to improve the performance for all mod-

I-LOC I-PERI-MISCI-ORGOTHE
R

I-LOC

I-PER

I-MISC

I-ORG

OTHE
R

575 4 2 7 5

83 766 0 6 3

10 1 211 28 5

49 7 43 265 27

4 0 6 12 7153

1. Iteration

I-LOC I-PERI-MISCI-ORGOTHE
R

I-LOC

I-PER

I-MISC

I-ORG

OTHE
R

540 28 5 6 14

87 745 0 6 20

61 8 151 16 19

110 91 47 71 72

9 4 7 6 7149

3. Iteration

Predicted Label

Tr
ue

 L
ab

el

Figure 3: NLNN confusion matrices on Chunking’s
clean training set for 1. and 3. EM iteration. The colors
correspond to row-normalized values.

-2.5

-2

-1.5

-1

-0.5

 0

 0.5

i-a
dv

p
b-p

rt
i-a

djp
b-a

djp
b-s

ba
r

b-a
dv

p i-vp b-v
p

b-p
p

b-n
p

i-n
p

ΔP
re

cis
io

n

Chunking

MTL+CNLNN
MTL+NLNN

MTL
 0

 0.5

 1

 1.5

 2

 2.5

 3

i-mi
sc i-loc i-org i-pe

r

Classes

NER

Figure 4: MTL+CNLNN vs MTL+NLNN: Difference
in precision between the combined models and MTL
for NER and Chunking test sets with 190K noisy data.

els. This includes the plain NN, showing that this
model is somewhat robust to noise. Especially
for the Chunking task, the possibility for improve-
ment seems limited for NN as the performance
converges after adding 40k noisy instances. In the
Chunking 10k case, the negative effect of the noisy
instances results in a score lower than if no data is
added.

The original NLNN model performs similarly to
the NN model without a noise-handling compo-
nent. In some cases, the score is even lower. In
contrast, CNLNN is able to consistently improve
over these scores. This demonstrates the impor-
tance of our proposed CNLNN which treats clean
and noisy data separately.

MTL is able to improve somewhat over NN
even without adding automatically-annotated data
thanks to the auxiliary task. Additionally, MTL
performs even better when noisy data is added
showing its implicit noise handling capabilities.
On their own, both CNLNN and MTL are able to
eliminate some of the negative effects of the noisy
data and to leverage the additional data effectively.

Combining MTL with NLNN results in small
improvements at best and can decrease perfor-



33

mance, especially on Chunking. The best results
are achieved with our combined MTL+CNLNN
model as it outperforms all other models. Even
when adding 19 times the amount of self-labeled
data, the model is still able to cope with the noise
and improve the performance.

7 Analysis

NLNN vs. CNLNN: In NLNN, we observed that
clean training tokens were subverted to become
noisy in subsequent EM iterations mostly due to
the influence of noisy labels from self-labeled data
and this effect leads to NLNN’s worse perfor-
mance. Figure 3 presents one such case where
the corruption of the confusion matrix from 1.
iteration to 3. iteration is displayed. CNLNN
treats clean and noise data separately and there-
fore avoids the corruption of clean labels.
MTL+CNLNN vs. MTL+NLNN: We noted that
MTL+CNLNN consistently outperforms MTL and
MTL+NLNN, whereas the MTL+NLNN combi-
nation can degrade MTL’s performance. For
nearly all predicted labels the improvements in
precision over MTL are higher for MTL+CNLNN
when compared to MTL+NLNN (Figure 4). This
shows that CNLNN complements MTL better than
NLNN.

8 Concluding Remarks

In this paper, we apply self-training to neural net-
works for Chunking and NER in a low-resource
setup. Adding automatically-labeled data, the per-
formance of the classifier can wane or can even
decline. We propose to mitigate this effect by ap-
plying noisy label handling techniques.

However, we found that directly applying an
off-the-shelf noise-handling technique as NLNN
leads to corruption of the clean training set and
worse performance. Thus, we propose the Clean
and Noisy Label Neural Network to work sep-
arately on the automatically-labeled data. Our
model improves the performance faster for a lesser
amount of additional data. Moreover, combing
the training with auxiliary information can further
help handle noise in a complementary fashion.

Meanwhile, more complex neural network ar-
chitectures (Goldberger and Ben-Reuven, 2017;
Luo et al., 2017; Veit et al., 2017) are available for
handling noise and we look forward to working
with these to upgrade our approach in the future.

9 Acknowledgements

This work has been supported by the German Re-
search Foundation as part of the Research Training
Group Adaptive Preparation of Information from
Heterogeneous Sources (AIPHES) under grant
No. GRK 1994/1. We also thank the anonymous
reviewers whose comments helped improve this
paper.

References
Rami Al-Rfou, Bryan Perozzi, and Steven Skiena.

2013. Polyglot: Distributed word representations
for multilingual NLP. In Proceedings of the Seven-
teenth Conference on Computational Natural Lan-
guage Learning, CoNLL 2013, Sofia, Bulgaria, Au-
gust 8-9, 2013, pages 183–192.

Alan Joseph Bekker and Jacob Goldberger. 2016.
Training deep neural-networks based on unreliable
labels. In Proceedings of the 2016 IEEE Interna-
tional Conference on Acoustics, Speech and Signal
Processing, pages 2682–2686.

Eugene Charniak. 1997. Statistical parsing with a
context-free grammar and word statistics. In Pro-
ceedings of the Fourteenth National Conference
on Artificial Intelligence and Ninth Conference on
Innovative Applications of Artificial Intelligence,
AAAI’97/IAAI’97, pages 598–603.

Stephen Clark, James R. Curran, and Miles Osborne.
2003. Bootstrapping pos taggers using unlabelled
data. In Proceedings of the Seventh Conference on
Natural Language Learning at HLT-NAACL 2003 -
Volume 4, CONLL ’03, pages 49–55.

Julia Dembowski, Michael Wiegand, and Dietrich
Klakow. 2017. Language independent named en-
tity recognition using distant supervision. In Pro-
ceedings of Language and Technology Conference
(LTC).

Benoı̂t Frénay and Michel Verleysen. 2014. Classifica-
tion in the presence of label noise: A survey. IEEE
Transactions on Neural Networks and Learning Sys-
tems, 25(5):845–869.

Jacob Goldberger and Ehud Ben-Reuven. 2017. Train-
ing deep neural-networks using a noise adaptation
layer. In International Conference on Learning Rep-
resentations (ICLR).

Donghai Guan, Weiwei Yuan, Young-Koo Lee, and
Sungyoung Lee. 2011. Identifying mislabeled train-
ing data with the aid of unlabeled data. Applied In-
telligence, 35(3):345–358.

Bo Han, Quanming Yao, Xingrui Yu, Gang Niu,
Miao Xu, Weihua Hu, Ivor W. Tsang, and Masashi
Sugiyama. 2018. Co-teaching: Robust training of
deep neural networks with extremely noisy labels.

https://doi.org/10.1109/ICASSP.2016.7472164
https://doi.org/10.1109/ICASSP.2016.7472164
http://dl.acm.org/citation.cfm?id=1867406.1867499
http://dl.acm.org/citation.cfm?id=1867406.1867499
https://doi.org/10.1109/TNNLS.2013.2292894
https://doi.org/10.1109/TNNLS.2013.2292894
https://doi.org/10.1007/s10489-010-0225-4
https://doi.org/10.1007/s10489-010-0225-4
http://papers.nips.cc/paper/8072-co-teaching-robust-training-of-deep-neural-networks-with-extremely-noisy-labels
http://papers.nips.cc/paper/8072-co-teaching-robust-training-of-deep-neural-networks-with-extremely-noisy-labels


34

In Advances in Neural Information Processing Sys-
tems 31: Annual Conference on Neural Informa-
tion Processing Systems 2018, NeurIPS 2018, 3-8
December 2018, Montréal, Canada., pages 8536–
8546.

Michael A. Hedderich and Dietrich Klakow. 2018.
Training a neural network in a low-resource setting
on automatically annotated noisy data. In Proceed-
ings of the Workshop on Deep Learning Approaches
for Low-Resource NLP, pages 12–18. Association
for Computational Linguistics.

Dan Hendrycks, Mantas Mazeika, Duncan Wilson, and
Kevin Gimpel. 2018. Using trusted data to train
deep networks on labels corrupted by severe noise.
In Advances in Neural Information Processing Sys-
tems 31: Annual Conference on Neural Informa-
tion Processing Systems 2018, NeurIPS 2018, 3-8
December 2018, Montréal, Canada., pages 10477–
10486. Curran Associates, Inc.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Bingfeng Luo, Yansong Feng, Zheng Wang, Zhanxing
Zhu, Songfang Huang, Rui Yan, and Dongyan Zhao.
2017. Learning with noise: Enhance distantly su-
pervised relation extraction with dynamic transition
matrix. In Proceedings of the 55th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers).

Mitchell P. Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. 1993. Building a large annotated
corpus of english: The penn treebank. Computa-
tional Linguistics, 19(2):313–330.

David McClosky, Eugene Charniak, and Mark John-
son. 2006. Effective self-training for parsing. In
Proceedings of the main conference on human lan-
guage technology conference of the North American
Chapter of the Association of Computational Lin-
guistics, pages 152–159. Association for Computa-
tional Linguistics.

David F. Nettleton, Albert Orriols-Puig, and Albert
Fornells. 2010. A study of the effect of differ-
ent types of noise on the precision of supervised
learning techniques. Artificial Intelligence Review,
33(4):275–306.

Mykola Pechenizkiy, Alexey Tsymbal, Seppo Puuro-
nen, and Oleksandr Pechenizkiy. 2006. Class noise
and supervised learning in medical domains: The ef-
fect of feature extraction. In 19th IEEE Symposium
on Computer-Based Medical Systems, pages 708–
713.

Slav Petrov, Pi-Chuan Chang, Michael Ringgaard, and
Hiyan Alshawi. 2010. Uptraining for accurate de-
terministic question parsing. In Proceedings of the
2010 Conference on Empirical Methods in Natural
Language Processing, EMNLP ’10, pages 705–713.

Sebastian Ruder. 2017. An overview of multi-task
learning in deep neural networks. arXiv e-prints,
page arXiv:1706.05098.

Kenji Sagae and Jun’ichi Tsujii. 2007. Dependency
parsing and domain adaptation with lr models and
parser ensembles. In Proceedings of the 2007 Joint
Conference on Empirical Methods in Natural Lan-
guage Processing and Computational Natural Lan-
guage Learning.

Erik F. Tjong Kim Sang and Sabine Buchholz. 2000.
Introduction to the conll-2000 shared task: Chunk-
ing. In Proceedings of the 2nd workshop on Learn-
ing language in logic and the 4th conference on
Computational natural language learning-Volume 7,
pages 127–132. Association for Computational Lin-
guistics.

Anders Søgaard and Yoav Goldberg. 2016. Deep
multi-task learning with low level tasks supervised
at lower layers. In Proceedings of the 54th Annual
Meeting of the Association for Computational Lin-
guistics (Volume 2: Short Papers).

Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: A simple way to prevent neural networks
from overfitting. Journal of Machine Learning Re-
search, 15:1929–1958.

Mark Steedman, Miles Osborne, Anoop Sarkar,
Stephen Clark, Rebecca Hwa, Julia Hockenmaier,
Paul Ruhlen, Steven Baker, and Jeremiah Crim.
2003. Bootstrapping statistical parsers from small
datasets. In Proceedings of the Tenth Conference
on European Chapter of the Association for Com-
putational Linguistics - Volume 1, EACL ’03, pages
331–338.

Sainbayar Sukhbaatar, Joan Bruna, Manohar Paluri,
Lubomir Bourdev, and Rob Fergus. 2015. Learn-
ing from noisy labels with deep neural networks. In
ICLR Workshop track.

Andreas Veit, Neil Alldrin, Gal Chechik, Ivan Krasin,
Abhinav Gupta, and Serge Belongie. 2017. Learn-
ing from noisy large-scale datasets with minimal su-
pervision. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pages
839–847.

Zhilu Zhang and Mert R. Sabuncu. 2018. General-
ized cross entropy loss for training deep neural net-
works with noisy labels. In Advances in Neural
Information Processing Systems 31: Annual Con-
ference on Neural Information Processing Systems
2018, NeurIPS 2018, 3-8 December 2018, Montréal,
Canada., pages 8792–8802.

http://aclweb.org/anthology/W18-3402
http://aclweb.org/anthology/W18-3402
http://papers.nips.cc/paper/8246-using-trusted-data-to-train-deep-networks-on-labels-corrupted-by-severe-noise
http://papers.nips.cc/paper/8246-using-trusted-data-to-train-deep-networks-on-labels-corrupted-by-severe-noise
http://dl.acm.org/citation.cfm?id=972470.972475
http://dl.acm.org/citation.cfm?id=972470.972475
https://doi.org/10.1007/s10462-010-9156-z
https://doi.org/10.1007/s10462-010-9156-z
https://doi.org/10.1007/s10462-010-9156-z
https://doi.org/10.1109/CBMS.2006.65
https://doi.org/10.1109/CBMS.2006.65
https://doi.org/10.1109/CBMS.2006.65
http://dl.acm.org/citation.cfm?id=1870658.1870727
http://dl.acm.org/citation.cfm?id=1870658.1870727
http://arxiv.org/abs/1706.05098
http://arxiv.org/abs/1706.05098
http://jmlr.org/papers/v15/srivastava14a.html
http://jmlr.org/papers/v15/srivastava14a.html
http://openaccess.thecvf.com/content_cvpr_2017/papers/Veit_Learning_From_Noisy_CVPR_2017_paper.pdf
http://openaccess.thecvf.com/content_cvpr_2017/papers/Veit_Learning_From_Noisy_CVPR_2017_paper.pdf
http://openaccess.thecvf.com/content_cvpr_2017/papers/Veit_Learning_From_Noisy_CVPR_2017_paper.pdf
http://papers.nips.cc/paper/8094-generalized-cross-entropy-loss-for-training-deep-neural-networks-with-noisy-labels
http://papers.nips.cc/paper/8094-generalized-cross-entropy-loss-for-training-deep-neural-networks-with-noisy-labels
http://papers.nips.cc/paper/8094-generalized-cross-entropy-loss-for-training-deep-neural-networks-with-noisy-labels

