



















































Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics


Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 996–1005
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-1092

Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 996–1005
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-1092

Neural Discourse Structure for Text Categorization

Yangfeng Ji and Noah A. Smith
Paul G. Allen School of Computer Science & Engineering

University of Washington
Seattle, WA 98195, USA

{yangfeng,nasmith}@cs.washington.edu

Abstract

We show that discourse structure, as de-
fined by Rhetorical Structure Theory and
provided by an existing discourse parser,
benefits text categorization. Our approach
uses a recursive neural network and a
newly proposed attention mechanism to
compute a representation of the text that
focuses on salient content, from the per-
spective of both RST and the task. Exper-
iments consider variants of the approach
and illustrate its strengths and weaknesses.

1 Introduction

Advances in text categorization have the poten-
tial to improve systems for analyzing sentiment,
inferring authorship or author attributes, making
predictions, and many more. Several past re-
searchers have noticed that methods that reason
about the relative salience or importance of pas-
sages within a text can lead to improvements (Ko
et al., 2004). Latent variables (Yessenalina et al.,
2010), structured-sparse regularizers (Yogatama
and Smith, 2014), and neural attention models
(Yang et al., 2016) have all been explored.

Discourse structure, which represents the or-
ganization of a text as a tree (for an example, see
Figure 1), might provide cues for the importance
of different parts of a text. Some promising re-
sults on sentiment classification tasks support this
idea: Bhatia et al. (2015) and Hogenboom et al.
(2015) applied hand-crafted weighting schemes to
the sentences in a document, based on its discourse
structure, and showed benefit to sentiment polarity
classification.

In this paper, we investigate the value of
discourse structure for text categorization more
broadly, considering five tasks, through the
use of a recursive neural network built on an

R

Contrast

	

Elaboration

A B
	

Explanation

C
Joint

D

	
Constrast

E F

[Although the food was amazing]A [and I was in love

with the spicy pork burrito,]B [the service was really

awful.]C [We watched our waiter serve himself many

drinks.]D [He kept running into the bathroom]E [in-

stead of grabbing our bill.]F

Figure 1: A manually constructed example of the
RST (Mann and Thompson, 1988) discourse struc-
ture on a text.

automatically-derived document parse from a top-
performing, open-source discourse parser, DPLP
(Ji and Eisenstein, 2014). Our models learn to
weight the importance of a document’s sentences,
based on their positions and relations in the dis-
course tree. We introduce a new, unnormalized
attention mechanism to this end.

Experimental results show that variants of our
model outperform prior work on four out of five
tasks considered. Our method unsurprisingly un-
derperforms on the fifth task, making predictions
about legislative bills—a genre in which discourse
conventions are quite different from those in the
discourse parser’s training data. Further experi-
ments show the effect of discourse parse quality on
text categorization performance, suggesting that
future improvements to discourse parsing will pay
off for text categorization, and validate our new
attention mechanism.

996

https://doi.org/10.18653/v1/P17-1092
https://doi.org/10.18653/v1/P17-1092


Our implementation is available at https://
github.com/jiyfeng/disco4textcat.

2 Background: Rhetorical Structure
Theory

Rhetorical Structure Theory (RST; Mann and
Thompson, 1988) is a theory of discourse that
has enjoyed popularity in NLP. RST posits that
a document can be represented by a tree whose
leaves are elementary discourse units (EDUs, typ-
ically clauses or sentences). Internal nodes in the
tree correspond to spans of sentences that are con-
nected via discourse relations such as CONTRAST
and ELABORATION. In most cases, a discourse re-
lation links adjacent spans denoted “nucleus” and
“satellite,” with the former more essential to the
writer’s purpose than the latter.1

An example of a manually constructed RST
parse for a restaurant review is shown in Figure 1.
The six EDUs are indexed from A to F ; the dis-
course tree organizes them hierarchically into in-
creasingly larger spans, with the last CONTRAST
relation resulting in a span that covers the whole
review. Within each relation, the RST tree in-
dicates the nucleus pointed by an arrow from its
satellite (e.g., in the ELABORATION relation, A is
the nucleus and B is the satellite).

The information embedded in RST trees has
motivated many applications in NLP research, in-
cluding document summarization (Marcu, 1999),
argumentation mining (Azar, 1999), and sentiment
analysis (Bhatia et al., 2015). In most applica-
tions, RST trees are built by automatic discourse
parsing, due to the expensive cost of manual an-
notation. In this work, we use a state-of-the-art
open-source RST-style discourse parser, DPLP (Ji
and Eisenstein, 2014).2

We follow recent work that suggests trans-
forming the RST tree into a dependency struc-
ture (Yoshida et al., 2014).3 Figure 2(a) shows the
corresponding dependency structure of the RST
tree in Figure 1. It is clear that C is the root of
the tree, and in fact this clause summarizes the re-
view and suffices to categorize it as negative. This
dependency representation of the RST tree offers a

1There are also a few exceptions in which a relation can
be realized with multiple nuclei.

2https://github.com/jiyfeng/DPLP
3The transformation is trivial and deterministic given the

nucleus-satellite mapping for each relation. The procedure is
analogous to the transformation of a headed phrase-structure
parse in syntax into a dependency tree (e.g., Yamada and Mat-
sumoto, 2003).

form of inductive bias for our neural model, help-
ing it to discern the most salient parts of a text in
order to assign it a label.

3 Model

Our model is a recursive neural network built on
a discourse dependency tree. It includes a dis-
tributed representation computed for each EDU,
and a composition function that combines EDUs
and partial trees into larger trees. At the top of the
tree, the representation of the complete document
is used to make a categorization decision. Our ap-
proach is analogous to (and inspired by) the use
of recursive neural networks on syntactic depen-
dency trees, with word embeddings at the leaves
(Socher et al., 2014).

3.1 Representation of Sentences

Let e be the distributed representation of an EDU.
We use a bidirectional LSTM on the words’ em-
beddings within each EDU (details of word em-
beddings are given in section 4), concatenating the
last hidden state vector from the forward LSTM
(−→e ) with that of the backward LSTM (←−e ) to get e.

There is extensive recent work on architectures
for embedding representations of sentences and
other short pieces of text, including, for example,
(bi)recursive neural networks (Paulus et al., 2014)
and convolutional neural networks (Kalchbrenner
et al., 2014). Future work might consider alterna-
tives; we chose the bidirectional LSTM due to its
effectiveness in many settings.

3.2 Full Recursive Model

Given the discourse dependency tree for an input
text, our recursive model builds a vector represen-
tation through composition at each arc in the tree.
Let vi denote the vector representation of EDU i
and its descendants. For the base case where EDU
i is a leaf in the tree, we let vi = tanh(ei), which
is the elementwise hyperbolic tangent function.

For an internal node i, the composition function
considers a parent and all of its children, whose in-
dices are denoted by children(i). In defining this
composition function, we seek for (i.) the contri-
bution of the parent node ei to be central; and (ii.)
the contribution of each child node ej be deter-
mined by its content as well as the discourse rela-
tion it holds with the parent. We therefore define

997



C

DA E

B F

Elab.

Cont. Exp. Exp.

Cont.

(a) dependency structure

tanh(eC +
∑

j∈{A,D,E} αC,jWC,jvj)

tanh(eD)tanh(eA + αA,BWA,BvB) tanh(eE + αF,EWF,EvF )

tanh(eB) tanh(eF )

WA,B

WC,A WC,D WC,E

WF,E

(b) recursive neural network structure

Figure 2: The dependency discourse tree derived from the example RST tree in Figure 1 (a) and the
corresponding recursive neural network model on the tree (b).

vi = tanh


ei +

∑

j∈children(i)
αi,jWri,jvj


 ,

(1)
where Wri,j is a relation-specific composition
matrix indexed by the relation between i and j,
ri,j .
αi,j is an “attention” weight, defined as

αi,j = σ
(
e>i Wαvj

)
, (2)

where σ is the elementwise sigmoid and Wα
contains attention parameters (these are relation-
independent). Our attention mechanism differs
from prior work (Bahdanau et al., 2015), in which
attention weights are normalized to sum to one
across competing candidates for attention. Here,
αi,j does not depend on node i’s other children.
This is motivated by RST, in which the presence
of a node does not signify lesser importance to its
siblings. Consider, for example, EDU D and text
span E-F in Figure 1, which in parallel provide
EXPLANATION for EDU C. This scenario dif-
fers from machine translation, where attention is-
used to implicitly and softly align output-language
words to relatively few input-language words. It
also differs from attention in composition func-
tions used in syntactic parsing (Kuncoro et al.,
2017), where attention can mimic head rules that
follow from an endocentricity hypothesis of syn-
tactic phrase representation.

Our recursive composition function, through
the attention mechanism and the relation-specific
weight matrices, is designed to learn how to dif-
ferently weight EDUs for the categorization task.
This idea of using a weighting scheme along
with discourse structure is explored in prior works
(Bhatia et al., 2015; Hogenboom et al., 2015), al-
though they are manually designed, rather than
learned from training data.

Once we have vroot of a text, the prediction of
its category is given by softmax (Wovroot + b).

We refer to this model as the FULL model, since
it makes use of the entire discourse dependency
tree.

3.3 Unlabeled Model

The FULL model based on Equation 1 uses a de-
pendency discourse tree with relations. Because
alternate discourse relation labels have been pro-
posed (e.g., Prasad et al., 2008), we seek to mea-
sure the effect of these labels. We therefore con-
sider an UNLABELED model based only on the
tree structure, without the relations:

vi = tanh


ei +

∑

j∈children(i)
αi,jvj


 . (3)

Here, only attention weights are used to compose
the children nodes’ representations, significantly
reducing the number of model parameters.

This UNLABELED model is similar to the depth
weighting scheme introduced by Bhatia et al.
(2015), which also uses an unlabeled discourse de-
pendency tree, but our attention weights are com-
puted by a function whose parameters are learned.
This approach sits squarely between Bhatia et al.
(2015) and the flat document structure used by
Yang et al. (2016); the UNLABELED model still
uses discourse to bias the model toward some con-
tent (that which is closer to the tree’s root).

3.4 Simpler Variants

We consider two additional baselines that are even
simpler. The first, ROOT, uses the discourse de-
pendency structure only to select the root EDU,
which is used to represent the entire text: vroot =
eroot. No composition function is needed. This
model variant is motivated by work on document
summarization (Yoshida et al., 2014), where the

998



most central EDU is used to represent the whole
text.

The second variant, ADDITIVE, uses all the
EDUs with a simple composition function, and
does not depend on discourse structure at all:
vroot =

1
N

∑N
i=1 ei, where N is the total number

of EDUs. This serves as a baseline to test the bene-
fits of discourse, controlling for other design deci-
sions and implementation choices. Although sen-
tence representations ei are built in a different way
from the work of Yang et al. (2016), this model is
quite similar to their HN-AVE model on building
document representations.

4 Implementation Details

The parameters of all components of our model
(top-level classification, composition, and EDU
representation) are learned end-to-end using stan-
dard methods. We implement our learning pro-
cedure with the DyNet package (Neubig et al.,
2017).

Preprocessing. For all datasets, we use the same
preprocessing steps, mostly following recent work
on language modeling (e.g., Mikolov et al., 2010).
We lowercased all the tokens and removed tokens
that contain only punctuation symbols. We re-
placed numbers in the documents with a special
number token. Low-frequency word types were
replaced by UNK; we reduce the vocabulary for
each dataset until approximately 5% of tokens are
mapped to UNK. The vocabulary sizes after pre-
processing are also shown in Table 1.

Discourse parsing. Our model requires the dis-
course structure for each document. We used
DPLP, the RST parser from Ji and Eisenstein
(2014), which is one of the best discourse parsers
on the RST discourse treebank benchmark (Carl-
son et al., 2001). It employs a greedy decoding
algorithm for parsing, producing 2,000 parses per
minute on average on a single CPU. DPLP pro-
vides discourse segmentation, breaking a text into
EDUs, typically clauses or sentences, based on
syntactic parses provided by Stanford CoreNLP.
RST trees are converted to dependencies follow-
ing the method of Yoshida et al. (2014). DPLP
as distributed is trained on 347 Wall Street Jour-
nal articles from the Penn Treebank (Marcus et al.,
1993).

Word embeddings. In cases where there are
10,000 or fewer training examples, we used

pretrained GloVe word embeddings (Pennington
et al., 2014), following previous work on neu-
ral discourse processing (Ji and Eisenstein, 2015).
For larger datasets, we randomly initialized word
embeddings and trained them alongside other
model parameters.

Learning and hyperparameters. Online learn-
ing was performed with the optimization method
and initial learning rate as hyperparameters. To
avoid the exploding gradient problem, we used the
norm clipping trick with a threshold of τ = 5.0.
In addition, dropout rate 0.3 was used on both
input and hidden layers to avoid overfitting. We
performed grid search over the word vector repre-
sentation dimensionality, the LSTM hidden state
dimensionality (both {32, 48, 64, 128, 256}), the
initial learning rate ({0.1, 0.01, 0.001}), and the
update method (SGD and Adam, Kingma and Ba,
2015). For each corpus, the highest-accuracy com-
bination of these hyperparameters is selected us-
ing development data or ten-fold cross validation,
which will be specified in section 5.

5 Datasets

We selected five datasets of different sizes and cor-
responding to varying categorization tasks. Some
information about these datasets is summarized
in Table 1.

Sentiment analysis on Yelp reviews. Originally
from the Yelp Dataset Challenge in 2015, this
dataset contains 1.5 million examples. We used
the preprocessed dataset from Zhang et al. (2015),
which has 650,000 training and 50,000 test exam-
ples. The task is to predict an ordinal rating (1–5)
from the text of the review. To select the best com-
bination of hyperparameters, we randomly sam-
pled 10% training examples as the development
data. We compared with hierarchical attention net-
works (Yang et al., 2016), which use the normal-
ized attention mechanism on both word and sen-
tence layers with a flat document structure, and
provide the state-of-the-art result on this corpus.

Framing dimensions in news articles. The Me-
dia Frames Corpus (MFC; Card et al., 2015) in-
cludes around 4,200 news articles about immi-
gration from 13 U.S. newspapers over the years
1980–2012. The annotations of these articles are
in terms of a set of 15 general-purpose labels,
such as ECONOMICS and MORALITY, designed
to categorize the emphasis framing applied to the

999



Number of docs.

Dataset Task Classes Total Training Development Test Vocab. size

Yelp Sentiment 5 700K 650K – 50K 10K
MFC Frames 15 4.2K – – – 7.5K
Debates Vote 2 1.6K 1,135 105 403 5K
Movies Sentiment 2 2.0K – – – 5K
Bills Survival 2 52K 46K – 6K 10K

Table 1: Information about the five datasets used in our experiments. To compare with prior work, we
use different experimental settings. For Yelp and Bill corpora, we use 10% of the training examples as
development data. For MFC and Movies corpora, we use 10-fold cross validation and report averages
across all folds.

immigration issue within the articles. We fo-
cused on predicting the single primary frame of
each article. The state-of-the-art result on this
corpus is from Card et al. (2016), where they
used logistic regression together with unigrams,
bigrams and Bamman-style personas (Bamman
et al., 2014) as features. The best feature com-
bination in their model alongside other hyperpa-
rameters was identified by a Bayesian optimiza-
tion method (Bergstra et al., 2015). To select hy-
perparameters, we used a small set of examples
from the corpus as a development set. Then, we
report average accuracy across 10-fold cross vali-
dation as in (Card et al., 2016).

Congressional floor debates. The corpus was
originally collected by Thomas et al. (2006), and
the data split we used was constructed by Yesse-
nalina et al. (2010). The goal is to predict the vote
(“yea” or “nay”) for the speaker of each speech
segment. The most recent work on this corpus
is from Yogatama and Smith (2014), which pro-
posed structured regularization methods based on
linguistic components, e.g., sentences, topics, and
syntactic parses. Each regularization method in-
duces a linguistic bias to improve text classifica-
tion accuracy, where the best result we repeated
here is from the model with sentence regularizers.

Movie reviews. This classic movie review cor-
pus was constructed by Pang and Lee (2004) and
includes 1,000 positive and 1,000 negative re-
views. On this corpus, we used the standard ten-
fold data split for cross validation and reported
the average accuracy across folds. We compared
with the work from both Bhatia et al. (2015) and
Hogenboom et al. (2015), which are two recent
works on discourse for sentiment analysis. Bha-

tia et al. (2015) used a hand-crafted weighting
scheme to bias the bag-of-word representations on
sentences. Hogenboom et al. (2015) also consid-
ered manually-designed weighting schemes and a
lexicon-based model as classifier, achieving per-
formance inferior to fully-supervised methods like
Bhatia et al. (2015) and ours.

Congressional bill corpus. This corpus, col-
lected by Yano et al. (2012), includes 51,762 leg-
islative bills from the 103rd to 111th U.S. Con-
gresses. The task is to predict whether a bill will
survive based on its content. We randomly sam-
pled 10% training examples as development data
to search for the best hyperparameters. To our
knowledge, the best published results are due to
Yogatama and Smith (2014), which is the same
baseline as for the congressional floor debates cor-
pus.

6 Experiments

We evaluated all variants of our model on the five
datasets presented in section 5, comparing in each
case to the published state of the art as well as the
most relevant works.

Results. See Table 2. On four out of five
datasets, our UNLABELED model (line 8) outper-
forms past methods. In the case of the very large
Yelp dataset, our FULL model (line 9) gives even
stronger performance, but not elsewhere, suggest-
ing that it is overparameterized for the smaller
datasets. Indeed, on the MFC and Movies tasks,
the discourse-ignorant ADDITIVE outperforms the
FULL model. On these datasets, the selected FULL
model had nearly 20 times as many parameters as
the UNLABELED model, which in turn had twice
as many parameters as the ADDITIVE.

1000



Method Yelp MFC Debates Movies Bills

Prior work
1. Yang et al. (2016) 71.0 — — — —
2. Card et al. (2016) — 56.8 — — —
3. Yogatama and Smith (2014) — — 74.0 — 88.5
4. Bhatia et al. (2015) — — — 82.9 —
5. Hogenboom et al. (2015) — — — 71.9 —
Variants of our model
6. ADDITIVE 68.5 57.6 69.0 82.7 80.1
7. ROOT 54.3 51.2 60.3 68.7 70.5
8. UNLABELED 71.3 58.4 75.7 83.1 78.4
9. FULL 71.8 56.3 74.2 79.5 77.0

Table 2: Test-set accuracy across five datasets. Results from prior work are reprinted from the corre-
sponding publications. Boldface marks performance stronger than the previous state of the art.

This finding demonstrates the benefit of ex-
plicit discourse structure—even the output from an
imperfect parser—for text categorization in some
genres. This benefit is supported by both UN-
LABELED and FULL, since both of them use dis-
course structures of texts. The advantage of us-
ing discourse information varies on different gen-
res and different corpus sizes. Even though the
discourse parser is trained on news text, it still of-
fers benefit to restaurant and movie reviews and to
the genre of congressional debates. Even for news
text, if the training dataset is small (e.g., MFC), a
lighter-weight variant of discourse (UNLABELED)
is preferred.

Legislative bills, which have technical legal
content and highly specialized conventions (see
the supplementary material for an example), are
arguably the most distant genre from news among
those we considered. On that task, we see dis-
course working against accuracy. Note that the
corpus of bills is more than ten times larger than
three cases where our UNLABELED model outper-
formed past methods, suggesting that the drop in
performance is not due to lack of data.

It is also important to notice that the ROOT
model performs quite poorly in all cases. This im-
plies that discourse structure is not simply helping
by finding a single EDU upon which to make the
categorization decision.

Qualitative analysis. Figure 3 shows some ex-
ample texts from the Yelp Review corpus with
their discourse structures produced by DPLP,
where the weights were generated with the FULL
model. Figures 3(a) and 3(b) are two successful

examples of the FULL model. Figure 3(a) shows
a simple case with respect to the discourse struc-
ture. Figure 3(b) is slightly different—the text in
this example may have more than one reasonable
discourse structure, e.g., 2D could be a child of
2C instead of 2A. In both cases, discourse struc-
tures help the FULL model bias to the important
sentences.

Figure 3(c), on the other hand, presents a neg-
ative example, where DPLP failed to identify
the most salient sentence 3F . In addition, the
weights produced by the FULL model do not
make much sense, which we suspect the model
was confused by the structure. Figure 3(c) also
presents a manually-constructed discourse struc-
ture on the same text for reference. A more accu-
rate prediction is expected if we use this manually-
constructed discourse structure, because it has the
appropriate dependency between sentences. In ad-
dition, the annotated discourse relations are able to
select the right relation-specific composition ma-
trices in FULL model, which are consistent with
the training examples.

Effect of parsing performance. A natural ques-
tion is whether further improvements to RST dis-
course parsing would lead to even greater gains in
text categorization. While advances in discourse
parsing are beyond the scope of this paper, we
can gain some insight by exploring degradation
to the DPLP parser. An easy way to do this is
to train it on subsets of the RST discourse tree-
bank. We repeated the conditions described above
for our FULL model, training DPLP on 25%, 50%,
and 75% of the training set (randomly selected in

1001



From DPLP:

1A 1B 1C
0.66

Elaboration

0.67

Cause

[This store is somewhat convenient but I can never find

any workers,]1A [it drives me crazy.]1B [I never come

here on the weekends or around holidays anymore.]1C

(a) true label: 2, predicted label: 2

From DPLP:

2A2B2C 2D
0.87

Evaluation

0.61

Elaboration

0.70

Evaluation

[I love these people.]2A [They are very friendly and always ask about my

life.]2B [They remember things I tell them then ask about it the next time

I’m in.]2C [Patrick and Lily are the best but everyone there is wonderful in

their own ways.]2D

(b) true label: 5, predicted label: 5

From DPLP:

3B

3A 3C 3D 3E 3F
0.47

Elaboration

0.32

Elaboration

0.62

Elaboration

0.16 Elaboration0.32Attribution

Manually constructed:

3F

3B3A

3C 3D

3E

Cause

Background

Explanation Explanation

Explanation

[We use to visit this pub 10 years ago because they had a nice english waitress and excellent fish and chips for

the price.]3A [However we went back a few weeks ago and were disappointed.]3B [The price of the fish and chip

dinner went up and they cut the portion in half.]3C [No one assisted us in putting two tables together we had to

do it ourselves.]3D [Two guests wanted a good English hot tea and they didn’t brew it in advance.]3E [So we’ve

decided there are newer and better places to eat fish and chips especially up in north phoenix.]3F

(c) true label: 1, predicted label: 3

Figure 3: Some example texts (with light revision for readability) from the Yelp Review corpus and
their corresponding dependency discourse parses from DPLP (Ji and Eisenstein, 2014). The numbers on
dependency edges are attention weights produced by the FULL model.

1002



50 52 54 56 58 60 62
F1 on RST Discourse Treebank

70.8

71.0

71.2

71.4

71.6

71.8
A

cc
u

ra
cy

 o
n

 Y
e
lp

 R
e
vi

e
w

s

Figure 4: Varying the amount of training data for
the discourse parser, we can see how parsing F1
performance affects accuracy on the Yelp review
task.

each case) before re-parsing the data for the sen-
timent analysis task. We did not repeat the hy-
perparameter search. In Figure 4, we plot accu-
racy of the classifier (y-axis) against the F1 perfor-
mance of the discourse parser (x-axis). Unsurpris-
ingly, lower parsing performance implies lower
classification accuracy. Notably, if the RST dis-
course treebank were reduced to 25% of its size,
our method would underperform the discourse-
ignorant model of Yang et al. (2016). While we
cannot extrapolate with certainty, these findings
suggest that further improvements to discourse
parsing, through larger annotated datasets or im-
proved models, could lead to greater gains.

Attention mechanism. In section 3, we con-
trasted our new attention mechanism (Equation 2),
which is inspired by RST’s lack of “competi-
tion” for salience among satellites, with the atten-
tion mechanism used in machine translation (Bah-
danau et al., 2015). We consider here a variant of
our model with normalized attention:

α′i = softmax







...
v>j

...



j∈children(i)

Wα · ei


 .

(4)
The result here is a vector α′i, with one element for
each child node j ∈ children(i), and which sums
to one.

On Yelp dateset, this variant of the FULL model
achieves 70.3% accuracy (1.5% absolute behind
our FULL model), giving empirical support to our

theoretically-motivated design decision not to nor-
malize attention. Of course, further architecture
improvements may yet be possible.

Discussion. Our findings in this work show the
benefit of using discourse structure for text cate-
gorization. Although discourse structure strongly
improves the performance on most of corpora in
our experiments, its benefit is limited particularly
by two factors: (1) the state-of-the-art perfor-
mance on RST discourse parsing; and (2) domain
mismatch between the training corpus for a dis-
course parser and the domain where the discourse
parser is used. For the first factor, discourse pars-
ing is still an active research topic in NLP, and may
yet improve. The second factor suggests explor-
ing domain adaptation methods or even direct dis-
course annotation for genres of interest.

7 Related Work

Early work on text categorization often treated text
as a bag of words (e.g., Joachims, 1998; Yang and
Pedersen, 1997). Representation learning, for ex-
ample through matrix decomposition (Deerwester
et al., 1990) or latent topic variables (Ramage
et al., 2009), has been considered to avoid over-
fitting in the face of sparse data.

The assumption that all parts of a text should
influence categorization equally persists even as
more powerful representation learners are consid-
ered. Zhang et al. (2015) treat a text as a sequence
of characters, proposing to a deep convolutional
neural network to build text representation. Xiao
and Cho (2016) extended that architecture by in-
serting a recurrent neural network layer between
the convolutional layer and the classification layer.

In contrast, our contributions follow Ko et al.
(2004), who sought to weight the influence of dif-
ferent parts of an input text on the task. Two works
that sought to learn the importance of sentences in
a document are Yessenalina et al. (2010) and Yang
et al. (2016). The former used a latent variable
for the informativeness of each sentence, and the
latter used a neural network to learn an attention
function. Neither used any linguistic bias, relying
only on task supervision to discover the latent vari-
able distribution or attention function. Our work
builds the neural network directly on a discourse
dependency tree, favoring the most central EDUs
over the others but giving the model the ability to
overcome this bias.

Another way to use linguistic information was

1003



presented by Yogatama and Smith (2014), who
used a bag-of-words model. The novelty in their
approach was a data-driven regularization method
that encouraged the model to collectively ignore
groups of features found to coocur. Most related
to our work is their “sentence regularizer,” which
encouraged the model to try to ignore training-set
sentences that were not informative for the task.
Discourse structure was not considered.

Discourse for sentiment analysis. Recently,
discourse structure has been considered for sen-
timent analysis, which can be cast as a text cate-
gorization problem. Bhatia et al. (2015) proposed
two discourse-motivated models for sentiment po-
larity prediction. One of the models is also based
on discourse dependency trees, but using a hand-
crafted weighting scheme. Our method’s attention
mechanism automates the weighting.

8 Conclusion

We conclude that automatically-derived discourse
structure can be helpful to text categorization, and
the benefit increases with the accuracy of dis-
course parsing. We did not see a benefit for
categorizing legislative bills, a text genre whose
discourse structure diverges from that of news.
These findings motivate further improvements to
discourse parsing, especially for new genres.

Acknowledgments

We thank anonymous reviewers and members of
Noah’s ARK for helpful feedback on this work.
We thank Dallas Card and Jesse Dodge for helping
prepare the Media Frames Corpus and the Con-
gressional bill corpus. This work was made pos-
sible by a University of Washington Innovation
Award.

References
Moshe Azar. 1999. Argumentative text as rhetorical

structure: An application of rhetorical structure the-
ory. Argumentation 13(1):97–114.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In ICLR.

David Bamman, Brendan O’Connor, and Noah A
Smith. 2014. Learning latent personas of film char-
acters. In ACL.

James Bergstra, Brent Komer, Chris Eliasmith, Dan
Yamins, and David D. Cox. 2015. Hyperopt: a

Python library for model selection and hyperparam-
eter optimization. Computational Science & Dis-
covery 8(1).

Parminder Bhatia, Yangfeng Ji, and Jacob Eisenstein.
2015. Better document-level sentiment analysis
from RST discourse parsing. In EMNLP.

Dallas Card, Amber E. Boydstun, Justin H. Gross,
Philip Resnik, and Noah A. Smith. 2015. The Me-
dia Frames Corpus: Annotations of frames across
issues. In ACL.

Dallas Card, Justin Gross, Amber E. Boydstun, and
Noah A. Smith. 2016. Analyzing framing through
the casts of characters in the news. In EMNLP.

Lynn Carlson, Daniel Marcu, and Mary Ellen
Okurowski. 2001. Building a discourse-tagged cor-
pus in the framework of Rhetorical Structure The-
ory. In Proceedings of Second SIGdial Workshop on
Discourse and Dialogue.

Scott Deerwester, Susan T. Dumais, George W. Fur-
nas, Thomas K. Landauer, and Richard Harshman.
1990. Indexing by latent semantic analysis. Jour-
nal of the American Society for Information Science
41(6):391.

Alexander Hogenboom, Flavius Frasincar, Franciska
de Jong, and Uzay Kaymak. 2015. Using rhetorical
structure in sentiment analysis. Communications of
the ACM 58(7):69–77.

Yangfeng Ji and Jacob Eisenstein. 2014. Representa-
tion learning for document-level discourse parsing.
In ACL.

Yangfeng Ji and Jacob Eisenstein. 2015. One vector is
not enough: Entity-augmented distributed semantics
for discourse relations. Transactions of the Associa-
tion of Computational Linguistics 3:329–344.

Thorsten Joachims. 1998. Text categorization with
support vector machines: Learning with many rel-
evant features. In ECML.

Nal Kalchbrenner, Edward Grefenstette, and Phil Blun-
som. 2014. A convolutional neural network for
modelling sentences. ArXiv:1404.2188.

Diederik Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In ICLR.

Youngjoong Ko, Jinwoo Park, and Jungyun Seo. 2004.
Improving text categorization using the importance
of sentences. Information Processing & Manage-
ment 40(1):65–79.

Adhiguna Kuncoro, Miguel Ballesteros, Lingpeng
Kong, Chris Dyer, Graham Neubig, and Noah A.
Smith. 2017. What do recurrent neural network
grammars learn about syntax? In EACL.

William Mann and Sandra Thompson. 1988. Rhetori-
cal Structure Theory: Toward a functional theory of
text organization. Text 8(3):243–281.

1004



Daniel Marcu. 1999. Discourse trees are good indi-
cators of importance in text. In Inderjeet Mani and
Mark T. Maybury, editors, Advances in Automatic
Text Summarization, pages 123–136.

Mitchell P. Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. 1993. Building a large annotated
corpus of English: The Penn Treebank. Computa-
tional Linguistics 19(2):313–330.

Tomas Mikolov, Martin Karafiát, Lukas Burget, Jan
Cernockỳ, and Sanjeev Khudanpur. 2010. Recur-
rent neural network based language model. In IN-
TERSPEECH.

Graham Neubig, Chris Dyer, Yoav Goldberg, Austin
Matthews, Waleed Ammar, Antonios Anastasopou-
los, Miguel Ballesteros, David Chiang, Daniel
Clothiaux, Trevor Cohn, et al. 2017. Dynet: The dy-
namic neural network toolkit. ArXiv:1701.03980.

Bo Pang and Lillian Lee. 2004. A sentimental educa-
tion: Sentiment analysis using subjectivity summa-
rization based on minimum cuts. In Proceedings of
the 42nd annual meeting on Association for Compu-
tational Linguistics. Association for Computational
Linguistics, page 271.

Romain Paulus, Richard Socher, and Christopher D
Manning. 2014. Global belief recursive neural net-
works. In NIPS.

Jeffrey Pennington, Richard Socher, and Christopher D
Manning. 2014. GloVe: Global vectors for word
representation. In EMNLP.

Rashmi Prasad, Nikhil Dinesh, Alan Lee, Eleni Milt-
sakaki, Livio Robaldo, Aravind Joshi, and Bonnie
Webber. 2008. The Penn Discourse Treebank 2.0.
In LREC.

Daniel Ramage, David Hall, Ramesh Nallapati, and
Christopher D. Manning. 2009. Labeled lda: A su-
pervised topic model for credit attribution in multi-
labeled corpora. In EMNLP.

Richard Socher, Andrej Karpathy, Quoc V Le, Christo-
pher D. Manning, and Andrew Y. Ng. 2014.
Grounded compositional semantics for finding and
describing images with sentences. Transactions
of the Association for Computational Linguistics
2:207–218.

Matt Thomas, Bo Pang, and Lillian Lee. 2006. Get out
the vote: Determining support or opposition from
Congressional floor-debate transcripts. In EMNLP.

Yijun Xiao and Kyunghyun Cho. 2016. Effi-
cient character-level document classification by
combining convolution and recurrent layers.
ArXiv:1602.00367.

H. Yamada and Y. Matsumoto. 2003. Statistical de-
pendency analysis with support vector machines. In
IWPT .

Yiming Yang and Jan O. Pedersen. 1997. A compara-
tive study on feature selection in text categorization.
In ICML.

Zichao Yang, Diyi Yang, Chris Dyer, Xiaodong He,
Alex Smola, and Eduard Hovy. 2016. Hierarchical
attention networks for document classification. In
NAACL.

Tae Yano, Noah A. Smith, and John D. Wilkerson.
2012. Textual predictors of bill survival in congres-
sional committees. In NAACL.

Ainur Yessenalina, Yisong Yue, and Claire Cardie.
2010. Multi-level structured models for document
sentiment classification. In EMNLP.

Dani Yogatama and Noah A. Smith. 2014. Linguistic
structured sparsity in text categorization. In ACL.

Yasuhisa Yoshida, Jun Suzuki, Tsutomu Hirao, and
Masaaki Nagata. 2014. Dependency-based dis-
course parser for single-document summarization.
In EMNLP.

Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015.
Character-level convolutional networks for text clas-
sification. In NIPS.

1005


	Neural Discourse Structure for Text Categorization

