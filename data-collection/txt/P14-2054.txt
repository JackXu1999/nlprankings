



















































Polynomial Time Joint Structural Inference for Sentence Compression


Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 327–332,
Baltimore, Maryland, USA, June 23-25 2014. c©2014 Association for Computational Linguistics

Polynomial Time Joint Structural Inference for Sentence Compression

Xian Qian and Yang Liu
The University of Texas at Dallas

800 W. Campbell Rd., Richardson, TX, USA
{qx,yangl}@hlt.utdallas.edu

Abstract

We propose two polynomial time infer-
ence algorithms to compress sentences un-
der bigram and dependency-factored ob-
jectives. The first algorithm is exact and
requires O(n6) running time. It extend-
s Eisner’s cubic time parsing algorithm
by using virtual dependency arcs to link
deleted words. Two signatures are added
to each span, indicating the number of
deleted words and the rightmost kept word
within the span. The second algorithm is
a fast approximation of the first one. It re-
laxes the compression ratio constraint us-
ing Lagrangian relaxation, and thereby re-
quires O(n4) running time. Experimental
results on the popular sentence compres-
sion corpus demonstrate the effectiveness
and efficiency of our proposed approach.

1 Introduction

Sentence compression aims to shorten a sentence
by removing uninformative words to reduce read-
ing time. It has been widely used in compres-
sive summarization (Liu and Liu, 2009; Li et al.,
2013; Martins and Smith, 2009; Chali and Hasan,
2012; Qian and Liu, 2013). To make the com-
pressed sentence readable, some techniques con-
sider the n-gram language models of the com-
pressed sentence (Clarke and Lapata, 2008; Mc-
Donald, 2006). Recent studies used a subtree dele-
tion model for compression (Berg-Kirkpatrick et
al., 2011; Morita et al., 2013; Qian and Liu, 2013),
which deletes a word only if its modifier in the
parse tree is deleted. Despite its empirical suc-
cess, such a model fails to generate compressions
that are not subject to the subtree constraint (see
Figure 1). In fact, we parsed the Edinburgh sen-
tence compression corpus using the MSTparser1,

1http://sourceforge.net/projects/mstparser/

Warren says the economy continues the steady improvementROOT

Warren says steadythe economy continues the improvementROOT

Figure 1: The compressed sentence is not a sub-
tree of the original sentence. Words in gray are
removed.

and found that 2561 of 5379 sentences (47.6%) do
not satisfy the subtree deletion model.

Methods beyond the subtree model are also ex-
plored. Trevor et al. proposed synchronous tree
substitution grammar (Cohn and Lapata, 2009),
which allows local distortion of the tree topolo-
gy and can thus naturally capture structural mis-
matches. (Genest and Lapalme, 2012; Thadani
and McKeown, 2013) proposed the joint compres-
sion model, which simultaneously considers the n-
gram model and dependency parse tree of the com-
pressed sentence. However, the time complexity
greatly increases since the parse tree dynamical-
ly depends on the compression. They used Integer
Linear Programming (ILP) for inference which re-
quires exponential running time in the worst case.

In this paper, we propose a new exact decod-
ing algorithm for the joint model using dynam-
ic programming. Our method extends Eisner’s
cubic time parsing algorithm by adding signa-
tures to each span, which indicate the number of
deleted words and the rightmost kept word with-
in the span, resulting in O(n6) time complexity
and O(n4) space complexity. We further propose a
faster approximate algorithm based on Lagrangian
relaxation, which has TO(n4) running time and
O(n3) space complexity (T is the iteration num-
ber in the subgradient decent algorithm). Experi-
ments on the popular Edinburgh dataset show that

327



x x ...    x x ...    x ...0  (root) 2 i i+1 jx x1 n

w0idep

w i2dep
w ijdep

w i i+1dep

w2ibgr w i i+1bgr w i+1 jbgr

Figure 2: Graph illustration for the objective func-
tion. In this example, words x2, xi, xi+1, xj are
kept, others are deleted. The value of the ob-
jective function is wtok2 + w

tok
i + w

tok
i+1 + w

tok
j +

w
dep
0i +w

dep
i2 +w

dep
ii+1+w

dep
ij +w

bgr
2i +w

bgr
ii+1+w

bgr
i+1j .

the proposed approach is 10 times faster than a
high-performance commercial ILP solver.

2 Task Definition

We define the sentence compression task as: given
a sentence composed of n words, x = x1, . . . , xn,
and a length L ≤ n, we need to remove (n − L)
words from x, so that the sum of the weights of
the dependency tree and word bigrams of the re-
maining part is maximized. Formally, we solve
the following optimization problem:

max
z,y

∑
i

wtoki zi +
∑
i,j

w
dep
ij zizjyij (1)

+
∑
i<j

w
bgr
ij zizj

∏
i<k<j

(1− zk)

s.t. z is binary ,
∑

i

zi = L

y is a projective parse tree over the

subgraph: {xi|zi = 1}

where z is a binary vector, zi indicates xi is kep-
t or not. y is a square matrix denoting the pro-
jective dependency parse tree over the remaining
words, yij indicates if xi is the head of xj (note
that each word has exactly one head). wtoki is the
informativeness of xi, w

bgr
ij is the score of bigram

xixj in an n-gram model, wdep is the score of de-
pendency arc xi → xj in an arc-factored depen-
dency parsing model. Hence, the first part of the
objective function is the total score of the kep-
t words, the second and third parts are the scores
of the parse tree and bigrams of the compressed
sentence, zizj

∏
i<k<j(1− zk) = 1 indicates both

xi and xj are kept, and are adjacent after compres-
sion. A graph illustration of the objective function
is shown in Figure 2.

Warren says steadythe economy continues the improvementROOT

Figure 3: Connect deleted words using virtual arc-
s.

3 Proposed Method

3.1 Eisner’s Cubic Time Parsing Algorithm

Throughout the paper, we assume that all the parse
trees are projective. Our method is a generaliza-
tion of Eisner’s dynamic programming algorithm
(Eisner, 1996), where two types of structures are
used in each iteration, incomplete spans and com-
plete spans. A span is a subtree over a number of
consecutive words, with the leftmost or the right-
most word as its root. An incomplete span denoted
as Iij is a subtree inside a single arc xi → xj , with
root xi. A complete span is denoted as Cij , where
xi is the root of the subtree, and xj is the furthest
descendant of xi.

Eisner’s algorithm searches the optimal tree in
a bottom up order. In each step, it merges two
adjacent spans into a larger one. There are two
rules for merging spans: one merges two complete
spans into an incomplete span, the other merges an
incomplete span and a complete span into a large
complete span.

3.2 Exact O(n6) Time Algorithm

First we consider an easy case, where the bigram
scores wbgrij in the objective function are ignored.

The scores of unigrams wtoki can be transfered
to the dependency arcs, so that we can remove al-
l linear terms wtoki zi from the objective function.
That is: ∑

i

wtoki zi +
∑
i,j

w
dep
ij zizjyij

=
∑
i,j

(wdepij + w
tok
j )zizjyij

This can be easily verifed. If zj = 0, then in both
equations, all terms having zj are zero; If zj = 1,
i.e., xj is kept, since it has exactly one head word
xk in the compressed sentence, the sum of the
terms having zj is wtokj + w

dep
kj for both equations.

Therefore, we only need to consider the scores
of arcs. For any compressed sentence, we could
augment its dependency tree by adding a virtual

328



i         i+1i          i+1

+ =

i          jr+1      j

+ =

i       r

i          ji+1        j

+ =

i         i+1

... ...

i          jr           j

+ =

i           r

Case 1

Case 2

Case 3

Case 4

Figure 4: Merging rules for dependency-factored
sentence compression. Incomplete spans and
complete spans are represented by trapezoids and
triangles respectively.

arc i− 1 → i for each deleted word xi. If the first
word x1 is deleted, we connect it to the root of the
parse tree x0, as shown in Figure 3. In this way,
we derive a full parse tree of the original sentence.
This is a one-to-one mapping. We can reversely
get the the compressed parse tree by removing all
virtual arcs from the full parse tree. We restrict
the score of all the virtual arcs to be zero, so that
scores of the two parse trees are equivalent.

Now the problem is to search the optimal full
parse tree with n− L virtual arcs.

We modify Eisner’s algorithm by adding a sig-
nature to each span indicating the number of vir-
tual arcs within the span. Let Iij(k) and C

i
j(k)

denote the incomplete and complete spans with k
virtual arcs respectively. When merging two span-
s, there are 4 cases, as shown in Figure 4.

• Case 1 Link two complete spans by a virtual
arc : Iii+1(1) = C

i
i (0) + C

i+1
i+1 (0).

The two complete spans must be single word-
s, as the length of the virtual arc is 1.

• Case 2 Link two complete spans by a non-
virtual arc: Iij(k) = C

i
r(k

′)+Cjr+1(k
′′), k′ +

k′′ = k.

• Case 3 Merge an incomplete span and a com-
plete span. The incomplete span is covered
by a virtual arc: Iij(j − i) = Iii+1(1) +
Ci+1j (j − i − 1). The number of the virtu-
al arcs within Ci+1j must be j − i − 1, since

the descendants of the modifier of a virtual
arc xj must be removed.

• Case 4 Merge an incomplete span and a com-
plete span. The incomplete span is covered
by a non-virtual arc: Cij(k) = I

i
r(k

′) +
Crj (k

′′), k′ + k′′ = k.

The score of the new span is the sum of the two
spans. For case 2, the weight of the dependency
arc i → j, wdepij is also added to the final score.
The root node is allowed to have two modifiers:
one is the modifier in the compressed sentence, the
other is the first word if it is removed.

For each combination, the algorithm enumer-
ates the number of virtual arcs in the left and right
spans, and the split position (e.g., k′, k′′, r in case
2), thus it takes O(n3) running time. The overall
time complexity is O(n5) and the space complex-
ity is O(n3).

Next, we consider the bigram scores. The fol-
lowing proposition is obvious.

Proposition 1. For any right-headed span Iij or
Cij , i > j, words xi, xj must be kept.

Proof. Suppose xj is removed, there must be a vir-
tual arc j− 1 → j which is a conflict with the fact
that xj is the leftmost word. As xj is a descendant
of xi, xi must be kept.

When merging two spans, a new bigram is cre-
ated, which connects the rightmost kept words in
the left span and the leftmost kept word in the right
span. According to the proposition above, if the
right span is right-headed, its leftmost word is kep-
t. If the right span is left-headed, there are two
cases: its leftmost word is kept, or no word in the
span is kept. In any case, we only need to consider
the leftmost word in the right span.

Let Iij(k, p) and C
i
j(k, p) denote the single and

complete span with k virtual arcs and the right-
most kept word xp. According to the proposition
above, we have, for any right-headed span p = i.

We slightly modify the two merging rules
above, and obtain:

• Case 2’ Link two complete spans by a
non-virtual arc: Iij(k, j) = C

i
r(k

′, p) +
Cjr+1(k

′′, j), k′ + k′′ = k. The score of the
new span is the sum of the two spans plus
w

dep
ij + w

bgr
p,r+1.

329



• Case 4’ Merge an incomplete span and a
complete span. The incomplete span is cov-
ered by a non-virtual arc. For left-headed
spans, the rule is Cij(k, q) = I

i
r(k

′, p) +
Crj (k

′′, q), k′ + k′′ = k, and the score of
the new span is the sum of the two span-
s plus wbgrpr ; for right-headed spans, the rule
is Cij(k, i) = I

i
r(k

′, i) + Crj (k
′′, r), and the

score of the new span is the sum of the two
spans.

The modified algorithm requires O(n6) running
time and O(n4) space complexity.

3.3 Approximate O(n4) Time Algorithm

In this section, we propose an approximate algo-
rithm where the length constraint

∑
i zi = L is re-

laxed by Lagrangian Relaxation. The relaxed ver-
sion of Problem (1) is

min
λ

max
z,y

∑
i

wtoki zi +
∑
i,j

w
dep
ij zizjyij (2)

+
∑
i<j

w
bgr
ij zizj

∏
i<k<j

(1− zk)

+λ(
∑

i

zi − L)

s.t. z is binary

y is a projective parse tree over the

subgraph: {xi|zi = 1}

Fixing λ, the optimal z,y can be found using a
simpler version of the algorithm above. We drop
the signature of the virtual arc number from each
span, and thus obtain an O(n4) time algorithm. S-
pace complexity is O(n3). Fixing z,y, the dual
variable is updated by

λ = λ + α(L−
∑

i

zi)

where α > 0 is the learning rate. In this paper, our
choice of α is the same as (Rush et al., 2010).

4 Experiments

4.1 Data and Settings

We evaluate our method on the data set from
(Clarke and Lapata, 2008). It includes 82
newswire articles with manually produced com-
pression for each sentence. We use the same par-
titions as (Martins and Smith, 2009), i.e., 1,188
sentences for training and 441 for testing.

Our model is discriminative – the scores of
the unigrams, bigrams and dependency arcs are
the linear functions of features, that is, wtoki =
vT f(xi), where f is the feature vector of xi, and v
is the weight vector of features. The learning task
is to estimate the feature weight vector based on
the manually compressed sentences.

We run a second order dependency parser
trained on the English Penn Treebank corpus to
generate the parse trees of the compressed sen-
tences. Then we augment these parse trees by
adding virtual arcs and get the full parse trees
of their corresponding original sentences. In this
way, the annoation is transformed into a set of
sentences with their augmented parse trees. The
learning task is similar to training a parser. We run
a CRF based POS tagger to generate POS related
features.

We adopt the compression evaluation metric as
used in (Martins and Smith, 2009) that measures
the macro F-measure for the retained unigrams
(Fugr), and the one used in (Clarke and Lapata,
2008) that calculates the F1 score of the grammat-
ical relations labeled by RASP (Briscoe and Car-
roll, 2002).

We compare our method with other 4 state-of-
the-art systems. The first is linear chain CRFs,
where the compression task is casted as a bina-
ry sequence labeling problem. It usually achieves
high unigram F1 score but low grammatical rela-
tion F1 score since it only considers the local inter-
dependence between adjacent words. The second
is the subtree deletion model (Berg-Kirkpatrick et
al., 2011) which is solved by integer linear pro-
gramming (ILP)2. The third one is the bigram
model proposed by McDonald (McDonald, 2006)
which adopts dynamic programming for efficient
inference. The last one jointly infers tree struc-
tures alongside bigrams using ILP (Thadani and
McKeown, 2013). For fair comparison, system-
s were restricted to produce compressions that
matched their average gold compression rate if
possible.

4.2 Features

Three types of features are used to learn our mod-
el: unigram features, bigram features and depen-
dency features, as shown in Table 1. We also use
the in-between features proposed by (McDonald et

2We use Gurobi as the ILP solver in the paper.
http://www.gurobi.com/

330



Features for unigram xi
wi−2, wi−1, wi, wi+1, wi+2
ti−2, ti−1, ti, ti+1, ti+2
witi
wi−1wi, wiwi+1
ti−2ti−1, ti−1ti, titi+1, ti+1ti+2
ti−2ti−1ti, ti−1titi+1, titi+1ti+2
whether wi is a stopword
Features for selected bigram xixj
distance between the two words: j − i
wiwj , wi−1wj , wi+1wj , wiwj−1, wiwj+1
titj , ti−1tj , ti+1tj , titj−1, titj+1
Concatenation of the templates above
{titktj |i < k < j}
Dependency Features for arc xh → xm
distance between the head and modifier h−m
dependency type
direction of the dependency arc (left/right)
whwm, wh−1wm, wh+1wm, whwm−1, whwm+1
thtm, th−1tm, th+1tm, thtm−1, thtm+1
th−1thtm−1tm, thth+1tm−1tm
th−1thtmtm+1, thth+1tmtm+1
Concatenation of the templates above
{thtktm|xk lies between xh and xm}

Table 1: Feature templates. wi denotes the word
form of token xi and ti denotes the POS tag of xi.

al., 2005), which were shown to be very effective
for dependency parsing.

4.3 Results

We show the comparison results in Table 2. As
expected, the joint models (ours and TM13) con-
sistently outperform the subtree deletion model, s-
ince the joint models do not suffer from the sub-
tree restriction. They also outperform McDon-
ald’s, demonstrating the effectiveness of consid-
ering the grammar structure for compression. It
is not surprising that CRFs achieve high unigram
F scores but low syntactic F scores as they do not

System C Rate Funi RASP Sec.
Ours(Approx) 0.68 0.802 0.598 0.056
Ours(Exact) 0.68 0.805 0.599 0.610

Subtree 0.68 0.761 0.575 0.022
TM13 0.68 0.804 0.599 0.592

McDonald06 0.71 0.776 0.561 0.010
CRFs 0.73 0.790 0.501 0.002

Table 2: Comparison results under various quality
metrics, including unigram F1 score (Funi), syn-
tactic F1 score (RASP), and compression speed
(seconds per sentence). C Rate is the compression
ratio of the system generated output. For fair com-
parison, systems were restricted to produce com-
pressions that matched their average gold com-
pression rate if possible.

consider the fluency of the compressed sentence.
Compared with TM13’s system, our model with

exact decoding is not significantly faster due to the
high order of the time complexity. On the oth-
er hand, our approximate approach is much more
efficient, about 10 times faster than TM13’ sys-
tem, and achieves competitive accuracy with the
exact approach. Note that it is worth pointing
out that the exact approach can output compressed
sentences of all lengths, whereas the approximate
method can only output one sentence at a specific
compression rate.

5 Conclusion

In this paper, we proposed two polynomial time
decoding algorithms using joint inference for sen-
tence compression. The first one is an exac-
t dynamic programming algorithm, and requires
O(n6) running time. This one does not show
significant advantage in speed over ILP. The sec-
ond one is an approximation of the first algorith-
m. It adopts Lagrangian relaxation to eliminate the
compression ratio constraint, yielding lower time
complexity TO(n4). In practice it achieves nearly
the same accuracy as the exact one, but is much
faster.3

The main assumption of our method is that the
dependency parse tree is projective, which is not
true for some other languages. In that case, our
method is invalid, but (Thadani and McKeown,
2013) still works. In the future, we will study the
non-projective cases based on the recent parsing
techniques for 1-endpoint-crossing trees (Pitler et
al., 2013).

Acknowledgments

We thank three anonymous reviewers for their
valuable comments. This work is partly support-
ed by NSF award IIS-0845484 and DARPA under
Contract No. FA8750-13-2-0041. Any opinion-
s expressed in this material are those of the au-
thors and do not necessarily reflect the views of
the funding agencies.

References
Taylor Berg-Kirkpatrick, Dan Gillick, and Dan Klein.

2011. Jointly learning to extract and compress. In
Proceedings of ACL-HLT, pages 481–490, June.

3Our code is available at http://code.google.com/p/sent-
compress/

331



T. Briscoe and J. Carroll. 2002. Robust accurate statis-
tical annotation of general text.

Yllias Chali and Sadid A. Hasan. 2012. On the effec-
tiveness of using sentence compression models for
query-focused multi-document summarization. In
Proceedings of COLING, pages 457–474.

James Clarke and Mirella Lapata. 2008. Global in-
ference for sentence compression: An integer linear
programming approach. J. Artif. Intell. Res. (JAIR),
31:399–429.

Trevor Cohn and Mirella Lapata. 2009. Sentence
compression as tree transduction. J. Artif. Int. Res.,
34(1):637–674, April.

Jason M. Eisner. 1996. Three new probabilistic mod-
els for dependency parsing: an exploration. In Pro-
ceedings of COLING.

Pierre-Etienne Genest and Guy Lapalme. 2012. Fully
abstractive approach to guided summarization. In
Proceedings of the ACL, pages 354–358.

Chen Li, Fei Liu, Fuliang Weng, and Yang Liu. 2013.
Document summarization via guided sentence com-
pression. In Proceedings of EMNLP, October.

Fei Liu and Yang Liu. 2009. From extractive to ab-
stractive meeting summaries: Can it be done by
sentence compression? In Proceedings of ACL-
IJCNLP 2009, pages 261–264, August.

André F. T. Martins and Noah A. Smith. 2009. Sum-
marization with a joint model for sentence extraction
and compression. In Proceedings of the Workshop
on Integer Linear Programming for Natural Lan-
gauge Processing, pages 1–9.

Ryan McDonald, Koby Crammer, and Fernando
Pereira. 2005. Online large-margin training of de-
pendency parsers. In Proceedings of ACL.

Ryan McDonald. 2006. Discriminative Sentence
Compression with Soft Syntactic Constraints. In
Proceedings of EACL, April.

Hajime Morita, Ryohei Sasano, Hiroya Takamura, and
Manabu Okumura. 2013. Subtree extractive sum-
marization via submodular maximization. In Pro-
ceedings of ACL, pages 1023–1032, August.

Emily Pitler, Sampath Kannan, and Mitchell Marcus.
2013. Finding optimal 1-endpoint-crossing trees. In
Transactions of the Association for Computational
Linguistics, 2013 Volume 1.

Xian Qian and Yang Liu. 2013. Fast joint compression
and summarization via graph cuts. In Proceedings
of EMNLP, pages 1492–1502, October.

Alexander M Rush, David Sontag, Michael Collins,
and Tommi Jaakkola. 2010. On dual decomposi-
tion and linear programming relaxations for natural
language processing. In Proceedings of EMNLP.

Kapil Thadani and Kathleen McKeown. 2013. Sen-
tence compression with joint structural inference. In
Proceedings of the CoNLL, August.

332


