



















































Riemannian Normalizing Flow on Variational Wasserstein Autoencoder for Text Modeling


Proceedings of NAACL-HLT 2019, pages 284–294
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

284

Riemannian Normalizing Flow on Variational Wasserstein Autoencoder
for Text Modeling

Prince Zizhuang Wang
Department of Computer Science

University of California, Santa Barbara
zizhuang wang@ucsb.edu

William Yang Wang
Department of Computer Science

University of California, Santa Barbara
william@cs.ucsb.edu

Abstract

Recurrent Variational Autoencoder has been
widely used for language modeling and text
generation tasks. These models often face a
difficult optimization problem, also known as
the Kullback-Leibler (KL) term vanishing is-
sue, where the posterior easily collapses to the
prior, and the model will ignore latent codes
in generative tasks. To address this problem,
we introduce an improved Wasserstein Varia-
tional Autoencoder (WAE) with Riemannian
Normalizing Flow (RNF) for text modeling.
The RNF transforms a latent variable into a
space that respects the geometric character-
istics of input space, which makes posterior
impossible to collapse to the non-informative
prior. The Wasserstein objective minimizes
the distance between the marginal distribution
and the prior directly, and therefore does not
force the posterior to match the prior. Empir-
ical experiments show that our model avoids
KL vanishing over a range of datasets and has
better performances in tasks such as language
modeling, likelihood approximation, and text
generation. Through a series of experiments
and analysis over latent space, we show that
our model learns latent distributions that re-
spect latent space geometry and is able to gen-
erate sentences that are more diverse. 1

1 Introduction

Variational Autocoder (VAE) (Kingma and
Welling, 2013; Rezende and Mohamed, 2015)
is a probabilistic generative model shown to
be successful over a wide range of tasks such
as image generation (Gregor et al., 2015; Yan
et al., 2016), dialogue generation (Zhao et al.,
2017b), transfer learning (Shen et al., 2017), and
classification (Jang et al., 2017). The encoder-
decoder architecture of VAE allows it to learn a

1Code could be found at https://github.com/
kingofspace0wzz/wae-rnf-lm

continuous space of latent representations from
high-dimensional data input and makes sampling
procedure from such latent space very straightfor-
ward. Recent studies also show that VAE learns
meaningful representations that encode non-trivial
information from input (Gao et al., 2018; Zhao
et al., 2017a).

Applications of VAE in tasks of Natural Lan-
guage Processing (Bowman et al., 2015; Zhao
et al., 2017b, 2018; Miao et al., 2016) is not as suc-
cessful as those in Computer Vision. With long-
short-term-memory network (LSTM) (Hochre-
iter and Schmidhuber, 1997) used as encoder-
decoder model, the recurrent variational autoen-
coder (Bowman et al., 2015) is the first ap-
proach that applies VAE to language modeling
tasks. They observe that LSTM decoder in VAE
often generates texts without making use of la-
tent representations, rendering the learned codes
as useless. This phenomenon is caused by an op-
timization problem called KL-divergence vanish-
ing when training VAE for text data, where the
KL-divergence term in VAE objective collapses
to zero. This makes the learned representations
meaningless as zero KL-divergence indicates that
the latent codes are independent of input texts.

Many recent studies are proposed to address this
key issue. Yang et al. (2017); Semeniuta et al.
(2017) use convolutional neural network as de-
coder architecture to limit the expressiveness of
decoder model. Xu and Durrett (2018); Zhao
et al. (2017a,b, 2018) seek to learn different la-
tent space and modify the learning objective. And,
even though not designed to tackle KL vanish-
ing at the beginning, recent studies on Normaliz-
ing Flows (Rezende and Mohamed, 2015; van den
Berg et al., 2018) learn meaningful latent space as
it helps to transform an over-simplified latent dis-
tribution into more flexible distributions.

In this paper, we propose a new type of flow,

https://github.com/kingofspace0wzz/wae-rnf-lm
https://github.com/kingofspace0wzz/wae-rnf-lm


285

called Riemannian Normalizing Flow (RNF), to-
gether with the recently developed Wasserstein
objective (Tolstikhin et al., 2018; Arjovsky et al.,
2017), to ensure VAE models more robust against
the KL vanishing problem. As further explained
in later sections, the Wasserstein objective helps
to alleviate KL vanishing as it only minimizes the
distance between latent marginal distribution and
the prior. Moreover, we suspect that the prob-
lem also comes from the over-simplified prior as-
sumption about latent space. In most cases, the
prior is assumed to be a standard Gaussian, and
the posterior is assumed to be a diagonal Gaussian
for computational efficiency. These assumptions,
however, are not suitable to encode intrinsic char-
acteristics of input into latent codes as in reality
the latent space is likely to be far more complex
than a diagonal Gaussian.

The RNF model we proposed in this paper thus
helps the situation by encouraging the model to
learn a latent space that encodes some geometric
properties of input space with a well-defined ge-
ometric metric called Riemannian metric tensor.
This renders the KL vanishing problem as impos-
sible since a latent distribution that respects input
space geometry would only collapse to a standard
Gaussian when the input also follows a standard
Gaussian, which is never the case for texts and
sentences datasets. We then empirically evalu-
ate our RNF Variational Wasserstein Autoencoder
on standard language modeling datasets and show
that our model has achieved state-of-the-art per-
formances. Our major contributions can be sum-
marized as the following:

• We propose Riemannian Normalizing Flow,
a new type of flow that uses the Riemannian
metric to encourage latent codes to respect
geometric characteristics of input space.

• We introduce a new Wasserstein objective
for text modeling, which alleviates KL diver-
gence term vanishing issue, and makes the
computation of normalizing flow easier.

• Empirical studies show that our model pro-
duces state-of-the-art results in language
modeling and is able to generate meaningful
text sentences that are more diverse.

2 Related Work

2.1 Variational Autoencoder
Given a set of data x = (x1, x2, ..., xn), a
Variational Autoencoder (Kingma and Welling,
2013) aims at learning a continuous latent vari-
able that maximizes the log-likelihood log p(x) =
log
∫
pθ(x|z)p(z)dz. Since this marginal is of-

ten intractable, a variational distribution qφ(z|x)
is used to approximate the true posterior distribu-
tion pθ(z|x). VAE tries to maximize the following
lower bound of likelihood,

L(θ;φ;x) = Eq(x)[Eqφ(z|x)[log pθ(x|z)] (1)
−KL(qφ(z|x)||p(z))] (2)

where q(x) is the empirical distribution of input,
and the prior p(z) is often assumed to be a stan-
dard Gaussian for simplicity. The first term in
the objective is the reconstruction error, and the
second one is KL divergence. For modeling text
sentences, Bowman et al. (2015) parameterizes
both the inference model q(z|x) and the genera-
tive model p(x|z) as LSTMs. The reparameteri-
zation trick proposed by Rezende and Mohamed
(2015) is used to train these two models jointly.

2.2 KL Divergence Term Vanishing
Since the generative model is often an LSTM that
has strong expressiveness, the reconstruction term
in the objective will dominate KL divergence term.
In this case, the model is able to generate texts
without making effective use of latent codes as the
latent variable z becomes independent from input
when KL divergence term collapses to zero.

There are two main approaches to address this
issue. One is to explore different choices of the
decoder model to control the expressiveness of
LSTM. Yang et al. (2017) and Semeniuta et al.
(2017) use CNN as an alternative to LSTM. The
dilation technique used by Yang et al. (2017) also
helps to control the trade-off between decoder ca-
pacity and KL vanishing. The other approach is
to change the form of latent distribution and to
modify the training objective. Xu and Durrett
(2018) proposes to use hyperspherical distribution
and shows that the KL vanishing problem does
not happen in hypersphere. The infoVAE (Zhao
et al., 2017a) argues that VAE objective is anti-
informatics which encourages KL divergence to
be zero. They, therefore, add a mutual information
term I(z;x) explicitly to ensure that latent vari-
able z encodes non-trivial information about x, in



286

which case the KL would be greater than zero as
z is no longer independent from x. In a similar
manner, Xiao et al. (2018) introduces a Dirichlet
latent variable to force latent codes to learn use-
ful topic information given input documents. He
et al. (2019) and Kim et al. (2018) achieve the
current state-of-the-art in terms of sample perplex-
ity. Moreover, the bag-of-words loss used by Zhao
et al. (2017b) also dramatically alleviates KL van-
ishing while not sacrificing sample quality. In
Section 3 and Section 4, we introduce RNF with
Wasserstein objective. Our proposed model also
lies in the direction which seeks to learn more flex-
ible latent distribution, as the main advantage of
RNF is to ensure a flexible latent space able to cap-
ture geometric characteristics of input space.

3 Background

In this section, we review the basic concepts
of Riemannian geometry, normalizing flow, and
Wasserstein Autoencoder. We then introduce our
new Riemannian normalizing flow in Section 4.

3.1 Riemannian Geometry Review
Consider an input space X ⊂ RD, a d-
dimensional (d < D) manifold is a smooth sur-
face of points embedded in X . Given a mani-
foldM, a Riemannian manifold is a metric space
(M, G), where G is the Riemannian metric ten-
sor that assigns an inner product to every point on
the manifold. More formally, a Riemannian met-
ric G : Z → Rd×d is defined as a smooth function
such that for any two vectors u, v in the tangent
space TzM of each point z ∈ M, it assigns the
following inner product for u and v,

< u, v >G= u
TG(z)v (3)

The Riemannian metric helps us to characterize
many intrinsic properties of a manifold. Consider
an arbitrary smooth curve γ(t) : [a, b] →M on a
given manifoldM with a Riemannian metric ten-
sor G, the length of this curve is given by

L(γ) =
∫ b
a
||γ′(t)||dt

=

∫ b
a

√
< γ′t, γ

′
t >Gdt

=

∫ b
a

√
γ′Tt G(γt)γ

′
tdt (4)

where γ′t is the curve velocity and lies in the tan-
gent space TγtM at point γ(t). When the metric

tensor G is equal to 1 everywhere on the curve,
it becomes a metric tensor on Euclidean space,
where the length of curve is defined as the integral

of the velocity function, L(γ) =
∫ b
a

√
γ′Tt γ

′
tdt =∫ b

a γ
′
tdt. Given the definition of curve length, the

geodesic path between any two points can be de-
fined as the curve that minimizes the curve length
γ. Namely, if γt is the geodesic curve connecting
γ(a) and γ(b), then

γt = argmin
γ
L(γ) (5)

Practically, a geodesic line is often found by op-
timizing the following energy function,

E(γ) =
1

2

∫ b
a
γ′
T
t G(γt)γ

′
tdt

γt = argmin
γ

E(γ) (6)

Note that the Euclidean metric is a special case of
Riemannian metric. The more general metric ten-
sor G gives us a sense of how much Riemannian
geometry deviates from Euclidean geometry.

3.2 Review: Normalizing Flow
The powerful inference model of VAE can approx-
imate the true posterior distribution through varia-
tional inference. The choice of this approximated
posterior is one of the major problems. For com-
putational efficiency, a diagonal Gaussian distri-
bution is often chosen as the form of the posterior.
As the covariance matrix is always assumed to be
diagonal, the posterior fails to capture dependen-
cies among individual dimensions of latent codes.
This poses a difficult problem in variational infer-
ence. As it is unlikely that the true posterior has
a diagonal form, the approximated diagonal dis-
tribution is not flexible enough to match the true
posterior even in asymptotic time.

A normalizing flow, developed by (Rezende and
Mohamed, 2015), is then introduced to transform
a simple posterior to a more flexible distribution.
Formally, a series of normalizing flows is a set of
invertible, smooth transformations ft : Rd → Rd,
for t = 1, ..., T , such that given a random vari-
able z0 with distribution q(z0), the resulting ran-
dom variable zT = (fT ◦ fT−1 ◦ ... ◦ f1)(z0) has
the following density function,

q(zT ) = q(z0)
T∏
t=1

|det ∂f
−1
t

∂zt−1
| (7)



287

Since each transformation fi for i = 1, ..., T
is invertible, its Jacobian determinant exists and
can be computed. By optimizing the modified ev-
idence lower bound objective,

ln p(x) ≥ Eq(z0|x)
[

ln p(x|zT ) +
T∑
t=1

ln |det ∂ft
∂zt−1

|
]

−KL(q(z0|x)||p(zT )) (8)

the resulting latent codes zT will have a more flex-
ible distribution.

Based on how the Jacobian-determinant is com-
puted, there are two main families of normal-
izing flow (Tomczak and Welling, 2016; Berg
et al., 2018): general normalizing flow and vol-
ume preserving flow. While they both search for
flexible transformation that has easy-to-compute
Jacobian-determinant, the volume-preserving flow
aims at finding a specific flow whose Jacobian-
determinant equals 1, which simplifies the opti-
mization problem in equation (6). Since we want
a normalizing flow that not only gives flexible
posterior but also able to uncover the true geo-
metric properties of latent space, we only con-
sider general normalizing flow whose Jacobian-
determinant is not a constant as we need it to
model the Riemannian metric introduced earlier.

3.3 Wasserstein Autoencoder
Wasserstien distance has been brought to genera-
tive models and is shown to be successful in many
image generation tasks (Tolstikhin et al., 2018; Ar-
jovsky et al., 2017; Bousquet et al., 2017). In-
stead of maximizing the evidence lower bound
as VAE does, the Wasserstein Autoencoder (Tol-
stikhin et al., 2018) optimizes the optimal trans-
port cost (Villani, 2008) between the true data
distribution PX(x) and the generative distribution
PG(x). This leads to the Wasserstein objective,

D(PX , PG) = inf
Q(Z|X)∈Q

EPX EQ(Z|X)[c(X,G(Z))]

+ λDZ(QZ , PZ) (9)

where c(·) is the optimal transport cost, G : Z →
X is any generative function, and the coefficient
λ controls the strength of regularization term DZ .
Given a positive-definite reproducing kernel k :
Z × Z → R, the regularization term DZ can
be approximated by the Maximum Mean Discrep-
ancy (MMD) (Gretton et al., 2012) between the
prior PZ and the aggregate posterior QZ(z) =

Figure 1: Parameterization of the input manifold by la-
tent space and generative function f . J is the Jacobian
tangent space at a point on the manifold, which reflects
how curved the neighborhood is around that point.∫
q(z|x)p(x)dx,

MMDk(PZ , QZ) = ||
∫
Z
k(z, ·)dPZ −

∫
Z
k(z, ·)dQZ ||

(10)

4 Our Approach

In this section we propose our Riemannian Nor-
malizing Flow (RNF). RNF is a new type of flow
that makes use of the Riemannian metric tensor
introduced earlier in Section 3. This metric en-
forces stochastic encoder to learn a richer class of
approximated posterior distribution in order to fol-
low the true geometry of latent space, which helps
to avoid the local optimum in which posterior col-
lapses to a standard prior. We then combine this
with WAE and we will explain why and how WAE
should be used to train with RNF.

4.1 Riemannian Normalizing Flow
In the context of VAE, learning a latent space that
is homeomorphic to input space is often very chal-
lenging. Consider a manifoldM ⊂ RD, a gener-
ator model x = f(z) : Z → RD serves as a low-
dimensional parameterization of manifoldMwith
respect to z ∈ Z . For most cases, latent spaceZ is
unlikely to be homeomorphic toM, which means
that there is no invertible mapping betweenM and
Z . And, since the inference model h : M → Z
is nonlinear, the learned latent space often gives a
distorted view of input space. Consider the case
in Figure 2, where the leftmost graph is the in-
put manifold, and the rightmost graph is the corre-
sponding latent space with curvature reflected by
brightness. Let us take two arbitrary points on the
manifold and search for the geodesic path connect-
ing these two points. If we consider the distorted
latent space as Euclidean, then the geodesic path
in latent space does not reflect the true shortest
distance between these two points on the mani-
fold, as a straight line in the latent space would



288

Figure 2: An example when latent space does not reflect input space. Left: a manifold that is highly curved in
the central region. The yellow line is the geodesic (shortest) path connecting two sample points shown on the
manifold. Right: The projection of manifold into 2D latent space, where the color brightness indicates curvature
with respect to the manifold. The green line is the geodesic path if taking the curvature into account, while the
blue line is the geodesic path if we regard latent space as Euclidean. Middle: The corresponding geodesic paths
projected back from latent space to manifold. The white line corresponds to the straight geodesic path in Euclidean
space. It is far longer than the true geodesic on manifold since it does not take the curvature into account in latent
space.

cross the whole manifold, while the true geodesic
path should circumvent this hole. This distortion
is caused by the non-constant curvature of latent
space. Hence, the latent space should be consid-
ered as a curved space with curvature reflected
by the Riemannian metric defined locally around
each point. As indicated by the brightness, we
see that the central area of latent space is highly
curved, and thus has higher energy. The geodesic
path connecting the two latent codes minimizes
the energy function E(γ) = 12

∫
γ′Tt G(γt)γ

′
tdt,

indicating that it should avoid those regions with
high curvature G.

The question now becomes how to impose this
intrinsic metric and curvature into latent space.
In this paper, we propose a new form of nor-
malizing flow to incorporate with this geometric
characteristic. First, consider a normalizing flow
f : Z → Z ′, we can compute length of a curve in
the transformed latent space Z ′,

L(f(γt)) =
∫ b
a
||Jγtγ′t||dt

=

∫ b
a

√
γ′tJ

T
γtJγtγ

′
tdt

=

∫ b
a

√
γ′tG(γt)γ

′
tdt (11)

where

γt : [a, b]→ Z ′, a, b ∈ Z

Jγt =
∂f

∂z

∣∣∣
z=γt

G(γt) = J
T
γtJγt

= (
∂f

∂z
)T (

∂f

∂z
)
∣∣∣
z=γt

(12)

Jγt is the Jacobian matrix defined at γt. In our
case, the Riemannian metric tensor G is the inner
product of Jacobian Jγt and is therefore symmet-
ric positive definite. It reflects input space curva-
ture in low-dimensional parameterization Z ′. In
a highly curved region, the metric tensor G =
JTJ is larger than those in other areas, indicat-
ing that the latent representation of input mani-
fold has lower curvature, or area of low energy,
as any geodesic connecting each pair of points on
the manifold favors lower energy path. This im-
plies that those regions outside of data manifold
should have high curvature reflected in their low-
dimensional parameterization Z ′.

In this paper, we introduce Riemannian nor-
malizing flow (RNF) to model curvature. For
simplicity, we build our model based on planar
flow (Rezende and Mohamed, 2015). A planar
flow is an invertible transformation that retracts
and extends the support of original latent space
with respect to a plane. Mathematically, a planar
flow f : Z → Z ′ has the form,

f(z) = z + uh(wTz + b) (13)

where h : Rd → Rd is any smooth non-linear
function and is often chosen as tanh(·). The in-
vertibiliy condition is satisfied as long as uTw ≥
−1. Its Jacobian-determinant with respect to latent
codes z is very each to compute,

|det∂f
∂z
| = |1 + uTφ(z)w|

φ(z) = h′(wTz + b) (14)

With the Jacobian-determinant of planar flow, it
is straightforward to compute the determinant of
metric tensor G. To see that, note that since ∂f∂z :



289

Rd → Rd is a square matrix with full column rank
due to invertibility of f , we have

|det G| =
∣∣∣∂f
∂z

T ∣∣∣∣∣∣∂f
∂z

∣∣∣ =∣∣∣∂f
∂z

∣∣∣2 (15)
To ensure well-behaved geometry in a trans-

formed latent space, we need the Jacobian-
determinant |∂f∂z | to be large in region with high
curvature |det G|. Hence, we propose to model
the metric tensor with the inverse multiquadratics
kernel function K used by (Tolstikhin et al., 2018)
and a Gaussian kernel, that is,

Km(z, ck) = C/(C + ||z− ck||22)
k = argmin ||z− ck||22

Kg(z, ck) = exp (−βk||z− zk||22)

where ck, k = 1, 2, 3, ...,K are clusters of latent
codes, and βk is the bandwidth. We observe that
the inverse multiquadratics kernel Km generally
performs better. We use the above kernels as con-
straints over the Jacobian-determinant, so that,

|det∂f
′

∂z
| = |1 + uT(z)φ(z)w| · K(z, ck) (16)

As we explained earlier in this section, latent rep-
resentation of region outside of input manifold
should have high curvature in latent space. During
training, we seek to maximize this regularized Ja-
cobian |det∂f

′

∂z | rather than the original one. This
ensures that those latent codes within latent clus-
ters, and therefore very likely to be on or near in-
put manifold in input space, have much smaller
curvature |det G| = |∂f∂z |

2 than those outside of
latent clusters, as those outside of manifold would
seek larger Jacobian in order to counter-effect the
regularization term K. The latent space Z ′ trans-
formed by normalizing flow f is thus curved with
respect to input manifold. This type of normaliz-
ing flow thus learns a latent space to respect geo-
metric characteristics of input space. The KL van-
ishing problem is then unlikely to happen with a
curved latent space. This is because most high-
dimensional data in real life forms a curved mani-
fold which is unlikely sampled from a multivariate
standard Gaussian. Then, if the latent space re-
flects curvature of a curved manifold, the support
of latent codes certainly does not follow a stan-
dard Gaussian either. This helps to push the poste-
rior q(z|x) away from the standard Gaussian and
never collapse to a non-informative prior.

4.2 RNF Wasserstein Autoencoder
Here we consider using the Wasserstein objec-
tive to model the latent marginal distribution of
a curved latent space learned by an RNF. The
Wasserstein objective with MMD is appealing in
our case for two main reasons.

First, instead of minimizing the KL-divergence
KL(q(z|x)||p(z)), it minimizes distance between
q(z) =

∫
q(z|x)p(x)dx and p(z), which encour-

ages the marginal distribution of latent space to
be as close as the prior while not affecting in-
dividual posterior distribution q(z|x) conditioned
on each input. This makes the KL-divergence
between posterior and prior, and equivalently the
mutual information between latent codes and input
sentences I(z,x) = KL(q(z,x)||q(z)p(x)) =
Ep(x)[KL(q(z|x)||p(z))] − KL(q(z)||p(z)) im-
possible to be vanished as the objective does not
require it to be small. Since the learned latent
codes and input sentences have non-zero mutual
information, the generative model will not ignore
latent codes when generating texts.

Second, the MMD regularization in WAE
makes it possible to optimize normalizing flow
without computing the Jacobian-determinant ex-
plicitly. The use of MMD is necessary as getting
a closed form KL divergence is no-longer possible
after we apply RNF to the posterior. And, since the
generative functionG in the reconstruction term of
Wasserstein objective can be any function or com-
position of functions (Tolstikhin et al., 2018), we
can easily compose an RNF function into G such
that the reconstructed texts are X̄ = G(f(Z)) =
G(Z ′), Z ′ ∈ Z ′.

Now, given a series of RNFF = fK◦...◦f1, and
letZK be the curved latent space after applyingK
flows over the original latent spaceZ , we optimize
the following RNF-Wasserstein objective,

D(PX , PG) = inf
Q(Z|X)∈Q

EPX EQ(Z|X)[c(X,G(Z
′))]

+ λMMD(QZ′ , PZ′)

+ α(KL(q(z|x)||p(z))−
∑

log |det∂f
′

∂z
|)

(17)

where Z ∼ Z , Z ′ ∼ Z ′, and Z ′ =
F (Z). We approximate MMD term with
the Gaussian kernel k(z, z′) = e−||z−z

′||2 ,
that is, MMD(p, q) = Ep(z),p(z′)[k(z, z′)] +
Eq(z),q(z′)[k(z, z′)]− 2Ep(z),q(z′)[k(z, z′)].

Here we choose to minimize the MMD distance



290

Model PTB YAHOO YELP
NLL(KL) PPL NLL(KL) PPL NLL(KL) PPL

LSTM-LM ** 116.2 (-) 104.2 334.9 (-) 66.2 - -
VAE 105.2 (1.74) 121.1 339.2 (0.01) 69.9 198.6 (0.01) 55.0
VAE-NF 96.8 (0.87) 82.9 353.8 (0.10) 83.0 200.4 (0.10) 62.5
lagging-VAE ** - - 326.6 (6.70) 64.9 –
vmf-VAE 96.0 (5.70) 79.6 359.3 (17.9) 89.9 198.0 (6.40) 54.0
WAE-RNF 91.9 (15.4) 66.1 339.0 (3.00) 71.6 183.9 (12.7) 41.1

Table 1: Language Modeling results on PTB, YAHOO and YELP 13 Reviews. ** are results gathered from (Yang
et al., 2017; Xiao et al., 2018; He et al., 2019). Negative log-likelihood (NLL) is approximated by its lower bound,
where the number in parentheses indicates KL-divergence. NF stands for the standard planar normalizing flow
without Riemannian curvature.

Data PTB Yelp
Model NLL Re-KL Log-J PPL NLL Re-KL Log-J PPL
WAE 104.9 –(1.9) – 131. 198.5 –(1.9) – 55
WAE-NF 92.3 14.3 14.3 67.3 184.3 13.9 14.2 41.4
WAW-RNF 91.9 15.4 15.2 66.1 183.9 12.7 12.1 41.1

Table 2: Language Modeling using WAE-RNF. We report NLL, PPL, Sum of Log Jacobian, and KL divergence
between q(z′|x) and p(z′).

between the prior PZ and the marginal of non-
curved latent space. This makes sampling proce-
dure for generation tasks much easier, as it is easy
to sample a latent code from a non-informative
prior. We can get a sample z′ from Z ′ indirectly
by sampling: z ∼ PZ(z) and z′ ∼ F (z). On
the other hand, it would be much more difficult to
sample from a curved latent space Z ′ directly as
the only prior knowledge we have about Z ′ is the
curvature reflected by RNF implicitly and hence
we do not know the support of Q(Z ′).

5 Experimental Results

In this section, we investigate WAE’s performance
with Riemannian Normalizing Flow over language
and text modeling.

5.1 Datasets
We use Penn Treebank (Marcus et al., 1993), Yelp
13 reviews (Xu et al., 2016), as in (Xu and Durrett,
2018; Bowman et al., 2015), and Yahoo Answers
used in (Xu and Durrett, 2018; Yang et al., 2017)
to follow and compare with prior studies. We limit
the maximum length of a sample from all datasets
to 200 words. The datasets statistics is shown in
Table 3.

5.2 Experimental Setup
For each model, we set the maximum vocabu-
lary size to 20K and the maximum length of in-
put to 200 across all data sets. Following Bow-
man et al. (2015), we use one-layer undirectional

Data Train Dev Test Vocab
PTB 42068 3370 3761 10K
Yelp13 62522 7773 8671 15K
Yahoo 100K 10K 10K 20K

Table 3: Datasets statistics; The numbers reflect size
of each dataset. Vocab is the vocabulary size.

LSTM for both encoder-decoder models with hid-
den size 200. Latent codes dimension is set to 32
for all models. We share Word Embeddings of size
200. For stochastic encoders, both MLPµ and
MLPσ are two layer fully-connected networks
with hidden size 200 and a batch normalizing out-
put layer (Ioffe and Szegedy, 2015).

We use Adam (Kingma and Ba, 2015) with
learning rate set to 10−3 to train all models.
Dropout is used and is set to 0.2. We train all mod-
els for 48 epochs, each of which consists of 2K
steps. For models other than WAE, KL-annealing
is applied and is scheduled from 0 to 1 at the 21st
epoch.

For vmf-VAE (Xu and Durrett, 2018), we set
the word embedding dimension to be 512 and the
hidden units to 1024 for Yahoo, and set both of
them to 200 for PTB and Yelp. The temperature κ
is set to 80 and is kept constant during training.

For all WAE models, we add a small KL di-
vergence term to control the posterior distribution.
We found that if we only use RNF with MMD as
the distance metric, then the posterior may diverge
from the prior such that no reasonable samples can
be generated from a standard Gaussian variable.



291

Hence, for all data sets, we schedule the KL diver-
gence weight α from 0 to 0.8, and the weight of
the MMD term is set as λ = 10 − α. βk of RBF
is set to 10 for all models. For RNF, we use pre-
trained standard VAE models to gather the clusters
ck, k = 1, ...,K, of latent codes, where we set the
number of clusters to be 20. We use three normal-
izing flow for all experiments.

Hyperparameter of Km When us-
ing the inverse multiquadratics kernel
Km(z, ck) = C/(C + ||z − ck||22) for RNF, we
follow the choice of hyperparameter in (Tolstikhin
et al., 2018). We set C = 2 · d · s, where d is the
dimensionality of latent codes z, and s is ranged in
(0.1, 0.2, 0.5, 1, 2, 5, 10). The final kernel is com-
puted byKm(z, ck) =

∑
s 2ds/(2ds+||z−ck||22).

As explained by (Tolstikhin et al., 2018), this
strategy allows us to explore a wider range of
hyperparameter in one setting.

5.3 Language Modeling Results
We show the language modeling results for PTB,
Yahoo and Yelp in Table 1. We compare neg-
ative log-likelihood (NLL), KL divergence, and
perplexity (PPL) with all other existing methods.
The negative log-likelihood is approximated by its
lower bound.

We use the negative of ELBO to approximate
NLL for all VAE models. For those with normal-
izing flows, we use the modified ELBO, which
is L = Eq(z(0)|x)[log p(x|z(T )) − log q(z(0)|x) +
log p(z(T ))] + Eq(z(T ))[

∑T
t=1 log|

∂f (t)

∂z(t−1)
|].

The numbers show that KL-annealing and
dropout used by Bowman et al. (2015) are help-
ful for PTB, but for complex datasets such as Ya-
hoo and Yelp, the KL divergence still drops to
zero due to the over-expressiveness of LSTM. This
phenomenon is not alleviated by applying normal-
izing flow to make the posterior more flexible, as
shown in the third row. Part of the reason may be
that a simple NF such as a planar flow is not flex-
ible enough and is still dominated by a powerful
LSTM decoder.

We find that the KL vanishing is alleviated a lit-
tle bit if using WAE, which should be the case as
WAE objective does not require small KL. We also
find that simply applying a planar flow over WAE
does not improve the performance that much. On
the other hand, using RNF to train WAE dramat-
ically helps the situation which achieves the low-
est text perplexity on most conditions except for

Figure 3: PTB. Comparison between the amount of
mutual information stored in latent codes for different
models.

Figure 4: Yelp. Comparison between the amount of
mutual information stored in latent codes for different
models.

YAHOO Answers, where (He et al., 2019; Yang
et al., 2017; Kim et al., 2018) have the current
state-of-the-art results. We want to emphasize that
CNN-VAE (Yang et al., 2017) and SA-VAE (Kim
et al., 2018) are not directly comparable with other
current approaches. Here, we compare with mod-
els that use LSTM as encoder-decoder and have
similar time complexity, while the use of CNN as
decoder in CNN-VAE would dramatically change
the model expressiveness, and it is known that SA-
VAE’s time complexity (Kim et al., 2018; He et al.,
2019) is much higher than all other existing ap-
proaches.

5.4 How Good is Riemannian Latent
Representation?

Mutual information between Z ′ and X One
important question is how useful are latent vari-
ables. Since no metrics are perfect (Wang et al.,
2018), we should not just look at sample perplex-
ity to judge how good a latent code is. Hence, we
also investigate how much information can be en-
coded into latent codes. We believe that the mu-
tual information term I(z;x) is a better metric re-
garding the usefulness of latent codes than sample



292

the company said it will be sold to the company ’s promotional programs and UNK
the company also said it will sell $ n million of soap eggs turning millions of dollars
the company said it will be UNK by the company ’s UNK division n
the company said it would n’t comment on the suit and its reorganization plan
this is a reflection of socialism and capitalism
the company also said it will sell its UNK division of the company ’s UNK
earlier this year the company said it will sell $ n billion of assets and UNK to the u.s
last year he said the company ’s earnings were n’t disclosed

one of my favorite places to eat at the biltmore . the food is good . and the food is good.
very good food . the food was very good . the service was great and the food is very good.
one of my favorite places to eat and a great breakfast spot . the food is great . the staff is friendly.
took a few friends to join me to the UNK . i was n’t sure what to expect.
one of my favorite places to eat at the biltmore . the food is good , the service was great .
i love the fact that they have a lot took a few friends to join me to the UNK .
i have been to this location a few times , but i ’ ve never been disappointed
let me start by saying that i love the idea of how to describe it .

Table 4: Qualitative comparison between VAE and our proposed approach. First row: PTB samples generated
from prior p(z) by VAE (upper half ) and WAE-RNF (lower half ). Second row: Yelp samples generated from
prior p(z) by VAE (upper half ) and WAE-RNF (lower half ).

perplexity, as it tells us directly how much infor-
mation we can infer from x by looking z.

We use Monte Carlo method (Metropo-
lis and Ulam, 1949) to get an approxima-
tion of I(z,x) = KL(q(z,x)||q(z)p(x)) =
Ep(x)[KL(q(z|x)||p(z))] − KL(q(z)||p(z)). We
compared mutual information between input x
and latent codes z sampled from Euclidean latent
space Z and Riemannian latent space Z ′ respec-
tively. We see that even though NF does not nec-
essarily help WAE to achieve the lowest perplex-
ity, it does make latent codes to preserve more
information about the input. For WAE trained
with RNF, sample perplexity and mutual infor-
mation metric are both good. It is cleary that
I(z′,x) > I(z,x), where z′ is sampled from the
curved space, and z is the sample transformed by
the normal planar flow. This further strengthens
our confidence over the usefulness of the curved
latent space Z ′.

Generating Texts from latent spaces Another
way to explore latent space is to look at the qual-
ity of generated texts. Here we compare sentences
generated from methods that do not use Wasser-
stein objective and RNF with those generated from
curved latent space Z ′ learned by WAE.

We observe that texts generated from flat Eu-
clidean space are not as diverse as the ones gen-
erated from curved space learned by WAE-RNF.
This is largely related to the nature of Wasserstein
objective. In WAE, the KL-divergence KL(q||p))
between the prior and the posterior q(z|x) condi-
tioned on each input x does not need to be small

to optimize the Wasserstein objective. This indi-
cates that the marginal q(z) is able to match to the
prior p(z) while allowing each posterior q(z|x)
to have a much more diverse support than that of
a standard Gaussian p(z). Therefore, if we ran-
domly generate samples from curved latent space
Z ′ many times, we are likely to get samples scat-
tered in different support of distinct posterior con-
ditioned on different input x. Hence, the recon-
structed sentences will have a much more diverse
meaning or structure.

6 Conclusion

In this paper, we introduced Riemannian Nor-
malizing Flow to train Wasserstein Autoencoder
for text modeling. This new model encourages
learned latent representation of texts to respect ge-
ometric characteristics of input sentences space.
Our results show that RNF WAE does significantly
improve the language modeling results by model-
ing the Riemannian geometric space via normaliz-
ing flow.

Acknowledgement

We want to thank College of Creative Studies
and Gene & Lucas Undergraduate Research Fund
for providing scholarships and research opportu-
nities for Prince Zizhuang Wang. We also want
to thank Yanxin Feng from Wuhan University for
helpful discussion about Riemannian Geometry,
and Yunxian He (CMU), Wenhu Chen (UCSB),
and Yijun Xiao (UCSB) for their comments which
helped us improve our paper and experiments.



293

References
Martin Arjovsky, Soumith Chintala, and Léon Bot-

tou. 2017. Wasserstein gan. arXiv preprint
arXiv:1701.07875.

Rianne van den Berg, Leonard Hasenclever, Jakub M
Tomczak, and Max Welling. 2018. Sylvester nor-
malizing flows for variational inference. UAI.

Rianne van den Berg, Leonard Hasenclever, Jakub M
Tomczak, and Max Welling. 2018. Sylvester nor-
malizing flows for variational inference. arXiv
preprint arXiv:1803.05649.

Olivier Bousquet, Sylvain Gelly, Ilya Tolstikhin, Carl-
Johann Simon-Gabriel, and Bernhard Schoelkopf.
2017. From optimal transport to generative mod-
eling: the vegan cookbook. arXiv preprint
arXiv:1705.07642.

Samuel R Bowman, Luke Vilnis, Oriol Vinyals, An-
drew M Dai, Rafal Jozefowicz, and Samy Ben-
gio. 2015. Generating sentences from a continuous
space. CoNLL.

Shuyang Gao, Rob Brekelmans, Greg Ver Steeg, and
Aram Galstyan. 2018. Auto-encoding total correla-
tion explanation. arXiv preprint arXiv:1802.05822.

Karol Gregor, Ivo Danihelka, Alex Graves,
Danilo Jimenez Rezende, and Daan Wierstra.
2015. Draw: A recurrent neural network for image
generation. ICML.

Arthur Gretton, Karsten M Borgwardt, Malte J Rasch,
Bernhard Schölkopf, and Alexander Smola. 2012. A
kernel two-sample test. JMLR.

Junxian He, Daniel Spokoyny, Graham Neubig, and
Taylor Berg-Kirkpatrick. 2019. Lagging inference
networks and posterior collapse in variational au-
toencoders. arXiv preprint arXiv:1901.05534.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735–1780.

Sergey Ioffe and Christian Szegedy. 2015. Batch nor-
malization: accelerating deep network training by
reducing internal covariate shift. In ICML.

Eric Jang, Shixiang Gu, and Ben Poole. 2017. Cat-
egorical reparameterization with gumbel-softmax.
ICLR.

Yoon Kim, Sam Wiseman, Andrew C Miller, David
Sontag, and Alexander M Rush. 2018. Semi-
amortized variational autoencoders. arXiv preprint
arXiv:1802.02550.

Diederik Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. iclr 2015. arXiv
preprint arXiv:1412.6980.

Diederik P Kingma and Max Welling. 2013. Auto-
encoding variational bayes. arXiv preprint
arXiv:1312.6114.

Mitchell P Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. 1993. Building a large annotated
corpus of english: The penn treebank. Computa-
tional linguistics, 19(2):313–330.

Nicholas Metropolis and Stanislaw Ulam. 1949. The
monte carlo method. Journal of the American sta-
tistical association, 44(247):335–341.

Yishu Miao, Lei Yu, and Phil Blunsom. 2016. Neural
variational inference for text processing. In ICML.

Danilo Jimenez Rezende and Shakir Mohamed.
2015. Variational inference with normalizing flows.
ICML.

Stanislau Semeniuta, Aliaksei Severyn, and Erhardt
Barth. 2017. A hybrid convolutional variational au-
toencoder for text generation. EMNLP.

Tianxiao Shen, Tao Lei, Regina Barzilay, and Tommi
Jaakkola. 2017. Style transfer from non-parallel text
by cross-alignment. In NIPS.

Ilya Tolstikhin, Olivier Bousquet, Sylvain Gelly, and
Bernhard Schoelkopf. 2018. Wasserstein auto-
encoders. ICLR.

Jakub M Tomczak and Max Welling. 2016. Improving
variational auto-encoders using householder flow.
arXiv preprint arXiv:1611.09630.

Cédric Villani. 2008. Optimal transport: old and new,
volume 338. Springer Science & Business Media.

Xin Wang, Wenhu Chen, Yuan-Fang Wang, and
William Yang Wang. 2018. No metrics are perfect:
Adversarial reward learning for visual storytelling.
In ACL.

Yijun Xiao, Tiancheng Zhao, and William Yang Wang.
2018. Dirichlet variational autoencoder for text
modeling. arXiv preprint arXiv:1811.00135.

Jiacheng Xu, Danlu Chen, Xipeng Qiu, and Xuangjing
Huang. 2016. Cached long short-term memory neu-
ral networks for document-level sentiment classifi-
cation. EMNLP.

Jiacheng Xu and Greg Durrett. 2018. Spherical latent
spaces for stable variational autoencoders. EMNLP.

Xinchen Yan, Jimei Yang, Kihyuk Sohn, and Honglak
Lee. 2016. Attribute2image: Conditional image
generation from visual attributes. In ECCV.

Zichao Yang, Zhiting Hu, Ruslan Salakhutdinov, and
Taylor Berg-Kirkpatrick. 2017. Improved varia-
tional autoencoders for text modeling using dilated
convolutions. ICML.

Shengjia Zhao, Jiaming Song, and Stefano Er-
mon. 2017a. Infovae: Information maximiz-
ing variational autoencoders. arXiv preprint
arXiv:1706.02262.



294

Tiancheng Zhao, Kyusong Lee, and Maxine Eskenazi.
2018. Unsupervised discrete sentence representa-
tion learning for interpretable neural dialog gener-
ation. ACL.

Tiancheng Zhao, Ran Zhao, and Maxine Eskenazi.
2017b. Learning discourse-level diversity for neural
dialog models using conditional variational autoen-
coders. ACL.


