



















































BiSET: Bi-directional Selective Encoding with Template for Abstractive Summarization


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 2153–2162
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

2153

BiSET: Bi-directional Selective Encoding with Template for Abstractive
Summarization

Kai Wang
Sun Yat-sen University

wangk73@mail2.sysu.edu.cn

Xiaojun Quan∗
Sun Yat-sen University

quanxj3@mail.sysu.edu.cn

Rui Wang
Alibaba Inc.

masi.wr@alibaba-inc.com

Abstract

The success of neural summarization models
stems from the meticulous encodings of source
articles. To overcome the impediments of lim-
ited and sometimes noisy training data, one
promising direction is to make better use of
the available training data by applying filters
during summarization. In this paper, we pro-
pose a novel Bi-directional Selective Encoding
with Template (BiSET) model, which lever-
ages template discovered from training data to
softly select key information from each source
article to guide its summarization process. Ex-
tensive experiments on a standard summariza-
tion dataset were conducted and the results
show that the template-equipped BiSET model
manages to improve the summarization perfor-
mance significantly with a new state of the art.

1 Introduction

Abstractive summarization aims to shorten a
source article or paragraph by rewriting while pre-
serving the main idea. Due to the difficulties in
rewriting long documents, a large body of research
on this topic has focused on paragraph-level ar-
ticle summarization. Among them, sequence-to-
sequence models have become the mainstream and
some have achieved state-of-the-art performance
(Rush et al., 2015; Chopra et al., 2016; Nallap-
ati et al., 2016). In general, the only available
information for these models during decoding is
simply the source article representations from the
encoder and the generated words from the previ-
ous time steps (Nallapati et al., 2016; Gu et al.,
2016; Lin et al., 2018), while the previous words
are also generated based on the article representa-
tions. Since natural language text is complicated
and verbose in nature, and training data is insuffi-
cient in size to help the models distinguish impor-
tant article information from noise, sequence-to-

∗Corresponding author.

sequence models tend to deteriorate with the ac-
cumulation of word generation, e.g., they generate
irrelevant and repeated words frequently (Koehn
and Knowles, 2017).

Template-based summarization (Zhou and
Hovy, 2004) is an effective approach to traditional
abstractive summarization, in which a number of
hard templates are manually created by domain
experts, and key snippets are then extracted and
populated into the templates to form the final
summaries. The advantage of such approach is it
can guarantee concise and coherent summaries in
no need of any training data. However, it is unre-
alistic to create all the templates manually since
this work requires considerable domain knowl-
edge and is also labor-intensive. Fortunately, the
summaries of some specific training articles can
provide similar guidance to the summarization
as hard templates. Accordingly, these summaries
are referred to as soft templates, or templates for
simplicity, in this paper.

Despite their potential in relieving the verbosity
and insufficiency problems of natural language
data, templates have not been exploited to full ad-
vantage. For example, Cao et al. (2018a) simply
concatenated template encoding after the source
article in their summarization work. To this end,
we propose a Bi-directional Selective Encoding
with Template (BiSET) model for abstractive sen-
tence summarization. Our model involves a novel
bi-directional selective layer with two gates to mu-
tually select key information from an article and its
template to assist with summary generation. Due
to the limitations in obtaining handcrafted tem-
plates, we further propose a multi-stage process
for automatic retrieval of high-quality templates
from training corpus. Extensive experiments were
conducted on the Gigaword dataset (Rush et al.,
2015), a public dataset widely used for abstractive
sentence summarization, and the results appear to



2154

be quite promising. Merely using the templates se-
lected by our approach as the final summaries, our
model can already achieve superior performance
to some baseline models, demonstrating the ef-
fect of our templates. This may also indicate the
availability of many quality templates in the cor-
pus. Secondly, the template-equipped summariza-
tion model, BiSET, outperforms all the state-of-
the-art models significantly. To evaluate the im-
portance of the bi-directional selective layer and
the two gates, we conducted an ablation study by
discarding them respectively, and the results show
that, while both of the gates are necessary, the
template-to-article (T2A) gate tends to be more
important than the article-to-template (A2T) gate.
A human evaluation further validates the effective-
ness of our model in generating informative, con-
cise and readable summaries.

The contributions of this work include:

• We propose a novel bi-directional selective
mechanism with two gates to mutually select
important information from both article and
template to assist with summary generation.

• We develop a Fast Rerank method to auto-
matically select high-quality templates from
training corpus.

• Empirical evaluations on the benchmark
dataset show our model has achieved a new
state of the art.

• The source code of this work has been re-
leased for future research.1

2 The Framework

Our framework includes three key modules: Re-
trieve, Fast Rerank, and BiSET. For each source
article, Retrieve aims to return a few candidate
templates from the training corpus. Then, the Fast
Rerank module quickly identifies a best template
from the candidates. Finally, BiSET mutually se-
lects important information from the source article
and the template to generate an enhanced article
representation for summarization.

2.1 Retrieve
This module starts with a standard information re-
trieval library2 to retrieve a small set of candidates
for fine-grained filtering as Cao et al. (2018a). To
do that, all non-alphabetic characters (e.g., dates)

1https://github.com/InitialBug/BiSET
2https://lucene.apache.org

are removed to eliminate their influence on article
matching. The retrieval process starts by query-
ing the training corpus with a source article to find
a few (5 to 30) related articles, the summaries of
which will be treated as candidate templates.

2.2 Fast Rerank

The above retrieval process is essentially based on
superficial word matching and cannot measure the
deep semantic relationship between two articles.
Therefore, the Fast Rerank module is developed to
identify a best template from the candidates based
on their deep semantic relevance with the source
article. We regard the candidate with highest rel-
evance as the template. As illustrated in Figure
1, this module consists of a Convolution Encoder
Block, a Similarity Matrix and a Pooling Layer.
Convolution Encoder Block. This block maps
the input article and its candidate templates into
high-level representations. The popular ways to
this are either by using recurrent neural network
(RNN) or a stack of convolutional neural network
(CNN), while none of them are suitable for our
problem. This is because a source article is usu-
ally much longer than a template, and both RNN
and CNN may lead to semantic irrelevance after
encodings. Instead, we implement a new convo-
lution encoder block which includes a word em-
bedding layer, a 1-D convolution followed by a
non-linearity function, and residual connections
(Gehring et al., 2017).

Formally, given word embeddings {ei}Ei=1 ∈
Rd of an article, we use a 1-D convolution with
kernel k ∈ R2d×kd and bias bh ∈ R2d to extract
the n-gram features:

hi = k[ei−k/2, ..., ei+k/2] + bh (1)

where hi ∈ R2d. We pad both sides of an arti-
cle/template with zeros to keep fixed length. Af-
ter that, we employ the gated linear unit (GLU)
(Dauphin et al., 2017) as our activation function
to control the proportion of information to pass
through. GLU takes half the dimension of hi as
input and reduces the input dimension to d. Let
hi = [h

1
i ;h

2
i ], where h

1
i , h

2
i ∈ Rd, we have:

ri = GLU(hi) = GLU([h
1
i ;h

2
i ]) = h

1
i ⊗ σ(h2i ) (2)

where ri ∈ Rd, σ is the sigmoid function, and ⊗
means element-wise multiplication. To retain the
original information, we add residual connections



2155

Figure 1: Overview of the Fast Rerank Module.

from the input of the convolution layer to the out-
put of this block: zi = ri + ei.
Similarity Matrix. The above encoder block gen-
erates a high-level representation for each source
article/candidate template. Then, a similarity ma-
trix S ∈ Rm×n is calculated for a given article
representation, S ∈ Rm×d, and a template repre-
sentation, T ∈ Rn×d:

sij = f(Si,Tj) (3)

where f is the similarity function, and the com-
mon options for f include:

f(x, y) =


xT y, dot product
xTWy, bilinear function
‖x− y‖, Euclidean distance

(4)

Most previous work uses dot product or bilinear
function (Chen et al., 2016) for the similarity, yet
we find the family of Euclidean distance perform
much better for our task. Therefore, we define the
similarity function as:

f(x, y) = exp(−‖x− y‖2) (5)

Pooling Layer. This layer is intended to filter out
unnecessary information in the matrix S . Before
applying such pooling operations as max-pooling
and k-max pooling (Kalchbrenner et al., 2014)
over the similarity matrix, we note there are re-
peated words in the source article, which we only
want to count once. For this reason, we first iden-
tify some salient weights from S:

q = maxcolumn(S) (6)

where maxcolumn is a column-wise maximum
function. We then apply k-max pooling over q to

select k most important weights, p ∈ Rk. Finally,
we apply a two-layer feed-forward network to out-
put a similarity score for the source article and the
candidate template:

p = k-max(q) (7)

a = ReLU(Wap+ b1) (8)
s = σ(Wsa+ b2) (9)

2.3 Traditional Methodologies

In this section, we explore three traditional ap-
proaches to taking advantage of the templates for
summarization. They share the same encoder and
decoder layers, but own different interaction layers
for combination of a source article and template.
The encoder layer uses a standard bi-directional
RNN (BiRNN) to separately encode the source ar-
ticle and the template into hidden states hsi and h

t
j .

Concatenation. This approach directly concate-
nates the hidden state,

{
hti
}N
i=1

, of a template after
the article representation, {hsi}

M
i=1, to form a new

article representation, {zsi }
M+N
i=1 . This approach is

similar to R3Sum (Cao et al., 2018a) but uses our
Fast Rerank and summary generation modules.
Concatenation+Self-Attention. This approach
adds a multi-head self-attention (Vaswani et al.,
2017) layer with 4 heads on the basis of the above
direct concatenation.
DCN Attention. Initially introduced for machine
reading comprehension (Seo et al., 2017), this
interaction approach is employed here to create
template-aware article representations. First, we
compute a similarity matrix, S ∈ Rm×n, for
each pair of article and template words by sij =
W0[hsi ;htj ;hsi ⊗htj ], where ‘;’ is the concatenation
operation. We then normalize each row and col-



2156

(a) (b)

Figure 2: The structure of the proposed model: (a) the Bi-Directional Selective Encoding with Template model
(BiSET) and (b) the bi-directional selective layer.

umn of S by softmax, giving rise to two new ma-
trices S and S . After that, the Dynamic Coatten-
tion Network (DCN) attention is applied to com-
pute the bi-directional attention: A = S · ht and
B = S · S

T
· hs, where A denotes article-to-

template attention and B is template-to-article at-
tention. Finally, we obtain the template-aware ar-
ticle representation {zsi }

M
i=1:

zsi = [h
s
i ;Ai;h

s
i ⊗ Ai;hsi ⊗ Bi] (10)

2.4 BiSET

Inspired by the research in machine reading com-
prehension (Seo et al., 2017) and selective mech-
anism (Zhou et al., 2017), we propose a novel
Bi-directional Selective Encoding with Template
(BiSET) model for abstractive sentence summa-
rization. The core idea behind BiSET is to in-
volve templates to assist with article represen-
tation and summary generation. As shown in
Figure 2, BiSET contains two selective gates:
Template-to-Article (T2A) gate and Article-to-
Template (A2T) gate. The role of T2A is to use a
template to filter the source article representation:

gi = σ(Wshhsi + Wthh
t + bs) (11)

hgi = h
s
i ⊗ gi (12)

where ht is the concatenation of the last forward
hidden state,

−→
htn, and the first backward hidden

state,
←−
ht1, of the template.

On the other hand, the purpose of A2T is to con-
trol the proportion of hg in the final article repre-
sentation. We assume the source article is credi-
ble and use its representation hs together with ht

to calculate a confidence degree, where hs is ob-
tained in a similar way as ht. The confidence de-

gree d is computed by:

d = σ((hs)TWdht + bd) (13)

The final source article representation is calculated
as the weighted sum of hsi and h

g
i :

zsi = dh
g
i + (1− d)h

s
i (14)

which allows a flexible manner for template in-
corporation and helps to resist errors when low-
quality templates are given.

The decoder layer. This layer includes an ordi-
nary RNN decoder (Luong et al., 2015). At each
time step t, the decoder reads the word wt−1 and
hidden state hct−1 generated in the previous step,
and gives a new hidden state for the current step:

hct = RNN(wt−1, h
c
t−1) (15)

where the hidden state is initialized with the origi-
nal source article representation, hs. We then com-
pute the attention between hct and the final article
representation zs to obtain a context vector ct:

εt,i = (z
s
i )

TWchct (16)

αt,i =
exp(εt,i)∑M
i=1 exp(εt,i)

(17)

ct =
M∑
i=1

αt,iz
s
i (18)

After that, a simple concatenation layer is used to
combine the hidden state hct and the context vector
ct into a new hidden state hat :

hat = tanh(Wha[ct;h
c
t ]) (19)

which will be mapped to a new representation of



2157

vocabulary size and fed through a softmax layer to
output the target word distribution:

p(wt|w1, ..., wt−1) = softmax(Wphat ) (20)

2.5 Training

The Retrieve module involves an unsupervised
process with traditional indexing and retrieval
techniques. For Fast Rerank, since there is no
ground truth available, we use ROUGE-13 (Lin
and Hovy, 2003) to evaluate the saliency of a can-
didate template with respect to the gold summary
of current source article. Therefore, the loss func-
tion is defined as:

Lr(θ) = −
1

N

N∑
i=1

[s∗ log s+ (1− s∗) log(1− s)]

(21)
where s is a score predicted by Equation 9, and N
is the product of the training set size, D, and the
number of retrieved templates for each article.

For the BiSET module, the loss function is
chosen as the negative log-likelihood between the
generated summary, w, and the true summary, w∗:

Lw(θ) = −
1

D

D∑
i=1

L∑
j=1

log p(w
∗(i)
j |w

(i)
j−1, x

(i), y(i))

(22)
where L is the length of the true summary, θ con-
tains all the trainable variables, and x and y denote
the source article and the template, respectively.

3 Experiments

In this section, we introduce our evaluations on a
standard dataset.

3.1 Dataset and Implementation

The dataset used for evaluation is Annotated En-
glish Gigaword (Napoles et al., 2012), a parallel
corpus formed by pairing the first sentence of an
article with its headline. For a fair comparison,
we use the version preprocessed by Rush et al.
(2015)4 as previous work.

During training, both the Fast Rerank and
BiSET modules have a batch size of 64 with the
Adam optimizer (Kingma and Ba, 2015). We also
apply grad clipping (Pascanu et al., 2013) with a

3We also tried ROUGE-2 and ROUGE-L, but ROUGE-1
shows to be more suitable.

4https://github.com/harvardnlp/sent-summary

range of [-5,5]. The differences of the two mod-
ules in settings are listed below.
Fast Rerank. We set the size of word embeddings
to 300, the convolution encoder block number to 1,
and the kernel size of CNN to 3. The weights are
shared between the article and template encoders.
The k of k-max pooling is set to 10. L2 weight de-
cay with λ = 3×10−6 is performed over all train-
able variables. The initial learning rate is 0.001
and multiplied by 0.1 every 10K steps. Dropout
between layers is applied.
BiSET. A two-layer BiLSTM is used as the en-
coder, and another two-layer LSTM as the de-
coder. The sizes of word embeddings and LSTM
hidden states are both set to 500. We only apply
dropout in the LSTM stack with a rate of 0.3. The
learning rate is set to 0.001 for the first 50K steps
and halved every 10K steps. Beam search with
size 5 is applied to search for optimal answers.

3.2 Evaluation Metrics

Following previous work (Nallapati et al., 2016;
Zhou et al., 2017; Cao et al., 2018a), we use
the standard F1 scores of ROUGE-1, ROUGE-
2 and ROUGE-L (Lin and Hovy, 2003) to eval-
uate the selected templates and generated sum-
maries, where the official ROUGE script5 is ap-
plied. We employ the normalized discounted cu-
mulative gain (NDCG) (Järvelin and Kekäläinen,
2002) from information retrieval to evaluate the
Fast Rerank module.

4 Results and Analysis

In this section, we report our experimental results
with thorough analysis and discussions.

4.1 Performance of Retrieve

The Retrieve module is intended to narrow down
the search range for a best template. We evaluated
this module by considering three types of tem-
plates: (a) Random means a randomly selected
summary from the training corpus; (b) Retrieve-
top is the highest-ranked summary by Retrieve;
(c) N-Optimal means among the N top search
results, the template is specified as the summary
with largest ROUGE score with gold summary.

As the results show in Table 1, randomly se-
lected templates are totally irrelevant and unhelp-
ful. When they are replaced by the Retrieve-top

5The ROUGE evaluation option: -m -n 2 -w 1.2



2158

Figure 3: Quality of candidate templates under differ-
ent ranges.

templates, the results improve apparently, demon-
strating the relatedness of top-ranked summaries
to gold summaries. Furthermore, when the N-
Optimal templates are used, additional improve-
ments can be observed as N grows. This trend is
also confirmed by Figure 3, in which the ROUGE
scores increase before 30 and stabilize afterwards.
These results suggest that the ranges given by Re-
trieve indeed help to find quality templates.

Type ROUGE-1 ROUGE-2 ROUGE-L
Random 2.58 0.00 2.48
Retrieve-top 23.46 7.67 20.94
5-Optimal 32.69 11.74 28.71
10-Optimal 35.90 13.32 31.42
15-Optimal 37.82 16.79 34.08
20-Optimal 38.92 17.72 34.94
30-Optimal 40.49 19.01 36.10

Table 1: Performance of different types of templates.

4.2 Fast Rerank
As mentioned before, the role of Fast Rerank is to
re-rank the initial search results and return a best
template for summarization. To examine the effect
of this module, we studied its ranking quality un-
der different ranges as in Section 4.1. The original
rankings by Retrieve are presented for comparison
with the NDCG metric. We regard the ROUGE-
2 score of each candidate template with the ref-
erence summary as the ground truth. As shown
in Figure 4, Fast Rerank consistently provides en-
hanced rankings over the original.

4.3 Interaction Approaches
In Section 2.3, we also explored three alternative
approaches to integrating an article with its tem-
plate. The results are shown in Table 2, from which
we can note that none of these approaches help
yield satisfactory performance. Even though DCN

Figure 4: Quality of rankings given by Fast Rerank.

Attention works impressively in machine reading
comprehension, it performs even worse in this task
than the simple concatenation. We conjecture the
reason is that the DCN Attention attempts to fuse
the template information into an article as in ma-
chine reading comprehension, rather than selects
key information from the two to form an enhanced
article representation.

Interaction method ROUGE-1 ROUGE-2 ROUGE-L
Concatenation 32.26 15.30 30.19
Concate+multi self-att 33.15 15.93 31.21
DCN Attention 31.53 13.77 27.96
Bi-selective layer 39.11 19.78 36.87

Table 2: Results of different interaction approaches.

4.4 BiSET
The overall performance of all the studied mod-
els is shown in Table 3. The results show that our
model significantly outperforms all the baseline
models and sets a new state of the art for abstrac-
tive sentence summarization. To evaluate the im-
pact of templates on our model, we also imple-
mented BiSET with two other types of templates:
randomly-selected templates and best templates
identified by Fast Rank under different ranges. As
shown in Table 4, the performance of our model
improves constantly with the improvement of tem-
plate quality (larger ranges lead to better chances
for good templates). Even with randomly-selected
templates, our model still works with stable per-
formance, demonstrating its robustness.

4.5 Speed Comparison
Our model is designed for both accuracy and effi-
ciency. Due to the parallelizable nature of CNN,
the Fast Rerank module only takes about 30 min-
utes for training and 3 seconds for inference on



2159

Model ROUGE-1 ROUGE-2 ROUGE-L
ABS‡ (Rush et al., 2015) 29.55 11.32 26.42
ABS+‡ (Rush et al., 2015) 29.78 11.89 26.97
RAS-Elman‡ (Chopra et al.,
2016)

33.78 15.97 31.15

Featseq2seq‡ (Nallapati
et al., 2016)

32.67 15.59 30.64

Open-NMT‡ (Klein et al.,
2017)

34.07 16.35 31.78

SEASS‡ (Zhou et al., 2017) 36.15 17.54 33.63
S2S+CGU‡ (Lin et al., 2018) 36.30 18.00 33.80
FTSum‡ (Cao et al., 2018b) 37.27 17.65 34.24
R3Sum‡ (Cao et al., 2018a) 37.04 19.03 34.46
BiSET 39.11 19.78 36.87

Table 3: Performance of all the models, where results
marked with ‡ are taken from the corresponding papers.

Template Type ROUGE-1 ROUGE-2 ROUGE-L
Random 33.85 15.83 31.14
5-rerank 37.69 18.62 34.38
10-rerank 38.34 19.35 34.97
20-rerank 38.89 19.64 36.67
30-rerank 39.11 19.78 36.87

Table 4: Performance of BiSET with different types of
templates, where Random means randomly-selected
templates, and N-rerank denotes the best templates re-
ranked by Fast Rerank under range N .

the whole test set. The BiSET model takes about 8
hours for training (GPU:GTX 1080), 6 times faster
than R3Sum (Cao et al., 2018a)6.

4.6 Ablation Study

The purpose of this study is to examine the roles
of the bi-directional selective layer and its two
gates. Firstly, we removed the selective layer and
replaced it with the direct concatenation of an ar-
ticle with its template representation. As the re-
sults show in Table 5, the model performs even
worse than some ordinary sequence-to-sequence
models in Table 3. The reason might be that tem-
plates would overwhelm the original article repre-
sentations and become noise after concatenation.
Then, we removed the Template-to-Article (T2A)
gate, and as a result the model shows a great de-
cline in performance, indicating the importance of
templates in article representations. Finally, when
we removed the Article-to-Template (A2T) gate,
whose role is to control the weight of T2A in arti-
cle representations, only a small performance de-
cline is observed. This may suggest that the T2A
gate alone can already capture most of the im-
portant article information, while A2T plays some
supplemental role.

6It takes about 2 days for training.

Model ROUGE-1 ROUGE-2 ROUGE-L
Concatenation 32.26 15.30 30.19
BiSET without T2A 34.51 16.55 31.17
BiSET without A2T 39.02 19.21 36.02
BiSET(full) 39.11 19.78 36.87

Table 5: ROUGE F1 scores of ablated models.

4.7 Human Evaluation

We then carried out a human evaluation to evaluate
the generated summaries from another perspec-
tive. Our evaluators include 8 graduate students
and 4 senior undergraduates, while the dataset
is 100 randomly-selected articles from the test
set. Each sample in this dataset also includes:
1 reference summary, 5 summaries generated by
Open-NMT7 (Klein et al., 2017), R3Sum8 (Cao
et al., 2018a) and BiSET under three settings, re-
spectively, and 3 randomly-selected summaries for
trapping. We asked the evaluators to indepen-
dently rate each summary on a scale of 1 to 5,
with respect to its quality in informativity, concise-
ness, and readability. While collecting the results,
we rejected the samples in which more than half
evaluators rate the informativity of the reference
summary below 3. We also rejected the samples
in which the informativity of a randomly-selected
summary is scored higher than 3. Finally, we ob-
tained 43 remaining samples and calculated an av-
erage score for each aspect. As the results show in
Table 6, our model not only performs much better
than the baselines, it also shows quite comparable
performance with the reference summaries.

Model Info Concise Read
R3Sum 3.30 3.83 3.90
Open-NMT 3.26 3.69 3.86
BiSET(random template) 3.09 3.69 3.71
BiSET(without A2T) 3.24 3.75 3.72
BiSET(best template) 3.35 3.98 3.93
Reference 3.55 3.91 3.89

Table 6: Results of human evaluation.

In Table 7 we present two real examples, which
show the templates found by our model are indeed
related to the source articles, and with their aid,
our model succeeds to keep the main content of the
source articles for summarization while discarding
unrelated words like ‘US’ and ‘Olympic Games’.

7https://github.com/OpenNMT/OpenNMT-py
8http://www4.comp.polyu.edu.hk/˜cszqcao/



2160

Source factory orders for manufactured goods rose #.#
percent in September, the commerce depart-
ment said here Thursday.

Ref September factory orders up #.# percent.
Temp January factory orders in US up #.# percent.
BiSET factory orders up #.# percent in September.

Source some #.# billion people worldwide are expected
to watch Germany face Costa Rica on television
at the opening match of football’s World Cup,
German public broadcaster zdf said Thursday.

Ref #.# billion tv viewers expected for opening
World Cup match.

Temp billions around world watch the Olympic
Games opening ceremony.

BiSET #.# billions around world expected to watch
World Cup.

Table 7: Examples of the generated templates and sum-
maries by our model. ‘#’ refers to masked numbers.

5 Related Work

Abstractive sentence summarization, a task analo-
gous to headline generation or sentence compres-
sion, aims to generate a brief summary given a
short source article. Early studies in this problem
mainly focus on statistical or linguistic-rule-based
methods, including those based on extractive and
compression (Jing and McKeown, 2000; Knight
and Marcu, 2002; Clarke and Lapata, 2010), tem-
plates (Zhou and Hovy, 2004) and statistical ma-
chine translation (Banko et al., 2000).

The advent of large-scale summarization cor-
pora accelerates the development of various neural
network methods. Rush et al. (2015) first applied
an attention-based sequence-to-sequence model
for abstractive summarization, which includes a
convolutional neural network (CNN) encoder and
a feed-forward network decoder. Chopra et al.
(2016) replaced the decoder with a recurrent neu-
ral network (RNN). Nallapati et al. (2016) fur-
ther changed the sequence-to-sequence model to a
fully RNN-based model. Besides, Gu et al. (2016)
found that this task benefits from copying words
from the source articles and proposed the Copy-
Net correspondingly. With a similar purpose, Gul-
cehre et al. (2016) proposed to use a switch gate
to control when to copy from the source article
and when to generate from the vocabulary. Zhou
et al. (2017) employed a selective gate to filter out
unimportant information when encoding.

Some other work attempts to incorporate exter-
nal knowledge for abstractive summarization. For
example, Nallapati et al. (2016) proposed to en-

rich their encoder with handcrafted features such
as named entities and part-of-speech (POS) tags.
Guu et al. (2018) also attempted to encode human-
written sentences to improve neural text genera-
tion. Similar to our work, Cao et al. (2018a) pro-
posed to retrieve a related summary from the train-
ing set as soft template to assist with the summa-
rization. However, their approach tends to over-
simplify the role of the template, by directly con-
catenating a template after the source article en-
coding. In contrast, our bi-directional selective
mechanism exhibits a novel attempt to selecting
key information from the article and the template
in a mutual manner, offering greater flexibility in
using the template.

6 Conclusion

In this paper, we presented a novel Bi-directional
Selective Encoding with Template (BiSET) model
for abstractive sentence summarization. To coun-
teract the verbosity and insufficiency of training
data, we proposed to retrieve high-quality exist-
ing summaries as templates to assist with source
article representations through an ingenious bi-
directional selective layer. The enhanced article
representations are expected to contribute towards
better summarization eventually. We also devel-
oped the corresponding retrieval and re-ranking
modules for obtaining quality templates. Exten-
sive evaluations were conducted on a standard
benchmark dataset and experimental results show
that our model can quickly pick out high-quality
templates from the training corpus, laying key
foundation for effective article representations and
summary generations. The results also show that
our model outperforms all the baseline models and
sets a new state of the art. An ablation study
validates the role of the bi-directional selective
layer, and a human evaluation further proves that
our model can generate informative, concise, and
readable summaries.

7 Acknowledgement

The paper was partially supported by the Pro-
gram for Guangdong Introducing Innovative and
Enterpreneurial Teams (No.2017ZT07X355) and
the Key R&D Program of Guangdong Province
(2019B010120001).



2161

References
Michele Banko, Vibhu O. Mittal, and Michael J. Wit-

brock. 2000. Headline generation based on statisti-
cal translation. In Proceedings of the 38th Annual
Meeting on Association for Computational Linguis-
tics, pages 318–325.

Ziqiang Cao, Wenjie Li, Sujian Li, and Furu Wei.
2018a. Retrieve, rerank and rewrite: Soft template
based neural summarization. In Proceedings of the
56th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), vol-
ume 1, pages 152–161.

Ziqiang Cao, Furu Wei, Wenjie Li, and Sujian Li.
2018b. Faithful to the original: Fact aware neural
abstractive summarization. In Thirty-Second AAAI
Conference on Artificial Intelligence.

Danqi Chen, Jason Bolton, and Christopher D. Man-
ning. 2016. A thorough examination of the
cnn/daily mail reading comprehension task. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), volume 1, pages 2358–2367.

Sumit Chopra, Michael Auli, and Alexander M. Rush.
2016. Abstractive sentence summarization with at-
tentive recurrent neural networks. In Conference of
the North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies, pages 93–98.

James Clarke and Mirella Lapata. 2010. Discourse
constraints for document compression. Computa-
tional Linguistics, 36(3):411–441.

Yann N. Dauphin, Angela Fan, Michael Auli, and
David Grangier. 2017. Language modeling with
gated convolutional networks. In Proceedings
of the 34th International Conference on Machine
Learning-Volume 70, pages 933–941.

Jonas Gehring, Michael Auli, David Grangier, De-
nis Yarats, and Yann N. Dauphin. 2017. Convolu-
tional sequence to sequence learning. In Proceed-
ings of the 34th International Conference on Ma-
chine Learning-Volume 70, pages 1243–1252.

Jiatao Gu, Zhengdong Lu, Hang Li, and Victor OK
Li. 2016. Incorporating copying mechanism in
sequence-to-sequence learning. In Proceedings of
the 54th Annual Meeting of the Association for Com-
putational Linguistics (Volume 1: Long Papers),
volume 1, pages 1631–1640.

Caglar Gulcehre, Sungjin Ahn, Ramesh Nallapati,
Bowen Zhou, and Yoshua Bengio. 2016. Pointing
the unknown words. In Proceedings of the 54th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), volume 1,
pages 140–149.

Kelvin Guu, Tatsunori B. Hashimoto, Yonatan Oren,
and Percy Liang. 2018. Generating sentences by

editing prototypes. Transactions of the Association
of Computational Linguistics, 6:437–450.

Kalervo Järvelin and Jaana Kekäläinen. 2002. Cu-
mulated gain-based evaluation of ir techniques.
ACM Transactions on Information Systems (TOIS),
20(4):422–446.

Hongyan Jing and Kathleen R. McKeown. 2000. Cut
and paste based text summarization. In Proceed-
ings of the 1st North American chapter of the As-
sociation for Computational Linguistics conference,
pages 178–185.

Nal Kalchbrenner, Edward Grefenstette, and Phil Blun-
som. 2014. A convolutional neural network for
modelling sentences. In Proceedings of the 52nd
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 1: Long Papers), vol-
ume 1, pages 655–665.

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In Proceed-
ings of the 3rd International Conference on Learn-
ing Representations, ICLR 2015.

Guillaume Klein, Yoon Kim, Yuntian Deng, Jean
Senellart, and Alexander Rush. 2017. Opennmt:
Open-source toolkit for neural machine translation.
Proceedings of ACL 2017, System Demonstrations,
pages 67–72.

Kevin Knight and Daniel Marcu. 2002. Summariza-
tion beyond sentence extraction: A probabilistic ap-
proach to sentence compression. Artificial Intelli-
gence, 139(1):91–107.

Philipp Koehn and Rebecca Knowles. 2017. Six chal-
lenges for neural machine translation. In Pro-
ceedings of the First Workshop on Neural Machine
Translation, pages 28–39.

Chin Yew Lin and Eduard Hovy. 2003. Auto-
matic evaluation of summaries using n-gram co-
occurrence statistics. In Conference of the North
American Chapter of the Association for Computa-
tional Linguistics on Human Language Technology,
pages 71–78.

Junyang Lin, Sun Xu, Shuming Ma, and Qi Su. 2018.
Global encoding for abstractive summarization. In
Proceedings of the 56th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 2:
Short Papers), pages 163–169.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natural
Language Processing, pages 1412–1421.

Ramesh Nallapati, Bowen Zhou, Cicero dos Santos,
Caglar Gulcehre, and Bing Xiang. 2016. Ab-
stractive text summarization using sequence-to-
sequence rnns and beyond. In Proceedings of The
20th SIGNLL Conference on Computational Natu-
ral Language Learning, pages 280–290.



2162

Courtney Napoles, Matthew Gormley, and Benjamin
Van Durme. 2012. Annotated gigaword. In Joint
Workshop on Automatic Knowledge Base Construc-
tion and Web-Scale Knowledge Extraction, pages
95–100.

Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio.
2013. On the difficulty of training recurrent neural
networks. In International Conference on Machine
Learning, pages 1310–1318.

Alexander M. Rush, Sumit Chopra, and Jason Weston.
2015. A neural attention model for abstractive sen-
tence summarization. In Proceedings of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 379–389.

Min Joon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2017. Bidirectional attention
flow for machine comprehension. In Proceedings of
the 5th International Conference on Learning Rep-
resentations, ICLR 2017.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N. Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in neural information pro-
cessing systems, pages 5998–6008.

Liang Zhou and Eduard Hovy. 2004. Template-
filtered headline summarization. Text Summariza-
tion Branches Out.

Qingyu Zhou, Nan Yang, Furu Wei, and Ming Zhou.
2017. Selective encoding for abstractive sentence
summarization. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1095–
1104.


