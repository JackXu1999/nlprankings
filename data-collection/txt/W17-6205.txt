



















































Coordination in TAG without the Conjoin Operation


Proceedings of the 13th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+13), pages 43–52,
Umeå, Sweden, September 4–6, 2017. c© 2017 Association for Computational Linguistics

Coordination in TAG without the Conjoin Operation

Chung-hye Han
Simon Fraser University

Department of Linguistics
8888 University Drive

Burnaby BC, V5A 1S6, Canada
chunghye@sfu.ca

Anoop Sarkar
Simon Fraser University

School of Computing Science
8888 University Drive

Burnaby BC, V5A 1S6, Canada
anoop@cs.sfu.ca

Abstract

In this paper, we propose an alternative to
Sarkar and Joshi’s (1996) Conjoin Opera-
tion approach to clausal coordination with
shared arguments. The Conjoin Opera-
tion applies across elementary trees, iden-
tifying and merging arguments from each
clause, yielding a derivation tree in which
the shared arguments are combined with
multiple elementary trees, and a derived
tree in which the shared arguments are
dominated by multiple verbal projections.
In contrast, our analysis uses Synchronous
Tree Adjoining Grammar in order to pair
syntactic elementary trees that participate
in the derivation of clausal coordination
with semantic elementary trees that use a
lambda term to abstract over the shared
argument. This allows the sharing of ar-
guments in coordination to be instantiated
in semantics, without being represented in
syntax in the form of multiple dominance.

1 Introduction

In clausal coordination, one or more arguments
can be shared by the verbal predicates of the con-
juncts. For example, in (1), an object argument,
Pete, is shared by likes and hates, and in (2), a
subject argument, Sue, is shared by the two verbs.

(1) Sue likes and Kim hates Pete.
a. likes(Sue,Pete) ∧ hates(Kim,Pete)

(2) Sue hates Pete and likes Kim.
a. hates(Sue,Pete) ∧ likes(Sue,Kim)

A widely adopted analysis to such coordination,
since Ross (1967), is to postulate an across-the-
board (ATB) movement of the shared argument,
in which multiple underlying copies of the shared

material are identified during movement, yielding
a single overt copy located outside of the coordi-
nate structure. So, (1) and (2) would be derived
from movement of the shared argument from both
conjuncts to a position outside of the coordinate
structure, as in (3) and (4).

(3) [Sue likes ti] and [Kim hates ti] Petei.

(4) Suei [ti hates Pete] and [ti likes Kim].

Not to mention the problematic aspects of the ex-
act mechanism where movement somehow iden-
tifies two syntactically distinct objects, the ATB
movement analysis incorrectly predicts that shared
arguments be barred from islands, given that
movement dependency is subject to island con-
straints (Wexler and Culicover, 1980). (5) illus-
trates that a wh-movement dependency cannot be
formed across a relative clause, an island. In con-
trast, in (6), a shared argument can form a pu-
tative ATB movement dependency across relative
clauses.

(5) * What did Max denounce [the senator
who wrote ti]]? (Sabbagh, 2014, 14)

(6) Max publicly denounced [the senator [who
wrote ti]], and Pauline outwardly criticized
[the magazine editor [who published ti]],
[the speech that encouraged the riot]i.
(Sabbagh, 2014, 15)

Combinatory Categorial Grammar (CCG)
(Steedman, 1996) places the shared argument
outside the coordinating conjuncts without postu-
lating movement. It uses a syntactic combinator
(X\X)/X for conjunctions, which combines
two constituents of any type (one on the left and
the other on the right represented by the slash
direction). In semantics, the coordinated con-
stituents provide a predicate lambda term which
is then reduced using the shared argument. CCG

43



combines type-raising and function composition
to handle coordination which leads to a view of
constituency that is quite different from traditional
phrase structure.

Another prominent analysis, starting with
Wexler and Culicover (1980), is to postulate that
the appearance of a shared argument is a result
of ellipsis of corresponding arguments from other
conjuncts. Under the ellipsis analysis, (1) and (2)
would be a result of eliding the object argument
from the first conjunct (7) and the subject argu-
ment from the second conjunct (8), respectively.

(7) [Sue likes Pete] and [Kim hates Pete].

(8) [Sue hates Pete] and [Sue likes Kim].

The ellipsis analysis predicts that a clausal coor-
dination with a shared argument and the corre-
sponding non-elided version should have the same
meaning. But this is not always the case (Sabbagh,
2007). For instance, while (9) means that the same
student read every paper and summarized every
book, (10) can mean different students read every
paper and summarized every book.

(9) A student read every paper and summa-
rized every book.

(10) A student read every paper and a student
summarized every book.

This takes us to the multiple dominance analy-
sis, first proposed by McCawley (1982), that pos-
tulates that a shared argument is multiply domi-
nated by elements from multiple conjuncts. A ver-
sion of this approach has been developed in Sarkar
and Joshi (1996) within the TAG literature. Sarkar
and Joshi (1996) posit that the shared argument is
located in the canonical position within each con-
junct, and propose an operation, the Conjoin Op-
eration, that applies across elementary trees. This
operation identifies and merges the shared argu-
ment when two elementary trees combine via co-
ordination, yielding a derived tree in which an ar-
gument is multiply dominated by two verbal pro-
jections. The Conjoin Operation analysis has been
used and extended often in TAG-based linguistic
research, including the semantics of clausal coor-
dination and scope (Banik, 2004; Han et al., 2008;
Storoshenko and Frank, 2012), and the syntax of
Right-Node-Raising (Han et al., 2010).

According to the multiple dominance analysis,
as the shared argument is in a dominance relation

within each conjunct, it must be syntactically li-
censed in each conjunct. However, as observed
in Cann et al. (2005), the syntactic requirement
of the shared argument must be met by the ele-
ments within the conjunct it occurs with, and not
by elements in other conjuncts. For instance, the
negative polarity item in the shared object, which
occurs in the second conjunct on the surface, is
licensed by negation in the second conjunct (11),
but not by negation in the first conjunct (12).

(11) John has read, but he hasn’t understood any
of my books. (Cann et al., 2005, 1e)

(12) * John hasn’t understood, but has read any
of my books.

In this paper, using Synchronous Tree Adjoin-
ing Grammar, we propose an alternative to the
TAG analysis of coordination, which does not rely
on the Conjoin Operation. In our proposal, the
shared argument is syntactically present only in
one conjunct, and syntactically missing in other
conjuncts. The syntactic elementary trees repre-
senting the conjuncts with missing arguments are
paired with semantic elementary trees with un-
saturated arguments, and the syntactic elementary
trees with shared arguments are paired with se-
mantic elementary trees that use lambda terms to
abstract over the shared arguments. Composition
of these trees via adjoining allows sharing of ar-
guments to be instantiated in semantics, without
being represented in syntax in the form of ATB
movement, ellipsis or multiple dominance.

The remainder of this paper is organized as fol-
lows. In Section 2, we illustrate in more detail
how the Conjoin Operation identifies a shared ar-
gument. Our STAG analysis where sharing of ar-
guments takes place in semantics, not in syntax, is
presented in Section 3. This analysis is extended
in Section 4 to account for ATB wh-movement,
and the interaction of coordination and quantifi-
cation.

2 Argument Sharing via the Conjoin
Operation

Sarkar and Joshi (1996) utilize elementary trees
with contraction sets and coordinating auxiliary
trees. The elementary trees necessary to derive (1)
are given in Figure 1.1 In each of (αlikes{DP})

1We follow Frank’s (2002) Condition on Elementary Tree
Minimality (CETM), and adopt the DP Hypothesis and the
VP-internal Subject Hypothesis in defining our elementary

44



and (βand hates{DP}), the object DP node is in
the contraction set, notated as a subscript in the
tree name and marked in the tree with a circle
around it, and represents a shared argument. When
(βand hates{DP}) adjoins to (αlikes{DP}) via the
Conjoin Operation, the two trees undergo contrac-
tion, sharing the node in the contraction set. Effec-
tively, this allows the DP tree, (αPete), to simulta-
neously substitute into the contraction nodes, and
in the derived tree, the two nodes are identified,
merging into one. The substitution of (αSue) and
(αKim) into the subject DP nodes of (αlikes{DP})
and (βand hates{DP}), in addition to the simulta-
neous substitution of (αPete) into the object DP
nodes of the two elementary trees, generates the
derived tree (γ1) in Figure 1. The resulting derived
tree is a directed graph as a single node is domi-
nated by multiple nodes. The shared argument,
Pete, is thus represented as a syntactic argument
of both the verbs, likes and hates, capturing the
meaning of the sentence that the person that Sue
likes and the person that Kim hates are the same
individual.

3 Argument Sharing via Semantics using
STAG

According to the NPI examples (11)-(12) dis-
cussed in section 1, the shared argument seems
to be forming syntactic dependencies only with
elements in the conjunct in which it appears on
the surface, but not with elements in other con-
juncts. We capture this intuition with the proposal
that the shared argument is syntactically present
only in one of the conjuncts, and missing in other
conjuncts, resulting in predicates with unsaturated
arguments in semantics. We explain our analysis
with a shared object argument example in subsec-
tion 3.1 and a shared subject argument example in
subsection 3.2.

3.1 Object argument sharing

For the analysis of (1), an example of clausal co-
ordination with a shared object argument, we pro-
pose elementary tree pairs in (βlikes{DP}) and
(β′likes{DP}) in Figure 2. (βlikes{DP}) is an aux-
iliary TP tree that introduces a coordinator and
adjoins to another TP it coordinates with. The
object argument of this auxiliary tree is null, di-
rectly reflecting the fact that it is absent in the

trees. Elementary trees such as (βand hates{DP}) are in ac-
cordance with CETM, as coordinators are functional heads.

first conjunct. The content of the null object ar-
gument, however, must be resolved in semantics.
This requirement is implemented by the semantic
elementary tree (β′likes{DP}), in which the vari-
able corresponding to the object argument (x) has
been λ-abstracted over, turning the conjunct into
a predicate (〈e, t〉). This predicate must adjoin to
another predicate whose object argument has been
similarly λ-abstracted over. This adjunction re-
quirement is represented in the elementary tree by
the obligatory adjunction or oa constraint (Vijay-
Shanker, 1992) on the TP node of (αhates{DP}).
The oa constraint should also provide a list of aux-
iliary trees compatible with this elementary tree in
order to satisfy the object sharing requirement in
the semantic structure. To save space in the fig-
ures, we show the oa constraint but we do not ex-
plicitly provide a list of trees. In all the subse-
quent trees we will also provide such an oa con-
straint and since it serves the same purpose in all of
them we do not comment on it further. The boxed
numeral 1 in (βlikes{DP}) and (β′likes{DP}) in-
dicates a link between the syntactic and seman-
tic tree pairs to ensure the synchronous derivation
between the syntax and the semantics: a DP tree
substitutes into the subject position marked with 1
in (βlikes{DP}), and the semantic tree paired with
this DP must substitute into the position marked
with 1 in (β′likes{DP}).2

The TP and the predicate that (βlikes{DP}) and
(β′likes{DP}) adjoin to are provided by elemen-
tary tree pairs in (αhates{DP}) and (α′hates{DP})
in Figure 2. (αhates{DP}) is a typical transitive
initial tree in syntax with subject and object substi-
tution sites. (α′hates{DP}), however, is an atypical
transitive elementary tree in semantics in which
the object argument has been λ-abstracted over:
here, the variable corresponding to the object ar-
gument (x) is λ-abstracted over to provide a predi-
cate (〈e, t〉).3 This predicate will combine with the
meaning of the object argument to provide a for-
mula (t). Note that the TP node in (αhates{DP})
and the highest 〈e, t〉 node in (α′hates{DP}) are
marked with the link 3 . These are the positions
onto which (βlikes{DP}) and (β′likes{DP}) adjoin
in syntax and semantics respectively.

2For the sake of simplicity, we include only the links that
are relevant for the current discussion.

3Semantic elementary trees in which λ-operators abstract
over argument variables have been proposed and utilized in
Frank and Storoshenko (2012) to handle many difficult cases
of quantifier scope within tree-local MC-TAG.

45



TP

T’

VP

V’

DPV

likes

DP

ti

T

DPi ↓

αlikes{DP}:

TP

TP

T’

VP

V’

DPV

hates

DP

ti

T

DPi ↓

Conj

and

TP*

βand hates{DP}:

TP

TP

T’

VP

V’

DP

D

Pete

V

hates

DP

ti

T

DPi

D

Kim

Conj

and

TP

T’

VP

V’

V

likes

DP

ti

T

DPi

D

Sue

γ1:

DP

D

Sue

αSue:

DP

D

Kim

αKim:

DP

D

Pete

αPete:

Figure 1: Elementary trees and derived tree for Sue likes and Kim hates Pete with the Conjoin Operation

〈 αhates{DP}: TPoa 3
DPi ↓ 1 T’

T VP

DP

ti

V’

V

hates

DP ↓ 2

,

α′hates{DP}: t

〈e, t〉3

λx t

e ↓ 1 〈e, t〉

λy.hates(y, x)

e ↓ 2

〉

〈 βlikes{DP}: TP
TP

DPi ↓ 1 T’

T VP

DP

ti

V’

V

likes

DP

e

Conj

and

TP∗

,

β′likes{DP}: 〈e, t〉

〈e, t〉

λx t

e ↓ 1 〈e, t〉

λy.likes(y, x)

∧ 〈e, t〉∗

〉

〈 αSue: DP
D

Sue

,
α′Sue: e

Sue

〉 〈 αKim: DP
D

Kim

,
α′Kim: e

Kim

〉 〈 αPete: DP
D

Pete

,
α′Pete: e

Pete

〉

Figure 2: Elementary trees for Sue likes and Kim
hates Pete

〈 δ1: αhates{DP}
αKim βlikes{DP}

αSue

αPete

1 3

1

2

,

δ′1: α′hates{DP}

α′Kim β′likes{DP}

α′Sue

α′Pete

1 3

1

2

〉

Figure 3: Derivation structures for Sue likes and
Kim hates Pete

Figure 3 depicts the isomorphic syntactic and
semantic derivation structures for (1). Follow-
ing the convention in Nesson and Shieber (2006;
2007), here we use boxed numerals for links to
denote locations in parent elementary trees where
the TAG operations took place. The syntactic
and the semantic derived trees are given in Fig-
ure 4. In contrast to the Conjoin Operation ap-
proach, in our analysis, (αPete), the syntactic el-
ementary tree representing the shared argument,
composes only with a single predicative elemen-
tary tree, (αhates{DP}). In the syntactic derived
tree (γ1), therefore, Pete is represented as the ob-
ject DP of hates, but not likes. Similarly in seman-
tics, (α′Pete) composes only with (α′hates{DP}).
However, because the object abstracted predicate
of (β′likes{DP}) is adjoining onto the predicate
node in the object abstracted (α′hates{DP}), the
correct meaning of (1) is derived, in which the per-
son Sue likes and Kim hates is Pete, as stated in the
logical form in (1a). (γ′1) can be reduced to (1a)
via λ-conversion following the application of the
Generalized Conjunction (GC) Rule (Barwise and
Cooper, 1981) defined in (13).

(13) Generalized Conjunction (GC) Rule:
[Pred1 ∧ Pred2] = λz[Pred1(z) ∧ Pred2(z)]

3.2 Subject argument sharing
Figure 5 contains our proposed elementary trees
to derive (2), an example of clausal coordination
with a subject shared argument. (βlikes{DPi}) in-
troduces a coordinator and its subject argument is
null, reflecting the fact that it is absent in the sec-
ond conjunct. In (β′likes{DPi}), the variable cor-

46



〈 γ1: TP
TP

DPi

D

Sue

T’

T VP

DP

ti

V’

V

likes

DP

�

Conj

and

TP

DPi

D

Kim

T’

T VP

DP

ti

V’

V

hates

DP

D

Pete

,

γ′1: t

〈e, t〉

〈e, t〉

λx t

e

Sue

〈e, t〉

λy.likes(y, x)

∧ 〈e, t〉

λx t

e

Kim

〈e, t〉

λy.hates(y, x)

e

Pete

〉

Figure 4: Derived trees for Sue likes and Kim hates Pete

responding to the subject argument (x) has been
λ-abstracted over, turning the conjunct into a pred-
icate (〈e, t〉). This implements the requirement
that the subject argument still needs to be satu-
rated. (αhates{DPi}) is a typical transitive initial
tree in syntax. In (α′hates{DPi}), however, the
variable corresponding to the subject argument (x)
has been λ-abstracted over to provide a predicate
(〈e, t〉) which will combine with the meaning of
the subject argument to provide a formula (t).

〈 αhates{DPi}: TPoa 3
DPi ↓ 1 T’

T VP

DP

ti

V’

V

hates

DP ↓ 2

,

α′hates{DPi}: t

〈e, t〉3

λx t

e ↓ 2 〈e, t〉

λy.hates(x, y)

e ↓ 1

〉

〈 βlikes{DPi}: TP
TP∗ Conj

and

TP

DPi

e

T’

T VP

DP

ti

V’

V

likes

DP ↓ 1

,

β′likes{DPi}: 〈e, t〉

〈e, t〉∗ ∧ 〈e, t〉

λx t

e ↓ 1 〈e, t〉

λy.likes(x, y)

〉

Figure 5: Elementary trees for Sue hates Pete and
likes Kim

The isomorphic syntactic and semantic deriva-
tion structures for (2) are provided in Figure
6 and the derived trees are given in Figure
7. The shared subject argument represented by
the elementary tree pair 〈αSue, α′Sue〉 composes
only with the predicative elementary tree pair

〈αhates{DPi}, α′hates{DPi}〉. Therefore, in the syn-
tactic derived tree, Sue is represented as the sub-
ject DP of hates, but not likes. In the semantic
derived tree, however, the subject abstracted pred-
icate of (β′likes{DPi}) adjoins onto the predicate
node in the subject abstracted (α′hates{DPi}), and
so the correct meaning of (2) is derived via the
application of λ-conversion and the GC Rule to
(γ′2), in which the person that hates Pete and likes
Kim is Sue, as stated in the local form in (2a).

〈 δ2: αhates{DPi}
αSue βlikes{DPi}

αKim

αPete

1 3

1

2

,

δ′2: α′hates{DPi}

α′Sue β′likes{DPi}

α′Kim

α′Pete

1 3

1

2

〉

Figure 6: Derivation structures for Sue hates Pete
and likes Kim

4 Extensions

4.1 ATB wh-movement

According to the Conjoin Operation analysis, in-
stances of ATB wh-movement, as in (14), involve
a wh-movement in each clausal conjunct followed
by identification and merging of the wh-phrases
as the two clauses compose. In our analysis, a
wh-movement takes place only in one conjunct in
syntax, while the function of the wh-phrase is cap-
tured as a shared argument in semantics.

(14) Who does Sue like and Kim hate?
a. WHx[person(x)][likes(Sue, x)∧hates(Kim, x)]

Additional elementary trees required to derive
(14) are given in Figure 8. (αwh hates{DPj}) is a
typical transitive initial tree with a wh-movement
of the object argument. (α′wh hates{DPj}) is a

47



〈 γ2: TP
TP

DPi

D

Sue

T’

T VP

DP

ti

V’

V

hates

DP

D

Pete

Conj

and

TP

DPi

�

T’

T VP

DP

ti

V’

V

likes

DP

D

Kim

,

γ′2: t

〈e, t〉

〈e, t〉

λx t

e

Pete

〈e, t〉

λy.hates(x, y)

∧ 〈e, t〉

λx t

e

Kim

〈e, t〉

λy.likes(x, y)

e

Sue

〉

Figure 7: Derived trees for Sue hates Pete and likes Kim

corresponding semantics tree with a λ-abstrated
object argument. Here, we abstract away from
the full semantics of wh-questions and simply rep-
resent the predicate-argument structure. In rep-
resenting the semantics of who, we follow the
tree-local multi-component treatment of quantifi-
cation (Shieber and Schabes, 1990; Nesson and
Shieber, 2006) and implement a generalized quan-
tifier analysis to adopt the model of Han et al.
(2008). We thus propose that the semantics of
who has two components: (α′who) is a vari-
able and substitutes into the argument position e
linked with 2 in (α′wh hates{DPj}), and (β

′who)
represents the scope and adjoins onto t again
linked with 2 in (α′wh hates{DPj}). The co-
ordinating auxiliary tree pairs (βlikes{DP}) and
(β′likes{DP}) depicted in Figure 2 will each ad-
join onto the TP node in (αwh hates{DPj}) and the
〈e, t〉 node in (α′wh hates{DPj}), both linked with
3 . The full derivation structures and derived trees
are given in Figure 9 and Figure 10.

In our analysis, the wh-movement of the ob-
ject argument takes place within the predicative
initial tree representing the second conjunct, onto
which the coordinating auxiliary tree representing
the first conjunct adjoins, stretching the distance
between the wh-moved DP in [Spec,CP] and the
trace position within the VP. The application of λ-
conversion and the GC Rule to (γ′14) reduces it
to the logical form in (14a), which correctly states
that the person that Sue likes and Kim hates is the
same individual and the question is asking for the
identity of this individual.

4.2 Quantification and coordination

In clausal coordination with shared arguments, in
general, these shared arguments scope over the

〈 αwh hates{DPj}: CP
DPj ↓ 2 C’

C

does

TPoa 3

DPi ↓ 1 T’

T VP

DP

ti

V’

V

hate

DP

tj

,

α′wh hates{DPj}: t2

〈e, t〉3

λx t

e ↓ 1 〈e, t〉

λy.hates(y, x)

e ↓ 2

〉

〈
αwho: DP

D

who

,

{
α′who: e

z

,

β′who: t

〈〈e, t〉, t〉

λP t

WHx t

person(x)

t

P (x)

〈e, t〉

λz t∗

} 〉

Figure 8: Elementary trees for Who does Sue like
and Kim hate?

〈 δ14: αwh hates{DPj}
αKim βlikes{DPi}

αSue

αwho

1 3

1

2

,

δ′14: α′wh hates{DPj}

α′Kim β′likes{DPi}

α′Sue

{α′who, β′who}
1 3

1

2

〉

Figure 9: Derivation structures for Who does Sue
like and Kim hate?

48



〈 γ14: CPDPj
D

who

C’

C

does

TP

TP

DPi

D

Sue

T’

T VP

DP

ti

V’

V

like

DP

e

Conj

and

TP

DPi

D

Kim

T’

T VP

DP

ti

V’

V

hate

DP

D

tj

,

γ′14: t

〈〈e, t〉, t〉

λP t

WHx t

person(x)

t

P (x)

〈e, t〉

λz t

〈e, t〉

〈e, t〉

λx t

e

Sue

〈e, t〉

λy.likes(y, x)

∧ 〈e, t〉

λx t

e

Kim

〈e, t〉

λy.hates(y, x)

e

z

〉

Figure 10: Derived trees for Who does Sue like and Kim hate?

coordinator, and the non-shared arguments scope
under the coordinator (Banik, 2004; Han et al.,
2008). This is illustrated in (15) (repeated from
(9)) for a subject shared argument, and (16) for an
object shared argument. In addition, clausal co-
ordination with multiple shared arguments, as in
(17), exhibits scope ambiguity. All three examples
are taken from Han et al. (2008).

(15) A student read every paper and summarized
every book. (∃ > ∧ > ∀)
a. ∃x1[student(x1)][∀x2[paper(x2)][read(x1, x2)]∧

∀x2[book(x2)][summarized(x1, x2)]]

(16) A student takes and a professor teaches ev-
ery course. (∀ > ∧ > ∃)
a. ∀x2[course(x2)][∃x1[student(x1)][takes(x1, x2)]∧

∃x1[professor(x1)][teaches(x1, x2)]]

(17) A student likes and takes every course.
(∃ > ∀ > ∧, ∀ > ∃ > ∧)
a. ∃x1[student(x1)][∀x2[course(x2)][likes(x1, x2)∧

takes(x1, x2)]]

b. ∀x2[course(x2)][∃x1[student(x1)][likes(x1, x2)∧
takes(x1, x2)]]

In Han et al. (2008), semantic derivation of ex-
amples such as (15)-(17) requires a composition
of an initial predicative tree and a coordinating
auxiliary tree, each with a contraction node rep-
resenting the shared argument. These elementary
trees both project to t. The wide scope of the
shared argument is enforced by stipulating that the
scope component of the contraction node is active
only in the coordinating auxiliary tree, which ad-
joins onto the highest t above the coordinator. The

scope information of the contraction node in the
initial predicative tree is inherited from the scope
component of the contraction node in the coordi-
nating auxiliary tree. In our analysis, the shared
argument is present only in one of the conjuncts,
and so a single scope component straightforwardly
interacts with the coordinator as the coordinat-
ing auxiliary tree adjoins below the scope of the
shared argument.

We use (16) to illustrate our analysis with a
single shared argument and briefly discuss (17)
to illustrate how our analysis can be extended to
multiple shared arguments. Additional elemen-
tary trees needed to derive (16) are given in Fig-
ure 11. We represent the semantics of quanti-
fied nominal phrases as multi-component sets, as
we did for the semantics of who. For example,
for the semantics of a student, (α′a student) pro-
vides the argument variable, and (β′a student) in-
troduces the existential quantifier and provides the
scope of the quantification. In addition to the el-
ementary tree pairs for a student, we will utilize
similar elementary tree pairs for a professor and
every course, with one difference being that the
elementary tree representing the scope component
of every course will contain a universal quantifier,
instead of an existential quantifier. The elemen-
tary tree pairs 〈αteaches{DP}, α′teaches{DP}〉
and 〈βtakes{DP}, β′takes{DP}〉 are similar to the
predicative initial tree and the coordinating aux-
iliary tree we have seen before in Figure 2.
The only difference is that (α′teaches{DP}) and
(β′takes{DP}) are now augmented with links to
accommodate the scope components of the quan-

49



〈 αteaches{DP}: TPoa 3
DPi ↓ 1 T’

T VP

DP

ti

V’

V

teaches

DP ↓ 2

,

α′teaches{DP}: t2

〈e, t〉3

λx t1

e ↓ 1 〈e, t〉

λy.teaches(y, x)

e ↓ 2

〉

〈 βtakes{DP}: TP
TP

DPi ↓ 1 T’

T VP

DP

ti

V’

V

takes

DP

e

Conj

and

TP∗

,

β′takes{DP}: 〈e, t〉

〈e, t〉

λx t1

e ↓ 1 〈e, t〉

λy.takes(y, x)

∧ 〈e, t〉∗

〉

〈
αa student: DP

D

a

NP

N

student

,

{
α′a student: e

z1

,

β′a student: t

〈〈e, t〉, t〉

λP t

∃x1 t

〈e, t〉

λy1.student(y1)

e

x1

t

P (x1)

〈e, t〉

λz1 t∗

} 〉

Figure 11: Elementary trees for A student takes
and a professor teaches every course

tified noun phrases. In (β′takes{DP}), the link
1 for the scope component of the subject DP
is on t, which is below the coordinator. In
(α′teaches{DP}), the link 1 for the scope com-
ponent of the subject DP is on the t below the
〈e, t〉 node onto which the coordinating auxiliary
tree adjoins. Together, the non-shared arguments
in each conjunct are guaranteed to scope below the
coordinator. Moreover, in (α′teaches{DP}), the
scope component of the object DP, which is the
shared argument, is linked to the highest t above
the 〈e, t〉 node onto which the coordinating auxil-
iary tree adjoins. This then ensures that the shared
argument scopes over the coordinator.

The isomorphic syntactic and semantic deriva-
tion structures are given in Figure 12 and the
derived trees are given in Figure 13. To save
space, we have reduced all the generalized quan-
tifier (〈〈e, t〉, t〉) nodes in the semantic derived
tree, (γ′16). Application of the GC Rule and λ-

conversion to (γ′16) further reduces it to the logi-
cal form in (16a).

To derive the clausal coordination with sub-
ject and object shared arguments in (17), ele-
mentary tree pairs for likes and takes consis-
tent with our proposal are provided in Figure 14.
(βlikes{DPi,DP}) is a coordinating auxiliary tree
with an empty DP position for the object and a
DP substitution site for the subject, and is paired
with a multi-component set in semantics that in-
cludes an auxiliary tree recursive on 〈e, 〈e, t〉〉, an
e substitution tree for the subject argument vari-
able, and a t auxiliary tree for the scope compo-
nent of the subject argument. (αtakes{DPi,DP}) is
an initial predicative tree with an empty DP posi-
tion for the subject and a DP substitution site for
the object, and is paired with (α′takes{DPi,DP}),
which has e substitution sites for the subject and
the object argument variables. Note that the t node
of (α′takes{DPi,DP}) has multiple links, 1 and 2 ,
for the scope components of the subject and the
object DPs. This indicates that the two scope com-
ponent trees will multiply-adjoin to the t node, as
defined in Schabes and Shieber (1994), and pre-
dicts scope ambiguity, as the order in which the
two trees adjoin is not specified.

5 Conclusion and Future Work

We have outlined a Synchronous TAG analysis of
clausal coordination with shared arguments that
does not rely on the Conjoin Operation, utilizing
only the standard TAG operations, substitution and
adjoining. Therefore, we do not require modified
parsing algorithms to handle the Conjoin Opera-
tion, unrooted trees, or tree nodes with multiple
parents as in Sarkar and Joshi (1996). In our anal-
ysis, the shared argument is present syntactically
only in one conjunct in which it appears on the
surface. In semantics, the conjunct with a miss-
ing argument is represented as a predicate with an
unsaturated argument, and adjoins onto the pred-
icate node that has been λ-abstracted over by the
shared argument. The shared argument, thus, does
not participate in movement, ellipsis or multiple-
dominance in our analysis, eschewing the incor-
rect predictions made by these approaches.

It remains as future work to extend our analysis
to cases where the shared object argument is in an
island, as in (6). The phenomenon where a syntac-
tic constituent at the right periphery of a rightmost
clause appears to be shared is generally known as

50



〈 δ16: αteaches{DP}
αa professor βtakes{DP}

αa student

αevery course

1 3

1

2

,

δ′16: α′teaches{DP}

{α′a prof, β′a prof} β′takes{DP}

{α′a student, β′a student}

{α′every course, β′every course}
1 3

1

2

〉

Figure 12: Derivation structures for A student takes and a professor teaches every course〈 γ16: TP
TP

DPi

D

a

NP

N

student

T’

T VP

DP

ti

V’

V

takes

DP

�

Conj

and

TP

DPi

D

a

NP

N

professor

T’

T VP

DP

ti

V’

V

teaches

DP

D

every

NP

N

course

,

γ′16: t

〈〈e, t〉, t〉

λP.∀x2(course(x2))(P (x2))

〈e, t〉

λz2 t

〈e, t〉

〈e, t〉

λx t

〈〈e, t〉, t〉

λP.∃x1(stud(x1))(P (x1))

〈e, t〉

λz1 t

e

z1

〈e, t〉

λy.takes(y, x)

∧ 〈e, t〉

λx t

〈〈e, t〉, t〉

λP.∃x1(prof(x1))(P (x1))

〈e, t〉

λz1 t

e

z1

〈e, t〉

λy.teaches(y, x)

e

z2

〉

Figure 13: Derived trees for A student takes and a professor teaches every course

〈 αtakes{DPi,DP}: TPoa 1
DPi

e

T’

T VP

DP

ti

V’

V

takes

DP ↓ 2

,

α′takes{DPi,DP}: t1 2

〈e, t〉

〈e, 〈e, t〉〉1

λxλy.takes(y, x)

e ↓ 2

e ↓ 1

〉

〈 βlikes{DPi,DP}: TP
TP

DPi ↓ 1 T’

T VP

DP

ti

V’

V

likes

DP

e

Conj

and

TP∗

,

{ β′likes{DPi,DP}: 〈e〈e, t〉〉
〈e, 〈e, t〉〉

λxλy.likes(y, x)

∧ 〈e〈e, t〉〉∗ , e ↓ 1 , t ∗ 1

}
〉

Figure 14: Elementary trees for A student likes and
takes every course

Right-Node-Raising (RNR). RNR is not restricted
to coordination, as can be seen in (18) (Hudson,
1976; Goodall, 1987; Postal, 1994).

(18) Politicians [who have fought for] may well
snub those [who have fought against ani-
mal rights]. (Postal, 1994)

A question that must be addressed first though is
whether all apparent RNR constructions should
be given a unified account (Barros and Vicente,
2011). We leave this as future research as well.

Acknowledgments

We thank the three anonymous reviewers of
TAG+13 for their insightful comments. This re-
search was partially supported by SSHRC 435-
2014-0161 to Han and NSERC RGPIN 262313
and RGPAS 446348 to Sarkar.

References
Eva Banik. 2004. Semantics of VP coordination in

LTAG. In Proceedings of the 7th International
Workshop on Tree Adjoining Grammars and Related
Formalisms (TAG+7). Vancouver, Canada, pages
118–125.

Matthew Barros and Luis Vicente. 2011. Right node
raising requires both ellipsis and multidomination.

51



University of Pennsylvania Working Papers in Lin-
guistics 17(1):Article 2.

Jon Barwise and Robin Cooper. 1981. Generalized
quantifiers and natural language. Linguistics and
Philosophy 4:159–219.

Ronnie Cann, Ruth Kempson, Lutz Marten, and
Masayuki Otsuka. 2005. Right node raising, coor-
dination and the dynamics of language processing.
Lingua 115:503–525.

Robert Frank. 2002. Phrase Structure Composition
and Syntactic Dependencies. MIT Press, Cam-
bridge, MA.

Robert Frank and Dennis Ryan Storoshenko. 2012.
The shape of elementary trees and scope possibili-
ties in STAG. In Proceedings of the 11th Interna-
tional Workshop on Tree Adjoining Grammars and
Related Formalisms (TAG+11). Paris, pages 232–
240.

Grant Goodall. 1987. Parallel structures in syntax.
Cambridge University Press.

Chung-hye Han, David Potter, and Dennis
Storoshenko. 2008. Compositional semantics
of coordination using synchronous tree adjoining
grammar. In Proceedings of the 9th International
Workshop on Tree Adjoining Grammars and Related
Formalisms (TAG+9). Tuebingen, Germany, pages
33–40.

Chung-hye Han, David Potter, and Dennis
Storoshenko. 2010. Non-local right node rais-
ing: an analysis using delayed tree-local MC-TAG.
In Proceedings of the 10th International Work-
shop on Tree Adjoining Grammars and Related
Formalisms (TAG+10). Yale University.

Richard A. Hudson. 1976. Conjunction reduction, gap-
ping, and right-node raising. Language 52(3):535–
562.

James D. McCawley. 1982. Parentheticals and dis-
continuous constituent structure. Linguistic Inquiry
13:91–106.

Rebecca Nesson and Stuart Shieber. 2007. Extraction
phenomena in Synchronous TAG syntax and seman-
tics. In Dekai Wu and David Chiang, editors, Pro-
ceedings of the Workshop on Syntax and Structure in
Statistical Translation. Rochester, New York.

Rebecca Nesson and Stuart M. Shieber. 2006. Simpler
TAG Semantics through Synchronization. In Pro-
ceedings of the 11th Conference on Formal Gram-
mar. CSLI, Malaga, Spain.

Paul Postal. 1994. Parasitic and pseudoparasitic gaps.
Linguistic Inquiry 25:63–117.

John Robert Ross. 1967. Constraints on variables in
syntax. Ph.D. thesis, MIT, Cambridge, MA.

Joseph Sabbagh. 2007. Ordering and linearizing right-
ward movement. Natural Language and Linguistic
Theory 25:349–401.

Joseph Sabbagh. 2014. Right node raising. Language
and Linguistic Compass 8/1:24–35.

Anoop Sarkar and Aravind Joshi. 1996. Coordina-
tion in Tree Adjoining Grammars: formalization and
implementation. In Proceedings of COLING’96.
Copenhagen, pages 610–615.

Yves Schabes and Stuart M. Shieber. 1994. An Al-
ternative Conception of Tree-Adjoining Derivation.
Computational Linguistics 20(1):91–124.

Stuart Shieber and Yves Schabes. 1990. Synchronous
Tree Adjoining Grammars. In Proceedings of COL-
ING’90. Helsinki, Finland.

Mark Steedman. 1996. Surface Structure and Interpre-
tation. MIT Press, Cambridge, MA.

Dennis Ryan Storoshenko and Robert Frank. 2012.
Deriving syntax-semantics mappings: node linking,
type shifting and scope ambiguity. In Proceedings
of the 11th International Workshop on Tree Adjoin-
ing Grammars and Related Formalisms (TAG+11).
Paris, pages 10–18.

K Vijay-Shanker. 1992. Using descriptions of trees in a
tree adjoining grammar. Computational Linguistics
18(4):481–517.

Ken Wexler and Peter W. Culicover. 1980. Formal
Principles of Language Acquisition. MIT Press,
Cambridge, MA.

52


