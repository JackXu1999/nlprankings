




































coi00215.dvi


When the Whole Is Not Greater
Than the Combination of Its Parts:
A “Decompositional” Look at
Compositional Distributional Semantics

Fabio Massimo Zanzotto∗
University of Rome “Tor Vergata”

Lorenzo Ferrone
University of Rome “Tor Vergata”

Marco Baroni
University of Trento

Distributional semantics has been extended to phrases and sentences by means of composition
operations. We look at how these operations affect similarity measurements, showing that simi-
larity equations of an important class of composition methods can be decomposed into operations
performed on the subparts of the input phrases. This establishes a strong link between these
models and convolution kernels.

1. Introduction

Distributional semantics approximates word meanings with vectors tracking co-
occurrence in corpora (Turney and Pantel 2010). Recent work has extended this ap-
proach to phrases and sentences through vector composition (Clark 2015). Resulting
compositional distributional semantic models (CDSMs) estimate degrees of seman-
tic similarity (or, more generally, relatedness) between two phrases: A good CDSM
might tell us that green bird is closer to parrot than to pigeon, useful for tasks such as
paraphrasing.

We take a mathematical look1 at how the composition operations postulated by
CDSMs affect similarity measurements involving the vectors they produce for phrases
or sentences. We show that, for an important class of composition methods, encom-
passing at least those based on linear transformations, the similarity equations can
be decomposed into operations performed on the subparts of the input phrases,

∗ Department of Enterprise Engineering, University of Rome “Tor Vergata,” Viale del Politecnico, 1,
00133 Rome, Italy. E-mail: fabio.massimo.zanzotto@uniroma2.it.

1 Ganesalingam and Herbelot (2013) also present a mathematical investigation of CDSMs. However,
except for the tensor product (a composition method we do not consider here as it is not empirically
effective), they do not look at how composition strategies affect similarity comparisons.

Original submission received: 10 December 2013; revision received: 26 May 2014; accepted for publication:
1 August 2014.

doi:10.1162/COLI a 00215

© 2015 Association for Computational Linguistics



Computational Linguistics Volume 41, Number 1

Table 1
Compositional Distributional Semantic Models:�a,�b, and �c are distributional vectors representing
the words a, b, and c, respectively; matrices X, Y, and Z are constant across a phrase type,
corresponding to syntactic slots; the matrix A and the third-order tensor BBB represent the
predicate words a in the first phrase and b in the second phrase, respectively.

2-word phrase 3-word phrase reference

Additive �a +�b �a +�b +�c Mitchell and Lapata (2008)
Multiplicative �a ��b �a ��b ��c Mitchell and Lapata (2008)
Full Additive X�a + Y�b Y�a + X�b + Z�c Guevara (2010), Zanzotto et al. (2010)
Lexical Function A�b �a BBB�c Coecke, Sadrzadeh, and Clark (2010)

and typically factorized into terms that reflect the linguistic structure of the input.
This establishes a strong link between CDSMs and convolution kernels (Haussler
1999), which act in the same way. We thus refer to our claim as the “Convolution
Conjecture.”

We focus on the models in Table 1. These CDSMs all apply linear methods, and
we suspect that linearity is a sufficient (but not necessary) condition to ensure that the
Convolution Conjecture holds. We will first illustrate the conjecture for linear methods,
and then briefly consider two nonlinear approaches: the dual space model of Turney
(2012), for which it does, and a representative of the recent strand of work on neural-
network models of composition, for which it does not.

2. Mathematical Preliminaries

Vectors are represented as small letters with an arrow �a and their elements are ai,
matrices as capital letters in bold A and their elements are Aij, and third-order or
fourth-order tensors as capital letters in the form AAA and their elements are Aijk or Aijkh.
The symbol � represents the element-wise product and ⊗ is the tensor product. The
dot product is 〈�a,�b〉 and the Frobenius product—that is, the generalization of the dot
product to matrices and high-order tensors—is represented as 〈A, B〉F and 〈AAA,BBB〉F. The
Frobenius product acts on vectors, matrices, and third-order tensors as follows:

〈�a,�b〉F =
∑

i

aibi = 〈�a,�b〉 〈A, B〉F =
∑

ij AijBij 〈AAA,BBB〉F =
∑

ijk

AijkBijk (1)

A simple property that relates the dot product between two vectors and the
Frobenius product between two general tensors is the following:

〈�a,�b〉 = 〈I,�a�bT〉F (2)

where I is the identity matrix. The dot product of A�x and B�y can be rewritten as:

〈A�x, B�y〉 = 〈ATB,�x�yT〉F (3)

166



Zanzotto, Ferrone, and Baroni When the Whole Is Not Greater Than the Combination of Its Parts

Let AAA and BBB be two third-order tensors and �x, �y,�a, �c four vectors. It can be shown that:

〈�xAAA�y,�aBBB�c 〉 = 〈
∑

j

(AAA⊗ BBB)j,�x ⊗ �y ⊗�a ⊗�c 〉F (4)

where CCC =
∑

j(AAA⊗ BBB)j is a non-standard way to indicate the tensor contraction of the
tensor product between two third-order tensors. In this particular tensor contraction,
the elements Ciknm of the resulting fourth-order tensor CCC are Ciknm =

∑
j AijkBnjm. The

elements Diknm of the tensor DDD = �x ⊗ �y ⊗�a ⊗�c are Diknm = xiykancm.

3. Formalizing the Convolution Conjecture

Structured Objects. In line with Haussler (1999), a structured object x ∈ X is either
a terminal object that cannot be furthermore decomposed, or a non-terminal object
that can be decomposed into n subparts. We indicate with x = (x1, . . . , xn) one such
decomposition, where the subparts xi ∈ X are structured objects themselves. The set
X is the set of the structured objects and TX ⊆ X is the set of the terminal objects. A
structured object x can be anything according to the representational needs. Here, x is
a representation of a text fragment, and so it can be a sequence of words, a sequence
of words along with their part of speech, a tree structure, and so on. The set R(x) is
the set of decompositions of x relevant to define a specific CDSM. Note that a given
decomposition of a structured object x does not need to contain all the subparts of the
original object. For example, let us consider the phrase x = tall boy. We can then define
R(x) = {(tall, boy), (tall), (boy)}. This set contains the three possible decompositions of
the phrase: ( tall︸︷︷︸

x1

, boy︸︷︷︸
x2

), ( tall︸︷︷︸
x1

), and (boy︸︷︷︸
x1

).

Recursive formulation of CDSM. A CDSM can be viewed as a function f that acts recur-
sively on a structured object x. If x is a non-terminal object

f (x) =
⊙

x∈R(x)
γ( f (x1), f (x2), . . . , f (xn)) (5)

where R(x) is the set of relevant decompositions, ⊙ is a repeated operation on this
set, γ is a function defined on f (xi) where xi are the subparts of a decomposition of
x. If x is a terminal object, f (x) is directly mapped to a tensor. The function f may
operate differently on different kinds of structured objects, with tensor degree varying
accordingly. The set R(x) and the functions f , γ, and ⊙ depend on the specific CDSM,
and the same CDSM might be susceptible to alternative analyses satisfying the form in
Equation (5). As an example, under Additive, x is a sequence of words and f is

f (x) =

⎧⎨
⎩

∑
y∈R(x)

f (y) if x /∈ TX

�x if x ∈ TX
(6)

167



Computational Linguistics Volume 41, Number 1

where R((w1, . . . , wn)) = {(w1), . . . , (wn)}. The repeated operation
⊙

corresponds to
summing and γ is identity. For Multiplicative we have

f (x) =

⎧⎨
⎩
�

y∈R(x)
f (y) if x /∈ TX

�x if x ∈ TX
(7)

where R(x) = {(w1, . . . , wn)} (a single trivial decomposition including all subparts).
With a single decomposition, the repeated operation reduces to a single term; and here γ
is the product (it will be clear subsequently, when we apply the Convolution Conjecture
to these models, why we are assuming different decomposition sets for Additive and
Multiplicative).

Definition 1 (Convolution Conjecture)
For every CDSM f along with its R(x) set, there exist functions K, Ki and a function g
such that:

K( f (x), f (y)) =
∑

x∈R(x)
y∈R(y)

g(K1( f (x1), f (y1)), K2( f (x2), f (y2)), . . . , Kn( f (xn), f (yn))) (8)

The Convolution Conjecture postulates that the similarity K( f (x), f (y)) between the
tensors f (x) and f (y) is computed by combining operations on the subparts, that is,
Ki( f (xi), f (yi)), using the function g. This is exactly what happens in convolution kernels
(Haussler 1999). K is usually the dot product, but this is not necessary: We will show
that for the dual-space model of Turney (2012) K turns out to be the fourth root of the
Frobenius tensor.

4. Comparing Composed Phrases

We illustrate now how the Convolution Conjecture (CC) applies to the considered
CDSMs, exemplifying with adjective–noun and subject–verb–object phrases. Without
loss of generality we use tall boy and red cat for adjective–noun phrases and goats eat
grass and cows drink water for subject–verb–object phrases.

Additive Model. K and Ki are dot products, g is the identity function, and f is as in
Equation (6). The structure of the input is a word sequence (i.e., x = (w1 w2)) and the
relevant decompositions consist of these single words, R(x) = {(w1), (w2)}. Then

K( f (tall boy), f (red cat)) = 〈 �tall + �boy, �red + �cats〉 =
= 〈 �tall, �red〉+ 〈 �tall, �cat〉+ 〈 �boy, �red〉+ 〈 �boy, �cat〉 =
=

∑
x∈{tall,boy}
y∈{red,cat}

〈 f (x), f (y)〉 =
∑

x∈{tall,boy}
y∈{red,cat}

K( f (x), f (y)) (9)

The CC form of Additive shows that the overall dot product can be decomposed
into dot products of the vectors of the single words. Composition does not add any
further information. These results can be easily extended to longer phrases and to
phrases of different length.

168



Zanzotto, Ferrone, and Baroni When the Whole Is Not Greater Than the Combination of Its Parts

Multiplicative Model. K, g are dot products, Ki the component-wise product, and
f is as in Equation (7). The structure of the input is x = (w1 w2), and we use the
trivial single decomposition consisting of all subparts (thus summation reduces to a
single term):

K( f (tall boy), f (red cat)) = 〈 �tall � �boy, �red � �cat〉 = 〈 �tall � �red � �boy � �cat,�1〉 =
= 〈 �tall � �red, �boy � �cat〉 = g(K1( �tall, �red), K2( �boy, �cat))

(10)

This is the dot product between an indistinct chain of element-wise products and a
vector �1 of all ones or the product of two separate element-wise products, one on
adjectives �tall � �red, and one on nouns �boy � �cat. In this latter CC form, the final dot
product is obtained in two steps: first separately operating on the adjectives and on the
nouns; then taking the dot product of the resulting vectors. The comparison operations
are thus reflecting the input syntactic structure. The results can be easily extended to
longer phrases and to phrases of different lengths.

Full Additive Model. The input consists of a sequence of (label,word) pairs x =
((L1 w1), . . . , (Ln wn)) and the relevant decomposition set includes the single tuples,
that is, R(x) = {(L1 w1), . . . , (Ln wn)}. The CDSM f is defined as

f (x) =

⎧⎪⎪⎪⎨
⎪⎪⎪⎩

∑
(L w)∈R(x)

f (L)f (w) if x /∈ TX

X if x ∈ TX is a label L
�w if x ∈ TX is a word w

(11)

The repeated operation
⊙

here is summation, and γ the matrix-by-vector product.
In the CC form, K is the dot product, g the Frobenius product, K1( f (x), f (y)) = f (x)Tf (y),
and K2( f (x), f (y)) = f (x)f (y)T. We have then for adjective–noun composition (by
using the property in Equation (3)):

K( f ((A tall) (N boy)), f ((A red) (N cat))) = 〈A �tall + N �boy, A �red + N �cat〉 =
= 〈A �tall, A �red〉+ 〈A �tall, N �cat〉+ 〈N �boy, A �red〉+ 〈N �boy, N �cat〉 =
= 〈ATA, �tall �redT〉F + 〈NTA, �boy �red

T〉F + 〈ATN, �tall �catT〉F + 〈NTN, �boy �catT〉F =
=

∑
(lx wx)∈{(A tall),(N boy)}
(ly wy )∈{(A red),(N cat)}

g(K1( f (lx), f (ly)), K2( f (wx), f (wy))
(12)

The CC form shows how Full Additive factorizes into a more structural and a
more lexical part: Each element of the sum is the Frobenius product between the
product of two matrices representing syntactic labels and the tensor product between

169



Computational Linguistics Volume 41, Number 1

two vectors representing the corresponding words. For subject–verb–object phrases
((S w1) (V w2) (O w3)) we have

K( f (((S goats) (V eat) (O grass))), f (((S cows) (V drink) (O water)))) =
= 〈S �goats + V �eat + O �grass, S �cows + V �drink + O �water〉 =
= 〈STS, �goats �cowsT〉F + 〈STV, �goats �drink

T〉F + 〈STO, �goats �waterT〉F
+〈VTS, �eat �cowsT〉F + 〈VTV, �eat �drink

T〉F + 〈VTO, �eat �waterT〉F
+〈OTS, �grass �cowsT〉F + 〈OTV, �grass �drink

T〉F + 〈OTO, �grass �waterT〉F
=

∑
(lx wx)∈{(S goats),(V eat),(O grass)}

(ly wy )∈{(S cows),(V drink),(O water)}

g(K1( f (lx), f (ly)), K2( f (wx), f (wy))

(13)

Again, we observe the factoring into products of syntactic and lexical representations.
By looking at Full Additive in the CC form, we observe that when XTY ≈ I for all

matrix pairs, it degenerates to Additive. Interestingly, Full Additive can also approx-
imate a semantic convolution kernel (Mehdad, Moschitti, and Zanzotto 2010), which
combines dot products of elements in the same slot. In the adjective–noun case, we
obtain this approximation by choosing two nearly orthonormal matrices A and N such
that AAT = NNT ≈ I and ANT ≈ 0 and applying Equation (2): 〈A �tall + N �boy, A �red +
N �cat〉 ≈ 〈tall, red〉+ 〈boy, cat〉.

This approximation is valid also for three-word phrases. When the matrices S, V,
and O are such that XXT ≈ I with X one of the three matrices and YXT ≈ 0 with X and
Y two different matrices, Full Additive approximates a semantic convolution kernel
comparing two sentences by summing the dot products of the words in the same role,
that is,

〈S �goats + V �eat + O �grass, S �cows + V �drink + O �water〉 ≈
≈ 〈goats, cows〉+ 〈eat, drink〉+ 〈grass, water〉 (14)

Results can again be easily extended to longer and different-length phrases.

Lexical Function Model. We distinguish composition with one- vs. two argument pred-
icates. We illustrate the first through adjective–noun composition, where the adjective
acts as the predicate, and the second with transitive verb constructions. Although we
use the relevant syntactic labels, the formulas generalize to any construction with the
same argument count. For adjective–noun phrases, the input is a sequence of (label,
word) pairs (x = ((A, w1), (N, w2))) and the relevant decomposition set again includes
only the single trivial decomposition into all the subparts: R(x) = {((A, w1), (N, w2))}.
The method itself is recursively defined as

f (x) =

⎧⎪⎨
⎪⎩

f ((A, w1))f ((N, w2)) if x /∈ TX = ((A, w1), (N, w2))
W1 if x ∈ Tx = (A, w1)
�w2 if x ∈ Tx = (N, w2)

(15)

170



Zanzotto, Ferrone, and Baroni When the Whole Is Not Greater Than the Combination of Its Parts

Here, K and g are, respectively, the dot and Frobenius product, K1( f (x), f (y)) = f (x)Tf (y),
and K2( f (x), f (y)) = f (x)f (y)T. Using Equation (3), we have then

K( f (tall boy)), f (red cat)) = 〈TALL �boy, RED �cat〉 =
= 〈TALLTRED, �boy �catT〉F = g(K1( f (tall), f (red)), K2( f (boy), f (cat)))

(16)

The role of predicate and argument words in the final dot product is clearly
separated, showing again the structure-sensitive nature of the decomposition of the
comparison operations. In the two-place predicate case, again, the input is a set of
(label, word) tuples, and the relevant decomposition set only includes the single trivial
decomposition into all subparts. The CDSM f is defined as

f (x) =

⎧⎪⎨
⎪⎩

f ((S w1)) ⊗ f ((V w2)) ⊗ f ((O w3)) if x /∈ TX = ((S w1) (V w2) (O w3))
�w if x ∈ TX = (l w) and l is S or O
WWW if x ∈ TX = (V w)

(17)

K is the dot product and g(x, y, z) = 〈x, y ⊗ z〉F, K1( f (x), f (y)) =
∑

j( f (x) ⊗ f (y))j—
that is, the tensor contraction2 along the second index of the tensor product between
f (x) and f (y)—and K2( f (x), f (y)) = K3( f (x), f (y)) = f (x) ⊗ f (y) are tensor products. The
dot product of �goats EATEATEAT �grass and �cows DRINKDRINKDRINK �water is (by using Equation (4))

K( f (((S goats) (V eat) (O grass))), f (((S cows) (V drink) (O water)))) =
= 〈 �goats EATEATEAT �grass, �cows DRINKDRINKDRINK �water〉 =
= 〈∑j(EATEATEAT⊗ DRINKDRINKDRINK)j, �goats ⊗ �grass ⊗ �cows ⊗ �water〉F =
= g(K1( f ((V eat)), f ((V drink))),

K2( f ((S goats)), f ((S cows))) ⊗ K3( f ((O grass)), f ((O water))))

(18)

We rewrote the equation as a Frobenius product between two fourth-order ten-
sors. The first combines the two third-order tensors of the verbs

∑
j(EATEATEAT⊗ DRINKDRINKDRINK)j

and the second combines the vectors representing the arguments of the verb, that is:
�goats ⊗ �grass ⊗ �cows ⊗ �water. In this case as well we can separate the role of predicate

and argument types in the comparison computation.
Extension of the Lexical Function to structured objects of different lengths is treated

by using the identity element � for missing parts. As an example, we show here the
comparison between tall boy and cat where the identity element is the identity matrix I:

K( f (tall boy)), f (cat)) = 〈TALL �boy, �cat〉 = 〈TALL �boy, I �cat〉 =
= 〈TALLTI, �boy �catT〉F = g(K1( f (tall), f (�)), K2( f (boy), f (cat)))

(19)

Dual Space Model. We have until now applied the CC to linear CDSMs with the dot
product as the final comparison operator (what we called K). The CC also holds for
the effective Dual Space model of Turney (2012), which assumes that each word has
two distributional representations, wd in “domain” space and wf in “function” space.
The similarity of two phrases is directly computed as the geometric average of the
separate similarities between the first and second words in both spaces. Even though

2 Grefenstette et al. (2013) first framed the Lexical Function in terms of tensor contraction.

171



Computational Linguistics Volume 41, Number 1

there is no explicit composition step, it is still possible to put the model in CC form.
Take x = (x1, x2) and its trivial decomposition. Define, for a word w with vector rep-
resentations wd and wf : f (w) = �wd �wf

T. Define also K1( f (x1), f (y1)) =
√〈 f (x1), f (y1)〉F,

K2( f (x2), f (y2)) =
√〈 f (x2), f (y2)〉F and g(a, b) to be √ab. Then

g(K1( f (x1), f (y1)), K2( f (x2), f (y2))) =

=

√√
〈 �xd1 �xf 1T, �yd1 �yf 1T〉F ·

√
〈 �xd2 �xf 2T, �yd2 �yf 2T〉F =

= 4
√
〈 �xd1, �yd1〉 · 〈 �xf 1, �yf 1〉 · 〈 �xd2, �yd2〉 · 〈 �xf 2, �yf 2〉 =

= geo(sim(xd1, yd1), sim(xd2, yd2), sim(xf 1, yf 1), sim(xf 2, yf 2))

(20)

A Neural-network-like Model. Consider the phrase (w1, w2, . . . , wn) and the model defined
by f (x) = σ( �w1 + �w2 + . . .+ �wn), where σ(·) is a component-wise logistic function. Here
we have a single trivial decomposition that includes all the subparts, and γ(x1, . . . , xn)
is defined as σ(x1 + . . .+ xn). To see that for this model the CC cannot hold, consider
two two-word phrases (a b) and (c d)

K( f ((a, b)), f ((c, d))) = 〈 f ((a, b)), f ((c, d))〉 = ∑i
[
σ(�a +�b)

]
i
·
[
σ(�c + �d)

]
i

=
∑

i

(
1 + e−ai−bi + e−ci−di + e−ai−bi−ci−di

)−1
(21)

We need to rewrite this as

g(K1(�a,�c), K2(�b, �d)) (22)

But there is no possible choice of g, K1, and K2 that allows Equation (21) to be written
as Equation (22). This example can be regarded as a simplified version of the neural-
network model of Socher et al. (2011). The fact that the CC does not apply to it suggests
that it will not apply to other models in this family.

5. Conclusion

The Convolution Conjecture offers a general way to rewrite the phrase similarity com-
putations of CDSMs by highlighting the role played by the subparts of a composed
representation. This perspective allows for a better understanding of the exact op-
erations that a composition model applies to its input. The Convolution Conjecture
also suggests a strong connection between CDSMs and semantic convolution kernels.
This link suggests that insights from the CDSM literature could be directly integrated
in the development of convolution kernels, with all the benefits offered by this well-
understood general machine-learning framework.

Acknowledgments
We thank the reviewers for
helpful comments. Marco Baroni
acknowledges ERC 2011 Starting
Independent Research Grant
n. 283554 (COMPOSES).

References
Clark, Stephen. 2015. Vector space models

of lexical meaning. In Shalom Lappin
and Chris Fox, editors, Handbook of
Contemporary Semantics, 2nd ed.
Blackwell, Malden, MA. In press.

172



Zanzotto, Ferrone, and Baroni When the Whole Is Not Greater Than the Combination of Its Parts

Coecke, Bob, Mehrnoosh Sadrzadeh, and
Stephen Clark. 2010. Mathematical
foundations for a compositional
distributional model of meaning.
Linguistic Analysis, 36:345–384.

Ganesalingam, Mohan and Aurélie Herbelot.
2013. Composing distributions:
Mathematical structures and their
linguistic interpretation. Working paper,
Computer Laboratory, University
of Cambridge. Available at
www.cl.cam.ac.uk/∼ah433/.

Grefenstette, Edward, Georgiana Dinu,
Yao-Zhong Zhang, Mehrnoosh Sadrzadeh,
and Marco Baroni. 2013. Multi-step
regression learning for compositional
distributional semantics. Proceedings
of IWCS, pages 131–142, Potsdam.

Guevara, Emiliano. 2010. A regression
model of adjective-noun compositionality
in distributional semantics. In Proceedings
of GEMS, pages 33–37, Uppsala.

Haussler, David. 1999. Convolution kernels
on discrete structures. Technical report
USCS-CL-99-10, University of California
at Santa Cruz.

Mehdad, Yashar, Alessandro Moschitti,
and Fabio Massimo Zanzotto. 2010.

Syntactic/semantic structures for
textual entailment recognition. In
Proceedings of NAACL, pages 1,020–1,028,
Los Angeles, CA.

Mitchell, Jeff and Mirella Lapata. 2008.
Vector-based models of semantic
composition. In Proceedings of ACL,
pages 236–244, Columbus, OH.

Socher, Richard, Eric Huang, Jeffrey Pennin,
Andrew Ng, and Christopher Manning.
2011. Dynamic pooling and unfolding
recursive autoencoders for paraphrase
detection. In Proceedings of NIPS,
pages 801–809, Granada.

Turney, Peter. 2012. Domain and function:
A dual-space model of semantic relations
and compositions. Journal of Artificial
Intelligence Research, 44:533–585.

Turney, Peter and Patrick Pantel. 2010.
From frequency to meaning: Vector
space models of semantics. Journal of
Artificial Intelligence Research, 37:141–188.

Zanzotto, Fabio Massimo, Ioannis
Korkontzelos, Francesca Falucchi, and
Suresh Manandhar. 2010. Estimating linear
models for compositional distributional
semantics. In Proceedings of COLING,
pages 1,263–1,271, Beijing.

173


















<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /All
  /Binding /Left
  /CalGrayProfile (Dot Gain 20%)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Tags
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJDFFile false
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams false
  /MaxSubsetPct 100
  /Optimize true
  /OPM 1
  /ParseDSCComments true
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo true
  /PreserveFlatness true
  /PreserveHalftoneInfo false
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Apply
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 300
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages true
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /ColorImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 30
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 30
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 300
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages true
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /GrayImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 30
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 30
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 1200
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile ()
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False

  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000500044004600206587686353ef901a8fc7684c976262535370673a548c002000700072006f006f00660065007200208fdb884c9ad88d2891cf62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef653ef5728684c9762537088686a5f548c002000700072006f006f00660065007200204e0a73725f979ad854c18cea7684521753706548679c300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002000740069006c0020006b00760061006c00690074006500740073007500640073006b007200690076006e0069006e006700200065006c006c006500720020006b006f007200720065006b007400750072006c00e60073006e0069006e0067002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200076006f006e002000640065006e0065006e002000530069006500200068006f00630068007700650072007400690067006500200044007200750063006b006500200061007500660020004400650073006b0074006f0070002d0044007200750063006b00650072006e00200075006e0064002000500072006f006f0066002d00470065007200e400740065006e002000650072007a0065007500670065006e0020006d00f60063006800740065006e002e002000450072007300740065006c006c007400650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000410064006f00620065002000520065006100640065007200200035002e00300020006f0064006500720020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f0062006500200050004400460020007000610072006100200063006f006e00730065006700750069007200200069006d0070007200650073006900f3006e002000640065002000630061006c006900640061006400200065006e00200069006d0070007200650073006f0072006100730020006400650020006500730063007200690074006f00720069006f00200079002000680065007200720061006d00690065006e00740061007300200064006500200063006f00720072006500630063006900f3006e002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f00620065002000500044004600200070006f007500720020006400650073002000e90070007200650075007600650073002000650074002000640065007300200069006d007000720065007300730069006f006e00730020006400650020006800610075007400650020007100750061006c0069007400e90020007300750072002000640065007300200069006d007000720069006d0061006e0074006500730020006400650020006200750072006500610075002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA <FEFF005500740069006c0069007a007a006100720065002000710075006500730074006500200069006d0070006f007300740061007a0069006f006e00690020007000650072002000630072006500610072006500200064006f00630075006d0065006e00740069002000410064006f006200650020005000440046002000700065007200200075006e00610020007300740061006d007000610020006400690020007100750061006c0069007400e00020007300750020007300740061006d00700061006e0074006900200065002000700072006f006f0066006500720020006400650073006b0074006f0070002e0020004900200064006f00630075006d0065006e007400690020005000440046002000630072006500610074006900200070006f00730073006f006e006f0020006500730073006500720065002000610070006500720074006900200063006f006e0020004100630072006f00620061007400200065002000410064006f00620065002000520065006100640065007200200035002e003000200065002000760065007200730069006f006e006900200073007500630063006500730073006900760065002e>
    /JPN <FEFF9ad854c18cea51fa529b7528002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e30593002537052376642306e753b8cea3092670059279650306b4fdd306430533068304c3067304d307e3059300230c730b930af30c830c330d730d730ea30f330bf3067306e53705237307e305f306f30d730eb30fc30d57528306b9069305730663044307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020b370c2a4d06cd0d10020d504b9b0d1300020bc0f0020ad50c815ae30c5d0c11c0020ace0d488c9c8b85c0020c778c1c4d560002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken voor kwaliteitsafdrukken op desktopprinters en proofers. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200066006f00720020007500740073006b00720069006600740020006100760020006800f800790020006b00760061006c00690074006500740020007000e500200062006f007200640073006b0072006900760065007200200065006c006c00650072002000700072006f006f006600650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002000730065006e006500720065002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f0062006500200050004400460020007000610072006100200069006d0070007200650073007300f5006500730020006400650020007100750061006c0069006400610064006500200065006d00200069006d00700072006500730073006f0072006100730020006400650073006b0074006f00700020006500200064006900730070006f00730069007400690076006f0073002000640065002000700072006f00760061002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a00610020006c0061006100640075006b006100730074006100200074007900f6007000f60079007400e400740075006c006f0073007400750073007400610020006a00610020007600650064006f007300740075007300740061002000760061007200740065006e002e00200020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740020006600f600720020006b00760061006c00690074006500740073007500740073006b0072006900660074006500720020007000e5002000760061006e006c00690067006100200073006b0072006900760061007200650020006f006300680020006600f600720020006b006f007200720065006b007400750072002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create Adobe PDF documents for quality printing on desktop printers and proofers.  Created PDF documents can be opened with Acrobat and Adobe Reader 5.0 and later.)
  >>
  /Namespace [
    (Adobe)
    (Common)
    (1.0)
  ]
  /OtherNamespaces [
    <<
      /AsReaderSpreads false
      /CropImagesToFrames true
      /ErrorControl /WarnAndContinue
      /FlattenerIgnoreSpreadOverrides false
      /IncludeGuidesGrids false
      /IncludeNonPrinting false
      /IncludeSlug false
      /Namespace [
        (Adobe)
        (InDesign)
        (4.0)
      ]
      /OmitPlacedBitmaps false
      /OmitPlacedEPS false
      /OmitPlacedPDF false
      /SimulateOverprint /Legacy
    >>
    <<
      /AddBleedMarks false
      /AddColorBars false
      /AddCropMarks false
      /AddPageInfo false
      /AddRegMarks false
      /ConvertColors /NoConversion
      /DestinationProfileName ()
      /DestinationProfileSelector /NA
      /Downsample16BitImages true
      /FlattenerPreset <<
        /PresetSelector /MediumResolution
      >>
      /FormElements false
      /GenerateStructure true
      /IncludeBookmarks false
      /IncludeHyperlinks false
      /IncludeInteractive false
      /IncludeLayers false
      /IncludeProfiles true
      /MultimediaHandling /UseObjectSettings
      /Namespace [
        (Adobe)
        (CreativeSuite)
        (2.0)
      ]
      /PDFXOutputIntentProfileSelector /NA
      /PreserveEditing true
      /UntaggedCMYKHandling /LeaveUntagged
      /UntaggedRGBHandling /LeaveUntagged
      /UseDocumentBleed false
    >>
  ]
>> setdistillerparams
<<
  /HWResolution [2400 2400]
  /PageSize [612.000 792.000]
>> setpagedevice

