



















































TRANX: A Transition-based Neural Abstract Syntax Parser for Semantic Parsing and Code Generation


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing (System Demonstrations), pages 7–12
Brussels, Belgium, October 31–November 4, 2018. c©2018 Association for Computational Linguistics

7

TRANX: A Transition-based Neural Abstract Syntax Parser for Semantic
Parsing and Code Generation

Pengcheng Yin, Graham Neubig
Language Technologies Institute

Carnegie Mellon University
{pcyin,gneubig}@cs.cmu.edu

Abstract
We present TRANX, a transition-based neu-
ral semantic parser that maps natural language
(NL) utterances into formal meaning repre-
sentations (MRs). TRANX uses a transition
system based on the abstract syntax descrip-
tion language for the target MR, which gives
it two major advantages: (1) it is highly ac-
curate, using information from the syntax of
the target MR to constrain the output space
and model the information flow, and (2) it is
highly generalizable, and can easily be applied
to new types of MR by just writing a new ab-
stract syntax description corresponding to the
allowable structures in the MR. Experiments
on four different semantic parsing and code
generation tasks show that our system is gen-
eralizable, extensible, and effective, register-
ing strong results compared to existing neural
semantic parsers.1

1 Introduction

Semantic parsing is the task of transducing nat-
ural language (NL) utterances into formal mean-
ing representations (MRs). The target MRs can
be defined according to a wide variety of for-
malisms. This include linguistically-motivated se-
mantic representations that are designed to cap-
ture the meaning of any sentence such as λ-
calculus (Zettlemoyer and Collins, 2005) or the
abstract meaning representations (Banarescu et al.,
2013). Alternatively, for more task-driven ap-
proaches to semantic parsing, it is common for
meaning representations to represent executable
programs such as SQL queries (Zhong et al.,
2017), robotic commands (Artzi and Zettlemoyer,
2013), smart phone instructions (Quirk et al.,
2015), and even general-purpose programming
languages like Python (Yin and Neubig, 2017; Ra-
binovich et al., 2017) and Java (Ling et al., 2016).

1Available at https://github.com/pcyin/tranX. An
earilier version is used in Yin et al. (2018).

Because of these varying formalisms for MRs,
the design of semantic parsers, particularly neu-
ral network-based ones has generally focused on
a small subset of tasks — in order to ensure the
syntactic well-formedness of generated MRs, a
parser is usually specifically designed to reflect
the domain-dependent grammar of MRs in the
structure of the model (Zhong et al., 2017; Xu
et al., 2017). To alleviate this issue, there have
been recent efforts in neural semantic parsing with
general-purpose grammar models (Xiao et al.,
2016; Dong and Lapata, 2018). Yin and Neubig
(2017) put forward a neural sequence-to-sequence
model that generates tree-structured MRs using a
series of tree-construction actions, guided by the
task-specific context free grammar provided to the
model a priori. Rabinovich et al. (2017) pro-
pose the abstract syntax networks (ASNs), where
domain-specific MRs are represented by abstract
syntax trees (ASTs, Fig. 2 Left) specified under
the abstract syntax description language (ASDL)
framework (Wang et al., 1997). An ASN employs
a modular architecture, generating an AST us-
ing specifically designed neural networks for each
construct in the ASDL grammar.

Inspired by this existing research, we have de-
veloped TRANX, a TRANsition-based abstract
syntaX parser for semantic parsing and code gen-
eration. TRANX is designed with the following
principles in mind:

• Generalization ability TRANX employs ASTs
as a general-purpose intermediate meaning rep-
resentation, and the task-dependent grammar is
provided to the system as external knowledge to
guide the parsing process, therefore decoupling
the semantic parsing procedure with specifici-
ties of grammars.

• Extensibility TRANX uses a simple transi-
tion system to parse NL utterances into tree-

https://github.com/pcyin/tranX


8

pandas read top 100 lines in file.csv

ApplyConstr(Expr)

ApplyConstr(Call)

ApplyConstr(Attr.)

stmt   Expr(expr value)
expr   Call(expr func, expr* args,

ASDL Grammar Transition System

. . .

s1

s2

s3

s4

s5

GenToken(sorted)

Expr

Call

Attr.

pandas

Name

file.csv

Keyword

Abstract Syntax Tree

. . . pandas.read_csv(

keyword* keywords)
Attribute(expr value, 

↦
↦

Name(identifier id)|

|

Meaning Representation

AST_to_MR(      )

Input Utterance

(to domain-specific MR)(general-purpose intermediate MR)(actions to construct AST)

read_csv

identifier attr)

Str(string s)|

file.csv,
nrows=100)

Figure 1: Workflow of TRANX

structured ASTs. The transition system is de-
signed to be easy to extend, requiring minimal
engineering to adapt to tasks that need to handle
extra domain-specific information.

• Effectiveness We test TRANX on four seman-
tic parsing (ATIS, GEO) and code generation
(DJANGO, WIKISQL) tasks, and demonstrate
that TRANX is capable of generalizing to dif-
ferent domains while registering strong perfor-
mance, out-performing existing neural network-
based approaches on three of the four datasets
(GEO, ATIS, DJANGO).

2 Methodology

Given an NL utterance, TRANX parses the utter-
ance into a formal meaning representation, typ-
ically represented as λ-calculus logical forms,
domain-specific, or general-purpose programming
languages (e.g., Python). In the following descrip-
tion we use Python code generation as a running
example, where a programmer’s natural language
intents are mapped to Python source code. Fig. 1
depicts the workflow of TRANX. We will present
more use cases of TRANX in § 3.

The core of TRANX is a transition system.
Given an input NL utterance x, TRANX em-
ploys the transition system to map the utter-
ance x into an AST z using a series of tree-
construction actions (§ 2.2). TRANX employs
ASTs as the intermediate meaning representa-
tion to abstract over domain-specific structure of
MRs. This parsing process is guided by the user-
defined, domain-specific grammar specified under
the ASDL formalism (§ 2.1). Given the gener-
ated AST z, the parser calls the user-defined func-
tion, AST to MR(·), to convert the intermediate
AST into a domain-specific meaning representa-
tion y, completing the parsing process. TRANX
uses a probabilistic model p(z|x), parameterized
by a neural network, to score each hypothesis AST
(§ 2.3).

2.1 Modeling ASTs using ASDL Grammar

TRANX uses ASTs as the general-purpose, inter-
mediate semantic representation for MRs. ASTs
are commonly used to represent programming lan-
guages, and can also be used to represent other
tree-structured MRs (e.g., λ-calculus). The ASDL
framework is a grammatical formalism to define
ASTs. See Fig. 1 for an excerpt of the Python
ASDL grammar. TRANX provides APIs to read
such a grammar from human-readable text files.

An ASDL grammar has two basic constructs:
types and constructors. A composite type is de-
fined by the set of constructors under that type.
For example, the stmt and expr composite types
in Fig. 1 refer to Python statements and expres-
sions, repectively, each defined by a series of con-
structors. A constructor specifies a language con-
struct of a particular type using its fields. For in-
stance, the Call constructor under the compos-
ite type expr denotes function call expressions,
and has three fields: func, args and keywords.
Each field in a constructor is also strongly typed,
which specifies the type of value the field can
hold. A field with a composite type can be instan-
tiated by constructors of the same type. For exam-
ple, the func field above can hold a constructor
of type expr. There are also fields with primi-
tive types, which store values. For example, the
id field of Name constructor has a primitive type
identifier, and is used to store identifier names.
And the field s in the Str (string) constructor hold
string literals. Finally, each field has a cardinality
(single, optional ? and sequential ∗), denoting the
number of values the field holds.

An AST is then composed of multiple construc-
tors, where each node on the tree corresponds to
a typed field in a constructor (except for the root
node, which denotes the root constructor). De-
pending on the cardinality of the field, a node
can hold one or multiple constructors as its val-
ues. For instance, the func field with single car-



9

Expr

Call

Attribute

Name read_csv

valuef1

Str

file.csv

keyword

nrows Num

100

funcf2

f5value

pandas

f6 attr

idf7

argsf3

sf8

keywordsf4

argsf9 valuef10

nf11

t1

t2

t3

t4

t5

t6

t7

t8 t10

t9

t11

t12

t nft Action
t1 root Expr(expr value)
t2 f1 Call(expr func, expr* args,

keyword* keywords)
t3 f2 Attribute(expr value, identifier attr)
t4 f5 Name(identifier id)
t5 f7 GENTOKEN[pandas]
t6 f6 GENTOKEN[read csv]
t7 f3 Str(string s)
t8 f8 GENTOKEN[file.csv]
t9 f8 GENTOKEN[</f>]
t10 f3 REDUCE (close the frontier field f3)
t11 f4 keyword(identifier arg, expr value)
t12 f9 GENTOKEN[nrows]
t13 f10 Num(object n)
t14 f11 GENTOKEN[1000]
t15 f4 REDUCE (close the frontier field f4)

Figure 2: Left The ASDL AST for the target Python code in Fig. 1. Field names are labeled on upper arcs, and indexed as fi.
Purple squares denote fields with sequential cardinality. Grey nodes denote primitive identifier fields. Fields are labeled with
time steps at which they are generated. Right The action sequence used to construct the AST. Each action is labeled with its
frontier field nft . APPLYCONSTR actions are represented by their constructors.

dinality in the ASDL grammar in Fig. 1 is in-
stantiated with one Name constructor, while the
args field with sequential cardinality have mul-
tiple child constructors.

2.2 Transition System

Inspired by Yin and Neubig (2017) (hereafter
YN17), we develop a transition system that de-
composes the generation procedure of an AST into
a sequence of tree-constructing actions. We now
explain the transition system using our running ex-
ample. Fig. 2 Right lists the sequence of actions
used to construct the example AST. In high level,
the generation process starts from an initial deriva-
tion AST with a single root node, and proceeds ac-
cording to a top-down, left-to-right order traversal
of the AST. At each time step, one of the follow-
ing three types of actions is evoked to expand the
opening frontier field nft of the derivation:

APPLYCONSTR[c] actions apply a constructor
c to the opening composite frontier field which has
the same type as c, populating the opening node
using the fields in c. If the frontier field has se-
quential cardinality, the action appends the con-
structor to the list of constructors held by the field.

REDUCE actions mark the completion of the
generation of child values for a field with optional
(?) or multiple (∗) cardinalities.

GENTOKEN[v] actions populate a (empty)
primitive frontier field with a token v. For exam-
ple, the field f7 on Fig. 2 has type identifier,
and is instantiated using a single GENTOKEN ac-
tion. For fields of string type, like f8, whose
value could consists of multiple tokens (only
one shown here), it can be filled using a se-
quence of GENTOKEN actions, with a special

GENTOKEN[</f>] action to terminate the genera-
tion of token values.

The generation completes once there is no fron-
tier field on the derivation. TRANX then calls
the user specified function AST to MR(·) to con-
vert the generated intermediate AST z into the
target domain-specific MR y. TRANX provides
various helper functions to ease the process of
writing conversion functions. For example, our
example conversion function to transform ASTs
into Python source code contains only 32 lines of
code. TRANX also ships with several built-in con-
version functions to handle MRs commonly used
in semantic parsing and code generation, like λ-
calculus logical forms and SQL queries.

2.3 Computing Action Probabilities p(z|x)
Given the transition system, the probability of an
z is decomposed into the probabilities of the se-
quence of actions used to generate z

p(z|x) =
∏
t

p(at|a<t,x),

Following YN17, we parameterize the transition-
based parser p(z|x) using a neural encoder-
decoder network with augmented recurrent con-
nections to reflect the topology of ASTs.

Encoder The encoder is a standard bidirec-
tional Long Short-term Memory (LSTM) network,
which encodes the input utterance x of n tokens,
{xi}ni=1 into vectorial representations {h}ni=1.
Decoder The decoder is also an LSTM network,
with its hidden state st at each time temp given by

st = fLSTM([at−1 : s̃t−1 : pt], st−1),

where fLSTM is the LSTM transition function, and
[:] denotes vector concatenation. at−1 is the em-



10

expr
= Variable(var variable)
| Entity(ent entity)
| Number(num number)
| Apply(pred predicate, expr∗ arguments)
| Argmax(var variable, expr domain, expr body)
| Argmin(var variable, expr domain, expr body)
| Count(var variable, expr body)
| Exists(var variable, expr body)
| Lambda(var variable, var type type, expr body)
| Max(var variable, expr body)
| Min(var variable, expr body)
| Sum(var variable, expr domain, expr body)
| The(var variable, expr body)
| Not(expr argument)
| And(expr∗ arguments)
| Or(expr∗ arguments)
| Compare(cmp op op, expr left, expr right)

cmp op = Equal | LessThan | GreaterThan

Figure 3: The λ-calculus ASDL grammar for GEO and
ATIS, defined in Rabinovich et al. (2017)

bedding of the previous action. We maintain an
embedding vector for each action. s̃t is the atten-
tional vector defined as in Luong et al. (2015)

s̃t = tanh(Wc[ct : st]).

where ct is the context vector retrieved from input
encodings {hi}ni=1 using attention.

Parent Feeding pt is a vector that encodes the
information of the parent frontier field nft on the
derivation, which is a concatenation of two vec-
tors: the embedding of the frontier field nft , and
spt , the decoder’s state at which the constructor
of nft is generated by the APPLYCONSTR ac-
tion. Parent feeding reflects the topology of tree-
structured ASTs, and gives better performance on
generating complex MRs like Python code (§ 3).

Action Probabilities The probability of an AP-
PLYCONSTR[c] action with embedding ac is2

p(at = APPLYCONSTR[c]|a<t,x)
= softmax(aᵀcWs̃t) (1)

For GENTOKEN actions, we employ a hybrid
approach of generation and copying, allowing
for out-of-vocabulary variable names and literals
(e.g., “file.csv” in Fig. 1) in x to be directly copied
to the derivation. Specifically, the action probabil-
ity is defined to be the marginal probability

p(at = GENTOKEN[v]|a<t,x)
= p(gen|at,x)p(v|gen, at,x)+

p(copy|at,x)p(v|copy, at,x)

2REDUCE is treated as a special APPLYCONSTR action.

stmt = Select(agg op? agg, idx column idx,
cond expr∗ conditions)

cond expr = Condition(cmp op op, idx column idx,
string value)

agg op = Max | Min | Count | Sum | Avg
cmp op = Equal | GreaterThan | LessThan | Other

Figure 4: The ASDL grammar for WIKISQL

The binary probability p(gen|·) and p(copy|·) is
given by softmax(Ws̃t). The probability of gen-
erating v from a closed-set vocabulary, p(v|gen, ·)
is defined similarly as Eq. (1). The copy probabil-
ity of copying the i-th word in x is defined using
a pointer network (Vinyals et al., 2015)

p(xi|copy, a<t,x) = softmax(hᵀiWs̃t).

3 Experiments

3.1 Datasets
To demonstrate the generalization and extensibil-
ity of TRANX, we deploy our parser on four se-
mantic parsing and code generation tasks.

3.1.1 Semantic Parsing
We evaluate on GEO and ATIS datasets. GEO
is a collection of 880 U.S. geographical ques-
tions (e.g., “Which states border Texas?”), and
ATIS is a set of 5,410 inquiries of flight in-
formation (e.g., “Show me flights from Dal-
las to Baltimore”). The MRs in the two
datasets are defined in λ-calculus logical forms
(e.g., “lambda x (and (state x) (next to
x texas))” and “lambda x (and (flight x
dallas) (to x baltimore))”). We use the
pre-processed datasets released by Dong and La-
pata (2016). We use the ASDL grammar defined
in Rabinovich et al. (2017), as listed in Fig. 3.

3.1.2 Code Generation
We evaluate TRANX on both general-purpose
(Python, DJANGO) and domain-specific (SQL,
WIKISQL) code generation tasks. The DJANGO
dataset (Oda et al., 2015) consists of 18,805 lines
of Python source code extracted from the Django
Web framework, with each line paired with an NL
description. Code in this dataset covers various
real-world use cases of Python, like string manip-
ulation, I/O operation, exception handling, etc.

WIKISQL (Zhong et al., 2017) is a code
generation task for domain-specific languages
(i.e., SQL). It consists of 80,654 examples of
NL questions (e.g., “What position did Calvin
Mccarty play?”) and annotated SQL queries
(e.g., “SELECT Position FROM Table WHERE



11

Methods GEO ATIS
ZH15 (Zhao and Huang, 2015) 88.9 84.2
ZC07 (Zettlemoyer and Collins, 2007) 89.0 84.6
WKZ14 (Wang et al., 2014) 90.4 91.3
Neural Network-based Models
SEQ2TREE (Dong and Lapata, 2016) 87.1 84.6
ASN (Rabinovich et al., 2017) 85.7 85.3

+ supervised attention 87.1 85.9
TRANX (w/o parent feeding) 88.2 86.2
TRANX (w/ parent feeding) 87.7 86.2

Table 1: Semantic parsing accuracies on GEO and ATIS

Methods ACC.
Phrasal Statistical MT (Ling et al., 2016) 31.5
SEQ2TREE (Dong and Lapata, 2016) 39.4
NMT (Neubig, 2015) 45.1
LPN (Ling et al., 2016) 62.3
YN17 (Yin and Neubig, 2017) 71.6
TRANX (w/o parent feeding) 72.7
TRANX (w parent feeding) 73.7

Table 2: Code generation accuracies on DJANGO

Player = Calvin Mccarty”). Different from
other datasets, each example also has a table ex-
tracted from Wikipedia, and the SQL query is ex-
ecuted against the table to get an answer.

Extending TRANX for WIKISQL In order to
achieve strong results, existing parsers, like most
models in Tab. 3, use specifically designed ar-
chitectures to reflect the syntactic structure of
SQL queries. We show that the transition sys-
tem used by TRANX can be easily extended for
WIKISQL with minimal engineering, while reg-
istering strong performance. First, we use de-
fine a simple ASDL grammar following the syn-
tax of SQL (Fig. 4). We then augment the tran-
sition system with a special GENTOKEN action,
SELCOLUMN[k]. A SELCOLUMN[k] action is
used to populate a primitive column idx field in
Select and Condition constructors in the gram-
mar by selecting the k-th column in the table. To
compute the probability of SELCOLUMN[k] ac-
tions, we use a pointer network over column en-
codings, where the column encodings are given by
a bidirectional LSTM network over column names
in an input table. This can be simply implemented
by overriding the base Parser class in TRANX
and modifying the functions that compute action
probabilities.

3.2 Results
In this section we discuss our experimental results.
All results are averaged over three runs with differ-
ent random seeds.

Semantic Parsing Tab. 1 lists the results for
semantic parsing tasks. We test TRANX with

Methods ACCEM ACCEX
Seq2Seq (Zhong et al., 2017) 23.4 35.9
SEQ2TREE (Dong and Lapata, 2016) 23.4 35.9
Seq2SQL (Zhong et al., 2017) 48.3 59.4
SQLNet (Xu et al., 2017) – 68.0
PT-MAML (Huang et al., 2018) 62.8 68.0
TypeSQL (Yu et al., 2018) – 73.5
TRANX

w/ parent feeding 62.6 71.6
w/o parent feeding 62.9 71.7

PointSQL (Wang et al., 2017)† 61.5 66.8
TypeSQL+TC (Yu et al., 2018)† – 82.6
STAMP (Sun et al., 2018)† 60.7 74.4
STAMP+RL (Sun et al., 2018)† 61.0 74.6
TRANX

w par. feed. + answer pruning† 68.4 78.6
w/o par. feed. + answer pruning† 68.6 78.6

Table 3: Exact match (EM) and execution (EX) accuracies
on WIKISQL. †Methods that use the contents of input tables.

two configurations, with or without parent feed-
ing (§ 2.3). Our system outperforms existing neu-
ral network-based approaches. This demonstrates
the effectiveness of TRANX in closed-domain se-
mantic parsing. Interestingly, we found the model
without parent feeding achieves slightly better ac-
curacy on GEO, probably because that its relative
simple grammar does not require extra handling of
parent information.

Code Generation Tab. 2 lists the results on
DJANGO. TRANX achieves state-of-the-art results
on DJANGO. We also find parent feeding yields
+1 point gain in accuracy, suggesting the impor-
tance of modeling parental connections in ASTs
with complex domain grammars (e.g., Python).

Tab. 3 shows the results on WIKISQL. We first
discuss our standard model which only uses infor-
mation of column names and do not use the con-
tents of input tables during inference, as listed in
the top two blocks in Tab. 3. We find TRANX, al-
though just with simple extensions to adapt to this
dataset, achieves impressive results and outper-
forms many task-specific methods. This demon-
strates that TRANX is easy to extend to incorpo-
rate task-specific information, while maintaining
its effectiveness. We also extend TRANX with a
very simple answer pruning strategy, where we
execute the candidate SQL queries in the beam
against the input table, and prune those that yield
empty execution results. Results are listed in the
bottom two-blocks in Tab. 3, where we compare
with systems that also use the contents of tables.
Surprisingly, this (frustratingly) simple extension
yields significant improvements, outperforming
many task-specific models that use specifically de-



12

signed, heavily-engineered neural networks to in-
corporate information of table contents.

4 Conclusion
We present TRANX, a transition-based abstract
syntax parser. TRANX is generalizable, extensible
and effective, achieving strong results on semantic
parsing and code generation tasks.

Acknowledgements
This material is based upon work supported by
the National Science Foundation under Grant No.
1815287.

References
Yoav Artzi and Luke Zettlemoyer. 2013. Weakly su-

pervised learning of semantic parsers for mapping
instructions to actions. Transaction of ACL.

Laura Banarescu, Claire Bonial, Shu Cai, Madalina
Georgescu, Kira Griffitt, Ulf Hermjakob, Kevin
Knight, Philipp Koehn, Martha Palmer, and Nathan
Schneider. 2013. Abstract meaning representation
for sembanking. In Proceedings of LAW-ID@ACL.

Li Dong and Mirella Lapata. 2016. Language to logical
form with neural attention. In Proceedings of ACL.

Li Dong and Mirella Lapata. 2018. Coarse-to-fine de-
coding for neural semantic parsing. In Proceedings
of ACL.

Po-Sen Huang, Chenglong Wang, Rishabh Singh, Wen
tau Yih, and Xiaodong He. 2018. Natural language
to structured query generation via meta-learning. In
Proceedings of NAACL-HLT.

Wang Ling, Phil Blunsom, Edward Grefenstette,
Karl Moritz Hermann, Tomás Kociský, Fumin
Wang, and Andrew Senior. 2016. Latent predictor
networks for code generation. In Proceedings of
ACL.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-
based neural machine translation. In Proceedings
of EMNLP.

Graham Neubig. 2015. lamtram: A toolkit for lan-
guage and translation modeling using neural net-
works. http://www.github.com/neubig/lamtram.

Yusuke Oda, Hiroyuki Fudaba, Graham Neubig,
Hideaki Hata, Sakriani Sakti, Tomoki Toda, and
Satoshi Nakamura. 2015. Learning to generate
pseudo-code from source code using statistical ma-
chine translation (T). In Proceedings of ASE.

Chris Quirk, Raymond J. Mooney, and Michel Galley.
2015. Language to code: Learning semantic parsers
for if-this-then-that recipes. In Proceedings of ACL.

Maxim Rabinovich, Mitchell Stern, and Dan Klein.
2017. Abstract syntax networks for code generation
and semantic parsing. In Proceedings of ACL.

Yibo Sun, Duyu Tang, Nan Duan, Jianshu Ji, Gui-
hong Cao, Xiaocheng Feng, Bing Qin, Ting Liu,
and Ming Zhou. 2018. Semantic parsing with
syntax- and table-aware SQL generation. CoRR,
abs/1804.08338.

Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly.
2015. Pointer networks. In Proceedings of NIPS.

Adrienne Wang, Tom Kwiatkowski, and Luke Zettle-
moyer. 2014. Morpho-syntactic lexical generaliza-
tion for CCG semantic parsing. In Proceedings of
EMNLP.

Chenglong Wang, Marc Brockschmidt, and Rishabh
Singh. 2017. Pointing out SQL queries from text.
Technical report.

Daniel C. Wang, Andrew W. Appel, Jeffrey L. Korn,
and Christopher S. Serra. 1997. The Zephyr ab-
stract syntax description language. In Proceedings
of DSL.

Chunyang Xiao, Marc Dymetman, and Claire Gardent.
2016. Sequence-based structured prediction for se-
mantic parsing. In Proceedings of ACL.

Xiaojun Xu, Chang Liu, and Dawn Song. 2017. SQL-
Net: Generating structured queries from natural
language without reinforcement learning. arXiv
preprint arXiv:1711.04436.

Pengcheng Yin and Graham Neubig. 2017. A syntactic
neural model for general-purpose code generation.
In Proceedings of ACL.

Pengcheng Yin, Chunting Zhou, Junxian He, and Gra-
ham Neubig. 2018. StructVAE: Tree-structured la-
tent variable models for semi-supervised semantic
parsing. In Proceedings of ACL.

Tao Yu, Zifan Li, Zilin Zhang, Rui Zhang, and
Dragomir R. Radev. 2018. TypeSQL: Knowledge-
based type-aware neural text-to-sql generation.

Luke Zettlemoyer and Michael Collins. 2005. Learn-
ing to map sentences to logical form structured clas-
sification with probabilistic categorial grammars. In
Proceedings of UAI.

Luke S. Zettlemoyer and Michael Collins. 2007. On-
line learning of relaxed CCG grammars for parsing
to logical form. In Proceedings of EMNLP-CoNLL.

Kai Zhao and Liang Huang. 2015. Type-driven in-
cremental semantic parsing with polymorphism. In
Proceedings of NAACL-HLT.

Victor Zhong, Caiming Xiong, and Richard Socher.
2017. Seq2SQL: Generating structured queries
from natural language using reinforcement learning.
arXiv preprint arXiv:1709.00103.


