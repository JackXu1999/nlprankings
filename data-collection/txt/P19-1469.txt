



















































A Cross-Sentence Latent Variable Model for Semi-Supervised Text Sequence Matching


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 4747–4761
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

4747

A Cross-Sentence Latent Variable Model for
Semi-Supervised Text Sequence Matching

Jihun Choi, Taeuk Kim, Sang-goo Lee
Department of Computer Science and Engineering

Seoul National University
{jhchoi,taeuk,sglee}@europa.snu.ac.kr

Abstract
We present a latent variable model for pre-
dicting the relationship between a pair of text
sequences. Unlike previous auto-encoding–
based approaches that consider each sequence
separately, our proposed framework utilizes
both sequences within a single model by gen-
erating a sequence that has a given relation-
ship with a source sequence. We further
extend the cross-sentence generating frame-
work to facilitate semi-supervised training.
We also define novel semantic constraints that
lead the decoder network to generate seman-
tically plausible and diverse sequences. We
demonstrate the effectiveness of the proposed
model from quantitative and qualitative exper-
iments, while achieving state-of-the-art results
on semi-supervised natural language inference
and paraphrase identification.

1 Introduction

Text sequence matching is a task whose objec-
tive is to predict the degree of match between two
or more text sequences. For example, in natu-
ral language inference, a system has to infer the
relationship between a premise and a hypothesis
sentence, and in paraphrase identification a sys-
tem should find out whether a sentence is a para-
phrase of the other. Since various natural language
processing problems, including answer sentence
selection, text retrieval, and machine comprehen-
sion, involve text sequence matching components,
building a high-performance text matching model
plays a key role in enhancing quality of systems
for these problems (Tan et al., 2016; Rajpurkar
et al., 2016; Wang and Jiang, 2017; Tymoshenko
and Moschitti, 2018).

With the emergence of large-scale corpora, end-
to-end deep learning models are achieving remark-
able results on text sequence matching; these in-
clude architectures that are linguistically moti-
vated (Bowman et al., 2016a; Chen et al., 2017a;

Kim et al., 2019), that introduce external knowl-
edge (Chen et al., 2018), and that use atten-
tion mechanisms (Parikh et al., 2016; Shen et al.,
2018b). The recent deep neural network–based
work on text matching could roughly be catego-
rized into two subclasses: i) methods that exploit
inter-sentence features and ii) methods based on
sentence encoders. In this work, we focus on the
latter where sentences1 are separately encoded us-
ing a shared encoder and then fed to a classifier
network, due to its efficiency and general applica-
bility across tasks.

Meanwhile, despite the success of deep neu-
ral networks in natural language processing, the
fact that they require abundant training data might
be problematic, as constructing labeled data is a
time-consuming and labor-intensive process. To
mitigate the data scarcity problem, several semi-
supervised learning paradigms, that take advan-
tage of unlabeled data when only some of the data
examples are labeled (Chapelle et al., 2010), are
proposed. These unlabeled data are much easier to
collect, thus utilizing them could be a good option;
for example in text matching, possibly related sen-
tence pairs could be retrieved from a database of
text via simple heuristics such as word overlap.

In this paper, we propose a cross-sentence latent
variable model for semi-supervised text sequence
matching. The proposed framework is based on
deep probabilistic generative models (Kingma and
Welling, 2014; Rezende et al., 2014) and is ex-
tended to make use of unlabeled data. As it is
trained to generate a sentence that has a given rela-
tionship with a source sentence, both sentences in
a pair are utilized together, and thus training objec-
tives are defined more naturally than other models
that consider each sentence separately (Zhao et al.,
2018; Shen et al., 2018a). To further regularize

1Throughout the paper, we will use the term ‘sequence’
and ‘sentence’ interchangeably unless ambiguous.



4748

the model to generate more plausible and diverse
sentences, we define semantic constraints and use
them for fine-tuning.

From experiments, we empirically prove that
the proposed method significantly outperforms
previous work on semi-supervised text sequence
matching. We also conduct extensive qualitative
analyses to validate the effectiveness of the pro-
posed model.

The rest of the paper is organized as follows.
In §2, we briefly introduce the background for our
work. We describe the proposed cross-sentence
latent variable model in §3, and give results from
experiments in §4. We study the prior work related
to ours in §5 and conclude in §6.

2 Background

2.1 Variational Auto-Encoders
Variational auto-encoder (VAE, Kingma and
Welling, 2014) is a deep generative model for
modeling the data distribution pθ(x). It assumes
that a data point x is generated by the following
random process: (1) z is sampled from p(z) and
(2) x is generated from pθ(x|z).

Thus the natural training objective would be
to directly maximize the marginal log-likelihood
log pθ(x) = log

∫
z pθ(x|z)p(z)dz. However

it is intractable to compute the marginal log-
likelihood without using simplifying assumption
such as mean-field approximation (Blei et al.,
2017). Therefore the following variational lower
bound −L is used as a surrogate objective:

− L(θ,φ;x) = −DKL(qφ(z|x)‖p(z))
+ Eqφ(z|x) [log pθ(x|z)] ,

where qφ(z|x) is a variational approximation
to the unknown pθ(z|x), and DKL(q‖p) is the
Kullback-Leibler (KL) divergence between q and
p. Maximizing the surrogate objective −L is
proven to minimize DKL(qφ(z|x)‖pθ(z|x)), and
it can also be seen as maximizing the expected
data log-likelihood with respect to qφ while using
DKL(qφ(z|x)‖pθ(z)) as a regularization term.

VAEs are successfully applied in modeling var-
ious data: including image (Pu et al., 2016; Gulra-
jani et al., 2017), music (Roberts et al., 2018), and
text (Miao et al., 2016; Bowman et al., 2016b).
The VAE framework can also be extended to
constructing conditional generative models (Sohn
et al., 2015) or learning from semi-supervised data
(Kingma et al., 2014; Xu et al., 2017).

VAEs for text pair modeling. The most sim-
ple approach to modeling text pairs using the VAE
framework is to consider two text sequences sep-
arately (Zhao et al., 2018; Shen et al., 2018a).
That is, a generator is trained to reconstruct a sin-
gle input sequence rather than integrating both se-
quences, and the two latent representations en-
coded from a variational posterior are given to a
classifier network. When label information is not
available, only the reconstruction objective is used
for training. This means that the classifier param-
eters are not updated in the unsupervised setting,
and thus the interaction between the variational
posterior (or encoder) and the classifier could be
restricted.

2.2 von Mises–Fisher Distribution

Since the advent of deep generative models with
variational inference, the typical choice for prior
and variational posterior distribution has been the
Gaussian, likely due to its well-studied properties
and easiness of reparameterization. However it of-
ten leads a model to face the posterior collapse
problem where a model ignores latent variables
by pushing the KL divergence term to zero (Chen
et al., 2017b; van den Oord et al., 2017), espe-
cially in text generation models where powerful
decoders are used (Bowman et al., 2016b; Yang
et al., 2017).

Various techniques are proposed to mitigate this
problem: including KL cost annealing (Bowman
et al., 2016b), weakening decoders (Yang et al.,
2017), skip connection (Dieng et al., 2019), using
different objectives (Alemi et al., 2018), and using
alternative distributions (Guu et al., 2018). In this
work, we take the last approach by utilizing a von
Mises–Fisher (vMF) distribution.

A vMF distribution is a probability distribution
on the (d− 1)-sphere, therefore samples are com-
pared according to their directions, reminiscent
of the cosine similarity. It has two parameters—
mean direction µ ∈ Rd and concentration κ ∈ R.
As the KL divergence between vMF(µ, κ) and the
hyperspherical uniform distribution U(Sd−1) =
vMF(·, 0) only depends on κ, the KL divergence
is a constant if the concentration parameter is
fixed. Therefore when vMF(µ, κ) with fixed κ and
vMF(·, 0) are used as posterior and prior, the pos-
terior collapse does not occur inherently.

To the best of our knowledge, Guu et al. (2018)
were the first to use vMF as posterior and prior



4749

xs qφ zs pθ xt

y

qψ

Figure 1: The overview of the entire framework. Blue
dashed lines indicate semantic constraints.

zs xt

y

pθ
(x t

|zs,
y)

(a) Generation model

zsxs xt

y qψ
(y|x

s
,x t

)qψ (y|x
s ,x

t )

qφ(zs|xs)

(b) Recognition model

Figure 2: Illustration of the graphical models. (a) the
generative process of the output xt; (b) the approximate
inference of zs and the discriminative classifier for y.

for VAEs, and Xu and Durrett (2018) empirically
proved the effectiveness of vMF-VAE in natural
language generation. Davidson et al. (2018) gen-
eralized the vMF-VAE and proposed the reparam-
eterization trick for vMF. We refer readers to Ap-
pendix A for detailed description of vMF we used.

3 Proposed Framework

In this section, we describe the proposed frame-
work in detail. We formally define the cross-
sentence latent variable model (CS-LVM) and de-
scribe the optimization objectives. We also intro-
duce semantic constraints to keep learned repre-
sentations in a semantically plausible region. Fig.
1 illustrates the entire framework.

3.1 Cross-Sentence Latent Variable Model

Though the auto-encoding frameworks described
in §2.1 have intriguing properties, it may hinder
the possibility of training an encoder to extract
rich features for text pair modeling, due to the fact
that the generative modeling process is confined
within a single sequence. Therefore the interaction
between a generative model and a discriminative
classifier is restricted, since the two sequences are
separately modeled and the pair-wise information
is only considered through the classifier network.

Our proposed CS-LVM addresses this problem
by cross-sentence generation of text given a text
pair and its label. As the sentences in a pair
are directly related within a generative model, the
training objectives are defined in a more princi-
pled way than VAE-based semi-supervised text
matching frameworks. Notably it also mimics the

dataset construction process of some corpora: a
worker generates a target text given a label and a
source text (e.g. Bowman et al., 2015; Williams
et al., 2018).

Given a pair (x1,x2), let xs, xt ∈ {x1,x2} be
a source and a target sequence respectively. Then
we assume xt is generated according to the fol-
lowing process (see Fig. 2a):

1. a latent variable zs that contains the content
of a source sequence is sampled from p(zs),

2. a variable y that determines the relationship
between a target and the source sequence is
sampled from p(y),

3. xt is generated from a conditional distribu-
tion pθ(xt|zs, y).

In the above process, the class label y is treated as
a hidden variable in the unsupervised case and an
observed variable in the supervised case.

Accordingly, when the label information is
available, the optimization objective for a gener-
ative model is the marginal log-likelihood of the
observed variables xt and y:

log pθ(xt, y) = log

∫
pθ(xt, zs, y)dzs

= log

∫
pθ(xt|zs, y)p(zs)p(y)dzs. (1)

To address the intractability we instead optimize
the lower bound of Eq. 1:2

log pθ(xt, y) ≥ −DKL(qφ(zs|xs)‖p(zs))
+ Eqφ(zs|xs)[log pθ(xt|y, zs)] + log p(y), (2)

where qφ(zs|xs) is a variational approximation of
the posterior pθ(zs|xt, y). Though Eq. 2 holds
for any qφ having the same support with p(zs), we
choose this form of variational posterior from the
following motivation: since xs is related to xt by
the label information y, xs would have an influ-
ence on the space of zs in a similar way to (xt, y).
Due to this particular choice of qφ, zs depends
only on xs and is independent of the label informa-
tion possibly permeated in xt. In other words, this
design induces qφ to extract the features needed
for controlling the semantics only from xs, while
preventing qφ from encoding other biases.

To extend the objective to the unsupervised
setup, we marginalize out y from Eq. 2 using a

2See Appendix B for derivation of the lower bound.



4750

classifier distribution. We will provide more de-
tailed explanation of the optimization objectives in
§3.3.

3.2 Architecture
Now we describe the architectures we used for
constructing CS-LVM. We first encode a source
sequence into a fixed-length representation using a
recurrent neural network (RNN): genc(xs) = ms.
From ms we obtain a variational approximate dis-
tribution qφ(zs|xs) = gcode(ms) and sample a la-
tent representation zs ∼ qφ(zs|xs). In our exper-
iments, a long short-term memory (LSTM) recur-
rent network and a feed-forward network are used
as genc and gcode respectively. From the fact that
the mean direction parameter µs of vMF(µs, κ)
should be a unit vector, gcode additionally normal-
izes the output of the feed-forward network to be
‖gcode(ms)‖2 = 1.

Then we generate the target sequence xt from
zs and y. Similarly to the encoder network, we
use an LSTM for a decoder, thus the distribution
is factorized as follows:

pθ(xt|y, zs) =
Nxt+1∏
i=1

pθ(wt,i|wt,<i, y, zs), (3)

where xt = (xt,1, . . . , xt,Nxt ) and wt,0 = <s>,
wt,Nxt+1 = </s> are special tokens indicating
the start and the end of a sequence.

We project the word indexwt,i and label index y
into embedding spaces to obtain the word embed-
ding wt,i and label embedding y. Then to con-
struct an input for i-th time step, vt, we concate-
nate the i-th target word embedding wt,i, the label
embedding y, and the latent representation zs al-
together:

vi = [wt,i;y; zs].

Thus pθ(wt,i|wt,<i, zs, y) is computed from i-th
state si of the decoder RNN:

pθ(wt,i|wt,<i, y, zs) = softmax(gout(si))

si = g
dec
i (vi, si−1),

where gout is a feed-forward network and gdeci is
the state transition function of the decoder LSTM
at i-th time step.

For a discriminative classifier network we fol-
low the siamese architecture, as mentioned in §1.
xs and xt are fed to a shared LSTM network fenc

Algorithm 1 Training procedure of CS-LVM.
Input: Labeled dataset Xl, Unlabeled dataset Xu,

Model parameters θ,φ,ψ
1: procedure TRAIN(Xl,Xu,θ,φ,ψ)
2: repeat
3: Sample (xl,s,xl,t, yl) ∼ Xl
4: Sample (xu,s,xu,t) ∼ Xu
5: Compute Ll(θ,φ,ψ;xl,s,xl,t, yl) by (6)
6: Compute Lu(θ,φ,ψ;xu,s,xu,t) by (9)
7: Update θ,φ,ψ by gradient descent on Ll + Lu
8: until stop criterion is met
9: procedure FINETUNE(Xl,Xu,θ,φ,ψ)

10: repeat
11: Update θ,φ,ψ following line 3–7
12: Update θ by gradient descent on (11–14)
13: until stop criterion is met

to obtain sentence vectors h1 = fenc(xs) and
h2 = f

enc(xt). Then h1 and h2 are combined
by the function ffuse to form a single fused vec-
tor, and the fused representation is given to a feed-
forward network fdisc to infer the relationship:

qψ(y|x1,x2) = softmax(fdisc(ffuse(h1,h2))).
To learn from data more efficiently and to re-

duce the number of trainable parameters, we tie
the weights for two encoders—for the generative
model and the discriminative classifier; i.e. genc =
fenc. This mitigates the problem that only source
sequences are used for training genc and enhances
the interaction between the generative model and
the classifier. We will see from experiments that
tying encoder weights improves performance and
stabilizes optimization (§4.3).

Also note that the functions g� are only used
in training, and the model has the same test-time
computational complexity with typical classifica-
tion models.

3.3 Optimization
In this subsection we describe how the entire
model is optimized. We first define optimization
objectives for supervised and unsupervised train-
ing, and then introduce constraints to regularize
the model to generate sequences with intended
semantic characteristics. The entire optimization
procedure is summarized in Algorithm 1.

3.3.1 Supervised Objective
In the supervised setting, a data sample is as-
sumed to contain label information: (x1,x2, y) ∈
Xl. Without loss of generality let us assume
(xs,xt) = (x1,x2).3 Since y is an observed vari-

3The relationship between a source and a target may ei-
ther be unidirectional, bidirectional, or reflexive, depending



4751

able in this case, we can directly use Eq. 2 in train-
ing. From Eqs. 2 and 3, the objective for the gen-
erative model is defined by:4

− Lgenl (θ,φ;xs,xt, y) = log pθ(xt|y, zs)
+ log p(y)−DKL(qφ(zs|xs)‖p(zs)), (4)

where zs ∼ qφ(zs|xs) and p(y), p(zs) are prior
distributions of y, zs. Considering that we as-
sume p(y) to be a fixed uniform distribution of la-
bels, the log p(y) term can be ignored in training:
‖∇θ,φ log p(y)‖2 = 0.

For training, the typical teacher forcing method
is used; i.e. ground-truth words are used as in-
put words. We use vMF(gcode(ms), κ) (κ: hyper-
parameter) for the variational posterior qφ(zs|xs)
and vMF(·, 0) for the prior p(zs).

The discriminator objective is defined as a con-
ventional maximum likelihood:

−Ldiscl (ψ;xs,xt, y) = log qψ(y|xs,xt). (5)

Finally, the two objectives are combined to con-
struct the objective for supervised training:

Ll(θ,φ,ψ;xs,xt, y) = Lgenl + λLdiscl , (6)

where λ is a hyperparameter.

3.3.2 Unsupervised Objective
In this case, the model does not have an access to
label information; a data point is represented by
(xs,xt) ∈ Xu and thus y is a hidden variable. To
facilitate the unsupervised training, we marginal-
ize y out as below and derive the lower bound:

log pθ(xt) = log
∑
y

∫
pθ(xt, zs, y)dzs

≥ Eqφ,ψ(y,zs|xs,xt)
[
log

pθ(xt, zs, y)

qφ,ψ(y, zs|xs,xt)

]
.

(7)

And from the assumption presented in the graphi-
cal model (Fig. 2b),

qφ,ψ(y, zs|xs,xt) = qφ(zs|xs)qψ(y|xs,xt).
(8)

on the characteristics of a task. For some experiments we ad-
ditionally used swapped data examples, (xs,xt) = (x2,x1),
for training. We explain more on this in §4.

4Note that we define all objectives L, R as minimization
objectives to avoid confusion.

Finally we obtain the following lower bound for
log pθ(xt) from Eqs. 7 and 8:5

Lu(θ,φ,ψ;xs,xt) = −H(qψ(y|xs,xt))
+ Eqψ(y|xs,xt)

[
Lgenl (θ,φ;xs,xt, y)

]
. (9)

Here the second expectation term can be computed
either by enumeration or sampling, and we used
the former as the datasets we used have relatively
small label sets (2 or 3) and it is known to yield
better results than sampling (Xu et al., 2017). We
will compare the two methods in §4.3.

To sum up, at every training iteration, given a
labeled and unlabeled data sample (xl,s,xl,t, yl),
(xu,s,xu,t), we optimize the following objective.

L = Ll(θ,φ,ψ;xl,s,xl,t, yl)
+ Lu(θ,φ,ψ;xu,s,xu,t) (10)

3.3.3 Fine-Tuning with Semantic Constraints
Since the generator is trained via maximum likeli-
hood training which considers all words in a sen-
tence equivalently, the label information may not
be reflected enough in generation owing to high-
frequency words. For example in natural language
inference, the word occurrences of the following
three hypothesis sentences highly overlap, but they
should have different relation with the premise.6

P: A man is cutting metal with a tool .
H1: A man is cutting metal .
H2: A man is cutting metal with the wrong tool .
H3: A man is cutting metal with his mind .

Thus for some data points, the strategy that only
predicts words that overlap across hypotheses
could receive a fairly high score, which might
weaken the integration of y into the generator. To
mitigate this, we fine-tune the trained generator
using the following semantic constraint:

−Ry(θ;xs,xt) = log qψ(ỹ|xs, x̃t), (11)

where ỹ ∼ p(y), zs ∼ qφ(zs|xs), and x̃t =
argmaxxt pθ(xt|ỹ, zs). This constraint enforces
the sequence x̃t generated by conditioning on ỹ
and zs to actually have the relationship ỹ with xs.

We also introduce a constraint on z that keeps
the distributions of z̃t (the latent content variable

5See Appendix B for details.
6Examples are taken from the SNLI development set, pair

ID 4904199439.jpg#{2r1e,2r1n,2r1c}.



4752

obtained by encoding the generated sequence x̃t)
and zs close:

−Rz(θ;xs,xt) = log qφ(zt = z̃t|xt), (12)

where z̃t ∼ qφ(z̃t|x̃t). In other words, it pushes
the generated sequence x̃t to be in a similar
semantic space with the ground-truth target se-
quence xt. Consequently, it can help alleviate the
generator collapse problem where a generator pro-
duces only a handful of simple neutral patterns in-
dependent of the input sequence, by relating z̃t to
zt.7

From similar motivation, we also add an ad-
ditional constraint that encourages the generated
sentences originating from different source sen-
tences to be dissimilar. To reflect this, we define
the following minibatch-level constraint that pe-
nalizes the mean direction vectors encoded from
the generated sentences for being too close:

−Rµ(θ;B) = EB[d(µt(i), µ̄t)], (13)

where we denote values related to i-th sample of a
minibatch B using superscript: �(i). In the above,
µ
(i)
t = g

code(genc(x̃
(i)
t )), µ̄t =

∑|B|
i=1µ

(i)
t /|B|,

and d(·, ·) is a distance measure between vectors.
The mean direction vector µ of vMF(µ, κ) is on
a unit hypersphere, so we use the cosine distance:
d(µ1,µ2) = 1− 〈µ1,µ2〉.

As the sequence generation process is not dif-
ferentiable, the gradients from the semantic con-
straints cannot propagate to the generator param-
eters. To relax the discreteness, we use the
Gumbel-Softmax reparameterization (Jang et al.,
2017; Maddison et al., 2017). Using the Gumbel-
Softmax trick, we obtain a continuous probability
vector that approximates a sample from the cat-
egorical distribution of words at each step, and
use the probability vector to compute the expected
word embedding for the subsequent step.

When multiple constraints are used, they are
combined using the homoscedastic uncertainty

7The basic assumption behind this constraint is that a
source and a target sequence are associated in a certain as-
pect, and it generally holds in most of the available pair clas-
sification datasets e.g. SNLI, SICK, SciTail, QQP, MRPC.

Model 28k 59k 120k
LSTM(a) 57.9 62.5 65.9
CNN(b) 58.7 62.7 65.6
LSTM-AE(a) 59.9 64.6 68.5
LSTM-ADAE(a) 62.5 66.8 70.9
DeConv-AE(b) 62.1 65.5 68.7
LSTM-VAE(b) 64.7 67.5 71.1
DeConv-VAE(b) 67.2 69.3 72.2
LSTM-vMF-VAE (ours) 65.6 68.7 71.1
CS-LVM (ours) 68.4 73.5 76.9

+Ry 70.0 74.5 77.4
+Rz 69.2 73.9 77.6
+Rµ 69.1 74.0 77.6
+Ry,Rz,Rµ 69.6 74.1 77.4

Table 1: Semi-supervised classification results on the
SNLI dataset. (a) Zhao et al. (2018); (b) Shen et al.
(2018a).

Model 1k 5k 10k 25k
CNN(a) 56.3 59.2 63.8 68.9
LSTM-AE(a) 59.3 63.8 67.2 70.9
DeConv-AE(a) 60.2 65.1 67.7 71.6
LSTM-VAE(a) 62.9 67.6 69.0 72.4
DeConv-VAE(a) 65.1 69.4 70.5 73.7
LSTM-vMF-VAE (ours) 65.0 69.9 72.1 74.9
CS-LVM (ours) 66.5 71.1 74.6 76.9

+Ry 66.4 70.8 74.5 77.5
+Rz 66.5 71.3 74.8 77.1
+Rµ 66.4 71.2 74.9 77.4
+Ry,Rz,Rµ 66.3 71.3 74.7 77.6

Table 2: Semi-supervised classification results on the
Quora Question Pairs dataset. (a) Shen et al. (2018a).

weighting (Kendall et al., 2018):8

R = 1
σ21
Ry + 1

σ22
Rz + 1

σ23
Rµ

+ log σ1 + log σ2 + log σ3, (14)

where σ1, σ2, σ3 are trainable scalar parameters.
Also note that all constraints are unsupervised,
where label information is not required.

4 Experiments

We evaluate the proposed model on two semi-
supervised tasks: natural language inference and
paraphrase identification. We also implement a
strong baseline that has a similar architecture to
LSTM-VAE (Shen et al., 2018a) but uses vMF
distribution for prior and posterior, named LSTM-
vMF-VAE. To further explore the proposed model,

8Though the weighting scheme is originally derived from
the case of a Gaussian likelihood, Kendall et al. (2018);
Xiong et al. (2018); Hu et al. (2018) successfully applied it in
weighting various losses e.g. cross-entropy loss, L1 loss, and
reinforcement learning objectives.



4753

we conduct extensive qualitative analyses. For de-
tailed settings and hyperparameters, please refer to
Appendix C.

4.1 Natural Language Inference
Natural language inference (NLI) is a task of pre-
dicting the relationship given a premise and a hy-
pothesis sentence. We use Stanford Natural Lan-
guage Inference (SNLI, Bowman et al., 2015)
dataset for experiments. It consists of roughly
570k premise-hypothesis pairs, and each pair has
one of the following labels: entailment, neutral,
and contradiction. Considering the asymmetry in
some label classes and for conformance with the
dataset generation process, we use premise and
hypothesis sentence as source and target respec-
tively: (xs,xt) = (xpre,xhyp).

Following the work of Zhao et al. (2018); Shen
et al. (2018a), we consider scenarios where 28k,
59k, and 120k labeled data samples are available.
Also, for fair comparison with the prior work, we
set the size of a word vocabulary set to 20,000 and
do not utilize pre-trained word embeddings such
as GloVe (Pennington et al., 2014).

To combine the representations of a premise and
a hypothesis and to construct an input to fdisc, we
use the following heuristic-based fusion proposed
by Mou et al. (2016):

ffuse(hpre,hhyp)

= [hpre;hhyp; |hpre − hhyp|;hpre � hhyp] ,
(15)

where [a;b] indicates concatenation of vectors a,
b and � is the element-wise product.

Table 1 summarizes the result of experiments.
We can clearly see that the proposed CS-LVM
architecture substantially outperforms other mod-
els based on auto-encoding. Also, the seman-
tic constraints brought additional boost in perfor-
mance, achieving the new state of the art in semi-
supervised classification of the SNLI dataset.

When all training data are used as labeled data
(≈ 550k), CS-LVM also improves performance
by achieving accuracy of 82.8%, compared to the
supervised LSTM (81.5%), LSTM-AE (81.6%),
LSTM-VAE (80.8%), DeConv-VAE (80.9%).

4.2 Paraphrase Identification
Paraphrase identification (PI) is a task whose ob-
jective is to infer whether two sentences have the
same semantics. We use the Quora Question Pairs

Model 28k 59k 120k
CS-LVM 68.4 73.5 76.9

(i) without CS 65.6 68.7 71.1
(ii) Gaussian 66.9 72.0 74.9
(iii) sampling 68.0 72.9 76.5
(iv) fenc 6= genc 63.3 69.1 74.7

Table 3: Ablation study results.

dataset (QQP, Wang et al., 2017) for experiments.
QQP consists of over 400k sentence pairs each
of which has label information indicating whether
the sentences in a pair paraphrase each other or
not. We experiment for the cases where the num-
ber of labeled data is 1k, 5k, 10k, and 25k, and
set the vocabulary size to 10,000, following Shen
et al. (2018a). Unlike auto-encoding–based mod-
els that treat sentences in a pair equivalently, the
CS-LVM processes them asymmetrically for its
cross-sentence generating property. This property
is useful when some relationships are asymmetric
(e.g. NLI), however the paraphrase relationship
is bidirectional, so that we also use swapped text
pairs in training. To fuse sentence representations,
the following symmetric function is used, as in Ji
and Eisenstein (2013):

ffuse(h1,h2) = [h1 + h2; |h1 − h2|]. (16)

The result of experiments on QQP is sum-
marized in Table 2. Again, the proposed CS-
LVM consistently outperforms other supervised
and semi-supervised models by a large margin,
setting the new state-of-the-art result on the QQP
dataset with the semi-supervised setting.

4.3 Ablation Study
To assess the effect of each element, we experi-
ment with model variants where some of the com-
ponents are removed. Specifically, we conduct an
ablation study for the following variants: (i) with-
out cross-sentence generation (i.e. auto-encoding
setup), (ii) replacing the vMF distribution with
Gaussian, (iii) computing the expectation term of
Eq. 9 by sampling, and (iv) without encoder
weight sharing (i.e. fenc 6= genc). SNLI dataset
is used for the model ablation experiments, and
trained models are not fine-tuned in order to focus
only on the efficacy of each model component.

Results of ablation study are presented in Ta-
ble 3. As expected, the cross-sentence gener-
ation is the most critical factor for the perfor-
mance, except for the 28k setting where the en-
coder weight tying brought the biggest gain. In



4754

59k and 120k settings, all other variants that main-
tain the cross-generating property outperform the
VAE-based models (see (ii), (iii), (iv)).

Replacing a vMF with a Gaussian does not
severely harm the accuracy, however it requires
the additional process of finding a KL cost anneal-
ing rate. When sampling is used instead of enu-
meration for computing Eq. 9, about 1.2x speedup
is observed in exchange for slight performance
degradation, and thus sampling could be a good
option in the case that the number of label classes
is large.

Finally, as mentioned in §3.2, variants whose
encoder weights are untied do not work well. We
conjecture this is because genc receives the error
signal only from a source sentence and could not
fully benefit from both sentences. The fact that the
performance degradation is larger when the num-
ber of labeled data is small also agrees with our hy-
pothesis, since unlabeled data affect the classifier
encoder only by the entropy term when encoder
weights are not shared.

4.4 Generated Sentences

We give examples of generated sentences, to val-
idate that the proposed model learns to generate
text having desired properties. From Table 4, we
can see that sentences generated from the identi-
cal input sentence properly reflect the label infor-
mation given. More generated examples are pre-
sented in Appendix D.

Further, to quantitatively measure the qual-
ity of generated sentences, we construct artificial
datasets, where each premise and label in the SNLI
development set is used as input to our trained
generator and generated hypotheses are collected.
Then we prepare a LSTM classifier that is trained
on the original SNLI dataset as a surrogate for the
ideal classifier, and use it for measuring the quality
of generated datasets.9 We also compute the diver-
sity of the generated hypotheses using the metrics
proposed by Li et al. (2016), to verify the effect of
diversity-promoting semantic constraints.

Results of the evaluation on the artificial
datasets are presented in Table 5. The classifier
trained on the original dataset predicts the gener-
ated data fairly well, from which we verify that
the generated sentences contain desired seman-
tics. Also, as expected, fine-tuning with Ry in-

9The accuracy of the trained classifier on the original de-
velopment set is 81.7%.

creases the classification accuracy by a large mar-
gin, whileRz andRµ enhance diversity.

5 Related Work

Semi-supervised learning for text classification.
Using unlabeled data for text classification is an
important subject and there exists much previous
research (Zhu et al., 2003; Nigam et al., 2006; Zhu,
2008, to name but a few). Notably, the work of
Xu et al. (2017) applies the semi-supervised VAE
(Kingma et al., 2014) to the single-sentence text
classification problem. Zhao et al. (2018); Shen
et al. (2018a) present VAE models for the semi-
supervised text sequence matching, while their
models have drawbacks as mentioned in §3.

When the use of external corpora is allowed,
the performance can further be increased. Dai
and Le (2015); Ramachandran et al. (2017) train
an encoder-decoder network on large corpora and
fine-tune the learned encoder on a specific task.
Recently, there have been remarkable improve-
ments in pre-trained language representations (Pe-
ters et al., 2018; Radford et al., 2018; Devlin
et al., 2018), where language models trained on
extremely large data brought a huge performance
boost. These methods are orthogonal to our work,
and additional enhancements are expected when
they are used together with our model.

Cross-sentence generating LVMs. There ex-
ists some prior work on cross-sentence generat-
ing LVMs. Shen et al. (2017) introduce a sim-
ilar data generation assumption to ours and ap-
ply the idea to unaligned style transfer and natural
language generation. Zhang et al. (2016); Serban
et al. (2017) use latent variable models for ma-
chine translation and dialogue generation. Kang
et al. (2018) propose a data augmentation frame-
work for natural language inference that gener-
ates a sentence, however unlabeled data are not
considered in their work. Deudon (2018) build
a sentence-reformulating deep generative model
whose objective is to measure the semantic simi-
larity between a sentence pair. However their work
cannot be applied to a multi-class classification
problem, and the generative objective is only used
in pre-training, not considering the joint optimiza-
tion of the generative and the discriminative ob-
jective. To the best of our knowledge, our work is
the first work on introducing the concept of cross-
sentence generating LVM to the semi-supervised
text matching problem.



4755

Input Entailment Neutral Contradiction
two girls play with bubbles near
a boat dock .

two girls are outside . the girls are friends . two girls are swimming
in the ocean .

a classroom full of men, with the
teacher up front .

a group of boys are in-
doors .

the teacher is teaching
the students .

the students are at home
sleeping .

a dune buggy traveling on sand . the vehicle is moving . the vehicle is red . a man is riding a bike .

Table 4: Selected samples generated from the model trained on the SNLI dataset.

Dataset Acc. distinct-1 distinct-2
CS-LVM 76.5 .0128 .0441
+Ry 81.9 .0135 .0479
+Rz 79.0 .0140 .0492
+Rµ 77.5 .0141 .0488

Table 5: Results of evaluation of generated artificial
datasets. distinct-1 and distinct-2 compute the ratio of
the number of unique unigrams or bigrams to that of
the total generated tokens (Li et al., 2016).

6 Conclusion

In this work, we proposed a cross-sentence latent
variable model (CS-LVM) for semi-supervised
text sequence matching. Given a pair of text se-
quences and the corresponding label, it uses one
of the sequences and the label as input and gener-
ates the other sequence. Due to the use of cross-
sentence generation, the generative model and the
discriminative classifier interacts more strongly,
and from experiments we empirically proved that
the CS-LVM outperforms other models by a large
margin. We also defined multiple semantic con-
straints to further regularize the model, and ob-
served that fine-tuning with them gives additional
increase in performance.

For future work, we plan to focus on generat-
ing more realistic text and use the generated text
in other tasks e.g. data augmentation, address-
ing adversarial attack. Although the current model
makes fairly plausible sentences, it tends to pre-
fer relatively short and safe sentences, as the main
goal of the training is to accurately predict the rela-
tionship between sentences. We expect the model
could perform more natural generation via apply-
ing recent advancements on deep generative mod-
els.

Acknowledgments

This work was supported by BK21 Plus for Pio-
neers in Innovative Computing (Dept. of Com-
puter Science and Engineering, SNU) funded by
the National Research Foundation of Korea (NRF)
(21A20151113068). We would also like to thank

anonymous reviewers for their constructive feed-
backs.

References
Alexander Alemi, Ben Poole, Ian Fischer, Joshua Dil-

lon, Rif A. Saurous, and Kevin Murphy. 2018.
Fixing a broken ELBO. In Proceedings of the
35th International Conference on Machine Learn-
ing, volume 80 of Proceedings of Machine Learn-
ing Research, pages 159–168, Stockholm, Sweden.
PMLR.

David M. Blei, Alp Kucukelbir, and Jon D. McAuliffe.
2017. Variational inference: A review for statisti-
cians. Journal of the American Statistical Associa-
tion, 112(518):859–877.

Samuel R. Bowman, Gabor Angeli, Christopher Potts,
and Christopher D. Manning. 2015. A large anno-
tated corpus for learning natural language inference.
In Proceedings of the 2015 Conference on Empiri-
cal Methods in Natural Language Processing, pages
632–642, Lisbon, Portugal. Association for Compu-
tational Linguistics.

Samuel R. Bowman, Jon Gauthier, Abhinav Ras-
togi, Raghav Gupta, Christopher D. Manning, and
Christopher Potts. 2016a. A fast unified model for
parsing and sentence understanding. In Proceed-
ings of the 54th Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Pa-
pers), pages 1466–1477, Berlin, Germany. Associa-
tion for Computational Linguistics.

Samuel R. Bowman, Luke Vilnis, Oriol Vinyals, An-
drew Dai, Rafal Jozefowicz, and Samy Bengio.
2016b. Generating sentences from a continuous
space. In Proceedings of The 20th SIGNLL Con-
ference on Computational Natural Language Learn-
ing, pages 10–21, Berlin, Germany. Association for
Computational Linguistics.

Olivier Chapelle, Bernhard Schölkopf, and Alexander
Zien. 2010. Semi-Supervised Learning. Adaptive
computation and machine learning. MIT Press.

Qian Chen, Xiaodan Zhu, Zhen-Hua Ling, Diana
Inkpen, and Si Wei. 2018. Neural natural language
inference models enhanced with external knowl-
edge. In Proceedings of the 56th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers), pages 2406–2417, Melbourne,
Australia. Association for Computational Linguis-
tics.

http://proceedings.mlr.press/v80/alemi18a.html
https://doi.org/10.1080/01621459.2017.1285773
https://doi.org/10.1080/01621459.2017.1285773
https://doi.org/10.18653/v1/D15-1075
https://doi.org/10.18653/v1/D15-1075
http://www.aclweb.org/anthology/P16-1139
http://www.aclweb.org/anthology/P16-1139
http://www.aclweb.org/anthology/K16-1002
http://www.aclweb.org/anthology/K16-1002
https://mitpress.mit.edu/books/semi-supervised-learning
http://www.aclweb.org/anthology/P18-1224
http://www.aclweb.org/anthology/P18-1224
http://www.aclweb.org/anthology/P18-1224


4756

Qian Chen, Xiaodan Zhu, Zhen-Hua Ling, Si Wei,
Hui Jiang, and Diana Inkpen. 2017a. Enhanced
LSTM for natural language inference. In Proceed-
ings of the 55th Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Pa-
pers), pages 1657–1668, Vancouver, Canada. Asso-
ciation for Computational Linguistics.

Xi Chen, Diederik P. Kingma, Tim Salimans, Yan
Duan, Prafulla Dhariwal, John Schulman, Ilya
Sutskever, and Pieter Abbeel. 2017b. Variational
lossy autoencoder. In International Conference on
Learning Representations, Toulon, France.

Andrew M. Dai and Quoc V. Le. 2015. Semi-
supervised sequence learning. In Advances in Neu-
ral Information Processing Systems 28, pages 3079–
3087, Montreal, Canada. Curran Associates, Inc.

Tim R. Davidson, Luca Falorsi, Nicola De Cao,
Thomas Kipf, and Jakub M. Tomczak. 2018. Hy-
perspherical variational auto-encoders. In Proceed-
ings of the Thirty-Fourth Conference on Uncertainty
in Artificial Intelligence, pages 856–865, Monterey,
California, USA.

Michel Deudon. 2018. Learning semantic similarity in
a continuous space. In Advances in Neural Informa-
tion Processing Systems 31, pages 986–997, Mon-
treal, Canada. Curran Associates, Inc.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. BERT: Pre-training
of deep bidirectional transformers for language
understanding. Computing Research Repository,
arXiv:1810.04805. Version 1.

Adji B. Dieng, Yoon Kim, Alexander M. Rush, and
David M. Blei. 2019. Avoiding latent variable col-
lapse with generative skip models. In Proceedings
of the 22nd International Conference on Artificial
Intelligence and Statistics, volume 89 of Proceed-
ings of Machine Learning Research, Naha, Japan.
PMLR.

Ishaan Gulrajani, Kundan Kumar, Faruk Ahmed,
Adrien Ali Taiga, Francesco Visin, David Vazquez,
and Aaron Courville. 2017. PixelVAE: A latent
variable model for natural images. In International
Conference on Learning Representations, Toulon,
France.

Kelvin Guu, Tatsunori B. Hashimoto, Yonatan Oren,
and Percy Liang. 2018. Generating sentences by
editing prototypes. Transactions of the Association
for Computational Linguistics, 6:437–450.

Minghao Hu, Yuxing Peng, Zhen Huang, Xipeng Qiu,
Furu Wei, and Ming Zhou. 2018. Reinforced
mnemonic reader for machine reading comprehen-
sion. In Proceedings of the Twenty-Seventh In-
ternational Joint Conference on Artificial Intelli-
gence, pages 4099–4106, Stockholm, Sweden. Inter-
national Joint Conferences on Artificial Intelligence
Organization.

Hakan Inan, Khashayar Khosravi, and Richard Socher.
2017. Tying word vectors and word classifiers: A
loss framework for language modeling. In Inter-
national Conference on Learning Representations,
Toulon, France.

Eric Jang, Shixiang Gu, and Ben Poole. 2017. Cat-
egorical reparameterization with Gumbel-Softmax.
In International Conference on Learning Represen-
tations, Toulon, France.

Yangfeng Ji and Jacob Eisenstein. 2013. Discrimina-
tive improvements to distributional sentence simi-
larity. In Proceedings of the 2013 Conference on
Empirical Methods in Natural Language Process-
ing, pages 891–896, Seattle, Washington, USA. As-
sociation for Computational Linguistics.

Dongyeop Kang, Tushar Khot, Ashish Sabharwal, and
Eduard Hovy. 2018. AdvEntuRe: Adversarial train-
ing for textual entailment with knowledge-guided
examples. In Proceedings of the 56th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), pages 2418–2428, Mel-
bourne, Australia. Association for Computational
Linguistics.

Alex Kendall, Yarin Gal, and Roberto Cipolla. 2018.
Multi-task learning using uncertainty to weigh
losses for scene geometry and semantics. In Pro-
ceedings of the IEEE Conference on Computer Vi-
sion and Pattern Recognition, pages 7482–7491,
Salt Lake City, Utah, USA.

Taeuk Kim, Jihun Choi, Daniel Edmiston, Sanghwan
Bae, and Sang-goo Lee. 2019. Dynamic composi-
tionality in recursive neural networks with structure-
aware tag representations. In Proceedings of the
Thirty-Third AAAI Conference on Artificial Intelli-
gence, Honolulu, Hawaii, USA.

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In International
Conference on Learning Representations.

Diederik P. Kingma and Max Welling. 2014. Auto-
encoding variational Bayes. In International
Conference on Learning Representations, Banff,
Canada.

Durk P. Kingma, Shakir Mohamed, Danilo
Jimenez Rezende, and Max Welling. 2014. Semi-
supervised learning with deep generative models. In
Advances in Neural Information Processing Systems
27, pages 3581–3589, Montreal, Canada. Curran
Associates, Inc.

Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao,
and Bill Dolan. 2016. A diversity-promoting objec-
tive function for neural conversation models. In Pro-
ceedings of the 2016 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
110–119, San Diego, California, USA. Association
for Computational Linguistics.

http://aclweb.org/anthology/P17-1152
http://aclweb.org/anthology/P17-1152
https://arxiv.org/abs/1611.02731v2
https://arxiv.org/abs/1611.02731v2
http://papers.nips.cc/paper/5949-semi-supervised-sequence-learning.pdf
http://papers.nips.cc/paper/5949-semi-supervised-sequence-learning.pdf
https://arxiv.org/abs/1804.00891v2
https://arxiv.org/abs/1804.00891v2
http://papers.nips.cc/paper/7377-learning-semantic-similarity-in-a-continuous-space.pdf
http://papers.nips.cc/paper/7377-learning-semantic-similarity-in-a-continuous-space.pdf
https://arxiv.org/abs/1810.04805v1
https://arxiv.org/abs/1810.04805v1
https://arxiv.org/abs/1810.04805v1
https://arxiv.org/abs/1807.04863v2
https://arxiv.org/abs/1807.04863v2
https://arxiv.org/abs/1611.05013v1
https://arxiv.org/abs/1611.05013v1
http://aclweb.org/anthology/Q18-1031
http://aclweb.org/anthology/Q18-1031
https://doi.org/10.24963/ijcai.2018/570
https://doi.org/10.24963/ijcai.2018/570
https://doi.org/10.24963/ijcai.2018/570
https://arxiv.org/abs/1611.01462v3
https://arxiv.org/abs/1611.01462v3
https://arxiv.org/abs/1611.01144v5
https://arxiv.org/abs/1611.01144v5
http://www.aclweb.org/anthology/D13-1090
http://www.aclweb.org/anthology/D13-1090
http://www.aclweb.org/anthology/D13-1090
http://www.aclweb.org/anthology/P18-1225
http://www.aclweb.org/anthology/P18-1225
http://www.aclweb.org/anthology/P18-1225
http://openaccess.thecvf.com/content_cvpr_2018/html/Kendall_Multi-Task_Learning_Using_CVPR_2018_paper.html
http://openaccess.thecvf.com/content_cvpr_2018/html/Kendall_Multi-Task_Learning_Using_CVPR_2018_paper.html
https://arxiv.org/abs/1809.02286v2
https://arxiv.org/abs/1809.02286v2
https://arxiv.org/abs/1809.02286v2
https://arxiv.org/abs/1412.6980v9
https://arxiv.org/abs/1412.6980v9
https://arxiv.org/abs/1312.6114v10
https://arxiv.org/abs/1312.6114v10
http://papers.nips.cc/paper/5352-semi-supervised-learning-with-deep-generative-models.pdf
http://papers.nips.cc/paper/5352-semi-supervised-learning-with-deep-generative-models.pdf
http://www.aclweb.org/anthology/N16-1014
http://www.aclweb.org/anthology/N16-1014


4757

Chris J. Maddison, Andriy Mnih, and Yee Whye Teh.
2017. The Concrete distribution: A continuous
relaxation of discrete random variables. In Inter-
national Conference on Learning Representations,
Toulon, France.

Yishu Miao, Lei Yu, and Phil Blunsom. 2016. Neu-
ral variational inference for text processing. In
Proceedings of The 33rd International Conference
on Machine Learning, volume 48 of Proceedings
of Machine Learning Research, pages 1727–1736,
New York, New York, USA. PMLR.

Lili Mou, Rui Men, Ge Li, Yan Xu, Lu Zhang, Rui Yan,
and Zhi Jin. 2016. Natural language inference by
tree-based convolution and heuristic matching. In
Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 2:
Short Papers), pages 130–136, Berlin, Germany. As-
sociation for Computational Linguistics.

Kamal Nigam, Andrew McCallum, and Tom Mitchell.
2006. Semi-supervised text classification using EM.
Semi-Supervised Learning, pages 33–56.

Aaron van den Oord, Oriol Vinyals, and Koray
Kavukcuoglu. 2017. Neural discrete representation
learning. In Advances in Neural Information Pro-
cessing Systems 30, pages 6306–6315, Long Beach,
California, USA. Curran Associates, Inc.

Ankur Parikh, Oscar Täckström, Dipanjan Das, and
Jakob Uszkoreit. 2016. A decomposable attention
model for natural language inference. In Proceed-
ings of the 2016 Conference on Empirical Methods
in Natural Language Processing, pages 2249–2255,
Austin, Texas. Association for Computational Lin-
guistics.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. GloVe: Global vectors for word
representation. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing, pages 1532–1543, Doha, Qatar. Associ-
ation for Computational Linguistics.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In Proceedings of the 2018 Confer-
ence of the North American Chapter of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies, Volume 1 (Long Papers), pages
2227–2237, New Orleans, Louisiana, USA. Associ-
ation for Computational Linguistics.

Ofir Press and Lior Wolf. 2017. Using the output em-
bedding to improve language models. In Proceed-
ings of the 15th Conference of the European Chap-
ter of the Association for Computational Linguistics:
Volume 2, Short Papers, pages 157–163, Valencia,
Spain. Association for Computational Linguistics.

Yunchen Pu, Zhe Gan, Ricardo Henao, Xin Yuan,
Chunyuan Li, Andrew Stevens, and Lawrence Carin.

2016. Variational autoencoder for deep learning of
images, labels and captions. In Advances in Neu-
ral Information Processing Systems 29, pages 2352–
2360, Barcelona, Spain. Curran Associates, Inc.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving language under-
standing by generative pre-training. Technical re-
port, OpenAI.

Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and
Percy Liang. 2016. SQuAD: 100,000+ questions
for machine comprehension of text. In Proceed-
ings of the 2016 Conference on Empirical Methods
in Natural Language Processing, pages 2383–2392,
Austin, Texas, USA. Association for Computational
Linguistics.

Prajit Ramachandran, Peter Liu, and Quoc Le. 2017.
Unsupervised pretraining for sequence to sequence
learning. In Proceedings of the 2017 Conference on
Empirical Methods in Natural Language Process-
ing, pages 383–391, Copenhagen, Denmark. Asso-
ciation for Computational Linguistics.

Danilo Jimenez Rezende, Shakir Mohamed, and Daan
Wierstra. 2014. Stochastic backpropagation and ap-
proximate inference in deep generative models. In
Proceedings of the 31st International Conference
on Machine Learning, volume 32 of Proceedings of
Machine Learning Research, pages 1278–1286, Bei-
jing, China. PMLR.

Adam Roberts, Jesse Engel, Colin Raffel, Curtis
Hawthorne, and Douglas Eck. 2018. A hierarchical
latent vector model for learning long-term structure
in music. In Proceedings of the 35th International
Conference on Machine Learning, volume 80 of
Proceedings of Machine Learning Research, pages
4364–4373, Stockholm, Sweden. PMLR.

Iulian Vlad Serban, Alessandro Sordoni, Ryan Lowe,
Laurent Charlin, Joelle Pineau, Aaron Courville, and
Yoshua Bengio. 2017. A hierarchical latent variable
encoder-decoder model for generating dialogues. In
Proceedings of the Thirty-First AAAI Conference on
Artificial Intelligence, pages 3295–3301, San Fran-
cisco, California, USA.

Dinghan Shen, Yizhe Zhang, Ricardo Henao, Qinliang
Su, and Lawrence Carin. 2018a. Deconvolutional
latent-variable model for text sequence matching. In
Proceedings of the Thirty-Second AAAI Conference
on Artificial Intelligence, pages 5438–5445, New
Orleans, Louisiana, USA.

Tao Shen, Tianyi Zhou, Guodong Long, Jing Jiang,
Shirui Pan, and Chengqi Zhang. 2018b. DiSAN: Di-
rectional self-attention network for RNN/CNN-free
language understanding. In Thirty-Second AAAI
Conference on Artificial Intelligence, pages 5446–
5455, New Orleans, Louisiana, USA.

Tianxiao Shen, Tao Lei, Regina Barzilay, and Tommi
Jaakkola. 2017. Style transfer from non-parallel text

https://arxiv.org/abs/1611.00712v3
https://arxiv.org/abs/1611.00712v3
http://proceedings.mlr.press/v48/miao16.html
http://proceedings.mlr.press/v48/miao16.html
http://anthology.aclweb.org/P16-2022
http://anthology.aclweb.org/P16-2022
https://people.cs.umass.edu/~mccallum/papers/semisup-em.pdf
http://papers.nips.cc/paper/7210-neural-discrete-representation-learning.pdf
http://papers.nips.cc/paper/7210-neural-discrete-representation-learning.pdf
https://aclweb.org/anthology/D16-1244
https://aclweb.org/anthology/D16-1244
http://www.aclweb.org/anthology/D14-1162
http://www.aclweb.org/anthology/D14-1162
http://www.aclweb.org/anthology/N18-1202
http://www.aclweb.org/anthology/N18-1202
http://www.aclweb.org/anthology/E17-2025
http://www.aclweb.org/anthology/E17-2025
http://papers.nips.cc/paper/6528-variational-autoencoder-for-deep-learning-of-images-labels-and-captions.pdf
http://papers.nips.cc/paper/6528-variational-autoencoder-for-deep-learning-of-images-labels-and-captions.pdf
https://blog.openai.com/language-unsupervised/
https://blog.openai.com/language-unsupervised/
https://aclweb.org/anthology/D16-1264
https://aclweb.org/anthology/D16-1264
https://www.aclweb.org/anthology/D17-1039
https://www.aclweb.org/anthology/D17-1039
http://proceedings.mlr.press/v32/rezende14.html
http://proceedings.mlr.press/v32/rezende14.html
http://proceedings.mlr.press/v80/roberts18a.html
http://proceedings.mlr.press/v80/roberts18a.html
http://proceedings.mlr.press/v80/roberts18a.html
https://arxiv.org/abs/1605.06069v3
https://arxiv.org/abs/1605.06069v3
https://aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16921
https://aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16921
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16126
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16126
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16126
http://papers.nips.cc/paper/7259-style-transfer-from-non-parallel-text-by-cross-alignment.pdf


4758

by cross-alignment. In Advances in Neural Informa-
tion Processing Systems 30, pages 6830–6841, Long
Beach, California, USA. Curran Associates, Inc.

Kihyuk Sohn, Honglak Lee, and Xinchen Yan. 2015.
Learning structured output representation using
deep conditional generative models. In Advances
in Neural Information Processing Systems 28, pages
3483–3491, Montreal, Canada. Curran Associates,
Inc.

Ming Tan, Cicero dos Santos, Bing Xiang, and Bowen
Zhou. 2016. Improved representation learning for
question answer matching. In Proceedings of the
54th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), pages
464–473, Berlin, Germany. Association for Compu-
tational Linguistics.

Kateryna Tymoshenko and Alessandro Moschitti.
2018. Cross-pair text representations for answer
sentence selection. In Proceedings of the 2018 Con-
ference on Empirical Methods in Natural Language
Processing, pages 2162–2173, Brussels, Belgium.
Association for Computational Linguistics.

Shuohang Wang and Jing Jiang. 2017. A compare-
aggregate model for matching text sequences. In
International Conference on Learning Representa-
tions, Toulon, France.

Zhiguo Wang, Wael Hamza, and Radu Florian. 2017.
Bilateral multi-perspective matching for natural lan-
guage sentences. In Proceedings of the Twenty-Sixth
International Joint Conference on Artificial Intelli-
gence, pages 4144–4150, Melbourne, Australia.

Adina Williams, Nikita Nangia, and Samuel Bowman.
2018. A broad-coverage challenge corpus for sen-
tence understanding through inference. In Proceed-
ings of the 2018 Conference of the North Ameri-
can Chapter of the Association for Computational
Linguistics: Human Language Technologies, Vol-
ume 1 (Long Papers), pages 1112–1122, New Or-
leans, Louisiana, USA. Association for Computa-
tional Linguistics.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V.
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, Jeff Klingner, Apurva Shah, Melvin
Johnson, Xiaobing Liu, Łukasz Kaiser, Stephan
Gouws, Yoshikiyo Kato, Taku Kudo, Hideto
Kazawa, Keith Stevens, George Kurian, Nishant
Patil, Wei Wang, Cliff Young, Jason Smith, Jason
Riesa, Alex Rudnick, Oriol Vinyals, Greg Corrado,
Macduff Hughes, and Jeffrey Dean. 2016. Google’s
neural machine translation system: Bridging the gap
between human and machine translation. Comput-
ing Research Repository, arXiv:1609.08144. Ver-
sion 2.

Caiming Xiong, Victor Zhong, and Richard Socher.
2018. DCN+: Mixed objective and deep residual
coattention for question answering. In International

Conference on Learning Representations, Vancou-
ver, Canada.

Jiacheng Xu and Greg Durrett. 2018. Spherical latent
spaces for stable variational autoencoders. In Pro-
ceedings of the 2018 Conference on Empirical Meth-
ods in Natural Language Processing, pages 4503–
4513, Brussels, Belgium. Association for Computa-
tional Linguistics.

Weidi Xu, Haoze Sun, Chao Deng, and Ying Tan.
2017. Variational autoencoder for semi-supervised
text classification. In Proceedings of the Thirty-First
AAAI Conference on Artificial Intelligence, pages
3358–3364, San Francisco, California, USA.

Zichao Yang, Zhiting Hu, Ruslan Salakhutdinov, and
Taylor Berg-Kirkpatrick. 2017. Improved varia-
tional autoencoders for text modeling using dilated
convolutions. In Proceedings of the 34th Interna-
tional Conference on Machine Learning, volume 70
of Proceedings of Machine Learning Research,
pages 3881–3890, Sydney, Australia. PMLR.

Biao Zhang, Deyi Xiong, Jinsong Su, Hong Duan, and
Min Zhang. 2016. Variational neural machine trans-
lation. In Proceedings of the 2016 Conference on
Empirical Methods in Natural Language Process-
ing, pages 521–530, Austin, Texas, USA. Associa-
tion for Computational Linguistics.

Junbo Zhao, Yoon Kim, Kelly Zhang, Alexander Rush,
and Yann LeCun. 2018. Adversarially regularized
autoencoders. In Proceedings of the 35th Interna-
tional Conference on Machine Learning, volume 80
of Proceedings of Machine Learning Research,
pages 5902–5911, Stockholm, Sweden. PMLR.

Xiaojin Zhu. 2008. Semi-supervised learning literature
survey. Technical report, Department of Computer
Sciences, University of Wisconsin-Madison.

Xiaojin Zhu, Zoubin Ghahramani, and John Lafferty.
2003. Semi-supervised learning using gaussian
fields and harmonic functions. In Proceedings of the
Twentieth International Conference on International
Conference on Machine Learning, pages 912–919.
AAAI Press.

A von Mises–Fisher Distribution

A von Mises–Fisher (vMF) distribution is the dis-
tribution defined on a m-dimensional unit hyper-
sphere. It is parameterized by two parameters:
the mean direction µ ∈ Rm and the concentra-
tion κ ∈ R. The probability density function (pdf)
of vMF(µ, κ) is defined by

f(x;µ, κ) = Cm(κ) exp(κµ
>x), (17)

where

Cm(κ) =
κm/2−1

(2π)m/2Im/2−1(κ)

http://papers.nips.cc/paper/7259-style-transfer-from-non-parallel-text-by-cross-alignment.pdf
http://papers.nips.cc/paper/5775-learning-structured-output-representation-using-deep-conditional-generative-models.pdf
http://papers.nips.cc/paper/5775-learning-structured-output-representation-using-deep-conditional-generative-models.pdf
http://www.aclweb.org/anthology/P16-1044
http://www.aclweb.org/anthology/P16-1044
http://www.aclweb.org/anthology/D18-1240
http://www.aclweb.org/anthology/D18-1240
https://arxiv.org/abs/1611.01747v1
https://arxiv.org/abs/1611.01747v1
https://www.ijcai.org/proceedings/2017/579
https://www.ijcai.org/proceedings/2017/579
http://www.aclweb.org/anthology/N18-1101
http://www.aclweb.org/anthology/N18-1101
https://arxiv.org/abs/1609.08144v2
https://arxiv.org/abs/1609.08144v2
https://arxiv.org/abs/1609.08144v2
https://arxiv.org/abs/1711.00106v2
https://arxiv.org/abs/1711.00106v2
http://www.aclweb.org/anthology/D18-1480
http://www.aclweb.org/anthology/D18-1480
https://aaai.org/ocs/index.php/AAAI/AAAI17/paper/view/14299
https://aaai.org/ocs/index.php/AAAI/AAAI17/paper/view/14299
http://proceedings.mlr.press/v70/yang17d/yang17d.pdf
http://proceedings.mlr.press/v70/yang17d/yang17d.pdf
http://proceedings.mlr.press/v70/yang17d/yang17d.pdf
https://doi.org/10.18653/v1/D16-1050
https://doi.org/10.18653/v1/D16-1050
http://proceedings.mlr.press/v80/zhao18b.html
http://proceedings.mlr.press/v80/zhao18b.html
http://pages.cs.wisc.edu/~jerryzhu/pub/ssl_survey.pdf
http://pages.cs.wisc.edu/~jerryzhu/pub/ssl_survey.pdf
https://www.aaai.org/Papers/ICML/2003/ICML03-118.pdf
https://www.aaai.org/Papers/ICML/2003/ICML03-118.pdf


4759

and Iv(κ) is the modified Bessel function of the
first kind at order v. Eq. 17 is used in the compu-
tation ofRz.

A sample from a vMF distribution is drawn
from the acceptance-rejection scheme presented in
Algorithm 1 of Davidson et al. (2018). In their al-
gorithm, a stochastic variable obtained from the
acceptance-rejection sampling does not depend on
µ, thus the sampling process can be rewritten as
a deterministic function that accepts the stochastic
variable as input (i.e. reparameterization trick).

The KL divergence between a vMF distribution
vMF(µ, κ) and the hyperspherical uniform distri-
bution U(Sm−1) = vMF(·, 0) can be derived ana-
lytically:

DKL(vMF(µ, κ)‖vMF(·, 0))

= logCm(κ)− log
Γ(m/2)

2πm/2
+ κ

Im/2(κ)

Im/2−1(κ)
.

Note that the KL divergence does not depend
on µ, thus the KL divergence is a constant if κ
is fixed. Intuitively, this is because the hyper-
spherical uniform distribution has equal probabil-
ity density at every point on the unit hypersphere,
and DKL(vMF(µ, κ)‖vMF(·, 0)) should not be
changed under rotations.

B Derivation of Lower Bounds

Let qθ(zs|·) be a distribution that has the same
support with p(zs). Then the KL divergence be-
tween qθ(zs|·) and pθ(zs|xt, y) can be written as

DKL(qφ(zs|·)‖pθ(zs|xt, y))

=

∫
qφ(zs|·) log

qφ(zs|·)
pθ(zs|xt, y)

dzs

=

∫
qφ(zs|·) log

pθ(xt, y)qφ(zs|·)
pθ(xt|zs, y)p(zs)p(y)

dzs

= log pθ(xt, y) +DKL(qφ(zs|·)‖p(zs))
− Eqφ(zs|·)[log pθ(xt|zs, y)]− log p(y)

≥ 0.

From the above inequality we obtain the lower
bound of log pθ(xt, y) presented in Eq. 2.

The lower bound of log pθ(xt) (Eq. 7) could be

derived as follows.

log pθ(xt) = log
∑
y

∫
pθ(xt, zs, y)dzs

= logEqφ,ψ(y,zs|xs,xt)
[
pθ(xt|zs, y)p(zs)p(y)
qφ,ψ(y, zs|xs,xt)

]
≥ Eqφ,ψ(y,zs|xs,xt)

[
log

pθ(xt|zs, y)p(zs)p(y)
qφ,ψ(y, zs|xs,xt)

]
From the graphical model qφ,ψ(y, zs|xs,xt) =
qφ(zs|xs)qψ(y|xs,xt), and thus

Eqφ,ψ(y,zs|xs,xt)
[
log

pθ(xt|zs, y)p(zs)p(y)
qφ,ψ(y, zs|xs,xt)

]
= Eqψ

[
Eqφ

[
log

pθ(xt|zs, y)p(zs)p(y)
qφ(zs|xs)

]]
− Eqψ [log qψ(y|xs,xt)]

= Eqψ
[
−Lgenl (θ,φ;xs,xt, y)

]
+H(qψ(y|xs,xt))

= −Lu(θ,φ,ψ;xs,xt).

C Implementation Details

We used PyTorch10 and AllenNLP11 libraries for
implementation. The default weight initialization
scheme of the AllenNLP library is used unless ex-
plicitly stated.

For all CS-LVM experiments, the size of word
embeddings and hidden dimensions of LSTMs are
set to 300, and the size of label embeddings is 50.
gcode is implemented as a linear projection of the
last hidden state of the encoder LSTM followed by
normalization. gout is a linear projection followed
by the softmax function, and we reuse the word
embeddings as its weight matrix (Press and Wolf,
2017; Inan et al., 2017). The discriminative clas-
sifier is a feedforward network with single hidden
layer and the ReLU activation function, and the
hidden dimension is set to 1200. We apply dropout
on word embeddings and the classifier with prob-
abilities pw and pc respectively.

When multiple semantic constraints are used,
to make uncertainty weights be always positive
and be optimized stably, we instead use log σ2i as
model parameter, as in Kendall et al. (2018). Each
log σ2i is initialized with zero. The temperature
parameter of the Gumbel-Softmax is linearly an-
nealed using the following schedule:

τ(t) = max(0.1, 1.0− rt),
10https://pytorch.org/
11https://allennlp.org/

https://pytorch.org/
https://allennlp.org/


4760

Model κ λ pw pc
28k 150 0.8 0.75 0.1
59k 100 1.0 0.75 0.1
120k 120 0.8 0.50 0.1

Table 6: Hyperparameters for the SNLI models.

Model κ λ pw pc
1k 100 0.8 0.50 0.2
5k 120 0.5 0.75 0.2
10k 150 0.5 0.75 0.1
25k 100 0.5 0.75 0.1

Table 7: Hyperparameters for the QQP models.

where r = 10−4 is the annealing rate and t is the
training step.

To find optimal hyperparameters, we performed
a rough grid search on κ ∈ {100, 120, 150}, λ ∈
{0.2, 0.5, 0.8, 1.0}, pw ∈ {0.25, 0.50, 0.75}, and
pc ∈ {0.1, 0.2}. The KL divergence between a
posterior and the prior is 23.57, 27.09, 31.60 when
κ is set to 100, 120, 150 respectively.

For the LSTM-vMF-VAE experiments, we used
the same hyperparameters and grid search scheme
with those of the CS-LVM, except that we perform
an additional search on the dimension of a latent
code d ∈ {50, 150, 300}.

Adam optimizer (Kingma and Ba, 2015) with
learning rate γ = 10−3 is used for all experiments,
except for 1k QQP experiments where stochastic
gradient descent optimizer is used. When fine-
tuning the model, we set γ to 10−4. For other
hyperparameters, we follow the configuration sug-
gested by the authors. Best hyperparameter con-
figurations found for SNLI and QQP datasets are
presented in Tables 6 and 7.

D Generated Examples

We used beam search with B = 10 when gener-
ating sentences, and the length normalization (Wu
et al., 2016) is applied with α = 0.7.

Examples are presented in Tables 8–11. Though
almost all generated hypotheses are realistic, we
see that they lack diversity and fail to encode la-
bel information in some cases. For example, the
phrase ‘is/are sleeping’ appears in generated sen-
tences frequently when conditioned on the ‘con-
tradiction’ label, likely because generating a set of
simple patterns could be a shortcut to the objec-
tive. In Table 5, we verified from experiments that
adding constraints helps enhancing accuracy and
diversity, however a model is still relatively in fa-
vor of generating ‘easy’ sentences. We conjecture

that the problem has its root in the fact that the pri-
mary objective of our model is to correctly classify
the input, not to generate diverse outputs.



4761

Input Entailment Neutral Contradiction
little kids enjoy sprinklers by running
through them outdoors .

kids are running . the children are siblings . the children are playing video
games .

blurry people walking in the city at night . people are walking outside . the people are going to work . the people are inside .
a woman sits in a chair under a tree and
plays an acoustic guitar .

a woman is playing an instru-
ment .

the woman is a musician . a woman is playing the flute .

three men converse in a crowd . three men are talking . the men are talking . the men are sleeping .
a woman in a yellow shirt seated at a table
.

a woman is sitting . a woman is sitting at a table . the woman is standing .

a woman hugs a fluffy white dog . a woman is holding a dog . a woman is with her dog . a woman is sleeping .
a crowd of people in colorful dresses . people in costumes the people are in a parade . the people are sitting in a circle .
a clown making a balloon animal for a
pretty lady .

a clown is entertaining a crowd . the clown is entertaining a crowd
.

the clown is sleeping .

Table 8: Sentences generated from the CS-LVM model trained on the SNLI dataset. Failure cases are denoted by
strikethrough text.

Input Entailment Neutral Contradiction
little kids enjoy sprinklers by running
through them outdoors .

kids are playing outside . the kids are playing in the water
.

the kids are sleeping .

blurry people walking in the city at night . people are walking . the people are walking to work . the people are inside .
a woman sits in a chair under a tree and
plays an acoustic guitar .

a woman is playing music . the woman is a musician . a woman is sleeping .

three men converse in a crowd . three men are talking . three men are talking about poli-
tics .

the men are sleeping .

a woman in a yellow shirt seated at a table
.

a woman is sitting . a tall human sitting . the woman is standing .

a woman hugs a fluffy white dog . a woman is holding a dog . the dog belongs to the woman . the dog is black .
a crowd of people in colorful dresses . people in costumes the people are in a parade . the people are sleeping .
a clown making a balloon animal for a
pretty lady .

a clown is performing . the clown is entertaining a crowd
.

the clown is sleeping .

Table 9: Sentences generated from the CS-LVM +Ry model trained on the SNLI dataset. Note that failed examples
in Table 8 are corrected due to the use ofRy .

Input Entailment Neutral Contradiction
little kids enjoy sprinklers by running
through them outdoors .

kids are playing in water . the kids are having fun . the kids are sleeping .

blurry people walking in the city at night . people are walking . the people are walking to work . the people are inside .
a woman sits in a chair under a tree and
plays an acoustic guitar .

a woman is playing an instru-
ment .

the woman is a musician . a woman is playing the drums .

three men converse in a crowd . three men are talking . three men are talking about poli-
tics .

the men are sleeping .

a woman in a yellow shirt seated at a table
.

a woman is sitting . a woman is sitting at a table . the woman is standing

a woman hugs a fluffy white dog . a woman is holding a dog . a woman is playing with her dog
.

a woman is sleeping .

a crowd of people in colorful dresses . people are wearing costumes . the people are in a parade . the people are sitting down .
a clown making a balloon animal for a
pretty lady .

a clown performs . the clown is a clown . the clown is sleeping .

Table 10: Sentences generated from the CS-LVM + Rz model trained on the SNLI dataset. Failure cases are
denoted by strikethrough text.

Input Entailment Neutral Contradiction
little kids enjoy sprinklers by running
through them outdoors .

kids are playing outside . the kids are having fun . the kids are sleeping .

blurry people walking in the city at night . people are walking . the people are walking to work . the people are inside .
a woman sits in a chair under a tree and
plays an acoustic guitar .

a woman is playing an instru-
ment .

the woman is a musician . a woman is playing the piano .

three men converse in a crowd . three men are talking . three men are talking about poli-
tics .

the men are sleeping .

a woman in a yellow shirt seated at a table
.

a woman is sitting . a woman is sitting at a table . the woman is standing

a woman hugs a fluffy white dog . a woman is holding a dog . the dog belongs to the woman . a woman is petting a cat .
a crowd of people in colorful dresses . people are dressed up . the people are in a parade . the people are sitting down .
a clown making a balloon animal for a
pretty lady .

a clown is blowing bubbles . the clown is a clown . the clown is sleeping .

Table 11: Sentences generated from the CS-LVM + Rµ model trained on the SNLI dataset. Failure cases are
denoted by strikethrough text.


