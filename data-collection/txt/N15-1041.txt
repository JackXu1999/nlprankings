



















































The Geometry of Statistical Machine Translation


Human Language Technologies: The 2015 Annual Conference of the North American Chapter of the ACL, pages 376–386,
Denver, Colorado, May 31 – June 5, 2015. c©2015 Association for Computational Linguistics

The Geometry of Statistical Machine Translation

Aurelien Waite, William Byrne
Department of Engineering, University of Cambridge, UK

aaw35@cam.ac.uk, wjb31@cam.ac.uk

Abstract

Most modern statistical machine translation
systems are based on linear statistical models.
One extremely effective method for estimating
the model parameters is minimum error rate
training (MERT), which is an efficient form of
line optimisation adapted to the highly non-
linear objective functions used in machine
translation. We describe a polynomial-time
generalisation of line optimisation that com-
putes the error surface over a plane embedded
in parameter space. The description of this al-
gorithm relies on convex geometry, which is
the mathematics of polytopes and their faces.

Using this geometric representation of MERT
we investigate whether the optimisation of lin-
ear models is tractable in general. Previous
work on finding optimal solutions in MERT
(Galley and Quirk, 2011) established a worst-
case complexity that was exponential in the
number of sentences, in contrast we show
that exponential dependence in the worst-case
complexity is mainly in the number of fea-
tures.

Although our work is framed with respect to
MERT, the convex geometric description is
also applicable to other error-based training
methods for linear models. We believe our
analysis has important ramifications because it
suggests that the current trend in building sta-
tistical machine translation systems by intro-
ducing a very large number of sparse features
is inherently not robust.

1 Introduction

The linear model of Statistical Machine Translation
(SMT) (Och and Ney, 2002) casts translation as a

search for translation hypotheses under a linear com-
bination of weighted features: a source language
sentence f is translated as

ê(f ;w) = argmax
e

{wh(e, f)} (1)

where translation scores are a linear combination of
the D × 1 feature vector h(e, f) ∈ RD under the
1×D model parameter vector w.

Convex geometry (Ziegler, 1995) is the math-
ematics of such linear equations presented as the
study of convex polytopes. We use convex geom-
etry to show that the behaviour of training methods
such as MERT (Och, 2003; Macherey et al., 2008),
MIRA (Crammer et al., 2006), PRO (Hopkins and
May, 2011), and others converge with a high fea-
ture dimension. In particular we analyse how robust-
ness decreases in linear models as feature dimension
increases. We believe that severe overtraining is a
problem in many current linear model formulations
due to this lack of robustness.

In the process of building this geometric represen-
tation of linear models we discuss algorithms such
as the Minkowski sum algorithm (Fukuda, 2004)
and projected MERT (Section 4.2) that could be use-
ful for designing new and more robust training algo-
rithms for SMT and other natural language process-
ing problems.

2 Training Linear Models

Let f1 . . . fS be a set of S source language sentences
with reference translations r1 . . . rS . The goal is to
estimate the model parameter vector w so as to min-
imize an error count based on an automated metric,
such as BLEU (Papineni et al., 2002), assumed to be

376



additive over sentences:

ŵ = argmin
w

S∑
s=1

E(ê(fs;w), rs) (2)

Optimisation can be made tractable by restricting
the search to rescoring of K-best lists of translation
hypotheses, {es,i, 1 ≤ i ≤ K}Ss=1 . For fs, let
hs,i = h(es,i, fs) be the feature vector associated
with hypothesis es,i. Restricted to these lists, the
general decoder of Eqn. 1 becomes

ê(fs;w) = argmax
es,i

{wh(es,i, fs)} (3)

Although the objective function in Eqn. (2) cannot
be solved analytically, MERT as described by Och
(2003) can be performed over the K-best lists. The
line optimisation procedure considers a subset of pa-
rameters defined by the line w(0) + γd, where w(0)

corresponds to an initial point in parameter space
and d is the direction along which to optimise. Eqn.
(3) can be rewritten as:

ê(fs; γ) = argmax
es,i

{w(0)hs,i + γdhs,i)} (4)

Line optimisation reduces the D-dimensional pro-
cedure in Eqn. (2) to a 1-Dimensional problem that
can be easily solved using a geometric algorithm for
many source sentences (Macherey et al., 2008).

More recently, Galley and Quirk (2011) have in-
troduced linear programming MERT (LP-MERT) as
an exact search algorithm that reaches the global op-
timum of the training criterion. A hypothesis es,i
from the sth K-best list can be selected by the de-
coder only if

w(hs,j − hs,i) ≤ 0 for 1 ≤ j ≤ K (5)

for some parameter vector w 6= 0. If such a solution
exists then the system of inequalities is feasible, and
defines a convex region in parameter space within
which any parameter w will yield es,i. Testing the
system of inequalities in (5) and finding a parameter
vector can be cast as a linear programming feasibil-
ity problem (Galley and Quirk, 2011), and this can
be extended to find a parameter vector that optimizes
Eqn. 2 over a collection of K-best lists. We discuss
the complexity of this operation in Section 4.1.

Hopkins and May (2011) note that for the sth
source sentence, the parameter w that correctly
ranks its K-best list must satisfy the following set
of constraints for 1 ≤ i, j ≤ K:

w(hs,j − hs,i) ≤ 0 if ∆(es,i, es,j) ≥ 0 (6)
where ∆ computes the difference in error between
two hypotheses. The difference vectors (hs,j−hs,i)
associated with each constraint can be used as input
vectors for a binary classification problem in which
the aim is to predict whether the the difference in
error ∆(es,i, es,j) is positive or negative. Hopkins
and May (2011) call this algorithm Pairwise Rank-
ing Optimisation (PRO). Because there are SK2 dif-
ference vectors across all source sentences, a subset
of constraints is sampled in the original formulation;
with effcient calculation of rankings, sampling can
be avoided (Dreyer and Dong, 2015).

The online error based training algorithm MIRA
(Crammer et al., 2006) is also used for SMT (Watan-
abe et al., 2007; Chiang et al., 2008; Chiang, 2012).
Using a sentence-level error function, a set of S or-
acle hypotheses are indexed with the vector î:

îs = argmin
i

E(es,i, rs) for 1 ≤ s ≤ S

For a given s the objective at iteration n + 1 is :

minimise
w(n+1)

1
2
‖w(n+1) −w(n)‖2 + C

K∑
j=1

ξj (7)

subject to ξj ≥ 0 and for 1 ≤ j ≤ K, îs 6= j :
w(n+1)(hs,j − hs,̂is) + ∆(es,̂is , es,j)− ξj ≤ 0

where {ξ} are slack variables added to allow infea-
sible solutions, and C controls the trade-off between
error minimisation and margin maximisation. The
online nature of the optimiser results in complex
implementations, therefore batch versions of MIRA
have been proposed (Cherry and Foster, 2012; Gim-
pel and Smith, 2012).

Although MERT, LP-MERT, PRO, and MIRA
carry out their search in very different ways, we can
compare them in terms of the constraints they are
attempting to satisfy. A feasible solution for LP-
MERT is also an optimal solution for MERT, and
vice versa. The constraints (Eqn. (5)) that define
LP-MERT are a subset of the constraints (Eqn. (6))

377



that define PRO and so a feasible solution for PRO
will also be feasible for LP-MERT; however the con-
verse is not necessarily true. The constraints that
define MIRA (Eqn. (7)) are similar to the LP-MERT
constraints (5), although with the addition of slack
variables and the ∆ function to handle infeasible so-
lutions. However, if a feasible solution is available
for MIRA, then these extra quantities are unneces-
sary. With these quantities removed, then we re-
cover a ‘hard-margin’ optimiser, which utilises the
same constraint set as in LP-MERT. In the feasible
case, the solution found by MIRA is also a solution
for LP-MERT.

2.1 Survey of Recent Work

One avenue of SMT research has been to add as
many features as possible to the linear model, es-
pecially in the form of sparse features (Chiang et
al., 2009; Hopkins and May, 2011; Cherry and Fos-
ter, 2012; Gimpel and Smith, 2012; Flanigan et al.,
2013; Galley et al., 2013; Green et al., 2013). The
assumption is that the addition of new features will
improve translation performance. It is interesting
to read the justification for many of these works as
stated in their abstracts. For example Hopkins and
May (2011) state that:

We establish PRO’s scalability and effec-
tiveness by comparing it to MERT and
MIRA and demonstrate parity on both
phrase-based and syntax-based systems

Cherry and Foster (2012) state:
Among other results, we find that a simple
and efficient batch version of MIRA per-
forms at least as well as training online.

Along similar lines Gimpel and Smith (2012) state:
[We] present a training algorithm that is
easy to implement and that performs com-
parable to others.

In defence of MERT, Galley et al. (2013) state:
Experiments with up to 3600 features
show that these extensions of MERT yield
results comparable to PRO, a learner often
used with large feature sets.

Green et al. (2013) also note that feature-rich
models are rarely used in annual MT evaluations,
an observation they use to motivate an investigation
into adaptive learning rate algorithms.

Why do such different methods give such remark-
ably ‘comparable’ performance in research settings?
And why is it so difficult to get general and unam-
biguous improvements through the use of high di-
mensional, sparse features? We believe that the ex-
planation is in feasibility. If the oracle index vector
î is feasible then all training methods will find very
similar solutions. Our belief is that as the feature
dimension increases, the chance of an oracle index
vector being feasible also increases.

3 Convex Geometry

We now build on the description of LP-MERT to
give a geometric interpretation to training linear
models. We first give a concise summary of the
fundamentals of convex geometry as presented by
(Ziegler, 1995) after which we work through the ex-
ample in Cer et al. (2008) to provide an intuition be-
hind these concepts.

3.1 Convex Geometry Fundamentals

In this section we reference definitions from convex
geometry (Ziegler, 1995) in a form that allows us to
describe SMT model parameter optimisation.
Vector Space The real valued vector space RD rep-
resents the space of all finite D-dimensional feature
vectors.
Dual Vector Space The dual vector space (RD)∗ are
the real linear functions RD → R.
Polytope The polytope Hs ⊆ RD is the convex hull
of the finite set of feature vectors associated with
the K hypotheses for the sth sentence, i.e. Hs =
conv(hs,1, . . . ,hs,K).
Faces in RD Suppose for w ∈ (RD)∗ that wh ≤
maxh′∈Hs wh′, ∀h ∈ Hs. A face is defined as

F = {h ∈ Hs : wh = max
h′∈Hs

wh′} (8)

Vertex A face consisting of a single point is called
a vertex. The set of vertices of a polytope is denoted
vert(Hs).
Edge An edge is a face in the form of a line seg-
ment between two vertices hs,i and hs,j in the poly-
tope Hs. The edge can be written as [hs,i,hs,j ] =
conv(hs,i,hs,j). If an edge exists then the following

378



hLM : log(PLM (e)) hTM : log(PTM (f |e))
e1 -0.1 -1.2
e2 -1.2 -0.2
e3 -0.9 -1.6
e4 -0.9 -0.1

e5 -0.8 -0.9

Table 1: An example set of two dimensional fea-
ture vectors (after Cer et al. (2008), Table 1) with
language model (hLM ) and translation model (hTM )
components. A fifth feature vector has been added
to illustrate redundancy.

modified system from (5) is feasible

w(hj − hi) = 0 (9)
w(hk − hi) < 0, 1 ≤ k ≤ K, k 6= i, k 6= j
w(hl − hj) < 0, 1 ≤ l ≤ K, l 6= i, l 6= j

which implies that [hs,i,hs,j ] defines a decision
boundary in (RD)∗ between the parameters that
maximise hs,i and those that maximise hs,j .
Normal Cone For the face F in polytope Hs the
normal cone NF takes the form.

NF = {w : w(hs,j − hs,i) ≤ 0,∀hs,i ∈ vert(F ),
∀hs,j ∈ vert(Hs)} (10)

If the face is a vertex F = {hs,i} then its normal
cone N{hs,i} is the set of feasible parameters that
satisfy the system in (5).
Normal Fan The set of all normal cones associated
with the faces of Hs is called the normal fanN (Hs).
3.2 Drawing a Normal Fan
Following the example in Cer et al. (2008) we an-
alyze a system based on two features: the transla-
tion PTM (f |e) and language PLM (e) models. For
brevity we omit the common sentence index, so
that hi = hs,i. The system produces a set of
four hypotheses which yield four feature vectors
{h1,h2,h3,h4} (Table 1). To this set of four hy-
potheses, we add a fifth hypothesis and feature vec-
tor h5 to illustrate an infeasible solution. These fea-
ture vectors are plotted in Figure 1.

The feature vectors form a polytope H shaded in
light blue. From Figure 1 we see that h4 satisfies the

hLM

hTM

h1

h2

h3

h4

h5

Figure 1: A geometric interpretation of LP-MERT
(after Cer et al. (2008) and Galley and Quirk
(2011)). The decision boundary represented by the
dashed line intersects the polytope at only h4, mak-
ing it a vertex. No decision boundary intersects
h5 without intersecting other points in the polytope,
making h5 redundant.

conditions for a vertex in Eqn. (8), because we can
draw a decision boundary that interests the vertex
and no other h ∈ H . We also note h5 is not a vertex,
and is redundant to the description of H.

Figure 1 of Cer et al. (2008) actually shows a nor-
mal fan, although it is not described as such. We now
describe how this geometric object is constructed
step by step in Figure 2. In Part (a) we identify the
edge [h4,h1] in R2 with a decision boundary rep-
resented by a dashed line. We have also drawn a
vector w normal to the decision boundary that satis-
fies Eqn. (8). This parameter would result in a tied
model score such that wh4 = wh1. When moving
to (R2)∗ we see that the normal cone N[h4,h1] is a
ray parallel to w. This ray can be considered as the
set of parameter vectors that yield the edge [h4,h1].
The ray is also a decision boundary in (R2)∗, with
parameters on either side of the decision boundary
maximising either h4 or h1. Any vector parallel to
the edge [h4,h1], such as (h1 − h4), can be used to
define this decision boundary in (R2)∗.

Next in Part (b), with the same procedure we de-
fine the normal cone for the edge [h3,h1]. Now both
the edges from parts (a) and (b) share the the vertex
h1. This implies that any parameter vector that lies
between the two decision boundaries (i.e. between
the two rays N[h3,h1] and N[h4,h1]) would maximise
the vertex h1: this is the set of vectors that comprise

379



h1

h2

h3

h4

h5
w

wLM

wTM

N [h
4
,h1

]

(h1 − h4)

R2 (R2)∗

(a)

h1

h2

h3

h4

h5 wLM

wTM

N [h
4
,h1

]

N
[h

3 ,h
1 ]

R2 (R2)∗

(b)

h1

h2

h3

h4

h5 wLM

wTM

N [h
4
,h1

]

N
[h

3 ,h
1 ]

N{h1}

R2 (R2)∗

(c)

h1

h2

h3

h4

h5
N [h

4
,h1

]

N
[h

3 ,h
1 ]

N
[h

4 ,h
2 ]

N[h3,h2]
N{h1}

N{h3}

N{h4}

N{h2}

R2 (R2)∗

(d)
Figure 2: Drawing the Normal Fan. See the description in Section 3.2. The end result in the r.h.s. of Part
(d) reproduces Figure 1 from Cer et al. (2008), identifying the normal cones for all vertices.

normal cone of the vertex N{h1}.
In Part (c) we have shaded and labelled N{h1}.

Note that no other edges are needed to define this
normal cone; these other edges are redundant to the
normal cone’s description.

Finally in Part (d) we draw the full fan. We have
omitted the axes in (R2)∗ for clarity. The normal
cones for all 4 vertices have been identified.

4 Training Set Geometry

The previous discussion treated only a single sen-
tence. For a training set of S input sentences, let i
be an index vector that contains S elements. Each
element is an index is to a hypothesis and a feature
vector for the sth sentence. A particular i specifies
a set of hypotheses drawn from each of the K-best
lists. LP-MERT builds a set of KS feature vectors
associated with S dimensional index vectors i of the
form hi = h1,i1 + . . .+hS,iS . The polytope of these
feature vectors is then constructed.

In convex geometry this operation is called the
Minkowski sum and for the polytopes Hs and Ht,
is defined as (Ziegler, 1995)

Hs + Ht := {h + h′ : h ∈ Hs,h′ ∈ Ht} (11)

We illustrate this operation in the top part of Figure
3. The Minkowski sum is commutative and asso-
ciative and generalises to more than two polytopes
(Gritzmann and Sturmfels, 1992).

For the polytopes Hs and Ht the common refine-
ment (Ziegler, 1995) is

N (Hs) ∧N (Ht) := {N ∩N ′ :
N ∈ N (Hs), N ′ ∈ N (Ht)} (12)

Each cone in the common refinement is the set of
parameter vectors that maximise two faces in Hs and
Ht. This operation is shown in the bottom part of
Figure 3.

As suggested by Figure 3 the Minkowski sum and
common refinement are linked by the following
Proposition 1. N (Hs + Ht) = N (Hs) ∧N (Ht)
Proof. See Gritzmann and Sturmfels (1992)

This implies that, with hi defined for the index
vector i, the Minkowski sum defines the parameter
vectors that satisfy the following (Tsochantaridis et
al., 2005, Eqn. 3)

w(hs,j − hs,is) ≤ 0, 1 ≤ s ≤ S, 1 ≤ j ≤ K (13)

380



h1,1

h1,2 h1,3

h1,4 h2,1

h2,2

h2,3

h1,1 + h2,1

h1,2 + h2,1
h1,1 + h2,2

h1,2 + h2,2 h1,3 + h2,2

h1,4 + h2,2

{h1,4 + h2,1,
h1,1 + h2,3}

{h1,3 + h2,1,
h1,2 + h2,3}

h1,3 + h2,3

h1,4 + h2,3

H1 H2 H1 + H2

R2

(R2)∗
N[h1,4,h1,3]N[h1,2,h1,1]

N
[h

1
,4

,h
1
,1

]
N

[h
1
,3

,h
1
,2

]

N
[h

2
,3

,h
2
,1

]

N [h2
,3
,h2

,2
]

N
[h

2,1 ,h
2,2 ] N[h1,4,h1,3]N[h1,2,h1,1]

N
[h

1
,4

,h
1
,1

]
N

[h
1
,3

,h
1
,2

]

N
[h

2
,3

,h
2
,1

]

N [h2
,3
,h2

,2
]

N
[h

2,1 ,h
2,2 ]

N (H1) N (H2) N (H1) ∧N (H2)
Figure 3: An example of the equivalence between the Minkowski sum and the common refinement.

4.1 Computing the Minkowski Sum

In the top part of the Figure 3 we see that computing
the Minkowski sum directly gives 12 feature vectors,
10 of which are unique. Each feature vector would
have to be tested under LP-MERT. In general there
are KS such feature vectors and exhaustive testing is
impractical. LP-MERT performs a lazy enumeration
of feature vectors as managed through a divide and
conquer algorithm. We believe that in the worst case
the complexity of this algorithm could be O(KS).

The lower part of Figure 3 shows the computation
of the common refinement. The common refinement
appears as if one normal fan was superimposed on
the other. We can see there are six decision bound-
aries associated with the six edges of the Minkowski
sum. Even in this simple example, we can see that
the common refinement is an easier quantity to com-
pute than the Minkowski sum.

We now briefly describe the algorithm of Fukuda
(2004) that computes the common refinement. Con-
sider the example in Figure 3. For H1 and H2 we
have drawn an edge in each polytope with a dashed
line. The corresponding decision boundaries in their
normal fans have also been drawn with dashed lines.

Now consider the vertex h1,3 + h2,2 in H =
H1 + H2 and note it has two incident edges. These
edges are parallel to edges in the summand poly-
topes and correspond to decision boundaries in the
normal cone N{h1,3+h2,2}.

We can find the redundant edges in the
Minkowski sum by testing the edges suggested by
the summand polytopes. If a decision boundary in
(RD)∗ is redundant, then we can ignore the feature
vector that shares the decision boundary. For exam-
ple h1,4 +h2,2 is redundant and the decision bound-
ary N[h1,3,h1,4] is also redundant to the description
of the normal cone N{h1,3+h2,2}. The test for redun-
dant edges can be performed by a linear program.

Given a Minkowski sum H we can define an undi-
rected cyclic graph G(H) = (vert(H), E) where E
is the set of edges. The degree of a vertex in G(H)
is the number of edges incident to a vertex; δ is de-
noted as the maximum degree of the vertices.

The linear program for testing redundancy of
decision boundaries has a runtime of O(D3.5δ)
(Fukuda, 2004). Enumerating the vertices of graph
G(H) is not trivial due to it being an undirected
and cyclic graph. The solution is to use a reverse
search algorithm (Avis and Fukuda, 1993). Essen-

381



BLEU

-0.2

-0.1

0

0.1

0.2

-0.2 -0.1 0 0.1 0.2

W
IP

Pa
ra

m
et

er
γ
2

UtoV Parameter γ1

0.331 0.334 0.337

w(0)

Figure 4: The BLEU score over a 1502 sentence
tune set for the CUED Russian-to-English (Pino et
al., 2013) system over two parameters. Enumer-
ated vertices of the Minkowski sum are shown in the
shaded regions.

tially reverse search transforms the graph into a tree.
The vertex associated with w(0) is denoted as the
root of the tree, and from this root vertices are enu-
merated in reverse order of model score under w(0).
Each branch of the tree can be enumerated indepen-
dently, which means that the enumeration can be
parallelised.

The complexity of the full algorithm is
O(δ(D3.5δ)| vert(H)|) (Fukuda, 2004). In compar-
ison with the O(KS) for LP-MERT the worst case
complexity of the reverse search algorithm is linear
with respect to the size of vert(H).

4.2 Two Dimensional Projected MERT

We now explore whether the reverse search algo-
rithm is a practical method for performing MERT
using an open source implementation of the algo-
rithm (Weibel, 2010). For reasons discussed in the
next section, we wish to reduce the feature dimen-
sion. For M < D, we can define a projection ma-
trix AM+1,D that maps hi ∈ RD into RM+1 as
AM+1,Dhi = h̃i, h̃i ∈ RM+1. There are tech-
nical constraints to be observed, discussed in Waite
(2014). We note that when M = 1 we obtain Eqn.
(4).

For our demonstration, we plot the error count
over a plane in (RD)∗. Using the CUED Russian-to-
English (Pino et al., 2013) entry to WMT’13 (Bojar
et al., 2013) we build a tune set of 1502 sentences.
The system uses 12 features which we initially tune
with lattice MERT (Macherey et al., 2008) to get a
parameter w(0). Using this parameter we generate
1000-best lists. We then project the feature functions
in the 1000-best lists to a 3-dimensional representa-
tion that includes the source-to-target phrase proba-
bility (UtoV), the word insertion penalty (WIP), and
the model score due to w(0). We use the Minkowski
sum algorithm to compute BLEU as γ ∈ (R2)∗ is
applied to the parameters from w(0).

Figure 4 displays some of the characteristics of
the algorithm1. This plot can be interpreted as a
3-dimensional version of Figure 3 in Macherey et
al. (2008) where we represent the BLEU score as
a heatmap instead of a third axis. Execution was
on 12 CPU cores, leading to the distinct search re-
gions, demonstrating the parallel nature of the algo-
rithm. Weibel (2010) uses a depth-first enumeration
order of G(H), hence the narrow and deep explo-
ration of (RD)∗. A breadth-first ordering would fo-
cus on cones closer to w(0). To our knowledge, this
is the first description of a generalised line optimi-
sation algorithm that can search all the parameters
in a plane in polynomial time. Extensions to higher
dimensional search are straightforward.

5 Robustness of Linear Models

In the previous section we described the Minkowski
sum polytope. Let us consider the following upper
bound theorem
Theorem 1. Let H1, . . . ., HS be polytopes in RD
with at most N vertices each. Then for D > 2 the
upper bound on number of vertices of H1+ . . .+HS
is O(SD−1K2(D−1)).

Proof. See Gritzmann and Sturmfels (1992)

Each vertex hi corresponds to a single index
vector i, which itself corresponds to a single set
of selected hypotheses. Therefore the number
of distinct sets of hypotheses that can be drawn

1A replication of this experiment forms part of the UCAM-
SMT tutorial at http://ucam-smt.github.io

382



from the S K-best lists in bounded above by
O(min(KS , SD−1K2(D−1))).

For low dimension features, i.e. for D :
SD−1K2(D−1) � KS , the optimiser is therefore
tightly constrained. It cannot pick arbitrarily from
the individual K-best lists to optimise the overall
BLEU score. We believe this acts as an inherent
form of regularisation.

For example, in the system of Section 4.2 (D=12,
S=1502, K=1000), only 10−4403 percent of the KS

possible index vectors are feasible. However, if the
feature dimension D is increased to D = 493, then
SD−1K2(D−1) � KS and this inherent regularisa-
tion is no longer at work: any index vector is feasi-
ble, and sentence hypotheses can chosen arbitrarily
to optimise the overall BLEU score.

This exponential relationship of feasible solutions
with respect to feature dimension can be seen in Fig-
ure 6 of Galley and Quirk (2011). At low feature di-
mension, they find that the LP-MERT algorithm can
run to completion for a training set size of hundreds
of sentences. As feature dimension increases, the
runtime increases exponentially.

PRO and other ranking methods are similarly con-
strained for low dimensional feature vectors.
Theorem 2. If H is a D-dimensional polytope, then
for D ≥ 3 the following is an upper bound on the
number of edges |E|

|E| ≤
(| vert(H)|

2

)
(14)

Proof. This is a special case of the upper bound the-
orem. See Ziegler (1995, Theorem 8.23).

Each feasible pairwise ranking of pairs of hy-
potheses corresponds to an edge in the Minkowski
sum polytope. Therefore in low dimension ranking
methods also benefit from this inherent regularisa-
tion.

For higher dimensional feature vectors, these up-
per bounds no longer guarantee that this inherent
regularisation is at work. The analysis suggests - but
does not imply - that index vectors, and their cor-
responding solutions, can be picked arbitrarily from
the K-best lists. For MERT overtraining is clearly a
risk.

MIRA and related methods have a regularisation
mechanism due to the margin maximisation term in

N
[h

4 ,h
2 ]

N [h
4
,h1

]

N{h4}

N{h2} N{h1}

w(0)

w(2) w(1)

ŵ

Figure 5: We redraw the normal fan from Figure 2
with potential optimal parameters under the `2 reg-
ularisation scheme of Galley et al. (2013) marked.
The thick red line is the subspace of (R2)∗ opti-
mised. The dashed lines mark the distances between
the decision boundaries and w(0).

their objective functions. Although this form of reg-
ularisation may be helpful in practice, there is no
guarantee that it will prevent overtraining due to the
exponential increase in feasible solutions. For ex-
ample the adaptive learning rate method of Green et
al. (2013) finds gains of over 13 BLEU points in the
training set with the addition of 390,000 features, yet
only 2 to 3 BLEU points are found in the test set.

5.1 A Note on Regularisation

The above analysis suggest a need for regularisa-
tion in training with high dimensional feature vec-
tors. Galley et al. (2013) note that regularisation is
hard to apply to linear models due to the magnitude
invariance of w in Eqn. (1). Figure 2 makes the dif-
ficulty clear: the normal cones are determined en-
tirely by the feature vectors of the training samples,
and within any particular normal cone a parameter
vector can be chosen with arbitrary magnitude. This
renders schemes such as L1 or L2 normalisation in-
effective. To avoid this, Galley et al. (2013) de-
scribe a regularisation scheme for line optimisation
that encourages the optimal parameter to be found
close to w(0). The motivation is that w(0) should be
a trusted initial point, perhaps taken from a lower-
dimensional model. We briefly discuss the chal-
lenges of doing this sort of regularisation in MERT.

In Figure 5 we reproduce the normal fan from Fig-
ure 2. In this diagram we represent the set of pa-
rameters considered by a line optimisation as a thick
red line. Let us assume that both e1 and e2 have a

383



similarly low error count. Under the regularisation
scheme of Galley et al. (2013) we have a choice of
w(1) or w(2), which are equidistant from w(0). In
this affine projection of parameter space it is unclear
which one is the optimum. However, if we consider
the normal fan as a whole we can clearly see that
ŵ ∈ N{hi} is the optimal point under the regular-
isation. However, it is not obvious in the projected
parameter space that ŵ is the better choice. This
analysis suggests that direct intervention, e.g. mon-
itoring BLEU on a held-out set, may be more effec-
tive in avoiding overtraining.

6 Discussion

The main contribution of this work is to present
a novel geometric description of MERT. We show
that it is possible to enumerate all the feasible so-
lutions of a linear model in polynomial time using
this description. The immediate conclusion from
this work is that the current methods for estimating
linear models as done in SMT works best for low
dimensional feature vectors.

We can consider the SMT linear model as a mem-
ber of a family of linear models where the output
values are highly structured, and where each input
yields a candidate space of possible output values.
We have already noted that the constraints in (13) are
shared with the structured-SVM (Tsochantaridis et
al., 2005), and we can also see the same constraints
in Eqn. 3 of Collins (2002). It is our belief that our
analysis is applicable to all models in this family and
extends far beyond the discussion of SMT here.

We note that the upper bound on feasible solu-
tions increases polynomially in training set size S,
whereas the number of possible solutions increases
exponentially in S. The result is that the ratio of
feasible to possible solutions decreases with S. Our
analysis suggests that inherent regularisation should
be improved by increasing training set size. This
confirms most researchers intuition, with perhaps
even larger training sets needed than previously be-
lieved.

Another avenue to prevent overtraining would be
to project high-dimensional feature sets to low di-
mensional feature sets using the technique described
in Section 4.1. We could then use existing training
methods to optimise over the projected feature vec-

tors.
We also note that non-linear models methods,

such as neural networks (Schwenk et al., 2006;
Kalchbrenner and Blunsom, 2013; Devlin et al.,
2014; Cho et al., 2014) and decision forests (Crimin-
isi et al., 2011) are not bound by these analyses. In
particular neural networks are non-linear functions
of the features, and decision forests actively reduce
the number of features for individual trees in the for-
rest. From the perspective of this paper, the recent
improvements in SMT due to neural networks are
well motivated.

Acknowledgments

This research was supported by a doctoral training
account from the Engineering and Physical Sciences
Research Council.

References

David Avis and Komei Fukuda. 1993. Reverse search
for enumeration. Discrete Applied Mathematics,
65:21–46.

Ondřej Bojar, Christian Buck, Chris Callison-Burch,
Christian Federmann, Barry Haddow, Philipp Koehn,
Christof Monz, Matt Post, Radu Soricut, and Lucia
Specia. 2013. Findings of the 2013 Workshop on
Statistical Machine Translation. In Proceedings of the
Eighth Workshop on Statistical Machine Translation,
pages 1–44, Sofia, Bulgaria, August. Association for
Computational Linguistics.

Daniel Cer, Dan Jurafsky, and Christopher D. Manning.
2008. Regularization and search for minimum error
rate training. In Proceedings of the Third Workshop on
Statistical Machine Translation, pages 26–34, Colum-
bus, Ohio, June. Association for Computational Lin-
guistics.

Colin Cherry and George Foster. 2012. Batch tuning
strategies for statistical machine translation. In Pro-
ceedings of the 2012 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
427–436, Montréal, Canada, June. Association for
Computational Linguistics.

David Chiang, Yuval Marton, and Philip Resnik. 2008.
Online large-margin training of syntactic and struc-
tural translation features. In Proceedings of the 2008
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 224–233, Honolulu, Hawaii,
October. Association for Computational Linguistics.

384



David Chiang, Kevin Knight, and Wei Wang. 2009.
11,001 new features for statistical machine transla-
tion. In Proceedings of Human Language Technolo-
gies: The 2009 Annual Conference of the North Ameri-
can Chapter of the Association for Computational Lin-
guistics, pages 218–226, Boulder, Colorado, June. As-
sociation for Computational Linguistics.

David Chiang. 2012. Hope and fear for discriminative
training of statistical translation models. The Journal
of Machine Learning Research, 13(1):1159–1187.

Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre,
Dzmitry Bahdanau, Fethi Bougares, Holger Schwenk,
and Yoshua Bengio. 2014. Learning phrase repre-
sentations using RNN encoder–decoder for statistical
machine translation. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 1724–1734, Doha, Qatar,
October. Association for Computational Linguistics.

Michael Collins. 2002. Discriminative training meth-
ods for hidden Markov models: Theory and experi-
ments with perceptron algorithms. In Proceedings of
the 2002 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1–8. Association for
Computational Linguistics, July.

Koby Crammer, Ofer Dekel, Joseph Keshet, Shai Shalev-
Shwartz, and Yoram Singer. 2006. Online passive-
aggressive algorithms. The Journal of Machine Learn-
ing Research, 7:551–585.

A. Criminisi, J. Shotton, and E. Konukoglu. 2011. Deci-
sion forests for classification, regression, density esti-
mation, manifold learning and semi-supervised learn-
ing. Technical report, Microsoft Research.

Jacob Devlin, Rabih Zbib, Zhongqiang Huang, Thomas
Lamar, Richard Schwartz, and John Makhoul. 2014.
Fast and robust neural network joint models for sta-
tistical machine translation. In Proceedings of the
52nd Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), pages
1370–1380, Baltimore, Maryland, June. Association
for Computational Linguistics.

Markus Dreyer and Yuanzhe Dong. 2015. APRO: All-
pairs ranking optimization for MT tuning. In Proceed-
ings of the 2015 Conference of the North American
Chapter of the Association for Computational Linguis-
tics: Human Language Technologies.

Jeffrey Flanigan, Chris Dyer, and Jaime Carbonell. 2013.
Large-scale discriminative training for statistical ma-
chine translation using held-out line search. In Pro-
ceedings of the 2013 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
248–258, Atlanta, Georgia, June. Association for
Computational Linguistics.

Komei Fukuda. 2004. From the zonotope construction to
the Minkowski addition of convex polytopes. Journal
of Symbolic Computation, 38(4):1261–1272.

Michel Galley and Chris Quirk. 2011. Optimal search
for minimum error rate training. In Proceedings of
the 2011 Conference on Empirical Methods in Natural
Language Processing, pages 38–49, Edinburgh, Scot-
land, UK., July. Association for Computational Lin-
guistics.

Michel Galley, Chris Quirk, Colin Cherry, and Kristina
Toutanova. 2013. Regularized minimum error rate
training. In Proceedings of the 2013 Conference on
Empirical Methods in Natural Language Processing,
pages 1948–1959, Seattle, Washington, USA, October.
Association for Computational Linguistics.

Kevin Gimpel and Noah A. Smith. 2012. Structured
ramp loss minimization for machine translation. In
Proceedings of the 2012 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 221–231, Montréal, Canada, June. Association
for Computational Linguistics.

Spence Green, Sida Wang, Daniel Cer, and Christo-
pher D. Manning. 2013. Fast and adaptive online
training of feature-rich translation models. In Pro-
ceedings of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 311–321, Sofia, Bulgaria, August. As-
sociation for Computational Linguistics.

Peter Gritzmann and Bernd Sturmfels. 1992. Minkowski
addition of polytopes: Computational complexity and
applications to Gröbner bases. SIAM Journal on Dis-
crete Mathematics, 6(2).

Mark Hopkins and Jonathan May. 2011. Tuning as rank-
ing. In Proceedings of the 2011 Conference on Empir-
ical Methods in Natural Language Processing, pages
1352–1362, Edinburgh, Scotland, UK., July. Associa-
tion for Computational Linguistics.

Nal Kalchbrenner and Phil Blunsom. 2013. Recur-
rent continuous translation models. In Proceedings of
the 2013 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1700–1709, Seattle,
Washington, USA, October. Association for Computa-
tional Linguistics.

Wolfgang Macherey, Franz Och, Ignacio Thayer, and
Jakob Uszkoreit. 2008. Lattice-based minimum error
rate training for statistical machine translation. In Pro-
ceedings of the 2008 Conference on Empirical Meth-
ods in Natural Language Processing, pages 725–734,
Honolulu, Hawaii, October. Association for Computa-
tional Linguistics.

Franz Josef Och and Hermann Ney. 2002. Discrimi-
native training and maximum entropy models for sta-
tistical machine translation. In Proceedings of 40th

385



Annual Meeting of the Association for Computational
Linguistics, pages 295–302, Philadelphia, Pennsylva-
nia, USA, July. Association for Computational Lin-
guistics.

Franz Josef Och. 2003. Minimum error rate training in
statistical machine translation. In Proceedings of the
41st Annual Meeting of the Association for Compu-
tational Linguistics, pages 160–167, Sapporo, Japan,
July. Association for Computational Linguistics.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of 40th
Annual Meeting of the Association for Computational
Linguistics, pages 311–318, Philadelphia, Pennsylva-
nia, USA, July. Association for Computational Lin-
guistics.

Juan Pino, Aurelien Waite, Tong Xiao, Adrià de Gis-
pert, Federico Flego, and William Byrne. 2013. The
University of Cambridge Russian-English system at
WMT13. In Proceedings of the Eighth Workshop on
Statistical Machine Translation, pages 200–205, Sofia,
Bulgaria, August. Association for Computational Lin-
guistics.

Holger Schwenk, Daniel Dechelotte, and Jean-Luc Gau-
vain. 2006. Continuous space language models for
statistical machine translation. In Proceedings of the
COLING/ACL 2006 Main Conference Poster Sessions,
pages 723–730, Sydney, Australia, July. Association
for Computational Linguistics.

Ioannis Tsochantaridis, Thorsten Joachims, Thomas Hof-
mann, and Yasemin Altun. 2005. Large margin
methods for structured and interdependent output vari-
ables. In Journal of Machine Learning Research,
pages 1453–1484.

Aurelien Waite. 2014. The Geometry of Statistical Ma-
chine Translation. Ph.D. thesis, University of Cam-
bridge, Cambridge, United Kingdom.

Taro Watanabe, Jun Suzuki, Hajime Tsukada, and Hideki
Isozaki. 2007. Online large-margin training for sta-
tistical machine translation. In Proceedings of the
2007 Joint Conference on Empirical Methods in Natu-
ral Language Processing and Computational Natural
Language Learning, pages 764–773.

Christophe Weibel. 2010. Implementation and paral-
lelization of a reverse-search algorithm for minkowski
sums. In Proceedings of the 12th Workshop on Algo-
rithm Engineering and Experiments (ALENEX 2010),
pages 34–42. SIAM.

G Ziegler. 1995. Lectures on Polytopes. Springer-
Verlag.

386


