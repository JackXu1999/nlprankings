



















































A Deep Neural Information Fusion Architecture for Textual Network Embeddings


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 4698‚Äì4706,
Hong Kong, China, November 3‚Äì7, 2019. c¬©2019 Association for Computational Linguistics

4698

A Deep Neural Information Fusion Architecture for Textual
Network Embeddings

Zenan Xu1,2, Qinliang Su1,2‚àó, Xiaojun Quan1, Weijia Zhang3
1School of Data and Computer Science, Sun Yat-sen University

2Guangdong Key Laboratory of Big Data Analysis and Processing, Guangzhou, China
3School of Electronics and Information Technology, Sun Yat-sen University
xuzn@mail2.sysu.edu.cn, suqliang@mail.sysu.edu.cn

quanxj3@mail.sysu.edu.cn, zhangwj39@mail2.sysu.edu.cn

Abstract

Textual network embeddings aim to learn a
low-dimensional representation for every node
in the network so that both the structural and
textual information from the networks can be
well preserved in the representations. Tradi-
tionally, the structural and textual embeddings
were learned by models that rarely take the
mutual influences between them into account.
In this paper, a deep neural architecture is pro-
posed to effectively fuse the two kinds of in-
formations into one representation. The nov-
elties of the proposed architecture are mani-
fested in the aspects of a newly defined objec-
tive function, the complementary information
fusion method for structural and textual fea-
tures, and the mutual gate mechanism for tex-
tual feature extraction. Experimental results
show that the proposed model outperforms the
comparing methods on all three datasets.

1 Introduction

Networks provide an effective way to organize
heterogeneous relevant data, which can often be
leveraged to facilitate downstream applications.
For example, the huge amount of textual and rela-
tionship data in social networks contains abundant
information on people‚Äôs preferences, and thus can
be used for personalized advertising and recom-
mendation. To this end, traditionally a matrix rep-
resenting the network structure is often built first,
then subsequent tasks proceed. However, matrix
methods are computationally expensive and can-
not be applied to large-scale networks.

Network embedding (NE) maps every node of
a network into a low-dimensional vector, while
seeking to retain the original network informa-
tion. Subsequent tasks (e.g. similar vertices
search, linkage prediction) can proceed by lever-
aging these low-dimensional features. To obtain

‚àóCorresponding author.

network embeddings, (Perozzi et al., 2014) pro-
posed to first generate sequences of nodes by ran-
domly walking along connected nodes. Word em-
bedding methods are then employed to produce
the embeddings for nodes by noting the analogies
between node sequences and sentences in natural
languages. Second-order proximity information is
further taken into account in (Tang et al., 2015). To
gather the network connection information more
efficiently, the random walking strategy in (Per-
ozzi et al., 2014) is modified to favor the important
nodes in (Grover and Leskovec, 2016). However,
all these methods only took the network structure
into account, ignoring the huge amount of tex-
tual data. In Twitter social network, for exam-
ple, tweets posted by a user contain valuable infor-
mation on the user‚Äôs preferences, political stand-
points, and so on (Bandyopadhyay et al., 2018).

To include textual information into the embed-
dings, (Tu et al., 2017) proposed to first learn em-
beddings for the textual data and network structure
respectively, and then concatenate them to obtain
the embeddings of nodes. The textual and struc-
tural embeddings are learned with an objective that
encourages embeddings of neighboring nodes to
be as similar as possible. Attention mechanism is
further employed to highlight the important tex-
tual information by taking the impacts of texts
from neighboring nodes into account. Later, (Shen
et al., 2018b) proposed to use the fine-grained
word alignment mechanism to replace the atten-
tion mechanism in (Tu et al., 2017) in order to
absorb the impacts from neighboring texts more
effectively. However, both methods require the
textual and structural embeddings from neighbor-
ing nodes to be as close as possible even if the
nodes share little common contents. This could
be problematic since a social network user may be
connected to users who post totally different view-
points because of different political standpoints. If



4699

two nodes are similar, it is the node embeddings,
rather than the individual textual or structural em-
beddings, that should be close. Forcing repre-
sentations of dissimilar data to be close is prone
to yield bad representations. Moreover, since the
structural and textual embeddings contain some
common information, if they are concatenated di-
rectly, as done in (Tu et al., 2017; Shen et al.,
2018b), the information contained in the two parts
is entangled in some very complicated way, in-
creasing the difficulties of learning representative
network embeddings.

In this paper, we propose a novel deep neu-
ral Information Fusion Architecture for textual
Network Embedding (NEIFA) to tackle the issues
mentioned above. Instead of forcing the separate
embeddings of structures and texts from neighbor-
ing nodes to be close, we define the learning ob-
jective based on the node embeddings directly. For
the problem of information entanglement, inspired
by the gating mechanism of long short-term mem-
ory (LSTM) (Hochreiter and Schmidhuber, 1997),
we extract the complementary informations from
texts and structures and then use them to constitute
the node embeddings. A mutual gate is further de-
signed to highlight the node‚Äôs textual information
that is consistent with neighbors‚Äô textual contents,
while diminishing those that contracdict to each
other. In this way, the model provides a mech-
anism to only allow the information that is con-
sistent among neighboring nodes to flow into the
node embeddings. The proposed network embed-
ding method is evaluated on the tasks of link pre-
diction and vertex classification, using three real-
world datasets from different domains. It is shown
that the proposed method outperforms state-of-
the-art network embedding methods on the task
of link prediction by a substantial margin, demon-
strating that the obtained embeddings well retain
the information in original networks. Similar phe-
nomenons can also be observed in the vertex clas-
sification task. These results suggest the effective-
ness of the proposed neural information fusion ar-
chitecture for textual network embeddings.

2 Related Work

Text Embedding There has been various meth-
ods to embed textual information into vector rep-
resentations for NLP tasks. The classical method
for embedding textual information could be one-
hot vector, term frequency inverse document fre-

quency (TF-IDF), etc. Due to the high-dimension
and sparsity problems in here, (Mikolov et al.,
2013a) proposed a novel neural network based
skip-gram model to learn distributed word em-
beddings via word co-occurrences in a local win-
dow of textual content. To exploit the internal
structure of text, convolutional neural networks
(CNNs) (Blunsom et al., 2014; Kim, 2014) is ap-
plied to obtain latent features of local textual con-
tent. Then, by following a pooling layer, fixed-
length representations are generated. To have the
embeddings better reflect the correlations among
texts, soft attention mechanisms (Bahdanau et al.,
2014; Vaswani et al., 2017) is proposed to calcu-
late the relative importances of words in a sentence
by evaluating their relevances to the content of
comparing sentences. Alternatively, gating mech-
anism is applied to strengthen the relevant textual
information, while weakening the irrelevant one
by controlling the information-flow path of a net-
work in (Dauphin et al., 2017; Zhou et al., 2017).

Network Embedding Network embedding
methods can be categorized into two classes: (1)
methods that solely utilize structure information;
and (2) methods that consider both structure and
textual content associated with vertices. For the
first type of methods, DeepWalk (Perozzi et al.,
2014) was the first to introduce neural network
technique into the network embedding field. In
DeepWalk, node sequences are generated via ran-
domly walking on the network, dense latent rep-
resentations are by feeding those node sequences
into the skip-gram model. LINE (Tang et al.,
2015) exploited the first-order and second-order
proximity information of vertices in network by
optimizing the joint and condition probability of
edges. Further, Node2Vec (Grover and Leskovec,
2016) proposed a biased random walk to search a
network and generate node sequences based on the
depth-first search and width-first search. However,
those methods only embed the structure informa-
tion into vector representations, while ignoring the
informative textual contents associated with ver-
tices. To address this issue, some recent work
seeks to the joint impact of structure and textual
contents to obtain better representations. TADW
(Yang et al., 2015) proved that DeepWalk is equiv-
alent to the matrix factorization and the textual in-
formation can be incorporated by simply adding
the textual feature into the matrix factorization.
CENE (Sun et al., 2016) extends the original net-



4700

Input 
Gate

MLA

CNN Layer Mutual
Gate

Complementary 
Information 
Extraction

ùëß

ùë°

ùë•

The Fusion Function ‚Ñ±(ùë† , ùë° )Textual Feature Extraction Function  ùíØ(ùë• )

ùëü

ùëü
ùë°

ùë†

ùë•

Figure 1: The overall framework of NEIFA.

works by transforming the textual content into an-
other kinds of vertices, and the vertices are embed-
ded into low-dimensional representations on the
extended network. CANE (Tu et al., 2017) pro-
posed to learn separate embeddings for the tex-
tual and structural information, and obtain the net-
work embeddings by simply concatenating them,
in which a mutual attention mechanism is used to
model the semantic relationship between textual
contents. WANE (Shen et al., 2018b) modified
the semantic extraction strategy in CANE by intro-
ducing a fine-grained word alignment technique to
learn word-level semantic information more effec-
tively. However, most of recent methods force the
textual and structural embeddings of two neigh-
boring nodes close to each other irrespective of
their underlying contents.

3 The Proposed Method

A textual network is defined as G = {V , E, T},
where V , E and T denote the vertices in the
graph, edges between vertices and textual content
associated with vertices, respectively. Each edge
ei,j ‚àà E suggests there is a relationship between
vertex vi and vj .

3.1 Training Objective

Suppose the structural and textual features of node
i are given and are denoted as si and ti, respec-
tively. Existing methods are built on the objec-
tives that encourage the structural and textual fea-
tures of neighboring nodes to be as similar as pos-
sible. As discussed in the previous sections, this
may make the node embeddings deviate from the
true information in the nodes. In this paper, we de-
fine the objective based on the node embeddings

directly, that is,

L =
‚àë
{i,j}‚ààE

log p(hi|hj), (1)

where hi is the network embedding of node i, and
is constructed from si and ti by

hi = F(si, ti); (2)

F(¬∑, ¬∑) is the fusion function that maps the struc-
tural and textual features into the network embed-
dings; and p(hi|hj) denotes the conditional prob-
ability of network embedding hi given the net-
work embedding hj . Following LINE (Tang et al.,
2015), the conditional probability in (1) is defined
as:

p(hi|hj) =
exp(hi ¬∑ hj)‚àë
z‚ààV exp(hi ¬∑ hz)

. (3)

Note that the structural feature si is randomly
initialized and will be learned along with the other
model parameters. For the textual feature ti, it is
obtained via a trainable feature extraction function
from the given texts, i.e.,

ti = T (xi), (4)

where xi represents the texts associated with node
i. From the definition of objective function (1), it
can be seen that it is the network embeddings of
nodes, rather than the individual structural or tex-
tual embeddings, that are encouraged to be close
for neighboring nodes.

Details on how to realize the fusion function
F(¬∑, ¬∑) and feature extraction function T (¬∑) are de-
ferred to Section 3.2 and Section 3.3, respectively.
The overall framework of our proposed NEIFA is
shown in Fig.1.



4701

ùë†ùë†ùëñùëñ ùë°ùë°ùëñùëñ

MLA

MLA

ùë†ùë†ùëñùëñ ùë°ùë°ùëñùëñ

Input 
Gate ùëîùëîùëñùëñ

ùëßùëßùëñùëñ

Linear

Figure 2: The Fusion Module.

3.2 Fusion of Structural and Textual
Features F(si, ti)

In this section, we will present how to fuse the
structural and textual features to yield the embed-
dings for nodes. The fusion module F(si, ti) is
illustrated in Fig.2. The simplest way to obtain
network embeddings is to concatenate them di-
rectly, i.e. hi = [si; ti]. However, it is known
that the structural and textual features are not fully
exclusive, and often contain some common infor-
mation. Thus, if the network embeddings are gen-
erated by simply concatenating the two features,
different parts of the embeddings become entan-
gled to each other in some unknown but complex
way. This may make the process of optimizing
the objective function more difficult and hinder the
model to learn representative embeddings for the
nodes. In this paper, we instead distill the informa-
tion that is complementary to the textual feature ti
from si first, and then concatenate the two comple-
mentary information to constitute the embeddings
of nodes.

To distill the complementary information from
the structural feature si, inspired by LSTM, an in-
put gate is designed to eliminate the information
in si that has already appeared in ti. Specifically,
the gate is designed as

gi = 1‚àí œÉ((Psi + bg)ÔøΩ ti), (5)

where œÉ(¬∑) is the sigmoid function; ÔøΩ denotes the
element-wise multiplication; P and bg are used to
align the structural feature si to the space of tex-
tual features ti. From the definition of gi, it can be
seen that if the values on some specific dimension
of Psi + bg and ti are both large, which indicates
the same information appears in both si and ti, the
gate gi will be closed. So, if (Psi + bg) ÔøΩ ti is
multiplied to the gate gi, only the information that
is not contained in both si and ti is allowed to pass
through. Thus, ((Psi + bg) ÔøΩ ti) ÔøΩ gi can be un-

derstood as the information in si that is comple-
mentary to ti. In practice, we untie the values of
P and bg, and use a new trainable matrix Q and
bias bc instead. The complementary information
is eventually computed as

zi = ((Qsi + bc)ÔøΩ ti)ÔøΩ gi. (6)

Then, we concatenate complementary information
zi to the textual features ti to produce the final net-
work embedding

hi = [zi; ti]. (7)

In this way, given the structural and textual fea-
tures si and ti, we successfully extract the com-
plementary information from si and generate the
final network embedding hi.

3.3 Textual Feature Extraction T (xi)

When extracting textual features for the embed-
dings of nodes, the impacts from neighboring
nodes should also be taken into account, i.e. high-
lighting the consistent information, while damp-
ening the inconsistent ones. To this end, we first
repersent words with their corresponding embed-
dings, and then apply a one-layer CNN followed
by an average pooling operator to extract the raw
features for texts (Tu et al., 2017; Shen et al.,
2018a). Given the raw textual features ri and rj
of two neighboring nodes i and j, we diminish the
information that are not consistent in the two raw
features. Specifically, the final textual features are
computed for nodes i and j as

ti = ri ÔøΩ œÉ(rj), (8)

tj = rj ÔøΩ œÉ(ri), (9)

where œÉ(¬∑) serves as the role of gating. Since
the raw textual feature ri often exhibits specific
meanings on different dimensions, the expressions
(8) and (9) can be understood as a way to control
which information is allowed to flow into the em-
beddings. Only the information that is consitent
among neighboring nodes can appear in the tex-
tual feature ti, which is then fused into the network
embeddings. There are a variety of other nonlin-
ear functions that can serve as the role of gating,
but in this work, the simplest but effective sigmoid
function is employed.



4702

3.4 Training Details

Maximizing the objective function in (1) requires
to compute the expensive softmax function repeat-
edly, in which the summation over all nodes of the
networks is needed for iteration. To address this is-
sue, for each edge ei,j ‚àà E, we introduce negative
sampling (Mikolov et al., 2013b) to simplify the
optimization process. Therefore, the conditional
distribution p(hi|hj) into the following form:

log œÉ(hi ¬∑ hj) +
K‚àë
k=1

Ehk‚àºP (h)[log œÉ(‚àíhk ¬∑ hi)]

(10)
where K is the number of negative samples, and
P (v) ‚àù d3/4v is the distribution of vertices with
dv representing the out-degree of vertex v. Adam
(Kingma and Ba, 2014) is employed to optimize
the entire model based on randomly mini-batch of
edges in each step.

4 Experiments

To evaluate the quality of the network embeddings
generated by the proposed method, we apply them
in two tasks: link prediction and vertex classifica-
tion. Link prediction aims to predict whether there
exists a link between two randomly chosen nodes
based on the similarities of embeddings of the two
nodes. Vertex classification, on the other hand,
tries to classify the nodes into different categories
based on the embeddings, provided that there ex-
ists some supervised information. Both tasks can
achieve good performances only when the embed-
dings retain important information of the nodes,
including both the structural and textual informa-
tion. In the following, we will first introduce the
datasets and baselines used in this paper, then de-
scribe the evaluation metric and experimental se-
tups, and lastly report the performance of the pro-
posed model on the tasks of link prediction and
vertex classification, respectively.

4.1 Datasets and Baselines

Experiments are conducted on three real-world
datasets: Zhihu (Sun et al., 2016), Cora (McCal-
lum et al., 2000) and HepTh (Leskovec et al.,
2005). Below shows the detailed descriptions of
the three datasets, with their statistics summaries
given in Table 1. The preprocessing procedure of
the above datasets is the same as that in (Tu et al.,

Datasets Zhihu Cora HepTh

Vertices 10000 2277 1038
Edges 43894 5214 1990
#(Edges) 2191 93 24
*(Text) 190 90 54
Labels - 7 -

Table 1: Statistics of datasets, where #(Edges) denotes
the max number of the connective relationship of a
node, and *(Text) denotes the average lengths of the
text.

2017) 1.

‚Ä¢ Zhihu (Sun et al., 2016) is a Q&A based
community social network. In our exper-
iment, 10000 active users and the descrip-
tions of their interested topics are collected
as the vertices and texts of the social network
to be studied. There are total 43894 edges
which indicate the relationship between ac-
tive users.

‚Ä¢ Cora (McCallum et al., 2000) is a citation
network that consists of 2277 machine learn-
ing papers with text contents divided into 7
categories. The citation relations among the
papers are reflected in the 5214 edges.

‚Ä¢ HepTh (Leskovec et al., 2005) (High Energy
Physics Theory) is a citation network from
the e-print arXiv. In our experiment, 1038 pa-
pers with abstract information are collected,
among which 1990 edges are observed.

To evaluate the effectiveness of our proposed
model, several strong baseline methods are com-
pared with, which are divided into two categories
as follows:

‚Ä¢ Structure-only: DeepWalk (Perozzi et al.,
2014), LINE (Tang et al., 2015), Node2vec
(Grover and Leskovec, 2016).

‚Ä¢ Structure and Text: TADW (Yang et al.,
2015), CENE (Sun et al., 2016), CANE (Tu
et al., 2017), WANE (Shen et al., 2018b).

4.2 Evaluation Metrics and Experimental
Setups

In link prediction, the performance criteria of
area under the curve (AUC) (Hanley and McNeil,

1https://github.com/thunlp/CANE



4703

% Training Edges 15% 25% 35% 45 % 55% 65% 75% 85% 95%

DeepWalk‚Ä† 56.6 58.1 60.1 60.0 61.8 61.9 63.3 63.7 67.8
LINE‚Ä† 52.3 55.9 59.9 60.9 64.3 66.0 67.7 69.3 71.1
node2vec‚Ä† 54.2 57.1 57.3 58.3 58.7 62.5 66.2 67.6 68.5

TADW‚Ä† 52.3 54.2 55.6 57.3 60.8 62.4 65.2 63.8 69.0
CENE‚Ä† 56.2 57.4 60.3 63.0 66.3 66.0 70.2 69.8 73.8
CANE‚Ä† 56.8 59.3 62.9 64.5 68.9 70.4 71.4 73.6 75.4
WANE‚Ä° 58.7 63.5 68.3 71.9 74.9 77.0 79.7 80.0 82.6

NEIFA 68.9 73.7 78.3 81.0 84.5 87.3 88.2 89.6 90.1

Table 2: AUC scores for link prediction on Zhihu. Note that ‚Ä† and ‚Ä° indicate the results are taken from (Tu et al.,
2017) and (Shen et al., 2018b), respectively.

% Training Edges 15% 25% 35% 45 % 55% 65% 75% 85% 95%

DeepWalk‚Ä† 56.0 63.0 70.2 75.5 80.1 85.2 85.3 87.8 90.3
LINE‚Ä† 55.0 58.6 66.4 73.0 77.6 82.8 85.6 88.4 89.3
node2vec‚Ä† 55.9 62.4 66.1 75.0 78.7 81.6 85.9 87.3 88.2

TADW‚Ä† 86.6 88.2 90.2 90.8 90.0 93.0 91.0 93.4 92.7
CENE‚Ä† 72.1 86.5 84.6 88.1 89.4 89.2 93.9 95.0 95.9
CANE‚Ä† 86.8 91.5 92.2 93.9 94.6 94.9 95.6 96.6 97.7
WANE‚Ä° 91.7 93.3 94.1 95.7 96.2 96.9 97.5 98.2 99.1

NEIFA 89.0 92.2 95.3 96.5 97.1 97.4 97.6 98.5 99.2

Table 3: AUC scores for link prediction on Cora. Note that ‚Ä† and ‚Ä° indicate the results are taken from (Tu et al.,
2017) and (Shen et al., 2018b), respectively.

1982) is used, which represents the probability
that vertices in a random unobserved link are more
similar than those in a random non-existent link.

For the vertex classification task, a logistic re-
gression model is first trained to classify the em-
beddings into different categories based on the
provided labels of nodes. Then, the trained model
is used to classify the network embeddings in test
set, and the classification accuracy is used as the
performance criteria of this task.

To have a fair comparison with competitive
methods, the dimension of network embeddings is
set to 200 for all considered methods. The number
of negative samples is set to 1 and the mini-batch
size is set to 64 to speed up the training processes.
Adam (Kingma and Ba, 2014) is employed to train
our model with a learning rate of 1√ó 10‚àí3.

4.3 Link Prediction

We randomly extract a portion of edges from the
whole edges to constitute the training datasets, and
use the rest as the test datasets. The AUC scores of
different models under proportions ranging from

15% to 95% on Zhihu, Cora and HepTh datasets
are shown in Table 2, Table 3 and Table 4, re-
spectively, with the best performance highlighted
in bold.

As can be seen from Table 2, our proposed
method outperforms all other baselines in Zhihu
dataset substantially, with approximately a 10 per-
cent improvement over the current state-of-the-art
WANE model. This may be partially attributed
to the complicated Zhihu dataset, in which both
the structures and texts contain important infor-
mations. If the two individual features are con-
catenated directly, there may be sever information
overlapping problem, limiting the models to learn-
ing good embeddings. The proposed complemen-
tary information fusion method alleviate the is-
sue by disentangling the structural and textual fea-
tures. In adition, the proposed mutual gate mecha-
nism that removes inconsistent textual information
from a node‚Äôs textual feature also contribute to the
performance gains. On the other hand, the sub-
stantial gain may also be partially attributed to the
objective function that is directly defined on the



4704

% Training Edges 15% 25% 35% 45 % 55% 65% 75% 85% 95%

DeepWalk‚Ä† 55.2 66.0 70.0 75.7 81.3 83.3 87.6 88.9 88.0
LINE‚Ä† 53.7 60.4 66.5 73.9 78.5 83.8 87.5 87.7 87.6
node2vec‚Ä† 57.1 63.6 69.9 76.2 84.3 87.3 88.4 89.2 89.2

TADW‚Ä† 87.0 89.5 91.8 90.8 91.1 92.6 93.5 91.9 91.7
CENE‚Ä† 86.2 84.6 89.8 91.2 92.3 91.8 93.2 92.9 93.2
CANE‚Ä† 90.0 91.2 92.0 93.0 94.2 94.6 95.4 95.7 96.3
WANE‚Ä° 92.3 94.1 95.7 96.7 97.5 97.5 97.7 98.2 98.7

NEIFA 91.7 94.2 95.9 96.8 97.4 97.6 98.0 98.6 99.1

Table 4: AUC scores for link prediction on HepTh. Note that ‚Ä† and ‚Ä° indicate the results are taken from (Tu et al.,
2017) and (Shen et al., 2018b), respectively.

15 25 35 45 55 65 75 85 95
% of edges

55

60

65

70

75

80

85

90

AU
C 

(X
10

0) NEIFA(w/o FM)
NEIFA(w/o M)
NEIFA(w/o F)
NEIFA

(a) Zhihu

15 25 35 45 55 65 75 85 95
% of edges

75

80

85

90

95

100

AU
C 

(X
10

0)

NEIFA(w/o FM)
NEIFA(w/o M)
NEIFA(w/o F)
NEIFA

(b) Cora

15 25 35 45 55 65 75 85 95
% of edges

70

75

80

85

90

95

100

AU
C 

(X
10

0)

NEIFAT(w/o FM)
NEIFA(w/o M)
NEIFA(w/o F)
NEIFA

(c) HepTh

Figure 3: Ablation study of NEIFA model on different datasets on link prediction task.

network embeddings. That is because the incon-
sistencies of the structural or textual information
among neighboring nodes are more likely to hap-
pen in complex networks.

For the other two datasets, as shown in Table
3 and Table 4, our proposed method outperforms
baseline methods overall. The results strongly
demonstrate that the network embeddings gener-
ated by the proposed model are easier to pre-
serve the original information in the nodes. It can
be also seen that the performance gains observed
in the Cora and HepTh datasets are not as sub-
stantial as that in Zhihu dataset. The relatively
small improvement may be attributed to the fact
that the number of edges and neighbors in Cora
and HepTh datasets are much smaller that Zhihu
datasets. We speculate that the information in
structures of the two datasets is far less than that in
texts, implying that the overlapping issue is not as
sever as that in Zhihu. Hence, direct concatenation
will not induce significant performance loss.
Ablation Study To demonstrate the effective-
ness of proposed fusion method and mutual gate
mechanism, three variants of the proposed model
are evaluated: (1)NEIFA(w/o FM): NEIFA with-

out both fusion process and mutual gated mecha-
nism where the raw textual features r are directly
regarded as network embeddings. (2) NEIFA(w/o
F): NEIFA without fusion process where the tex-
tual features t are directly regarded as network
embeddings. (3) NEIFA(w/o M): NEIFA without
mutual gated mechanism where the network em-
beddings are obtained by fusing the structural fea-
tures and raw textual features. The three variants
are compared with original NEIFA model on the
three datasets above. The results are showed in
Fig.3. It can be seen that for networks with very
sparse structure, such as Hepth, the method that
simply uses the raw textual features as their net-
work embeddings can achieve pretty good perfor-
mance. In the simple datasets, the proposed model
even exhibits worse performance in the case of
small proportion of training edges. As the datasets
become larger and more complex network struc-
ture is included, the performance of only using the
textual embeddings decreases rapidly. The reason
may be that as the networks grow, the differences
of structural or textual data among neighboring
nodes become more apparent, and the advantages
of the mutual gate mechanism and information fu-



4705

70

75

80

85

90

95

100

Ac
cu

ra
cy
( √ó

10
0)

Figure 4: Vertex classification result on Cora dataset

sion method will show up.

4.4 Vertex Classification

To demonstrate the superiority of proposed
method, the vertex classification experiment is
also considered on the Cora dataset. This experi-
ment is established on the basis that if the original
network contains different types of nodes, good
embeddings mean that they can be classified into
specific classes by a simple classifier easily. For
the proposed method, the embedding of a node
varies as it interacts with different nodes. To have
the embedding fixed, we follow procedures in (Tu
et al., 2017) to yield a node‚Äôs embedding by av-
eraing the embeddings that are obtained when the
node interacts with different neighbors.

To this end, we randomly split the node em-
beddings of all nodes with a proportion of 50%-
50% into a training and testing set, respectively.
A logistic regression classifier regularized by L2
distance (Fan et al., 2008) is then trained on the
node embeddings from training set. The clas-
sification performance is tested on the hold-out
testing set. The above procedures are repeated
10 times and their average value is reported as
the final performance. It can be seen from Fig.4
that methods considering both structural and tex-
tual information show better classification accu-
racies than methods leveraging only structural in-
formation, demonstrating the importance of incor-
porating textual information into the embeddings.
Moreover, NEIFA outperforms all methods con-
sidered, which further proves the superiority of our
proposed model.

To intuitively understand the embeddings pro-
duced by the proposed model, we employ t-SNE
to map our learned embeddings to a 2-D space.
The result is shown in Fig.5, where different col-
ors indicate that the nodes belong to different cat-

40 20 0 20 40

40

20

0

20

40

Figure 5: t‚àíSNE visualization of our learned network
embeddings on Cora dataset.

egories. Note that, although the mapping in t-SNE
is trained without using any category labels, the
latent label information is still partially extracted
out. As shown in Fig.5, the points with the same
color are closer to each other, while the ones with
different colors are far apart.

5 Conclusions

In this paper, a novel deep neural architecture is
proposed to effectively fuse the structural and tex-
tual informations in networks. Unlike existing
embeddings methods which encourage both tex-
tual and structural embeddings of two neighboring
nodes close to each other, we define the training
objective based on the node embeddings directly.
To address the information duplication problem in
the structural and textual features, a complemen-
tary information fusing method is further devel-
oped to fuse the two features. Besides, a mutual
gate is designed to highlight the textual informa-
tion in a node that is consistent with the textual
contents of neighboring nodes, while diminishing
those that are conflicting to each other. Exhaustive
experimental results on several tasks manifest the
advantages of our proposed model.

Acknowledgments

We thank Wei Liu and Wenxuan Li for their helps.
This work is supported by the National Natural
Science Foundation of China (NSFC) under Grant
No. 61806223, U1711262, U1501252, U1611264
and U1711261, and National Key R&D Program
of China (2018YFB1004404).



4706

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473.

Sambaran Bandyopadhyay, Harsh Kara, Anirban
Biswas, and M N Murty. 2018. Sac2vec: Informa-
tion network representation with structure and con-
tent.

Phil Blunsom, Edward Grefenstette, and Nal Kalch-
brenner. 2014. A convolutional neural network for
modelling sentences. In Proceedings of the 52nd
Annual Meeting of the Association for Computa-
tional Linguistics. Proceedings of the 52nd Annual
Meeting of the Association for Computational .

Yann N Dauphin, Angela Fan, Michael Auli, and David
Grangier. 2017. Language modeling with gated con-
volutional networks. In Proceedings of the 34th
International Conference on Machine Learning-
Volume 70, pages 933‚Äì941. JMLR. org.

Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh, Xiang-
Rui Wang, and Chih-Jen Lin. 2008. Liblinear: A
library for large linear classification. Journal of ma-
chine learning research, 9(Aug):1871‚Äì1874.

Aditya Grover and Jure Leskovec. 2016. node2vec:
Scalable feature learning for networks. In Proceed-
ings of the 22nd ACM SIGKDD international con-
ference on Knowledge discovery and data mining,
pages 855‚Äì864. ACM.

James A Hanley and Barbara J McNeil. 1982. The
meaning and use of the area under a receiver
operating characteristic (roc) curve. Radiology,
143(1):29‚Äì36.

Sepp Hochreiter and JuÃàrgen Schmidhuber. 1997.
Long short-term memory. Neural computation,
9(8):1735‚Äì1780.

Yoon Kim. 2014. Convolutional neural net-
works for sentence classification. arXiv preprint
arXiv:1408.5882.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Jure Leskovec, Jon Kleinberg, and Christos Falout-
sos. 2005. Graphs over time: densification laws,
shrinking diameters and possible explanations. In
Proceedings of the eleventh ACM SIGKDD interna-
tional conference on Knowledge discovery in data
mining, pages 177‚Äì187. ACM.

Andrew Kachites McCallum, Kamal Nigam, Jason
Rennie, and Kristie Seymore. 2000. Automating the
construction of internet portals with machine learn-
ing. Information Retrieval, 3(2):127‚Äì163.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013a. Efficient estimation of word
representations in vector space. arXiv preprint
arXiv:1301.3781.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013b. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems, pages 3111‚Äì3119.

Bryan Perozzi, Rami Al-Rfou, and Steven Skiena.
2014. Deepwalk: Online learning of social rep-
resentations. In Proceedings of the 20th ACM
SIGKDD international conference on Knowledge
discovery and data mining, pages 701‚Äì710. ACM.

Dinghan Shen, Guoyin Wang, Wenlin Wang, Mar-
tin Renqiang Min, Qinliang Su, Yizhe Zhang, Chun-
yuan Li, Ricardo Henao, and Lawrence Carin.
2018a. Baseline needs more love: On simple
word-embedding-based models and associated pool-
ing mechanisms. In Proceedings of the 56th Annual
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers), pages 440‚Äì450.

Dinghan Shen, Xinyuan Zhang, Ricardo Henao, and
Lawrence Carin. 2018b. Improved semantic-aware
network embedding with fine-grained word align-
ment. In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Process-
ing, pages 1829‚Äì1838.

Xiaofei Sun, Jiang Guo, Xiao Ding, and Ting Liu.
2016. A general framework for content-enhanced
network representation learning. arXiv preprint
arXiv:1610.02906.

Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun
Yan, and Qiaozhu Mei. 2015. Line: Large-scale in-
formation network embedding. In Proceedings of
the 24th International Conference on World Wide
Web, pages 1067‚Äì1077. International World Wide
Web Conferences Steering Committee.

Cunchao Tu, Han Liu, Zhiyuan Liu, and Maosong Sun.
2017. Cane: Context-aware network embedding for
relation modeling. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), volume 1,
pages 1722‚Äì1731.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, ≈Åukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 5998‚Äì6008.

Cheng Yang, Zhiyuan Liu, Deli Zhao, Maosong Sun,
and Edward Y Chang. 2015. Network representa-
tion learning with rich text information. In IJCAI,
pages 2111‚Äì2117.

Qingyu Zhou, Nan Yang, Furu Wei, and Ming Zhou.
2017. Selective encoding for abstractive sentence
summarization. arXiv preprint arXiv:1704.07073.


