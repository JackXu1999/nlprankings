









































An Empirical Study of Incorporating Pseudo Data into Grammatical Error Correction


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 1236–1242,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

1236

An Empirical Study of Incorporating Pseudo Data
into Grammatical Error Correction

Shun Kiyono 1,2 Jun Suzuki 2,1 Masato Mita 1,2 Tomoya Mizumoto 1,2∗ Kentaro Inui 2,1
1 RIKEN Center for Advanced Intelligence Project 2 Tohoku University

{shun.kiyono, masato.mita, tomoya.mizumoto}@riken.jp;
{jun.suzuki,inui}@ecei.tohoku.ac.jp

Abstract
The incorporation of pseudo data in the train-
ing of grammatical error correction models has
been one of the main factors in improving the
performance of such models. However, con-
sensus is lacking on experimental configura-
tions, namely, choosing how the pseudo data
should be generated or used. In this study,
these choices are investigated through exten-
sive experiments, and state-of-the-art perfor-
mance is achieved on the CoNLL-2014 test set
(F0.5 = 65.0) and the official test set of the
BEA-2019 shared task (F0.5 = 70.2) without
making any modifications to the model archi-
tecture.

1 Introduction

To date, many studies have tackled grammatical
error correction (GEC) as a machine translation
(MT) task, in which ungrammatical sentences are
regarded as the source language and grammatical
sentences are regarded as the target language. This
approach allows cutting-edge neural MT models
to be adopted. For example, the encoder-decoder
(EncDec) model (Sutskever et al., 2014; Bahdanau
et al., 2015), which was originally proposed for MT,
has been applied widely to GEC and has achieved
remarkable results in the GEC research field (Ji
et al., 2017; Chollampatt and Ng, 2018; Junczys-
Dowmunt et al., 2018).

However, a challenge in applying EncDec to
GEC is that EncDec requires a large amount of
training data (Koehn and Knowles, 2017), but
the largest set of publicly available parallel data
(Lang-8) in GEC has only two million sentence
pairs (Mizumoto et al., 2011). Consequently, the
method of augmenting the data by incorporat-
ing pseudo training data has been studied inten-
sively (Xie et al., 2018; Ge et al., 2018; Lichtarge
et al., 2019; Zhao et al., 2019).

∗Current affiliation: Future Corporation

When incorporating pseudo data, several deci-
sions must be made about the experimental con-
figurations, namely, (i) the method of generating
the pseudo data, (ii) the seed corpus for the pseudo
data, and (iii) the optimization setting (Section 2).
However, consensus on these decisions in the GEC
research field is yet to be formulated. For exam-
ple, Xie et al. (2018) found that a variant of the
backtranslation (Sennrich et al., 2016b) method
(BACKTRANS (NOISY)) outperforms the gener-
ation of pseudo data from raw grammatical sen-
tences (DIRECTNOISE). By contrast, the current
state of the art model (Zhao et al., 2019) uses the
DIRECTNOISE method.

In this study, we investigate these decisions re-
garding pseudo data, our goal being to provide the
research community with an improved understand-
ing of the incorporation of pseudo data. Through
extensive experiments, we determine suitable set-
tings for GEC. We justify the reliability of the
proposed settings by demonstrating their strong
performance on benchmark datasets. Specifically,
without any task-specific techniques or architec-
ture, our model outperforms not only all previous
single-model results but also all ensemble results
except for the ensemble result by Grundkiewicz
et al. (2019)1. By applying task-specific techniques,
we further improve the performance and achieve
state-of-the-art performance on the CoNLL-2014
test set and the official test set of the BEA-2019
shared task.

2 Problem Formulation and Notation

In this section, we formally define the GEC task
discussed in this paper. Let D be the GEC train-
ing data that comprise pairs of an ungrammatical
source sentence X and grammatical target sentence

1The paper (Grundkiewicz et al. 2019) has not been pub-
lished yet at the time of submission.



1237

Y , i.e., D = {(Xn,Yn)}n. Here, |D| denotes the
number of sentence pairs in the dataset D.

Let Θ represent all trainable parameters of the
model. Our objective is to find the optimal param-
eter set Θ̂ that minimizes the following objective
function L(D,Θ) for the given training data D:

L(D,Θ) = − 1
|D|

∑
(X,Y )∈D

log(p(Y |X,Θ)), (1)

where p(Y |X,Θ) denotes the conditional proba-
bility of Y given X .

In the standard supervised learning setting, the
parallel data D comprise only “genuine” parallel
data Dg (i.e., D = Dg). However, in GEC, incor-
porating pseudo data Dp that are generated from
grammatical sentences Y ∈ T , where T represents
seed corpus (i.e., a set of grammatical sentences),
is common (Xie et al., 2018; Zhao et al., 2019;
Grundkiewicz et al., 2019).

Our interest lies in the following three nontrivial
aspects of Equation 1. Aspect (i): multiple meth-
ods for generating pseudo data Dp are available
(Section 3). Aspect (ii): options for the seed cor-
pus T are numerous. To the best of our knowledge,
how the seed corpus domain affects the model per-
formance is yet to be shown. We compare three
corpora, namely, Wikipedia, Simple Wikipedia
(SimpleWiki) and English Gigaword, as a first trial.
Wikipedia and SimpleWiki have similar domains,
but different grammatical complexities. Therefore,
we can investigate how grammatical complexity
affects model performance by comparing these
two corpora. We assume that Gigaword contains
the smallest amount of noise among the three cor-
pora. We can therefore use Gigaword to investigate
whether clean text improves model performance.
Aspect (iii): at least two major settings for incor-
poratingDp into the optimization of Equation 1 are
available. One is to use the two datasets jointly by
concatenating them as D = Dg ∪ Dp, which here-
inafter we refer to as JOINT. The other is to use
Dp for pretraining, namely, minimizing L(Dp,Θ)
to acquire Θ′, and then fine-tuning the model by
minimizing L(Dg,Θ′); hereinafter, we refer to this
setting as PRETRAIN. We investigate these aspects
through our extensive experiments (Section 4).

3 Methods for Generating Pseudo Data

In this section, we describe three methods for gener-
ating pseudo data. In Section 4, we experimentally
compare these methods.

BACKTRANS (NOISY) and BACKTRANS (SAM-
PLE) Backtranslation for the EncDec model was
proposed originally by Sennrich et al. (2016b). In
backtranslation, a reverse model, which generates
an ungrammatical sentence from a given grammat-
ical sentence, is trained. The output of the reverse
model is paired with the input and then used as
pseudo data.

BACKTRANS (NOISY) is a variant of backtrans-
lation that was proposed by Xie et al. (2018)2. This
method adds rβrandom to the score of each hypoth-
esis in the beam for every time step. Here, noise r
is sampled uniformly from the interval [0, 1], and
βrandom ∈ R≥0 is a hyper-parameter that controls
the noise scale. If we set βrandom = 0, then BACK-
TRANS (NOISY) is identical to standard backtrans-
lation.

BACKTRANS (SAMPLE) is another variant of
backtranslation, which was proposed by Edunov
et al. (2018) for MT. In BACKTRANS (SAMPLE),
sentences are decoded by sampling from the distri-
bution of the reverse model.
DIRECTNOISE Whereas BACKTRANS (NOISY)
and BACKTRANS (SAMPLE) generate ungram-
matical sentences with a reverse model, DIRECT-
NOISE injects noise “directly” into grammatical
sentences (Edunov et al., 2018; Zhao et al., 2019).
Specifically, for each token in the given sentence,
this method probabilistically chooses one of the fol-
lowing operations: (i) masking with a placeholder
token 〈mask〉, (ii) deletion, (iii) insertion of a ran-
dom token, and (iv) keeping the original3. For each
token, the choice is made based on the categorical
distribution (µmask, µdeletion, µinsertion, µkeep).

4 Experiments

The goal of our experiments is to investigate aspect
(i)–(iii) introduced in Section 2. To ensure that the
experimental findings are applicable to GEC in
general, we design our experiments by using the
following two strategies: (i) we use an off-the-shelf
EncDec model without any task-specific architec-
ture or techniques; (ii) we conduct hyper-parameter
tuning, evaluation and comparison of each method
or setting on the validation set. At the end of exper-
iments (Section 4.5), we summarize our findings
and propose suitable settings. We then perform a
single-shot evaluation of their performance on the
test set.

2referred as “random noising” in Xie et al. (2018)
3The detailed algorithm is described in Appendix A.



1238

Dataset #sent (pairs) #refs. Split Scorer

BEA-train 561,410 1 train -
BEA-valid 2,377 1 valid ERRANT

CoNLL-2014 1,312 2 test ERRANT & M2 scorer
JFLEG 1,951 4 test GLEU
BEA-test 4,477 5 test ERRANT

SimpleWiki∗ 1,369,460 - - -
Wikipedia∗ 145,883,941 - - -
Gigaword∗ 131,864,979 - - -

Table 1: Summary of datasets used in our experiments.
Dataset marked with “*” is a seed corpus T .

4.1 Experimental Configurations

Dataset The BEA-2019 workshop official
dataset4 is the origin of the training and valida-
tion data of our experiments. Hereinafter, we refer
to the training data as BEA-train. We create val-
idation data (BEA-valid) by randomly sampling
sentence pairs from the official validation split5.

As a seed corpus T , we use SimpleWiki6,
Wikipedia7 or Gigaword8. We apply the noizing
methods described in Section 3 to each corpus and
generate pseudo data Dp. The characteristics of
each dataset are summarized in Table 1.
Evaluation We report results on BEA-valid,
the official test set of the BEA-2019 shared task
(BEA-test), the CoNLL-2014 test set (CoNLL-
2014) (Ng et al., 2014), and the JFLEG test set
(JFLEG) (Napoles et al., 2017). All reported results
(except ensemble) are the average of five distinct tri-
als using five different random seeds. We report the
scores measured by ERRANT (Bryant et al., 2017;
Felice et al., 2016) for BEA-valid, BEA-test, and
CoNLL-2014. As the reference sentences of BEA-
test are publicly unavailable, we evaluate the model
outputs on CodaLab9 for BEA-test. We also re-
port results measured by the M2 scorer (Dahlmeier
and Ng, 2012) on CoNLL-2014 to compare them
with those of previous studies. We use the GLEU
metric (Napoles et al., 2015, 2016) for JFLEG.
Model We adopt the Transformer EncDec
model (Vaswani et al., 2017) using the fairseq
toolkit (Ott et al., 2019) and use the “Transformer
(big)” settings of Vaswani et al. (2017).
Optimization For the JOINT setting, we opti-

4Details of the dataset is in Appendix B.
5The detailed data preparation process is in Appendix C.
6https://simple.wikipedia.org
7We used 2019-02-25 dump file at https://dumps.

wikimedia.org/other/cirrussearch/.
8We used the English Gigaword Fifth Edition (LDC Cata-

log No.: LDC2011T07).
9https://competitions.codalab.org/

competitions/20228

Method Prec. Rec. F0.5

Baseline 46.6 23.1 38.8

BACKTRANS (SAMPLE) 44.6 27.4 39.6
BACKTRANS (NOISY) 42.5 31.3 39.7
DIRECTNOISE 48.9 25.7 41.4

Table 2: Performance of models on BEA-valid: a value
in bold indicates the best result within the column. The
seed corpus T is SimpleWiki.

mize the model with Adam (Kingma and Ba, 2015).
For the PRETRAIN setting, we pretrain the model
with Adam and then fine-tune it on BEA-train using
Adafactor (Shazeer and Stern, 2018)10.

4.2 Aspect (i): Pseudo Data Generation
We compare the effectiveness of the BACK-
TRANS (NOISY), BACKTRANS (SAMPLE),
and DIRECTNOISE methods for generat-
ing pseudo data. In DIRECTNOISE, we
set (µmask, µdeletion, µinsertion, µkeep) =
(0.5, 0.15, 0.15, 0.2)11. We use βrandom = 6
for BACKTRANS (NOISY)12. In addition, we use
(i) the JOINT setting and (ii) all of SimpleWiki as
the seed corpus T throughout this section.

The results are summarized in Table 2. BACK-
TRANS (NOISY) and BACKTRANS (SAMPLE) show
competitive values of F0.5. Given this result, we
exclusively use BACKTRANS (NOISY) and discard
BACKTRANS (SAMPLE) for the rest of the exper-
iments. The advantage of BACKTRANS (NOISY)
is that its effectiveness in GEC has already been
demonstrated by Xie et al. (2018). In addition, in
our preliminary experiment, BACKTRANS (NOISY)
decoded ungrammatical sentence 1.2 times faster
than BACKTRANS (SAMPLE) did. We also use DI-
RECTNOISE because it achieved the best value of
F0.5 among all the methods.

4.3 Aspect (ii): Seed Corpus T
We investigate the effectiveness of the seed corpus
T for generating pseudo data Dp. The three cor-
pora (Wikipedia, SimpleWiki and Gigaword) are
compared in Table 3. We set |Dp| = 1.4M. The
difference in F0.5 is small, which implies that the
seed corpus T has only a minor effect on the model
performance. Nevertheless, Gigaword consistently
outperforms the other two corpora. In particular,

10The detailed hyper-parameters are listed in Appendix D.
11These values are derived from preliminary experiments

(Appendix E).
12βrandom = 6 achieved the best F0.5 in our preliminary

experiments (Appendix F).

https://simple.wikipedia.org
https://dumps.wikimedia.org/other/cirrussearch/
https://dumps.wikimedia.org/other/cirrussearch/
https://competitions.codalab.org/competitions/20228
https://competitions.codalab.org/competitions/20228


1239

Method Seed Corpus T Prec. Rec. F0.5
Baseline N/A 46.6 23.1 38.8

BACKTRANS (NOISY) Wikipedia 43.8 30.8 40.4
BACKTRANS (NOISY) SimpleWiki 42.5 31.3 39.7
BACKTRANS (NOISY) Gigaword 43.1 33.1 40.6

DIRECTNOISE Wikipedia 48.3 25.5 41.0
DIRECTNOISE SimpleWiki 48.9 25.7 41.4
DIRECTNOISE Gigaword 48.3 26.9 41.7

Table 3: Performance on BEA-valid when changing the
seed corpus T used for generating pseudo data (|Dp| =
1.4M).

DIRECTNOISE with Gigaword achieves the best
value of F0.5 among all the configurations.

4.4 Aspect (iii): Optimization Setting

We compare the JOINT and PRETRAIN optimiza-
tion settings. We are interested in how each setting
performs when the scale of the pseudo data Dp
compared with that of the genuine parallel data
Dg is (i) approximately the same (|Dp| = 1.4M)
and (ii) substantially bigger (|Dp| = 14M). Here,
we use Wikipedia as the seed corpus T instead of
SimpleWiki or Gigaword for two reasons. First,
SimpleWiki is too small for the experiment (b)
(see Table 1). Second, the fact that Gigaword is
not freely available makes it difficult for other re-
searchers to replicate our results.
(a) Joint Training or Pretraining Table 4
presents the results. The most notable result here
is that PRETRAIN demonstrates the properties of
more pseudo data and better performance, whereas
JOINT does not. For example, in BACKTRANS
(NOISY), increasing |Dp| (1.4M→ 14M) improves
F0.5 on PRETRAIN (41.1 → 44.5). By contrast,
F0.5 does not improve on JOINT (40.4 → 40.3).
An intuitive explanation for this case is that when
pseudo dataDp are substantially more than genuine
dataDg, the teaching signal fromDp becomes dom-
inant in JOINT. PRETRAIN alleviates this problem
because the model is trained with only Dg during
fine-tuning. We therefore suppose that PRETRAIN
is crucial for utilizing extensive pseudo data.
(b) Amount of Pseudo Data We investigate how
increasing the amount of pseudo data affects the
PRETRAIN setting. We pretrain the model with
different amounts of pseudo data {1.4M, 7M, 14M,
30M, 70M}. The results in Figure 1 show that
BACKTRANS (NOISY) has superior sample effi-
ciency to DIRECTNOISE. The best model (pre-
trained with 70M BACKTRANS (NOISY)) achieves

Optimization Method |Dp| Prec. Rec. F0.5
N/A Baseline 0 46.6 23.1 38.8

PRETRAIN BACKTRANS (NOISY) 1.4M 49.6 24.3 41.1
PRETRAIN DIRECTNOISE 1.4M 48.4 21.2 38.5
JOINT BACKTRANS (NOISY) 1.4M 43.8 30.8 40.4
JOINT DIRECTNOISE 1.4M 48.3 25.5 41.0

PRETRAIN BACKTRANS (NOISY) 14M 50.6 30.1 44.5
PRETRAIN DIRECTNOISE 14M 49.8 25.8 42.0
JOINT BACKTRANS (NOISY) 14M 43.0 32.3 40.3
JOINT DIRECTNOISE 14M 48.7 23.5 40.1

Table 4: Performance of the model with different opti-
mization settings on BEA-valid. The seed corpus T is
Wikipedia.

0 10 20 30 40 50 60 70
Amount of Pseudo Data |Dp| (M)

40

42

44

46

F
0
.5

sc
or

e
Baseline

Backtrans (noisy)

DirectNoise

Figure 1: Performance on BEA-valid for different
amounts of pseudo data (|Dp|). The seed corpus T is
Wikipedia.

F0.5=45.9.

4.5 Comparison with Current Top Models

The present experimental results show that the fol-
lowing configurations are effective for improving
the model performance: (i) the combination of
JOINT and Gigaword (Section 4.3), (ii) the amount
of pseudo data Dp not being too large in JOINT
(Section 4.4(a)), and (iii) PRETRAIN with BACK-
TRANS (NOISY) using large pseudo data Dp (Sec-
tion 4.4(b)). We summarize these findings and
attempt to combine PRETRAIN and JOINT. Specif-
ically, we pretrain the model using 70M pseudo
data of BACKTRANS (NOISY). We then fine-tune
the model by combining BEA-train and relatively
small DIRECTNOISE pseudo data generated from
Gigaword (we set |Dp| = 250K). However, the per-
formance does not improve on BEA-valid. There-
fore, the best approach available is simply to pre-
train the model with large (70M) BACKTRANS
(NOISY) pseudo data and then fine-tune using BEA-
train, which hereinafter we refer to as PRETLARGE.
We use Gigaword for the seed corpus T because it
has the best performance in Table 3.

We evaluate the performance of PRETLARGE on
test sets and compare the scores with the current top
models. Table 5 shows a remarkable result, that is,



1240

CoNLL-2014
(M2 scorer)

CoNLL-2014
(ERRANT) JFLEG

BEA-test
(ERRANT)

Model Ensemble Prec. Rec. F0.5 Prec. Rec. F0.5 GLEU Prec. Rec. F0.5

Chollampatt and Ng (2018) 60.9 23.7 46.4 - - - 51.3 - - -
Junczys-Dowmunt et al. (2018) - - 53.0 - - - 57.9 - - -
Grundkiewicz and Junczys-Dowmunt (2018) 66.8 34.5 56.3 - - - 61.5 - - -
Lichtarge et al. (2019) 65.5 37.1 56.8 - - - 61.6 - - -

Chollampatt and Ng (2018) X 65.5 33.1 54.8 - - - 57.5 - - -
Junczys-Dowmunt et al. (2018) X 61.9 40.2 55.8 - - - 59.9 - - -
Lichtarge et al. (2019) X 66.7 43.9 60.4 - - - 63.3 - - -
Zhao et al. (2019) X 71.6 38.7 61.2 - - - 61.0 - - -
Grundkiewicz et al. (2019) X - - 64.2 - - - 61.2 72.3 60.1 69.5

PRETLARGE 67.9 44.1 61.3 61.2 42.0 56.0 59.7 65.5 59.4 64.2

PRETLARGE+SSE+R2L X 72.4 46.1 65.0 67.3 44.0 60.9 61.4 72.1 61.8 69.8
PRETLARGE+SSE+R2L+SED X 73.3 44.2 64.7 68.1 42.1 60.6 61.2 74.7 56.7 70.2

Table 5: Comparison of our best model and current top models: a bold value indicates the best result within the
column.

our PRETLARGE achieves F0.5 = 61.3 on CoNLL-
2014. This result outperforms not only all previous
single-model results but also all ensemble results
except for that by Grundkiewicz et al. (2019).

To further improve the performance, we incorpo-
rate the following techniques that are widely used
in shared tasks such as BEA-2019 and WMT13:
Synthetic Spelling Error (SSE) Lichtarge et al.
(2019) proposed the method of probabilistically
injecting character-level noise into the source sen-
tence of pseudo data Dp. Specifically, one of the
following operations is applied randomly at a rate
of 0.003 per character: deletion, insertion, replace-
ment, or transposition of adjacent characters.
Right-to-left Re-ranking (R2L) Following Sen-
nrich et al. (2016a, 2017); Grundkiewicz et al.
(2019), we train four right-to-left models. The en-
semble of four left-to-right models generate n-best
candidates and their corresponding scores (i.e., con-
ditional probabilities). We then pass each candidate
to the ensemble of the four right-to-left models and
compute the score. Finally, we re-rank the n-best
candidates based on the sum of the two scores.
Sentence-level Error Detection (SED) SED
classifies whether a given sentence contains a gram-
matical error. Asano et al. (2019) proposed incor-
porating SED into the evaluation pipeline and re-
ported improved precision. Here, the GEC model
is applied only if SED detects a grammatical er-
ror in the given source sentence. The motivation
is that SED could potentially reduce the number
of false-positive errors of the GEC model. We
use the re-implementation of the BERT-based SED
model (Asano et al., 2019).

Table 5 presents the results of applying SSE,

13http://www.statmt.org/wmt19/

R2L, and SED. It is noteworthy that PRET-
LARGE+SSE+R2L achieves state-of-the-art per-
formance on both CoNLL-2014 (F0.5 = 65.0) and
BEA-test (F0.5 = 69.8), which are better than
those of the best system of the BEA-2019 shared
task (Grundkiewicz et al., 2019). In addition, PRET-
LARGE+SSE+R2L+SED can further improve the
performance on BEA-test (F0.5 = 70.2). However,
unfortunately, incorporating SED decreased the
performance on CoNLL-2014 and JFLEG. This
fact implies that SED is sensitive to the domain of
the test set since the SED model is fine-tuned with
the official validation split of BEA dataset. We
leave this sensitivity issue as our future work.

5 Conclusion

In this study, we investigated several aspects of
incorporating pseudo data for GEC. Through ex-
tensive experiments, we found the following to be
effective: (i) utilizing Gigaword as the seed corpus,
and (ii) pretraining the model with BACKTRANS
(NOISY) data. Based on these findings, we pro-
posed suitable settings for GEC. We demonstrated
the effectiveness of our proposal by achieving state-
of-the-art performance on the CoNLL-2014 test set
and the BEA-2019 test set.

Acknowledgements

We thank the three anonymous reviewers for their
insightful comments. We are deeply grateful to
Takumi Ito and Tatsuki Kuribayashi for kindly
sharing the re-implementation of BACKTRANS
(NOISY). The work of Jun Suzuki was sup-
ported in part by JSPS KAKENHI Grant Number
JP19104418 and AIRPF Grant Number 30AI036-8.

http://www.statmt.org/wmt19/


1241

References
Hiroki Asano, Masato Mita, Tomoya Mizumoto, and

Jun Suzuki. 2019. The AIP-Tohoku System at the
BEA-2019 Shared Task. In Proceedings of the Four-
teenth Workshop on Innovative Use of NLP for Build-
ing Educational Applications (BEA 2019), pages
176–182.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural Machine Translation by Jointly
Learning to Align and Translate. In Proceedings of
the 3rd International Conference on Learning Rep-
resentations (ICLR 2015).

Christopher Bryant, Mariano Felice, and Ted Briscoe.
2017. Automatic Annotation and Evaluation of Er-
ror Types for Grammatical Error Correction. In Pro-
ceedings of the 55th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL 2017),
pages 793–805.

Shamil Chollampatt and Hwee Tou Ng. 2018. A Mul-
tilayer Convolutional Encoder-Decoder Neural Net-
work for Grammatical Error Correction. In Proceed-
ings of the Thirty-Second AAAI Conference on Arti-
ficial Intelligence (AAAI 2018), pages 5755–5762.

Daniel Dahlmeier and Hwee Tou Ng. 2012. Better
Evaluation for Grammatical Error Correction. In
Proceedings of the 2012 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics (NAACL 2012), pages 568–572.

Daniel Dahlmeier, Hwee Tou Ng, and Siew Mei Wu.
2013. Building a Large Annotated Corpus of
Learner English: The NUS Corpus of Learner En-
glish. In Proceedings of the 8th Workshop on
Building Educational Applications Using NLP (BEA
2013), pages 22–31.

Sergey Edunov, Myle Ott, Michael Auli, and David
Grangier. 2018. Understanding Back-Translation at
Scale. In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Processing
(EMNLP 2018), pages 489–500.

Mariano Felice, Christopher Bryant, and Ted Briscoe.
2016. Automatic Extraction of Learner Errors
in ESL Sentences Using Linguistically Enhanced
Alignments. In Proceedings of COLING 2016, the
26th International Conference on Computational
Linguistics: Technical Papers, pages 825–835.

Tao Ge, Furu Wei, and Ming Zhou. 2018. Fluency
Boost Learning and Inference for Neural Grammati-
cal Error Correction. In Proceedings of the 56th An-
nual Meeting of the Association for Computational
Linguistics (ACL 2018), pages 1055–1065.

Sylviane Granger. 1998. The computer learner corpus:
A versatile new source of data for SLA research. In
Sylviane Granger, editor, Learner English on Com-
puter, pages 3–18. Addison Wesley Longman, Lon-
don and New York.

Roman Grundkiewicz and Marcin Junczys-Dowmunt.
2018. Near Human-Level Performance in Grammat-
ical Error Correction with Hybrid Machine Transla-
tion. In Proceedings of the 2018 Conference of the
North American Chapter of the Association for Com-
putational Linguistics (NAACL 2018), pages 284–
290.

Roman Grundkiewicz, Marcin Junczys-Dowmunt, and
Kenneth Heafield. 2019. Neural grammatical error
correction systems with unsupervised pre-training
on synthetic data. In Proceedings of the Fourteenth
Workshop on Innovative Use of NLP for Building Ed-
ucational Applications (BEA 2019), pages 252–263.

Jianshu Ji, Qinlong Wang, Kristina Toutanova, Yongen
Gong, Steven Truong, and Jianfeng Gao. 2017. A
Nested Attention Neural Hybrid Model for Gram-
matical Error Correction. In Proceedings of the
55th Annual Meeting of the Association for Compu-
tational Linguistics (ACL 2017), pages 753–762.

Marcin Junczys-Dowmunt, Roman Grundkiewicz,
Shubha Guha, and Kenneth Heafield. 2018. Ap-
proaching Neural Grammatical Error Correction as
a Low-Resource Machine Translation Task. In Pro-
ceedings of the 2018 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics (NAACL 2018), pages 595–606.

Diederik Kingma and Jimmy Ba. 2015. Adam: A
Method for Stochastic Optimization. In Proceed-
ings of the 3rd International Conference on Learn-
ing Representations (ICLR 2015).

Philipp Koehn and Rebecca Knowles. 2017. Six Chal-
lenges for Neural Machine Translation. In Proceed-
ings of the First Workshop on Neural Machine Trans-
lation, pages 28–39.

Jared Lichtarge, Chris Alberti, Shankar Kumar, Noam
Shazeer, Niki Parmar, and Simon Tong. 2019. Cor-
pora Generation for Grammatical Error Correction.
In Proceedings of the 2019 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics (NAACL 2019).

Tomoya Mizumoto, Mamoru Komachi, Masaaki Na-
gata, and Yuji Matsumoto. 2011. Mining Revi-
sion Log of Language Learning SNS for Auto-
mated Japanese Error Correction of Second Lan-
guage Learners. In Proceedings of the 5th Interna-
tional Joint Conference on Natural Language Pro-
cessing (IJCNLP 2011), pages 147–155.

Courtney Napoles, Keisuke Sakaguchi, Matt Post, and
Joel Tetreault. 2015. Ground Truth for Grammati-
cal Error Correction Metrics. In Proceedings of the
53rd Annual Meeting of the Association for Compu-
tational Linguistics and the 7th International Joint
Conference on Natural Language Processing (ACL
& IJCNLP 2015), pages 588–593.

Courtney Napoles, Keisuke Sakaguchi, Matt Post, and
Joel Tetreault. 2016. GLEU Without Tuning. arXiv
preprint arXiv:1605.02592.



1242

Courtney Napoles, Keisuke Sakaguchi, and Joel
Tetreault. 2017. JFLEG: A Fluency Corpus and
Benchmark for Grammatical Error Correction. In
Proceedings of the 15th Conference of the European
Chapter of the Association for Computational Lin-
guistics (EACL 2017), pages 229–234.

Hwee Tou Ng, Siew Mei Wu, Ted Briscoe, Christian
Hadiwinoto, Raymond Hendy Susanto, and Christo-
pher Bryant. 2014. The CoNLL-2014 Shared Task
on Grammatical Error Correction. In Proceedings of
the Eighteenth Conference on Computational Natu-
ral Language Learning: Shared Task, pages 1–14.

Myle Ott, Sergey Edunov, Alexei Baevski, Angela
Fan, Sam Gross, Nathan Ng, David Grangier, and
Michael Auli. 2019. fairseq: A Fast, Extensible
Toolkit for Sequence Modeling. In Proceedings of
the 2019 Conference of the North American Chap-
ter of the Association for Computational Linguistics
(NAACL 2019).

Rico Sennrich, Alexandra Birch, Anna Currey, Ulrich
Germann, Barry Haddow, Kenneth Heafield, An-
tonio Valerio Miceli Barone, and Philip Williams.
2017. The university of Edinburgh’s neural MT sys-
tems for WMT17. In Proceedings of the Second
Conference on Machine Translation (WMT 2017),
pages 389–399.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016a. Edinburgh neural machine translation sys-
tems for WMT 16. In Proceedings of the First Con-
ference on Machine Translation: Volume 2, Shared
Task Papers (WMT 2016), pages 371–376.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016b. Improving Neural Machine Translation
Models with Monolingual Data. In Proceedings of
the 54th Annual Meeting of the Association for Com-
putational Linguistics (ACL 2016), pages 86–96.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016c. Neural Machine Translation of Rare Words
with Subword Units. In Proceedings of the 54th An-
nual Meeting of the Association for Computational
Linguistics (ACL 2016), pages 1715–1725.

Noam Shazeer and Mitchell Stern. 2018. Adafactor:
Adaptive Learning Rates with Sublinear Memory
Cost. In Proceedings of the 35th International Con-
ference on Machine Learning (ICML 2018), pages
4603–4611.

Ilya Sutskever, Oriol Vinyals, and Quoc V. Le. 2014.
Sequence to Sequence Learning with Neural Net-
works. In Advances in Neural Information Process-
ing Systems 28 (NIPS 2014), pages 3104–3112.

Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe,
Jon Shlens, and Zbigniew Wojna. 2016. Rethinking
the inception architecture for computer vision. In
2016 IEEE Conference on Computer Vision and Pat-
tern Recognition (CVPR 2016), pages 2818–2826.

Toshikazu Tajiri, Mamoru Komachi, and Yuji Mat-
sumoto. 2012. Tense and Aspect Error Correction
for ESL Learners Using Global Context. In Pro-
ceedings of the 50th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL 2012),
pages 198–202.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention Is All
You Need. In Advances in Neural Information Pro-
cessing Systems 31 (NIPS 2017), pages 5998–6008.

Ziang Xie, Guillaume Genthial, Stanley Xie, Andrew
Ng, and Dan Jurafsky. 2018. Noising and Denois-
ing Natural Language: Diverse Backtranslation for
Grammar Correction. In Proceedings of the 2018
Conference of the North American Chapter of the
Association for Computational Linguistics (NAACL
2018), pages 619–628.

Helen Yannakoudakis, Øistein E. Andersen, Ardeshir
Geranpayeh, Ted Briscoe, and Diane Nicholls. 2018.
Developing an Automated Writing Placement sys-
tem for ESL Learners. Applied Measurement in Ed-
ucation, 31(3):251–267.

Helen Yannakoudakis, Ted Briscoe, and Ben Medlock.
2011. A New Dataset and Method for Automatically
Grading ESOL Texts. In Proceedings of the 49th An-
nual Meeting of the Association for Computational
Linguistics (ACL 2011), pages 180–189.

Wei Zhao, Liang Wang, Kewei Shen, Ruoyu Jia, and
Jingming Liu. 2019. Improving Grammatical Error
Correction via Pre-Training a Copy-Augmented Ar-
chitecture with Unlabeled Data. In Proceedings of
the 2019 Conference of the North American Chap-
ter of the Association for Computational Linguistics
(NAACL 2019).


