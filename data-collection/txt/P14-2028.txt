



















































Improved Iterative Correction for Distant Spelling Errors


Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 168–173,
Baltimore, Maryland, USA, June 23-25 2014. c©2014 Association for Computational Linguistics

Improved Iterative Correction for Distant Spelling Errors

Sergey Gubanov Irina Galinskaya Alexey Baytin
Yandex

16 Leo Tolstoy St., Moscow, 119021 Russia
{esgv,galinskaya,baytin}@yandex-team.ru

Abstract

Noisy channel models, widely used in
modern spellers, cope with typical mis-
spellings, but do not work well with infre-
quent and difficult spelling errors. In this
paper, we have improved the noisy chan-
nel approach by iterative stochastic search
for the best correction. The proposed al-
gorithm allowed us to avoid local minima
problem and improve the F1 measure by
6.6% on distant spelling errors.

1 Introduction

A speller is an essential part of any program as-
sociated with text input and processing — e-mail
system, search engine, browser, form editor etc.
To detect and correct spelling errors, the state of
the art spelling correction systems use the noisy
channel approach (Kernighan et al., 1990; Mays
et al., 1991; Brill and Moore, 2000). Its models
are usually trained on large corpora and provide
high effectiveness in correction of typical errors
(most of which consist of 1-2 wrong characters per
word), but does not work well for complex (multi-
character) and infrequent errors.

In this paper, we improved effectiveness of
the noisy channel for the correction of com-
plex errors. In most cases, these are cogni-
tive errors in loan words (folsvagen → volkswa-
gen), names of drugs (vobemzin → wobenzym),
names of brands (scatcher→ skechers), scientific
terms (heksagidron→ hexahedron) and last names
(Shwartzneger → Schwarzenegger). In all these
cases, the misspelled word contains many errors
and the corresponding error model penalty cannot
be compensated by the LM weight of its proper
form. As a result, either the misspelled word it-
self, or the other (less complicated, more frequent)
misspelling of the same word wins the likelihood
race.

To compensate for this defect of the noisy chan-
nel, the iterative approach (Cucerzan and Brill,
2004) is typically used. The search for the best
variant is repeated several times, what allows cor-
recting rather complex errors, but does not com-
pletely solve the problem of falling into local min-
ima. To overcome this issue we suggest to con-
sider more correction hypotheses. For this pur-
pose we used a method based on the simulated
annealing algorithm. We experimentally demon-
strate that the proposed method outperforms the
baseline noisy channel and iterative spellers.

Many authors employ machine learning to build
rankers that compensate for the drawbacks of the
noisy channel model: (Whitelaw et al., 2009; Gao
et al., 2010). These techniques can be combined
with the proposed method by replacing posterior
probability of single correction in our method with
an estimate obtained via discriminative training
method.

In our work, we focus on isolated word-error
correction (Kukich, 1992), which, in a sense, is a
harder task, than multi-word correction, because
there is no context available for misspelled words.
For experiments we used single-word queries to a
commercial search engine.

2 Baseline speller

2.1 Noisy channel spelling correction
Noisy channel is a probabilistic model that defines
posterior probability P (q0|q1) of q0 being the in-
tended word, given the observed word q1; for such
model, the optimal decision rule µ is the follow-
ing:

µ(q1) = arg max
q0

P (q0|q1);
P (q0|q1) ∝ Pdist(q0 → q1)PLM(q0),

(1)

where PLM is the source (language) model, and
Pdist is the error model. Given P (q0|q1) defined,
to correct the word q1 we could iterate through

168



all ever-observed words, and choose the one, that
maximizes the posterior probability. However,
the practical considerations demand that we do
not rank the whole list of words, but instead
choose between a limited number of hypotheses
h1, ..., hK :

1. Given q1, generate a set of hypotheses
h1, ..., hK , such that

K∑
k=1

P (q0 = hk|q1) ≈ 1; (2)

2. Choose the hypothesis hk that maximizes
P (q0 = hk|q1).

If hypotheses constitute a major part of the poste-
rior probability mass, it is highly unlikely that the
intended word is not among them.

2.2 Baseline speller setup
In baseline speller we use a substring-based error
model Pdist(q0 → q1) described in (Brill and
Moore, 2000), the error model training method
and the hypotheses generator are similar to (Duan
and Hsu, 2011).

For building language (PLM′) and error (Pdist′)
models, we use words collected from the 6-months
query log of a commercial search engine.

Hypotheses generator is based on A* beam
search in a trie of words, and yields K hy-
potheses hk, for which the noisy channel scores
Pdist(hk → q1)PLM(hk) are highest possible.
Hypotheses generator has high K-best recall (see
Section 4.2) — in 91.8% cases the correct hy-
pothesis is found when K = 30, which confirms
the assumption about covering almost all posterior
probability mass (see Equation 2).

3 Improvements for noisy channel
spelling correction

While choosing arg max of the posterior probabil-
ity is an optimal decision rule in theory, in practice
it might not be optimal, due to limitations of the
language and error modeling. For example, vobe-
mzin is corrected to more frequent misspelling
vobenzin (instead of correct form wobenzym) by
the noisy channel, because Pdist(vobemzin →
wobenzym) is too low (see Table 1).

There have been attempts (Cucerzan and Brill,
2004) to apply other rules, which would over-
come limitations of language and error models
with compensating changes described further.

c − logPdist − logPLM
∑

vobenzin 2.289 31.75 34.04
wobenzym 12.52 26.02 38.54

Table 1: Noisy-channel scores for two corrections
of vobemzin

3.1 Iterative correction

Iterative spelling correction with E iterations uses
standard noisy-channel to correct the query q re-
peatedly E times. It is motivated by the assump-
tion, that we are more likely to successfully correct
the query if we take several short steps instead of
one big step (Cucerzan and Brill, 2004) .

Iterative correction is hill climbing in the space
of possible corrections: on each iteration we make
a transition to the best point in the neighbourhood,
i.e. to correction, that has maximal posterior prob-
ability P (c|q). As any local search method, itera-
tive correction is prone to local minima, stopping
before reaching the correct word.

3.2 Stochastic iterative correction

A common method of avoiding local minima in
optimization is the simulated annealing algorithm,
key ideas from which can be adapted for spelling
correction task. In this section we propose such an
adaptation. Consider: we do not always transition
deterministically to the next best correction, but
instead transition randomly to a (potentially any)
correction with transition probability being equal
to the posterior P (ci|ci−1), where ci−1 is the cor-
rection we transition from, ci is the correction we
transition to, and P (·|·) is defined by Equation 1.
Iterative correction then turns into a random walk:
we start at word c0 = q and stop after E ran-
dom steps at some word cE , which becomes our
answer.

To turn random walk into deterministic spelling
correction algorithm, we de-randomize it, using
the following transformation. Described random
walk defines, for each word w, a probability
P (cE = w|q) of ending up in w after starting a
walk from the initial query q. With that probability
defined, our correction algorithm is the following:
given query q, pick c = arg maxcE P (cE |q) as a
correction.

Probability of getting from c0 = q to some
cE = c is a sum, over all possible paths, of prob-
abilities of getting from q to c via specific path

169



q = c0 → c1 → ...→ cE−1 → cE = c:

P (cE |c0) =
∑
c1∈W
...

cE−1∈W

E∏
i=1

P (ci|ci−1), (3)

P (ci|ci−1) = Pdist(ci → ci−1)PLM(ci)
Pobserve(ci−1)

, (4)

where W is the set of all possible words, and
Pobserve(w) is the probability of observing w as
a query in the noisy-channel model.

Example: if we start a random walk from vobe-
mzin and make 3 steps, we most probably will end
up in the correct form wobenzym with P = 0.361.
A few of the most probable random walk paths
are shown in Table 2. Note, that despite the fact
that most probable path does not lead to the cor-
rect word, many other paths to wobenzym sum up
to 0.361, which is greater than probability of any
other word. Also note, that the method works only
because multiple misspellings of the same word
are presented in our model; for related research
see (Choudhury et al., 2007).

c0 → c1 → c2 → c3 P
vobemzin→vobenzin→vobenzin→vobenzin 0.074
vobemzin→vobenzim→wobenzym→wobenzym 0.065
vobemzin→vobenzin→vobenzim→vobenzim 0.052
vobemzin→vobenzim→vobenzim→wobenzym 0.034
vobemzin→wobenzym→wobenzym→wobenzym 0.031
vobemzin→wobenzim→wobenzym→wobenzym 0.028
vobemzin→wobenzyn→wobenzym→wobenzym 0.022

Table 2: Most probable random walk paths start-
ing from c0 = q = vobemzin (the correct form is
in bold).

Also note, that while Equation 3 uses noisy-
channel posteriors, the method can use an arbitrary
discriminative model, for example the one from
(Gao et al., 2010), and benefit from a more accu-
rate posterior estimate.

3.3 Additional heuristics

This section describes some common heuristic im-
provements, that, where possible, were applied
both to the baseline methods and to the proposed
algorithm.

Basic building block of every mentioned algo-
rithm is one-step noisy-channel correction. Each
basic correction proceeds as described in Sec-
tion 2.1: a small number of hypotheses h1, ..., hK
is generated for the query q, hypotheses are scored,

and scores are recomputed into normalized pos-
terior probabilities (see Equation 5). Posterior
probabilities are then either used to pick the best
correction (in baseline and simple iterative cor-
rection), or are accumulated to later compute the
score defined by Equation 3.

score(hi) = Pdist(hi → q)λPLM(hi)

P (hi|q) = score(hi)
/ K∑

j=1

score(hj)
(5)

A standard log-linear weighing trick was ap-
plied to noisy-channel model components, see e.g.
(Whitelaw et al., 2009). λ is the parameter that
controls the trade-off between precision and recall
(see Section 4.2) by emphasizing the importance
of either the high frequency of the correction or its
proximity to the query.

We have also found, that resulting posterior
probabilities emphasize the best hypothesis too
much: best hypothesis gets almost all probability
mass and other hypotheses get none. To compen-
sate for that, posteriors were smoothed by raising
each probability to some power γ < 1 and re-
normalizing them afterward:

Psmooth(hi|q) = P (hi|q)γ
/ K∑

j=1

P (hj |q)γ . (6)

In a sense, γ is like temperature parameter in sim-
ulated annealing – it controls the entropy of the
walk and the final probability distribution. Unlike
in simulated annealing, we fix γ for all iterations
of the algorithm.

Finally, if posterior probability of the best hy-
pothesis was lower than threshold α, then the orig-
inal query q was used as the spell-checker output.
(Posterior is defined by Equation 6 for the baseline
and simple iterative methods and by Equations 3
and 6 for the proposed method). Parameter α con-
trols precision/recall trade-off (as well as λ men-
tioned above).

4 Experiments

4.1 Data
To evaluate the proposed algorithm we have col-
lected two datasets. Both datasets were randomly
sampled from single-word user queries from the
1-week query log of a commercial search en-
gine. We annotated them with the help of pro-
fessional analyst. The difference between datasets

170



is that one of them contained only queries with
low search performance: for which the number
of documents retrieved by the search engine was
less than a fixed threshold (we will address it as
the ”hard” dataset), while the other dataset had
no such restrictions (we will call it ”common”).
Dataset statistics are shown in Table 3.

Dataset Queries Misspelled Avg. − logPdist
Common 2240 224 (10%) 5.98

Hard 2542 1484 (58%) 9.23

Table 3: Evaluation datasets.

Increased average error model score and er-
ror rate of ”common” dataset compared to ”hard”
shows, that we have indeed managed to collect
hard-to-correct queries in the ”hard” dataset.

4.2 Experimental results

First of all, we evaluated the recall of hypothe-
ses generator using K-best recall — the number of
correct spelling corrections for misspelled queries
among K hypotheses divided by the total number
of misspelled queries in the test set. Resulting re-
call with K = 30 is 91.8% on ”hard” and 98.6%
on ”common”.

Next, three spelling correction methods were
tested: noisy channel, iterative correction and our
method (stochastic iterative correction).

For evaluation of spelling correction quality, we
use the following metrics:

• Precision: The number of correct spelling
corrections for misspelled words generated
by the system divided by the total number of
corrections generated by the system;

• Recall: The number of correct spelling cor-
rections for misspelled words generated by
the system divided by the total number of
misspelled words in the test set;

For hypotheses generator, K = 30 was fixed: re-
call of 91.8% was considered big enough. Pre-
cision/recall tradeoff parameters λ and α (they
are applicable to each method, including baseline)
were iterated by the grid (0.2, 0.25, 0.3, ..., 1.5)×
(0, 0.025, 0.05, ..., 1.0), and E (applicable to it-
erative and our method) and γ (just our method)
were iterated by the grid (2, 3, 4, 5, 7, 10) ×
(0.1, 0.15, ...1.0); for each set of parameters, pre-
cision and recall were measured on both datasets.
Pareto frontiers for precision and recall are shown
in Figures 1 and 2.

Figure 1: Precision/recall Pareto frontiers on
”hard” dataset

Figure 2: Precision/recall Pareto frontiers on
”common” dataset

We were not able to reproduce superior perfor-
mance of the iterative method over the noisy chan-
nel, reported by (Cucerzan and Brill, 2004). Sup-
posedly, it is because the iterative method bene-
fits primarily from the sequential application of
split/join operations altering query decomposition
into words; since we are considering only one-
word queries, such decomposition does not matter.

On the ”hard” dataset the performance of the
noisy channel and the iterative methods is infe-
rior to our proposed method, see Figure 1. We
tested all three methods on the ”common” dataset
as well to evaluate if our handling of hard cases
affects the performance of our approach on the
common cases of spelling error. Our method per-
forms well on the common cases as well, as Fig-
ure 2 shows. The performance comparison for
the ”common” dataset shows comparable perfor-
mance for all considered methods.

Noisy channel and iterative methods’ frontiers

171



are considerably inferior to the proposed method
on ”hard” dataset, which means that our method
works better. The results on ”common” dataset
show, that the proposed method doesn’t work
worse than baseline.

Next, we optimized parameters for each method
and each dataset separately to achieve the highest
F1 measure. Results are shown in Tables 4 and 5.
We can see, that, given the proper tuning, our
method can work better on any dataset (but it can-
not achieve the best performance on both datasets
at once). See Tables 4 and 5 for details.

Method λ α γ E F1
Noisy channel 0.6 0.1 - - 55.8

Iterative 0.6 0.1 - 2 55.9
Stochastic iterative 0.9 0.2 0.35 3 62.5

Table 4: Best parameters and F1 on ”hard” dataset

Method λ α γ E F1
Noisy channel 0.75 0.225 - - 62.06

Iterative 0.8 0.275 - 2 63.15
Stochastic iterative 1.2 0.4 0.35 3 63.9

Table 5: Best parameters and F1 on ”common”
dataset

Next, each parameter was separately iterated
(by a coarser grid); initial parameters for each
method were taken from Table 4. Such iteration
serves two purposes: to show the influence of pa-
rameters on algorithm performance, and to show
differences between datasets: in such setup pa-
rameters are virtually tuned using ”hard” dataset
and evaluated using ”common” dataset. Results
are shown in Table 6.

The proposed method is able to successfully
correct distant spelling errors with edit distance of
3 characters (see Table 7).

However, if our method is applied to shorter
and more frequent queries (as opposed to ”hard”
dataset), it tends to suggest frequent words as
false-positive corrections (for example, grid is cor-
rected to creed – Assassin’s Creed is popular video
game). As can be seen in Table 5, in order to fix
that, algorithm parameters need to be tuned more
towards precision.

5 Conclusion and future work

In this paper we introduced the stochastic itera-
tive correction method for spell check corrections.
Our experimental evaluation showed that the pro-
posed method improved the performance of popu-

F1, common F1, hard
N.ch. It. Our N.ch. It. Our

λ = 0.5 45.3 45.9 37.5 54.9 54.8 50.0
0.6 49.9 50.5 41.5 55.8 55.9 56.6
0.7 50.4 50.4 44.1 54.5 55.1 59.6
0.8 52.7 52.7 46.0 52.6 53.0 61.5
0.9 53.5 53.5 49.3 50.3 50.6 62.5
1.0 55.4 55.0 50.9 47.0 47.3 61.8
1.1 53.7 53.4 52.7 44.3 44.6 60.8
1.2 52.5 52.5 53.7 41.9 42.3 58.8
1.3 52.2 52.6 54.6 39.5 39.9 56.6
1.4 51.4 51.8 55.0 36.8 37.3 53.6

α = 0 41.0 41.5 33.0 52.9 53.1 58.3
0.1 49.9 50.6 35.6 55.8 55.9 59.7

0.15 59.4 59.8 43.2 55.8 55.6 61.6
0.2 60.8 61.3 49.4 51.0 51.0 62.5

0.25 54.0 54.0 54.9 46.3 46.3 61.1
0.3 46.3 46.3 57.3 39.2 39.2 58.4
0.4 25.8 25.8 53.9 22.3 22.3 50.3

E = 2 50.6 53.6 55.9 60.4
3 50.6 49.4 55.9 62.5
4 50.6 46.4 55.9 62.1
5 50.6 46.7 55.9 60.1

γ = 0.1 10.1 6.0
0.2 49.4 51.5
0.3 51.4 61.4

0.35 49.4 62.5
0.4 47.5 62.0

0.45 45.8 60.8
0.5 45.2 60.3

Table 6: Per-coordinate iteration of parameters
from Table 4; per-method maximum is shown in
italic, per-dataset in bold

Query Noisy channel Proposed method
akwamarin akvamarin aquamarine
maccartni maccartni mccartney
ariflaim ariflaim oriflame
epika epica replica
grid grid creed

Table 7: Correction examples for the noisy chan-
nel and the proposed method.

lar spelling correction approach – the noisy chan-
nel model – in the correction of difficult spelling
errors. We showed how to eliminate the local min-
ima issue of simulated annealing and proposed a
technique to make our algorithm deterministic.

The experiments conducted on the specialized
datasets have shown that our method significantly
improves the performance of the correction of
hard spelling errors (by 6.6% F1) while maintain-
ing good performance on common spelling errors.

In continuation of the work we are considering
to expand the method to correct errors in multi-
word queries, extend the method to work with dis-
criminative models, and use a query performance
prediction method, which tells for a query whether
our algorithm needs to be applied.

172



References
Eric Brill and Robert C Moore. 2000. An improved er-

ror model for noisy channel spelling correction. In
Proceedings of the 38th Annual Meeting on Associa-
tion for Computational Linguistics, pages 286–293.
Association for Computational Linguistics.

Monojit Choudhury, Markose Thomas, Animesh
Mukherjee, Anupam Basu, and Niloy Ganguly.
2007. How difficult is it to develop a perfect spell-
checker? a cross-linguistic analysis through com-
plex network approach. In Proceedings of the sec-
ond workshop on TextGraphs: Graph-based algo-
rithms for natural language processing, pages 81–
88.

Silviu Cucerzan and Eric Brill. 2004. Spelling correc-
tion as an iterative process that exploits the collec-
tive knowledge of web users. In EMNLP, volume 4,
pages 293–300.

Huizhong Duan and Bo-June Paul Hsu. 2011. On-
line spelling correction for query completion. In
Proceedings of the 20th international conference on
World wide web, pages 117–126. ACM.

Jianfeng Gao, Xiaolong Li, Daniel Micol, Chris Quirk,
and Xu Sun. 2010. A large scale ranker-based sys-
tem for search query spelling correction. In Pro-
ceedings of the 23rd International Conference on
Computational Linguistics, pages 358–366. Associ-
ation for Computational Linguistics.

Mark D Kernighan, Kenneth W Church, and William A
Gale. 1990. A spelling correction program based on
a noisy channel model. In Proceedings of the 13th
conference on Computational linguistics-Volume 2,
pages 205–210. Association for Computational Lin-
guistics.

Karen Kukich. 1992. Techniques for automatically
correcting words in text. ACM Computing Surveys
(CSUR), 24(4):377–439.

Eric Mays, Fred J Damerau, and Robert L Mercer.
1991. Context based spelling correction. Informa-
tion Processing & Management, 27(5):517–522.

Casey Whitelaw, Ben Hutchinson, Grace Y Chung, and
Gerard Ellis. 2009. Using the web for language
independent spellchecking and autocorrection. In
Proceedings of the 2009 Conference on Empirical
Methods in Natural Language Processing: Volume
2-Volume 2, pages 890–899. Association for Com-
putational Linguistics.

173


