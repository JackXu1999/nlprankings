








































Grammar Size and Quantitative Restrictions on Movement

Thomas Graf
Stony Brook University

Stony Brook, NY 11794-4376
mail@thomasgraf.net

Abstract

Recently is has been proved that every Min-
imalist grammar can be converted into a
strongly equivalent single movement normal
form such that every phrase moves at most
once in every derivation. The normal form
conversion greatly simplifies the formalism
and reduces the complexity of movement de-
pendencies, but it also runs the risk of greatly
increasing the size of the grammar. I show
that no such blow-up obtains with linguisti-
cally plausible grammars that respect common
constraints on movement. This establishes not
only the cost-free nature of this normal form
for realistic grammars, but also that the known
restrictions on movement greatly reduce the
range of licit movement configurations rela-
tive to what unconstrained Minimalist gram-
mars are capable of. Moreover, this work
constitutes a first step towards a quantitatively
grounded view of movement.

1 Introduction

One of the defining properties of syntax is that
phrases do not surface in their base position, also
known as the displacement property. For example,
the topicalized phrase in (1a) acts as an object and
thus its base position is to the right of the verb as in
(1b).

(1) a. This guy, John really hates.

b. John really hates this guy.

While displacement phenomena can be analyzed in
numerous ways, movement as a generalization of

Chomskyan transformations is the most commonly
chosen option.

The last sixty years of generative research have
unearthed numerous properties of movement (Ross
1967; Chomsky 1973; Chomsky 1986; Chomsky
2001; Chomsky 2013; Rizzi 1990; Fox and Pesetsky
2005, a.o.), but one of the most central is that move-
ment produces “punctuated paths” (Abels, 2003).
This means that phrases do not immediately move
to their target position but may temporarily occupy
intermediate landing positions on the way there.
The nature of punctuated paths was recently stud-
ied in Graf et al. (2016), using Minimalist grammars
(MGs; Stabler 1997; Stabler 2011a) as a formal
model of syntax. Graf et al. (2016) prove a single
movement normal form (SMNF) theorem for MGs.
This theorem describes an encoding of MGs where
all movement steps of a phrase are triggered by a sin-
gle feature at the final target position. SMNF has the
advantage of reducing the computational complexity
of movement dependencies, making it a particularly
parsimonious encoding of MGs. At the same time,
it comes at the potential cost of a large blow-up in
the size of the grammar. Since parsing and learning
algorithms tend to scale badly with large grammars,
this endangers the viability of SMNF for practical
purposes.

In this paper, I show that such a blow-up is pri-
marily observed with grammars that allow unnatural
movement patterns — in realistic grammars, the set
of licit movement configurations is greatly limited
by locality conditions so that SMNF induces only a
minimal blow-up. This is a welcome result for real-
world applications, but it also points the direction

23
Proceedings of the Society for Computation in Linguistics (SCiL) 2018, pages 23-33.

Salt Lake City, Utah, January 4-7, 2018



towards a novel, quantitative perspective on move-
ment. SMNF can distinguish some natural and un-
natural movement patterns on quantitative grounds,
and it allows us to evaluate constraints on movement
in a more global fashion that considers not only their
effect on individual derivations but the grammar as
a whole.

The paper is laid out as follows: I first give an
intuitive introduction to MGs (2.1), how every MG
can be translated into SMNF, and why this may in-
crease the size of the grammar (2.2). I also explain
in detail why SMNF is not at odds with current syn-
tactic assumptions and what advantages it may pro-
vide on a practical, theoretical, and cognitive level
(2.3). I then discuss what kind of movement con-
figurations may increase the size of an SMNF gram-
mar (3.1), and how such configurations are blocked
by the ban against improper movement (3.2), the
ungrammaticality of superraising (3.3), freezing ef-
fects (3.4), and the wh-island constraint (3.5). This
leaves only a handful of constructions as potentially
problematic, foremost multiple wh-movement and
scrambling (3.6). The relevance of these empirical
phenomena greatly depends on the choice of syntac-
tic analysis, though, so that the blow-up with SMNF
grammars is still likely to be remarkably limited. I
conclude with a brief discussion of the linguistic im-
plications of these findings (3.7).

2 Formal Background

2.1 Minimalist Grammars

MGs are a rigorous formalization of Minimalist syn-
tax (Chomsky, 1995). MGs can be decomposed
into two components: a set of well-formed deriva-
tion trees, and a mapping from those derivation trees
to phrase structure trees. Derivation trees are very
similar to phrase structure trees, except that interior
nodes are labeled Merge or Move and, more impor-
tantly, moving phrases remain in their base position
(Fig. 1). The main role of the mapping to phrase
structure trees thus is to move phrases into their sur-
face position and insert traces in all intermediate
landing sites.

While this general picture is largely sufficient for
this paper, SMNF requires a deeper understanding of
the MG feature calculus and how it controls move-
ment. Every MG is a finite set Lex (the lexicon) of

Move

Merge

C Move

Merge

T Merge

who slept

CP

who C′

C TP

t T′

T VP

t slept

T+wh+C−

V+nom+T−

D−nom−wh− D+V−

nom

wh

Figure 1: MG derivation tree (left) and corresponding phrase
structure tree (right); for the sake of exposition, movement is

indicated by arrows

lexical items (LIs), each one of which is annotated
with finitely many features. Features come in two
polarities, + and −, and they trigger either Merge
operations or Move operations. This paper adapts
the terminology and notation shown in Tab. 1. An

Merge Move
+ selector F+ licensor f+

− category F− licensee f−
Table 1: Terminology and notation for MG feature calculus

MG derivation proceeds by combining LIs until all
features have been checked (except the final C−-
feature). Two features f◦ and g• (◦, • ∈ {+,−})
can be checked iff f = g and ◦ 6= •. In addition, the
features on LIs have a linear order that encodes the
sequence in which they must be checked.

Consider the derivation tree in Fig. 1. It repre-
sents a derivation that starts with the LIs who ::
D− nom− wh− and slept :: D+ V−. Their first
unchecked features are, respectively, D− and D+.
Since they have the same feature name but opposite
polarity, they can be checked and trigger an appli-
cation of Merge. The Merge node in the derivation
tree is merely a record of this application, the actual
result is only seen in the phrase structure tree where
who and slept are combined into a VP.

After feature checking, the remaining feature
strings for who and slept are nom− wh− and V−.
Since who only has licensee features left, it has
to wait for matching licensor features to be in-
troduced into the derivation. Until then, who is
not available for further operations. But slept still
has a category feature V−. This feature can be

24



checked by adding a new LI, the unpronounced T-
head T :: V+nom+T−. Once again this licenses an
application of Merge with a corresponding structure-
building step in the phrase structure tree.

All features of slept have now been checked,
whereas the T-head still carries the feature string
nom+T−. Recall that the remaining feature se-
quence of who is nom−wh−. So who has been wait-
ing for a licensor feature nom+ to check it licensee
feature nom−, and this licensor feature is exactly
what the T-head provides at this point. Since nom−

and nom+ are Move features rather than Merge
features, their checking triggers an application of
Move. Just as with Merge, the derivation tree only
contains a record of the Move operation rather than
its actual result. In the phrase structure tree, on the
other hand, who has now been moved from its base
position to the specifier of TP. After move, who
only has the licensee feature wh− left, and the T-
head only has its category feature T−. At this point,
the unpronounced C-head C :: T+wh+C− enters
the derivation. The reader is invited to verify for
himself that the feature calculus enforces two more
feature checking operations that license one instance
each of Merge and Move, at which point the only re-
maining feature is C− and the derivation can end.

The feature calculus employed in the example
above is one of two core mechanisms of all MG
derivations. A derivation tree over lexicon Lex is
well-formed only if all its LIs are members of Lex
and the features on those LIs can be checked in the
manner described above. In addition, the deriva-
tion tree must also satisfy the Shortest Move Con-
straint (SMC): at no point during the derivation are
there two distinct LIs with the same licensee feature
as their first unchecked feature. Figure 2 shows an
example of an SMC-violation. Note that the SMC
makes Move a deterministic operation — the feature
calculus completely determines which phrase moves
where.

The determinism of Move means that the map-
ping from derivation trees to phrase structure trees
is also deterministic. Hence derivation trees already
contain all structural information and are MG’s pri-
mary data structure for syntax (Kobele et al., 2007;
Graf, 2012). The set of well-formed derivation trees,
in turn, can be computed in a fully automatic fashion
for any given lexicon Lex (and therefore any given

Merge

C Move

Merge

T Move

Merge

John Merge

likes Mary

T+wh+C−

V+nom+T−

D+D+case+V−

D−case−

D−case−

case

case

Figure 2: This derivation tree violates the SMC because the
case− features on the subject and the object are both active once

the subject has been merged.

MG). In line with this well-established insight, I will
also use derivation trees rather than phrase structure
trees throughout this paper.

2.2 Single Movement Normal Form

The split between derivation trees and phrase struc-
ture trees makes it possible to disentangle movement
steps and the feature checking operations that trigger
them. In particular, a single feature checking opera-
tion can be taken to license multiple movement steps
in the phrase structure tree.

This idea was used by Kobele (2006) to solve
long-standing problems with successive cyclic
movement. Consider a sentence like (2).

(2) [CP Who does Bill think [CP that John thinks
[CP Mary thinks . . . [CP that Sue likes.] . . . ]]]

Minimalist syntax posits that the wh-phrase who
starts out as the object of likes and then moves
through Spec,CP of each embedded clause until it fi-
nally reaches its final landing site in Spec,CP of the
matrix clause (Chomsky, 1973; McCloskey, 2000;
Abels, 2003). This analysis has been criticized be-
cause it requires every embedded C-head to carry
the feature wh+, yet only the matrix clause takes
the form of an interrogative. MGs, however, face
a much more severe issue: every intermediate land-
ing site requires an extra wh− to be present on who,
but this is impossible because an LI can only have
finitely many features whereas the number of inter-
mediate landing sites is assumed to be unbounded.

25



Kobele (2006) addresses both problems by push-
ing successive cyclic movement out of the feature-
controlled derivation trees into the mapping to
derivation trees. Under this analysis, who carries
a single wh− feature, which is checked by a wh+

feature on the C-head of the matrix clause. The em-
bedded C-heads do not carry any wh+ features at
all. They are landing sites for the wh-phrase not
because of some feature checking mechanism, but
rather because they occur along the movement path
of the wh-phrase (Fig. 3).

Move

Merge

does Move

Merge

T Merge

Bill Merge

think Merge

that Move

Merge

T Merge

Sue Merge

likes who

CP

whow C′

does TP

Billb T′

T VP

tb V′

think CP

tw C′

that TP

Sues T′

T VP

ts V′

likes tw

wh+

nom+

nom+

nom−

nom−

wh−

wh

nom

nom

Figure 3: Intermediate landing sites do not need a feature trig-
ger and are instead inserted by the mapping from derivation

trees to derived trees. For greater clarity, I indicate only move-

ment features and I highlight the trace that does not directly

correspond to any feature-triggered movement operation.

Graf et al. (2016) take this approach and gener-
alize it to a single movement normal form theorem.
An MG is in SMNF iff there is no LI in Lex with
more than one licensee feature. They prove that for
every MG G there is an MG G′ in SMNF such that
G and G′ generate the same phrase structure tree
language modulo intermediate landing sites. In fact,
G′ can even be coupled with a modified mapping
to phrase structure trees that correctly inserts all in-

termediate landing sites, so that G and G′ are fully
equivalent with respect to the tree languages they
generate.

The idea behind SMNF is very simple. As for
successive cyclic movement, one deletes all feature
triggers for intermediate movement from the deriva-
tion. Thus the derivation tree in Fig. 1 becomes the
one in Fig. 4.

Move

Merge

C Merge

T Merge

who slept

T+wh+C−

V+T−

D−wh− D+V−

wh

Figure 4: Every phrase moves at most once in an SMNF deriva-
tion. Intermediate landing sites can still be inserted by a modi-

fied mapping to phrase structure trees.

The SMNF-conversion becomes more compli-
cated, however, if the removal of licensee features
would induce an SMC violation. This occurs when-
ever the derivation contains n LIs (n ≥ 2) that have
the same final licensee feature f− and whose move-
ment paths overlap at some point in the derivation.
In these cases, the only solution is to split f− into
multiple variants f−1 , f

−
2 , . . . , f

−
m (2 ≤ m ≤ n); see

Fig. 5 for an abstract example of the relevant config-
uration.

Move

Move

Move

Merge

c Merge

b Merge

d a

Move

Move

Merge

c Merge

b Merge

d a
D+f+g+f+C−

B−f−

A+B+D−

D+f+f+C−

B−f−2

A+B+D−

A−g−f−

A−f−1

f

f2
g

f
f1

Figure 5: When the derivation tree to the left is brought into
SMNF (right), the feature f− must be split into f−1 and f

−
2 to

avoid SMC violations.

Graf et al. (2016) provide an algorithm that keeps

26



m as small as possible, but the blow-up in Lex may
nonetheless be large: for every occurrence of f− on
some LI, m new variants must be added to Lex that
only differ in the subscript on f−. The size of Lex
greatly increases as a result. Given an MG G with
lexicon Lex , the lexicon size of its SMNF counter-
part is linearly bounded by

∑

l∈Lex
µγ(l)+δ(l)

where µ is the number of distinct licensee features
used by the SMNF grammar, γ(l) is the number of
licensor features of l, and δ(l) is 1 if l contains a
licensee feature and 0 otherwise.1

A noticeable blow-up can be observed even with
small toy grammars that generate only finite lan-
guages:

(3)

T :: M+M+M+T− C :: T+C−

a :: M−a−f− C :: C+a+f+C−

b :: M−b−f− C :: C+b+f+C−

d :: M−d−f− C :: C+d+f+C−

Conversion to single movement normal form
splits each one of a, b, and c into three variants with
the feature string M− f−i , 1 ≤ i ≤ 3. It also replaces
the three C-heads with licensor features by C-heads
with feature string C+ f+i C

−. The total size of Lex
thus grows from 8 to 14.

The worst-case scenario does not seem to obtain
with realistic grammars, however. Multiple LIs in
the same derivation rarely have the same f− as their
last feature, and in cases where they do their move-
ment paths do not overlap. Section 3 looks at sev-
eral cases where attempts to construct such configu-
rations are thwarted by independent constraints on

1Strictly speaking SMNF induces two kinds of lexical blow-
up. The first is due to the refinement of movement features
described above. But as described in Graf et al. (2016), the fi-
nal step of the translation also involves the construction of a
bottom-up tree automaton, which is then compiled directly into
the category features of the grammar using the algorithm from
Graf (2011) and Graf (2013). This final step can induce a blow-
up that is polynominal in the size of the automaton. However,
one can also incorporate the automaton into the grammar as a
constraint definable in monadic second-order logic or simply
run it in parallel to the grammar, avoiding the polynomial blow-
up of the compilation step. The refinement of movement fea-
tures, on the other hand, is unavoidable for SMNF MGs. Hence
I limit myself to that specific kind of blow-up in this paper.

movement. First, however, a few conceptual re-
marks on the linguistic plausibility of SMNF are in
order.

2.3 Linguistic Plausibility of SMNF
It may seem that SMNF is at best of little relevance
to linguistics, and at worst in direct conflict with
some of the field’s core findings. Numerous empir-
ical arguments have been offered in support of in-
termediate movement and thus, presumably, against
SMNF grammars. However, SMNF does not pre-
clude the existence of intermediate movement, only
that such movement is triggered by separate fea-
tures. To the best of my knowledge there are no
widely accepted tests to determine whether certain
movement steps are feature-driven, so the status of
SMNF is not diminished by current empirical obser-
vations.

At the same time, SMNF has several advantages
that are of linguistic interest. First of all, the deriva-
tion trees of SMNF MG are very similar to depen-
dency graphs, which might be leveraged to develop
new learning algorithms for MGs. As dependency
parsing has made major inroads in NLP, SMNF is
also a first step towards corpus-based MG research.

On a more abstract level, Graf and Heinz (2015)
show that SMNF lowers the complexity of Mini-
malist derivation trees so that they fit into a tree
analogue of the subregular string class TSL (Heinz
et al., 2011). This class has been found to play
a major role in phonology (McMullin, 2016) and
morphology (Aksënova et al., 2016; Graf, 2017).
SMNF MGs as a model of syntax thus display an un-
expected computational parallel to these other lan-
guage domains, a parallel that disappears with stan-
dard MGs where intermediate movement is located
in the derivation trees rather than the mapping to
phrase structure trees.

There is tentative evidence that SMNF may in
fact enjoy some degree of cognitive reality. If one
subscribes to the idea that the grammar is not dis-
tinct from the parser but both describe the same
object at different levels of granularity (cf. Marr
1982 and Neeleman and van de Koot 2010), then
one cannot rule out that SMNF MGs are simply yet
another level of description, situated between the
highly compact grammars with intermediate move-
ment and whatever optimized encoding is used in the

27



parser. It is interesting in this connection that inter-
mediate movement is handled very differently from
final movement in MG parsers (Stabler, 2011b; Sta-
bler, 2013); whereas final movement directly effects
the parser’s predictions about the structure of the
tree and the order in which it explores these predic-
tions, intermediate movement is just a feature check-
ing step for book keeping purposes. Moreover, re-
cent attempts to use MGs as a model of human sen-
tence processing also see an improvement in empiri-
cal coverage when intermediate movement steps are
ignored (see e.g. Graf et al. 2017 and Ch. 5 of Zhang
2017). Similarly, Kotek (2017) presents an analysis
of wh-intervention effects where at least some in-
stances of intermediate movement must be absent in
the syntactic representation.

In sum, SMNF is a useful encoding format of
MGs for various practical purposes, and it can also
facilitate linguistic research. There are no conclu-
sive empirical arguments at this point to dismiss
SMNF at the level of derivation trees, so it is an op-
tion worth entertaining. Future work may discover a
number of robust arguments for an SMNF-like level
of representation, but for the purposes of this paper it
suffices that SMNF MGs are linguistically defensi-
ble while sporting a few computational advantages.

The major downside of SMNF MGs, on the other
hand, is the risk of a blow-up in the number of
LIs and hence grammar size. The performance of
parsers and learning algorithms depends heavily on
grammar size in real-world tasks (because average
string length is very low in natural language). Con-
sequently, large SMNF MGs would probably lead to
worse performance than their counterparts with in-
termediate movement. In the next section, however,
I argue that large blow-ups are unlikely to arise with
realistic grammars because the movement configu-
rations that would cause such a blow-up are disal-
lowed anyways. There is no logical reason as to why
languages should be this way, which raises the in-
triguing possibility that constraints on movement are
at least partially motivated by a desire to keep gram-
mars small, compact, and redundancy-free. The pa-
per does not provide a conclusive answer to this
larger issue and focuses instead on establishing the
low risk of lexical blow-up with SMNF MGs. But in
doing so it provides a glimpse of how these linguis-
tic questions could be addressed in follow-up work.

3 Constraints and Grammar Size

3.1 General Observations
As discussed in Sec. 2.2, SMNF increases the size
of the lexicon whenever removal of intermediate
landing sites would induce SMC violations in some
derivations. In this case, a licensee feature has to
be split into multiple subscripted variants. This still
does not necessarily induce a blow-up, though.

Suppose that the toy grammar in (3) only had a
single C-head C :: T+a+f+b+f+d+f+C−. In con-
trast to (3) this now fixes the surface order of a, b,
and c with respect to each other. Then the corre-
sponding SMNF grammar would just have a C-head
C :: T+f+1 f

+
2 f

+
3 C
−, and the LIs a, b, and c could be

replaced by a :: M−f−1 , b :: M
−f−2 , and c :: M

−f−3 .
Since the relative movement configurations of a, b,
and c are fixed across all derivations, the feature re-
finement does not cause a multiplication of LIs.

Therefore the configurations where SMNF neces-
sarily causes a blow-up involve multiple LIs that

1. have the same final licensee feature, and

2. have overlapping movement paths in some
derivations, and

3. are flexible in the sense that the arrangement of
the overlapping movement paths varies across
derivations.

Let us briefly reflect on what kind of movement pat-
terns in natural languages could possibly fit this de-
scription.

If one assumes that the different case positions
for A-movement are associated with different fea-
tures (nom, acc, and so on), and that every clause
provides exactly one position for each type of case
(Spec,TP, Spec,vP, and so on), then the first two con-
ditions above cannot be met unless an LI A-moves to
a case position outside its own clause. But this kind
of movement is known to be heavily constrained, so
overlapping paths are hard to construct.

With A′-movement, movement across clause
boundaries is much less restricted, as it witnessed by
unbounded wh-movement and topicalization. How-
ever, A′-movement is still subject to various princi-
ples that penalize overlapping movement paths. This
again makes it difficult to design well-formed case
of A′-movement that are problematic with SMNF.

28



The next few sections give concrete examples of
how the desired movement configurations violate
various well-known constraints on movement.

3.2 Improper movement

One option to create overlapping A-movement paths
for LIs l and l′ is to have l′ first A′-move over the A-
mover l, followed by l′ undergoing the same kind
of A-movement as l. But this requires l′ to A-move
from an A′-position, which is forbidden by the Ban
on Improper Movement, illustrated in (4).

(4) a. John wonders whowh Billnom tnom
saw twh . (Proper movement)

b. * whowh,nom wonders tnom Billnom
tnom saw twh . (Improper movement)

Merge

C Move

Merge

T Merge

John Merge

wonders Move

Merge

C Move

Merge

T Merge

Bill Merge

saw who

Merge

C Move

Merge

T Merge

wonders Move

Merge

C Move

Merge

T Merge

Bill Merge

saw who

nom+

wh+

nom+

nom−

nom−

wh−

nom+

wh+

nom+

nom−

wh−nom−

wh

nom

nom

wh

nom

nom

Figure 6: Since standard MGs do not impose any movement
constraints besides the SMC, one can construct derivations like

the one to the right that violates the ban on improper movement.

A standard MG with intermediate movement has
no problem generating both the licit (4a) and the il-
licit (4b), as is shown in Fig. 6. Suppose for the sake
of argument that (4b) were actually well-formed in
English, so that the grammar would actually have to
allow movement configurations like in Fig. 6. Then
in the corresponding SMNF MG, the only licensee

feature of who would be nom−, triggering direct
movement from the object position to the subject
position of the matrix clause. But since Bill also has
nom− as its last licensee feature and the two phrases
have overlapping paths, this would trigger an SMC
violation. Hence the SMNF MG must refine nom−

into two features nom−1 and nom
−
2 .

(5) a. Tnom wonders Tnom Billnom saw
whonom (SMC violation)

b. Tnom2 wonders Tnom1 Billnom1 saw
whonom2 (SMNF derivation tree)

c. whonom2 wonders Billnom1 tnom1 saw
tnom2 . (SMNF phrase structure tree)

Once nom− has been replaced by nom−1 and nom
−
2 ,

some LIs need to be duplicated. Every LI with
nom+ now is split into two variants as it may serve
as the landing site for a nom−1 mover (standard sub-
jects) or a nom−2 mover (improperly moving wh-
phrases). In addition, verbs like wonder that select
a subject and a CP object now also have a variant
that only selects an object CP. This is the result of
the improper mover assuming the subject role for the
clause containing wonder.

For the actual movers, however, duplication can
be avoided. While the feature nom− must be re-
fined into nom−1 and nom

−
2 , each type of licensee

feature occurs with a specific type of phrase. The li-
censee feature nom−2 is limited to improper movers,
which are wh-phrases. The licensee feature nom−1 ,
on the other hand, occurs on DP that does not move
improperly to a subject position. Note that the latter
cannot be wh-movers: I) if a DP wh-moves before
undergoing subject movement, it violates the ban
against improper movement, contrary to our initial
assumption; II) if a DP wh-moves after undergoing
subject movement, then its final feature is not nom−

so that neither nom−1 nor nom
−
2 would presented on

the DP’s counterpart in an SMNF MG.
All these points jointly imply that nom− is re-

placed by nom−1 for non-wh subjects and by nom
−
2

for wh-phrases whose final landing site is a sub-
ject position. Overall, then, the lexical blow-up is
not as large as one would initially suspect. But
the size of an SMNF grammar still increases by
2 × |T | + 2 × |V |, where |T | is the number of LIs
that carry nom+ and |V | indicates the number of LIs
that select both a subject and a CP object.

29



3.3 Superraising
Another option to A-move a DP out of a finite clause
is superraising, which looks very similar to improper
movement from the perspective of SMNF MGs.

Prototypical cases of superraising are irrelevant
for SMNF because they only involve a single mover.

(6) a. John seems [TP t to [VP t like Mary.]]
b. * John seems [TP t likes [VP Mary.]]

However, analogous cases with two movers can be
imagined.

(7) a. It seems Bill believes John likes
Mary.

b. * John seems [CP Bill believes t likes
Mary.] (Superraising)

Merge

C Move

Merge

T Merge

seems Move

Merge

C Move

Merge

T Merge

Bill Merge

believes Merge

C Move

Merge

T Merge

John Merge

likes Mary

nom+

f+

nom+

nom+

nom−

nom−f−nom−

nom

f

nom

nom

Figure 7: Standard MGs also allow for superraising configura-
tions, the derivations of which look very similar to the improper

movement derivations.

Again an MG analysis of (7b) is readily avail-
able. Due to the SMC, John cannot directly undergo

nom-movement to the matrix clause because Bill is
also undergoing nom-movement. Instead, some fea-
ture f− first moves John over Bill into Spec,CP of
the highest embedded clause, from where John then
moves on to the matrix subject position via nom−.
The role of f− is almost identical to wh− in the im-
proper movement case in Fig .6, except that f− has
no independent motivation beyond avoiding an SMC
violation.

In a SMNF grammar, John would only possess
the licensee feature nom−. But Bill carries the same
feature, so that once again nom− would have to be
split into multiple features. As before, though, we
can tie specific variants of nom− to specific LIs:
nom−1 is chosen for normal subject movers, whereas
nom−2 is for superraising subject movers, identified
by their peculiar feature string nom−f−nom−. We
also preserve the usual split into nom+1 and nom

+
2

for LIs that carry nom+, so that the SMNF-induced
blow-up is 2× |T |.

However, banning superraising configurations not
only avoids this size increase, but shrinks the size
of the lexicon even in comparison to the original
MG. Where the original MG contained the LIs
John :: D−nom− and John :: D−nom−f−nom−,
the SMNF MG contains John :: D−nom−1 and
John :: D−nom−2 , but the SMNF MG without su-
perraising only needs John :: D−nom−. In other
words, banning superraising cuts the number of sub-
ject movers listed in the lexicon in half.

3.4 Freezing Effects
One more attempt at using A-movement to in-
duce lexical blow-up with SMNF centers around A-
moving a phrase out of another A-moving phrase.

(8) a. It seems your comment about John
annoys Sue.

b. * John seems your comment about t an-
noys Sue. (Freezing effect)

Here your comment about John undergoes nom-
movement before John nom-moves to the matrix
subject position (presumably preceded by some kind
of f -movement to avoid an SMC violation). The un-
grammaticality of such configurations is known as
freezing effects, but as far as the SMNF conversion
is concerned the logic works exactly as for super-
raising (and hence improper movement).

30



That said, freezing effects are more general in that
they also pertain to A′-movement as in the example
below.

(9) * Who don’t you know [which pictures of
t] Mary bought. (Freezing effect)

Given standard Minimalist assumptions the sentence
above would be generated by which pictures of
who moving from the object position to Spec,CP,
at which point who undergoes wh-movement to
Spec,CP of the matrix clause. For MGs, the need
to avoid an SMC violation would complicate the
derivation somewhat in that who first f -moves to
Spec,CP and then wh-moves to the next higher spec-
ifier. Nonetheless we would once again see SMNF
induce a split for wh-movers into wh−1 and wh

−
2 ,

with one for normal wh-movement and one for wh-
movement out of a freezing configuration. As for
superraising, then, a SMNF MG that obeys freezing
effects not only avoids a blow-up in grammar size
but even sees a decrease compared to standard MGs.

3.5 Wh-Islands

Freezing effects make it impossible to create over-
lapping wh-movement paths by extracting a wh-
mover from a wh-mover. But even if the wh-movers
are independent of each other, overlapping move-
ment paths are difficult to produce, due to the wh-
island constraint. Consider first the simple paradigm
below.

(10) a. Whatwh did John say Mary gave twh
to Bill?

b. * Whatwh0 did John say whowh1 Mary
gave twh0 to twh1 ? (Wh-island
violation)

As before, sentences like (10b) would require refine-
ment of the licensee and licensor features and thus
increase grammar size. But in contrast to the previ-
ous constructions, wh-island violations easily allow
for much more elaborate patterns that require even
more indices. With each index, the SMNF grammar
would gain more and more LIs.

(11) a. * Whatwh0 did Bill think whichwh1
man twh1 says whowh1 Mary gave
twh0 to twh1 ?

b. * Whatwh0 did Sue claim whowh1 Bill
thinks whichwh2 man twh2 says Mary
gave twh0 to twh1 ?

3.6 Potential Cases of Blow-Up

The list of examples here is not exhaustive, but a
wider sampling of the literature still confirms the
general tendency that potential sources of lexical
blow-up are blocked for independent reasons. One
notable exception is the availability of superraising
in some languages like Standard Arabic, but it is un-
clear whether this involves multiple movers of the
same type (Ura, 2007).

Besides that, there is one more class of construc-
tions that seem to be problematic. Like the toy gram-
mar in (3), they involve configurations where many
movers are drawn to the same target position. This is
the case for multiple wh-movement, quantifier rais-
ing under certain movement-based analyses (May
1977; May 1985), and scrambling. However, all of
them are already known to be problematic for stan-
dard MGs anyways, and alternative analyses have
been proposed at least for the former two (Gärtner
and Michaelis, 2010). With these analyses, SMNF
is entirely unproblematic. Scrambling, on the other
hand, is known to differ from other movement types
in several respects and is also computationally chal-
lenging (Becker et al., 1996; Joshi et al., 2000)).
Therefore a movement-based account may not be
the best choice (see also Frey and Gärtner 2002).
Overall, then, the few empirical cases that are prob-
lematic with SMNF MGs may not be adequately an-
alyzed in terms of standard movement anyways.

Of course this does not guarantee that a wide-
coverage MG can be safely translated into SMNF
without a significant increase in grammar size. The
constructions surveyed for this paper are notewor-
thy in that they only looked at movement with a
clear function — wh-movement and case movement.
These features are distributed in a principled man-
ner and are usually tied to specific functional heads.
But MGs, just like the Minimalist literature they
are modeled after, also posit more abstract features
like f , g, h whose only purpose is to produce the
observed surface order. These features were com-
pletely ignored in this paper because it seems un-
likely that manual analysis can reveal much about
them. Instead, it seems more promising to run sim-

31



ulations where realistic MGs are automatically con-
verted to SMNF. While such realistic MGs are cur-
rently being worked on (Torr, 2017), they are still in
a highly preliminary stage. Hopefully some simula-
tions will be feasible in the near future. If these fea-
tures should turn out to be problematic for SMNF,
this might suggest that there is a real difference be-
tween “functionally grounded” kinds of movement
and the more stipulative word-order movement.

3.7 Linguistic Evaluation

The central claim of this paper is that SMNF is rel-
atively safe for realistic grammars because most of
the configurations that might induce a large blow-
up in grammar size are ungrammatical anyways. It
is tempting to couple this descriptive observation
with a more speculative linguistic proposal: con-
straints on movement are (at least partially) moti-
vated by the desire to keep grammars small and
compact. This would be similar to a minimum-
description-length approach and would provide a
third-factor explanation (Chomsky, 2005) that could
tie together seemingly unrelated phenomena such as
freezing effects, wh-islands, superiority conditions,
and the ban against improper movement. As we
have already seen, however, these constraints are
usually more general than necessary for grammar
succinctness. Improper movement is a problem for
SMNF only if the A-movement is of a type that was
crossed by the A′-movement, superraising is fine un-
less one subject-raises over another subject, and so
on. Hence one must not be too eager, at this point,
to posit a causal link between grammar compactness
and movement constraints. That said, the possibility
is certainly intriguing, and the SMNF-perspective
will be useful in exploring the idea to its fullest.

4 Conclusion

Single movement normal form is a useful encoding
of MGs that greatly simplifies mathematical proofs
and has potential applications in the design of new
parsers and learning algorithms for MGs. While it
comes with the risk of greatly increasing the size of
the grammar, this seems to be less of an issue with
natural languages because movement has to obey
numerous constraints that greatly limit the set of
possible movement configurations. In particular, it

is very difficult for two lexical items to have overlap-
ping movement paths while also sharing final land-
ing sites of the same type. From an applied perspec-
tive, this result increases the confidence in SMNF as
a useful MG encoding. But there is also linguistic
potential: studying movement configurations with
respect to their effect on grammar size may unearth
entirely new generalizations about natural language.

References
Klaus Abels. 2003. Successive Cyclicity, Anti-locality,

and Adposition Stranding. Ph.D. thesis, University of
Connecticut.

Alëna Aksënova, Thomas Graf, and Sedigheh Moradi.
2016. Morphotactics as tier-based strictly local depen-
dencies. In Proceedings of the 14th SIGMORPHON
Workshop on Computational Research in Phonetics,
Phonology, and Morphology, pages 121–130.

Tilman Becker, Owen Rambow, and Michael Niv. 1996.
The derivational generative power of formal systems,
or scrambling is beyond LCFRS. Technical Report
IRCS 92-38, Institute for Research in Cognitive Sci-
ence, University of Pennsylvania.

Noam Chomsky. 1973. Conditions on transformations.
In Stephen Anderson and Paul Kiparsky, editors, A
Festschrift for Morris Halle, pages 232–286. Holt,
Rinehart, and Winston, New York.

Noam Chomsky. 1986. Barriers. MIT Press, Cam-
bridge, MA.

Noam Chomsky. 1995. The Minimalist Program. MIT
Press, Cambridge, MA.

Noam Chomsky. 2001. Derivation by phase. In
Michael J. Kenstowicz, editor, Ken Hale: A Life in
Language, pages 1–52. MIT Press, Cambridge, MA.

Noam Chomsky. 2005. Three factors in language design.
Linguistic Inquiry, 36(1):1–22.

Noam Chomsky. 2013. Problems of projection. Lingua,
130:33–49.

Danny Fox and David Pesetsky. 2005. Cyclic lineariza-
tion of syntactic structure. Theoretical Linguistics,
31:1–45.

Werner Frey and Hans-Martin Gärtner. 2002. On the
treatment of scrambling and adjunction in Minimalist
grammars. In Gerhard Jäger, Paola Monachesi, Gerald
Penn, and Shuly Wintner, editors, Proceedings of the
Conference on Formal Grammar, pages 41–52.

Hans-Martin Gärtner and Jens Michaelis. 2010. On
the treatment of multiple-wh-interrogatives in Mini-
malist grammars. In Thomas Hanneforth and Gisbert
Fanselow, editors, Language and Logos, pages 339–
366. Akademie Verlag, Berlin.

32



Thomas Graf and Jeffrey Heinz. 2015. Commonality
in disparity: The computational view of syntax and
phonology. Slides of a talk given at GLOW 2015,
April 18, Paris, France.

Thomas Graf, Alëna Aksënova, and Aniello De Santo.
2016. A single movement normal form for Minimal-
ist grammars. In Annie Foret, Glyn Morrill, Rein-
hard Muskens, Rainer Osswald, and Sylvain Pogo-
dalla, editors, Formal Grammar : 20th and 21st Inter-
national Conferences, FG 2015, Barcelona, Spain, Au-
gust 2015, Revised Selected Papers. FG 2016, Bozen,
Italy, August 2016, pages 200–215, Berlin, Heidel-
berg. Springer.

Thomas Graf, James Monette, and Chong Zhang. 2017.
Relative clauses as a benchmark for Minimalist pars-
ing. Journal of Language Modelling, 5:57–106.

Thomas Graf. 2011. Closure properties of Minimalist
derivation tree languages. In Sylvain Pogodalla and
Jean-Philippe Prost, editors, LACL 2011, volume 6736
of Lecture Notes in Artificial Intelligence, pages 96–
111, Heidelberg. Springer.

Thomas Graf. 2012. Locality and the complexity of Min-
imalist derivation tree languages. In Philippe de Groot
and Mark-Jan Nederhof, editors, Formal Grammar
2010/2011, volume 7395 of Lecture Notes in Com-
puter Science, pages 208–227, Heidelberg. Springer.

Thomas Graf. 2013. Local and Transderivational Con-
straints in Syntax and Semantics. Ph.D. thesis, UCLA.

Thomas Graf. 2017. Graph transductions and typologi-
cal gaps in morphological paradigms. In Proceedings
of the 15th Meeting on the Mathematics of Language,
pages 114–126.

Jeffrey Heinz, Chetan Rawal, and Herbert G. Tanner.
2011. Tier-based strictly local constraints in phonol-
ogy. In Proceedings of the 49th Annual Meeting of
the Association for Computational Linguistics, pages
58–64.

Aravind Joshi, Tilman Becker, and Owen Rambow.
2000. Complexity of scrambling: A new twist to the
competence-performance distinction. In Anne Abeill
and Owen Rambow, editors, Tree Adjoining Gram-
mars: Formalisms, Linguistic Analysis and Process-
ing, pages 167–181. CSLI, Stanford.

Gregory M. Kobele, Christian Retoré, and Sylvain Sal-
vati. 2007. An automata-theoretic approach to Mini-
malism. In James Rogers and Stephan Kepser, editors,
Model Theoretic Syntax at 10, pages 71–80.

Gregory M. Kobele. 2006. Generating Copies: An In-
vestigation into Structural Identity in Language and
Grammar. Ph.D. thesis, UCLA.

Hadas Kotek. 2017. Movement and alternatives don’t
mix: A new look at wh-intervention effects. Handout
for an invited talk presented on October 20 at Stony
Brook University, Stony Brook, NY.

David Marr. 1982. Vision: A Computational Investiga-
tion into the Human Representation and Processing of
Visual Information. Freeman, New York. Reprinted in
2010 by MIT Press.

Robert May. 1977. The Grammar of Quantification.
Ph.D. thesis, MIT.

Robert May. 1985. Logical Form: Its Structure and
Derivation. MIT Press, Cambridge, MA.

James McCloskey. 2000. Quantifier float and wh-
movement in an Irish English. Linguistic Inquiry,
31:57–84.

Kevin McMullin. 2016. Tier-Based Locality in Long-
Distance Phonotactics: Learnability and Typology.
Ph.D. thesis, Uniersity of British Columbia.

Ad Neeleman and Hans van de Koot. 2010. Theoreti-
cal validity and psychological reality of grammatical
code. In Martin Everaert, Tom Lentz, Hannah de Mul-
der, Oystein Nilsen, and Arjen Zondervan, editors,
The Linguistic Enterprise: From Knowledge of Lan-
guage to Knowledge of Linguistics, pages 183–212.
John Benjamins, Amsterdam.

Luigi Rizzi. 1990. Relativized Minimality. MIT Press,
Cambridge, MA.

John R. Ross. 1967. Constraints on Variables in Syntax.
Ph.D. thesis, MIT.

Edward P. Stabler. 1997. Derivational Minimalism. In
Christian Retoré, editor, Logical Aspects of Compu-
tational Linguistics, volume 1328 of Lecture Notes in
Computer Science, pages 68–95. Springer, Berlin.

Edward P. Stabler. 2011a. Computational perspectives
on Minimalism. In Cedric Boeckx, editor, Oxford
Handbook of Linguistic Minimalism, pages 617–643.
Oxford University Press, Oxford.

Edward P. Stabler. 2011b. Top-down recognizers for
MCFGs and MGs. In Proceedings of the 2011 Work-
shop on Cognitive Modeling and Computational Lin-
guistics. to appear.

Edward P. Stabler. 2013. Two models of minimalist, in-
cremental syntactic analysis. Topics in Cognitive Sci-
ence, 5:611–633.

John Torr. 2017. Autobank: a semi-automatic anno-
tation tool for developing deep Minimalist grammar
treebanks. In Proceedings of the Demonstrations at
the 15th Conference of the European Chapter of the
Association for Computational Linguistics, pages 81–
86.

Hiroyuki Ura. 2007. Returning to superraising. Depart-
mental Bulletin Paper, 56:59–74.

Chong Zhang. 2017. Stacked Relatives: Their Structure,
Processing, and Computation. Ph.D. thesis, Stony
Brook University.

33


