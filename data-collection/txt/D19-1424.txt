



















































Visualizing and Understanding the Effectiveness of BERT


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 4143–4152,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

4143

Visualizing and Understanding the Effectiveness of BERT

Yaru Hao†∗, Li Dong‡, Furu Wei‡, Ke Xu†
†Beihang University
‡Microsoft Research

{haoyaru@,kexu@nlsde.}buaa.edu.cn
{lidong1,fuwei}@microsoft.com

Abstract
Language model pre-training, such as BERT,
has achieved remarkable results in many NLP
tasks. However, it is unclear why the pre-
training-then-fine-tuning paradigm can im-
prove performance and generalization capabil-
ity across different tasks. In this paper, we pro-
pose to visualize loss landscapes and optimiza-
tion trajectories of fine-tuning BERT on spe-
cific datasets. First, we find that pre-training
reaches a good initial point across downstream
tasks, which leads to wider optima and eas-
ier optimization compared with training from
scratch. We also demonstrate that the fine-
tuning procedure is robust to overfitting, even
though BERT is highly over-parameterized for
downstream tasks. Second, the visualization
results indicate that fine-tuning BERT tends to
generalize better because of the flat and wide
optima, and the consistency between the train-
ing loss surface and the generalization error
surface. Third, the lower layers of BERT are
more invariant during fine-tuning, which sug-
gests that the layers that are close to input learn
more transferable representations of language.

1 Introduction

Language model pre-training has achieved strong
performance in many NLP tasks (Peters et al.,
2018; Howard and Ruder, 2018a; Radford et al.,
2018; Devlin et al., 2018; Baevski et al., 2019;
Dong et al., 2019). A neural encoder is trained
on a large text corpus by using language model-
ing objectives. Then the pre-trained model either
is used to extract vector representations for input,
or is fine-tuned on the specific datasets.

Recent work (Tenney et al., 2019b; Liu et al.,
2019a; Goldberg, 2019; Tenney et al., 2019a)
has shown that the pre-trained models can en-
code syntactic and semantic information of lan-
guage. However, it is unclear why pre-training

∗Contribution during internship at Microsoft Research.

is effective on downstream tasks in terms of both
trainability and generalization capability. In this
work, we take BERT (Devlin et al., 2018) as an
example to understand the effectiveness of pre-
training. We visualize the loss landscapes and
the optimization procedure of fine-tuning on spe-
cific datasets in three ways. First, we compute the
one-dimensional (1D) loss curve, so that we can
inspect the difference between fine-tuning BERT
and training from scratch. Second, we visualize
the two-dimensional (2D) loss surface, which pro-
vides more information about loss landscapes than
1D curves. Third, we project the high-dimensional
optimization trajectory of fine-tuning to the ob-
tained 2D loss surface, which demonstrate the
learning properties in an intuitive way.

The main findings are summarized as follows.
First, visualization results indicate that BERT pre-
training reaches a good initial point across down-
stream tasks, which leads to wider optima on the
2D loss landscape compared with random initial-
ization. Moreover, the visualization of optimiza-
tion trajectories shows that pre-training results in
easier optimization and faster convergence. We
also demonstrate that the fine-tuning procedure is
robust to overfitting. Second, loss landscapes of
fine-tuning partially explain the good generaliza-
tion capability of BERT. Specifically, pre-training
obtains more flat and wider optima, which indi-
cates the pre-trained model tends to generalize bet-
ter on unseen data (Chaudhari et al., 2017; Li et al.,
2018; Izmailov et al., 2018). Additionally, we
find that the training loss surface correlates well
with the generalization error. Third, we demon-
strate that the lower (i.e., close to input) layers
of BERT are more invariant across tasks than the
higher layers, which suggests that the lower layers
learn transferable representations of language. We
verify the point by visualizing the loss landscape
with respect to different groups of layers.



4144

2 Background: BERT

We use BERT (Bidirectional Encoder Represen-
tations from Transformers; Devlin et al. 2018) as
an example of pre-trained language models in our
experiments. BERT is pre-trained on a large cor-
pus by using the masked language modeling and
next-sentence prediction objectives. Then we can
add task-specific layers to the BERT model, and
fine-tune all the parameters according to the down-
stream tasks.

BERT employs a Transformer (Vaswani et al.,
2017) network to encode contextual information,
which contains multi-layer self-attention blocks.
Given the embeddings {xi}|x|i=1 of input text, we
concatenate them into H0 = [x1, · · · ,x|x|]. Then,
an L-layer Transformer encodes the input: Hl =
Transformer blockl(H

l−1), where l = 1, · · · , L,
and HL = [hL1 , · · · ,hL|x|]. We use the hidden vec-
tor hLi as the contextualized representation of the
input token xi. For more implementation details,
we refer readers to Vaswani et al. (2017).

3 Methodology

We employ three visualization methods to under-
stand why fine-tuning the pre-trained BERT model
can achieve better performance on downstream
tasks compared with training from scratch. We
plot both one-dimensional and two-dimensional
loss landscapes of BERT on the specific datasets.
Besides, we project the optimization trajectories
of the fine-tuning procedure to the loss surface.
The visualization algorithms can also be used for
the models that are trained from random initial-
ization, so that we can compare the difference be-
tween two learning paradigm.

3.1 One-dimensional Loss Curve

Let θ0 denote the initialized parameters. For fine-
tuning BERT, θ0 represents the the pre-trained pa-
rameters. For training from scratch, θ0 repre-
sents the randomly initialized parameters. After
fine-tuning, the model parameters are updated to
θ1. The one-dimensional (1D) loss curve aims to
quantify the loss values along the optimization di-
rection (i.e., from θ0 to θ1).

The loss curve is plotted by linear interpola-
tion between θ0 and θ1 (Goodfellow and Vinyals,
2015). The curve function f(α) is defined as:

f(α) = J (θ0 + αδ1) (1)

where α is a scalar parameter, δ1 = θ1 − θ0 is the
optimization direction, and J (θ) is the loss func-
tion under the model parameters θ. In our experi-
ments, we set the range of α to [−4, 4] and sample
40 points for each axis. Note that we only consider
the parameters of BERT in θ0 and θ1, so δ1 only
indicates the updates of the original BERT param-
eters. The effect of the added task-specific layers
is eliminated by keeping them fixed to the learned
values.

3.2 Two-dimensional Loss Surface
The one-dimensional loss curve can be extended
to the two-dimensional (2D) loss surface (Li et al.,
2018). Similar as in Equation (1), we need to de-
fine two directions (δ1 and δ2) as axes to plot the
loss surface:

f(α, β) = J (θ0 + αδ1 + βδ2) (2)

where α, β are scalar values, J (·) is the loss func-
tion, and θ0 represents the initialized parameters.
Similar to Section 3.1, we are only interested in
the parameter space of the BERT encoder, with-
out taking into consideration task-specific layers.
One of the axes is the optimization direction δ1 =
θ1 − θ0 on the target dataset, which is defined in
the same way as in Equation (1). We compute
the other axis direction via δ2 = θ2 − θ0, where
θ2 represents the fine-tuned parameters on another
dataset. So the other axis is the optimization di-
rection of fine-tuning on another dataset. Even
though the other dataset is randomly chosen, ex-
perimental results confirm that the optimization
directions δ1, δ2 are divergent and orthogonal to
each other because of the high-dimensional pa-
rameter space.

The direction vectors δ1 and δ2 are projected
onto a two-dimensional plane. It is beneficial to
ensure the scale equivalence of two axes for visu-
alization purposes. Similar to the filter normal-
ization approach introduced in (Li et al., 2018),
we address this issue by normalizing two direc-
tion vectors to the same norm. We re-scale δ2
to ‖δ1‖‖δ2‖δ2, where ‖·‖ denotes the Euclidean norm.
We set the range of both α and β to [−4, 4] and
sample 40 points for each axis.

3.3 Optimization Trajectory
Our goal is to project the optimization trajectory of
the fine-tuning procedure onto the 2D loss surface
obtained in Section 3.2. Let {(dαi , d

β
i )}Ti=1 de-

note the projected optimization trajectory, where



4145

(dαi , d
β
i ) is a projected point in the loss surface,

and i = 1, · · · , T represents the i-th epoch of fine-
tuning.

As shown in Equation (2), we have known the
optimization direction δ1 = θ1 − θ0 on the tar-
get dataset. We can compute the deviation degrees
between the optimization direction and the trajec-
tory to visualize the projection results. Let θi de-
note the BERT parameters at the i-th epoch, and
δi = θi − θ0 denote the optimization direction at
the i-th epoch. The point (dαi , d

β
i ) of the trajectory

is computed via:

vcos =
δi × δ1
‖δi‖ · ‖δ1‖

(3)

dαi = vcos

∥∥δi∥∥
‖δ1‖

=
δi × δ1
‖δ1‖2

(4)

dβi =

√
(
‖δi‖
‖δ1‖

)2 − (dαi )2 (5)

where × denotes the cross product of two vectors,
and ‖·‖ denotes the Euclidean norm. To be spe-
cific, we first compute cosine similarity between
δi and δ1, which indicates the angle between the
current optimization direction and the final opti-
mization direction. Then we get the projection
values dαi and d

β
i by computing the deviation de-

grees between the optimization direction δi and
the axes.

4 Experimental Setup

We conduct experiments on four datasets:
Multi-genre Natural Language Inference Corpus
(MNLI; Williams et al. 2018), Recognizing
Textual Entailment (RTE; Dagan et al. 2006;
Bar-Haim et al. 2006; Giampiccolo et al. 2007;
Bentivogli et al. 2009), Stanford Sentiment Tree-
bank (SST-2; Socher et al. 2013), and Microsoft
Research Paraphrase Corpus (MRPC; Dolan and
Brockett 2005). We use the same data split as
in (Wang et al., 2019). The accuracy metric is
used for evaluation.

We employ the pre-trained BERT-large model
in our experiments. The cased version of tokenizer
is used. We follow the settings and the hyper-
parameters suggested in (Devlin et al., 2018). The
Adam (Kingma and Ba, 2015) optimizer is used
for fine-tuning. The number of fine-tuning epochs
is selected from {3, 4, 5}. For RTE and MRPC,
we set the batch size to 32, and the learning rate to

1e-5. For MNLI and SST-2, the batch size is 64,
and the learning rate is 3e-5.

For the setting of training from scratch, we
use the same network architecture as BERT, and
randomly initialize the model parameters. Most
hyper-parameters are kept the same. The num-
ber of training epochs is larger than fine-tuning
BERT, because training from scratch requires
more epochs to converge. The number of epochs
is set to 8 for SST-2, and 16 for the other datasets,
which is validated on the development set.

5 Pre-training Gets a Good Initial Point
Across Downstream Tasks

Fine-tuning BERT on the usually performs signif-
icantly better than training the same network with
random initialization, especially when the data
size is small. Results indicate that language model
pre-training objectives learn good initialization for
downstream tasks. In this section, we inspect the
benefits of using BERT as the initial point from
three aspects.

5.1 Pre-training Leads to Wider Optima

As described in Section 3.2, we plot 2D training
loss surfaces on four datasets in Figure 1. The fig-
ures in the top row are the models trained from
scratch, while the others in bottom are based on
fine-tuning BERT. The start point indicates the
training loss of the initialized model, while the
end point indicates the final training loss. We
observe that the optima obtained by fine-tuning
BERT are much wider than training from scratch.
A wide optimum of fine-tuning BERT implicates
that the small perturbations of the model param-
eters cannot hurt the final performance seriously,
while a thin optimum is more sensitive to these
subtle changes. Moreover, in Section 6.1, we fur-
ther discuss about the width of the optima can con-
tribute to the generalization capability.

As shown in Figure 1, the fine-tuning path from
the start point to the end point on the loss land-
scape is more smooth than training from scratch.
In other words, the training loss of fine-tuning
BERT tends to monotonously decrease along the
optimization direction, which eases optimization
and accelerates training convergence. In contrast,
the path from random initial point to the end point
is more rough, which requires a more carefully
tweaked optimizer to obtain reasonable perfor-
mance.



4146

MNLI RTE SST-2 MRPC

Tr
ai

ni
ng

fr
om

sc
ra

tc
h

4
3

2
1

0
1

2
3

4

432101234

01
2
3

start
point

end 
point

4 3 2 1 0 1 2 3
44

3
2
1

0
1
2
3
4
0
1
2
3
4

start
point

end 
point

4
3

2
1

0
1

2
3

4

4
3

2
1
0

1
2

3
4

0
2
4
6
8

start
pointend 

point
4
3
2
1

0
1
2
3
44 3 2 1 0 1 2 3 40

1
2
3

start
point

end 
point

Fi
ne

-t
un

in
g

B
E

R
T

4
3

2
1

0
1

2
3

4

432101234

0
1
2
3

start
pointend 

point

4 3 2 1 0 1 2 3
44

3
2
1

0
1
2
3
4
0
1
2

start
point

end 
point

4
3

2
1

0
1

2
3

4

4
3

2
1
0

1
2

3
4

0
1
2
3

start
point

end 
point

4
3
2
1

0
1
2
3

4
4 3 2 1 0 1 2 3 4

0.0
0.5
1.0
1.5

start
point end point

0 1 2 3 0 1 2 3 0 1 2 3 0.0 0.5 1.0 1.5

Figure 1: Training loss surfaces of training from scratch (top) and fine-tuning BERT (bottom) on four datasets.
We annotate the start point (i.e., initialized model) and the end point (i.e., estimated model) in the loss surfaces.
Pre-training leads to wider optima, and eases optimization compared with random initialization.

0 2 4 6 8 10 12 14 16 18 20
Epochs

0.0

0.2

0.4

0.6

0.8

Tr
ai

ni
ng

 L
os

s

MNLI fine-tune
MNLI scratch
RTE fine-tune
RTE scratch
MRPC fine-tune
MRPC scratch
SST-2 fine-tune
SST-2 scratch

Figure 2: Training loss of fine-tuning BERT and train-
ing from scratch on four datasets.

5.2 Pre-training Eases Optimization on
Downstream Tasks

We fine-tune BERT and train the same network
from scratch on four datasets. The learning curves
are shown in Figure 2. We find that training from
scratch requires more iterations to converge on the
datasets, while pre-training-then-fine-tuning con-
verges faster in terms of training loss. We also
notice that the final loss of training from scratch
tends to be higher than fine-tuning BERT, even if
it undergoes more epochs. On the RTE dataset,
training the model from scratch has a hard time
decreasing the loss in the first few epochs.

In order to visualize the dynamic convergence
process, we plot the optimization trajectories us-

ing the method described in Section 3.3. As shown
in Figure 3, for training from scratch, the op-
timization directions of the first few epochs are
divergent from the final optimization direction.
Moreover, the loss landscape from the initial point
to the end point is more rough than fine-tuning
BERT, we can see that the trajectory of training
from scratch on the MRPC dataset crosses an ob-
stacle to reach the end point.

Compared with training from scratch, fine-
tuning BERT finds the optimization direction in a
more straightforward way. The optimization pro-
cess also converges faster. Besides, the fine-tuning
path is unimpeded along the optimization direc-
tion. In addition, because of the wider optima near
the initial point, fine-tuning BERT tends to reach
the expected optimal region even if it optimizes
along the direction of the first epoch.

5.3 Pre-training-then-fine-tuning is Robust to
Overfitting

The BERT-large model has 345M parame-
ters, which is over-parameterized for the target
datasets. However, experimental results show
fine-tuning BERT is robust to over-fitting, i.e., the
generalization error (namely, the classification er-
ror rate on the development set) does not dramat-
ically increase for more training epochs, despite
the huge number of model parameters.



4147

MRPC MNLI

Tr
ai

ni
ng

fr
om

sc
ra

tc
h

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

Fi
ne

-t
un

in
g

B
E

R
T

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

0.0 0.5 1.0 0 1 2

Figure 3: The optimization trajectories on the train-
ing loss surfaces of training from scratch (top) and
fine-tuning BERT (bottom) on the MRPC and MNLI
datasets. Darker color represents smaller training loss.

We use the MRPC dataset as a case study, be-
cause its data size is relatively small, which is
prone to overfitting if we train the model from
scratch. As shown in Figure 4, we plot the op-
timization trajectory of fine-tuning on the gen-
eralization error surface. We first fine-tune the
BERT model for five epochs as suggested in (De-
vlin et al., 2018). Then we continue fine-tuning for
another twenty epochs, which still obtains com-
parable performance with the first five epochs.
Figure 4 shows that even though we fine-tune
the BERT model for twenty more epochs, the
final estimation is not far away from its origi-
nal optimum. Moreover, the optimum area is
wide enough to avoid the model from jumping
out the region with good generalization capabil-
ity, which explains why the pre-training-then-fine-
tuning paradigm is robust to overfitting.

6 Pre-training Helps to Generalize Better

Although training from scratch can achieve com-
parable training losses as fine-tuning BERT, the
model with random initialization usually has poor
performance on the unseen data. In this sec-
tion, we use visualization techniques to under-
stand why the model obtained by pre-training-
then-fine-tuning tends to have better generaliza-
tion capability.

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

M
RP

C

0.09

0.18

0.27

0.36

0.45

0.54

0.63

Figure 4: The optimization trajectory of fine-tuning
5 + 20 epochs on MRPC. The two-dimensional gen-
eralization error surface is presented. We find that pre-
training-then-fine-tuning is robust to overfitting.

4 3 2 1 0 1 2 3 4
0

1

2

3
SS

T-
2

4 3 2 1 0 1 2 3 4

fine-tune
scratch

4 3 2 1 0 1 2 3 4
0

1

2

M
RP

C

4 3 2 1 0 1 2 3 4

fine-tune
scratch

4 3 2 1 0 1 2 3 4
0

1

2

3

M
NL

I

4 3 2 1 0 1 2 3 4

fine-tune
scratch

4 3 2 1 0 1 2 3 4
0

1

2

3

4

RT
E

4 3 2 10 1 2 3 4

fine-tune
scratch

Figure 5: One-dimensional training loss curves. Dash
lines represent training from scratch, and solid lines
represent fine-tuning BERT. The scales of axes are nor-
malized for comparison. The optima of training from
scratch are sharper than fine-tuning BERT.

6.1 Wide and Flat Optima Lead to Better
Generalization

Previous work (Hochreiter and Schmidhuber,
1997; Keskar et al., 2016; Li et al., 2018) shows
that the flatness of a local optimum correlates with
the generalization capability, i.e., more flat optima
lead to better generalization. The finding inspires
us to inspect the loss landscapes of BERT fine-
tuning, so that we can understand the generaliza-
tion capability from the perspective of the flatness
of optima.

Section 5.1 presents that the optima obtained
by fine-tuning BERT are wider than training
from scratch. As shown in Figure 5, we fur-
ther plot one-dimensional training loss curves of



4148

both fine-tuning BERT and training from scratch,
which represents the transverse section of two-
dimensional loss surface along the optimization
direction. We normalize the scale of axes for flat-
ness comparison as suggested in (Li et al., 2018).
Figure 5 shows that the optima of fine-tuning
BERT are more flat, while training from scratch
obtains more sharp optima. The results indicate
that pre-training-then-fine-tuning tends to gener-
alize better on unseen data.

6.2 Consistency Between Training Loss
Surface and Generalization Error
Surface

To further understand the effects of geometry of
loss functions to the generalization capability, we
make comparisons between the training loss sur-
faces and the generalization error surfaces on dif-
ferent datasets. The classification error rate on the
development set is used as an indicator of the gen-
eralization capability.

As shown in Figure 6, we find the end points
of fine-tuning BERT fall into the wide areas with
smaller generalization error. The results show
that the generalization error surfaces are consistent
with the corresponding training loss surfaces on
the datasets, i.e., smaller training loss tends to de-
crease the error on the development set. Moreover,
the fine-tuned BERT models tend to stay approxi-
mately optimal under subtle perturbations. The vi-
sualization results also indicate that it is preferred
to converge to wider and more flat local optima,
as the training loss surface and the generaliza-
tion error surface are shifted with respect to each
other (Izmailov et al., 2018). In contrast, training
from scratch obtains thinner optimum areas and
poorer generalization than fine-tuning BERT, es-
pecially on the datasets with relatively small data
size (such as MRPC, and RTE). Intuitively, the
thin and sharp optima on the training loss surfaces
are hard to be migrated to the generalization sur-
faces.

For training from scratch, it is not surprising
that on larger datasets (such as MNLI, and SST-
2) the generalization error surfaces are more con-
sistent with the training loss surfaces. The results
suggest that training the model from scratch usu-
ally requires more training examples to generalize
better compared with fine-tuning BERT.

7 Lower Layers of BERT are More
Invariant and Transferable

The BERT-large model has 24 layers. Different
layers could have learned different granularities or
perspectives of language during the pre-training
procedure. For example, Tenney et al. (2019a)
observe that most local syntactic phenomena are
encoded in lower layers while higher layers cap-
ture more complex semantics. They also show
that most examples can be classified correctly in
the first few layers. From above, we conjecture
that lower layers of BERT are more invariant and
transferable across tasks.

We divide the layers of the BERT-large model
into three groups: low layers (0th-7th layer), mid-
dle layers (8th-15th layer), and high layers (16th-
23rd layer). As shown in Figure 7, we plot the
two-dimensional loss surfaces with respect to dif-
ferent groups of layers (i.e., parameter subspace
instead of all parameters) around the fine-tuned
point. To be specific, we modify the loss sur-
face function in Section 3.2 to f(α, β) = J (θ1 +
αδG1 + βδ

G
2 ), where θ1 represents the fine-tuned

parameters, G ∈ {low layers, middle layers, high
layers}, and the optimization direction of the layer
group is used as the axis. On the visualized loss
landscapes, f(0, 0) corresponds to the loss value
at the fine-tuned point. Besides, f(−1, 0) corre-
sponds to the loss value with the corresponding
layer group rollbacked to its original values in the
pre-trained BERT model.

Figure 7 shows that the loss surface with respect
to lower layers has the wider local optimum along
the optimization direction. The results demon-
strate that rollbacking parameters of lower layers
to their original values (the star-shaped points in
Figure 7) does not dramatically hurt the model
performance. In contrast, rollbacking high layers
makes the model fall into the region with high loss.
This phenomenon indicates that the optimization
of high layers is critical to fine-tuning whereas
lower layers are more invariant and transferable
across tasks.

In order to make a further verification, we roll-
back different layer groups of the fine-tuned model
to the parameters of the original pre-trained BERT
model. The accuracy results on the development
set are presented in Table 1. Similar to Figure 7,
the generalization capability does not dramatically
decrease after rollbacking low layers or middle
layers. Rollbacking low layers (0th-7th layer)



4149

MNLI RTE SST-2 MRPC

Tr
ai

ni
ng

fr
om

sc
ra

tc
h

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

Fi
ne

-t
un

in
g

B
E

R
T

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

0.25 0.50 0.75 0.2 0.4 0.6 0.2 0.4 0.6 0.1 0.3 0.5

Figure 6: Two-dimensional generalization error surfaces of training from scratch (top) and fine-tuning BERT
(bottom). The dot-shaped point and the star-shaped point indicate the generalization errors at the beginning and at
the end of the training procedure, respectively.

Dataset BERT
Layer Rollback

0-7 8-15 16-23

MNLI 86.54 86.73 (+0.19) 84.71 (-1.83) 32.85 (-53.88)
RTE 75.45 73.29 (-2.16) 70.04 (-5.41) 47.29 (-28.16)
SST-2 94.04 93.69 (-0.35) 93.12 (-0.92) 59.29 (-34.75)
MRPC 90.20 87.99 (-2.21) 80.15 (-10.05) 78.17 (-12.03)

Table 1: Accuracy on the development sets. The second column represents the fine-tuned BERT models on the
specific datasets. The last column represents the fine-tuned models with rollbacking different groups of layers.

even improves the generalization capability on the
MNLI dataset. By contrast, rollbacking high lay-
ers hurts the model performance. Evaluation re-
sults suggest that low layers that are close to in-
put learn more transferable representations of lan-
guage, which makes them more invariant across
tasks. Moreover, high layers seem to play a more
important role in learning task-specific informa-
tion during fine-tuning.

8 Related Work

Pre-trained contextualized word representations
learned from language modeling objectives, such
as CoVe (McCann et al., 2017), ELMo (Peters
et al., 2018), ULMFit (Howard and Ruder, 2018b),
GPT (Radford et al., 2018, 2019), and BERT (De-
vlin et al., 2018), have shown strong performance
on a variety of natural language processing tasks.

Recent work of inspecting the effectiveness of
the pre-trained models (Linzen et al., 2016; Kun-
coro et al., 2018; Tenney et al., 2019b; Liu et al.,
2019a) focuses on analyzing the syntactic and se-
mantic properties. Tenney et al. (2019b) and Liu
et al. (2019a) suggest that pre-training helps the
models to encode much syntactic information
and many transferable features through evaluating
models on several probing tasks. Goldberg (2019)
assesses the syntactic abilities of BERT and draws
the similar conclusions. Our work explores the ef-
fectiveness of pre-training from another angle. We
propose to visualize the loss landscapes and opti-
mization trajectories of the BERT fine-tuning pro-
cedure. The visualization results help us to un-
derstand the benefits of pre-training in a more in-
tuitive way. More importantly, the geometry of
loss landscapes partially explains why fine-tuning



4150

Low layers (0-7) Middle layers (8-15) High layers (16-23)

M
N

L
I

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

0.0

0.5

1.0

1.5

2.0
M

R
PC

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

4 3 2 1 0 1 2 3 44
3
2
1
0
1
2
3
4

0.0

0.5

1.0

Figure 7: Layer-wise training loss surfaces on the MNLI dataset (top) and the MRPC dataset (bottom). The dot-
shaped point represents the fine-tuned model. The star-shaped point represents the model with rollbacking different
layer groups. Low layers correspond to the 0th-7th layers of BERT, middle layers correspond to the 8th-15th layers,
and high layers correspond to the 16th-23rd layers.

BERT can achieve better generalization capability
than training from scratch.

Liu et al. (2019a) find that different layers of
BERT exhibit different transferability. Peters et al.
(2019) show that the classification tasks build up
information mainly in the intermediate and last
layers of BERT. Tenney et al. (2019a) observe that
low layers of BERT encode more local syntax,
while high layers capture more complex seman-
tics. Zhang et al. (2019) also show that not all
layers of a deep neural model have equal contribu-
tions to model performance. We draw the similar
conclusion by visualizing layer-wise loss surface
of BERT on downstream tasks. Besides, we find
that low layers of BERT are more invariant and
transferable across datasets.

In the computer vision community, many efforts
have been made to visualize the loss function, and
figure out how the geometry of a loss function af-
fects the generalization (Goodfellow and Vinyals,
2015; Im et al., 2016; Li et al., 2018). Hochre-
iter and Schmidhuber (1997) define the flatness as
the size of the connected region around a mini-
mum. Keskar et al. (2016) characterize the defini-
tion of flatness using eigenvalues of the Hessian,
and conclude that small-batch training converges
to flat minima, which leads to good generaliza-
tion. Li et al. (2018) propose a filter normaliza-
tion method to reduce the influence of parameter

scale, and show that the sharpness of a minimum
correlates well with generalization capability. The
assumption is also used to design optimization al-
gorithms (Chaudhari et al., 2017; Izmailov et al.,
2018), which aims at finding broader optima with
better generalization than standard SGD.

9 Conclusion

We visualize the loss landscapes and optimiza-
tion trajectories of the BERT fine-tuning proce-
dure, which aims at inspecting the effectiveness
of language model pre-training. We find that
pre-training leads to wider optima on the loss
landscape, and eases optimization compared with
training from scratch. Moreover, we give evidence
that the pre-training-then-fine-tuning paradigm is
robust to overfitting. We also demonstrate the con-
sistency between the training loss surfaces and the
generalization error surfaces, which explains why
pre-training improves the generalization capabil-
ity. In addition, we find that low layers of the
BERT model are more invariant and transferable
across tasks.

All our experiments and conclusions were
derived from BERT fine-tuning. A further
understanding of how multi-task training with
BERT (Liu et al., 2019b) improves fine-tuning,
and how it affects the geometry of loss surfaces are
worthy of exploration, which we leave to future



4151

work. Moreover, the results motivate us to develop
fine-tuning algorithms that converge to wider and
more flat optima, which would lead to better gen-
eralization on unseen data. In addition, we would
like to apply the proposed methods for other pre-
trained models.

Acknowledgements

The work was partially supported by National Nat-
ural Science Foundation of China (NSFC) [Grant
No. 61421003].

References
Alexei Baevski, Sergey Edunov, Yinhan Liu, Luke

Zettlemoyer, and Michael Auli. 2019. Cloze-
driven pretraining of self-attention networks. arXiv
preprint arXiv:1903.07785.

Roy Bar-Haim, Ido Dagan, Bill Dolan, Lisa Ferro, and
Danilo Giampiccolo. 2006. The second PASCAL
recognising textual entailment challenge. In Pro-
ceedings of the Second PASCAL Challenges Work-
shop on Recognising Textual Entailment.

Luisa Bentivogli, Ido Dagan, Hoa Trang Dang, Danilo
Giampiccolo, and Bernardo Magnini. 2009. The
fifth PASCAL recognizing textual entailment chal-
lenge. In In Proc Text Analysis Conference (TAC09.

Pratik Chaudhari, Anna Choromanska, Stefano Soatto,
Yann LeCun, Carlo Baldassi, Christian Borgs, Jen-
nifer Chayes, Levent Sagun, and Riccardo Zecchina.
2017. Entropy-SGD: Biasing gradient descent into
wide valleys.

Ido Dagan, Oren Glickman, and Bernardo Magnini.
2006. The pascal recognising textual entailment
challenge. In Proceedings of the First Inter-
national Conference on Machine Learning Chal-
lenges: Evaluating Predictive Uncertainty Visual
Object Classification, and Recognizing Textual En-
tailment, MLCW’05, pages 177–190, Berlin, Hei-
delberg. Springer-Verlag.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. BERT: pre-training of
deep bidirectional transformers for language under-
standing. CoRR, abs/1810.04805.

William B Dolan and Chris Brockett. 2005. Automati-
cally constructing a corpus of sentential paraphrases.
In Proceedings of the Third International Workshop
on Paraphrasing (IWP2005).

Li Dong, Nan Yang, Wenhui Wang, Furu Wei,
Xiaodong Liu, Yu Wang, Jianfeng Gao, Ming
Zhou, and Hsiao-Wuen Hon. 2019. Unified
language model pre-training for natural language
understanding and generation. arXiv preprint
arXiv:1905.03197.

Danilo Giampiccolo, Bernardo Magnini, Ido Dagan,
and Bill Dolan. 2007. The third PASCAL recogniz-
ing textual entailment challenge. In Proceedings of
the ACL-PASCAL Workshop on Textual Entailment
and Paraphrasing, pages 1–9, Prague. Association
for Computational Linguistics.

Yoav Goldberg. 2019. Assessing BERT’s syntactic
abilities. CoRR, abs/1901.05287.

Ian J. Goodfellow and Oriol Vinyals. 2015. Qual-
itatively characterizing neural network optimiza-
tion problems. In 3rd International Conference on
Learning Representations, ICLR 2015, San Diego,
CA, USA, May 7-9, 2015, Conference Track Pro-
ceedings.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Flat
minima. Neural Comput., 9(1):1–42.

Jeremy Howard and Sebastian Ruder. 2018a. Universal
language model fine-tuning for text classification.
In Proceedings of the 56th Annual Meeting of the
Association for Computational Linguistics (Volume
1: Long Papers), pages 328–339, Melbourne, Aus-
tralia. Association for Computational Linguistics.

Jeremy Howard and Sebastian Ruder. 2018b. Universal
language model fine-tuning for text classification. In
ACL. Association for Computational Linguistics.

Daniel Jiwoong Im, Michael Tao, and Kristin Branson.
2016. An empirical analysis of deep network loss
surfaces. CoRR, abs/1612.04010.

Pavel Izmailov, Dmitrii Podoprikhin, Timur Garipov,
Dmitry Vetrov, and Andrew Gordon Wilson. 2018.
Averaging weights leads to wider optima and better
generalization. arXiv preprint arXiv:1803.05407.

Nitish Shirish Keskar, Dheevatsa Mudigere, Jorge No-
cedal, Mikhail Smelyanskiy, and Ping Tak Peter
Tang. 2016. On large-batch training for deep learn-
ing: Generalization gap and sharp minima. CoRR,
abs/1609.04836.

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In 3rd Interna-
tional Conference on Learning Representations, San
Diego, CA.

Adhiguna Kuncoro, Chris Dyer, John Hale, Dani Yo-
gatama, Stephen Clark, and Phil Blunsom. 2018.
LSTMs can learn syntax-sensitive dependencies
well, but modeling structure makes them better. In
Proceedings of the 56th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers), pages 1426–1436, Melbourne, Aus-
tralia. Association for Computational Linguistics.

Hao Li, Zheng Xu, Gavin Taylor, Christoph Studer, and
Tom Goldstein. 2018. Visualizing the loss landscape
of neural nets. In Neural Information Processing
Systems.

https://arxiv.org/pdf/1611.01838.pdf
https://arxiv.org/pdf/1611.01838.pdf
https://doi.org/10.1007/11736790_9
https://doi.org/10.1007/11736790_9
https://www.aclweb.org/anthology/W07-1401
https://www.aclweb.org/anthology/W07-1401
http://arxiv.org/abs/1901.05287
http://arxiv.org/abs/1901.05287
http://arxiv.org/abs/1412.6544
http://arxiv.org/abs/1412.6544
http://arxiv.org/abs/1412.6544
https://doi.org/10.1162/neco.1997.9.1.1
https://doi.org/10.1162/neco.1997.9.1.1
https://www.aclweb.org/anthology/P18-1031
https://www.aclweb.org/anthology/P18-1031
http://arxiv.org/abs/1801.06146
http://arxiv.org/abs/1801.06146
http://arxiv.org/abs/1612.04010
http://arxiv.org/abs/1612.04010
http://arxiv.org/abs/1609.04836
http://arxiv.org/abs/1609.04836
http://arxiv.org/abs/1412.6980
http://arxiv.org/abs/1412.6980
https://www.aclweb.org/anthology/P18-1132
https://www.aclweb.org/anthology/P18-1132


4152

Tal Linzen, Emmanuel Dupoux, and Yoav Gold-
berg. 2016. Assessing the ability of LSTMs
to learn syntax-sensitive dependencies. CoRR,
abs/1611.01368.

Nelson F. Liu, Matt Gardner, Yonatan Belinkov,
Matthew Peters, and Noah A. Smith. 2019a. Lin-
guistic knowledge and transferability of contextual
representations. CoRR, abs/1903.08855.

Xiaodong Liu, Pengcheng He, Weizhu Chen, and Jian-
feng Gao. 2019b. Multi-task deep neural net-
works for natural language understanding. CoRR,
abs/1901.11504.

Bryan McCann, James Bradbury, Caiming Xiong, and
Richard Socher. 2017. Learned in translation: Con-
textualized word vectors. In Advances in Neural In-
formation Processing Systems, pages 6297–6308.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In Proceedings of the 2018 Confer-
ence of the North American Chapter of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies, Volume 1 (Long Papers), pages
2227–2237, New Orleans, Louisiana. Association
for Computational Linguistics.

Matthew Peters, Sebastian Ruder, and Noah A. Smith.
2019. To tune or not to tune? Adapting pretrained
representations to diverse tasks.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving language under-
standing by generative pre-training.

Alec Radford, Jeff Wu, Rewon Child, David Luan,
Dario Amodei, and Ilya Sutskever. 2019. Language
models are unsupervised multitask learners.

Richard Socher, Alex Perelygin, Jean Wu, Jason
Chuang, Christopher D. Manning, Andrew Ng, and
Christopher Potts. 2013. Recursive deep models
for semantic compositionality over a sentiment tree-
bank. In Proceedings of the 2013 Conference on
Empirical Methods in Natural Language Process-
ing, pages 1631–1642, Seattle, Washington, USA.
Association for Computational Linguistics.

Ian Tenney, Dipanjan Das, and Ellie Pavlick. 2019a.
BERT rediscovers the classical NLP pipeline. In
Proceedings of the 57th Annual Meeting of the As-
sociation for Computational Linguistics.

Ian Tenney, Patrick Xia, Berlin Chen, Alex Wang,
Adam Poliak, R. Thomas McCoy, Najoung Kim,
Benjamin Van Durme, Samuel R. Bowman, Dipan-
jan Das, and Ellie Pavlick. 2019b. What do you
learn from context? Probing for sentence structure
in contextualized word representations. In Interna-
tional Conference on Learning Representations.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems 30, pages 5998–6008. Curran Asso-
ciates, Inc.

Alex Wang, Amanpreet Singh, Julian Michael, Felix
Hill, Omer Levy, and Samuel R. Bowman. 2019.
GLUE: A multi-task benchmark and analysis plat-
form for natural language understanding. In Inter-
national Conference on Learning Representations.

Adina Williams, Nikita Nangia, and Samuel Bowman.
2018. A broad-coverage challenge corpus for sen-
tence understanding through inference. In Proceed-
ings of the 2018 Conference of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies, Volume
1 (Long Papers), pages 1112–1122, New Orleans,
Louisiana. Association for Computational Linguis-
tics.

Chiyuan Zhang, Samy Bengio, and Yoram Singer.
2019. Are all layers created equal? arXiv preprint
arXiv:1902.01996.

http://arxiv.org/abs/1611.01368
http://arxiv.org/abs/1611.01368
http://arxiv.org/abs/1903.08855
http://arxiv.org/abs/1903.08855
http://arxiv.org/abs/1903.08855
http://arxiv.org/abs/1901.11504
http://arxiv.org/abs/1901.11504
http://www.aclweb.org/anthology/N18-1202
http://www.aclweb.org/anthology/N18-1202
https://arxiv.org/pdf/1903.05987.pdf
https://arxiv.org/pdf/1903.05987.pdf
https://s3-us-west-2.amazonaws.com/openaiassets/research-covers/language-unsupervised/language understanding paper.pdf
https://s3-us-west-2.amazonaws.com/openaiassets/research-covers/language-unsupervised/language understanding paper.pdf
https://www.aclweb.org/anthology/D13-1170
https://www.aclweb.org/anthology/D13-1170
https://www.aclweb.org/anthology/D13-1170
https://arxiv.org/abs/1905.05950
https://openreview.net/forum?id=SJzSgnRcKX
https://openreview.net/forum?id=SJzSgnRcKX
https://openreview.net/forum?id=SJzSgnRcKX
http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
https://openreview.net/forum?id=rJ4km2R5t7
https://openreview.net/forum?id=rJ4km2R5t7
https://doi.org/10.18653/v1/N18-1101
https://doi.org/10.18653/v1/N18-1101
https://arxiv.org/abs/1902.01996

