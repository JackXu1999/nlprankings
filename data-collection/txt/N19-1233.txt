



















































Evaluating Text GANs as Language Models


Proceedings of NAACL-HLT 2019, pages 2241–2247
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

2241

Evaluating Text GANs as Language Models
Guy Tevet∗∗,1,2 Gavriel Habib∗,1,2 Vered Shwartz3 Jonathan Berant1,4

1School of Computer Science, Tel-Aviv University
2Department of Electrical Engineering, Tel-Aviv University

3Computer Science Department, Bar-Ilan University
4Allen Institute for Artificial Intelligence

{guytevet@mail,gavrielhabib@mail,joberant@cs}.tau.ac.il
vered1986@gmail.com

Abstract
Generative Adversarial Networks (GANs) are
a promising approach for text generation that,
unlike traditional language models (LM), does
not suffer from the problem of “exposure
bias”. However, A major hurdle for under-
standing the potential of GANs for text gen-
eration is the lack of a clear evaluation met-
ric. In this work, we propose to approxi-
mate the distribution of text generated by a
GAN, which permits evaluating them with tra-
ditional probability-based LM metrics. We ap-
ply our approximation procedure on several
GAN-based models and show that they cur-
rently perform substantially worse than state-
of-the-art LMs. Our evaluation procedure pro-
motes better understanding of the relation be-
tween GANs and LMs, and can accelerate
progress in GAN-based text generation.

1 Introduction

Neural networks have revolutionized the field of
text generation, in machine translation (Sutskever
et al., 2014; Neubig, 2017; Luong et al., 2015;
Chen et al., 2018), summarization (See et al.,
2017), image captioning (You et al., 2016) and
many other applications (Goldberg, 2017).

Traditionally, text generation models are trained
by going over a gold sequence of symbols (char-
acters or words) from left-to-right, and maximiz-
ing the probability of the next symbol given the
history, namely, a language modeling (LM) ob-
jective. A commonly discussed drawback of such
LM-based text generation is exposure bias (Ran-
zato et al., 2015): during training, the model pre-
dicts the next token conditioned on the ground
truth history, while at test time prediction is based
on predicted tokens, causing a train-test mismatch.
Models trained in this manner often struggle to
overcome previous prediction errors.

Generative Adversarial Networks (Goodfellow
et al., 2014) offer a solution for exposure bias.

∗ The authors contributed equally

Originally introduced for images, GANs leverage
a discriminator, which is trained to discriminate
between real images and generated images via an
adversarial loss. In such a framework, the genera-
tor is not directly exposed to the ground truth data,
but instead learns to imitate it using global feed-
back from the discriminator. This has led to sev-
eral attempts to use GANs for text generation, with
a generator using either a recurrent neural network
(RNN) (Yu et al., 2017; Guo et al., 2017; Press
et al., 2017; Rajeswar et al., 2017), or a Convo-
lutional Neural Network (CNN) (Gulrajani et al.,
2017; Rajeswar et al., 2017).

However, evaluating GANs is more difficult
than evaluating LMs. While in language model-
ing, evaluation is based on the log-probability of
a model on held-out text, this cannot be straight-
forwardly extended to GAN-based text genera-
tion, because the generator outputs discrete to-
kens, rather than a probability distribution. Cur-
rently, there is no single evaluation metric for
GAN-based text generation, and existing metrics
that are based on n-gram overlap are known to lack
robustness and have low correlation with semantic
coherence (Semeniuta et al., 2018).

In this paper, we propose a method for evaluat-
ing GANs with standard probability-based evalu-
ation metrics. We show that the expected predic-
tion of a GAN generator can be viewed as a LM,
and suggest a simple Monte-Carlo method for ap-
proximating it. The approximated probability dis-
tribution can then be evaluated with standard LM
metrics such as perplexity or Bits Per Character
(BPC).

To empirically establish our claim, we imple-
ment our evaluation on several RNN-based GANs:
(Press et al., 2017; Yu et al., 2017; Guo et al.,
2017). We find that all models have substantially
lower BPC compared to state-of-the-art LMs. By
directly comparing to LMs, we put in perspective
the current performance of RNN-based GANs for



2242

text generation. Our results are also in line with
recent concurrent work by Caccia et al. (2018),
who reached a similar conclusion by comparing
the performance of textual GANs to that of LMs
using metrics suggested for GAN evaluation.

Our code is available at: http:
//github.com/GuyTevet/SeqGAN-eval
and http://github.com/GuyTevet/
rnn-gan-eval.

2 Background

Following the success of GANs in image gen-
eration, several works applied the same idea to
texts using convolutional neural networks (Gul-
rajani et al., 2017; Rajeswar et al., 2017), and
later using RNNs (Press et al., 2017; Yu et al.,
2017). RNNs enable generating variable-length
sequences, conditioning each token on the tokens
generated in previous time steps. We leverage this
characteristic in our approximation model (§4.1).

A main challenge in applying GANs for text
is that generating discrete symbols is a non-
differentiable operation. One solution is to per-
form a continuous relaxation of the GAN output,
which leads to generators that emit a nearly dis-
crete continuous distribution (Press et al., 2017).
This keeps the model differentiable and enables
end-to-end training through the discriminator. Al-
ternatively, SeqGAN (Yu et al., 2017) and Leak-
GAN (Guo et al., 2017) used policy gradient meth-
ods to overcome the differentiablity requirement.
We apply our approximation to both model types.

3 Evaluating GANs and LMs

LM Evaluation. Text generation from LMs is
commonly evaluated using probabilistic metrics.
Specifically, given a test sequence of symbols
(t1, . . . , tn), and a LM q, the average cross-
entropy over the entire test set is computed:
ACE = − 1n

∑n
i=1 log2 q(ti | t1...ti−1). For

word-based models, the standard metric is per-
plexity: PP = 2ACE , while for character-based
models it is BPC = ACE directly.

Intrinsic improvement in perplexity does not
guarantee an improvement in an extrinsic down-
stream task that uses a language model. However,
perplexity often correlates with extrinsic measures
(Jurafsky and Martin, 2018), and is the de-facto
metric for evaluating the quality of language mod-
els today.

GAN-based Text Generation Evaluation. By
definition, a text GAN outputs a discrete sequence
of symbols rather than a probability distribution.
As a result, LM metrics cannot be applied to eval-
uate the generated text. Consequently, other met-
rics have been proposed:

• N-gram overlap: (Yu et al., 2017; Press et al.,
2017): Inspired by BLEU (Papineni et al.,
2002), this measures whether n-grams gener-
ated by the model appear in a held-out corpus.
A major drawback is that this metric favors con-
servative models that always generate very com-
mon text (e.g., “it is”). To mitigate this, self-
BLEU has been proposed (Lu et al., 2018) as
an additional metric, where overlap is measured
between two independently sampled texts from
the model.
• LM score: The probability of generated text ac-

cording to a pre-trained LM. This has the same
problem of favoring conservative models.
• Zhao et al. (2017) suggested an indirect score

by training a LM on GAN-generated text, and
evaluating it using perplexity. The drawback in
this setting is the coupling of the performance
of the GAN with that of the proxy LM.
• Heusel et al. (2017) used Frechet InferSent Dis-

tance (FID) to compute the distance between
distributions of features extracted from real and
generated samples. However, this approach re-
lies on a problematic assumption that features
are normally distributed.
• Rajeswar et al. (2017) used a context-free gram-

mar (CFG) to generate a reference corpus, and
evaluated the model by the likelihood the CFG
assigns to generated samples. However, sim-
ple CFGs do not fully capture the complexity
of natural language.
• To overcome the drawbacks of each individual

method, Semeniuta et al. (2018) proposed a uni-
fied measure based on multiple evaluation met-
rics (N-grams, BLEU variations, FID, LM score
variations and human evaluation). Specifically,
they argue that the different measures capture
different desired properties of LMs, e.g., qual-
ity vs. diversity.
• Following Semeniuta et al. (2018), and in paral-

lel to this work, Caccia et al. (2018) proposed a
temperature sweep method that trades-off qual-
ity for diversity using a single parameter. Sim-
ilar to our findings, they concluded that GANs
perform worse than LMs on this metric.

http://github.com/GuyTevet/SeqGAN-eval
http://github.com/GuyTevet/SeqGAN-eval
http://github.com/GuyTevet/rnn-gan-eval
http://github.com/GuyTevet/rnn-gan-eval


2243

xt xt+1 xt+2 xt+3

ht ht+3

otot−1 ot+1 ot+2

Figure 1: Generator recurrent connections. {ht} is the
internal state sequence and {ot} is the generator predic-
tion sequence (one-hot). During inference, the outputs
{ot} are fed back as the input for the next time step
(dashed lines). During LM approximation, the input
{xt} is a sequence of one-hot vectors from the test set.

Overall, current evaluation methods cannot
fully capture the performance of GAN-based text
generation models. While reporting various scores
as proposed by Semeniuta et al. (2018) is possible,
it is preferable to have a single measure of progress
when comparing different text generation models.

4 Proposed Method

We propose a method for approximating a distri-
bution over tokens from a GAN, and then eval-
uate the model with standard LM metrics. We
will describe our approach given an RNN-based
LM, which is the most commonly-used architec-
ture, but the approximation can be applied to other
auto-regressive models (Vaswani et al., 2017).

4.1 Language Model Approximation
The inputs to an RNN at time step t, are the state
vector ht and the current input token xt. The out-
put token (one-hot) is denoted by ot. In RNN-
based GANs, the previous output token is used at
inference time as the input xt (Yu et al., 2017; Guo
et al., 2017; Press et al., 2017; Rajeswar et al.,
2017). In contrast, when evaluating with BPC
or perplexity, the gold token xt is given as input.
Hence, LM-based evaluation neutralizes the prob-
lem of exposure bias addressed by GANs. Nev-
ertheless, this allows us to compare the quality of
text produced by GANs and LMs on an equal foot-
ing. Figure 1 illustrates the difference between in-
ference time and during LM approximation.

We can therefore define the generator function
at time step t as a function of the initial state h0
and the past generated tokens (x0 . . . xt), which
we denote as ot = Gt(h0, x0...xt) (x0 is a start
token). Given a past sequence (x0 . . . xt), Gt is
a stochastic function: the stochasticity of Gt can

Algorithm 1 LM Evaluation of RNN-based GANs
Input: Gt(·): the generator function at time step t

(x0, ..., xt): previous gold tokens
xt+1: the gold next token (as ground truth)
f(·, ·): a LM evaluation metric
N : number of samples

1: for n← 1 to N do
2: gt,n ←− sample from Gt(x0...xt)
3: G̃t,N = 1N Σ

N
n=1gt,n

4: return f(G̃t,N , xt+1)

be gained either by using a noise vector as the ini-
tial state h0 (Press et al., 2017), or by sampling
from the GAN’s internal distribution over possi-
ble output tokens (Yu et al., 2017; Guo et al.,
2017). Since h0 is constant or a noise vector
that makes Gt stochastic, we can omit it to get
Gt(x0 . . . xt). In such a setup, the expected value
E[Gt(x0 . . . xt)] is a distribution q over the next
vocabulary token at:

q(at | a0 . . . at−1) = {E[Gt(x0 . . . xt)]}at
To empirically approximate q, we can sample

from it N i.i.d samples, and compute an approx-
imation G̃t,N = 1NΣ

N
n=1gt,n, where gt,n is one

sample from Gt(x0...xt). Then, according to the
strong law of large numbers:

E[Gt(x0 . . . xt)] = lim
N→∞

G̃t,N (1)

Given this approximate LM distribution, we can
evaluate a GAN using perplexity or BPC. We sum-
marize the evaluation procedure in Algorithm 1.1

4.2 Approximation Bound
We provide a theoretical bound for choosing a
number of samples N that results in a good ap-
proximation of G̃t,N to E[Gt].

Perplexity and BPC rely on the log-probability
of the ground truth token. Since the ground truth
token is unknown, we conservatively define the
bad event B in which there exists v ∈ V such
that |{E[Gt]}v − {G̃t,N}v| > γ, where V is the
vocabulary. We can then bound the probability of
B by some �. We define the following notations:

1. The probability of a token at to be v is pv
∆
=

q(at = v|a0 . . . at−1) = {E[Gt(x0 . . . xt)]}v.
2. χv,n

∆
= {gt,n}v is a random variable repre-

senting the binary value of the v’th index of
1Our evaluation algorithm is linear in the length of the test

set and in the number of samples N .



2244

gt,n which is a single sample of Gt. Note
that the average of χv,n over N samples is

Xv
∆
= 1N

∑N
n=1 χv,n =

{
1
N

∑N
n=1 gt,n

}
v

=

{G̃t,N}v.

Using the above notation, we can re-define the
probability of the bad event B with respect to the
individual coordinates in the vectors:

Pr(B) = Pr
(
‖E[Gt]− G̃t,N‖∞ > γ

)
= Pr

(⋃
v∈V

|pv −Xv| > γ

)
!
< �

(2)

We note that χv,n ∼ Bernoulli(pv), and
given that {χv,n}Nn=1 are i.i.d., we can apply
the Chernoff-Hoeffding theorem (Chernoff et al.,
1952; Hoeffding, 1963). According to the theo-
rem, for every v ∈ V , Pr(|Xv − pv| > γ) <
2e−2Nγ

2
. Taking the union bound over V implies:

Pr(B) = Pr
(⋃

v∈V |Xv − pv| > γ
)
< 2|V |e−2Nγ2 < � (3)

Hence, we get a lower bound on N :

N >
1

2γ2
ln

(
2|V |
�

)
(4)

As a numerical example, choosing γ = 10−3

and � = 10−2, for a character-based LM over
the text8 dataset, with |V | = 27, we get the
bound: N > 4.3 · 106. With the same γ and
�, a typical word-based LM with vocabulary size
|V | = 50, 000 would require N > 8.1 · 106.

In practice, probability vectors of LMs tend to
be sparse (Kim et al., 2016). Thus, we argue that
we can use a much smaller N for a good approxi-
mation G̃t,N . Since the sparsity of LMs is difficult
to bound, as it differs between models, we suggest
an empirical method for choosing N .

The approximation G̃t,N is a converging se-
quence, particularly over ‖ · ‖∞ (see Equation 1).
Hence, we can empirically choose anN which sat-
isfies ‖G̃t,N−α− G̃t,N‖∞ < γ′, α ∈ N. In Sec-
tion 5 we empirically measure ‖G̃t,N−α−G̃t,N‖∞
as a function of N to choose N . We choose a
global N for a model, rather than for every t, by
averaging over a subset of the evaluation set.

5 Evaluation

5.1 Models
We focus on character-based GANs as a test-case
for our method. We evaluate two RNN-based

GANs with different characteristics. As opposed
to the original GAN model (Goodfellow et al.,
2014), in which the generator is initialized with
random noise, the GANs we evaluated both lever-
age gold standard text to initialize the generator,
as detailed below.

Recurrent GAN (Press et al., 2017) is a contin-
uous RNN-based generator which minimizes the
improved WGAN loss (Gulrajani et al., 2017). To
guide the generator, during training it is initial-
ized with the first i−1 characters from the ground
truth, starting the prediction in the ith character.
Stochasticity is obtained by feeding the generator
with a noise vector z as a hidden state. At each
time step, the input to the RNN generator is the
output distribution of the previous step.

SeqGAN (Yu et al., 2017) is a discrete RNN-
based generator. To guide the generator, it is pre-
trained as a LM on ground truth text. Stochastic-
ity is obtained by sampling tokens from an internal
distribution function over the vocabulary. To over-
come differentiation problem, it is trained using a
policy gradient objective (Sutton et al., 2000).

We also evaluated LeakGAN (Guo et al., 2017),
another discrete RNN-based generator, but since
it is similar to SeqGAN and performed worse, we
omit it for brevity.

5.2 Evaluation Settings

To compare to prior work in LM, we follow the
common setup and train on the text8 dataset.2 The
dataset is derived from Wikipedia, and includes 26
English characters plus spaces. We use the stan-
dard 90/5/5 split to train/validation/test. Finally,
we measure performance with BPC.

We tuned hyper-parameters on the validation
set, including sequence length to generate at test
time (7 for Press et al. (2017), 1000 for Yu et al.
(2017)). We chose the number of samples N
empirically for each model, as described in Sec-
tion 4.2. We set α to 10, and the boundary to
γ′ = 10−3 as a good trade-off between accuracy
and run-time. Figure 2 plots the approximate error
‖G̃t,N−α − G̃t,N‖∞ as a function of N . For both
models, N > 1600 satisfies this condition (red
line in Figure 2). To be safe, we used N = 2000.

5.3 Results

Table 1 shows model performance on the test set.

2http://mattmahoney.net/dc/textdata

http://mattmahoney.net/dc/textdata


2245

Approach Model BPC Approx. BPC

Language Models

mLSTM + dynamic eval (Krause et al., 2017) 1.19
Large mLSTM +emb +WN +VD (Krause et al., 2016) 1.27

Large RHN (Zilly et al., 2016) 1.27
LayerNorm HM-LSTM (Chung et al., 2016) 1.29

BN LSTM (Cooijmans et al., 2016) 1.36
Unregularised mLSTM (Krause et al., 2016) 1.40

SeqGAN - pre-trained LM (Yu et al., 2017) 1.85 1.95

GANs (LM Approximation) SeqGAN - full adversarial training (Yu et al., 2017) 1.99 2.08Recurrent GAN without pre-training (Press et al., 2017) 3.31

Uniform Distribution 4.75

Table 1: Test set evaluation of different character-based models on the text8 dataset. State-of-the-art results are
taken from https://github.com/sebastianruder/NLP-progress/blob/master/language_
modeling.md. The uniform distribution is equivalent to guessing the next character out of |V | = 27 characters.

Model Samples

SeqGAN
Pre-trained LM

1. rics things where a weeks thered databignand jacob reving the imprisoners could become poveran brown
2. nine other set of of one eight one two by belarigho and singing signal theus to accept natural corp
3. ragems the downran maintain the lagar linear stream hegels p in five six f march one nine nine nine

SeqGAN
Full adversarial
training

1. four zero five two memaire in afulie war formally dream the living of the centuries to quickly can f
2. part of the pract the name in one nine seven were mustring of the airports tex works to eroses exten
3. eight four th jania lpa ore nine zero zero zero sport for tail concents englished a possible for po

Recurrent
GAN

1. nteractice computer may became were the generally treat he were computer may became were the general
2. lnannnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnne and and and and and and and and and and and and and and and a
3. perors as as seases as as as as as as as as as selected see see see see see see see see see see see

Table 2: Random samples of 100 characters generated by each model.

0 500 1000 1500 2000 2500 3000
Number of generator runs (N)

10 3

10 2

Er
ro

r (
in

fin
ity

 n
or

m
) Recurrent GAN

seqGAN

Figure 2: Approximate error ‖G̃t,N−α − G̃t,N‖∞ as a
function of samples N . α = 10, γ′ = 10−3.

Because SeqGAN models output a distribution
over tokens at every time step, we can measure the
true BPC and assess the quality of our approxima-
tion. Indeed, we observe that approximate BPC is
only slightly higher than the true BPC.

GAN-based models perform worse than state-
of-the-art LMs by a large margin. Moreover, in
SeqGAN, the pre-trained LM performs better than
the fully trained model with approximate BPC
scores of 1.95 and 2.06, respectively, and the BPC
deteriorates as adversarial training continues.

Finally, we note that generating sequences
larger than 7 characters hurts the BPC of Press
et al. (2017). It is difficult to assess the quality
of generation with such short sequences.

In Table 2 we present a few randomly gener-

ated samples from each model. We indeed observe
that adversarial training slightly reduces the qual-
ity of generated text for SeqGAN, and find that the
quality of 100-character long sequences generated
from Press et al. (2017) is low.

6 Conclusions

We propose an evaluation procedure for text
GANs that is based on approximating the GAN
output distribution and using standard LM metrics.
We provide a bound for the number of samples re-
quired for the approximation and empirically show
in practice as few as 2000 samples per time-step
suffice. We evaluate character-based GAN mod-
els using our procedure, and show their perfor-
mance is substantially lower than state-of-the-art
LM. We hope our simple evaluation method leads
to progress in GAN-based text generation by shed-
ding light on the quality of such models.

Acknowledgements

We would like to thank Shimi Salant for his com-
ments and suggestions. This research was par-
tially supported by The Israel Science Foundation
grant 942/16, the Blavatnik Computer Science Re-
search Fund, and The Yandex Initiative for Ma-
chine Learning.

https://github.com/sebastianruder/NLP-progress/blob/master/language_modeling.md
https://github.com/sebastianruder/NLP-progress/blob/master/language_modeling.md


2246

References
Massimo Caccia, Lucas Caccia, William Fedus, Hugo

Larochelle, Joelle Pineau, and Laurent Charlin.
2018. Language gans falling short. arXiv preprint
arXiv:1811.02549.

Mia Xu Chen, Orhan Firat, Ankur Bapna, Melvin
Johnson, Wolfgang Macherey, George Foster, Llion
Jones, Niki Parmar, Mike Schuster, Zhifeng Chen,
et al. 2018. The best of both worlds: Combining re-
cent advances in neural machine translation. arXiv
preprint arXiv:1804.09849.

Herman Chernoff et al. 1952. A measure of asymp-
totic efficiency for tests of a hypothesis based on the
sum of observations. The Annals of Mathematical
Statistics, 23(4):493–507.

Junyoung Chung, Sungjin Ahn, and Yoshua Bengio.
2016. Hierarchical multiscale recurrent neural net-
works. arXiv preprint arXiv:1609.01704.

Tim Cooijmans, Nicolas Ballas, César Laurent, Çağlar
Gülçehre, and Aaron Courville. 2016. Re-
current batch normalization. arXiv preprint
arXiv:1603.09025.

Yoav Goldberg. 2017. Neural network methods for nat-
ural language processing. Synthesis Lectures on Hu-
man Language Technologies, 10(1):1–309.

Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza,
Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron
Courville, and Yoshua Bengio. 2014. Generative ad-
versarial nets. In Advances in neural information
processing systems, pages 2672–2680.

Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vin-
cent Dumoulin, and Aaron C Courville. 2017. Im-
proved training of wasserstein gans. In Advances
in Neural Information Processing Systems, pages
5767–5777.

Jiaxian Guo, Sidi Lu, Han Cai, Weinan Zhang, Yong
Yu, and Jun Wang. 2017. Long text generation via
adversarial training with leaked information. arXiv
preprint arXiv:1709.08624.

Martin Heusel, Hubert Ramsauer, Thomas Unterthiner,
Bernhard Nessler, Günter Klambauer, and Sepp
Hochreiter. 2017. Gans trained by a two time-scale
update rule converge to a nash equilibrium. arXiv
preprint arXiv:1706.08500.

Wassily Hoeffding. 1963. Probability inequalities for
sums of bounded random variables. Journal of the
American statistical association, 58(301):13–30.

Dan Jurafsky and James H Martin. 2018. Speech
and language processing: Third Edition, volume 3.
Pearson London.

Yoon Kim, Yacine Jernite, David Sontag, and Alexan-
der M Rush. 2016. Character-aware neural language
models. In AAAI, pages 2741–2749.

Ben Krause, Emmanuel Kahembwe, Iain Murray, and
Steve Renals. 2017. Dynamic evaluation of neural
sequence models. arXiv preprint arXiv:1709.07432.

Ben Krause, Liang Lu, Iain Murray, and Steve Renals.
2016. Multiplicative lstm for sequence modelling.
arXiv preprint arXiv:1609.07959.

Sidi Lu, Yaoming Zhu, Weinan Zhang, Jun Wang,
and Yong Yu. 2018. Neural text genera-
tion: Past, present and beyond. arXiv preprint
arXiv:1803.07133.

Minh-Thang Luong, Quoc V Le, Ilya Sutskever, Oriol
Vinyals, and Lukasz Kaiser. 2015. Multi-task
sequence to sequence learning. arXiv preprint
arXiv:1511.06114.

Graham Neubig. 2017. Neural machine translation
and sequence-to-sequence models: A tutorial. arXiv
preprint arXiv:1703.01619.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of
the 40th annual meeting on association for compu-
tational linguistics, pages 311–318. Association for
Computational Linguistics.

Ofir Press, Amir Bar, Ben Bogin, Jonathan Berant,
and Lior Wolf. 2017. Language generation with re-
current generative adversarial networks without pre-
training. In 1st Workshop on Learning to Generate
Natural Language at ICML 2017.

Sai Rajeswar, Sandeep Subramanian, Francis Dutil,
Christopher Pal, and Aaron Courville. 2017. Adver-
sarial generation of natural language. arXiv preprint
arXiv:1705.10929.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2015. Sequence level train-
ing with recurrent neural networks. arXiv preprint
arXiv:1511.06732.

Abigail See, Peter J Liu, and Christopher D Manning.
2017. Get to the point: Summarization with pointer-
generator networks.

Stanislau Semeniuta, Aliaksei Severyn, and Syl-
vain Gelly. 2018. On accurate evaluation of
gans for language generation. arXiv preprint
arXiv:1806.04936.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

Richard S Sutton, David A McAllester, Satinder P
Singh, and Yishay Mansour. 2000. Policy gradi-
ent methods for reinforcement learning with func-
tion approximation. In Advances in neural informa-
tion processing systems, pages 1057–1063.



2247

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 5998–6008.

Quanzeng You, Hailin Jin, Zhaowen Wang, Chen Fang,
and Jiebo Luo. 2016. Image captioning with seman-
tic attention. In Proceedings of the IEEE conference
on computer vision and pattern recognition, pages
4651–4659.

Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu.
2017. Seqgan: Sequence generative adversarial nets
with policy gradient. In AAAI, pages 2852–2858.

Junbo Jake Zhao, Yoon Kim, Kelly Zhang, Alexan-
der M Rush, and Yann LeCun. 2017. Adversari-
ally regularized autoencoders for generating discrete
structures. CoRR, abs/1706.04223.

Julian Georg Zilly, Rupesh Kumar Srivastava,
Jan Koutnı́k, and Jürgen Schmidhuber. 2016.
Recurrent highway networks. arXiv preprint
arXiv:1607.03474.


