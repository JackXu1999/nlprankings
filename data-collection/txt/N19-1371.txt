



















































Inferring Which Medical Treatments Work from Reports of Clinical Trials


Proceedings of NAACL-HLT 2019, pages 3705–3717
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

3705

Inferring Which Medical Treatments Work from
Reports of Clinical Trials

Eric Lehman
Northeastern University

lehman.e@northeastern.edu

Jay B. DeYoung
Northeastern University

deyoung.j@northeastern.edu

Regina Barzilay
MIT

regina@csail.mit.edu

Byron C. Wallace
Northeastern University

b.wallace@northeastern.edu

Abstract

How do we know if a particular medical treat-
ment actually works? Ideally one would con-
sult all available evidence from relevant clini-
cal trials. Unfortunately, such results are pri-
marily disseminated in natural language scien-
tific articles, imposing substantial burden on
those trying to make sense of them. In this pa-
per, we present a new task and corpus for mak-
ing this unstructured evidence actionable. The
task entails inferring reported findings from a
full-text article describing a randomized con-
trolled trial (RCT) with respect to a given in-
tervention, comparator, and outcome of inter-
est, e.g., inferring if an article provides evi-
dence supporting the use of aspirin to reduce
risk of stroke, as compared to placebo.

We present a new corpus for this task com-
prising 10,000+ prompts coupled with full-
text articles describing RCTs. Results using
a suite of models — ranging from heuris-
tic (rule-based) approaches to attentive neu-
ral architectures — demonstrate the difficulty
of the task, which we believe largely owes to
the lengthy, technical input texts. To facili-
tate further work on this important, challeng-
ing problem we make the corpus, documenta-
tion, a website and leaderboard, and code for
baselines and evaluation available at http:
//evidence-inference.ebm-nlp.com/.

1 Introduction

Biomedical evidence is predominantly dissemi-
nated in unstructured, natural language scientific
manuscripts that describe the conduct and results
of randomized control trials (RCTs). The pub-
lished evidence base is vast and expanding (Bas-
tian et al., 2010): at present more than 100 reports
of RCTs are published every day, on average. It
is thus time-consuming, and often practically im-
possible, to sort through all of the relevant pub-
lished literature to robustly answer questions such

With respect to <outcome>, what is the 
reported difference between patients 
receiving <A> and those receiving <B>?  

Significantly increased

Significantly decreased

No significant difference

“Patients receiving A experienced 
significantly more outcome …”

article and prompt answer and rationale

Figure 1: The task. Given a treatment A, a comparator
B, and an outcome, infer the reported relationship be-
tween A and B with respect to outcome, and provide
evidence supporting this from the text.

as: Does infliximab reduce dysmenorrhea (pain)
scores, relative to placebo?

Given the critical role published reports of tri-
als play in informing evidence-based care, orga-
nizations such as the Cochrane collaboration and
groups at evidence-based practice centers (EPCs)
are dedicated to manually synthesizing findings,
but struggle to keep up with the literature (Tsaf-
nat et al., 2013). NLP can play a key role in
automating this process, thereby mitigating costs
and keeping treatment recommendations up-to-
date with the evidence as it is published.

In this paper, we consider the task of inferring
whether a given treatment is effective with respect
to a specified outcome. Typically, this assess-
ment is done relative to other treatment options
(i.e., comparators). We assume the model is pro-
vided with a prompt that specifies an intervention,
a comparator, and an outcome, along with a full-
text article. The model is then to infer the reported
findings with respect to this prompt (Figure 1).
From a healthcare perspective, this inference task
is an essential step for automating extraction of ac-
tionable evidence from trial reports.

http://evidence-inference.ebm-nlp.com/
http://evidence-inference.ebm-nlp.com/


3706

From an NLP standpoint, the proposed task can
be seen as an instance of natural language infer-
ence (Bowman et al., 2015), viewing the article
and prompt as the premise and hypothesis, re-
spectively. However, the problem differs in a few
important ways from existing NLP formulations.
First, the inputs: prompts are brief (∼13.5 words
on average), but articles are long (∼4200 words).
Further, only a few snippets of the article will be
relevant to the label for a given prompt. Second,
prompts in this domain are structured, and include
only a few types of key information: interventions,
comparators, and outcomes. Methods that exploit
this regularity are likely to be more accurate than
generic inference algorithms.

Another interesting property of this task is that
the target for an article depends on the interven-
tions and outcome specified by a given prompt.
Most articles report results for multiple interven-
tions and outcomes: 67% of articles in our cor-
pus are associated with two or more prompts that
have different labels, e.g., indicating that a specific
treatment was comparatively effective for one out-
come but not for another. As a concrete example
from our corpus, infliximab was reported as real-
izing no significant difference with respect to dys-
menorrhea, compared to a placebo. But infliximab
was associated with a significant increase in pain
killer intake, again compared to placebo. Gener-
ally positive words in an article (e.g., “improved”)
will confuse inference models that fail to account
for this. One may view these as built-in “adversar-
ial” examples (Jia and Liang, 2016) for the task.

A key sub-problem is thus identifying snippet(s)
of evidence in an article relevant to a given input
prompt. Attention mechanisms (Bahdanau et al.,
2014) conditioned on prompts would seem a natu-
ral means to achieve this, and we do find that these
achieve predictive gains, but they are modest. Ex-
isting attention variants seem to struggle to consis-
tently attend to relevant evidence, even when ex-
plicitly pretrained using marked rationales. This
corpus can facilitate further research in attention
variants designed for lengthy inputs (Choi et al.,
2017; Yang et al., 2016).

In sum, our contributions are threefold. We:
(1) formulate a novel task (evidence infer-
ence) that is both practically important and
technically challenging; (2) Provide a new
publicly-available corpus comprising 10,000+ ev-
idence “prompts”, answers, supporting evidence

spans, and associated full-text articles (http://
evidence-inference.ebm-nlp.com) all
manually annotated by medical doctors; (3) De-
velop baseline algorithms to establish state-of-
the-art performance and highlight modeling chal-
lenges posed by this new task.

2 Annotation

The specialized nature of this task necessitates
adequate domain knowledge. We thus recruited
medical doctors (MDs) via the Upwork platform
to perform annotation. Annotators were assigned
to one of three mutually exclusive groups, respon-
sible for: (1) prompt generation, (2) prompt and
article annotation, and (3) verification. Figure 2
depicts the annotation process schematically; we
describe these steps in more detail below.

It is important to note that annotation was per-
formed on full-texts, not just abstracts. Evidence
relevant to a particular clinical question is quite
often only available in the full text. Indeed, in our
dataset, the relevant evidence span was marked in
the abstract only 40.5% of the time.

2.1 Prompt Generation

This first task entails generating questions (or
“prompts”) that are answerable on the basis of a
corresponding full-text article describing an RCT.
Such prompts concern the comparison of specific
interventions with respect to a particular outcome.
Specifically, these questions ask whether an article
reports that the specified intervention was found
(in the described trial) to be significantly more ef-
fective than a comparator treatment, with respect
to the outcome of interest.

Prompt creators were instructed to identify a
snippet, in a given full-text article, that reports a
relationship between an intervention, comparator,
and outcome. Generators were also asked to pro-
vide answers and accompanying rationales to the
prompts that they provided; such supporting evi-
dence is important for this task and domain.

As a concrete example, an example generated
prompt for a trial described in (Marre et al.,
2009) specifies Proinsulin : insulin ratio as the
outcome of interest, liraglutide (1.8 mg) plus
glimepiride as the intervention, and rosiglitazone
plus glimepiride as the comparator. Liraglutide
and rosiglitazone are both drugs that can be used
to treat type 2 diabetes. In this case, use of the
intervention (liraglutide) was reported to signifi-

http://evidence-inference.ebm-nlp.com
http://evidence-inference.ebm-nlp.com


3707

(1) prompt generation

Intervention metronidazole
Outcome pre-term birth

Finding decreased
Comparator placebo

(2) independent annotation of prompts

(3) verification of prompts, annotations, and rationales

Intervention metronidazole
Outcome pre-term birth

Finding decreased
Comparator placebo

“Patients receiving metronidazole experienced significantly fewer 
pre-term births than those in the comparison group.”

With respect to pre-term births, characterize the 
reported difference between patients receiving 
metronidazole and those receiving placebo  

Significantly increased

Significantly decreased

No significant difference

Supporting rationale 

Support “…”

“Patients receiving metronidazole …”

Figure 2: Schematic of the annotation process, performed by qualified (MD) annotators for all articles and prompts.

cantly decrease the proinsulin to insulin ratio, as
supported by the following evidence snippet ex-
tracted by the prompt creator: “Reductions in the
proinsulin : insulin ratio were greater with both
liraglutide 1.2 and 1.8 mg compared with either
rosiglitazone or placebo.”

Trials typically report results for multiple out-
comes, and often for more than two interventions.
As discussed above, results for these will often
differ. For instance, postprandial plasma glucose
was another outcome reported in the aforemen-
tioned trial report, and placebo plus glimepeiride
was considered as another comparator. Therefore,
we instructed prompt generators to create multiple
prompts for each full-text article. On average, this
yielded 4.19 distinct prompts per article.1

Articles may be deemed invalid for a few rea-
sons, chiefly for not describing RCTs.2 Of 3525
articles considered, 1106 were marked invalid
(31.4%). The prompt generators provided valid
answers and rationales in 95.9% and 97.8% of
cases, respectively, as per the verifier.

To summarize: prompt creation entails specify-
ing answerable clinical questions, along with an-
swers to these and supporting rationales (evidence
snippets from the text). This task is the most labo-
rious step in the annotation process.

1We restricted generators to creating at most five prompts
for a given article; prior to imposing this constraint, annota-
tors would sometimes generate >10 prompts per article.

2We used the RobotReviewer RCT classifier, which im-
proves upon the standard MEDLINE RCT filter (Marshall
et al., 2018), but some false positives remain.

2.2 Prompt Annotation

For this task, annotators were asked to answer
prompts on the basis of a particular article. More
specifically, given an evidence prompt articulating
an intervention, comparator, and outcome (gen-
erated as described above), the task was to de-
termine whether the associated article reports re-
sults indicating that the intervention significantly
increased, significantly decreased, or realized no
significant difference, relative to the comparator
and with respect to the outcome. The annotator
was also asked to mark a snippet of text support-
ing their response. Annotators also had the option
to mark prompts as invalid, e.g., if the prompt did
not seem answerable on the basis of the article.

Annotations collected in this step are redundant
with the classification and rationale independently
provided by the prompt generator in the preced-
ing step; this is by design to ensure robust, high-
quality annotations.

2.3 Verification

The final task in our annotation process entails a
worker verifying the prompts and responses gener-
ated in the previous two steps. The verifier is here
responsible for checking both whether the prompt
(i.e., question) is valid and can be answered from
the text, and whether the responses provided are
accurate. Verifiers also assess whether the associ-
ated supporting evidence provided is reasonable.

Verification is a relatively easy task, because the
verifier is directly provided all information rele-



3708

vant to making a quality judgment. Nonetheless,
this step decidedly improved data quality: 3.8%
of prompts, 6.7% of answers, and 7.1% of ratio-
nales (supporting evidence snippets) were marked
as invalid. All invalid prompts were removed from
the corpus; so too were all prompts for which the
verifier rejected all answers or all rationales.

2.4 Task Refinement

In an initial pilot round, we acquired annotations
on 10 articles, yielding 93 prompts. Three med-
ical doctors (MDs) were tasked with answering
these prompts, achieving an agreement of 0.58
(Krippendorf’s α). To improve this poor agree-
ment, we provided personalized feedback that ad-
dressed systematic issues we observed. Following
this feedback, the MDs were asked to re-examine
the same set of prompts and update their responses
if they felt it appropriate to do so. This resulted in
a much improved agreement of α=0.84.

To verify that this agreement held beyond the
specific set with respect to which we provided
feedback, we subsequently assigned an additional
113 prompts to the annotators. As measured over
these 113 prompts, the three annotators exhibited
relatively high agreement between themselves and
with the prompt generator (Krippendorf’s α of
0.75 and 0.80, respectively).

3 Dataset Statistics

We hired 16 doctors from Upwork and split them
at random into groups: 10 for prompt generation,
3 for annotation, and 3 for verification.3 In total,
we have acquired 10,137 annotated prompts for
2,419 unique articles. For each of these prompts,
we have at least two independent sets of labels and
associated rationales (supporting snippets).

We additionally calculated agreement between
prompt generators, annotators and verifiers using
Krippendorf’s α. To calculate this, we converted
the verifier’s binary labels of valid or not to the
label with which they agreed. This yields α =
0.88. Removing the verifier annotations from the
calculation results in α = 0.86.

Intervention, outcome, and comparator strings
contain on average 5.1, 5.3, and 3.4 tokens, respec-
tively. Articles comprise a mean of 4.2k tokens.

We provide additional details concerning the
dataset in the Appendix.

3One doctor from verification was moved to annotation in
order to increase productivity.

article

intervention comparator outcome 

encoder encoder encoder 

encoder 

atte
ntion

sig
. d

ec
re

as
e

no
 d

iffe
re

nc
e

sig
. in

cr
ea

se

Figure 3: A generalized illustration of the neural net-
work we propose for evidence inference.

4 Models

We experimented with a suite of models to estab-
lish performance on this task, which we explain
below in increasing order of complexity.

4.1 Baselines
Majority. Predict the most common class, i.e., no
significant difference.

Heuristics. This entails two parts: (1) finding the
sentence that contains the answer, and (2) inter-
preting the sentence that possesses the evidence.
The first step of this process is achieved through
locating the sentence that has the most overlap
with words in the outcome, intervention, and com-
parator. Afterwards, we search for reported p-
values within the identified sentence, and evaluate
whether they seem significant. We provide a de-
tailed description of the heuristics model in Sec-
tion A of the Appendix.

Logistic Regression. A standard logistic regres-
sion model trained on top of binary bag-of-words
representations of articles and intervention, com-
prator and outcome (ICO) frames — these are con-
catenated to form inputs. We use a vocabulary size
of 20k (based on frequency of occurrence), thus
yielding an input size of 80k.

Neural Network Variants. We encode the inter-
vention, comparator, and outcome strings accom-
panying a prompt into vectors i, c, and o, respec-



3709

Train Dev Test Total
Number of prompts 8168 1004 965 10137
Number of articles 1931 248 240 2419
Label counts (-1 / 0 / 1) 1981 / 3619 / 2568 232 / 448 / 324 215 / 403 / 347 2428 / 4470 / 3239

Table 1: Corpus statistics. Labels -1, 0, 1 indicate significantly decreased, no significant difference and significantly
increased, respectively.

tively. Similarly, we encode the article itself into
a vector a. We experimented with several encoder
options, including simple bag-of-words style en-
coding (i.e., averaging constituent word vectors)
and RNNs. For the latter, we specifically pass a
Gated Recurrent Unit (Cho et al., 2014), or GRU,
over inputs, yielding hidden states for each article
token.

In preliminary experiments we found that sim-
ple averages over token embeddings worked well
for encoding prompts (i, c and o), likely be-
cause they tend to be quite short. But this en-
coding works terribly for articles, due to their
length. Therefore, we use a GRU to encode arti-
cles (uni-directional, as bi-directional added com-
plexity without improving results).

In the simplest neural model variant, we sim-
ply concatenate the encoded article and ICO frame
into a vector [a; i; c; o] which is then passed
through a feedforward network with a single hid-
den layer to allow interactions between the prompt
and article text.4 As discussed in detail below, we
experiment with a variety of attention mechanisms
imposed over article tokens.

4.2 Finding the Evidence

Exploiting the spans of evidence marked as sup-
porting assessments should improve the predic-
tive performance of models. An additional advan-
tage of modeling this explicitly is that models will
then be able to provide rationales for decisions
(Lei et al., 2016; Zhang et al., 2016; Zaidan et al.,
2007), i.e., snippets of text that support predic-
tions. We therefore experiment with model vari-
ants that classify input tokens as being relevant ev-
idence (or not) prior to performing inference.

We consider both pipeline and joint instantia-
tions of such models. In the former type, the
model first identifies spans in the text and then
passes these forward to an independent compo-
nent that makes predictions on the basis of these.
In models of the latter type, evidence span tag-
ging and document-level inference is performed

4We use a linear hidden layer; experiments adding a non-
linearity (ReLU) did not affect results.

end-to-end. Evidence snippets are not restricted to
sentence boundaries (i.e., are token-wise), but we
also consider model variants that relax evidence
span tagging to a sentence labeling task (classify-
ing sentences as containing any evidence tokens,
or not). In either case, which spans are relevant
will depend on the prompt assessed. Thus, we
consider and contrast variants that condition evi-
dence span prediction on the input prompt.

We consider both linear and neural models. For
the former, we train two logistic regression mod-
els over bag-of-words input representations. The
first predicts whether or not a given sentence con-
tains any evidence tokens. Document predictions
are then made via a second (independent) logistic
regression model that consumes aggregate bag-of-
words representations of only those sentences pre-
dicted to contain evidence. This is a linear model,
and thus does not accommodate interactions; we
therefore consider only an unconditioned version.

For our pipeline neural model, we first induce
vector representations of article sentences via a
GRU, and these are then passed through a binary
classification layer. To allow interactions between
the input prompt and the sentence being classified,
we also consider a conditioned variant in which
the sentence classification model is provided the
induced vector representations of the prompt ele-
ments alongside the sentence vector.

For end-to-end models, we capitalize on atten-
tion mechanisms that learn to focus on (contextu-
alized hidden representations of) individual article
tokens prior to making a prediction. We consider
several variants of attention, and we explore di-
rectly pretraining these using the marked evidence
spans available in the training data.

The simplest attention module we consider is
unconditioned; we simply learn weights W that
scores hidden states ha output from the article en-
coder. Concretely,

α = softmax{wα ·Ha} (1)

where wα ∈ R1×d and Ha ∈ Rd×|a|, denoting
hidden size by d and article length by |a|.5

5We have elided bias terms for presentation.



3710

Ihidden states

We recruited  …
…

PPV and SVV were higher in PROP 
with respect to DEX  (p < 0.01)

…

GRU

A Study on …

C O

…

…

concatenate

N

N

Propofol Dexmedetomidine PPV and SVV

N tokens
attention over words

Figure 4: The proposed conditional attention variant.
ICO frame embeddings are concatenated to hidden
state vectors from the GRU and fed through an MLP
to induce attention weights.

However, the text span relevant to a classifica-
tion will depend on the prompt under considera-
tion. We thus also consider a conditioned variant
of attention. In this version we concatenate the i,
c, and o vectors induced by our encoders to the
hidden states. Abusing notation a bit, denote the
matrix in which we concatenate the i, c, and o vec-
tors to each column in Ha by [Ha; i; c; o]. We then
consider an attention variant that passes this con-
catenated representation through a single hidden
layer to score tokens (Figure 4).

α = softmax{vtα · tanh(Wα · [Ha; i; c; o])} (2)

We consider two ways of converting the pro-
vided evidence spans into targets: (1) Imposing a
uniform distribution over marked evidence tokens;
(2) Setting the target for all marked evidence to-
kens as 1. In both cases we treat the absence of
annotations on a token as an implicit negative tar-
get (0). It is important to note that the model will
see the same article multiple times during train-
ing with different evidence span targets, one for
each prompt in the train set. The snippet of text
that supports a particular assessment naturally de-
pends on the prompt under consideration. Uncon-
ditioned attention variants will thus, by construc-
tion, be unable to attend exclusively to the relevant
spans of text for across all prompts.

When training with binary targets, we consider
two specifications: one in which the outputs of the
attention model are independent (per-token) sig-
moids indicating whether or not a word belongs to
an evidence span, and another in which attention
weights are normalized via a softmax over tokens.
The latter is standard, although per-token attention
has been previously proposed (Kim et al., 2017).

5 Experimental Details

5.1 Development Setting

During model development, we used 90% of the
train set for training, and the remaining 10% as to
monitor performance over epochs. To iteratively
assess and refine models during this development
phase, we used the standardized validation set. All
decisions regarding final experiments to run were
made using this validation set, prior to evaluating
models on the held-out test set of articles. Results
reported in this paper are on the final test set. Note
that we report averages for neural models (over
five runs) to mitigate noise due to random initial-
ization and fitting.

5.2 Training Details and Hyperparameters

All neural variants were trained up to 50 epochs
with a patience of 10 epochs. We monitored per-
formance during training on a nested development
set and retained the model that achieved the high-
est F1 score on this. For GRU encoders we used
32 hidden units. All models for the primary task
were trained with batch sizes of 32.

We initialized word embeddings to pretrained
word vectors induced over a large set of PubMed
abstracts (Pyysalo et al., 2013). Given the modest
training dataset size, we did not fine-tune these.

5.3 Attention pretraining Details

We use the manually marked supporting snip-
pets as explicit, intermediate supervision for pre-
training the attention mechanisms described in
4.2. More specifically, we pretrain the attentional
model components for both conditioned and un-
conditioned attention variants.

Concretely, we minimize token-wise binary
cross entropy loss with respect to one of the two
token-wise targets delineated in the preceding Sec-
tion. We normalize loss per batch by the number
of constituent tokens, using batch sizes of 16.6 We
monitor token-wise AUC with respect to the ref-
erence evidence span annotations marked in the
held-out validation set mention in Section 5.1. We
retained the model that achieved the best AUC
measured over fifty epochs of attention pretrain-
ing (again with a patience of ten) and used these
weights as initialization values for fine-tuning the
end-to-end inference network.7

6Memory constraints precluded larger batches.
7We also experimented with ‘freezing’ attention module

parameters during fine-tuning, but this performed poorly.



3711

Model Precision Recall F1 Evidence token AUC / mass
Majority 0.138 0.333 0.195 –
Heuristics 0.431 0.389 0.354 0.682 / 0.025
Logistic regression 0.409 0.400 0.388 –
Pipeline logistic regression 0.452 0.429 0.423 0.523 / 0.012
Pipeline neural network 0.422 0.405 0.402 0.847 / 0.080

+ Conditioned 0.426 0.420 0.417 0.863 / 0.062
End-to-end neural network 0.471 0.439 0.440 –

+ Attention 0.528 0.507 0.508 0.759 / 0.047
+ Pretrain attention† 0.527 0.507 0.505 0.880 / 0.129
+ Conditional attention 0.522 0.504 0.505 0.706 / 0.059
+ Pretrain conditional attention† 0.531 0.519 0.520 0.836 / 0.125

Table 2: Summary results on the evidence inference task test set, averaged over five independent runs (with inde-
pendent random initialization values). Metrics are macro-averages over classes. Evidence token AUC and mass
(last column) quantify identification of relevant supporting tokens. Models in the top two rows perform no learning;
the second two correspond to linear models; the rest are neural model variants. † indicates ‘token-wise‘ attention
pretraining; we report results for alternative attention losses in the Appendix.

Class Precision Recall F1
Sig. decreased 0.448 0.334 0.380
No sig. diff. 0.586 0.636 0.610
Sig. increased 0.556 0.585 0.572

Table 3: Average per-class test performance of best
overall model (pretrain conditional attention).

We trained all models with the Adam optimizer
using the parameters suggested by (Kingma and
Ba, 2014). We trained using PyTorch (Paszke
et al., 2017), v 1.0.1.post2.8 Code for our
models and to reproduce our results is avail-
able at: https://github.com/jayded/
evidence-inference.

5.4 Pipeline Model Training Details
Pipeline models first attempt to identify sentences
containing evidence. To train these, we general-
ize token-wise annotations to sentences such that
a sentence is labeled 1 if it contains any evidence
tokens, and 0 otherwise. We then trained the sen-
tence tagging models described above with these
labels, monitoring loss on a nested validation set
and retaining the best observed model over 50
epochs. The document-level model subsequently
consumes only sentences tagged as relevant.

6 Results
6.1 Main Task Results
Results on the main task for proposed model vari-
ants are reported in Table 2. These are averages
over five independent runs, to ensure relatively ro-
bust measures of model performance.9 The best

8This is a nightly build, used due to a dependence on re-
cently introduced RNN utilities.

9These models exhibit a fair amount of variance; we re-
port ranges over the validation set in the Appendix.

Model Precision Recall F1
NN + Attention 0.518 0.503 0.505
NN + pretrain cond. attn. 0.533 0.530 0.531

Table 4: Leaderboard results.

performing model exploits pretrained conditional
attention. For the leaderboard we assume a sin-
gle set of model predictions. To generate these
we evaluated models on the test set using the ver-
sions that realized the strongest observed perfor-
mance on the validation set over the aforemen-
tioned five runs/initializations. The best perform-
ing model (and hence current leader) is the variant
that uses pretrained, conditional attention, which
aligns with the average results in Table 2. Table
4 reports the results here, along with a more stan-
dard attentive architecture for context.

To highlight the importance of identifying rel-
evant spans to inform predictions, we present re-
sults achieved when these are provided directly to
models via an ‘oracle’ prior to prediction in Table
6. Access to this oracle yields a 20+ point jump
in F1, indicating that accurately extracting the rel-
evant evidence is critical. Below (Section 6.2) we
attempt to elucidate how well (or poorly) attention
mechanisms fail to find supporting evidence.

A natural question that arises in NLP tasks in
which the output depends on both a document and
a question (here, a prompt) is: how much does the
latter in fact influence model predictions (Kaushik
and Lipton, 2018)? We explore this in Table 5. Re-
lying only on the prompt (ignoring the article com-
pletely) achieves surprisingly strong performance,
outperforming a vanilla neural model (sans atten-
tion). This is not entirely unreasonable, as certain
intervention types will tend to correlate with sig-
nificant vs insignificant findings, i.e., the prompt

https://github.com/jayded/evidence-inference
https://github.com/jayded/evidence-inference


3712

Model Precision Recall F1
Best NN 0.531 0.519 0.520
NN (no attention) 0.471 0.439 0.440
- prompt 0.344 0.340 0.324
- article 0.489 0.468 0.472

Table 5: Average results achieved (macro-averages
over five runs) by the neural model when it is provided
only the article or only the prompt. We reproduce re-
sults for the best model from Table 2 and the vanilla
(no attention) end-to-end neural network for context.

Model Precision Recall F1
Heuristics 0.492 0.457 0.453
Logistic regression 0.732 0.734 0.731
Neural network 0.740 0.739 0.739

Table 6: Average results achieved when models are
provided directly with the reference evidence spans.

itself contains signal. The neural model without
attention is likely simply unable to extract mean-
ingful signal from lengthy articles, and so induced
representations merely add noise. By contrast, ig-
noring the prompt severely degrades performance.

6.2 Analyzing Attention

To provide a sense of how well models are able to
identify relevant evidence (i.e., tokens in the sup-
porting snippets marked by annotators), we report
token AUCs and evidence masses for all models
that assign scores to words. The former captures
how well models discriminate evidence from non-
evidence tokens in general; the latter measures the
relative amount of attention payed to evidence to-
kens. Concretely we calculate attention mass as
a sum of the normalized attention scores assigned
to words that belong to reference evidence spans.
Thus, e.g., if the evidence token mass were 1, this
would mean the model attended to only relevant
evidence, ignoring all other tokens. We also ex-
perimented with optimizing for this directly dur-
ing attention pretraining (see Appendix).

Aside from the Majority and LR baselines, all
of the models explored generate scores encod-
ing token relevance, either explicitly or implicitly.
Attentive neural variants induce these by scoring
contextualized representations of tokens t, ht for
relevance. Pipelined models score sentences, not
tokens. For comparison across models, we assign
the probability predicted for a given sentence to all
of the words that it contains. Note that the maxi-
mum evidence token AUC achievable when select-
ing a sentence is ∼0.92.

Qualitatively, we observe that attention weights
often, though not always, square with intuition. In

cond-attn
+ pretraining

cond-attn attn
+ pretraining

attn

Model Variants

0.00

0.02

0.04

0.06

0.08

0.10

0.12

0.14

Ev
id

en
ce

 to
ke

n 
m

as
s

Figure 5: Evidence token masses achieved by models
on the validation set, after training.

a test example wherein the intervention is propo-
fol, the comparator dexmedetomidine, and the out-
come Stroke Volume Variation (SVV) and Pulse
Pressure Variation (PPV), the conditioned, pre-
trained attention model focuses on tokens ‘svv’,
‘versus’ (suggesting comparison), and p-value in-
dicators (‘p’, ‘01’). This is not surprising given the
reasonably high evidence token AUC achieved by
this model.

Overall, despite conditioning and pretraining at-
tention mechanisms, end-to-end models remain
over 20 points behind the oracle variant (Table
6. This suggests that the model is failing to suf-
ficiently attend to the relevant evidence. Figure 5
supports this conjecture. This shows the total ev-
idence mass realized by models on the validation
set (after training for the final task of evidence in-
ference). Even pretrained models assign <14% of
total attention mass to actual evidence tokens.

We also explore how token-level discriminative
performance varies between pretrained and end-
to-end variants (without explicit attention train-
ing), and how this changes as learning progresses.
Figure 6 plots evidence token AUC over epochs
(on the validation set) for attentive model vari-
ants (conditioned and unconditioned). We show
curves for the case where we use explicit super-
vision (pretraining; dotted lines) and where rel-
evance is learned only indirectly via the down-
stream evidence inference objective (no pretrain-
ing; solid lines). Interestingly, evidence token
AUC reaches maximum values during pretraining
(shown as negative epochs) for supervised atten-
tion variants, and declines precipitously when the
training objective transitions to the downstream
task. This suggests a kind of catastrophic forget-
ting introduced due to shifting objectives.



3713

40 20 0 20 40
Epoch

0.55

0.60

0.65

0.70

0.75

0.80

0.85

0.90

0.95
Ev

id
en

ce
 to

ke
n 

AU
C

cond-attn
+ pretraining
cond-attn
attn
+ pretraining
attn

Figure 6: Validation evidence token AUCs during train-
ing. ‘pretraining’ epochs are depicted as ‘negative’ for
the two explicitly supervised attention variants. Note
that we use early stopping, so not all models run for the
same number of epochs.

7 Related Work

The proposed task is situated at the intersection
of information extraction (Cardie, 1997), natural
language inference (Bowman et al., 2015), evi-
dence mining (Rinott et al., 2015) and question
answering (Harabagiu et al., 2000; Hovy et al.,
2000). However, our focus on inferring results
from lengthy clinical trial reports pertaining to
particular prompts constitutes a unique problem,
as discussed in the Introduction.

Prior systems have attempted to extract infor-
mation from articles describing RCTs. For exam-
ple, ExaCT (Kiritchenko et al., 2010) attempts to
extract variables describing clinical trials from ar-
ticles, and ACRES (Summerscales et al., 2011) in-
gests extracts key variables from abstracts. Blake
and Lucic (2015; 2012) considered the problem
of automatically extracting interventions and out-
comes in sentences that report direct comparisons.
And Mihaila et al. (2013) have proposed annotat-
ing and extracting casual statements from biomed-
ical literature. Classifying the modality of state-
ments in scientific literature has also been investi-
gated (Thompson et al., 2008); this relates to iden-
tifying evidence.

None of these prior efforts attempted to infer
the findings concerning the extracted interventions
and outcomes, as we do here.

8 Conclusions and Future Work

We have presented the task of inferring the polar-
ity of comparative results reported in articles de-
scribing clinical trials with respect to interventions
and outcomes of interest. Such models would
render the unstructured evidence currently buried

in manuscripts actionable, in turn potentially in-
forming evidence-based care. In addition to the
practical import of this problem, the task poses
core NLP challenges related to processing lengthy,
technical texts, and performing conditional infer-
ence over entities within these.

Our baseline results establish both the feasibil-
ity and difficulty of the task. Very simple baselines
(e.g., rule-based methods) perform quite poorly,
and modern neural architectures achieve the best
results, currently. When models are provided
with reference evidence spans from an oracle, they
achieve dramatically improved performance. This
demonstrates that the key challenge concerns con-
ditionally identifying relevant snippets to inform
predictions; attention mechanisms would seem to
provide a natural means of allowing the model to
learn to focus, and we indeed found that (super-
vised) attention provides some predictive gains,
but these are relatively modest.

The gap between the model that directly con-
sumes only relevant evidence snippets (Table 6)
and the best performing end-to-end model is over
20 points in F1. Further, ignoring the article en-
tirely (relying only on the prompt) degrades per-
formance by only ∼5 points in F1, again sug-
gesting that even the pretrained, conditioned at-
tention variant is not making good use of the rele-
vant evidence contained in articles. The evidence
token mass metrics also support this: The best
models we have proposed consistently place only
∼10-15% of the attention mass on tokens actually
marked as containing relevant evidence.

We are simply not learning to attend well, even
with explicit pretraining and conditioning. This
motivates a key future research direction: design-
ing more sophisticated attention mechanisms that
(conditionally) identify spans of evidence perti-
nent to a given prompt. We hope this corpus and
task provides opportunity to pursue such models.

Acknowledgements

This work was supported by NSF CAREER
Award 1750978.

We also acknowledge ITS at Northeastern for
providing high performance computing resources
that have supported this research.

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2014. Neural machine translation by jointly



3714

learning to align and translate. arXiv preprint
arXiv:1409.0473.

Hilda Bastian, Paul Glasziou, and Iain Chalmers. 2010.
Seventy-five trials and eleven systematic reviews a
day: how will we ever keep up? PLoS Med,
7(9):e1000326.

Catherine Blake and Ana Lucic. 2015. Automatic end-
point detection to support the systematic review pro-
cess. Journal of biomedical informatics, 56:42–56.

Samuel R. Bowman, Gabor Angeli, Christopher Potts,
and Christopher D. Manning. 2015. A large an-
notated corpus for learning natural language infer-
ence. In Proceedings of the Conference on Empiri-
cal Methods in Natural Language Processing, pages
632–642. ACL.

Claire Cardie. 1997. Empirical methods in information
extraction. AI Magazine, 18(4):65.

Kyunghyun Cho, Bart Van Merriënboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014. Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint
arXiv:1406.1078.

Eunsol Choi, Daniel Hewlett, Alexandre Lacoste, Illia
Polosukhin, Jakob Uszkoreit, and Jonathan Berant.
2017. Coarse-to-fine question answering for long
documents. In Proceedings of the Association for
Computational Linguistics. ACL.

Sanda M Harabagiu, Marius A Paşca, and Steven J
Maiorano. 2000. Experiments with open-domain
textual question answering. In Proceedings of the
Association for Computational Linguistics, pages
292–298. ACL.

Eduard Hovy, Laurie Gerber, Ulf Hermjakob, Michael
Junk, and Chin-Yew Lin. 2000. Question answering
in webclopedia. In TREC, volume 52, pages 53–56.

Robin Jia and Percy Liang. 2016. Data recombina-
tion for neural semantic parsing. In Proceedings of
the Annual Meeting of the Association for Computa-
tional Linguistics (ACL), pages 12–22. Association
for Computational Linguistics.

Divyansh Kaushik and Zachary C Lipton. 2018. How
much reading does reading comprehension require?
a critical investigation of popular benchmarks.
arXiv preprint arXiv:1808.04926.

Yoon Kim, Carl Denton, Luong Hoang, and Alexan-
der M Rush. 2017. Structured attention networks.
arXiv preprint arXiv:1702.00887.

Diederik P. Kingma and Jimmy Ba. 2014. Adam:
A method for stochastic optimization. CoRR,
abs/1412.6980.

Svetlana Kiritchenko, Berry de Bruijn, Simona Carini,
Joel Martin, and Ida Sim. 2010. ExaCT: automatic
extraction of clinical trial characteristics from jour-
nal publications. BMC medical informatics and de-
cision making, 10(1):56.

Tao Lei, Regina Barzilay, and Tommi Jaakkola. 2016.
Rationalizing neural predictions. arXiv preprint
arXiv:1606.04155.

M Marre, J Shaw, M Brändle, WM Wan Bebakar,
Nor Azmi Kamaruddin, J Strand, M Zdravkovic,
TD Le Thi, S Colagiuri, and LEAD-1 SU study
group. 2009. Liraglutide, a once-daily human glp-1
analogue, added to a sulphonylurea over 26 weeks
produces greater improvements in glycaemic and
weight control compared with adding rosiglitazone
or placebo in subjects with type 2 diabetes (lead-1
su). Diabetic Medicine, 26(3):268–278.

Iain J Marshall, Anna Noel-Storr, Joël Kuiper, James
Thomas, and Byron C Wallace. 2018. Machine
learning for identifying randomized controlled tri-
als: An evaluation and practitioner’s guide. Re-
search synthesis methods.

Claudiu Mihăilă, Tomoko Ohta, Sampo Pyysalo, and
Sophia Ananiadou. 2013. Biocause: Annotating and
analysing causality in the biomedical domain. BMC
bioinformatics, 14(1):2.

Dae Hoon Park and Catherine Blake. 2012. Identifying
comparative claim sentences in full-text scientific ar-
ticles. In Proceedings of the workshop on detecting
structure in scholarly discourse, pages 1–9. Associ-
ation for Computational Linguistics.

Adam Paszke, Sam Gross, Soumith Chintala, Gre-
gory Chanan, Edward Yang, Zachary DeVito, Zem-
ing Lin, Alban Desmaison, Luca Antiga, and Adam
Lerer. 2017. Automatic differentiation in pytorch.
In NIPS-W.

Sampo Pyysalo, Filip Ginter, Hans Moen, Tapio
Salakoski, and Sophia Ananiadou. 2013. Distribu-
tional semantics resources for biomedical text pro-
cessing. Proceedings of Languages in Biology and
Medicine.

Ruty Rinott, Lena Dankin, Carlos Alzate Perez,
Mitesh M Khapra, Ehud Aharoni, and Noam
Slonim. 2015. Show me your evidence-an automatic
method for context dependent evidence detection.
In Proceedings of the 2015 Conference on Empiri-
cal Methods in Natural Language Processing, pages
440–450.

Rodney L Summerscales, Shlomo Argamon, Shangda
Bai, Jordan Hupert, and Alan Schwartz. 2011. Au-
tomatic summarization of results from clinical tri-
als. In Proceedings of the International Conference
on Bioinformatics and Biomedicine (BIBM), pages
372–377. IEEE.

https://aclweb.org/anthology/D/D15/D15-1075
https://aclweb.org/anthology/D/D15/D15-1075
https://aclweb.org/anthology/D/D15/D15-1075
http://www.aclweb.org/anthology/P16-1002
http://www.aclweb.org/anthology/P16-1002
http://arxiv.org/abs/1412.6980
http://arxiv.org/abs/1412.6980


3715

Paul Thompson, Giulia Venturi, John McNaught, Si-
monetta Montemagni, and Sophia Ananiadou. 2008.
Categorising modality in biomedical texts. In Pro-
ceedings of the LREC 2008 Workshop on Building
and Evaluating Resources for Biomedical Text Min-
ing, pages 27–34.

Guy Tsafnat, Adam Dunn, Paul Glasziou, and Enrico
Coiera. 2013. The automation of systematic re-
views: Would lead to best currently available evi-
dence at the push of a button. BMJ: British Medical
Journal, 346(7891):8–8.

Zichao Yang, Diyi Yang, Chris Dyer, Xiaodong He,
Alex Smola, and Eduard Hovy. 2016. Hierarchi-
cal attention networks for document classification.
In Proceedings of the 2016 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies.

Omar Zaidan, Jason Eisner, and Christine D Piatko.
2007. Using” annotator rationales” to improve ma-
chine learning for text categorization. In HLT-
NAACL, pages 260–267. Citeseer.

Ye Zhang, Iain J. Marshall, and Byron C. Wallace.
2016. Rationale-Augmented Convolutional Neural
Networks for Text Classification. In Proceedings of
Empirical Methods in Natural Language Processing
(EMNLP), pages 795–804. Associaton for Compu-
tational Linguistics (ACL).

Appendix

A Description of Heuristics Baseline

We describe the heuristics implemented in our
rule-based baseline model. These can be broken
into two stages: (1) finding the sentence that con-
tains the answer, and (2) interpreting the sentence
that possesses the evidence. The variant that con-
sumes the evidence spans directly (thus ”cheat-
ing”) uses only rules defined for (2). In both cases
we use a ‘points’ based approach, where simple
rules assign points to potential labels.

As an attempt to identify evidence spans, we
first split the article into sentences and tokenize
these. Each sentence is then assigned a ranking
based on the number of words in the outcome, in-
tervention, and comparator that it contains; each
map is associated with one point. The sentence
with the highest number of points is then desig-
nated as being most likely to contain the evidence
of interest.

Once this sentence is selected, we use simple
checks to try and identify a reported p-value. In
particular we search for the following three dis-
tinct forms: “p = X”, “p > X”, and “p < X”;

we use a simple RegEx to find instances of these,
ignoring whitespace.

If we identify “p = X”, we then attempt to
identify the comparator and intervention from the
prompt in the sentence, as the aim is to extract the
p-value closest to the intervention or comparator
(sentences may contain multiple p-values). If the
p-value found is greater than 0.05, we add a point
for a label of no significant difference. If the p-
value is smaller than 0.05, we add a point for a la-
bel of significant difference (both significantly in-
creases or significantly decreases). If neither the
intervention nor the comparator is found in the se-
lected sentence, then we look at all the p-values
that it contains and sum points accordingly.

In the case of “p > X”, we add a point to the la-
bel of no significant difference, as a p-value greater
than some X likely corresponds to a statistically
non-significant result.

In the case of “p < 0.05”, we add a point to a
label of significant difference, as a p-value smaller
than some X likely corresponds to varying effects
for both the intervention and comparator with re-
spect to the outcome. If there is a tie between
points pointing to a significant difference (in ei-
ther direction) and no significant difference, then
we return the latter, because it is the majority cat-
egory.

Otherwise, we assume the result is significant,
and next attempt to infer the reported direction of
the effect. To do so, we count occurrences of syn-
onyms of the word “increase” in the sentence and
compare that with the number of occurrences of
synonyms of “decrease”. Synonyms are retrieved
using WordNet via NLTK. If there are more syn-
onyms of “increase”, we return the label signif-
icantly increase; if there are more synonyms of
“decrease”, we return significantly decrease. If the
number of occurrences is equal, we return signifi-
cantly increase, as this designation is slightly more
frequent than significantly decrease.

B Annotation Costing Details

Generating each prompt cost an average of 99
cents. We thus paid about $4.14 to complete
prompt generation for each article. Doctors hired
for prompt generation were paid an average of
$19.05 an hour.

Prompts took an average of 2.54 minutes to
complete. Annotators (again MDs) were paid
an average of $13.88 dollars per hour, with each



3716

prompt costing 58 cents.
Verification cost a mere 27 cents per prompt.

Verifiers were paid, on average, $16.25 an hour.

C Additional Dataset Details

Each prompt has at least two rows, one of which
corresponds to the prompt generator’s answer, and
the other for an annotator’s. These rows can
be distinguished using the UserID column, in
which prompt generator answers are marked with
a value of ‘0’, whereas annotator UserIDs are val-
ues greater than ‘0’. Each row also includes the
verifier’s response, which denotes the validity of
that row’s answer and rationale. We additionally
include the offsets of where the rationale occurs in
the text 10. These offsets are calculated through
FuzzyWuzzy, due to the frequent differences in
encoding between rationales and extracted XML
text.

D Preprocessing Details

To process the PubMed central XML documents,
we iterate through by section, and parse subse-
quent sub-sections. Afterwards, we use an HTML
parser library to remove all tags, as these might
distract models. We removed all <p> tags that
remained due to malformed XML documents.

E Attention (and Attention Pretraining)
Variants

On the validation set we explored several substan-
tiations of attention and associatd objectives, in the
case of pre-training. These include:

1. Tokenwise. This attention variant aims to
maximize per-token evidence predictions in-
dependently, i.e., no softmax is imposed over
attention activations, and so attention weights
may range between 0 and 1. During the for-
ward pass, however, we do normalize these
weights prior to inducing the context vector.

2. Balanced tokenwise attention. This is the
same as above, except that during training
we construct samples composed of an equal
number of evidence and non-evidence tokens
(the latter far outnumbering the former, in
general).

10Offset indices are based on the XML text post pre-
processing

3. Evidence mass attention. Here we attempt
to directly optimize total quantity of attention
mass placed on evidence tokens.

During pre-training, we run for some number of
epochs over available marked evidence spans (we
used a maximum of 50, with an early-stopping
criterion using a patience of 10). This requires a
metric to determine the ‘best’ observed set of at-
tention weights during pre-training (as measured
on a nested validation set). For this we consid-
ered a few options for performance measuring cri-
terion over tokens, including evidence mass and
entropy. We ultimately settled on monitoring evi-
dence token AUC as a proxy for attention perfor-
mance over tokens.

F Validation Results and Variances

For completeness in Table 7 we report means and
ranges of all model variants explored on the vali-
dation dataset (taken over five runs). We include
in these the attention variants explained above.

For pretraining variants, trained on the ob-
served evidence spans for 50 epochs prior to shift-
ing objectives to the downstream evidence infer-
ence task. We then must select which set of
weights, over these 50 epochs, to use for ini-
tialization following pretraining. We considered
three metrics to score attentional components dur-
ing pretraining: token-level AUC (overall discrim-
inatory power of the network, with respect to
evidence/not-evidence words); entropy (with the
intuition that we seek peaky distributions); and
evidence token mass (such that most attention is
placed on evidence tokens).

We settled on using the tokenwise pretrained
variant along with token AUC as our pretraining
criterion for the test experiments, but we report
full results on the validation dataset in Table 7.

On the test set, we only considered using AUC
as the criterion.



3717

M
od

el
Pr

ec
is

io
n

R
ec

al
l

F1
To

ke
n

A
U

C
/M

as
s

+
A

ttn
.

0.
49

9
(0

.4
70

,0
.5

24
)

0.
49

9
(0

.4
61

,0
.5

05
)

0.
48

3
(0

.4
60

,0
.5

06
)

0.
74

1
/0

.0
47

+
Pr

et
ra

in
at

tn
.[

A
U

C
](

To
ke

nw
is

e
at

tn
.)

0.
51

4
(0

.5
00

,0
.5

29
)

0.
51

4
(0

.4
84

,0
.5

06
)

0.
49

7
(0

.4
85

,0
.5

08
)

0.
88

2
/0

.1
31

+
Pr

et
ra

in
at

tn
.[

E
nt

ro
py

](
To

ke
nw

is
e

at
tn

)
0.

48
7

(0
.4

46
,0

.5
16

)
0.

48
7

(0
.4

32
,0

.4
93

)
0.

47
2

(0
.4

33
,0

.4
91

)
0.

82
1

/0
.1

17
+

Pr
et

ra
in

at
tn

.[
E

vi
de

nc
e

M
as

s]
(T

ok
en

w
is

e
at

te
nt

io
n)

0.
50

1
(0

.4
82

,0
.5

25
)

0.
50

1
(0

.4
80

,0
.5

12
)

0.
49

3
(0

.4
72

,0
.5

13
)

0.
86

1
/0

.1
28

+
Pr

et
ra

in
at

tn
.[

A
U

C
](

To
ke

nw
is

e
at

tn
.b

al
an

ce
d)

0.
50

7
(0

.5
00

,0
.5

23
)

0.
50

7
(0

.4
85

,0
.5

16
)

0.
50

0
(0

.4
86

,0
.5

17
)

0.
80

3
/0

.0
62

+
Pr

et
ra

in
at

tn
.[

E
nt

ro
py

](
To

ke
nw

is
e

at
tn

.b
al

an
ce

d)
0.

48
9

(0
.4

46
,0

.4
99

)
0.

48
9

(0
.4

18
,0

.4
88

)
0.

47
0

(0
.4

15
,0

.4
91

)
0.

70
4

/0
.0

46
+

Pr
et

ra
in

at
tn

.[
E

vi
de

nc
e

M
as

s]
(T

ok
en

w
is

e
at

tn
.b

al
an

ce
d)

0.
50

2
(0

.4
99

,0
.5

22
)

0.
50

2
(0

.4
65

,0
.5

22
)

0.
48

4
(0

.4
64

,0
.5

22
)

0.
77

0
/0

.0
55

+
Pr

et
ra

in
at

tn
.[

A
U

C
](

M
ax

ev
id

en
ce

at
tn

.)
0.

44
8

(0
.4

40
,0

.4
70

)
0.

44
8

(0
.4

16
,0

.4
67

)
0.

43
3

(0
.4

11
,0

.4
67

)
0.

45
6

/0
.0

03
+

Pr
et

ra
in

at
tn

.[
E

nt
ro

py
](

M
ax

ev
id

en
ce

at
tn

.)
0.

45
8

(0
.4

40
,0

.4
71

)
0.

45
8

(0
.4

10
,0

.4
72

)
0.

43
6

(0
.4

05
,0

.4
71

)
0.

41
3

/0
.0

00
+

Pr
et

ra
in

at
tn

.[
E

vi
de

nc
e

M
as

s]
(M

ax
ev

id
en

ce
at

tn
.)

0.
51

9
(0

.5
14

,0
.5

60
)

0.
51

9
(0

.4
91

,0
.5

43
)

0.
50

8
(0

.4
92

,0
.5

47
)

0.
66

1
/0

.0
44

+
C

on
d.

at
tn

.
0.

50
9

(0
.5

10
,0

.5
16

)
0.

50
9

(0
.4

78
,0

.5
18

)
0.

49
8

(0
.4

77
,0

.5
13

)
0.

66
7

/0
.0

55
+

Pr
et

ra
in

co
nd

.a
ttn

.[
A

U
C

](
To

ke
nw

is
e

at
tn

.)
0.

50
8

(0
.5

00
,0

.5
16

)
0.

50
8

(0
.4

88
,0

.5
14

)
0.

50
1

(0
.4

88
,0

.5
13

)
0.

81
5

/0
.1

20
+

Pr
et

ra
in

co
nd

.a
tte

nt
io

n
[E

nt
ro

py
](

To
ke

nw
is

e
at

tn
.)

0.
49

4
(0

.4
52

,0
.5

25
)

0.
49

4
(0

.4
50

,0
.5

21
)

0.
48

2
(0

.4
35

,0
.5

17
)

0.
81

3
/0

.1
71

+
Pr

et
ra

in
co

nd
.a

ttn
.[

E
vi

de
nc

e
M

as
s]

(T
ok

en
w

is
e

at
tn

.)
0.

52
1

(0
.5

09
,0

.5
29

)
0.

52
1

(0
.5

01
,0

.5
24

)
0.

50
9

(0
.4

99
,0

.5
26

)
0.

80
7

/0
.1

37
+

Pr
et

ra
in

co
nd

.a
ttn

.[
A

U
C

](
To

ke
nw

is
e

at
tn

.b
al

an
ce

d)
0.

50
8

(0
.5

06
,0

.5
20

)
0.

50
8

(0
.4

89
,0

.5
14

)
0.

50
3

(0
.4

89
,0

.5
15

)
0.

76
6

/0
.0

51
+

Pr
et

ra
in

co
nd

.a
ttn

.[
E

nt
ro

py
](

To
ke

nw
is

e
at

tn
.b

al
an

ce
d)

0.
46

6
(0

.4
30

,0
.5

00
)

0.
46

6
(0

.4
25

,0
.4

77
)

0.
45

4
(0

.4
25

,0
.4

79
)

0.
62

0
/0

.0
32

+
Pr

et
ra

in
co

nd
.a

ttn
.[

E
vi

de
nc

e
M

as
s]

(T
ok

en
w

is
e

at
tn

.b
al

an
ce

d)
0.

51
6

(0
.5

20
,0

.5
16

)
0.

51
6

(0
.4

87
,0

.5
14

)
0.

50
4

(0
.4

87
,0

.5
15

)
0.

77
0

/0
.0

64
+

Pr
et

ra
in

co
nd

.a
ttn

.[
A

U
C

](
M

ax
ev

id
en

ce
at

tn
.)

0.
49

5
(0

.4
44

,0
.5

06
)

0.
49

5
(0

.4
36

,0
.4

99
)

0.
48

2
(0

.4
36

,0
.5

00
)

0.
61

7
/0

.0
42

+
Pr

et
ra

in
co

nd
.a

ttn
.[

E
nt

ro
py

](
M

ax
ev

id
en

ce
at

tn
.)

0.
44

2
(0

.4
28

,0
.4

64
)

0.
44

2
(0

.4
14

,0
.4

63
)

0.
43

5
(0

.4
13

,0
.4

60
)

0.
46

2
/0

.0
04

+
Pr

et
ra

in
co

nd
.a

ttn
.[

E
vi

de
nc

e
M

as
s]

(M
ax

ev
id

en
ce

at
tn

.)
0.

49
3

(0
.4

74
,0

.5
03

)
0.

49
3

(0
.4

74
,0

.5
04

)
0.

48
1

(0
.4

70
,0

.4
97

)
0.

63
6

/0
.0

39

Ta
bl

e
7:

M
ea

ns
an

d
(m

in
,m

ax
)

va
lu

es
ac

ro
ss

fiv
e

ru
ns

ov
er

th
e

va
lid

at
io

n
se

tf
or

at
te

nt
io

n
va

ri
an

ts
an

d
as

so
ci

at
ed

(s
el

ec
tio

n
cr

ite
ri

a)
.

T
he

la
tte

r
is

th
e

m
et

ri
c

us
ed

to
pi

ck
th

e
be

st
se

to
fw

ei
gh

ts
af

te
r5

0
pr

et
ra

in
in

g
ep

oc
hs

w
ith

w
hi

ch
to

se
ed

th
e

en
d-

ta
sk

tr
ai

ni
ng

pr
oc

es
s.


