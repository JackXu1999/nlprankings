








































Imdlawn Tashlhiyt Berber Syllabification is Quantifier-Free∗

Kristina Strother-Garcia
University of Delaware

kmsg@udel.edu

Abstract

Imdlawn Tashlhiyt Berber (ITB) is unusual
due to its tolerance of non-vocalic syllabic
nuclei. Rule-based and constraint-based ac-
counts of ITB syllabification do not directly
address the question of how complex the pro-
cess is. Model theory and formal logic allow
for comparison of complexity across differ-
ent theories of phonology by identifying the
computational power (or expressivity) of lin-
guistic formalisms in a grammar-independent
way. With these tools, I develop a mathemat-
ical formalism for representing ITB syllabifi-
cation using Quantifier-Free (QF) logic, one
of the least powerful logics known. This re-
sult indicates that ITB syllabification is rela-
tively simple from a computational standpoint
and that grammatical formalisms could suc-
ceed with even less powerful mechanisms than
are currently accepted.

1 Introduction

Accounting for syllabification in ITB has become
a sort of litmus test for phonological frameworks
handling syllable theory. Any segment can be nu-
cleic in ITB in some environment, making words
like [tX.zNt] ‘you store’ commonplace.1 Despite the
seemingly bizarre syllables reported in these words,
careful study shows that syllabification in ITB is
predictable and follows the Sonority Sequencing

∗I thank Jeff Heinz, Adam Jardine, Mai Ha Vu, and Hossep
Dolatian for insightful feedback on an earlier draft of this paper.

1Periods signify syllable boundaries and capital letters indi-
cate nucleic consonants, as in Prince and Smolensky (1993).

Principle (SSP)2 almost perfectly (Dell and Elmed-
laoui, 1985; Frampton, 2011; Prince and Smolensky,
1993). In this paper, I develop a QF transduction that
maps underlying representations (URs) to syllabi-
fied surface representations (SRs) in ITB. This result
establishes that ITB syllabification is computation-
ally simple and local in a strict sense, a fact which is
not immediately evident from previous analyses.

1.1 Motivation

Phonological processes can be thought of as func-
tions or maps (as in Tesar, 2014) from URs to SRs.
For example, the underlying string /ov@~/ (over)
maps to the syllabified SR [o.v@~] in English.

A crucial question is then: what is the nature of
this map? One way to characterize a map or function
is to examine the kind of logic needed to express it as
a transduction. Regular functions are exactly those
realized by transducers in Monadic Second-Order
(MSO) logic (Engelfriet and Hoogeboom, 2001; Fil-
iot and Reynier, 2016). A strict subset of these func-
tions correspond to transductions definable in First-
Order (FO) logic, of which a strict subset are QF-
definable.

Many regular functions correspond to hypothet-
ical UR-to-SR maps not observed in the phonol-
ogy of natural languages. Under certain assump-
tions, both rule-based theories and Optimality The-
ory (OT) overgenerate by allowing grammars for
such unattested maps (Frank and Satta, 1998; Graf,
2010; Heinz, 2011b; Heinz and Idsardi, 2013; John-

2This principle has been reiterated in one form or another by
Sievers (1881), Saussure (1916), Harris (1969), Hooper (1976),
Selkirk (1984), and others.

145
Proceedings of the Society for Computation in Linguistics (SCiL) 2018, pages 145-153.

Salt Lake City, Utah, January 4-7, 2018



son, 1972; Kaplan and Kay, 1994; Karttunen, 1993;
Karttunen, 1998). OT grammars cannot express all
regular functions, so they also undergenerate in this
sense (Buccola, 2013; Idsardi, 2000). In contrast,
Declarative Phonology (DP) grammars are FO by
definition (Coleman, 1998; Scobbie, 1991). This
will be discussed further in §2.2.

While no previous theories of phonology restrict
grammars to functions realized by QF maps, cer-
tain classes of QF-definable transductions are al-
ready known to characterize a variety of phono-
logical processes (Chandlee, 2014; Chandlee et al.,
2014; Chandlee et al., 2015; Chandlee and Lindell,
2016). The question of whether all UR-to-SR maps
in phonology are QF-definable has strong implica-
tions for typology and learnability, as it places an
upper limit on the logical complexity of phonologi-
cal maps. In this paper, I develop a QF transduction
for ITB syllabification, showing that this phonologi-
cal function is computationally local in a strict sense.

1.2 Organization of the Paper

The remainder of the paper is organized as fol-
lows. In §2 I give a brief overview of the surface
facts in ITB and previous accounts in rule-based and
constraint-based frameworks. I then introduce for-
mal word models, transductions, and logics in §3,
highlighting the implications of prohibiting quan-
tification. I develop shorthand logical predicates
to characterize the input to the ITB syllabification
transduction in §4. The transduction itself is defined
in §5. Finally, in §6 I conclude.

2 Background on ITB

In this section I review the well-formedness princi-
ples evident from SRs in ITB and briefly summarize
previous approaches to characterizing them.

2.1 The Basic Facts

Unlike most languages, ITB allows any phonetic
segment to be a syllabic nucleus. The main principle
driving syllable well-formedness in ITB is the SSP,
which states that sonority rises monotonically from
a given segment to the sonority peak of its syllable
(Selkirk, 1984). Dell and Elmedlaoui (1985) report

the following sonority hierarchy for ITB3:

vcl. stops<s vcd. stops<s vcl. fric

<s vcd. fric<s nas<s liq<s HV<s [a]
(1)

The high vocoids (HVs) are [i,j,u,w]. The symbol
<s denotes lesser sonority. As with the traditional
notion of lesser sonority, I assume that the binary
relation<s is irreflexive, asymmetric, and transitive.
It is then simple to define relations =s and ≤s, as in
(2-3). These will be of use later.

=s (x, y)
def
= ¬<s (x, y)∧¬<s (y, x) (2)

≤s (x, y) def= <s (x, y)∨=s (y, x) (3)
In addition to the SSP, there are four other prin-

ciples of syllable well-formedness to note in ITB.
First, all non-initial syllables must have an onset.
Second, initial stops and final obstruents are for-
bidden from being nucleic. Third, with the excep-
tion of a small class of morphemes, the glide/vowel
distinction among the HVs [i∼j] and [u∼w] is pre-
dictable based on syllable position (Dell and Elmed-
laoui, 1985). That is, a nucleic HV is vocalic, as in
[tag.rurt] ‘stable,’ while a non-nucleic HV is a glide,
as in [sa.wLx] ‘I spoke.’ The latter example also il-
lustrates the fourth well-formedness principle in ITB
syllabification: the SSP is violated in glide-sonorant
(GR) syllables.4 Following another vowel, the HV
in a GR syllable surfaces as a glide and forms the
onset to a nucleic sonorant, preventing hiatus. Con-
sider the UR /saulx/. The /a/ must be nucleic because
it is the most sonorous possible segment. If the /u/
were also nucleic, it could have no onset. Instead,
the /l/ becomes a nucleus and the /u/ becomes its on-
set, surfacing as the glide [w].

2.2 Previous Approaches

Dell and Elmedlaoui (1985) propose an ordered set
of iterative rules to identify syllabic nuclei, each
referring to a certain natural class (e.g., voiceless
stops). They assign nucleic status first to instances
of [a], then to HVs, then to liquids, etc., with the re-
striction that every non-initial syllable must have an
onset. Their rules do not reference sonority directly,
but are clearly applied so as to pick out the most

3vcl. = voiceless; vcd. = voiced; fric = fricative(s);
nas = nasal(s); liq = liquid(s).

4As in ‘glide-resonant’ from Dell and Elmedlaoui (1985).

146



sonorous segments first and step down in sonority
at every subsequent rule application. Any remain-
ing segments are later assigned to coda positions.
Frampton (2011) simplifies Dell and Elmedlaoui’s
(1985) treatment by introducing a way to simultane-
ously identify all points of application, making ex-
plicit reference to notions of “more sonorous” and
“more left.”

Prince and Smolensky (1993) offer an OT account
of ITB syllabification, where GEN produces every
possible syllabification of a given input form. The
two main OT constraints involved in “core syllabifi-
cation” penalize non-initial onsetless syllables and
syllables whose nuclei are not the most sonorous
segment in the syllable. The greater the absolute
difference in sonority, the more the low-sonority nu-
cleus is penalized. Additional constraints enforce
the remaining well-formedness principles described
in §2.1. Importantly, these constraints are all vio-
lable and the correct surface form is the one that vi-
olates the fewest highly ranked constraints. Global
evaluation is required because penalties are summed
over the entire candidate.

Rather than allowing SRs to violate “soft” con-
straints like in OT, DP grammars simply reject any
SR that violates any constraint (Bird et al., 1992;
Scobbie, 1991, 1996). DP relies on the Elsewhere
Condition, which stipulates that, if a sequence of
segments is targeted by multiple constraints, the
more specific constraint applies. Lexical entries
themselves are viewed as constraints, so DP does
not formalize phonological grammars as UR-to-SR
maps (Scobbie, 1991, 1993). There is only one level
of representation and all constraints must be satisfied
simultaneously. Scobbie (1993) sketches a DP treat-
ment of ITB syllabification using constraints similar
in spirit to those proposed by Prince and Smolen-
sky (1993), but crucially differ in that they are invi-
olable, unranked, and defined explicitly in FO logic.

In the remaining sections, I develop a QF trans-
duction and illustrate how ITB syllabification can be
computed without recourse to global evaluation. My
approach diverges from DP in three ways: i) I do
not make use of lexical constraints or the Elsewhere
Condition; ii) I represent syllabification as a map,
requiring two levels of representation; and iii) I use
strictly QF logic. This paper is therefore better situ-
ated with recent model-theoretic approaches that ex-

plicitly examine the computational characteristics of
phonological generalizations independent of gram-
matical formalisms (Chandlee, 2014; Graf, 2010;
Heinz, 2011a,b; Jardine, 2016; Rogers and Pullum,
2011).

3 Formal Background

Here I offer formal definitions of model theories,
word models, and transductions, as well as an in-
formal explanation of the differences among three
logics: MSO, FO, and QF. I focus on the successor
model theory, as this will be used to represent the
input to the ITB syllabification transduction.

3.1 Model Theories for Words

A word model is a type of graph useful for represent-
ing relational structures. Classes of word models are
defined by model theories. Given an alphabet Σ, a
model theory M has the signature 〈D;R;F〉 where
D is a domain, R is a a set of relations among do-
main elements (nodes), and F is a set of functions.
For every σ in Σ there is a unary relation Rσ in R
that can be thought of as a labeling relation. For ex-
ample, let Σ = {a, b, c}. Then R includes the unary
relations Ra, Rb, Rc. R may also contain additional
relations of higher arity. The following example will
help to make these definitions clear.

3.2 The Successor Model Theory

The successor model theory M� is defined in (4).

M�
def
= 〈D; {Rσ |σ ∈Σ};
{pred(x), succ(x)}〉

(4)

The unary functions pred(x) and succ(x) pick
out the immediate predecessor and successor of a
given position, respectively.5 In the general case,
succ(x) =x+ 1 and pred(x) =x− 1. To ensure
the predecessor function is total, it is defined so
that the initial position is its own predecessor, i.e.
pred(0) = 0. Similarly, the final position is its own
successor, making the successor function total. Then
in a string of n positions, succ(n) =n.

The model for the string ball under this theory is
denoted M�ball. Taking the alphabet Σ = {a, b, l},

5The use of unary functions (rather than binary relations)
for predecessor and successor is due to Chandlee and Lindell
(2016).

147



M�ball is defined in (5) and represented visually in
Figure 1.

M�ball (5)
D= {0, 1, 2, 3}
Ra = {1}
Rb = {0}
Rl = {2, 3}

succ(x) =





1 x= 0

2 x= 1

3 x= 2

4 x∈{3, 4}

pred(x) =





0 x∈{0, 1}
1 x= 2

2 x= 3

3 x= 4

Figure 1: A visual representation of M�ball.

b

0

a

1

l

2

l

3

� � �

Its domain D consists of four nodes, each repre-
sented as a rectangle with an index below it. Unary
relations are illustrated as node labels. For exam-
ple, node 1 is labeled a. This is denoted 1∈Ra,
Ra(1) = TRUE, or, equivalently, a(1) = TRUE. The
successor function is illustrated by directed edges
(arrows) with the � label. Thus 1� 2 is equivalent
to succ(1) = 2.

3.3 A Modified Successor Model Theory
The remainder of this paper uses a slight variant of
the traditional successor model theory. The key dif-
ference lies in the definition of the alphabet and the
use of non-mutually exclusive position labels.

The alphabet can be conceptualized as a set of
primitives – labels defined outside of the model the-
ory itself. In traditional word models (as in Büchi,
1960), each position has exactly one label (i.e., it be-
longs to a single unary relation). Additionally, tradi-
tional labels are simply letters of the alphabet. The
unary relations in the word models to follow are un-
traditional with respect to both of these conventions.
In line with previous work in computational phonol-

ogy (Daland et al., 2011; Heinz and Strother-Garcia,
to appear; Strother-Garcia et al., 2017), I permit each
position to have more than one label. This allows us
to represent phonological segments as bundles of in-
formation like phonological features, as well as syl-
lable position (onset, nucleus, or coda), rather than
disparate symbols.

Let F be a set of primitive phonological features.
I adopt the features given in (6) for ITB.6

F def= {voice, vocoid, high, lab, alv, post,
pal, vel, uv, phar, glot, stop, fric,

nas, approx, lat}
(6)

Then the alphabet is simply Σ =F . For each fea-
ture f ∈F , there is a unary relationRf ∈R that rep-
resents a particular position being labeled with that
feature. Let Rf be the set of such relations, defined
in (7). As with alphabet primitives in traditional
word models, Rf (x) can also be written as f(x)
for any primitive f ∈F . For example, Rvoice(x) is
equivalent to voice(x).

Rf def= {Rf | f ∈F} (7)
In addition to this set of unary relations, I will

make use of the binary sonority relations defined in
§2.1. Let the sonority relations be members of the
set Rs, as defined in (8). Then the modified succes-
sor model theory M is defined in (9).

Rs def= {<s,=s,≤s} (8)
M

def
= 〈D; {Rf ∪Rs}; {pred(x), succ(x)}〉 (9)

3.4 Graph Transductions

As word models are a type of graph, graph trans-
ductions can be used to represent input-output maps
from one word model MA to another MB . A trans-
duction is defined with a set of formulas, one for
each relation R and function F in MB . These for-
mulas are interpreted with respect the input struc-
ture in MA. See (Courcelle, 1994; Engelfriet and
Hoogeboom, 2001) for details.

For example, consider a transduction Γba that
changes all bs in a word model to as. Here MA =
MB =M�. Then given Σ = {a, b, l}, the transduc-

6lab = labial; alv = alveolar; post = postalveolar; pal =
palatal; vel = velar; uv = uvular; phar = pharyngeal; glot =
glottal; approx = approximant; lat = lateral.

148



tion Γba is the set of predicates (10-14) where the
superscript ω indicates the relations over the output.

When applied to the input M�ball, the transduc-
tion changes the label of the first position from b to
a and leaves the remaining positions unchanged, as
illustrated in Figure 2.

Rωa (x)
def
= Ra(x)∨Rb(x) (10)

Rωb (x)
def
= FALSE (11)

Rωl (x)
def
= Rl(x) (12)

succω(x)
def
= succ(x) (13)

predω(x)
def
= pred(x) (14)

Figure 2: A visual representation of Γba(M�ball).

a

0

a

1

l

2

l

3

� � �

In this example, the input and output share the
same model theory, but this need not be the case.
As will be seen in §5, new relations may be added to
the output model theory.

3.5 Logics and Locality
Statements in FO logic can use universal and exis-
tential quantifiers to quantify over elements of the
domain. MSO statements can also quantify over sets
of domain elements. For example, consider the fol-
lowing definitions from Jardine and Heinz (2015).
First, set closure under successor is defined in (15).
Then (16) defines the general precedence relation≺.
CaptialX denotes a set, while lowercase x and y de-
note elements of the domain.

closed(X)
def
= (∀x, y)(x∈X ∧x� y)
⇒ y ∈X

(15)

x≺ y def= (∀X)(x∈X ∧ closed(X)
⇒ y ∈X

(16)

Because (15) involves universal quantification
over some setX , it is strictly MSO and not FO. Sen-
tences of MSO without quantification over sets, like
(16), are FO. Sentences of FO with no quantification
are QF.7

7For formal definitions of MSO and FO, I refer the reader to

To see why quantification is important, compare
(17) to (10), which is reproduced in (18). The former
states that an output position x will be labeled a if
the corresponding input position is an a or if there is
a position labeled b somewhere in the input. Check-
ing whetherRω′a (x) is true requires global evaluation
of the string to see if any position is labeled b. This
is due to the existential quantifier ∃, which makes
(17) strictly FO. In contrast, (18) lacks any quan-
tification. Rωa (x) can be evaluated independently at
every position in the string.

Rω′a (x)
def
= Ra(x)∨ (∃y)[Rb(y)] (17)

Rωa (x)
def
= Ra(x)∨Rb(x) (18)

This example illustrates the relationship between
quantification and locality. If a predicate is stated
with quantification, computing its truth value re-
quires global evaluation of the string. If the pred-
icate is QF, truth evaluation must be possible over
a substring of bounded size. A transduction defined
entirely by QF predicates is a QF transduction. Thus
a QF transduction amounts to a constraint-checking
function that operates locally, within a bounded win-
dow of evaluation. Note that Γba is QF, with all pred-
icates referring to a single position.

4 User-Defined Predicates

Given a model theory M and an alphabet Σ, logi-
cal predicates can be defined to make it easier to re-
fer to certain types of information in the input word
model. For example, writing voice(x)∧ lab(x)∧
stop(x) to refer to a [b] is cumbersome. Instead, I
use the unary predicate b(x), defined in (19). HVs
must also be defined, as in (20).

b(x)
def
= voice(x)∧ lab(x)∧ stop(x) (19)

HV(x)
def
= high(x)∧ vocoid(x) (20)

Although I write stop(x) and b(x) similarly, note
that the former is the labeling relation for a primi-
tive of M while the latter is a predicate derived from
such primitives. I use typewriter font for primi-
tives and sans serif font for user-defined predicates.

Note that whether a formula is MSO, FO, or QF
is determined by its interpretation in terms of prim-
itives. For example, the statement HV(x)∨ b(x) is
Enderton (2001), Fagin et al. (1995), and Shoenfield (1967).

149



QF because the predicates HV(x) and b(x) are both
QF. User-defined predicates are not meant to ob-
scure the logical nature of the description; they are
just well-defined abbreviations.

4.1 Natural Classes and Word Position

Natural classes can be defined similarly to b(x).
Given the primitives in Rf , I define obs and son in
(21-22).8

obs(x)
def
= stop(x)∨ fric(x) (21)

son(x)
def
= ¬obs(x) (22)

Unary predicates can also pick out a segment’s
position in the word. Initial and final positions are
defined as in §3.2. Then a medial position is one
that is neither initial nor final. These definitions are
formalized in (23-25).

init(x)
def
= pred(x) =x (23)

fin(x)
def
= succ(x) =x (24)

med(x)
def
= ¬(init(x)∨ fin(x)) (25)

4.2 Sonority and Other Considerations

To determine syllable constituency, it is first neces-
sary to identify sonority peaks, other positions that
may be nucleic, and marked positions prohibited
from being nucleic.

A word-medial sonority peak is simply a segment
that is more sonorous than both its neighboring seg-
ments, as defined in (26). To be exhaustive, I also
define word-initial and word-final ‘peaks’ in (27)
and (28), respectively. Then a sonority peak (29)
is any of these three.

med pk(x)
def
= med(x)∧ pred(x)<s x
∧ succ(x)<s x

(26)

init pk(x)
def
= init(x)∧ succ(x)<s x (27)

fin pk(x)
def
= fin(x)∧ pred(x)<s x (28)

son pk(x)
def
= med pk(x)∨ init pk(x)
∨ fin pk(x)

(29)

Frampton (2011) observes that “a slot x is ‘more
prominent’ than an adjacent slot y . . . if they are

8obs = obstruent; son = sonorant; init = initial; fin = final;
med = medial; pk = peak; prom = prominence; mrkd = marked.

equally sonorous and x is to the left of y, un-
less x is initial.” In other words, the leftmost seg-
ment of a sonority plateau takes prominence when it
comes to assigning nucleic status, unless it is word-
initial. This configuration is captured by the pred-
icate left prom, defined in (30). Note that word-
final positions are explicitly excluded. Were this left
out of the definition, every final position would sat-
isfy left prom due to it being its own successor and,
therefore, equally sonorous to its successor (itself).
Then a prominence peak is a position that satisfies
either son pk or left prom, as in (31).

left prom(x)
def
= x=s succ(x)∧med(x) (30)

prom pk(x)
def
= son pk(x)∨ left prom(x) (31)

Prominence peaks are typically syllabic nuclei,
with three exceptions. The first two exceptions are
simple: neither initial stops nor final obstruents may
be nucleic. I refer to both as ‘marked,’ represented
by the shorthand predicate mrkd in (32). The third
exception occurs when a HV is preceded by another
vowel, resulting in a GR syllable. The shorthand
predicate GR nuc (33) picks out the sonorant in a
GR syllable, which is always nucleic.

mrkd(x)
def
= init stop(x)∨ fin obs(x) (32)

GR nuc(x)
def
= vocoid(pred(x))∧ son(x)
∧ prom pk(pred(pred(x)))

(33)

4.3 Syllable Constituency

Now it is easy to identify the syllable constituent for
any given input segment. Predicate (34) states that
a segment is nucleic if it is a) an unmarked promi-
nence peak or b) the sonorant in a GR sequence.9 A
segment is an onset if it is not nucleic, but its suc-
cessor is; this type of onset segment satisfies ons1
(35). Additionally, a word-initial obstruent satisfies
ons2 (36) if its successor satisfies ons1, as in the first
syllable of [txZ.nas] ‘store (3rd sg. fem.)’. In either
case, the segment is part of an onset, thereby satis-
fying ons (37). Finally, a segment is a coda if it is
neither an onset nor a nucleus, as in (38).

nuc(x)
def
= (prom pk(x)∧¬mrkd(x))
∨GR nuc(x)

(34)

9This insight is due to Frampton (2011).

150



ons1(x)
def
= ¬nuc(x)∧ nuc(succ(x)) (35)

ons2(x)
def
= init obs∧ ons1(succ(x)) (36)

ons(x)
def
= ons1(x)∨ ons2(x) (37)

cod(x)
def
= ¬nuc(x)∧¬ons(x) (38)

5 The ITB Syllabification Transduction

In addition to predicates corresponding to the rela-
tions in M, I will also define relations over the out-
put to indicate a segment’s position in the syllable
(ons, nuc, cod), which is not explicit in the input.
Let Rσ be the set of these three syllable constituent
labels, as in (39). Then the model theory of the out-
put will be M′, defined in (40).

Rσ def= {ons, nuc, cod} (39)
M′ def= 〈D′; {Rf ∪Rs ∪Rσ};

{pred(x), succ(x)}〉
(40)

Armed with the predicates defined in the previous
section, Γ itself is now simple to define. The trans-
duction is completely defined with predicates (42-
50). Crucially, all predicates are QF, showing that
ITB syllabification is fundamentally local in nature.

5.1 Unary Relations

Because I am concerned with syllabification and not
unrelated segmental processes, I assume all feature
labels are preserved under Γ. Recall that Rf is the
set of unary relations for phonological features de-
fined over the domain of the transduction. Let Rωf
(41) be the corresponding set of unary relations over
the codomain. For each feature f in F , there is one
such predicate Rωf , as defined in (42).

Rωf
def
= {Rωf | f ∈F} (41)

Rωf (x)
def
= Rf (x) (42)

5.2 Binary Relations

In the absence of any changes to segmental feature
specification, the binary sonority relations (42-45)
are also preserved from the input.

<ωs (x, y)
def
= <s (x, y) (43)

=ωs (x, y)
def
= =s (x, y) (44)

≤ωs (x, y)
def
= ≤s (x, y) (45)

5.3 Functions

The ordering of domain elements does not change,
so the output functions succω(x) and predω(x) are
similarly preserved, as in (46-47).

succω(x)
def
= succ(x) (46)

predω(x)
def
= pred(x) (47)

5.4 Syllable Constituents

The work of identifying onsets, nuclei, and codas in
the input form is essentially already done. All that
remains is to formalize the predicates that label the
syllable constituents in the output form. These are
given in (48-50).

nucω(x)
def
= nuc(x) (48)

onsω(x)
def
= ons(x) (49)

codω(x)
def
= cod(x) (50)

5.5 Example

To illustrate how the transduction works, consider
the underlying form /saulx/ ‘I spoke.’ Its word
model consists of five positions, 0 through 4. Each
position has a set of feature labels which I abbrevi-
ate with the shorthand segment predicates s, a, u, l,
and x, defined analogously to b (19). Table 1 gives
the truth values for the predicates relevant to syllable
structure in the word saulx.

The first position is less sonorous than the second,
with sonority falling monotonically after that. There
are no sonority plateaus, so no position may satisfy
left prom. The only prominence peak is then the
single sonority peak, position 1. Because position 4
is a final obstruent, it is marked. Note that position
1 is a vowel, position 2 is a glide, and position 3 is
a sonorant. This configuration means that position
3 satisfies GR nuc and therefore satisfies nuc, even
though it is not a prominence peak. Position 1 also
satisfies nuc by virtue of satisfying prom pk. Posi-
tions 0 and 2 satisfy ons1 because their successors
are both nucleic. Finally, position 4 satisfies cod be-
cause it satisfies neither ons nor nuc.

Figure 3 illustrates the resulting output form
Γ(Msaulx), also denoted M′saulx. Recall that the
vowel-glide distinction is predictable from syllable
constituency. Because position 2 satisfies u and ons,

151



Table 1: Truth table for Msaulx).

x 0 1 2 3 4
s(x) 3 . . . .
a(x) . 3 . . .
u(x) . . 3 . .
l(x) . . . 3 .
x(x) . . . . 3

x<s succ(x) 3 . . . .
x=s succ(x) . . . . .

son pk(x) . 3 . . .
left prom(x) . . . . .
prom pk(x) . 3 . . .

fin obs(x) . . . . 3
mrkd(x) . . . . 3

GR nuc(x) . . . 3 .
nuc(x) . 3 . 3 .

ons1(x) 3 . 3 . .
ons(x) 3 . 3 . .
cod(x) . . . . 3

it surfaces as the glide [w]. Thus the surface form is
pronounced [sa.wLx].

Figure 3: A visual representation of M′saulx.

s

ons

0

a

nuc

1

u

ons

2

l

nuc

3

x

cod

3

� � � �

6 Conclusion

I have shown that syllabification in ITB can be rep-
resented by a QF graph transduction, a formalism
restricted to substantially lower computational com-
plexity than proposed phonological grammars. Un-
like these grammatical formalisms, the logical for-
malism makes no commitment to the implementa-
tion of the UR-to-SR map.

So which aspects of complexity are genuinely lin-
guistic and which ones are by-products of the cho-
sen formalism? This paper demonstrates how model
theory and logic provide a foundation for study-
ing this question. The minimal power of the logic
needed to define a word model transduction is a
measure of the complexity of the UR-to-SR map.
Establishing that ITB syllabification is QF high-
lights an insight not apparent from grammatical for-
malisms: the local nature of computing syllable con-
stituency in ITB is exactly what precludes the need

for quantification.
This result, along with others cited previously,

suggests that a fruitful avenue of future research in
rule-based frameworks and OT would be to identify
which properties of their machinery are responsible
for their relatively high logical power. It is possible
that careful modifications may increase restrictive-
ness in a way that makes these grammars computa-
tionally equivalent to QF transductions.

References
Steven Bird, John S Coleman, Janet Pierrehumbert, and

James M Scobbie. 1992. Declarative Phonology.
In Proceedings of the XVth International Congress of
Linguists. Université Laval, Québec. Université Laval,
Québec.

Brian Buccola. 2013. On the expressivity of Optimality
Theory versus ordered rewrite rules. In Glyn Morrill
and MarkJan Nederhof, editors, Proceedings of For-
mal Grammar 2012 and 2013, volume 8306 of Lecture
Notes in Computer Science, pages 142–158, Berlin
Heidelberg. Springer-Verlag.

J. Richard Büchi. 1960. Weak second-order arithmetic
and finite automata. Mathematical Logic Quarterly,
6(1-6):66–92.

Jane Chandlee and Steven Lindell. 2016. Local lan-
guages. Paper presented at the 4th Workshop on Natu-
ral Language and Computer Science, in affiliation with
LICS at Columbia University, NY.

Jane Chandlee, Rémi Eyraud, and Jeffrey Heinz. 2014.
Learning strictly local subsequential functions. Trans-
actions of the Association for Computational Linguis-
tics, 2:491–503.

Jane Chandlee, Rémi Eyraud, and Jeffrey Heinz. 2015.
Output strictly local functions. In Proceedings of the
14th Meeting on the Mathematics of Language, pages
112–125. Association for Computational Linguistics.

Jane Chandlee. 2014. Strictly Local Phonological Pro-
cesses. Ph.D. thesis, University of Delaware.

John Coleman. 1998. Phonological representations:
their names, forms and powers. Cambridge Univer-
sity Press.

Bruno Courcelle. 1994. Monadic second-order definable
graph transductions: a survey. Theoretical Computer
Science, 126(1):53–75.

Robert Daland, Bruce Hayes, James White, Marc
Garellek, Andreas Davis, and Ingrid Normann. 2011.
Explaining sonority projection effects. Phonology,
28(197):197–234.

François Dell and Mohamed Elmedlaoui. 1985. Syllabic
consonants and syllabification in Imdlawn Tashlhiyt

152



Berber. Journal of African Languages and Linguis-
tics, 7:105–130.

Herbert B. Enderton. 2001. A Mathematical Introduction
to Logic. Academic Press, 2nd edition.

Joost Engelfriet and Hendrik Jan Hoogeboom. 2001.
MSO definable string transductions and two-way
finite-state transducers. ACM Transactions on Com-
putational Logic (TOCL), 2(2):216–254.

R. Fagin, L.J. Stockmeyer, and M.Y. Vardi. 1995. On
monadic NP vs monadic co-NP. Information and
Computation, 120(1):78 – 92.

Emmanuel Filiot and Pierre-Alain Reynier. 2016. Trans-
ducers, logic and algebra for functions of finite words.
ACM SIGLOG News, 3(3):4–19.

John Frampton. 2011. GDE syllabification: A general-
ization of Dell and Elmedlaoui’s syllabification algo-
rithm. The Linguistic Review, 28(3):241–279.

Robert Frank and Giorgio Satta. 1998. Optimality The-
ory and the generative complexity of constraint viola-
bility. Computational Linguistics, 24(2):307–315.

Thomas Graf. 2010. Logics of phonological reasoning.
Master’s thesis, University of California, Los Angeles.

James W Harris. 1969. Spanish phonology. Cambridge,
Mass.: Massachusetts Institute of Technology Press.

Jeffrey Heinz and William Idsardi. 2013. What com-
plexity differences reveal about domains in language.
Topics in cognitive science, 5(1):111–131.

Jeffrey Heinz and Kristina Strother-Garcia. to appear.
Cluster reduction in Tibetan. In Jeffrey Heinz, edi-
tor, Doing Computational Phonology. Oxford: Oxford
University Press.

Jeffrey Heinz. 2011a. Computational phonology part
I: Foundations. Language and Linguistics Compass,
5(4):140–152.

Jeffrey Heinz. 2011b. Computational phonology part II:
Grammars, learning, and the future. Language and
Linguistics Compass, 5(4):153–168.

Joan B Hooper. 1976. An introduction to natural gener-
ative phonology. New York: Academic Press.

William J Idsardi. 2000. Clarifying opacity. Linguistic
review, 17(2):337–350.

Adam Jardine and Jeffrey Heinz. 2015. A concatenation
operation to derive autosegmental graphs. In Proceed-
ings of the 14th Meeting on the Mathematics of Lan-
guage (MoL 2015), pages 139–151, Chicago, USA,
July.

Adam Jardine. 2016. Locality and non-linear represen-
tations in tonal phonology. Ph.D. thesis, University of
Delaware.

C Douglas Johnson. 1972. Formal aspects of phonologi-
cal description. The Hague: Mouton.

Ronald M Kaplan and Martin Kay. 1994. Regular mod-
els of phonological rule systems. Computational lin-
guistics, 20(3):331–378.

Lauri Karttunen. 1993. Finite-state constraints. The last
phonological rule, pages 173–194.

Lauri Karttunen. 1998. The proper treatment of opti-
mality in computational phonology: plenary talk. In
Proceedings of the International Workshop on Finite
State Methods in Natural Language Processing, pages
1–12. Association for Computational Linguistics.

Alan Prince and Paul Smolensky. 1993. Optimality The-
ory: Constraint interaction in Generative Grammar.
Blackwell, Malden, Mass.

James Rogers and Geoffrey K. Pullum. 2011. Aural pat-
tern recognition experiments and the subregular hier-
archy. Journal of Logic, Language and Information,
20:329–342.

Ferdinand de Saussure. 1916. Cours de linguistique
générale. Paris: Payot.

James M Scobbie, John S Coleman, and Steven Bird.
1996. Key aspects of Declarative Phonology. Euro-
pean Studies Research Institute, Salford.

James M Scobbie. 1991. Towards Declarative Phonol-
ogy. Edinburgh Working Papers in Cognitive Science,
7:1–27.

James M Scobbie. 1993. Constraint violation and con-
flict from the perspective of Declarative Phonology.
Canadian Journal of Linguistics/Revue canadienne de
linguistique, 38(2):155–167.

Elisabeth O Selkirk. 1984. On the major class features
and syllable theory. In M. Halle, M. Aronoff, and R. T.
Oehrle, editors, Language sound structure: Studies in
phonology. MIT Press, Cambridge, Mass.

Joseph R Shoenfield. 1967. Mathematical logic, vol-
ume 21. Reading: Addison-Wesley.

Eduard Sievers. 1881. Grundz uge der Phonetik.
Leipzig: Breitkopf and Hartel.

Kristina Strother-Garcia, Jeffrey Heinz, and Hyun Jin
Hwangbo. 2017. Using model theory for grammatical
inference: A case study from phonology. In Sicco Ver-
wer, Menno van Zaanen, and Rick Smetsers, editors,
Proceedings of The 13th International Conference on
Grammatical Inference, volume 57 of Proceedings of
Machine Learning Research, pages 66–78, Delft, The
Netherlands, 05–07 Oct. PMLR.

Bruce Tesar. 2014. Output-driven phonology: Theory
and learning. Number 139. Cambridge University
Press.

153


