



















































Improving the Transformer Translation Model with Document-Level Context


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 533–542
Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics

533

Improving the Transformer Translation Model
with Document-Level Context

Jiacheng Zhang†, Huanbo Luan†, Maosong Sun†, FeiFei Zhai#,
Jingfang Xu#, Min Zhang§ and Yang Liu†‡∗

†Institute for Artificial Intelligence
State Key Laboratory of Intelligent Technology and Systems

Department of Computer Science and Technology, Tsinghua University, Beijing, China
‡Beijing National Research Center for Information Science and Technology

#Sogou Inc., Beijing, China
§Soochow University, Suzhou, China

Abstract

Although the Transformer translation model
(Vaswani et al., 2017) has achieved state-of-
the-art performance in a variety of transla-
tion tasks, how to use document-level con-
text to deal with discourse phenomena prob-
lematic for Transformer still remains a chal-
lenge. In this work, we extend the Transformer
model with a new context encoder to repre-
sent document-level context, which is then in-
corporated into the original encoder and de-
coder. As large-scale document-level paral-
lel corpora are usually not available, we intro-
duce a two-step training method to take full
advantage of abundant sentence-level parallel
corpora and limited document-level parallel
corpora. Experiments on the NIST Chinese-
English datasets and the IWSLT French-
English datasets show that our approach im-
proves over Transformer significantly. 1

1 Introduction

The past several years have witnessed the rapid de-
velopment of neural machine translation (NMT)
(Sutskever et al., 2014; Bahdanau et al., 2015),
which investigates the use of neural networks
to model the translation process. Showing re-
markable superiority over conventional statisti-
cal machine translation (SMT), NMT has been
recognized as the new de facto method and is
widely used in commercial MT systems (Wu et al.,
2016). A variety of NMT models have been pro-
posed to map between natural languages such as
RNNencdec (Sutskever et al., 2014), RNNsearch
(Bahdanau et al., 2015), ConvS2S (Gehring et al.,
2017), and Transformer (Vaswani et al., 2017).
Among them, the Transformer model has achieved
state-of-the-art translation performance. The ca-

∗Corresponding author: Yang Liu.
1The source code is available at https://github.

com/Glaceon31/Document-Transformer

pability to minimize the path length between long-
distance dependencies in neural networks con-
tributes to its exceptional performance.

However, the Transformer model still suffers
from a major drawback: it performs translation
only at the sentence level and ignores document-
level context. Document-level context has proven
to be beneficial for improving translation perfor-
mance, not only for conventional SMT (Gong
et al., 2011; Hardmeier et al., 2012), but also for
NMT (Wang et al., 2017; Tu et al., 2018). Baw-
den et al. (2018) indicate that it is important to ex-
ploit document-level context to deal with context-
dependent phenomena which are problematic for
machine translation such as coreference, lexical
cohesion, and lexical disambiguation.

While document-level NMT has attracted in-
creasing attention from the community in the past
two years (Jean et al., 2017; Kuang et al., 2017;
Tiedemann and Scherrer, 2017; Wang et al., 2017;
Maruf and Haffari, 2018; Bawden et al., 2018;
Tu et al., 2018; Voita et al., 2018), to the best of
our knowledge, only one existing work has en-
deavored to model document-level context for the
Transformer model (Voita et al., 2018). Previous
approaches to document-level NMT have concen-
trated on the RNNsearch model (Bahdanau et al.,
2015). It is challenging to adapt these approaches
to Transformer because they are designed specifi-
cally for RNNsearch.

In this work, we propose to extend the Trans-
former model to take advantage of document-
level context. The basic idea is to use multi-
head self-attention (Vaswani et al., 2017) to com-
pute the representation of document-level context,
which is then incorporated into the encoder and
decoder using multi-head attention. Since large-
scale document-level parallel corpora are usually
hard to acquire, we propose to train sentence-
level model parameters on sentence-level paral-

https://github.com/Glaceon31/Document-Transformer
https://github.com/Glaceon31/Document-Transformer


534

Target
Embedding

Self-Attention

Encoder-Decoder
AttentionFeed-Forward

Self-Attention

Source
Embedding

Feed-Forward

Softmax

Source
Embedding

Self-Attention

Context 
AttentionFeed-Forward

Self-Attention

Context
Embedding

Feed-Forward

Target
Embedding

Self-Attention

Context 
Attention

Feed-Forward

Encoder-Decoder 
Attention

Softmax

(a) (b)

Figure 1: (a) The original Transformer translation model (Vaswani et al., 2017) and (b) the extended Transformer
translation model that exploits document-level context. The newly introduced modules are highlighted in red.

lel corpora first and then estimate document-level
model parameters on document-level parallel cor-
pora while keeping the learned original sentence-
level Transformer model parameters fixed. Our
approach has the following advantages:

1. Increased capability to capture context: the
use of multi-head attention, which signifi-
cantly reduces the path length between long-
range dependencies, helps to improve the ca-
pability to capture document-level context;

2. Small computational overhead: as all newly
introduced modules are based on highly par-
allelizable multi-head attention, there is no
significant slowdown in both training and de-
coding;

3. Better use of limited labeled data: our ap-
proach is capable of maintaining the superi-
ority over the sentence-level counterpart even
when only small-scale document-level paral-
lel corpora are available.

Experiments show that our approach achieves
an improvement of 1.96 and 0.89 BLEU points
over Transformer on Chinese-English and French-
English translation respectively by exploiting
document-level context. It also outperforms a
state-of-the-art cache-based method (Kuang et al.,
2017) adapted for Transformer.

2 Approach

2.1 Problem Statement
Our goal is to enable the Transformer translation
model (Vaswani et al., 2017) as shown in Figure
1(a) to exploit document-level context.

Formally, let X = x(1), . . . ,x(k), . . . ,x(K) be a
source-language document composed ofK source
sentences. We use x(k) = x(k)1 , . . . , x

(k)
i , . . . , x

(k)
I

to denote the k-th source sentence containing
I words. x(k)i denotes the i-th word in the
k-th source sentence. Likewise, the corre-
sponding target-language document is denoted
by Y = y(1), . . . ,y(k), . . . ,y(K) and y(k) =
y
(k)
1 , . . . , y

(k)
j , . . . , y

(k)
J represents the k-th target

sentence containing J words. y(k)j denotes the j-th
word in the k-th target sentence. We assume that
〈X,Y〉 constitutes a parallel document and each
〈x(k),y(k)〉 forms a parallel sentence.

Therefore, the document-level translation prob-
ability is given by

P (Y|X;θ) =
K∏
k=1

P (y(k)|X,Y<k;θ), (1)

where Y<k = y(1), . . . ,y(k−1) is a partial trans-
lation.

For generating y(k), the source document X can
be divided into three parts: (1) the k-th source sen-
tence X=k = x(k), (2) the source-side document-



535

level context on the left X<k = x(1), . . . ,x(k−1),
and (3) the source-side document-level context on
the right X>k = x(k+1), . . . ,x(K). As the lan-
guages used in our experiments (i.e., Chinese and
English) are written left to right, we omit X>k for
simplicity.

We also omit the target-side document-level
context Y<k due to the translation error propaga-
tion problem (Wang et al., 2017): errors made in
translating one sentence will be propagated to the
translation process of subsequent sentences. Inter-
estingly, we find that using source-side document-
level context X<k, which conveys the same infor-
mation with Y<k, helps to compute better repre-
sentations on the target side (see Table 8).

As a result, the document-level translation prob-
ability can be approximated as

P (Y|X;θ)

≈
K∏
k=1

P (y(k)|X<k,x(k);θ), (2)

=
K∏
k=1

J∏
j=1

P (y
(k)
j |X<k,x

(k),y
(k)
<j ;θ), (3)

where y(k)<j = y
(k)
1 , . . . , y

(k)
j−1 is a partial transla-

tion.
In this way, the document-level translation

model can still be defined at the sentence level
without sacrificing efficiency except that the
source-side document-level context X<k (or con-
text for short) is taken into account.

In the following, we will introduce how to rep-
resent the context (Section 2.2), how to integrate
the context (Section 2.3), and how to train the
model especially when only limited training data
is available (Section 2.4).

2.2 Document-level Context Representation
As document-level context often includes several
sentences, it is important to capture long-range
dependencies and identify relevant information.
We use multi-head self-attention (Vaswani et al.,
2017) to compute the representation of document-
level context because it is capable of reducing the
maximum path length between long-range depen-
dencies to O(1) (Vaswani et al., 2017) and deter-
mining the relative importance of different loca-
tions in the context (Bahdanau et al., 2015). Be-
cause of this property, multi-head self-attention
has proven to be effective in other NLP tasks such
as constituency parsing (Kitaev and Klein, 2018).

As shown in Figure 1(b), we use a self-attentive
encoder to compute the representation of X<k.
The input to the self-attentive encoder is a se-
quence of context word embeddings, represented
as a matrix. Suppose X<k is composed of M
source words: X<k = x1, . . . , xm, . . . , xM . We
use xm ∈ RD×1 to denote the vector representa-
tion of xm that is the sum of word embedding and
positional encoding (Vaswani et al., 2017). There-
fore, the matrix representation of X<k is given by

Xc = [x1; . . . ;xM ], (4)

where Xc ∈ RD×M is the concatenation of
all vector representations of all source contextual
words.

The self-attentive encoder is composed of a
stack of Nc identical layers. Each layer has two
sub-layers. The first sub-layer is a multi-head self-
attention:

A(1) = MultiHead(Xc,Xc,Xc), (5)

where A(1) ∈ RD×M is the hidden state calcu-
lated by the multi-head self-attention at the first
layer, MultiHead(Q,K,V) is a multi-head self-
attention function that takes a query matrix Q, a
key matrix K, and a value matrix V as inputs. In
this case, Q = K = V = Xc. This is why it
is called self-attention. Please refer to (Vaswani
et al., 2017) for more details.

Note that we follow Vaswani et al. (2017) to
use residual connection and layer normalization in
each sub-layer, which are omitted in the presenta-
tion for simplicity. For example, the actual output
of the first sub-layer is:

LayerNorm(A(1) +Xc). (6)

The second sub-layer is a simple, position-wise
fully connected feed-forward network:

C(1) =
[
FNN(A

(1)
·,1 ); . . . ; FNN(A

(1)
·,M )

]
(7)

where C(1) ∈ RD×M is the annotation of X<k af-
ter the first layer, A(1)·,m ∈ RD×1 is the column vec-
tor for the m-th contextual word, and FNN(·) is
a position-wise fully connected feed-forward net-
work (Vaswani et al., 2017).

This process iterates Nc times as follows:

A(n) = MultiHead
(
C(n−1),C(n−1),C(n−1)

)
, (8)

C(n) =
[
FNN(A

(n)
·,1 ); . . . ; FNN(A

(n)
·,M )

]
, (9)



536

where A(n) and C(n) (n = 1, . . . , Nc) are the hid-
den state and annotation at the n-th layer, respec-
tively. Note that C(0) =Xc.

2.3 Document-level Context Integration
We use multi-head attention to integrate C(Nc),
which is the representation of X<k, into both the
encoder and the decoder.

2.3.1 Integration into the Encoder
Given the k-th source sentence x(k), we usex(k)i ∈
RD×1 to denote the vector representation of the i-
th source word x(k)i , which is a sum of word em-
bedding and positional encoding. Therefore, the
initial matrix representation of x(k) is

X = [x
(k)
1 ; . . . ;x

(k)
I ], (10)

where X ∈ RD×I is the concatenation of all vec-
tor representations of source words.

As shown in Figure 1(b), we follow (Vaswani
et al., 2017) to use a stack of Ns identical lay-
ers to encode x(k). Each layer consists of three
sub-layers. The first sub-layer is a multi-head self-
attention:

B(n) = MultiHead
(
S(n−1),S(n−1),S(n−1)

)
, (11)

where S(0) = X . The second sub-layer is con-
text attention that integrates document-level con-
text into the encoder:

D(n) = MultiHead
(
B(n),C(Nc),C(Nc)

)
. (12)

The third sub-layer is a position-wise fully con-
nected feed-forward neural network:

S(n) =
[
FNN(D

(n)
·,1 ); . . . ; FNN(D

(n)
·,I )
]
, (13)

where S(n) ∈ RD×I is the representation of
the source sentence x(k) at the n-th layer (n =
1, . . . , Ns).

2.3.2 Integration into the Decoder
When generating the j-th target word y(k)j ,

the partial translation is denoted by y(k)<j =

y
(k)
1 , . . . , y

(k)
j−1. We follow Vaswani et al. (2017) to

offset the target word embeddings by one position,
resulting in the following matrix representation of
y
(k)
<j :

Y = [y
(k)
0 , . . . ,y

(k)
j−1], (14)

where y(k)0 ∈ RD×1 is the vector representation of
a begin-of-sentence token and Y ∈ RD×j is the
concatenation of all vectors.

As shown in Figure 1(b), we follow (Vaswani
et al., 2017) to use a stack of Nt identical layers to
compute target-side representations. Each layer is
composed of four sub-layers. The first sub-layer is
a multi-head self-attention:

E(n) = MultiHead
(
T(n−1),T(n−1),T(n−1)

)
, (15)

where T(0) = Y . The second sub-layer is con-
text attention that integrates document-level con-
text into the decoder:

F(n) = MultiHead
(
E(n),C(Nc),C(Nc)

)
. (16)

The third sub-layer is encoder-decoder attention
that integrates the representation of the corre-
sponding source sentence:

G(n) = MultiHead
(
F(n),S(Ns),S(Ns)

)
. (17)

The fourth sub-layer is a position-wise fully con-
nected feed-forward neural network:

T(n) =
[
FNN(G

(n)
·,1 ); . . . ; FNN(G

(n)
·,j ),

]
, (18)

where T(n) ∈ RD×j is the representation at the
n-th layer (n = 1, . . . , Nt). Note that T(0) = Y .

Finally, the probability distribution of generat-
ing the next target word y(k)j is defined using a
softmax layer:

P (y
(k)
j |X<k,x

(k),y
(k)
<j ;θ) ∝ exp(WoT

(Nt)
·,j ) (19)

where Wo ∈ R|Vy |×D is a model parameter, Vy
is the target vocabulary, and T(Nt)·,j ∈ RD×1 is a
column vector for predicting the j-th target word.

2.3.3 Context Gating
In our model, we follow Vaswani et al. (2017) to
use residual connections (He et al., 2016) around
each sub-layer to shortcut its input to its output:

Residual(H) = H+ SubLayer(H), (20)

where H is the input of the sub-layer.
While residual connections prove to be effective

for building deep architectures, there is one poten-
tial problem for our model: the residual connec-
tions after the context attention sub-layer might
increase the influence of document-level context



537

X<k in an uncontrolled way. This is undesirable
because the source sentence x(k) usually plays a
more important role in target word generation.

To address this problem, we replace the residual
connections after the context attention sub-layer
with a position-wise context gating sub-layer:

Gating(H) = λH+ (1− λ)SubLayer(H). (21)

The gating weight is given by

λ = σ(WiH+WsSubLayer(H)), (22)

where σ(·) is a sigmoid function, Wi and Ws are
model parameters.

2.4 Training
Given a document-level parallel corpus Dd, the
standard training objective is to maximize the log-
likelihood of the training data:

θ̂ = argmax
θ

{ ∑
〈X,Y〉∈Dd

logP (Y|X;θ)

}
. (23)

Unfortunately, large-scale document-level par-
allel corpora are usually unavailable, even for
resource-rich languages such as English and Chi-
nese. Under small-data training conditions,
document-level NMT is prone to underperform
sentence-level NMT because of poor estimates of
low-frequency events.

To address this problem, we adopt the idea
of freezing some parameters while tuning the re-
maining part of the model (Jean et al., 2015; Zoph
et al., 2016). We propose a two-step training strat-
egy that uses an additional sentence-level paral-
lel corpus Ds, which can be larger than Dd. We
divide model parameters into two subsets: θ =
θs ∪ θd, where θs is a set of original sentence-
level model parameters (highlighted in blue in
Figure 1(b)) and θd is a set of newly-introduced
document-level model parameters (highlighted in
red in Figure 1(b)).

In the first step, sentence-level parameters θs
are estimated on the combined sentence-level par-
allel corpus Ds ∪Dd: 2

θ̂s = argmax
θs

∑
〈x,y〉∈Ds∪Dd

logP (y|x;θs). (24)

Note that the newly introduced modules (high-
lighted in red in Figure 1(b)) are inactivated in

2It is easy to create a sentence-level parallel corpus from
Dd.

this step. P (y|x;θs) is identical to the original
Transformer model, which is a special case of our
model.

In the second step, document-level parameters
θd are estimated on the document-level parallel
corpus Dd only:

θ̂d = argmax
θd

∑
〈X,Y〉∈Dd

logP (Y|X; θ̂s,θd). (25)

Our approach is also similar to pre-training
which has been widely used in NMT (Shen et al.,
2016; Tu et al., 2018). The major difference is that
our approach keeps θ̂s fixed when estimating θd
to prevent the model from overfitting on the rela-
tively smaller document-level parallel corpora.

3 Experiments

3.1 Setup
We evaluate our approach on Chinese-English
and French-English translation tasks. In Chinese-
English translation task, the training set contains
2M Chinese-English sentence pairs with 54.8M
Chinese words and 60.8M English words. 3 The
document-level parallel corpus is a subset of the
full training set, including 41K documents with
940K sentence pairs. On average, each document
in the training set contains 22.9 sentences. We use
the NIST 2006 dataset as the development set and
the NIST 2002, 2003, 2004, 2005, 2008 datasets
as test sets. The development and test sets contain
588 documents with 5,833 sentences. On average,
each document contains 9.9 sentences.

In French-English translation task, we use the
IWSLT bilingual training data (Mauro et al., 2012)
which contains 1,824 documents with 220K sen-
tence pairs as training set. For development and
testing, we use the IWSLT 2010 development and
test sets, which contains 8 documents with 887
sentence pairs and 11 documents with 1,664 sen-
tence pairs respectively. The evaluation metric for
both tasks is case-insensitive BLEU score as cal-
culated by the multi-bleu.perl script.

In preprocessing, we use byte pair encoding
(Sennrich et al., 2016) with 32K merges to seg-
ment words into sub-word units for all languages.
For the original Transformer model and our ex-
tended model, the hidden size is set to 512 and the

3The training set consists of sentence-level parallel cor-
pora LDC2002E18, LDC2003E07, LDC2003E14, news
part of LDC2004T08 and document-level parallel corpora
LDC2002T01, LDC2004T07, LDC2005T06, LDC2005T10,
LDC2009T02, LDC2009T15, LDC2010T03.



538

# sent. 1 2 3
MT06 49.38 49.69 49.49

Table 1: Effect of context length on translation quality.
The BLEU scores are calculated on the development
set.

# Layer MT06
1 49.69
2 49.38
3 49.54
4 49.59
5 49.31
6 49.43

Table 2: Effect of self-attention layer number (i.e., Nc)
on translation quality. The BLEU scores are calculated
on the development set.

filter size is set to 2,048. The multi-head atten-
tion has 8 individual attention heads. We set N =
Ns = Nt = 6. In training, we use Adam (Kingma
and Ba, 2015) for optimization. Each mini-batch
contains approximately 24K words. We use the
learning rate decay policy described by Vaswani
et al. (2017). In decoding, the beam size is set
to 4. We use the length penalty (Wu et al., 2016)
and set the hyper-parameter α to 0.6. We use four
Tesla P40 GPUs for training and one Tesla P40
GPU for decoding. We implement our approach
on top of the open-source toolkit THUMT (Zhang
et al., 2017). 4

3.2 Effect of Context Length
We first investigate the effect of context length
(i.e., the number of preceding sentences) on our
approach. As shown in Table 1, using two pre-
ceding source sentences as document-level context
achieves the best translation performance on the
development set. Using more preceding sentences
does not bring any improvement and increases
computational cost. This confirms the finding of
Tu et al. (2018) that long-distance context only has
limited influence. Therefore, we set the number of
preceding sentences to 2 in the following experi-
ments. 5

3.3 Effect of Self-Attention Layer Number
Table 2 shows the effect of self-attention
layer number for computing representations of

4https://github.com/thumt/THUMT
5If there is no preceding sentence, we simply use a single

begin-of-sentence token.

document-level context (see Section 2.2) on trans-
lation quality. Surprisingly, using only one self-
attention layer suffices to achieve good perfor-
mance. Increasing the number of self-attention
layers does not lead to any improvements. There-
fore, we set Nc to 1 for efficiency.

3.4 Comparison with Previous Work
In Chinese-English translation task, we compare
our approach with the following previous meth-
ods:

1. (Wang et al., 2017): using a hierarchical
RNN to integrate document-level context into
the RNNsearch model. They use a document-
level parallel corpus containing 1M sentence
pairs. Table 3 gives the BLEU scores re-
ported in their paper.

2. (Kuang et al., 2017): using a cache which
stores previous translated words and topi-
cal words to incorporate document-level con-
text into the RNNsearch model. They use
a document-level parallel corpus containing
2.8M sentence pairs. Table 3 gives the BLEU
scores reported in their paper.

3. (Vaswani et al., 2017): the state-of-the-art
NMT model that does not exploit document-
level context. We use the open-source toolkit
THUMT (Zhang et al., 2017) to train and
evaluate the model. The training dataset is
our sentence-level parallel corpus containing
2M sentence pairs.

4. (Kuang et al., 2017)*: adapting the cache-
based method to the Transformer model. We
implement it on top of the open-source toolkit
THUMT. We also use the same training data
(i.e., 2M sentence pairs) and the same two-
step training strategy to estimate sentence-
and document-level parameters separately.

As shown in Table 3, using the same data, our
approach achieves significant improvements over
the original Transformer model (Vaswani et al.,
2017) (p < 0.01). The gain on the concate-
nated test set (i.e., “All”) is 1.96 BLEU points. It
also outperforms the cache-based method (Kuang
et al., 2017) adapted for Transformer significantly
(p < 0.01), which also uses the two-step train-
ing strategy. Table 4 shows that our model also
outperforms Transformer by 0.89 BLEU points on
French-English translation task.

https://github.com/thumt/THUMT


539

Method Model MT06 MT02 MT03 MT04 MT05 MT08 All
(Wang et al., 2017) RNNsearch 37.76 - - - 36.89 27.57 -
(Kuang et al., 2017) RNNsearch - 34.41 - 38.40 32.90 31.86 -

(Vaswani et al., 2017) Transformer 48.09 48.63 47.54 47.79 48.34 38.31 45.97
(Kuang et al., 2017)* Transformer 48.14 48.97 48.05 47.91 48.53 38.38 46.37

this work Transformer 49.69 50.96 50.21 49.73 49.46 39.69 47.93

Table 3: Comparison with previous works on Chinese-English translation task. The evaluation metric is case-
insensitive BLEU score. (Wang et al., 2017) use a hierarchical RNN to incorporate document-level context into
RNNsearch. (Kuang et al., 2017) use a cache to exploit document-level context for RNNsearch. (Kuang et al.,
2017)* is an adapted version of the cache-based method for Transformer. Note that “MT06” is not included in
“All”.

Method Dev Test
Transformer 29.42 35.15

this work 30.40 36.04

Table 4: Comparison with Transformer on French-
English translation task. The evaluation metric is case-
insensitive BLEU score.

> = <

Human 1 24% 45% 31%
Human 2 20% 55% 25%
Human 3 12% 52% 36%
Overall 19% 51% 31%

Table 5: Subjective evaluation of the comparison be-
tween the original Transformer model and our model.
“>” means that Transformer is better than our model,
“=” means equal, and “<” means worse.

3.5 Subjective Evaluation

We also conducted a subjective evaluation to vali-
date the benefit of exploiting document-level con-
text. All three human evaluators were asked to
compare the outputs of the original Transformer
model and our model of 20 documents contain-
ing 198 sentences, which were randomly sampled
from the test sets.

Table 5 shows the results of subjective evalu-
ation. Three human evaluators generally made
consistent judgements. On average, around 19%
of Transformer’s translations are better than that
of our model, 51% are equal, and 31% are
worse. This evaluation confirms that exploiting
document-level context helps to improve transla-
tion quality.

3.6 Evaluation of Efficiency

We evaluated the efficiency of our approach. It
takes the original Transformer model about 6.7

Method Training Decoding
Transformer 41K 872

this work 31K 364

Table 6: Evaluation of training and decoding speed.
The speed is measured in terms of word/second (wps).

hours to converge during training and the training
speed is 41K words/second. The decoding speed is
872 words/second. In contrast, it takes our model
about 7.8 hours to converge in the second step of
training. The training speed is 31K words/second.
The decoding speed is 364 words/second.

Therefore, the training speed is only reduced by
25% thanks to the high parallelism of multi-head
attention used to incorporate document-level con-
text. The gap is larger in decoding because target
words are generated in an autoregressive way in
Transformer.

3.7 Effect of Two-Step Training
Table 7 shows the effect of the proposed two-
step training strategy. The first two rows only use
sentence-level parallel corpus to train the origi-
nal Transformer model (see Eq. 24) and achieve
BLEU scores of 39.53 and 45.97. The third row
only uses the document-level parallel corpus to di-
rectly train our model (see Eq. 23) and achieves
a BLEU score of 36.52. The fourth and fifth rows
use the two-step strategy to take advantage of both
sentence- and document-level parallel corpora and
achieve BLEU scores of 40.22 and 47.93, respec-
tively.

We find that document-level NMT achieves
much worse results than sentence-level NMT (i.e.,
36.52 vs. 39.53) when only small-scale document-
level parallel corpora are available. Our two-step
training method is capable of addressing this prob-
lem by exploiting sentence-level corpora, which



540

sent. doc. MT06 MT02 MT03 MT04 MT05 MT08 All
940K - 36.20 42.41 43.12 41.02 40.93 31.49 39.53
2M - 48.09 48.63 47.54 47.79 48.34 38.31 45.97

- 940K 34.00 38.83 40.51 38.30 36.69 29.38 36.52
940K 940K 37.12 43.29 43.70 41.42 41.84 32.36 40.22
2M 940K 49.69 50.96 50.21 49.73 49.46 39.69 47.93

Table 7: Effect of two-step training. “sent.” denotes sentence-level parallel corpus and “doc.” denotes document-
level parallel corpus.

Integration MT06 MT02 MT03 MT04 MT05 MT08 All
none 48.09 48.63 47.54 47.79 48.34 38.31 45.97

encoder 48.88 50.30 49.34 48.81 49.75 39.55 47.51
decoder 49.10 50.31 49.83 49.35 49.29 39.07 47.48

both 49.69 50.96 50.21 49.73 49.46 39.69 47.93

Table 8: Effect of context integration. “none” means that no document-level context is integrated, “encoder”
means that the document-level context is integrated only into the encoder, “decoder” means that the document-
level context is integrated only into the decoder, and “both” means that the context is integrated into both the
encoder and the decoder.

Gating MT06 MT02 MT03 MT04 MT05 MT08 All
w/o 49.33 50.56 49.74 49.29 50.11 39.02 47.55
w/ 49.69 50.96 50.21 49.73 49.46 39.69 47.93

Table 9: Effect of context gating.

leads to significant improvements across all test
sets.

3.8 Effect of Context Integration

Table 8 shows the effect of integrating document-
level context to the encoder and decoder (see
Section 2.3). It is clear that integrating
document-level context into the encoder (Eq. 12)
brings significant improvements (i.e., 45.97 vs.
47.51). Similarly, it is also beneficial to inte-
grate document-level context into the decoder (Eq.
16). Combining both leads to further improve-
ments. This observation suggests that document-
level context does help to improve Transformer.

3.9 Effect of Context Gating

As shown in Table 9, we also validated the effec-
tiveness of context gating (see Section 2.3.3). We
find that replacing residual connections with con-
text gating leads to an overall improvement of 0.38
BLEU point.

3.10 Analysis

We use an example to illustrate how document-
level context helps translation (Table 10). In
order to translate the source sentence, NMT

has to disambiguate the multi-sense word “yun-
dong”, which is actually impossible without the
document-level context. The exact meaning of
“rezhong” is also highly context dependent. For-
tunately, the sense of “yundong” can be in-
ferred from the word “saiche” (car racing) in
the document-level context and “rezhong” is the
antonym of “yanjuan” (tired of). This example
shows that our model learns to resolve word sense
ambiguity and lexical cohesion problems by inte-
grating document-level context.

4 Related Work

Developing document-level models for machine
translation has been an important research direc-
tion, both for conventional SMT (Gong et al.,
2011; Hardmeier et al., 2012; Xiong et al.,
2013a,b; Garcia et al., 2014) and NMT (Jean et al.,
2017; Kuang et al., 2017; Tiedemann and Scher-
rer, 2017; Wang et al., 2017; Maruf and Haffari,
2018; Bawden et al., 2018; Tu et al., 2018; Voita
et al., 2018).

Most existing work on document-level NMT
has focused on integrating document-level con-
text into the RNNsearch model (Bahdanau et al.,



541

Context · · ·ziji ye yinwei queshao jingzheng duishou er dui saiche youxie yanjuan
shi· · ·

Source wo rengran feichang rezhong yu zhexiang yundong.
Reference I’m still very fond of the sport.
Transformer I am still very enthusiastic about this movement.
Our work I am still very keen on this sport.

Table 10: An example of Chinese-English translation. In the source sentence, “yundong” (sport or political move-
ment) is a multi-sense word and “rezhong” (fond of) is an emotional word whose meaning is dependent on its
context. Our model takes advantage of the words “saiche” (car racing) and “yanjuan” (tired of) in the document-
level context to translate the source words correctly.

2015). These approaches can be roughly divided
into two broad categories: computing the repre-
sentation of the full document-level context (Jean
et al., 2017; Tiedemann and Scherrer, 2017; Wang
et al., 2017; Maruf and Haffari, 2018; Voita et al.,
2018) and using a cache to memorize most rel-
evant information in the document-level context
(Kuang et al., 2017; Tu et al., 2018). Our approach
falls into the first category. We use multi-head at-
tention to represent and integrate document-level
context.

Voita et al. (2018) also extended Transformer to
model document-level context, but our work is dif-
ferent in modeling and training strategies. The ex-
perimental part is also different. While Voita et al.
(2018) focus on anaphora resolution, our model is
able to improve the overall translation quality by
integrating document-level context.

5 Conclusion

We have presented a method for exploiting
document-level context inside the state-of-the-art
neural translation model Transformer. Exper-
iments on Chinese-English and French-English
translation tasks show that our method is able to
improve over Transformer significantly. In the fu-
ture, we plan to further validate the effectiveness
of our approach on more language pairs.

Acknowledgments

Yang Liu is supported by the National Natural
Science Foundation of China (No. 61432013),
National Key R&D Program of China (No.
2017YFB0202204), National Natural Science
Foundation of China (No. 61761166008), Ad-
vanced Innovation Center for Language Resources
(TYR17002), and the NExT++ project supported
by the National Research Foundation, Prime Min-
isters Office, Singapore under its IRC@Singapore

Funding Initiative. This research is also supported
by Sogou Inc.

References
Dzmitry Bahdanau, KyungHyun Cho, and Yoshua

Bengio. 2015. Sequence to sequence learning with
neural networks. In Proceedings of ICLR.

Rachel Bawden, Rico Sennrich, Alexandra Birch, and
Barry Haddow. 2018. Evaluating discourse phe-
nomena in neural machine translation. In Proceed-
ings of NAACL.

Eva Martı́nez Garcia, Cristina Espãna Bonet, and Lluı́z
Màrquez. 2014. Document-level machine transla-
tion with word vector models. In Proceedings of
EACL.

Jonas Gehring, Michael Auli, David Grangier, De-
nis Yarats, and Yann N Dauphin. 2017. Convo-
lutional sequence to sequence learning. CoRR,
abs/1705.03122.

Zhengxian Gong, Min Zhang, and Guodong Zhou.
2011. Cache-based document-level statistical ma-
chine translation. In Proceedings of EMNLP.

Christian Hardmeier, Joakim Nivre, and Jörg Tiede-
mann. 2012. Document-wide decoding for phrase-
based statistical machine translation. In Proceed-
ings of EMNLP.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian
Sun. 2016. Deep residual learning for image recog-
nition. In Proceedings of CVPR.

Sébastien Jean, Kyunghyun Cho, Roland Memisevic,
and Yoshua Bengio. 2015. On using very large tar-
get vocabulary for neural machine translation. In
Proceedings of ACL.

Sebastien Jean, Stanislas Lauly, Orhan Firat, and
Kyunghyun Cho. 2017. Does neural machine
translation benefit from larger context? CoRR,
abs/1704.05135.

Diederik P Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization.



542

Nikita Kitaev and Dan Klein. 2018. Constituency pars-
ing with a self-attentive encoder.

Shaohui Kuang, Deyi Xiong, Weihua Luo, and
Guodong Zhou. 2017. Cache-based document-level
neural machine translation. CoRR, abs/1711.11221.

Sameen Maruf and Gholamreza Haffari. 2018. Docu-
ment context neural machine translation with mem-
ory networks. In Proceedings of ACL.

Cettolo Mauro, Girardi Christian, and Federico Mar-
cello. 2012. Wit3: Web inventory of transcribed and
translated talks. In Proceedings of EAMT.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Neural machine translation of rare words with
subword units. In Proceedings of ACL.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In Pro-
ceedings of ACL.

Ilya Sutskever, Oriol Vinyals, and Quoc V. Le. 2014.
Sequence to sequence learning with neural net-
works. In Proceedings of NIPS.

Jörg Tiedemann and Yves Scherrer. 2017. Neural ma-
chine translation with extended context. In Proceed-
ings of the Third Workshop on Discourse in Machine
Translation.

Zhaopeng Tu, Yang Liu, Shuming Shi, and Tong
Zhang. 2018. Learning to remember translation his-
tory with a continuous cache. Transactions of the
Association for Computational Linguistics.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N. Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Proceedings of NIPS.

Elena Voita, Pavel Serdyukov, Rico Sennrich, and Ivan
Titov. 2018. Context-aware neural machine transla-
tion learns anaphora resolution. In Proceedings of
ACL.

Longyue Wang, Zhaopeng Tu, Andy Way, and Liu
Qun. 2017. Exploiting cross-sentence context for
neural machine translation. In Proceedings of
EMNLP.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, et al. 2016. Google’s neural ma-
chine translation system: Bridging the gap between
human and machine translation. arXiv preprint
arXiv:1609.08144.

Deyi Xiong, Guosheng Ben, Min Zhang, Yajuan Lv,
and Qun Liu. 2013a. Modeling lexical cohesion for
document-level machine translation. In Proceedings
of IJCAI.

Deyi Xiong, Yang Ding, Min Zhang, and Chew Lim
Tan. 2013b. Lexical chain based cohesion models
for document-level statistical machine translation.
In Proceedings of EMNLP.

Jiacheng Zhang, Yanzhuo Ding, Shiqi Shen, Yong
Cheng, Maosong Sun, Huanbo Luan, and Yang Liu.
2017. Thumt: An open source toolkit for neural ma-
chine translation. arXiv preprint arXiv:1706.06415.

Barret Zoph, Deniz Yuret, Jonathan May, and Kevin
Knight. 2016. Transfer learning for low-resource
neural machine translation. In Proceedings of
EMNLP.


