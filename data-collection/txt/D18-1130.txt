



















































Entity Tracking Improves Cloze-style Reading Comprehension


Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 1049–1055
Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics

1049

Entity Tracking Improves Cloze-style Reading Comprehension

Luong Hoang Sam Wiseman Alexander M. Rush
School of Engineering and Applied Sciences

Harvard University
Cambridge, MA, USA

lhoanger@gmail.com, {swiseman,srush}@seas.harvard.edu

Abstract
Reading comprehension tasks test the ability
of models to process long-term context and
remember salient information. Recent work
has shown that relatively simple neural meth-
ods such as the Attention Sum-Reader can
perform well on these tasks; however, these
systems still significantly trail human perfor-
mance. Analysis suggests that many of the
remaining hard instances are related to the
inability to track entity-references throughout
documents. This work focuses on these hard
entity tracking cases with two extensions: (1)
additional entity features, and (2) training with
a multi-task tracking objective. We show
that these simple modifications improve per-
formance both independently and in combina-
tion, and we outperform the previous state of
the art on the LAMBADA dataset, particularly
on difficult entity examples.

1 Introduction

There has been tremendous interest over the past
several years in Cloze-style (Taylor, 1953) reading
comprehension tasks, datasets, and models (Her-
mann et al., 2015; Hill et al., 2016; Kadlec et al.,
2016; Dhingra et al., 2016; Cui et al., 2016). Many
of these systems apply neural models to learn to
predict answers based on contextual matching, and
have inspired other work in long-form generation
and question answering. The extent and limits
of these successes have also been a topic of in-
terest (Chen et al., 2016; Chu et al., 2017). Re-
cent analysis by Chu et al. (2017) suggests that a
significant portion of the errors made by standard
models, especially on the LAMBADA dataset (Pa-
perno et al., 2016), derive from the inability to cor-
rectly track entities or speakers, or a failure to han-
dle various forms of reference.

This work targets these shortcomings by de-
signing a model and training scheme targeted to-
wards entity tracking. Specifically we introduce

Figure 1: A LAMBADA example where the final
word “julie” (with reference chain in brackets) is
the answer, y, to be predicted from the preceding
context x. A system must know the two speak-
ers and the current dialogue turn, simple context
matching is not sufficient. Here, our model’s pre-
dictions before and after adding multi-task objec-
tive are shown.

two simple changes to a stripped down model:
(1) simple, entity-focused features, and (2) two
multi-task objectives that target entity tracking.
Our ablation analysis shows that both indepen-
dently improve entity tracking, which is the pri-
mary source of overall model’s improvement. To-
gether they lead to state-of-the-art performance on
LAMBADA dataset and near state-of-the-art on
CBT dataset (Hill et al., 2016), even with a rel-
atively simple model.

2 Background and Related Work

Cloze-style reading comprehension uses a passage
of word tokens x = x1:n (the context), with one
token xj masked; the task is to fill in the masked
word y, which was originally at position j. These
datasets aim to present a benchmark challenge re-
quiring some understanding of the context to se-
lect the correct word. This task is a prerequi-
site for problems like long-form generation and
document-based question answering.

A number of datasets in this style exist with dif-



1050

ferent focus. Here we considered the LAMBADA
dataset and the named entity portion of the Chil-
dren’s Book Test dataset (CBT-NE). LAMBADA
uses novels where examples consist of 4-5 sen-
tences and the last word to be predicted is masked,
xn. The dataset is constructed carefully to focus
on examples where humans needed the context to
predict the masked word. CBT-NE examples, on
the other hand, include 21 sentences where the
masked word is a named entity extracted from
the last sentence, with j ≤ n, and is constructed
in a more automated way. We show an example
from LAMBADA in Figure 1. In CBT, as well
as the similar CNN/Daily Mail dataset (Hermann
et al., 2015), the answer y is always contained in x
whereas in LAMBADA it may not be. Chu et al.
(2017) showed, however, that training only on ex-
amples where y is in x leads to improved overall
performance, and we adopt this approach as well.

Related Work The first popular neural network
reading comprehension models were the Attentive
Reader and its variant Impatient Reader (Hermann
et al., 2015). Both were the first to use bidirec-
tional LSTMs to encode the context paragraph and
the query separately. The Stanford Reader (Chen
et al., 2016) is a simpler version with fewer lay-
ers for inference. These models use an encoder
to map each context token xi to a vector ui. Fol-
lowing the terminology of Wang et al. (2017), ex-
plicit reference models calculate a similarity mea-
sure si = s(ui, q) between each context vector
ui and a query vector q derived for the masked
word. These similarity scores are projected to an
attention distributionα = softmax({si}) over the
context positions in 1, . . . , n, which are taken to be
candidate answers.

The Attention Sum Reader (Kadlec et al., 2016)
is a further simplified version. It computes ui and
q with separate bidirectional GRU (Chung et al.,
2014) networks, and si with a dot-product. It is
trained to minimize:

L0(θ) = − ln p(y |x, q)

= − ln
∑

i:xi=y

p(xi | q) = − ln
∑

i:xi=y

αi,

where θ is the set of all parameters associated with
the model, and y is the correct answer. At test
time, a pointer sum attention mechanism is used
to predict the word type with the highest aggre-
gate attention as the answer. The Gated Attention
Reader (Dhingra et al., 2016) leverages the same

mechanism for prediction and introduces an atten-
tion gate to modulate the joint context-query infor-
mation over multiple hops.

The Recurrent Entity Networks (Henaff et al.,
2016) uses a custom gated recurrent module, Dy-
namic Memory, to learn and update entity repre-
sentations as new examples are received. Their
gate function is combined of (1) a similarity mea-
sure between the input and the hidden states, and
(2) a set of trainable ”key” vectors which could
learn any attribute of an entity such as its loca-
tion or other entities it is interacting with in the
current context. The Query Reduction Networks
(Seo et al., 2016) is also a gated recurrent network
which tracks state in a paragraph and uses a hid-
den query vector to keep pointing to the answer at
each step. The query is successively transformed
with each new sentence to a reduced state that’s
easier to answer given the new information.

Model In this work, we were particularly inter-
ested in the shortcomings of simple models and
exploring whether or how much entity tracking
could help, since Chu et al. (2017) has pointed out
this weakness. As a result, we adapt a simplified
Attention Sum (AttSum) reader throughout all ex-
periments. Our version uses only a single bidirec-
tional GRU for both ui and q. This GRU is of size
2d, using the first d states for the context and sec-

ond d for the query. Formally, let
→
hi and

←
hi (both

in R2d) represent the forward and backward states
of a bidirectional GRU run over x, and let

→
hi,↑ and

→
hi,↓ be the first and second d states respectively,
and define || as the concatenation operator. The
context vectors are constructed as ui =

→
hi,↑||

←
hi,↑.

For datasets using the last word, the query is con-

structed as q =
→
hn,↓||

←
h1,↓. When the masked

word can be anywhere, the query is constructed

as q =
→
hj−1,↓||

←
hj+1,↓.

Our main contribution is the extension of this
simple model to incorporate entity tracking. Other
authors have explored extending neural reading
comprehension models with linguistic features,
particularly Dhingra et al. (2017) who use a modi-
fied GRU with knowledge such as coreference re-
lations and hypernymy. In Dhingra et al. (2018),
the most recent coreferent antecedent for each to-
ken is incorporated into the update equations of
the GRU unit to bias the reader towards coreferent
recency. In this work, we instead use a much sim-



1051

1 Sentence Index, POS Tag, NER Tag
2 Is among last 3 PERSON words in x
3 Is a PERSON word in the last sentence
4 Is a PERSON word identical to previous PERSON word
5 Is a PERSON word identical to next PERSON word
6 Quoted-speech Index
7 Speaker

Table 1: Word-level features used in AttSum-Feat
model.

pler set of features and compare to this and several
other models as baseline approaches.

3 Learning to Track Entities

Analysis on reading comprehension has indicated
that neural models are strong at matching local
context information but weaker at following enti-
ties through the discourse (Chen et al., 2016; Chu
et al., 2017). We consider two straightforward
ways for extending the Attention Sum baseline to
better track entities.

Method 1: Features We introduce a short-list
of features in Table 1 to augment the representa-
tion of each word in x. These features are meant
to help the system to identify and use the rela-
tionships between words in the passage.1 Features
2-5 apply only to words tagged PERSON by the
NER tagger. Features 6-7 apply only to words be-
tween opening and closing quotation marks. Fea-
ture 6 indicates the index of the quote in the doc-
ument, and Feature 7 gives the assumed speaker
of the quote using some simple rules; we provide
the rules in the Supplementary Material. Though
most of these features are novel, they are moti-
vated by recent analysis (Wang et al., 2015; Chen
et al., 2016; Wang et al., 2017).

All features are incorporated into a word’s rep-
resentation by embedding each discrete feature
into a vector of the same size as the original word
embedding, adding the vectors as well as a bias,
and applying a tanh nonlinearity.

Method 2: Multitasking We additionally en-
courage the neural model to keep track of enti-
ties by multitasking with simple auxiliary entity-
tracking tasks. Examples such as Figure 1 suggest
that keeping track of which entities are currently in

1POS tags are produced with the NLTK library (Bird
et al., 2009), and NER tags with the Stanford NER tag-
ger (Finkel et al., 2005). We additionally found it useful to
tag animate words as PERSONs on the CBT-NE data, using
the animate word list of Bergsma and Lin (2006).

scope is useful for answering reading comprehen-
sion questions. There, amy and julie are convers-
ing, and being able to track that amy is the speaker
of the final quote helps to rule her out as a candi-
date answer. We consider two tasks:

For Task 1 (L1) we train the same model to pre-
dict repeated named entities. For all named enti-
ties xj such that there is a xi = xj with i < j,
we attempt to mask and predict the word type xj .
This is done by introducing another Cloze predic-
tion, but now setting the target y = xj , reduc-
ing the context to preceding words x1:j−1 with

ui =
→
hi , and the query q =

→
hj−1. (Note that

unlike above, both of these only use the forward
states of the GRU). We use a bilinear similarity
score si = qTQui, for this prediction where Q
is a learned transformation in R2d×2d. This task is
inspired by the antecedent ranking task in corefer-
ence (Wiseman et al., 2015, 2016).

For Task 2 (L2) we train to predict the order in-
dex in which a named entity has been introduced.
For example, in Figure 1, julie would be 1, amy
would be 2, marsh would be 3, etc. The hope
here is that learning to predict when entities reap-
pear will help the model track their reoccurences.
For the blue labeled julie, the model would aim to
predict 1, even though it appears later in the con-
text. This task is inspired by the One-Hot Pointer
Reader of Wang et al. (2017) on the Who-did-
What dataset (Onishi et al., 2016). Formally, let-
ting îdx(xj) be the predicted index for xj , we min-
imize:

L2(θ) = − ln p(îdx(xj)= idx(xj) |x1:j−1)

= − ln softmax(W
→
hj)idx(xj),

where W ∈ R|E|×2d and E is the set of entity
word types in the document. Note that this is a
simpler computation, requiring only O(|E| × n)
predictions per x, whereas L1 requires O(n2).

The full model minimizes a multi-task loss:
L0(θ) + γ1L1(θ) + γ2L2(θ). Using L1 and L2
simultaneously did not lead to improved perfor-
mance however, and so either γ1, γ2 is always 0.
We believe that this is because, while the learn-
ing objectives for L1 and L2 are mathematically
different, they are both designed to similarly track
the entities mentioned so far in the document and
thus do not provide complementary information to
each other.

We found it useful to have two hyperparameters
per auxiliary task governing the number of distinct



1052

named entity word types and tokens used in defin-
ing the losses L1 and L2. In particular, per doc-
ument these hyperparameters control in a top-to-
bottom order the number of distinct named entity
word types we attempt to predict, as well as the
number of tokens of each type considered.

4 Experiments

Methods This section highlights several aspects
of our methodology; full hyperparameters are
given in the Supplementary Material. For the
training sets, we exclude examples where the an-
swer is not in the context. The validation and test
sets are not modified however and the model with
the highest accuracy on the validation set is chosen
for testing. For both tasks, the context words are
mapped to learned embeddings; importantly, we
initialize the first 100 dimensions with the 100-
dimensional GLOVE embeddings (Pennington
et al., 2014). Named entity words are anonymized,
as is done in the CNN/Daily Mail corpus (Her-
mann et al., 2015) and in some of the experiments
of Wang et al. (2017). The model is regularized
with dropout (Srivastava et al., 2014) and opti-
mized with ADAM (Kingma and Ba, 2014). For
all experiments we performed a random search
over hyperparameter values (Bergstra and Bengio,
2012), and report the results of the models that per-
formed best on the validation set. Our implemen-
tation is available at https://github.com/
harvardnlp/readcomp.

Results and Discussion Table 2 shows the full
results of our best models on the LAMBADA and
CBT-NE datasets, and compares them to recent,
best-performing results in the literature.

For both tasks the inclusion of either en-
tity features or multi-task objectives leads to
large statistically significant increases in valida-
tion and test score, according to the McNemar
test (α = 0.05) with continuity correction (Di-
etterich, 1998). Without features, AttSum + L2
achieves the best test results, whereas with fea-
tures AttSum-Feat + L1 performs best on CBT-
NE. The results on LAMBADA indicate that en-
tity tracking is a very important overlooked as-
pect of the task. Interestingly, with features in-
cluded, AttSum-Feat + L2 appears to hurt test
performance on LAMBADA and leaves CBT-
NE performance essentially unchanged, amount-
ing to a negative result for L2. On the other
hand, the effect of AttSum-Feat + L1 is pro-

LAMBADA Val Test

GA Reader (Chu et al., 2017) - 49.00
MAGE (48) (Dhingra et al., 2017) 51.10 51.60
MAGE (64) (Dhingra et al., 2017) 52.10 51.10
GA + C-GRU (Dhingra et al., 2018) - 55.69

AttSum 56.03 55.60
AttSum + L1 58.35 56.86
AttSum + L2 58.08 57.29
AttSum-Feat 59.62 59.05
AttSum-Feat + L1 60.22 59.23
AttSum-Feat + L2 60.13 58.47
CBT-NE

GA Reader (Dhingra et al., 2016) 78.50 74.90
EpiReader (Trischler et al., 2016) 75.30 69.70
DIM Reader (Liu et al., 2017) 77.10 72.20
AoA (Cui et al., 2016) 77.80 72.0
AoA + Reranker (Cui et al., 2016) 79.60 74.0

AttSum 74.35 69.96
AttSum + L1 76.20 72.16
AttSum + L2 76.80 72.60
AttSum-Feat 77.80 72.36
AttSum-Feat + L1 78.40 74.36
AttSum-Feat + L2 79.40 72.40

Table 2: Validation & Test results on all datasets.
AttSum* are our models, including variants with
features and multi-task loss. Others indicate previ-
ous best published results. All improvements over
AttSum are statistically significant (α = 0.05) ac-
cording to the McNemar test with continuity cor-
rection (Dietterich, 1998).

nounced on CBT-NE, and while our simple mod-
els do not increase the state-of-the-art test perfor-
mance on CBT-NE, they outperform “attention-
over-attention” in addition to reranking (Cui et al.,
2016), and is outperformed only by architectures
supporting “multiple-hop” inference over the doc-
ument (Dhingra et al., 2016). Our best model on
CBT-NE test set, AttSum-Feat + L1, is very close
to the current state-of-the-art result. On the vali-
dation sets for both LAMBADA and CBT-NE, the
improvements from adding features to AttSum +
Li are statistically significant (for full results refer
to our supplementary material). On LAMBADA,
the L1 multi-tasked model is a 3.5-point increase
on the state of the art.

Our method also employs fewer parameters
than other richer models such as the GA Reader
in (Dhingra et al., 2016). More specifically, in
terms of number of parameters, our models are
very similar to a 1-hop GA Reader. In contrast,
all published experiments of the latter use 3 hops
where each hop requires 2 separate Bi-GRUs, one

https://github.com/harvardnlp/readcomp
https://github.com/harvardnlp/readcomp


1053

LAMBADA All Entity Speaker Quote

AttSum 56.03 75.17 74.81 73.31
AttSum + L1 58.35 78.51 78.38 79.42
AttSum + L2 58.08 78.17 77.96 76.76
AttSum-Feat 59.62 79.40 80.34 79.68
AttSum-Feat + L1 60.22 82.00 82.98 81.67
AttSum-Feat + L2 60.14 82.06 83.06 82.60

CBT-NE

AttSum 74.35 76.28 75.08 74.96
AttSum + L1 76.20 78.03 76.98 77.33
AttSum + L2 76.80 77.45 76.27 76.48
AttSum-Feat 77.80 80.58 79.84 79.61
AttSum-Feat + L1 78.40 80.44 79.68 79.78
AttSum-Feat + L2 79.40 82.41 81.51 81.39

Table 3: Ablation results on validation sets, see text
for definitions of the numeric columns and mod-
els.

to model the document and one for the query. This
constitutes the largest difference in model size be-
tween the two approaches.

Table 3 considers the performance of the differ-
ent models based on a segmentation of the data.
Here we consider examples where: (1) Entity -
if the answer is a named entity; (2) Speaker - if
the answer is a named entity and the speaker of
quote; (3) Quote - if the answer is found within a
quoted speech. Note that Speaker and Quote cat-
egories, while mutually exclusive, are subsets of
the overall Entity category. We see that both the
additional features and multi-task objectives in-
dependently result in a clear improvement in all
categories, but that the gains are particularly pro-
nounced for named entities and specifically for
Speaker and Quote examples. Here we see siz-
able increases in performance, particularly in the
Speaker category. We see larger increases in the
more dialog heavy LAMBADA task.

As a qualitative example of the improvement af-
forded by multi-task training, in Figure 1 we show
the different predictions made by our model with
and without L1 (colored as blue and red, respec-
tively). Note that amy and julie are both entities
that have been repeated twice in the passage. In
addition to the final answer, our model with the
L1 loss was also able to predict these entities (at
the colored locations) given preceding words. Fur-
ther qualitative analysis reveals that these augmen-
tations improved the model’s ability to eliminate
non-entity choices from predictions. Some exam-
ples are shown in Figure 2.

Figure 2: LAMBADA examples where AttSum
incorrectly predicts a non-entity answer whereas
AttSum-Feat and AttSum + Li choose correctly.

5 Conclusion

This work demonstrates that learning to track en-
tities with features and multi-task learning signif-
icantly increases the performance of a baseline
reading comprehension system, particularly on the
difficult LAMBADA dataset. This result indicates
that higher-level word relationships may not be
modeled by simple neural systems, but can be in-
corporated with minor additional extensions. This
work hints that it is difficult for vanilla models to
learn long-distance entity relations, and that these
may need to be encoded directly through features
or possibly with better pre-trained representations.

Acknowledgments

SW gratefully acknowledges the support of a Siebel Scholars

award. AMR gratefully acknowledges the support of NSF

CCF-1704834, Intel Research, and Amazon AWS Research

grants.

References
Shane Bergsma and Dekang Lin. 2006. Bootstrapping

path-based pronoun resolution. In Proceedings of
the 21st International Conference on Computational
Linguistics and the 44th annual meeting of the Asso-
ciation for Computational Linguistics, pages 33–40.
Association for Computational Linguistics.

James Bergstra and Yoshua Bengio. 2012. Random
search for hyper-parameter optimization. Journal of
Machine Learning Research, 13(Feb):281–305.

Steven Bird, Ewan Klein, and Edward Loper. 2009.
Natural language processing with Python: analyz-



1054

ing text with the natural language toolkit. ” O’Reilly
Media, Inc.”.

Danqi Chen, Jason Bolton, and Christopher D. Man-
ning. 2016. A thorough examination of the
cnn/daily mail reading comprehension task. In ACL.

Zewei Chu, Hai Wang, Kevin Gimpel, and David A.
McAllester. 2017. Broad context language model-
ing as reading comprehension. In EACL, pages 52–
57.

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. arXiv preprint arXiv:1412.3555.

Yiming Cui, Zhipeng Chen, Si Wei, Shijin Wang,
Ting Liu, and Guoping Hu. 2016. Attention-over-
attention neural networks for reading comprehen-
sion. arXiv preprint arXiv:1607.04423.

Bhuwan Dhingra, Qiao Jin, Zhilin Yang, William W
Cohen, and Ruslan Salakhutdinov. 2018. Neural
models for reasoning over multiple mentions using
coreference. arXiv preprint arXiv:1804.05922.

Bhuwan Dhingra, Hanxiao Liu, Zhilin Yang,
William W Cohen, and Ruslan Salakhutdinov.
2016. Gated-attention readers for text comprehen-
sion. arXiv preprint arXiv:1606.01549.

Bhuwan Dhingra, Zhilin Yang, William W Cohen, and
Ruslan Salakhutdinov. 2017. Linguistic knowledge
as memory for recurrent neural networks. arXiv
preprint arXiv:1703.02620.

Thomas G Dietterich. 1998. Approximate statistical
tests for comparing supervised classification learn-
ing algorithms. Neural computation, 10(7):1895–
1923.

Jenny Rose Finkel, Trond Grenager, and Christopher
Manning. 2005. Incorporating non-local informa-
tion into information extraction systems by gibbs
sampling. In Proceedings of the 43rd annual meet-
ing on association for computational linguistics,
pages 363–370. Association for Computational Lin-
guistics.

Mikael Henaff, Jason Weston, Arthur Szlam, Antoine
Bordes, and Yann LeCun. 2016. Tracking the world
state with recurrent entity networks. arXiv preprint
arXiv:1612.03969.

Karl Moritz Hermann, Tomas Kocisky, Edward
Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su-
leyman, and Phil Blunsom. 2015. Teaching ma-
chines to read and comprehend. In Advances in Neu-
ral Information Processing Systems, pages 1693–
1701.

Felix Hill, Antoine Bordes, Sumit Chopra, and Jason
Weston. 2016. The goldilocks principle: Reading
children’s books with explicit memory representa-
tions. In ICLR.

Rudolf Kadlec, Martin Schmid, Ondrej Bajgar, and
Jan Kleindienst. 2016. Text understanding with
the attention sum reader network. arXiv preprint
arXiv:1603.01547.

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Zhuang Liu, Degen Huang, Kaiyu Huang, and Jing
Zhang. 2017. DIM Reader: Dual Interaction Model
for Machine Comprehension. Springer International
Publishing, Cham.

Takeshi Onishi, Hai Wang, Mohit Bansal, Kevin Gim-
pel, and David McAllester. 2016. Who did what:
A large-scale person-centered cloze dataset. arXiv
preprint arXiv:1608.05457.

Denis Paperno, Germán Kruszewski, Angeliki Lazari-
dou, Quan Ngoc Pham, Raffaella Bernardi, San-
dro Pezzelle, Marco Baroni, Gemma Boleda, and
Raquel Fernández. 2016. The LAMBADA dataset:
Word prediction requiring a broad discourse context.
In ACL.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP), pages 1532–1543.

Minjoon Seo, Sewon Min, Ali Farhadi, and Han-
naneh Hajishirzi. 2016. Query-reduction net-
works for question answering. arXiv preprint
arXiv:1606.04582.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overfitting. Journal of machine learning re-
search, 15(1):1929–1958.

Wilson L Taylor. 1953. cloze procedure: a new
tool for measuring readability. Journalism Bulletin,
30(4):415–433.

Adam Trischler, Zheng Ye, Xingdi Yuan, and Ka-
heer Suleman. 2016. Natural language com-
prehension with the epireader. arXiv preprint
arXiv:1606.02270.

Hai Wang, Mohit Bansal, Kevin Gimpel, and David
McAllester. 2015. Machine comprehension with
syntax, frames, and semantics. In Proceedings of the
53rd Annual Meeting of the Association for Compu-
tational Linguistics and the 7th International Joint
Conference on Natural Language Processing (Vol-
ume 2: Short Papers), volume 2, pages 700–706.

Hai Wang, Takeshi Onishi, Kevin Gimpel, and David
McAllester. 2017. Emergent predication structure in
hidden state vectors of neural readers. In Proceed-
ings of the 2nd Workshop on Representation Learn-
ing for NLP, pages 26–36.



1055

Sam Wiseman, Alexander M. Rush, and Stuart M.
Shieber. 2016. Learning global features for coref-
erence resolution. In NAACL HLT, pages 994–1004.

Sam Wiseman, Alexander M. Rush, Stuart M. Shieber,
and Jason Weston. 2015. Learning anaphoricity
and antecedent ranking features for coreference res-
olution. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Linguistics
(ACL), pages 1416–1426.


