



















































Rationalizing Neural Predictions


Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 107–117,
Austin, Texas, November 1-5, 2016. c©2016 Association for Computational Linguistics

Rationalizing Neural Predictions

Tao Lei, Regina Barzilay and Tommi Jaakkola
Computer Science and Artificial Intelligence Laboratory

Massachusetts Institute of Technology
{taolei, regina, tommi}@csail.mit.edu

Abstract

Prediction without justification has limited ap-
plicability. As a remedy, we learn to extract
pieces of input text as justifications – ratio-
nales – that are tailored to be short and co-
herent, yet sufficient for making the same pre-
diction. Our approach combines two modu-
lar components, generator and encoder, which
are trained to operate well together. The gen-
erator specifies a distribution over text frag-
ments as candidate rationales and these are
passed through the encoder for prediction. Ra-
tionales are never given during training. In-
stead, the model is regularized by desiderata
for rationales. We evaluate the approach on
multi-aspect sentiment analysis against manu-
ally annotated test cases. Our approach out-
performs attention-based baseline by a signif-
icant margin. We also successfully illustrate
the method on the question retrieval task.1

1 Introduction

Many recent advances in NLP problems have come
from formulating and training expressive and elabo-
rate neural models. This includes models for senti-
ment classification, parsing, and machine translation
among many others. The gains in accuracy have,
however, come at the cost of interpretability since
complex neural models offer little transparency con-
cerning their inner workings. In many applications,
such as medicine, predictions are used to drive criti-
cal decisions, including treatment options. It is nec-
essary in such cases to be able to verify and under-

1Our code and data are available at https://github.
com/taolei87/rcnn.

the	beer	was	n’t	what	i	expected,	and	i‘m	not	sure	it’s	“true	
to	 style“,	 but	 i	 thought	 it	 was	 delicious.	 a	 very	 pleasant	
ruby	red-amber	color	with	a	rela9vely	brilliant	finish,	but	a	
limited	amount	of	carbona9on,	from	the	look	of	it.	aroma	is	
what	 i	 think	 an	 amber	 ale	 should	 be	 -	 a	 nice	 blend	 of	
caramel	and	happiness	bound	together.

Review

Ratings
Look: 5 stars Smell: 4 stars

Figure 1: An example of a review with ranking in two cate-
gories. The rationale for Look prediction is shown in bold.

stand the underlying basis for the decisions. Ide-
ally, complex neural models would not only yield
improved performance but would also offer inter-
pretable justifications – rationales – for their predic-
tions.

In this paper, we propose a novel approach to in-
corporating rationale generation as an integral part
of the overall learning problem. We limit ourselves
to extractive (as opposed to abstractive) rationales.
From this perspective, our rationales are simply sub-
sets of the words from the input text that satisfy two
key properties. First, the selected words represent
short and coherent pieces of text (e.g., phrases) and,
second, the selected words must alone suffice for
prediction as a substitute of the original text. More
concretely, consider the task of multi-aspect senti-
ment analysis. Figure 1 illustrates a product review
along with user rating in terms of two categories or
aspects. If the model in this case predicts five star
rating for color, it should also identify the phrase ”a
very pleasant ruby red-amber color” as the rationale
underlying this decision.

In most practical applications, rationale genera-

107



tion must be learned entirely in an unsupervised
manner. We therefore assume that our model with
rationales is trained on the same data as the origi-
nal neural models, without access to additional ra-
tionale annotations. In other words, target rationales
are never provided during training; the intermedi-
ate step of rationale generation is guided only by the
two desiderata discussed above. Our model is com-
posed of two modular components that we call the
generator and the encoder. Our generator specifies a
distribution over possible rationales (extracted text)
and the encoder maps any such text to task specific
target values. They are trained jointly to minimize
a cost function that favors short, concise rationales
while enforcing that the rationales alone suffice for
accurate prediction.

The notion of what counts as a rationale may be
ambiguous in some contexts and the task of select-
ing rationales may therefore be challenging to eval-
uate. We focus on two domains where ambiguity
is minimal (or can be minimized). The first sce-
nario concerns with multi-aspect sentiment analysis
exemplified by the beer review corpus (McAuley et
al., 2012). A smaller test set in this corpus iden-
tifies, for each aspect, the sentence(s) that relate to
this aspect. We can therefore directly evaluate our
predictions on the sentence level with the caveat that
our model makes selections on a finer level, in terms
of words, not complete sentences. The second sce-
nario concerns with the problem of retrieving similar
questions. The extracted rationales should capture
the main purpose of the questions. We can therefore
evaluate the quality of rationales as a compressed
proxy for the full text in terms of retrieval perfor-
mance. Our model achieves high performance on
both tasks. For instance, on the sentiment predic-
tion task, our model achieves extraction accuracy of
96%, as compared to 38% and 81% obtained by the
bigram SVM and a neural attention baseline.

2 Related Work

Developing sparse interpretable models is of con-
siderable interest to the broader research commu-
nity(Letham et al., 2015; Kim et al., 2015). The need
for interpretability is even more pronounced with
recent neural models. Efforts in this area include
analyzing and visualizing state activation (Hermans

and Schrauwen, 2013; Karpathy et al., 2015; Li et
al., 2016), learning sparse interpretable word vec-
tors (Faruqui et al., 2015b), and linking word vectors
to semantic lexicons or word properties (Faruqui et
al., 2015a; Herbelot and Vecchi, 2015).

Beyond learning to understand or further con-
strain the network to be directly interpretable, one
can estimate interpretable proxies that approximate
the network. Examples include extracting “if-then”
rules (Thrun, 1995) and decision trees (Craven
and Shavlik, 1996) from trained networks. More
recently, Ribeiro et al. (2016) propose a model-
agnostic framework where the proxy model is
learned only for the target sample (and its neighbor-
hood) thus ensuring locally valid approximations.
Our work differs from these both in terms of what is
meant by an explanation and how they are derived.
In our case, an explanation consists of a concise yet
sufficient portion of the text where the mechanism
of selection is learned jointly with the predictor.

Attention based models offer another means to ex-
plicate the inner workings of neural models (Bah-
danau et al., 2015; Cheng et al., 2016; Martins
and Astudillo, 2016; Chen et al., 2015; Xu and
Saenko, 2015; Yang et al., 2015). Such models have
been successfully applied to many NLP problems,
improving both prediction accuracy as well as vi-
sualization and interpretability (Rush et al., 2015;
Rocktäschel et al., 2016; Hermann et al., 2015).
Xu et al. (2015) introduced a stochastic attention
mechanism together with a more standard soft at-
tention on image captioning task. Our rationale ex-
traction can be understood as a type of stochastic
attention although architectures and objectives dif-
fer. Moreover, we compartmentalize rationale gen-
eration from downstream encoding so as to expose
knobs to directly control types of rationales that are
acceptable, and to facilitate broader modular use in
other applications.

Finally, we contrast our work with rationale-based
classification (Zaidan et al., 2007; Marshall et al.,
2015; Zhang et al., 2016) which seek to improve pre-
diction by relying on richer annotations in the form
of human-provided rationales. In our work, ratio-
nales are never given during training. The goal is to
learn to generate them.

108



3 Extractive Rationale Generation

We formalize here the task of extractive rationale
generation and illustrate it in the context of neural
models. To this end, consider a typical NLP task
where we are provided with a sequence of words
as input, namely x = {x1, · · · , xl}, where each
xt ∈ Rd denotes the vector representation of the i-
th word. The learning problem is to map the input
sequence x to a target vector in Rm. For example,
in multi-aspect sentiment analysis each coordinate
of the target vector represents the response or rat-
ing pertaining to the associated aspect. In text re-
trieval, on the other hand, the target vectors are used
to induce similarity assessments between input se-
quences. Broadly speaking, we can solve the associ-
ated learning problem by estimating a complex pa-
rameterized mapping enc(x) from input sequences
to target vectors. We call this mapping an encoder.
The training signal for these vectors is obtained ei-
ther directly (e.g., multi-sentiment analysis) or via
similarities (e.g., text retrieval). The challenge is
that a complex neural encoder enc(x) reveals lit-
tle about its internal workings and thus offers little
in the way of justification for why a particular pre-
diction was made.

In extractive rationale generation, our goal is to
select a subset of the input sequence as a rationale.
In order for the subset to qualify as a rationale it
should satisfy two criteria: 1) the selected words
should be interpretable and 2) they ought to suffice
to reach nearly the same prediction (target vector)
as the original input. In other words, a rationale
must be short and sufficient. We will assume that
a short selection is interpretable and focus on opti-
mizing sufficiency under cardinality constraints.

We encapsulate the selection of words as a ratio-
nale generator which is another parameterized map-
ping gen(x) from input sequences to shorter se-
quences of words. Thus gen(x) must include only a
few words and enc(gen(x)) should result in nearly
the same target vector as the original input passed
through the encoder or enc(x). We can think of the
generator as a tagging model where each word in the
input receives a binary tag pertaining to whether it is
selected to be included in the rationale. In our case,
the generator is probabilistic and specifies a distri-
bution over possible selections.

The rationale generation task is entirely unsuper-
vised in the sense that we assume no explicit anno-
tations about which words should be included in the
rationale. Put another way, the rationale is intro-
duced as a latent variable, a constraint that guides
how to interpret the input sequence. The encoder
and generator are trained jointly, in an end-to-end
fashion so as to function well together.

4 Encoder and Generator

We use multi-aspect sentiment prediction as a guid-
ing example to instantiate the two key components –
the encoder and the generator. The framework itself
generalizes to other tasks.

Encoder enc(·): Given a training instance (x,y)
where x = {xt}lt=1 is the input text sequence of
length l and y ∈ [0, 1]m is the target m-dimensional
sentiment vector, the neural encoder predicts ỹ =
enc(x). If trained on its own, the encoder would
aim to minimize the discrepancy between the pre-
dicted sentiment vector ỹ and the gold target vector
y. We will use the squared error (i.e. L2 distance)
as the sentiment loss function,

L(x,y) = ‖ỹ − y‖22 = ‖enc(x)− y‖22
The encoder could be realized in many ways such
as a recurrent neural network. For example, let
ht = fe(xt,ht−1) denote a parameterized recurrent
unit mapping input word xt and previous state ht−1
to next state ht. The target vector is then generated
on the basis of the final state reached by the recur-
rent unit after processing all the words in the input
sequence. Specifically,

ht = fe(xt,ht−1), t = 1, . . . , l

ỹ = σe(W
ehl + b

e)

Generator gen(·): The rationale generator ex-
tracts a subset of text from the original input x to
function as an interpretable summary. Thus the ra-
tionale for a given sequence x can be equivalently
defined in terms of binary variables {z1, · · · , zl}
where each zt ∈ 0, 1 indicates whether word xt is
selected or not. From here on, we will use z to
specify the binary selections and thus (z,x) is the
actual rationale generated (selections, input). We
will use generator gen(x) as synonymous with a

109



probability distribution over binary selections, i.e.,
z ∼ gen(x) ≡ p(z|x) where the length of z varies
with the input x.

In a simple generator, the probability that the tth

word is selected can be assumed to be conditionally
independent from other selections given the input x.
That is, the joint probability p(z|x) factors accord-
ing to

p(z|x) =
l∏

t=1

p(zt|x) (independent selection)

The component distributions p(zt|x) can be mod-
eled using a shared bi-directional recurrent neural
network. Specifically, let

−→
f () and

←−
f () be the for-

ward and backward recurrent unit, respectively, then

−→
ht =

−→
f (xt,

−−→
ht−1)

←−
ht =

←−
f (xt,

←−−
ht+1)

p(zt|x) = σz(Wz[
−→
ht;
←−
ht] + b

z)

Independent but context dependent selection of
words is often sufficient. However, the model is un-
able to select phrases or refrain from selecting the
same word again if already chosen. To this end, we
also introduce a dependent selection of words,

p(z|x) =
l∏

t=1

p(zt|x, z1 · · · zt−1)

which can be also expressed as a recurrent neural
network. To this end, we introduce another hidden
state st whose role is to couple the selections. For
example,

p(zt|x, z1,t−1) = σz(Wz[
−→
ht;
←−
ht; st−1] + bz)

st = fz([
−→
ht;
←−
ht; zt], st−1)

Joint objective: A rationale in our definition cor-
responds to the selected words, i.e., {xk|zk = 1}.
We will use (z,x) as the shorthand for this rationale
and, thus, enc(z,x) refers to the target vector ob-
tained by applying the encoder to the rationale as the
input. Our goal here is to formalize how the ratio-
nale can be made short and meaningful yet function
well in conjunction with the encoder. Our generator
and encoder are learned jointly to interact well but
they are treated as independent units for modularity.

The generator is guided in two ways during learn-
ing. First, the rationale that it produces must suffice
as a replacement for the input text. In other words,
the target vector (sentiment) arising from the ratio-
nale should be close to the gold sentiment. The cor-
responding loss function is given by

L(z,x,y) = ‖enc(z,x)− y‖22
Note that the loss function depends directly (para-
metrically) on the encoder but only indirectly on the
generator via the sampled selection.

Second, we must guide the generator to realize
short and coherent rationales. It should select only a
few words and those selections should form phrases
(consecutive words) rather than represent isolated,
disconnected words. We therefore introduce an ad-
ditional regularizer over the selections

Ω(z) = λ1‖z‖+ λ2
∑

t

|zt − zt−1|

where the first term penalizes the number of selec-
tions while the second one discourages transitions
(encourages continuity of selections). Note that this
regularizer also depends on the generator only indi-
rectly via the selected rationale. This is because it
is easier to assess the rationale once produced rather
than directly guide how it is obtained.

Our final cost function is the combination of the
two, cost(z,x,y) = L(z,x,y) + Ω(z). Since the
selections are not provided during training, we min-
imize the expected cost:

min
θe,θg

∑

(x,y)∈D
Ez∼gen(x) [cost(z,x,y)]

where θe and θg denote the set of parameters of the
encoder and generator, respectively, and D is the
collection of training instances. Our joint objective
encourages the generator to compress the input text
into coherent summaries that work well with the as-
sociated encoder it is trained with.

Minimizing the expected cost is challenging since
it involves summing over all the possible choices
of rationales z. This summation could potentially
be made feasible with additional restrictive assump-
tions about the generator and encoder. However, we
assume only that it is possible to efficiently sample
from the generator.

110



Doubly stochastic gradient We now derive a
sampled approximation to the gradient of the ex-
pected cost objective. This sampled approxima-
tion is obtained separately for each input text x so
as to work well with an overall stochastic gradient
method. Consider therefore a training pair (x,y).
For the parameters of the generator θg,

∂Ez∼gen(x) [cost(z,x,y)]
∂θg

=
∑

z

cost(z,x,y) · ∂p(z|x)
∂θg

=
∑

z

cost(z,x,y) · ∂p(z|x)
∂θg

· p(z|x)
p(z|x)

Using the fact (log f(θ))′ = f ′(θ)/f(θ), we get

∑

z

cost(z,x,y) · ∂p(z|x)
∂θg

· p(z|x)
p(z|x)

=
∑

z

cost(z,x,y) · ∂ log p(z|x)
∂θg

· p(z|x)

= Ez∼gen(x)
[

cost(z,x,y)
∂ log p(z|x)

∂θg

]

The last term is the expected gradient where the ex-
pectation is taken with respect to the generator dis-
tribution over rationales z. Therefore, we can simply
sample a few rationales z from the generator gen(x)
and use the resulting average gradient in an overall
stochastic gradient method. A sampled approxima-
tion to the gradient with respect to the encoder pa-
rameters θe can be derived similarly,

∂Ez∼gen(x) [cost(z,x,y)]
∂θe

=
∑

z

∂cost(z,x,y)
∂θe

· p(z|x)

= Ez∼gen(x)
[
∂cost(z,x,y)

∂θe

]

Choice of recurrent unit We employ recurrent
convolution (RCNN), a refinement of local-ngram
based convolution. RCNN attempts to learn n-gram
features that are not necessarily consecutive, and
average features in a dynamic (recurrent) fashion.
Specifically, for bigrams (filter width n = 2) RCNN
computes ht = f(xt,ht−1) as follows

Number of reviews 1580k
Avg length of review 144.9
Avg correlation between aspects 63.5%
Max correlation between two aspects 79.1%
Number of annotated reviews 994

Table 1: Statistics of the beer review dataset.

λt = σ(W
λxt + U

λht−1 + b
λ)

c
(1)
t = λt � c(1)t−1 + (1− λt)� (W1xt)

c
(2)
t = λt � c(2)t−1 + (1− λt)� (c

(1)
t−1 + W2xt)

ht = tanh(c
(2)
t + b)

RCNN has been shown to work remarkably in clas-
sification and retrieval applications (Lei et al., 2015;
Lei et al., 2016) compared to other alternatives such
CNNs and LSTMs. We use it for all the recurrent
units introduced in our model.

5 Experiments

We evaluate the proposed joint model on two NLP
applications: (1) multi-aspect sentiment analysis on
product reviews and (2) similar text retrieval on
AskUbuntu question answering forum.

5.1 Multi-aspect Sentiment Analysis

Dataset We use the BeerAdvocate2 review dataset
used in prior work (McAuley et al., 2012).3 This
dataset contains 1.5 million reviews written by the
website users. The reviews are naturally multi-
aspect – each of them contains multiple sentences
describing the overall impression or one particu-
lar aspect of a beer, including appearance, smell
(aroma), palate and the taste. In addition to the writ-
ten text, the reviewer provides the ratings (on a scale
of 0 to 5 stars) for each aspect as well as an overall
rating. The ratings can be fractional (e.g. 3.5 stars),
so we normalize the scores to [0, 1] and use them as
the (only) supervision for regression.

McAuley et al. (2012) also provided sentence-
level annotations on around 1,000 reviews. Each
sentence is annotated with one (or multiple) aspect
label, indicating what aspect this sentence covers.

2www.beeradvocate.com
3http://snap.stanford.edu/data/

web-BeerAdvocate.html

111



Method Appearance Smell Palate% precision % selected % precision % selected % precision % selected
SVM 38.3 13 21.6 7 24.9 7
Attention model 80.6 13 88.4 7 65.3 7
Generator (independent) 94.8 13 93.8 7 79.3 7
Generator (recurrent) 96.3 14 95.1 7 80.2 7

Table 2: Precision of selected rationales for the first three aspects. The precision is evaluated based on whether the selected words
are in the sentences describing the target aspect, based on the sentence-level annotations. Best training epochs are selected based

on the objective value on the development set (no sentence annotation is used).

D d l |θ| MSE
SVM 260k - - 2.5M 0.0154
SVM 1580k - - 7.3M 0.0100
LSTM 260k 200 2 644k 0.0094
RCNN 260k 200 2 323k 0.0087

Table 3: Comparing neural encoders with bigram SVM model.
MSE is the mean squared error on the test set. D is the amount

of data used for training and development. d stands for the hid-

den dimension, l denotes the depth of network and |θ| denotes
the number of parameters (number of features for SVM).

We use this set as our test set to evaluate the preci-
sion of words in the extracted rationales.

Table 1 shows several statistics of the beer review
dataset. The sentiment correlation between any pair
of aspects (and the overall score) is quite high, get-
ting 63.5% on average and a maximum of 79.1%
(between the taste and overall score). If directly
training the model on this set, the model can be con-
fused due to such strong correlation. We therefore
perform a preprocessing step, picking “less corre-
lated” examples from the dataset.4 This gives us a
de-correlated subset for each aspect, each contain-
ing about 80k to 90k reviews. We use 10k as the
development set. We focus on three aspects since
the fourth aspect taste still gets > 50% correlation
with the overall sentiment.

Sentiment Prediction Before training the joint
model, it is worth assessing the neural encoder sepa-
rately to check how accurately the neural network
predicts the sentiment. To this end, we compare
neural encoders with bigram SVM model, training
medium and large SVM models using 260k and all

4Specifically, for each aspect we train a simple linear regres-
sion model to predict the rating of this aspect given the ratings
of the other four aspects. We then keep picking reviews with
largest prediction error until the sentiment correlation in the se-
lected subset increases dramatically.

0.008

0.010

0.012

0.014

0.016

0% 25% 50% 75% 100%

0.015
SVM

0.009
Encoder

Figure 2: Mean squared error of all aspects on the test set (y-
axis) when various percentages of text are extracted as ratio-

nales (x-axis). 220k training data is used.

1580k reviews respectively. As shown in Table 3,
the recurrent neural network models outperform the
SVM model for sentiment prediction and also re-
quire less training data to achieve the performance.
The LSTM and RCNN units obtain similar test er-
ror, getting 0.0094 and 0.0087 mean squared error
respectively. The RCNN unit performs slightly bet-
ter and uses less parameters. Based on the results,
we choose the RCNN encoder network with 2 stack-
ing layers and 200 hidden states.

To train the joint model, we also use RCNN unit
with 200 states as the forward and backward recur-
rent unit for the generator gen(). The dependent
generator has one additional recurrent layer. For this
layer we use 30 states so the dependent version still
has a number of parameters comparable to the inde-
pendent version. The two versions of the generator
have 358k and 323k parameters respectively.

Figure 2 shows the performance of our joint de-
pendent model when trained to predict the sentiment
of all aspects. We vary the regularization λ1 and λ2
to show various runs that extract different amount of
text as rationales. Our joint model gets performance
close to the best encoder run (with full text) when
few words are extracted.

112



a	beer	that	is	not	sold	in	my	neck	of	the	woods	,	but	managed	to	get	while	on	a	roadtrip	.	poured	into	an	imperial	pint	glass	with	a	
generous	head	that	sustained	life	throughout	.	nothing	out	of	the	ordinary	here	,	but	a	good	brew	s9ll	.	body	was	kind	of	heavy	,	but	
not	thick	.	the	hop	smell	was	excellent	and	en9cing	.	very	drinkable

very	dark	beer	.	pours	a	nice	finger	and	a	half	of	creamy	foam	and	stays	throughout	the	beer	.	smells	of	coffee	and	roasted	malt	.	has	a	
major	 coffee-like	 taste	with	hints	of	 chocolate	 .	 if	 you	 like	black	 coffee	 ,	 you	will	 love	 this	 porter	 .	 creamy	 smooth	mouthfeel	 and	
definitely	gets	smoother	on	the	palate	once	it	warms	.	it	's	an	ok	porter	but	i	feel	there	are	much	beAer	one	's	out	there	.

poured	into	a	sniBer	.	produces	a	small	coffee	head	that	reduces	quickly	.	black	as	night	.	preAy	typical	imp	.	roasted	malts	hit	
on	 the	 nose	 .	 a	 liAle	 sweet	 chocolate	 follows	 .	 big	 toasty	 character	 on	 the	 taste	 .	 in	 between	 i	 'm	 geDng	 plenty	 of	 dark	
chocolate	and	some	biAer	espresso	.	it	finishes	with	hop	biAerness	.	nice	smooth	mouthfeel	with	perfect	carbona9on	for	the	
style	.	overall	a	nice	stout	i	would	love	to	have	again	,	maybe	with	some	age	on	it	.

i	really	did	not	like	this	.	it	just	seemed	extremely	watery	.	i	dont	'	think	this	had	any	carbona9on	whatsoever	.	maybe	it	was	flat	,	who	
knows	?	but	even	if	i	got	a	bad	brew	i	do	n't	see	how	this	would	possibly	be	something	i	'd	get	9me	and	9me	again	.	i	could	taste	the	
hops	towards	the	middle	,	but	the	beer	got	preAy	nasty	towards	the	boAom	.	i	would	never	drink	this	again	,	unless	it	was	free	.	i	'm	
kind	of	upset	i	bought	this	.

a	:	poured	a	nice	dark	brown	with	a	tan	colored	head	about	half	an	inch	thick	,	nice	red/garnet	accents	when	held	to	the	light	.	liAle	
clumps	of	lacing	all	around	the	glass	,	not	too	shabby	.	not	terribly	impressive	though	s	:	smells	like	a	more	guinness-y	guinness	really	,	
there	are	some	roasted	malts	there	,	signature	guinness	smells	,	less	burnt	though	,	a	liAle	bit	of	chocolate	…	…	m	:	rela9vely	thick	,	it	
is	n't	an	export	stout	or	imperial	stout	,	but	s9ll	is	preAy	heBy	in	the	mouth	,	very	smooth	,	not	much	carbona9on	.	not	too	shabby	d	:	
not	quite	as	drinkable	as	the	draught	,	but	s9ll	not	too	bad	.	i	could	easily	see	drinking	a	few	of	these	.

Figure 3: Examples of extracted rationales indicating the sentiments of various aspects. The extracted texts for appearance, smell
and palate are shown in red, blue and green color respectively. The last example is shortened for space.

SVM Attention Gen (independent) Gen (recurrent)

1 73.9 1 89.1 6 97.4 12 96.5

3 55.9 3 88.1 13 94.9 14 96.3

5 48.5 5 86.4 16 92.9 16 91.2

7 44.7 7 84.1

9 42.2 9 82.3

11 41.2 11 79.8

13 38.3 13 77.1

15 36.7 15 74.4

17 35.1 17 71.6

30

48

65

83

100

5 7 9 11 13 15 17

SVM
Attention
Gen (independent)
Gen (recurrent)

�1

Figure 4: Precision (y-axis) when various percentages of text
are extracted as rationales (x-axis) for the appearance aspect.

Rationale Selection To evaluate the supporting
rationales for each aspect, we train the joint encoder-
generator model on each de-correlated subset. We
set the cardinality regularization λ1 between values
{2e − 4, 3e − 4, 4e − 4} so the extracted rationale
texts are neither too long nor too short. For simplic-
ity, we set λ2 = 2λ1 to encourage local coherency
of the extraction.

For comparison we use the bigram SVM model
and implement an attention-based neural network
model. The SVM model successively extracts un-
igram or bigram (from the test reviews) with the
highest feature. The attention-based model learns a
normalized attention vector of the input tokens (us-
ing similarly the forward and backward RNNs), then
the model averages over the encoder states accord-
ingly to the attention, and feed the averaged vector
to the output layer. Similar to the SVM model, the
attention-based model can selects words based on
their attention weights.

0 50 100

0.03

0.04

0.05

0.06

Gen (recurrent)
Gen (independent)

0.2

0.4

0.6

0.8

1.0

Figure 5: Learning curves of the optimized cost function on the
development set and the precision of rationales on the test set.

The smell (aroma) aspect is the target aspect.

Table 2 presents the precision of the extracted ra-
tionales calculated based on sentence-level aspect
annotations. The λ1 regularization hyper-parameter
is tuned so the two versions of our model extract
similar number of words as rationales. The SVM
and attention-based model are constrained similarly
for comparison. Figure 4 further shows the preci-
sion when different amounts of text are extracted.
Again, for our model this corresponds to changing
the λ1 regularization. As shown in the table and the
figure, our encoder-generator networks extract text
pieces describing the target aspect with high preci-
sion, ranging from 80% to 96% across the three as-
pects appearance, smell and palate. The SVM base-
line performs poorly, achieving around 30% accu-
racy. The attention-based model achieves reasonable
but worse performance than the rationale generator,
suggesting the potential of directly modeling ratio-
nales as explicit extraction.

113



Figure 5 shows the learning curves of our model
for the smell aspect. In the early training epochs,
both the independent and (recurrent) dependent se-
lection models fail to produce good rationales, get-
ting low precision as a result. After a few epochs
of exploration however, the models start to achieve
high accuracy. We observe that the dependent ver-
sion learns more quickly in general, but both ver-
sions obtain close results in the end.

Finally we conduct a qualitative case study on
the extracted rationales. Figure 3 presents several
reviews, with highlighted rationales predicted by
the model. Our rationale generator identifies key
phrases or adjectives that indicate the sentiment of
a particular aspect.

5.2 Similar Text Retrieval on QA Forum

Dataset For our second application, we use
the real-world AskUbuntu5 dataset used in recent
work (dos Santos et al., 2015; Lei et al., 2016). This
set contains a set of 167k unique questions (each
consisting a question title and a body) and 16k user-
identified similar question pairs. Following previ-
ous work, this data is used to train the neural en-
coder that learns the vector representation of the
input question, optimizing the cosine distance (i.e.
cosine similarity) between similar questions against
random non-similar ones. We use the “one-versus-
all” hinge loss (i.e. positive versus other negatives)
for the encoder, similar to (Lei et al., 2016). Dur-
ing development and testing, the model is used to
score 20 candidate questions given each query ques-
tion, and a total of 400×20 query-candidate question
pairs are annotated for evaluation6.

Task/Evaluation Setup The question descriptions
are often long and fraught with irrelevant details. In
this set-up, a fraction of the original question text
should be sufficient to represent its content, and be
used for retrieving similar questions. Therefore, we
will evaluate rationales based on the accuracy of the
question retrieval task, assuming that better ratio-
nales achieve higher performance. To put this per-
formance in context, we also report the accuracy
when full body of a question is used, as well as ti-
tles alone. The latter constitutes an upper bound on

5askubuntu.com
6https://github.com/taolei87/askubuntu

MAP (dev) MAP (test) %words
Full title 56.5 60.0 10.1
Full body 54.2 53.0 89.9

Independent
55.7 53.6 9.7
56.3 52.6 19.7

Dependent
56.1 54.6 11.6
56.5 55.6 32.8

Table 4: Comparison between rationale models (middle and
bottom rows) and the baselines using full title or body (top row).

Gen (independent) Gen (recurrent)

0.052 47.08 0.063 50.54

0.058 52.36 0.067 49.48

0.059 46.02 0.07 51.96

0.062 49.76 0.078 51.54

0.064 47.94 0.086 52.55

0.068 48.93 0.095 53.59

0.07 49.5 0.108 53.15

0.081 52.18 0.112 51.48

0.081 51.84 0.116 54.62

0.094 51.24 0.121 52.12

0.094 52.21 0.137 53

0.097 53.61 0.163 53.2

0.098 54.11 0.179 54.13

0.122 49.03 0.193 52.11

0.133 54.19 0.262 52.32

0.135 50.21 0.277 50.87

0.136 48.22 0.328 53.21

0.145 50.96 0.328 55.61

0.155 52.91 0.347 51

0.173 52.74 0.378 54.93

0.197 52.6

45.0

47.8

50.5

53.3

56.0

5% 9% 13% 16% 20%

Gen (independent)
Gen (recurrent)

�1

Figure 6: Retrieval MAP on the test set when various percent-
ages of the texts are chosen as rationales. Data points corre-

spond to models trained with different hyper-parameters.

the model performance as in this dataset titles pro-
vide short, informative summaries of the question
content. We evaluate the rationales using the mean
average precision (MAP) of retrieval.

Results Table 4 presents the results of our ratio-
nale model. We explore a range of hyper-parameter
values7. We include two runs for each version. The
first one achieves the highest MAP on the develop-
ment set, The second run is selected to compare the
models when they use roughly 10% of question text
(7 words on average). We also show the results of
different runs in Figure 6. The rationales achieve the
MAP up to 56.5%, getting close to using the titles.
The models also outperform the baseline of using
the noisy question bodies, indicating the the models’
capacity of extracting short but important fragments.

Figure 7 shows the rationales for several questions
in the AskUbuntu domain, using the recurrent ver-
sion with around 10% extraction. Interestingly, the
model does not always select words from the ques-
tion title. The reasons are that the question body
can contain the same or even complementary infor-
mation useful for retrieval. Indeed, some rationale
fragments shown in the figure are error messages,

7λ1 ∈ {.008, .01, .012, .015}, λ2 = {0, λ1, 2λ1}, dropout
∈ {0.1, 0.2}

114



i	accidentally	removed	the	ubuntu	soBware	centre	,	when	i	was	actually	trying	to	remove	my	ubuntu	one	applica9ons	.	although	i	do	
n't	remember	directly	uninstalling	the	centre	,	i	think	dele9ng		one	of	those	packages	might	have	triggered	it	.	i	can	not	look	at	history	
of	applica9on	changes	,	as	the	soBware	centre	is	missing	.	please	advise	on	how	to	install	,	or	rather	reinstall	,	ubuntu	soBware	centre	
on	my	computer	.	how	do	i	install	ubuntu	soBware	centre	applica9on	?

i	know	this	will	be	an	odd	ques9on	,	but	 i	was	wondering	 if	anyone	knew	how	to	 install	 the	ubuntu	 installer	package	 in	an	ubuntu	
installa9on	.	to	clarify	,	when	you	boot	up	to	an	ubuntu	livecd	,	it	's	got	the	installer	program	available	so	that	you	can	install	ubuntu	to	
a	drive	.	naturally	,	this	program	is	not	present	in	the	installed	ubuntu	.	is	there	,	though	,	a	way	to	download	and	install	it	like	other	
packages	?	invariably	,	someone	will	ask	what	i	'm	trying	to	do	,	and	the	answer	…	install	installer	package	on	an	installed	system	?

what	is	the	easiest	way	to	install	all	the	media	codec	available	for	ubuntu	?	i	am	having	issues	with	mul9ple	applica9ons	promp9ng	
me	to	install	codecs	before	they	can	play	my	files	.	how	do	i		install	media	codecs	?

what	should	i	do	when	i	see	<unk>	report	this	<unk>	?	an	unresolvable	problem	occurred	while	ini9alizing	the	package	informa9on	.	
please	report	this	bug	against	the	'update-manager	'	package	and	include	the	following	error	message	:	e	:	encountered	a	sec9on	with	
no	package	:	header	e	:	problem	with	mergelist	<unk>	e	:	the	package	lists	or	status	file	could	not	be	parsed	or	opened	.

please	any	one	give	the	solu9on	for	this	whenever	i	try	to	convert	the	rpm	file	to	deb	file	i	always	get	this	problem	error	:	<unk>	:	not	
an	rpm	package	(	or	package	manifest	)	error	execu9ng	``	 	 lang=c	rpm	-qp	--	queryformat	%	{	name	}	<unk>	'	 ''	 :	at	<unk>	line	489	
thanks	conver9ng	rpm	file	to	debian	fle

how	do	i	mount	a	hibernated	par99on	with	windows	8	in	ubuntu	?	i	ca	n't	mount	my	other	par99on	with	windows	8	,	i	have	ubuntu	
12.10	 amd64	 :	 error	 moun9ng	 /dev/sda1	 at	 <unk>	 :	 command-line	 `mount	 -t	 ``	 n[s	 ''	 -o	 ``	 uhelper=udisks2	 ,	 nodev	 ,	 nosuid	 ,	
uid=1000	 ,	 gid=1000	 ,	 dmask=0077	 ,	 fmask=0177	 ''	 ``	 /dev/sda1	 ''	 ``	 <unk>	 ''	 '	 exited	 with	 non-zero	 exit	 status	 14	 :	 windows	 is													
hibernated	,	refused	to	mount	.	failed	to	mount	'/dev/sda1	'	:	opera9on	not	permiAed	the	n[s	par99on	is	hibernated	.	please	resume	
and	shutdown	windows	properly	,	or	mount	the	volume	read-only	with	the	'ro	'	mount	op9on

Figure 7: Examples of extracted rationales of questions in the AskUbuntu domain.

which are typically not in the titles but very useful
to identify similar questions.

6 Discussion

We proposed a novel modular neural framework
to automatically generate concise yet sufficient text
fragments to justify predictions made by neural net-
works. We demonstrated that our encoder-generator
framework, trained in an end-to-end manner, gives
rise to quality rationales in the absence of any ex-
plicit rationale annotations. The approach could be
modified or extended in various ways to other appli-
cations or types of data.

Choices of enc(·) and gen(·). The encoder and
generator can be realized in numerous ways with-
out changing the broader algorithm. For instance,
we could use a convolutional network (Kim, 2014;
Kalchbrenner et al., 2014), deep averaging net-
work (Iyyer et al., 2015; Joulin et al., 2016) or a
boosting classifier as the encoder. When rationales
can be expected to conform to repeated stereotypi-
cal patterns in the text, a simpler encoder consistent
with this bias can work better. We emphasize that,
in this paper, rationales are flexible explanations that
may vary substantially from instance to another. On
the generator side, many additional constraints could
be imposed to further guide acceptable rationales.

Dealing with Search Space. Our training method
employs a REINFORCE-style algorithm (Williams,
1992) where the gradient with respect to the param-
eters is estimated by sampling possible rationales.

Additional constraints on the generator output can
be helpful in alleviating problems of exploring po-
tentially a large space of possible rationales in terms
of their interaction with the encoder. We could also
apply variance reduction techniques to increase sta-
bility of stochastic training (cf. (Weaver and Tao,
2001; Mnih et al., 2014; Ba et al., 2015; Xu et al.,
2015)).

7 Acknowledgments

We thank Prof. Julian McAuley for sharing the re-
view dataset and annotations. We also thank MIT
NLP group and the reviewers for their helpful com-
ments. The work is supported by the Arabic Lan-
guage Technologies (ALT) group at Qatar Com-
puting Research Institute (QCRI) within the IYAS
project. Any opinions, findings, conclusions, or rec-
ommendations expressed in this paper are those of
the authors, and do not necessarily reflect the views
of the funding organizations.

References
Jimmy Ba, Volodymyr Mnih, and Koray Kavukcuoglu.

2015. Multiple object recognition with visual atten-
tion. In Proceedings of the International Conference
on Learning Representations (ICLR).

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In International Con-
ference on Learning Representations.

Kan Chen, Jiang Wang, Liang-Chieh Chen, Haoyuan
Gao, Wei Xu, and Ram Nevatia. 2015. Abc-

115



cnn: An attention based convolutional neural net-
work for visual question answering. arXiv preprint
arXiv:1511.05960.

Jianpeng Cheng, Li Dong, and Mirella Lapata. 2016.
Long short-term memory-networks for machine read-
ing. arXiv preprint arXiv:1601.06733.

Mark W Craven and Jude W Shavlik. 1996. Extract-
ing tree-structured representations of trained networks.
In Advances in neural information processing systems
(NIPS).

Cicero dos Santos, Luciano Barbosa, Dasha Bogdanova,
and Bianca Zadrozny. 2015. Learning hybrid rep-
resentations to retrieve semantically equivalent ques-
tions. In Proceedings of the 53rd Annual Meeting of
the Association for Computational Linguistics and the
7th International Joint Conference on Natural Lan-
guage Processing (Volume 2: Short Papers), pages
694–699, Beijing, China, July. Association for Com-
putational Linguistics.

Manaal Faruqui, Jesse Dodge, Sujay K. Jauhar, Chris
Dyer, Eduard Hovy, and Noah A. Smith. 2015a.
Retrofitting word vectors to semantic lexicons. In Pro-
ceedings of NAACL.

Manaal Faruqui, Yulia Tsvetkov, Dani Yogatama, Chris
Dyer, and Noah A. Smith. 2015b. Sparse overcom-
plete word vector representations. In Proceedings of
ACL.

Aurélie Herbelot and Eva Maria Vecchi. 2015. Build-
ing a shared world: mapping distributional to model-
theoretic semantic spaces. In Proceedings of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing. Association for Computational Lin-
guistics.

Karl Moritz Hermann, Tomas Kocisky, Edward Grefen-
stette, Lasse Espeholt, Will Kay, Mustafa Suleyman,
and Phil Blunsom. 2015. Teaching machines to read
and comprehend. In Advances in Neural Information
Processing Systems, pages 1684–1692.

Michiel Hermans and Benjamin Schrauwen. 2013.
Training and analysing deep recurrent neural net-
works. In Advances in Neural Information Processing
Systems, pages 190–198.

Mohit Iyyer, Varun Manjunatha, Jordan Boyd-Graber,
and Hal Daumé III. 2015. Deep unordered compo-
sition rivals syntactic methods for text classification.
In Proceedings of the 53rd Annual Meeting of the As-
sociation for Computational Linguistics and the 7th
International Joint Conference on Natural Language
Processing (Volume 1: Long Papers).

Armand Joulin, Edouard Grave, Piotr Bojanowski, and
Tomas Mikolov. 2016. Bag of tricks for efficient text
classification. arXiv preprint arXiv:1607.01759.

Nal Kalchbrenner, Edward Grefenstette, and Phil Blun-
som. 2014. A convolutional neural network for mod-
elling sentences. In Proceedings of the 52th Annual
Meeting of the Association for Computational Linguis-
tics.

Andrej Karpathy, Justin Johnson, and Fei-Fei Li. 2015.
Visualizing and understanding recurrent networks.
arXiv preprint arXiv:1506.02078.

B Kim, JA Shah, and F Doshi-Velez. 2015. Mind the
gap: A generative approach to interpretable feature se-
lection and extraction. In Advances in Neural Infor-
mation Processing Systems.

Yoon Kim. 2014. Convolutional neural networks for sen-
tence classification. In Proceedings of the Empiricial
Methods in Natural Language Processing (EMNLP
2014).

Tao Lei, Regina Barzilay, and Tommi Jaakkola. 2015.
Molding cnns for text: non-linear, non-consecutive
convolutions. In Proceedings of the 2015 Conference
on Empirical Methods in Natural Language Process-
ing (EMNLP).

Tao Lei, Hrishikesh Joshi, Regina Barzilay, Tommi
Jaakkola, Katerina Tymoshenko, Alessandro Mos-
chitti, and Lluı́s Màrquez. 2016. Semi-supervised
question retrieval with gated convolutions. In Pro-
ceedings of the 2016 Conference of the North Ameri-
can Chapter of the Association for Computational Lin-
guistics: Human Language Technologies (NAACL).

Benjamin Letham, Cynthia Rudin, Tyler H. McCormick,
and David Madigan. 2015. Interpretable classifiers
using rules and bayesian analysis: Building a better
stroke prediction model. Annals of Applied Statistics,
9(3):1350–1371.

Jiwei Li, Xinlei Chen, Eduard Hovy, and Dan Jurafsky.
2016. Visualizing and understanding neural models in
nlp. In Proceedings of NAACL.

Iain J Marshall, Joël Kuiper, and Byron C Wallace. 2015.
Robotreviewer: evaluation of a system for automati-
cally assessing bias in clinical trials. Journal of the
American Medical Informatics Association.

André F. T. Martins and Ramón Fernandez Astudillo.
2016. From softmax to sparsemax: A sparse model
of attention and multi-label classification. CoRR,
abs/1602.02068.

Julian McAuley, Jure Leskovec, and Dan Jurafsky. 2012.
Learning attitudes and attributes from multi-aspect re-
views. In Data Mining (ICDM), 2012 IEEE 12th In-
ternational Conference on, pages 1020–1025. IEEE.

Volodymyr Mnih, Nicolas Heess, Alex Graves, et al.
2014. Recurrent models of visual attention. In
Advances in Neural Information Processing Systems
(NIPS).

116



Marco Tulio Ribeiro, Sameer Singh, and Carlos Guestrin.
2016. ” why should i trust you?”: Explaining the pre-
dictions of any classifier. In ACM SIGKDD Interna-
tional Conference on Knowledge Discovery and Data
Mining (KDD).

Tim Rocktäschel, Edward Grefenstette, Karl Moritz Her-
mann, Tomáš Kočiskỳ, and Phil Blunsom. 2016. Rea-
soning about entailment with neural attention. In In-
ternational Conference on Learning Representations.

Alexander M Rush, Sumit Chopra, and Jason Weston.
2015. A neural attention model for abstractive sen-
tence summarization. In Proceedings of the 2015 Con-
ference on Empirical Methods in Natural Language
Processing.

Sebastian Thrun. 1995. Extracting rules from artifi-
cial neural networks with distributed representations.
In Advances in neural information processing systems
(NIPS).

Lex Weaver and Nigel Tao. 2001. The optimal reward
baseline for gradient-based reinforcement learning. In
Proceedings of the Seventeenth conference on Uncer-
tainty in artificial intelligence.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforcement
learning. Machine learning.

Huijuan Xu and Kate Saenko. 2015. Ask, attend
and answer: Exploring question-guided spatial atten-
tion for visual question answering. arXiv preprint
arXiv:1511.05234.

Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho,
Aaron Courville, Ruslan Salakhudinov, Rich Zemel,
and Yoshua Bengio. 2015. Show, attend and tell: Neu-
ral image caption generation with visual attention. In
Proceedings of the 32nd International Conference on
Machine Learning (ICML).

Zichao Yang, Xiaodong He, Jianfeng Gao, Li Deng,
and Alex Smola. 2015. Stacked attention net-
works for image question answering. arXiv preprint
arXiv:1511.02274.

Omar Zaidan, Jason Eisner, and Christine D. Piatko.
2007. Using ”annotator rationales” to improve ma-
chine learning for text categorization. In Proceedings
of Human Language Technology Conference of the
North American Chapter of the Association of Com-
putational Linguistics, pages 260–267.

Ye Zhang, Iain James Marshall, and Byron C. Wallace.
2016. Rationale-augmented convolutional neural net-
works for text classification. CoRR, abs/1605.04469.

117


