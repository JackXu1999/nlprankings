








































Towards a Formal Description of NPI Licensing Patterns∗

Mai Ha Vu
University of Delaware
maiha@udel.edu

Abstract

This paper is a formal study of a simplified
version of Negative Polarity Item (NPI) li-
censing requirements in two languages, En-
glish and Hungarian. In the framework of
Model-Theoretic Syntax, using logical for-
malisms defined over tree-languages, I show
that neither pattern can be described with Tier-
based Strictly Local (TSL) constraints only,
and suggest that they need a more complex
logical formula. In particular, Hungarian pat-
terns can be described using a combination
of Tier-based Strictly 2-Local constraints over
dominance relations and Locally 1-Testable
constraints over the left-of relations between
nodes. For English, there are no sufficient lo-
cal constraints, either with or without tiers. As
part of the analysis, I give a definition of a
generalized tree-language that uses Tier-based
2-Local constraints over dominance relations,
while it remains underspecified for left-of re-
lations.

1 Introduction

Model-theoretic syntax is a way to study linguis-
tic structures formally by describing them in terms
of logical constraints, rather than in terms of se-
quences of derivational steps. While its roots can
be traced back to early studies in generative gram-
mar, it gained prominence with James Rogers’
1998 work, A Descriptive Approach to Language-
Theoretic Complexity (Pullum, 2007).

∗I thank Jeffrey Heinz, Thomas Graf, Hossep Dolatian,
Kristina Strother-Garcia, and the anonymous reviewers for their
thoughtful and insightful feedback on earlier drafts of this pa-
per. All errors are my own.

Rogers’ (1998) results showed that a significant
portion of Government and Binding Theory can be
described with a version of Monadic Second-order
(MSO) constraints over phrase-structure trees. Inci-
dentally, structures that can be described with MSO
logic are members of the regular class of languages
in terms of complexity (Rogers and Pullum, 2011).

It is known, however, that many regular languages
are not plausible patterns in human natural language
(Heinz and Idsardi, 2013). As an example, the even-
a language, which is defined as a set of strings that
can only contain an even number of as, is widely
considered implausible. As a result, recent work
has focused on identifying subregular regions rel-
evant to natural language. While progress has been
made on phonotactic patterns (Heinz, 2009; Heinz,
2010; Jardine, 2016) and phonological transforma-
tions (Chandlee, 2014), less has been said in this re-
gard about syntactic patterns.

Relevant work on syntax in this vein has been
done by Thomas Graf, who has argued that most lin-
guistic patterns, including syntactic and morpholog-
ical ones, fit in the Tier-based Strictly Local (TSL)
class (Graf and Heinz, 2015; Graf, 2017). While the
TSL class was originally used to describe stringsets
(Heinz et al., 2011), we use the class in a more ab-
stract way, and apply it to tree-sets in the current
paper.

Because trees are two-dimensional structures with
two types of ordering relations in them (Rogers,
2003), the type of ordering relation over which a
certain class of language applies has to be spec-
ified. The TSL tree-language as described by
Graf and Heinz (2015) has TSL constraints over

154
Proceedings of the Society for Computation in Linguistics (SCiL) 2018, pages 154-163.

Salt Lake City, Utah, January 4-7, 2018



both the dominance and left-of ordering relations.
This paper provides a more generalized defini-
tion of Tier-based Strictly 2-Local tree-grammars:
tree-grammars where the constraints are Tier-based
Strictly 2-Local over dominance (TSLB2 ), but can be
of different complexity over left-of relations.

We then demonstrate that a particular type of pat-
tern where the existence of one item in the structure
requires the existence of another one, formalized as
a → b, cannot be described with TSL constraints
in the sense of Graf and Heinz (2015). NPIs fall
into this category of patterns, as an NPI cannot oc-
cur without a licensor.

The scope of this paper is restricted to describing
well-formed surface structures, without any assump-
tion of underlying features or syntactic movement.
We are thus agnostic about any in-depth theory of
NPI-licensing, and are not addressing specific pro-
posals suggesting movement or agreement (cf. Gi-
annakidou and Zeijlstra (2016)); neither do we look
at proposed Logical Forms of these sentences, which
might differ from the observed surface word orders.

Lastly, the choice of syntactic data structure needs
a few words. Two common data structures used
to describe syntactic structures are phrase-structure
trees and derivation trees. For a detailed discus-
sion of the two, the reader is referred to Stabler
(1997). We choose to use phrase-structure trees
as the data structure for the sentences discussed in
this paper, instead of derivation trees. Graf (2013)
gives an in-depth analysis of the nature of syntac-
tic constraints, both over phrase-structure trees and
derivation trees. He shows that representational con-
straints (i.e. those over phrase-structure trees), are
subsumed by translocal constraints (i.e. those over
derivation trees). We thus believe that modeling
NPI-licensing with constraints over phrase-structure
trees will not take away from the overall general-
izability of our results regarding the complexity of
necessary constraints in natural language syntax.

The paper is organized as follows. Section 2
states the definitions of key concepts needed to un-
derstand the discussion in the rest of the paper. Sec-
tion 3 introduces the syntactic data in question: NPI-
licensing in English and Hungarian. Section 4 shows
that these patterns need TLT and First-Order Logic
to be described. Section 5 concludes.

2 Preliminaries

2.1 Strictly Local and Locally Testable
Stringsets

These definitions of Strictly Local (SL) and Locally
Testable (LT) stringsets are largely based on Heinz
et al. (2011), Rogers and Pullum (2011), and Rogers
et al. (2013). We assume familiarity with monadic
second-order (MSO) logic (Enderton, 2001).

First, k-factors over strings are defined below. Let
Σ be the alphabet, and Σ∗ be all strings of finite
length over Σ. Then string u is a factor of string
w iff (∃x, y ∈ Σ∗) such that w = xuy. If |u| = k,
then u is a k-factor of w. The function Fk maps a
string to a set of k-factors within it:

Fk(w) = {u|u is a k-factor of w}
A Strictly k-Local (SLk) grammar for a string lan-

guage is understood as a list of possible k-factors
in the language, or equivalently, a list of banned k-
factors.

Definition 1 (Strictly Local Stringsets)
G, a Strictly k-Local description over some alpha-

bet Σ, is a set of k-factors of Σ ∪ {o,n}, where o
and n mark the beginning and ending of a string,
respectively.

G ⊆ Fk(o · Σ∗ ·n)
A string w satisfies G, iff the set of k-factors of the

augmented string o · w ·n is a subset of G:
w |= G ⇔ Fk(o · w ·n) ⊆ G

The stringset licensed by a description G is the set
of words that satisfy it.

L(G) def= {w|w |= G}
A set of strings is Strictly k-Local (SLk) iff it is

L(G) for some strictly k-local definition of G. It is
Strictly Local iff it is SLk for some k.

Next, the definition of local k-expressions is given
below.

Definition 2 (Local k-expressions)
The language of k-expressions is the smallest set

including the following forms, with the intended se-
mantics indicated.

• Atomic formulae: f ∈ Fk(Σ∗) is a k-
expression.

155



• Conjunction: If ϕ1 and ϕ2 are k-expressions,
then (ϕ1 ∧ ϕ2) is a k-expression.

• Negation: If ϕ1 is a k-expression, then (¬ϕ1)
is a k-expression.

If w is a string and ϕ a k-expression, then

w |= ϕ def⇔



ϕ = f ∈ Fk(Σ∗) and f ∈ Fk(w)
ϕ = (ϕ1 ∧ ϕ2) and w |= ϕ1 and w |= ϕ2
ϕ = (¬ϕ1) and w 2 ϕ1

Now we can define Locally Testable Stringsets
with the help of k-expressions.

Definition 3 (Locally Testable Stringsets)
A stringset L over Σ is k-Locally Testable (LTk) iff

there is some local k-expression ϕ over Σ (for some
k) such that L is the set of all strings that satisfy ϕ.

L = L(ϕ)
def
= {w ∈ Σ∗|w |= ϕ}

A stringset is LT iff it is LTk for some k.

Notice that implicational statements can be de-
rived from k-expressions, because a → b is equiva-
lent to ¬(a ∧ ¬b).

2.2 Tree languages

Our understanding of trees is based on the idea
of multi-dimensional trees, as discussed in Rogers
(2003). For the purposes of this paper, we exclu-
sively work with 2-dimensional trees, and thus re-
strict our formal descriptions to them.

The basic intuition is as follows. Strings are one-
dimensional trees, whose nodes are related to each
other via one-dimensional successor relations. To
add a second dimension, we first build a local tree
(a tree of at most one depth) by connecting a sin-
gle point a to each node in a one-dimensional tree
S through second-dimensional successor relations
(Figure 1a). The adjoined point is called the root
in this case, and the nodes in S are the yield. A com-
posite tree, where trees have depths greater than one,
can be built by identifying the root of one local tree
with some point in the yield of another (Figure 1b).
In the trees in Figure 1, the solid lines represent the
one-dimensional successor relations, and the dashed
lines represent the second-dimensional successor re-
lations.

(a) 2-dimensional local
tree

(b) 2-dimensional
composite tree

Figure 1: Two-dimensional trees

We give our formal definition for two-
dimensional trees within the model-theoretic
framework. Model theory provides a way to
describe a particular object using mathematical
logic. A model requires a signature and a set of
logical statements. Along with the usual logical
connectives, x ≈ y denotes that x and y are
equivalent.

The signature of the two-dimensional tree-model
for linguistic trees is shown in Figure 2. Let Σ =
ΣCat ∪ ΣLex be the alphabet, where ΣCat is the set
of syntactic categories, and ΣLex is the set of lexical
items. We write σ(x) if node x is labeled with σ, for
all σ ∈ Σ.

〈D,≺,B,Lσ〉σ∈Σ, where

• D is the finite domain

• ≺ is a binary ordering relation immediate left-
of

• B is a binary ordering relation immediate dom-
inance

• Lσ is a set of unary relations for labeling ele-
ments in D with σ for all σ ∈ Σ

Figure 2: Model for two-dimensional trees

Following Rogers (2003), B∗ is defined as the re-
flexive transitive closure, and B+ as the transitive
closure of B. This is explicitly monadic second-
order definable through Branch: a set of nodes
that are upwards closed with regard to, and linearly-
ordered by the immediate dominance relation, B.
The depth of any tree then can be understood as the
length of the longest Branch in the tree.

(1) Branch(X) ≡ (∀x, y)[(X(x) ∧ y B x) →
X(y)]∧ (∀x, y, z)[(X(x)∧X(y)∧X(z)∧

156



x B y ∧ x B z)→ y ≈ z]
(2) x B∗ y ≡ (∀X)[(Branch(X) ∧ X(y)) →

X(x)]

(3) x B+ y ≡ x B∗ y ∧ x 6≈ y

The predicates ≺∗ and ≺+ are definable in a sim-
ilar fashion.

(4) String(X) ≡ (∀x, y)[(X(x) ∧ y ≺ x) →
X(y)]∧ (∀x, y, z)[(X(x)∧X(y)∧X(z)∧
x ≺ y ∧ x ≺ z)→ y ≈ z]

(5) x ≺∗ y ≡ (∀X)[(String(X) ∧ X(y)) →
X(x)]

(6) x ≺+ y ≡ x ≺∗ y ∧ x 6≈ y

Based on≺∗, we also can also define the inherited
left-of relation, <∗. If z is left-of w in a tree, then all
nodes that are reflexively dominated by z are inher-
ited left-of all nodes that are reflexively dominated
by w.

(7) x <∗ y ≡ (∃z, w)[z B∗ x ∧ w B∗ y ∧ z ≺∗
w]

The following tree-axioms restrict all possi-
ble structures to the desired two-dimensional tree-
structures described previously (and illustrated in
Figure 1):

(8) There is a root that dominates all nodes:
(∃x)(∀y)[x B∗ y ∧ ¬∃z(z B x)]

(9) At most one parent/direct precedent per
node:
(∀x, y, z)[[(x ≺ z ∧ y ≺ z) ∨ (x B z ∧ y B
z)]→ x ≈ y]

(10) Irreflexivity of ≺ and B:
(∀x, y)[(x ≺ y ∨ x B y)→ x 6≈ y]

(11) Two nodes cannot be both in B∗ and ≺∗ re-
lations:
(∀x, y)[(x B∗ y ∨ y B∗ x) ↔ ¬(x ≺∗
y ∨ y ≺∗ x)]

We add two final assumptions that are specific to
linguistic trees. Each node can only have one label,
and a node can only have a label l ∈ ΣLex iff that
node is a leaf (i.e. it does not dominate any other
node).

(12) (∀x)[(α(x) ∧ β(x))→ α ≈ β]

(13) (∀x)[¬∃y(x B y)↔ α(x) ∧ α ∈ ΣLex]
As an example, see tree T1 in Figure 3b, a model-

theoretic representation of Figure 3a. For this non-
linguistic tree, Σ = {a, b, c}, with no distinction
between ΣCat and ΣLex. The solid lines represent
the first-dimensional successor relations ≺, and the
dashed lines represent the second-dimensional suc-
cessor relations B.

a

a

cb

b

c

ba

a

c

(a) Conventional representation of T1

0 a

1b

3a

7c

4

c

8

a

9 b

2 a

5

b

6 c

≺

≺ ≺

≺

B B

B B B B

B BB

(b) Model-theoretic representation of T1

Figure 3: T1

Then TI can be described with the following list
of statements:

(14) Labeling statement:
a(0) ∧ b(1) ∧ a(2) ∧ a(3) ∧ c(4) ∧ b(5) ∧
c(6) ∧ c(7) ∧ a(8) ∧ b(9)

(15) Statement about ≺:
1 ≺ 2 ∧ 3 ≺ 4 ∧ 5 ≺ 6 ∧ 8 ≺ 9

(16) Statement about B:
0 B 1∧0 B 2∧1 B 3∧1 B 4∧2 B 5∧2 B
6 ∧ 3 B 7 ∧ 4 B 8 ∧ 4 B 9

Next, we generalize k-factors to two-dimensional
trees. For strings, k-factors are substrings of k
length. For trees, this will mean subtrees with depth
of k-1 (since the depth of the root node is 0, but one
node is an 1-factor of a tree).

157



(17) Subtree(X) ≡ (∃x)(∀y)[(X(x) ∧ x B∗
y)→ X(y)]

A 2-factor can be easily defined by changing the
B∗ relation to B in the definition of subtrees. While
this is not a generalized definition of k-factors in
trees, it will be sufficient for the purposes of this pa-
per.

(18) 2-Factor(X) ≡ (∃x)(∀y)[(X(x) ∧ x B
y)→ X(y)]

For example, the 2-factors of T1 is the set of trees
in Figure 4.

a

ab

b

ca

a

cb

a

c

c

ba

Figure 4: 2-factors of T1

In our linguistic examples, the labels will be syn-
tactic categories (e.g. CP, NP, C’, N’, etc.) and
language-specific lexical items. For the purposes of
NPI-licensing, a specific set of lexical items are of
interest only: NPIs and negation for both English
and Hungarian, and CPs for Hungarian. Below we
simply define the lexical items for NPIs and nega-
tion, in English and Hungarian.

(19) NPIeng(x) ≡ anybody(x) ∨ anything(x) ∨
anywhere(x)

(20) negeng(x) ≡ not(x)∨ no(x)∨ nobody(x)∨
nothing(x) ∨ nowhere(x)

(21) NPIhun(x) ≡ senki(x) ∨ semmi(x) ∨
sehol(x)

(22) neghun(x) ≡ nem(x)

2.3 Tier-based tree-languages

Heinz et al. (2011) defined Tier-based Strictly Lo-
cal (TSL) languages for strings. We use their defini-
tion of tiers complete with the one found in Graf and
Heinz (2015) to discuss the projection of tier-trees.

A tier is denoted as T ⊆ Σ, and there is an erasing
function that erases all elements in the string that are
not labeled on the tier (Heinz et al., 2011).

Generalizing to our two-dimensional tree-model,
a tree-tier is projected by taking only the nodes that
are labeled with elements of T , while keeping all

inherited left-of relations (<∗) and dominance rela-
tions (B∗) between these nodes.

For example, let T = {a, b}. Applying the eras-
ing function to T1 (3) then yields a tier-tree (5). We
say that T1 projects a tier-tree.

a

a

b

b

baa

Figure 5: Tier-tree, T={a,b}

TSL string languages were characterized by a fi-
nite list of banned k-factors over the string-tier. The
equivalent is not possible for tree-languages, be-
cause in tier-trees, there is no bound on the number
of daughters for a given node.

To see why, take a tree T2 such that the starting
node labeled S mothers a node labeled b, and each
node b mothers a node a and b (6a). In linguistic
terms, node a’s never dominate each other, neither
are they ever sisters; the higher ones c-command the
lower ones. Now suppose that the tier we want to
project is T={S,a}. We then get a tree where S di-
rectly dominates an unbounded number of a nodes,
where that number is equivalent to the depth of the
original tree. We thus cannot list a finite-list of
banned (or permitted) k-factors over a tree-tier with-
out knowing a bound on the depth of the tree first.

S

b

b

b

. . .

a

a

(a) T2

S

. . .aaa

(b) Tier-tree of T2,
T={S,a}

Figure 6: T2 and its tier-tree

Instead, we give a general description of tree
languages that are Tier-based Strictly 2-Local over
the dominance relation (TSLB2 ). Recall that in

158



the framework laid out in Rogers (2003), two-
dimensional trees consist of strings (i.e. one-
dimensional trees) that are dominated by a single
node. We use this insight to define our tier-based
grammar. Informally, the grammar contains a tier as
described above, and string-based grammars that ap-
ply over sisters dominated by the same node. There
are potentially as many string-based grammars as
nodes labeled with a syntactic category on the tier.
Formally, each grammar contains a quadruple as in
Figure 7.

G = 〈T, TCat, H, γ〉, where:

• T ⊂ Σ is the finite set of tier-nodes

• TCat = (T ∩ ΣCat)

• H is a set of string-based grammars

• γ : TCat×H is a bijection that maps every node
labeled κ ∈ TCat to a string-based grammar
h ∈ H

Figure 7: Grammar of tier-trees

The grammar defined here is thus TSLB2 , but
there can still be different types of grammar over the
left-of relations. Following Graf and Heinz (2015)
then, a TSL grammar for trees is a specific instance
of the grammar defined here: in this case, H must
be a set of TSL string-languages.

3 NPI patterns

We understand Negative Polarity Items (NPIs) as ex-
pressions that are ungrammatical in positive declar-
ative clauses, but they are grammatical in their nega-
tive counterpart. This understanding of NPIs echoes
the one for negative dependencies in Giannakidou
and Zeijlstra (2016). For example, English anything
is an NPI according this definition, because it shows
the following contrast:

(23) a. *John has read anything.
b. John hasn’t read anything.

3.1 English-type
English-type NPIs are typical in English, Chinese
(Lin, 1998), and Vietnamese (Tran and Bruen-
ing, 2013), among others. They are weak NPI-

languages, which means that their NPIs are licensed
not only by negation, but also in questions, prota-
sis of conditionals, and in general, downward entail-
ment contexts (Ladusaw, 1983). For the sake of sim-
plicity, I will focus only on the cases where English
NPIs are licensed by sentential negation.

The general observation is that English NPIs must
be c-commanded by negation (24-26), over an arbi-
trary number of clause boundaries (27).1 The NPI
item anybody is not c-commanded by negation (not,
nobody) in (25) and (26), but it is c-commanded and
thus licensed in (24).

(24) John didn’t see anybody.
TP

T’

NegP

VP

V’

DP

anybody

V

see

DP

ti

Neg

not

T

did

DP

Johni

(25) *Anybody didn’t see John.
TP

T’

NegP

VP

V’

DP

John

V

see

DP

ti

Neg

not

T

did

DP

anybodyi

(26) *Nobody’s children saw anybody.

1A reviewer suggested that a sentence such as ‘Nobody’s
mother understood anything I said’ as a counter-evidence for the
general pattern. However, if mother is replaced by children, the
sentence becomes much less acceptable. Our suspicion is that
‘nobody’s mother’ has become idiomatic, meaning ‘nobody’.

159



TP

T’

VP

V’

DP

anybody

V

saw

DP

ti

T

DPi

D’

N

children

D

’s

DP

nobody

(27) [John didn’t think [that Charlie saw [that
Mary stole anything.]]]

A straightforward way then to formalize the
English-NPI licensing requirement is to state it
in first-order logic with the help of defining c-
command relations.

(28) c-com(x, y) ≡ ¬(x B+ y) ∧ x 6≈ y ∧
∀z[z B+ x→ z B+ y]

(29) English NPI-licensing constraint:
∀y[NPIeng(y) → ∃x[c-com(x, y) ∧
negeng(x)]]

3.2 Hungarian-type

Here we cite our own data collected from Hungarian,
but we suspect that a similar distribution is found in
Slavic languages (Progovac, 1994). Hungarian NPIs
show the same contrast that is found in English:

(30) *Jancsi
Jancsi

látott
saw

senkit.
NPI.ACC

‘Jancsi saw anybody.’

(31) Jancsi
Jancsi

nem
NEG

látott
saw

senkit.
NPI.ACC

‘Jancsi didn’t see anybody.’

Their similarity to English NPIs stops here. Hun-
garian NPIs must be licensed locally by clausemate
negation (32), but there is no c-command require-
ment for the relation between licensor and licensee
(33). We assume that the domain of licensing is re-
stricted to CP boundaries, as NPIs are licensed in
sentences with negated raising predicates (34), but
not in ones with negated control predicates (35).2

2In accordance with Carnie (2013), I assume that control
verbs select for CPs, whereas raising verbs select for IPs.

(32) *Jancsi
Jancsi

nem
NEG

tudta,
knew

hogy
that

Mari
Mari

semmit
NPI.ACC

olvasott.
read
‘Jancsi didn’t know that Mari read any-
thing.’

(33) Senki
NPI

nem
NEG

akart
want.PST

el
PRT

jönni.
come.INF

‘Nobody wanted to come.’

(34) Mari
Mari

nem
NEG

kezdett
started

olvasni
read.INF

semmit.
NPI.ACC

‘Mari didn’t start to read anything.’

(35) *Mari
Mari

nem
NEG

próbált
tried

olvasni
read.INF

semmit.
NPI.ACC

‘Mari didn’t try to read anything.’

The constraint can be formalized with First-order
logic with the help of defining closest-CP(x, y),
which says that x is labeled CP, and it is the closest
node labeled such to y.

(36) closest-CP(x, y) ≡ CP(x) ∧ x B∗ y ∧
¬∃z[CP(z) ∧ x B ∗+ z ∧ z B∗ y]

(37) Hungarian NPI-licensing constraint:
∀(y)[NPIhun(y) →
∃(x, z)[closest-CP(x, y) ∧
closest-CP(x, z) ∧ neghun(z)]

3.3 Interim summary

The NPI patterns discussed above are summarized
in Table 1.

Negation must
c-command
NPI

Licensing
across CP
boundaries

English yes yes
Hungarian no no

Table 1: Summary of English and Hungarian NPI
patterns.

4 Complexity of NPI patterns

In what follows, we re-define the NPI-licensing con-
straints for Hungarian and English, in the context of
the TSLB2 grammar G defined in Section 2.3. We
have two results: (1) Hungarian NPI-licensing can

160



be characterized with the tier-based grammar, but
English cannot, and (2) the string-language for the
Hungarian grammar is neither SL or TSL, but it is
LT.

4.1 Hungarian

Let us define the relevant tier for Hungarian NPI-
licensing as follows: T={neghun, NPIhun, CP}.
Then TCat = {CP}. For examples of grammatical
tier-trees, see Figure 8.

CP

NPINPINPIneg

CP

neg

CP

CP

negNPI

(a) Well-formed tier-trees for Hungarian NPI-licensing
CP

NPI

CP

NPINPI

CP

NPINPINPI

(b) Ill-formed tier-tree for Hungarian NPI-licensing

Figure 8: Well-formed and ill-formed tier-trees for
Hungarian NPI-licensing

Now the question is determining the string gram-
mar h over the nodes that CP dominates in the tier.
Let us call this string-grammar hCP . We show that
hCP is not SL, but it is LT. Consider the ill-formed
set of trees where there is an arbitrary number of
NPIs but there is no negation to license any of them
(Figure 8b). Such trees would correspond to un-
grammatical sentences of the form (38).

(38) *Senkinekn

NPI.DAT
senkije
NPI.POSS

látott
saw

semmit.
NPI.ACC

‘Nobody’sn anybody saw anything.’

If hCP were SL, we would be able to ban a set
of k-factors to successfully exclude the ill-formed
trees. This is not possible for any k. For any k-
factor that successfully bans a string of k-length that
consists of only NPIs, there is a well-formed string
of length k + 1, whose k + 1-th member is neg.

To exclusively define well-formed trees, the use of
LT logic is necessary (39). This formula is Locally
1-Testable.

(39) (∀x∃y)[NPIhun(x)→ neghun(y)]

4.2 English
Recall that English NPI-licensing is stated as a c-
command requirement: negation must c-command
the NPI. This type of constraint cannot be reduced
to any type of TSLB2 grammar.

Consider the following two sentences:

(40) *The girl, (that X said)n that John didn’t see,
read anything.

TP

T’

VP

V’

DP

anything

V

read

tk

T

DPi

CP

TP

. . . CP . . .

TP

. . . not . . .

C

that

C

that

DP

N

girl

D

the

(41) John didn’t think (that X said)n Mary stole
anything.

TP

T’

NegP

VP

V’

CP

TP

. . . CP . . .

TP

Mary stole anything

C

that

C

that

V

think

DP

ti

Neg

not

T

did

DP

Johni

In (40), negation can be found buried inside a rel-
ative clause that has been constructed through an ar-
bitrary number of recursive embedding, and thus it
does not c-command the NPI anything. On the other
hand, in (41), negation c-commands an NPI that is
buried in the embedded clauses, and thus the NPI is
licensed.

There are no local constraints that can account for
the restriction, since there is no bound on the dis-
tance between the negation and the NPI. Introducing
tiers does not help either, due to the c-command re-
quirement. There is no good way to define elements

161



for the tier to get the relevant 2-factors within the
tier-tree that would help us derive the correct con-
straints. In fact, there is no definable tier in order to
get any relevant k-factor in the tier-tree.

If the tier is defined to only include negation and
NPI, the two obviously relevant elements for NPI-
licensing in English, there is no way to tell apart tier-
trees where negation c-commands the NPI compared
to the ones where it does not. For example, both
sentences (24) and (26) would yield the same tier-
tree:

$

NPIneg

Figure 9: Tier-tree for (24) and (26), T={neg, NPI}

Including nodes that can immediately dominate
negation (NegP and DP) would again result in tier-
trees of arbitrary depth. For example, in sentences
(41) and (40), one would have to list all the arbitrary
number of DPs that serve as subjects for each em-
bedded clause before getting to the NPI in the sen-
tence. We then have the problem of not being able
to determine subtrees of a bounded k-depth. Thus
c-command relations cannot be defined using tiers.

5 Conclusions

This paper has offered four results. First, it provided
a definition of TSLB2 languages. Second, it showed
that implicational requirements, such as the surface
licensing conditions of NPIs for Hungarian and En-
glish, cannot be described with TSL constraints over
both dominance and precedence relations in trees.

Hungarian, which has a clausemate-requirement,
can be described with a grammar that is TSLB2
with LT1 constraints over the precedence relations.
On the other hand, English NPI-licensing patterns,
which have a structural c-command restriction, can-
not be accommodated by TSLB2 . It is yet to be seen
whether English surface NPI-licensing can be de-
scribed with any logical formalism that is weaker
than First-order.

These results apply to surface syntactic descrip-
tions only. Once we consider other possible theoreti-
cal explanations for NPIs that employ either feature-
agreement or movement, the complexity of these

syntactic constraints might be decreased. This ques-
tion is to be addressed by future research.

Our class of newly defined tree-languages, TSLB2 ,
needs further study also. In particular, it would be
interesting to see how the characterizations of sub-
regular string languages (e.g. the Suffix Substitu-
tion Clause for SL languages, or Local Test Invari-
ance for LT languages) hold up once the representa-
tion changes from strings to trees. It is also yet to
be seen what it means for tree languages that one
can mix and match different classes of languages
for different ordering relations within the same tree-
structure. The nature of subregular tree-languages is
still largely unknown.

Lastly, we might also examine different defini-
tions of trees. For example, Frank and Vijay-
Shanker (2001) proposed to define trees using c-
command as the primitive binary relation, instead of
dominance. In that case, the English NPI-licensing
constraint would be very easy to state by requiring
that NPIs are c-commanded by a negation. We sus-
pect that Hungarian NPI-licensing can be accounted
for as well, but a careful study is needed to confirm
our hypothesis.

In conclusion, these results are only preliminary
to studying the computational complexity of NPI-
licensing constraints. However, they show the po-
tential of using tools from theoretical computer sci-
ence to reveal the nature of syntactic phenomena.
For one, it might not be immediately obvious that
on the surface level, English NPI-licensing needs
more powerful tools to be described than Hungarian
NPI-licensing. English is unrestricted in terms of
distance between the licensor and licensee, whereas
Hungarian is unrestricted in terms of structural re-
quirements as long as the licensor and licensee are
within the same clause. Formalizing these con-
straints using logic revealed that having an un-
bounded distance necessitates increased complexity
compared to having no structural requirement.

Studying linguistic phenomena from a formal per-
spective thus can give us insight into the minimal
computational requirements needed for natural lan-
guage. The results in turn might bear further im-
plications on the computational complexity needed
for syntactic patterns, particularly in learning and
expected cross-linguistic variation.

162



References
Andrew Carnie. 2013. Syntax: A generative introduc-

tion. John Wiley & Sons.
Jane Chandlee. 2014. Strictly local phonological pro-

cesses. Ph.D. thesis, University of Delaware.
Herbert B Enderton. 2001. A mathematical introduction

to logic. Academic press.
Robert Frank and K Vijay-Shanker. 2001. Primitive C-

Command. Syntax, 4(3):164–204.
Anastasia Giannakidou and Hedde Zeijlstra. 2016. The

landscape of negative dependencies: negative concord
and n-words. In Linguistics Companion, pages 1–47.
Second edition.

Thomas Graf and Jeffrey Heinz. 2015. Commonality
in Disparity : The Computational View of Syntax and
Phonology A New View of the Power of Syntax and
Phonology.

Thomas Graf. 2013. Local and Transderivational Con-
straints in Syntax and Semantics. Ph.D. thesis, UCLA.

Thomas Graf. 2017. The Power of Locality Domains in
Phonology.

Jeffrey Heinz and William Idsardi. 2013. What com-
plexity differences reveal about domains in language.
Topics in cognitive science, pages 111–131.

Jeffrey Heinz, Chetan Rawal, and Herbert G Tan-
ner. 2011. Tier-based Strictly Local Constraints for
Phonology. In Proceedings of the 49th Annual Meet-
ing of the Association for Computational Linguistics,
pages 58–64.

Jeffrey Heinz. 2009. On the role of locality in learning
stress patterns. Phonology, 26:303–351.

Jeffrey Heinz. 2010. Learning long-distance phonotac-
tics. Linguistic Inquiry, 41:623–661.

Adam Jardine. 2016. Locality and non-linear represen-
tations in tonal phonology. Ph.D. thesis, University of
Delaware.

William A Ladusaw. 1983. Logical Form and Condi-
tions on Grammaticality. Linguistics and Philosophy,
6(3):373–392.

Jo-wang Lin. 1998. On existential polarity wh -
phrases in chinese. Journal of East Asian Linguistics,
7(1982):219–255.

Liljiana Progovac. 1994. Negative and Positive Polar-
ity: A binding approach. Cambridge University Press,
Cambridge.

Geoffrey K Pullum. 2007. The Evolution of Model-
Theoretic Frameworks in Linguistics. In James
Rogers and Stephan Kepser, editors, Model-Theoretic
Syntax at 10, pages 1–10, Dublin, Ireland.

James Rogers and Geoffrey K Pullum. 2011. Aural Pat-
tern Recognition Experiments and the Subregular Hi-
erarchy. Journal of Logic, Language and Information,
20(3):329–342.

James Rogers, Jeffrey Heinz, Margaret Fero, Jeremy
Hurst, Dakotah Lambert, and Sean Wibel. 2013. Cog-
nitive and Sub-regular Complexity. In 17th Confer-
ence on Formal Grammars, pages 90–108.

James Rogers. 2003. Syntactic Structures as Multi-
dimensional Trees. Research on Language and Com-
putation, 1:265–305.

Edward P. Stabler. 1997. Derivational minimalism. Log-
ical aspects of computational linguistics, pages 68–95.

Thuan Tran and Benjamin Bruening. 2013. Wh-Phrases
as indefinites. A Vietnamese Perspective. In Daniel
Hole and Elisabeth Löbel, editors, Linguistics of Viet-
namese: An International Survey, pages 217–241.
Mouton de Gruyter, Berlin.

163


