



















































Investigating Fluidity for Human-Robot Interaction with Real-time, Real-world Grounding Strategies


Proceedings of the SIGDIAL 2016 Conference, pages 288–298,
Los Angeles, USA, 13-15 September 2016. c©2016 Association for Computational Linguistics

Investigating Fluidity for Human-Robot Interaction
with Real-time, Real-world Grounding Strategies

Julian Hough and David Schlangen
Dialogue Systems Group // CITEC // Faculty of Linguistics and Literature

Bielefeld University
firstname.lastname@uni-bielefeld.de

Abstract

We present a simple real-time, real-world
grounding framework, and a system which
implements it in a simple robot, allow-
ing investigation into different ground-
ing strategies. We put particular focus
on the grounding effects of non-linguistic
task-related actions. We experiment with
a trade-off between the fluidity of the
grounding mechanism with the ‘safety’ of
ensuring task success. The framework
consists of a combination of interactive
Harel statecharts and the Incremental Unit
framework. We evaluate its in-robot im-
plementation in a study with human users
and find that in simple grounding situa-
tions, a model allowing greater fluidity is
perceived to have better understanding of
the user’s speech.

1 Introduction

Developing suitable grounding mechanisms for
communication in the sense of (Clark and Bren-
nan, 1991; Clark, 1996) is an ongoing challenge
for designers of robotic systems which interpret
speech. If grounding is the way in which in-
teraction participants build and align their inter-
nal representations towards shared information or
‘common ground’, given the vastly different in-
ternal representations of humans and robots, one
might concede the title of Kruijff (2012)’s paper:
‘There is no common ground in human-robot in-
teraction’.

However despite the lack of ‘real’ common
ground, a robot can still understand what the user
means ‘to a criterion sufficient for current pur-
poses’ (Clark and Brennan, 1991) at a given point
in the interaction, if it is equipped with grounding

mechanisms which deal with the inherent uncer-
tainty in situated dialogue for a robot. This uncer-
tainty lies at multiple layers, including the recog-
nition of words, object recognition and tracking,
resolving references to the objects, the recognition
of the user’s intentions, and the success in execu-
tion of robotic actions. Furthermore, if we are to
reach beyond task completion or speed as crite-
ria for interactive success and wish the interaction
to be more ‘fluid’, these grounding mechanisms
must operate continuously in real time as robotic
actions or user utterances are in progress.

In this paper, we present a simple real-time,
real-world grounding framework, and a system
which implements it in a simple robot, allow-
ing investigation into different grounding strate-
gies. Here, we experiment with a trade-off be-
tween the fluidity of the grounding mechanism
with the ‘safety’ of ensuring task success. The
framework consists of a combination of interac-
tive Harel statecharts (Harel, 1987) and the Incre-
mental Unit framework (Schlangen and Skantze,
2011), and is implemented in dialogue toolkit In-
proTK (Baumann and Schlangen, 2012).

2 Achieving Fluid Communicative
Grounding in Dialogic Robots

In this paper we are concerned with a simple
pick-and-place robot with uni-modal communica-
tion abilities, which is simply its manipulation be-
haviour of objects– see Fig. 1 for example utter-
ances from user U and system S’s actions. While
our robot does not have natural language gener-
ation (NLG) capabilities, its physical actions are
first class citizens of the dialogue so it is capable
of dialogic behaviour through action.

As mentioned above, while a human and robot’s
internal representations of a situation can differ
inherently, success is possible through recovery

288



A. Non-incremental grounding:

(1) U: Put the red cross in box 2 right
S: [moves to x] [grabs x] [moves to box 2] [drops x]

(2) i) U: Put the red cross in box 2 no, the other red cross
S: [moves to x] [grabs x] [moves to box 2]

ii) U: right
S:[moves to x’s original position][drops x][moves to y][grabs y][moves to box 2] [drops y]

B. Incremental grounding:

(3) U: Take the red cross right put it in box 2 right
S: [moves to x] [grabs x] [moves to box 2] [drops x]

(4) U: Take the red cross no the other one right put it in box 2 right
S: [moves to x] [moves to y] [grabs y] [moves to box 2] [drops y]

C. Fluid incremental grounding, allowing concurrent user speech and robotic action:

(5) U: Take the red cross right put it in box 2 right
S: [moves to x][grabs x] [moves to box 2] [drops x]

(6) U: Take the red cross no the other one right put it in box 2 right
S: [moves to x(aborted)][moves to y][grabs y] [moves to box 2] [drops y]

Figure 1: Grounding modes in a robotic dialogue system that manipulates real-world objects.

from misunderstanding, which has been central to
dialogue systems research (Traum, 1994; Traum
and Larsson, 2003), with recent work showing
how this can operate incrementally (see e.g. (Buß
and Schlangen, 2011; Skantze and Hjalmarsson,
2010)), and in situated dialogue domains, through
simulation with virtual agents (Marge and Rud-
nicky, 2011; Raux and Nakano, 2010; Buschmeier
and Kopp, 2012). In robotics, much of the ground-
ing research has focussed on perspective taking
and frame of reference differing between robot
and human (Liu et al., 2010; Liu et al., 2012; Kol-
lar et al., 2010).

The aspect of grounding we focus on here is the
mechanisms needed for it to be done fluidly in real
time. In line with results from human-human in-
teraction where action is shown to be representa-
tive of the current state of understanding with lit-
tle latency (Tanenhaus and Brown-Schmidt, 2008;
McKinstry et al., 2008) and where moving in re-
sponse to instructions happens before the end of
the utterance (Hough et al., 2015), we hypothe-
sized that the greater the fluidity, the more nat-
ural the robot’s action would appear. To illus-
trate, in Fig. 1, we show three modes of ground-
ing, (A) non-incremental, (B) incremental and (C)
fluid. Each mode has the ability to recognize pos-
itive feedback and repair and deal with it appro-
priately, however (A) only allows grounding in a
‘half-duplex’ fashion with no overlapping speech

and robot action, and grounding can only be done
once a completed semantic frame for the current
user’s intention has been interpreted. When the
entire frame has been recognized correctly, the
user waits until the robot has shown complete un-
derstanding of the user’s intention through moving
to the target area and awaits confirmation to drop
the object there. In recovering from misunder-
standing as in (2) when the user repairs the robot’s
action, not only must the current action be ‘un-
done’ but the new action must then also be carried
out from the beginning, resulting in long periods
of waiting for the user. In mode (B), grounding
again happens in a half-duplex fashion, however
with opportunities for grounding after shorter in-
crements of speech and with partial information
about the user’s overall goal– the benefit for re-
pair and recovery incrementally is clear in (4). In
(C), the grounding again happens incrementally,
however in a full-duplex way, where concurrency
of speech and action is allowed and reasoned with
appropriately.

To allow human-robot interaction to be more
like mode (B) rather than (A), appropriate mecha-
nisms can be designed for robots in line with com-
putational theories of grounding (Traum, 1994;
Traum and Larsson, 2003; Ginzburg, 2012), ad-
justing these mechanisms to work in real time
rather than turn-finally, in line with recent work
on incremental grounding theories (Ginzburg et

289



al., 2014; Eshghi et al., 2015) where semantic
frames can be grounded partially as an utterance
progresses. To move towards fluid mode (C), this
type of incremental processing not only requires
incremental interpretation word-by-word, but use
of the context at the exact time each word is rec-
ognized, where here, context consists in the esti-
mation of both the user’s state and the robot’s cur-
rent state through self-monitoring, both of which
can change dynamically during the course of an
utterance, or even during a word. In this setting,
during a repair from the user, the robot must rea-
son about the action currently ‘under discussion’
and abort it as efficiently as possible in order to
switch to an action consistent with the new goal
presented by the user. This self-repair of action
involves an estimation of which part of the action
the user is trying to repair. The same is true of
the converse of repair, where positive confirma-
tions like ‘right’ may need to be interpreted be-
fore the robot has shown unambiguously what its
goal is to allow the fluidity in setting (C)– this re-
quires a self-monitoring process which estimates
at which point the robot has shown its goal suf-
ficiently clearly to the user, during its movement
and not necessarily only after its goal has become
completely unambiguous.

3 Interactive Statecharts and the
Incremental Unit Framework for
Real-time Grounding

Our approach to modelling and implementing
real-time grounding mechanisms follows work us-
ing Harel statecharts (Harel, 1987) for dialogue
control in robotic dialogue systems by (Peltason
and Wrede, 2010; Skantze and Al Moubayed,
2012). However here, rather than characterizing
a single dialogue state which is accessed by a
single dialogue manager, our statechart character-
izes two independent parallel states for the user
and robot, taking an agents-based approach in the
sense of (Jennings, 2001).

As illustrated in the diagrams in Fig. 2 and
Fig. 7 (Appendix), as per standard statecharts
we utilize states (boxes) and transitions (directed
edges) which are executable by trigger events
(main edge labels) and conditions (edge labels
within []), and, additionally triggered actions can
be represented either within the states (the vari-
able assignments and DO statements in the body
of the boxes), or on the transition edges, after /.

We dub these Interactive Statecharts as the transi-
tions in the participant states can have triggering
events and conditions referring to the other inter-
action partner’s state.

We also make use of composite states (or su-
perstates) which generalize two or more substates,
shown diagrammatically by a surrounding box,
which modularizes, reducing the need to define
the transitions for all substates, and diagrammati-
cally reduces the number of arrows.

We also refer to variables for each agent
state, which for our purposes are UserGoal and
RobotGoal– these represent each agent’s current
private goal as estimated by the robot (i.e. this is
not an omniscient world view).

Given there are mutual dependencies between
the two parallel states, one could argue the state-
chart obscures the complexity which a Finite State
Machine (FSM) characterization of the dialogue
state would make explicit, and without convert-
ing them to FSMs, estimating the probability dis-
tributions for the whole composite state is less
straight-forward. However, the extra expressive
power makes modelling interactive situations and
designing grounding mechanisms much simpler.
We discuss how to deal with concurrency prob-
lems in §3.2, and discuss probabilistic state esti-
mation in the final discussion, though it is not the
main focus of this paper.

3.1 A simple concurrent grounding model
To provide a grounding mechanism for robots to
achieve more fluid interaction, we characterize the
user and robot as having parallel states (either side
of the dotted line) – see Fig. 2. This allows mod-
elling the concurrent robot and human states the
robot believes they are in during the interaction
without having to explicitly represent the Carte-
sian product of all possible dialogue states.

Fig. 2 defines the grounding states and transi-
tions for a simple robotic dialogue system which
interprets a user’s speech to carry out actions. The
main motivation of the model is to explore the na-
ture of the criteria by which the robot judges both
their own and their interaction partner’s goals to
have become publicly manifest (though not neces-
sarily grounded) in real time, and therefore when
they are showing commitment to them. To eval-
uate whether the criteria have been met we posit
functions Ev for each agent’s state, which is a
strength-of-evidence valuation that the agent has

290



user_repairing_
robot_action 

  user_committed_to_goal 

user_showing_ 
commitment_to_goal 

w 
[u ⋅ w : request, 

          𝐸𝐸 𝑈𝑈𝑈𝑈𝑈𝑈𝑈𝑈 ≥ 𝛿] 

user_uncommited 

robot_committed_to_goal 

robot_uncommited 

action 
[𝐸𝐸 𝑅𝑈𝑅𝑈𝑅𝑈𝑈𝑈𝑈 ≥ 𝜖] 

action 
[user_committed_to_goal] 

[𝐸𝐸 𝑅𝑈𝑅𝑈𝑅𝑈𝑈𝑈𝑈 <  𝜖,  
user_uncommitted] 

robot_repairing
_robot_action 

w 
[u ⋅ w: confirm, 

robot_showing_commtment_to_goal] 

[𝐸𝐸 𝑈𝑈𝑈𝑈𝑈𝑈𝑈𝑈 <  𝛿] 

User                                                                              Robot 

w 
[u ⋅ w : request, 
𝐸𝐸 𝑈𝑈𝑈𝑈𝑈𝑈𝑈𝑈 ≥ 𝛿] 

w 
[ u ⋅ w: repair, 
robot_showing_ 
commitment_to 
goal] 

action
[𝐸𝐸 𝑅𝑈𝑅𝑈𝑅𝑈𝑈𝑈𝑈 ≥ 𝜖] 

robot_showing_ 
commitment_to_goal 

action 
[ user_repairing_ 
robot_action] 

Figure 2: An Interactive Statechart as modelled by the Robot. The statechart consists of two paral-
lel, concurrent states, one for each participant. The triggering events and conditions in the transition
functions (the directed edges) can reference the other state.

displayed their goal publicly, where goals are hid-
den in the case of the user state and observed in
the case of the robot.

As shown in Fig.7, UserGoal is estimated as
the most likely desired future state the user intends
in the set of possible future states States, given
the current utterance u, the robot’s stateRobot and
the current task’s state Task, as below.

UserGoal := arg max
s∈States

p(s | u,Robot, Task)
(7)

Note, conditioning on the current task is in line
with agenda-based approaches to dialogue man-
agement (Traum and Larsson, 2003) and also in
line with characterizing tasks (or games) as state
machines themselves. Our future work will in-
volve more complex task structures.

While the user’s goal is being updated through
new evidence, this goal can only be judged to
become sufficiently mutually manifest with the
robot when a certain confidence criteria has been
met– here we characterize this as reaching a
real-valued threshold δ. As the statechart diagram
shows, once Ev(UserGoal) ≥ δ then the state
user_showing_commitment_to_goal
substate can be entered, which is accessi-
ble by the Robot state machine in its tran-
sition functions to trigger the robot into
robot_showing_commitment_to_goal.
Characterizing this criteria as a threshold allows
experimentation into increasing responsiveness of
the robot by reducing it, and we explore this in

our implemented system– see §5 below.
Conversely, the Robot’s view of its own

state uses the function Ev(RobotGoal) and
its own threshold �. Unlike the user, the
robot’s own state is taken to be fully observed,
however it must still estimate when its own
RobotGoal is made public by its action, and
once � has been reached, the robot may enter
robot_showing_commitment_to_goal.
Once this is the case it is permissible for
the user state to either commit to the goal
and trigger grounding, else engage the robot
in repair. The robot will be in the repair-
ing state until the user’s state has exited the
user_repairing_robot_action state.
Note that it is only possible for the user state to
repair the RobotGoal, rather than UserGoal– the
user can repair the latter through self-repair, but
that is currently not represented as its own state.

The necessary conditions of incrementality
posed by examples in Fig. 1 (B) and (C) above
are met here as the increment size of the trigger-
ing events in the User state is the utterance of the
latest wordw in current utterance u (as opposed to
the latest complete utterance). The principal Natu-
ral Language Understanding (NLU) decisions are
therefore to classify incrementally which type of
dialogue act u is, (e.g. u : Confirm), whether
w begins a new dialogue act or not, and estimate
UserGoal. The statechart is then checked to see
if a transition is possible from the user’s current
state as each word is processed, akin to incremen-
tal dialogue state tracking (Williams, 2012).

291



3.2 Managing Fluid Grounding with the IU
framework

To manage the processing and information flow,
we use the Incremental Unit (IU) framework
(Schlangen and Skantze, 2011). Currently, in
implemented IU framework systems such as
Jindigo (Skantze and Hjalmarsson, 2010), Dy-
Lan (Purver et al., 2011) and InproTK (Baumann
and Schlangen, 2012), processing goes bottom-up
(from sensors to actuators) and the creation of in-
cremental units (IUs) is driven by input events to
each module from bottom to top. IUs are pack-
ages of information at a pre-defined level of gran-
ularity, for instance a wordIU can be used to rep-
resent a single incremental ASR word hypothesis,
and their creation in the output buffers of a mod-
ule triggers downstream processing and creation
of new IUs in modules with access to that buffer.
IUs can be defined to be connected by directed
edges, called Grounded In links, which in gen-
eral take the semantics of “triggered by” from the
source to the sink.

Grounded In links are useful in cases where in-
put IU hypotheses may be revoked (for instance,
by changing ASR hypotheses), as reasoning can
be triggered about how to revoke or repair ac-
tions that are Grounded In these input IUs. Buß
and Schlangen (2011) take precisely this approach
with their dialogue manager DIUM, and Kenning-
ton et al. (2014) show how abandoning synthesis
plans can be done gracefully at short notice.

In order to manage the grounding strategies
above, we recast the IU dependencies: while the
output IUs are taken as Grounded In the input IUs
which triggered them, as per standard processing,
in our system the reverse will also be true: consis-
tent with the statecharts driving the behaviour, the
interpretation of a user action is taken as an action
in response to the robot’s latest or currently ongo-
ing robot action, consequently interpretation IUs
can be grounded in action IUs– see the reversed
feedback arrow in Fig. 3.

To deal with concurrency issues that this
closed-loop approach has, the IU modules coor-
dinate their behaviours by sending event instances
to each other, where events here are in fact IU edit
messages shared in their buffers. The edit mes-
sages consist in ADDs where the IU is initially
created, COMMITs if there is certainty they will
not change their payload, and, as mentioned above
REVOKEs may be sent if the basis for an ADDed

w1 w2 w3 w4
Perception	

(ASR)

Decision maker	

(action selector)

Actuator

Sys:	

!
!

User:
i1 i2 i3 i4

d1 d2 d3 d4

a1 a2 a3 a4

Interpretation

time

Figure 3: The addition of tight feedback over stan-
dard IU approaches helps achieve requirements of
fluid interaction and situated repair interpretation.
Grounded In links in blue.

IU becomes unreliable. IUs also have different
temporal statuses of being either upcoming, ongo-
ing or completed, a temporal logic which allows
the system to reason with the status of the actions
being executed or planned by the robot.

4 PentoRob: A Simple Robot for
Investigating Grounding

We implement the above grounding model and
incremental processing in a real-world pick-and-
place robot PentoRob, the architecture of which
can be seen in Fig. 4. The domain we use in
this paper is grabbing and placing real-world Pen-
tomino pieces at target locations, however the sys-
tem is adaptable to novel objects and tasks.

Hardware For the robotic arm, we use the
ShapeOko2,1 a heavy-duty 3-axis CNC machine,
which we modified with a rotatable electromag-
net, whereby its movement and magnetic field is
controlled via two Arduino boards. The sensors
are a webcam and microphone.

4.1 System components
PentoRob was implemented in Java using the In-
proTK (Baumann and Schlangen, 2012) dialogue
systems toolkit.2 The modules involved are de-

1http://www.shapeoko.com/wiki/index.
php/ShapeOko_2

2http://bitbucket.org/inpro/inprotk

292



Understanding 

Perception Actuation 

World 

System 

wordIU 
ADDs 

actionIU  
COMMITs 

actionRequestIU 
ADDs 

actionIU 
COMMITs actionIU 

ADDs 

sceneIU 
ADDs 

Action generation 

 

         User  
 State Machine 

 

 

Reference 
Resolution 

 

 
ASR 

 

 
Vision 

 

 

Robot 
Control 

 

sceneIU 
ADDs 

 

Game  
State Machine 

 

 

Robot 
State Machine 

 

G-code 

Figure 4: PentoRob’s architecture.

scribed below, in terms of their input information
or IUs, processing, and output IUs.

Incremental Speech Recognizer (ASR) We
use Google’s web-based ASR API (Schalkwyk et
al., 2010) in German mode, in line with the na-
tive language of our evaluation participants. As
Baumann et al. (2016) showed, while Google can
produce partial results of either multiple or sin-
gle words, all outputs are packaged into single
WordIUs. Its incremental performance is not as
responsive as more inherently incremental local
systems such as Kaldi or Sphinx-4, however, even
when trained on in-domain data, other systems
cannot consistently match its Word Error Rate in
our target domain in German, where it achieves
20%. Its slightly sub-optimal incremental perfor-
mance did not incur great costs in terms of the
grounding we focus on here.

Computer Vision (CV) We utilize OpenCV in
a Python module to track objects in the cam-
era’s view. This information is relayed to In-
proTK from Python via the Robotics Service Bus
(RSB),3 which outputs IDs and positions of ob-
jects it detects in the scene along with their low-
level features (e.g., RGB/HSV values, x,y coor-
dinates, number of edges, etc.), converting these
into SceneIUs which the downstream reference
resolution model consumes.The Robot State Ma-
chine also uses these for reasoning about positions

3https://code.cor-lab.de/projects/rsb

of the objects it plans to grab.4

Reference resolution (WAC) The reference
resolution component consists of a Words
As Classifiers (WAC) model (Kennington and
Schlangen, 2015). PentoRob’s WAC model is
trained on a corpus of Wizard-of-Oz Pentomino
puzzle playing dialogue interactions. In off-line
training, WAC learns a functional “fit” between
words in the user’s speech and low-level visual
object features, learning a logistic regression clas-
sifier for each word. Once trained, when given the
context of a novel visual scene and novel incom-
ing words, each word classifier yields a probabil-
ity given each object’s features. During applica-
tion, as a referring expression is uttered and recog-
nised, each classifier for the words in the expres-
sion are applied to all objects in the scene, which
after normalisation, results in a probability distri-
bution over objects. Kennington and Schlangen
(2015) report 65% accuracy on a 1-out-of-32 ref-
erence resolution task in this domain with the
same features. For this paper, this accuracy can
be seen as a lower bound, as the experimental set-
up we report below uses a maximum of 6 objects,
where the performance is generally significantly
better.

User State Machine We implement the prin-
cipal NLU features within the User State Ma-
chine module, which constitutes the User state
of the Interactive Statechart. While the statechart
manages the possible transitions between states,
their triggering criteria require the variables of
UserGoal, the estimated current user goal and its
strength-of-evidence functionEv to be defined. In
our domain we characterize UserGoal as simply
taking or placing most likely object in the referent
set R being referred to according to WAC’s out-
put distribution given the utterance u so far, e.g.
(8), and the Ev function as simply the probabil-
ity value of the highest ranked object in WAC’s
distribution over its second highest rank as in (9).

UserGoal = TAKE(arg max
r∈R

p(r | u)) (8)

Ev(UserGoal) = Margin(arg max
r∈R

p(r | u)) (9)

As for the process which feeds incoming words
into the WAC model to obtain UserGoal, here

4The objects’ positions are calculated accurately from a
single video stream using perspective projection.

293



we use a simple incremental NLU method which
is sensitive to the Robot’s current state in addi-
tion to the User statechart. This is a process
which first performs sub-utterance dialogue act
(DA) classification, judging the utterance to be
in {request, confirm, repair} after every word.
The classifier is a simple segmenter which uses
key word spotting for confirm words and com-
mon repair initiating words, and also classifies
a repair if the word indicates change in the
UserGoal as defined in (8), else outputting the
default request.5 Given the DA classification,
the state machine is queried to see if transition-
ing away from the current state is possible accord-
ing to the statechart (see Fig. 7 in the Appendix)–
if not it remains in the same state and treats the
user’s speech as irrelevant.

If a successful state change is achieved, then
if UserGoal has changed or been instantiated
in the process, a new ActionRequestIU is made
available in its right buffer, whose payload is
a frame with the dialogue act type, the action
type (take or place) and optional arguments
target_piece and target_location.

For dealing with repairs, as seen in Fig. 7, en-
tering a repairing state triggers a prune of States,
removing the evidencedRobotGoal. In PentoRob
this is simply a pruning of the referent setR of the
objects(s) in the RobotGoal as below:

R := {x | p(RobotGoal | x) = 0} (10)

This simple strategy allowsUserGoal to be recal-
culated, resulting in interactions like (4) and (6) in
Fig.1.

Robot State Machine The Robot’s state ma-
chine gets access to its transition conditions in-
volving the User’s state machine through the Ac-
tionRequestIUs it has access to in its left buffer.
As seen in Fig.7 (Appendix), when the User
state is showing_commitment_to_goal,
the RobotGoal is set to UserGoal, and through
a simple planning function, a number of Action-
IUs are cued to achieve it – it sends these as RSB
messages to the PentoRob actuation module and
once confirmed, again via RSB, that the action has
begun, the ActionIU is committed and the Robot’s
action state is set to one of the following, with su-
perstates in brackets:

5While a somewhat crude approach, it worked reliably
enough in our test domain, and is not the focus of the paper.

{stationary_without_piece |
moving_without_piece |
moving_to_piece (taking) |
over_target_piece (taking) |
grabbing_piece (taking) |
stationary_with_piece(placing) |
moving_with_piece (placing) |
over_target_location (placing) |
dropping_piece (placing)}

For estimation of its own state, the robot state has
the following function:

Ev(RobotGoal) =



1 if over target piece,
1 if over target location,
0.5 if taking,
0.5 if placing,
0 otherwise

(11)

The simplistic function embodies the assump-
tion that there is absolute certainty that Pen-
toRob’s goal has been demonstrated when its arm
is directly over the target pieces and locations, else
if it is moving to these positions, there is some ev-
idence, else there is none.

PentoRob actuation module The module con-
trolling the actual robotic actuation of the
ShapeOKO arm is a Python module with an Ar-
duino board G-code interface to the arm. This
sends RSB feedback messages to the PentoRob
control module to the effect that actions have been
successful or unsuccessfully started, and with
their estimated finishing time.

5 Evaluation Experiments

With the above system, we can successfully
achieve all three types of grounding strategy in
Fig 1. We evaluate the incremental mode (B) and
fluid mode (C) in a user study with German speak-
ers. In our first and principal study we experiment
with varying theRobot state’s � grounding param-
eter to see whether users show preference for a
more fluid model, and what effect fluidity has on
task success.

The study was a within-subjects design. It had
12 participants, who played a total of 6 rounds
each of a simple game with PentoRob. Users were
instructed to tell the robot to pick up and place
wooden Pentomino pieces onto numbered loca-
tions at the bottom of the playing board in a given
order according to a photograph of final config-
urations showing the final location and the de-
sired order of placement. Participants were told
they could confirm or correct Pentorob’s actions.

294



They played three rounds in progressing level of
difficulty, beginning with a simple situation of 3
pieces of all differing shapes and colours arranged
in a line and far apart, followed by another round
with 4 pieces arranged in a non grid-like fashion,
followed by a more difficult round with 6 pieces
where the final two shapes to be placed were close
together and the same colour. They play each
round twice, once with each version of the sys-
tem. The order of the conditions was changed
each time. The two settings PentoRob’s system
operated in were as follows:

Incremental: A cautious strategy whereby � =
1. Given (11) only allows PentoRob to enter the
robot_showing_commitment_to_goal state
when in the states over_target_piece or
over_target_location, confirmations and re-
pairs cannot be interpreted during robotic action.

Fluid: An optimistic strategy whereby � = 0.5. Given
(11), if PentoRob is the superstates of taking or
placing then this is taken as sufficient evidence for
showing commitment, and therefore confirmations or
repairs can be interpreted during robotic movement.

The users rate the system after every round on a
5-point Likert scale questionnaire asking the ques-
tions (albeit in German) as shown in Fig. 5. We
hypothesized that the fluid setting would be rated
more favourably, due to its behaviour being closer
to that observed in manipulator roles in human-
human interaction. We had several objective cri-
teria: an approximation to task success as the av-
erage time taken to place a piece in the correct
location, and also as indications of the variety of
dialogue behaviour the repair rate per word (i.e.
words classified as belonging to a repair act) and
the confirmation rate per word.

5.1 Results
Several rounds had to be discarded due to tech-
nical failure, leaving 24 ratings from the easier
rounds (1 and 2) and 18 from the harder round
3. We found no significant differences in the over-
all questionnaire responses, however for the easier
rounds alone, there was a significant preference
for the Fluid system for the feeling that the sys-
tem understood the user (Fluid mean=3.88, Incre-
mental mean=3.18, Mann-Whitney U p <0.03).
The Fluid setting was not preferred significantly
in terms of ease of playing (p <0.06), and the rat-
ings were generally positive for ratings of fun and
wanting to play again but without significant dif-
ferences between the two settings.

0 1 2 3 4 5

Fluid

Incremental

Did you find it easy to play with PentoRob?

0 1 2 3 4 5

Fluid

Incremental

Was it fun to play?

0 1 2 3 4 5

Fluid

Incremental

Would you play with PentoRob again?

0 1 2 3 4 5

**Fluid

Incremental

Did you feel PentoRob understood what you were saying?

Figure 5: User ratings of the systems in the easier
setting (** = Mann-Whitney U with p <0.05)

Within the objective measures in terms of task
success (time per piece placed), and rates of differ-
ent incremental dialogue acts, there were no sig-
nificant differences between the systems, only a
tendency for a higher rate of confirmation words
in the fluid setting. The limiting factor of the
speed of the robotic arm meant the task success
was not improved, however the noticeable in-
crease in displaying understanding was likely due
to the affordance of confirming and repairing dur-
ing the robotic action.

5.2 Preliminary investigation into the User’s
criteria for showing commitment

For a preliminary investigation into the other pa-
rameter in our grounding model, we performed
a study with 4 further participants who played
with a system in both the modes described above
again, but this time with δ, the User’s judgement
of showing commitment to their goal (which is
a confidence threshold for WAC’s reference res-
olution hypothesis (8)) being set much lower–
0.05, compared to 0.2 in the first study. The
lower threshold results in earlier, though possibly
less accurate, reference resolution and consequent
movement to target pieces.

We compared this group’s objective measures
to a random sample of 4 participants from the first

295



Fluid Incremental
0

5

10

15

20

25

30

35

40
Time per piece (s)

**Fluid Incremental
0.00

0.02

0.04

0.06

0.08

0.10
Repair rate per word

Figure 6: Preliminary result: Repair rates were
significantly higher in the more fluid setting with
a lower δ parameter of the grounding model whilst
not affecting task success.

study, and there was a significant difference in
repair rates (Fluid= 0.047 per word (st.d=0.024),
Incremental=0.011 per word (st.d=0.011), T-test
p <0.01) – see Fig. 6. Also, there was a ten-
dency for higher rates of confirmation (Fluid=
0.245 per word (st.d=0.112), Incremental=0.151
per word (st.d=0.049), T-test p = 0.06). Encour-
agingly, the repair rates are in line with those re-
ported in human-human similar task-oriented di-
alogue, with onsets occurring in 2-5% of words
(Colman and Healey, 2011). However, also en-
couraging is that despite more time spent repair-
ing and confirming in the more predictive system
with the lower δ threshold, there was no effect on
task success (e.g. see the near identical means for
time taken to place each piece in Fig. 6).

5.3 Discussion
In the first experiment, the ratings results suggest
the fluid setting’s affordance of allowing confir-
mations and repairs during the robot’s movement
was noticed in easier rounds. More work is re-
quired to allow this effect to persist in the harder
round, as severe failures in terms of task success
cancelled the perception of fluidity.

The second experiment showed that the earlier
movement of the robot arm to the target piece re-
sulted in the user engaging in more repair of the
movement, but this did not affect task success in
terms of overall speed of completion. The de-
gree to which the earlier demonstration of com-
mitments to a goal during a user’s speech, despite
repair being required more often, can increase in-
teractive success in more challenging reference
situations will be investigated in future work.

6 Conclusion

We have presented a model of fluid, task action-
based grounding, and have shown that it can be
implemented in a robot that perceives and ma-
nipulates real-world objects. When general task-
performance is good enough, the model leads to
the perception of better understanding over a more
standard incremental processing model.

There are some weaknesses with the cur-
rent study. We intend to use more complex
strength of evidence measures, for example for
Ev(UserGoal) using ASR hypotheses confi-
dence thresholds (Williams, 2012), and having
a more complex Ev(RobotGoal) based on the
robot’s current position and velocity. We also
want to explore learning and optimization for our
incremental processing, with points of departure
being (Paetzel et al., 2015), (Dethlefs et al., 2012),
and the proposal by (Lemon and Eshghi, 2015).

The future challenge, yet potential strength, for
our model is that unlike most approaches which
assume a finite state Markov model for probabilis-
tic estimation, we do not assume the Cartesian
product of all possible substates needs to be mod-
elled. The mathematics of how this can be done
for a complex hierarchical model has had recent
attention, for example in recent work in proba-
bilistic Type Theory with Records (Cooper et al.,
2014)– we intend to pursue such an approach in
coming work.

Acknowledgments

We thank the three SigDial reviewers for their helpful com-

ments. We thank Casey Kennington, Oliver Eickmeyer and

Livia Dia for contributions to software and hardware, and

Florian Steig and Gerdis Anderson for their help in run-

ning the experiments. This work was supported by the Clus-

ter of Excellence Cognitive Interaction Technology ‘CITEC’

(EXC 277) at Bielefeld University, funded by the German

Research Foundation (DFG), and the DFG-funded DUEL

project (grant SCHL 845/5-1).

References
Timo Baumann and David Schlangen. 2012. The in-

protk 2012 release. In NAACL-HLT Workshop on
Future Directions and Needs in the Spoken Dialog
Community: Tools and Data. ACL.

Timo Baumann, Casey Kennington, Julian Hough, and
David Schlangen. 2016. Recognising conversa-
tional speech: What an incremental asr should do

296



say w  
[u ⋅ w  : request, 
robot_ 
uncommitted] 
/u ≔  u ⋅  w 

  say w  
[u ⋅ w : repair, 

robot_showing_ 
commitment_to_goal] 

/u ≔  u ⋅  w 

user_repairing_robot_action 

user_requesting_robot_achieve_goal 
 

𝑆𝑆𝑆𝑆𝑆𝑆 ≔ 𝑥  𝑝 𝑅𝑅𝑅𝑅𝑆𝑅𝑅𝑆𝑅  𝑥 = 0  
UserG𝑅𝑆𝑅 ≔ arg max

𝑠∈𝑆𝑆𝑆𝑆𝑆𝑠
 𝑝 𝑆 𝑢,𝑅𝑅𝑅𝑅𝑆,𝑇𝑆𝑆𝑇) 

UserG𝑅𝑆𝑅 ≔ arg max
𝑠∈𝑆𝑆𝑆𝑆𝑆𝑠

 𝑝 𝑆 𝑢,𝑅𝑅𝑅𝑅𝑆,𝑇𝑆𝑆𝑇) 

   user_committed_to_goal 

robot_uncommitted 

[robot_achieving_goal] 
say w  

[! u ⋅ w  : confirm] 
/ u ≔  u ⋅ w  

Action ≔ Agenda.pop() 
DO Action 

robot_showing_ 
commitment_to_goal 

user_showing_ 
commitment_to_goal 

     [𝐸𝐸 𝑅𝑅𝑅𝑅𝑆𝑅𝑅𝑆𝑅 ≥ 𝜖] 

 
 

[𝐸𝐸 𝑈𝑆𝑆𝑈𝑅𝑅𝑆𝑅 ≥ 𝛿] 

user_waiting_during_robot_action 

user_uncommitted 

robot_performing 
_action 

robot_committed_ 
to_goal 

[user_committed_to_goal] 

[𝐴𝐴𝑆𝐴𝐴𝑆 ≠ { }] 

[ user_ 
uncommitted] 

[user_repairing_ 
robot_action] 

/RobotG𝑅𝑆𝑅 ≔ ∅ 
/Agenda := {}  

[ 𝐴𝐴𝑆𝐴𝐴𝑆 == {} ] 
 /Facts := Facts ∪ {RobotGoal} 

/RobotG𝑅𝑆𝑅 ≔ ∅ 

robot_repairng_robot_action 

DO  abort(Action) 

robot_achieving_goal 

[user_showing_ 
commitment_to_goal] 

/RobotG𝑅𝑆𝑅 ≔ UserGoal 
/Agenda := 

plan(RobotGoal)  
[robot_committed_to_goal] 
/Facts := Facts ∪ {UserGoal} 
/G𝑅𝑆𝑅 ≔ ∅ 

User                                                                              Robot 

[user_showing_ 
commitment_to_goal] 

/RobotG𝑅𝑆𝑅 ≔ UserGoal 
/Agenda := plan(RobotGoal)  

say w 
[u ⋅ w  : confirm, 
robot_showing_ 

commitment_to_goal] 

Figure 7: The full Interactive Statechart. States relevant for grounding are in grey.

for a dialogue system and how to get there. In Inter-
national Workshop on Dialogue Systems Technology
(IWSDS) 2016. Universität Hamburg.

Hendrik Buschmeier and Stefan Kopp. 2012. Using a
bayesian model of the listener to unveil the dialogue
information state. In SemDial 2012: Proceedings of
the 16th Workshop on the Semantics and Pragmatics
of Dialogue.

Okko Buß and David Schlangen. 2011. Dium – an in-
cremental dialogue manager that can produce self-
corrections. Proceedings of semdial 2011 (Los An-
gelogue).

Herbert H Clark and Susan E Brennan. 1991. Ground-
ing in communication. Perspectives on socially
shared cognition, 13(1991).

Herbert H Clark. 1996. Using language. Cambridge
university press.

Marcus Colman and Patrick Healey. 2011. The dis-
tribution of repair in dialogue. In c. Hoelscher
and T.F. Shipley, editors, Proceedings of the 33rd
Annual Conference of the Cognitive Science Soci-
ety, Boston, Massachussetts. Austinm TX:Cognitive
Science Society.

Robin Cooper, Simon Dobnik, Shalom Lappin, and
Staffan Larsson. 2014. A probabilistic rich type
theory for semantic interpretation. In Proceedings
of the EACL Workshop on Type Theory and Natural

Language Semantics (TTNLS), Gothenburg, Swe-
den. ACL.

Nina Dethlefs, Helen Hastie, Verena Rieser, and Oliver
Lemon. 2012. Optimising incremental dialogue
decisions using information density for interactive
systems. In Proceedings of the 2012 Joint Confer-
ence on Empirical Methods in Natural Language
Processing and Computational Natural Language
Learning. ACL.

Arash Eshghi, Christine Howes, Eleni Gre-
goromichelaki, Julian Hough, and Matthew
Purver. 2015. Feedback in conversation as incre-
mental semantic update. In Proceedings of the
11th International Conference on Computational
Semantics, London, UK. ACL.

Jonathan Ginzburg, Raquel Fernndez, and David
Schlangen. 2014. Disfluencies as intra-utterance
dialogue moves. Semantics and Pragmatics, 7(9).

Jonathan Ginzburg. 2012. The Interactive Stance:
Meaning for Conversation. Oxford University
Press.

David Harel. 1987. Statecharts: A visual formal-
ism for complex systems. Science of computer pro-
gramming, 8(3).

Julian Hough, Iwan de Kok, David Schlangen, and Ste-
fan Kopp. 2015. Timing and grounding in motor
skill coaching interaction: Consequences for the in-
formation state. In Proceedings of the 19th SemDial

297



Workshop on the Semantics and Pragmatics of Dia-
logue (goDIAL), pages 86–94.

Nicholas R Jennings. 2001. An agent-based approach
for building complex software systems. Communi-
cations of the ACM, 44(4).

Casey Kennington and David Schlangen. 2015. Sim-
ple learning and compositional application of per-
ceptually grounded word meanings for incremental
reference resolution. Proceedings of the Conference
for the Association for Computational Linguistics
(ACL). ACL.

Casey Kennington, Spyros Kousidis, Timo Baumann,
Hendrik Buschmeier, Stefan Kopp, and David
Schlangen. 2014. Better driving and recall when
in-car information presentation uses situationally-
aware incremental speech output generation. In
Proceedings of the 6th International Conference on
Automotive User Interfaces and Interactive Vehicu-
lar Applications. ACM.

Thomas Kollar, Stefanie Tellex, Deb Roy, and
Nicholas Roy. 2010. Toward understanding natural
language directions. In Human-Robot Interaction
(HRI), 2010 5th ACM/IEEE International Confer-
ence on. IEEE.

Geert-Jan M Kruijff. 2012. There is no common
ground in human-robot interaction. In Proceedings
of SemDial 2012 (SeineDial): The 16th Workshop
on the Semantics and Pragmatics of Dialogue.

Oliver Lemon and Arash Eshghi. 2015. Deep re-
inforcement learning for constructing meaning by
babbling. In Interactive Meaning Construction A
Workshop at IWCS 2015.

Changsong Liu, Jacob Walker, and Joyce Y Chai.
2010. Ambiguities in spatial language understand-
ing in situated human robot dialogue. In AAAI Fall
Symposium: Dialog with Robots.

Changsong Liu, Rui Fang, and Joyce Y Chai. 2012.
Towards mediating shared perceptual basis in situ-
ated dialogue. In Proceedings of the 13th Annual
Meeting of the Special Interest Group on Discourse
and Dialogue. ACL.

Matthew Marge and Alexander I Rudnicky. 2011.
Towards overcoming miscommunication in situated
dialogue by asking questions. In AAAI Fall Sympo-
sium: Building Representations of Common Ground
with Intelligent Agents.

Chris McKinstry, Rick Dale, and Michael J Spivey.
2008. Action dynamics reveal parallel competi-
tion in decision making. Psychological Science,
19(1):22–24.

Maike Paetzel, Ramesh Manuvinakurike, and David
DeVault. 2015. so, which one is it? the effect
of alternative incremental architectures in a high-
performance game-playing agent. In 16th Annual
Meeting of the Special Interest Group on Discourse
and Dialogue.

Julia Peltason and Britta Wrede. 2010. Pamini: A
framework for assembling mixed-initiative human-
robot interaction from generic interaction patterns.
In Proceedings of the 11th Annual Meeting of the
Special Interest Group on Discourse and Dialogue.
ACL.

Matthew Purver, Arash Eshghi, and Julian Hough.
2011. Incremental semantic construction in a di-
alogue system. In J. Bos and S. Pulman, editors,
Proceedings of the 9th IWCS, Oxford, UK.

Antoine Raux and Mikio Nakano. 2010. The dy-
namics of action corrections in situated interaction.
In Proceedings of the 11th Annual Meeting of the
Special Interest Group on Discourse and Dialogue.
ACL.

Johan Schalkwyk, Doug Beeferman, Françoise Bea-
ufays, Bill Byrne, Ciprian Chelba, Mike Cohen,
Maryam Kamvar, and Brian Strope. 2010. Your
Word is my Command: Google Search by Voice:
A Case Study. In Advances in Speech Recognition.
Springer.

David Schlangen and Gabriel Skantze. 2011. A Gen-
eral, Abstract Model of Incremental Dialogue Pro-
cessing. Dialoge & Discourse, 2(1).

Gabriel Skantze and Samer Al Moubayed. 2012.
Iristk: a statechart-based toolkit for multi-party
face-to-face interaction. In Proceedings of the 14th
ACM international conference on Multimodal inter-
action. ACM.

Gabriel Skantze and Anna Hjalmarsson. 2010. To-
wards incremental speech generation in dialogue
systems. In Proceedings of the 11th Annual Meeting
of SIGDIAL. ACL.

Michael K Tanenhaus and Sarah Brown-Schmidt.
2008. Language processing in the natural world.
Philosophical Transactions of the Royal Society of
London B: Biological Sciences, 363(1493):1105–
1122.

David R Traum and Staffan Larsson. 2003. The in-
formation state approach to dialogue management.
In Current and new directions in discourse and dia-
logue. Springer.

David R Traum. 1994. A computational theory of
grounding in natural language conversation. Tech-
nical report, DTIC Document.

Jason D Williams. 2012. A belief tracking challenge
task for spoken dialog systems. In NAACL-HLT
Workshop on Future Directions and Needs in the
Spoken Dialog Community: Tools and Data. ACL.

A Supplemental Material

The full statechart is in Figure 7.

298


