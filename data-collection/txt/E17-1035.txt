



















































Addressing the Data Sparsity Issue in Neural AMR Parsing


Proceedings of the 15th Conference of the European Chapter of the Association for Computational Linguistics: Volume 1, Long Papers, pages 366–375,
Valencia, Spain, April 3-7, 2017. c©2017 Association for Computational Linguistics

Addressing the Data Sparsity Issue in Neural AMR Parsing

Xiaochang Peng∗1, Chuan Wang∗2, Daniel Gildea1 and Nianwen Xue2
1University of Rochester

{xpeng, gildea}@cs.rochester.edu
2Brandeis University

{cwang24, xuen}@brandeis.edu

Abstract

Neural attention models have achieved
great success in different NLP tasks. How-
ever, they have not fulfilled their promise
on the AMR parsing task due to the data
sparsity issue. In this paper, we de-
scribe a sequence-to-sequence model for
AMR parsing and present different ways
to tackle the data sparsity problem. We
show that our methods achieve significant
improvement over a baseline neural atten-
tion model and our results are also compet-
itive against state-of-the-art systems that
do not use extra linguistic resources.

1 Introduction

Abstract Meaning Representation (AMR) (Ba-
narescu et al., 2013) is a semantic formalism
where the meaning of a sentence is encoded as a
rooted, directed graph. Figure 1 shows an exam-
ple of an AMR in which the nodes represent the
AMR concepts and the edges represent the rela-
tions between the concepts they connect. AMR
concepts consist of predicate senses, named entity
annotations, and in some cases, simply lemmas of
English words. AMR relations consist of core se-
mantic roles drawn from the Propbank (Palmer et
al., 2005) as well as very fine-grained semantic re-
lations defined specifically for AMR. These prop-
erties render the AMR representation useful in ap-
plications like question answering and semantics-
based machine translation.

The task of AMR graph parsing is to map nat-
ural language strings to AMR semantic graphs.
Recently, a sizable new corpus of English/AMR
pairs (LDC2015E86) has been released. Different
parsers have been developed to tackle this prob-
lem (Flanigan et al., 2014; Wang et al., 2015b;

*Both authors contribute equally.

describe-01

person

genius

ARG0
ARG1

ARG2

name

“Ryan”

name

op1

Figure 1: An example of AMR graph representing
the meaning of: “Ryan’s description of himself: a
genius.”

Artzi et al., 2015; Pust et al., 2015; Peng et al.,
2015). Most of these parsers have used external re-
sources such as dependency parses, semantic lexi-
cons, etc., to tackle the sparsity issue.

Recently, Sutskever et al. (2014) introduced
a neural network model for solving the general
sequence-to-sequence problem, and Bahdanau et
al. (2014) proposed a related model with an atten-
tion mechanism that is capable of handling long
sequences. Both models achieve state-of-the-art
results on large scale machine translation tasks.

However, sequence-to-sequence models mostly
work well for large scale parallel data, usually in-
volving millions of sentence pairs. Vinyals et al.
(2015) present a method which linearizes parse
trees into a sequence structure and therefore a
sequence-to-sequence model can be applied to the
constituent parsing task. Competitive results have
been achieved with an attention model on the Penn
Treebank dataset, with only 40K annotated sen-
tences.

AMR parsing is a much harder task in that the
target vocabulary size is much larger, while the
size of the dataset is much smaller. While for
constituent parsing we only need to predict non-

366



terminal labels and the output vocabulary is lim-
ited to 128 symbols, AMR parsing has both con-
cepts and relation labels, and the target vocabu-
lary size consists of tens of thousands of sym-
bols. Barzdins and Gosko (2016) applied a sim-
ilar approach where AMR graphs are linearized
using depth-first search and both concepts and re-
lations are treated as tokens (see Figure 3). Due to
the data sparsity issue, their AMR parsing results
are significantly lower than state-of-the-art models
when using the neural attention model.

In this paper, we present a method which lin-
earizes AMR graphs in a way that captures the
interaction of concepts and relations. To over-
come the data sparsity issue for the target vocab-
ulary, we propose a categorization strategy which
first maps low frequency concepts and entity sub-
graphs to a reduced set of category types. In or-
der to map each type to its corresponding target
side concepts, we use heuristic alignments to con-
nect source side spans and target side concepts or
subgraphs. During decoding, we use the mapping
dictionary learned from the training data or heuris-
tic rules for certain types to map the target types to
their corresponding translation as a postprocessing
procedure.

Experiments show that our linearization strat-
egy and categorization method are effective for the
AMR parsing task. Our model improves signifi-
cantly in comparison with the previously reported
sequence-to-sequence results and provides a com-
petitive benchmark in comparison with state-of-
the-art results without using dependency parses or
other external semantic resources.

2 Sequence-to-sequence Parsing Model

Our model is based on an existing sequence-to-
sequence parsing model (Vinyals et al., 2015),
which is similar to models used in neural machine
translation.

2.1 Encoder-Decoder

Encoder. The encoder learns a context-aware
representation for each position of the input se-
quence by mapping the inputs w1, . . . , wm into a
sequence of hidden layers h1, . . . , hm. To model
the left and right contexts of each input position,
we use a bidirectional LSTM (Bahdanau et al.,
2014). First, each input’s word embedding repre-
sentation x1, . . . , xm is obtained though a lookup
table. Then these embeddings serve as the input to

two RNNs: a forward RNN and a backward RNN.
The forward RNN can be seen as a recurrent func-
tion defined as follows:

hfwi = f(xi, h
fw
i−1) (1)

Here the recurrent function f we use is Long-
Short-Term-Memory (LSTM) (Hochreiter and
Schmidhuber, 1997). The backward RNN works
similarly by repeating the process in reverse order.
The outputs of forward RNN and backward RNN
are then depth-concatenated to get the final repre-
sentation of the input sequence.

hi = [h
fw
i , h

bw
m−i+1] (2)

Decoder. The decoder is also an LSTM model
which generates the hidden layers recurrently. Ad-
ditionally, it utilizes an attention mechanism to put
a “focus” on the input sequence. At each output
time step j, the attention vector d

′
j is defined as

a weighted sum of the input hidden layers, where
the masking weight αji is calculated using a feed-
forward neural network. Formally, the attention
vector is defined as follows:

uji = v
T tanh(W1hi +W2dj) (3)

αji = softmax(u
j
i ) (4)

d
′
j =

m∑
i=1

αjihi (5)

where dj is the output hidden layer at time step
j, and v, W1, and W2 are parameters for the
model. Here the weight vector αj1, . . . , α

j
m is

also interpreted as a soft alignment in the neural
machine translation model, which similarly could
also be treated as a soft alignment between token
sequences and AMR relation/concept sequences in
the AMR parsing task. Finally, we concatenate the
hidden layer dj and attention vector d

′
j to get the

new hidden layer, which is used to predict the out-
put sequence label.

P (yj |w, y1:j−1) = softmax(W3[dj , d′j ]) (6)

2.2 Parse Tree as Target Sequence
Vinyals et al. (2015) designed a reversible way of
converting the parse tree into a sequence, which
they call linearization. The linearization is per-
formed in the depth-first traversal order. Figure 2
shows an example of the linearization result. The
target vocabulary consists of 128 symbols.

367



John has a dog .

S

NP VP .

NNP VBZ NP

NP NP

John has a dog . (S (NP NNP )NP (VP VBZ (NP DT NN )NP )VP . )S

Figure 2: Example parsing task and its lineariza-
tion.

In practice, they found that using the attention
model is more data efficient and works well on
the parsing task. They also reversed the input sen-
tence and normalized the part-of-speech tags. Af-
ter decoding, the output parse tree is recovered
from the output sequence of the decoder in a post-
processing procedure. Overall, the sequence-to-
sequence model is able to match the performance
of the Berkeley Parser (Petrov et al., 2006).

3 AMR Linearization

Barzdins and Gosko (2016) present a similar lin-
earization procedure where the depth-first traver-
sal result of an AMR graph is used as the AMR
sequence (see Figure 3). The bracketing structure
of AMR is hard to maintain because the predic-
tion of relation (with left parenthesis) and the pre-
diction of an isolated right parenthesis are not cor-
related. As a result, the output AMR sequences
usually have parentheses that do not match.

We present a linearization strategy which cap-
tures the bracketing structure of AMR and the con-
nection between relations and concepts. Figure 3
shows the linearization result of the AMR graph
shown in Figure 1. Each relation connects the
head concept to a subgraph structure rooted at the
tail concept, which shows one branch below the
head concept. We use the relation label and left
parenthesis to show the beginning of the branch
(subgraph) and use right parenthesis paired with
the relation label to show the end of the branch.
We additionally add “-TOP-(” at the beginning to
show the start of the traversal of the AMR graph
and add “)-TOP-” at the end to show the end of
traversal. When a symbol is revisited, we replace
the symbol with “-RET-”. We additionally add the
revisited symbol before “-RET-” to decide where
the reentrancy is introduced to.1 We also get rid of

1This is an approximation because one concept can appear
multiple times, and we simply attach the reentrancy to the
most recent appearance of the concept. An additional index
would be needed to identify the accurate place of reentrancy.

(describe-01 :ARG0 (person :name (name :op1 “Ryan”) ) 
  :ARG1 (person ) :ARG2 genius)

-TOP-( describe-01 ARG0( person name( name op1( “Ryan” )op1 
)name )ARG0 ARG1( person -RET- )ARG1 ARG2( genius )ARG2 )-TOP-

Barzdins and Gosko (2016) 

Our linearization

Figure 3: Comparison of AMR linearization

variables and only keep the full concept label. For
example, “g / genius” to “genius”.

We can easily recover the original AMR graph
from its linearized sequence. The sequence also
captures the branching information of each rela-
tion explicitly by representing it with a start sym-
bol and an end symbol specific to that relation.
During our experiments, most of the output se-
quences have a matching bracketing structure us-
ing this linearization strategy. The idea of lin-
earization is basically a depth-first traversal of the
AMR where the original graph structure can be
reconstructed with the linearization result. Even
though we call it a sequence, its core idea is actu-
ally generating a graph structure from top-down.

4 Dealing with the Data Sparsity Issue

While sequence-to-sequence models can be suc-
cessfully applied to constituent parsing, they do
not work well on the AMR parsing task as shown
by Barzdins and Gosko (2016). The main bottle-
neck is that the size of target vocabulary for AMR
parsing is much larger than constituent parsing,
tens of thousands in comparison with 128, and the
size of training data is less than half of that avail-
able for parsing.

In this section, we present a categorization
method which significantly reduces the target vo-
cabulary size, as the alignment from the attention
model does not work well on the relatively small
dataset. To adjust for the alignment errors made
by the attention model, we propose to add super-
vision from an alignment produced by an external
aligner which can use lexical information to over-
come the limit of data size.

4.1 AMR Categorization

We define several types of categories and map low
frequency words into these categories.

1. DATE: we reduce all the date entity sub-
graphs to this category, ignoring details of the
specific date entity.

368



Before linearization:

chinese seismology be gallop down the 
wrong road .

(g / gallop-01

                               :ARG0 (s / seismology

                                                                   :mod (c / country :wiki "China"

                                                                                         :name (n / name :op1 "China")))

                    :ARG1 (r / road

                                              :mod (w / wrong))

                             :direction (d / down))

Sentence side (lemmatized, 

lower cased)
AMR side

After linearization:

NE_country-0 -SURF--0 be -VERB--0 
down the wrong -SURF—1 .

-TOP-( -VERB--0 ARG0( -SURF--0 

mod( NE_country-0 )mod )ARG0 ARG1( 

-SURF—1 mod( wrong )mod 

)ARG1 direction( down )direction )-TOP-

Figure 4: An example of categorized sentence-AMR pair.

2. NE {ent}: we reduce all named entity sub-
graphs to this category, where ent is the root
label of each subgraph, such as country or
person.

3. -VERB-: we map predicate variables with
low frequency (n < 50) to this category

4. -SURF-: we map non-predicate variables
with low frequency (n < 50) to this category

5. -CONST-: we map constants other than num-
bers, “-”, “interrogative”, “expressive”, “im-
perative” to this category.

6. -RET-: we map all revisited concepts to this
category.

7. -VERBAL-: we additionally use the verbal-
ization list 2 from the AMR website and map
matched subgraphs to this category.

After the re-categorization, the vocabulary size is
substantially reduced to around 2000, though this
vocabulary size is still very large for the relatively
small dataset. These categories and the frequent
concepts amount to more than 90% of all the target
words, and each of these are learned with a larger
number of occurrences.

4.2 Categorize Source Sequence
The source side tokens also have sparsity issues.
For example, even if we have mapped the number
1997 to “DATE”, we can not easily generalize it

2http://amr.isi.edu/download/lists/verbalization-list-
v1.06.txt

to the token 1993 if it does not appear in the train-
ing data. Also, some special 6-digit date formats
such as “YYMMDD” are hard to learn using co-
occurrence statistics.

Our basic approach to dealing with this issue is
to generalize these sparse tokens or spans to some
special categories (currently we use the same set
of categories defined in the previous section). On
the training data, we can use the heuristic align-
ment. For example, if we learned from the heuris-
tic alignment that “010911” is aligned to a date-
entity of September 11, 2001 on the AMR side,
we use the same category “DATE” to replace this
token. We distinguish this alignment from other
date alignments by assigning a unique indexed cat-
egory “DATE-X” to both sides of the alignment,
where “X” counts from 0 and adds one for each
new date entity from left to right on the sentence
side. The same index strategy goes for all the
other categories. Figure 4 shows an example of the
linearized parallel sequence. The first infrequent
non-predicate variable “seismology” is mapped to
“-SURF–0”, then “wrong” to “-SURF–1” based
on its position on the sentence side. The indexed
category labels are then projected onto the tar-
get side based on the heuristic alignment. Dur-
ing this re-categorization procedure, we build a
map Q from each token or span to its most likely
concept or category on the target side based on
relative frequency. We also dump a DATE tem-
plate for recognizing new date entities by abstract-
ing away specific date fields such as “1997” to
“YEAR”, “September” to “MONTH”. For exam-
ple, we build a template “MONTH DAY, YEAR”

369



from the specific date mention “June 6, 2007”.
During decoding, we are only given the sen-

tence. We first use the date templates learned from
the training data to recognize dates in each sen-
tence. We also use a named entity tagger to rec-
ognize named entity mentions in the sentence. We
use the entity name and wiki information from Q
if there is a match of the entity mention, otherwise
for convenience we simply use “person” as the en-
tity name and use wiki “-”. For each of the other
tokens, we first look it up in Q and replace it with
the most likely mapping. If there is no match, we
further look it up in the verbalization list. In case
there is still no match, we use the part of speech in-
formation to assign its category. We replace verbs
with category “-VERB-” and nouns with category
“-SURF-”. In accordance with the categorized to-
ken sequence, we also index each category in the
resulting sequence from left to right.

4.3 Recovering AMR graph
During decoding, our output sequences usually
have categories and we need to map each category
to AMR concepts or subgraphs. When we cate-
gorize the tokens in each sentence before decod-
ing, we save the mapping from each category to
its original token as table D. As we use the same
set of categories on both source and target sides,
we heuristically align target side category label
to its source side counterpart from left to right.
Given table D, we know which source side token
it comes from and use the most frequent concept
or subgraph of the token to replace the category.

4.4 Supervised Attention Model
In this section, we propose to learn the attention
vector in a supervised manner. There are two main
motivations behind this. First, the neural atten-
tion model usually utilizes millions of data points
to train the model, which learns a quite reason-
able attention vector that at each output time step
constrains the decoder to put a focus on the in-
put sequences (Bahdanau et al., 2014; Vinyals et
al., 2015). However, we only have 16k sentences
in the AMR training data and our output vocab-
ulary size is quite large, which makes it hard for
the model to learn a useful alignment between the
input sequence and AMR concepts/relations. Sec-
ond, as argued by Liu et al. (2016), the sequence-
to-sequence model tries to calculate the attention
vector and predict the current output label simulta-
neously. This makes it impossible for the learned

soft alignment to combine information from the
whole output sentence context. However, tradi-
tional word alignment can easily use the whole
output sequence, which will produce a more in-
formed alignment.

Similar to the method used by Liu et al. (2016),
we add an additional loss to the original objec-
tive function to model the disagreement between
the reference alignment and the soft alignment
produced by the attention mechanism. Formally,
for each input/output sequence pair (w,y) in the
training set, the objective function is defined as:

− 1
n

n∑
j=1

log p(yj |w, y1:j−1) + λΘ(ᾱj , αj) (7)

where ᾱj is the reference alignment for output po-
sition j, which is provided by the existing aligner,
αj is the soft alignment, Θ() is cross-entropy func-
tion, n is the length of output sequence and λ is
the hyperparameter which serves as a trade-off be-
tween sequence prediction and alignment super-
vision. Note that the supervised attention part
doesn’t affect the decoder which will predict the
output label given learned weights.

One issue with this method is how we represent
ᾱ. As the output of conventional aligner is a hard
decision, alignment is either one or zero for each
input position. In addition, multiple input words
could be aligned to one single concept. Finally,
in the AMR sequences, there are many output la-
bels (mostly relations) which don’t align to any
word in the input sentence. We utilize a heuristic
method to process the reference alignment. We as-
sign an equal probability among the words that are
aligned to one AMR concept. Then if the output
label doesn’t align to any input word, we assign an
even probability for every input word.

5 Experiments

We evaluate our system on the released dataset
(LDC2015E86) for SemEval 2016 task 8 on mean-
ing representation parsing (May, 2016). The
dataset contains 16,833 training, 1,368 develop-
ment and 1,371 test sentences which mainly cover
domains like newswire, discussion forum, etc. All
parsing results are measured by Smatch (version
2.0.2) (Cai and Knight, 2013).

5.1 Experiment Settings
We first preprocess the input sentences with to-
kenization and lemmatization. Then we extract

370



the named entities using the Illinois Named Entity
Tagger (Ratinov and Roth, 2009).

For training all the neural AMR parsing sys-
tems, we use 256 for both hidden layer size and
word embedding size. Stochastic gradient descent
is used to optimize the cross-entropy loss function
and we set the drop out rate to be 0.5. We train our
model for 150 epochs with initial learning rate of
0.5 and learning rate decay factor 0.95 if the model
doesn’t improve for the 3 last epochs.

5.2 Baseline Model

Our baseline model is a plain sequence-to-
sequence model which has been used in the con-
stituent parsing task (Vinyals et al., 2015). While
they use a 3-layer deep LSTM, we only use a
single-layer LSTM for both encoder and decoder
since our data is relatively small and empiri-
cal comparison shows that stacking more layers
doesn’t help in our case. AMR linearization fol-
lows Section 3 without categorization. Since we
don’t restrict the input/output vocabulary in this
case, our vocabulary size is quite large: 10,886
for output vocabulary and 2,2892 for input vo-
cabulary. We set them to 10,000 and 20,000 re-
spectively and replace the out of vocabulary words
with UNK .

5.3 Impact of Re-Categorization

We first inspect the influence of utilizing catego-
rization on the input and output sequence. Table
1 shows the Smatch evaluation score on develop-
ment set.

System P R F
Baseline 0.42 0.34 0.37
Re-Categorization (n = 50) 0.55 0.46 0.50

Table 1: Re-Categorization impact on develop-
ment set

We see from the table that re-categorization
improves the F-score by 13 points on the de-
velopment set. As mentioned in section 4.1,
by setting the low frequency threshold n to 50
and re-categorizing them into a reduced set of
types, we now reduce the input/output vocabu-
lary size to (2,000, 6,000). This greatly reduces
the label sparsity and enables the neural attention
model to learn a better representation on this small
scale data. Another advantage of this method

0 20 40 60 80 100

Frequency threshold

20

25

30

35

40

45

50

55

60

S
m
a
tc
h

Figure 5: AMR parsing performance on develop-
ment set given different categorization frequency.

is that although AMR tries to abstract away sur-
face forms and retain the semantic meaning struc-
ture of the sentence, a large portion of the con-
cepts are coming from the surface form and have
exactly same string form both in input sentence
and AMR graph. For example, nation in sen-
tence is mapped to concept (n / nation) in
the AMR. For the frequent concepts in the out-
put sequence, since the model can observe many
training instances, we assume that it can be pre-
dicted by the attention model. For the infrequent
concepts, because of the categorization step, we
only require the model to predict the concept type
and its relative position in the graph. By applying
the post-processing step mentioned in Section 4.3,
we can easily recover the categorized concepts to
their original form.

We also inspect how the value of re-
categorization frequency threshold n affects the
AMR parsing result. As shown in Figure 5, set-
ting n to 0, which means no output labels will
be categorized into types -VERB- and -SURF-,
doesn’t improve the baseline system. The reason
is that we still have a large output vocabulary size
and training data is still sparse with respect to the
low frequency output labels. Also, if we set n too
high, although the output vocabulary size becomes
smaller, some of the frequent output labels that the
model handles well originally will be put into the
coarse-grained types, losing information in the re-
covery process. Thus we can see from the plot that
after the optimal point the Smatch score will drop.
Therefore, we choose to set n = 50 in the subse-
quent experiments.

371



5.4 Impact of Supervised Alignment

Choice of External Aligner. There are two ex-
isting AMR aligners: one is a rule-based aligner
coming with JAMR (Flanigan et al., 2014), which
defines regular expression patterns to greedily
match between AMR graph fragment and in-
put token spans; another one is an unsupervised
aligner (Pourdamghani et al., 2014) which adopts
the traditional word alignment method in machine
translation. Although evaluated on different set
of manual alignment test sentences, both aligners
achieved ∼90% F1 score. Here we choose to use
the second aligner, as it covers broader domains.

Different alignment configurations To balance
between the sequence learning and alignment
agreement, We empirically tune the hyperparam-
eter λ and set it to 0.3. For the external alignment
we use for reference, we convert it to a vector with
equal probability as discussed in Section 4.4. We
then train a sequence-to-sequence model with re-
categorized input/output and report the result on
development set.

System P R F
Baseline 0.42 0.34 0.37
Categorization (n = 50) 0.55 0.46 0.50
SuperAttn+Cate (n = 50) 0.56 0.49 0.52

Table 2: Supervised attention impact on develop-
ment set

As shown in Table 2, the supervised attention
model is able to further improve the Smatch score
by another 2 points, which are mainly contributed
by 3 points increase in recall. Since the refer-
ence/external alignment is mostly between the in-
put tokens and AMR graph concepts, we believe
that the supervised attention model is able to con-
strain the decoder so that it will output concepts
which can be aligned to some tokens in the input
sentence.

System P R F
SuperAttn+Cate (n = 50) 0.56 0.49 0.52
NO-RELATION-ALIGN 0.46 0.40 0.43

Table 3: Supervised attention impact on develop-
ment set

Because we have relations in the AMR graph,
the alignment problem here is different from the

word alignment in machine translation. To verify
the effectiveness of our setup, we also compare our
configuration to the condition NO-RELATION-
ALIGN where we only ignore the alignment be-
tween sentence and AMR relations by putting an
all zero vector as the reference attention for each
output relation label. From Table 3 we see that
simply ignoring the reference attention for rela-
tions would greatly affect the model performance,
and how we effectively represent the reference
alignment for relations is crucial for the supervised
attention model.

5.5 Results

In this section we report our final result on the
test set of SemEval 2016 Task 8 and compare our
model with other parsers. We train our model uti-
lizing re-categorization and supervised attention
with hyperparameters tuned on the development
set. Then we apply our trained model on the test
set.

Firstly, we compare our model to the exist-
ing sequence-to-sequence AMR parsing model
of Barzdins and Gosko (2016). As shown in ta-
ble 4, the word-level model in Barzdins and Gosko
(2016) is basically our baseline model. The sec-
ond model they use is a character-based sequence-
to-sequence model. Our model can also be re-
garded as a word-level model; however, by uti-
lizing carefully designed categorization and super-
vised attention, our system outperforms both their
results by a large margin.

System P R F
Our system 0.55 0.50 0.52
Barzdins and Gosko (2016)† - - 0.37
Barzdins and Gosko (2016)? - - 0.43

Table 4: Compare to other sequence-to-sequence
AMR parser. Barzdins and Gosko (2016)† is
the word-level neural AMR parser, Barzdins and
Gosko (2016)? is the character-level neural AMR
parser.

Table 5 gives the comparison of our system
to some of the teams participating in SemEval16
Task 8. Since a large portion of the teams ex-
tend on the state-of-the-art system CAMR (Wang
et al., 2015b; Wang et al., 2015a; Wang et al.,
2016), here we just pick typical teams that rep-
resent different approaches. We can see from the
table that our system fails to outperform the state-

372



of-the-art system. However, the best perform-
ing system CAMR uses a dependency structure
as a starting point, where dependency parsing has
achieved high accuracy recently and can be trained
on larger corpora. Also, it utilizes semantic role
labeling and complex features, which makes the
training process a long pipeline. Our system only
needs minimal preprocessing, and doesn’t need
the dependency parsing step. Our approach is
competitive with the SHRG (Synchronous Hyper-
edge Replacement Grammar) method of Peng et
al. (2015), which does not require a dependency
parser and uses SHRG to formalize the string-to-
graph problem as a chart parsing task. However,
they still need a concept identification stage, while
our model can learn the concepts and relations
jointly.

System P R F
Our system 0.55 0.50 0.52
Peng and Gildea (2016) 0.56 0.55 0.55
CAMR 0.70 0.63 0.66

Table 5: Comparison to other AMR parsers.

6 Discussion

In this paper, we have proposed several methods to
make the sequence-to-sequence model work com-
petitively against conventional AMR parsing sys-
tems. Although we haven’t outperformed state-
of-the-art system using the conventional meth-
ods, our results show the effectiveness of our
approaches to reduce the sparsity problem when
training sequence-to-sequence model on a rela-
tively small dataset. Our work could be aligned
with the effort to handle low-resource data prob-
lems when building the end-to-end neural network
model.

In neural machine translation, the attention
model is traditionally trained on millions of sen-
tence pairs, while facing low-resource language
pairs, the neural MT system performance tends to
downgrade (Zoph et al., 2016). There has been
growing interest in tackling sparsity/low-resource
problem in neural MT. Zoph et al. (2016) use a
transfer learning method to first pre-train the neu-
ral model on rich-resource language pairs and then
import the learned parameters to continue training
on low-resource language pairs so that the model
can alleviate the sparsity problem through shared

parameters. Firat et al. (2016) builds a multilin-
gual neural system where the attention mechanism
can be shared between different language pairs.
Our work could be seen as parallel efforts to han-
dle the sparsity problem since we focus on the in-
put/output categorization and external alignment,
which are both handy for low-resource languages.

In this paper, we haven’t used any syntac-
tic parser. However, as shown in previous
works (Flanigan et al., 2014; Wang et al., 2015b;
Artzi et al., 2015; Pust et al., 2015), using de-
pendency features helps improve the parsing per-
formance significantly because of the linguistic
similarity between the dependency tree and AMR
structure. An interesting extension would be to
use a linearized dependency tree as the source se-
quence and apply sequence-to-sequence to gener-
ate the AMR graph. Our parser could also benefit
from the modeling techniques in Wu et al. (2016).

7 Conclusion

Neural attention models have achieved great suc-
cess in different NLP tasks. However, they have
not been as successful on AMR parsing due to the
data sparsity issue. In this paper, we described
a sequence-to-sequence model for AMR parsing
and present different ways to tackle the data spar-
sity problems. We show that our methods have led
to significant improvement over a baseline neural
attention model, and our model is also competi-
tive against models that do not use extra linguistic
resources.

Acknowledgments Funded in part by a Google
Faculty Award.

References
Yoav Artzi, Kenton Lee, and Luke Zettlemoyer. 2015.

Broad-coverage CCG semantic parsing with AMR.
In Proceedings of the 2015 Conference on Empiri-
cal Methods in Natural Language Processing, pages
1699–1710, Lisbon, Portugal, September. Associa-
tion for Computational Linguistics.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473.

Laura Banarescu, Claire Bonial, Shu Cai, Madalina
Georgescu, Kira Griffitt, Ulf Hermjakob, Kevin
Knight, Philipp Koehn, Martha Palmer, and Nathan
Schneider. 2013. Abstract meaning representation

373



for sembanking. In Proceedings of the 7th Linguis-
tic Annotation Workshop and Interoperability with
Discourse.

Guntis Barzdins and Didzis Gosko. 2016. Riga at
semeval-2016 task 8: Impact of smatch extensions
and character-level neural translation on AMR pars-
ing accuracy. arXiv preprint arXiv:1604.01278.

Shu Cai and Kevin Knight. 2013. Smatch: an evalua-
tion metric for semantic feature structures. In Pro-
ceedings of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers), pages 748–752, Sofia, Bulgaria, August.
Association for Computational Linguistics.

Orhan Firat, Kyunghyun Cho, and Yoshua Bengio.
2016. Multi-way, multilingual neural machine
translation with a shared attention mechanism. In
Proceedings of the 2016 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 866–875, San Diego, California, June. Asso-
ciation for Computational Linguistics.

Jeffrey Flanigan, Sam Thomson, Jaime Carbonell,
Chris Dyer, and Noah A. Smith. 2014. A discrim-
inative graph-based parser for the abstract mean-
ing representation. In Proceedings of the 52nd An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1426–
1436, Baltimore, Maryland, June. Association for
Computational Linguistics.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural Computation,
9(8):1735–1780.

L. Liu, M. Utiyama, A. Finch, and E. Sumita. 2016.
Neural Machine Translation with Supervised Atten-
tion. ArXiv e-prints, September.

Jonathan May. 2016. Semeval-2016 task 8: Mean-
ing representation parsing. In Proceedings of the
10th International Workshop on Semantic Evalua-
tion (SemEval-2016), pages 1063–1073, San Diego,
California, June. Association for Computational
Linguistics.

Martha Palmer, Daniel Gildea, and Paul Kingsbury.
2005. The proposition bank: An annotated cor-
pus of semantic roles. Computational Linguistics,
31(1):71–106.

Xiaochang Peng and Daniel Gildea. 2016. UofR at
semeval-2016 task 8: Learning synchronous hyper-
edge replacement grammar for AMR parsing. In
Proceedings of the 10th International Workshop on
Semantic Evaluation (SemEval-2016), pages 1185–
1189, San Diego, California, June. Association for
Computational Linguistics.

Xiaochang Peng, Linfeng Song, and Daniel Gildea.
2015. A synchronous hyperedge replacement gram-
mar based approach for AMR parsing. In Proceed-
ings of the Nineteenth Conference on Computational

Natural Language Learning, pages 32–41, Beijing,
China, July. Association for Computational Linguis-
tics.

Slav Petrov, Leon Barrett, Romain Thibaux, and Dan
Klein. 2006. Learning accurate, compact, and
interpretable tree annotation. In Proceedings of
the 21st International Conference on Computational
Linguistics and 44th Annual Meeting of the Associa-
tion for Computational Linguistics, pages 433–440,
Sydney, Australia, July. Association for Computa-
tional Linguistics.

Nima Pourdamghani, Yang Gao, Ulf Hermjakob, and
Kevin Knight. 2014. Aligning English strings with
abstract meaning representation graphs. In Proceed-
ings of the 2014 Conference on Empirical Methods
in Natural Language Processing (EMNLP), pages
425–429, Doha, Qatar, October. Association for
Computational Linguistics.

Michael Pust, Ulf Hermjakob, Kevin Knight, Daniel
Marcu, and Jonathan May. 2015. Parsing English
into abstract meaning representation using syntax-
based machine translation. In Proceedings of the
2015 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1143–1154, Lisbon,
Portugal, September. Association for Computational
Linguistics.

Lev Ratinov and Dan Roth. 2009. Design chal-
lenges and misconceptions in named entity recog-
nition. In Proceedings of the Thirteenth Confer-
ence on Computational Natural Language Learning
(CoNLL-2009), pages 147–155, Boulder, Colorado,
June. Association for Computational Linguistics.

Ilya Sutskever, Oriol Vinyals, and Quoc V. Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in Neural Information Process-
ing Systems, pages 3104–3112.

Oriol Vinyals, Łukasz Kaiser, Terry Koo, Slav Petrov,
Ilya Sutskever, and Geoffrey Hinton. 2015. Gram-
mar as a foreign language. In Advances in Neural
Information Processing Systems, pages 2773–2781.

Chuan Wang, Nianwen Xue, and Sameer Pradhan.
2015a. Boosting transition-based AMR parsing
with refined actions and auxiliary analyzers. In Pro-
ceedings of the 53rd Annual Meeting of the Associ-
ation for Computational Linguistics and the 7th In-
ternational Joint Conference on Natural Language
Processing (Volume 2: Short Papers), pages 857–
862, Beijing, China, July. Association for Computa-
tional Linguistics.

Chuan Wang, Nianwen Xue, and Sameer Pradhan.
2015b. A transition-based algorithm for AMR pars-
ing. In Proceedings of the 2015 Conference of
the North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies, pages 366–375, Denver, Colorado, May–
June. Association for Computational Linguistics.

374



Chuan Wang, Sameer Pradhan, Xiaoman Pan, Heng
Ji, and Nianwen Xue. 2016. CAMR at semeval-
2016 task 8: An extended transition-based AMR
parser. In Proceedings of the 10th International
Workshop on Semantic Evaluation (SemEval-2016),
pages 1173–1178, San Diego, California, June. As-
sociation for Computational Linguistics.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V.
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, Jeff Klingner, Apurva Shah, Melvin
Johnson, Xiaobing Liu, Lukasz Kaiser, Stephan
Gouws, Yoshikiyo Kato, Taku Kudo, Hideto
Kazawa, Keith Stevens, George Kurian, Nishant
Patil, Wei Wang, Cliff Young, Jason Smith, Jason
Riesa, Alex Rudnick, Oriol Vinyals, Greg Corrado,
Macduff Hughes, and Jeffrey Dean. 2016. Google’s
neural machine translation system: Bridging the gap
between human and machine translation. CoRR,
abs/1609.08144.

B. Zoph, D. Yuret, J. May, and K. Knight. 2016.
Transfer Learning for Low-Resource Neural Ma-
chine Translation. ArXiv e-prints, April.

375


