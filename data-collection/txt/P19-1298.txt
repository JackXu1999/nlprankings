



















































Lattice-Based Transformer Encoder for Neural Machine Translation


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 3090–3097
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

3090

Lattice-Based Transformer Encoder for Neural Machine Translation

Fengshun Xiao1,2, Jiangtong Li2,3, Hai Zhao1,2,∗, Rui Wang4, Kehai Chen4
1Department of Computer Science and Engineering, Shanghai Jiao Tong University

2Key Laboratory of Shanghai Education Commission for Intelligent Interaction
and Cognitive Engineering, Shanghai Jiao Tong University, Shanghai, China

3College of Zhiyuan, Shanghai Jiao Tong University, China
4National Institute of Information and Communications Technology (NICT)

{felixxiao, keep moving-lee}@sjtu.edu.cn,
zhaohai@cs.sjtu.edu.cn, {wangrui, khchen}@nict.go.jp

Abstract

Neural machine translation (NMT) takes
deterministic sequences for source
representations. However, either word-
level or subword-level segmentations have
multiple choices to split a source sequence
with different word segmentors or different
subword vocabulary sizes. We hypothesize
that the diversity in segmentations may affect
the NMT performance. To integrate different
segmentations with the state-of-the-art NMT
model, Transformer, we propose lattice-based
encoders to explore effective word or subword
representation in an automatic way during
training. We propose two methods: 1) lattice
positional encoding and 2) lattice-aware
self-attention. These two methods can be
used together and show complementary to
each other to further improve translation
performance. Experiment results show
superiorities of lattice-based encoders in
word-level and subword-level representations
over conventional Transformer encoder.

1 Introduction

Neural machine translation (NMT) has
achieved great progress with the evolvement
of model structures under an encoder-decoder
framework (Sutskever et al., 2014; Bahdanau
et al., 2014). Recently, the self-attention based
Transformer model has achieved state-of-the-
art performance on multiple language pairs
(Vaswani et al., 2017; Marie et al., 2018). Both
representations of source and target sentences in

∗ Corresponding author. This paper was partially
supported by National Key Research and Development
Program of China (No. 2017YFB0304100) and key projects
of National Natural Science Foundation of China (No.
U1836222 and No. 61733011). Rui Wang was partially
supported by JSPS grant-in-aid for early-career scientists
(19K20354): “Unsupervised Neural Machine Translation
in Universal Scenarios” and NICT tenure-track researcher
startup fund “Toward Intelligent Machine Translation”.

v8mao yi fa zhan ju fu zong caiv7v6v5v4v3v2v1v0

mao-yi fa-zhan ju fu zong-cai

fa-zhan-jumao-yi-fa-zhan fu-zong-cai

v0 v1 v2 v3mao-yi-fa-zhan ju fu-zong-cai

v0 v1 v2 v3mao-yi fa-zhan-ju fu-zong-cai

v0 v1 v2 v3 v4 v5mao-yi fa-zhan ju fu zong-cai

(1)Segmentaion 1

(2)Segmentaion 2

(3)Segmentation 3

(4)Lattice

v8mao yi fa zhan ju fu zong caiv7v6v5v4v3v2v1v0

e0:2:mao-yi e2:4:fa-zhan e4:5:ju e5:6:fu e6:8:zong-cai

e2:5:fa-zhan-jue0:4:mao-yi-fa-zhan e5:8:fu-zong-cai
c1 c2 c3 c4 c5 c6 c7 c8

Figure 1: Incorporating three different segmentation
for a lattice graph. The original sentence is “mao-yi-
fa-zhan-ju-fu-zong-cai”. In Chinese it is “贸易发展局
副总裁”. In English it means “The vice president of
Trade Development Council”

NMT can be factorized in character (Costa-Jussa
and Fonollosa, 2016), word (Sutskever et al.,
2014), or subword (Sennrich et al., 2015) level.
However, only using 1-best segmentation as
inputs limits NMT encoders to express source
sequences sufficiently and reliably. Many
East Asian languages, including Chinese are
written without explicit word boundary, so
that their sentences need to be segmented into
words firstly (Zhao et al., 2019; Cai et al.,
2017; Cai and Zhao, 2016; Zhao et al., 2013;
Zhao and Kit, 2011). By different segmentors,
each sentence can be segmented into multiple
forms as shown in Figure 1. Even for those
alphabetical languages with clear word boundary
like English, there is still an issue about selecting
a proper subword vocabulary size, which
determines the segmentation granularities for
word representation.

In order to handle this problem, Morishita
et al. (2018) used hierarchical subword features
to represent sequence with different subword
granularities. Su et al. (2017) proposed the
first word-lattice based recurrent neural network



3091

(RNN) encoders which extended Gated Recurrent
Units (GRUs) (Cho et al., 2014) to take in
multiple sequence segmentation representations.
Sperber et al. (2017) incorporated posterior scores
to Tree-LSTM for building a lattice encoder in
speech translation. All these existing methods
serve for RNN-based NMT model, where lattices
can be formulized as directed graphs and the
inherent directed structure of RNN facilitates the
construction of lattice. Meanwhile, the self-
attention mechanism is good at learning the
dependency between characters in parallel, which
can partially compare and learn information from
multiple segmentations (Cherry et al., 2018).
Therefore, it is challenging to directly apply the
lattice structure to Transformer.

In this work, we explore an efficient way
of integrating lattice into Transformer. Our
method can not only process multiple sequences
segmented in different ways to improve translation
quality, but also maintain the characteristics of
parallel computation in the Transformer.

2 Background

2.1 Transformer

Transformer stacks self-attention and point-wise,
fully connected layers for both encoders and
decoders. Decoder layers also have another sub-
layer which performs attention over the output
of the encoder. Residual connections around
each layer are employed followed by layer
normalization (Ba et al., 2016).

To make use of the order of the sequence,
Vaswani et al. (2017) proposed Positional
Encodings to indicate the absolute or relative
position of tokens in input sequence which are
calculated as:

p(j,2i) = sin(j/10000
2i/d)

p(j,2i+1) = cos(j/10000
2i/d),

where j is the position, i is the dimension and
d is the model dimension. Then positional
encodings p1:M = {p1, ..., pM} are added to the
embedding of each token t1:M = {t1, ..., tM}
and are propagated to higher layers via residual
connections.

2.2 Self-Attention

Transformer employs H attention heads
to perform self-attention over a sequence
individually and finally applies concatenation
and linear transformation to the results from

Conditions Explanation
lad i < j = p < q ei:j is left adjacent to ep:q .
rad p < q = i < j ei:j is right adjacent to ep:q .
inc i ≤ p < q ≤ j ei:j includes ep:q .
ind p ≤ i < j ≤ q ei:j is included in ep:q .

its i < p < j < q or ei:j is intersected with ep:q .p < i < q < j
pre i < j < p < q ei:j is preceding edge to ep:q .
suc p < q < i < j ei:j is succeeding edge to ep:q .

Table 1: Relations possibly satisfied by any two
different edges ei:j and ep:q in the lattice. Note that two
equal signs cannot stand at the same time in condition
inequality for inc and ind.

.

each head, which is called multi-head attention
(Vaswani et al., 2017). Every single head attention
in multi-head attention is calculated in a scaled
dot product form:

uij =
(tiW

Q)(tjW
K)T√

d
, (1)

where d is the model dimension, t1:M is the input
sequence and uij are normalized by a softmax
function:

αij =
exp(uij)∑M
k=1 exp(uik)

, (2)

and αij are used to calculate the final output
hidden representations:

oi =
M∑
j=1

αij(tjW
V ), (3)

where o1:M is outputs and WQ,WK , and W V are
learnable projections matrices for query, key, and
value in a single head, respectively.

3 Models

3.1 Lattices

Lattices can represent multiple segmentation
sequences in a directed graph, as they merge the
same subsequence of all candidate subsequences
using a compact way.

As shown in Figure 1, we follow Su et al.
(2017) to apply different segmentator to segment
an element1 sequence c1:N = {c1, c2, ..., cN} into
different word or subword sequences to construct
a lattice G = 〈V,E〉, a directed, connected, and
acyclic graph, where V is node set and E is edge

1Character for word lattice and minimum subword unit in
our predefined subword segmentations for subword lattice.



3092

     Input
Embedding

     Lattice sequence Inputs

           Lattice 
Positional Encoding

Lattice-aware
self-attention

Add & Norm

Add & Norm
   Feed
Forward

Hidden representations

N x

t1 t2 t3 t4 t5

t1
t2
t3
t4
t5

Figure 2: The architecture of lattice-based Transformer
encoder. Lattice positional encoding is added to the
embeddings of lattice sequence inputs. Different colors
in lattice-aware self-attention indicate different relation
embeddings.

set, node vi ∈ V denotes the gap between ci and
ci+1, edge ei:j ∈ E departing from vi and arrives
at vj (i < j) indicates a possible word or subword
unit covering subsequence ci+1:j .

All the edges in the latticeG are the actual input
tokens for NMT. For two different edges ei:j and
ep:q, all possible relations can be enumerated as in
Table 1.

3.2 Lattice-Based Encoders

We place all edges E in the lattice graph into
an input sequence t1:M = {t1, t2, ..., tM} for
Transformer; then we modify the positional
encoding to indicate the positional information of
input tokens, namely all edges in the lattice graph.
In addition, we propose a lattice-aware self-
attention to directly represent position relationship
among tokens. The overall architecture is shown
in Figure 2.

Lattice Positional Encoding (LPE) Original
positional encoding indicates the order of the
sequence in an ascending form {p1, p2, ..., pM}.
We hypothesize that increasing positional
encodings can indicate the order of sequential
sentence. As shown in Figure 3, we scan a source
sequence by element c1:N = {c1, c2, ..., cN} (for
example, ci is character in Figure 3) and record
their position p1:N = {p1, p2, ..., pN}. Then we
use the positional encoding of the first element in
lattice edge to represent current token’s position,
which can ensure that every edge in each path
departing from v0 and arriving at vN in lattice will

v8mao yi fa zhan ju fu zong caiv7v6v5v4v3v2v1v0

mao-yi:1 fa-zhan:3 ju:5 fu:6 zong-cai:7

fa-zhan-ju:3mao-yi-fa-zhan:1 fu-zong-cai:6

v0 v1 v2 v3 v4 v5mao-yi:1 fa-zhan:2 ju:3 fu:4 zong-cai:5

(1)position encodings

(2)LPE and LSA

1 2 3 4 5 6 7 8

rad inc inc lad pre

its self lad

selfsuc suc

suc

rad

rad

lad

ind

Figure 3: Lattice positional encoding pi+1 (in green)
for edge ei:j in the lattice graph and the relation
embeddings r in lattice-aware self-attention based on
the timestep of token fa-zhan-ju (in red) and fu (in
purple).

have an increasing positional encoding order. The
property mentioned above is easy to prove, since
start and end points vi, vj of each edge ei:j strictly
satisfy i < j and next edge ej:k will start from vj
and thus get a larger positional encoding.

Formally, for any input token tk, namely edge
ei:j covering elements ci+1:j , positional encoding
pi+1 will be used to represent its position and be
added to its embedding.

Lattice-aware Self-Attention (LSA) We also
directly modify self-attention to a lattice-aware
way which makes self-attention aware of the
relations between any two different edges. We
modified Equations (1) and (3) in the same way
of Shaw et al. (2018) to indicate edge relation:

eij =
(tiW

Q)(tjW
K + rKij )

T

√
d

, (4)

oi =

M∑
j=1

αij(tjW
V + rVij ), (5)

where rKij and r
V
ij are relation embeddings which

are added to the keys and values to indicate
relation between input tokens ti and tj , namely
edges ep:q and ek:l in lattice graph, respectively.

To facilitate parallel computation, we add an
additional embedding (self) for a token when it
is conducted dot-product attention with itself, so
we train eight (seven in Table 1) different relation
embeddings aV1:8 and a

K
1:8 as look-up table for

keys and values, respectively. rKij and r
V
ij can

look up for aV1:8 and a
K
1:8 based on the relation

between ti and tj . Figure 3 shows an example of
embeddings in lattice-aware self-attentions based
on the timestep of token fa-zhan-ju and fu.



3093

System Input MT05 MT02 MT03 MT04 MT06 MT08 ALL

RNN
PKU 31.42 34.68 33.08 35.32 31.61 23.58 31.76
CTB 31.38 34.95 32.85 35.44 31.75 23.33 31.78
MSR 29.92 34.49 32.06 35.10 31.23 23.12 31.35

Lattice-RNN Lattice 32.40 35.75 34.32 36.50 32.77 24.84 32.95

Transformer
PKU 41.67 43.61 41.62 43.66 40.25 31.62 40.24
CTB 41.87 43.72 42.11 43.58 40.41 31.76 40.35
MSR 41.17 43.11 41.38 43.60 39.67 31.02 39.87

Transformer + LPE
Lattice

42.37 43.71 42.67 44.43 41.14 32.09 40.93↑

Transformer + LSA 42.28 43.56 42.73 43.81 41.01 32.39 40.77↑

Transformer + LPE + LSA 42.65 44.14 42.24 44.81 41.37 32.98 41.26↑

Table 2: Evaluation of translation performance on NIST Zh-En dataset. RNN and Lattice-RNN results are from
(Su et al., 2017). We highlight the highest BLEU score in bold for each set. ↑ indicates statistically significant
difference (p <0.01) from best baseline.

Since self-attention is computed parallelly, we
generate a matrix with all lattice embeddings
in it for each sentence which can be easily
incorporated into standard self-attention by
matrix multiplication. We use different relation
embeddings for different Transformer layers but
share the same one between different heads in a
single layer.

4 Experiments

4.1 Setup

We conducted experiments on the NIST Chinese-
English (Zh-En) and IWSLT 2016 English-
German (En-De) datasets. The Zh-En corpus
consists of 1.25M sentence pairs and the En-De
corpus consists of 191K sentence pairs. For Zh-
En task, we chose the NIST 2005 dataset as the
validation set and the NIST 2002, 2003, 2004,
2006, and 2008 datasets as test sets. For En-
De task, tst2012 was used as validation set and
tst2013 and tst2014 were used as test sets. For
both tasks, sentence pairs with either side longer
than 50 were dropped. We used the case-sensitive
4-gram NIST BLEU score (Papineni et al., 2002)
as the evaluation metric and sign-test (Collins
et al., 2005) for statistical significance test.

For Zh-En task, we followed Su et al. (2017)
to use the toolkit2 to train segmenters on PKU,
MSR (Emerson, 2005), and CTB corpora (Xue
et al., 2005), then we generated word lattices
with different segmented training data. Both
source and target vocabularies are limited to 30K.
For En-De task, we adopted 8K, 16K and 32K

2https://nlp.stanford.edu/software/segmenter.html#Download

BPE merge operations (Sennrich et al., 2015) to
get different segmented sentences for building
subword lattices. 16K BPE merge operations are
employed on the target side.

We set batch size to 1024 tokens and
accumulated gradient 16 times before a back-
propagation. During training, we set all dropout
to 0.3 and chose the Adam optimizer (Kingma
and Ba, 2014) with β1 = 0.9, β2 = 0.98 and
� = 10−9 for parameters tuning. During decoding,
we used beam search algorithm and set the beam
size to 20. All other configurations were the same
with Vaswani et al. (2017). We implemented our
model based on the OpenNMT (Klein et al., 2017)
and trained and evaluated all models on a single
NVIDIA GeForce GTX 1080 Ti GPU.

4.2 Overall Performance

From Table 2, we see that our LPE and LSA
models both outperform the Transformer baseline
model of 0.58 and 0.42 BLEU respectively. When
we combine LPE and LSA together, we get a gain
of 0.91 BLEU points. Table 3 shows that our
method also works well on the subword level.

The base Transformer system has about 90M
parameters and our LPE and LSA models
introduce 0 and 6k parameters over it, respectively,
which shows that our lattice approach improves
Transformer with little parameter accumulation.

During training, base Transformer performs
about 0.714 steps per second while LPE + LSA
model can process around 0.328. As lattice-based
method usually seriously slows down the training,
our lattice design and implementation over the
Transformer only shows moderate efficiency



3094

System Input tst2012 tst2013 tst2014
RNN 16k 26.24 28.22 24.17

Transformer
8k 27.31 29.56 25.57
16k 27.35 29.02 25.12
32k 27.15 28.61 24.88

+ LPE
Lattice

27.34 29.48 25.88↑

+ LSA 27.44 29.73↑ 25.65
+ LPE + LSA 27.76 30.28↑ 26.22↑

Table 3: Evaluation of translation performance on
IWSLT2016 En-De dataset. RNN results are reported
from Morishita et al. (2018). ↑ indicates statistically
significant difference (p <0.01) from best baseline.

.

Systems PE PE + LSA
ALL 40.54 40.90

Table 4: Translation performance (BELU score) with
normal positional encodings and normal positional
encodings with LSA model on NIST Zh-En dataset.

reduction.

4.3 Analysis3

Effect of Lattice-Based Encoders To show the
effectiveness of our method, we placed all edges
in the lattice of a single sequence in a relative
right order based on their first character, then we
applied normal positional encodings (PE) to the
lattice inputs on our base Transformer model. As
shown in Table 4, our LPE and LSA method
outperforms normal positional encodings by 0.39
and 0.23 BLEU respectively which shows that our
methods are effective.
Complementary of LPE and LSA Our LPE
method allows edges in all paths in an increasing
positional encoding order which seems to focus
on long-range order but ignore local disorder.
While our LSA method treats all preceding and
succeeding edges equally which seems to address
local disorder better but ignore long-range order.
To show the complementary of these two methods,
we also placed all edges of lattice in a single
sequence in a relative right order based on their
first character and use normal positional encodings
and our LSA method; we obtained a BLEU
of 40.90 which is 0.13 higher than single LSA
model. From this, we can see that long-range
position information is indeed beneficial to our
LSA model.

3All analysis experiments conducted on NIST dataset.

5 Related Work

Neural network based methods have been applied
to several natural language processing tasks (Li
et al., 2018; Zhang et al., 2019; Chen et al., 2018,
2017; Li et al., 2019; He et al., 2018; Zhou and
Zhao, 2019), especially to NMT (Bahdanau et al.,
2015; Wang et al., 2017a,b, 2018; Wang et al.,
2018; Zhang et al., 2018; Zhang and Zhao, 2019).

Our work is related to the source side
representations for NMT. Generally, the NMT
model uses the word as a basic unit for source
sentences modeling. In order to obtain better
source side representations and avoid OOV
problems, recent research has modeled source
sentences at character level (Ling et al., 2015;
Costa-Jussa and Fonollosa, 2016; Yang et al.,
2016; Lee et al., 2016), subword level (Sennrich
et al., 2015; Kudo, 2018; Wu and Zhao, 2018) and
mixed character-word level (Luong and Manning,
2016). All these methods show better translation
performance than the word level model.

As models mentioned above only use 1-best
segmentation as inputs, lattice which can pack
many different segmentations in a compact form
has been widely used in statistical machine
translation (SMT) (Xu et al., 2005; Dyer
et al., 2008) and RNN-based NMT (Su et al.,
2017; Sperber et al., 2017). To enhance the
representaions of the input, lattice has also
been applied in many other NLP tasks such as
named entity recognition (Zhang and Yang, 2018),
Chinese word segmentation (Yang et al., 2019)
and part-of-speech tagging (Jiang et al., 2008;
Wang et al., 2013).

6 Conclusions

In this paper, we have proposed two methods
to incorporate lattice representations into
Transformer. Experimental results in two
datasets on word-level and subword-level
respectively validate the effectiveness of the
proposed approaches.

Different from Veličković et al. (2017), our
work also provides an attempt to encode a simple
labeled graph into Transformer and can be used in
any tasks which need Transformer encoder to learn
sequence representation.



3095

References
Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E

Hinton. 2016. Layer normalization. arXiv preprint
arXiv:1607.06450.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua
Bengio. 2014. Neural machine translation by jointly
learning to align and translate. arXiv preprint
arXiv:1409.0473.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua
Bengio. 2015. Neural machine translation by jointly
learning to align and translate. In Proceedings
of the 3rd International Conference on Learning
Representations (ICLR 2015).

Deng Cai and Hai Zhao. 2016. Neural word
segmentation learning for Chinese. arXiv preprint
arXiv:1606.04300.

Deng Cai, Hai Zhao, Zhisong Zhang, Yuan Xin,
Yongjian Wu, and Feiyue Huang. 2017. Fast and
accurate neural word segmentation for Chinese.
arXiv preprint arXiv:1704.07047.

Kehai Chen, Rui Wang, Masao Utiyama, Lemao Liu,
Akihiro Tamura, Eiichiro Sumita, and Tiejun Zhao.
2017. Neural machine translation with source
dependency representation. In Proceedings of the
2017 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2017), pages 2846–
2852.

Kehai Chen, Rui Wang, Masao Utiyama, Eiichiro
Sumita, and Tiejun Zhao. 2018. Syntax-directed
attention for neural machine translation. In
Proceedings of the 32nd AAAI Conference on
Artificial Intelligence (AAAI 2018), pages 4792–
4799.

Colin Cherry, George Foster, Ankur Bapna, Orhan
Firat, and Wolfgang Macherey. 2018. Revisiting
character-based neural machine translation with
capacity and compression. In Proceedings of the
2018 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2018), pages 4295–
4305.

Kyunghyun Cho, Bart Van Merriënboer, Caglar
Gulcehre, Dzmitry Bahdanau, Fethi Bougares,
Holger Schwenk, and Yoshua Bengio. 2014.
Learning phrase representations using RNN
encoder-decoder for statistical machine translation.
arXiv preprint arXiv:1406.1078.

Michael Collins, Philipp Koehn, and Ivona Kučerová.
2005. Clause restructuring for statistical machine
translation. In Proceedings of the 43rd Annual
Meeting of the Association for Computational
Linguistics (ACL 2005), pages 531–540.

Marta R Costa-Jussa and José AR Fonollosa. 2016.
Character-based neural machine translation. arXiv
preprint arXiv:1603.00810.

Christopher Dyer, Smaranda Muresan, and Philip
Resnik. 2008. Generalizing word lattice translation.
In Proceedings of the 46th Annual Meeting of the
Association for Computational Linguistics (ACL
2008), pages 1012–1020.

Thomas Emerson. 2005. The second international
Chinese word segmentation bakeoff. In Proceedings
of the fourth SIGHAN workshop on Chinese
Language Processing, pages 123–133.

Shexia He, Zuchao Li, Hai Zhao, and Hongxiao Bai.
2018. Syntax for semantic role labeling, to be, or not
to be. In Proceedings of the 56th Annual Meeting of
the Association for Computational Linguistics (ACL
2018), pages 2061–2071.

Wenbin Jiang, Haitao Mi, and Qun Liu. 2008. Word
lattice reranking for Chinese word segmentation
and part-of-speech tagging. In Proceedings of the
22nd International Conference on Computational
Linguistics (COLING 2008), pages 385–392.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Guillaume Klein, Yoon Kim, Yuntian Deng, Jean
Senellart, and Alexander M Rush. 2017. Opennmt:
Open-source toolkit for neural machine translation.
arXiv preprint arXiv:1701.02810.

Taku Kudo. 2018. Subword regularization: Improving
neural network translation models with multiple
subword candidates. In Proceedings of the
56th Annual Meeting of the Association for
Computational Linguistics (ACL 2018), pages 66–
75.

Jason Lee, Kyunghyun Cho, and Thomas Hofmann.
2016. Fully character-level neural machine
translation without explicit segmentation. arXiv
preprint arXiv:1610.03017.

Zuchao Li, Jiaxun Cai, Shexia He, and Hai Zhao. 2018.
Seq2seq dependency parsing. In Proceedings of
the 27th International Conference on Computational
Linguistics (COLING 2018), pages 3203–3214.

Zuchao Li, Shexia He, Hai Zhao, Yiqing Zhang,
Zhuosheng Zhang, Xi Zhou, and Xiang Zhou. 2019.
Dependency or span, end-to-end uniform semantic
role labeling. In Proceedings of the 33rd AAAI
Conference on Artificial Intelligence (AAAI 2019).

Wang Ling, Isabel Trancoso, Chris Dyer, and Alan W.
Black. 2015. Character-based neural machine
translation. arXiv preprint arXiv:1511.04586.

Minh-Thang Luong and Christopher D. Manning.
2016. Achieving open vocabulary neural machine
translation with hybrid word-character models. In
Proceedings of the 54th Annual Meeting of the
Association for Computational Linguistics (ACL
2016), pages 1054–1063.

https://arxiv.org/pdf/1607.06450.pdf
https://arxiv.org/pdf/1409.0473.pdf
https://arxiv.org/pdf/1409.0473.pdf
http://arxiv.org/abs/1409.0473
http://arxiv.org/abs/1409.0473
https://aclweb.org/anthology/P16-1039
https://aclweb.org/anthology/P16-1039
https://www.aclweb.org/anthology/papers/P/P17/P17-2096/
https://www.aclweb.org/anthology/papers/P/P17/P17-2096/
https://www.aclweb.org/anthology/D17-1304
https://www.aclweb.org/anthology/D17-1304
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16060/16008
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16060/16008
https://aclweb.org/anthology/D18-1461
https://aclweb.org/anthology/D18-1461
https://aclweb.org/anthology/D18-1461
https://www.aclweb.org/anthology/D14-1179
https://www.aclweb.org/anthology/D14-1179
https://aclweb.org/anthology/papers/P/P05/P05-1066/
https://aclweb.org/anthology/papers/P/P05/P05-1066/
https://www.aclweb.org/anthology/P16-2058
https://pdfs.semanticscholar.org/0eba/c51e17acde082a1957748d2c2fe585881daf.pdf
https://pdfs.semanticscholar.org/65e9/0d9f6754d32db464f635e7fdec672fad9ccf.pdf
https://pdfs.semanticscholar.org/65e9/0d9f6754d32db464f635e7fdec672fad9ccf.pdf
https://www.aclweb.org/anthology/P18-1192
https://www.aclweb.org/anthology/P18-1192
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.443.6089&rep=rep1&type=pdf
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.443.6089&rep=rep1&type=pdf
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.443.6089&rep=rep1&type=pdf
https://arxiv.org/pdf/1412.6980
https://arxiv.org/pdf/1412.6980
https://www.aclweb.org/anthology/W18-1817
https://www.aclweb.org/anthology/W18-1817
https://www.aclweb.org/anthology/P18-1007
https://www.aclweb.org/anthology/P18-1007
https://www.aclweb.org/anthology/P18-1007
https://www.aclweb.org/anthology/Q17-1026
https://www.aclweb.org/anthology/Q17-1026
https://www.aclweb.org/anthology/C18-1271
http://arxiv.org/abs/1901.05280
http://arxiv.org/abs/1901.05280
https://www.aclweb.org/anthology/P16-2058
https://www.aclweb.org/anthology/P16-2058
https://www.aclweb.org/anthology/P/P16/P16-1100.pdf
https://www.aclweb.org/anthology/P/P16/P16-1100.pdf


3096

Benjamin Marie, Rui Wang, Atsushi Fujita, Masao
Utiyama, and Eiichiro Sumita. 2018. Nict’s neural
and statistical machine translation systems for the
wmt18 news translation task. In Proceedings of the
Third Conference on Machine Translation, Volume
2: Shared Task Papers, pages 453–459.

Makoto Morishita, Jun Suzuki, and Masaaki Nagata.
2018. Improving neural machine translation by
incorporating hierarchical subword features. In
Proceedings of the 27th International Conference on
Computational Linguistics (COLING 2018), pages
618–629.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic
evaluation of machine translation. In Proceedings
of the 40th Annual Meeting of the Association for
Computational Linguistics (ACL 2002), pages 311–
318.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2015. Neural machine translation of rare words with
subword units. arXiv preprint arXiv:1508.07909.

Peter Shaw, Jakob Uszkoreit, and Ashish Vaswani.
2018. Self-attention with relative position
representations. arXiv preprint arXiv:1803.02155.

Matthias Sperber, Graham Neubig, Jan Niehues, and
Alex Waibel. 2017. Neural lattice-to-sequence
models for uncertain inputs. arXiv preprint
arXiv:1704.00559.

Jinsong Su, Zhixing Tan, Deyi Xiong, Rongrong
Ji, Xiaodong Shi, and Yang Liu. 2017. Lattice-
based recurrent neural network encoders for neural
machine translation. In Proceedings of the 31st
AAAI Conference on Artificial Intelligence (AAAI
2017), pages 3302–3308.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le.
2014. Sequence to sequence learning with neural
networks. In Proceedings of the 28th Conference
on Neural Information Processing Systems (NIPS
2014), pages 3104–3112.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Proceedings of the 31stst Conference
on Neural Information Processing Systems (NIPS
2017), pages 5998–6008.

Petar Veličković, Guillem Cucurull, Arantxa Casanova,
Adriana Romero, Pietro Lio, and Yoshua Bengio.
2017. Graph attention networks. arXiv preprint
arXiv:1710.10903.

Rui Wang, Andrew Finch, Masao Utiyama, and
Eiichiro Sumita. 2017a. Sentence embedding for
neural machine translation domain adaptation. In
Proceedings of the 55th Annual Meeting of the
Association for Computational Linguistics (ACL
2017), pages 560–566.

Rui Wang, Masao Utiyama, Andrew Finch, Lemao
Liu, Kehai Chen, and Eiichiro Sumita. 2018.
Sentence selection and weighting for neural
machine translation domain adaptation. IEEE/ACM
Transactions on Audio, Speech, and Language
Processing, 26:1727–1741.

Rui Wang, Masao Utiyama, Lemao Liu, Kehai Chen,
and Eiichiro Sumita. 2017b. Instance weighting for
neural machine translation domain adaptation. In
Proceedings of the 2017 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2017), pages 1482–1488.

Rui Wang, Masao Utiyama, and Eiichiro Sumita. 2018.
Dynamic sentence sampling for efficient training
of neural machine translation. In Proceedings of
the 56th Annual Meeting of the Association for
Computational Linguistics (ACL 2018), pages 298–
304.

Zhiguo Wang, Chengqing Zong, and Nianwen Xue.
2013. A lattice-based framework for joint Chinese
word segmentation, POS tagging and parsing. In
Proceedings of the 51st Annual Meeting of the
Association for Computational Linguistics (ACL
2013), pages 623–627.

Yingting Wu and Hai Zhao. 2018. Finding
better subword segmentation for neural machine
translation. In The Seventeenth China National
Conference on Computational Linguistics (CCL
2018), pages 53–64.

Jia Xu, Evgeny Matusov, Richard Zens, and Hermann
Ney. 2005. Integrated Chinese word segmentation
in statistical machine translation. In International
Workshop on Spoken Language Translation (IWSLT
2005).

Naiwen Xue, Fei Xia, Fu-Dong Chiou, and Marta
Palmer. 2005. The Penn Chinese TreeBank: Phrase
structure annotation of a large corpus. Natural
language engineering, 11(2):207–238.

Jie Yang, Yue Zhang, and Shuailong Liang. 2019.
Subword encoding in lattice LSTM for Chinese
word segmentation. In Proceedings of the 17th
Annual Conference of the North American Chapter
of the Association for Computational Linguistics:
Human Language Technologies (NAACL 2019).

Zhen Yang, Wei Chen, Feng Wang, and Bo Xu. 2016.
A character-aware encoder for neural machine
translation. In Proceedings of the 26th International
Conference on Computational Linguistics (COLING
2016), pages 3063–3070.

Huan Zhang and Hai Zhao. 2019. Minimum
divergence vs. maximum margin: An empirical
comparison on seq2seq models. In Proceedings of
the Seventh International Conference on Learning
Representations (ICLR 2019).

http://www.aclweb.org/anthology/W18-6419
http://www.aclweb.org/anthology/W18-6419
http://www.aclweb.org/anthology/W18-6419
https://www.aclweb.org/anthology/C18-1052
https://www.aclweb.org/anthology/C18-1052
https://www.aclweb.org/anthology/P02-1040
https://www.aclweb.org/anthology/P02-1040
https://www.aclweb.org/anthology/P16-1162
https://www.aclweb.org/anthology/P16-1162
https://www.aclweb.org/anthology/N18-2074
https://www.aclweb.org/anthology/N18-2074
https://www.aclweb.org/anthology/D17-1145
https://www.aclweb.org/anthology/D17-1145
https://arxiv.org/pdf/1609.07730.pdf
https://arxiv.org/pdf/1609.07730.pdf
https://arxiv.org/pdf/1609.07730.pdf
https://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf
https://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf
https://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
https://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
https://arxiv.org/pdf/1710.10903.pdf
https://www.aclweb.org/anthology/P17-2089
https://www.aclweb.org/anthology/P17-2089
https://doi.org/10.1109/TASLP.2018.2837223
https://doi.org/10.1109/TASLP.2018.2837223
https://www.aclweb.org/anthology/D17-1155
https://www.aclweb.org/anthology/D17-1155
https://www.aclweb.org/anthology/P18-2048
https://www.aclweb.org/anthology/P18-2048
https://www.aclweb.org/anthology/P13-2110
https://www.aclweb.org/anthology/P13-2110
https://arxiv.org/pdf/1807.09639.pdf
https://arxiv.org/pdf/1807.09639.pdf
https://arxiv.org/pdf/1807.09639.pdf
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.854.2033&rep=rep1&type=pdf
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.854.2033&rep=rep1&type=pdf
https://pdfs.semanticscholar.org/2c72/257ae7a4a32dc60569f4e1fe4504b2678112.pdf
https://pdfs.semanticscholar.org/2c72/257ae7a4a32dc60569f4e1fe4504b2678112.pdf
https://arxiv.org/pdf/1810.12594.pdf
https://arxiv.org/pdf/1810.12594.pdf
https://www.aclweb.org/anthology/papers/C/C16/C16-1288
https://www.aclweb.org/anthology/papers/C/C16/C16-1288
https://openreview.net/forum?id=H1xD9sR5Fm
https://openreview.net/forum?id=H1xD9sR5Fm
https://openreview.net/forum?id=H1xD9sR5Fm


3097

Yue Zhang and Jie Yang. 2018. Chinese NER using
lattice LSTM. In Proceedings of the 56th Annual
Meeting of the Association for Computational
Linguistics (ACL 2018), pages 1554–1564.

Zhisong Zhang, Rui Wang, Masao Utiyama,
Eiichiro Sumita, and Hai Zhao. 2018. Exploring
recombination for efficient decoding of neural
machine translation. In Proceedings of the 2018
Conference on Empirical Methods in Natural
Language Processing (EMNLP 2018), pages
4785–4790.

Zhuosheng Zhang, Yafang Huang, and Hai Zhao.
2019. Neural-based pinyin-to-character conversion
with adaptive vocabulary. In Proceedings of
the 57th Annual Meeting of the Association for
Computational Linguistics (ACL 2019).

Hai Zhao, Deng Cai, Changning Huang, and Chunyu
Kit. 2019. Chinese word segmentation: Another
decade review (2007-2017). arXiv preprint
arXiv:1901.06079.

Hai Zhao and Chunyu Kit. 2011. Integrating
unsupervised and supervised word segmentation:
The role of goodness measures. Information
Sciences, 181(1):163–183.

Hai Zhao, Masao Utiyama, Eiichiro Sumita, and
Bao-Liang Lu. 2013. An empirical study on word
segmentation for Chinese machine translation.
In International Conference on Intelligent
Text Processing and Computational Linguistics
(CICLing 2013), pages 248–263.

Junru Zhou and Hai Zhao. 2019. Head-driven phrase
structure grammar parsing on Penn Treebank. In
Proceedings of the 57th Annual Meeting of the
Association for Computational Linguistics (ACL
2019).

https://www.aclweb.org/anthology/P18-1144
https://www.aclweb.org/anthology/P18-1144
https://www.aclweb.org/anthology/D18-1511
https://www.aclweb.org/anthology/D18-1511
https://www.aclweb.org/anthology/D18-1511
https://arxiv.org/pdf/1901.06079.pdf
https://arxiv.org/pdf/1901.06079.pdf
https://www.sciencedirect.com/science/article/pii/S0020025510004366
https://www.sciencedirect.com/science/article/pii/S0020025510004366
https://www.sciencedirect.com/science/article/pii/S0020025510004366
http://bcmi.sjtu.edu.cn/home/zhaohai/pubs/cicling2013-78170248.pdf
http://bcmi.sjtu.edu.cn/home/zhaohai/pubs/cicling2013-78170248.pdf

