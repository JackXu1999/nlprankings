



















































Task-Oriented Learning of Word Embeddings for Semantic Relation Classification


Proceedings of the 19th Conference on Computational Language Learning, pages 268–278,
Beijing, China, July 30-31, 2015. c©2015 Association for Computational Linguistics

Task-Oriented Learning of Word Embeddings
for Semantic Relation Classification

Kazuma Hashimoto†, Pontus Stenetorp‡, Makoto Miwa§, and Yoshimasa Tsuruoka†
†The University of Tokyo, 3-7-1 Hongo, Bunkyo-ku, Tokyo, Japan

{hassy,tsuruoka}@logos.t.u-tokyo.ac.jp
‡University College London, London, United Kingdom

pontus@stenetorp.se
§Toyota Technological Institute, 2-12-1 Hisakata, Tempaku-ku, Nagoya, Japan

makoto-miwa@toyota-ti.ac.jp

Abstract

We present a novel learning method for
word embeddings designed for relation
classification. Our word embeddings are
trained by predicting words between noun
pairs using lexical relation-specific fea-
tures on a large unlabeled corpus. This al-
lows us to explicitly incorporate relation-
specific information into the word embed-
dings. The learned word embeddings are
then used to construct feature vectors for
a relation classification model. On a well-
established semantic relation classification
task, our method significantly outperforms
a baseline based on a previously intro-
duced word embedding method, and com-
pares favorably to previous state-of-the-art
models that use syntactic information or
manually constructed external resources.

1 Introduction

Automatic classification of semantic relations has
a variety of applications, such as information ex-
traction and the construction of semantic net-
works (Girju et al., 2007; Hendrickx et al., 2010).
A traditional approach to relation classification is
to train classifiers using various kinds of features
with class labels annotated by humans. Carefully
crafted features derived from lexical, syntactic,
and semantic resources play a significant role in
achieving high accuracy for semantic relation clas-
sification (Rink and Harabagiu, 2010).

In recent years there has been an increasing in-
terest in using word embeddings as an alternative
to traditional hand-crafted features. Word embed-
dings are represented as real-valued vectors and
capture syntactic and semantic similarity between

words. For example, word2vec1 (Mikolov et al.,
2013b) is a well-established tool for learning word
embeddings. Although word2vec has successfully
been used to learn word embeddings, these kinds
of word embeddings capture only co-occurrence
relationships between words (Levy and Gold-
berg, 2014). While simply adding word embed-
dings trained using window-based contexts as ad-
ditional features to existing systems has proven
valuable (Turian et al., 2010), more recent studies
have focused on how to tune and enhance word
embeddings for specific tasks (Bansal et al., 2014;
Boros et al., 2014; Chen et al., 2014; Guo et al.,
2014; Nguyen and Grishman, 2014) and we con-
tinue this line of research for the task of relation
classification.

In this work we present a learning method for
word embeddings specifically designed to be use-
ful for relation classification. The overview of
our system and the embedding learning process
are shown in Figure 1. First we train word em-
beddings by predicting each of the words between
noun pairs using lexical relation-specific features
on a large unlabeled corpus. We then use the word
embeddings to construct lexical feature vectors for
relation classification. Lastly, the feature vectors
are used to train a relation classification model.

We evaluate our method on a well-established
semantic relation classification task and compare
it to a baseline based on word2vec embeddings
and previous state-of-the-art models that rely on
either manually crafted features, syntactic parses
or external semantic resources. Our method sig-
nificantly outperforms the word2vec-based base-
line, and compares favorably with previous state-
of-the-art models, despite relying only on lexi-

1https://code.google.com/p/word2vec/.

268



Figure 1: The overview of our system (a) and the embedding learning method (b). In the example
sentence, each of are, caused, and by is treated as a target word to be predicted during training.

cal level features and no external annotated re-
sources. Furthermore, our qualitative analysis of
the learned embeddings shows that n-grams of our
embeddings capture salient syntactic patterns sim-
ilar to semantic relation types.

2 Related Work

A traditional approach to relation classification is
to train classifiers in a supervised fashion using a
variety of features. These features include lexical
bag-of-words features and features based on syn-
tactic parse trees. For syntactic parse trees, the
paths between the target entities on constituency
and dependency trees have been demonstrated to
be useful (Bunescu and Mooney, 2005; Zhang et
al., 2006). On the shared task introduced by Hen-
drickx et al. (2010), Rink and Harabagiu (2010)
achieved the best score using a variety of hand-
crafted features which were then used to train a
Support Vector Machine (SVM).

Recently, word embeddings have become popu-
lar as an alternative to hand-crafted features (Col-
lobert et al., 2011). However, one of the limita-
tions is that word embeddings are usually learned
by predicting a target word in its context, leading
to only local co-occurrence information being cap-
tured (Levy and Goldberg, 2014). Thus, several
recent studies have focused on overcoming this
limitation. Le and Mikolov (2014) integrated para-
graph information into a word2vec-based model,
which allowed them to capture paragraph-level in-
formation. For dependency parsing, Bansal et
al. (2014) and Chen et al. (2014) found ways to
improve performance by integrating dependency-
based context information into their embeddings.

Bansal et al. (2014) trained embeddings by defin-
ing parent and child nodes in dependency trees as
contexts. Chen et al. (2014) introduced the con-
cept of feature embeddings induced by parsing a
large unannotated corpus and then learning em-
beddings for the manually crafted features. For
information extraction, Boros et al. (2014) trained
word embeddings relevant for event role extrac-
tion, and Nguyen and Grishman (2014) employed
word embeddings for domain adaptation of rela-
tion extraction. Another kind of task-specific word
embeddings was proposed by Tang et al. (2014),
which used sentiment labels on tweets to adapt
word embeddings for a sentiment analysis tasks.
However, such an approach is only feasible when
a large amount of labeled data is available.

3 Relation Classification Using Word
Embedding-based Features

We propose a novel method for learning word
embeddings designed for relation classification.
The word embeddings are trained by predicting
each word between noun pairs, given the corre-
sponding low-level features for relation classifi-
cation. In general, to classify relations between
pairs of nouns the most important features come
from the pairs themselves and the words between
and around the pairs (Hendrickx et al., 2010). For
example, in the sentence in Figure 1 (b) there is
a cause-effect relationship between the two nouns
conflicts and players. To classify the relation, the
most common features are the noun pair (conflicts,
players), the words between the noun pair (are,
caused, by), the words before the pair (the, exter-
nal), and the words after the pair (playing, tiles,

269



to, ...). As shown by Rink and Harabagiu (2010),
the words between the noun pairs are the most ef-
fective among these features. Our main idea is to
treat the most important features (the words be-
tween the noun pairs) as the targets to be predicted
and other lexical features (noun pairs, words out-
side them) as their contexts. Due to this, we expect
our embeddings to capture relevant features for
relation classification better than previous models
which only use window-based contexts.

In this section we first describe the learning pro-
cess for the word embeddings, focusing on lexical
features for relation classification (Figure 1 (b)).
We then propose a simple and powerful technique
to construct features which serve as input for a
softmax classifier. The overview of our proposed
system is shown in Figure 1 (a).

3.1 Learning Word Embeddings

Assume that there is a noun pair n = (n1, n2) in
a sentence with Min words between the pair and
Mout words before and after the pair:

• win = (win1 , . . . , winMin) ,

• wbef = (wbef1 , . . . , wbefMout) , and

• waft = (waft1 , . . . , waftMout) .

Our method predicts each target word wini ∈ win
using three kinds of information: n, words around
wini in win, and words in wbef and waft. Words
are embedded in a d-dimensional vector space and
we refer to these vectors as word embeddings. To
discriminate between words in n from those in
win, wbef , and waft, we have two sets of word
embeddings: N ∈ Rd×|N| and W ∈ Rd×|W|. W
is a set of words and N is also a set of words but
contains only nouns. Hence, the word cause has
two embeddings: one in N and another in W. In
general cause is used as a noun and a verb, and
thus we expect the noun embeddings to capture
the meanings focusing on their noun usage. This
is inspired by some recent work on word represen-
tations that explicitly assigns an independent rep-
resentation for each word usage according to its
part-of-speech tag (Baroni and Zamparelli, 2010;
Grefenstette and Sadrzadeh, 2011; Hashimoto et
al., 2013; Hashimoto et al., 2014; Kartsaklis and
Sadrzadeh, 2013).

A feature vector f ∈ R2d(2+c)×1 is constructed
to predict wini by concatenating word embeddings:

f = [N(n1);N(n2);W(wini−1); . . . ;W(w
in
i−c);

W(wini+1); . . . ;W(w
in
i+c);

1
Mout

Mout∑
j=1

W(wbefj );
1

Mout

Mout∑
j=1

W(waftj )] .

(1)

N(·) and W(·) ∈ Rd×1 corresponds to each word
and c is the context size. A special NULL token is
used if i− j is smaller than 1 or i+ j is larger than
Min for each j ∈ {1, 2, . . . , c}.

Our method then estimates a conditional prob-
ability p(w|f) that the target word is a word w
given the feature vector f , using a logistic regres-
sion model:

p(w|f) = σ(W̃(w) · f + b(w)) , (2)

where W̃(w) ∈ R2d(2+c)×1 is a weight vector for
w, b(w) ∈ R is a bias for w, and σ(x) = 1

1+e−x
is the logistic function. Each column vector in
W̃ ∈ R2d(c+1)×|W| corresponds to a word. That
is, we assign a logistic regression model for each
word, and we can train the embeddings using the
one-versus-rest approach to make p(wini |f) larger
than p(w′|f) for w′ ̸= wini . However, naively opti-
mizing the parameters of those logistic regression
models would lead to prohibitive computational
cost since it grows linearly with the size of the vo-
cabulary.

When training we employ several procedures
introduced by Mikolov et al. (2013b), namely,
negative sampling, a modified unigram noise dis-
tribution and subsampling. For negative sampling
the model parameters N, W, W̃, and b are learned
by maximizing the objective function Junlabeled:

∑
n

Min∑
i=1

log(p(wini |f)) + k∑
j=1

log(1− p(w′j |f))
 ,

(3)
where w′j is a word randomly drawn from the uni-
gram noise distribution weighted by an exponent
of 0.75. Maximizing Junlabeled means that our
method can discriminate between each target word
and k noise words given the target word’s context.
This approach is much less computationally ex-
pensive than the one-versus-rest approach and has
proven effective in learning word embeddings.

270



To reduce redundancy during training we use
subsampling. A training sample, whose tar-
get word is w, is discarded with the probability
Pd(w) = 1−

√
t

p(w) , where t is a threshold which

is set to 10−5 and p(w) is a probability corre-
sponding to the frequency of w in the training cor-
pus. The more frequent a target word is, the more
likely it is to be discarded. To further emphasize
infrequent words, we apply the subsampling ap-
proach not only to target words, but also to noun
pairs; concretely, by drawing two random numbers
r1 and r2, a training sample whose noun pair is
(n1, n2) is discarded if Pd(n1) is larger than r1 or
Pd(n2) is larger than r2.

Since the feature vector f is constructed as de-
fined in Eq. (1), at each training step, W̃(w) is
updated based on information about what pair of
nouns surrounds w, what word n-grams appear in
a small window around w, and what words appear
outside the noun pair. Hence, the weight vector
W̃(w) captures rich information regarding the tar-
get word w.

3.2 Constructing Feature Vectors

Once the word embeddings are trained, we can use
them for relation classification. Given a noun pair
n = (n1, n2) with its context words win, wbef ,
and waft, we construct a feature vector to classify
the relation between n1 and n2 by concatenating
three kinds of feature vectors:

gn the word embeddings of the noun pair,

gin the averaged n-gram embeddings between the
pair, and

gout the concatenation of the averaged word em-
beddings in wbef and waft.

The feature vector gn ∈ R2d×1 is the concate-
nation of N(n1) and N(n2):

gn = [N(n1);N(n2)] . (4)

Words between the noun pair contribute to clas-
sifying the relation, and one of the most common
ways to incorporate an arbitrary number of words
is treating them as a bag of words. However, word
order information is lost for bag-of-words features
such as averaged word embeddings. To incorpo-
rate the word order information, we first define n-
gram embeddings hi ∈ R4d(1+c)×1 between the

noun pair:

hi = [W(wini−1); . . . ;W(w
in
i−c);

W(wini+1); . . . ;W(w
in
i+c);W̃(w

in
i )] .

(5)

Note that W̃ can also be used and that the value
used for n is (2c+1). As described in Section 3.1,
W̃ captures meaningful information about each
word and after the first embedding learning step
we can treat the embeddings in W̃ as features for
the words. Mnih and Kavukcuoglu (2013) have
demonstrated that using embeddings like those in
W̃ is useful in representing the words. We then
compute the feature vector gin by averaging hi:

gin =
1

Min

Min∑
i=1

hi . (6)

We use the averaging approach since Min depends
on each instance. The feature vector gin allows us
to represent word sequences of arbitrary lengths as
fixed-length feature vectors using the simple oper-
ations: concatenation and averaging.

The words before and after the noun pair are
sometimes important in classifying the relation.
For example, in the phrase “pour n1 into n2”, the
word pour should be helpful in classifying the re-
lation. As with Eq. (1), we use the concatenation
of the averaged word embeddings of words before
and after the noun pair to compute the feature vec-
tor gout ∈ R2d×1:

gout =
1

Mout
[
Mout∑
j=1

W(wbefj );
Mout∑
j=1

W(waftj )] .

(7)
As described above, the overall feature vector

e ∈ R4d(2+c)×1 is constructed by concatenating
gn, gin, and gout. We would like to emphasize
that we only use simple operations: averaging and
concatenating the learned word embeddings. The
feature vector e is then used as input for a soft-
max classifier, without any complex transforma-
tion such as matrix multiplication with non-linear
functions.

3.3 Supervised Learning

Given a relation classification task we train a soft-
max classifier using the feature vector e described
in Section 3.2. For each k-th training sample with
a corresponding label lk among L predefined la-
bels, we compute a conditional probability given

271



its feature vector ek:

p(lk|ek) = exp(o(lk))∑L
i=1 exp(o(i))

, (8)

where o ∈ RL×1 is defined as o = Sek + s, and
S ∈ RL×4d(2+c) and s ∈ RL×1 are the softmax
parameters. o(i) is the i-th element of o. We then
define the objective function as:

Jlabeled =
K∑

k=1

log(p(lk|ek))− λ2 ∥θ∥
2 . (9)

K is the number of training samples and λ con-
trols the L-2 regularization. θ = (N,W,W̃,S, s)
is the set of parameters and Jlabeled is maximized
using AdaGrad (Duchi et al., 2011). We have
found that dropout (Hinton et al., 2012) is help-
ful in preventing our model from overfitting. Con-
cretely, elements in e are randomly omitted with a
probability of 0.5 at each training step. Recently
dropout has been applied to deep neural network
models for natural language processing tasks and
proven effective (Irsoy and Cardie, 2014; Paulus
et al., 2014).

In what follows, we refer to the above method
as RelEmb. While RelEmb uses only low-level
features, a variety of useful features have been
proposed for relation classification. Among them,
we use dependency path features (Bunescu and
Mooney, 2005) based on the untyped binary de-
pendencies of the Stanford parser to find the short-
est path between target nouns. The dependency
path features are computed by averaging word em-
beddings from W on the shortest path, and are
then concatenated to the feature vector e. Fur-
thermore, we directly incorporate semantic infor-
mation using word-level semantic features from
Named Entity (NE) tags and WordNet hypernyms,
as used in previous work (Rink and Harabagiu,
2010; Socher et al., 2012; Yu et al., 2014). We
refer to this extended method as RelEmbFULL.
Concretely, RelEmbFULL uses the same binary
features as in Socher et al. (2012). The features
come from NE tags and WordNet hypernym tags
of target nouns provided by a sense tagger (Cia-
ramita and Altun, 2006).

4 Experimental Settings

4.1 Training Data
For pre-training we used a snapshot of the En-
glish Wikipedia2 from November 2013. First,

2http://dumps.wikimedia.org/enwiki/.

we extracted 80 million sentences from the orig-
inal Wikipedia file, and then used Enju3 (Miyao
and Tsujii, 2008) to automatically assign part-of-
speech (POS) tags. From the POS tags we used
NN, NNS, NNP, or NNPS to locate noun pairs in
the corpus. We then collected training data by list-
ing pairs of nouns and the words between, before,
and after the noun pairs. A noun pair was omit-
ted if the number of words between the pair was
larger than 10 and we consequently collected 1.4
billion pairs of nouns and their contexts 4. We used
the 300,000 most frequent words and the 300,000
most frequent nouns and treated out-of-vocabulary
words as a special UNK token.

4.2 Initialization and Optimization
We initialized the embedding matrices N and W
with zero-mean gaussian noise with a variance of
1
d . W̃ and b were zero-initialized. The model pa-
rameters were optimized by maximizing the ob-
jective function in Eq. (3) using stochastic gradi-
ent ascent. The learning rate was set to α and lin-
early decreased to 0 during training, as described
in Mikolov et al. (2013a). The hyperparameters
are the embedding dimensionality d, the context
size c, the number of negative samples k, the initial
learning rate α, and Mout, the number of words
outside the noun pairs. For hyperparameter tun-
ing, we first fixed α to 0.025 and Mout to 5, and
then set d to {50, 100, 300}, c to {1, 2, 3}, and
k to {5, 15, 25}.

At the supervised learning step, we initialized S
and s with zeros. The hyperparameters, the learn-
ing rate for AdaGrad, λ, Mout, and the number of
iterations, were determined via 10-fold cross val-
idation on the training set for each setting. Note
that Mout can be tuned at the supervised learning
step, adapting to a specific dataset.

5 Evaluation

5.1 Evaluation Dataset
We evaluated our method on the SemEval 2010
Task 8 data set5 (Hendrickx et al., 2010), which
involves predicting the semantic relations between

3Despite Enju being a syntactic parser we only use the
POS tagger component. The accuracy of the POS tagger is
about 97.2% on the WSJ corpus.

4The training data, the training code, and the learned
model parameters used in this paper are publicly available at
http://www.logos.t.u-tokyo.ac.jp/˜hassy/
publications/conll2015/

5http://docs.google.com/View?docid=
dfvxd49s_36c28v9pmw.

272



noun pairs in their contexts. The dataset, contain-
ing 8,000 training and 2,717 test samples, defines
nine classes (Cause-Effect, Entity-Origin, etc.) for
ordered relations and one class (Other) for other
relations. Thus, the task can be treated as a 19-
class classification task. Two examples from the
training set are shown below.

(a) Financial [stress]E1 is one of the main causes
of [divorce]E2

(b) The [burst]E1 has been caused by water ham-
mer [pressure]E2

Training example (a) is classified as Cause-
Effect(E1, E2) which denotes that E2 is an effect
caused by E1, while training example (b) is classi-
fied as Cause-Effect(E2, E1) which is the inverse
of Cause-Effect(E1, E2). We report the official
macro-averaged F1 scores and accuracy.

5.2 Models
To empirically investigate the performance of our
proposed method we compared it to several base-
lines and previously proposed models.

5.2.1 Random and word2vec Initialization
Rand-Init. The first baseline is RelEmb itself,
but without applying the learning method on the
unlabeled corpus. In other words, we train the
softmax classifier from Section 3.3 on the labeled
training data with randomly initialized model pa-
rameters.

W2V-Init. The second baseline is RelEmb us-
ing word embeddings learned by word2vec. More
specifically, we initialize the embedding matrices
N and W with the word2vec embeddings. Re-
lated to our method, word2vec has a set of weight
vectors similar to W̃ when trained with negative
sampling and we use these weight vectors as a re-
placement for W̃. We trained the word2vec em-
beddings using the CBOW model with subsam-
pling on the full Wikipedia corpus. As with our
experimental settings, we fix the learning rate to
0.025, and investigate several hyperparameter set-
tings. For hyperparameter tuning we set the em-
bedding dimensionality d to {50, 100, 300}, the
context size c to {1, 3, 9}, and the number of neg-
ative samples k to {5, 15, 25}.
5.2.2 SVM-Based Systems
A simple approach to the relation classification
task is to use SVMs with standard binary bag-

of-words features. The bag-of-words features in-
cluded the noun pairs and words between, before,
and after the pairs, and we used LIBLINEAR6 as
our classifier.

5.2.3 Neural Network Models
Socher et al. (2012) used Recursive Neural Net-
work (RNN) models to classify the relations.
Subsequently, Ebrahimi and Dou (2015) and
Hashimoto et al. (2013) proposed RNN models to
better handle the relations. These methods rely on
syntactic parse trees.

Yu et al. (2014) introduced their novel Factor-
based Compositional Model (FCM) and presented
results from several model variants, the best per-
forming being FCMEMB and FCMFULL. The for-
mer only uses word embedding information and
the latter relies on dependency paths and NE fea-
tures, in addition to word embeddings.

Zeng et al. (2014) used a Convolutional Neu-
ral Network (CNN) with WordNet hypernyms.
Noteworthy in relation to the RNN-based meth-
ods, the CNN model does not rely on parse trees.
More recently, dos Santos et al. (2015) have in-
troduced CR-CNN by extending the CNN model
and achieved the best result to date. The key point
of CR-CNN is that it improves the classification
score by omitting the noisy class “Other” in the
dataset described in Section 5.1. We call CR-CNN
using the “Other” class CR-CNNOther and CR-
CNN omitting the class CR-CNNBest.

5.3 Results and Discussion

The scores on the test set for SemEval 2010 Task 8
are shown in Table 1. RelEmb achieves 82.8% of
F1 which is better than those of almost all models
compared and comparable to that of the previous
state of the art, except for CR-CNNBest. Note that
RelEmb does not rely on external semantic fea-
tures and syntactic parse features7. Furthermore,
RelEmbFULL achieves 83.5% of F1. We calcu-
lated a confidence interval (82.0, 84.9) (p < 0.05)
using bootstrap resampling (Noreen, 1989).

5.3.1 Comparison with the Baselines
RelEmb significantly outperforms not only the
Rand-Init baseline, but also the W2V-Init baseline.

6http://www.csie.ntu.edu.tw/˜cjlin/
liblinear/.

7While we use a POS tagger to locate noun pairs, RelEmb
does not explicitly use POS features at the supervised learn-
ing step.

273



Features for classifiers F1 / ACC (%)
RelEmbFULL embeddings, dependency paths, WordNet, NE 83.5 / 79.9
RelEmb embeddings 82.8 / 78.9
RelEmb (W2V-Init) embeddings 81.8 / 77.7
RelEmb (Rand-Init) embeddings 78.2 / 73.5
SVM bag of words 76.5 / 72.0
SVM bag of words, POS, dependency paths, WordNet, 82.2 / 77.9(Rink and Harabagiu, 2010) paraphrases, TextRunner, Google n-grams, etc.
CR-CNNBest (dos Santos et al., 2015) embeddings, word position embeddings 84.1 / n/a
FCMFULL (Yu et al., 2014) embeddings, dependency paths, NE 83.0 / n/a
CR-CNNOther (dos Santos et al., 2015) embeddings, word position embeddings 82.7 / n/a
CRNN (Ebrahimi and Dou, 2015) embeddings, parse trees, WordNet, NE, POS 82.7 / n/a
CNN (Zeng et al., 2014) embeddings, WordNet 82.7 / n/a
MVRNN (Socher et al., 2012) embeddings, parse trees, WordNet, NE, POS 82.4 / n/a
FCMEMB (Yu et al., 2014) embeddings 80.6 / n/a
RNN (Hashimoto et al., 2013) embeddings, parse trees, phrase categories, etc. 79.4 / n/a

Table 1: Scores on the test set for SemEval 2010 Task 8.

These results show that our task-specific word em-
beddings are more useful than those trained using
window-based contexts. A point that we would
like to emphasize is that the baselines are un-
expectedly strong. As was noted by Wang and
Manning (2012), we should carefully implement
strong baselines and see whether complex models
can outperform these baselines.

5.3.2 Comparison with SVM-Based Systems
RelEmb performs much better than the bag-of-
words-based SVM. This is not surprising given
that we use a large unannotated corpus and embed-
dings with a large number of parameters. RelEmb
also outperforms the SVM system of Rink and
Harabagiu (2010), which demonstrates the effec-
tiveness of our task-specific word embeddings, de-
spite our only requirement being a large unanno-
tated corpus and a POS tagger.

5.3.3 Comparison with Neural Network
Models

RelEmb outperforms the RNN models. In our pre-
liminary experiments, we have found some un-
desirable parse trees when computing vector rep-
resentations using RNN-based models and such
parsing errors might hamper the performance of
the RNN models.

FCMFULL, which relies on dependency paths
and NE features, achieves a better score than that
of RElEmb. Without such features, RelEmb out-
performs FCMEMB by a large margin. By incor-
porating external resources, RelEmbFULL outper-
forms FCMFULL.

RelEmb compares favorably to CR-CNNOther,
despite our method being less computationally ex-
pensive than CR-CNNOther. When classifying an
instance, the number of the floating number mul-
tiplications is 4d(2 + c)L in our method since
our method requires only one matrix-vector prod-
uct for the softmax classifier as described in Sec-
tion 3.3. c is the window size, d is the word
embedding dimensionality, and L is the number
of the classes. In CR-CNNOther, the number is
(Dc(d + 2d′)N + DL), where D is the dimen-
sionality of the convolution layer, d′ is the posi-
tion embedding dimensionality, and N is the av-
erage length of the input sentences. Here, we
omit the cost of the hyperbolic tangent function
in CR-CNNOther for simplicity. Using the best
hyperparameter settings, the number is roughly
3.8 × 104 in our method, and 1.6 × 107 in CR-
CNNOther assuming N is 10. dos Santos et al.
(2015) also boosted the score of CR-CNNOther
by omitting the noisy class “Other” by a ranking-
based classifier, and achieved the best score (CR-
CNNBest). Our results may also be improved by
using the same technique, but the technique is
dataset-dependent, so we did not incorporate the
technique.

5.4 Analysis on Training Settings

We perform analysis of the training procedure fo-
cusing on RelEmb.

5.4.1 Effects of Tuning Hyperparameters
In Tables 2 and 3, we show how tuning the hyper-
parameters of our method and word2vec affects

274



c d k = 5 k = 15 k = 25

1
50 80.5 81.0 80.9

100 80.9 81.3 81.2

2
50 80.9 81.3 81.3

100 81.3 81.6 81.7

3
50 81.0 81.0 81.5

100 81.3 81.9 82.2
300 - - 82.0

Table 2: Cross-validation results for RelEmb.

c d k = 5 k = 15 k = 25

1
50 80.5 80.7 80.9

100 81.1 81.2 81.0
300 81.2 81.3 81.2

3
50 80.4 80.7 80.8

100 81.0 81.0 80.9

9
50 80.0 79.8 80.2

100 80.3 80.4 80.1

Table 3: Cross-validation results for the W2V-Init.

the classification results using 10-fold cross vali-
dation on the training set. The same split is used
for each setting, so all results are comparable to
each other. The best settings for the cross vali-
dation are used to produce the results reported in
Table 1.

Table 2 shows F1 scores obtained by RelEmb.
The results for d = 50, 100 show that RelEmb
benefits from relatively large context sizes. The
n-gram embeddings in RelEmb capture richer in-
formation by setting c to 3 compared to setting c
to 1. Relatively large numbers of negative sam-
ples also slightly boost the scores. As opposed
to these trends, the score does not improve using
d = 300. We use the best setting (c = 3, d = 100,
k = 25) for the remaining analysis. We note that
RelEmbFULL achieves an F1-score of 82.5.

We also performed similar experiments for the
W2V-Init baseline, and the results are shown in
Table 3. In this case, the number of negative sam-
ples does not affect the scores, and the best score
is achieved by c = 1. As discussed in Bansal et al.
(2014), the small context size captures the syntac-
tic similarity between words rather than the top-
ical similarity. This result indicates that syntactic
similarity is more important than topical similarity
for this task. Compared to the word2vec embed-
dings, our embeddings capture not only local con-
text information using word order, but also long-

gn gin g′in gn,gin gn,gin,gout
61.8 70.2 68.2 81.1 82.2

Table 4: Cross-validation results for ablation tests.

Method Score
RelEmb N 0.690
RelEmb W 0.599
W2V-Init 0.687

Table 5: Evaluation on the WordSim-353 dataset.

range co-occurrence information by being tailored
for the specific task.

5.4.2 Ablation Tests
As described in Section 3.2, we concatenate three
kinds of feature vectors, gn, gin, and gout, for
supervised learning. Table 4 shows classification
scores for ablation tests using 10-fold cross val-
idation. We also provide a score using a sim-
plified version of gin, where the feature vector
g′in is computed by averaging the word embed-
dings [W(wini );W̃(w

in
i )] of the words between

the noun pairs. This feature vector g′in then serves
as a bag-of-words feature.

Table 4 clearly shows that the averaged n-gram
embeddings contribute the most to the semantic
relation classification performance. The differ-
ence between the scores of gin and g′in shows the
effectiveness of our averaged n-gram embeddings.

5.4.3 Effects of Dropout
At the supervised learning step we use dropout to
regularize our model. Without dropout, our per-
formance drops from 82.2% to 81.3% of F1 on the
training set using 10-fold cross validation.

5.4.4 Performance on a Word Similarity Task
As described in Section 3.1, we have the noun-
specific embeddings N as well as the standard
word embeddings W. We evaluated the learned
embeddings using a word-level semantic evalua-
tion task called WordSim-353 (Finkelstein et al.,
2001). This dataset consists of 353 pairs of nouns
and each pair has an averaged human rating which
corresponds to a semantic similarity score. Evalu-
ation is performed by measuring Spearman’s rank
correlation between the human ratings and the co-
sine similarity scores of the embeddings. Table 5
shows the evaluation results. We used the best set-
tings reported in Table 2 and 3 since our method

275



Cause-Effect(E1,E2) Content-Container(E1,E2) Message-Topic(E1,E2)
resulted poverty caused the inside was inside a discuss magazines relating to
caused stability caused the in was in a explaining to discuss aspects
generated coast resulted in hidden hidden in a discussing concerned about NULL
cause fire caused due was was inside the relating interview relates to
causes that resulted in stored was hidden in describing to discuss the

Cause-Effect(E2,E1) Content-Container(E2,E1) Message-Topic(E2,E1)
after caused by radiation full NULL full of subject were related in
from caused by infection included was full of related was related in
caused stomach caused by contains a full NULL discussed been discussed in
triggered caused by genetic contained a full and documented is related through
due anger caused by stored a full forty received the subject of

Table 6: Top five unigrams and trigrams with the highest scores for six classes.

is designed for relation classification and it is not
clear how to tune the hyperparameters for the word
similarity task. As shown in the result table, the
noun-specific embeddings perform better than the
standard embeddings in our method, which indi-
cates the noun-specific embeddings capture more
useful information in measuring the semantic sim-
ilarity between nouns. The performance of the
noun-specific embeddings is roughly the same as
that of the word2vec embeddings.

5.5 Qualitative Analysis on the Embeddings
Using the n-gram embeddings hi in Eq. (5), we in-
spect which n-grams are relevant to each relation
class after the supervised learning step of RelEmb.
When the context size c is 3, we can use at most
7-grams. The learned weight matrix S in Sec-
tion 3.3 is used to detect the most relevant n-grams
for each class. More specifically, for each n-gram
embedding (n = 1, 3) in the training set, we com-
pute the dot product between the n-gram embed-
ding and the corresponding components in S. We
then select the pairs of n-grams and class labels
with the highest scores. In Table 6 we show the top
five n-grams for six classes. These results clearly
show that the n-gram embeddings capture salient
syntactic patterns which are useful for the relation
classification task.

6 Conclusions and Future Work

We have presented a method for learning word em-
beddings specifically designed for relation classi-
fication. The word embeddings are trained using
large unlabeled corpora to capture lexical features
for relation classification. On a well-established
semantic relation classification task our method
significantly outperforms the baseline based on
word2vec. Our method also compares favorably to
previous state-of-the-art models that rely on syn-

tactic parsers and external semantic resources, de-
spite our method requiring only access to an unan-
notated corpus and a POS tagger. For future work,
we will investigate how well our method performs
on other domains and datasets and how relation la-
bels can help when learning embeddings in a semi-
supervised learning setting.

Acknowledgments

We thank the anonymous reviewers for their help-
ful comments and suggestions.

References
Mohit Bansal, Kevin Gimpel, and Karen Livescu.

2014. Tailoring Continuous Word Representations
for Dependency Parsing. In Proceedings of the 52nd
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 2: Short Papers), pages
809–815.

Marco Baroni and Roberto Zamparelli. 2010. Nouns
are Vectors, Adjectives are Matrices: Representing
Adjective-Noun Constructions in Semantic Space.
In Proceedings of the 2010 Conference on Empiri-
cal Methods in Natural Language Processing, pages
1183–1193.

Emanuela Boros, Romaric Besançon, Olivier Ferret,
and Brigitte Grau. 2014. Event Role Extrac-
tion using Domain-Relevant Word Representations.
In Proceedings of the 2014 Conference on Em-
pirical Methods in Natural Language Processing
(EMNLP), pages 1852–1857.

Razvan Bunescu and Raymond Mooney. 2005. A
Shortest Path Dependency Kernel for Relation Ex-
traction. In Proceedings of Human Language Tech-
nology Conference and Conference on Empirical
Methods in Natural Language Processing, pages
724–731.

Wenliang Chen, Yue Zhang, and Min Zhang. 2014.
Feature Embedding for Dependency Parsing. In

276



Proceedings of COLING 2014, the 25th Interna-
tional Conference on Computational Linguistics:
Technical Papers, pages 816–826.

Massimiliano Ciaramita and Yasemin Altun. 2006.
Broad-Coverage Sense Disambiguation and Infor-
mation Extraction with a Supersense Sequence Tag-
ger. In Proceedings of the 2006 Conference on Em-
pirical Methods in Natural Language Processing,
pages 594–602.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural Language Processing (Almost) from
Scratch. Journal of Machine Learning Research,
12:2493–2537.

Cicero Nogueira dos Santos, Bing Xiang, and Bowen
Zhou. 2015. Classifying Relations by Ranking with
Convolutional Neural Networks. In Proceedings
of the Joint Conference of the 53rd Annual Meet-
ing of the Association for Computational Linguistics
and the 7th International Joint Conference on Natu-
ral Language Processing of the Asian Federation of
Natural Language Processing. to appear.

John Duchi, Elad Hazan, and Yoram Singer. 2011.
Adaptive Subgradient Methods for Online Learning
and Stochastic Optimization. Journal of Machine
Learning Research, 12:2121–2159.

Javid Ebrahimi and Dejing Dou. 2015. Chain Based
RNN for Relation Classification. In Proceedings of
the 2015 Conference of the North American Chap-
ter of the Association for Computational Linguistics:
Human Language Technologies, pages 1244–1249.

Lev Finkelstein, Gabrilovich Evgenly, Matias Yossi,
Rivlin Ehud, Solan Zach, Wolfman Gadi, and Rup-
pin Eytan. 2001. Placing Search in Context: The
Concept Revisited. In Proceedings of the Tenth In-
ternational World Wide Web Conference.

Roxana Girju, Preslav Nakov, Vivi Nastase, Stan Sz-
pakowicz, Peter Turney, and Deniz Yuret. 2007.
SemEval-2007 Task 04: Classification of Semantic
Relations between Nominals. In Proceedings of the
Fourth International Workshop on Semantic Evalu-
ations (SemEval-2007), pages 13–18.

Edward Grefenstette and Mehrnoosh Sadrzadeh. 2011.
Experimental Support for a Categorical Composi-
tional Distributional Model of Meaning. In Pro-
ceedings of the 2011 Conference on Empirical Meth-
ods in Natural Language Processing, pages 1394–
1404.

Jiang Guo, Wanxiang Che, Haifeng Wang, and Ting
Liu. 2014. Revisiting Embedding Features for Sim-
ple Semi-supervised Learning. In Proceedings of
the 2014 Conference on Empirical Methods in Natu-
ral Language Processing (EMNLP), pages 110–120.

Kazuma Hashimoto, Makoto Miwa, Yoshimasa Tsu-
ruoka, and Takashi Chikayama. 2013. Simple Cus-
tomization of Recursive Neural Networks for Se-
mantic Relation Classification. In Proceedings of

the 2013 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1372–1376.

Kazuma Hashimoto, Pontus Stenetorp, Makoto Miwa,
and Yoshimasa Tsuruoka. 2014. Jointly Learning
Word Representations and Composition Functions
Using Predicate-Argument Structures. In Proceed-
ings of the 2014 Conference on Empirical Methods
in Natural Language Processing (EMNLP), pages
1544–1555.

Iris Hendrickx, Su Nam Kim, Zornitsa Kozareva,
Preslav Nakov, Diarmuid Ó Séaghdha, Sebastian
Padó, Marco Pennacchiotti, Lorenza Romano, and
Stan Szpakowicz. 2010. SemEval-2010 Task 8:
Multi-Way Classification of Semantic Relations be-
tween Pairs of Nominals. In Proceedings of the
5th International Workshop on Semantic Evaluation,
pages 33–38.

Geoffrey E. Hinton, Nitish Srivastava, Alex
Krizhevsky, Ilya Sutskever, and Ruslan Salakhut-
dinov. 2012. Improving neural networks by
preventing co-adaptation of feature detectors.
CoRR, abs/1207.0580.

Ozan Irsoy and Claire Cardie. 2014. Deep Recursive
Neural Networks for Compositionality in Language.
In Advances in Neural Information Processing Sys-
tems 27, pages 2096–2104.

Dimitri Kartsaklis and Mehrnoosh Sadrzadeh. 2013.
Prior Disambiguation of Word Tensors for Con-
structing Sentence Vectors. In Proceedings of the
2013 Conference on Empirical Methods in Natural
Language Processing, pages 1590–1601.

Quoc Le and Tomas Mikolov. 2014. Distributed
Representations of Sentences and Documents. In
Proceedings of the 31st International Conference
on Machine Learning (ICML-14), ICML ’14, pages
1188–1196.

Omer Levy and Yoav Goldberg. 2014. Neural Word
Embedding as Implicit Matrix Factorization. In Ad-
vances in Neural Information Processing Systems
27, pages 2177–2185.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey
Dean. 2013a. Efficient Estimation of Word Repre-
sentations in Vector Space. In Proceedings of Work-
shop at the International Conference on Learning
Representations.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013b. Distributed Represen-
tations of Words and Phrases and their Composition-
ality. In Advances in Neural Information Processing
Systems 26, pages 3111–3119.

Yusuke Miyao and Jun’ichi Tsujii. 2008. Feature For-
est Models for Probabilistic HPSG Parsing. Compu-
tational Linguistics, 34(1):35–80, March.

277



Andriy Mnih and Koray Kavukcuoglu. 2013. Learning
word embeddings efficiently with noise-contrastive
estimation. In Advances in Neural Information Pro-
cessing Systems 26, pages 2265–2273.

Thien Huu Nguyen and Ralph Grishman. 2014. Em-
ploying Word Representations and Regularization
for Domain Adaptation of Relation Extraction. In
Proceedings of the 52nd Annual Meeting of the As-
sociation for Computational Linguistics (Volume 2:
Short Papers), pages 68–74.

Eric W. Noreen. 1989. Computer-Intensive Methods
for Testing Hypotheses: An Introduction. Wiley-
Interscience.

Romain Paulus, Richard Socher, and Christopher D
Manning. 2014. Global Belief Recursive Neural
Networks. In Advances in Neural Information Pro-
cessing Systems 27, pages 2888–2896.

Bryan Rink and Sanda Harabagiu. 2010. UTD: Clas-
sifying Semantic Relations by Combining Lexical
and Semantic Resources. In Proceedings of the
5th International Workshop on Semantic Evaluation,
pages 256–259.

Richard Socher, Brody Huval, Christopher D. Man-
ning, and Andrew Y. Ng. 2012. Semantic Compo-
sitionality through Recursive Matrix-Vector Spaces.
In Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning,
pages 1201–1211.

Duyu Tang, Furu Wei, Nan Yang, Ming Zhou, Ting
Liu, and Bing Qin. 2014. Learning Sentiment-
Specific Word Embedding for Twitter Sentiment
Classification. In Proceedings of the 52nd Annual
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers), pages 1555–
1565.

Joseph Turian, Lev-Arie Ratinov, and Yoshua Bengio.
2010. Word Representations: A Simple and General
Method for Semi-Supervised Learning. In Proceed-
ings of the 48th Annual Meeting of the Association
for Computational Linguistics, pages 384–394.

Sida Wang and Christopher Manning. 2012. Baselines
and Bigrams: Simple, Good Sentiment and Topic
Classification. In Proceedings of the 50th Annual
Meeting of the Association for Computational Lin-
guistics (Volume 2: Short Papers), pages 90–94.

Mo Yu, Matthew R. Gormley, and Mark Dredze. 2014.
Factor-based Compositional Embedding Models. In
Proceedings of Workshop on Learning Semantics at
the 2014 Conference on Neural Information Pro-
cessing Systems.

Daojian Zeng, Kang Liu, Siwei Lai, Guangyou Zhou,
and Jun Zhao. 2014. Relation Classification via
Convolutional Deep Neural Network. In Proceed-
ings of COLING 2014, the 25th International Con-
ference on Computational Linguistics: Technical
Papers, pages 2335–2344.

Min Zhang, Jie Zhang, Jian Su, and GuoDong Zhou.
2006. A Composite Kernel to Extract Relations be-
tween Entities with Both Flat and Structured Fea-
tures. In Proceedings of the 21st International Con-
ference on Computational Linguistics and 44th An-
nual Meeting of the Association for Computational
Linguistics, pages 825–832.

278


