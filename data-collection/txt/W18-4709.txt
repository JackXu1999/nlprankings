






































Improving String Processing for Temporal Relations

David Woods, Tim Fernando
ADAPT Centre

Computational Linguistics Group
School of Computer Science and Statistics

Trinity College Dublin, Ireland
dwoods@tcd.ie, tim.fernando@tcd.ie

Abstract

This paper presents a refinement of the superposition operation on strings which are used to
represent temporal relation information such as is found in documents annotated with TimeML.
Superposition is made demonstrably more efficient by interleaving generation with testing, rather
than generating and then testing. The strings offer compact visual appeal while remaining an
attractive option for computation and reasoning. Motivated by Freksa’s semi-interval relations, a
suggestion is also made for a potential method of representing partial information in these strings
so as to allow for analysis at different granularities, and for more flexibility when dealing with
cases of ambiguity.

1 Introduction

A string of n sets ↵1↵2 · · ·↵n can be used to represent a sequence of events and time periods such that
the linear order and inter-relations of the events are clearly apparent, while remaining compact. Such
a string is read from left to right chronologically, with each ↵i, i 2 {1, 2, . . . , n}, depicting one of n
moments in time, and specifying the set of exactly those temporal propositions, or fluents, which hold
simultaneously at that moment i. A fluent a 2 ↵i is understood to be occurring before another fluent
a0 2 ↵j iff i < j and a0 /2 ↵i.

Note that these strings do not (necessarily) offer any information concerning real duration: a fluent
may occur in several string positions, but this does not affect any interpretation of its duration, only its
relation to other fluents, i.e. if the symbol a appears in both ↵i and ↵i+1, the event it stands for is not
understood as being twice as long as if the symbol had only appeared in ↵i. Fluents representing fixed
time points may be used to give a sense of real time (e.g. a = “5pm on 25th May 2018”). Because of
this, a string in which ↵i = ↵i+1 for any 1  i < n will not have its interpretation affected if either
↵i or ↵i+1 are deleted. For example, the string {a}{a}{a, b}{b}{b} is equivalent in interpretation to
{a}{a, b}{b}. A string featuring these repetitions is said to stutter, and the process of removing stutter
from a string is called block compression (Fernando, 2015; Woods et al., 2017).

Throughout this paper, each string position ↵i will be drawn as a box, with for the empty set ?,
allowing the strings to be read like strips of film. Events are treated as bounded intervals, such that they
have a beginning and ending – this is represented through the use of bounding empty sets – although this
assumption is not required by the string framework: the finite event a, drawn as a , as opposed to
non-finite event a0, drawn as a0 .

By superposing multiple strings, large amounts of information may be condensed into a single string,
which offers a timeline-like visual appeal. The strings may be used to encode and reason about interval
relations, as in Allen (1983), and also to aid visualisation in the annotation process. It is hoped that
this approach may be seen as complementary to existing graphical tools. In Section 3, a refinement is
offered of the superposition operation discussed in Woods et al. (2017) which preserves relational infor-
mation under reduct, and interleaves generation with testing of results for a more efficient calculation. A

This work is licenced under a Creative Commons Attribution 4.0 International Licence. Licence details: http://
creativecommons.org/licenses/by/4.0/

76



potential extension of the framework is also shown in Section 4 such as to allow for incomplete informa-
tion, and for Freksa (1992)’s semi-interval relations to be represented. This would enable reasoning over
partial or uncertain information, or in case coarser analysis was desired.

2 Motivation

Several attempts have been made to create a visualisation system which best represents the temporal
relations found in TimeML (TimeML Working Group, 2005; Pustejovsky et al., 2010), particularly for
use as an annotation aid, including Tango (Pustejovsky et al., 2003; Verhagen et al., 2006), using labelled
arcs in a directed graph, and T-BOX (Verhagen, 2005a), using relative placement of boxed temporal
propositions. A clear advantage of T-BOX is that it presents the information in a way that makes it easy
to quickly gain a sense of a document’s overall temporal structure, due to its intuitive use of arrows,
box-inclusion, and stacking.

Using strings as a representational tool presents the same intuitive structure, with a timeline-like left-
to-right layout, but in a compact format which may also be used for computations, rather than being a
purely visual entity.

Although these strings may be used for other problems (see Fernando (2015)), one of their more
obvious uses is as a tool for the simultaneous visualisation of and reasoning about collections of Allen
(1983)’s interval relations, such as those which appear (slightly renamed) as TLINKs in documents
annotated with TimeML. A TLINK, or temporal link, is a tag featuring a pair of temporal entities, either
event instances or time periods, from the text of the document and a relation between them, which can
be translated to a string.

By way of example, taking a tag <TLINK lid="l5" relType="BEFORE" timeID="t86"
relatedToTime="t82"/>1 (t86 referring to a five year period, and t82 being the document cre-
ation time), it is straightforward to convert this to a string: find the Allen relation which corre-
sponds to the relType attribute, then substitute a and a0 in Table 1 with the values of timeID (or
eventInstanceID) and relatedToTime (or relatedToEventInstance), respectively, to
give “t86 before t82” – t86 t82 , which is interpreted as saying that the five year period occurred
before the document creation time. By converting all of a document’s TLINKs to strings and superposing
them with one another, a picture begins to build up of the document’s overall temporal structure.

As Derczynski (2016, p. 2) points out, the choice of representation for temporal relation types is
critical, as choosing the right relation for arbitrary pairs of events is difficult. By using these strings, an
annotator would be able to see the state of the document as a whole, and receive suggestions when there
are constraints on the possible relations they may choose, given other relations. For example, given “x
during y” – y x, y y and “y during z” – z y, z z , there is only one possible relation between

x and z: “x during z” – z x, z z . In scenarios such as this, where there is only one possibility, the
system should be able to fill it in automatically, but in other cases, it might suggest to an annotator that
only a certain group of relations is feasible.

The ultimate goal here would be to achieve full temporal closure over the document. If the temporal
entities were (as in Tango) represented as nodes on a graph, and the relations between them as the
arcs, this would look like a fully connected graph, with an arc from every node to every other node.
Using strings instead, a single, timeline-like string would be computable, which would contain all of the
temporal relation information of the document. It would be possible to determine the relation between
any two (or more) events in a single operation, and to quickly examine subsections of the timeline, or
see the relative ordering of a specific subset of events (see reduct and projections, Section 3).

Reaching this somewhat lofty target in an automatic way seems unlikely, at least for now, as the
number of relations given in a typical document from TimeBank (Pustejovsky et al., 2006), the largest
corpus of documents annotated with TimeML, is far short of the total N(N � 1)/2 (for N fluents) links
mentioned by Verhagen (2005b, p. 3), and in most cases, there is simply not enough information to
compute everything. See Section 4 for further discussion on this matter.

1Document ABC19980108.1830.0711.tml

77



One benefit the strings offer from an automation point of view is the ability to quickly determine
inconsistent labellings in TimeML documents. If superposition of any two strings produces an empty
language, then there is an incompatibility between them (e.g. “x before y” – x y and “x after

y” – y x ), and there is a problem with the document. As some inconsistencies are only revealed
through transitivities, superposing more than two strings will often present further issues.

Since the superposition operation would be used very frequently in any system that employed these
strings for visualisation or computation, it is critical that it be made as efficient as possible.

3 Constraints for superposition of strings

Superposition in its simplest form is defined as the componentwise union of two strings of equal length:

↵1↵2 · · ·↵n & ↵01↵02 · · ·↵0n := (↵1 [ ↵01)(↵2 [ ↵02) · · · (↵n [ ↵0n) (1)

for example

a b c & a a d = a a, b c, d (2)

This is extended to languages (sets of strings) L and L0:

L & L0 :=
[

n�0
{s & s0 | s 2 Ln, s0 2 L0n} (3)

where Ln and L0n are the sets of strings of length n in L and L
0, respectively.

In order to extend this operation further to strings of unequal lengths, it should first be said that s and
s0 are bc-equivalent if they block compress to the same string, that is bc(s) = bc(s0). The inverse of the
block compression operation may be used to introduce stutter in the strings which are to be superposed,
and generate an infinite language of bc-equivalent strings:

bc�1(s) = ↵+1 ↵
+
2 · · ·↵+n if s = bc(↵1↵2 · · ·↵n) (4)

These languages are then superposed, and the results are block compressed to give a finite set, the asyn-
chronous superposition of s and s0 (noting that bc(s) = bc(s0) () s0 2 bc�1bc(s)):

s &⇤ s0 := {bc(s00) | s00 2 bc�1bc(s) & bc�1bc(s0)} (5)

For example:

x z &⇤ x y z = { x x, y z , x x, y x, z z , x y, z z , x x, y y, z z , x x, z y, z z }
(6)

Interestingly, the thirteen Allen interval relations given in

AR := {<, >, d, di, f, fi, m, mi, o, oi, s, si, =} (7)

are represented by the asynchronous superposition

a &⇤ a0 = {SR(a, a0) | R 2 AR} (8)

with each string SR(a, a0) featuring one relation a R a0, as shown in Table 1.

78



R a R a0 SR(a, a0) R�1 a R�1 a0 SR�1(a, a0)
< a before a0 a a0 > a after a0 a0 a

m a meets a0 a a0 mi a met by a0 a0 a

o a overlaps a0 a a, a0 a0 oi a overlapped by a0 a0 a0, a a

d a during a0 a0 a, a0 a0 di a contains a0 a a0, a a

s a starts a0 a, a0 a0 si a started by a0 a0, a a

f a finishes a0 a0 a, a0 fi a finished by a0 a a0, a

= a equals a0 a, a0

Table 1: Allen interval relations in strings

It should be noted that neither the basic ( & ) or asynchronous ( &⇤ ) forms of superposition pay attention
to the semantics of the strings on which they operate. For instance, in (2), there is no way to determine
the actual relation between c and d, given the strings a b c and a a d . Similarly, the strings x z

and x y z suggest a contradiction in (6), since each contains a different relation between x and z, only
one of which could be veridical at once.

An upper bound on the length of the strings to be generated when using inverse block compression
is established as n + n0 � 1 in Woods et al. (2017), where n and n0 are the respective lengths of input
strings s and s0. However, while this limit is an obvious and necessary improvement on generating the
infinite language bc�1bc(s) & bc�1bc(s0) in (5), further constraints are required in order for superposition
to truly be effective.

Some additional notation is presented here which will prove helpful in describing the present issue
and its solution. The following string will be used for demonstrative purposes, with lt = “last Tuesday”,
js = “John sleeps”, fa = “a fire alarm sounds”:

lt lt, js lt, js, fa lt, js lt = “John slept through the fire alarm last Tuesday” (9)

The vocabulary of a string s will be said to be the union of each of its components:

voc(s) :=

n[

i=1

↵i (10)

This makes s an MSOvoc(s)-model,2 interpreting each a 2 voc(s) as the set of string positions where a
occurs. The vocabulary of (9) is {lt, js, fa}.

For any set A, the A-reduct of a string s is defined as the componentwise intersection of s with A
(Fernando, 2016):

⇢A(↵1↵2 · · ·↵n) := (↵1 \ A)(↵2 \ A) · · · (↵n \ A) (11)

resulting in a string ⇢A(s) with vocabulary voc(s)\A. For example, setting A = {lt, fa}, the A-reduct
of (9) is the string lt lt lt, fa lt lt .

A string s will also be said to project to another string s0 if the voc(s0)-reduct of s block compresses
to s0:

bc(⇢voc(s0)(s)) = s
0 (12)

For example, a string projects to itself precisely if it is stutterless. Additionally, a language L can be said
to project to a string s0 if every string s 2 L projects to s0. As an MSOvoc(s)-model, a string s satisfies
a R a0 if s projects to SR(a, a0)

s |= a R a0 () bc(⇢{a,a0}(s)) = SR(a, a0) (13)
2See Libkin (2004) for a discussion of Monadic Second-Order Logic.

79



and “a is a bounded interval in s” if s projects to a . The string in (9) can be said to satisfy, for
instance, “lt contains fa”, since it projects to the string lt fa, lt lt (“The fire alarm sounded at
some point last Tuesday”). It also satisfies “lt contains js”, and “js contains fa”, as well as the inverses
of these three relations.

In general, every string in s &⇤ s0 will project back to both s and s0, provided voc(s) \ voc(s0) = ?.
However, if this condition of disjoint vocabulary does not hold, then s &⇤ s0 need not preserve the
projections. For example, the superposition of “x before y” – x y and “y before z” – y z

should, presumably,3 result in a language containing exactly one string, namely x y z (“x
happened before y did, which happened before z”). This string projects to both of the strings which made
it, preserving that original information, and further projects to “x before z” – x z , demonstrating
one of the transitivities of the Allen interval relations i.e. the possible relation(s) between a and a00, given
a R a0 and a0 R0 a00.

Asynchronous superposition in its current form, in fact, will produce a language of 270 strings, five
of which project to x y , five which project to y z , and just one ( x y z ) which

projects to both. Of these 270 strings, 245 will project to y y , which is plainly invalid by the
earlier assertion that only finite intervals should be expected (i.e. for any fluent a 2 voc(s), s should
project to a ). By requiring that the resulting language of a superposition can project back to each of
its “parent” strings, it is ensured that the original information is not lost, and allows for the calculation
of the transitivities which are essential to temporal reasoning in Allen (1983) and Freksa (1992).

In Woods et al. (2017, p. 130), the potential results of a superposition are generated and then tested,
checking each one for validity (using an algorithm based on matching string positions). While this does
produce the correct output, it involves extensive overgeneration, even in the most basic of cases. Here
an approach is presented which interleaves testing with generation, ensuring that only valid results are
generated at all.
⇥ is fixed as an infinite set of fluents, and Fin(⇥) as the set of finite subsets of ⇥, such that any string

s is in Fin(⇥)⇤. Given ⌃,⌃0 2 Fin(⇥), a function
&⌃,⌃0 : (Fin(⇥)

⇤ ⇥ Fin(⇥)⇤) ! 2Fin(⇥)⇤ (14)
is defined, mapping a pair (s, s0) 2 Fin(⇥)⇤ ⇥ Fin(⇥)⇤ of strings to a set s &⌃,⌃0 s0 ✓ Fin(⇥)⇤ of
strings as follows:

✏ &⌃,⌃0 ✏ := {✏} (15)
where ✏ is the empty string (of length 0)

✏ &⌃,⌃0 s := ? for s 6= ✏ (16a)
s &⌃,⌃0 ✏ := ? for s 6= ✏ (16b)

and for ↵,↵0 2 Fin(⇥)

↵s &⌃,⌃0 ↵
0s0 :=

(
{(↵ [ ↵0)s00 | s00 2 L(↵, s,↵0, s0,⌃,⌃0)} if ⌃ \ ↵0 ✓ ↵ and ⌃0 \ ↵ ✓ ↵0 †
? otherwise

(17)

where L(↵, s,↵0, s0,⌃,⌃0) is

(↵s &⌃,⌃0 s
0) [ (s &⌃,⌃0 ↵0s0) [ (s &⌃,⌃0 s0) (18)

(from which it follows that any string in s &⌃,⌃0 s0 has length less than length(s) + length(s0)). If
⌃ = ⌃0 = ?, then (†) holds vacuously, and &⌃,⌃0 is functionally identical to the existant asynchronous
superposition operation &⇤. Otherwise, (†) can be used to prevent those invalid superpositions which do
not project to both s and s0.
3The assumption here being that all occurrences of a fluent symbol, whether appearing in one string or several, refer to the same
unique event or time period.

80



Proposition 1. For all ⌃,⌃0 2 Fin(⇥) and s, s0 2 Fin(⇥)⇤, s &⌃,⌃0 s0 selects those strings from
s &?,? s

0 which project to both the ⌃-reduct of s and the ⌃0-reduct of s0

s &⌃,⌃0 s
0 = {s00 2 s &?,? s0 | bc(⇢voc(s)\⌃(s00)) = bc(⇢⌃(s)) and

bc(⇢voc(s0)\⌃0(s
00)) = bc(⇢⌃0(s

0))} (19)

Corollary 2. For all s, s0 2 Fin(⇥)⇤ that are stutterless, if ⌃ = voc(s) and ⌃0 = voc(s0), then
s &⌃,⌃0 s

0 selects those strings from s &?,? s0 which project to s and s0

s &⌃,⌃0 s
0 = {s00 2 s &?,? s0 | bc(⇢⌃(s00)) = s and bc(⇢⌃0(s00)) = s0} (20)

Corollary 2 suggests that to preserve information under projection during superposition, vocabulary
constrained superposition should be used:

s &vc s
0 := s &voc(s),voc(s0) s

0 (21)

Below, (22) shows a short worked example for x y &vc y z .4

( [ )( x y &vc y z [ x y &vc y z [ x y &vc y z ) (22a)

( )(? [ ( x [ )( x y &vc y z [ y &vc y z [ y &vc y z ) [?) (22b)

( x )(? [? [ ( y [ y )( y &vc z [ &vc y z [ &vc z )) (22c)

( x y )(? [? [ ( [ z )( &vc [ ✏ &vc z [ ✏ &vc )) (22d)

( x y z )(( [ )( &vc ✏ [ ✏ &vc [ ✏ &vc ✏) [? [?) (22e)

( x y z )({✏}) = x y z (22f)

Compare the steps above with the procedure for asynchronous superposition. First, the padded forms of
x y and y z must be generated, each of which are superposed together (in this case, 20 ⇥ 20

strings):

{ x y & y z , . . . , x y & y z } (23)

Next, each of the resulting 400 strings is block compressed, to form a set of 53 possible strings:

{ x, y y, z , . . . , x, y y, z } (24)

Finally, each of these strings is tested to ensure that it projects to both x y and y z , reducing

the set to { x y z }.
Below in Table 2 are some speed-tests comparing asynchronous superposition’s generate-then-test

approach against vocabulary constrained superposition, each run in the same test environment5 with the
same inputs. The correct strings are found by each algorithm, so the notable element here is simply the
difference in time (the mean time of 1001 runs is given in milliseconds). Column 5 shows the percentage
decrease in time to produce the final result from &⇤ to &vc , with a mean decrease over these six
examples of 72.27%.

4It is worth mentioning that, although &vc is written in each of (22), ⌃ and ⌃0 are fixed as {x, y} and {y, z}, respectively, at
the first step of this procedure.

5Node.js v10.0.0 (64-bit) on Ubuntu 16.04 using an Intel i7-6700 CPU with 16GB of memory.

81



s s0 Time to s &⇤ s0 Time to s &vc s0 Decrease in time
x y y z 0.3207ms 0.0659ms 79.45%

x y y x 0.3207ms 0.0180ms 94.39%

x y x z 0.6124ms 0.2238ms 63.46%

x y x z 0.1528ms 0.1059ms 30.69%

x y u v 22.4016ms 5.3616ms 76.07%

w w, x x y w z 4.7403ms 0.4955ms 89.55%

Table 2: Comparison of &⇤ and &vc

Although these particular inputs are, for the most part, quite basic and arbitrarily chosen, they do illustrate
how preventing the problematic strings as they are generated, as in vocabulary constrained superposition,
is generally quicker than generating all of the syntactically possible strings then testing them for validity,
as asynchronous superposition does. The mean percentage decrease for all pairs of strings s 2 SR(x, y)
and s0 2 SR(y, z), with R 2 AR, is 34.11%. With s 2 SR(x, y) and s0 2 SR(u, v) the mean decrease is
64.51%, and with both strings s, s0 2 SR(x, y), it is 74.28%, which seems to suggest that there are large
gains in efficiency to be made in the cases when voc(s) \ voc(s0) = ? and when voc(s) = voc(s0).

4 Beyond Allen’s relations

While treating all temporal propositions as finite, bounded intervals makes it straightforward to represent
Allen’s interval relations as strings, the situation is more complicated when the data is incomplete (as it
most often is). If a superposition results in a language of size > 1, it is impossible to narrow that set
down to a single, correct string without further information. In this scenario, we are left with a number
of possible strings, each representing a different timeline of the events, only one of which is veridical.

Taking an example from TimeBank,6 two of the TLINKs are converted to their string representations,
featuring three distinct event instances (ei1, ei2, and ei12):

<TLINK relType="IBEFORE" eventInstanceID="ei1" relatedToEventInstance="ei2"/>

“ei1 meets ei2” – ei1 ei2 (25)

<TLINK relType="AFTER" eventInstanceID="ei12" relatedToEventInstance="ei1"/>

“ei12 after ei1” – ei1 ei12 (26)

Superposing these two strings gives a language with five strings, each of which projects to one of a
disjunction of the possible Allen relations between ei2 and ei12 (see Table 3).

s bc(⇢{ei2,ei12}(s)) ei2 R ei12

ei1 ei2 ei2, ei12 ei2 ei12, ei2 ei2 finished by ei12

ei1 ei2 ei2, ei12 ei2 ei2 ei12, ei2 ei2 ei2 contains ei12

ei1 ei2 ei12 ei2 ei12 ei2 meets ei12

ei1 ei2 ei12 ei2 ei12 ei2 before ei12

ei1 ei2 ei2, ei12 ei12 ei2 ei2, ei12 ei12 ei2 overlaps ei12

Table 3: Results of superposition s 2 ei1 ei2 &vc ei1 ei12
It is impossible to determine which of the five is the correct relation for ei2 and ei12 given just the
present data.

Given enough information, the exact relation between every fluent should be specifiable, achieving
complete document closure and allowing the creation of a single string whose vocabulary is the set of the
6Document APW19980807.0261.tml

82



document’s temporal propositions. The relation between any two entities e and e0 would be determinable
by applying the block compressed {e, e0}-reduct to the string, and seeing which Allen relation it projected
to. However, in typical discourse (and the documents of TimeBank), this often cannot be done: two
events may be presented ambiguously in their temporal ordering, either due to unclear wording, or due
to the fact that the events were not put in any kind of relation to each other in the text. For example

The girl stopped singing when the music on the radio ended. (27)

It is evident that the music and the girl’s singing ended at the same time, but it’s unclear as to which
started first, or if they started at the same time: the information just isn’t there. It might be surmised that
there is a probable correspondence between the music and the singing, and they likely started together,
but it is not possible to be certain. Perhaps she was singing to the song before as well, or perhaps she
only sang the last verse of the song.

Freksa (1992) proposed the use of semi-interval relations based on conceptual neighbourhoods to
allow for description and reasoning about this kind of uncertainty, as well as coarser-level reasoning. A
potential method for extending the expressivity of the strings discussed in this paper so as to allow for
these semi-intervals is described below.

First, an interval a will now be said to be bounded in a string s if that string projects to
pre(a) a post(a) , where pre(a) and post(a) are negations of a conjoined with a formula specify-

ing that a occurs immediately to the right (in the case of pre(a)) or to the left (in the case of post(a)).
Allowing non-atomic formulas such as these inside the string components does pose a risk of trivialising
the work done by superposition, and so further study is perhaps required here before making a decision
on what exactly should be permitted. For now, in any case, these symbols are taken as being allowed.

The example in Table 3 is repeated here, with these new bordering symbols made visible (for the sake
of conciseness, ei2 and ei12 are abbreviated to x and y, respectively):

x R y prepost(s)

x finished by y pre(x), pre(y) x, pre(y) x, y post(x), post(y)

x contains y pre(x), pre(y) x, pre(y) x, y post(x), y post(x), post(y)

x meets y pre(x), pre(y) x, pre(y) post(x), y post(x), post(y)

x before y pre(x), pre(y) x, pre(y) post(x), pre(y) post(x), y post(x), post(y)

x overlaps y pre(x), pre(y) x, pre(y) x, y post(x), y post(x), post(y)

Table 4: Applying pre and post to s

From Figure 7, p21 of Freksa (1992), it can be seen that the list of Allen relations here corresponds to
the Freksa relation “older”, which has the constraint that the beginning point of x should be before the
beginning point of y. Table 5 shows what happens when a block compressed {pre(x), pre(y)}-reduct is
performed on the strings of Table 4:

x R y bc(⇢{pre(x),pre(y)}(prepost(s)))

x finished by y pre(x), pre(y) pre(y)

x contains y pre(x), pre(y) pre(y)

x meets y pre(x), pre(y) pre(y)

x before y pre(x), pre(y) pre(y)

x overlaps y pre(x), pre(y) pre(y)

Table 5: Performing a block compressed {pre(x), pre(y)}-reduct
It is clear from this that each of the Allen relations which make up the “older” Freksa relation project to
pre(x), pre(y) pre(y) . In fact, only these five Allen relations will project to that string, and as such

we can use it to characterise that relation, similar to how the strings in Table 1 characterise the various

83



Allen relations. Below are the characteristic projections for some of the more “simple” Freksa relations
(note that some relations have multiple projections which could be considered characteristic, but just one
is shown for each):

s |= a ol “older” b () s projects to pre(a), pre(b) pre(b) (28a)

s |= a yo “younger” b () s projects to pre(a), pre(b) pre(a) (28b)

s |= a sb “survived by” b () s projects to post(a) post(a), post(b) (28c)

s |= a sv “survives” b () s projects to post(b) post(a), post(b) (28d)

s |= a hh “head to head with” b () s projects to pre(a), pre(b) (28e)

s |= a tt “tail to tail with” b () s projects to post(a), post(b) (28f)

s |= a bd “born before death of” b () s projects to pre(a) post(b) (28g)

s |= a db “died after birth of” b () s projects to pre(b) post(a) (28h)

These relations are dubbed simple here as they can all be projected to a single string with no further
extensions to the framework, which would permit condensing a language of results from a superposition
into a single string which is characteristic of that language. Conversely, the remaining Freksa relations
all involve either a conjunction or disjunction of constraints, and thus require further mechanics in order
to fit with this string representation.

For example, the relation “contemporary of” can be defined as

s |= a ct “contemporary of” b () s projects to pre(a) post(b)

and s projects to pre(b) post(a) (29)

and “precedes” can be

s |= a pr “precedes” b () s does not project to pre(b) post(a) (30)

where “precedes” is effectively the opposite of “died after birth of”. This is obviously not ideal – while
(29) is indeed a reduction from the nine Allen relations which correspond to “contemporary of”, a con-
junction of two strings cannot easily be used as an input to another superposition. (30) is a bit better in
that there’s only one string involved, but again, it’s difficult to superpose a negated string.

An option here is to expand again the symbols which can be boxed: allowing any pair of fluents a and
a0 to be conjoined within a string component such that for any ↵i in a string s

a ^ a0 2 ↵i () a 2 ↵i and a0 2 ↵i (31)
for example

⇢{x^y}( x x, y y ) = x, y (32)

This allows for further Freksa relations to be represented as single strings

s |= a ct “contemporary of” b () s projects to a ^ b (33a)

s |= a pr “precedes” b () s projects to pre(b) post(a) ^ b (33b)

s |= a sd “succeeds” b () s projects to pre(a) a ^ post(b) (33c)

While these methods do seem to have some potential, further work needs to be done in order to fully
integrate the concept of semi-intervals into this framework. For example, consider

a b d &vc a c (34)

84



which produces a language of 25 strings. The relation “b older than c” can be derived from this result
without too much difficulty, but the relation between c and d is more problematic. There is not enough
data to suggest any of Allen’s or Freksa’s relations with any kind of certainty, and this total lack of
information cannot be represented as anything remotely concise using strings. The question then arises
as to what to do with this result.

The number of times each Allen relation occurred in the 25 strings could potentially be examined, and
a guess hazarded based on the most frequently occurring one, but this approach would require careful
testing to determine whether there is real merit. For example, of the 25 strings in (34), five of them
(20%) in the resulting language suggest the relation “c before d”, three (12%) for each of “overlaps”,
“contains”, “finished by”, and “meets”, with the remaining eight Allen relations featuring in just one
(4%) string each. This means 68% of those strings project to one of the five relations corresponding to
“c older than d” – but there is no way to say for sure what relation there truly is between c and d without
additional data.

Though it should be proved by experiment, it may be more beneficial in scenarios like this to simply
leave the strings separate, and to not superpose them. Seeing two separate strings is plausibly more useful
to an annotator than 25 alternate possibilities. Generalising from this, one could imagine that, rather than
aiming for a single string representing the entire document’s temporal structure, a number of maximal
substrings are given instead, each of which contain as much information as can be made certain – that
is, all strings are superposed with each other only under the condition that the language generated by
superposition contains exactly one string (or group of strings corresponding to a single Freksa relation).
In this way, the document’s structure would still be visualised, but in chunks rather than a single timeline.

As an example, taking one of the smaller documents from TimeBank,7 translate all of the TLINKs to
strings (35), then superpose until there are no more options for superposition which produce a single-
string language. The resulting set of strings (36) are the maximal substrings for the document.

{ ei80 t10 , ei73 t9 , ei74 ei73 ,

ei75 ei74 , ei73, ei76 , ei81 ei80, ei81 } (35)

{ ei75 ei74 ei73, ei76 t9 , ei81 ei80, ei81 t10 } (36)

5 Conclusion

An efficient refinement was given for the superposition operation using an approach which interleaves
generation with testing of valid strings, and a method was described for increasing the expressiveness of
temporal strings to allow for some level of partial information based on semi-intervals.

There is still further experimentation to be done on how exactly to best handle cases with incomplete
data, especially in large documents. Derczynski (2016) notes that a careful balance is needed between
being exact in distinguishing relations, and not letting the set of relations available become too large.
The question of precisely what to do when the result of a superposition cannot be condensed to a single
string needs to be answered, and whether to allow for branching timelines in cases of non-determinism.
Tooling is also in development to demonstrate the uses of the strings, in particular as a visualisation aid
which may complement existing tools for the annotation process.

Acknowledgements

This research is supported by Science Foundation Ireland (SFI) through the CNGL Programme (Grant
12/CE/I2267) in the ADAPT Centre (https://www.adaptcentre.ie) at Trinity College Dublin.
The ADAPT Centre for Digital Content Technology is funded under the SFI Research Centres Pro-
gramme (Grant 13/RC/2106) and is co-funded under the European Regional Development Fund.

7Document wsj 0006.tml

85



References
James F Allen. 1983. Maintaining Knowledge About Temporal Intervals. Communications of the ACM,

26(11):832–843.

Leon Derczynski. 2016. Representation and Learning of Temporal Relations. In Proceedings of COLING 2016,
the 26th International Conference on Computational Linguistics: Technical Papers, pages 1937–1948.

Tim Fernando. 2015. The Semantics of Tense and Aspect: A Finite-State Perspective. In S Lappin and C Fox,
editors, The Handbook of Contemporary Semantic Theory, number August, pages 203–236. John Wiley & Sons.

Tim Fernando. 2016. On Regular Languages Over Power Sets. Journal of Language Modelling, 4(1):29–56.

Christian Freksa. 1992. Temporal Reasoning Based on Semi-Intervals. Artificial Intelligence, 54:199–227.

Leonid Libkin. 2004. Monadic Second-Order Logic and Automata. In Elements of Finite Model Theory, pages
113–140. Springer Berlin Heidelberg, Berlin, Heidelberg.

James Pustejovsky, Inderjeet Mani, Luc Belanger, Linda van Guilder, Robert Knippen, Andrew See, Jon Schwarz,
and Marc Verhagen. 2003. Tango final report. In ARDA Summer Workshop on Graphical Annotation Toolkit
for TimeML, MITRE Bedford and Brandeis University.

James Pustejovsky, Marc Verhagen, Roser Sauri, Jessica Littman, Robert Gaizauskas, Graham Katz, Inderjeet
Mani, Robert Knippen, and Andrea Setzer. 2006. TimeBank 1.2 LDC2006T08. Web Download: https:
//catalog.ldc.upenn.edu/LDC2006T08. Philadelphia: Linguistic Data Consortium.

James Pustejovsky, Kiyong Lee, Harry Bunt, and Laurent Romary. 2010. ISO-TimeML: An International Standard
for Semantic Annotation. In LREC, volume 10, pages 394–397.

TimeML Working Group. 2005. TimeML 1.2.1. A Formal Specification Language for Events and Temporal
Expressions. http://www.timeml.org/publications/timeMLdocs/timeml_1.2.1.html#
tlink.

Marc Verhagen, Robert Knippen, Inderjeet Mani, and James Pustejovsky. 2006. Annotation of Temporal Relations
with Tango. Proceedings of the 5th Languange Resources and Evaluation Confernece (LREC 2006), (May
2014):2249–2252.

Marc Verhagen. 2005a. Drawing TimeML Relations with T-BOX. In Graham Katz, James Pustejovsky, and Frank
Schilder, editors, Annotating, Extracting and Reasoning about Time and Events, number 05151 in Dagstuhl
Seminar Proceedings, Dagstuhl, Germany. Internationales Begegnungs und Forschungszentrum für Informatik
(IBFI), Schloss Dagstuhl, Germany.

Marc Verhagen. 2005b. Temporal closure in an annotation environment. Language Resources and Evaluation,
39(2-3):211–241.

David Woods, Tim Fernando, and Carl Vogel. 2017. Towards Efficient String Processing of Annotated Events.
In Proceedings of the 13th Joint ISO-ACL Workshop on Interoperable Semantic Annotation (ISA-13), pages
124–133.

86


	W18-47-2018 81
	W18-47-2018 82
	W18-47-2018 83
	W18-47-2018 84
	W18-47-2018 85
	W18-47-2018 86
	W18-47-2018 87
	W18-47-2018 88
	W18-47-2018 89
	W18-47-2018 90
	W18-47-2018 91

