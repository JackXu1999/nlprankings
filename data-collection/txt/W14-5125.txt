



















































Proceedings of the...


D S Sharma, R Sangal and J D Pawar. Proc. of the 11th Intl. Conference on Natural Language Processing, pages 156–161,
Goa, India. December 2014. c©2014 NLP Association of India (NLPAI)

A Sandhi Splitter for Malayalam

Devadath V V Litton J Kurisinkel Dipti Misra Sharma Vasudeva Varma
Language Technology Research Centre

International Institute of Information Technology - Hyderabad, India.
{devadathv.v,litton.jkurisinkel}@research.iiit.ac.in,{dipti,vasu}@iiit.ac.in

Abstract

Sandhi splitting is the primary task for
computational processing of text in San-
skrit and Dravidian languages. In these
languages, words can join together with
morpho-phonemic changes at the point of
joining. This phenomenon is known as
Sandhi. Sandhi splitter splits the string
of conjoined words into individual words.
Accurate execution of sandhi splitting is
crucial for text processing tasks such as
POS tagging, topic modelling and doc-
ument indexing. We have tried differ-
ent approaches to address the challenges
of sandhi splitting in Malayalam, and fi-
nally, we have thought of exploiting the
phonological changes that take place in the
words while joining. This resulted in a hy-
brid method which statistically identifies
the split points and splits using predefined
character level linguistic rules. Currently,
our system gives an accuracy of 91.1% .

1 Introduction

Malayalam is one among the four main Dravidian
languages and 22 official languages of India. It
is spoken in the State of Kerala, which is situated
in the south west coast of India . This language
is believed to be originated from old Tamil, hav-
ing a strong influence of Sanskrit in its vocabulary.
Malayalam is an inflectionally rich and agglutina-
tive language like any other Dravidian language.
The property of agglutination eventually leads to
the process of sandhi.

Sandhi is the process of joining two words
or characters, where morphophonemic changes

occur at the point of joining. The presence of
Sandhi is abundant in Sanskrit and all Dravidian
languages. When compared to other Dravidian
languages, the presence of Sandhi is relatively
high in Malayalam. Even a full sentence may
exist as a single string due to the process of
Sandhi. For example, Ae\ncnWmm (avanaaraaN)
is a sentence in Malayalam which means “Who
is he ?”. It is composed of 3 independent words,
namely Ae°(avan (he)), Bcm(aar(who)) and
BWmm (aaN(is)). However, ambiguous splits for
a word is very less in Malayalam. Sandhis are
of two types, Internal and External. Internal
Sandhi exists between a root or a stem with a
suffix or a morpheme. In the example given below,

]l(para) + Dè(unnu) = ]lÆè(parayunnu)

Here ]l(para) is a verb root with the mean-
ing “to say” and Dè(unnu) is an inflectional
suffix for marking present tense. They join
together to form ]lÆè(parayunnu), meaning
“say”(PRES). External sandhi is between words.
Two or more words join to form a single string of
conjoined words.

tNåw(ceyyuM)+F¹o²(enkil) = tNåta¹o²
(ceyyumenkil)

tNåw(ceyyuM) is a finite verb with the meaning
“will do” and F¹o²(enkil) is a connective with
meaning “if”. They join together to form a single
string tNåta¹o²(ceyyumenkil).

For most of the text processing tasks such as
POS tagging, topic modelling and document in-
dexing, External Sandhi is a matter of concern. All
these tasks require individual words in the text to156



be identified. The identification of words becomes
complex when words are joined to form a single
string with morpho-phonemic changes at the point
of joining. More over, the sandhi can happen be-
tween any linguistic classes like, a noun and a
verb, or a verb and a connective etc. This leads to
misidentification of classes of words by POS tag-
ger which eventually affects parsing. Sandhi acts
as a bottle-neck for all term distribution based ap-
proaches for any NLP and IR task.

Sandhi splitting is the process of splitting a
string of conjoined words into a sequence of in-
dividual words, where each word in the sequence
has the capacity to stand alone as a single word. To
be precise, Sandhi splitting facilitates the task of
individual word identification within such a string
of conjoined words.

Sandhi splitting is a different type of word
segmentation problem. Languages like Chinese
(Badino, 2004), Vietnamese (Dinh et al., 2008)
Japanese, do not mark the word boundaries ex-
plicitly. Highly agglutinative language like Turk-
ish(Oflazer et al., 1994) also need word segmenta-
tion for text processing. In these languages, words
are just concatenated without any kind of morpho-
phonemic change at the point of joining, whereas
morpho-phonemic changes occur in Sanskrit and
Dravidian languages at the point of joining (Mit-
tal, 2010).

2 Related works

Mittal (2010) adopted a method for Sandhi
splitting in Sanskrit using the concept of optimal-
ity theory(Prince and Smolensky, 2008), in such
a way that it generates all possible splits and vali-
dates each split using a morph analyser. In another
work, statistical methods like Gibbs Sampling and
Dirichlet Process are adopted for Sanskrit Sandhi
splitting (Natarajan and Charniak, 2011).

To the best of our knowledge, only two related
works are reported for the task of Sandhi splitting
in Malayalam. Rule based compound word split-
ter for Malayalam (Nair and Peter, 2011), goes in
the direction of identifying morphemes using rules
and trie data structure. They adopted a general ap-
proach to split both external and internal sandhi
which includes compound words. But splitting a
compound word which is conceptually united will

lead to the loss of linguistic meaning. In an other
work (Das et al., 2012), which is a hybrid ap-
proach for sandhi splitting in Malayalam, employs
a TnT tagger to tag whether the input string to be
split or not and splits according to a predefined set
of rules. But this particular work does not report
any empirical results. In our approach, we identify
precisely the point to be split in the string using
statistical methods and then applies predefined set
of character level rules to split the string.

3 Our Approach

We have tried various approaches for sandhi split-
ting and finally arrived at a hybrid approach which
decides the split points statistically and then splits
the string in to words by applying pre-defined
character level sandhi rules.

Sandhi rules for external sandhi, are identi-
fied from a corpus of 400 sentences from Malay-
alam literature, which includes text from old liter-
ature(texts before 1990) as well as modern litera-
ture. In comparison with text from old literatures,
modern literature have very less use of sandhi. By
analysing the text, we were able to identify 5 un-
ambiguous character level rules which can be used
to split the word, once the split point is statistically
identified. Sandhi rules identified are listed in the
Table 1.

R Rule Example

1 (CSC)Vs =
(CSC)S + V

en·oÈ = en·m+CÈ
word(Noun)+no(verb)

2 (b/e)Vs = V
u]SobnWm = u]So+BWm

fear(Noun) + is(verb)

3 aVs = w +V
]WaoÈ = ]Ww+CÈ
money(Noun) + no(verb)

4 (c/d/j/\/W)Vs =
(±/²/³/°/®) + V

®IjodnWm = ®Ijo²+BWm
above(Loc)+is(verb)

5 CVs =
(CS) + V

BtWÁm = BWm+FÁm
is(verb)+that(quotative)

6 just split Ae°eè = Ae°+ eèHe(Noun)+Came(verb)
C=Consonant, V =Vowel, Vs=Vowel symbol, S=Schwa

Table 1: Sandhi rules

Rules in Table 1 are given in a particular or-
der corresponding to their inherent priority which
avoids any clash between them. Every character
level Sandhi rule is based on a consonant and a
vowel. Rule 5 is the most general rule for Sandhi
that we could identify in Malayalam which states
that a group of a consonant and a vowel can be157



split into a consonant and a vowel. Rule 1 is a
special case of Rule 5, which is framed in order
to treat the special case of compound of conso-
nants with a schwa in between. This rule is be-
ing introduced , because the consonants specified
in rules 2, 3 and 4 can come as the last con-
sonant in the case of a compound of consonants.
This will lead to an improper split of the string
by any of the rules 2, 3 or 4. So every word,
with an identified split point should be primarily
checked against rule 1 to avoid wrong split by
other rules in the case of a sandhi containing a
compound of consonants. Rule 2 is to handle the
process of phonemic insertion came after the pro-
cess of Sandhi. In Malayalam, these extra char-
acters b/e can be inserted between words after
sandhi in certain context. Rule 3 and Rule 4 are
to handle the case of phonemic variation caused
due to the process of Sandhi. Rule 3 enforces that,
the letter ‘a’ with a vowel symbol becomes ‘w’ and
a vowel, while Rule 4 enforces that, the charac-
ters, ‘c/d/j/\/W’ with a vowel symbol becomes
chillu1, ‘±/²/³/°/®’ and a vowel.

The hybrid approach utilises the phonological
changes (Klein et al., 2003) due to the presence of
sandhi. The remaining part of the paper explains
this approach in detail, with theoretical formula-
tion, Experimental Results and Error analysis.

When the words are conjoined, they undergo
phonological changes at the point of joining.
These phonological changes can be evidential in
identifying the split point in the given string of
conjoined words. For example, words Wx and yZ
are conjoined to form a new string Wx

′
y
′
Z. As

a part of this process, substring x in the original
string Wx has undergone a phonological change
to become x

′
and the substring y in the original

string yZ has undergone a phonological change to
become y

′
. We try to identify the split point be-

tween x
′

and y
′

in Wx
′
y
′
Z using x

′
and y

′
as the

evidence. Going forward, we use ”Sp” to denote
Split Point and ”Nsp” to denote Non Split Point.
P (Sp|x′ , y′) will give the probability of a char-
acter point between x

′
and y

′
within a conjoined

string to be a split point. A character point will be
classified as split point if,

P (Sp|x
′
, y

′
) > P (Nsp|x

′
, y

′
) (1)

1A chillu is a pure consonant which can stand alone inde-
pendently without the help of vowels

As per our observation, the phonological changes
of x to x

′
and of y to y

′
are independent of each

other. So,

P (Sp|x
′
, y

′
) = P (Sp|x

′
) ∗ P (Sp|y

′
) (2)

To produce the values of x
′

and y
′

for each char-
acter point, we take k character points backwards
and k character points forward from that particular
point. For example, the probability of the marked
point PointX in the string given in the Figure 1
below to be a split point is given by equation (3)

Figure 1: Split point

P (Sp|a1a2...ak) ∗ P (Sp|b1b2...bk) (3)

Where a1a2...ak is x
′

and b1b2...bk is y
′
. The

value of k is experimentally optimized.

The split points of different agglutinated strings
in training data are annotated in the following
format.

WordN = i1, i2, i3, ...iz

This indicates that the string WordN needs to
be splitted at “z” character indexes i1, i2, i3, ...iz
within the string.

We employ two Orthographic Tries (Whitelaw
and Patrick, 2003) to statistically capture the
phonological differences in x

′
and y

′
for split

points and non-split points. A mould of ortho-
graphic tries used is given in Figure 2. The trie
in Figure 2 is trained with character sequences
c1c2c3, c1c2c4, c1c3c4, c1c3c5. In the first trie,
the path from root to k nodes represents the string
a1a2...ak. Each node i(1 ≤ i ≤ k) in the path
stores the number of occurrences of split points
and non-split points in the entire training data
which are preceded by aiai−1...a1. In the sec-
ond trie, a path from root to k nodes represent158



Figure 2: Word trie

the string b1b2...bk. Each node i(1 ≤ i ≤ k) in
the path stores the number of occurrences of split-
points and non-split points which are succeeded
by b1b2...bi. The frequencies stored in these trie
nodes are used to calculate P (C|a1a2...ak) and
P (C|b1b2...bk) where C is Sp or Nsp.

As split points are rare within a string
P (C|a1a2...ak) and P (C|b1b2...bk) needs to be
smoothed. For this purpose, we use the infor-
mation stored along the depth of the tries for the
strings a1a2...ak and b1b2...bk as follows

P (C|a1a2...ak) =
k∑

i=initial skip

P (C|aiai+1...ak) (4)

P (C|b1b2...bk) =
k∑

i=initial skip

P (C|bibi+1...bk) (5)

Here the initial-skip decides optimum ’smooth-
ing range’ within the string.The value of initial-
skip decides the threshold phonological similarity
that needs to be considered while smoothing. The
experimental optimisation of initial-skip is done.
The identified split points are splitted using the ap-
plicable sandhi rules.

4 Data and Results

Data Set

We created a dataset which contained 2000 Sandhi
bound words for training. Each of the split point

within the word are annotated with the within-
word index of the corresponding character point.
The test data contains 1000 random words, out of
which 260 are words with sandhi.

Results

In our experiments, we tried evaluating the accu-
racy of split point identification, split accuracy of
different sandhi rules and overall accuracy of the
system. By overall accuracy, we mean percentage
of the words with sandhi in which the split is ex-
actly as expected. We have conducted experiments
on split point identification with different values of
k and initial Skip.

k-S P R F Accuracy
3-1 85.37 75 79.85 89.6
3-2 84.73 73.26 78.58 88.7
4-1 86.56 76.04 80.96 90.1
4-2 85.48 73.61 79.10 89
5-1 88.37 79.16 83.51 90.9
5-2 85.94 74.30 79.30 88.7
6-1 88.50 80.20 84.15 91.1
6-2 85.59 76.38 80.88 89.2

Table 2: Results

Here P implies precision, R implies Recall, F
implies F-measure and k-S implies k and Initial
skip respectively. k=6 and initial Skip=1 have
shown the better result. As per our observation,
phonological changes as a part of sandhi would not
happen beyond a range of six characters in each of
the participating words. So the upper bound for k
value is taken as 6.

5 Error Analysis

In Split point identification, most of the incorrectly
identified split points are character points between
a word and inflectional suffix attached to it. As
the system evolve, this error can be rectified by
the use of a post-processor which maintains the
finite list of inflectional suffixes in the language.
Wrong splits in the middle of an actual word are
very few in number and will reduce as the size of
the training data increases.

Most of the unidentified split points are due to
the presence of certain rare patterns. These errors
will be reduced with the incorporation of words
from diverse texts in the training data.159



When it comes to rules, we have used only char-
acter level rules for splitting the identified split
points. Rule 1,4 and 5 go ambiguous at certain
rare contexts. To resolve this, certain word level
information like POS tags are required. But for
an accurate POS tagging, particularly for this dis-
ambiguation purpose, a sandhi splitter with a good
level of accuracy is inevitable. Our Sandhi splitter
can contribute for a better POS tagger. Vice versa,
a POS tagger can complement the Sandhi splitter.

Rule Accuracy
1 92.10
2 96.29
3 100
4 80.64
5 87.71

Table 3: Rule accuracy when k=6 and S= 1

6 Conclusion & Future work

This experiment has given us a new insight that,
there exists a character level pattern in the text
where the sandhi can be splitted. When com-
pared to a completely rule based approach which
is effort intensive, a hybrid approach gives us a
more fast and accurate performance with relatively
lesser amount of training data. We expect that,
this method can be successfully implemented in
all other Dravidian languages for the Sandhi split-
ting. The only language dependent part will be to
split the identified split points using language spe-
cific character level rules. The system component
to split the identified split points can be decided
at runtime based on the language on which it is
operating on.

There is a possibility of improving the cur-
rent system into a language independent and fully
statistical system. Instead of totally depending
on language specific Sandhi rules for splitting,
phonological changes after split can be inferred
from training data. For Example,

Wx
′
y
′
Z ⇒Wx+ yZ

P (x|x′) and P (y|y′) can be tabulated to predict
the phonological changes after split. But an accu-
rate tabulation demands a large amount of anno-
tated training data.

Software

The source code of our Hybrid Sandhi
splitter for Malayalam is available at
https://github.com/Devadath/
Malayalam_Sandhi_Splitter

References

[Badino2004] Leonardo Badino. 2004. Chinese
text word-segmentation considering semantic links
among sentences. In INTERSPEECH.

[Das et al.2012] Divya Das, Radhika K T, Rajeev R R,
and Raghu Raj. 2012. Hybrid sandhi-splitter for
malayalam using unicode. In In proceedings of Na-
tional Seminar on Relevance of Malayalam in Infor-
mation Technology.

[Dinh et al.2008] Quang Thang Dinh, Hong Phuong Le,
Thi Minh Huyen Nguyen, Cam Tu Nguyen, Math-
ias Rossignol, Xuan Luong Vu, et al. 2008. Word
segmentation of vietnamese texts: a comparison of
approaches. In 6th international conference on Lan-
guage Resources and Evaluation-LREC 2008.

[Klein et al.2003] Dan Klein, Joseph Smarr, Huy
Nguyen, and Christopher D Manning. 2003.
Named entity recognition with character-level mod-
els. In Proceedings of the seventh conference on
Natural language learning at HLT-NAACL 2003-
Volume 4, pages 180–183. Association for Compu-
tational Linguistics.

[Mittal2010] Vipul Mittal. 2010. Automatic sanskrit
segmentizer using finite state transducers. In Pro-
ceedings of the ACL 2010 Student Research Work-
shop, pages 85–90. Association for Computational
Linguistics.

[Nair and Peter2011] Latha R Nair and S David Peter.
2011. Development of a rule based learning sys-
tem for splitting compound words in malayalam lan-
guage. In Recent Advances in Intelligent Computa-
tional Systems (RAICS), 2011 IEEE, pages 751–755.
IEEE.

[Natarajan and Charniak2011] Abhiram Natarajan and
Eugene Charniak. 2011. S3-statistical sam. dhi
splitting.

[Oflazer et al.1994] Kemal Oflazer, Elvan Göçmen, El-
van Gocmen, and Cem Bozsahin. 1994. An outline
of turkish morphology.

[Prince and Smolensky2008] Alan Prince and Paul
Smolensky. 2008. Optimality Theory: Constraint
interaction in generative grammar. John Wiley &
Sons.

[Whitelaw and Patrick2003] Casey Whitelaw and Jon
Patrick. 2003. Named entity recognition using a160



character-based probabilistic approach. In Proceed-
ings of the seventh conference on Natural language
learning at HLT-NAACL 2003-Volume 4, pages 196–
199. Association for Computational Linguistics.

161


