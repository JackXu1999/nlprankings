



















































Single-Rooted DAGs in Regular DAG Languages: Parikh Image and Path Languages


Proceedings of the 13th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+13), pages 94–101,
Umeå, Sweden, September 4–6, 2017. c© 2017 Association for Computational Linguistics

Single-Rooted DAGs in Regular DAG Languages:
Parikh Image and Path Languages

Martin Berglund
Center for AI Research, CSIR
Dept. of Information Science

Stellenbosch University
pmberglund@sun.ac.za

Henrik Björklund
Dept. of Computing Science
Umeå University, Sweden
henrikb@cs.umu.se

Frank Drewes
Dept. of Computing Science
Umeå University, Sweden
drewes@cs.umu.se

Abstract

In a recent survey (Drewes, 2017) of re-
sults on DAG automata some open prob-
lems are formulated for the case where
the DAG language accepted by a DAG au-
tomaton A is restricted to DAGs with a
single root, denoted by L(A)u. Here we
consider each of those problems, demon-
strating that: (i) the finiteness of L(A)u
is decidable, (ii) the path languages of
L(A)u can be characterized in terms of
the string languages accepted by partially
blind multicounter automata, and (iii) the
Parikh image of L(A)u is semilinear.

1 Introduction

In many applications such as natural language pro-
cessing (NLP) great value can be extracted from
extending beyond the strings and trees which are
most commonly offered by traditional language
formalisms. In the other direction, however, mov-
ing to general graphs is a step too far for many
NLP tasks, and directed acyclic graphs form a nat-
ural step between trees and general graphs, en-
forcing the hierarchical nature of sentences. For
these reasons, the study of DAG automata, devices
which accept a class of languages known as the
regular DAG languages, have drawn some interest,
see for example Blum and Drewes (2017); Chiang
et al. (2016). (Here, we only consider the ordered
case, but this makes no practical difference to the
results we present, which apply equally to the un-
ordered case.) In a recent survey (Drewes, 2017)
the distinction between DAG automata which per-
mit multiple roots (which is more natural in the
way the formalism is defined) and ones restricted
to a single root (which is natural from the perspec-
tive of many NLP applications) is considered at
some length. The latter case is, somewhat surpris-

ingly, significantly stronger, and the survey states
four open questions relating to it. We consider all
these questions here, with the following outcomes:

Problem 1. Given a DAG automatonA as input,
is the problem of deciding whether L(A)u is finite
decidable? We demonstrate that it is.

Problem 2. Is there a natural characterization of
the path languages of the regular DAG languages
restricted to a single root? We relate, in both di-
rections, this class of languages to the string lan-
guages accepted by partially blind multicounter
automata (a formalism akin to a string-accepting
Petri net). The only caveat preventing a full
equivalence is that a single-rooted DAG automa-
ton simulating a multicounter automaton will con-
tain some extraneous strings, which are, however,
clearly labeled by an additional alphabet symbol.

Problem 3. This is a variation on Problem 2,
asking for a characterization of the path languages
of regular DAG languages intersected with regu-
lar languages. Intersection with a suitably cho-
sen regular language makes the language equiv-
alence with multicounter automata direct. In fact,
as noted above, an intersection with a language of
the form Σ∗ is already sufficient to achieve this.

Problem 4. Are the Parikh images (see
e.g. (Parikh, 1961)) of L(A) and L(A)u semilin-
ear for all DAG automata A? We demonstrate that
they are.

These results provide further theoretical ev-
idence for the claim by Chiang et al. (2016)
and Drewes (2017) that the regular DAG lan-
guages exhibit an appropriate level of complexity
for the formalization of linguistically reasonable
sets of Abstract Meaning Representations (Ba-
narescu et al., 2013) and that it, in particular, is not
advisable to consider languages of the form Lu in-
stead. It was already known (Blum and Drewes,

94



2017; Chiang et al., 2016) that the path languages
of regular DAG languages have the desired prop-
erty of being regular. Thanks to the results of this
paper, we now also know that their Parikh im-
ages are semilinear, which is another highly desir-
able property. Moreover, while it was concluded
in the above-mentioned papers that the single-root
restriction yields too powerful path languages, we
can now precisely characterize how powerful they
actually are.

2 Preliminaries

For n ∈ N, we write [n] for the set {1, . . . , n}. For
a vector I ∈ Nn, we write Ii for the ith element
of I . The empty string is denoted ε. If f is an is
a function from set S to set T , we extend it to fi-
nite sequences in S∗ by letting f(s1s2 · · · sn) =
f(s1)f(s2) · · · f(sn). Given a string language
L ⊆ S∗ (or a regular expression denoting such
a language) we let Lε denote L ∪ {ε}.

Given two strings u and v over alphabet Σ, the
shuffle of u and v, written u � v, is the set of all
interleavings of u and v. We define the shuffle in-
ductively. The base case is ε� u = u� ε = {u},
for every string u ∈ Σ∗. If u = au′ and v = bv′,
with a, b ∈ Σ, then u� v = a(u′� v)∪ b(u� v′).
For languages L1 and L2 we have L1 � L2 =
{u � v | u ∈ L1 ∧ v ∈ L2}. The shuffle
closure of a language L, written L�, is the set
of interleavings of zero or more strings from L,
i.e., L� =

⋃∞
i=0 L

�i , where L�0 = {ε} and
L�i+1 = L� L�i .

The graphs we are interested in here are di-
rected, node-labeled, and ordered, in the sense that
for each node, there is an order on the incoming
and on the outgoing edges from the node. We for-
mally define them as follows.

Definition 1. Let Σ be an alphabet. A graph over
Σ is a tuple G = (V,E, in, out , lab), where V
and E are the sets of nodes and edges, respec-
tively, in : V → E∗ and out : V → E∗ assign
incoming and outgoing edges to the nodes, and
lab : V → Σ assigns labels to the nodes. An edge
goes from precisely one node to precisely one, that
is, |in−1(e)| = |out−1(e)| = 1 for all e ∈ E.

A (directed) path in such a graph is a sequence
v0e1v1e2 · · · vn such that, for each i ∈ [n], ei
points from vi−1 to vi, i.e., it occurs in both
out(vi−1) and in(vi). Such a path is a cycle if
v0 = vn and n > 0. A graph is a DAG (directed
acyclic graph) if it has no cycles.

We next give the definition, taken from (Blum
and Drewes, 2017; Chiang et al., 2016), of the au-
tomata on DAGs that interest us.

Definition 2. A DAG-automaton is a structure
A = (Q,Σ, R), where Q is a finite set of states, Σ
is an alphabet, and R is a finite set of rules. Each
rule in R has the form α σ←→ β, where α, β ∈ Q∗
and σ ∈ Σ.

For a DAG G = (V,E, in, out , lab) over Σ a
run of the automaton A = (Q,Σ, R) on G is an
assignment ρ : E → Q of states to the edges of G
such that

ρ(in(v))
lab(v)←−−→ ρ(out(v)) ∈ R

for every node v ∈ V . A DAG G is accepted by
A if there is a run of A on G. The language con-
sisting of all connected DAGs that are accepted (or
recognized) byA is denoted byL(A). A DAG lan-
guage that can be recognized by a DAG automaton
is called a regular DAG language.

Note that we include only connected DAGs in
L(A). Thus, in the following we implicitly as-
sume that all DAGs we consider are connected.
This is reasonable because a DAG is accepted by
A if and only if all its connected components are;
for details, see (Drewes, 2017).

A node in a DAG is a root if it has no incoming
edges. Given a DAG language L, we write Lu for
the set of all graphs in L that are single-rooted,
i.e., that have exactly one root. A node is a leaf if
it has no outgoing edges.

Definition 3. A partially blind multicounter au-
tomaton is a machined defined by a tuple M =
(Q,Σ,m, δ, q0, F ) where, as in ordinary (non-
deterministic) finite-state automata, Q is the finite
set of states, Σ is the input alphabet, q0 ∈ Q is the
initial state, and F ⊆ Q is the set of final states.
Furthermore, m ∈ N is the number of counters,
and δ ⊆ (Q× Σε × Nm × Nm ×Q) is the transi-
tion relation.

The counters are numbered from 1 to m and
take values from N. The automaton starts read-
ing a string in state q0 and with all counters
set to 0. When the automaton makes a transi-
tion (p, σ,D, I, q), the vector D is first subtracted
from the counter values. If this results in some
counter having a negative value, the transition and
the computation fail (i.e. the transition cannot be
taken). Otherwise, I is added to the counters, σ is
read, and the automaton changes state to q.

95



The automaton accepts w ∈ Σ∗ if, after read-
ing the string, it can reach a configuration with an
accepting state and all counters set to 0. In this
case, w belongs to the language L(M) accepted
(or recognized) by M .

Note that there is no explicit zero-testing dur-
ing the computation, only at the end. This
is the “partial blindness”. As a consequence,
the automata, as opposed to 2-counter automata
with zero tests, are not Turing complete. In-
stead, they can be seen as string-accepting vec-
tor addition systems with states (VASS) or Petri
nets (Greibach, 1978). Among other things, this
means that the emptiness problem is decidable for
these machines (Kosaraju, 1982; Mayr, 1984).

Since we are only interested in partially blind
multicounter automata here, we will simply refer
to them as multicounter automata.

3 Semilinearity and finiteness

Let Σ be an alphabet and let σ1, σ2, . . . , σn be an
(arbitrary) ordering of its elements. If s is a string
over Σ, the Parikh image of s is a vector ψ(s) such
that ψ(s)i is the number of occurrences of σi in s
for every i ∈ [n]. Similarly, for a DAG G, ψ(G)i
is the number of occurrences of σi as the label of
a node in G. For a language L, over strings or
graphs, ψ(L) is the set {ψ(s) | s ∈ L}.

A subset X of Nn is linear if there are vectors
v0, v1, . . . , vn such that

X = {v0 + i1v1 + · · · invn | i1, . . . , in ∈ N}.

A subset of Nn is semilinear if it is the union of a
finite number of linear sets. In the following, we
are going to use the fact that the semilinear sets
are effectively closed under intersection and pro-
jection to a subset of their dimensions. The former
fact was proved by Ginsburg and Spanier (1964).
The latter is easily seen from the definition of lin-
ear and semilinear sets.

Theorem 1. For every regular DAG language L,
the set ψ(L) is semilinear.

Proof. Let A = (Q,Σ, R) be a DAG automaton
such that L(A) = L. Let G = (V,E, in, out , lab)
be a DAG in L and let ρ : E → Q be a run of
A on G. We describe a kind of linearization of
such a run in the form of a string over the alphabet
Γ = Σ ∪Q ∪Q, where Q = {q | q ∈ Q}. Let the
sequence t = v1, v2, . . . , vn be a topological sort-
ing of the nodes in G. For each node vi ∈ V we

define inρ(vi) to be the sequence ρ(in(vi)), i.e.,
the sequence of states assigned to the incoming
edges of vi by ρ, but with each state replaced by
its counterpart in Q. Similarly, let outρ(vi) be the
sequence ρ(out(vi)), i.e., the sequence of states
assigned to the outgoing edges from vi by ρ. Then
linG,ρ,t, the linearization of ρ on G (with respect
to t) is given by linG,ρ,t = w1 · · ·wn where

wi = inρ(vi)lab(vi)outρ(vi)

for all i ∈ [n]. For each rule r = α σ←→
β, let string(r) = ασβ and let string(R) =
{string(r) | r ∈ R}. Then, for every DAG
G ∈ L, topological sorting t of VG, and run ρ of
A on G, the string linG,ρ,t belongs to the regular
language rA = string(R)∗.

Not every string in rA is a linearization of a run
of A on some DAG. We need to make sure that
every state on an outgoing edge (represented by
an element of Q) is matched by the same state on
an incoming edge (represented by an element of
Q) and vice versa. For example, in the substring
inρ(v1)lab(v1)outρ(v1) of linG,ρ,t, we must have
that inρ(v1) = ε, since v1 must be a root of G and
thus has no incoming edges. Let rQ be the lan-
guage {qq | q ∈ Q} ∪ Σ. Then r�Q is the language
over Γ such that for every q ∈ Q and w ∈ r�Q,
q and q appear the same number of times in w
and every prefix of w contains at least as many
instances of q as of q.

We now argue that a string belongs to the lan-
guage rA ∩ r�Q if and only if it is a linearization
of a run of A on some DAG. Consider a string
w = α1 · · ·αn ∈ Γ∗. Let O = {i ∈ [n] | αi ∈ Q}
and I = {i ∈ [n] | αi ∈ Q}. Then w ∈ r�Q if
and only if there exists a matching, i.e., a bijection
µ : O → I such that µ(i) > i and αµ(i) = αi for
all i ∈ O. This can be shown by a straightforward
induction on n. With this in hand, for the “if” di-
rection, a linearization will be in rA by construc-
tion, and to demonstrate it is also in r�Q a valid µ
can be constructed along the edges of the DAG, as
follows. By the definition of linG,ρ,t, if the topo-
logical sorting t of V is v1, . . . , vm, then w =
w1 · · ·wm where wj = inρ(vj)lab(vj)outρ(vj).
Thus, every edge e ∈ E leading from v` to v`′
gives rise to an occurrence of ρ(e) in w` and a cor-
responding occurrence of ρ(e) in w`′ . Let i ∈ O
and i′ ∈ I be the positions of these two occur-
rences in w, and define µ(i) = i′. Since `′ > `
we have i′ > i, which means that µ is a match-

96



ing because it is bijective by construction, and
αµ(i) = αi′ = ρ(e) = αi.

For the “only if” direction one can similarly
pick a matching µ (which exists as the string is in
r�Q), and use the related positions as edges (each
rule position forming one vertex), which produces
a graph in L. More precisely, note first that w =
α1 · · ·αn ∈ rA can uniquely be decomposed into
w = w1 · · ·wm such that wj ∈ string(R) for
all j ∈ [m]. Define V = {v1, . . . , vm} and let
lab(vj) be the label in wj , for j ∈ [m]. To de-
fine the edges, assume in addition that w ∈ r�Q
and let µ : O → I be a corresponding matching.
Then we define E = {ei | i ∈ O}. Moreover, if
wj = p1 · · · prσq1 · · · qs, c = |w1 · · ·wj−1|, and
d = |w1 · · ·wj |, then

out(vj) = ed−s · · · ed−1
in(vj) = eµ−1(c+1) · · · eµ−1(c+r).

Since µ(i) > i for all i ∈ O, this defines a DAG,
and by construction defining ρ(ei) = αi for all i ∈
O yields a run of A on G = (V,E, in, out , lab).

The next step is to note that ψ(rA ∩ r�Q) is
a semilinear set. We know that rA is regular
and thus that ψ(rA) is semilinear (Parikh, 1961).
Also, r∗Q is regular and ψ(r

�
Q) = ψ(r

∗
Q), which

shows that ψ(r�Q) is semilinear. This means that
ψ(rA ∩ r�Q) is semilinear since the semilinear sets
are closed under intersection.

Finally, to complete the proof, since the semi-
linear sets are closed under projection to any sub-
set of their dimensions, ψ(L), which is the pro-
jection of ψ(rA ∩ r�Q) onto the dimensions which
correspond to Σ, is semilinear.

The following corollary is obtained by com-
bining the above with an observation in (Drewes,
2017) that states that ψ(Lu) is semilinear when-
ever ψ(L) is.

Corollary 1. For every regular DAG language L,
the set ψ(Lu) is semilinear.

The semilinearity of the Parikh image also gives
us the following decidability result.

Corollary 2. Given a DAG automaton A, it is de-
cidable whether L(A)u is finite.
Proof. Let Rroot = {(α σ←→ β) ∈ R | α = ε}
and Rnon-root = R \ Rroot. By replacing the reg-
ular language rA in the proof of Theorem 1 by
RrootR

∗
non-root one ensures that only runs on DAGs

with exactly one root are considered. Since both

intersection and projection are effective for semi-
linear sets, this gives us a way of effectively con-
structing the set ψ(L(A)u). Since finiteness for
semilinear sets is trivially decidable, the indicated
result follows directly.

4 Path languages

As seen in the proof of Theorem 1 above, the
single-rooted regular DAG languages are inti-
mately connected with string languages of the
form L ∩K�, where L and K are regular. These,
in turn, are closely connected to multicounter au-
tomata, as shown by the following result, essen-
tially due to Gisher (1981), explicitly stated, e.g.,
in (Björklund and Bojańczyk, 2007).

Theorem 2. The following language classes are
equal, modulo morphisms.

1. Languages recognized by multicounter au-
tomata.

2. Languages of the form L∩K�, where L and
K are regular.

The statement remains valid if the language K is
required to be finite.

To be precise, every language in class 2 also be-
longs to class 1 and every language in class 1 is
the morphic image of a language in class 2. When
representing the language of a multicounter au-
tomaton as a language from class 2, we sometimes
need to include some bookkeeping that represents
the counter configurations. This bookkeeping can
then be erased by a morphism.

Example 1. Consider the multicounter automaton
at the top of Figure 1. The automaton has two
counters. When the symbol ( is read, counter one
is increased by one. When [ is read, counter two is
increased by one. Conversely, when the symbol )
or ] is read, the respective counter is decreased by
one. If there were only one state, and only these
transitions, the automaton would accept the shuf-
fle of the Dyck language over ( and ) and the Dyck
language over [ and ]. The final �-transition, how-
ever, first decreases counter two by one and then
increases it by one, in effect ensuring that its value
is not zero. This means that the language accepted
by the automaton is the shuffle of the two Dyck
languages, but with the restriction that an open (
can be closed by ) only if at least one [ is still open.

In order to form a language of class 2 that cap-
tures the same behavior, we introduce the four new

97



p0 p1

), 〈1, 0〉, 〈0, 0〉

ε, 〈0, 1〉, 〈0, 1〉

(, 〈0, 0〉, 〈1, 0〉
[, 〈0, 0〉, 〈0, 1〉
], 〈0, 1〉, 〈0, 0〉

p0 p1

) d1

d2 i2

( i1
[ i2
] d2

Figure 1: The multicounter automaton (with its counter operations indicated in brackets) and the corre-
sponding finite automaton from Example 1.

( [ ( ) ) ]

� �

r r r r r

p0 p0 p0

p0p1
p0p1

q1

q2

q2

q1

q2

Figure 2: An example DAG of the form recognized by so-called special DAG automata. Its main path,
consisting of the edges labeled with state r, corresponds to the input string processed by the multicounter
automaton in Figure 1. The relationship will be formalized in Definition 4 and Lemma 2 (though for
technical reasons we will require M to have dedicated initial and final states). Edges labeled with states
q1 and q2 mimic counter actions. For example, an outgoing q1 edge mimics incrementing counter 1 by 1,
whereas an incoming q1 edge decrements counter 1 by 1. The (off the main path) diamonds correspond
to uses of the ε-transition from p0 to p1.

alphabet symbols i1, i2, d1, d2, representing in-
creases and decreases to counters 1 and 2. The au-
tomaton to the right in Figure 1 reads an increase
or decrease symbol each time it reads a parenthesis
symbol. (Here, we let each transition read a string
of symbols. The automaton can easily be trans-
formed into a standard finite automaton by adding
intermediate states.) Additionally, after reading a
) with its corresponding d1, it reads first a d2 and
then an i2. Let L be the language accepted by this
finite automaton, K = {( ), [ ], i1d1, i2d2}, and h
the morphism that is the identity on the four paren-
thesis symbols while simply erasing the increase
and decrease symbols. Then h(L ∩ K�) is the
language of the original multicounter automaton.

Let us now turn to the connection between path
languages and multicounter automata. A path
v0e1v1e2 · · · vn in a DAG is a full path if v0 is a
root and vn is a leaf. The string corresponding to
a path v0e1v1e2 · · · vn is lab(v0 · · · vn). Given a
DAG G and an alphabet Σ, we write πΣ(G) for
the set of all strings in Σ∗ corresponding to full

paths in G. For a DAG language L, πΣ(L) is the
set {πΣ(G) | G ∈ L}.

As the main result of this section (stated for-
mally in Theorem 3 below), we want to prove that
the languages πΣ(L(A)u) for DAG automata A
are exactly the languages L(M)\{ε} accepted by
multicounter automata M . For this, we show first
thatA can be brought into a special form which ac-
cepts only DAGs which contain a unique “main”
path labeled with a string accepted by M , with
nodes not on this path used for bookkeeping and
corresponding to ε transitions in M . An example
graph which is consistent with this form is pre-
viewed in Figure 2.

For the remainder of this section, fix an alpha-
bet Σ, and let Σ� = Σ ∪ {�} where � is a spe-
cial symbol not in Σ. A DAG G = (V,E, in,
out , lab) over Σ� is special if it has a unique
full path with all node labels in Σ and all nodes
not on this path are labeled �. We call this path
the main path of G. Consider a DAG automa-
ton A = ({r} ∪ P ∪ Q,Σ�, R), where P ∩ Q =

98



{r} ∩ (P ∪ Q) = ∅. The DAG automaton A is
special if all rules α σ←→ β are such that either
α, β ∈ rPQ∗ ∪ {ε} and σ ∈ Σ or α, β ∈ PQ∗
and σ = �. We call rules of the former kind path-
generating rules and those of the latter kind book-
keeping rules. Note that special DAG automata
recognize languages of special DAGs. A run of
such a DAG automaton assigns state r to the edges
on the path whose nodes carry labels in Σ (the left-
most path) while all other nodes are labeled by �.
Lemma 1. Let A = (Q,Σ, R) be a DAG automa-
ton and Σ0 ⊆ Σ. Then there is a special DAG
automaton A′ such that

πΣ0(L(A)u) = πΣ(L(A′)u).

Proof. Let p, r be distinct states not in Q and de-
fine P = {p}. Let h : {r, p} ∪ Q → Q be the
homomorphism such that h(q) = q for all q ∈ Q
and h(r) = h(p) = ε. Let R′ be defined as fol-
lows: for every rule α σ←→ β in R, R′ contains
the bookkeeping rule pα �←→ pβ. If σ ∈ Σ0, then
R′ furthermore contains all path-generating rules
α′ σ←→ β′ such that h(α′) = α, and h(β′) = β. If a
bookkeeping rule obtained from α σ←→ β is applied
in a run, we say that the label � of the correspond-
ing node is a hidden σ.

By construction A′ = ({r} ∪ P ∪Q,Σ�, R′) is
special. To see that πΣ0(L(A)u) = πΣ(L(A′)u),
we consider the two inclusions. Clearly, if ρ is a
run of A′ on a special DAG G′ with πΣ(G′) =
{w}, then w ∈ Σ∗0 and by deleting all edges with
states r or p and replacing every hidden σ by σ we
obtain a run of A on a DAG G with w ∈ πΣ0(G).

For the other direction, consider a DAG G =
(V,E, in, out , lab) ∈ L(A)u with an accepting
run ρ and let v0e1v2e2 · · · vm be a full path with
lab(v0 · · · vm) ∈ Σ∗0. Let u0, . . . , un be a topolog-
ical sorting of V such that un = vm (and u0 = v0
because v0 is the unique root). We define a DAG
G′ by adding fresh edges e1, . . . , en, e′1, . . . , e

′
m as

follows:

• ei (i ∈ [n]) is added as the first outgoing edge
of ui−1 and the first incoming edge of ui, and

• afterwards, e′j (j ∈ [m]) is added as the first
outgoing edge of vj−1 and the first incoming
edge of vj .

Finally, the labels of all nodes not in {v0, . . . , vm}
are replaced by �. Now ρ can be extended to a run
ρ′ on G′ by defining ρ′(ei) = p and ρ′(e′j) = r for
all i ∈ [n], j ∈ [m].

Next, we define the notion of relatedness be-
tween a (special) DAG automaton A with states in
{r}∪P ∪Q and a multicounter automatonM with
states in P ∪{q0, qf}. Each state inQ corresponds
to a counter of M . Viewing a run of A as a top-
down computation, the counter actions of m keep
track of how many copies of each q ∈ Q there
are at the frontier of the computation. A path-
generating rule rpw σ←→ rp′w′ of A relates to a
transition of M that reads σ in state p and con-
tinues in state p′. The counter actions reflect how
many times each state in Q occurs in w and w′.
For example, the rule rpq1q3q1

σ←→ rp′q1q2 would
correspond to a transition from p to p′ reading σ,
with counter actions given by the vectors (2, 0, 1)
and (1, 1, 0) (assuming that Q = {q1, q2, q3} and
position i in the vectors corresponds to qi). book-
keeping rules of A relate to ε-transitions of M in
a similar way.

Definition 4. Let A = ({r} ∪ P ∪ Q,Σ�, R) be
a special DAG automaton and M = (Q′,Σ,m, δ,
q0, {qf}) a multicounter automaton, where Q =
{q1, . . . , qm} and Q′ = P ∪{q0, qf} with q0 6= qf
and {q0, qf} ∩ P = ∅.

Let ψ be the Parikh mapping associated withQ.
A rule α σ←→ β inR and a transition (p, σ,D, I, p′)
in δ are related if the following hold:

If α σ←→ β is path-generating then σ ∈ Σ and

• p is the unique state in P that occurs in α
unless α = ε and p = q0,

• p′ is the unique state in P that occurs in β
unless β = ε and p′ = qf , and

• D = ψ(h(α)) and I = ψ(h(β)).

If α σ←→ β is bookkeeping then σ = ε and

• p and p′ are the unique states in P that occur
in α and β, respectively, and

• D = ψ(h(α)) and I = ψ(h(β)).

A and M are related if for every rule in R there
is a related transition in M and vice versa.

Note that relatedness between rules is injective
in both directions. Thus, for every special DAG
automaton A a related multicounter automaton M
can be constructed, and the converse holds as well
provided that the initial state of M has no incom-
ing transitions, there is a single final state that has
no outgoing transitions, and no initial or final tran-
sition is an ε-transition.

99



To simplify the technicalities of the proof of
the next lemma, let us say that a partial DAG
(pDAG, for short) is defined just like a DAG G =
(V,E, in, out , lab), except that in−1(e) may be
empty for some edges e ∈ E, i.e., those edges are
“dangling” without a target. A run of a DAG au-
tomaton on a pDAG is defined exactly as a run on
a DAG. The notion of special DAGs carries over
to the partial case in the obvious way.

Lemma 2. If a special DAG automaton A and
a multicounter automaton M are related, then
L(M) = πΣ(L(A)u).

Proof. Let A, M , ψ, and h be as above. Note
that each tuple in Nm can be seen as an assign-
ment of values to the counters of M . More-
over, given a run ρ on a pDAG G and a subset
D = {e1, . . . , e`} of the set of edges of G, we let
ψρ(D) = ψ(h(ρ(e1) · · · ρ(e`))).

For the inclusion L(M) ⊆ πΣ(L(A)u), let
t1, . . . , tn+1 ∈ δ be a sequence of transitions by
which M accepts a string w. If w = σ ∈ Σ
then t1 = (q0, σ, 0m, 0m, qf ) and R contains the
path-generating rule ε σ←→ ε, thus accepting the
DAG consisting of a single node labeled σ. As-
sume therefore that n ≥ 1. We inductively con-
struct runs ρ1, . . . , ρn on single-rooted pDAGs
G1, . . . , Gn such that the following hold when M
has executed transition t` (` ∈ [n]), where D` is
the set of dangling edges of G`:

(i) D` contains exactly one edge with label r
and exactly one edge e` with a label in P .

(ii) the counters of M store ψρ`(D`), and

(iii) the prefix v of w read by M so far labels the
main path in G`, and ρ`(e`) is the current
state of M .

Transition t1 is of the form t1 = (q0, σ, 0m, I,
p), which means thatR contains a path-generating
rule ε σ←→ rpα with ψ(α) = I . Choosing G1 to
be the single-node pDAG to which this rule ap-
plies, and defining ρ1 accordingly, obviously sat-
isfies (i)–(iii). For ` > 1, assume that G`−1 and
ρ`−1 have been constructed.

There are two cases. If t` = (p, σ,D, I, p′)
(with p, p′ ∈ P ) then it is related to a path-
generating rule rpα σ←→ rp′β in R, and by the
induction hypothesis ψρ`−1(D`−1) ≥ D. Hence
we can construct G` from G`−1 by taking any se-
quence s ∈ D`−1 of pairwise distinct edges such

that ρ`−1(s) = rpα, and adding a fresh node v
labeled σ with in(v) = s. Further, add |β| + 2
dangling outgoing edges to v, and let ρ` be the ex-
tension of ρ`−1 obtained by setting ρ`(out(v)) =
rp′β. Clearly, this satisfies (i)–(iii) with e` being
the second outgoing edge of v. The case where
t` = (p, ε,D, I, p

′) is is similar, except that the
rule in R to which it is related is a bookkeep-
ing rule, and thus the label of v is � and it lacks
incoming and outgoing edges whose state is r.
Again, (i)–(iii) are clearly satisfied.

Thus we have shown that Gn satisfies (i)–
(iii). We also know that tn+1 = (p, σ,D, 0m,
qf ) and is thus related to a path-generating rule
rpα

σ←→ ε. Constructing Gn+1 similarly to the
path-generating case above, but the outgoing dan-
gling edge thus ensures that Gn+1 contains a path
labeled w from the root to the newly added node,
which is a leaf. Note that Gn+1 does not contain
any dangling edges because M accepts only with
all counters zero. Consequently, Gn+1 ∈ L(A)u
and thus w ∈ πΣ(L(A)u).

For the other inclusion, note that every run ρ on
a DAG G with n+ 1 nodes v1, . . . , vn+1 arranged
in topological order can be decomposed into runs
ρ1, . . . , ρn+1 on pDAGs G1, . . . , Gn+1 such that
G` is the restriction of G to v1, . . . , v` and their
outgoing edges, and ρ` is the restriction of ρ to
G`. Now, given a root-to-leaf path in G labeled
w it should be clear how transitions t1, . . . , tn+1
related to the rules in R applied to v1, . . . , v` can
be chosen to mirror the arguments above, yielding
a computation of M that accepts w.

Theorem 3. A string language L ⊆ Σ∗ \ {ε} can
be recognized by a multicounter automaton M if
and only if L = πΣ(Lu) for a regular DAG lan-
guage L.

Proof. By Lemmas 1 and 2 it suffices to show that
L can be recognized by a multicounter automaton
M ′ which is related to some special DAG automa-
ton, i.e., the initial state of M ′ has no incoming
transitions, there is a single final state that has no
outgoing transitions, and no initial or final transi-
tion is an ε-transition. The first two requirements
are easily ensured by adding two new states, an
initial and a final one. Making sure that the third
requirement is met is also a straightforward matter
since ε /∈ L.

The relationship between multicounter au-
tomata and path languages of single-rooted regu-

100



lar DAG languages thus resembles that between
multicounter automata and languages of the form
L ∩ K�. Theorem 3 shows that for every DAG
automaton A, the language π(L(A)u) can be rec-
ognized by a multicounter automaton, the other di-
rection needs some bookkeeping that must be re-
moved by intersecting π(L(A)u) with Σ∗. In this
direction, we also have to exclude the empty string
as full paths in DAGs are always nonempty.

An interesting consequence of Theorem 3 is that
the path languages of single-rooted regular DAG
languages are orthogonal to the Chomsky hierar-
chy. While multicounter automata can recognize
all regular languages and some languages that are
not context-free, such as, e.g., {anbncn | n ∈
N}, they cannot recognize all context-free lan-
guages. For instance, they can recognize the lan-
guage {anbn | n ∈ N}, but not its Kleene clo-
sure, which is also context-free (Greibach, 1978).
While the multicounter languages are closed un-
der union, intersection, concatenation, and shuffle,
they are thus not closed under Kleene star; for de-
tails, see, e.g., (Priese and Wimmel, 2008). Their
Parikh images are semilinear, which for example
follows from Theorem 3.

5 Conclusions

To summarize, each of the open problems given
in (Drewes, 2017) (and recalled in the introduc-
tion) has been solved. Corollaries 1 and 2 close
problems 4 and 1 respectively. Problem 3 is closed
by Theorem 3, directly relating the languages cap-
tured by multicounter automata to the path lan-
guages in question. For problem 2 the charac-
terization by multicounter automata very naturally
models the computational power of the formalism
itself, but the language equivalence involves pro-
jecting away some bookkeeping information by
intersection with Σ∗.

References
Laura Banarescu, Claire Bonial, Shu Cai, Madalina

Georgescu, Kira Griffitt, Ulf Hermjakob, Kevin
Knight, Philipp Koehn, Martha Palmer, and Nathan
Schneider. 2013. Abstract meaning representation
for sembanking. In Proc. 7th Linguistic Annotation
Workshop, ACL 2013 Workshop.

Henrik Björklund and Mikołaj Bojańczyk. 2007. Shuf-
fle expressions and words with nested data. In Math-
ematical Foundations of Computer Science (MFCS).
pages 750–761.

Johannes Blum and Frank Drewes. 2017. Language
theoretic properties of regular DAG languages. In-
formation and Computation (to appear).

David Chiang, Frank Drewes, Daniel Gildea, Adam
Lopez, and Giorgio Satta. 2016. Weighted
DAG automata for semantic graphs. Unpublished
manuscript.

Frank Drewes. 2017. On DAG languages and DAG
transducers. Bulletin of the EATCS 121.

Seymour Ginsburg and Edwin H. Spanier. 1964.
Bounded Algol-like languages. Transactions of the
American Mathematical Society 113(2):333–368.

Jay Gisher. 1981. Shuffle languages, petri nets, and
context-sensitive grammars. Communications of the
ACM 24(9):597–605.

Sheila A. Greibach. 1978. Remarks on blind and par-
tially blind one-way multicounter machines. Theo-
retical Computer Science 7:311–324.

S. Rao Kosaraju. 1982. Decidability of reachability
in vector addition systems. In ACM Symposium on
Theory of Computing (STOC). pages 267–281.

Ernst W. Mayr. 1984. An algorithm for the general
Petri net reachability problem. SIAM Journal on
Computing 13(3):441–460.

Rohit J. Parikh. 1961. Language generating devices.
Quarterly Progress Report 60, M.I.T.

Lutz Priese and Harro Wimmel. 2008. Petri-Netze,
Springer, chapter Petri-Netz-Sprachen. 2nd edition.

101


