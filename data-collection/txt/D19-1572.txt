



















































MultiFiT: Efficient Multi-lingual Language Model Fine-tuning


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 5702–5707,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

5702

MultiFiT: Efficient Multi-lingual Language Model Fine-tuning

Julian Eisenschlos1†∗ Sebastian Ruder2,3‡∗ Piotr Czapla4∗
Marcin Kardas4∗ Sylvain Gugger5 Jeremy Howard5,6

1ASAPP, Inc. 2National University of Ireland 3Aylien Ltd., Dublin
4n-waves, Wrocław 5fast.ai 6University of San Francisco

Abstract
Pretrained language models are promising par-
ticularly for low-resource languages as they
only require unlabelled data. However, train-
ing existing models requires huge amounts of
compute, while pretrained cross-lingual mod-
els often underperform on low-resource lan-
guages. We propose Multi-lingual language
model Fine-Tuning (MultiFiT) to enable prac-
titioners to train and fine-tune language mod-
els efficiently in their own language. In ad-
dition, we propose a zero-shot method us-
ing an existing pretrained cross-lingual model.
We evaluate our methods on two widely used
cross-lingual classification datasets where they
outperform models pretrained on orders of
magnitude more data and compute. We release
all models and code1.

1 Introduction

Pretrained language models (LMs) have shown
striking improvements on a range of natural lan-
guage processing (NLP) tasks (Peters et al., 2018a;
Howard and Ruder, 2018; Devlin et al., 2018).
These models only require unlabelled data for
training and are thus particularly useful in scenar-
ios where labelled data is scarce. As much of NLP
research has focused on the English language, the
larger promise of these models is to bridge the dig-
ital language divide2 and enable the application of
NLP methods to many of the world’s other 6,000
languages where labelled data is less plentiful.

Recently, cross-lingual extensions of these LMs
have been proposed that train on multiple lan-
guages jointly (Artetxe and Schwenk, 2018; Lam-
ple and Conneau, 2019). These models are able

1http://nlp.fast.ai
?The first four authors contributed equally.
†Corresponding author: eisenjulian@gmail.com
‡Sebastian is now affiliated with DeepMind.
2http://labs.theguardian.com/

digital-language-divide/

to perform zero-shot learning, only requiring la-
belled data in the source language. However,
source data in another language may often not be
available, whereas obtaining a small number of la-
bels is typically straightforward.

Furthermore such models have several down-
sides: a) some variants rely on large amounts
of parallel data, which may not be available
for truly low-resource languages; b) they require
a huge amount of compute for training3; and
c) cross-lingual models underperform on low-
resource languages—precisely the setting where
they would be most useful. We are aware of
two possible reasons for this: 1) Languages that
are less frequently seen during training are un-
derrepresented in the embedding space.4 2) In-
frequent scripts are over-segmented in the shared
word piece vocabulary (Wang et al., 2019).

In this work, we show that small monolin-
gual LMs are able to outperform expensive cross-
lingual models both in the zero-shot and the super-
vised setting. We propose Multi-lingual language
model Fine-tuning (MultiFit) to enable practition-
ers to train and fine-tune language models effi-
ciently.5 Our model combines universal language
model fine-tuning (ULMFiT; Howard and Ruder,
2018) with the quasi-recurrent neural network
(QRNN; Bradbury et al., 2017) and subword to-
kenization (Kudo, 2018) and can be pretrained on
a single Tesla V100 GPU in a few hours. In addi-
tion, we propose to use a pretrained cross-lingual
model’s predictions as pseudo labels to adapt the

3The training cost is amortized over time as pretraining
only needs to be performed once and fine-tuning is much
cheaper. However, if a model needs to be applied to a new
language or a domain not covered by the model, a new model
needs to be trained from scratch.

4This is similar to how word embeddings are known to
underperform on low-frequency tokens (Gong et al., 2018).

5We use ‘multilingual’ as referring to training indepen-
dent models in multiple languages. We use ‘cross-lingual‘ to
refer to training a joint model across multiple languages.

http://nlp.fast.ai
http://labs.theguardian.com/digital-language-divide/
http://labs.theguardian.com/digital-language-divide/


5703

monolingual language model to the zero-shot set-
ting. We evaluate our models on two widely
used cross-lingual classification datasets, MLDoc
(Schwenk and Li, 2018) and CLS (Prettenhofer
and Stein, 2010) where we outperform the state-
of-the-art zero-shot model LASER (Artetxe and
Schwenk, 2018) and multi-lingual BERT (Devlin
et al., 2018) in the supervised setting—even with-
out any pretraining. In the zero-shot setting, we
outperform both models using pseudo labels—and
report significantly higher performance with as lit-
tle as 100 examples. We finally show that infor-
mation from monolingual and cross-lingual lan-
guage models is complementary and that pretrain-
ing makes models robust to noise.

2 Related work

Pretrained language models Pretrained lan-
guage models based on an LSTM (Peters et al.,
2018a; Howard and Ruder, 2018) and a Trans-
former (Radford et al., 2018; Devlin et al., 2018)
have been proposed. Recent work (Peters et al.,
2018b) suggests that—all else being equal—an
LSTM outperforms the Transformer in terms of
downstream performance. For this reason, we use
a variant of the LSTM as our language model.

Cross-lingual pretrained language models
The multi-lingual BERT model is pretrained on
the Wikipedias of 104 languages using a shared
word piece vocabulary. LASER (Artetxe and
Schwenk, 2018) is trained on parallel data of
93 languages with a shared BPE vocabulary.
XLM (Lample and Conneau, 2019) additionally
pretrains BERT with parallel data. These models
enable zero-shot transfer, but achieve lower results
than monolingual models. In contrast, we focus
on making the training of monolingual language
models more efficient in a multi-lingual context.
Concurrent work (Mulcaire et al., 2019) pretrains
on English and another language, but shows that
cross-lingual pretraining only helps sometimes.

Multi-lingual language modeling Training lan-
guage models in non-English languages has only
recently received some attention. Kawakami et al.
(2017) evaluate on seven languages. Cotterell
et al. (2018) study 21 languages. Gerz et al. (2018)
create datasets for 50 languages. All of these stud-
ies, however, only create small datasets, which
are inadequate for pretraining language models.
In contrast, we are among the first to report the

SUB1
400

embs.
1550

QRNN1
1550

QRNN2
1550

QRNN3
400

QRNN4

SUB2
400

embs.
1550

QRNN1
1550

QRNN2
1550

QRNN3
400

QRNN4

...
...

...
...

...
...

SUBn
400

embs.
1550

QRNN1
1550

QRNN2
1550

QRNN3
400

QRNN4

400
avg pool

400
max pool

50
linear1

#classes

linear2

400
last

Figure 1: The MultiFiT language model with classifier
consisting of a subword embedding layer, four QRNN
layers, an aggregation layer, and two linear layers.

Source Language
Documents

Source Language
Gold Labels

Target Language
Wikipedia

LASER Classifier

Pretrained LM Fine-tuned LM Zero-shot
Classifier

Target Language
Documents

Target Language
Predicted Labels

Train
Cross-lingual

Classifier

Predict
Labels

a) Pretrain b) Fine-tune c) Train Classifier

Figure 2: The steps of our cross-lingual bootstrapping
method for zero-shot cross-lingual transfer. a) A mono-
lingual language model (LM) is pretrained on target
language data; b) the LM is fine-tuned on target lan-
guage documents; and c) the LM is fine-tuned as a
classifier using the zero-shot predictions from a linear
classification layer fine-tuned on top of cross-lingual
representations from LASER.

performance of monolingual language models on
downstream tasks in multiple languages.

3 Our method

3.1 Multi-lingual Fine-Tuning

We propose Multi-lingual Fine-tuning (MultiFit).
Our method uses the ULMFiT model (Howard
and Ruder, 2018) with discriminative fine-tuning
as foundation. ULMFiT is based on a 3-layer
AWD-LSTM (Mer, 2017) language model. The
AWD-LSTM is a regular LSTM (Hochreiter and
Schmidhuber, 1997) with tuned dropout hyper-
parameters. To enable faster training and fine-
tuning of the model, we replace it with a QRNN
(Bradbury et al., 2017). The QRNN alternates
convolutional layers, which are parallel across
timesteps, and a recurrent pooling function, which
is parallel across channels. It has been shown to
outperform LSTMs, while being up to 16× faster
at train and test time. ULMFiT in addition is re-
stricted to words as input. To make our model



5704

more robust across languages, we use subword
tokenization based on a unigram language model
(Kudo, 2018), which is more flexible compared to
byte-pair encoding (Sennrich et al., 2016). We ad-
ditionally employ label smoothing (Szegedy et al.,
2016) and a novel cosine variant of the one-cycle
policy (Smith, 2018)6, which we found to outper-
form ULMFiT’s slanted triangular learning rate
schedule and gradual unfreezing. The full model
can be seen in Figure 1.

3.2 Cross-lingual Bootstrapping

Prior methods have employed cross-lingual train-
ing strategies relying on parallel data and a shared
BPE vocabulary. These can be combined with
our language model, but increase its training com-
plexity. For the case where an existing pre-
trained cross-lingual model and source language
data are available, we propose a bootstrapping
method (Ruder and Plank, 2018) that uses the pre-
trained model’s zero-shot predictions as pseudo la-
bels to fine-tune the monolingual model on target
language data.

The steps of the method can be seen in Figure
2. Specifically, we first fine-tune a linear classifi-
cation layer on top of pretrained cross-lingual rep-
resentations on source language training data. We
then apply this cross-lingual classifier to the target
language data and store its predicted label for ev-
ery example. We now fine-tune our pretrained LM
on the target language data and these pseudo la-
bels7. Importantly, this method enables our mono-
lingual LM to significantly outperform its cross-
lingual teacher in the zero-shot setting (§5).

4 Experimental setup

This section provides an overview of our experi-
mental setup; see the appendix for full details.

Data We evaluate our models on the Multilin-
gual Document Classification Corpus (MLDoc;
Schwenk and Li, 2018)8—a new subset of Reuters
Corpus Volume 2 (Lewis et al., 2004) with bal-
anced class priors for eight languages—and on
the Cross-Lingual Sentiment dataset (CLS; Pret-
tenhofer and Stein, 2010)9 consisting of Amazon

6The idea is due to private conversation with the author.
7Distillation (Hinton et al., 2015) yielded similar results.
8https://github.com/facebookresearch/

MLDoc
9https://webis.de/data/webis-cls-10.

html

Domain Languages Train Dev Test

MLDoc News
EN, DE, ES, FR, 1k / 2k /

2k 10k
IT, JA, RU, ZH 5k / 10k

CLS
Product

EN, DE, FR, JA 2k - 2k
reviews

Table 1: The domain, languages, and number of train-
ing, development, and test examples in each dataset.

DE ES FR IT JA RU ZH

Zero-shot (1,000 source language examples)

MultiCCA 81.20 72.50 72.38 69.38 67.63 60.80 74.73
LASER, paper 86.25 79.30 78.30 70.20 60.95 67.25 70.98
LASER, code 87.65 75.48 84.00 71.18 64.58 66.58 76.65
MultiBERT 82.35 74.98 83.03 68.27 64.58 71.58 66.17
MultiFiT, pseudo 91.62 79.10 89.42 76.02 69.57 67.83 82.48

Supervised (100 target language examples)

MultiFit 90.90 89.00 85.03 80.12 80.55 73.55 88.02

Supervised (1,000 target language examples)

MultiCCA 93.70 94.45 92.05 85.55 85.35 85.65 87.30
LASER, paper 92.70 88.75 90.80 85.93 85.15 84.65 88.98
MultiBERT 94.00 95.15 93.20 85.82 87.48 86.85 90.72
Monolingual BERT 94.93 - - - - - 92.17
MultiFiT, no wiki 95.23 95.07 94.65 89.30 88.63 87.52 90.03
MultiFiT 95.90 96.07 94.75 90.25 90.03 87.65 92.52

Table 2: Comparison of zero-shot and supervised meth-
ods on MLDoc.

product reviews in four languages. We provide an
overview of the datasets in Table 1.

Pretraining We pretrain our models on 100M
tokens extracted from the Wikipedia of the corre-
sponding language for 10 epochs. As fewer to-
kens might be available for some languages, we
also compare against a version (no wiki) that uses
no pretraining. For all models, we fine-tune the
LMs on the target data of the same language for
20 epochs. We perform subword tokenization with
the unigram language model (Kudo, 2018).

Evaluation settings We compare two settings
based on the availability of source and target lan-
guage data: supervised and zero-shot. In the su-
pervised setting, every model is fine-tuned and
evaluated on examples from the target language.
In the zero-shot setting, every model is fine-tuned
on source language examples and evaluated on tar-
get language examples. In all cases, we use En-
glish as the source language.

Baselines We compare against the state-of-
the-art cross-lingual embedding models LASER
(Artetxe and Schwenk, 2018), which uses a
large parallel corpus, multilingual BERT (MultiB-

https://github.com/facebookresearch/MLDoc
https://github.com/facebookresearch/MLDoc
https://webis.de/data/webis-cls-10.html
https://webis.de/data/webis-cls-10.html


5705

DE FR JA

Books DVD Music Books DVD Music Books DVD Music
Ze

ro
-s

ho
t LASER, code 84.15 78.00 79.15 83.90 83.40 80.75 74.99 74.55 76.30

MultiBERT 72.15 70.05 73.80 75.50 74.70 76.05 65.41 64.90 70.33
MultiFiT, pseudo 89.60 81.80 84.40 87.84 83.50 85.60 80.45 77.65 81.50

Tr
an

sl
at

. MT-BOW 79.68 77.92 77.22 80.76 78.83 75.78 70.22 71.30 72.02
CL-SCL 79.50 76.92 77.79 78.49 78.80 77.92 73.09 71.07 75.11
BiDRL 84.14 84.05 84.67 84.39 83.60 82.52 73.15 76.78 78.77

Su
pe

r. MultiBERT 86.05 84.90 82.00 86.15 86.90 86.65 80.87 82.83 79.95
MultiFiT 93.19 90.54 93.00 91.25 89.55 93.40 86.29 85.75 86.59

Table 3: Comparison of zero-shot, translation-based and supervised methods (with 2k training examples) on all
domains of CLS. MT-BOW and CL-SCL results are from (Zhou et al., 2016).

LSTM QRNN

Language model pretraining 143 71
Classifier fine-tuning 467 156

Table 4: Comparison of LSTM and QRNN per-batch
training speed on a Tesla V100 (in ms) in MultiFiT.

ERT)10, and monolingual BERT11. We also com-
pare against the best models on each dataset, Mul-
tiCCA (Ammar et al., 2016), a cross-lingual word
embedding model, and BiDRL (Zhou et al., 2016),
which translates source and target data.

Our methods We evaluate our monolingual
LMs in the supervised setting (MultiFit) and our
LMs fine-tuned with pseudo labels from LASER
in the zero-shot setting (pseudo).

DE ES ZH

ULMFiT 94.19 95.23 66.82
MultiFiT, no wiki 95.23 95.07 90.03
MultiFiT, small Wiki 95.37 95.30 89.80
MultiFiT 95.90 96.07 92.52

Table 5: Comparison of MultiFiT results with different
pretraining corpora and ULMFiT, fine-tuned with 1k
labels on MLDoc.

5 Results

MLDoc We show results for MLDoc in Table
2. In the zero-shot setting, MultiBERT underper-

10https://github.com/google-research/
bert/blob/master/multilingual.md

11Models are available for English, Chinese, and German
(https://deepset.ai/german-bert).

forms the comparison methods as the shared em-
bedding space between many languages is overly
restrictive. Our monolingual LMs outperform
their cross-lingual teacher LASER in almost ev-
ery setting. When fine-tuned with only 100 target
language examples, they are able to outperform
all zero-shot approaches except MultiFiT on DE
and FR. This calls into question the need for zero-
shot approaches, as fine-tuning with even a small
number of target examples is able to yield superior
performance. When fine-tuning with 1,000 target
examples, MultiFiT—even without pretraining—
outperforms all comparison methods, including
monolingual BERT.

CLS We show results for CLS in Table 3. Mul-
tiFiT is able to outperform its zero-shot teacher
LASER across all domains. Importantly, the
bootstrapped monolingual model also outperforms
more sophisticated models that are trained on
translations across almost all domains. In the su-
pervised setting, MultiFiT similarly outperforms
multilingual BERT. For both datasets, our methods
that have been pretrained on 100 million tokens
outperform both multilingual BERT and LASER,
models that have been trained with orders of mag-
nitude more data and compute.

6 Analysis

Speed We compare the LSTM and QRNN cell
in MultiFiT based on the speed for processing a
single batch for pretraining and fine-tuning in Ta-
ble 4. MultiFiT with a QRNN pretrains and fine-
tunes about 2× and 3× faster respectively.

MultiFiT vs. ULMFiT We compare Multi-
FiT pretrained on 100M Wikipedia tokens against

https://github.com/google-research/bert/blob/master/multilingual.md
https://github.com/google-research/bert/blob/master/multilingual.md
https://deepset.ai/german-bert


5706

ULMFiT pretrained on the same data using a 3-
layer LSTM and spaCy tokenization12 as well as
MultiFiT pretrained on 2M Wikipedia tokens, and
MultiFiT with no pretraining in Table 5. Pretrain-
ing on more data generally helps. MultiFiT out-
performs ULMFiT significantly; the performance
improvement is particularly pronounced in Chi-
nese where ULMFiT’s word-based tokenization
underperformed.

Figure 3: Comparison of MultiFiT’s robustness to label
noise on MLDoc with and without pretraining.

DE ES FR IT JA RU ZH

LASER, code 87.65 75.48 84.00 71.18 64.58 66.58 76.65

Random init. (1k) 77.80 70.50 75.65 68.52 68.50 61.37 79.19
Random init. (10k) 90.53 69.75 87.40 72.72 67.55 63.67 81.44
MultiFiT, pseudo (1k) 91.34 78.92 89.45 76.00 69.57 68.19 82.45

Table 6: Bootstrapping results on MLDoc with and
without pretraining, trained on 1k/10k LASER labels.

DE ES FR IT RU

Word-based 95.28 95.97 94.72 89.97 88.02
Subword 96.10 96.07 94.75 94.75 87.65

Table 7: Comparison of different tokenization strate-
gies for different languages on MLDoc.

Robustness to noise We suspect that MultiFiT
is able to outperform its teacher as the information
from pretraining makes it robust to label noise. To
test this hypothesis, we train MultiFiT and a ran-
domly initialized model with the same architec-
ture on 1k and 10k examples of the Spanish ML-
Doc. We randomly perturb labels with a probabil-
ity ranging from 0-0.75 and show results in Fig-
ure 3. The pretrained MultiFiT is able to partially

12https://spacy.io/api/tokenizer

ignore the noise, up to 65% of noisy training ex-
amples. Without pretraining, the model does not
exceed the theoretical baseline (the percentage of
correct examples). In addition, we compare Mul-
tiFiT with and without pretraining in Table 6. Pre-
training enables MultiFiT to achieve much better
performance compared to a randomly initialised
model. Both results together suggest a) that pre-
training increases robustness to noise and b) that
information from monolingual and cross-lingual
language models is complementary.

Tokenization Subword tokenization has been
found useful for language modeling with mor-
phologically rich languages (Czapla et al., 2018;
Mielke and Eisner, 2019) and has been used in
recent pretrained LMs (Devlin et al., 2018), but
its concrete impact on downstream performance
has not been observed. We train models with
the best performing vocabulary sizes for subword
(15k) and regular word-based tokenization (60k)
with the Moses tokenizer (Koehn et al., 2007) on
German and Russian MLDoc and show results in
Table 7. Subword tokenization outperforms word-
based tokenization on most languages, while being
faster to train due to the smaller vocabulary size.

7 Conclusion

We have proposed novel methods for multilingual
fine-tuning of languages that outperform mod-
els trained with far more data and compute on
two widely studied cross-lingual text classification
datasets on eight languages in both the zero-shot
and supervised setting.

References
2017. Pointer Sentinel Mixture Models. In Proceed-

ings of ICLR 2017.

Waleed Ammar, George Mulcaire, Yulia Tsvetkov,
Guillaume Lample, Chris Dyer, and Noah A. Smith.
2016. Massively Multilingual Word Embeddings.

Mikel Artetxe and Holger Schwenk. 2018. Massively
Multilingual Sentence Embeddings for Zero-Shot
Cross-Lingual Transfer and Beyond. arXiv preprint
arXiv:1812.10464.

James Bradbury, Stephen Merity, Caiming Xiong, and
Richard Socher. 2017. Quasi-Recurrent Neural Net-
works. In Proceedings of ICLR 2017.

Ryan Cotterell, Sebastian Mielke, Jason Eisner, and
Brian Roark. 2018. Are all languages equally hard
to language-model? In Proceedings of NAACL-HLT
2018, pages 536–541.

https://spacy.io/api/tokenizer
http://arxiv.org/abs/1602.01925
http://arxiv.org/abs/1812.10464
http://arxiv.org/abs/1812.10464
http://arxiv.org/abs/1812.10464
http://arxiv.org/abs/1611.01576
http://arxiv.org/abs/1611.01576


5707

Piotr Czapla, Jeremy Howard, and Marcin Kardas.
2018. Universal language model fine-tuning with
subword tokenization for polish. In Proceedings of
PolEval 2018 Workshop.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. BERT: Pre-training of
Deep Bidirectional Transformers for Language Un-
derstanding.

Daniela Gerz, Ivan Vulić, Edoardo Ponti, Jason Narad-
owsky, Roi Reichart, and Anna Korhonen. 2018.
Language Modeling for Morphologically Rich Lan-
guages: Character-Aware Modeling for Word-Level
Prediction. Proceedings of TACL 2018.

Chengyue Gong, Di He, Xu Tan, Tao Qin, Liwei
Wang, and Tie-Yan Liu. 2018. FRAGE: Frequency-
Agnostic Word Representation. In Proceedings of
NIPS 2018.

Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. 2015.
Distilling the Knowledge in a Neural Network.
arXiv preprint arXiv:1503.02531.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long Short-Term Memory. Neural Computation,
9(8):1735–1780.

Jeremy Howard and Sebastian Ruder. 2018. Universal
Language Model Fine-tuning for Text Classification.
In Proceedings of ACL 2018.

Kazuya Kawakami, Chris Dyer, and Phil Blunsom.
2017. Learning to Create and Reuse Words in Open-
Vocabulary Neural Language Modeling. In ACL
2017.

Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, et al. 2007. Moses: Open source
toolkit for statistical machine translation. In Pro-
ceedings of ACL 2007, pages 177–180.

Taku Kudo. 2018. Subword regularization: Improv-
ing neural network translation models with multiple
subword candidates. In Proceedings of ACL 2018,
pages 66–75.

Guillaume Lample and Alexis Conneau. 2019. Cross-
lingual Language Model Pretraining. arXiv preprint
arXiv:1901.07291.

David D Lewis, Yiming Yang, Tony G Rose, and Fan
Li. 2004. Rcv1: A new benchmark collection for
text categorization research. Journal of machine
learning research, 5(Apr):361–397.

Sebastian J. Mielke and Jason Eisner. 2019. Spell
Once, Summon Anywhere: A Two-Level Open-
Vocabulary Language Model. In Proceedings of
AAAI 2019.

Phoebe Mulcaire, Jungo Kasai, and Noah Smith.
2019. Polyglot Contextual Representations Improve
Crosslingual Transfer. In Proceedings of NAACL
2019.

Matthew E. Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018a. Deep contextualized word rep-
resentations. In Proceedings of NAACL-HLT 2018.

Matthew E. Peters, Mark Neumann, Luke Zettlemoyer,
Wen-tau Yih, Paul G Allen, and Computer Science.
2018b. Dissecting Contextual Word Embeddings:
Architecture and Representation. In Proceedings of
EMNLP 2018.

Peter Prettenhofer and Benno Stein. 2010. Cross-
Language Text Classification using Structural Cor-
respondence Learning. In ACL ’10 Proceedings of
the 48th Annual Meeting of the Association for Com-
putational Linguistics (ACL ’10 ), pages 1118–1127.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving Language Under-
standing by Generative Pre-Training.

Sebastian Ruder and Barbara Plank. 2018. Strong
Baselines for Neural Semi-supervised Learning un-
der Domain Shift. In Proceedings of ACL 2018.

Holger Schwenk and Xian Li. 2018. A Corpus for
Multilingual Document Classification in Eight Lan-
guages. In Proceedings of the Eleventh Interna-
tional Conference on Language Resources and Eval-
uation (LREC 2018).

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Neural Machine Translation of Rare Words
with Subword Units. In Proceedings of ACL 2016.

Leslie N Smith. 2018. A disciplined approach to neu-
ral network hyper-parameters: Part 1–learning rate,
batch size, momentum, and weight decay. arXiv
preprint arXiv:1803.09820.

Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe,
Jonathon Shlens, and Zbigniew Wojna. 2016. Re-
thinking the Inception Architecture for Computer
Vision. In Proceedings of CVPR 2016.

Xinyi Wang, Hieu Pham, Philip Arthur, and Graham
Neubig. 2019. Multilingual neural machine transla-
tion with soft decoupled encoding. In Proceedings
of ICLR 2019.

Xinjie Zhou, Xianjun Wan, and Jianguo Xiao. 2016.
Cross-Lingual Sentiment Classification with Bilin-
gual Document Representation Learning. Proceed-
ings of ACL 2016, pages 1403–1412.

http://arxiv.org/abs/1810.04805
http://arxiv.org/abs/1810.04805
http://arxiv.org/abs/1810.04805
http://arxiv.org/abs/arXiv:1809.06858v1
http://arxiv.org/abs/arXiv:1809.06858v1
https://doi.org/10.1063/1.4931082
https://doi.org/10.1162/neco.1997.9.8.1735
http://arxiv.org/abs/1801.06146
http://arxiv.org/abs/1801.06146
http://arxiv.org/abs/1704.06986
http://arxiv.org/abs/1704.06986
http://arxiv.org/abs/1901.07291v1
http://arxiv.org/abs/1901.07291v1
http://arxiv.org/abs/1804.08205
http://arxiv.org/abs/1804.08205
http://arxiv.org/abs/1804.08205
http://arxiv.org/abs/1902.09697
http://arxiv.org/abs/1902.09697
http://arxiv.org/abs/arXiv:1802.05365v1
http://arxiv.org/abs/arXiv:1802.05365v1
http://arxiv.org/abs/arXiv:1808.08949v1
http://arxiv.org/abs/arXiv:1808.08949v1
https://doi.org/10.1145/2036264.2036277
https://doi.org/10.1145/2036264.2036277
https://doi.org/10.1145/2036264.2036277
http://arxiv.org/abs/arXiv:1804.09530v1
http://arxiv.org/abs/arXiv:1804.09530v1
http://arxiv.org/abs/arXiv:1804.09530v1
http://arxiv.org/abs/1805.09821
http://arxiv.org/abs/1805.09821
http://arxiv.org/abs/1805.09821
http://arxiv.org/abs/1508.07909
http://arxiv.org/abs/1508.07909
http://arxiv.org/abs/1512.00567
http://arxiv.org/abs/1512.00567
http://arxiv.org/abs/1512.00567
http://arxiv.org/abs/1902.03499
http://arxiv.org/abs/1902.03499

