



















































A Split-and-Recombine Approach for Follow-up Query Analysis


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 5316–5326,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

5316

A Split-and-Recombine Approach for Follow-up Query Analysis

Qian Liu†∗ , Bei Chen§, Haoyan Liu♦∗, Jian-Guang Lou§, Lei Fang§,
Bin Zhou†, Dongmei Zhang§

†State Key Laboratory of Virtual Reality Technology and Systems,
School of Computer Science and Engineering, Beihang University, China

♦State Key Lab of Software Development Environment, Beihang University, China
§Microsoft Research, Beijing, China

†♦{qian.liu, haoyan.liu, zhoubin}@buaa.edu.cn;
§{beichen, jlou, leifa, dongmeiz}@microsoft.com

Abstract
Context-dependent semantic parsing has
proven to be an important yet challenging
task. To leverage the advances in context-
independent semantic parsing, we propose to
perform follow-up query analysis, aiming to
restate context-dependent natural language
queries with contextual information. To
accomplish the task, we propose STAR,
a novel approach with a well-designed
two-phase process. It is parser-independent
and able to handle multifarious follow-up
scenarios in different domains. Experiments
on the FollowUp dataset show that STAR
outperforms the state-of-the-art baseline by a
large margin of nearly 8%. The superiority
on parsing results verifies the feasibility of
follow-up query analysis. We also explore the
extensibility of STAR on the SQA dataset,
which is very promising.

1 Introduction

Recently, Natural Language Interfaces to Data-
bases (NLIDB) has received considerable atten-
tion, as they allow users to query databases by
directly using natural language. Current stud-
ies mainly focus on context-independent seman-
tic parsing, which translates a single natural lan-
guage sentence into its corresponding executable
form (e.g. Structured Query Language) and re-
trieves the answer from databases regardless of
its context. However, context does matter in real
world applications. Users tend to issue queries
in a coherent way when communicating with
NLIDB. For example, after the query “How much
money has Smith earned?” (Precedent Query),
users may pose another query by simply asking
“How about Bill Collins?” (Follow-up Query) in-
stead of the complete “How much money has Bill

∗Work done during an internship at Microsoft Research.

Collins earned?” (Restated Query). Therefore,
contextual information is essential for more accu-
rate and robust semantic parsing, namely context-
dependent semantic parsing.

Compared with context-independent semantic
parsing, context-dependent semantic parsing has
received less attention. Several attempts include
a statistical model with parser trees (Miller et al.,
1996), a linear model with context-dependent log-
ical forms (Zettlemoyer and Collins, 2009) and a
sequence-to-sequence model (Suhr et al., 2018).
However, all these methods cannot apply to differ-
ent domains, since the ATIS dataset (Dahl et al.,
1994) they rely on is domain-specific. A search-
based neural method DynSP∗ arises along with the
SequentialQA (SQA) dataset (Iyyer et al., 2017),
which takes the first step towards cross-domain
context-dependent semantic parsing. Neverthe-
less, DynSP∗ focuses on dealing with relatively
simple scenarios. All the aforementioned methods
design context-dependent semantic parser from
scratch. Instead, inspired by Liu et al. (2019),
we propose to directly leverage the technical ad-
vances in context-independent semantic parsing.
We define follow-up query analysis as restating
the follow-up queries using contextual informa-
tion in natural language, then the restated queries
can be translated to the corresponding executable
forms by existing context-independent parsers. In
this way, we boost the performance of context-
dependent semantic parsing.

In this paper, we focus on follow-up query anal-
ysis and present a novel approach. The main idea
is to decompose the task into two phases by in-
troducing a learnable intermediate structure span:
two queries first get split into several spans, and
then undergo the recombination process. As no
intermediate annotation is involved, we design re-



5317

wards to jointly train the two phases by applying
reinforcement learning (RL) (Sutton and Barto,
1998). Our major contributions are as follows:

• We propose a novel approach, named SpliT-
And-Recombine (STAR)1, to restate follow-up
queries via two phases. It is parser-independent
and can be seamlessly integrated with existing
context-independent semantic parsers.

• We conduct experiments on the FollowUp
dataset (Liu et al., 2019), which covers multifar-
ious cross-domain follow-up scenarios. The re-
sults demonstrate that our approach significantly
outperforms the state-of-the-art baseline.

• We redesign the recombination process and ex-
tend STAR to the SQA dataset, where the anno-
tations are answers. Experiments show promis-
ing results, that demonstrates the extensibility of
our approach.

2 Methodology

In this section, we first give an overview of our
proposed method with the idea of two-phase pro-
cess, then introduce the two phases in turn.

2.1 Overview of Split-And-Recombine
Let x = (x1, . . . , xn), y = (y1, . . . , ym) and z =
(z1, . . . , zl) denote the precedent query, follow-
up query and restated query respectively, each of
which is a natural language sentence. Our goal is
to interpret the follow-up query y with its prece-
dent query x as context, and generate the corre-
sponding restated query z. The restated query has
the same meaning with the follow-up query, but
it is complete and unambiguous to facilitate bet-
ter downstream parsing. Formally, given the pair
(x,y), we aim to learn a model Pmodel(z|x,y)
and maximize the objective:

L = E(x,y,z)∼D[logPmodel(z|x,y)], (1)

where D represents the set of training data. As
to Pmodel(z|x,y), since z always overlaps a great
with x and y, it is intuitively more straightforward
to find a way to merge x and y. To this end, we
design a two-phase process and present a novel ap-
proach STAR to perform follow-up query analysis
with reinforcement learning.

A concrete example of the two-phase process is
shown in Figure 1. Phase I is to Split input queries

1Code is available at http://github.com/
microsoft/EMNLP2019-Split-And-Recombine.

Precedent Query Follow-up Query
How much money has Smith earned How about Bill Collins

How much money has  Smith  earned How about  Bill Collins

Restated Query

Ph
as

e 
I

Ph
as

e 
II

How much money has  Smith             earnedBill Collins

Conflict

Figure 1: The two-phase process of an example from
the FollowUp dataset (More real cases of diverse
follow-up scenarios can be found in Table 3).

into several spans. For example, the precedent
query is split into 3 spans: “How much money
has”, “Smith” and “earned”. Let q denote a kind of
way to split (x,y), then Phase I can be formulated
as Psplit(q|x,y). Phase II is to Recombine the
spans by finding out the most probable conflict-
ing way, and generating the final output by restate-
ment, denoted as Prec(z|q). Two spans being con-
flicting means they are semantically similar. For
example, “Smith” conflicts with “Bill Collins”. A
conflicting way contains all conflicts between the
precedent and follow-up spans. Backed by the
two-phase idea of splitting and recombination, the
overall likelihood of generating z given x,y is:

Pmodel(z|x,y) =
∑
q∈Q

Psplit(q|x,y)Prec(z|q), (2)

where Q represents the set of all possible ways to
split (x,y). Due to the lack of annotations for
splitting and recombination, it is hard to directly
perform supervised learning. Inspired by Liang
et al. (2017), we employ RL to optimize Pmodel.
Denoting the predicted restated query by z̃, sim-
plifying E(x,y,z)∼D as E, the goal of the RL train-
ing is to maximize following objective:

Lrl=E[
∑
z̃∈Z

∑
q∈Q

Psplit(q|x,y)Prec(z̃|q)r(z, z̃)], (3)

where Z is the space of all restated query can-
didates and r represents the reward defined by
comparing z̃ and the annotation z. However, the
overall candidate space Q×Z is vast, making it
impossible to exactly maximize Lrl. The most
straightforward usage of the REINFORCE algo-
rithm (Williams, 1992), sampling both q and z̃,
also poses challenges for learning. To alleviate
the problem, we propose to sample q and enumer-
ate all candidate z̃ after q is determined. It could
shrink the sampling space with an acceptable com-
putational cost, which will be discussed in Sec-

http://github.com/microsoft/EMNLP2019-Split-And-Recombine
http://github.com/microsoft/EMNLP2019-Split-And-Recombine


5318

LS
TM

So
ft
m
ax

Softmax

Recombine

Split/Retain

Reward

Split

Phase I Phase II

How much earned How Bill Collins
… …

Retain Retain Split Retain

Figure 2: The overview of STAR with two phases.

tion 3.2.2. Thus the problem turns to design a re-
ward function R(q, z) to evaluate q and guide the
learning. To achieve it, we reformulate Equation 3
as:

Lrl=E[
∑
q∈Q

Psplit(q|x,y)
∑
z̃∈Z

Prec(z̃|q)r(z, z̃)], (4)

and set the R(q, z) as:∑
z̃∈Z

Prec(z̃|q)r(z, z̃). (5)

The overview of STAR is summarized in Figure 2.
Given x,y, during training of Phase I (in blue), we
fix Prec to provide the reward R(q, z), then Psplit
can be learnt by the REINFORCE algorithm. Dur-
ing training of Phase II (in red), we fix Psplit and
utilize it to generate q, Prec is trained to maximize
Equation 5. In this way, Psplit and Prec can be
jointly trained. The details are introduced below.

2.2 Phase I: Split
As mentioned above, fixed Prec, Phase I updates
Psplit, the Split Neural Network (SplitNet). Tak-
ing the precedent query and follow-up query as in-
put, as shown in Figure 2, splitting spans can be
viewed as a sequence labeling problem over in-
put. For each word, SplitNet outputs a label Split
or Retain, indicating whether a split operation will
be performed after the corresponding word. A la-
bel sequence uniquely identifies a way of splitting
(x,y), mentioned as q in Section 2.1. Figure 3
gives an example on the bottom. In the prece-
dent query, two split operations are performed af-
ter “has” and “Smith” , since their labels are Split.

2.2.1 Split Neural Network
Intuitively, only after obtaining information from
both the precedent query and follow-up query can

SplitNet get to know the reasonable way to split
spans. Inspired by BiDAF (Seo et al., 2017), we
apply a bidirectional attention mechanism to cap-
ture the interrelations between the two queries.

Embedding Layer We consider embedding in
three levels: character, word and sentence, re-
spectively denoted as φc, φw and φs. Character-
level embedding maps each word to a vector in a
high-dimensional space using Convolutional Neu-
ral Networks (Kim, 2014). Word-level embed-
ding is initialized using GloVe (Pennington et al.,
2014), and then it is updated along with other pa-
rameters. Sentence-level embedding is a one-hot
vector designed to distinguish between precedent
and follow-up queries. Then, the overall embed-
ding function is φ = [φc;φw;φs].

Context Layer On top of the embedding layer,
Bidirectional Long Short-Term Memory Network
(BiLSTM) (Hochreiter and Schmidhuber, 1997;
Schuster and Paliwal, 1997) is applied to capture
contextual information within one query. For word
xi(i=1, . . . , n) in the precedent query x, the hid-
den state hi = [

−→
h i;
←−
h i] is computed, where the

forward hidden state is:

−→
h i =

−−−−→
LSTM

(
φ(xi);

−→
h i−1

)
. (6)

Similarly, a hidden state uj is computed for word
yj(j=1, . . . ,m). The BiLSTMs for x and y share
the same parameters.

Attention Layer The interrelations between the
precedent and follow-up queries are captured via
attention layer. Let H=[h1,h2, . . . ,hn] and U=
[u1,u2, . . . ,um] denote the hidden states of two
queries respectively, the similarity matrix is:

A = cos(H>U), (7)



5319

How        much       money      has  Smith earned How      about Bill     Collins

←
( , )Enumerate (size: 13)

Retain Split Split

,

EMPTY

Retain

How much money has How about Smith Bill Collins←,
← How about Smith Bill Collins←,

How about Bill Collins,How much money has EMPTYY ←←

How about Bill Collins, EMPTYY ←←EMPTY

Smith How about earned Bill Collins,← d ←
… …

721006475
81

Retain Retain Retain Split

( )
Restatement

… …

Figure 3: Illustration of reward computation in Phase II.

where A∈Rn×m and the entry Ai,j represents the
similarity between words xi and yj . Then the soft-
max function is used to obtain the precedent-to-
follow (P2F) attention and the follow-to-precedent
(F2P) attention. P2F attention represents yj using
the similarities between yj and every word in x.
Specifically, let fj = softmax(A:,j), where fj ∈
Rn denotes the attention weights on x according
to yj . Then yj can be represented by a precedent-
aware vector ũj =

∑n
k=1 fj [k]·hk. Similarly, F2P

attention computes the attention weights on y ac-
cording to xi, and represents xi as h̃i.

Output Layer Combining the outputs of the
context layer and the attention layer, we design the
final hidden state as follows:

cxi = [hi; hi◦h̃i; hi+1◦h̃i+1], (8)
cyj = [uj ; uj◦ũj ; uj+1◦ũj+1], (9)

where i∈{1,. . . ,n−1},j∈{1,. . . ,m−1} and ◦ denotes
element-wise multiplication (Lee et al., 2017). Let
c = (ct)

T
t=1 = (c

x1 , ..., cxn−1 , cy1 , ..., cym−1) de-
note the final hidden state sequence. At each po-
sition t, the probability of Split is σ(W ∗ ct + b),
where σ denotes the sigmoid function and {W, b}
denotes the parameters.

2.2.2 Training
It is difficult to train RL model from scratch.
Therefore, we propose to initialize SplitNet via
pre-training, and then use reward to optimize it.

Pre-training We obtain the pre-training anno-
tation a by finding the common substrings be-
tween (x,y) and z. One a is a label sequence,
each of which is Split or Retain. Given the pre-
training data setDpre whose training instance is as
(x,y,a), the objective function of pre-training is:

Lpre(θ) = E(x,y,a)∼Dpre [log pθ(a|x,y)], (10)

where θ is the parameter of SplitNet.

Policy Gradient After pre-training, we treat the
label sequence as a variable ã. The rewardR(ã, z)
(details in Section 2.3) is used to optimize the pa-
rameter θ with policy gradient methods (Sutton
et al., 1999). SplitNet is trained to maximize the
following objective function:

Lrl(θ)= E(x,y,z)∼D[Eã∼pθ(ã|x,y)R(ã, z)]. (11)

In practice, REINFORCE algorithm (Williams,
1992) is applied to approximate Equation 11 via
sampling ã from pθ(ã|x,y) for M times, where
M is a hyper-parameter representing the sample
size. Furthermore, subtracting a baseline (Weaver
and Tao, 2001) on R(ã, z) is also applied to re-
duce variance. The final objective function is as
follows:

Lrl(θ)=E(x,y,z)∼D
[ M∑
i=1

pθ(ãi|x,y)
(
R(ãi, z)−R̄

)]
,

where R̄=
1

M

M∑
i=1

R(ãi, z). (12)

2.3 Phase II: Recombine
Here we present Phase II with two questions: (1)
Receiving the sampled label sequence ã, how to
compute its rewardR(ã, z); (2) How to do training
and inference for Prec.

2.3.1 Reward Computation
Receiving the label sequence ã, we first enumer-
ate all conflicting way candidates. Following the
example in Figure 3, once we get a deterministic
ã, the split of (x,y) is uniquely determined. Here
x and y are split into 3 and 2 spans respectively.
Treating spans as units, we enumerate all conflict-
ing way candidates methodically. We act up to the
one-to-one conflicting principle, which means a



5320

span either has no conflict (denoted as EMPTY) or
has only one conflict with a span in another query.
Let C denote the set of all conflicting way candi-
dates, the size of which is 13 in Figure 3.

For each conflicting way, we deterministically
generate a restated query via the process named
Restatement. In general, we simply replace spans
in the precedent query with their conflicting spans
to generate the restated query. For example, in
Figure 3, the first one in C is restated as “How
about Bill Collins earned”. For spans in the
follow-up query, if they contain column names or
cell values and do not have any conflict, they are
appended to the tail of the precedent query. It is
designed to remedy the sub-query situation where
there is no conflict (e.g. “Which opponent re-
ceived over 537 attendance” and “And which got
the result won 5-4”). Specially, if a span in the
follow-up query contains a pronoun, we will in re-
verse replace it with its conflicting span to obtain
the restated query.

Finally, the reward can be computed. Here we
use BLEU and SymAcc2 to build the reward func-
tion, expanding r(z, z̃) in Equation 5 as:

r(z, z̃) = α·BLEU(z, z̃)+β ·SymAcc(z, z̃), (13)

where α, β > 0 and α + β = 1. The reward for ã
can be obtained using Equation 5.

2.3.2 Training and Inference
Besides the reward computation, the recombina-
tion model Prec needs to be trained to maximize
Equation 5. To achieve this, we define a conflict-
ing probability matrix F ∈ RNx×Ny , where Nx
and Ny denote the number of spans in x and y re-
spectively. The entry Fu,v, the conflicting prob-
ability between the u-th span in x and the v-th
span in y, is obtained by normalizing the cosine
similarity between their representations. Here the
span representation is the subtraction representa-
tion (Wang and Chang, 2016; Cross and Huang,
2016), which means that span (xi, . . . , xk) is rep-
resented by [

−→
hk−
−→
hi;
←−
hi−
←−
hk] from the same BiL-

STM in the context layer in Section 2.2.1. Given a
conflicting way denoted as c̃ ∈ C, the probability
of generating its corresponding z̃ can be written as
the multiplication over g(u, v):

Prec(z̃|ã) = P (c̃|F) =
Nx∏
u=1

Ny∏
v=1

g(u, v), (14)

2Their definitions along with the motivations of using
them will be explained in Section 3.2.

where g(u, v) = Fu,v if the u-th span in x con-
flicts with the v-th span in y; otherwise, g(u, v) =
1 − Fu,v. With the above formulation, we can
maximize Equation 5 through automatic differ-
entiation. To reduce the computation, we only
maximize Prec(z̃∗|ã), the near-optimal solution to
Equation 5, where z̃∗ = arg maxz̃∈Z(r(z, z̃)) de-
notes the best predicted restated query so far.

Guided by the golden restated query z, in train-
ing, we find out z̃∗ by computing the reward of
each candidate. However in inference, where there
is no golden restate query, we can only obtain z̃∗

from F. Specially, for the v-th span in the follow-
up query, we find u∗ = arg maxuFu,v. That
means, compared to other spans in the precedent
query, the u∗-th span has the highest probabil-
ity to conflict with the v-th span in the follow-up
query. Moreover, similar to Lee et al. (2017), if
Fu∗,v < λ, then the v-th span in the follow-up
query has no conflict. The hyper-parameter λ > 0
denotes the threshold.

2.4 Extension

So far, we have introduced the whole process of
STAR. Next we explore its extensibility. As ob-
served, when the annotations are restated queries,
STAR is parser-independent and can be incor-
porated into any context-independent semantic
parser. But what if the annotations are answers to
follow-up queries? Assuming we have an ideal se-
mantic parser, a predicted restated query z̃ can be
converted into its corresponding answer w̃. For ex-
ample, given z̃ as “where are the players from”, w̃
could be “Las Vegas”. Therefore, revisiting Equa-
tion 3, in theory STAR is able to be extended by
redesigning r as r(w, w̃), where w denotes the an-
swer annotation. We conduct an extension experi-
ment to verify it, as discussed in Section 3.3.

3 Experiments

In this section, we demonstrate the effectiveness
of STAR on the FollowUp dataset3 with restated
query annotations, and its promising extensibility
on the SQA dataset4 with answer annotations.

3.1 Implementation details

We utilize PyTorch (Paszke et al., 2017) and Al-
lenNLP (Gardner et al., 2018) for implementa-
tion, and adopt Adam (Kingma and Ba, 2015) as

3http://github.com/SivilTaram/FollowUp
4http://aka.ms/sqa

http://github.com/SivilTaram/FollowUp
http://aka.ms/sqa


5321

Model Dev Test

SymAcc (%) BLEU (%) SymAcc (%) BLEU (%) AnsAcc (%)

SEQ2SEQ† (Bahdanau et al., 2015) 0.63 ± 0.00 21.34 ± 1.14 0.50 ± 0.22 20.72 ± 1.31 –
COPYNET† (Gu et al., 2016) 17.50 ± 0.87 43.36 ± 0.54 19.30 ± 0.93 43.34 ± 0.45 –
COPY+BERT (Devlin et al., 2019) 18.63 ± 0.61 45.14 ± 0.68 22.00 ± 0.45 44.87 ± 0.52 –
CONCAT† – – 22.00 ± – 52.02 ± – 25.24
E2ECR† (Lee et al., 2017) – – 27.00 ± – 52.47 ± – 27.18
FANDA† (Liu et al., 2019) 49.00 ± 1.28 60.14 ± 0.98 47.80 ± 1.14 59.02 ± 0.54 60.19

STAR 55.38 ± 1.21 67.62 ± 0.65 54.00 ± 1.09 67.05 ± 1.05 65.05

Table 1: SymAcc, BLEU and AnsAcc on the FollowUp dataset. Results marked † are from Liu et al. (2019).

the optimizer. The dimensions of word embed-
ding and hidden state are both 100. Variational
dropout (Blum et al., 2015) is employed at embed-
ding layer for better generalization ability (with
probability 0.5). The learning rate is set to be
0.001 for pre-training, 0.0001 for RL training on
FollowUp, and 0.0002 for SQA. In the implemen-
tation of the REINFORCE algorithm, we set M
to be 20. Finally, for hyper-parameters, we set
α = 0.5, β = 0.5 and λ = 0.6. All the results are
averaged over 5 runs with random initialization.

3.2 Results on FollowUp dataset

The FollowUp dataset contains 1000 natural lan-
guage query triples (x,y, z). Each triple belongs
to a single database table, and there are 120 ta-
bles in several different domains. Following the
previous work, we split them into the sets of size
640/160/200 for train/dev/test. We evaluate the
methods using both answer level and query level
metrics. AnsAcc is to check the answer accuracy
of predicted queries manually. Concretely, 103
golden restated queries can be successfully parsed
by COARSE2FINE (Dong and Lapata, 2018). We
parse their corresponding predicted queries into
SQL using COARSE2FINE and manually check
the answers. Although AnsAcc is most convinc-
ing, it cannot cover the entire test set. Therefore,
we apply two query level metrics: SymAcc detects
whether all the SQL-related words are correctly
involved in the predicted queries, for example col-
umn names, cell values and so on. It reflects the
approximate upper bound of AnsAcc, as the cor-
rectness of SQL-related words is a prerequisite of
correct execution in most cases; BLEU, referring
to the cumulative 4-gram BLEU score, evaluates
how similar the predicted queries are to the golden
ones (Papineni et al., 2002). SymAcc focuses on
limited keywords, so we introduce BLEU to eval-

uate quality of the entire predicted query.

3.2.1 Model Comparison
Our baselines fall into two categories. Gener-
ation-based methods conform to the architec-
ture of sequence-to-sequence (Sutskever et al.,
2014) and generate restated queries by decoding
each word from scratch. SEQ2SEQ (Bahdanau
et al., 2015) is the sequence-to-sequence model
with attention, and COPYNET further incorporates
a copy mechanism. COPY+BERT incorporates
the latest pre-trained BERT model (Devlin et al.,
2019) as the encoder of COPYNET. Rewriting-
based methods obtain restated queries by rewrit-
ing precedent and follow-up queries. CONCAT di-
rectly concatenates the two queries. E2ECR (Lee
et al., 2017) obtain restated queries by perform-
ing coreference resolution in follow-up queries.
FANDA (Liu et al., 2019) utilizes a structure-
aware model to merge the two queries. Our
method STAR also belongs to this category.

Answer Level Table 1 shows AnsAcc results of
competitive baselines on the test set. Compared
with them, STAR achieves the highest, 65.05%,
which demonstrates its superiority. Meanwhile, it
verifies the feasibility of follow-up query analysis
in cooperating with context-independent semantic
parsing. Compared with CONCAT, our approach
boosts over 39.81% on COARSE2FINE for the ca-
pability of context-dependent semantic parsing.

Query Level Table 1 also shows SymAcc and
BLEU of different methods on the dev and test
sets. As observed, STAR significantly outper-
forms all baselines, demonstrating its effective-
ness. For example, STAR achieves an absolute
improvement of 8.03% BLEU over the state-of-
the-art baseline FANDA on testing. Moreover, the
rewriting-based baselines, even the simplest CON-
CAT, perform better than the generation-based



5322

Variant SymAcc (%) BLEU (%)

STAR 55.38 67.62

– Phase I 40.63 61.82
– Phase II 23.12 48.65
– RL 41.25 60.19
+ Basic Reward 43.13 58.48
+ Oracle Reward 45.20 63.04
+ Uniform Reward 53.40 66.93

Table 2: Variant results on FollowUp dev set.

0 20 40 60
Epoch

50

60

70

80

B
LE

U
 (%

) STAR
Basic Reward
Oracle Reward
Uniform Reward

Figure 4: Learning curve on FollowUp train set.

ones. It suggests that the idea of rewriting is
more reasonable for the task, where precedent and
follow-up queries are of full utilization.

3.2.2 Variant Analysis
Besides baselines, we also conduct experiments
with several variants of STAR to further validate
the design of our model. As shown in Table 2,
there are three variants with ablation: “– Phase
I” takes out SplitNet and performs Phase II on
word level; “– Phase II” performs random guess in
the recombination process for testing; and “– RL”
only contains pre-training. The SymAcc drops
from about 55% to 40% by ablating Phase I, and
to 23% by ablating Phase II. Their poor perfor-
mances indicate both of the two phases are in-
dispensable. “– RL” also performs worse, which
again demonstrates the rationality of applying RL.

Three more variants are presented with differ-
ent designs of R(q, z) to prove the efficiency and
effectiveness of Equation 5 as a reward. “+ Basic
Reward” represents the most straightforward RE-
INFORCE algorithm, which samples both q ∈ Q
and z̃∈Z , then takes r(z, z̃) as R(q, z). “+ Oracle
Reward” assumes the conflicts are always correct
and rewrites R(q, z) as maxz̃∈Z(r(z, z̃)). “+ Uni-
form Reward” assigns the same probability to all
z̃ and obtains R(q, z) as mean(

∑
z̃∈Zr(z, z̃)). As

shown in Table 2 and Figure 4, STAR learns better

Af
ter

the we
ek

6 , wh
ich
op

po
ne

nts

wo
n

the res
ult

of the ma
tch

?

Precedent Query

how
about

before
week

10
?F

ol
lo

w
-u

p 
Q

ue
ry

Figure 5: An example of similarity matrix in SplitNet.

and faster than the variants due to the reasonable
reward design. In fact, as mentioned in Section
2.1, the vast action space of the most straightfor-
ward REINFORCE algorithm leads to poor learn-
ing. STAR shrinks the space from |Q|·|Z| down to
|Q| by enumerating z̃. Meanwhile, statistics show
that STAR obtains a 15× speedup over “+ Basic
Reward” on the convergence time.

3.2.3 Case Study
Figure 5 shows a concrete example of the similar-
ity matrix A on attention layer of SplitNet. The
span “before week 10” is evidently more similar
to “After the week 6” than to others, which meets
our expectations. Moreover, the results of three
real cases are shown in Table 3. The spans in blue
are those have conflicts, and the histograms rep-
resent the conflict probabilities to all the spans in
precedent queries. In Case 1, “glebe park”, “ham-
pden park” and “balmoor” are all cell values in the
database table with similar meanings. STAR cor-
rectly finds out the conflict between “compared to
glebe park” and “compared to balmoor” with the
highest probability. Case 2 shows STAR can dis-
cover the interrelation of words, where “the writer
Nancy miller” is learnt as a whole span to re-
place “Nancy miller” in the precedent query. As
for Case 3, STAR successfully performs corefer-
ence resolution and interprets “those two films”
as “greatest love and promised land”. Benefiting
from two phases, STAR is able to deal with di-
verse follow-up scenarios in different domains.

3.2.4 Error Analysis
Our approach works well in most cases except
for few ones, where SplitNet fails. For exam-
ple, given the precedent query “what’s the biggest
zone?” and the follow-up query “the smallest
one”, STAR prefers to recognize “the biggest
zone” and “the smallest one” as two spans, rather



5323

Case Analysis

1
Precedent
Follow-up
STAR

: [ compared to glebe park ] [ , does ] [ hampden park ] [ holds more attendances at capacity ? ]
: [ how about ] [ compared to balmoor ]
: compared to balmoor , does hampden park holds more attendances at capacity ?

2
Precedent
Follow-up
STAR

: [ Is there any book which belongs to ] [ Nancy miller ]
: [ I mean ] [ the writer Nancy miller ]
: Is there any book which belongs to the writer Nancy miller

3
Precedent
Follow-up
STAR

: [ show directors of ] [ greatest love and promised land ]
: [ show air date of ] [ those two films      ]
: show air date of greatest love and promised land

No

Table 3: Case analysis of STAR on FollowUp dataset. Square brackets denote different spans.

Model Precedent Follow-up

DynSP (Iyyer et al., 2017) 70.9 35.8
NP (Neelakantan et al., 2016) 58.9 35.9
NP + STAR 58.9 38.1
DynSP + STAR 70.9 39.5
DynSP∗ (Iyyer et al., 2017) 70.4 41.1

Table 4: Answer accuracy on SQA test set.

than perform split operations inside them. The
SplitNet fails probably because the conflicting
spans, “the biggest”↔ “the smallest” and “zone”
↔ “one”, are adjacent, which makes it difficult to
identify span boundaries well.

3.3 Extension on SQA dataset

Finally, we demonstrate STAR’s extensibility in
working with different annotations. As mentioned
in Section 2.4, by designing r(w, w̃), STAR can
cooperate with the answer annotations. We con-
duct experiments on the SQA dataset, which con-
sists of 6066 query sequences (5042/1024 for
train/test). Each sequence contains multiple nat-
ural language queries and their answers, where we
are only interested in the first query and the imme-
diate follow-up one. As discussed in (Iyyer et al.,
2017), every answer can be represented as a set of
cells in the tables, each of which is a multi-word
value, and the intentions of the follow-up queries
mainly fall into three categories. Column selec-
tion means the follow-up answer is an entire col-
umn; Subset selection means the follow-up answer
is a subset of the precedent answer; and Row se-
lection means the follow-up answer has the same
rows with the precedent answer.

We employ two context-independent parsers,
DynSP (Iyyer et al., 2017) and NP (Neelakan-
tan et al., 2016), which are trained on the SQA
dataset to provide relatively reliable answers for

reward computing. Unfortunately, they both per-
form poorly for the restated queries, as the re-
stated queries are quite different from the origi-
nal queries in SQA. To address the problem, we
redesign the recombination process. Instead of
generating the restated query, we recombine the
predicted precedent answer w̃x and the predicted
follow-up answer w̃y to produce the restated an-
swer w̃. Therefore, the objective of Phase II is to
assign an appropriate intention to each follow-up
span via an additional classifier. The goal of Phase
I turns to split out spans having obvious intentions
such as “of those”. The way of recombining an-
swer is determined by the voting from intentions
on all spans. If the intention column selection
wins, then w̃ = w̃y; for subset selection, we ob-
tain the subset w̃ by taking the rows of w̃y as the
constraint and applying it to w̃x; and for row se-
lection, we take the rows of w̃x and the columns of
w̃y as the constraints, then apply them to the whole
database table to obtain the answer w̃ retrieved by
the predicted SQL. The reward r(w, w̃) is com-
puted based on Jaccard similarity between the gold
answer w and w̃ as in (Iyyer et al., 2017), and the
overall training process remains unchanged.

Table 4 shows the answer accuracy of precedent
and follow-up queries on test set. DynSP∗ (Iyyer
et al., 2017) is designed for SQA by introducing
a special action Subsequent to handle follow-up
queries based on DynSP. DynSP∗ is incapable of
being extended to work with the annotation of the
restated queries. We attempt to apply DynSP∗

(trained on SQA) directly on FollowUp test set,
which results in an extremely low AnsAcc. On the
contrary, STAR is extensible. “+STAR” means
our method STAR is incorporated into the context-
independent parser and empowers them with the
ability to perform follow-up query analysis. As
observed, integrating STAR consistently improves



5324

performance for follow-up queries, which demon-
strates the effectiveness of STAR in collaborating
with different semantic parsers. The comparable
results of DynSP+STAR to DynSP∗ further veri-
fies the promising extensibility of STAR.

4 Related Work

Our work is closely related to two lines of
work: context-dependent sentence analysis and
reinforcement learning. From the perspective of
context-dependent sentence analysis, our work is
related to researches like reading comprehension
in dialogue (Reddy et al., 2019; Choi et al., 2018),
dialogue state tracking (Williams et al., 2013),
conversational question answering in knowledge
base (Saha et al., 2018; Guo et al., 2018),
context-dependent logic forms (Long et al., 2016),
and non-sentential utterance resolution in open-
domain question answering (Raghu et al., 2015;
Kumar and Joshi, 2017). The main difference is
that we focus on the context-dependent queries
in NLIDB which contain complex scenarios. As
for the most related context-dependent semantic
parsing, Zettlemoyer and Collins (2009) proposes
a context-independent CCG parser and then con-
duct context-dependent substitution, Iyyer et al.
(2017) presents a search-based method for sequen-
tial questions, and Suhr et al. (2018) presents a
sequence-to-sequence model to solve the problem.
Compared to their methods, our work achieves
context-dependent semantic parsing via learnable
restated queries and existing context-independent
semantic parsers.

Moreover, the technique of reinforcement learn-
ing has also been successfully applied to natu-
ral language tasks in dialogue, such as hyper-
parameters tuning for coreference resolution
(Clark and Manning, 2016), sequential question
answering (Iyyer et al., 2017) and coherent dia-
logue responses generation (Li et al., 2016). In
this paper, we employ reinforcement learning to
capture the structures of queries, which is similar
to Zhang et al. (2018) for text classification.

5 Conclusion and Future Work

We present a novel method, named Split-And-
Recombine (STAR), to perform follow-up query
analysis. A two-phase process has been designed:
one for splitting precedent and follow-up queries
into spans, and the other for recombining them.
Experiments on two different datasets demonstrate

the effectiveness and extensibility of our method.
For future work, we may extend our method to
other natural language tasks.

Acknowledgments

We thank all the anonymous reviewers for their
valuable comments. This work was supported by
the National Natural Science Foundation of China
(Grant Nos. U1736217 and 61932003).

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2015. Neural machine translation by jointly
learning to align and translate. In Proceedings of
the 3rd International Conference on Learning Rep-
resentations, ICLR 2015, San Diego, CA, USA, May
7-9, 2015.

Avrim Blum, Nika Haghtalab, and Ariel D. Procaccia.
2015. Variational dropout and the local reparam-
eterization trick. In Advances in Neural Informa-
tion Processing Systems 28: Annual Conference on
Neural Information Processing Systems, NIPS 2015,
Montreal, Quebec, Canada, December 7-12, 2015,
pages 2575–2583.

Eunsol Choi, He He, Mohit Iyyer, Mark Yatskar, Wen-
tau Yih, Yejin Choi, Percy Liang, and Luke Zettle-
moyer. 2018. QuAC: Question answering in con-
text. In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Process-
ing, EMNLP 2018, Brussels, Belgium, October 31
- November 4, 2018, pages 2174–2184.

Kevin Clark and Christopher D. Manning. 2016. Deep
reinforcement learning for mention-ranking corefer-
ence models. In Proceedings of the 2016 Confer-
ence on Empirical Methods in Natural Language
Processing, EMNLP 2016, Austin, Texas, USA,
November 1-4, 2016, pages 2256–2262.

James Cross and Liang Huang. 2016. Span-based
constituency parsing with a structure-label system
and provably optimal dynamic oracles. In Proceed-
ings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP 2016,
Austin, Texas, USA, November 1-4, 2016, pages 1–
11.

Deborah A. Dahl, Madeleine Bates, Michael Brown,
William M. Fisher, Kate Hunicke-Smith, David S.
Pallett, Christine Pao, Alexander I. Rudnicky, and
Elizabeth Shriberg. 1994. Expanding the scope of
the ATIS task: The ATIS-3 corpus. In Proceed-
ings of the 1994 Conference of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies, NAACL-
HLT 1994, ,Plainsboro, New Jerey, USA, March 8-
11, 1994.

http://arxiv.org/abs/1409.0473
http://arxiv.org/abs/1409.0473
http://papers.nips.cc/paper/5666-variational-dropout-and-the-local-reparameterization-trick
http://papers.nips.cc/paper/5666-variational-dropout-and-the-local-reparameterization-trick
https://aclanthology.info/papers/D18-1241/d18-1241
https://aclanthology.info/papers/D18-1241/d18-1241
http://aclweb.org/anthology/D/D16/D16-1245.pdf
http://aclweb.org/anthology/D/D16/D16-1245.pdf
http://aclweb.org/anthology/D/D16/D16-1245.pdf
http://aclweb.org/anthology/D/D16/D16-1001.pdf
http://aclweb.org/anthology/D/D16/D16-1001.pdf
http://aclweb.org/anthology/D/D16/D16-1001.pdf
http://aclweb.org/anthology/H/H94/H94-1010.pdf
http://aclweb.org/anthology/H/H94/H94-1010.pdf


5325

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2019. BERT: pre-training of
deep bidirectional transformers for language under-
standing. In Proceedings of the 2019 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies, NAACL-HLT 2019, Minneapolis, MN,
USA, June 2-7, 2019, Volume 1:Long and Short Pa-
pers, pages 4171–4186.

Li Dong and Mirella Lapata. 2018. Coarse-to-Fine de-
coding for neural semantic parsing. In Proceedings
of the 56th Annual Meeting of the Association for
Computational Linguistics, ACL 2018, Melbourne,
Australia, July 15-20, 2018, Volume 1: Long Papers,
pages 731–742.

Matt Gardner, Joel Grus, Mark Neumann, Oyvind
Tafjord, Pradeep Dasigi, Nelson F. Liu, Matthew Pe-
ters, Michael Schmitz, and Luke Zettlemoyer. 2018.
AllenNLP: A deep semantic natural language pro-
cessing platform. In Proceedings of Workshop for
NLP Open Source Software, NLP-OSS, of the 56th
Annual Meeting of the Association for Computa-
tional Linguistics, ACL 2018, Melbourne, Australia,
July 15-20, 2018, pages 1–6.

Jiatao Gu, Zhengdong Lu, Hang Li, and Victor O. K.
Li. 2016. Incorporating copying mechanism in
sequence-to-sequence learning. In Proceedings of
the 54th Annual Meeting of the Association for Com-
putational Linguistics, ACL 2016, Berlin, Germany,
August 7-12, 2016, Volume 1: Long Papers.

Daya Guo, Duyu Tang, Nan Duan, Ming Zhou, and
Jian Yin. 2018. Dialog-to-action: Conversational
question answering over a large-scale knowledge
base. In Advances in Neural Information Processing
Systems 31: Annual Conference on Neural Informa-
tion Processing Systems, NeurIPS 2018, Montréal,
Canada, December 3-8, 2018, pages 2946–2955.

Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long
short-term memory. Neural Computation, Volume
9, pages 1735–1780.

Mohit Iyyer, Wen-tau Yih, and Ming-Wei Chang. 2017.
Search-based neural structured learning for sequen-
tial question answering. In Proceedings of the 55th
Annual Meeting of the Association for Computa-
tional Linguistics, ACL 2017, Vancouver, Canada,
July 30 - August 4, Volume 1: Long Papers, pages
1821–1831.

Yoon Kim. 2014. Convolutional neural networks for
sentence classification. In Proceedings of the 2014
Conference on Empirical Methods in Natural Lan-
guage Processing, EMNLP 2014, Doha, Qatar, Oc-
tober 25-29, 2014, pages 1746–1751.

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In Proceed-
ings of the 3rd International Conference on Learn-
ing Representations, ICLR 2015, San Diego, CA,
USA, May 7-9, 2015.

Vineet Kumar and Sachindra Joshi. 2017. Incomplete
follow-up question resolution using retrieval based
sequence to sequence learning. In Proceedings of
the 40th International ACM Conference on Research
and Development in Information Retrieval, SIGIR
2017, Shinjuku, Tokyo, Japan, August 7-11, 2017,
pages 705–714.

Kenton Lee, Luheng He, Mike Lewis, and Luke Zettle-
moyer. 2017. End-to-end neural coreference reso-
lution. In Proceedings of the 2017 Conference on
Empirical Methods in Natural Language Process-
ing, EMNLP 2017, Copenhagen, Denmark, Septem-
ber 9-11, 2017, pages 188–197.

Jiwei Li, Will Monroe, Alan Ritter, Dan Jurafsky,
Michel Galley, and Jianfeng Gao. 2016. Deep rein-
forcement learning for dialogue generation. In Pro-
ceedings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP 2016,
Austin, Texas, USA, November 1-4, 2016, pages
1192–1202.

Chen Liang, Jonathan Berant, Quoc V. Le, Kenneth D.
Forbus, and Ni Lao. 2017. Neural symbolic ma-
chines: Learning semantic parsers on freebase with
weak supervision. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics, ACL 2017, Vancouver, Canada, July 30-
August 4, 2017, Volume 1: Long Papers, pages 23–
33.

Qian Liu, Bei Chen, Jian-Guang Lou, Ge Jin, and
Dongmei Zhang. 2019. FANDA: A novel approach
to perform follow-up query analysis. In Proceed-
ings of the 33rd AAAI Conference on Artificial Intel-
ligence, AAAI 2019, Honolulu, Hawaii, USA, Jan-
uary 27 - February 1, 2019, pages 6770–6777.

Reginald Long, Panupong Pasupat, and Percy Liang.
2016. Simpler context-dependent logical forms via
model projections. In Proceedings of the 54th An-
nual Meeting of the Association for Computational
Linguistics, ACL 2016, Berlin, Germany, August 7-
12, 2016, Volume 1: Long Papers.

Scott Miller, David Stallard, Robert J. Bobrow, and
Richard M. Schwartz. 1996. A fully statistical ap-
proach to natural language interfaces. In Proceed-
ings of the 34th Annual Meeting of the Association
for Computational Linguistics, ACL 1996, Univer-
sity of California, Santa Cruz, California, June 24-
27, 1996, pages 55–61.

Arvind Neelakantan, Quoc V. Le, and Ilya Sutskever.
2016. Neural programmer: Inducing latent pro-
grams with gradient descent. In Proceedings of the
4th International Conference on Learning Represen-
tations, ICLR 2016, San Juan, Puerto Rico, May 2-4,
2016.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. BLEU: a method for automatic
evaluation of machine translation. In Proceedings of

https://aclweb.org/anthology/papers/N/N19/N19-1423/
https://aclweb.org/anthology/papers/N/N19/N19-1423/
https://aclweb.org/anthology/papers/N/N19/N19-1423/
https://doi.org/10.18653/v1/P18-1068
https://doi.org/10.18653/v1/P18-1068
https://doi.org/10.18653/v1/W18-2501
https://doi.org/10.18653/v1/W18-2501
https://www.aclweb.org/anthology/P16-1154/
https://www.aclweb.org/anthology/P16-1154/
http://papers.nips.cc/paper/7558-dialog-to-action-conversational-question-answering-over-a-large-scale-knowledge-base
http://papers.nips.cc/paper/7558-dialog-to-action-conversational-question-answering-over-a-large-scale-knowledge-base
http://papers.nips.cc/paper/7558-dialog-to-action-conversational-question-answering-over-a-large-scale-knowledge-base
https://doi.org/10.1162/neco.1997.9.8.1735
https://doi.org/10.1162/neco.1997.9.8.1735
https://doi.org/10.18653/v1/P17-1167
https://doi.org/10.18653/v1/P17-1167
http://aclweb.org/anthology/D/D14/D14-1181.pdf
http://aclweb.org/anthology/D/D14/D14-1181.pdf
http://arxiv.org/abs/1412.6980
http://arxiv.org/abs/1412.6980
https://doi.org/10.1145/3077136.3080801
https://doi.org/10.1145/3077136.3080801
https://doi.org/10.1145/3077136.3080801
https://aclanthology.info/papers/D17-1018/d17-1018
https://aclanthology.info/papers/D17-1018/d17-1018
http://aclweb.org/anthology/D/D16/D16-1127.pdf
http://aclweb.org/anthology/D/D16/D16-1127.pdf
https://doi.org/10.18653/v1/P17-1003
https://doi.org/10.18653/v1/P17-1003
https://doi.org/10.18653/v1/P17-1003
https://aaai.org/ojs/index.php/AAAI/article/view/4651
https://aaai.org/ojs/index.php/AAAI/article/view/4651
https://www.aclweb.org/anthology/P16-1138/
https://www.aclweb.org/anthology/P16-1138/
https://www.aclweb.org/anthology/P96-1008/
https://www.aclweb.org/anthology/P96-1008/
http://arxiv.org/abs/1511.04834
http://arxiv.org/abs/1511.04834
http://www.aclweb.org/anthology/P02-1040.pdf
http://www.aclweb.org/anthology/P02-1040.pdf


5326

the 40th Annual Meeting of the Association for Com-
putational Linguistics, ACL 2002, Philadelphia, PA,
USA., July 6-12, 2002, pages 311–318.

Adam Paszke, Sam Gross, Soumith Chintala, Gre-
gory Chanan, Edward Yang, Zachary DeVito, Zem-
ing Lin, Alban Desmaison, Luca Antiga, and Adam
Lerer. 2017. Automatic differentiation in PyTorch.
In Advances in Neural Information Processing Sys-
tems 30: Annual Conference on Neural Information
Processing Systems, NIPS 2017, Long Beach, CA,
USA, December 4-9, 2017.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. GloVe: Global vectors for
word representation. In Proceedings of the 2014
Conference on Empirical Methods in Natural Lan-
guage Processing, EMNLP 2014, Doha, Qatar, Oc-
tober 25-29, 2014, pages 1532–1543.

Dinesh Raghu, Sathish Indurthi, Jitendra Ajmera, and
Sachindra Joshi. 2015. A statistical approach for
non-sentential utterance resolution for interactive
QA system. In Proceedings of the 16th Annual
Meeting of the Special Interest Group on Discourse
and Dialogue, SIGDIAL 2015, Prague, Czech Re-
public, September 2-4, 2015, pages 335–343.

Siva Reddy, Danqi Chen, and Christopher D. Manning.
2019. CoQA: A conversational question answering
challenge. Transactions of the Association for Com-
putational Linguistics, Volume 7, pages 249–266.

Amrita Saha, Vardaan Pahuja, Mitesh M. Khapra,
Karthik Sankaranarayanan, and Sarath Chandar.
2018. Complex sequential question answering: To-
wards learning to converse over linked question an-
swer pairs with a knowledge graph. In Proceedings
of the 32nd AAAI Conference on Artificial Intelli-
gence, AAAI 2018, New Orleans, Louisiana, USA,
February 2-7, 2018, pages 705–713.

Mike Schuster and Kuldip K. Paliwal. 1997. Bidirec-
tional recurrent neural networks. IEEE Trans. Sig-
nal Processing, Volume 45, pages 2673–2681.

Min Joon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2017. Bidirectional attention
flow for machine comprehension. In Proceedings of
the 5th International Conference on Learning Rep-
resentations, ICLR 2017, Toulon, France, April 24-
26, 2017.

Alane Suhr, Srinivasan Iyer, and Yoav Artzi. 2018.
Learning to map context-dependent sentences to ex-
ecutable formal queries. In Proceedings of the 2018
Conference of the North American Chapter of the
Association for Computational Linguistics: Human
Language Technologies, NAACL-HLT 2018, New
Orleans, Louisiana, USA, June 1-6, 2018, Volume
1:Long Papers, pages 2238–2249.

Ilya Sutskever, Oriol Vinyals, and Quoc V. Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in Neural Information Pro-
cessing Systems 27: Annual Conference on Neural

Information Processing Systems, NIPS 2014, Mon-
treal, Quebec, Canada, December 8-13, 2014, pages
3104–3112.

Richard S. Sutton and Andrew G. Barto. 1998. Rein-
forcement learning: An introduction. IEEE Trans.
Neural Networks, Volume 9, pages 1054–1054.

Richard S. Sutton, David A. McAllester, Satinder P.
Singh, and Yishay Mansour. 1999. Policy gradi-
ent methods for reinforcement learning with func-
tion approximation. In Advances in Neural Informa-
tion Processing Systems 12: Annual Conference on
Neural Information Processing Systems, NIPS 1999,
Denver Colorado, USA, November 29 - December 4,
1999, pages 1057–1063.

Wenhui Wang and Baobao Chang. 2016. Graph-based
dependency parsing with bidirectional LSTM. In
Proceedings of the 54th Annual Meeting of the As-
sociation for Computational Linguistics, ACL 2016,
Berlin, Germany, August 7-12, 2016, Volume 1:
Long Papers.

Lex Weaver and Nigel Tao. 2001. The optimal reward
baseline for gradient-based reinforcement learning.
In Proceedings of the 17th Conference in Uncer-
tainty in Artificial Intelligence, UAI 2001, Seattle,
Washington, USA, August 2-5, 2001, pages 538–545.

Jason D. Williams, Antoine Raux, Deepak Ramachan-
dran, and Alan W. Black. 2013. The dialog state
tracking challenge. In Proceedings of the 14th An-
nual Meeting of the Special Interest Group on Dis-
course and Dialogue, SIGDIAL 2013, Metz, France,
August 22-24, 2013, pages 404–413.

Ronald J. Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. Machine Learning, Volume 8, pages
229–256.

Luke S. Zettlemoyer and Michael Collins. 2009.
Learning context-dependent mappings from sen-
tences to logical form. In Proceedings of the 47th
Annual Meeting of the Association for Computa-
tional Linguistics, ACL 2009, and the 4th Interna-
tional Joint Conference on Natural Language, IJC-
NLP 2009, Singapore, August 2-7, 2009, pages 976–
984.

Tianyang Zhang, Minlie Huang, and Li Zhao. 2018.
Learning structured representation for text classifi-
cation via reinforcement learning. In Proceedings of
the 32nd AAAI Conference on Artificial Intelligence,
AAAI-18, New Orleans, Louisiana, USA, February
2-7, 2018, pages 6053–6060.

https://openreview.net/pdf?id=BJJsrmfCZ
http://aclweb.org/anthology/D/D14/D14-1162.pdf
http://aclweb.org/anthology/D/D14/D14-1162.pdf
http://aclweb.org/anthology/W/W15/W15-4645.pdf
http://aclweb.org/anthology/W/W15/W15-4645.pdf
http://aclweb.org/anthology/W/W15/W15-4645.pdf
https://transacl.org/ojs/index.php/tacl/article/view/1572
https://transacl.org/ojs/index.php/tacl/article/view/1572
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/17181
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/17181
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/17181
https://doi.org/10.1109/78.650093
https://doi.org/10.1109/78.650093
https://openreview.net/forum?id=HJ0UKP9ge
https://openreview.net/forum?id=HJ0UKP9ge
https://aclanthology.info/papers/N18-1203/n18-1203
https://aclanthology.info/papers/N18-1203/n18-1203
http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks
http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks
https://doi.org/10.1109/TNN.1998.712192
https://doi.org/10.1109/TNN.1998.712192
http://papers.nips.cc/paper/1713-policy-gradient-methods-for-reinforcement-learning-with-function-approximation
http://papers.nips.cc/paper/1713-policy-gradient-methods-for-reinforcement-learning-with-function-approximation
http://papers.nips.cc/paper/1713-policy-gradient-methods-for-reinforcement-learning-with-function-approximation
https://www.aclweb.org/anthology/P16-1218/
https://www.aclweb.org/anthology/P16-1218/
https://dslpitt.org/uai/displayArticleDetails.jsp?mmnu=1&smnu=2&article_id=141&proceeding_id=17
https://dslpitt.org/uai/displayArticleDetails.jsp?mmnu=1&smnu=2&article_id=141&proceeding_id=17
http://aclweb.org/anthology/W/W13/W13-4065.pdf
http://aclweb.org/anthology/W/W13/W13-4065.pdf
https://doi.org/10.1007/BF00992696
https://doi.org/10.1007/BF00992696
https://doi.org/10.1007/BF00992696
http://www.aclweb.org/anthology/P09-1110
http://www.aclweb.org/anthology/P09-1110
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16537
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16537

