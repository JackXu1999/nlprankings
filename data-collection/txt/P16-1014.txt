



















































Pointing the Unknown Words


Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 140–149,
Berlin, Germany, August 7-12, 2016. c©2016 Association for Computational Linguistics

Pointing the Unknown Words

Caglar Gulcehre
Université de Montréal

Sungjin Ahn
Université de Montréal

Ramesh Nallapati
IBM T.J. Watson Research

Bowen Zhou
IBM T.J. Watson Research

Yoshua Bengio
Université de Montréal
CIFAR Senior Fellow

Abstract

The problem of rare and unknown words
is an important issue that can potentially
effect the performance of many NLP sys-
tems, including traditional count-based
and deep learning models. We propose a
novel way to deal with the rare and unseen
words for the neural network models us-
ing attention. Our model uses two softmax
layers in order to predict the next word in
conditional language models: one predicts
the location of a word in the source sen-
tence, and the other predicts a word in the
shortlist vocabulary. At each timestep, the
decision of which softmax layer to use is
adaptively made by an MLP which is con-
ditioned on the context. We motivate this
work from a psychological evidence that
humans naturally have a tendency to point
towards objects in the context or the envi-
ronment when the name of an object is not
known. Using our proposed model, we ob-
serve improvements on two tasks, neural
machine translation on the Europarl En-
glish to French parallel corpora and text
summarization on the Gigaword dataset.

1 Introduction

Words are the basic input/output units in most of
the NLP systems, and thus the ability to cover a
large number of words is a key to building a ro-
bust NLP system. However, considering that (i)
the number of all words in a language including
named entities is very large and that (ii) language
itself is an evolving system (people create new
words), this can be a challenging problem.

A common approach followed by the recent
neural network based NLP systems is to use a
softmax output layer where each of the output di-

mension corresponds to a word in a predefined
word-shortlist. Because computing high dimen-
sional softmax is computationally expensive, in
practice the shortlist is limited to have only top-
K most frequent words in the training corpus. All
other words are then replaced by a special word,
called the unknown word (UNK).

The shortlist approach has two fundamental
problems. The first problem, which is known as
the rare word problem, is that some of the words
in the shortlist occur less frequently in the train-
ing set and thus are difficult to learn a good repre-
sentation, resulting in poor performance. Second,
it is obvious that we can lose some important in-
formation by mapping different words to a single
dummy token UNK. Even if we have a very large
shortlist including all unique words in the training
set, it does not necessarily improve the test perfor-
mance, because there still exists a chance to see an
unknown word at test time. This is known as the
unknown word problem. In addition, increasing
the shortlist size mostly leads to increasing rare
words due to Zipf’s Law.

These two problems are particularly critical
in language understanding tasks such as factoid
question answering (Bordes et al., 2015) where the
words that we are interested in are often named en-
tities which are usually unknown or rare words.

In a similar situation, where we have a limited
information on how to call an object of interest, it
seems that humans (and also some primates) have
an efficient behavioral mechanism of drawing at-
tention to the object: pointing (Matthews et al.,
2012). Pointing makes it possible to deliver in-
formation and to associate context to a particular
object without knowing how to call it. In partic-
ular, human infants use pointing as a fundamental
communication tool (Tomasello et al., 2007).

In this paper, inspired by the pointing behav-
ior of humans and recent advances in the atten-

140



tion mechanism (Bahdanau et al., 2014) and the
pointer networks (Vinyals et al., 2015), we pro-
pose a novel method to deal with the rare or un-
known word problem. The basic idea is that we
can see many NLP problems as a task of predict-
ing target text given context text, where some of
the target words appear in the context as well. We
observe that in this case we can make the model
learn to point a word in the context and copy it to
the target text, as well as when to point. For exam-
ple, in machine translation, we can see the source
sentence as the context, and the target sentence as
what we need to predict. In Figure 1, we show
an example depiction of how words can be copied
from source to target in machine translation. Al-
though the source and target languages are differ-
ent, many of the words such as named entities are
usually represented by the same characters in both
languages, making it possible to copy. Similarly,
in text summarization, it is natural to use some
words in the original text in the summarized text
as well.

Specifically, to predict a target word at each
timestep, our model first determines the source of
the word generation, that is, whether to take one
from a predefined shortlist or to copy one from
the context. For the former, we apply the typical
softmax operation, and for the latter, we use the
attention mechanism to obtain the pointing soft-
max probability over the context words and pick
the one of high probability. The model learns this
decision so as to use the pointing only when the
context includes a word that can be copied to the
target. This way, our model can predict even the
words which are not in the shortlist, as long as
it appears in the context. Although some of the
words still need to be labeled as UNK, i.e., if it is
neither in the shortlist nor in the context, in ex-
periments we show that this learning when and
where to point improves the performance in ma-
chine translation and text summarization.

Guillaume et Cesar ont une voiture bleue a Lausanne.

Guillaume and Cesar have a blue car in Lausanne.
Copy Copy Copy

French:

English:

Figure 1: An example of how copying can happen
for machine translation. Common words that ap-
pear both in source and the target can directly be
copied from input to source. The rest of the un-
known in the target can be copied from the input
after being translated with a dictionary.

The rest of the paper is organized as follows. In
the next section, we review the related works in-
cluding pointer networks and previous approaches
to the rare/unknown problem. In Section 3, we
review the neural machine translation with atten-
tion mechanism which is the baseline in our ex-
periments. Then, in Section 4, we propose our
method dealing with the rare/unknown word prob-
lem, called the Pointer Softmax (PS). The exper-
imental results are provided in the Section 5 and
we conclude our work in Section 6.

2 Related Work

The attention-based pointing mechanism is intro-
duced first in the pointer networks (Vinyals et al.,
2015). In the pointer networks, the output space of
the target sequence is constrained to be the obser-
vations in the input sequence (not the input space).
Instead of having a fixed dimension softmax out-
put layer, softmax outputs of varying dimension is
dynamically computed for each input sequence in
such a way to maximize the attention probability
of the target input. However, its applicability is
rather limited because, unlike our model, there is
no option to choose whether to point or not; it al-
ways points. In this sense, we can see the pointer
networks as a special case of our model where we
always choose to point a context word.

Several approaches have been proposed towards
solving the rare words/unknown words problem,
which can be broadly divided into three categories.
The first category of the approaches focuses on
improving the computation speed of the softmax
output so that it can maintain a very large vocabu-
lary. Because this only increases the shortlist size,
it helps to mitigate the unknown word problem,
but still suffers from the rare word problem. The
hierarchical softmax (Morin and Bengio, 2005),
importance sampling (Bengio and Senécal, 2008;
Jean et al., 2014), and the noise contrastive esti-
mation (Gutmann and Hyvärinen, 2012; Mnih and
Kavukcuoglu, 2013) methods are in the class.

The second category, where our proposed
method also belongs to, uses information from the
context. Notable works are (Luong et al., 2015)
and (Hermann et al., 2015). In particular, ap-
plying to machine translation task, (Luong et al.,
2015) learns to point some words in source sen-
tence and copy it to the target sentence, similarly
to our method. However, it does not use atten-
tion mechanism, and by having fixed sized soft-

141



max output over the relative pointing range (e.g.,
-7, . . . , -1, 0, 1, . . . , 7), their model (the Posi-
tional All model) has a limitation in applying to
more general problems such as summarization and
question answering, where, unlike machine trans-
lation, the length of the context and the pointing
locations in the context can vary dramatically. In
question answering setting, (Hermann et al., 2015)
have used placeholders on named entities in the
context. However, the placeholder id is directly
predicted in the softmax output rather than predict-
ing its location in the context.

The third category of the approaches changes
the unit of input/output itself from words to a
smaller resolution such as characters (Graves,
2013) or bytecodes (Sennrich et al., 2015; Gillick
et al., 2015). Although this approach has the
main advantage that it could suffer less from the
rare/unknown word problem, the training usually
becomes much harder because the length of se-
quences significantly increases.

Simultaneously to our work, (Gu et al., 2016)
and (Cheng and Lapata, 2016) proposed models
that learn to copy from source to target and both
papers analyzed their models on summarization
tasks.

3 Neural Machine Translation Model
with Attention

As the baseline neural machine translation sys-
tem, we use the model proposed by (Bahdanau et
al., 2014) that learns to (soft-)align and translate
jointly. We refer this model as NMT.

The encoder of the NMT is a bidirectional
RNN (Schuster and Paliwal, 1997). The forward
RNN reads input sequence x = (x1, . . . , xT )
in left-to-right direction, resulting in a sequence
of hidden states (

−→
h 1, . . . ,

−→
h T ). The backward

RNN reads x in the reversed direction and outputs
(
←−
h 1, . . . ,

←−
h T ). We then concatenate the hidden

states of forward and backward RNNs at each time
step and obtain a sequence of annotation vectors
(h1, . . . ,hT ) where hj =

[−→
h j ||←−h j

]
. Here, ||

denotes the concatenation operator. Thus, each an-
notation vector hj encodes information about the
j-th word with respect to all the other surrounding
words in both directions.

In the decoder, we usually use gated recur-
rent unit (GRU) (Cho et al., 2014; Chung et al.,
2014). Specifically, at each time-step t, the soft-
alignment mechanism first computes the relevance

weight etj which determines the contribution of
annotation vector hj to the t-th target word. We
use a non-linear mapping f (e.g., MLP) which
takes hj , the previous decoder’s hidden state st−1
and the previous output yt−1 as input:

etj = f(st−1,hj , yt−1).

The outputs etj are then normalized as follows:

ltj =
exp(etj)∑T
k=1 exp(etk)

. (1)

We call ltj as the relevance score, or the align-
ment weight, of the j-th annotation vector.

The relevance scores are used to get the context
vector ct of the t-th target word in the translation:

ct =
T∑
j=1

ltjhj ,

The hidden state of the decoder st is computed
based on the previous hidden state st−1, the con-
text vector ct and the output word of the previous
time-step yt−1:

st = fr(st−1, yt−1, ct), (2)

where fr is GRU.
We use a deep output layer (Pascanu et al.,

2013) to compute the conditional distribution over
words:

p(yt = a|y<t,x) ∝
exp

(
ψa(Wo,bo)fo(st, yt−1, ct)

)
,

(3)

where W is a learned weight matrix and b is a
bias of the output layer. fo is a single-layer feed-
forward neural network. ψ(Wo,bo)(·) is a function
that performs an affine transformation on its input.
And the superscript a in ψa indicates the a-th col-
umn vector of ψ.

The whole model, including both the encoder
and the decoder, is jointly trained to maximize the
(conditional) log-likelihood of target sequences
given input sequences, where the training corpus
is a set of (xn,yn)’s. Figure 2 illustrates the ar-
chitecture of the NMT.

4 The Pointer Softmax

In this section, we introduce our method, called
as the pointer softmax (PS), to deal with the rare
and unknown words. The pointer softmax can be

142



lt

wt

st-1

ct

  ... st

h0 hk...

  ...st+1

Encoder

Figure 2: A depiction of neural machine transla-
tion architecture with attention. At each timestep,
the model generates the attention weights lt. We
use lt the encoder’s hidden state to obtain the con-
text ct. The decoder uses ct to predict a vector of
probabilities for the words wt by using softmax.

applicable approach to many NLP tasks, because
it resolves the limitations about unknown words
for neural networks. It can be used in parallel with
other existing techniques such as the large vocabu-
lary trick (Jean et al., 2014). Our model learns two
key abilities jointly to make the pointing mech-
anism applicable in more general settings: (i) to
predict whether it is required to use the pointing
or not at each time step and (ii) to point any lo-
cation of the context sequence whose length can
vary widely over examples. Note that the pointer
networks (Vinyals et al., 2015) are in lack of the
ability (i), and the ability (ii) is not achieved in the
models by (Luong et al., 2015).

To achieve this, our model uses two softmax
output layers, the shortlist softmax and the loca-
tion softmax. The shortlist softmax is the same
as the typical softmax output layer where each
dimension corresponds a word in the predefined
word shortlist. The location softmax is a pointer
network where each of the output dimension cor-
responds to the location of a word in the context
sequence. Thus, the output dimension of the loca-
tion softmax varies according to the length of the
given context sequence.

At each time-step, if the model decides to use
the shortlist softmax, we generate a word wt from
the shortlist. Otherwise, if it is expected that the
context sequence contains a word which needs to
be generated at the time step, we obtain the loca-
tion of the context word lt from the location soft-
max. The key to making this possible is decid-
ing when to use the shortlist softmax or the lo-

cation softmax at each time step. In order to ac-
complish this, we introduce a switching network
to the model. The switching network, which is
a multilayer perceptron in our experiments, takes
the representation of the context sequence (similar
to the input annotation in NMT) and the previous
hidden state of the output RNN as its input. It out-
puts a binary variable zt which indicates whether
to use the shortlist softmax (when zt = 1) or the
location softmax (when zt = 0). Note that if the
word that is expected to be generated at each time-
step is neither in the shortlist nor in the context se-
quence, the switching network selects the shortlist
softmax, and then the shortlist softmax predicts
UNK. The details of the pointer softmax model
can be seen in Figure 3 as well.

lt

wt

st-1

ct

p 1 - p

ft

  ... st

h0 hk...Encoder

Figure 3: A simple depiction of the Pointer Soft-
max(PS) architecture. At each timestep as usuallt,
ct and the wt for the words over the limited vocab-
ulary(shortlist) is being generated. We have an ad-
ditional switching variable zt that decides whether
to use wt or copy the word from the input via lt.
The final word prediction will be performed via
pointer softmax ft which can either copy the word
from the source or predict the word from the short-
list vocabulary.

More specifically, our goal is to maximize the
probability of observing the target word sequence
y = (y1, y2, . . . , yTy) and the word generation
source z = (z1, z2, . . . , zTy), given the context se-
quence x = (x1, x2, . . . , xTx):

pθ(y, z|x) =
Ty∏
t=1

pθ(yt, zt|y<t, z<t,x). (4)

143



Note that the word observation yt can be either
a word wt from the shortlist softmax or a loca-
tion lt from the location softmax, depending on
the switching variable zt.

Considering this, we can factorize the above
equation further

p(y, z|x) =
∏
t∈Tw

p(wt, zt|(y, z)<t,x)×∏
t′∈Tl

p(lt′ , zt′ |(y, z)<t′ ,x). (5)

Here, Tw is a set of time steps where zt = 1, and Tl
is a set of time-steps where zt = 0. And, Tw∪Tl =
{1, 2, . . . , Ty} and Tw ∩ Tl = ∅. We denote all
previous observations at step t by (y, z)<t. Note
also that ht = f((y, z)<t).

Then, the joint probabilities inside each product
can be further factorized as follows:

p(wt, zt|(y, z)<t) = p(wt|zt = 1, (y, z)<t)×
p(zt = 1|(y, z)<t) (6)

p(lt, zt|(y, z)<t) = p(lt|zt = 0, (y, z)<t)×
p(zt = 0|(y, z)<t) (7)

here, we omitted x which is conditioned on all
probabilities in the above.

The switch probability is modeled as a multi-
layer perceptron with binary output:

p(zt = 1|(y, z)<t,x) = σ(f(x,ht−1; θ)) (8)
p(zt = 0|(y, z)<t,x) = 1− σ(f(x,ht−1; θ)). (9)

And p(wt|zt = 1, (y, z)<t,x) is the shortlist soft-
max and p(lt|zt = 0, (y, z)<t,x) is the location
softmax which can be a pointer network. σ(·)
stands for the sigmoid function, σ(x) = 1exp(-x)+1 .

GivenN such context and target sequence pairs,
our training objective is to maximize the following
log likelihood w.r.t. the model parameter θ

arg max
θ

1
N

N∑
n=1

log pθ(yn, zn|xn). (10)

4.1 Basic Components of the Pointer Softmax

In this section, we discuss practical details of the
three fundamental components of the pointer soft-
max. The interactions between these components
and the model is depicted in Figure 3.

Location Softmax lt : The location of the word
to copy from source text to the target is predicted
by the location softmax lt. The location soft-
max outputs the conditional probability distribu-
tion p(lt|zt = 0, (y, z)<t,x). For models using the
attention mechanism such as NMT, we can reuse
the probability distributions over the source words
in order to predict the location of the word to point.
Otherwise we can simply use a pointer network of
the model to predict the location.

Shortlist Softmax wt : The subset of the words
in the vocabulary V is being predicted by the
shortlist softmax wt.

Switching network dt : The switching network
dt is an MLP with sigmoid output function that
outputs a scalar probability of switching between
lt and wt, and represents the conditional prob-
ability distribution p(zt|(y, z)<t,x). For NMT
model, we condition the MLP that outputs the
switching probability on the representation of the
context of the source text ct and the hidden state
of the decoder ht. Note that, during the training,
dt is observed, and thus we do not have to sample.

The output of the pointer softmax, ft will be the
concatenation of the the two vectors, dt ×wt and
(1− dt)× lt.

At test time, we compute Eqn. (6) and (7) for
all shortlist word wt and all location lt, and pick
the word or location of the highest probability.

5 Experiments

In this section, we provide our main experimen-
tal results with the pointer softmax on machine
translation and summarization tasks. In our ex-
periments, we have used the same baseline model
and just replaced the softmax layer with pointer
softmax layer at the language model. We use the
Adadelta (Zeiler, 2012) learning rule for the train-
ing of NMT models. The code for pointer softmax
model is available at https://github.com/
caglar/pointer_softmax.

5.1 The Rarest Word Detection

We construct a synthetic task and run some prelim-
inary experiments in order to compare the results
with the pointer softmax and the regular softmax’s
performance for the rare-words. The vocabulary
size of our synthetic task is |V |= 600 using se-
quences of length 7. The words in the sequences
are sampled according to their unigram distribu-

144



tion which has the form of a geometric distribu-
tion. The task is to predict the least frequent word
in the sequence according to unigram distribution
of the words. During the training, the sequences
are generated randomly. Before the training, val-
idation and test sets are constructed with a fixed
seed.

We use a GRU layer over the input sequence
and take the last-hidden state, in order to get the
summary ct of the input sequence. The wt, lt
are only conditioned on ct, and the MLP pre-
dicting the dt is conditioned on the latent repre-
sentations of wt and lt. We use minibatches of
size 250 using adam adaptive learning rate algo-
rithm (Kingma and Adam, 2015) using the learn-
ing rate of 8 × 10−4 and hidden layers with 1000
units.

We train a model with pointer softmax where
we assign pointers for the rarest 60 words and the
rest of the words are predicted from the shortlist
softmax of size 540. We observe that increasing
the inverse temperature of the sigmoid output of
dt to 2, in other words making the decisions of dt
to become sharper, works better, i.e. dt = σ(2x).

At the end of training with pointer softmax we
obtain the error rate of 17.4% and by using soft-
max over all 600 tokens, we obtain the error-rate
of 48.2%.

5.2 Summarization

In these series of experiments, we use the anno-
tated Gigaword corpus as described in (Rush et al.,
2015). Moreover, we use the scripts that are made
available by the authors of (Rush et al., 2015) 1

to preprocess the data, which results to approxi-
mately 3.8M training examples. This script gen-
erates about 400K validation and an equal number
of test examples, but we use a randomly sampled
subset of 2000 examples each for validation and
testing. We also have made small modifications to
the script to extract not only the tokenized words,
but also system-generated named-entity tags. We
have created two different versions of training data
for pointers, which we call UNK-pointers data and
entity-pointers data respectively.

For the UNK-pointers data, we trim the vocabu-
lary of the source and target data in the training set
and replace a word by the UNK token whenever
a word occurs less than 5 times in either source
or target data separately. Then, we create pointers

1https://github.com/facebook/NAMAS

from each UNK token in the target data to the posi-
tion in the corresponding source document where
the same word occurs in the source, as seen in the
data before UNKs were created. It is possible that
the source can have an UNK in the matching posi-
tion, but we still created a pointer in this scenario
as well. The resulting data has 2.7 pointers per
100 examples in the training set and 9.1 pointers
rate in the validation set.

In the entity-pointers data, we exploit the
named-entity tags in the annotated corpus and first
anonymize the entities by replacing them with an
integer-id that always starts from 1 for each doc-
ument and increments from left to right. Entities
that occur more than once in a single document
share the same id. We create the anonymization at
token-level, so as to allow partial entity matches
between the source and target for multi-token en-
tities. Next, we create a pointer from the target
to source on similar lines as before, but only for
exact matches of the anonymized entities. The re-
sulting data has 161 pointers per 100 examples in
the training set and 139 pointers per 100 examples
in the validation set.

If there are multiple matches in the source,
either in the UNK-pointers data or the entity-
pointers data, we resolve the conflict in favor of
the first occurrence of the matching word in the
source document. In the UNK data, we model
the UNK tokens on the source side using a sin-
gle placeholder embedding that is shared across
all documents, and in the entity-pointers data, we
model each entity-id in the source by a distinct
placeholder, each of which is shared across all
documents.

In all our experiments, we use a bidirectional
GRU-RNN (Chung et al., 2014) for the encoder
and a uni-directional RNN for the decoder. To
speed-up training, we use the large-vocabulary
trick (Jean et al., 2014) where we limit the vocab-
ulary of the softmax layer of the decoder to 2000
words dynamically chosen from the words in the
source documents of each batch and the most com-
mon words in the target vocabulary. In both ex-
periments, we fix the embedding size to 100 and
the hidden state dimension to 200. We use pre-
trained word2vec vectors trained on the same cor-
pus to initialize the embeddings, but we finetuned
them by backpropagating through the embeddings
during training. Our vocabulary sizes are fixed to
125K for source and 75K for target for both exper-

145



iments.
We use the reference data for pointers for the

model only at the training time. During the test
time, the switch makes a decision at every timestep
on which softmax layer to use.

For evaluation, we use full-length Rouge F1 us-
ing the official evaluation tool 2. In their work, the
authors of (Bahdanau et al., 2014) use full-length
Rouge Recall on this corpus, since the maximum
length of limited-length version of Rouge recall
of 75 bytes (intended for DUC data) is already
long for Gigaword summaries. However, since
full-length Recall can unfairly reward longer sum-
maries, we also use full-length F1 in our experi-
ments for a fair comparison between our models,
independent of the summary length.

The experimental results comparing the Pointer
Softmax with NMT model are displayed in Ta-
ble 1 for the UNK pointers data and in Table 2
for the entity pointers data. As the experiments
show, pointer softmax improves over the baseline
NMT on both UNK data and entities data. Our
hope was that the improvement would be larger
for the entities data since the incidence of point-
ers was much greater. However, it turns out this
is not the case, and we suspect the main reason
is anonymization of entities which removed data-
sparsity by converting all entities to integer-ids
that are shared across all documents. We believe
that on de-anonymized data, our model could help
more, since the issue of data-sparsity is more acute
in this case.

Table 1: Results on Gigaword Corpus when point-
ers are used for UNKs in the training data, using
Rouge-F1 as the evaluation metric.

Rouge-1 Rouge-2 Rouge-L
NMT + lvt 34.87 16.54 32.27
NMT + lvt + PS 35.19 16.66 32.51

Table 2: Results on anonymized Gigaword Corpus
when pointers are used for entities, using Rouge-
F1 as the evaluation metric.

Rouge-1 Rouge-2 Rouge-L
NMT + lvt 34.89 16.78 32.37
NMT + lvt + PS 35.11 16.76 32.55

2http://www.berouge.com/Pages/default.
aspx

Table 3: Results on Gigaword Corpus for model-
ing UNK’s with pointers in terms of recall.

Rouge-1 Rouge-2 Rouge-L
NMT + lvt 36.45 17.41 33.90
NMT + lvt + PS 37.29 17.75 34.70

In Table 3, we provide the results for summa-
rization on Gigaword corpus in terms of recall
as also similar comparison done by (Rush et al.,
2015). We observe improvements on all the scores
with the addition of pointer softmax. Let us note
that, since the test set of (Rush et al., 2015) is not
publicly available, we sample 2000 texts with their
summaries without replacement from the valida-
tion set and used those examples as our test set.

In Table 4 we present a few system gener-
ated summaries from the Pointer Softmax model
trained on the UNK pointers data. From those ex-
amples, it is apparent that the model has learned to
accurately point to the source positions whenever
it needs to generate rare words in the summary.

5.3 Neural Machine Translation

In our neural machine translation (NMT) experi-
ments, we train NMT models with attention over
the Europarl corpus (Bahdanau et al., 2014) over
the sequences of length up to 50 for English to
French translation. 3. All models are trained with
early-stopping which is done based on the negative
log-likelihood (NLL) on the development set. Our
evaluations to report the performance of our mod-
els are done on newstest2011 by using BLUE
score. 4

We use 30, 000 tokens for both the source and
the target language shortlist vocabularies (1 of the
token is still reserved for the unknown words).
The whole corpus contains 134, 831 unique En-
glish words and 153, 083 unique French words.
We have created a word-level dictionary from
French to English which contains translation of
15,953 words that are neither in shortlist vocab-
ulary nor dictionary of common words for both
the source and the target. There are about 49, 490
words shared between English and French parallel
corpora of Europarl.

3In our experiments, we use an existing code, pro-
vided in https://github.com/kyunghyuncho/
dl4mt-material, and on the original model we only
changed the last softmax layer for our experiments

4We compute the BLEU score using the multi-blue.perl
script from Moses on tokenized sentence pairs.

146



Table 4: Generated summaries from NMT with PS. Boldface words are the words copied from the source.
Source #1 china ’s tang gonghong set a world record with a clean and

jerk lift of ### kilograms to win the women ’s over-## kilogram
weightlifting title at the asian games on tuesday .

Target #1 china ’s tang <unk>,sets world weightlifting record
NMT+PS #1 china ’s tang gonghong wins women ’s weightlifting weightlift-

ing title at asian games
Source #2 owing to criticism , nbc said on wednesday that it was ending

a three-month-old experiment that would have brought the first
liquor advertisements onto national broadcast network television
.

Target #2 advertising : nbc retreats from liquor commercials
NMT+PS #2 nbc says it is ending a three-month-old experiment
Source #3 a senior trade union official here wednesday called on ghana ’s

government to be “ mindful of the plight ” of the ordinary people
in the country in its decisions on tax increases .

Target #3 tuc official,on behalf of ordinary ghanaians
NMT+PS #3 ghana ’s government urged to be mindful of the plight

During the training, in order to decide whether
to pick a word from the source sentence using at-
tention/pointers or to predict the word from the
short-list vocabulary, we use a simple heuristic. If
the word is not in the short-list vocabulary, we first
check if the word yt itself appears in the source
sentence. If it is not, we check if the word it-
self is in the source sentence by using the shared
words lookup table for the source and the target
language. If the word is in the source sentence,
we then use the location of the word in the source
as the target. Otherwise we check if one of the
English senses from the cross-language dictionary
of the French word is in the source. If it is in the
source sentence, then we use the location of that
word as our translation. Otherwise we just use the
argmax of lt as the target.

For switching network dt, we observed that us-
ing a two-layered MLP with noisy-tanh activation
(Gulcehre et al., 2016) function with residual con-
nection from the lower layer (He et al., 2015) ac-
tivation function to the upper hidden layers im-
proves the BLEU score about 1 points over the
dt using ReLU activation function. We initialized
the biases of the last sigmoid layer of dt to −1
such that if dt becomes more biased toward choos-
ing the shortlist vocabulary at the beginning of the
training. We renormalize the gradients if the norm
of the gradients exceed 1 (Pascanu et al., 2012).

In Table 5, we provided the result of NMT with
pointer softmax and we observe about 3.6 BLEU

Table 5: Europarl Dataset (EN-FR)

BLEU-4
NMT 20.19
NMT + PS 23.76

score improvement over our baseline.
In Figure 4, we show the validation curves

of the NMT model with attention and the NMT
model with shortlist-softmax layer. Pointer soft-
max converges faster in terms of number of mini-
batch updates and achieves a lower validation
negative-log-likelihood (NLL) (63.91) after 200k
updates over the Europarl dataset than the NMT
model with shortlist softmax trained for 400k
minibatch updates (65.26). Pointer softmax con-
verges faster than the model using the short-
list softmax, because the targets provided to the
pointer softmax also acts like guiding hints to the
attention.

6 Conclusion

In this paper, we propose a simple extension to
the traditional soft attention-based shortlist soft-
max by using pointers over the input sequence. We
show that the whole model can be trained jointly
with single objective function. We observe no-
ticeable improvements over the baselines on ma-
chine translation and summarization tasks by us-
ing pointer softmax. By doing a very simple mod-

147



0 5 10 15 20 25 30 35 40
# Iterations (x5000 minibatches)

60

70

80

90

100

110

120

130

140

150
Va

lid
 N

LL
Original model
Pointer Softmax

Figure 4: A comparison of the validation learning-
curves of the same NMT model trained with
pointer softmax and the regular softmax layer. As
can be seen from the figures, the model trained
with pointer softmax converges faster than the reg-
ular softmax layer. Switching network for pointer
softmax in this Figure uses ReLU activation func-
tion.

ification over the NMT, our model is able to gen-
eralize to the unseen words and can deal with rare-
words more efficiently. For the summarization
task on Gigaword dataset, the pointer softmax was
able to improve the results even when it is used
together with the large-vocabulary trick. In the
case of neural machine translation, we observed
that the training with the pointer softmax is also
improved the convergence speed of the model as
well. For French to English machine translation
on Europarl corpora, we observe that using the
pointer softmax can also improve the training con-
vergence of the model.

References
[Bahdanau et al.2014] Dzmitry Bahdanau, Kyunghyun

Cho, and Yoshua Bengio. 2014. Neural machine
translation by jointly learning to align and translate.
CoRR, abs/1409.0473.

[Bengio and Senécal2008] Yoshua Bengio and Jean-
Sébastien Senécal. 2008. Adaptive importance
sampling to accelerate training of a neural proba-
bilistic language model. Neural Networks, IEEE
Transactions on, 19(4):713–722.

[Bordes et al.2015] Antoine Bordes, Nicolas Usunier,
Sumit Chopra, and Jason Weston. 2015. Large-
scale simple question answering with memory net-
works. arXiv preprint arXiv:1506.02075.

[Cheng and Lapata2016] Jianpeng Cheng and Mirella
Lapata. 2016. Neural summarization by ex-

tracting sentences and words. arXiv preprint
arXiv:1603.07252.

[Cho et al.2014] Kyunghyun Cho, Bart
Van Merriënboer, Caglar Gulcehre, Dzmitry
Bahdanau, Fethi Bougares, Holger Schwenk,
and Yoshua Bengio. 2014. Learning phrase
representations using rnn encoder-decoder for
statistical machine translation. arXiv preprint
arXiv:1406.1078.

[Chung et al.2014] Junyoung Chung, Çaglar Gülçehre,
KyungHyun Cho, and Yoshua Bengio. 2014. Em-
pirical evaluation of gated recurrent neural networks
on sequence modeling. CoRR, abs/1412.3555.

[Gillick et al.2015] Dan Gillick, Cliff Brunk, Oriol
Vinyals, and Amarnag Subramanya. 2015. Mul-
tilingual language processing from bytes. arXiv
preprint arXiv:1512.00103.

[Graves2013] Alex Graves. 2013. Generating se-
quences with recurrent neural networks. arXiv
preprint arXiv:1308.0850.

[Gu et al.2016] Jiatao Gu, Zhengdong Lu, Hang Li,
and Victor OK Li. 2016. Incorporating copying
mechanism in sequence-to-sequence learning. arXiv
preprint arXiv:1603.06393.

[Gulcehre et al.2016] Caglar Gulcehre, Marcin
Moczulski, Misha Denil, and Yoshua Bengio.
2016. Noisy activation functions. arXiv preprint
arXiv:1603.00391.

[Gutmann and Hyvärinen2012] Michael U Gutmann
and Aapo Hyvärinen. 2012. Noise-contrastive esti-
mation of unnormalized statistical models, with ap-
plications to natural image statistics. The Journal of
Machine Learning Research, 13(1):307–361.

[He et al.2015] Kaiming He, Xiangyu Zhang, Shao-
qing Ren, and Jian Sun. 2015. Deep resid-
ual learning for mage recognition. arXiv preprint
arXiv:1512.03385.

[Hermann et al.2015] Karl Moritz Hermann, Tomas
Kocisky, Edward Grefenstette, Lasse Espeholt, Will
Kay, Mustafa Suleyman, and Phil Blunsom. 2015.
Teaching machines to read and comprehend. In Ad-
vances in Neural Information Processing Systems,
pages 1684–1692.

[Jean et al.2014] Sébastien Jean, Kyunghyun Cho,
Roland Memisevic, and Yoshua Bengio. 2014. On
using very large target vocabulary for neural ma-
chine translation. arXiv preprint arXiv:1412.2007.

[Kingma and Adam2015] Diederik P Kingma and
Jimmy Ba Adam. 2015. A method for stochastic
optimization. In International Conference on
Learning Representation.

[Luong et al.2015] Minh-Thang Luong, Ilya Sutskever,
Quoc V Le, Oriol Vinyals, and Wojciech Zaremba.
2015. Addressing the rare word problem in neural
machine translation. In Proceedings of ACL.

148



[Matthews et al.2012] Danielle Matthews, Tanya
Behne, Elena Lieven, and Michael Tomasello.
2012. Origins of the human pointing gesture: a
training study. Developmental science, 15(6):817–
829.

[Mnih and Kavukcuoglu2013] Andriy Mnih and Koray
Kavukcuoglu. 2013. Learning word embeddings
efficiently with noise-contrastive estimation. In Ad-
vances in Neural Information Processing Systems,
pages 2265–2273.

[Morin and Bengio2005] Frederic Morin and Yoshua
Bengio. 2005. Hierarchical probabilistic neural net-
work language model. In Aistats, volume 5, pages
246–252. Citeseer.

[Pascanu et al.2012] Razvan Pascanu, Tomas Mikolov,
and Yoshua Bengio. 2012. On the difficulty of
training recurrent neural networks. arXiv preprint
arXiv:1211.5063.

[Pascanu et al.2013] Razvan Pascanu, Caglar Gulcehre,
Kyunghyun Cho, and Yoshua Bengio. 2013. How
to construct deep recurrent neural networks. arXiv
preprint arXiv:1312.6026.

[Rush et al.2015] Alexander M. Rush, Sumit Chopra,
and Jason Weston. 2015. A neural attention model
for abstractive sentence summarization. CoRR,
abs/1509.00685.

[Schuster and Paliwal1997] Mike Schuster and
Kuldip K Paliwal. 1997. Bidirectional recur-
rent neural networks. Signal Processing, IEEE
Transactions on, 45(11):2673–2681.

[Sennrich et al.2015] Rico Sennrich, Barry Haddow,
and Alexandra Birch. 2015. Neural machine trans-
lation of rare words with subword units. arXiv
preprint arXiv:1508.07909.

[Theano Development Team2016] Theano Develop-
ment Team. 2016. Theano: A Python framework
for fast computation of mathematical expressions.
arXiv e-prints, abs/1605.02688, May.

[Tomasello et al.2007] Michael Tomasello, Malinda
Carpenter, and Ulf Liszkowski. 2007. A new look at
infant pointing. Child development, 78(3):705–722.

[Vinyals et al.2015] Oriol Vinyals, Meire Fortunato,
and Navdeep Jaitly. 2015. Pointer networks. In Ad-
vances in Neural Information Processing Systems,
pages 2674–2682.

[Zeiler2012] Matthew D Zeiler. 2012. Adadelta:
an adaptive learning rate method. arXiv preprint
arXiv:1212.5701.

7 Acknowledgments

We would also like to thank the developers of
Theano 5, for developing such a powerful tool

5http://deeplearning.net/software/
theano/

for scientific computing (Theano Development
Team, 2016). We acknowledge the support of
the following organizations for research funding
and computing support: NSERC, Samsung, Cal-
cul Québec, Compute Canada, the Canada Re-
search Chairs and CIFAR. C. G. thanks for IBM
T.J. Watson Research for funding this research
during his internship between October 2015 and
January 2016.

149


