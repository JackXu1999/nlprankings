



















































Is the Stanford Dependency Representation Semantic?


Proceedings of the 2nd Workshop on EVENTS: Definition, Detection, Coreference, and Representation, pages 54–58,
Baltimore, Maryland, USA, June 22-27, 2014. c©2014 Association for Computational Linguistics

Is the Stanford Dependency Representation Semantic?

Rachel Rudinger1 and Benjamin Van Durme1,2
Center for Language and Speech Processing1

Human Language Technology Center of Excellence2

Johns Hopkins University
rudinger@jhu.edu, vandurme@cs.jhu.edu

Abstract

The Stanford Dependencies are a deep
syntactic representation that are widely
used for semantic tasks, like Recognizing
Textual Entailment. But do they capture
all of the semantic information a meaning
representation ought to convey? This pa-
per explores this question by investigating
the feasibility of mapping Stanford depen-
dency parses to Hobbsian Logical Form,
a practical, event-theoretic semantic rep-
resentation, using only a set of determin-
istic rules. Although we find that such a
mapping is possible in a large number of
cases, we also find cases for which such a
mapping seems to require information be-
yond what the Stanford Dependencies en-
code. These cases shed light on the kinds
of semantic information that are and are
not present in the Stanford Dependencies.

1 Introduction

The Stanford dependency parser (De Marneffe et
al., 2006) provides “deep” syntactic analysis of
natural language by layering a set of hand-written
post-processing rules on top of Stanford’s sta-
tistical constituency parser (Klein and Manning,
2003). Stanford dependency parses are commonly
used as a semantic representation in natural lan-
guage understanding and inference systems.1 For
example, they have been used as a basic meaning
representation for the Recognizing Textual Entail-
ment task proposed by Dagan et al. (2005), such as
by Haghighi et al. (2005) or MacCartney (2009)
and in other inference systems (Chambers et al.,
2007; MacCartney, 2009).

Because of their popular use as a semantic rep-
resentation, it is important to ask whether the Stan-
ford Dependencies do, in fact, encode the kind of

1Statement presented by Chris Manning at the
*SEM 2013 Panel on Language Understanding
http://nlpers.blogspot.com/2013/07/the-sem-2013-panel-
on-language.html.

information that ought to be present in a versa-
tile semantic form. This paper explores this ques-
tion by attempting to map the Stanford Depen-
dencies into Hobbsian Logical Form (henceforth,
HLF), a neo-Davidsonian semantic representation
designed for practical use (Hobbs, 1985). Our ap-
proach is to layer a set of hand-written rules on
top of the Stanford Dependencies to further trans-
form the representation into HLFs. This approach
is a natural extension of the Stanford Dependen-
cies which are, themselves, derived from manually
engineered post-processing routines.

The aim of this paper is neither to demonstrate
the semantic completeness of the Stanford Depen-
dencies, nor to exhaustively enumerate their se-
mantic deficiencies. Indeed, to do so would be to
presuppose HLF as an entirely complete seman-
tic representation, or, a perfect semantic standard
against which to compare the Stanford Dependen-
cies. We make no such claim. Rather, our intent is
to provide a qualitative discussion of the Stanford
Dependencies as a semantic resource through the
lens of this HLF mapping task. It is only necessary
that HLF capture some subset of important seman-
tic phenomena to make this exercise meaningful.

Our results indicate that in a number of cases,
it is, in fact, possible to directly derive HLFs from
Stanford dependency parses. At the same time,
however, we also find difficult-to-map phenomena
that reveal inherent limitations of the dependen-
cies as a meaning representation.

2 Background

This section provides a brief overview of the HLF
and Stanford dependency formalisms.

2.1 Hobbsian Logical Form

The key insight of event-theoretic semantic repre-
sentations is the reification of events (Davidson,
1967), or, treating events as entities in the world.
As a logical, first-order representation, Hobbsian

54



Logical Form (Hobbs, 1985) employs this ap-
proach by allowing for the reification of any pred-
icate into an event variable. Specifically, for any
predicate p(x1, · · · , xn), there is a corresponding
predicate, p′(E, x1, · · · , xn), where E refers to
the predicate (or event) p(x1, · · · , xn). The reified
predicates are related to their non-reified forms
with the following axiom schema:

(∀x1 · · ·xn)p(x1 · · ·xn) ↔ (∃e)Exist(e) ∧
p′(e, x1 · · ·xn)

In HLF, “A boy runs” would be represented as:

(∃e, x)Exist(e) ∧ run′(e, x) ∧ boy(x)

and the sentence “A boy wants to build a boat
quickly” (Hobbs, 1985) would be represented as:

(∃e1, e2, e3, x, y)Exist(e1) ∧ want′(e1, x, e2) ∧
quick′(e2, e3)∧build′(e3, x, y)∧boy(x)∧boat(y)

2.2 Stanford Dependencies
A Stanford dependency parse is a set of triples
consisting of two tokens (a governor and a depen-
dent), and a labeled syntactic or semantic relation
between the two tokens. Parses can be rendered
as labeled, directed graphs, as in Figure 1. Note
that this paper assumes the collapsed version of
the Stanford Dependencies.2

Figure 1: Dependency parse of “A boy wants to
build a boat quickly.”

3 Mapping to HLF

We describe in this section our deterministic algo-
rithm for mapping Stanford dependency parses to
HLF. The algorithm proceeds in four stages: event

2The collapsed version is more convenient for our pur-
poses, but using the uncollapsed version would not signifi-
cantly affect our results.

extraction, argument identification, predicate-
argument assignment, and formula construction.
We demonstrate these steps on the above example
sentence “A boy wants to build a boat quickly.”3

The rule-based algorithm operates on the sen-
tence level and is purely a function of the depen-
dency parse or other trivially extractible informa-
tion, such as capitalization.

3.1 Event Extraction

The first step is to identify the set of event predi-
cates that will appear in the final HLF and assign
an event variable to each. Most predicates are gen-
erated by a single token in the sentence (e.g., the
main verb). For each token t in the sentence, an
event (ei, pt) (where ei is the event variable and pt
is the predicate) is added to the set of events if any
of the following conditions are met:

1. t is the dependent of the relation root,
ccomp, xcomp, advcl, advmod, or
partmod.

2. t is the governor of the relation nsubj, dobj,
ccomp, xcomp, xsubj, advcl, nsubjpass,
or agent.

Furthermore, an event (ei, pr) is added for any
triple (rel, gov, dep) where rel is prefixed with
“prep ” (e.g., prep to, prep from, prep by, etc.).

Applying this step to our example sentence “A
boy wants to build a boat quickly.” yields the fol-
lowing set:

(e1, wants), (e2, quickly), (e3, build)

3.2 Argument Identification

Next, the set of entities that will serve as predicate
arguments are identified. Crucially, this set will
include some event variables generated in the pre-
vious step. For each token, t, an argument (xi, t)
is added to the set of arguments if one of the fol-
lowing conditions is met:

1. t is the dependent of the relation nsubj,
xsubj, dobj, ccomp, xcomp, nsubjpass,
agent, or iobj.

2. t is the governor of the relation advcl,
advmod, or partmod.

3Hobbs (1985) uses the example sentence “A boy wanted
to build a boat quickly.”

55



Applying this step to our example sentence, we
get the following argument set:

(x1, boat), (x2, build), (x3, boy)

Notice that the token build has generated both
an event predicate and an argument. This is be-
cause in our final HLF, build will be both an event
predicate that takes the arguments boy and boat,
as well as an argument to the intensional predicate
want.

3.3 Predicate-Argument Assignment
In this stage, arguments are assigned to each pred-
icate. pt.argi denotes the ith argument of pred-
icate pt and arg(t) denotes the argument associ-
ated with token t. For example, arg(boy) = x2
and arg(quickly) = e3. We also say that if the
token t1 governs t2 by some relation, e.g. nsubj,
then t1 nsubj-governs t2, or t2 nsubj-depends on
t1. Note that argi refers to any slot past arg2. Ar-
guments are assigned as follows.

For each predicate pt (corresponding to token
t):

1. If there is a token t′ such that t nsubj-,
xsubj-, or agent-governs t′, then pt.arg1 =
arg(t′).

2. If there is a token t′ such that t dobj-governs
t′, then pt.arg2 = arg(t′).

3. If there is a token t′ such that t nsubjpass-
governs t′, then pt.argi = arg(t′).

4. If there is a token t′ such that t partmod-
depends on t′, then pt.arg2 = arg(t′).

5. If there is a token t′ such that t iobj-governs
t′, then pt.argi = arg(t′).

6. If there is a token t′ such that t ccomp- or
xcomp-governs t′, then pt.argi = arg(t′)

(a) UNLESS there is a token t′′ such that
t′ advmod-governs t′′, in which case
pt.argi = arg(t′′).

7. If there is a token t′ such that t advmod- or
advcl-depends on t′, then pt.argi = arg(t′).

And for each pr generated from relation
(rel, gov, dep) (i.e. all of the “prep ” relations):

1. pr.arg1 = arg(gov)
2. pr.argi = arg(dep)

After running this stage on our example sen-
tence, the predicate-argument assignments are as
follows:

wants(x3, e2), build(x3, x1), quickly(e3)

Each predicate can be directly replaced with its
reified forms (i.e., p′):

wants′(e1, x3, e2),build′(e3, x3, x1),
quickly′(e2, e3)

Two kinds of non-eventive predicates still need
to be formed. First, every entity (xi, t) that is
neither a reified event nor a proper noun, e.g.,
(x3, boy), generates a predicate of the form t(xi).
Second, we generate Hobbs’s Exist predicate,
which identifies which event actually occurs in the
“real world.” This is simply the event generated
by the dependent of the root relation.

3.4 Formula Construction
In this stage, the final HLF is pieced together. We
join all of the predicates formed above with the
and conjunction, and existentially quantify over
every variable found therein. For our example sen-
tence, the resulting HLF is:

A boy wants to build a boat quickly.
(∃e1, e2, e3, x1, x3)[Exist(e1) ∧ boat(x1) ∧
boy(x3) ∧ wants′(e1, x3, e2) ∧ build′(e3, x3, x1)
∧ quickly′(e2, e3)]
4 Analysis of Results
This section discusses semantic phenomena that
our mapping does and does not capture, providing
a lens for assessing the usefulness of the Stanford
Dependencies as a semantic resource.

4.1 Successes
Formulas 1-7 are correct HLFs that our mapping
rules successfully generate. They illustrate the di-
versity of semantic information that is easily re-
coverable from Stanford dependency parses.

Formulas 1-2 show successful parses in sim-
ple transitive sentences with active/passive alter-
nations, and Formula 3 demonstrates success in
parsing ditransitives. Also easily recovered from
the dependency structures are semantic parses of
sentences with adverbs (Formula 4) and reporting
verbs (Formula 5). Lest it appear that these phe-
nomena may only be handled in isolation, Equa-
tions 6-7 show successful parses for sentences

56



with arbitrary combinations of the above phenom-
ena.

A boy builds a boat.
(∃e1, x1, x2)[Exist(e1) ∧ boy(x2) ∧ boat(x1)
∧ builds′(e1, x2, x1)] (1)
A boat was built by a boy.
(∃e1, x1, x2)[Exist(e1) ∧ boat(x2) ∧ boy(x1)
∧ built′(e1, x1, x2)] (2)
John gave Mary a boat.
(∃e1, x1)[Exist(e1) ∧ boat(x1)
∧ gave′(e1, John, x1, Mary)] (3)
John built a boat quickly.
OR John quickly built a boat.
(∃e1, e2, x1)[Exist(e1) ∧ boat(x1) ∧
quickly(e2, e1) ∧ built′(e1, John, x1)] (4)
John told Mary that a boy built a boat.
(∃e1, e2, x1, x4)[Exist(e1)∧boy(x1)∧boat(x4)∧
built′(e2, x1, x4) ∧ told′(e1, John,Mary, e2)]

(5)John told Mary that Sue told Joe
that Adam loves Eve.
(∃e1, e2, e3)[Exist(e1)∧told′(e2, Sue, Joe, e3)∧
loves′(e3, Adam,Eve) ∧
told′(e1, John, Mary, e2)] (6)

John was told by Mary that Sue wants
Joe to build a boat quickly.
(∃e1, e2, e3, e4, x7)[Exist(e1) ∧ boat(x7) ∧
build′(e2, Joe, x7)∧told′(e1, Mary, John, e4)∧
wants′(e4, Sue, e3) ∧ quickly′(e3, e2)] (7)
4.2 Limitations
Though our mapping rules enable us to directly ex-
tract deep semantic information directly from the
Stanford dependency parses in the above cases,
there are a number of difficulties with this ap-
proach that shed light on inherent limitations of
the Stanford Dependencies as a semantic resource.

A major such limitation arises in cases of event
nominalizations. Because dependency parses are
syntax-based, their structures do not distinguish
between eventive noun phrases like “the bombing
of the city” and non-eventive ones like “the mother
of the child”; such a distinction, however, would
be found in the corresponding HLFs.

Certain syntactic alternations also prove prob-
lematic. For example, the dependency structure
does not recognize that “window” takes the same
semantic role in the sentences “John broke the mir-
ror.” and “The mirror broke.” The use of addi-
tional semantic resources, like PropBank (Palmer
et al., 2005), would be necessary to determine this.

Prepositional phrases present another problem
for our mapping task, as the Stanford dependen-
cies will typically not distinguish between PPs
indicating arguments and adjuncts. For exam-
ple, “Mary stuffed envelopes with coupons” and
“Mary stuffed envelopes with John” have identical
dependency structures, yet “coupons” and “John”
are (hopefully for John) taking on different seman-
tic roles. This is, in fact, a prime example of how
Stanford dependency parses may resolve syntactic
ambiguity without resolving semantic ambiguity.

Of course, one might manage more HLF cov-
erage by adding more rules to our system, but the
limitations discussed here are fundamental. If two
sentences have different semantic interpretations
but identical dependency structures, then there can
be no deterministic mapping rule (based on depen-
dency structure alone) that yields this distinction.

5 Conclusion

We have presented here our attempt to map the
Stanford Dependencies to HLF via a second layer
of hand-written rules. That our mapping rules,
which are purely a function of dependency struc-
ture, succeed in producing correct HLFs in some
cases is good evidence that the Stanford Depen-
dencies do contain some practical level of seman-
tic information. Nevertheless, we were also able to
quickly identify aspects of meaning that the Stan-
ford Dependencies did not capture.

Our argument does not require that HLF be an
optimal representation, only that it capture worth-
while aspects of semantics and that it not be read-
ily derived from the Stanford representation. This
is enough to conclude that the Stanford Dependen-
cies are not complete as a meaning representation.
While not surprising (as they are intended as a
syntactic representation), we hope this short study
will help further discussion on what the commu-
nity wants or needs in a meaning representation:
what gaps are acceptable, if any, and whether a
more “complete” representation is needed.

Acknowledgments

This material is partially based on research spon-
sored by the NSF under grant IIS-1249516 and
DARPA under agreement number FA8750-13-2-
0017 (the DEFT program).

57



References
Nathanael Chambers, Daniel Cer, Trond Grenager,

David Hall, Chloe Kiddon, Bill MacCartney, Marie-
Catherine de Marneffe, Daniel Ramage, Eric Yeh,
and Christopher D Manning. 2007. Learning align-
ments and leveraging natural logic. In Proceedings
of the ACL-PASCAL Workshop on Textual Entail-
ment and Paraphrasing, pages 165–170. Associa-
tion for Computational Linguistics.

Ido Dagan, Oren Glickman, and Bernardo Magnini.
2005. The pascal recognising textual entailment
challenge. In Proceedings of the PASCAL Chal-
lenges Workshop on Recognising Textual Entail-
ment.

Donald Davidson. 1967. The logical form of action
sentences. In The Logic of Decision and Action,
pages 81–120. Univ. of Pittsburgh Press.

Marie-Catherine De Marneffe, Bill MacCartney, and
Christopher D Manning. 2006. Generating typed
dependency parses from phrase structure parses. In
Proceedings of LREC, volume 6, pages 449–454.

Aria D Haghighi, Andrew Y Ng, and Christopher D
Manning. 2005. Robust textual inference via graph
matching. In Proceedings of the conference on Hu-
man Language Technology and Empirical Methods
in Natural Language Processing, pages 387–394.
Association for Computational Linguistics.

Jerry R Hobbs. 1985. Ontological promiscuity. In
Proceedings of the 23rd annual meeting on Associ-
ation for Computational Linguistics, pages 60–69.
Association for Computational Linguistics.

Dan Klein and Christopher D Manning. 2003. Ac-
curate unlexicalized parsing. In Proceedings of the
41st Annual Meeting on Association for Computa-
tional Linguistics-Volume 1, pages 423–430. Asso-
ciation for Computational Linguistics.

Bill MacCartney. 2009. Natural language inference.
Ph.D. thesis, Stanford University.

Martha Palmer, Daniel Gildea, and Paul Kingsbury.
2005. The proposition bank: An annotated cor-
pus of semantic roles. Computational Linguistics,
31(1):71–106.

58


