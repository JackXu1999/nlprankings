



















































Multi-passage BERT: A Globally Normalized BERT Model for Open-domain Question Answering


Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing
and the 9th International Joint Conference on Natural Language Processing, pages 5878–5882,
Hong Kong, China, November 3–7, 2019. c©2019 Association for Computational Linguistics

5878

Multi-passage BERT: A Globally Normalized BERT Model for
Open-domain Question Answering

Zhiguo Wang, Patrick Ng, Xiaofei Ma, Ramesh Nallapati, Bing Xiang
AWS AI Labs

{zhiguow, patricng, xiaofeim, rnallapa, bxiang}@amazon.com

Abstract

BERT model has been successfully applied to
open-domain QA tasks. However, previous
work trains BERT by viewing passages cor-
responding to the same question as indepen-
dent training instances, which may cause in-
comparable scores for answers from different
passages. To tackle this issue, we propose a
multi-passage BERT model to globally nor-
malize answer scores across all passages of
the same question, and this change enables
our QA model find better answers by utiliz-
ing more passages. In addition, we find that
splitting articles into passages with the length
of 100 words by sliding window improves per-
formance by 4%. By leveraging a passage
ranker to select high-quality passages, multi-
passage BERT gains additional 2%. Exper-
iments on four standard benchmarks showed
that our multi-passage BERT outperforms all
state-of-the-art models on all benchmarks. In
particular, on the OpenSQuAD dataset, our
model gains 21.4% EM and 21.5% F1 over all
non-BERT models, and 5.8% EM and 6.5% F1
over BERT-based models.

1 Introduction

BERT model (Devlin et al., 2018) has achieved
significant improvements on a variety of NLP
tasks. For question answering (QA), it has domi-
nated the leaderboards of several machine reading
comprehension (RC) datasets. However, the RC
task is only a simplified version of the QA task,
where a model only needs to find an answer from
a given passage/paragraph. Whereas, in reality, an
open-domain QA system is required to pinpoint
answers from a massive article collection, such as
Wikipedia or the entire web.

Recent studies directly applied the BERT-RC
model to open-domain QA (Yang et al., 2019;
Nogueira et al., 2018; Alberti et al., 2019). They

firstly leverage a passage retriever to retrieve mul-
tiple passages for each question. During training,
passages corresponding to the same question are
taken as independent training instances. During
inference, the BERT-RC model is applied to each
passage individually to predict an answer span,
and then the highest scoring span is selected as the
final answer. Although this method achieves sig-
nificant improvements on several datasets, there
are still several unaddressed issues. First, view-
ing passages of the same question as indepen-
dent training instances may result in incompara-
ble answer scores across passages. Thus, globally
normalizing scores over all passages of the same
question (Clark and Gardner, 2018) may be help-
ful. Second, previous work defines passages as
articles, paragraphs, or sentences. However, the
question of proper granularity of passages is still
underexplored. Third, passage ranker for select-
ing high-quality passages has been shown to be
very useful in previous open-domain QA systems
(Wang et al., 2018a; Lin et al., 2018; Pang et al.,
2019). However, we do not know whether it is still
required for BERT. Fourth, most effective QA and
RC models highly rely on explicit inter-sentence
matching between questions and passages (Wang
and Jiang, 2017; Wang et al., 2016; Seo et al.,
2017; Wang et al., 2017), whereas BERT only ap-
plies self-attention layers over the concatenation
of a question-passage pair. It is unclear whether
the inter-sentence matching still matters for BERT.

To answer these questions, we conduct a series
of empirical studies on the OpenSQuAD dataset
(Rajpurkar et al., 2016; Wang et al., 2018a). Ex-
perimental results show that: (1) global normal-
ization makes QA model more stable while pin-
pointing answers from large number of passages;
(2) splitting articles into passages with the length
of 100 words by sliding window brings 4% im-
provements; (3) leveraging a BERT-based passage



5879

ranker gives us extra 2% improvements; and (4)
explicit inter-sentence matching is not helpful for
BERT. We also compared our model with state-of-
the-art models on four standard benchmarks, and
our model outperforms all state-of-the-art models
on all benchmarks.

2 Model

Open-domain QA systems aim to find an answer
for a given question from a massive article col-
lection. Usually, a retriever is leveraged to re-
trieve m passages P = [P1, ..., Pi, ..., Pm] for a
given question Q = (q1, ..., q|Q|), where Pi =
(p1i , ..., p

|pi|
i ) is the i-th passage, and q

k ∈ Q and
pji ∈ Pi are corresponding words. A QA model
will compute a score Pr(a|Q,P ) for each possi-
ble answer span a. We further decompose the an-
swer span prediction into predicting the start and
end positions of the answer span Pr(a|Q,P ) =
Ps(as|Q,P )Pe(ae|Q,P ), where Ps(as|Q,P ) and
Pe(ae|Q,P ) are the probabilities of as and ae to
be the start and end positions.

BERT-RC model assumes passages in P are
independent of each other. The model con-
catenates the question Q and each passage Pi
into a new sequence “[CLS] p1i , ..., p

|pi|
i [SEP]

q1, ..., q|Q| [SEP]”, and applies BERT to encode
this sequence. Then the vector representation of
each word position from BERT encoder is fed into
two separate dense layers to predict the probabili-
ties Ps and Pe (Devlin et al., 2018). During train-
ing, the log-likelihood of the correct start and end
positions for each passage is optimized indepen-
dently. For passages without any correct answers,
we set the start and end positions to be 0, which
is the position for the first token [CLS]. During
inference, BERT-RC model is applied to each pas-
sage individually to predict an answer, and then
the highest scoring span is selected as the final an-
swer. If answers from different passages have the
same string, they are merged by summing up their
scores.

Multi-passage BERT: BERT-RC model nor-
malizes probability distributions Ps and Pe for
each passage independently, which may cause in-
comparable answer scores across passages. To
tackle this issue, we leverage the global normal-
ization method (Clark and Gardner, 2018) to nor-
malize answer scores among multiple passages,
and dub this model as multi-passage BERT. Con-
cretely, all passages of the same question are pro-

cessed independently as we do in BERT-RC until
the normalization step. Then, softmax is applied
to normalize all word positions from all passages.

Passage ranker reranks all retrieved passages,
and selects a list of high-quality passages for the
multi-passage BERT model. We implement the
passage ranker as another BERT model, which
is similar to multi-passage BERT except that at
the output layer it only predicts a single score for
each passage based on the vector representation
of the first token [CLS]. We also apply softmax
over all passage scores corresponding to the same
question, and train to maximize the log-likelihood
of passages containing the correct answers. De-
note the passage score as Pr(Pi|Q,P ), then the
score of an answer span from passage Pi will be
Pr(Pi|Q,P )Ps(as|Q,P )Pe(ae|Q,P ).

3 Experiments

Datasets: We experiment on four open-domain
QA datasets. (1) OpenSQuAD: question-answer
pairs are from SQuAD 1.1 (Rajpurkar et al., 2016),
but a QA model will find answers from the en-
tire Wikipedia rather than the given context. Fol-
lowing Chen et al. (2017), we use the 2016-12-
21 English Wikipedia dump. 5,000 QA pairs are
randomly selected from the original training set as
our validation set, and the remaining QA pairs are
taken as our new training set. The original devel-
opment set is used as our test set. (2) TriviaQA:
TriviaQA unfiltered version (Joshi et al., 2017) are
used. Following Pang et al. (2019), we randomly
hold out 5,000 QA pairs from the original training
set as our validation set, and take the remaining
pairs as our new training set. The original devel-
opment set is used as our test set. (3) Quasar-T
(Dhingra et al., 2017) and (4) SearchQA (Dunn
et al., 2017) are leveraged with the official split.

Basic Settings: If not specified, the pre-trained
BERT-base model with default hyper-parameters
is leveraged. ElasticSearch with BM25 algorithm
is employed as our retriever for OpenSQuAD. Pas-
sages for other datasets are from the corresponding
releases. During training, we use top-10 passages
for each question plus all passages (within the top-
100 list) containing correct answers. During in-
ference, we use top-30 passages for each question.
Exact Match (EM) and F1 scores (Rajpurkar et al.,
2016) are utilized as the evaluation metrics.



5880

No. Model EM F1

1 Single-sentence 34.8 44.4
2 Length-50 35.5 45.2
3 Length-100 35.7 45.7
4 Length-200 34.8 44.7

5 w/o sliding-window (same as (3)) 35.7 45.7
6 w/ sliding-window 40.4 49.8

7 w/o passage ranker (same as (6)) 40.4 49.8
8 w/ passage ranker 41.3 51.7
9 w/ passage scores 42.8 53.4

10 BERT+QANet 18.3 27.8
11 BERT+QANet (fix BERT) 35.5 45.9
12 BERT+QANet (init. from (11)) 36.2 46.4

Table 1: Results on the validation set of OpenSQuAD.

Figure 1: Effect of global normalization.

3.1 Model Analysis

To answer questions from section 1, we conduct a
series of experiments on OpenSQuAD dataset, and
report the validation set results in Table 1. Multi-
passage BERT model is used for experiments.

Effect of passage granularity: Previous work
usually defines passages as articles (Chen et al.,
2017), paragraphs (Yang et al., 2019), or sentences
(Wang et al., 2018a; Lin et al., 2018). We ex-
plore the effect of passage granularity regarding
to the passage length, i.e., the number of words
in each passage. Each article is split into non-
overlapping passages based on a fixed length. We
vary passage length among {50, 100, 200}, and
list the results as models (2) (3) (4) in Table 1,
respectively. Comparing to single-sentence pas-
sages (model (1)), leveraging fixed-length pas-
sages works better, and passages with 100 words
works the best. Hereafter, we set passage length
as 100 words.

Effect of sliding window: Splitting articles into
non-overlapping passages may force some near-
boundary answer spans to lose useful contexts. To
deal with this issue, we split articles into overlap-
ping passages by sliding window. We set the win-
dow size as 100 words, and the stride as 50 words
(half the window size). Result from the sliding
window model is shown as model (6) in Table 1.
We can see that this method brings us 4.7% EM

and 4.1% F1 improvements. Hereafter, we use
sliding window method.

Effect of passage ranker: We plug the passage
ranker into the QA pipeline. First, the retriever
returns top-100 passages for each question. Then,
the passage ranker is employed to rerank these 100
passages. Finally, multi-passage BERT takes top-
30 reranked passages as input to pinpoint the final
answer. We design two models to check the ef-
fect of the passage ranker. The first model utilizes
the reranked passages but without using passage
scores, whereas the second model makes use of
both the reranked passages and their scores. Re-
sults are given in Table 1 as models (8) and (9) re-
spectively. We can find that only using reranked
passages gives us 0.9% EM and 1.0% F1 im-
provements, and leveraging passage scores gives
us 1.5% EM and 1.7% F1 improvements. There-
fore, passage ranker is useful for multi-passage
BERT model.

Effect of global normalization: We train
BERT-RC and multi-passage BERT models using
the reranked passages, then evaluate them by tak-
ing as input various number of passages. These
models are evaluated on two setups: with and
without using passage scores. F1 scores for BERT-
RC based on different number of passages are
shown as the dotted and solid green curves in
Figure 1. F1 scores for our multi-passage BERT
model with similar settings are shown as the dot-
ted and solid blue curves. We can see that all mod-
els start from the same F1, because multi-passage
BERT is equivalent to BERT-RC when using only
one passage. While increasing the number of pas-
sages, BERT-RC without using passage scores de-
creases the performance significantly, which ver-
ifies that the answer scores from BERT-RC are
incomparable across passages. This issue is al-
leviated to some extent by leveraging passage
scores. On the other hand, performance from
multi-passage BERT without using passage scores
increases at the beginning, and then flattens out
after passage number is over 10. By utilizing pas-
sage scores, multi-passage BERT gets better per-
formance while using more passages. This phe-
nomenon shows the effectiveness of global nor-
malization, which enables the model find better
answers by utilizing more passages.

Does explicit inter-sentence matching mat-
ter? Almost all previous state-of-the-art QA
and RC models find answers by matching pas-



5881

Datasets Quasar-T SearchQA TriviaQA OpenSQuAD

Models EM F1 EM F1 EM F1 EM F1

DrQA (Chen et al., 2017) 37.7 44.5 41.9 48.7 32.3 38.3 29.8 -
R3 (Wang et al., 2018a) 35.3 41.7 49.0 55.3 47.3 53.7 29.1 37.5
OpenQA (Lin et al., 2018) 42.2 49.3 58.8 64.5 48.7 56.3 28.7 36.6
TraCRNet (Dehghani et al., 2019) 43.2 54.0 52.9 65.1 - - - -
HAS-QA (Pang et al., 2019) 43.2 48.9 62.7 68.7 63.6 68.9 - -

BERT (Large) (Nogueira et al., 2018) - - - 69.1 - - - -
BERT serini (Yang et al., 2019) - - - - - - 38.6 46.1
BERT-RC (Ours) 49.7 56.8 63.7 68.7 61.0 66.9 45.4 52.5

Multi-Passage BERT (Base) 51.3 59.0 65.2 70.6 62.0 67.5 51.2 59.0
Multi-Passage BERT (Large) 51.1 59.1 65.1 70.7 63.7 69.2 53.0 60.9

Table 2: Comparison with state-of-the-art models, where the first group are models without using BERT, the second
group are BERT-based models, and the last group are our multi-passage BERT models.

sages with questions, aka inter-sentence match-
ing (Wang and Jiang, 2017; Wang et al., 2016;
Seo et al., 2017; Wang et al., 2017; Song et al.,
2017). However, BERT model simply concate-
nates a passage with a question, and differenti-
ates them by separating them with a delimiter to-
ken [SEP], and assigning different segment ids for
them. Here, we aim to check whether explicit
inter-sentence matching still matters for BERT.
We employ a shared BERT model to encode a pas-
sage and a question individually, and a weighted
sum of all BERT layers is used as the final token-
level representation for the question or passage,
where weights for all BERT layers are trainable
parameters. Then the passage and question repre-
sentations are input into QANet (Yu et al., 2018) to
perform inter-sentence matching, and predict the
final answer. Model (10) in Table 1 shows the
result of jointly training the BERT encoder and
the QANet model. The result is very poor, likely
because the parameters in BERT are catastrophi-
cally forgotten while training the QANet model.
To tackle this issue, we fix parameters in BERT,
and only update parameters for QANet. The result
is listed as model (11). It works better than model
(10), but still worse than multi-passage BERT in
model (6). We design another model by starting
from model (11), and then jointly fine-tuning the
BERT encoder and QANet. Model (12) in Table 1
shows the result. It works better than model (11),
but still has a big gap with multi-passage BERT
in model (6) . Therefore, we conclude that the
explicit inter-sentence matching is not helpful for
multi-passage BERT. One possible reason is that
the multi-head self-attention layers in BERT has
already embedded the inter-sentence matching.

3.2 Comparison with State-of-the-art Models
We evaluate BERT-RC and Multi-passage BERT
on four standard benchmarks, where passage
scores are leveraged for both models. We build
another multi-passage BERT for each dataset by
initializing it with the pre-trained BERT-Large
model. Experimental results from our models as
well as other state-of-the-art models are shown in
Table 2, where the first group are open-domain QA
models without using the BERT model, the second
group are BERT-based models, and the last group
are our multi-passage BERT models.

From Table 2, we can see that our multi-passage
BERT model outperforms all state-of-the-art mod-
els across all benchmarks, and it works consis-
tently better than our BERT-RC model which has
the same settings except the global normalization.
In particular, on the OpenSQuAD dataset, our
model improves by 21.4% EM and 21.5% F1 over
all non-BERT models, and 5.8% EM and 6.5%
F1 over BERT-based models. Leveraging BERT-
Large model makes multi-passage BERT even bet-
ter on TriviaQA and OpenSQuAD datasets.

4 Conclusion

We propose a multi-passage BERT model for
open-domain QA to globally normalize answer
scores across mutiple passages corresponding to
the same question. We find two effective tech-
niques to improve the performance of multi-
passage BERT: (1) splitting articles into passages
with the length of 100 words by sliding window;
and (2) leveraging a passage ranker to select high-
quality passages. With all these techniques, our
multi-passage BERT model outperforms all state-
of-the-art models on four standard benchmarks.

In future, we plan to consider inter-correlation



5882

among passages for open-domain question an-
swering (Wang et al., 2018b; Song et al., 2018).

References
Chris Alberti, Kenton Lee, and Michael Collins. 2019.

A bert baseline for the natural questions. arXiv
preprint arXiv:1901.08634.

Danqi Chen, Adam Fisch, Jason Weston, and Antoine
Bordes. 2017. Reading wikipedia to answer open-
domain questions. In ACL 2017.

Christopher Clark and Matt Gardner. 2018. Simple
and effective multi-paragraph reading comprehen-
sion. In ACL 2018.

Mostafa Dehghani, Hosein Azarbonyad, Jaap Kamps,
and Maarten de Rijke. 2019. Learning to transform,
combine, and reason in open-domain question an-
swering. In Proceedings of the Twelfth ACM Inter-
national Conference on Web Search and Data Min-
ing, pages 681–689. ACM.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805.

Bhuwan Dhingra, Kathryn Mazaitis, and William W
Cohen. 2017. Quasar: Datasets for question an-
swering by search and reading. arXiv preprint
arXiv:1707.03904.

Matthew Dunn, Levent Sagun, Mike Higgins, V Ugur
Guney, Volkan Cirik, and Kyunghyun Cho. 2017.
Searchqa: A new q&a dataset augmented with
context from a search engine. arXiv preprint
arXiv:1704.05179.

Mandar Joshi, Eunsol Choi, Daniel S Weld, and Luke
Zettlemoyer. 2017. Triviaqa: A large scale distantly
supervised challenge dataset for reading comprehen-
sion. In ACL 2017.

Yankai Lin, Haozhe Ji, Zhiyuan Liu, and Maosong Sun.
2018. Denoising distantly supervised open-domain
question answering. In ACL 2018.

Rodrigo Nogueira, Jannis Bulian, and Massimiliano
Ciaramita. 2018. Learning to coordinate multiple
reinforcement learning agents for diverse query re-
formulation. arXiv preprint arXiv:1809.10658.

Liang Pang, Yanyan Lan, Jiafeng Guo, Jun Xu, Lixin
Su, and Xueqi Cheng. 2019. Has-qa: Hierarchical
answer spans model for open-domain question an-
swering. In AAAI 2019.

Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and
Percy Liang. 2016. Squad: 100,000+ questions for
machine comprehension of text. In EMNLP 2016.

Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2017. Bidirectional attention
flow for machine comprehension. In ICLR 2017.

Linfeng Song, Zhiguo Wang, and Wael Hamza. 2017.
A unified query-based generative model for question
generation and question answering. arXiv preprint
arXiv:1709.01058.

Linfeng Song, Zhiguo Wang, Mo Yu, Yue Zhang,
Radu Florian, and Daniel Gildea. 2018. Exploring
graph-structured passage representation for multi-
hop reading comprehension with graph neural net-
works. arXiv preprint arXiv:1809.02040.

Shuohang Wang and Jing Jiang. 2017. Machine com-
prehension using match-lstm and answer pointer. In
ICLR 2017.

Shuohang Wang, Mo Yu, Xiaoxiao Guo, Zhiguo Wang,
Tim Klinger, Wei Zhang, Shiyu Chang, Gerry
Tesauro, Bowen Zhou, and Jing Jiang. 2018a. R3:
Reinforced ranker-reader for open-domain question
answering. In AAAI 2018.

Shuohang Wang, Mo Yu, Jing Jiang, Wei Zhang,
Xiaoxiao Guo, Shiyu Chang, Zhiguo Wang, Tim
Klinger, Gerald Tesauro, and Murray Campbell.
2018b. Evidence aggregation for answer re-ranking
in open-domain question answering. In ICLR 2018.

Wenhui Wang, Nan Yang, Furu Wei, Baobao Chang,
and Ming Zhou. 2017. Gated self-matching net-
works for reading comprehension and question an-
swering. In ACL 2017.

Zhiguo Wang, Haitao Mi, Wael Hamza, and Radu
Florian. 2016. Multi-perspective context match-
ing for machine comprehension. arXiv preprint
arXiv:1612.04211.

Wei Yang, Yuqing Xie, Aileen Lin, Xingyu Li, Luchen
Tan, Kun Xiong, Ming Li, and Jimmy Lin. 2019.
End-to-end open-domain question answering with
bertserini. arXiv preprint arXiv:1902.01718.

Adams Wei Yu, David Dohan, Minh-Thang Luong, Rui
Zhao, Kai Chen, Mohammad Norouzi, and Quoc V
Le. 2018. Qanet: Combining local convolution with
global self-attention for reading comprehension. In
ICLR 2018.


