



















































Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics


Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 44–55
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-1005

Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 44–55
Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics

https://doi.org/10.18653/v1/P17-1005

Learning Structured Natural Language Representations
for Semantic Parsing

Jianpeng Cheng† Siva Reddy† Vijay Saraswat‡ and Mirella Lapata†
†School of Informatics, University of Edinburgh

‡IBM T.J. Watson Research
{jianpeng.cheng,siva.reddy}@ed.ac.uk, vsaraswa@us.ibm.com,

mlap@inf.ed.ac.uk

Abstract

We introduce a neural semantic parser
which is interpretable and scalable. Our
model converts natural language utter-
ances to intermediate, domain-general nat-
ural language representations in the form
of predicate-argument structures, which
are induced with a transition system and
subsequently mapped to target domains.
The semantic parser is trained end-to-end
using annotated logical forms or their de-
notations. We achieve the state of the
art on SPADES and GRAPHQUESTIONS
and obtain competitive results on GEO-
QUERY and WEBQUESTIONS. The in-
duced predicate-argument structures shed
light on the types of representations useful
for semantic parsing and how these are dif-
ferent from linguistically motivated ones.1

1 Introduction

Semantic parsing is the task of mapping natu-
ral language utterances to machine interpretable
meaning representations. Despite differences in
the choice of meaning representation and model
structure, most existing work conceptualizes se-
mantic parsing following two main approaches.
Under the first approach, an utterance is parsed
and grounded to a meaning representation directly
via learning a task-specific grammar (Zelle and
Mooney, 1996; Zettlemoyer and Collins, 2005;
Wong and Mooney, 2006; Kwiatkowksi et al.,
2010; Liang et al., 2011; Berant et al., 2013;
Flanigan et al., 2014; Pasupat and Liang, 2015;
Groschwitz et al., 2015). Under the second ap-
proach, the utterance is first parsed to an inter-
mediate task-independent representation tied to a
syntactic parser and then mapped to a grounded

1Our code is available at https://github.com/
cheng6076/scanner.

representation (Kwiatkowski et al., 2013; Reddy
et al., 2016, 2014; Krishnamurthy and Mitchell,
2015; Gardner and Krishnamurthy, 2017). A merit
of the two-stage approach is that it creates reusable
intermediate interpretations, which potentially en-
ables the handling of unseen words and knowledge
transfer across domains (Bender et al., 2015).

The successful application of encoder-decoder
models (Bahdanau et al., 2015; Sutskever et al.,
2014) to a variety of NLP tasks has provided
strong impetus to treat semantic parsing as a se-
quence transduction problem where an utterance
is mapped to a target meaning representation in
string format (Dong and Lapata, 2016; Jia and
Liang, 2016; Kočiský et al., 2016). Such models
still fall under the first approach, however, in con-
trast to previous work (Zelle and Mooney, 1996;
Zettlemoyer and Collins, 2005; Liang et al., 2011)
they reduce the need for domain-specific assump-
tions, grammar learning, and more generally ex-
tensive feature engineering. But this modeling
flexibility comes at a cost since it is no longer pos-
sible to interpret how meaning composition is per-
formed. Such knowledge plays a critical role in
understand modeling limitations so as to build bet-
ter semantic parsers. Moreover, without any task-
specific prior knowledge, the learning problem is
fairly unconstrained, both in terms of the possible
derivations to consider and in terms of the target
output which can be ill-formed (e.g., with extra or
missing brackets).

In this work, we propose a neural semantic
parser that alleviates the aforementioned prob-
lems. Our model falls under the second class of
approaches where utterances are first mapped to
an intermediate representation containing natural
language predicates. However, rather than using
an external parser (Reddy et al., 2014, 2016) or
manually specified CCG grammars (Kwiatkowski
et al., 2013), we induce intermediate representa-
tions in the form of predicate-argument structures

44

https://doi.org/10.18653/v1/P17-1005
https://doi.org/10.18653/v1/P17-1005


from data. This is achieved with a transition-based
approach which by design yields recursive seman-
tic structures, avoiding the problem of generating
ill-formed meaning representations. Compared to
most existing semantic parsers which employ a
CKY style bottom-up parsing strategy (Krishna-
murthy and Mitchell, 2012; Cai and Yates, 2013;
Berant et al., 2013; Berant and Liang, 2014), the
transition-based approach we proposed does not
require feature decomposition over structures and
thereby enables the exploration of rich, non-local
features. The output of the transition system is
then grounded (e.g., to a knowledge base) with a
neural mapping model under the assumption that
grounded and ungrounded structures are isomor-
phic.2 As a result, we obtain a neural model that
jointly learns to parse natural language semantics
and induce a lexicon that helps grounding.

The whole network is trained end-to-end on
natural language utterances paired with anno-
tated logical forms or their denotations. We
conduct experiments on four datasets, including
GEOQUERY (which has logical forms; Zelle and
Mooney 1996), SPADES (Bisk et al., 2016), WEB-
QUESTIONS (Berant et al., 2013), and GRAPH-
QUESTIONS (Su et al., 2016) (which have deno-
tations). Our semantic parser achieves the state of
the art on SPADES and GRAPHQUESTIONS, while
obtaining competitive results on GEOQUERY and
WEBQUESTIONS. A side-product of our mod-
eling framework is that the induced intermedi-
ate representations can contribute to rationalizing
neural predictions (Lei et al., 2016). Specifically,
they can shed light on the kinds of representations
(especially predicates) useful for semantic pars-
ing. Evaluation of the induced predicate-argument
relations against syntax-based ones reveals that
they are interpretable and meaningful compared
to heuristic baselines, but they sometimes deviate
from linguistic conventions.

2 Preliminaries

Problem Formulation Let K denote a knowl-
edge base or more generally a reasoning system,
and x an utterance paired with a grounded mean-
ing representationG or its denotation y. Our prob-
lem is to learn a semantic parser that maps x to G
via an intermediate ungrounded representation U .
When G is executed against K, it outputs denota-

2We discuss the merits and limitations of this assumption
in Section 5

Predicate Usage Sub-categories
answer denotation wrapper —

type entity type checking stateid, cityid,riverid, etc.

all querying for an entireset of entities —

aggregation one-argument metapredicates for sets
count, largest,
smallest, etc.

logical
connectors

two-argument meta
predicates for sets

intersect,
union, exclude

Table 1: List of domain-general predicates.

tion y.

Grounded Meaning Representation We repre-
sent grounded meaning representations in FunQL
(Kate et al., 2005) amongst many other alterna-
tives such as lambda calculus (Zettlemoyer and
Collins, 2005), λ-DCS (Liang, 2013) or graph
queries (Holzschuher and Peinl, 2013; Harris
et al., 2013). FunQL is a variable-free query lan-
guage, where each predicate is treated as a func-
tion symbol that modifies an argument list. For
example, the FunQL representation for the utter-
ance which states do not border texas is:

answer(exclude(state(all), next to(texas)))

where next to is a domain-specific binary predi-
cate that takes one argument (i.e., the entity texas)
and returns a set of entities (e.g., the states border-
ing Texas) as its denotation. all is a special predi-
cate that returns a collection of entities. exclude is
a predicate that returns the difference between two
input sets.

An advantage of FunQL is that the resulting
s-expression encodes semantic compositionality
and derivation of the logical forms. This prop-
erty makes FunQL logical forms convenient to be
predicted with recurrent neural networks (Vinyals
et al., 2015; Choe and Charniak, 2016; Dyer et al.,
2016). However, FunQL is less expressive than
lambda calculus, partially due to the elimination
of variables. A more compact logical formulation
which our method also applies to is λ-DCS (Liang,
2013). In the absence of anaphora and composite
binary predicates, conversion algorithms exist be-
tween FunQL and λ-DCS. However, we leave this
to future work.

Ungrounded Meaning Representation We
also use FunQL to express ungrounded meaning
representations. The latter consist primarily of
natural language predicates and domain-general
predicates. Assuming for simplicity that domain-
general predicates share the same vocabulary

45



in ungrounded and grounded representations,
the ungrounded representation for the example
utterance is:

answer(exclude(states(all), border(texas)))

where states and border are natural language pred-
icates. In this work we consider five types of
domain-general predicates illustrated in Table 1.
Notice that domain-general predicates are often
implicit, or represent extra-sentential knowledge.
For example, the predicate all in the above utter-
ance represents all states in the domain which are
not mentioned in the utterance but are critical for
working out the utterance denotation. Finally, note
that for certain domain-general predicates, it also
makes sense to extract natural language rationales
(e.g., not is indicative for exclude). But we do not
find this helpful in experiments.

In this work we constrain ungrounded represen-
tations to be structurally isomorphic to grounded
ones. In order to derive the target logical forms,
all we have to do is replacing predicates in the
ungrounded representations with symbols in the
knowledge base.

3 Modeling

In this section, we discuss our neural model which
maps utterances to target logical forms. The se-
mantic parsing task is decomposed in two stages:
we first explain how an utterance is converted to
an intermediate representation (Section 3.1), and
then describe how it is grounded to a knowledge
base (Section 3.2).

3.1 Generating Ungrounded Representations
At this stage, utterances are mapped to interme-
diate representations with a transition-based algo-
rithm. In general, the transition system generates
the representation by following a derivation tree
(which contains a set of applied rules) and some
canonical generation order (e.g., depth-first). For
FunQL, a simple solution exists since the repre-
sentation itself encodes the derivation. Consider
again answer(exclude(states(all), border(texas)))
which is tree structured. Each predicate (e.g., bor-
der) can be visualized as a non-terminal node of
the tree and each entity (e.g., texas) as a terminal.
The predicate all is a special case which acts as
a terminal directly. We can generate the tree with
a top-down, depth first transition system reminis-
cent of recurrent neural network grammars (RN-
NGs; Dyer et al. 2016). Similar to RNNG, our

algorithm uses a buffer to store input tokens in
the utterance and a stack to store partially com-
pleted trees. A major difference in our semantic
parsing scenario is that tokens in the buffer are not
fetched in a sequential order or removed from the
buffer. This is because the lexical alignment be-
tween an utterance and its semantic representation
is hidden. Moreover, some predicates cannot be
clearly anchored to a token span. Therefore, we
allow the generation algorithm to pick tokens and
combine logical forms in arbitrary orders, condi-
tioning on the entire set of sentential features. Al-
ternative solutions in the traditional semantic pars-
ing literature include a floating chart parser (Pa-
supat and Liang, 2015) which allows to construct
logical predicates out of thin air.

Our transition system defines three actions,
namely NT, TER, and RED, explained below.

NT(X) generates a Non-Terminal predicate. This
predicate is either a natural language expression
such as border, or one of the domain-general
predicates exemplified in Table 1 (e.g., exclude).
The type of predicate is determined by the place-
holder X and once generated, it is pushed onto the
stack and represented as a non-terminal followed
by an open bracket (e.g., ‘border(’). The open
bracket will be closed by a reduce operation.

TER(X) generates a TERminal entity or the spe-
cial predicate all. Note that the terminal choice
does not include variable (e.g., $0, $1), since
FunQL is a variable-free language which suffi-
ciently captures the semantics of the datasets we
work with. The framework could be extended
to generate directly acyclic graphs by incorporat-
ing variables with additional transition actions for
handling variable mentions and co-reference.

RED stands for REDuce and is used for subtree
completion. It recursively pops elements from the
stack until an open non-terminal node is encoun-
tered. The non-terminal is popped as well, af-
ter which a composite term representing the entire
subtree, e.g., border(texas), is pushed back to the
stack. If a RED action results in having no more
open non-terminals left on the stack, the transition
system terminates. Table 2 shows the transition
actions used to generate our running example.

The model generates the ungrounded represen-
tation U conditioned on utterance x by recursively
calling one of the above three actions. Note that
U is defined by a sequence of actions (denoted

46



Sentence: which states do not border texas
Non-terminal symbols in buffer: which, states, do, not, border
Terminal symbols in buffer: texas
Stack Action NT choice TER choice

NT answer
answer ( NT exclude
answer ( exclude ( NT states
answer ( exclude ( states ( TER all
answer ( exclude ( states ( all RED
answer ( exclude ( states ( all ) NT border
answer ( exclude ( states ( all ) , border ( TER texas
answer ( exclude ( states ( all ) , border ( texas RED
answer ( exclude ( states ( all ) , border ( texas ) RED
answer ( exclude ( states ( all ) , border ( texas ) ) RED
answer ( exclude ( states ( all ) , border ( texas ) ) )

Table 2: Actions taken by the transition system for generating the ungrounded meaning representation
of the example utterance. Symbols in red indicate domain-general predicates.

by a) and a sequence of term choices (denoted
by u) as shown in Table 2. The conditional proba-
bility p(U |x) is factorized over time steps as:

p(U |x) = p(a, u|x)

=

T∏

t=1

p(at|a<t, x)p(ut|a<t, x)I(at 6=RED)
(1)

where I is an indicator function.
To predict the actions of the transition system,

we encode the input buffer with a bidirectional
LSTM (Hochreiter and Schmidhuber, 1997) and
the output stack with a stack-LSTM (Dyer et al.,
2015). At each time step, the model uses the rep-
resentation of the transition system et to predict an
action:

p(at|a<t, x) ∝ exp(Wa · et) (2)

where et is the concatenation of the buffer repre-
sentation bt and the stack representation st. While
the stack representation st is easy to retrieve as
the top state of the stack-LSTM, obtaining the
buffer representation bt is more involved. This is
because we do not have an explicit buffer repre-
sentation due to the non-projectivity of semantic
parsing. We therefore compute at each time step
an adaptively weighted representation of bt (Bah-
danau et al., 2015) conditioned on the stack rep-
resentation st. This buffer representation is then
concatenated with the stack representation to form
the system representation et.

When the predicted action is either NT or TER,
an ungrounded term ut (either a predicate or an

entity) needs to be chosen from the candidate list
depending on the specific placeholder X. To se-
lect a domain-general term, we use the same rep-
resentation of the transition system et to compute
a probability distribution over candidate terms:

p(uGENERALt |a<t, x) ∝ exp(Wp · et) (3)

To choose a natural language term, we directly
compute a probability distribution of all natural
language terms (in the buffer) conditioned on the
stack representation st and select the most relevant
term (Jia and Liang, 2016):

p(uNLt |a<t, x) ∝ exp(st) (4)

When the predicted action is RED, the com-
pleted subtree is composed into a single represen-
tation on the stack. For the choice of composition
function, we use a single-layer neural network as
in Dyer et al. (2015), which takes as input the con-
catenated representation of the predicate and argu-
ment of the subtree.

3.2 Generating Grounded Representations
Since we constrain the network to learn un-
grounded structures that are isomorphic to the
target meaning representation, converting un-
grounded representations to grounded ones be-
comes a simple lexical mapping problem. For sim-
plicity, hereafter we do not differentiate natural
language and domain-general predicates.

To map an ungrounded term ut to a grounded
term gt, we compute the conditional probability

47



of gt given ut with a bi-linear neural network:

p(gt|ut) ∝ exp ~ut ·Wug · ~gt> (5)
where ~ut is the contextual representation of the un-
grounded term given by the bidirectional LSTM,
~gt is the grounded term embedding, and Wug is
the weight matrix.

The above grounding step can be interpreted
as learning a lexicon: the model exclusively re-
lies on the intermediate representation U to pre-
dict the target meaning representation G without
taking into account any additional features based
on the utterance. In practice, U may provide suf-
ficient contextual background for closed domain
semantic parsing where an ungrounded predicate
often maps to a single grounded predicate, but is
a relatively impoverished representation for pars-
ing large open-domain knowledge bases like Free-
base. In this case, we additionally rely on a dis-
criminative reranker which ranks the grounded
representations derived from ungrounded repre-
sentations (see Section 3.4).

3.3 Training Objective
When the target meaning representation is avail-
able, we directly compare it against our predic-
tions and back-propagate. When only denotations
are available, we compare surrogate meaning rep-
resentations against our predictions (Reddy et al.,
2014). Surrogate representations are those with
the correct denotations. When there exist multi-
ple surrogate representations,3 we select one ran-
domly and back-propagate. The global effect of
the above update rule is close to maximizing the
marginal likelihood of denotations, which differs
from recent work on weakly-supervised seman-
tic parsing based on reinforcement learning (Nee-
lakantan et al., 2017).

Consider utterance x with ungrounded mean-
ing representation U , and grounded meaning rep-
resentation G. Both U and G are defined with
a sequence of transition actions (same for U
and G) and a sequence of terms (different for U
and G). Recall that a = [a1, · · · , an] denotes
the transition action sequence defining U and G;
let u = [u1, · · · , uk] denote the ungrounded
terms (e.g., predicates), and g = [g1, · · · , gk]
the grounded terms. We aim to maximize the
likelihood of the grounded meaning representa-
tion p(G|x) over all training examples. This

3The average Freebase surrogate representations obtained
with highest denotation match (F1) is 1.4.

likelihood can be decomposed into the likelihood
of the grounded action sequence p(a|x) and the
grounded term sequence p(g|x), which we opti-
mize separately.

For the grounded action sequence (which by
design is the same as the ungrounded action se-
quence and therefore the output of the transition
system), we can directly maximize the log likeli-
hood log p(a|x) for all examples:

La =
∑

x∈T
log p(a|x) =

∑

x∈T

n∑

t=1

log p(at|x) (6)

where T denotes examples in the training data.
For the grounded term sequence g, since the

intermediate ungrounded terms are latent, we
maximize the expected log likelihood of the
grounded terms

∑
u [p(u|x) log p(g|u, x)] for all

examples, which is a lower bound of the log like-
lihood log p(g|x):
Lg =

∑

x∈T

∑

u

[p(u|x) log p(g|u, x)]

=
∑

x∈T

∑

u

[
p(u|x)

k∑

t=1

log p(gt|ut)
] (7)

The final objective is the combination of La
and Lg, denoted as LG = La + Lg. We opti-
mize this objective with the method described in
Lei et al. (2016).

3.4 Reranker
As discussed above, for open domain semantic
parsing, solely relying on the ungrounded repre-
sentation would result in an impoverished model
lacking sentential context useful for disambigua-
tion decisions. For all Freebase experiments, we
followed previous work (Berant et al., 2013; Be-
rant and Liang, 2014; Reddy et al., 2014) in addi-
tionally training a discriminative ranker to re-rank
grounded representations globally.

The discriminative ranker is a maximum-
entropy model (Berant et al., 2013). The objective
is to maximize the log likelihood of the correct an-
swer y given x by summing over all grounded can-
didates G with denotation y (i.e.,[[G]]K = y):

Ly =
∑

(x,y)∈T
log

∑

[[G]]K=y

p(G|x) (8)

p(G|x) ∝ exp{f(G, x)} (9)
where f(G, x) is a feature function that maps
pair (G, x) into a feature vector. We give details
on the features we used in Section 4.2.

48



4 Experiments

In this section, we verify empirically that our se-
mantic parser derives useful meaning representa-
tions. We give details on the evaluation datasets
and baselines used for comparison. We also
describe implementation details and the features
used in the discriminative ranker.

4.1 Datasets

We evaluated our model on the following datasets
which cover different domains, and use differ-
ent types of training data, i.e., pairs of natural
language utterances and grounded meanings or
question-answer pairs.

GEOQUERY (Zelle and Mooney, 1996) con-
tains 880 questions and database queries about US
geography. The utterances are compositional, but
the language is simple and vocabulary size small.
The majority of questions include at most one en-
tity. SPADES (Bisk et al., 2016) contains 93,319
questions derived from CLUEWEB09 (Gabrilovich
et al., 2013) sentences. Specifically, the questions
were created by randomly removing an entity, thus
producing sentence-denotation pairs (Reddy et al.,
2014). The sentences include two or more entities
and although they are not very compositional, they
constitute a large-scale dataset for neural network
training. WEBQUESTIONS (Berant et al., 2013)
contains 5,810 question-answer pairs. Similar to
SPADES, it is based on Freebase and the questions
are not very compositional. However, they are
real questions asked by people on the Web. Fi-
nally, GRAPHQUESTIONS (Su et al., 2016) con-
tains 5,166 question-answer pairs which were cre-
ated by showing 500 Freebase graph queries to
Amazon Mechanical Turk workers and asking
them to paraphrase them into natural language.

4.2 Implementation Details

Amongst the four datasets described above, GEO-
QUERY has annotated logical forms which we di-
rectly use for training. For the other three datasets,
we treat surrogate meaning representations which
lead to the correct answer as gold standard. The
surrogates were selected from a subset of candi-
date Freebase graphs, which were obtained by en-
tity linking. Entity mentions in SPADES have been
automatically annotated with Freebase entities
(Gabrilovich et al., 2013). For WEBQUESTIONS
and GRAPHQUESTIONS, we follow the procedure
described in Reddy et al. (2016). We identify po-

tential entity spans using seven handcrafted part-
of-speech patterns and associate them with Free-
base entities obtained from the Freebase/KG API.4

We use a structured perceptron trained on the enti-
ties found in WEBQUESTIONS and GRAPHQUES-
TIONS to select the top 10 non-overlapping entity
disambiguation possibilities. We treat each possi-
bility as a candidate input utterance, and use the
perceptron score as a feature in the discriminative
reranker, thus leaving the final disambiguation to
the semantic parser.

Apart from the entity score, the discriminative
ranker uses the following basic features. The first
feature is the likelihood score of a grounded rep-
resentation aggregating all intermediate represen-
tations. The second set of features include the em-
bedding similarity between the relation and the ut-
terance, as well as the similarity between the rela-
tion and the question words. The last set of fea-
tures includes the answer type as indicated by the
last word in the Freebase relation (Xu et al., 2016).

We used the Adam optimizer for training with
an initial learning rate of 0.001, two momentum
parameters [0.99, 0.999], and batch size 1. The di-
mensions of the word embeddings, LSTM states,
entity embeddings and relation embeddings are
[50, 100, 100, 100]. The word embeddings were
initialized with Glove embeddings (Pennington
et al., 2014). All other embeddings were randomly
initialized.

4.3 Results

Experimental results on the four datasets are sum-
marized in Tables 3–6. We present comparisons of
our system which we call SCANNER (as a short-
hand for SymboliC meANiNg rEpResentation)
against a variety of models previously described
in the literature.

GEOQUERY results are shown in Table 5. The
first block contains symbolic systems, whereas
neural models are presented in the second block.
We report accuracy which is defined as the pro-
portion of the utterance that are correctly parsed
to their gold standard logical forms. All previ-
ous neural systems (Dong and Lapata, 2016; Jia
and Liang, 2016) treat semantic parsing as a se-
quence transduction problem and use LSTMs to
directly map utterances to logical forms. SCAN-
NER yields performance improvements over these

4http://developers.google.com/
freebase/

49



Models F1
Berant et al. (2013) 35.7
Yao and Van Durme (2014) 33.0
Berant and Liang (2014) 39.9
Bast and Haussmann (2015) 49.4
Berant and Liang (2015) 49.7
Reddy et al. (2016) 50.3
Bordes et al. (2014) 39.2
Dong et al. (2015) 40.8
Yih et al. (2015) 52.5
Xu et al. (2016) 53.3
Neural Baseline 48.3
SCANNER 49.4

Table 3: WEBQUESTIONS results.

Models F1
SEMPRE (Berant et al., 2013) 10.80
PARASEMPRE (Berant and Liang, 2014) 12.79
JACANA (Yao and Van Durme, 2014) 5.08
Neural Baseline 16.24
SCANNER 17.02

Table 4: GRAPHQUESTIONS results. Numbers for
comparison systems are from Su et al. (2016).

systems when using comparable data sources for
training. Jia and Liang (2016) achieve better
results with synthetic data that expands GEO-
QUERY; we could adopt their approach to improve
model performance, however, we leave this to fu-
ture work.

Table 6 reports SCANNER’s performance on
SPADES. For all Freebase related datasets we use
average F1 (Berant et al., 2013) as our evalua-
tion metric. Previous work on this dataset has
used a semantic parsing framework similar to ours
where natural language is converted to an interme-
diate syntactic representation and then grounded
to Freebase. Specifically, Bisk et al. (2016) evalu-
ate the effectiveness of four different CCG parsers
on the semantic parsing task when varying the
amount of supervision required. As can be seen,
SCANNER outperforms all CCG variants (from
unsupervised to fully supervised) without having
access to any manually annotated derivations or
lexicons. For fair comparison, we also built a neu-
ral baseline that encodes an utterance with a recur-
rent neural network and then predicts a grounded
meaning representation directly (Ture and Jojic,
2016; Yih et al., 2016). Again, we observe that
SCANNER outperforms this baseline.

Results on WEBQUESTIONS are summarized
in Table 3. SCANNER obtains performance on
par with the best symbolic systems (see the first
block in the table). It is important to note that
Bast and Haussmann (2015) develop a question
answering system, which contrary to ours can-

Models Accuracy
Zettlemoyer and Collins (2005) 79.3
Zettlemoyer and Collins (2007) 86.1
Kwiatkowksi et al. (2010) 87.9
Kwiatkowski et al. (2011) 88.6
Kwiatkowski et al. (2013) 88.0
Zhao and Huang (2015) 88.9
Liang et al. (2011) 91.1
Dong and Lapata (2016) 84.6
Jia and Liang (2016) 85.0
Jia and Liang (2016) with extra data 89.1
SCANNER 86.7

Table 5: GEOQUERY results.

Models F1
Unsupervised CCG (Bisk et al., 2016) 24.8
Semi-supervised CCG (Bisk et al., 2016) 28.4
Neural baseline 28.6
Supervised CCG (Bisk et al., 2016) 30.9
Rule-based system (Bisk et al., 2016) 31.4
SCANNER 31.5

Table 6: SPADES results.

not produce meaning representations whereas Be-
rant and Liang (2015) propose a sophisticated
agenda-based parser which is trained borrowing
ideas from imitation learning. SCANNER is con-
ceptually similar to Reddy et al. (2016) who also
learn a semantic parser via intermediate repre-
sentations which they generate based on the out-
put of a dependency parser. SCANNER performs
competitively despite not having access to any
linguistically-informed syntactic structures. The
second block in Table 3 reports the results of sev-
eral neural systems. Xu et al. (2016) represent the
state of the art on WEBQUESTIONS. Their sys-
tem uses Wikipedia to prune out erroneous candi-
date answers extracted from Freebase. Our model
would also benefit from a similar post-processing
step. As in previous experiments, SCANNER out-
performs the neural baseline, too.

Finally, Table 4 presents our results on
GRAPHQUESTIONS. We report F1 for SCANNER,
the neural baseline model, and three symbolic sys-
tems presented in Su et al. (2016). SCANNER
achieves a new state of the art on this dataset with
a gain of 4.23 F1 points over the best previously
reported model.

4.4 Analysis of Intermediate Representations

Since a central feature of our parser is that it learns
intermediate representations with natural language
predicates, we conducted additional experiments
in order to inspect their quality. For GEOQUERY

50



Metrics Accuracy
Exact match 79.3
Structure match 89.6
Token match 96.5

Table 7: GEOQUERY evaluation of ungrounded
meaning representations. We report accuracy
against a manually created gold standard.

which contains only 280 test examples, we manu-
ally annotated intermediate representations for the
test instances and evaluated the learned represen-
tations against them. The experimental setup aims
to shows how humans can participate in improving
the semantic parser with feedback at the interme-
diate stage. In terms of evaluation, we use three
metrics shown in Table 7. The first row shows the
percentage of exact matches between the predicted
representations and the human annotations. The
second row refers to the percentage of structure
matches, where the predicted representations have
the same structure as the human annotations, but
may not use the same lexical terms. Among struc-
turally correct predictions, we additionally com-
pute how many tokens are correct, as shown in the
third row. As can be seen, the induced meaning
representations overlap to a large extent with the
human gold standard.

We also evaluated the intermediate represen-
tations created by SCANNER on the other three
(Freebase) datasets. Since creating a man-
ual gold standard for these large datasets is
time-consuming, we compared the induced rep-
resentations against the output of a syntactic
parser. Specifically, we converted the ques-
tions to event-argument structures with EASY-
CCG (Lewis and Steedman, 2014), a high cover-
age and high accuracy CCG parser. EASYCCG
extracts predicate-argument structures with a la-
beled F-score of 83.37%. For further comparison,
we built a simple baseline which identifies pred-
icates based on the output of the Stanford POS-
tagger (Manning et al., 2014) following the order-
ing VBD�VBN�VB�VBP�VBZ�MD.

As shown in Table 8, on SPADES and WE-
BQUESTIONS, the predicates learned by our
model match the output of EASYCCG more
closely than the heuristic baseline. But for
GRAPHQUESTIONS which contains more compo-
sitional questions, the mismatch is higher. How-
ever, since the key idea of our model is to cap-
ture salient meaning for the task at hand rather
than strictly obey syntax, we would not expect the

Dataset SCANNER Baseline
SPADES 51.2 45.5

–conj (1422) 56.1 66.4
–control (132) 28.3 40.5
–pp (3489) 46.2 23.1
–subord (76) 37.9 52.9

WEBQUESTIONS 42.1 25.5
GRAPHQUESTIONS 11.9 15.3

Table 8: Evaluation of predicates induced by
SCANNER against EASYCCG. We report F1(%)
across datasets. For SPADES, we also provide a
breakdown for various utterance types.

predicates induced by our system to entirely agree
with those produced by the syntactic parser. To
further analyze how the learned predicates differ
from syntax-based ones, we grouped utterances in
SPADES into four types of linguistic constructions:
coordination (conj), control and raising (control),
prepositional phrase attachment (pp), and subor-
dinate clauses (subord). Table 8 also shows the
breakdown of matching scores per linguistic con-
struction, with the number of utterances in each
type. In Table 9, we provide examples of predi-
cates identified by SCANNER, indicating whether
they agree or not with the output of EASYCCG.
As a reminder, the task in SPADES is to predict the
entity masked by a blank symbol ( ).

As can be seen in Table 8, the match-
ing score is relatively high for utterances in-
volving coordination and prepositional phrase
attachments. The model will often identify
informative predicates (e.g., nouns) which do
not necessarily agree with linguistic intuition.
For example, in the utterance wilhelm maybach
and his son started maybach in 1909 (see
Table 9), SCANNER identifies the predicate-
argument structure son(wilhelm maybach) rather
than started(wilhelm maybach). We also observed
that the model struggles with control and subor-
dinate constructions. It has difficulty distinguish-
ing control from raising predicates as exemplified
in the utterance ceo john thain agreed to leave
from Table 9, where it identifies the raising predi-
cate agreed. For subordinate clauses, SCANNER
tends to take shortcuts identifying as predicates
words closest to the blank symbol.

5 Discussion

We presented a neural semantic parser which
converts natural language utterances to grounded
meaning representations via intermediate
predicate-argument structures. Our model

51



conj

the boeing company was founded in 1916 and is
headquartered in , illinois .
nstar was founded in 1886 and is based in boston , .
the is owned and operated by zuffa , llc ,
headquarted in las vegas , nevada .
hugh attended and then shifted to uppingham school
in england .

was incorporated in 1947 and is based in
new york city .
the ifbb was formed in 1946 by president ben weider
and his brother .
wilhelm maybach and his son started maybach in
1909 .

was founded in 1996 and is headquartered in chicago .

control

threatened to kidnap russ .
has also been confirmed to play captain haddock .

hoffenberg decided to leave .
is reportedly trying to get impregnated by djimon

now .
for right now , are inclined to trust obama to do just
that .

agreed to purchase wachovia corp .
ceo john thain agreed to leave .
so nick decided to create .
salva later went on to make the non clown-based horror

.
eddie dumped debbie to marry when carrie was 2 .

pp

is the home of the university of tennessee .
chu is currently a physics professor at .
youtube is based in , near san francisco , california .
mathematica is a product of .

jobs will retire from .
the nab is a strong advocacy group in .
this one starred robert reed , known mostly as .

is positively frightening as detective bud white .

subord

the is a national testing board that is based in toronto .
is a corporation that is wholly owned by the

city of edmonton .
unborn is a scary movie that stars .

’s third wife was actress melina mercouri , who died
in 1994 .
sure , there were who liked the shah .

founded the , which is now also a designated terrorist
group .

is an online bank that ebay owns .
zoya akhtar is a director , who has directed the
upcoming movie .
imelda staunton , who plays , is genius .

is the important president that american ever had .
plus mitt romney is the worst governor that has had .

Table 9: Informative predicates identified by SCANNER in various types of utterances. Yellow predi-
cates were identified by both SCANNER and EASYCCG, red predicates by SCANNER alone, and green
predicates by EASYCCG alone.

essentially jointly learns how to parse natural
language semantics and the lexicons that help
grounding. Compared to previous neural semantic
parsers, our model is more interpretable as the
intermediate structures are useful for inspecting
what the model has learned and whether it
matches linguistic intuition.

An assumption our model imposes is that un-
grounded and grounded representations are struc-
turally isomorphic. An advantage of this assump-
tion is that tokens in the ungrounded and grounded
representations are strictly aligned. This allows
the neural network to focus on parsing and lexi-
cal mapping, sidestepping the challenging struc-
ture mapping problem which would result in a
larger search space and higher variance. On the
negative side, the structural isomorphism assump-
tion restricts the expressiveness of the model, es-
pecially since one of the main benefits of adopt-
ing a two-stage parser is the potential of captur-
ing domain-independent semantic information via
the intermediate representation. While it would be
challenging to handle drastically non-isomorphic
structures in the current model, it is possible to
perform local structure matching, i.e., when the
mapping between natural language and domain-
specific predicates is many-to-one or one-to-many.

For instance, Freebase does not contain a rela-
tion representing daughter, using instead two rela-
tions representing female and child. Previous work
(Kwiatkowski et al., 2013) models such cases
by introducing collapsing (for many-to-one map-
ping) and expansion (for one-to-many mapping)
operators. Within our current framework, these
two types of structural mismatches can be han-
dled with semi-Markov assumptions (Sarawagi
and Cohen, 2005; Kong et al., 2016) in the pars-
ing (i.e., predicate selection) and the grounding
steps, respectively. Aside from relaxing strict iso-
morphism, we would also like to perform cross-
domain semantic parsing where the first stage of
the semantic parser is shared across domains.

Acknowledgments We would like to thank
three anonymous reviewers, members of the Ed-
inburgh ILCC and the IBM Watson, and Abul-
hair Saparov for feedback. The support of the
European Research Council under award num-
ber 681760 “Translating Multiple Modalities into
Text” is gratefully acknowledged.

References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2015. Neural machine translation by jointly

52



learning to align and translate. In Proceedings of
ICLR 2015. San Diego, California.

Hannah Bast and Elmar Haussmann. 2015. More ac-
curate question answering on Freebase. In Proceed-
ings of the 24th ACM International on Conference
on Information and Knowledge Management. ACM,
pages 1431–1440.

Emily M Bender, Dan Flickinger, Stephan Oepen,
Woodley Packard, and Ann Copestake. 2015. Lay-
ers of interpretation: On grammar and composition-
ality. In Proceedings of the 11th International Con-
ference on Computational Semantics. London, UK,
pages 239–249.

Jonathan Berant, Andrew Chou, Roy Frostig, and Percy
Liang. 2013. Semantic parsing on Freebase from
question-answer pairs. In Proceedings of the 2013
Conference on Empirical Methods in Natural Lan-
guage Processing. Seattle, Washington, pages 1533–
1544.

Jonathan Berant and Percy Liang. 2014. Semantic
parsing via paraphrasing. In Proceedings of the
52nd Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers). Balti-
more, Maryland, pages 1415–1425.

Jonathan Berant and Percy Liang. 2015. Imitation
learning of agenda-based semantic parsers. Trans-
actions of the Association for Computational Lin-
guistics 3:545–558.

Yonatan Bisk, Siva Reddy, John Blitzer, Julia Hock-
enmaier, and Mark Steedman. 2016. Evaluating in-
duced CCG parsers on grounded semantic parsing.
In Proceedings of the 2016 Conference on Empirical
Methods in Natural Language Processing. Austin,
Texas, pages 2022–2027.

Antoine Bordes, Sumit Chopra, and Jason Weston.
2014. Question answering with subgraph embed-
dings. In Proceedings of the 2014 Conference on
Empirical Methods in Natural Language Processing
(EMNLP). Doha, Qatar, pages 615–620.

Qingqing Cai and Alexander Yates. 2013. Large-scale
semantic parsing via schema matching and lexicon
extension. In Proceedings of the 51st Annual Meet-
ing of the Association for Computational Linguis-
tics (Volume 1: Long Papers). Sofia, Bulgaria, pages
423–433.

Do Kook Choe and Eugene Charniak. 2016. Parsing
as language modeling. In Proceedings of the 2016
Conference on Empirical Methods in Natural Lan-
guage Processing. Austin, Texas, pages 2331–2336.

Li Dong and Mirella Lapata. 2016. Language to logi-
cal form with neural attention. In Proceedings of the
54th Annual Meeting of the Association for Com-
putational Linguistics (Volume 1: Long Papers).
Berlin, Germany, pages 33–43.

Li Dong, Furu Wei, Ming Zhou, and Ke Xu. 2015.
Question answering over Freebase with multi-
column convolutional neural networks. In Proceed-
ings of the 53rd Annual Meeting of the Association
for Computational Linguistics and the 7th Interna-
tional Joint Conference on Natural Language Pro-
cessing (Volume 1: Long Papers). Beijing, China,
pages 260–269.

Chris Dyer, Miguel Ballesteros, Wang Ling, Austin
Matthews, and Noah A. Smith. 2015. Transition-
based dependency parsing with stack long short-
term memory. In Proceedings of the 53rd Annual
Meeting of the Association for Computational Lin-
guistics and the 7th International Joint Conference
on Natural Language Processing (Volume 1: Long
Papers). Beijing, China, pages 334–343.

Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros,
and Noah A. Smith. 2016. Recurrent neural net-
work grammars. In Proceedings of the 2016 Con-
ference of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies. San Diego, California, pages
199–209.

Jeffrey Flanigan, Sam Thomson, Jaime Carbonell,
Chris Dyer, and Noah A. Smith. 2014. A discrim-
inative graph-based parser for the abstract meaning
representation. In Proceedings of the 52nd Annual
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers). Baltimore, Mary-
land, pages 1426–1436.

Evgeniy Gabrilovich, Michael Ringgaard, and Amar-
nag Subramanya. 2013. FACC1: Freebase anno-
tation of ClueWeb corpora, version 1 (release date
2013-06-26, format version 1, correction level 0) .

Matt Gardner and Jayant Krishnamurthy. 2017. Open-
Vocabulary Semantic Parsing with both Distribu-
tional Statistics and Formal Knowledge. In Pro-
ceedings of the 31st AAAI Conference on Artificial
Intelligence. San Francisco, California, pages 3195–
3201.

Jonas Groschwitz, Alexander Koller, and Christoph Te-
ichmann. 2015. Graph parsing with s-graph gram-
mars. In Proceedings of the 53rd Annual Meet-
ing of the Association for Computational Linguistics
and the 7th International Joint Conference on Natu-
ral Language Processing (Volume 1: Long Papers).
Beijing, China, pages 1481–1490.

Steve Harris, Andy Seaborne, and Eric
Prud’hommeaux. 2013. SPARQL 1.1 query
language. W3C recommendation 21(10).

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation
9(8):1735–1780.

Florian Holzschuher and René Peinl. 2013. Perfor-
mance of graph query languages: comparison of

53



cypher, gremlin and native access in Neo4j. In Pro-
ceedings of the Joint EDBT/ICDT 2013 Workshops.
ACM, pages 195–204.

Robin Jia and Percy Liang. 2016. Data recombination
for neural semantic parsing. In Proceedings of the
54th Annual Meeting of the Association for Com-
putational Linguistics (Volume 1: Long Papers).
Berlin, Germany, pages 12–22.

Rohit J. Kate, Yuk Wah Wong, and Raymond J.
Mooney. 2005. Learning to Transform Natural to
Formal Languages. In Proceedings for the 20th Na-
tional Conference on Artificial Intelligence. Pitts-
burgh, Pennsylvania, pages 1062–1068.

Lingpeng Kong, Chris Dyer, and Noah A Smith. 2016.
Segmental recurrent neural networks. In Proceed-
ings of ICLR 2016. San Juan, Puerto Rico.

Tomáš Kočiský, Gábor Melis, Edward Grefenstette,
Chris Dyer, Wang Ling, Phil Blunsom, and
Karl Moritz Hermann. 2016. Semantic parsing with
semi-supervised sequential autoencoders. In Pro-
ceedings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing. Austin, Texas,
pages 1078–1087.

Jayant Krishnamurthy and Tom Mitchell. 2012.
Weakly supervised training of semantic parsers. In
Proceedings of the 2012 Joint Conference on Empir-
ical Methods in Natural Language Processing and
Computational Natural Language Learning. Jeju Is-
land, Korea, pages 754–765.

Jayant Krishnamurthy and Tom M. Mitchell. 2015.
Learning a Compositional Semantics for Freebase
with an Open Predicate Vocabulary. Transactions
of the Association for Computational Linguistics
3:257–270.

Tom Kwiatkowksi, Luke Zettlemoyer, Sharon Goldwa-
ter, and Mark Steedman. 2010. Inducing probabilis-
tic CCG grammars from logical form with higher-
order unification. In Proceedings of the 2010 Con-
ference on Empirical Methods in Natural Language
Processing. Cambridge, MA, pages 1223–1233.

Tom Kwiatkowski, Eunsol Choi, Yoav Artzi, and Luke
Zettlemoyer. 2013. Scaling Semantic Parsers with
On-the-Fly Ontology Matching. In Proceedings of
Empirical Methods on Natural Language Process-
ing. pages 1545–1556.

Tom Kwiatkowski, Luke Zettlemoyer, Sharon Goldwa-
ter, and Mark Steedman. 2011. Lexical generaliza-
tion in CCG grammar induction for semantic pars-
ing. In Proceedings of the 2011 Conference on Em-
pirical Methods in Natural Language Processing.
Edinburgh, Scotland, pages 1512–1523.

Tao Lei, Regina Barzilay, and Tommi Jaakkola. 2016.
Rationalizing neural predictions. In Proceedings of
the 2016 Conference on Empirical Methods in Natu-
ral Language Processing. Austin, Texas, pages 107–
117.

Mike Lewis and Mark Steedman. 2014. A* CCG pars-
ing with a supertag-factored model. In Proceed-
ings of the 2014 Conference on Empirical Methods
in Natural Language Processing (EMNLP). Doha,
Qatar, pages 990–1000.

Percy Liang. 2013. Lambda dependency-based
compositional semantics. arXiv preprint
arXiv:1309.4408 .

Percy Liang, Michael Jordan, and Dan Klein. 2011.
Learning dependency-based compositional seman-
tics. In Proceedings of the 49th Annual Meeting
of the Association for Computational Linguistics:
Human Language Technologies. Portland, Oregon,
pages 590–599.

Christopher Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven Bethard, and David McClosky.
2014. The stanford corenlp natural language pro-
cessing toolkit. In Proceedings of 52nd Annual
Meeting of the Association for Computational Lin-
guistics: System Demonstrations. Baltimore, Mary-
land, pages 55–60.

Arvind Neelakantan, Quoc V Le, Martin Abadi, An-
drew McCallum, and Dario Amodei. 2017. Learn-
ing a natural language interface with neural pro-
grammer. In Proceedings of ICLR 2017. Toulon,
France.

Panupong Pasupat and Percy Liang. 2015. Compo-
sitional semantic parsing on semi-structured tables.
In Proceedings of the 53rd Annual Meeting of the
Association for Computational Linguistics and the
7th International Joint Conference on Natural Lan-
guage Processing (Volume 1: Long Papers). Beijing,
China, pages 1470–1480.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP). Doha, Qatar, pages 1532–
1543.

Siva Reddy, Mirella Lapata, and Mark Steedman. 2014.
Large-scale semantic parsing without question-
answer pairs. Transactions of the Association for
Computational Linguistics 2:377–392.

Siva Reddy, Oscar Täckström, Michael Collins, Tom
Kwiatkowski, Dipanjan Das, Mark Steedman, and
Mirella Lapata. 2016. Transforming dependency
structures to logical forms for semantic parsing.
Transactions of the Association for Computational
Linguistics 4:127–140.

Sunita Sarawagi and William W Cohen. 2005. Semi-
markov conditional random fields for information
extraction. In Advances in Neural Information Pro-
cessing Systems 17, MIT Press, pages 1185–1192.

Yu Su, Huan Sun, Brian Sadler, Mudhakar Srivatsa,
Izzeddin Gur, Zenghui Yan, and Xifeng Yan. 2016.
On generating characteristic-rich question sets for

54



qa evaluation. In Proceedings of the 2016 Confer-
ence on Empirical Methods in Natural Language
Processing. Austin, Texas, pages 562–572.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in Neural Information Process-
ing Systems 27, MIT Press, pages 3104–3112.

Ferhan Ture and Oliver Jojic. 2016. Simple and ef-
fective question answering with recurrent neural net-
works. arXiv preprint arXiv:1606.05029 .

Oriol Vinyals, Łukasz Kaiser, Terry Koo, Slav Petrov,
Ilya Sutskever, and Geoffrey Hinton. 2015. Gram-
mar as a foreign language. In Advances in Neu-
ral Information Processing Systems 28. MIT Press,
pages 2773–2781.

Yuk Wah Wong and Raymond Mooney. 2006. Learn-
ing for semantic parsing with statistical machine
translation. In Proceedings of the Human Language
Technology Conference of the NAACL, Main Con-
ference. New York City, USA, pages 439–446.

Kun Xu, Siva Reddy, Yansong Feng, Songfang Huang,
and Dongyan Zhao. 2016. Question answering
on Freebase via relation extraction and textual evi-
dence. In Proceedings of the 54th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers). Berlin, Germany, pages 2326–
2336.

Xuchen Yao and Benjamin Van Durme. 2014. Infor-
mation extraction over structured data: Question an-
swering with Freebase. In Proceedings of the 52nd
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 1: Long Papers). Balti-
more, Maryland, pages 956–966.

Wen-tau Yih, Ming-Wei Chang, Xiaodong He, and
Jianfeng Gao. 2015. Semantic parsing via staged
query graph generation: Question answering with
knowledge base. In Proceedings of the 53rd Annual
Meeting of the Association for Computational Lin-
guistics and the 7th International Joint Conference
on Natural Language Processing (Volume 1: Long
Papers). Beijing, China, pages 1321–1331.

Wen-tau Yih, Matthew Richardson, Chris Meek, Ming-
Wei Chang, and Jina Suh. 2016. The value of se-
mantic parse labeling for knowledge base question
answering. In Proceedings of the 54th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 2: Short Papers). Berlin, Germany, pages
201–206.

John M. Zelle and Raymond J. Mooney. 1996. Learn-
ing to Parse Database Queries Using Inductive Logic
Programming. In Proceedings of the 13th National
Conference on Artificial Intelligence. Portland, Ore-
gon, pages 1050–1055.

Luke Zettlemoyer and Michael Collins. 2007. Online
learning of relaxed CCG grammars for parsing to

logical form. In Proceedings of the 2007 Joint Con-
ference on Empirical Methods in Natural Language
Processing and Computational Natural Language
Learning (EMNLP-CoNLL). Prague, Czech Repub-
lic, pages 678–687.

Luke S. Zettlemoyer and Michael Collins. 2005.
Learning to Map Sentences to Logical Form: Struc-
tured Classification with Probabilistic Categorial
Grammars. In Proceedings of 21st Conference in
Uncertainilty in Artificial Intelligence. Edinburgh,
Scotland, pages 658–666.

Kai Zhao and Liang Huang. 2015. Type-driven in-
cremental semantic parsing with polymorphism. In
Proceedings of the 2015 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies.
Denver, Colorado, pages 1416–1421.

55


	Learning Structured Natural Language Representations for Semantic Parsing

