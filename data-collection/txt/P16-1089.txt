



















































Siamese CBOW: Optimizing Word Embeddings for Sentence Representations


Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 941–951,
Berlin, Germany, August 7-12, 2016. c©2016 Association for Computational Linguistics

Siamese CBOW: Optimizing Word Embeddings
for Sentence Representations

Tom Kenter1 Alexey Borisov1, 2 Maarten de Rijke1
tom.kenter@uva.nl alborisov@yandex-team.ru derijke@uva.nl

1 University of Amsterdam, Amsterdam
2 Yandex, Moscow

Abstract

We present the Siamese Continuous Bag of
Words (Siamese CBOW) model, a neural
network for efficient estimation of high-
quality sentence embeddings. Averaging
the embeddings of words in a sentence
has proven to be a surprisingly success-
ful and efficient way of obtaining sen-
tence embeddings. However, word em-
beddings trained with the methods cur-
rently available are not optimized for the
task of sentence representation, and, thus,
likely to be suboptimal. Siamese CBOW
handles this problem by training word em-
beddings directly for the purpose of be-
ing averaged. The underlying neural net-
work learns word embeddings by predict-
ing, from a sentence representation, its
surrounding sentences. We show the ro-
bustness of the Siamese CBOW model by
evaluating it on 20 datasets stemming from
a wide variety of sources.

1 Introduction

Word embeddings have proven to be beneficial
in a variety of tasks in NLP such as machine
translation (Zou et al., 2013), parsing (Chen and
Manning, 2014), semantic search (Reinanda et al.,
2015; Voskarides et al., 2015), and tracking the
meaning of words and concepts over time (Kim
et al., 2014; Kenter et al., 2015). It is not evi-
dent, however, how word embeddings should be
combined to represent larger pieces of text, like
sentences, paragraphs or documents. Surprisingly,
simply averaging word embeddings of all words in
a text has proven to be a strong baseline or feature
across a multitude of tasks (Faruqui et al., 2014;
Yu et al., 2014; Gershman and Tenenbaum, 2015;
Kenter and de Rijke, 2015).

Word embeddings, however, are not optimized
specifically for representing sentences. In this pa-
per we present a model for obtaining word embed-
dings that are tailored specifically for the task of
averaging them. We do this by directly including
a comparison of sentence embeddings—the aver-
aged embeddings of the words they contain—in
the cost function of our network.

Word embeddings are typically trained in a fast
and scalable way from unlabeled training data. As
the training data is unlabeled, word embeddings
are usually not task-specific. Rather, word embed-
dings trained on a large training corpus, like the
ones from (Collobert and Weston, 2008; Mikolov
et al., 2013b) are employed across different tasks
(Socher et al., 2012; Kenter and de Rijke, 2015;
Hu et al., 2014). These two qualities— (i) being
trainable from large quantities of unlabeled data
in a reasonable amount of time, and (ii) robust
performance across different tasks—are highly de-
sirable and allow word embeddings to be used in
many large-scale applications. In this work we
aim to optimize word embeddings for sentence
representations in the same manner. We want
to produce general purpose sentence embeddings
that should score robustly across multiple test sets,
and we want to leverage large amounts of unla-
beled training material.

In the word2vec algorithm, Mikolov et al.
(2013a) construe a supervised training criterion
for obtaining word embeddings from unsupervised
data, by predicting, for every word, its surround-
ing words. We apply this strategy at the sentence
level, where we aim to predict a sentence from its
adjacent sentences (Kiros et al., 2015; Hill et al.,
2016). This allows us to use unlabeled training
data, which is easy to obtain; the only restriction
is that documents need to be split into sentences
and that the order between sentences is preserved.

The main research question we address is

941



whether directly optimizing word embeddings for
the task of being averaged to produce sentence em-
beddings leads to word embeddings that are better
suited for this task than word2vec does. There-
fore, we test the embeddings in an unsupervised
learning scenario. We use 20 evaluation sets that
stem from a wide variety of sources (newswire,
video descriptions, dictionary descriptions, mi-
croblog posts). Furthermore, we analyze the time
complexity of our method and compare it to our
baselines methods.

Summarizing, our main contributions are:
• We present Siamese CBOW, an efficient neural

network architecture for obtaining high-quality
word embeddings, directly optimized for sen-
tence representations;
• We evaluate the embeddings produced by

Siamese CBOW on 20 datasets, originating
from a range of sources (newswire, tweets,
video descriptions), and demonstrate the robust-
ness of embeddings across different settings.

2 Siamese CBOW

We present the Siamese Continuous Bag of Words
(CBOW) model, a neural network for efficient
estimation of high-quality sentence embeddings.
Quality should manifest itself in embeddings of
semantically close sentences being similar to one
another, and embeddings of semantically different
sentences being dissimilar. An efficient and sur-
prisingly successful way of computing a sentence
embedding is to average the embeddings of its
constituent words. Recent work uses pre-trained
word embeddings (such as word2vec and GloVe)
for this task, which are not optimized for sentence
representations. Following these approaches, we
compute sentence embeddings by averaging word
embeddings, but we optimize word embeddings
directly for the purpose of being averaged.

2.1 Training objective
We construct a supervised training criterion by
having our network predict sentences occurring
next to each other in the training data. Specifically,
for a pair of sentences (si, sj), we define a proba-
bility p(si, sj) that reflects how likely it is for the
sentences to be adjacent to one another in the train-
ing data. We compute the probability p(si, sj) us-
ing a softmax function:

pθ(si, sj) =
ecos(s

θ
i ,s

θ
j )∑

s′∈S e
cos(sθi ,s

θ′ )
, (1)

where sθx denotes the embedding of sentence sx,
based on the model parameters θ. In theory,
the summation in the denominator of Equation 1
should range over all possible sentences S, which
is not feasible in practice. Therefore, we replace
the set S with the union of the set S+ of sentences
that occur next to the sentence si in the training
data, and S−, a set of n randomly chosen sen-
tences that are not observed next to the sentence
si in the training data. The loss function of the
network is categorical cross-entropy:

L = −
∑

sj∈{S+ ∪S−}
p(si, sj) · log(pθ(si, sj)),

where p(·) is the target probability the network
should produce, and pθ(·) is the prediction it es-
timates based on parameters θ, using Equation 1.
The target distribution simply is:

p(si, sj) =
{ 1
|S+| , if sj ∈ S+
0, if sj ∈ S−.

I.e., if there are 2 positive examples (the sen-
tences preceding and following the input sentence)
and 2 negative examples, the target distribution is
(0.5, 0.5, 0, 0).

2.2 Network architecture
Figure 1 shows the architecture of the proposed
Siamese CBOW network. The input is a projec-
tion layer that selects embeddings from a word
embedding matrixW (that is shared across inputs)
for a given input sentence. The word embeddings
are averaged in the next layer, which yields a sen-
tence representation with the same dimensionality
as the input word embeddings (the boxes labeled
averagei in Figure 1). The cosine similarities be-
tween the sentence representation for sentencei
and the other sentences are calculated in the penul-
timate layer and a softmax is applied in the last
layer to produce the final probability distribution.

2.3 Training
The weights in the word embedding matrix are the
only trainable parameters in the Siamese CBOW
network. They are updated using stochastic gradi-
ent descent. The initial learning rate is monoton-
ically decreased proportionally to the number of
training batches.

3 Experimental Setup

To test the efficacy of our siamese network for
producing sentence embeddings we use multiple

942



word embeddings sentence i word embeddings sentence i-1

w w w

average average

prediction

... ...
word embeddings sentence i+1

average

...

negative example 1

average

...

negative example n

average

......

cosine layer

softmax

word embedding
matrix W W W W W

i,1 i,2 i,...

i i-1 i+1 neg 1 neg n

Figure 1: Siamese CBOW network architecture. (Input projection layer omitted.)

test sets. We use Siamese CBOW to learn word
embeddings from an unlabeled corpus. For every
sentence pair in the test sets, we compute two sen-
tence representations by averaging the word em-
beddings of each sentence. Words that are miss-
ing from the vocabulary and, hence, have no word
embedding, are omitted. The cosine similarity be-
tween the two sentence vectors is produced as a
final semantic similarity score.

As we want a clean way to directly evalu-
ate the embeddings on multiple sets we train our
model and the models we compare with on ex-
actly the same training data. We do not com-
pute extra features, perform extra preprocessing
steps or incorporate the embeddings in supervised
training schemes. Additional steps like these are
very likely to improve evaluation scores, but they
would obscure our main evaluation purpose in this
paper, which is to directly test the embeddings.

3.1 Data

We use the Toronto Book Corpus1 to train word
embeddings. This corpus contains 74,004,228
already pre-processed sentences in total, which
are made up of 1,057,070,918 tokens, originating
from 7,087 unique books. In our experiments, we
consider tokens appearing 5 times or more, which
leads to a vocabulary of 315,643 words.

3.2 Baselines

We employ two baselines for producing sentence
embeddings in our experiments. We obtain simi-
larity scores between sentence pairs from the base-
lines in the same way as the ones produced by
Siamese CBOW, i.e., we calculate the cosine sim-
ilarity between the sentence embeddings they pro-
duce.

1The corpus can be downloaded from http://www.
cs.toronto.edu/˜mbweb/; cf. (Zhu et al., 2015).

Word2vec We average word embeddings
trained with word2vec.2 We use both architec-
tures, Skipgram and CBOW, and apply default
settings: minimum word frequency 5, word
embedding size 300, context window 5, sample
threshold 10-5, no hierarchical softmax, 5 negative
examples.

Skip-thought As a second baseline we use the
sentence representations produced by the skip-
thought architecture (Kiros et al., 2015).3 Skip-
thought is a recently proposed method that learns
sentence representations in a different way from
ours, by using recurrent neural networks. This al-
lows it to take word order into account. As it trains
sentence embeddings from unlabeled data, like we
do, it is a natural baseline to consider.

Both methods are trained on the Toronto Book
Corpus, the same corpus used to train Siamese
CBOW. We should note that as we use skip-
thought vectors as trained by Kiros et al. (2015),
skip-thought has an advantage over both word2vec
and Siamese CBOW as the vocabulary used for
encoding sentences contains 930,913 words, three
times the size of the vocabulary that we use.

3.3 Evaluation

We use 20 SemEval datasets from the SemEval se-
mantic textual similarity task in 2012, 2013, 2014
and 2015 (Agirre et al., 2012; Agirre et al., 2013;
Agirre et al., 2014; Agirre et al., 2015), which con-
sist of sentence pairs from a wide array of sources
(e.g., newswire, tweets, video descriptions) that
have been manually annotated by multiple human
assessors on a 5 point scale (1: semantically unre-
lated, 5: semantically similar). In the ground truth,
the final similarity score for every sentence pair is

2The code is available from https://code.
google.com/archive/p/word2vec/.

3The code and the trained models can be down-
loaded from https://github.com/ryankiros/
skip-thoughts/.

943



Table 1: Results on SemEval datasets in terms of Pearson’s r (Spearman’s r). Highest scores, in terms
of Pearson’s r, are displayed in bold. Siamese CBOW runs statistically significantly different from the
word2vec CBOW baseline runs are marked with a †. See §3.3 for a discussion of the statistical test used.

Dataset w2v skipgram w2v CBOW skip-thought Siamese CBOW

2012

MSRpar .3740 (.3991) .3419 (.3521) .0560 (.0843) .4379† (.4311)
MSRvid .5213 (.5519) .5099 (.5450) .5807 (.5829) .4522† (.4759)
OnWN .6040 (.6476) .6320 (.6440) .6045 (.6431) .6444† (.6475)
SMTeuroparl .3071 (.5238) .3976 (.5310) .4203 (.4999) .4503† (.5449)
SMTnews .4487 (.3617) .4462 (.3901) .3911 (.3628) .3902† (.4153)

2013

FNWN .3480 (.3401) .2736 (.2867) .3124 (.3511) .2322† (.2235)
OnWN .4745 (.5509) .5165 (.6008) .2418 (.2766) .4985† (.5227)
SMT .1838 (.2843) .2494 (.2919) .3378 (.3498) .3312† (.3356)
headlines .5935 (.6044) .5730 (.5766) .3861 (.3909) .6534† (.6516)

2014

OnWN .5848 (.6676) .6068 (.6887) .4682 (.5161) .6073† (.6554)
deft-forum .3193 (.3810) .3339 (.3507) .3736 (.3737) .4082† (.4188)
deft-news .5906 (.5678) .5737 (.5577) .4617 (.4762) .5913† (.5754)
headlines .5790 (.5544) .5455 (.5095) .4031 (.3910) .6364† (.6260)
images .5131 (.5288) .5056 (.5213) .4257 (.4233) .6497† (.6484)
tweet-news .6336 (.6544) .6897 (.6615) .5138 (.5297) .7315† (.7128)

2015

answ-forums .1892 (.1463) .1767 (.1294) .2784 (.1909) .2181 (.1469)
answ-students .3233 (.2654) .3344 (.2742) .2661 (.2068) .3671† (.2824)
belief .2435 (.2635) .3277 (.3280) .4584 (.3368) .4769 (.3184)
headlines .1875 (.0754) .1806 (.0765) .1248 (.0464) .2151† (.0846)
images .2454 (.1611) .2292 (.1438) .2100 (.1220) .2560† (.1467)

the mean of the annotator judgements, and as such
can be a floating point number like 2.685.

The evaluation metric used by SemEval, and
hence by us, is Pearson’s r. As Spearman’s r is
often reported as well, we do so too.

Statistical significance To see whether Siamese
CBOW yields significantly different scores for
the same input sentence pairs from word2vec
CBOW—the method it is theoretically most sim-
ilar to—we compute Wilcoxon signed-rank test
statistics between all runs on all evaluation sets.
Runs are considered statistically significantly dif-
ferent for p-values < 0.0001.

3.4 Network

To comply with results reported in other research
(Mikolov et al., 2013b; Kusner et al., 2015) we

fix the embedding size to 300 and only consider
words appearing 5 times or more in the training
corpus. We use 2 negative examples (see §4.2.2
for an analysis of different settings). The embed-
dings are initialized randomly, by drawing from
a normal distribution with µ = 0.0 and σ = 0.01.
The batch size is 100. The initial learning rate α is
0.0001, which we obtain by observing the loss on
the training data. Training consists of one epoch.

We use Theano (Theano Development Team,
2016) to implement our network.4 We ran our ex-
periments on GPUs in the DAS5 cluster (Bal et al.,
2016).

4The code for Siamese CBOW is available under
an open-source license at https://bitbucket.org/
TomKenter/siamese-cbow.

944



4 Results

In this section we present the results of our ex-
periments, and analyze the stability of Siamese
CBOW with respect to its (hyper)parameters.

4.1 Main experiments

In Table 1, the results of Siamese CBOW on 20
SemEval datasets are displayed, together with the
results of the baseline systems. As we can see
from the table, Siamese CBOW outperforms the
baselines in the majority of cases (14 out of 20).
The very low scores of skip-thought on MSRpar
appear to be a glitch, which we will ignore.

It is interesting to see that for the set with
the highest average sentence length (2013 SMT,
with 24.7 words per sentence on average) Siamese
CBOW is very close to skip-thought, the best per-
forming baseline. In terms of lexical term over-
lap, unsurprisingly, all methods have trouble with
the sets with little overlap (2013 FNWN, 2015
answers-forums, which both have 7% lexical over-
lap). It is interesting to see, however, that for the
next two sets (2015 belief and 2012 MSRpar, 11%
and 14% overlap respectively) Siamese CBOW
manages to get the best performance. The high-
est performance on all sets is 0.7315 Pearson’s r
of Siamese CBOW on the 2014 tweet-news set.
This figure is not very far from the best perform-
ing SemEval run that year which has 0.792 Pear-
son’s r. This is remarkable as Siamese CBOW is
completely unsupervised, while the NTNU system
which scored best on this set (Lynum et al., 2014)
was optimized using multiple training sets.

In recent work, Hill et al. (2016) present Fast-
Sent, a model similar to ours (see §5 for a more
elaborate discussion); results are not reported for
all evaluation sets we use, and hence, we compare
the results of FastSent and Siamese CBOW sepa-
rately, in Table 2.

FastSent and Siamese CBOW each outperform
the other on half of the evaluation sets, which
clearly suggests that the differences between the
two methods are complementary.5

4.2 Analysis

Next, we investigate the stability of Siamese
CBOW with respect to its hyper-parameters. In

5The comparison is to be interpreted with caution as it is
not evident what vocabulary was used for the experiments in
(Hill et al., 2016); hence, the differences observed here might
simply be due to differences in vocabulary coverage.

Table 2: Results on SemEval 2014 datasets in
terms of Pearson’s r (Spearman’s r). Highest
scores (in Pearson’s r) are displayed in bold. Fast-
Sent results are reprinted from (Hill et al., 2016)
where they are reported in two-digit precision.

Dataset FastSent Siamese CBOW

OnWN .74 (.70) .6073 (.6554)
deft-forum .41 (.36) .4082 (.4188)
deft-news .58 (.59) .5913 (.5754)
headlines .57 (.59) .6364 (.6260)
images .74 (.78) .6497 (.6484)
tweet-news .63 (.66) .7315 (.7128)

particular, we look into stability across iterations,
different numbers of negative examples, and the
dimensionality of the embeddings. Other parame-
ter settings are set as reported in §3.4.
4.2.1 Performance across iterations
Ideally, the optimization criterion of a learning al-
gorithm ranges over the full domain of its loss
function. As discussed in §2, our loss function
only observes a sample. As such, convergence is
not guaranteed. Regardless, an ideal learning sys-
tem should not fluctuate in terms of performance
relative to the amount of training data it observes,
provided this amount is substantial: as training
proceeds the performance should stabilize.

To see whether the performance of Siamese
CBOW fluctuates during training we monitor it
during 5 epochs; at every 10,000,000 examples,
and at the end of every epoch. Figure 2 displays
the results for all 20 datasets. We observe that
on the majority of datasets the performance shows
very little variation. There are three exceptions.
The performance on the 2014 deft-news dataset
steadily decreases while the performance on 2013
OnWN steadily increases, though both seem to
stabilize at the end of epoch 5. The most no-
table exception, however, is 2012 MSRvid, where
the score, after an initial increase, drops consis-
tently. This effect might be explained by the fact
that this evaluation set primarily consists of very
short sentences—it has the lowest average sen-
tence length of all set: 6.63 with a standard de-
viation of 1.812. Therefore, a 300-dimensional
representation appears too large for this dataset;
this hypothesis is supported by the fact that 200-
dimensional embeddings work slightly better for
this dataset (see Figure 4).

945



Ep
oc

h 
1 

- b
at

ch
 2

Ep
oc

h 
1 

- b
at

ch
 4

Ep
oc

h 
1 

- b
at

ch
 6

En
d 

of
 e

po
ch

 1

Ep
oc

h 
2 

- b
at

ch
 2

Ep
oc

h 
2 

- b
at

ch
 4

Ep
oc

h 
2 

- b
at

ch
 6

En
d 

of
 e

po
ch

 2

Ep
oc

h 
3 

- b
at

ch
 2

Ep
oc

h 
3 

- b
at

ch
 4

Ep
oc

h 
3 

- b
at

ch
 6

En
d 

of
 e

po
ch

 3

Ep
oc

h 
4 

- b
at

ch
 2

Ep
oc

h 
4 

- b
at

ch
 4

Ep
oc

h 
4 

- b
at

ch
 6

En
d 

of
 e

po
ch

 4

Ep
oc

h 
5 

- b
at

ch
 2

Ep
oc

h 
5 

- b
at

ch
 4

Ep
oc

h 
5 

- b
at

ch
 6

En
d 

of
 e

po
ch

 5
0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

P
e
a
rs

o
n
's

 r

2012 MSRpar 

2012 MSRvid 

2012 OnWN 

2012 SMTeuroparl 

2012 SMTnews 

2013 FNWN 

2013 OnWN 

2013 SMT 

2013 headlines 

2014 OnWN 

2014 deft-forum 

2014 deft-news 

2014 headlines 

2014 images 

2014 tweet-news 

2015 answers-forums 

2015 answers-students 

2015 belief 

2015 headlines 

2015 images 

Figure 2: Performance of Siamese CBOW across 5 iterations.

4.2.2 Number of negative examples
In Figure 3, the results of Siamese CBOW in terms
of Pearson’s r are plotted for different numbers
of negative examples. We observe that on most
sets, the number of negative examples has lim-
ited effect on the performance of Siamese CBOW.
Choosing a higher number, like 10, occasionally
leads to slightly better performance, e.g., on the
2013 FNWN set. However, a small number like 1
or 2 typically suffices, and is sometimes markedly
better, e.g., in the case of the 2015 belief set. As

20
12

 M
SR

pa
r

20
12

 M
SR

vid

20
12

 O
nW

N

20
12

 S
MT

eu
ro

pa
rl

20
12

 S
MT

ne
ws

20
13

 F
NW

N

20
13

 O
nW

N

20
13

 S
MT

20
13

 h
ea

dl
in

es

20
14

 O
nW

N

20
14

 d
ef

t-f
or

um

20
14

 d
ef

t-n
ew

s

20
14

 h
ea

dl
in

es

20
14

 im
ag

es

20
14

 tw
ee

t-n
ew

s

20
15

 a
ns

w-
fo

ru
m

s

20
15

 a
ns

w-
st

ud
en

ts

20
15

 b
el

ie
f

20
15

 h
ea

dl
in

es

20
15

 im
ag

es
0.0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

P
e
a
rs

o
n
's

 r

neg 1 neg 2 neg 5 neg 10

Figure 3: Performance of Siamese CBOW with
different numbers of negative examples.

a high number of negative examples comes at a
substantial computational cost, we conclude from
the findings presented here that, although Siamese
CBOW is robust against different settings of this

parameter, setting the number of negative exam-
ples to 1 or 2 should be the default choice.

4.2.3 Number of dimensions
Figure 4 plots the results of Siamese CBOW for
different numbers of vector dimensions. We ob-
serve from the figure that for some sets (most
notably 2014 deft-forum, 2015 answ-forums and
2015 belief) increasing the number of embed-
ding dimensions consistently yields higher perfor-
mance. A dimensionality that is too low (50 or

20
12

 M
SR

pa
r

20
12

 M
SR

vid

20
12

 O
nW

N

20
12

 S
MT

eu
ro

pa
rl

20
12

 S
MT

ne
ws

20
13

 F
NW

N

20
13

 O
nW

N

20
13

 S
MT

20
13

 h
ea

dl
in

es

20
14

 O
nW

N

20
14

 d
ef

t-f
or

um

20
14

 d
ef

t-n
ew

s

20
14

 h
ea

dl
in

es

20
14

 im
ag

es

20
14

 tw
ee

t-n
ew

s

20
15

 a
ns

w-
fo

ru
m

s

20
15

 a
ns

w-
st

ud
en

ts

20
15

 b
el

ie
f

20
15

 h
ea

dl
in

es

20
15

 im
ag

es
0.0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

P
e
a
rs

o
n
's

 r

50d
100d

200d
300d

600d
1200d

Figure 4: Performance of Siamese CBOW across
number of embedding dimensions.

100) invariably leads to inferior results. As, sim-
ilar to a higher number of negative examples, a
higher embedding dimension leads to higher com-
putational costs, we conclude from these findings

946



that a moderate number of dimensions (200 or
300) is to be preferred.

4.3 Time complexity

For learning systems, time complexity comes into
play in the training phase and in the prediction
phase. For an end system employing sentence em-
beddings, the complexity at prediction time is the
most crucial factor, which is why we omit an anal-
ysis of training complexity. We focus on compar-
ing the time complexity for generating sentence
embeddings for Siamese CBOW, and compare it
to the baselines we use.

The complexity of all algorithms we consider is
O(n), i.e., linear in the number of input terms. As
in practice the number of arithmetic operations is
the critical factor in determining computing time,
we will now focus on these.

Both word2vec and the Siamese CBOW com-
pute embeddings of a text T = t1, . . . , t|T | by av-
eraging the term embeddings. This requires |T |−1
vector additions, and 1 multiplication by a scalar
value (namely, 1/|T |). The skip-thought model is
a recurrent neural network with GRU cells, which
computes a set of equations for every term t in T ,
which we reprint for reference (Kiros et al., 2015):

rt = σ(Wrx
t + Urh

t−1)

zt = σ(Wzx
t + Uzh

t−1)

h
t

= tanh(Wxt + U(rt � ht−1))
ht = (1− zt)� ht−1 + zt � ht

As we can see from the formulas, there are 5|T |
vector additions (+/-), 4|T | element-wise multipli-
cations by a vector, 3|T | element-wise operations
and 6|T | matrix multiplications, of which the lat-
ter, the matrix multiplications, are most expensive.

This considerable difference in numbers of
arithmetic operations is also observed in practice.
We run tests on a single CPU, using identical code
for extracting sentences from the evaluation sets,

Table 3: Time spent per method on all 20 SemEval
datasets, 17,608 sentence pairs, and the average
time spent on a single sentence pair (time in sec-
onds unless indicated otherwise).

20 sets 1 pair

Siamese CBOW (300d) 7.7 0.0004
word2vec (300d) 7.0 0.0004
skip-thought (1200d) 98,804.0 5.6

for every method. The sentence pairs are pre-
sented one by one to the models. We disregard
the time it takes to load models. Speedups might
of course be gained for all methods by presenting
the sentences in batches to the models, by com-
puting sentence representations in parallel and by
running code on a GPU. However, as we are inter-
ested in the differences between the systems, we
run the most simple and straightforward scenario.
Table 3 lists the number of seconds each method
takes to generate and compare sentence embed-
dings for an input sentence pair. The difference
between word2vec and Siamese CBOW is because
of a different implementation of word lookup.

We conclude from the observations presented
here, together with the results in §4.1, that in a set-
ting where speed at prediction time is pivotal, sim-
ple averaging methods like word2vec or Siamese
CBOW are to be preferred over more involved
methods like skip-thought.

4.4 Qualitative analysis

As Siamese CBOW directly averages word em-
beddings for sentences, we expect it to learn that
words with little semantic impact have a low vec-
tor norm. Indeed, we find that the 10 words with
lowest vector norm are to, of, and, the, a, in, that,
with, on, and as. At the other side of the spec-
trum we find many personal pronouns: had, they,
we, me, my, he, her, you, she, I, which is natural
given that the corpus on which we train consists of
fiction, which typically contains dialogues.

It is interesting to see what the differences in
related words are between Siamese CBOW and
word2vec when trained on the same corpus. For
example, for a cosine similarity > 0.6, the words
related to her in word2vec space are she, his, my
and hers. For Siamese CBOW, the only closely
related word is she. Similarly, for the word me,
word2vec finds him as most closely related word,
while Siamese CBOW comes up with I and my.
It seems from these few examples that Siamese
CBOW learns to be very strict in choosing which
words to relate to each other.

From the results presented in this section we
conclude that optimizing word embeddings for
the task of being averaged across sentences with
Siamese CBOW leads to embeddings that are ef-
fective in a large variety of settings. Furthermore,
Siamese CBOW is robust to different parameter
settings and its performance is stable across itera-

947



tions. Lastly, we show that Siamese CBOW is fast
and efficient in computing sentence embeddings at
prediction time.

5 Related Work

A distinction can be made between supervised
approaches for obtaining representations of short
texts, where a model is optimised for a specific
scenario, given a labeled training set, and unsu-
pervised methods, trained on unlabeled data, that
aim to capture short text semantics that are robust
across tasks. In the first setting, word vectors are
typically used as features or network initialisations
(Kenter and de Rijke, 2015; Hu et al., 2014; Sev-
eryn and Moschitti, 2015; Yin and Schütze, 2015).
Our work can be classified in the latter category of
unsupervised approaches.

Many models related to the one we present here
are used in a multilingual setting (Hermann and
Blunsom, 2014b; Hermann and Blunsom, 2014a;
Lauly et al., 2014). The key difference between
this work and ours is that in a multilingual setting
the goal is to predict, from a distributed represen-
tation of an input sentence, the same sentence in a
different language, whereas our goals is to predict
surrounding sentences.

Wieting et al. (2016) apply a model similar to
ours in a related but different setting where ex-
plicit semantic knowledge is leveraged. As in
our setting, word embeddings are trained by av-
eraging them. However, unlike in our proposal, a
margin-based loss function is used, which involves
a parameter that has to be tuned. Furthermore, to
select negative examples, at every training step,
a computationally expensive comparison is made
between all sentences in the training batch. The
most crucial difference is that a large set of phrase
pairs explicitly marked for semantic similarity has
to be available as training material. Obtaining
such high-quality training material is non-trivial,
expensive and limits an approach to settings for
which such material is available. In our work, we
leverage unlabeled training data, of which there is
a virtually unlimited amount.

As detailed in §2, our network predicts a sen-
tence from its neighbouring sentences. The no-
tion of learning from context sentences is also ap-
plied in (Kiros et al., 2015), where a recurrent
neural network is employed. Our way of aver-
aging the vectors of words contained in a sen-
tence is more similar to the CBOW architecture

of word2vec (Mikolov et al., 2013a), in which all
context word vectors are aggregated to predict the
one omitted word. A crucial difference between
our approach and the word2vec CBOW approach
is that we compare sentence representations di-
rectly, rather than comparing a (partial) sentence
representation to a word representation. Given
the correspondence between word2vec’s CBOW
model and ours, we included it as a baseline in
our experiments in §3. As the skip-gram architec-
ture has proven to be a strong baseline too in many
settings, we include it too.

Yih et al. (2011) also propose a siamese ar-
chitecture. Short texts are represented by tf-idf
vectors and a linear combination of input weights
is learnt by a two-layer fully connected network,
which is used to represent the input text. The co-
sine similarity between pairs of representations is
computed, but unlike our proposal, the differences
between similarities of a positive and negative sen-
tence pair are combined in a logistic loss function.

Finally, independently from our work, Hill et
al. (2016) also present a log-linear model. Rather
than comparing sentence representations to each
other, as we propose, words in one sentence are
compared to the representation of another sen-
tence. As both input and output vectors are
learnt, while we tie the parameters across the en-
tire model, Hill et al. (2016)’s model has twice as
many parameters as ours. Most importantly, how-
ever, the cost function used in (Hill et al., 2016)
is crucially different from ours. As words in sur-
rounding sentences are being compared to a sen-
tence representation, the final layer of their net-
work produces a softmax over the entire vocabu-
lary. This is fundamentally different from the fi-
nal softmax over cosines between sentence repre-
sentations that we propose. Furthermore, the soft-
max over the vocabulary is, obviously, of vocab-
ulary size, and hence grows when bigger vocabu-
laries are used, causing additional computational
cost. In our case, the size of the softmax is the
number of positive plus negative examples (see
§2.1). When the vocabulary grows, this size is un-
affected.

6 Conclusion

We have presented Siamese CBOW, a neural net-
work architecture that efficiently learns word em-
beddings optimized for producing sentence repre-
sentations. The model is trained using only unla-

948



beled text data. It predicts, from an input sentence
representation, the preceding and following sen-
tence.

We evaluated the model on 20 test sets and
show that in a majority of cases, 14 out of 20,
Siamese CBOW outperforms a word2vec base-
line and a baseline based on the recently pro-
posed skip-thought architecture. As further analy-
sis on various choices of parameters show that the
method is stable across settings, we conclude that
Siamese CBOW provides a robust way of generat-
ing high-quality sentence representations.

Word and sentence embeddings are ubiquitous
and many different ways of using them in su-
pervised tasks have been proposed. It is beyond
the scope of this paper to provide a comprehen-
sive analysis of all supervised methods using word
or sentence embeddings and the effect Siamese
CBOW would have on them. However, it would
be interesting to see how Siamese CBOW embed-
dings would affect results in supervised tasks.

Lastly, although we evaluated Siamese CBOW
on sentence pairs, there is no theoretical limitation
restricting it to sentences. It would be interesting
to see how embeddings for larger pieces of texts,
such as documents, would perform in document
clustering or filtering tasks.

Acknowledgments

The authors wish to express their gratitude for the
valuable advice and relevant pointers of the anony-
mous reviewers. Many thanks to Christophe Van
Gysel for implementation-related help. This re-
search was supported by Ahold, Amsterdam Data
Science, the Bloomberg Research Grant program,
the Dutch national program COMMIT, Else-
vier, the European Community’s Seventh Frame-
work Programme (FP7/2007-2013) under grant
agreement nr 312827 (VOX-Pol), the ESF Re-
search Network Program ELIAS, the Royal Dutch
Academy of Sciences (KNAW) under the Elite
Network Shifts project, the Microsoft Research
Ph.D. program, the Netherlands eScience Center
under project number 027.012.105, the Nether-
lands Institute for Sound and Vision, the Nether-
lands Organisation for Scientific Research (NWO)
under project nrs 727.011.005, 612.001.116,
HOR-11-10, 640.006.013, 612.066.930, CI-14-
25, SH-322-15, 652.002.001, 612.001.551, the
Yahoo Faculty Research and Engagement Pro-
gram, and Yandex. All content represents the

opinion of the authors, which is not necessarily
shared or endorsed by their respective employers
and/or sponsors.

References
Eneko Agirre, Mona Diab, Daniel Cer, and Aitor

Gonzalez-Agirre. 2012. Semeval-2012 task 6: A pi-
lot on semantic textual similarity. In Proceedings of
the First Joint Conference on Lexical and Computa-
tional Semantics-Volume 1: Proceedings of the main
conference and the shared task, and Volume 2: Pro-
ceedings of the Sixth International Workshop on Se-
mantic Evaluation (SemEval 2012), pages 385–393.

Eneko Agirre, Daniel Cer, Mona Diab, Aitor Gonzalez-
Agirre, and Weiwei Guo. 2013. sem 2013 shared
task: Semantic textual similarity, including a pilot
on typed-similarity. In Second Joint Conference on
Lexical and Computational Semantics (*SEM), Vol-
ume 1: Proceedings of the Main Conference and the
Shared Task (*SEM 2013), pages 32–43.

Eneko Agirre, Carmen Banea, Claire Cardie, Daniel
Cer, Mona Diab, Aitor Gonzalez-Agirre, Weiwei
Guo, Rada Mihalcea, German Rigau, and Janyce
Wiebe. 2014. Semeval-2014 task 10: Multilingual
semantic textual similarity. In Proceedings of the
8th International Workshop on Semantic Evaluation
(SemEval 2014), pages 81–91.

Eneko Agirre, Carmen Banea, Claire Cardie, Daniel
Cer, Mona Diab, Aitor Gonzalez-Agirre, Weiwei
Guo, I Nigo Lopez-Gazpio, Montse Maritxalar,
Rada Mihalcea, German Rigau, Larraitz Uria, and
Janyce Wiebe. 2015. Semeval-2015 task 2: Seman-
tic textual similarity, english, spanish and pilot on
interpretability. In Proceedings of the 9th Interna-
tional Workshop on Semantic Evaluation (SemEval
2015), pages 252–263.

Henri Bal, Dick Epema, Cees de Laat, Rob van Nieuw-
poort, John Romein, Frank Seinstra, Cees Snoek,
and Harry Wijshoff. 2016. A medium-scale dis-
tributed system for computer science research: In-
frastructure for the long term. Computer, 49(5):54–
63.

Danqi Chen and Christopher D Manning. 2014. A
fast and accurate dependency parser using neural
networks. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing
(EMNLP 2014), pages 740–750.

Ronan Collobert and Jason Weston. 2008. A unified
architecture for natural language processing: Deep
neural networks with multitask learning. In Pro-
ceedings of the 25th international conference on
Machine learning (ICML 2008), pages 160–167.

Manaal Faruqui, Jesse Dodge, Sujay K Jauhar, Chris
Dyer, Eduard Hovy, and Noah A. Smith. 2014.
Retrofitting word vectors to semantic lexicons. In
Proceedings of the North American Chapter of the

949



Association for Computational Linguistics (NAACL
2014).

Samuel J. Gershman and Joshua B. Tenenbaum. 2015.
Phrase similarity in humans and machines. In Pro-
ceedings of the 37th Annual Conference of the Cog-
nitive Science Society, pages 776–781.

Karl Moritz Hermann and Phil Blunsom. 2014a. Mul-
tilingual distributed representations without word
alignment. In Proceedings of the International Con-
ference on Learning Representations (ICLR 2014).

Karl Moritz Hermann and Phil Blunsom. 2014b. Mul-
tilingual models for compositional distributed se-
mantics. In Proceeedings of the 52nd Annual Meet-
ing of the Association for Computational Linguistics
(ACL 2014), pages 58–68.

Felix Hill, Kyunghyun Cho, and Anna Korhonen.
2016. Learning distributed representations of sen-
tences from unlabelled data. In Proceedings of
the North American Chapter of the Association for
Computational Linguistics (NAACL 2016).

Baotian Hu, Zhengdong Lu, Hang Li, and Qingcai
Chen. 2014. Convolutional neural network archi-
tectures for matching natural language sentences. In
Advances in Neural Information Processing Systems
(NIPS 2014), pages 2042–2050.

Tom Kenter and Maarten de Rijke. 2015. Short text
similarity with word embeddings. In Proceedings of
the 24th ACM International on Conference on Infor-
mation and Knowledge Management (CIKM 2015),
pages 1411–1420.

Tom Kenter, Melvin Wevers, Pim Huijnen, and
Maarten de Rijke. 2015. Ad hoc monitoring of vo-
cabulary shifts over time. In Proceedings of the 24th
ACM International on Conference on Information
and Knowledge Management (CIKM 2015), pages
1191–1200.

Yoon Kim, I Yi-Chiu., Kentaro Hanaki, Darshan
Hegde, and Slav Petrov. 2014. Temporal analysis
of language through neural language models. Pro-
ceeedings of the 52nd Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL 2014),
pages 61–65.

Ryan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,
Richard Zemel, Raquel Urtasun, Antonio Torralba,
and Sanja Fidler. 2015. Skip-thought vectors. In
Advances in Neural Information Processing Systems
28 (NIPS 2015), pages 3294–3302. Curran Asso-
ciates, Inc.

Matt Kusner, Yu Sun, Nicholas Kolkin, and Kilian Q
Weinberger. 2015. From word embeddings to docu-
ment distances. In Proceedings of the 32nd Inter-
national Conference on Machine Learning (ICML
2015), pages 957–966.

Stanislas Lauly, Hugo Larochelle, Mitesh Khapra,
Balaraman Ravindran, Vikas C Raykar, and Amrita
Saha. 2014. An autoencoder approach to learning
bilingual word representations. In Advances in Neu-
ral Information Processing Systems (NIPS 2014),
pages 1853–1861.

André Lynum, Partha Pakray, Björn Gambäck, and Ser-
gio Jimenez. 2014. Ntnu: Measuring semantic sim-
ilarity with sublexical feature representations and
soft cardinality. In Proceedings of the 8th Interna-
tional Workshop on Semantic Evaluation (SemEval
2014), pages 448–453.

Tomas Mikolov, Kai Chen, Greg S. Corrado, and Jef-
frey Dean. 2013a. Efficient estimation of word
representations in vector space. arXiv e-prints,
1301.3781.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S. Cor-
rado, and Jeff Dean. 2013b. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in Neural Information Processing
Systems (NIPS 2013), pages 3111–3119.

Ridho Reinanda, Edgar Meij, and Maarten de Rijke.
2015. Mining, ranking and recommending entity
aspects. In Proceedings of the 38th International
ACM SIGIR Conference on Research and Develop-
ment in Information Retrieval (SIGIR 2015), pages
263–272.

Aliaksei Severyn and Alessandro Moschitti. 2015.
Learning to rank short text pairs with convolutional
deep neural networks. In Proceedings of the 38th
International ACM SIGIR Conference on Research
and Development in Information Retrieval (SIGIR
2015), pages 373–382.

Richard Socher, Brody Huval, Christopher D Manning,
and Andrew Y Ng. 2012. Semantic compositional-
ity through recursive matrix-vector spaces. In Pro-
ceedings of the 2012 Joint Conference on Empirical
Methods in Natural Language Processing and Com-
putational Natural Language Learning (EMNLP-
CoNLL 2012), pages 1201–1211.

Theano Development Team. 2016. Theano: A Python
framework for fast computation of mathematical ex-
pressions. arXiv e-prints, abs/1605.02688.

Nikos Voskarides, Edgar Meij, Manos Tsagkias,
Maarten de Rijke, and Wouter Weerkamp. 2015.
Learning to explain entity relationships in knowl-
edge graphs. In Proceedings of the 53rd Annual
Meeting of the Association for Computational Lin-
guistics and The 7th International Joint Confer-
ence on Natural Language Processing of the Asian
Federation of Natural Language Processing (ACL-
IJCNLP 2015), pages 564–574.

John Wieting, Mohit Bansal, Kevin Gimpel, and Karen
Livescu. 2016. Towards universal paraphrastic
sentence embeddings. Proceedings of the Inter-
national Conference on Learning Representations
(ICLR 2016).

950



Wentau Yih, Kristina Toutanova, John C. Platt, and
Christopher Meek. 2011. Learning discriminative
projections for text similarity measures. In Proceed-
ings of the Fifteenth Conference on Computational
Natural Language Learning, pages 247–256.

Wenpeng Yin and Hinrich Schütze. 2015. Convolu-
tional neural network for paraphrase identification.
In Proceedings of the North American Chapter of the
Association for Computational Linguistics (NAACL
2015), pages 901–911.

Lei Yu, Karl Moritz Hermann, Phil Blunsom, and
Stephen Pulman. 2014. Deep learning for answer
sentence selection. In NIPS 2014 Deep Learning
and Representation Learning Workshop.

Yukun Zhu, Ryan Kiros, Rich Zemel, Ruslan Salakhut-
dinov, Raquel Urtasun, Antonio Torralba, and Sanja
Fidler. 2015. Aligning books and movies: Towards
story-like visual explanations by watching movies
and reading books. In Proceedings of the IEEE In-
ternational Conference on Computer Vision, pages
19–27.

Will Y. Zou, Richard Socher, Daniel M. Cer, and
Christopher D. Manning. 2013. Bilingual word
embeddings for phrase-based machine translation.
In Proceedings of the Conference on Empirical
Methods in Natural Language Processing (EMNLP
2013), pages 1393–1398.

951


