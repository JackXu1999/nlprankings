



















































Head-Driven Phrase Structure Grammar Parsing on Penn Treebank


Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 2396–2408
Florence, Italy, July 28 - August 2, 2019. c©2019 Association for Computational Linguistics

2396

Head-Driven Phrase Structure Grammar Parsing on Penn Treebank

Junru Zhou and Hai Zhao∗
Department of Computer Science and Engineering

Key Lab of Shanghai Education Commission
for Intelligent Interaction and Cognitive Engineering

Shanghai Jiao Tong University, Shanghai, China
zhoujunru@sjtu.edu.cn, zhaohai@cs.sjtu.edu.cn

Abstract

Head-driven phrase structure grammar
(HPSG) enjoys a uniform formalism repre-
senting rich contextual syntactic and even
semantic meanings. This paper makes the
first attempt to formulate a simplified HPSG
by integrating constituent and dependency
formal representations into head-driven phrase
structure. Then two parsing algorithms are
respectively proposed for two converted tree
representations, division span and joint span.
As HPSG encodes both constituent and de-
pendency structure information, the proposed
HPSG parsers may be regarded as a sort of
joint decoder for both types of structures and
thus are evaluated in terms of extracted or
converted constituent and dependency parsing
trees. Our parser achieves new state-of-the-art
performance for both parsing tasks on Penn
Treebank (PTB) and Chinese Penn Treebank,
verifying the effectiveness of joint learning
constituent and dependency structures. In
details, we report 95.84 F1 of constituent
parsing and 97.00% UAS of dependency
parsing on PTB.

1 Introduction

Head-driven phrase structure grammar (HPSG) is
a highly lexicalized, constraint-based grammar de-
veloped by (Pollard and Sag, 1994). As opposed
to dependency grammar, HPSG is the immediate
successor of generalized phrase structure gram-
mar.

HPSG divides language symbols into categories
of different types, such as vocabulary, phrases, etc.
Each category has different grammar letter infor-
mation. The complete language symbol which is
a complex type feature structure represented by

∗ Corresponding author. This paper was partially sup-
ported by National Key Research and Development Program
of China (No. 2017YFB0304100) and key projects of Nat-
ural Science Foundation of China (No. U1836222 and No.
61733011)

Kim gives

Sandy books

VP

S

NNP VBZ

NNP

NP

NNS

NPNP

(a) Constituent

Kim gives Sandy books

ROOT NNP VBZ NNP NNS

(b) Dependency

Sandy

2

books

3

SYNSEM|LOC|CAT
HEAD  4

SUBCAT<  1  >

HEAD  4

SYNSEM|LOC|CAT
HEAD  4    verb[fin]

SUBCAT<  1  NP,  2  NP,   3  NP >

SUBCAT < >
SYNSEM|LOC|CAT

1

gives

Kim

(=S[fin])

(=VP[fin])

C H

H
C

C

(c) HPSG

Figure 1: Constituent, dependency and HPSG trees.

attribute value matrices (AVMs) includes phono-
logical, syntactic, and semantic properties, the va-
lence of the word and interrelationship between
various components of the phrase structure.

Meanwhile, the constituent structure of HPSG
follows the HEAD FEATURE PRINCIPLE (HFP)
(Pollard and Sag, 1994): “the head value of any
headed phrase is structure-shared with the HEAD
value of the head daughter. The effect of the HFP
is to guarantee that headed phrases really are pro-
jections of their head daughter” (p. 34).

Constituent and dependency are two typical
syntactic structure representation forms, which
have been well studied from both linguistic and
computational perspective (Chomsky, 1981; Bres-
nan et al., 2015). The two formalisms carrying
distinguished information have each own strengths
that constituent structure is better at disclosing
phrasal continuity while the dependency structure
is better at indicating dependency relation among
words.



2397

Typical dependency treebanks are usually con-
verted from constituent treebanks, though they
may be independently annotated as well for the
same languages. In reverse, constituent pars-
ing can be accurately converted to dependencies
representation by grammatical rules or machine
learning methods (De Marneffe et al., 2006; Ma
et al., 2010). Such convertibility shows a close
relation between constituent and dependency rep-
resentations, which also have a strong correlation
with the HFP of HPSG as shown in Figure 1.
Thus, it is possible to combine the two represen-
tation forms into a simplified HPSG not only for
even better parsing but also for more linguistically
rich representation.

In this work, we exploit both strengths of the
two representation forms and combine them into
HPSG. To our best knowledge, it is first attempt
to perform such a formulization1. In this paper,
we explore two parsing methods for the simplified
HPSG parse tree which contains both constituent
and dependency syntactic information.

Our simplified HPSG will be from the anno-
tations or conversions of Penn Treebank (PTB)2

(Marcus et al., 1993). Thus the evaluation for our
HPSG parser will also be done on both the anno-
tated constituent and converted dependency parse
trees, which let our HPSG parser compare to ex-
isting constituent and dependency parsers individ-
ually.

Our experimental results show that our HPSG
parser brings better prediction on both constituent
and dependency tree structures. In addition, the
empirical results show that our parser reaches new
state-of-the-art for both parsing tasks. To sum up,
we make the following contributions:
• For the first time, we formulate a simplified

HPSG by combining constituent and dependency
tree structures.
• We propose two novel methods to handle the

simplified HPSG parsing.
• Our model achieves state-of-the-art results on

PTB and CTB for both constituent and depen-
dency parsing.

The rest of the paper is organized as follows:
Section 2 presents the tree structure of HPSG and
two span representations. Section 3 presents our

1Code and trained English models are publicly available:
https://github.com/DoodleJZ/HPSG-Neural-Parser

2PTB is an English treebank, our parser will also be eval-
uated on Chinese Penn Treebank (CTB) which follows the
similar annotation guideline as PTB.

sign

synsem
local

category
head

PHON list of string

SUBJ list of synsem

SEM semantics

COMPS list of synsem

MODL synsem
MODR synsem

nonlocal
REL list of local
SLASH list of local

SYNSEM

LOCAL

NONLOC

CAT

HEAD

Figure 2: HPSG sign from (Miyao et al., 2004).

model based on self-attention architecture and the
adopted parsing algorithms. Section 4 reports the
experiments and results on PTB and CTB tree-
banks to evaluate our model. At last, we survey
related work and conclude this paper respectively
in Sections 5 and 6.

2 Simplified HPSG on PTB

(Miyao et al., 2004) reports the first work of semi-
automatically acquiring an English HPSG gram-
mar from the Penn Treebank. Figure 2 demon-
strates an HPSG unit presentation (formally called
sign), in which head consists of the essential infor-
mation. As the work of (Miyao et al., 2004) can-
not demonstrate an accurate enough HPSG from
the entire source constituent treebank, we focus on
the core of HPSG sign, HEAD, which is conve-
niently connected with dependency grammar. For
the purpose of accurate HPSG building, in this
work, we construct a simplified HPSG only from
annotations of PTB by combining constituent and
dependency parse trees.

2.1 Tree Preprocessing

In standard HPSG relating to HFP, the HEAD
value of any headed phrase is structure-shared
with the HEAD value of the head daughter. In
other words, the phrase in our simplified HPSG
tree may be exactly the same as that in a con-
stituent tree and the head word of the phrase corre-
sponding to the parent of the head word of its chil-
dren in dependency tree3. For example, in the con-
stituent tree of Figure 3(a), Federal Paper Board is
a phrase (1, 3) assigned with category NP and in
dependency tree, Board is parent of Federal and
Paper, thus in our simplified HPSG tree, the head
of phrase (1, 3) is Board.

3In standard HPSG, the HEAD value is the part-of-speech
of the head word. But in our simplified HPSG tree, we set the
head word as HEAD value for convenience.



2398

Federal
NNP

wood
NN

products
NNS

sells
VBZ

Paper
NNP

Board
NNP

paper
NN

and
CC

NP

NP

VP

S

1 2 3 4

5 6 7 8

9

(5,8)

(4,8)(1,3)

(1,9)

Federal
NNPROOT

sells
VBZ

Paper
NNP

Board
NNP

wood
NN

products
NNS

paper
NN

and
CC

1 2 3 4 5 6 7 8 9

(a) Constituent and dependency.

Federal
NNP

wood
NN

products
NNS

sells
VBZ

Paper
NNP

Board
NNP

paper
NN

and
CC

H-NP

NP

H-VP

H-S

H- H- H-

H-

H- #

H-

H-

1 2 3 4

5 6 7

8

9

(5,5) (6,6)

(1,1) (2,2) (3,3) (4,4)

(1,3) (4,8)

(1,9)

(9,9)

(5,8)

(8,8)(5,7)

(7,7)

(b) Division span structure.

Federal
NNP

wood
NN

products
NNS

sells
VBZ

Paper
NNP

Board
NNP

HEAD  sells
Categ   < S >

HEAD  sells
Categ  < VP >

HEAD products
Categ   < NP >

HEAD paper
Categ   < # >

paper
NN

and
CC

HEAD Board
Categ < NP >

ROOT

21 3 4

5 6 7

8

9

(5,7)

(5,8)

(4,8)

(1,9)

(1,3)

(c) Joint span structure.

Figure 3: Constituent, dependency and two different simplified HPSG structures of the same sentence which is
indexed from 1 to 9 and assigned interval range for each node. Dotted box represents the same part. The special
category # is assigned to divide the phrase with multiple heads. Division span structure adds token H in front of
the category to distinguish whether the phrase is on the left or right of the head. Thus the head is the last one of
the category with H which is marked with a box. Joint span structure contains constitute phrase and dependency
arc. Categ in each node represents the category of each constituent and HEAD indicates the head word.

For dependency parsing on PTB, the depen-
dency structures are mainly obtained by convert-
ing constituent structure with three head rules: (1)
Penn2Malt4 and the head rules of Yamada and
Matsumoto (2003), noted as PTB-YM; (2) LTH
Converter5 (Johansson and Nugues, 2007), noted
as PTB-LTH; (3) Stanford parser6(De Marneffe
et al., 2006), noted as PTB-SD.

Following most of the recent work, we apply
the PTB-SD representation converted by version
3.3.0 of the Stanford parser. However, this de-
pendency representation results in around 1% of
phrases containing two or three head words. As
shown in Figure 3(a), the phrase (5,8) assigned
with a category NP contains 2 head words of pa-
per and products in dependency tree. In order to
deal with the problem, we introduce a special cat-
egory # to divide the phrase with multiple heads
meeting only one head word for each phrase. After

4http://cl.lingfil.uu.se/ nivre/research/Penn2Malt.html
5http://nlp.cs.lth.se/software/treebank converter
6http://nlp.stanford.edu/software/lex-parser.html

this conversion, only 50 heads are errors in Penn
Treebank.

2.2 Span Representations of HPSG

Each node in the HPSG tree noted as AVM repre-
sents compound structure. Even in our simplified
HPSG, each phrase (span) should be companied
with its head. To facilitate the processing of ex-
isting parsers, we propose two ways to convert the
simplified HPSG into a span-style tree structure.
Division Span A phrase is divided into two parts
corresponding to left and right of its head. To dis-
tinguish the left and right parts, we add a special
tokenH in front of the category to indicate the left
span, in which the head of the original phrase is al-
ways the last word. Since some leaves of the tree
are without category, we explicitly use a special
empty category Ø for their representation, and the
token H is also applied to the empty category.

As shown in Figure 3(b), the head of phrase
(1,3) in the dotted box is Board, thus we add the
special token H in front of Federal, Paper and



2399

Paper

.

.

.

wood

            Token 

     Representation
   Self-Attention 

         Layers
Decoder LayerScoring Layer

Dependency Score

Span Score
Simplified HPSG

Input

Federal

1

1 . .

.

products

NNP

NNP

NN

NNS

Federal
NNP

wood
NN

products
NNS

sells
VBZ

Paper
NNP

Board
NNP

HEAD  sells
Categ   < S >

HEAD  sells
Categ  < VP >

HEAD products

Categ   < NP >

HEAD paper
Categ   < # >

paper
NN

and
CC

HEAD Board
Categ < NP >

ROOT

21 3 4

5 6 7

8

9

(5,7)

(5,8)

(4,8)

(1,9)

(1,3)

Figure 4: The framework of our joint span HPSG parsing model.

Board category. With this operation, head infor-
mation has been encoded into span boundary of a
standard constituent tree and we only need to parse
such a constituent tree.
Joint Span We recursively define a structure
called joint span to cover both constituent and
head information. A joint span consists of all its
children phrases and all dependency arcs between
heads of all these children phrases.

For example, the HPSG node SH (1, 9) in Figure
3(c) as a joint span is:

SH(1, 9) = {SH(1, 3), SH(4, 8), SH(9, 9),
l(1, 9), d(Board, sells), d(., sells)},

where l(i, j) denotes category of span (i, j) and
d(r, h) indicates the dependency between the word
r and its parent h.

At last, following the recursive definition, the
entire HPSG tree T being a joint span can be rep-
resented as:

SH(T ) = {SH(1, 9), d(sells, root)}.

As all constituent and head information has been
formally encoded into a span-like structure, we
can use a constituent-like parser for such a joint
span tree.

3 Our Model

3.1 Overview
Using an encoder-decoder backbone, our model
apply self-attention encoder (Vaswani et al., 2017)
which is modified by position partition (Kitaev

and Klein, 2018a). Since our two converted struc-
tures of simplified HPSG are based on the phrase,
thus we can employ CKY-style (Cocke, 1969;
Younger, Daniel H., 1975; Kasami, Tadao, 1965)
decoder for both to find the tree with the highest
predicted scores. The difference is that for di-
vision span structure, we only need span scores
while for joint span structure, we need both of
span and dependency scores.

Given a sentence s = {w1, w2, . . . , wn}, we at-
tempt to predict a simplified HPSG tree. As shown
in Figure 4, our parsing model includes four mod-
ules: token representation, self-attention encoder,
scoring module and CKY-style decoder7.

3.2 Token Representation

In our model, token representation xi is composed
of character, word and part-of-speech (POS) em-
beddings. For character-level representation, we
use CharLSTM (Kitaev and Klein, 2018a). For
word-level representation, we concatenate ran-
domly initialized and pre-trained word embed-
dings.

Finally, we concatenate character representa-
tion, word representation and POS embedding as
our token representation:

xi = [xchar;xword;xPOS ].

7For dependency label of each word, it is not necessary
for our HPSG parsing purpose, however, to enable our parser
fully comparable to existing dependency parsers, we still
train a separated multiclass classifier simultaneously with the
parser by optimizing the sum of their objectives.



2400

3.3 Self-Attention Encoder

The encoder in our model is adapted from
(Vaswani et al., 2017) and factor explicit content
and position information in the self-attention pro-
cess. The input matrices X = [x1, x2, . . . , xn]
in which xi is concatenated with position embed-
ding are transformed by a self-attention encoder.
We factor the model between content and posi-
tion information both in self-attention sub-layer
and feed-forward network, whose setting details
follow (Kitaev and Klein, 2018a).

3.4 Decoder for Division Span HPSG

After reconstructing of the HPSG tree as a con-
stituent tree with head information as described in
Section 2.2, we follow the constituent parsing as
(Kitaev and Klein, 2018a; Gaddy et al., 2018) to
predict constituent parse tree.

Firstly, we add a special empty category Ø to
spans to binarize the n-ary nodes and apply a
unary atomic category to deal with the nodes of the
unary chain, corresponding to nested spans with
the same endpoints.

Then, we train the span scorer. Span vector
sij is the concatenation of the vector differences
sij = [

−→yj − −−→yi−1;←−−yj+1 − ←−yi ] which −→yj is con-
structed by splitting in half the outputs from the
self-attention encoder. We apply one-layer feed-
forward networks to generate span scores vector,
taking span vector sij as input:

S(i, j) = W2g(LN(W1sij + b1)) + b2,

where LN denotes Layer Normalization, g is the
Rectified Linear Unit nonlinearity. The individual
score of category ` is denoted by

Scateg(i, j, `) = [S(i, j)]`,

where []` indicates the value of corresponding the
element ` of the score vector. The score s(T ) of
the constituent parse tree T is to sum every scores
of span (i, j) with category `:

s(T ) =
∑

(i,j,`)∈T

Scateg(i, j, `).

The goal of constituent parsing is to find the tree
with the highest score: T̂ = arg maxT s(T ).
We use CKY-style algorithm (Stern et al., 2017a;
Gaddy et al., 2018) to obtain the tree T̂ in O(n3)

time complexity. This structured prediction prob-
lem is handled with satisfying the margin con-
straint:

s(T ∗) ≥ s(T ) + ∆(T, T ∗),

where T ∗ denotes correct parse tree and ∆ is the
Hamming loss on category spans with a slight
modification during the dynamic programming
search. The objective function is the hinge loss,

J1(θ) = max(0,max
T

[s(T )+∆(T, T ∗)]−s(T ∗)).

For dependency labels, following (Dozat and
Manning, 2017), the classifier takes head and its
children as features. We minimize the negative
log probability of the correct dependency label li
for the child-parent pair (xi, hi) implemented as
cross-entropy loss:

Jlabels(θ) = −logPθ(li|xi, hi).

Thus, the overall loss is sum of the objectives:

JDivision(θ) = J1(θ) + Jlabels(θ).

3.5 Decoder for Joint Span HPSG
As our joint span is defined in a recursive way, to
score the root joint span has been equally scoring
all spans and dependencies in the HPSG tree.

For span scores, we continuously apply the ap-
proach and hinge loss J1(θ) in the previous sec-
tion. For dependency scores, we predict a distri-
bution over the possible head for each word and
use the biaffine attention mechanism (Dozat and
Manning, 2017) to calculate the score as follow:

αij = h
T
i Wgj + U

Thi + V
T gj + b,

where αij indicates the child-parent score, W de-
notes the weight matrix of the bi-linear term, U
and V are the weight vectors of the linear term
and b is the bias item, hi and gi are calculated by
a distinct one-layer perceptron network.

We minimize the negative log-likelihood of the
golden dependency tree Y , which is implemented
as a cross-entropy loss:

J2(θ) = − (logPθ(hi|xi) + logPθ(li|xi, hi)) ,

where Pθ(hi|xi) is the probability of correct par-
ent node hi for xi, and Pθ(li|xi, hi) is the prob-
ability of the correct dependency label li for the



2401

Algorithm 1 Joint span parsing algorithm
Input: sentence leng n, span and dependency

score s(i, j, `), d(r, h), 1 ≤ i ≤ j ≤ n,∀r, h, `
Output: maximum value SH(T ) of tree T

Initialization:
sc[i][j][h] = si[i][j][h] = 0,∀i, j, h
for len = 1 to n do

for i = 1 to n− len+ 1 do
j = i+ len− 1
if len = 1 then
sc[i][j][i] = si[i][j][i] = max

`
s(i, j, `)

else
for h = i to j do
splitl = max

i≤r<h
{ max
r≤k<h

{ sc[i][k][r]+

si[k + 1][j][h] }+ d(r, h) }
splitr = max

h<r≤j
{ max
h≤k<r

{ si[i][k][h]+

sc[k + 1][j][r] }+ d(r, h) }
sc[i][j][h] = max { splitl, splitr }+

max
6̀=∅

s(i, j, `)

si[i][j][h] = max { splitl, splitr }+
max
`
s(i, j, `)

end for
end if

end for
end for
SH(T ) = max

1≤h≤n
{ sc[1][n][h] + d(h, root) }

child-parent pair (xi, hi). To predict span and de-
pendency scores simultaneously, we jointly train
our parser for minimizing the overall loss:

JJoint(θ) = J1(θ) + J2(θ).

During testing, we propose a CKY-style algorithm
as shown in Algorithm 1 to explicitly find the glob-
ally highest span and dependency score SH(T ) of
our simplified HPSG tree T . In order to bina-
rize the constituent parse tree with head, we in-
troduce the complete span sc and the incomplete
span si which is similar to Eisner algorithm (Eis-
ner, 1996). After finding the best score SH(T ), we
backtrack the chart with split point k and sub-root
r to construct the simplified HPSG tree T .

Comparing with constituent parsing CKY-style
algorithm (Stern et al., 2017a), the dependency
score d(r, h) in our algorithm affects the selection
of best split point k. Since we need to find the
best value of sub-head r and split point k, the com-
plexity of the algorithm is O(n5) time and O(n3)

space. To control the effect of combining span and
dependency scores, we apply a weight λ:

s(i, j, `) = λScateg(i, j, `), d(i, j) = (1.0−λ)αij ,

where λ in the range of 0 to 1. In addition, we can
merely generate constituent or dependency pars-
ing tree by setting λ to 1 or 0, respectively.

4 Experiments

In order to evaluate the proposed model, we
convert our simplified HPSG tree to constituent
and dependency parse trees and evaluate on two
benchmark treebanks, English Penn Treebank
(PTB) and Chinese Penn Treebank (CTB5.1) fol-
lowing standard data splitting (Zhang and Clark,
2008; Liu and Zhang, 2017b). The placeholders
with the -NONE- tag are stripped from the CTB.
POS tags are predicted using the Stanford tagger
(Toutanova et al., 2003) and we use the same pre-
tagged dataset as (Cross and Huang, 2016).

For constituent parsing, we use the standard
evalb8 tool to evaluate the F1 score. For depen-
dency parsing, following (Dozat and Manning,
2017; Kuncoro et al., 2016; Ma et al., 2018), we
report the results without punctuations for both
treebanks.

4.1 Setup
Hyperparameters In our experiments, we use
100D GloVe (Pennington et al., 2014) and
structured-skipgram (Ling et al., 2015) pre-train
embeddings for English and Chinese respectively.
The character representations are randomly initial-
ized, and the dimension is 64. For self-attention
encoder, we use the same hyperparameters set-
tings as (Kitaev and Klein, 2018a).

For span scores, we apply a hidden size of
250-dimensional feed-forward networks. For de-
pendency biaffine scores, we employ two 1024-
dimensional MLP layers with the ReLU as the
activation function and a 1024-dimensional pa-
rameter matrix for biaffine attention. In addition,
we augment our parser with ELMo (Peters et al.,
2018) and a larger version of BERT (Devlin et al.,
2018) (24 layers, 16 attention heads per layer,
and 1024-dimensional hidden vectors) to compare
with other pre-trained or ensemble models. We set
4 layers of self-attention for ELMo and 2 layers
of self-attention for BERT as (Kitaev and Klein,
2018a,b).

8http://nlp.cs.nyu.edu/evalb/



2402

Self-attention Layers F1 UAS LAS
Division Span Model
8 self-attention layers 93.42 94.05 92.68
12 self-attention layers 93.57 94.40 93.05
16 self-attention layers 93.36 94.08 92.66
Joint Span Model
8 self-attention layers 93.64 95.75 94.36
12 self-attention layers 93.78 95.92 94.49
16 self-attention layers 93.54 95.54 94.21

Table 1: Different self-attention layers on English dev
set.

Training Details we use 0.33 dropout for biaffine
attention and MLP layers. All models are trained
for up to 150 epochs with batch size 150 on a sin-
gle NVIDIA GeForce GTX 1080Ti GPU with In-
tel i7-7800X CPU. We use the same training set-
tings as (Kitaev and Klein, 2018a) and (Kitaev and
Klein, 2018b) if use BERT.

4.2 Self-attention Layers

This subsection examines the impact of different
numbers of self-attention layers varying from 8
to 16. The comparison in Table 1 indicates that
the best performing setting comes from 12 self-
attention layers, and more than 12 layers shows
almost no promotion even reduces the accuracy.
Thus the rest experiments are done with 12 layers
of the self-attention encoder.

4.3 Moderating constituent and Dependency

The weight parameter λ plays an important role
to balance the scoring of span and dependency.
When λ set to 0, indicates only using dependency
score to generate dependency tree as the gen-
eral first-order dependency parsing (Eisner, 1996),
while λ set to 1, shows the constituent parsing
only. λ set to between 0 to 1 indicates our gen-
eral simplified HPSG parsing, providing both con-
stituent and dependency structure prediction.

The comparison in Figure 5 shows that our
HPSG decoder is better than either separate con-
stituent or dependency decoder, which shows the
bonus of joint predicting constituent and depen-
dency. Moreover, λ set to 0.5 achieves the best
performance in terms of both F1 score and UAS.

4.4 Joint Span HPSG Parsing

We compare our join span HPSG parser with a
separate learning constituent parsing model which

Model F1 UAS LAS
separate constituent

93.47
- -

converted dependency 95.06 93.81
joint span λ = 1.0 93.67 - -
joint span λ = 0.0 - 95.82 94.43
joint span λ = 0.5 93.78 95.92 94.49
converted dependency 95.69 94.45

Table 2: English dev set performance of joint span
HPSG parsing. The converted means the correspond-
ing dependency parsing results are from the corre-
sponding constituent parse tree using head rules.

Figure 5: Balancing constituent and dependency of
joint span HPSG parsing on English dev set.

takes the same token representation and self-
attention encoder on PTB dev set. The constituent
parsing results are also converted into dependency
ones by PTB-SD for comparison.

When λ is set to 0 and 1, our joint span
HPSG parser works as the dependency-only parser
and constituent-only parser respectively. Table 2
shows that even in such a work mode, our HPSG
parser still outperforms the separate constituent
parser in terms of either constituent and depen-
dency parsing performance.

As λ is set to 0.5, our HPSG parser will give
constituent and dependency structures at the same
time, which are shown better than the work alone
mode of either constituent or dependency parsing.
Besides, the comparison also shows that the di-
rectly predicted dependencies from our model are
slightly better than those converted from the pre-
dicted constituent parse trees.

4.5 Parsing Speed

We compare the parsing speed of our parser with
other neural parsers in Table 4. Although the



2403

Model sents/sec
Petrov and Klein (2007) 6.2
Zhu et al. (2013) 89.5
Liu and Zhang (2017b) 79.2
Stern et al. (2017a) 75.5
Shen et al. (2018) 111.1
Shen et al. (2018)(w/o tree inference) 351
Our (Division) 226.3
Our (Joint) 158.7

Table 3: Parsing speed on the PTB dataset.

Model English Chinese
UAS LAS UAS LAS

Chen and Manning (2014) 91.8 89.6 83.9 82.4
Andor et al. (2016) 94.61 92.79
Zhang et al. (2016) 93.42 91.29 87.65 86.17
Cheng et al. (2016) 94.10 91.49 88.1 85.7
Kuncoro et al. (2016) 94.26 92.06 88.87 87.30
Ma and Hovy (2017) 94.88 92.98 89.05 87.74
Dozat and Manning (2017) 95.74 94.08 89.30 88.23
Li et al. (2018a) 94.11 92.08 88.78 86.23
Ma et al. (2018) 95.87 94.19 90.59 89.29
Our (Division) 94.32 93.09 89.14 87.31
Our (Joint) 96.09 94.68 91.21 89.15
Our (Division*) - - 91.69 90.54
Our (Joint*) - - 93.24 91.95
Pre-training/Ensemble
Choe and Charniak (2016) 95.9 94.1
Kuncoro et al. (2017) 95.8 94.6
Wang et al. (2018b)(ELMo) 96.35 95.25
Our (Division) + ELMo 95.77 94.21 - -
Our (Joint) + ELMo 96.76 94.93 - -
Our (Division) + BERT 96.22 94.56 - -
Our (Joint) + BERT 97.00 95.43 - -

Table 4: Dependency parsing on PTB and CTB test
set. * represents CTB constituent data splitting.

time complexity of our Joint span model isO(n5),
there is not much slower than Division span model
with O(n3) time complexity. The comparison
suggests that training and inference times are dom-
inated by neural network computations and our de-
coder consumes a small fraction of total running
time.

4.6 Main Results

Tables 4, 5 and 6 compare our model to exist-
ing state-of-the-art on test sets. Division and
Joint indicate the results of division and joint span
parsing respectively. On PTB, our best model
achieves new state-of-the-art on both constituent
and dependency parsing. On CTB, our best model
achieves 92.18 F1 score of constituent parsing and
91.21% UAS and 89.15% LAS of dependency
parsing. Since constituent and dependency pars-

Model LR LP F1
Zhu et al. (2013) 90.7 90.2 90.4
Dyer et al. (2016) 89.8
Cross and Huang (2016) 90.5 92.1 91.3
Stern et al. (2017a) 93.2 90.3 91.8
Gaddy et al. (2018) 91.76 92.41 92.08
Stern et al. (2017b) 92.57 92.56 92.56
Kitaev and Klein (2018a) 93.20 93.90 93.55
Our (Division) 93.41 93.87 93.64
Our (Joint) 93.64 93.92 93.78
Pre-training/Ensemble
Dyer et al. (2016) 93.3
Choe and Charniak (2016) 93.8
Liu and Zhang (2017a) 94.2
Fried et al. (2017) 94.66
Kitaev and Klein (2018a)
+ ELMo 94.85 95.40 95.13
Kitaev and Klein (2018b)
+ BERT 95.46 95.73 95.59
Kitaev and Klein (2018b) 95.51 96.03 95.77
Our (Division) + ELMo 94.54 95.68 95.10
Our (Joint) + ELMo 95.04 95.39 95.22
Our (Division) + BERT 95.51 95.93 95.72
Our (Joint) + BERT 95.70 95.98 95.84

Table 5: Constituent parsing on PTB test set.

ing have different data splitting on CTB (Zhang
and Clark, 2008; Liu and Zhang, 2017b), we report
our parsing performance on both data splitting.

The comparison shows that our HPSG parsing
model is more effective than learning constituent
or dependency parsing separately. We also find
that dependency parsing is shown much more ben-
eficial from Joint than Division way which empir-
ically suggests dependency score in our joint loss
is helpful.

We augment our parser with ELMo and a larger
version of BERT as the sole token representa-
tion to compare with other models. Our Joint
model in BERT setting even defeats other ensem-
ble models of both constituent and dependency
parsing achieving 95.84 F1 score, 97.00% UAS
and 95.43% LAS.

5 Related Work

In the earlier time, linguists and NLP researchers
discussed how to encode lexical dependencies in
phrase structures, like lexicalized tree adjoining
grammar (LTAG) (Schabes et al., 1988) and head-
driven phrase structure grammar (HPSG) (Pollard
and Sag, 1994) which is a constraint-based highly
lexicalized non-derivational generative grammar



2404

Model LR LP F1
Wang et al. (2015) 83.2
Dyer et al. (2016) 84.6
Liu and Zhang (2017b) 85.9 85.2 85.5
Liu and Zhang (2017a) 86.1
Shen et al. (2018) 86.6 86.4 86.5
Fried and Klein (2018) 87.0
Teng and Zhang (2018) 87.1 87.5 87.3
Kitaev and Klein (2018b) 91.55 91.96 91.75
Our (Division) 91.14 93.09 92.10
Our (Joint) 92.03 92.33 92.18
Our (Division*) 90.07 91.68 90.87
Our (Joint*) 90.91 91.16 91.03

Table 6: Constituent parsing on CTB test set. * repre-
sents CTB dependency data splitting.

framework.
In the past decade, there was a lot of large-

scale HPSG-based NLP parsing systems which
had been built. Such as the Enju English Chinese
parser (Miyao et al., 2004; Yu et al., 2010), the
Alpino parser for Dutch (Van Noord et al., 2006),
and the LKB & PET (Copestake, 2002; Callmeier,
2000) for English, German, and Japanese..

Meanwhile, since HPSG represents the gram-
mar framework in a precisely constrained way, it
is difficult to broadly cover unseen real-world texts
for parsing. Consequently, according to (Zhang
and Krieger, 2011), many of these large-scale
grammar implementations are forced to choose
to either compromise the linguistic preciseness or
to accept the low coverage in parsing. Previous
works of HPSG approximation focus on two major
approaches: grammar based approach (Kiefer and
Krieger, 2004), and the corpus-driven approach
(Krieger, 2007) and (Zhang and Krieger, 2011)
which proposes PCFG approximation as a way to
alleviate some of these issues in HPSG processing.

Recently, with the impressive success of deep
neural networks in a wide range of NLP tasks
(Li et al., 2018b; Zhang et al., 2018a; Li et al.,
2018c; Zhang et al., 2018c,b; Zhang and Zhao,
2018; Cai et al., 2018; He et al., 2018; Xiao et al.,
2019; Chen et al., 2018; Wang et al., 2018; Wang
et al., 2018a, 2017b,a), constituent and depen-
dency parsing have been well developed with neu-
ral network. These models attain state-of-the-art
results for dependency parsing (Chen and Man-
ning, 2014; Dozat and Manning, 2017; Ma et al.,
2018) and constituent parsing (Dyer et al., 2016;
Cross and Huang, 2016; Kitaev and Klein, 2018a).

Since constituent and dependency share a lot
of grammar and machine learning characteristics,
it is a natural idea to study the relationship be-
tween constituent and dependency structures, and
the joint learning of constituent and dependency
parsing (Collins, 1997; Charniak, 2000; Charniak
and Johnson, 2005; Farkas et al., 2011; Green and
Žabokrtský, 2012; Ren et al., 2013; Yoshikawa
et al., 2017).

To further exploit both strengths of the two rep-
resentation forms, in this work, for the first time,
we propose a graph-based parsing model that for-
mulates constituent and dependency structures as
simplified HPSG.

6 Conclusions

This paper presents a simplified HPSG with two
different decode methods which are evaluated on
both constituent and dependency parsing. De-
spite the usefulness of HPSG in practice and
its theoretical linguistic background, our model
achieves new state-of-the-art results on both Chi-
nese and English benchmark treebanks of both
parsing tasks. Thus, this work is more than
proposing a high-performance parsing model by
exploring the relation between constituent and de-
pendency structures. Our experiments show that
joint learning of constituent and dependency is in-
deed superior to separate learning mode, and com-
bining constituent and dependency score in joint
training to parse a simplified HPSG can obtain fur-
ther performance improvement.

References
Daniel Andor, Chris Alberti, David Weiss, Aliaksei

Severyn, Alessandro Presta, Kuzman Ganchev, Slav
Petrov, and Michael Collins. 2016. Globally Nor-
malized Transition-Based Neural Networks. In Pro-
ceedings of the 54th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL), pages
2442–2452.

Joan Bresnan, Ash Asudeh, Ida Toivonen, and Stephen
Wechsler. 2015. Lexical-functional syntax, vol-
ume 16. John Wiley & Sons.

Jiaxun Cai, Shexia He, Zuchao Li, and Hai Zhao.
2018. A Full End-to-End Semantic Role Labeler,
Syntactic-agnostic Over Syntactic-aware? In Pro-
ceedings of the 27th International Conference on
Computational Linguistics (COLING), pages 2753–
2765.

Ulrich Callmeier. 2000. PET - A platform for ex-
perimentation with efficient HPSG processing tech-

https://doi.org/10.18653/v1/P16-1231
https://doi.org/10.18653/v1/P16-1231
https://www.aclweb.org/anthology/C18-1233
https://www.aclweb.org/anthology/C18-1233


2405

niques. Natural Language Engineering, 6(1):99–
107.

Eugene Charniak. 2000. A Maximum-Entropy-
Inspired Parser. In 1st Meeting of the North Amer-
ican Chapter of the Association for Computational
Linguistics (NAACL).

Eugene Charniak and Mark Johnson. 2005. Coarse-
to-Fine n-Best Parsing and MaxEnt Discriminative
Reranking. In Proceedings of the 43rd Annual Meet-
ing of the Association for Computational Linguistics
(ACL), pages 173–180.

Danqi Chen and Christopher Manning. 2014. A Fast
and Accurate Dependency Parser using Neural Net-
works. In Proceedings of the 2014 Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 740–750.

Kehai Chen, Rui Wang, Masao Utiyama, Eiichiro
Sumita, and Tiejun Zhao. 2018. Syntax-Directed
Attention for Neural Machine Translation. In Pro-
ceedings of the AAAI Conference on Artificial Intel-
ligence, pages 4792–4799.

Hao Cheng, Hao Fang, Xiaodong He, Jianfeng Gao,
and Li Deng. 2016. Bi-directional Attention with
Agreement for Dependency Parsing. In Proceed-
ings of the 2016 Conference on Empirical Methods
in Natural Language Processing (EMNLP), pages
2204–2214.

Do Kook Choe and Eugene Charniak. 2016. Parsing
as Language Modeling. In Proceedings of the 2016
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 2331–2336.

N. Chomsky. 1981. Lectures on Government and Bind-
ing. Mouton de Gruyter.

John Cocke. 1969. Programming Languages and Their
Compilers: Preliminary Notes. New York Univer-
sity.

Michael Collins. 1997. Three Generative, Lexicalised
Models for Statistical Parsing. In 35th Annual Meet-
ing of the Association for Computational Linguistics
(ACL).

Ann Copestake. 2002. Implementing Typed Feature
Structure Grammars, volume 110. CSLI publica-
tions Stanford.

James Cross and Liang Huang. 2016. Span-Based
Constituency Parsing with a Structure-Label System
and Provably Optimal Dynamic Oracles . In Pro-
ceedings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing (EMNLP),
pages 1–11.

Marie-Catherine De Marneffe, Bill MacCartney,
Christopher D Manning, et al. 2006. Generating
Typed Dependency Parses from Phrase Structure
Parses. In Lrec, volume 6, pages 449–454.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. BERT: Pre-training of
Deep Bidirectional Transformers for Language Un-
derstanding. abs/1810.04805.

Timothy Dozat and Christopher D Manning. 2017.
Deep Biaffine Attention for Neural Dependency
Parsing. arXiv preprint arXiv:1611.01734.

Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros,
and Noah A. Smith. 2016. Recurrent Neural Net-
work Grammars. In Proceedings of the 2016 Con-
ference of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies (NAACL), pages 199–209.

Jason Eisner. 1996. Efficient Normal-Form Parsing for
Combinatory Categorial Grammar. In 34th Annual
Meeting of the Association for Computational Lin-
guistics (ACL).

Richàrd Farkas, Bernd Bohnet, and Helmut Schmid.
2011. Features for Phrase-Structure Reranking from
Dependency Parses. In Proceedings of the 12th
International Conference on Parsing Technologies,
pages 209–214.

Daniel Fried and Dan Klein. 2018. Policy Gradient
as a Proxy for Dynamic Oracles in Constituency
Parsing. In Proceedings of the 56th Annual Meet-
ing of the Association for Computational Linguistics
(ACL), pages 469–476.

Daniel Fried, Mitchell Stern, and Dan Klein. 2017.
Improving Neural Parsing by Disentangling Model
Combination and Reranking Effects . In Proceed-
ings of the 55th Annual Meeting of the Association
for Computational Linguistics (ACL), pages 161–
166.

David Gaddy, Mitchell Stern, and Dan Klein. 2018.
What’s Going On in Neural Constituency Parsers?
An Analysis. In Proceedings of the 2018 Con-
ference of the North American Chapter of the As-
sociation for Computational Linguistics: Human
Language Technologies (NAACL: HLT), pages 999–
1010.

Nathan Green and Zdeněk Žabokrtský. 2012. Hy-
brid Combination of Constituency and Dependency
Trees into an Ensemble Dependency Parser. In Pro-
ceedings of the Workshop on Innovative Hybrid Ap-
proaches to the Processing of Textual Data, pages
19–26.

Shexia He, Zuchao Li, Hai Zhao, and Hongxiao Bai.
2018. Syntax for Semantic Role Labeling, To Be,
Or Not To Be. In Proceedings of the 56th Annual
Meeting of the Association for Computational Lin-
guistics (ACL), pages 2061–2071.

Richard Johansson and Pierre Nugues. 2007. Ex-
tended Constituent-to-Dependency Conversion for
English. In Proceedings of the 16th Nordic Con-
ference of Computational Linguistics (NODALIDA
2007), pages 105–112.

http://aclweb.org/anthology/A00-2018
http://aclweb.org/anthology/A00-2018
http://aclweb.org/anthology/P05-1022
http://aclweb.org/anthology/P05-1022
http://aclweb.org/anthology/P05-1022
https://doi.org/10.3115/v1/D14-1082
https://doi.org/10.3115/v1/D14-1082
https://doi.org/10.3115/v1/D14-1082
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16060/16008
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16060/16008
https://doi.org/10.18653/v1/D16-1238
https://doi.org/10.18653/v1/D16-1238
https://doi.org/10.18653/v1/D16-1257
https://doi.org/10.18653/v1/D16-1257
https://books.google.com.hk/books?id=l08tpkOOdNQC
https://books.google.com.hk/books?id=l08tpkOOdNQC
http://aclweb.org/anthology/P97-1003
http://aclweb.org/anthology/P97-1003
https://doi.org/10.18653/v1/D16-1001
https://doi.org/10.18653/v1/D16-1001
https://doi.org/10.18653/v1/D16-1001
http://arxiv.org/abs/1810.04805
http://arxiv.org/abs/1810.04805
http://arxiv.org/abs/1810.04805
https://doi.org/10.18653/v1/N16-1024
https://doi.org/10.18653/v1/N16-1024
http://aclweb.org/anthology/P96-1011
http://aclweb.org/anthology/P96-1011
http://aclweb.org/anthology/W11-2924
http://aclweb.org/anthology/W11-2924
http://aclweb.org/anthology/P18-2075
http://aclweb.org/anthology/P18-2075
http://aclweb.org/anthology/P18-2075
https://doi.org/10.18653/v1/P17-2025
https://doi.org/10.18653/v1/P17-2025
https://doi.org/10.18653/v1/N18-1091
https://doi.org/10.18653/v1/N18-1091
http://aclweb.org/anthology/W12-0503
http://aclweb.org/anthology/W12-0503
http://aclweb.org/anthology/W12-0503
https://www.aclweb.org/anthology/P18-1192
https://www.aclweb.org/anthology/P18-1192
http://aclweb.org/anthology/W07-2416
http://aclweb.org/anthology/W07-2416
http://aclweb.org/anthology/W07-2416


2406

Kasami, Tadao. 1965. An Efficient Recognition and
Syntax-Analysis Algorithm for Context-Free Lan-
guages. Technical Report Air Force Cambridge Re-
search Lab.

Bernd Kiefer and Hans-Ulrich Krieger. 2004.
A Context-Free Superset Approximation of
Unification-Based Grammars. In New developments
in parsing technology, pages 229–250.

Nikita Kitaev and Dan Klein. 2018a. Constituency
Parsing with a Self-Attentive Encoder. In Proceed-
ings of the 56th Annual Meeting of the Association
for Computational Linguistics (ACL), pages 2676–
2686.

Nikita Kitaev and Dan Klein. 2018b. Multilingual
Constituency Parsing with Self-Attention and Pre-
Training. arXiv preprint arXiv:1812.11760.

Hans-Ulrich Krieger. 2007. From UBGs to CFGs
A practical corpus-driven approach. Natural Lan-
guage Engineering, 13(4):317–351.

Adhiguna Kuncoro, Miguel Ballesteros, Lingpeng
Kong, Chris Dyer, Graham Neubig, and Noah A.
Smith. 2017. What Do Recurrent Neural Network
Grammars Learn About Syntax? In Proceedings of
the 15th Conference of the European Chapter of the
Association for Computational Linguistics: Volume
1, Long Papers (EACL), pages 1249–1258.

Adhiguna Kuncoro, Miguel Ballesteros, Lingpeng
Kong, Chris Dyer, and Noah A. Smith. 2016. Dis-
tilling an Ensemble of Greedy Dependency Parsers
into One MST Parser. In Proceedings of the 2016
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 1744–1753.

Zuchao Li, Jiaxun Cai, Shexia He, and Hai Zhao.
2018a. Seq2seq Dependency Parsing. In Pro-
ceedings of the 27th International Conference on
Computational Linguistics (COLING), pages 3203–
3214.

Zuchao Li, Shexia He, Jiaxun Cai, Zhuosheng Zhang,
Hai Zhao, Gongshen Liu, Linlin Li, and Luo Si.
2018b. A Unified Syntax-aware Framework for Se-
mantic Role Labeling. In Proceedings of the 2018
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 2401–2411.

Zuchao Li, Shexia He, Zhuosheng Zhang, and Hai
Zhao. 2018c. Joint Learning of POS and Dependen-
cies for Multilingual Universal Dependency Pars-
ing. In Proceedings of the CoNLL 2018 Shared
Task: Multilingual Parsing from Raw Text to Uni-
versal Dependencies (CONLL), pages 65–73.

Wang Ling, Chris Dyer, Alan W Black, and Isabel
Trancoso. 2015. Two/Too Simple Adaptations of
Word2Vec for Syntax Problems. In Proceedings
of the 2015 Conference of the North American
Chapter of the Association for Computational Lin-
guistics: Human Language Technologies (NAACL:
HLT), pages 1299–1304.

Jiangming Liu and Yue Zhang. 2017a. In-Order
Transition-based Constituent Parsing. Transactions
of the Association for Computational Linguistics
(TACL), 5:413–424.

Jiangming Liu and Yue Zhang. 2017b. Shift-Reduce
Constituent Parsing with Neural Lookahead Fea-
tures. Transactions of the Association for Compu-
tational Linguistics (TACL), 5:45–58.

Xuezhe Ma and Eduard Hovy. 2017. Neural Proba-
bilistic Model for Non-projective MST Parsing. In
Proceedings of the Eighth International Joint Con-
ference on Natural Language Processing (IJCNLP),
pages 59–69.

Xuezhe Ma, Zecong Hu, Jingzhou Liu, Nanyun Peng,
Graham Neubig, and Eduard Hovy. 2018. Stack-
Pointer Networks for Dependency Parsing. In Pro-
ceedings of the 56th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL), pages
1403–1414.

Xuezhe Ma, Xiaotian Zhang, Hai Zhao, and Bao-Liang
Lu. 2010. Dependency Parser for Chinese Con-
stituent Parsing. In CIPS-SIGHAN Joint Conference
on Chinese Language Processing (CLP).

Mitchell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a Large Annotated
Corpus of English: The Penn Treebank. Computa-
tional Linguistics, 19(2).

Yusuke Miyao, Takashi Ninomiya, and Jun’ichi Tsujii.
2004. Corpus-Oriented Grammar Development for
Acquiring a Head-Driven Phrase Structure Gram-
mar from the Penn Treebank. In International Con-
ference on Natural Language Processing (IJCNLP),
pages 684–693.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global Vectors for Word
Representation. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 1532–1543.

Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep Contextualized Word Rep-
resentations. In Proceedings of the 2018 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies (NAACL: HLT), pages 2227–2237.

Slav Petrov and Dan Klein. 2007. Improved Inference
for Unlexicalized Parsing. In Human Language
Technologies 2007: The Conference of the North
American Chapter of the Association for Computa-
tional Linguistics; Proceedings of the Main Confer-
ence (NAACL), pages 404–411.

Carl Pollard and Ivan A Sag. 1994. Head-Driven
Phrase Structure Grammar. University of Chicago
Press.

http://aclweb.org/anthology/P18-1249
http://aclweb.org/anthology/P18-1249
http://aclweb.org/anthology/E17-1117
http://aclweb.org/anthology/E17-1117
https://doi.org/10.18653/v1/D16-1180
https://doi.org/10.18653/v1/D16-1180
https://doi.org/10.18653/v1/D16-1180
https://www.aclweb.org/anthology/C18-1271
https://www.aclweb.org/anthology/D18-1262
https://www.aclweb.org/anthology/D18-1262
https://www.aclweb.org/anthology/K18-2006
https://www.aclweb.org/anthology/K18-2006
https://www.aclweb.org/anthology/K18-2006
https://doi.org/10.3115/v1/N15-1142
https://doi.org/10.3115/v1/N15-1142
http://aclweb.org/anthology/Q17-1029
http://aclweb.org/anthology/Q17-1029
http://aclweb.org/anthology/Q17-1004
http://aclweb.org/anthology/Q17-1004
http://aclweb.org/anthology/Q17-1004
http://aclweb.org/anthology/I17-1007
http://aclweb.org/anthology/I17-1007
http://aclweb.org/anthology/P18-1130
http://aclweb.org/anthology/P18-1130
http://aclweb.org/anthology/W10-4146
http://aclweb.org/anthology/W10-4146
http://aclweb.org/anthology/J93-2004
http://aclweb.org/anthology/J93-2004
https://doi.org/10.3115/v1/D14-1162
https://doi.org/10.3115/v1/D14-1162
https://doi.org/10.18653/v1/N18-1202
https://doi.org/10.18653/v1/N18-1202
http://aclweb.org/anthology/N07-1051
http://aclweb.org/anthology/N07-1051


2407

Xiaona Ren, Xiao Chen, and Chunyu Kit. 2013.
Combine Constituent and Dependency Parsing via
Reranking. In Proceedings of the Twenty-Third In-
ternational Joint Conference on Artificial Intelli-
gence (IJCAI), pages 2155–2161.

Yves Schabes, Anne Abeille, and Aravind K. Joshi.
1988. Parsing strategies with ’lexicalized’ gram-
mars: Application to tree adjoining grammars. In
Coling Budapest 1988 Volume 2: International Con-
ference on Computational Linguistics (COLING).

Yikang Shen, Zhouhan Lin, Athul Paul Jacob, Alessan-
dro Sordoni, Aaron Courville, and Yoshua Bengio.
2018. Straight to the Tree: Constituency Parsing
with Neural Syntactic Distance. In Proceedings of
the 56th Annual Meeting of the Association for Com-
putational Linguistics (ACL), pages 1171–1180.

Mitchell Stern, Jacob Andreas, and Dan Klein. 2017a.
A Minimal Span-Based Neural Constituency Parser.
In Proceedings of the 55th Annual Meeting of the
Association for Computational Linguistics (ACL),
pages 818–827.

Mitchell Stern, Daniel Fried, and Dan Klein. 2017b.
Effective Inference for Generative Neural Parsing.
In Proceedings of the 2017 Conference on Em-
pirical Methods in Natural Language Processing
(EMNLP), pages 1695–1700.

Zhiyang Teng and Yue Zhang. 2018. Two Local Mod-
els for Neural Constituent Parsing. In Proceedings
of the 27th International Conference on Computa-
tional Linguistics (COLING), pages 119–132.

Kristina Toutanova, Dan Klein, Christopher D. Man-
ning, and Yoram Singer. 2003. Feature-rich Part-of-
speech Tagging with a Cyclic Dependency Network.
In Proceedings of the 2003 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics on Human Language Technology
(NAACL), pages 173–180.

Gertjan Van Noord et al. 2006. At Last Parsing is Now
Operational. In TALN06. Verbum Ex Machina. Actes
de la 13e conference sur le traitement automatique
des langues naturelles, pages 20–42.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Ł ukasz
Kaiser, and Illia Polosukhin. 2017. Attention is All
you Need. In Advances in Neural Information Pro-
cessing Systems (NIPS), pages 5998–6008.

Rui Wang, Andrew Finch, Masao Utiyama, and Ei-
ichiro Sumita. 2017a. Sentence Embedding for
Neural Machine Translation Domain Adaptation. In
Proceedings of the 55th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL), pages
560–566.

Rui Wang, Masao Utiyama, Andrew Finch, Lemao
Liu, Kehai Chen, and Eiichiro Sumita. 2018. Sen-
tence Selection and Weighting for Neural Machine

Translation Domain Adaptation. IEEE/ACM Trans-
actions on Audio, Speech, and Language Process-
ing, 26(10):1727–1741.

Rui Wang, Masao Utiyama, Lemao Liu, Kehai Chen,
and Eiichiro Sumita. 2017b. Instance Weighting
for Neural Machine Translation Domain Adapta-
tion. In Proceedings of the 2017 Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 1482–1488.

Rui Wang, Masao Utiyama, and Eiichiro Sumita.
2018a. Dynamic Sentence Sampling for Efficient
Training of Neural Machine Translation. In Pro-
ceedings of the 56th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL), pages
298–304.

Wenhui Wang, Baobao Chang, and Mairgup Mansur.
2018b. Improved Dependency Parsing using Im-
plicit Word Connections Learned from Unlabeled
Data. In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 2857–2863.

Zhiguo Wang, Haitao Mi, and Nianwen Xue. 2015.
Feature Optimization for Constituent Parsing via
Neural Networks. In Proceedings of the 53rd
Annual Meeting of the Association for Computa-
tional Linguistics and the 7th International Joint
Conference on Natural Language Processing (ACL-
IJCNLP), pages 1138–1147.

Fengshun Xiao, Jiangtong Li, Hai Zhao, Rui Wang, and
Kehai Chen. 2019. Lattice-Based Transformer En-
coder for Neural Machine Translation. In Proceed-
ings of the 57th Annual Meeting of the Association
for Computational Linguistics (ACL).

Masashi Yoshikawa, Hiroshi Noji, and Yuji Mat-
sumoto. 2017. A* CCG Parsing with a Supertag and
Dependency Factored Model. In Proceedings of the
55th Annual Meeting of the Association for Compu-
tational Linguistics (ACL), pages 277–287.

Younger, Daniel H. 1975. Recognition and
Parsing of Context-Free Languages in Time
n3. Information Control, 10(2) : 189−−208.

Kun Yu, Yusuke Miyao, Xiangli Wang, Takuya
Matsuzaki, and Junichi Tsujii. 2010. Semi-
automatically developing Chinese HPSG grammar
from the Penn Chinese treebank for deep parsing.
In Coling 2010: Posters, pages 1417–1425.

Yi Zhang and Hans-Ulrich Krieger. 2011. Large-Scale
Corpus-Driven PCFG Approximation of an HPSG.
In Proceedings of the 12th International Conference
on Parsing Technologies, pages 198–208.

Yue Zhang and Stephen Clark. 2008. A Tale of Two
Parsers: Investigating and Combining Graph-based
and Transition-based Dependency Parsing. In Pro-
ceedings of the 2008 Conference on Empirical Meth-
ods in Natural Language Processing (EMNLP),
pages 562–571.

http://dl.acm.org/citation.cfm?id=2540128.2540438
http://dl.acm.org/citation.cfm?id=2540128.2540438
http://aclweb.org/anthology/C88-2121
http://aclweb.org/anthology/C88-2121
http://aclweb.org/anthology/P18-1108
http://aclweb.org/anthology/P18-1108
https://doi.org/10.18653/v1/P17-1076
https://doi.org/10.18653/v1/D17-1178
http://aclweb.org/anthology/C18-1011
http://aclweb.org/anthology/C18-1011
https://doi.org/10.3115/1073445.1073478
https://doi.org/10.3115/1073445.1073478
http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf
https://doi.org/10.18653/v1/P17-2089
https://doi.org/10.18653/v1/P17-2089
https://doi.org/10.1109/TASLP.2018.2837223
https://doi.org/10.1109/TASLP.2018.2837223
https://doi.org/10.1109/TASLP.2018.2837223
https://doi.org/10.18653/v1/D17-1155
https://doi.org/10.18653/v1/D17-1155
https://doi.org/10.18653/v1/D17-1155
https://www.aclweb.org/anthology/P18-2048
https://www.aclweb.org/anthology/P18-2048
http://aclweb.org/anthology/D18-1311
http://aclweb.org/anthology/D18-1311
http://aclweb.org/anthology/D18-1311
https://doi.org/10.3115/v1/P15-1110
https://doi.org/10.3115/v1/P15-1110
https://doi.org/10.18653/v1/P17-1026
https://doi.org/10.18653/v1/P17-1026
https://www.aclweb.org/anthology/C10-2162
https://www.aclweb.org/anthology/C10-2162
https://www.aclweb.org/anthology/C10-2162
http://aclweb.org/anthology/W11-2923
http://aclweb.org/anthology/W11-2923
http://aclweb.org/anthology/D08-1059
http://aclweb.org/anthology/D08-1059
http://aclweb.org/anthology/D08-1059


2408

Zhisong Zhang, Rui Wang, Masao Utiyama, Eiichiro
Sumita, and Hai Zhao. 2018a. Exploring Recom-
bination for Efficient Decoding of Neural Machine
Translation. In Proceedings of the 2018 Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP), pages 4785–4790.

Zhisong Zhang, Hai Zhao, and Lianhui Qin. 2016.
Probabilistic Graph-based Dependency Parsing with
Convolutional Neural Network. In Proceedings of
the 54th Annual Meeting of the Association for Com-
putational Linguistics (ACL), pages 1382–1392.

Zhuosheng Zhang, Yafang Huang, and Hai Zhao.
2018b. Subword-augmented Embedding for Cloze
Reading Comprehension. In Proceedings of the
27th International Conference on Computational
Linguistics (COLING), pages 1802–1814.

Zhuosheng Zhang, Jiangtong Li, Pengfei Zhu, Hai
Zhao, and Gongshen Liu. 2018c. Modeling Multi-
turn Conversation with Deep Utterance Aggrega-
tion. In Proceedings of the 27th International Con-
ference on Computational Linguistics (COLING),
pages 3740–3752.

Zhuosheng Zhang and Hai Zhao. 2018. One-shot
Learning for Question-Answering in Gaokao His-
tory Challenge. In Proceedings of the 27th Inter-
national Conference on Computational Linguistics
(COLING), pages 449–461.

Muhua Zhu, Yue Zhang, Wenliang Chen, Min Zhang,
and Jingbo Zhu. 2013. Fast and Accurate Shift-
Reduce Constituent Parsing. In Proceedings of the
51st Annual Meeting of the Association for Compu-
tational Linguistics (ACL), pages 434–443.

https://www.aclweb.org/anthology/D18-1511
https://www.aclweb.org/anthology/D18-1511
https://www.aclweb.org/anthology/D18-1511
https://doi.org/10.18653/v1/P16-1131
https://doi.org/10.18653/v1/P16-1131
https://www.aclweb.org/anthology/C18-1153
https://www.aclweb.org/anthology/C18-1153
https://www.aclweb.org/anthology/C18-1317
https://www.aclweb.org/anthology/C18-1317
https://www.aclweb.org/anthology/C18-1317
https://www.aclweb.org/anthology/C18-1038
https://www.aclweb.org/anthology/C18-1038
https://www.aclweb.org/anthology/C18-1038
http://aclweb.org/anthology/P13-1043
http://aclweb.org/anthology/P13-1043

