



















































Modelling Instance-Level Annotator Reliability for Natural Language Labelling Tasks


Proceedings of NAACL-HLT 2019, pages 2873–2883
Minneapolis, Minnesota, June 2 - June 7, 2019. c©2019 Association for Computational Linguistics

2873

Modelling Instance-Level Annotator Reliability for Natural Language
Labelling Tasks

Maolin Li1,2, Arvid Fahlström Myrman2, Tingting Mu2 and Sophia Ananiadou1,2
1National Centre for Text Mining, University of Manchester, United Kingdom

2School of Computer Science, University of Manchester, United Kingdom
{maolin.li, arvidfm, tingting.mu, sophia.ananiadou}@manchester.ac.uk

Abstract

When constructing models that learn from
noisy labels produced by multiple annotators,
it is important to accurately estimate the reli-
ability of annotators. Annotators may provide
labels of inconsistent quality due to their vary-
ing expertise and reliability in a domain. Pre-
vious studies have mostly focused on estimat-
ing each annotator’s overall reliability on the
entire annotation task. However, in practice,
the reliability of an annotator may depend on
each specific instance. Only a limited num-
ber of studies have investigated modelling per-
instance reliability and these only considered
binary labels. In this paper, we propose an un-
supervised model which can handle both bi-
nary and multi-class labels. It can automat-
ically estimate the per-instance reliability of
each annotator and the correct label for each
instance. We specify our model as a proba-
bilistic model which incorporates neural net-
works to model the dependency between la-
tent variables and instances. For evaluation,
the proposed method is applied to both syn-
thetic and real data, including two labelling
tasks: text classification and textual entail-
ment. Experimental results demonstrate our
novel method can not only accurately estimate
the reliability of annotators across different in-
stances, but also achieve superior performance
in predicting the correct labels and detecting
the least reliable annotators compared to state-
of-the-art baselines.1

1 Introduction

In many natural language processing (NLP) ap-
plications, the performance of supervised machine
learning models depends on the quality of the cor-
pus used to train the model. Traditionally, la-
bels are collected from multiple annotators/experts

1Code is available at https://github.com/
createmomo/instance-level-reliability

who are assumed to provide reliable labels. How-
ever, in reality, these experts may have varying
levels of expertise depending on the domains, and
thus may disagree on labelling in certain cases
(Aroyo and Welty, 2013). A rapid and cost-
effective alternative is to obtain labels through
crowdsourcing (Snow et al., 2008; Poesio et al.,
2013, 2017). In crowdsourcing, each instance is
presented to multiple expert or non-expert anno-
tators for labelling. However, labels collected in
this manner could be noisy, since some annotators
could produce a significant number of incorrect la-
bels. This may be due to differing levels of exper-
tise, lack of financial incentive and interest (Poesio
et al., 2017), as well as the tedious and repetitive
nature of the annotation task (Raykar et al., 2010;
Bonald and Combes, 2017).

Thus, in order to ensure the accuracy of the la-
belling and the quality of the corpus, it is crucial to
estimate the reliability of the annotators automati-
cally without human intervention.

Previous studies have mostly focused on evalu-
ating the annotators’ overall reliability (Gurevych
and Kim, 2013; Sheshadri and Lease, 2013; Poe-
sio et al., 2017). Measuring the reliability on a
per-instance basis is however useful as we may
expect certain annotators to have more expertise
in one domain than another, and as a consequence
certain annotation decisions will be more difficult
than others. This resolves a potential issue of mod-
els that only assign an overall reliability to each
annotator, where such a model would determine
an annotator with expertise in a single domain to
be unreliable for the model, even though the anno-
tations are reliable within the annotator’s domain
of expertise.

Estimating per-instance reliability is also help-
ful for unreliable annotator detection and task
allocation in crowdsourcing, where the cost of
labelling data is reduced using proactive learn-

https://github.com/createmomo/instance-level-reliability
https://github.com/createmomo/instance-level-reliability


2874

ing strategies for pairing instances with the most
cost-effective annotators (Donmez and Carbonell,
2008; Li et al., 2017). Although reliability esti-
mation has been studied for a long time, only a
limited number of studies have examined how to
model the reliability of each annotator on a per-
instance basis. Additionally, these in turn have
only considered binary labels (Yan et al., 2010,
2014; Wang and Bi, 2017), and cannot be extended
to multi-class classification in a straightforward
manner.

In order to handle both binary and multi-class
labels, our approach extends one of the most popu-
lar probabilistic models for label aggregation, pro-
posed by Hovy et al. (2013). One challenge of
extending the model is the definition of the label
and reliability probability distributions on a per-
instance basis. Our approach introduces a classi-
fier which predicts the correct label of an instance,
and a reliability estimator, providing the probabil-
ity that an annotator will label a given instance cor-
rectly. The approach allows us to simultaneously
estimate the per-instance reliability of the annota-
tors and the correct labels, allowing the two pro-
cesses to inform each other. Another challenge is
to select appropriate training methods to learn a
model with high and stable performance. We in-
vestigate training our model using the EM algo-
rithm and cross entropy. For evaluation, we ap-
ply our method to six datasets including both syn-
thetic and real-world datasets (see Section 4.1). In
addition, we also investigate the effect on the per-
formance when using different text representation
methods and text classification models (see Sec-
tion 4.2).

Our contributions are as follows: firstly, we pro-
pose a novel probabilistic model for the simulta-
neous estimation of per-instance annotator relia-
bility and the correct labels for natural language
labelling tasks. Secondly, our work is the first to
propose a model for modelling per-instance relia-
bility for both binary and multi-class classification
tasks. Thirdly, we show experimentally how our
method can be applied to different domains and
tasks by evaluating it on both synthetic and real-
world datasets. We demonstrate that our method
is able to capture the reliability of each annotator
on a per-instance basis, and that this in turn helps
improve the performance when predicting the un-
derlying label for each instance and detecting the
least reliable annotators.

2 Related Work

2.1 Modelling Annotator Reliability

Probabilistic graphical models have been widely
used for inferring the overall reliability of anno-
tators in the absence of ground truth labels. Ap-
proaches include modelling a single overall reli-
ability score for each annotator (Whitehill et al.,
2009; Welinder et al., 2010; Karger et al., 2011;
Liu et al., 2012; Demartini et al., 2012; Hovy et al.,
2013; Rodrigues et al., 2014; Li et al., 2014a,b),
estimating the reliability of each annotator on a
per-category basis (Dawid and Skene, 1979; Zhou
et al., 2012; Kim and Ghahramani, 2012; Zhang
et al., 2014), and estimating the sensitivity and
specificity for each annotator in binary classifica-
tion tasks (Raykar et al., 2010).

Fewer attempts have been made to model the
per-instance reliability of annotators, focusing
mainly on medical image classification. One ap-
proach is that by Yan et al. (2010; 2014) who use
logistic regression to predict the per-instance reli-
ability of annotators. Wang and Bi (2017) used
a modified support vector machine (SVM; Cortes
and Vapnik 1995) loss, modelling the per-instance
reliability as the distance from the given instance
to a separation boundary.

2.2 True Label Prediction in Crowdsourcing

True label prediction in crowdsourcing is the ag-
gregation of labels produced by different anno-
tators to infer the correct label of each instance.
Majority voting assigns to each instance the most
commonly occurring label among the annotators,
which can result in a high agreement between
the predicted label and the ground truth for some
NLP tasks (Snow et al., 2008). Dawid and
Skene (1979), Whitehill et al. (2009), Raykar
et al. (2010), Welinder et al. (2010), Liu
et al. (2012), Zhou et al. (2012), Kim and
Ghahramani (2012), Hovy et al. (2013), Yan
et al. (2010; 2014), Li et al. (2014b) and Zhang
et al. (2014) investigated binary or multi-class la-
bel prediction using probabilistic graphical mod-
els. Karger et al. (2011), Wang and Bi (2017), and
Bonald and Combes (2017) formalised the label
prediction as an optimisation problem. Rodrigues
et al. (2014) and Nguyen et al. (2017) investigated
how to aggregate sequence labels using probabilis-
tic graphical models.



2875

aij

ti rij

M

N

Figure 1: Graphical model.

for i = 1 to N
ti ∼ Categorical(ft(xi))
for j = 1 to M

rij ∼ Bernoulli(fr(xi, j))

aij ∼

{
Uniform(T ) rij = 0

δti rij = 1

Figure 2: Generative process for our method. ft is the
classifier, returning a probability distribution over pre-
dicted labels, and fr is the reliability estimator, return-
ing the probability that the annotator is accurate for the
instance. Uniform(T ) is a uniform distribution over
the categories in T . δti is the deterministic distribution
that only takes on the value ti.

3 Methodology

3.1 Model

In the description of our model we let N be the
number of training instances,M the number of an-
notators, xi the ith training instance, ti its true un-
derlying label, T the set of values ti can take on,
rij whether annotator j is reliable for the ith in-
stance, and aij the label that annotator j gave the
ith instance. Below we describe the components
of the model in more detail.

Probabilistic Model: Our model is inspired by
the method proposed by Hovy et al. (2013), and it
shares the same graphical representation (see Fig-
ure 1). The distributions of the model, however,
are defined differently, as can be seen in Figure 2,
due to the inclusion of a classifier and a reliability
estimator.

We assume that the underlying label ti depends
only on the corresponding instance, while the re-
liability rij depends on the instance and the iden-
tity of the annotator. If rij = 0, then the anno-
tator j is unreliable for instance xi, and a label is
chosen randomly from among the available cate-
gories. Otherwise, the annotation aij is set to be
the correct label.

Classifier: The classifier ft(xi) provides the
predicted probabilities of an instance belonging to
each category, p(ti | xi). ti is the underlying label
for instance xi, the ith instance, and takes a value
in the set of categories T . Note that there is no re-
striction on what classifier is used, other than that
it can be trained using expectation maximisation.
The inclusion of a classifier directly in the model
means that it can be trained while taking into ac-
count the uncertainty of the data and predictions,
as opposed to first making a hard assignment of a
label for each instance and training the classifier
post-hoc.

Reliability Estimator: The reliability estimator
fr(xi, j) predicts the probability of annotator j
producing the correct label for instance xi, p(rij |
xi). rij is a binary variable, with 1 and 0 repre-
senting annotator j being reliable and unreliable
for instance xi, respectively. The reliability esti-
mator is modelled as a feed-forward neural net-
work, where j is encoded as a one-hot vector. The
exact representation of xi depends on the model
used for the classifier. If the classifier is a neural
network, the output of the last hidden layer is used;
otherwise, the original feature vector is used.

3.2 Learning

Pre-training
As the number of parameters in our model is much
larger than that of previous studies (Yan et al.,
2010, 2014; Wang and Bi, 2017) due to the intro-
duction of both a classifier and a reliability estima-
tor, the model is much harder to train from scratch.
Therefore, before we start training the model, we
first pre-train the classifier using labels predicted
by a simpler method as targets, using e.g. major-
ity voting or the method proposed by Dawid and
Skene (1979). Although these labels may be noisy,
we have observed empirically that a better initial-
isation strategy does result in better performance
(see Section 5). For the reliability estimator, for
each instance xi we compare each annotation aij
to the labels predicted in the previous step. If aij is
the same as the predicted label, we take the corre-
sponding rij to be 1, and 0 otherwise. We then pre-
train the reliability estimator fr to predict these
values for r.

EM Training
We first consider training our model using expec-
tation maximisation (EM; Dempster et al. 1977).



2876

This involves maximising the expectation of the
complete log likelihood of the model with respect
to the posterior of the latent variables in the model.
For the posterior of the model, we fix the param-
eters of the model and denote them θ(k) at iter-
ation k of the algorithm. We only maximise the
expectation with respect to the parameters θ of the
complete log likelihood.

The expectation is calculated as:

Q(θ | θ(k)) = E[log p(a, t, r | x,θ)]

=

N∑
i=1

E [log p(ti | xi,θ)]

+

N∑
i=1

M∑
j=1

E [log p(rij | xi,θ)]

+

N∑
i=1

M∑
j=1

E [log p(aij | ti, rij ,xi,θ)] ,

(1)

where each expectation is calculated with respect
to the posterior p(t, r | a,x,θ(k)).

E Step: For the E step we compute the poste-
rior with fixed parameters θ(k), πij(t, r) = p(ti =
t, rij = r | ai,xi), as:

πij(t, r) = p(ti = t, rij = r | ai,xi)
∝ p(ti = t | xi)p(rij = r | xi)

· p(aij | ti = t, rij = r,xi) ·
∏
j′ 6=j

γ
(k)

ij′ (t)
(2)

γkij(t) =
∑

r′∈{0,1}

(
p(rij = r′ | xi)

· p(aij | ti = t, rij = r′,xi)
)
,

(3)

where we drop the dependency on θ(k) for brevity.
Note that πij(t, r) = 0 when r = 1 and aij 6= t.

We can then compute the marginalised posteri-
ors, needed for Equation (1), as follows:

p(ti = t | ai,xi) =
∑

r∈{0,1}

πi1(t, r) (4)

p(rij = r | ai,xi) =
∑
t∈T

πij(t, r), (5)

where the posterior p(ti, ri1 | ai,xi) of the model
is chosen arbitrarily to marginalise over to get the
posterior for ti.

M Step: Using the posterior calculated in the E
step we can compute the expectation of the com-
plete log likelihood, Q(θ | θ(k)), and calculate its
gradient with respect to the parameters θ. We then
use gradient ascent to update the classifier and re-
liability estimator jointly.

Algorithm 1 Training procedure
Input:

a, the annotations
x, the instances
L, the number of inner iterations
m, the training mode: 0 for expectation maximisation, 1 for cross en-
tropy (training alternatingly), 2 for cross entropy (training jointly)

1: Pre-train θ = {θt, θr} (Section 3.2)
2: k ← 0
3: while stopping criteria not met do
4: k ← k + 1
5: Calculate πij(t, r) (Equation (2)) . E step
6: ifm = 0 then .M step
7: for l = 1 to L
8: θ ← θ + α∇θQ(θ | θ(k))
9: end for

10: else ifm = 1 then
11: for l = 1 to L
12: θr ← θr − α∇θrL(θr | θ(k))
13: end for
14: for l = 1 to L
15: θt ← θt − α∇θtL(θt | θ

(k))

16: end for
17: else
18: for l = 1 to L
19: θ ← θ − α∇θL(θ | θ(k))
20: end for
21: end if
22: end while

Cross Entropy Training

As an alternative training procedure, we also con-
sider training the model using cross entropy. As
with expectation maximisation, we first calculate
the posterior πij(t, r) using the fixed parameters
θ(k). The networks ft and fr are then trained
to minimise the cross entropy between the priors
p(ti | xi) and p(rij | xi), and the corresponding
posteriors p(ti | ai,xi) and p(rij | ai,xi).

The networks can be trained in an alternating
fashion, with fr being trained while ft is kept
fixed, and the other way around. Denoting the pa-
rameters of ft as θt and fr as θr, the loss functions
for the respective networks then become

L(θt | θ(k)) = −
1

N

∑
i,t,r

πi1(t, r) log p(ti | xi)

L(θr | θ(k)) = −
1

NM

∑
i,j,t,r

πij(t, r) log p(rij | xi)
(6)

Alternatively, they can be trained jointly by min-
imising the total cross entropy.

L(θ | θ(k)) = L(θt | θ(k)) + L(θr | θ(k)) (7)

The training algorithm is summarised in Algo-
rithm 1. The algorithm is run until either a maxi-
mum number of iterations is reached, or the objec-
tive function stops improving.



2877

Figure 3: Three 2-dimensional datasets.

4 Evaluation Settings

4.1 Data
Simulated Annotators
2-Dimensional Datasets: In order to see
whether our method can work well on simple
cases, we create three 2-dimensional synthetic
datasets, which we refer to as moon, circle and
3-class as shown in Figure 3.

Text Classification: For text classification we
use the datasets Question Classification (Li and
Roth, 2002), which contains short questions along
with the type of answer expected, and Sentence
Classification (Chambers, 2013), which consists
of sentences selected from medical publications.
Examples of instance/class pairs for the text classi-
fication datasets include ”Where is the Orinoco?”
(class: ”location”) for the Question Classification
dataset, and ”New types of potent force clamps are
discovered.” (class: ”author’s own work”) for the
Sentence Classification dataset.

For these datasets that do not include crowd an-
notations, we synthesise annotations by simulating
different annotators as follows: 1) Narrow Ex-
pert: has expertise in a single domain (i.e. class).
For the instances of this class, the annotator will
always provide the correct label. For other classes,
a correct label will be provided with a probability
of 0.65; otherwise, a random label will be selected
with uniform probability; 2) Broad Expert: has
expertise in every domain and only makes mis-
takes with a probability of 0.05; 3) Random An-
notator: selects labels at random; 4) Adversarial
Annotator: deliberately provides incorrect labels
with a probability of 0.8.

For each of the datasets, we generated annota-
tions using one narrow expert per class, one broad
expert, one random annotator and one adversarial
annotator, for a total of |T | + 3 annotators, where
|T | is the number of classes in the dataset.

In order to evaluate the generality of our model,
we also apply it to another task in which we have
5 annotators with different overall reliabilities for
the text classification tasks. They produce incor-

Dataset Class # Instances
moon 0/1 500/500
circle 0/1 500/500

3-class 0/1/2 334/333/333
DESCRIPTION (DESC) 1162
ENTITY (ENTY) 1250

Question ABBREV. (ABBR) 86
Classification HUMAN (HUM) 1223

NUMERIC (NUM) 896
LOCATION (LOC) 835
AIMX 94

Sentence OWNX 427
Classification CONT 104

BASE 33
MISC 852

RTE 0/1 400/400

Table 1: Classes and per-class instance counts.

Datasets Classifier # Units
2-Dimensional

Datasets
(3 datasets)

2D→FNN 5

Text
Classification
(2 datasets)

BoW→FNN 100
Avg.→FNN 50
Embed.→LSTM→FNN 100

RTE Cat. Avg.→FNN 100Embed.→LSTM→FNN
(Bowman et al., 2015) 200

Table 2: Classifiers used in the experiments.

rect labels with probabilities 0.1, 0.3, 0.5, 0.7, 0.9
respectively.

Real-World Crowdsourcing Annotators
Recognising Textual Entailment: Finally, we
evaluate our model on a real-world dataset for the
recognising textual entailment (RTE) task (Snow
et al., 2008). Given a text pair, the annotator de-
cides whether the hypothesis sentence can be in-
ferred from the text fragment. The dataset includes
both ground truth and crowdsourced labels from
164 annotators.

Table 1 shows the number of instances of each
class2 in the above-mentioned datasets.

4.2 Experimental and Model Settings

Our model was implemented using the Chainer
deep learning framework3 (Tokui et al., 2015).

Classifier: As shown in Table 2, in each exper-
iment the output of the classifier is generated by
a feed-forward neural network (FNN). Each FNN
consists of an input layer, two hidden layers and
a softmax output layer. The number of hidden
units in each layer is listed in the third column of
the table. The ReLU activation function (Nair and

2The classes in the Sentence Classification dataset are de-
fined as follows: AIMX—the goal of the paper; OWNX—the
author’s own work; CONT—the comparison including con-
trast and critique of past work; BASE—the past research that
provides the basis for the work; MISC—any other sentences.

3https://chainer.org/

https://chainer.org/


2878

Hinton, 2010) was applied after each hidden layer.
The output size of all the Long Short-Term Mem-
ory (LSTM; Hochreiter and Schmidhuber, 1997)
layers in our experiments is 100.

For the 2-dimensional classification task, each
instance is simply represented using its position
in 2-dimensional space. For the text classifi-
cation tasks, we investigated 3 methods of rep-
resenting the sentences: bag-of-words (BoW)
weighted by Term Frequency–Inverse Document
Frequency (TFIDF), an average word embedding
(Avg.) and the output at the last step of an LSTM
layer (Embed.→LSTM). For the embedding we
use word2vec embeddings pre-trained on Google
News (Mikolov et al., 2013) for the question clas-
sification and RTE tasks, and a pre-trained embed-
ding (Pyysalo et al., 2013) trained on a combina-
tion of English Wikipedia, PubMed and PMC texts
for the sentence classification task.

For the RTE task, we implemented two classi-
fiers. For the first one, each instance (i.e. a sen-
tence pair) was represented as a concatenation of
the average word embedding for each sentence
(Cat. Avg.). We also implemented Bowman
et al. (2015), which runs each sentence through an
LSTM, concatenates the outputs, and then feeds
the concatenated output to an FNN with tanh acti-
vations.

Reliability Estimator: We model the reliability
estimator as an FNN. Its structure is the same as
the classifier, albeit with different sizes of the two
hidden layers. For the experiments listed in Ta-
ble 2, the number of units of each hidden layer
in the FNN are 5, 100, 25, 25, 50, and 100 re-
spectively. The input to the estimator is the con-
catenation of the instance xi (i.e. its original fea-
ture vector or the output of the last hidden layer
of the classifier) and a one-hot vector representing
the annotator identity.

Learning Settings: For every experiment we
use the Adam (Kingma and Ba, 2015) optimiser
with a weight decay rate 0.001, a gradient clip-
ping of 5.0, α = 0.001, β1 = 0.9 and β2 = 0.999.
We pre-train the classifier and reliability estimator
for 200 epochs, using both majority voting and the
model proposed by Dawid and Skene (1979). The
maximum number of outer iterations is set to 500
and 20 for EM training and cross entropy training
respectively. The number of inner iterations is 50
in both cases.

True Label Prediction and Reliability Estima-
tion: After training, for each instance xi we take
its underlying label to be the most probable la-
bel according to the posterior of ti (see Equa-
tion (4)). We compared our predicted labels to
the following state-of-the-art baselines: Major-
ity Voting (MV), DS (Dawid and Skene, 1979),
GLAD (Whitehill et al., 2009), LFC (Raykar et al.,
2010), CUBAM (Welinder et al., 2010), Yan
et al. (2010), KOS (Karger et al., 2011), VI (Liu
et al., 2012), BCC (Kim and Ghahramani, 2012),
MINIMAX (Zhou et al., 2012), MACE (Hovy
et al., 2013), CATD (Li et al., 2014a), PM (Li
et al., 2014b) and EM-MV and Opt (Zhang et al.,
2014).

Note that CUBAM, Yan et al. (2010), KOS and
VI are only suitable for aggregating binary la-
bels, and Yan et al. (2010) is the state-of-the-art
method that models per-instance reliability. We
take the reliability of annotator j on instance xi to
be the posterior probability that rij is 1 (see Equa-
tion (5)).

5 Results and Analysis

We measure the inter-annotator agreement (IAA)
of each dataset. Fleiss’s kappa (Fleiss et al., 2013),
denoted by κ, is measured for the 2-dimensional
and text classification datasets, and Krippendorff’s
alpha (Krippendorff, 1970) is calculated for the
RTE dataset4. We find that the IAA values indicate
slight agreement among annotators for all datasets.

Our experiments using different settings are
shown as follows: our model is denoted by O,
with M and D denoting the model pre-trained us-
ing MV and DS respectively. E denotes training
using expectation maximisation, while C denotes
cross entropy training. AL and JT denote cross
entropy training done alternatingly and jointly, re-
spectively.

In the rest of this section, Tables 3 to 7 and Ta-
bles 8 to 10 present the results on the synthetic
datasets and RTE dataset respectively. For the syn-
thetic datasets, in Tables 3 to 6, we first consider
a scenario where we have multiple narrow experts
(N), one broad expert (B), one random annotator
(R) and one adversarial annotator (A). In Table 7,
we further consider a scenario with 5 annotators,

4Although there are 164 annotators in total in this dataset,
each instance was labelled by only 10 of these annotators.
Therefore we use Krippendorff’s alpha which is applicable to
incomplete data to measure the inter-annotator agreement.



2879

2-Dimensional Datasets
moon circle 3-class

κ = 0.029 κ = 0.029 κ = 0.153

MV 84.6 84.6 89.0
DS (Dawid and Skene, 1979) 97.8 97.9 99.4
GLAD (Whitehill et al., 2009) 97.9 97.9 93.7
LFC (Raykar et al., 2010) 97.9 97.9 99.4
CUBAM (Welinder et al., 2010) 97.9 97.9 -
Yan et al. (Yan et al., 2010) 84.1 84.1 -
KOS (Karger et al., 2011) 96.7 96.7 -
VI (Liu et al., 2012) 97.9 97.9 -
BCC (Kim and Ghahramani, 2012) 97.9 97.9 99.4
MINIMAX (Zhou et al., 2012) 97.9 97.9 99.2
MACE (Hovy et al., 2013) 97.8 97.9 97.0
CATD (Li et al., 2014a) 94.5 94.5 94.3
PM (Li et al., 2014b) 94.5 94.5 94.3
EM-MV (Zhang et al., 2014) 97.9 97.9 96.3
EM-Opt (Zhang et al., 2014) 72.7 72.7 93.2
O-ME 97.0 97.7 94.8
O-MC 97.3 98.9 99.3
O-DE 91.2 97.2 96.5
O-DC-AL 99.7 99.7 99.5
O-DC-JT 99.8 99.6 99.5

Table 3: F1 scores of predicted labels on the 2-
dimensional datasets when using the output of the last
hidden layer of the classifier to represent an instance
for the reliability estimator.

each of differing reliability, as explained in Sec-
tion 4.1.

Table 3 shows that our method performs well
on the 2-dimensional datasets, obtaining higher la-
bel prediction F1 scores than the baselines. We
omit the analysis of the true label prediction and
reliability estimation results on these datasets as
all models performed similarly, choosing instead
to focus the discussion on the results for the NLP
tasks.

5.1 Classifier and Reliability Estimator

In order to explore the separate performance con-
tribution of classifier and reliability estimator, we
compare the performance of our model to a classi-
fier pre-trained using DS labels, as well as a vari-
ant of our model without the reliability estimator,
i.e. setting all the annotators have the same relia-
bility on all the instances.

As shown in Tables 4, 7 and 8, the pre-trained
classifier performed worse than some aggregation
methods. This indicates that the noise in the labels
predicted by DS has an adverse effect on the train-
ing of the classifier. The much lower performance
of the model with the reliability estimator removes
hints at the importance of modelling per-annotator
reliability to ensure accurate predictions.

Question
Classification

Sentence
Classification

κ = 0.094 κ = 0.0634
BoW Avg. BoW Avg.

MV 78.8 78.8 71.3 71.3
DS (Dawid and Skene, 1979) 98.3 98.3 97.3 97.3
GLAD (Whitehill et al., 2009) 87.1 87.1 79.9 79.9
LFC (Raykar et al., 2010) 98.2 98.2 97.0 97.0
BCC (Kim and Ghahramani, 2012) 98.3 98.3 98.1 98.1
MINIMAX (Zhou et al., 2012) 28.2 28.2 50.9 50.9
MACE (Hovy et al., 2013) 91.6 91.6 63.6 63.6
CATD (Li et al., 2014a) 91.1 91.1 92.2 92.2
PM (Li et al., 2014b) 91.1 91.1 92.2 92.2
EM-MV (Zhang et al., 2014) 88.3 88.3 66.9 66.9
EM-Opt (Zhang et al., 2014) 13.5 13.5 26.5 26.5
Classifier (pre-trained by DS labels) 92.3 86.5 89.6 85.4
O-DE (without reliability estimator) 92.1 91.2 77.6 87.1
O-DC-AL (without reliability estimator) 90.5 93.2 84.0 88.2
O-DC-JT (without reliability estimator) 88.7 91.1 78.5 87.4
O-DE (using feature vector) 95.1 97.0 88.9 97.8
O-DC-AL (using feature vector) 97.5 98.9 97.2 97.5
O-DC-JT (using feature vector) 97.5 98.9 97.2 97.5
O-ME (full model) 92.4 95.0 84.4 89.2
O-MC (full model) 97.2 98.3 90.6 94.6
O-DE (full model) 98.0 98.3 97.7 98.9
O-DC-AL (full model) 98.3 98.6 97.6 97.9
O-DC-JT (full model) 98.7 99.0 97.3 97.8

Table 4: F1 scores of predicted labels on the text clas-
sification datasets.

5.2 Instance Representation for Reliability
Estimator

For the representation of the instance xi as it is
fed to the reliability estimator, we compared the
performance of using the original feature vector
of xi to using the last hidden layer output of the
classifier (which we refer to as the “full model”).

We found that using the hidden layer represen-
tation can not only improve the label prediction
performance (see Tables 4, 7 and 8), but also sped
up the training compared to using the feature vec-
tor directly. The hidden layer representation al-
lows us to reduce the number of parameters in the
model, by sharing parameters with the classifier.

5.3 Full Model on Synthetic Datasets

Based on the results of the full model in Table 4,
we can conclude that per-instance reliability mod-
elling is beneficial to the label prediction task, and
using the average pre-trained embedding can re-
sult in slightly better performance. It is worth not-
ing that the method used to pre-train the model had
a noticeable effect on its performance, with bet-
ter F1 scores being obtained when using DS pre-
training. In the following experiments we only
consider models pre-trained using the DS algo-
rithm.

In order to investigate whether our method can
successfully capture per-instance annotator relia-
bility, for each annotator, we counted the number
of correctly labelled instances and calculated the



2880

Question Classification
DESC ENTY ABBR HUM NUM LOC Accuracy

1 (N) 99 1 0 0 0 0 100
2 (N) 0 100 0 0 0 0 100
3 (N) 31 13 40 5 2 9 100
4 (N) 0 0 0 100 0 0 100
5 (N) 0 0 0 0 100 0 100
6 (N) 0 0 0 0 0 100 100
7 (B) 20 0 0 77 0 3 100
8 (R) 30 32 8 8 15 7 100
9 (A) 45 19 9 14 5 8 100

Table 5: Number of correctly labelled examples for
each annotator (N: narrow expert, B: broad expert, R:
random annotator and A: adversarial annotator) among
the 100 instances with highest per-instance reliability
on the question classification dataset.

Question Classification
DESC ENTY ABBR HUM NUM LOC Overall

1 (N) 90.6 24.4 35.5 21.4 26.6 22.2 36.8
2 (N) 28.7 92.3 26.6 25.2 24.3 26.7 37.3
3 (N) 24.7 24.9 75.8 23.5 24.7 23.6 32.9
4 (N) 27.5 26.3 32.3 93.4 24.2 23.7 37.9
5 (N) 25.6 21.9 25.2 25.7 93.8 26.0 36.4
6 (N) 26.4 25.0 24.1 22.1 27.5 94.4 36.6
7 (B) 94.3 93.5 95.1 94.2 93.4 93.9 94.2
8 (R) 5.60 6.30 8.40 4.80 6.20 5.90 6.20
9 (A) 9.10 8.90 12.0 8.20 7.90 8.30 9.10

Table 6: Average reliability of each annotator among
the 100 instances with the highest per-instance reliabil-
ity on the question classification dataset.

average reliability for each class among the top
100 instances with the highest per-instance relia-
bility as shown in Table 5 and 65. The cells with
grey background colour indicate which domain, or
class, the annotator has expertise in. It can be seen
that all annotators obtain high accuracy on these
instances. In general our method also captured the
varying expertise of each narrow annotator, esti-
mating their reliability on instances belonging to
the corresponding classes as particularly high.

For these experiments in Table 7, we also inves-
tigated the performance when using two different
classification models. As seen in this table, both
of them outperformed all baselines significantly.

5.4 Full Model on RTE Dataset
Table 8 presents the label prediction performance
on the RTE dataset. As not every annotator has
provided labels for every instance in this dataset,
for both the EM and cross entropy training we sim-
ply omitted missing instance/annotator pairs when
calculating the loss functions. As seen in the ta-
ble, most of the baselines obtained high perfor-
mance as the textual entailment recognition task is
easy for non-expert annotators. However, our full
model still achieved better prediction performance

5We omit the results for the sentence classification task
for lack of space, as we consider the results on the question
classification dataset to be representative.

Question
Classification

Sentence
Classification

κ = 0.126 κ = 0.0776
FNN LSTM+FNN FNN LSTM+FNN

MV 71.8 71.8 65.8 65.8
DS (Dawid and Skene, 1979) 90.1 90.1 83.9 83.9
GLAD (Whitehill et al., 2009) 80.9 80.9 71.8 71.8
LFC (Raykar et al., 2010) 88.3 88.3 80.3 80.3
BCC (Kim and Ghahramani, 2012) 90.4 90.4 85.6 85.6
MINIMAX (Zhou et al., 2012) 30.4 30.4 44.0 44.0
MACE (Hovy et al., 2013) 84.6 84.6 62.4 62.4
CATD (Li et al., 2014a) 85.2 85.2 80.5 80.5
PM (Li et al., 2014b) 85.2 85.2 80.5 80.5
EM-MV (Zhang et al., 2014) 75.4 75.4 56.6 56.6
EM-Opt (Zhang et al., 2014) 19.4 19.4 14.4 14.4
Classifier (pre-trained by DS labels) 89.7 76.6 79.6 78.7
O-DE (without reliability estimator) 91.9 91.0 80.1 82.5
O-DC-AL (without reliability estimator) 91.8 91.2 80.0 83.5
O-DC-JT (without reliability estimator) 91.5 91.6 79.3 83.5
O-DE (using feature vector) 94.3 - 81.7 -
O-DC-AL (using feature vector) 94.1 - 86.2 -
O-DC-JT (using feature vector) 94.1 - 86.2 -
O-DE (full model) 94.5 94.1 86.1 86.1
O-DC-AL (full model) 94.7 96.0 90.3 88.5
O-DC-JT (full model) 95.1 95.1 88.5 89.0

Table 7: F1 scores on text classification tasks when
only the reliability differs between the annotators.

Method F-measure
MV 91.9
DS (Dawid and Skene, 1979) 92.6
GLAD (Whitehill et al., 2009) 92.4
LFC (Raykar et al., 2010) 92.5
CUBAM (Welinder et al., 2010) 92.6
Yan et al. (Yan et al., 2010) 90.4
KOS (Karger et al., 2011) 63.2
VI (Liu et al., 2012) 92.5
BCC (Kim and Ghahramani, 2012) 92.3
MINIMAX (Zhou et al., 2012) 92.4
MACE (Hovy et al., 2013) 92.4
CATD (Li et al., 2014a) 92.3
PM (Li et al., 2014b) 92.0
EM-MV (Zhang et al., 2014) 92.5
EM-Opt (Zhang et al., 2014) 92.4
Classifier (pre-trained by DS labels) 89.9
O-DC-JT (FNN) (without reliability estimator) 90.2
O-DC-JT (FNN) (using feature vector) 92.6
O-DE (FNN) (full model) 92.9
O-DC-AL (FNN) (full model) 92.8
O-DC-JT (FNN) (full model) 93.0
O-DE (LSTM+FNN) (full model) 92.7
O-DC-AL (LSTM+FNN) (full model) 92.8
O-DC-JT (LSTM+FNN) (full model) 92.8

Table 8: Performance of predicted labels on the RTE
dataset (Krippendorff’s alpha = 0.0995).

than all of the baseline methods.
We also investigated the effectiveness of our

model for removing noisy labels. We compare our
model to the five best-performing baselines (DS,
LFC, CUBAM, VI and EM-MV in Table 8). Each
of these models are trained on the RTE dataset,
after which the least reliable annotation for each
instance is removed. We use the per-instance reli-
ability for our model, the global reliability score of
each annotator for LFC, CUBAM and VI, and the
per-category annotator reliability for DS and EM-
MV as the measure of the reliability of each anno-
tation. For each of these models, we then retrain
the models in Table 8 using the denoised dataset;
the difference in performance can be seen in Ta-
ble 9. We can see that using per-instance reliabil-
ity results in the largest improvement, while only
considering the annotators’ overall reliability may



2881

Method LFC CUBAM VI DS EM-MV Ours
MV -0.2 -0.9 +0.6 -0.2 -0.2 +0.8
DS (Dawid and Skene, 1979) 0 -0.2 +0.1 0 0 +0.6
GLAD (Whitehill et al., 2009) +0.2 0 0 +0.2 -0.3 +0.2
LFC (Raykar et al., 2010) +0.1 -0.1 +0.3 +0.1 +0.1 +0.6
CUBAM (Welinder et al., 2010) +0.3 0 +0.4 +0.3 -0.2 +0.9
Yan et al. (Yan et al., 2010) +1.5 +0.4 +2.3 +1.5 +0.8 +2.5
KOS (Karger et al., 2011) +0.7 +3.9 +11.3 +0.7 +13.4 +17.3
VI (Liu et al., 2012) +0.1 +0.1 +0.1 +0.1 +0.2 +0.6
BCC (Kim and Ghahramani, 2012) +0.3 +0.2 +0.3 +0.3 +0.4 +0.8
MINIMAX (Zhou et al., 2012) +0.3 -0.4 +0.7 +0.3 +0.2 +0.7
MACE (Hovy et al., 2013) +0.2 -0.2 0 +0.2 0 +0.4
CATD (Li et al., 2014a) +0.3 -0.8 -0.2 +0.3 +0.2 +0.3
PM (Li et al., 2014b) +0.9 0 +0.3 +0.9 +0.1 +0.9
EM-MV (Zhang et al., 2014) +0.7 +0.6 +0.7 +0.7 +0.7 +1.1
EM-Opt (Zhang et al., 2014) +0.2 +0.5 +0.2 +0.2 +0.6 +0.7
O-DC-JT (FNN) (full model) +0.1 0 +0.3 +0.1 +0.1 +0.5

Table 9: F1 score improvements after removing the la-
bel produced by the least reliable annotator by using the
estimated overall reliability (LFC, CUBAM, VI, DS,
EM-MV) and per-instance reliability (Ours).

True Entailment False Entailment
Annotator #Cor. Labels Avg. Reliability #Cor. Labels Avg. Reliability Acc.

Top
15

Instances

1 15 95.5 - - 100
2 15 92.6 - - 100
3 10 88.4 3 86.9 86.7
4 11 94.2 2 92.6 86.7
5 8 71.9 2 23.7 66.7

Bottom
15

Instances

1 4 0.1 2 0.1 40
2 1 1.0 8 51.4 60
3 0 9.7 1 13.8 6.6
4 2 28.6 5 63.1 46.7
5 3 22.3 2 23.7 33.3

Table 10: Number of correct labels and average re-
liability for each annotator among the instances with
highest and lowest per-instance reliability on the RTE
dataset.

cause a reduction in performance.
In order to analyse the per-instance reliability

of the human annotators, for each annotator we
rank the instances according to the annotator’s per-
instance reliability. We look at the top 15 and bot-
tom 15 instances, then count how many of them
were correctly labelled (Cor. Labels) as well as the
average reliability on these instances (Avg. Relia-
bility). Table 10 shows the results of five annota-
tors6. It can be seen that each annotator has con-
siderably different reliabilities across instances.

5.5 Training Stability

Pre-training: As discussed in Section 3.2, the
predicted labels produced by a simpler method are
used for pre-training. Although these labels are
not perfect, we assume that our method can still
learn some useful information from them for a bet-
ter starting point than random parameter initialisa-
tion.

EM and Cross Entropy Training: From Ta-
bles 3, 4, 7 and 8, it can be seen that, in most

6For lack of space, we only present the results for 5 of the
164 annotators.

cases, using cross entropy achieved much bet-
ter and more stable performance than the models
learned using EM training. We also noticed that
the objective function would improve when us-
ing cross entropy training, and tended to converge
faster in our experiments—generally within just a
few epochs. Therefore, we recommend to use this
training method in practice.

Early Stopping: When using both EM and
cross entropy training, we found that even if the
objective function improved between iterations,
the label prediction performance would eventually
start to decrease. It is worth to investigate the
reason for this phenomenon. To counteract this
issue we used early stopping, where training is
halted when the objective function does not im-
prove more than 0.001 between iterations. An-
other option is to reduce the maximum number of
outer iterations, e.g. to 20.

6 Conclusion and Future Work

We propose a novel probabilistic model which
learns from noisy labels produced by multiple an-
notators for NLP crowdsourcing tasks by incorpo-
rating a classifier and a reliability estimator. Our
work constitutes the first effort to model the per-
instance reliability of annotators for both binary
and multi-class NLP labelling tasks. We investi-
gate two methods of training our model using the
EM algorithm and cross entropy. Experimental
results on 6 datasets including synthetic and real
datasets demonstrate that our method can not only
capture the per-instance reliability of each anno-
tator, but also obtain better label prediction and
the least reliable annotator detection performance
compared to state-of-the-art baselines.

For future work, we plan to apply our model
to other NLP tasks such as relation extraction and
named entity recognition. We also plan to investi-
gate the use of variational inference (Jordan et al.,
1999) as a means of training our model. Using
variational inference might improve the stability
and performance of our model.

Acknowledgement

We would like to thank the anonymous reviewers
and Paul Thompson for their valuable comments.
Discussions with Austin J. Brockmeier have been
insightful. The work is funded by School of
Computer Science Kilburn Overseas Fees Bursary
from University of Manchester.



2882

References
Lora Aroyo and Chris Welty. 2013. Measuring crowd

truth for medical relation extraction. In AAAI 2013
Fall Symposium on Semantics for Big Data, pages
1–9, Arlington, Virginia.

Thomas Bonald and Richard Combes. 2017. A min-
imax optimal algorithm for crowdsourcing. In Ad-
vances in Neural Information Processing Systems 30
(NIPS), pages 4352–4360. Curran Associates, Inc.

Samuel R. Bowman, Gabor Angeli, Christopher Potts,
and Christopher D. Manning. 2015. A large an-
notated corpus for learning natural language infer-
ence. In Proceedings of the 2015 Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 632–642, Lisbon, Portugal. Asso-
ciation for Computational Linguistics.

America Chambers. 2013. Statistical Models for Text
Classification and Clustering: Applications and
Analysis. Ph.D. thesis, University of California,
Irvine.

Corinna Cortes and Vladimir Vapnik. 1995. Support-
vector networks. Machine Learning, 20(3):273–
297.

Alexander Philip Dawid and Allan M Skene. 1979.
Maximum likelihood estimation of observer error-
rates using the em algorithm. Applied statistics,
pages 20–28.

Gianluca Demartini, Djellel Eddine Difallah, and
Philippe Cudré-Mauroux. 2012. ZenCrowd: lever-
aging probabilistic reasoning and crowdsourcing
techniques for large-scale entity linking. In Pro-
ceedings of the 21st international conference on
World Wide Web (WWW), WWW ’12, pages 469–
478, New York, NY, USA. Association for Comput-
ing Machinery.

Arthur P. Dempster, Nan Laird, and Donald B. Rubin.
1977. Maximum likelihood from incomplete data
via the EM algorithm. Journal of the Royal Statisti-
cal Society, B39:1–38.

Pinar Donmez and Jaime G. Carbonell. 2008. Proac-
tive learning: cost-sensitive active learning with
multiple imperfect oracles. In Proceedings of the
17th ACM Conference on Information and Knowl-
edge Management (CIKM), CIKM ’08, pages 619–
628, New York, NY, USA. Association for Comput-
ing Machinery.

Joseph L Fleiss, Bruce Levin, and Myunghee Cho Paik.
2013. Statistical methods for rates and proportions,
3 edition. John Wiley Sons.

Iryna Gurevych and Jungi Kim, editors. 2013. The
People’s Web Meets NLP: Collaboratively Con-
structed Language Resources. Springer-Verlag
Berlin Heidelberg.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long Short-Term Memory. Neural Computation,
9(8):1735–1780.

Dirk Hovy, Taylor Berg-Kirkpatrick, Ashish Vaswani,
and Eduard Hovy. 2013. Learning whom to trust
with MACE. In Proceedings of the 2013 Conference
of the North American Chapter of the Association
for Computational Linguistics: Human Language
Technologies (NAACL-HLT), pages 1120–1130, At-
lanta, Georgia. Association for Computational Lin-
guistics.

Michael I. Jordan, Zoubin Ghahramani, Tommi S.
Jaakkola, and Lawrence K. Saul. 1999. An intro-
duction to variational methods for graphical models.
Machine Learning, 37(2):183–233.

David R. Karger, Sewoong Oh, and Devavrat Shah.
2011. Iterative learning for reliable crowdsourcing
systems. In J. Shawe-Taylor, R. S. Zemel, P. L.
Bartlett, F. Pereira, and K. Q. Weinberger, editors,
Advances in Neural Information Processing Systems
24 (NIPS), pages 1953–1961. Curran Associates,
Inc.

Hyun-Chul Kim and Zoubin Ghahramani. 2012.
Bayesian classifier combination. In Proceedings of
the Fifteenth International Conference on Artificial
Intelligence and Statistics, volume 22 of Proceed-
ings of Machine Learning Research, pages 619–627,
La Palma, Canary Islands. PMLR.

Diederik P Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In Proceedings
of the International Conference on Learning Rep-
resentations (ICLR), pages 1–13, San Diego, CA,
USA.

Klaus Krippendorff. 1970. Estimating the reliabil-
ity, systematic error and random error of interval
data. Educational and Psychological Measurement,
30(1):61–70.

Maolin Li, Nhung Nguyen, and Sophia Ananiadou.
2017. Proactive learning for named entity recogni-
tion. In BioNLP 2017, pages 117–125, Vancouver,
Canada. Association for Computational Linguistics.

Qi Li, Yaliang Li, Jing Gao, Lu Su, Bo Zhao, Mu-
rat Demirbas, Wei Fan, and Jiawei Han. 2014a. A
confidence-aware approach for truth discovery on
long-tail data. Proceedings of the VLDB Endow-
ment, 8(4):425–436.

Qi Li, Yaliang Li, Jing Gao, Bo Zhao, Wei Fan, and
Jiawei Han. 2014b. Resolving conflicts in heteroge-
neous data by truth discovery and source reliability
estimation. In Proceedings of the 2014 ACM SIG-
MOD International Conference on Management of
Data, SIGMOD ’14, pages 1187–1198, New York,
NY, USA. Association for Computing Machinery.

Xin Li and Dan Roth. 2002. Learning question classi-
fiers. In Proceedings of the 19th International Con-
ference on Computational Linguistics (COLING),

https://www.aaai.org/ocs/index.php/FSS/FSS13/paper/viewFile/7627/7543
https://www.aaai.org/ocs/index.php/FSS/FSS13/paper/viewFile/7627/7543
http://papers.nips.cc/paper/7022-a-minimax-optimal-algorithm-for-crowdsourcing.pdf
http://papers.nips.cc/paper/7022-a-minimax-optimal-algorithm-for-crowdsourcing.pdf
https://doi.org/10.18653/v1/D15-1075
https://doi.org/10.18653/v1/D15-1075
https://doi.org/10.18653/v1/D15-1075
http://mathcs.pugetsound.edu/~alchambers/papers/thesis_final.pdf
http://mathcs.pugetsound.edu/~alchambers/papers/thesis_final.pdf
http://mathcs.pugetsound.edu/~alchambers/papers/thesis_final.pdf
https://doi.org/10.1007/BF00994018
https://doi.org/10.1007/BF00994018
https://www.jstor.org/stable/2346806
https://www.jstor.org/stable/2346806
https://doi.org/10.1145/2187836.2187900
https://doi.org/10.1145/2187836.2187900
https://doi.org/10.1145/2187836.2187900
http://web.mit.edu/6.435/www/Dempster77.pdf
http://web.mit.edu/6.435/www/Dempster77.pdf
https://doi.org/10.1145/1458082.1458165
https://doi.org/10.1145/1458082.1458165
https://doi.org/10.1145/1458082.1458165
https://onlinelibrary.wiley.com/doi/book/10.1002/0471445428
https://www.springer.com/gb/book/9783642350849
https://www.springer.com/gb/book/9783642350849
https://www.springer.com/gb/book/9783642350849
https://doi.org/10.1162/neco.1997.9.8.1735
http://www.aclweb.org/anthology/N13-1132
http://www.aclweb.org/anthology/N13-1132
https://doi.org/10.1023/A:1007665907178
https://doi.org/10.1023/A:1007665907178
http://papers.nips.cc/paper/4396-iterative-learning-for-reliable-crowdsourcing-systems.pdf
http://papers.nips.cc/paper/4396-iterative-learning-for-reliable-crowdsourcing-systems.pdf
http://proceedings.mlr.press/v22/kim12.html
https://arxiv.org/pdf/1412.6980.pdf
https://arxiv.org/pdf/1412.6980.pdf
https://journals.sagepub.com/doi/10.1177/001316447003000105
https://journals.sagepub.com/doi/10.1177/001316447003000105
https://journals.sagepub.com/doi/10.1177/001316447003000105
http://www.aclweb.org/anthology/W17-2314
http://www.aclweb.org/anthology/W17-2314
https://doi.org/10.14778/2735496.2735505
https://doi.org/10.14778/2735496.2735505
https://doi.org/10.14778/2735496.2735505
https://doi.org/10.1145/2588555.2610509
https://doi.org/10.1145/2588555.2610509
https://doi.org/10.1145/2588555.2610509
https://aclweb.org/anthology/C02-1150
https://aclweb.org/anthology/C02-1150


2883

volume 1, pages 1–7, Taipei, Taiwan. Association
for Computational Linguistics.

Qiang Liu, Jian Peng, and Alexander T Ihler.
2012. Variational inference for crowdsourcing. In
F. Pereira, C. J. C. Burges, L. Bottou, and K. Q.
Weinberger, editors, Advances in Neural Informa-
tion Processing Systems 25 (NIPS), pages 692–700.
Curran Associates, Inc.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems 26 (NIPS), pages 3111–3119. Curran Asso-
ciates, Inc.

Vinod Nair and Geoffrey E Hinton. 2010. Rectified
linear units improve restricted boltzmann machines.
In Proceedings of the 27th international conference
on machine learning (ICML-10), pages 807–814.

An Thanh Nguyen, Byron Wallace, Junyi Jessy Li, Ani
Nenkova, and Matthew Lease. 2017. Aggregating
and predicting sequence labels from crowd annota-
tions. In Proceedings of the 55th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers) (ACL), pages 299–309, Van-
couver, Canada. Association for Computational Lin-
guistics.

Massimo Poesio, Jon Chamberlain, and Udo Kr-
uschwitz. 2017. Crowdsourcing. In Nancy Ide and
James Pustejovsky, editors, Handbook of Linguistic
Annotation, pages 277–295. Springer Netherlands,
Dordrecht.

Massimo Poesio, Jon Chamberlain, Udo Kruschwitz,
Livio Robaldo, and Luca Ducceschi. 2013. Phrase
detectives: Utilizing collective intelligence for
internet-scale language resource creation. ACM
Transactions on Interactive Intelligent Systems
(TiiS), 3(1):3:1–3:44.

Sampo Pyysalo, Filip Ginter, Hans Moen, Tapio
Salakoski, and Sophia Ananiadou. 2013. Distribu-
tional semantics resources for biomedical text pro-
cessing. In Proceedings of the Fifth International
Symposium on Languages in Biology and Medicine
(LBM), pages 39–44, Tokyo, Japan.

Vikas C. Raykar, Shipeng Yu, Linda H. Zhao, Ger-
ardo Hermosillo Valadez, Charles Florin, Luca
Bogoni, and Linda Moy. 2010. Learning from
crowds. The Journal of Machine Learning Re-
search, 11(Apr):1297–1322.

Filipe Rodrigues, Francisco Pereira, and Bernardete
Ribeiro. 2014. Sequence labeling with multiple an-
notators. Machine Learning, 95(2):165–181.

Aashish Sheshadri and Matthew Lease. 2013.
SQUARE: a benchmark for research on computing
crowd consensus. In Proceedings of the 1st AAAI
Conference on Human Computation (HCOMP),
pages 156–164, Palm Springs, CA, USA. The
AAAI Press.

Rion Snow, Brendan O’Connor, Daniel Jurafsky, and
Andrew Ng. 2008. Cheap and fast – but is it
good? evaluating non-expert annotations for nat-
ural language tasks. In Proceedings of the 2008
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 254–263, Hon-
olulu, Hawaii. Association for Computational Lin-
guistics.

Seiya Tokui, Kenta Oono, Shohei Hido, and Justin
Clayton. 2015. Chainer: a next-generation open
source framework for deep learning. In Proceed-
ings of Workshop on Machine Learning Systems
(LearningSys) in The Twenty-ninth Annual Con-
ference on Neural Information Processing Systems
(NIPS), pages 1–6.

Xin Wang and Jinbo Bi. 2017. Bi-convex optimization
to learn classifiers from multiple biomedical anno-
tations. IEEE/ACM Transactions on Computational
Biology and Bioinformatics, 14(3):564–575.

Peter Welinder, Steve Branson, Pietro Perona, and
Serge J Belongie. 2010. The multidimensional wis-
dom of crowds. In Advances in Neural Information
Processing Systems 23 (NIPS), pages 2424–2432.
Curran Associates, Inc.

Jacob Whitehill, Ting-fan Wu, Jacob Bergsma,
Javier R. Movellan, and Paul L. Ruvolo. 2009.
Whose vote should count more: Optimal integration
of labels from labelers of unknown expertise. In Ad-
vances in Neural Information Processing Systems 22
(NIPS), pages 2035–2043. Curran Associates, Inc.

Yan Yan, Romer Rosales, Glenn Fung, Mark Schmidt,
Gerardo Hermosillo, Luca Bogoni, Linda Moy, and
Jennifer Dy. 2010. Modeling annotator expertise:
Learning when everybody knows a bit of something.
In Proceedings of the Thirteenth International Con-
ference on Artificial Intelligence and Statistics, vol-
ume 9 of Proceedings of Machine Learning Re-
search, pages 932–939, Chia Laguna Resort, Sar-
dinia, Italy. PMLR.

Yan Yan, Rómer Rosales, Glenn Fung, Ramanathan
Subramanian, and Jennifer Dy. 2014. Learning from
multiple annotators with varying expertise. Machine
Learning, 95(3):291–327.

Yuchen Zhang, Xi Chen, Denny Zhou, and Michael I
Jordan. 2014. Spectral methods meet EM: A prov-
ably optimal algorithm for crowdsourcing. In Ad-
vances in Neural Information Processing Systems 27
(NIPS), pages 1260–1268. Curran Associates, Inc.

Denny Zhou, Sumit Basu, Yi Mao, and John C. Platt.
2012. Learning from the wisdom of crowds by min-
imax entropy. In F. Pereira, C. J. C. Burges, L. Bot-
tou, and K. Q. Weinberger, editors, Advances in
Neural Information Processing Systems 25 (NIPS),
pages 2195–2203. Curran Associates, Inc.

http://papers.nips.cc/paper/4627-variational-inference-for-crowdsourcing.pdf
http://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf
http://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf
http://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf
https://dl.acm.org/citation.cfm?id=3104425
https://dl.acm.org/citation.cfm?id=3104425
http://aclweb.org/anthology/P17-1028
http://aclweb.org/anthology/P17-1028
http://aclweb.org/anthology/P17-1028
https://doi.org/10.1007/978-94-024-0881-2_10
https://doi.org/10.1145/2448116.2448119
https://doi.org/10.1145/2448116.2448119
https://doi.org/10.1145/2448116.2448119
http://bio.nlplab.org/pdf/pyysalo13literature.pdf
http://bio.nlplab.org/pdf/pyysalo13literature.pdf
http://bio.nlplab.org/pdf/pyysalo13literature.pdf
http://dl.acm.org/citation.cfm?id=1756006.1859894
http://dl.acm.org/citation.cfm?id=1756006.1859894
https://doi.org/10.1007/s10994-013-5411-2
https://doi.org/10.1007/s10994-013-5411-2
http://ir.ischool.utexas.edu/square/documents/sheshadri.pdf
http://ir.ischool.utexas.edu/square/documents/sheshadri.pdf
http://www.aclweb.org/anthology/D08-1027
http://www.aclweb.org/anthology/D08-1027
http://www.aclweb.org/anthology/D08-1027
http://learningsys.org/papers/LearningSys_2015_paper_33.pdf
http://learningsys.org/papers/LearningSys_2015_paper_33.pdf
https://doi.org/10.1109/TCBB.2016.2576457
https://doi.org/10.1109/TCBB.2016.2576457
https://doi.org/10.1109/TCBB.2016.2576457
http://papers.nips.cc/paper/4074-the-multidimensional-wisdom-of-crowds.pdf
http://papers.nips.cc/paper/4074-the-multidimensional-wisdom-of-crowds.pdf
http://papers.nips.cc/paper/3644-whose-vote-should-count-more-optimal-integration-of-labels-from-labelers-of-unknown-expertise.pdf
http://papers.nips.cc/paper/3644-whose-vote-should-count-more-optimal-integration-of-labels-from-labelers-of-unknown-expertise.pdf
http://proceedings.mlr.press/v9/yan10a.html
http://proceedings.mlr.press/v9/yan10a.html
https://doi.org/10.1007/s10994-013-5412-1
https://doi.org/10.1007/s10994-013-5412-1
http://papers.nips.cc/paper/5431-spectral-methods-meet-em-a-provably-optimal-algorithm-for-crowdsourcing.pdf
http://papers.nips.cc/paper/5431-spectral-methods-meet-em-a-provably-optimal-algorithm-for-crowdsourcing.pdf
http://papers.nips.cc/paper/4490-learning-from-the-wisdom-of-crowds-by-minimax-entropy.pdf
http://papers.nips.cc/paper/4490-learning-from-the-wisdom-of-crowds-by-minimax-entropy.pdf

