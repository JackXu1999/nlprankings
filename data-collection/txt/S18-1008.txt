



















































AMORE-UPF at SemEval-2018 Task 4: BiLSTM with Entity Library


Proceedings of the 12th International Workshop on Semantic Evaluation (SemEval-2018), pages 65–69
New Orleans, Louisiana, June 5–6, 2018. ©2018 Association for Computational Linguistics

AMORE-UPF at SemEval-2018 Task 4: BiLSTM with Entity Library

Laura Aina∗ Carina Silberer∗ Ionut-Teodor Sorodoc∗

Matthijs Westera∗ Gemma Boleda

Universitat Pompeu Fabra
Barcelona, Spain

{firstname.lastname}@upf.edu

Abstract

This paper describes our winning contribution
to SemEval 2018 Task 4: Character Identifi-
cation on Multiparty Dialogues. It is a simple,
standard model with one key innovation, an en-
tity library. Our results show that this innova-
tion greatly facilitates the identification of in-
frequent characters. Because of the generic na-
ture of our model, this finding is potentially rel-
evant to any task that requires effective learn-
ing from sparse or unbalanced data.

1 Introduction

SemEval 2018 Task 4 is an entity linking task on
multiparty dialogue.1 It consists in predicting the
referents of nominals that refer to a person, such
as she, mom, Judy – henceforth mentions. The set
of possible referents is given beforehand, as well
as the set of mentions to resolve. The dataset used
in this task is based on Chen and Choi (2016) and
Chen et al. (2017), and consists of dialogue from
the TV show Friends in textual form.

Our main interest is whether deep learning mod-
els for tasks like entity linking can benefit from
having an explicit entity library, i.e., a component
of the neural network that stores entity represen-
tations learned during training. To that end, we
add such a component to an otherwise relatively
basic model – a bidirectional LSTM (long short-
term memory; Hochreiter and Schmidhuber 1997),
the standard neural network model for sequential
data like language. Training and evaluating this

∗denotes equal contribution.
1https://competitions.codalab.org/

competitions/17310

model on the task shows that the entity library is
beneficial in the case of infrequent entities.2

2 Related Work

Previous entity linking tasks concentrate on linking
mentions to Wikipedia pages (Bunescu and Paşca
2006; Mihalcea and Csomai 2007 and much sub-
sequent work; for a recent approach see Francis-
Landau et al. 2016). By contrast, in the present
task (based on Chen and Choi 2016; Chen et al.
2017) only a list of entities is given, without any
associated encyclopedic entries. This makes the
task more similar to the way in which a human
audience might watch the TV show, in that they are
initially unfamiliar with the characters. What also
sets the present task apart from most previous tasks
is its focus on multiparty dialogue (as opposed to,
typically, newswire articles).

A task that is closely related to entity linking is
coreference resolution, i.e., the task of clustering
mentions that refer to the same entity (e.g., the
CoNLL shared task of Pradhan et al. 2011). Since
mention clusters essentially correspond to entities
(an insight central to the approaches to coreference
in Haghighi and Klein 2010; Clark and Manning
2016), the present task can be regarded as a type
of coreference resolution, but one where the set of
referents to choose from is given beforehand.

Since our main aim is to test the benefits of
having an entity library, in other respects our
model is kept more basic than existing work
both on entity linking and on coreference reso-

2Source code for our model and for the training procedure
is published on https://github.com/amore-upf/
semeval2018-task4.

65



lution (e.g., the aforementioned approaches, as
well as Wiseman et al. 2016; Lee et al. 2017,
Francis-Landau et al. 2016). For instance, we
avoid feature engineering, focusing instead on the
model’s ability to learn meaningful entity repre-
sentations from the dialogue itself. Moreover, we
deviate from the common strategy to entity linking
of incorporating a specialized coreference resolu-
tion module (e.g., Chen et al. 2017).

3 Model Description

We approach the task of character identification
as one of multi-class classification. Our model is
depicted in Figure 1, with inputs in the top left and
outputs at the bottom. In a nutshell, our model is
a bidirectional LSTM (long short-term memory,
Hochreiter and Schmidhuber 1997) that processes
the dialogue text and resolves mentions, through a
comparison between the LSTM’s hidden state (for
each mention) to vectors in a learned entity library.

The model is given chunks of dialogue, which
it processes token by token. The ith token ti and
its speakers Si (typically a singleton set) are repre-
sented as one-hot vectors, embedded via two dis-
tinct embedding matrices (Wt and Ws, respec-
tively) and finally concatenated to form a vector xi
(Eq. 1; see also Figure 1). In case Si contains
multiple speakers, their embeddings are summed.

xi = Wt ti ‖
∑

s∈Si
Ws s (1)

We apply an activation function f (= tanh). The
hidden state

−→
hi of a unidirectional LSTM for the

ith input is recursively defined as a combination of
that input with the LSTM’s previous hidden state−→
hi−1. For a bidirectional LSTM, the hidden state
hi is a concatenation of the hidden states

−→
hi and←−

hi of two unidirectional LSTMs which process
the data in opposite directions (Eq. 2; see also
Figure 1). In principle, this enables a bidirectional
LSTM to represent the entire dialogue with a focus
on the current input, including for instance its
relevant dependencies on the context.

hi = BiLSTM(f(xi),
−→
hi−1,

←−
hi+1) (2)

In the model, learned representations of each
entity are stored in the entity library E ∈ RN×k
(see Figure 1): E is a matrix which represents each
of N entities through a k-dimensional vector, and
whose values are updated (only) during training.

 

Ross
Rachel

guy
+

tanh

...

softmax

Ws

Wt
Ws

Ross & Rachel: the
Ross & Rachel: guy
Ross & Rachel: was

{

EEntity library:

...

(fictional example)

...

...

Inputs:

Class scores:

e

o

BiLSTM: hihi-1 hi+1

i

i

xi

Wo
cos

...
...

Figure 1: The AMORE-UPF model (bias not depicted).

For every token ti that is tagged as a mention,3 we
map the corresponding hidden state hi to a vector
ei ∈ R1×k. This extracted representation is used
to retrieve the (candidate) referent of the mention
from the entity library: The similarity of ei to
each entity representation stored in E is computed
using cosine, and softmax is then applied to the
resulting similarity profile to obtain a probability
distribution oi ∈ [0, 1]1×N over entities (‘class
scores’ in Figure 1):

oi = softmax(cosine(E, (Wo hi + b)︸ ︷︷ ︸
ei

) (3)

At testing time, the model’s prediction ĉi for the
ith token is the entity with highest probability:

ĉi = argmax(oi) (4)

We train the model with backpropagation, using
negative log-likelihood as loss function. Besides
the BiLSTM parameters, we optimize Wt, Ws,
Wo, E and b. We refer to this model as AMORE-
UPF, our team name in the SemEval competition.
Note that, in order for this architecture to be suc-
cessful, ei needs to be as similar as possible to the
entity vector of the entity to which mention ti refers.
Indeed, the mapping Wo should effectively special-
ize in “extracting” entity representations from the
hidden state because of the way its output ei is used
in the model—to do entity retrieval. Our entity re-
trieval mechanism is inspired by the attention mech-
anism of Bahdanau et al. (2016), that has been used
in previous work to interact with an external mem-
ory (Sukhbaatar et al., 2015; Boleda et al., 2017).

3For multi-word mentions this is done only for the last
token in the mention.

66



JOEY TRIBBIANI (183):
”. . . see Ross, because I think you love her .”

335 183 335 306

Figure 2: Example of the data provided for the Se-
mEval 2018 Task 4. It shows the speaker (first line) of
the utterance (second line) and the ids of the entities to
which the target mentions (underlined) refer (last line).

To assess the contribution of the entity library,
we compare our model to a similar architecture
which does not include it (NoEntLib). This model
directly applies softmax to a linear mapping of the
hidden state (Eq. 5, replacing Eq. 3 above).

oi = softmax(Wo hi + b) (5)

4 Experimental Setup

Data We use the training and test data provided
for SemEval 2018 Task 4, which span the first
two seasons of the TV show Friends, divided into
scenes (train: 374 scenes from 47 episodes; test:
74 scenes from 40 episodes).4 In total, the train-
ing and test data contain 13,280 and 2,429 nomi-
nal mentions (e.g., Ross, I ; Figure 2), respectively,
which are annotated with the ID of the entity to
which they refer (e.g., 335, 183). The utterances
are further annotated with the name of the speaker
(e.g., JOEY TRIBBIANI). Overall there are 372 enti-
ties in the training data (test data: 106). Our models
do not use any of the provided automatic linguistic
annotations, such as PoS or named entity tags.

We additionally used the publicly available 300-
dimensional word vectors that were pre-trained on
a Google News corpus with the word2vec Skip-
gram model (Mikolov et al., 2013).5

Parameter settings Using 5-fold cross-
validation on the training data, we performed
a random search over the hyperparameters and
chose those which yielded the best mean F1-score.
Specifically, our submitted model is trained in
batch mode using the Adam optimizer (Kingma
and Ba, 2014) with a learning rate of 0.0005. Each
batch covers 24 scenes, which are given to the
model in chunks of 757 tokens. The token em-
beddings (Wt) are initialized with the word2vec
vectors. Dropout rates of 0.008 and 0.0013 are
applied on the input xi and hidden layer hi of
the LSTM, respectively. The size of hi is set to

4The organizers also provided data divided by episodes
rather than scenes, which we didn’t use.

5The word vectors are available at https://code.
google.com/archive/p/word2vec/.

all entities main entities
Models F1 Acc F1 Acc
AMORE-UPF 41.1∗∗ 74.7∗∗ 79.4 77.2
NoEntLib 26.4 71.6 79.5 77.5

Table 1: Results obtained for the submitted AMORE-
UPF model and a variant of it that does not use an entity
library (NoEntLib). Best results are in boldface. Differ-
ences with respect to the 2nd row marked by ‘**’ are
significant at the 0.001 probability level (see text).

Figure 3: Distribution of all 2, 429 target mentions in
the test data in terms of their part-of-speech.

459 units, the embeddings of the entity library E
and speakers Ws are set to k = 134 dimensions.

Other configurations, including randomly initial-
ized token embeddings, weight sharing between
E and Ws, self-attention (Bahdanau et al., 2016)
on the input layer, a uni-directional LSTM, and
rectifier or linear activation function f on the input
embeddings did not improve performance.

For the final submission of the answers for the
test data, we created an ensemble model by averag-
ing the output (Eq. 3) of the five models trained on
the different folds.

5 Results

Two evaluation conditions were defined by the orga-
nizers – all entities and main entities – with macro-
average F1-score and label accuracy as the official
metrics, and macro-average F1-score in the all
entities condition applied to the leaderboard. The
all entities evaluation has 67 classes: 66 for entities
that are mentioned at least 3 times in the test set
and one grouping all others. The main entities eval-
uation has 7 classes, 6 for the main characters and
one for all the others. Among all four participating
systems in this SemEval task our model achieved
the highest score on the all entities evaluation, and
second-highest on the main entities evaluation.

Table 1 gives our results in the two evaluations,
comparing the models described in Section 4.
While both models perform on a par on main

67



Figure 4: F1-score of the models on all entities depend-
ing on the part-of-speech of the target mentions.

entities, AMORE-UPF outperforms NoEntLib by
a substantial margin when all characters are to
be predicted (+15 points in F1-score, +3 points
in accuracy; Table 1).6 The difference between
the models with/without an entity library are
statistically significant based on approximate
randomization tests (Noreen, 1989), with the
significance level p < 0.001. This shows that the
use of an entity library can be beneficial for the
linking of rarely mentioned characters.

Figure 3 shows that most of the target mentions
in the test data fall into one of five grammatical
categories. The dataset contains mostly pronouns
(83%), with a very high percentage of first person
pronouns (44%). Figures 4 and 5 present the accu-
racy and F1-score which the two models described
above obtain on all entities for different categories
of mentions. The entity library is beneficial when
the mention is a first person pronoun or a proper
noun (with an increase of 30 points in F1-score for
both categories; Figure 4), and closer inspection
revealed that this effect was larger for rare entities.

6 Discussion

The AMORE-UPF model consists of a bidirec-
tional LSTM linked to an entity library. Compared
to an LSTM without entity library, NoEntLib, the
AMORE-UPF model performs particularly well on
rare entities, which explains its top score in the all
entities condition of SemEval 2018 Task 4. This
finding is encouraging, since rare entities are espe-
cially challenging for the usual approaches in NLP,
due to the scarcity of information about them.

We offer the following explanation for this bene-
ficial effect of the entity library, as a hypothesis for

6The mean difference between the single models (trained
on a single fold) and the ensemble AMORE-UPF is between
-1.3 points (accuracy main entities, std = 1.3) and -4.2 points
(F1-score all entities, std = 1.3).

Figure 5: Aaccuracy of the models on all entities de-
pending on the part-of-speech of the target mentions.

future work. Having an entity library requires the
LSTM of our model to output some representation
of the mentioned entity, as opposed to outputting
class scores more or less directly as in the variant
NoEntLib. Outputting a meaningful entity repre-
sentation is particularly easy in the case of first
person pronouns and nominal mentions (where the
effect of the entity library appears to reside; Fig-
ure 4): the LSTM can learn to simply forward the
speaker embedding unchanged in the case of pro-
noun I, and the token embedding in the case of
nominal mentions. This strategy does not discrim-
inate between frequent and rare entities; it works
for both alike. We leave further analyses required
to test this potential explanation for future work.

Future work may also reveal to what extent the
induced entity representations may be useful in oth-
ers, to what extent they encode entities’ attributes
and relations (cf. Gupta et al. 2015), and to what
extent a module like our entity library can be em-
ployed elsewhere, in natural language processing
and beyond.

Acknowledgments

This project has received funding from the Euro-
pean Research Council (ERC) under the European
Unions Horizon 2020 research and innovation pro-
gramme (grant agreement No 715154), and from
the Spanish Ramón y Cajal programme (grant RYC-
2015-18907). We are grateful to the NVIDIA Cor-
poration for the donation of GPUs used for this
research. We are also very grateful to the Pytorch
developers. This paper reflects the authors’ view
only, and the EU is not responsible for any use that
may be made of the information it contains.

68



References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-

gio. 2016. Neural Machine Translation by Jointly
Learning to Align and Translate. Computing Re-
search Repository, abs/1409.0473v7.

Gemma Boleda, Sebastian Padó, Nghia The Pham, and
Marco Baroni. 2017. Living a Discrete Life in a
Continuous World: Reference in Cross-modal En-
tity Tracking. In IWCS 2017 — 12th International
Conference on Computational Semantics — Short
papers.

Razvan Bunescu and Marius Paşca. 2006. Using Ency-
clopedic Knowledge for Named Entity Disambigua-
tion. In 11th conference of the European Chapter of
the Association for Computational Linguistics.

Henry Y. Chen, Ethan Zhou, and Jinho D. Choi. 2017.
Robust Coreference Resolution and Entity Linking
on Dialogues: Character Identification on TV Show
Transcripts. In Proceedings of the 21st Confer-
ence on Computational Natural Language Learning
(CoNLL 2017), pages 216–225.

Yu-Hsin Chen and Jinho D Choi. 2016. Character Iden-
tification on Multiparty Conversation: Identifying
Mentions of Characters in TV Shows. In Proceed-
ings of the 17th Annual Meeting of the Special In-
terest Group on Discourse and Dialogue, pages 90–
100.

Kevin Clark and Christopher D. Manning. 2016. Im-
proving Coreference Resolution by Learning Entity-
Level Distributed Representations. In Proceedings
of the 54th Annual Meeting of the Association for
Computational Linguistics (Volume 1: Long Papers),
pages 643–653.

Matthew Francis-Landau, Greg Durrett, and Dan Klein.
2016. Capturing Semantic Similarity for Entity
Linking with Convolutional Neural Networks. Com-
puting Research Repository, abs/1604.00734.

Abhijeet Gupta, Gemma Boleda, Marco Baroni, and
Sebastian Padó. 2015. Distributional Vectors En-
code Referential Attributes. In Proceedings of the
2015 Conference on Empirical Methods in Natural
Language Processing, pages 12–21.

Aria Haghighi and Dan Klein. 2010. Coreference Res-
olution in a Modular, Entity-Centered Model. In Hu-
man Language Technologies: The 2010 Annual Con-
ference of the North American Chapter of the Associ-
ation for Computational Linguistics, pages 385–393.
Association for Computational Linguistics.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long Short-Term Memory. Neural Computation,
9(8):1735–1780.

Diederik P. Kingma and Jimmy Ba. 2014. Adam: A
Method for Stochastic Optimization. Computing Re-
search Repository, abs/1412.6980.

Kenton Lee, Luheng He, Mike Lewis, and Luke
Zettlemoyer. 2017. End-to-End Neural Corefer-
ence Resolution. Computing Research Repository,
abs/1707.07045.

Rada Mihalcea and Andras Csomai. 2007. Wikify!:
Linking Documents to Encyclopedic Knowledge. In
Proceedings of the sixteenth ACM Conference on In-
formation and Knowledge Management, pages 233–
242.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg Cor-
rado, and Jeffrey Dean. 2013. Distributed Represen-
tations of Words and Phrases and Their Composi-
tionality. In Proceedings of the 26th International
Conference on Neural Information Processing Sys-
tems - Volume 2, pages 3111–3119.

E.W. Noreen. 1989. Computer-Intensive Methods for
Testing Hypotheses: An Introduction. Wiley.

Sameer Pradhan, Lance Ramshaw, Mitchell Marcus,
Martha Palmer, Ralph Weischedel, and Nianwen
Xue. 2011. CoNLL-2011 Shared Task: Modeling
Unrestricted Coreference in OntoNotes. In Proceed-
ings of the Fifteenth Conference on Computational
Natural Language Learning: Shared Task, pages 1–
27. Association for Computational Linguistics.

Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston,
and Rob Fergus. 2015. End-To-End Memory Net-
works. arXiv, pages 1–11.

Sam Wiseman, Alexander M Rush, and Stuart M
Shieber. 2016. Learning Global Features for Coref-
erence Resolution. Computing Research Repository,
abs/1604.03035.

69


