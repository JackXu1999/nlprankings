



















































Improving Coverage and Runtime Complexity for Exact Inference in Non-Projective Transition-Based Dependency Parsers


Proceedings of NAACL-HLT 2018, pages 420–425
New Orleans, Louisiana, June 1 - 6, 2018. c©2018 Association for Computational Linguistics

Improving Coverage and Runtime Complexity for Exact Inference in
Non-Projective Transition-Based Dependency Parsers

Tianze Shi
Cornell University

tianze@cs.cornell.edu

Carlos Gómez-Rodríguez
Universidade da Coruña

carlos.gomez@udc.es

Lillian Lee
Cornell University

llee@cs.cornell.edu

Abstract
We generalize Cohen, Gómez-Rodríguez,
and Satta’s (2011) parser to a family of
non-projective transition-based dependency
parsers allowing polynomial-time exact infer-
ence. This includes novel parsers with better
coverage than Cohen et al. (2011), and even a
variant that reduces time complexity to Opn6q,
improving on prior bounds. We hope that this
piece of theoretical work inspires design of
novel transition systems with better coverage
and better run-time guarantees.

1 Introduction

Non-projective dependency trees are those con-
taining crossing edges. They account for 12.59%
of all training sentences in the annotated Uni-
versal Dependencies (UD) 2.1 data (Nivre et al.,
2017), and more than 20% in each of 10 languages
among the 54 in UD 2.1 with training treebanks.
But modeling non-projectivity is computationally
costly (McDonald and Satta, 2007).

Some transition-based dependency parsers have
deduction systems that use dynamic programming
to enable exact inference in polynomial time and
space (Huang and Sagae, 2010; Kuhlmann et al.,
2011). For non-projective parsing, though, the
only tabularization of a transition-based parser is,
to our knowledge, that of Cohen et al. (2011).
They define a deduction system for (an isomor-
phic variant of) Attardi’s (2006) transition sys-
tem, which covers a subset of non-projective trees.
The exact inference algorithm runs in Opn7q time,
where n denotes sentence length.

In this paper, we show how Cohen et al.’s (2011)
system can be modified to generate a new fam-
ily of deduction systems with corresponding tran-
sition systems. In particular, we present three
novel variants of the degree-2 Attardi parser, sum-
marized in Fig. 1 (our technique can also be ap-
plied to generalized Attardi (2006) systems; see

§3.2). The first two bring non-projective cover-
age for UD 2.1 to as high as 95.99% by adding
extra transitions, and yet retain the same time
complexity. The third reduces time complex-
ity for exact inference to Opn6q and space com-
plexity from Opn5q to Opn4q, while still improv-
ing empirical coverage from 87.24% to 93.16%.1

Code and full statistics for all treebanks can
be found at https://github.com/tzshi/
nonproj-dp-variants-naacl2018.

These theoretical improvements are a step to-
wards making recent state-of-the-art results in
transition-based parsing with exact inference (Shi
et al., 2017) extensible to practical non-projective
parsing, by exemplifying the design of transi-
tion systems with better coverage on highly non-
projective datasets and, for one variant, bringing
the runtime complexity one level closer to feasi-
bility.

2 Transition-based Parsing

We first introduce necessary definitions and nota-
tion.

2.1 A General Class of Transition Systems

A transition system is given by a 4-tuple
pC, T, cs, Cτ q, where C is a set of configurations,
T is a set of transition functions between config-
urations, cs is an initialization function mapping
an input sentence to an initial configuration, and
Cτ Ă C defines a set of terminal configurations.

1Faster exact inference algorithms have been defined for
some sets of mildly non-projective trees (e.g. Pitler et al.
(2013); see Gómez-Rodríguez (2016) for more), but lack an
underlying transition system. Having one has the practical
advantage of allowing generative models, as in Cohen et al.
(2011), and transition-based scoring functions, which have
yielded good projective-parsing results (Shi et al., 2017); plus
the theoretical advantage of providing a single framework
supporting greedy, beam-search, and exact inference.

420



System Reduce Transitions
Non-proj.
Coverage

Time
Complexity

Max.
Degree

Attardi (2006) O6 O5 O4 >4ê Ú 87.24% Opn7q 2

Var. 1: ALLDEG1 O6 O5 O4 >4ê Ú 93.32% Opn7q 2

Var. 2: ALL O6 O5 O4 >4ê Ú 95.99% Opn7q 3

Var. 3: ALLs0s1 O6 O5 O4 >4ê ÚO4 93.16% Opppn6qqq 2
stack buffer

Figure 1: Attardi’s (2006) transition system of degree 2 and our variants. Solid arrows denote the inven-
tory of reduce transitions; each arrow points from the head to the modifier of the edge created by that
transition. The degree of a transition is the distance between the head and modifier. Green highlights
the single degree-3 transition. Thick arrows and gray dotted arrows represent additional and deleted
transitions with respect to the original Attardi (2006) system. Coverage refers to the percentage of non-
projective sentences (a total of 76,084 extracted from 604,273 training sentences in UD 2.1) that the
systems are able to handle.

We employ a tripartite representation for con-
figurations: pσ, β, Aq, where the three elements
are as follows. σ and β are disjoint lists called
the stack and buffer, respectively. Each depen-
dency arc ph,mq in the resolved arcs set A has
head h and modifier m. For a length-n input
sentence w, the initial configuration is cspwq “
prs, r0, 1, ..., ns, Hq where the 0 in the initial buffer
denotes a special node representing the root of the
parse tree. All terminal configurations have an
empty buffer and a stack containing only 0.

Indexing from 0, we write si and bj to denote
item i on the stack (starting from the right) and
item j on the buffer (from the left), respectively.
We use vertical bars to separate different parts of
the buffer or stack. For example, when concerned
with the top three stack items and the first item on
the buffer, we may write σ|s2|s1|s0 and b0|β.

2.2 Attardi’s (2006) System

We now introduce the widely-used Attardi (2006)
system, which includes transitions that create arcs
between non-consecutive subtrees, thus allowing it
to produce some non-projective trees. To simplify
exposition, here we present Cohen et al.’s (2011)
isomorphic version.

The set of transitions consists of a shift transi-
tion (sh) and four reduce transitions (re). A shift
moves the first buffer item onto the stack:

shrpσ, b0|β,Aqs “ pσ|b0, β, Aq.
A reduce transition reh,m creates a dependency

arc between h (head) and m (modifier) and re-
duces m. For example,

res0,s1rpσ|s1|s0, β, Aqs “ pσ|s0, β, A Y tps0, s1quq .
Row 1 of Fig. 1 depicts the four Attardi reduces.

The distance between h and m in a reh,m tran-
sition is called its degree. A system limited to
degree-1 transitions can only parse projective sen-
tences. As shown in Fig. 1, Attardi’s (2006)
system has two degree-2 transitions (res0,s2 and
res2,s0) that allow it to cover 87.24% of the non-
projective trees in UD 2.1. More generally, an At-
tardi system of degree D adds res0,sD and resD,s0
to the system of degree D ´ 1.
3 Improving Coverage

A key observation is that a degree-D Attardi sys-
tem does not contain all possible transitions of
degree within D. Since prior empirical work
has ascertained that transition systems using more
transitions with degree greater than 1 can han-
dle more non-projective treebank trees (Attardi,
2006; Gómez-Rodríguez, 2016), we hypothesize
that adding some of these “missing” reduce transi-
tions into the system’s inventory should increase
coverage. The challenge is to simultaneously

421



maintain run-time guarantees, as there exists a
known trade-off between coverage and complex-
ity (Gómez-Rodríguez, 2016). We want to use
Cohen et al.’s (2011)’s exact-inference algorithm
for Attardi-based degree-D non-projective depen-
dency parsing systems, which was previously ana-
lyzed as having Opn3D`1q time complexity.2 Our
contribution is systems that improve the degree-2
Attardi (2006) system’s non-projective coverage,
and yet (i) one has degree 3 but still the same
Opn7q runtime as Cohen et al. (2011), rather than
Opn3¨3`1q; and (ii) another has degree 2 but bet-
ter runtime than Cohen et al.’s (2011) system.

Here, we first sketch the existing exact inference
algorithm,3 and then present our variants.

3.1 Cohen et al.’s (2011) Exact Inference
The main idea of the algorithm is to group tran-
sition sequences into equivalence classes and con-
struct longer sequences from shorter ones. For-
mally, for m ě 1, Cohen et al. (2011) define
a length-m computation as a sequence of m ap-
plications of transitions to configurations: c0

t1ÝÑ
c1 ¨ ¨ ¨ tmÝÑ cm, where ti P T and tipci´1q “ ci
for i P 1..m. As depicted in Fig. 2, a length-
m I-computation rh1, i, h2, h3, js is any length-m
computation where (1) c0 “ pσ|h1, i|β, Aq and
cm “ pσ|h2|h3, j|β1, A1q for some σ, β, β1, A,
and A1; and (2) for all k P 1..m, ck’s stack has σ
as base and length at least |σ| ` 2. Only condition
(1) is relevant to this paper:4 it states that the net
effect of an I-computation is to replace the right-
most item h1 on the stack with items h2 and h3,
while advancing the buffer-start from i to j.

The dynamic programming algorithm is speci-
fied as a deduction system, where each transition
corresponds to a deduction rule. The shift rule is:

sh :
rh1, i, h2, h3, js

rh3, j, h3, j, j ` 1s .

Each reduce rule combines two I-computations
into a larger I-computation, e.g. (see Fig. 3):

res0,s1 :
rh1, i, h2, h3, ks rh3, k, h4, h5, js

rh1, i, h2, h5, js ,
2While Opn7q or Opn10q is not practical, the result is

still impressive, since the search space is exponential. Cohen
et al. (2011) were inspired by Huang and Sagae’s (2010) and
Kuhlmann et al.’s (2011) dynamic-programming approach
for projective systems.

3See Cohen et al. (2011) for full description.
4Condition (2) is used for proving completeness of the de-

duction system (Cohen et al., 2011).

Figure 2: From Cohen et al. (2011, Fig. 2):
schematic of I-computation rh1, i, h2, h3, js.

Figure 3: Illustration of deduction rule res0,s1 .

with the side condition that h4 modifies h5.5 Other
reduce transitions have similar deduction rules,
with the same two premises, but a different con-
clusion depending on the reduced stack item. As
an illustration:

res2,s0 :
rh1, i, h2, h3, ks rh3, k, h4, h5, js

rh1, i, h2, h4, js .

The goal of deduction is to produce the I-
computation rϵ, 0, ϵ, 0, ϵs, using the shift and re-
duce deduction rules starting from the axiom
rϵ, 0, ϵ, 0, 1s, corresponding to the first and manda-
tory shift transition moving the root node from
buffer to stack. ϵ stands for an empty stack or
buffer. As analyzed by Cohen et al. (2011), di-
rect tabularization for this deduction system takes
Opn5q space and Opn8q time. With adaptation
of the “hook trick” described in Eisner and Satta
(1999), we can reduce the running time to Opn7q.
3.2 Our New Variants
In this section, we modify Cohen et al.’s (2011) set
of reduce deduction rules to improve coverage or

5This side condition can be interpreted as a grammar rule
(for a recognizer) or as an edge to be scored and added to the
parse tree (for a parser).

422



time complexity. Since each such deduction rule
corresponds to a reduce transition, each revision to
the deduction system yields a variant of Attardi’s
(2006) parser. In other words, generalization of
the deduction system gives rise to a family of non-
projective transition-based dependency parsers.

We first explain why there are exactly nine
reduce transitions R “ tres0,s1 , res1,s0 , res0,s2 ,
res2,s0 , res1,s2 , res2,s1 , reb0,s0 , reb0,s1 , reb0,s2u that
can be used in Cohen et al.’s (2011) exact infer-
ence algorithm, without allowing a reduction with
head bi for i ě 1.6 (Note that Cohen et al.’s
(2011) reduce rules are precisely the first four el-
ements of R.) From Fig. 3 we infer that the con-
catenation of I-computations rh1, i, h2, h3, ks and
rh3, k, h4, h5, js yields a configuration of the form
pσ|h2|h4|h5, j|β,Aq. For the application of a re-
duce rule to yield a valid I-computation, by condi-
tion (1) of the I-computation definition, first, the
head and modifier must be selected from the “ex-
posed” elements h2, h4, h5, and j, corresponding
to s2, s1, s0, b0, respectively; and second, the mod-
ifier can only come from the stack. R is precisely
the set of rules satisfying these criteria. Further,
every reduce transition from R is compatible with
Eisner and Satta’s (1999) “hook trick”. This gives
us the satisfactory result that the Opn7q running
time upper bound still holds for transitions in R,
even though one of them has degree 3.

Next, we consider three notable variants within
the family of R-based non-projective transition-
based dependency parsers. They are given in
Fig. 1, along with their time complexities and em-
pirical coverage statistics. The latter is computed
using static oracles (Cohen et al., 2012) on the
UD 2.1 dataset (Nivre et al., 2017).7 We report
the global coverage over the 76,084 non-projective
sentences from all the training treebanks.

One might assume that adding more degree-
1 transitions wouldn’t improve coverage of trees
with non-crossing edges. On the other hand,
since their addition doesn’t affect the asymptotic
run-time, we define ALLDEG1 to include all
five degree-1 transitions from R into the Attardi
(2006) system. Surprisingly, using ALLDEG1 im-
proves non-projective coverage from 87.24% to
93.32%.

Furthermore, recall that we argued above that,

6Such reductions might prove interesting in the future.
7We also compare results from symbolic execution of the

dynamic programming algorithms on short sentences as a
double check.

by construction, using any of the transitions in
R still preserves the original Opn7q run-time up-
per bound for Cohen et al.’s (2011) exact infer-
ence algorithm. We therefore define ALL to in-
clude all 9 reduce transitions in R; it runs in time
Opn7q despite the fact that reb0,s2 P R has de-
gree 3, a significant improvement over the best
previously-known bound for degree-3 systems of
Opn10q. Moreover, as shown in Fig. 1, this variant
improves non-projective coverage to 95.54%.

Now, if our goal is to reduce run-time, we can
start with an Attardi (2006) system of degree 1 in-
stead of 2, which, as previously mentioned, can
only handle projective sentences, but which has
runtime Opnp3¨1q`1q “ Opn4q. Reasoning about
the analog of R with respect to Kuhlmann et al.’s
(2011) exact inference algorithm — the projective
predecessor of Cohen et al. (2011) — brings us
to the degree-2 set of reduce rules tres0,s1 , res1,s0 ,
reb0,s1u. This system, however, can only handle
leftward non-projective arcs.

Instead, we return to ALL, but discard transi-
tions reducing s2, thus deriving ALLs0s1, which
still produces both left and right non-projective
arcs, but has a run-time lower than Opn7q,
which we show as follows. Since s2 cannot
be reduced, when concatenating rh1, i, h2, h3, ks
and rh3, k, h4, h5, js, the larger I-computation
we deduce will be either rh1, i, h2, h4, js or
rh1, i, h2, h5, js, so that the first three indices of
the conclusion item remain the same as those of
the first premise. In addition, the only remaining
deduction rule, a shift, produces deduction items
of the form rh1, j, h1, j, j ` 1s. Hence, all deriv-
able items will be of the form rh1, i, h1, h3, js,
with only four unique indices, instead of five.
It follows that the exact inference algorithm for
this variant runs in Opn6q time, improving from
Opn7q. The tabularization takes Opn4q space, a
reduction from the original Opn5q as well. In
terms of empirical coverage, this new system can
handle 93.16% of the non-projective sentences in
UD 2.1, more than Attardi’s (2006) system, but
fewer than our other two variants.

Generally, for a degree-D Attardi (2006)-based
system, one may apply our first two variants to im-
prove its non-projective coverage while maintain-
ing the previously-analyzed Opn3D`1q time com-
plexity, or the third variant to reduce its time com-
plexity down to Opn3Dq, and space complexity
from Opn2D`1q to Opn2Dq.

423



4 Conclusion

We have introduced a family of variants of Co-
hen et al.’s (2011) Attardi-based transition sys-
tem and its associated dynamic programming al-
gorithm. Among these, we have highlighted novel
algorithms that (1) increase non-projective cov-
erage without affecting computational complexity
for exact inference, and (2) improve the time and
space complexity for exact inference, even while
providing better coverage than the original parser.
Specifically, our ALLs0s1 runs in Opn6q time and
Opn4q space (improving from Opn7q and Opn5q,
respectively) while providing coverage of 93.16%
of the non-projective sentences in UD 2.1.

Exact inference for transition-based parsers has
recently achieved state-of-the-art results in projec-
tive parsing (Shi et al., 2017). The complexity im-
provements achieved in this paper are a step to-
wards making their exact-inference, projective ap-
proach extensible to practical, wide-coverage non-
projective parsing.

Acknowledgments

We thank the reviewers for their time and care-
ful reading, and reviewer 2 for suggestions that
improved our presentation. TS and LL were
supported in part by a Google Focused Re-
search Grant to Cornell University. CG has re-
ceived funding from the European Research Coun-
cil (ERC), under the European Union’s Horizon
2020 research and innovation programme (FAST-
PARSE, grant agreement No 714150), from the
TELEPARES-UDC project (FFI2014-51978-C2-
2-R) and the ANSWER-ASAP project (TIN2017-
85160-C2-1-R) from MINECO, and from Xunta
de Galicia (ED431B 2017/01). LL was also sup-
ported in part by NSF grant SES-1741441. Any
opinions, findings, and conclusions or recommen-
dations expressed in this material are those of the
author(s) and do not necessarily reflect the views
of the National Science Foundation or other spon-
sors.

References
Giuseppe Attardi. 2006. Experiments with a multilan-

guage non-projective dependency parser. In Pro-
ceedings of the Tenth Conference on Computational
Natural Language Learning (CoNLL-X), pages 166–
170, New York City, New York, USA.

Shay B. Cohen, Carlos Gómez-Rodríguez, and Gior-
gio Satta. 2011. Exact inference for generative

probabilistic non-projective dependency parsing. In
Proceedings of the 2011 Conference on Empirical
Methods in Natural Language Processing (EMNLP),
pages 1234–1245, Edinburgh, Scotland, UK.

Shay B. Cohen, Carlos Gómez-Rodríguez, and Gior-
gio Satta. 2012. Elimination of spurious ambigu-
ity in transition-based dependency parsing. ArXiv
e-prints, 1206.6735.

Jason Eisner and Giorgio Satta. 1999. Efficient pars-
ing for bilexical context-free grammars and head au-
tomaton grammars. In Proceedings of the 37th An-
nual Meeting of the Association for Computational
Linguistics (ACL), pages 457–464, College Park,
Maryland, USA.

Carlos Gómez-Rodríguez. 2016. Restricted non-
projectivity: Coverage vs. efficiency. Computa-
tional Linguistics, 42(4):809–817.

Liang Huang and Kenji Sagae. 2010. Dynamic pro-
gramming for linear-time incremental parsing. In
Proceedings of the 48th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL), pages
1077–1086, Uppsala, Sweden.

Marco Kuhlmann, Carlos Gómez-Rodríguez, and Gior-
gio Satta. 2011. Dynamic programming algorithms
for transition-based dependency parsers. In Pro-
ceedings of the 49th Annual Meeting of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies (ACL-HLT), pages 673–682,
Portland, Oregon, USA.

Ryan McDonald and Giorgio Satta. 2007. On the com-
plexity of non-projective data-driven dependency
parsing. In Proceedings of the Tenth International
Conference on Parsing Technologies (IWPT), pages
121–132, Prague, Czech Republic. Association for
Computational Linguistics.

Joakim Nivre, Željko Agić, Lars Ahrenberg, Lene
Antonsen, Maria Jesus Aranzabe, Masayuki Asa-
hara, Luma Ateyah, Mohammed Attia, Aitziber
Atutxa, Liesbeth Augustinus, Elena Badmaeva,
Miguel Ballesteros, Esha Banerjee, Sebastian Bank,
Verginica Barbu Mititelu, John Bauer, Kepa Ben-
goetxea, Riyaz Ahmad Bhat, Eckhard Bick, Victo-
ria Bobicev, Carl Börstell, Cristina Bosco, Gosse
Bouma, Sam Bowman, Aljoscha Burchardt, Marie
Candito, Gauthier Caron, Gülşen Cebiroğlu Eryiğit,
Giuseppe G. A. Celano, Savas Cetin, Fabri-
cio Chalub, Jinho Choi, Silvie Cinková, Çağrı
Çöltekin, Miriam Connor, Elizabeth Davidson,
Marie-Catherine de Marneffe, Valeria de Paiva,
Arantza Diaz de Ilarraza, Peter Dirix, Kaja Do-
brovoljc, Timothy Dozat, Kira Droganova, Puneet
Dwivedi, Marhaba Eli, Ali Elkahky, Tomaž Erjavec,
Richárd Farkas, Hector Fernandez Alcalde, Jennifer
Foster, Cláudia Freitas, Katarína Gajdošová, Daniel
Galbraith, Marcos Garcia, Moa Gärdenfors, Kim
Gerdes, Filip Ginter, Iakes Goenaga, Koldo Go-
jenola, Memduh Gökırmak, Yoav Goldberg, Xavier

424



Gómez Guinovart, Berta Gonzáles Saavedra, Ma-
tias Grioni, Normunds Grūzı̄tis, Bruno Guillaume,
Nizar Habash, Jan Hajič, Jan Hajič jr., Linh Hà Mỹ,
Kim Harris, Dag Haug, Barbora Hladká, Jaroslava
Hlaváčová, Florinel Hociung, Petter Hohle, Radu
Ion, Elena Irimia, Tomáš Jelínek, Anders Jo-
hannsen, Fredrik Jørgensen, Hüner Kaşıkara, Hi-
roshi Kanayama, Jenna Kanerva, Tolga Kayade-
len, Václava Kettnerová, Jesse Kirchner, Natalia
Kotsyba, Simon Krek, Veronika Laippala, Lorenzo
Lambertino, Tatiana Lando, John Lee, Phương
Lê Hồng, Alessandro Lenci, Saran Lertpradit, Her-
man Leung, Cheuk Ying Li, Josie Li, Keying
Li, Nikola Ljubešić, Olga Loginova, Olga Lya-
shevskaya, Teresa Lynn, Vivien Macketanz, Aibek
Makazhanov, Michael Mandl, Christopher Manning,
Cătălina Mărănduc, David Mareček, Katrin Marhei-
necke, Héctor Martínez Alonso, André Martins, Jan
Mašek, Yuji Matsumoto, Ryan McDonald, Gustavo
Mendonça, Niko Miekka, Anna Missilä, Cătălin
Mititelu, Yusuke Miyao, Simonetta Montemagni,
Amir More, Laura Moreno Romero, Shinsuke Mori,
Bohdan Moskalevskyi, Kadri Muischnek, Kaili
Müürisep, Pinkey Nainwani, Anna Nedoluzhko,
Gunta Nešpore-Bērzkalne, Lương Nguyễn Thị,
Huyền Nguyễn Thị Minh, Vitaly Nikolaev, Hanna
Nurmi, Stina Ojala, Petya Osenova, Robert Östling,
Lilja Øvrelid, Elena Pascual, Marco Passarotti,
Cenel-Augusto Perez, Guy Perrier, Slav Petrov, Jussi
Piitulainen, Emily Pitler, Barbara Plank, Martin
Popel, Lauma Pretkalniņa, Prokopis Prokopidis, Ti-
ina Puolakainen, Sampo Pyysalo, Alexandre Rade-
maker, Loganathan Ramasamy, Taraka Rama, Vinit
Ravishankar, Livy Real, Siva Reddy, Georg Rehm,
Larissa Rinaldi, Laura Rituma, Mykhailo Roma-
nenko, Rudolf Rosa, Davide Rovati, Benoı̂t Sagot,
Shadi Saleh, Tanja Samardžić, Manuela Sanguinetti,
Baiba Saulı̄te, Sebastian Schuster, Djamé Seddah,
Wolfgang Seeker, Mojgan Seraji, Mo Shen, At-
suko Shimada, Dmitry Sichinava, Natalia Silveira,
Maria Simi, Radu Simionescu, Katalin Simkó,
Mária Šimková, Kiril Simov, Aaron Smith, An-
tonio Stella, Milan Straka, Jana Strnadová, Alane
Suhr, Umut Sulubacak, Zsolt Szántó, Dima Taji,
Takaaki Tanaka, Trond Trosterud, Anna Trukhina,
Reut Tsarfaty, Francis Tyers, Sumire Uematsu,
Zdeňka Urešová, Larraitz Uria, Hans Uszkoreit,
Sowmya Vajjala, Daniel van Niekerk, Gertjan van
Noord, Viktor Varga, Eric Villemonte de la Clerg-
erie, Veronika Vincze, Lars Wallin, Jonathan North
Washington, Mats Wirén, Tak-sum Wong, Zhuoran
Yu, Zdeněk Žabokrtský, Amir Zeldes, Daniel Ze-
man, and Hanzhi Zhu. 2017. Universal Dependen-
cies 2.1. LINDAT/CLARIN digital library at the In-
stitute of Formal and Applied Linguistics (ÚFAL),
Faculty of Mathematics and Physics, Charles Uni-
versity.

Emily Pitler, Sampath Kannan, and Mitchell Marcus.
2013. Finding optimal 1-endpoint-crossing trees.
Transactions of the Association of Computational
Linguistics, 1:13–24.

Tianze Shi, Liang Huang, and Lillian Lee. 2017.

Fast(er) exact decoding and global training for
transition-based dependency parsing via a minimal
feature set. In Proceedings of the 2017 Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP), pages 12–23, Copenhagen, Den-
mark.

425


