



















































Ranking Sentences for Extractive Summarization with Reinforcement Learning


Proceedings of NAACL-HLT 2018, pages 1747–1759
New Orleans, Louisiana, June 1 - 6, 2018. c©2018 Association for Computational Linguistics

Ranking Sentences for Extractive Summarization
with Reinforcement Learning

Shashi Narayan Shay B. Cohen Mirella Lapata
Institute for Language, Cognition and Computation

School of Informatics, University of Edinburgh
10 Crichton Street, Edinburgh, EH8 9AB

shashi.narayan@ed.ac.uk, {scohen,mlap}@inf.ed.ac.uk

Abstract

Single document summarization is the task
of producing a shorter version of a docu-
ment while preserving its principal informa-
tion content. In this paper we conceptualize
extractive summarization as a sentence rank-
ing task and propose a novel training algorithm
which globally optimizes the ROUGE evalua-
tion metric through a reinforcement learning
objective. We use our algorithm to train a neu-
ral summarization model on the CNN and Dai-
lyMail datasets and demonstrate experimen-
tally that it outperforms state-of-the-art extrac-
tive and abstractive systems when evaluated
automatically and by humans.1

1 Introduction

Automatic summarization has enjoyed wide popu-
larity in natural language processing due to its po-
tential for various information access applications.
Examples include tools which aid users navigate
and digest web content (e.g., news, social media,
product reviews), question answering, and person-
alized recommendation engines. Single document
summarization — the task of producing a shorter
version of a document while preserving its infor-
mation content — is perhaps the most basic of
summarization tasks that have been identified over
the years (see Nenkova and McKeown, 2011 for a
comprehensive overview).

Modern approaches to single document summa-
rization are data-driven, taking advantage of the
success of neural network architectures and their
ability to learn continuous features without re-
course to preprocessing tools or linguistic annota-
tions. Abstractive summarization involves various
text rewriting operations (e.g., substitution, dele-
tion, reordering) and has been recently framed as
a sequence-to-sequence problem (Sutskever et al.,
2014). Central in most approaches (Rush et al.,
2015; Chen et al., 2016; Nallapati et al., 2016; See

1Our code and data are available here: https://github.
com/shashiongithub/Refresh.

et al., 2017; Tan and Wan, 2017; Paulus et al.,
2017) is an encoder-decoder architecture mod-
eled by recurrent neural networks. The encoder
reads the source sequence into a list of continuous-
space representations from which the decoder gen-
erates the target sequence. An attention mecha-
nism (Bahdanau et al., 2015) is often used to lo-
cate the region of focus during decoding.

Extractive systems create a summary by identi-
fying (and subsequently concatenating) the most
important sentences in a document. A few re-
cent approaches (Cheng and Lapata, 2016; Nalla-
pati et al., 2017; Narayan et al., 2017; Yasunaga
et al., 2017) conceptualize extractive summariza-
tion as a sequence labeling task in which each
label specifies whether each document sentence
should be included in the summary. Existing mod-
els rely on recurrent neural networks to derive a
meaning representation of the document which is
then used to label each sentence, taking the pre-
viously labeled sentences into account. These
models are typically trained using cross-entropy
loss in order to maximize the likelihood of the
ground-truth labels and do not necessarily learn
to rank sentences based on their importance due
to the absence of a ranking-based objective. An-
other discrepancy comes from the mismatch be-
tween the learning objective and the evaluation
criterion, namely ROUGE (Lin and Hovy, 2003),
which takes the entire summary into account.

In this paper we argue that cross-entropy train-
ing is not optimal for extractive summarization.
Models trained this way are prone to generating
verbose summaries with unnecessarily long sen-
tences and redundant information. We propose to
overcome these difficulties by globally optimiz-
ing the ROUGE evaluation metric and learning to
rank sentences for summary generation through a
reinforcement learning objective. Similar to pre-
vious work (Cheng and Lapata, 2016; Narayan
et al., 2017; Nallapati et al., 2017), our neural sum-
marization model consists of a hierarchical docu-

1747



ment encoder and a hierarchical sentence extrac-
tor. During training, it combines the maximum-
likelihood cross-entropy loss with rewards from
policy gradient reinforcement learning to directly
optimize the evaluation metric relevant for the
summarization task. We show that this global op-
timization framework renders extractive models
better at discriminating among sentences for the
final summary; a sentence is ranked high for selec-
tion if it often occurs in high scoring summaries.

We report results on the CNN and DailyMail
news highlights datasets (Hermann et al., 2015)
which have been recently used as testbeds for the
evaluation of neural summarization systems. Ex-
perimental results show that when evaluated auto-
matically (in terms of ROUGE), our model out-
performs state-of-the-art extractive and abstrac-
tive systems. We also conduct two human eval-
uations in order to assess (a) which type of sum-
mary participants prefer (we compare extractive
and abstractive systems) and (b) how much key
information from the document is preserved in the
summary (we ask participants to answer questions
pertaining to the content in the document by read-
ing system summaries). Both evaluations over-
whelmingly show that human subjects find our
summaries more informative and complete.

Our contributions in this work are three-fold: a
novel application of reinforcement learning to sen-
tence ranking for extractive summarization; cor-
roborated by analysis and empirical results show-
ing that cross-entropy training is not well-suited
to the summarization task; and large scale user
studies following two evaluation paradigms which
demonstrate that state-of-the-art abstractive sys-
tems lag behind extractive ones when the latter are
globally trained.

2 Summarization as Sentence Ranking

Given a document D consisting of a sequence of
sentences (s1,s2, ...,sn) , an extractive summarizer
aims to produce a summary S by selecting m sen-
tences from D (where m < n). For each sentence
si ∈ D, we predict a label yi ∈ {0,1} (where 1
means that si should be included in the summary)
and assign a score p(yi|si,D,θ) quantifying si’s
relevance to the summary. The model learns to as-
sign p(1|si,D,θ) > p(1|s j,D,θ) when sentence si
is more relevant than s j. Model parameters are de-
noted by θ. We estimate p(yi|si,D,θ) using a neu-
ral network model and assemble a summary S by
selecting m sentences with top p(1|si,D,θ) scores.

Our architecture resembles those previously

proposed in the literature (Cheng and Lapata,
2016; Nallapati et al., 2017; Narayan et al., 2017).
The main components include a sentence encoder,
a document encoder, and a sentence extractor (see
the left block of Figure 1) which we describe in
more detail below.

Sentence Encoder A core component of our
model is a convolutional sentence encoder which
encodes sentences into continuous representa-
tions. In recent years, CNNs have proven use-
ful for various NLP tasks (Collobert et al., 2011;
Kim, 2014; Kalchbrenner et al., 2014; Zhang et al.,
2015; Lei et al., 2015; Kim et al., 2016; Cheng
and Lapata, 2016) because of their effectiveness in
identifying salient patterns in the input (Xu et al.,
2015). In the case of summarization, CNNs can
identify named-entities and events that correlate
with the gold summary.

We use temporal narrow convolution by apply-
ing a kernel filter K of width h to a window of h
words in sentence s to produce a new feature. This
filter is applied to each possible window of words
in s to produce a feature map f ∈ Rk−h+1 where k
is the sentence length. We then apply max-pooling
over time over the feature map f and take the max-
imum value as the feature corresponding to this
particular filter K. We use multiple kernels of var-
ious sizes and each kernel multiple times to con-
struct the representation of a sentence. In Figure 1,
kernels of size 2 (red) and 4 (blue) are applied
three times each. Max-pooling over time yields
two feature lists f K2 and f K4 ∈ R3. The final sen-
tence embeddings have six dimensions.

Document Encoder The document encoder
composes a sequence of sentences to obtain a doc-
ument representation. We use a recurrent neural
network with Long Short-Term Memory (LSTM)
cells to avoid the vanishing gradient problem when
training long sequences (Hochreiter and Schmid-
huber, 1997). Given a document D consisting of
a sequence of sentences (s1,s2, . . . ,sn), we follow
common practice and feed sentences in reverse or-
der (Sutskever et al., 2014; Li et al., 2015; Filip-
pova et al., 2015; Narayan et al., 2017). This way
we make sure that the network also considers the
top sentences of the document which are partic-
ularly important for summarization (Rush et al.,
2015; Nallapati et al., 2016).

Sentence Extractor Our sentence extractor se-
quentially labels each sentence in a document
with 1 (relevant for the summary) or 0 (otherwise).

1748



Candidate
summary

Gold
summary

REWARD

REINFORCE

Update agent

Police
are

still
hunting

for
the

driver

[convolution] [max pooling]

Sentence encoder

D

s4

s3

s2

s1
Document encoder

s5 s4 s3 s2 s1

Sentence extractor

s5 s4 s3 s2 s1

y5 y4 y3 y2 y1

Figure 1: Extractive summarization model with reinforcement learning: a hierarchical encoder-decoder model
ranks sentences for their extract-worthiness and a candidate summary is assembled from the top ranked sentences;
the REWARD generator compares the candidate against the gold summary to give a reward which is used in the
REINFORCE algorithm (Williams, 1992) to update the model.

It is implemented with another RNN with LSTM
cells and a softmax layer. At time ti, it reads
sentence si and makes a binary prediction, con-
ditioned on the document representation (obtained
from the document encoder) and the previously la-
beled sentences. This way, the sentence extractor
is able to identify locally and globally important
sentences within the document. We rank the sen-
tences in a document D by p(yi = 1|si,D,θ), the
confidence scores assigned by the softmax layer
of the sentence extractor.

We learn to rank sentences by training our
network in a reinforcement learning framework,
directly optimizing the final evaluation metric,
namely ROUGE (Lin and Hovy, 2003). Before we
describe our training algorithm, we elaborate on
why the maximum-likelihood cross-entropy ob-
jective could be deficient for ranking sentences
for summarization (Section 3). Then, we define
our reinforcement learning objective in Section 4
and show that our new way of training allows the
model to better discriminate amongst sentences,
i.e., a sentence is ranked higher for selection if it
often occurs in high scoring summaries.

3 The Pitfalls of Cross-Entropy Loss

Previous work optimizes summarization models
by maximizing p(y|D,θ) = ∏ni=1 p(yi|si,D,θ),
the likelihood of the ground-truth labels
y = (y1,y2, ...,yn) for sentences (s1,s2, . . . ,sn),
given document D and model parameters θ. This
objective can be achieved by minimizing the

cross-entropy loss at each decoding step:

L(θ) =−
n

∑
i=1

log p(yi|si,D,θ). (1)

Cross-entropy training leads to two kinds of dis-
crepancies in the model. The first discrepancy
comes from the disconnect between the task def-
inition and the training objective. While MLE
in Equation (1) aims to maximize the likelihood
of the ground-truth labels, the model is (a) ex-
pected to rank sentences to generate a summary
and (b) evaluated using ROUGE at test time.
The second discrepancy comes from the reliance
on ground-truth labels. Document collections
for training summarization systems do not nat-
urally contain labels indicating which sentences
should be extracted. Instead, they are typically ac-
companied by abstractive summaries from which
sentence-level labels are extrapolated. Cheng
and Lapata (2016) follow Woodsend and Lapata
(2010) in adopting a rule-based method which as-
signs labels to each sentence in the document in-
dividually based on their semantic correspondence
with the gold summary (see the fourth column
in Table 1). An alternative method (Svore et al.,
2007; Cao et al., 2016; Nallapati et al., 2017) iden-
tifies the set of sentences which collectively gives
the highest ROUGE with respect to the gold sum-
mary. Sentences in this set are labeled with 1 and
0 otherwise (see the column 5 in Table 1).

Labeling sentences individually often generates
too many positive labels causing the model to

1749



se
nt

.p
os

.
CNN article

Se
nt

-l
ev

el
R

O
U

G
E

In
di

vi
du

al
O

ra
cl

e

C
ol

le
ct

iv
e

O
ra

cl
e Multiple

Collective
OracleSentences

0 A debilitating, mosquito-borne virus called Chikungunya has made its way to
North Carolina, health officials say.

21.2 1 1 (0,11,13) : 59.3
(0,13) : 57.5
(11,13) : 57.2
(0,1,13) : 57.1
(1,13) : 56.6
(3,11,13) : 55.0
(13) : 54.5
(0,3,13) : 54.2
(3,13) : 53.4
(1,3,13) : 52.9
(1,11,13) : 52.0
(0,9,13) : 51.3
(0,7,13) : 51.3
(0,12,13) : 51.0
(9,11,13) : 50.4
(1,9,13) : 50.1
(12,13) : 49.3
(7,11,13) : 47.8
(0,10,13) : 47.8
(11,12,13):47.7
(7,13) : 47.6
(9,13) : 47.5
(1,7,13) : 46.9
(3,7,13) : 46.0
(3,12,13) : 46.0
(3,9,13) : 45.9
(10,13) : 45.5
(4,11,13) : 45.3
...

1 It’s the state’s first reported case of the virus. 18.1 1 0
2 The patient was likely infected in the Caribbean, according to the Forsyth County

Department of Public Health.
11.2 1 0

3 Chikungunya is primarily found in Africa, East Asia and the Caribbean islands,
but the Centers for Disease Control and Prevention has been watching the virus,+
for fear that it could take hold in the United States – much like West Nile did more
than a decade ago.

35.6 1 0

4 The virus, which can cause joint pain and arthritis-like symptoms, has been on
the U.S. public health radar for some time.

16.7 1 0

5 About 25 to 28 infected travelers bring it to the United States each year, said
Roger Nasci, chief of the CDC’s Arboviral Disease Branch in the Division of
Vector-Borne Diseases.

9.7 0 0

6 ”We haven’t had any locally transmitted cases in the U.S. thus far,” Nasci said. 7.4 0 0
7 But a major outbreak in the Caribbean this year – with more than 100,000 cases

reported – has health officials concerned.
16.4 1 0

8 Experts say American tourists are bringing Chikungunya back home, and it’s just
a matter of time before it starts to spread within the United States.

10.6 0 0

9 After all, the Caribbean is a popular one with American tourists, and summer is
fast approaching.

13.9 1 0

10 ”So far this year we’ve recorded eight travel-associated cases, and seven of them
have come from countries in the Caribbean where we know the virus is being
transmitted,” Nasci said.

18.4 1 0

11 Other states have also reported cases of Chikungunya. 13.4 0 1
12 The Tennessee Department of Health said the state has had multiple cases of the

virus in people who have traveled to the Caribbean.
15.6 1 0

13 The virus is not deadly, but it can be painful, with symptoms lasting for weeks. 54.5 1 1
14 Those with weak immune systems, such as the elderly, are more likely to suffer

from the virus’ side effects than those who are healthier.
5.5 0 0

Story Highlights
• North Carolina reports first case of mosquito-borne virus called Chikungunya • Chikungunya is primarily found in
Africa, East Asia and the Caribbean islands • Virus is not deadly, but it can be painful, with symptoms lasting for weeks

Table 1: An abridged CNN article (only first 15 out of 31 sentences are shown) and its “story highlights”. The
latter are typically written by journalists to allow readers to quickly gather information on stories. Highlights are
often used as gold standard abstractive summaries in the summarization literature.

overfit the data. For example, the document in Ta-
ble 1 has 12 positively labeled sentences out of 31
in total (only first 10 are shown). Collective labels
present a better alternative since they only per-
tain to the few sentences deemed most suitable to
form the summary. However, a model trained with
cross-entropy loss on collective labels will under-
fit the data as it will only maximize probabilities
p(1|si,D,θ) for sentences in this set (e.g., sen-
tences {0,11,13} in Table 1) and ignore all other
sentences. We found that there are many candidate
summaries with high ROUGE scores which could
be considered during training.

Table 1 (last column) shows candidate
summaries ranked according to the mean of
ROUGE-1, ROUGE-2, and ROUGE-L F1 scores.
Interestingly, multiple top ranked summaries have
reasonably high ROUGE scores. For example,
the average ROUGE for the summaries ranked
second (0,13), third (11,13), and fourth (0,1,13)
is 57.5%, 57.2%, and 57.1%, and all top 16 sum-
maries have ROUGE scores more or equal to
50%. A few sentences are indicative of important
content and appear frequently in the summaries:
sentence 13 occurs in all summaries except one,

while sentence 0 appears in several summaries
too. Also note that summaries (11,13) and (1,13)
yield better ROUGE scores compared to longer
summaries, and may be as informative, yet more
concise, alternatives.

These discrepancies render the model less ef-
ficient at ranking sentences for the summariza-
tion task. Instead of maximizing the likelihood of
the ground-truth labels, we could train the model
to predict the individual ROUGE score for each
sentence in the document and then select the top
m sentences with highest scores. But sentences
with individual ROUGE scores do not necessar-
ily lead to a high scoring summary, e.g., they may
convey overlapping content and form verbose and
redundant summaries. For example, sentence 3,
despite having a high individual ROUGE score
(35.6%), does not occur in any of the top 5 sum-
maries. We next explain how we address these is-
sues using reinforcement learning.

4 Sentence Ranking with Reinforcement
Learning

Reinforcement learning (Sutton and Barto, 1998)
has been proposed as a way of training sequence-

1750



to-sequence generation models in order to directly
optimize the metric used at test time, e.g., BLEU
or ROUGE (Ranzato et al., 2015). We adapt re-
inforcement learning to our formulation of extrac-
tive summarization to rank sentences for summary
generation. We propose an objective function that
combines the maximum-likelihood cross-entropy
loss with rewards from policy gradient reinforce-
ment learning to globally optimize ROUGE. Our
training algorithm allows to explore the space of
possible summaries, making our model more ro-
bust to unseen data. As a result, reinforcement
learning helps extractive summarization in two
ways: (a) it directly optimizes the evaluation met-
ric instead of maximizing the likelihood of the
ground-truth labels and (b) it makes our model bet-
ter at discriminating among sentences; a sentence
is ranked high for selection if it often occurs in
high scoring summaries.

4.1 Policy Learning
We cast the neural summarization model intro-
duced in Figure 1 in the Reinforcement Learning
paradigm (Sutton and Barto, 1998). Accordingly,
the model can be viewed as an “agent” which in-
teracts with an “environment” consisting of docu-
ments. At first, the agent is initialized randomly,
it reads document D and predicts a relevance
score for each sentence si ∈ D using “policy”
p(yi|si,D,θ), where θ are model parameters. Once
the agent is done reading the document, a sum-
mary with labels ŷ is sampled out of the ranked
sentences. The agent is then given a “reward” r
commensurate with how well the extract resem-
bles the gold-standard summary. Specifically, as
reward function we use mean F1 of ROUGE-1,
ROUGE-2, and ROUGE-L. Unigram and bigram
overlap (ROUGE-1 and ROUGE-2) are meant to
assess informativeness, whereas the longest com-
mon subsequence (ROUGE-L) is meant to assess
fluency. We update the agent using the REIN-
FORCE algorithm (Williams, 1992) which aims to
minimize the negative expected reward:

L(θ) =−Eŷ∼ pθ [r(ŷ)] (2)
where, pθ stands for p(y|D,θ). REINFORCE is
based on the observation that the expected gradient
of a non-differentiable reward function (ROUGE,
in our case) can be computed as follows:

∇L(θ) =−Eŷ∼ pθ [r(ŷ)∇ log p(ŷ|D,θ)] (3)
While MLE in Equation (1) aims to maximize
the likelihood of the training data, the objective

in Equation (2) learns to discriminate among sen-
tences with respect to how often they occur in high
scoring summaries.

4.2 Training with High Probability Samples
Computing the expectation term in Equation (3) is
prohibitive, since there is a large number of pos-
sible extracts. In practice, we approximate the ex-
pected gradient using a single sample ŷ from pθ
for each training example in a batch:

∇L(θ)≈−r(ŷ)∇ log p(ŷ|D,θ)

≈−r(ŷ)
n

∑
i=1

∇ log p(ŷi|si,D,θ) (4)

Presented in its original form, the REINFORCE
algorithm starts learning with a random policy
which can make model training challenging for
complex tasks like ours where a single document
can give rise to a very large number of candidate
summaries. We therefore limit the search space
of ŷ in Equation (4) to the set of largest prob-
ability samples Ŷ. We approximate Ŷ by the k
extracts which receive highest ROUGE scores.
More concretely, we assemble candidate sum-
maries efficiently by first selecting p sentences
from the document which on their own have high
ROUGE scores. We then generate all possible
combinations of p sentences subject to maximum
length m and evaluate them against the gold sum-
mary. Summaries are ranked according to F1 by
taking the mean of ROUGE-1, ROUGE-2, and
ROUGE-L. Ŷ contains these top k candidate sum-
maries. During training, we sample ŷ from Ŷ in-
stead of p(ŷ|D,θ).

Ranzato et al. (2015) proposed an alternative to
REINFORCE called MIXER (Mixed Incremental
Cross-Entropy Reinforce) which first pretrains the
model with the cross-entropy loss using ground
truth labels and then follows a curriculum learning
strategy (Bengio et al., 2015) to gradually teach
the model to produce stable predictions on its own.
In our experiments MIXER performed worse than
the model of Nallapati et al. (2017) just trained on
collective labels. We conjecture that this is due
to the unbounded nature of our ranking problem.
Recall that our model assigns relevance scores to
sentences rather than words. The space of senten-
tial representations is vast and fairly unconstrained
compared to other prediction tasks operating with
fixed vocabularies (Li et al., 2016; Paulus et al.,
2017; Zhang and Lapata, 2017). Moreover, our
approximation of the gradient allows the model to

1751



converge much faster to an optimal policy. Advan-
tageously, we do not require an online reward esti-
mator, we pre-compute Ŷ, which leads to a signifi-
cant speedup during training compared to MIXER
(Ranzato et al., 2015) and related training schemes
(Shen et al., 2016).

5 Experimental Setup

In this section we present our experimental
setup for assessing the performance of our
model which we call REFRESH as a shorthand
for REinFoRcement Learning-based Extractive
Summarization. We describe our datasets, discuss
implementation details, our evaluation protocol,
and the systems used for comparison.

Summarization Datasets We evaluated our
models on the CNN and DailyMail news high-
lights datasets (Hermann et al., 2015). We used the
standard splits of Hermann et al. (2015) for train-
ing, validation, and testing (90,266/1,220/1,093
documents for CNN and 196,961/12,148/10,397
for DailyMail). We did not anonymize entities or
lower case tokens. We followed previous studies
(Cheng and Lapata, 2016; Nallapati et al., 2016,
2017; See et al., 2017; Tan and Wan, 2017) in as-
suming that the “story highlights” associated with
each article are gold-standard abstractive sum-
maries. During training we use these to generate
high scoring extracts and to estimate rewards for
them, but during testing, they are used as reference
summaries to evaluate our models.

Implementation Details We generated extracts
by selecting three sentences (m = 3) for CNN arti-
cles and four sentences (m = 4) for DailyMail ar-
ticles. These decisions were informed by the fact
that gold highlights in the CNN/DailyMail vali-
dation sets are 2.6/4.2 sentences long. For both
datasets, we estimated high-scoring extracts us-
ing 10 document sentences (p = 10) with highest
ROUGE scores. We tuned the initialization pa-
rameter k for Ŷ on the validation set: we found
that our model performs best with k = 5 for the
CNN dataset and k = 15 for the DailyMail dataset.

We used the One Billion Word Benchmark cor-
pus (Chelba et al., 2013) to train word embeddings
with the skip-gram model (Mikolov et al., 2013)
using context window size 6, negative sampling
size 10, and hierarchical softmax 1. Known words
were initialized with pre-trained embeddings of
size 200. Embeddings for unknown words were
initialized to zero, but estimated during training.

L
E

A
D

• A SkyWest Airlines flight made an emergency landing
in Buffalo, New York, on Wednesday after a passenger
lost consciousness, officials said.
• The passenger received medical attention before being
released, according to Marissa Snow, spokeswoman for
SkyWest.
• She said the airliner expects to accommodate the 75
passengers on another aircraft to their original destination
– Hartford, Connecticut – later Wednesday afternoon.

Se
e

et
al

. • Skywest Airlines flight made an emergency landing in
Buffalo, New York, on Wednesday after a passenger lost
consciousness.
• She said the airliner expects to accommodate the 75
passengers on another aircraft to their original destination
– Hartford, Connecticut.

R
E

F
R

E
S

H

• A SkyWest Airlines flight made an emergency landing
in Buffalo, New York, on Wednesday after a passenger
lost consciousness, officials said.
• The passenger received medical attention before being
released, according to Marissa Snow, spokeswoman for
SkyWest.
• The Federal Aviation Administration initially reported
a pressurization problem and said it would investigate.

G
O

L
D • FAA backtracks on saying crew reported a pressuriza-

tion problem
• One passenger lost consciousness
• The plane descended 28,000 feet in three minutes

Q1 Who backtracked on saying crew reported a pressuriza-
tion problem? (FAA)

Q2 How many passengers lost consciousness in the incident?
(One)

Q3 How far did the plane descend in three minutes? (28,000
feet)

Figure 2: Summaries produced by the LEAD base-
line, the abstractive system of See et al. (2017) and
REFRESH for a CNN (test) article. GOLD presents
the human-authored summary; the bottom block shows
manually written questions using the gold summary
and their answers in parentheses.

Sentences were padded with zeros to a length
of 100. For the sentence encoder, we used a list
of kernels of widths 1 to 7, each with output chan-
nel size of 50 (Kim et al., 2016). The sentence
embedding size in our model was 350.

For the recurrent neural network component
in the document encoder and sentence extractor,
we used a single-layered LSTM network with
size 600. All input documents were padded with
zeros to a maximum document length of 120. We
performed minibatch cross-entropy training with a
batch size of 20 documents for 20 training epochs.
It took around 12 hrs on a single GPU to train.
After each epoch, we evaluated our model on
the validation set and chose the best performing
model for the test set. During training we used
the Adam optimizer (Kingma and Ba, 2015) with
initial learning rate 0.001. Our system is imple-
mented in TensorFlow (Abadi et al., 2015).

Evaluation We evaluated summarization qual-
ity using F1 ROUGE (Lin and Hovy, 2003). We
report unigram and bigram overlap (ROUGE-1
and ROUGE-2) as a means of assessing infor-
mativeness and the longest common subsequence

1752



(ROUGE-L) as a means of assessing fluency.2 We
compared REFRESH against a baseline which sim-
ply selects the first m leading sentences from each
document (LEAD) and two neural models similar
to ours (see left block in Figure 1), both trained
with cross-entropy loss. Cheng and Lapata (2016)
train on individual labels, while Nallapati et al.
(2017) use collective labels. We also compared
our model against the abstractive systems of Chen
et al. (2016), Nallapati et al. (2016), See et al.
(2017), and Tan and Wan (2017).3

In addition to ROUGE which can be mislead-
ing when used as the only means to assess the in-
formativeness of summaries (Schluter, 2017), we
also evaluated system output by eliciting human
judgments in two ways. In our first experiment,
participants were presented with a news article
and summaries generated by three systems: the
LEAD baseline, abstracts from See et al. (2017),
and extracts from REFRESH. We also included
the human-authored highlights.4 Participants read
the articles and were asked to rank the summaries
from best (1) to worst (4) in order of informative-
ness (does the summary capture important infor-
mation in the article?) and fluency (is the sum-
mary written in well-formed English?). We did
not allow any ties. We randomly selected 10 arti-
cles from the CNN test set and 10 from the Dai-
lyMail test set. The study was completed by five
participants, all native or proficient English speak-
ers. Each participant was presented with the 20
articles. The order of summaries to rank was ran-
domized per article and the order of articles per
participant. Examples of summaries our subjects
ranked are shown in Figure 2.

Our second experiment assessed the degree to
which our model retains key information from the
document following a question-answering (QA)
paradigm which has been previously used to eval-
uate summary quality and text compression (Mor-

2We used pyrouge, a Python package, to compute all
ROUGE scores with parameters “-a -c 95 -m -n 4 -w 1.2.”

3Cheng and Lapata (2016) report ROUGE recall scores on
the DailyMail dataset only. We used their code (https://
github.com/cheng6076/NeuralSum) to produce ROUGE
F1 scores on both CNN and DailyMail datasets. For other
systems, all results are taken from their papers.

4We are grateful to Abigail See for providing us with the
output of her system. We did not include output from Nallap-
ati et al. (2017), Chen et al. (2016), Nallapati et al. (2016), or
Tan and Wan (2017) in our human evaluation study, as these
models are trained on a named-entity anonymized version of
the CNN and DailyMail datasets, and as result produce sum-
maries which are not comparable to ours. We did not include
extracts from Cheng and Lapata (2016) either as they were
significantly inferior to LEAD (see Table 2).

ris et al., 1992; Mani et al., 2002; Clarke and La-
pata, 2010). We created a set of questions based
on the gold summary under the assumption that it
highlights the most important document content.
We then examined whether participants were able
to answer these questions by reading system sum-
maries alone without access to the article. The
more questions a system can answer, the better it
is at summarizing the document as a whole.

We worked on the same 20 documents used in
our first elicitation study. We wrote multiple fact-
based question-answer pairs for each gold sum-
mary without looking at the document. Questions
were formulated so as to not reveal answers to sub-
sequent questions. We created 71 questions in to-
tal varying from two to six questions per gold sum-
mary. Example questions are given in Figure 2.
Participants read the summary and answered all
associated questions as best they could without ac-
cess to the original document or the gold summary.
Subjects were shown summaries from three sys-
tems: the LEAD baseline, the abstractive system
of See et al. (2017), and REFRESH. Five partici-
pants answered questions for each summary. We
used the same scoring mechanism from Clarke and
Lapata (2010), i.e., a correct answer was marked
with a score of one, partially correct answers with
a score of 0.5, and zero otherwise. The final
score for a system is the average of all its question
scores. Answers were elicited using Amazon’s
Mechanical Turk crowdsourcing platform. We up-
loaded data in batches (one system at a time) on
Mechanical Turk to ensure that same participant
does not evaluate summaries from different sys-
tems on the same set of questions.

6 Results

We report results using automatic metrics in Ta-
ble 2. The top part of the table compares RE-
FRESH against related extractive systems. The bot-
tom part reports the performance of abstractive
systems. We present three variants of LEAD, one
is computed by ourselves and the other two are
reported in Nallapati et al. (2017) and See et al.
(2017). Note that they vary slightly due to dif-
ferences in the preprocessing of the data. We re-
port results on the CNN and DailyMail datasets
and their combination (CNN+DailyMail).

Cross-Entropy vs Reinforcement Learning
The results in Table 2 show that REFRESH is su-
perior to our LEAD baseline and extractive sys-
tems across datasets and metrics. It outperforms

1753



Models CNN DailyMail CNN+DailyMail
R1 R2 RL R1 R2 RL R1 R2 RL

LEAD (ours) 29.1 11.1 25.9 40.7 18.3 37.2 39.6 17.7 36.2
LEAD∗ (Nallapati et al., 2017) — — — — — — 39.2 15.7 35.5
LEAD (See et al., 2017) — — — — — — 40.3 17.7 36.6
Cheng and Lapata (2016) 28.4 10.0 25.0 36.2 15.2 32.9 35.5 14.7 32.2
Nallapati et al. (2017)∗ — — — — — — 39.6 16.2 35.3
REFRESH 30.4 11.7 26.9 41.0 18.8 37.7 40.0 18.2 36.6
Chen et al. (2016)∗ 27.1 8.2 18.7 — — — — — —
Nallapati et al. (2016)∗ — — — — — — 35.4 13.3 32.6
See et al. (2017) — — — — — — 39.5 17.3 36.4
Tan and Wan (2017)∗ 30.3 9.8 20.0 — — — 38.1 13.9 34.0

Table 2: Results on the CNN and DailyMail test sets. We report ROUGE-1 (R1), ROUGE-2 (R2), and ROUGE-L
(RL) F1 scores. Extractive systems are in the first block and abstractive systems in the second. Table cells are filled
with — whenever results are not available. Models marked with ∗ are not directly comparable to ours as they are
based on an anonymized version of the dataset.

the extractive system of Cheng and Lapata (2016)
which is trained on individual labels. REFRESH
is not directly comparable with Nallapati et al.
(2017) as they generate anonymized summaries.
Their system lags behind their LEAD baseline on
ROUGE-L on the CNN+DailyMail dataset (35.5%
vs 35.3%). Also note that their model is trained
on collective labels and has a significant lead over
Cheng and Lapata (2016). As discussed in Sec-
tion 3 cross-entropy training on individual labels
tends to overgenerate positive labels leading to
less informative and verbose summaries.

Extractive vs Abstractive Systems Our auto-
matic evaluation results further demonstrate that
REFRESH is superior to abstractive systems (Chen
et al., 2016; Nallapati et al., 2016; See et al.,
2017; Tan and Wan, 2017) which are all vari-
ants of an encoder-decoder architecture (Sutskever
et al., 2014). Despite being more faithful to the ac-
tual summarization task (hand-written summaries
combine several pieces of information from the
original document), abstractive systems lag behind
the LEAD baseline. Tan and Wan (2017) present
a graph-based neural model, which manages to
outperform LEAD on ROUGE-1 but falters when
higher order ROUGE scores are used. Amongst
abstractive systems See et al. (2017) perform best.
Interestingly, their system is mostly extractive, ex-
hibiting a small degree of rewriting; it copies more
than 35% of the sentences in the source docu-
ment, 85% of 4-grams, 90% of 3-grams, 95% of
bigrams, and 99% of unigrams.

Human Evaluation: System Ranking Table 3
shows, proportionally, how often participants
ranked each system, 1st, 2nd, and so on. Per-
haps unsurprisingly human-authored summaries
are considered best (and ranked 1st 39% of the

Models 1st 2nd 3rd 4th QA
LEAD 0.11 0.21 0.34 0.33 36.33
See et al. (2017) 0.14 0.18 0.31 0.36 28.73
REFRESH 0.35 0.42 0.16 0.07 66.34
GOLD 0.39 0.19 0.18 0.24 —

Table 3: System ranking and QA-based evaluations.
Rankings (1st, 2nd, 3rd and 4th) are shown as propor-
tions. Rank 1 is the best and Rank 4, the worst. The
column QA shows the percentage of questions that par-
ticipants answered correctly by reading system sum-
maries.

time). REFRESH is ranked 2nd best followed by
LEAD and See et al. (2017) which are mostly
ranked in 3rd and 4th places. We carried out pair-
wise comparisons between all models in Table 3 to
assess whether system differences are statistically
significant. There is no significant difference be-
tween LEAD and See et al. (2017), and REFRESH
and GOLD (using a one-way ANOVA with post-
hoc Tukey HSD tests; p < 0.01). All other differ-
ences are statistically significant.

Human Evaluation: Question Answering The
results of our QA evaluation are shown in the last
column of Table 3. Based on summaries generated
by REFRESH, participants can answer 66.34%
of questions correctly. Summaries produced by
LEAD and the abstractive system of See et al.
(2017) provide answers for 36.33% and 28.73% of
the questions, respectively. Differences between
systems are all statistically significant (p < 0.01)
with the exception of LEAD and See et al. (2017).

Although the QA results in Table 3 follow the
same pattern as ROUGE in Table 2, differences
among systems are now greatly amplified. QA-
based evaluation is more focused and a closer re-
flection of users’ information need (i.e., to find out
what the article is about), whereas ROUGE simply
captures surface similarity (i.e., n-gram overlap)

1754



between output summaries and their references.
Interestingly, LEAD is considered better than See
et al. (2017) in the QA evaluation, whereas we
find the opposite when participants are asked to
rank systems. We hypothesize that LEAD is in-
deed more informative than See et al. (2017) but
humans prefer shorter summaries. The average
length of LEAD summaries is 105.7 words com-
pared to 61.6 for See et al. (2017).

7 Related Work

Traditional summarization methods manually de-
fine features to rank sentences for their salience
in order to identify the most important sentences
in a document or set of documents (Kupiec et al.,
1995; Mani, 2001; Radev et al., 2004; Filatova
and Hatzivassiloglou, 2004; Nenkova et al., 2006;
Spärck Jones, 2007). A vast majority of these
methods learn to score each sentence indepen-
dently (Barzilay and Elhadad, 1997; Teufel and
Moens, 1997; Erkan and Radev, 2004; Mihalcea
and Tarau, 2004; Shen et al., 2007; Schilder and
Kondadadi, 2008; Wan, 2010) and a summary is
generated by selecting top-scored sentences in a
way that is not incorporated into the learning pro-
cess. Summary quality can be improved heuris-
tically, (Yih et al., 2007), via max-margin meth-
ods (Carbonell and Goldstein, 1998; Li et al.,
2009), or integer-linear programming (Woodsend
and Lapata, 2010; Berg-Kirkpatrick et al., 2011;
Woodsend and Lapata, 2012; Almeida and Mar-
tins, 2013; Parveen et al., 2015).

Recent deep learning methods (Kågebäck et al.,
2014; Yin and Pei, 2015; Cheng and Lapata, 2016;
Nallapati et al., 2017) learn continuous features
without any linguistic preprocessing (e.g., named
entities). Like traditional methods, these ap-
proaches also suffer from the mismatch between
the learning objective and the evaluation crite-
rion (e.g., ROUGE) used at the test time. In
comparison, our neural model globally optimizes
the ROUGE evaluation metric through a rein-
forcement learning objective: sentences are highly
ranked if they occur in highly scoring summaries.

Reinforcement learning has been previously
used in the context of traditional multi-document
summarization as a means of selecting a sentence
or a subset of sentences from a document clus-
ter. Ryang and Abekawa (2012) cast the sentence
selection task as a search problem. Their agent
observes a state (e.g., a candidate summary), ex-
ecutes an action (a transition operation that pro-
duces a new state selecting a not-yet-selected sen-

tence), and then receives a delayed reward based
on tf ∗ idf. Follow-on work (Rioux et al., 2014)
extends this approach by employing ROUGE as
part of the reward function, while Henß et al.
(2015) further experiment with Q-learning. Mollá-
Aliod (2017) has adapt this approach to query-
focused summarization. Our model differs from
these approaches both in application and formu-
lation. We focus solely on extractive summariza-
tion, in our case states are documents (not sum-
maries) and actions are relevance scores which
lead to sentence ranking (not sentence-to-sentence
transitions). Rather than employing reinforcement
learning for sentence selection, our algorithm per-
forms sentence ranking using ROUGE as the re-
ward function.

The REINFORCE algorithm (Williams, 1992)
has been shown to improve encoder-decoder text-
rewriting systems by allowing to directly opti-
mize a non-differentiable objective (Ranzato et al.,
2015; Li et al., 2016; Paulus et al., 2017) or to in-
ject task-specific constraints (Zhang and Lapata,
2017; Nogueira and Cho, 2017). However, we
are not aware of any attempts to use reinforcement
learning for training a sentence ranker in the con-
text of extractive summarization.

8 Conclusions

In this work we developed an extractive summa-
rization model which is globally trained by opti-
mizing the ROUGE evaluation metric. Our train-
ing algorithm explores the space of candidate sum-
maries while learning to optimize a reward func-
tion which is relevant for the task at hand. Ex-
perimental results show that reinforcement learn-
ing offers a great means to steer our model to-
wards generating informative, fluent, and concise
summaries outperforming state-of-the-art extrac-
tive and abstractive systems on the CNN and Dai-
lyMail datasets. In the future we would like to fo-
cus on smaller discourse units (Mann and Thomp-
son, 1988) rather than individual sentences, mod-
eling compression and extraction jointly.

Acknowledgments We gratefully acknowledge
the support of the European Research Council
(Lapata; award number 681760), the European
Union under the Horizon 2020 SUMMA project
(Narayan, Cohen; grant agreement 688139), and
Huawei Technologies (Cohen).

1755



References

Martı́n Abadi, Ashish Agarwal, Paul Barham, Eugene
Brevdo, Zhifeng Chen, Craig Citro, Greg S. Cor-
rado, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Ian Goodfellow, Andrew Harp,
Geoffrey Irving, Michael Isard, Yangqing Jia, Rafal
Jozefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh
Levenberg, Dan Mané, Rajat Monga, Sherry Moore,
Derek Murray, Chris Olah, Mike Schuster, Jonathon
Shlens, Benoit Steiner, Ilya Sutskever, Kunal Tal-
war, Paul Tucker, Vincent Vanhoucke, Vijay Vasude-
van, Fernanda Viégas, Oriol Vinyals, Pete Warden,
Martin Wattenberg, Martin Wicke, Yuan Yu, and Xi-
aoqiang Zheng. 2015. TensorFlow: Large-scale ma-
chine learning on heterogeneous systems. Software
available from tensorflow.org.

Miguel B. Almeida and André F. T. Martins. 2013. Fast
and robust compressive summarization with dual de-
composition and multi-task learning. In Proceed-
ings of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics. Sofia, Bulgaria,
pages 196–206.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In Proceedings of
the 3rd International Conference on Learning Rep-
resentations. San Diego, California, USA.

Regina Barzilay and Michael Elhadad. 1997. Using
lexical chains for text summarization. In Proceed-
ings of the ACL Workshop on Intelligent Scalable
Text Summarization. Madrid, Spain, pages 10–17.

Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and
Noam Shazeer. 2015. Scheduled sampling for se-
quence prediction with recurrent neural networks.
In Advances in Neural Information Processing Sys-
tems 28. pages 1171–1179.

Taylor Berg-Kirkpatrick, Dan Gillick, and Dan Klein.
2011. Jointly learning to extract and compress. In
Proceedings of the 49th Annual Meeting of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies. Portland, Oregon, USA, pages
481–490.

Ziqiang Cao, Chengyao Chen, Wenjie Li, Sujian
Li, Furu Wei, and Ming Zhou. 2016. TGSum:
Build tweet guided multi-document summarization
dataset. In Proceedings of the 30th AAAI Con-
ference on Artificial Intelligence. Phoenix, Arizona
USA, pages 2906–2912.

Jaime Carbonell and Jade Goldstein. 1998. The use
of MMR, diversity-based reranking for reordering
documents and producing summaries. In Proceed-
ings of the 21st Annual International ACM SIGIR
Conference on Research and Development in Infor-
mation Retrieval. Melbourne, Australia, pages 335–
336.

Ciprian Chelba, Tomas Mikolov, Mike Schuster, Qi Ge,
Thorsten Brants, Phillipp Koehn, and Tony Robin-
son. 2013. One billion word benchmark for measur-
ing progress in statistical language modeling. Tech-
nical report, Google.

Qian Chen, Xiaodan Zhu, Zhenhua Ling, Si Wei, and
Hui Jiang. 2016. Distraction-based neural networks
for modeling documents. In Proceedings of the 25th
International Joint Conference on Artificial Intelli-
gence. New York, USA, pages 2754–2760.

Jianpeng Cheng and Mirella Lapata. 2016. Neural
summarization by extracting sentences and words.
In Proceedings of the 54th Annual Meeting of the
Association for Computational Linguistics. Berlin,
Germany, pages 484–494.

James Clarke and Mirella Lapata. 2010. Discourse
constraints for document compression. Computa-
tional Linguistics 36(3):411–441.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. Journal of Machine Learning Research
12:2493–2537.

Günes Erkan and Dragomir R. Radev. 2004. LexRank:
Graph-based lexical centrality as salience in text
summarization. Journal of Artificial Intelligence
Research 22(1):457–479.

Elena Filatova and Vasileios Hatzivassiloglou. 2004.
Event-based extractive summarization. In Pro-
ceedings of ACL Workshop on Text Summarization
Branches Out. Barcelona, Spain, pages 104–111.

Katja Filippova, Enrique Alfonseca, Carlos A. Col-
menares, Lukasz Kaiser, and Oriol Vinyals. 2015.
Sentence compression by deletion with LSTMs. In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing. Lisbon,
Portugal, pages 360–368.

Sebastian Henß, Margot Mieskes, and Iryna Gurevych.
2015. A reinforcement learning approach for adap-
tive single- and multi-document summarization. In
Proceedings of International Conference of the Ger-
man Society for Computational Linguistics and Lan-
guage Technology. Duisburg-Essen, Germany, pages
3–12.

Karl Moritz Hermann, Tomáš Kočiský, Edward
Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su-
leyman, and Phil Blunsom. 2015. Teaching ma-
chines to read and comprehend. In Advances in Neu-
ral Information Processing Systems 28. pages 1693–
1701.

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long Short-Term Memory. Neural Computation
9(8):1735–1780.

1756



Nal Kalchbrenner, Edward Grefenstette, and Phil Blun-
som. 2014. A convolutional neural network for
modelling sentences. In Proceedings of the 52nd
Annual Meeting of the Association for Computa-
tional Linguistics. Baltimore, Maryland, pages 655–
665.

Yoon Kim. 2014. Convolutional neural networks for
sentence classification. In Proceedings of the 2014
Conference on Empirical Methods in Natural Lan-
guage Processing. Doha, Qatar, pages 1746–1751.

Yoon Kim, Yacine Jernite, David Sontag, and Alexan-
der M. Rush. 2016. Character-aware neural lan-
guage models. In Proceedings of the 30th AAAI
Conference on Artificial Intelligence. Phoenix, Ari-
zona USA, pages 2741–2749.

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In Proceed-
ings of the 3rd International Conference on Learn-
ing Representations. San Diego, California, USA.

Mikael Kågebäck, Olof Mogren, Nina Tahmasebi, and
Devdatt Dubhashi. 2014. Extractive summariza-
tion using continuous vector space models. In Pro-
ceedings of the Workshop on Continuous Vector
Space Models and their Compositionality. Gothen-
burg, Sweden, pages 31–39.

Julian Kupiec, Jan Pedersen, and Francine Chen. 1995.
A trainable document summarizer. In Proceed-
ings of the 18th Annual International ACM SIGIR
Conference on Research and Development in Infor-
mation Retrieval. Seattle, Washington, USA, pages
406–407.

Tao Lei, Regina Barzilay, and Tommi Jaakkola.
2015. Molding CNNs for text: Non-linear, non-
consecutive convolutions. In Proceedings of the
2015 Conference on Empirical Methods in Natu-
ral Language Processing. Lisbon, Portugal, pages
1565–1575.

Jiwei Li, Thang Luong, and Dan Jurafsky. 2015. A
hierarchical neural autoencoder for paragraphs and
documents. In Proceedings of the 53rd Annual
Meeting of the Association for Computational Lin-
guistics and the 7th International Joint Conference
on Natural Language Processing. Beijing, China,
pages 1106–1115.

Jiwei Li, Will Monroe, Alan Ritter, Dan Jurafsky,
Michel Galley, and Jianfeng Gao. 2016. Deep rein-
forcement learning for dialogue generation. In Pro-
ceedings of the 2016 Conference on Empirical Meth-
ods in Natural Language Processing. Austin, Texas,
pages 1192–1202.

Liangda Li, Ke Zhou, Gui-Rong Xue, Hongyuan Zha,
and Yong Yu. 2009. Enhancing diversity, cover-
age and balance for summarization through struc-
ture learning. In Proceedings of the 18th inter-
national Conference on World Wide Web. Madrid,
Spain, pages 71–80.

Chin-Yew Lin and Eduard Hovy. 2003. Auto-
matic evaluation of summaries using n-gram co-
occurrence statistics. In Proceedings of the
2003 Human Language Technology Conference of
the North American Chapter of the Association
for Computational Linguistics. Edmonton, Canada,
pages 71–78.

Inderjeet Mani. 2001. Automatic Summarization. Nat-
ural language processing. John Benjamins Publish-
ing Company.

Inderjeet Mani, Gary Klein, David House, Lynette
Hirschman, Therese Firmin, and Beth Sundheim.
2002. SUMMAC: A text summarization evaluation.
Natural Language Engineering 8(1):4368.

William C. Mann and Sandra A. Thompson. 1988.
Rhetorical Structure Theory: Toward a functional
theory of text organization. Text 8(3):243–281.

Rada Mihalcea and Paul Tarau. 2004. TextRank:
Bringing order into texts. In Proceedings of the
2004 Conference on Empirical Methods in Natural
Language Processing. Barcelona, Spain, pages 404–
411.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg Cor-
rado, and Jeffrey Dean. 2013. Distributed represen-
tations of words and phrases and their composition-
ality. In Advances in Neural Information Processing
Systems 26. pages 3111–3119.

Diego Mollá-Aliod. 2017. Towards the use of deep re-
inforcement learning with global policy for query-
based extractive summarisation. In Proceedings of
the Australasian Language Technology Association
Workshop 2017. Brisbane, Australia, pages 103–
107.

Andrew H. Morris, George M. Kasper, and Dennis A.
Adams. 1992. The effects and limitations of au-
tomated text condensing on reading comprehen-
sion performance. Information Systems Research
3(1):17–35.

Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017.
SummaRuNNer: A recurrent neural network based
sequence model for extractive summarization of
documents. In Proceedings of the 31st AAAI Confer-
ence on Artificial Intelligence. San Francisco, Cali-
fornia USA, pages 3075–3081.

Ramesh Nallapati, Bowen Zhou, Cı́cero Nogueira dos
Santos, Çaglar Gülçehre, and Bing Xiang. 2016.
Abstractive text summarization using sequence-to-
sequence RNNs and beyond. In Proceedings of the
20th SIGNLL Conference on Computational Natural
Language Learning. Berlin, Germany, pages 280–
290.

Shashi Narayan, Nikos Papasarantopoulos, Shay B.
Cohen, and Mirella Lapata. 2017. Neural extrac-
tive summarization with side information. CoRR
abs/1704.04530.

1757



Ani Nenkova and Kathleen McKeown. 2011. Auto-
matic summarization. Foundations and Trends in
Information Retrieval 5(2–3):103–233.

Ani Nenkova, Lucy Vanderwende, and Kathleen McK-
eown. 2006. A compositional context sensitive
multi-document summarizer: Exploring the factors
that influence summarization. In Proceedings of the
29th Annual International ACM SIGIR Conference
on Research and Development in Information Re-
trieval. pages 573–580.

Rodrigo Nogueira and Kyunghyun Cho. 2017. Task-
oriented query reformulation with reinforcement
learning. In Proceedings of the 2017 Conference on
Empirical Methods in Natural Language Process-
ing. Copenhagen, Denmark, pages 585–594.

Daraksha Parveen, Hans-Martin Ramsl, and Michael
Strube. 2015. Topical coherence for graph-based ex-
tractive summarization. In Proceedings of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing. Lisbon, Portugal, pages 1949–
1954.

Romain Paulus, Caiming Xiong, and Richard Socher.
2017. A deep reinforced model for abstractive sum-
marization. CoRR abs/1705.04304.

Dragomir Radev, Timothy Allison, Sasha Blair-
Goldensohn, John Blitzer, Arda Çelebi, Stanko
Dimitrov, Elliott Drabek, Ali Hakim, Wai Lam,
Danyu Liu, Jahna Otterbacher, Hong Qi, Horacio
Saggion, Simone Teufel, Michael Topper, Adam
Winkel, and Zhu Zhang. 2004. MEAD — A plat-
form for multidocument multilingual text summa-
rization. In Proceedings of the 4th International
Conference on Language Resources and Evaluation.
Lisbon, Portugal, pages 699–702.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2015. Sequence level
training with recurrent neural networks. CoRR
abs/1511.06732.

Cody Rioux, Sadid A. Hasan, and Yllias Chali. 2014.
Fear the REAPER: A system for automatic multi-
document summarization with reinforcement learn-
ing. In Proceedings of the 2014 Conference on Em-
pirical Methods in Natural Language Processing.
Doha, Qatar, pages 681–690.

Alexander M. Rush, Sumit Chopra, and Jason Weston.
2015. A neural attention model for abstractive sen-
tence summarization. In Proceedings of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing. Lisbon, Portugal, pages 379–389.

Seonggi Ryang and Takeshi Abekawa. 2012. Frame-
work of automatic text summarization using rein-
forcement learning. In Proceedings of the 2012
Joint Conference on Empirical Methods in Natu-
ral Language Processing and Computational Nat-
ural Language Learning. Jeju Island, Korea, pages
256–265.

Frank Schilder and Ravikumar Kondadadi. 2008.
FastSum: Fast and accurate query-based multi-
document summarization. In Proceedings of the
45th Annual Meeting of the Association of Compu-
tational Linguistics and HLT: Short Papers. Colum-
bus, Ohio, USA, pages 205–208.

Natalie Schluter. 2017. The limits of automatic sum-
marisation according to rouge. In Proceedings of the
15th Conference of the European Chapter of the As-
sociation for Computational Linguistics: Short Pa-
pers. Valencia, Spain, pages 41–45.

Abigail See, Peter J. Liu, and Christopher D. Manning.
2017. Get to the point: Summarization with pointer-
generator networks. In Proceedings of the 55th An-
nual Meeting of the Association for Computational
Linguistics. Vancouver, Canada, pages 1073–1083.

Dou Shen, Jian-Tao Sun, Hua Li, Qiang Yang, and
Zheng Chen. 2007. Document summarization us-
ing conditional random fields. In Proceedings of the
20th International Joint Conference on Artifical in-
telligence. Hyderabad, India, pages 2862–2867.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In Pro-
ceedings of the 54th Annual Meeting of the Asso-
ciation for Computational Linguistics. Berlin, Ger-
many, pages 1683–1692.

Karen Spärck Jones. 2007. Automatic summarising:
The state of the art. Information Processing and
Management 43(6):1449–1481.

Ilya Sutskever, Oriol Vinyals, and Quoc V. Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in Neural Information Process-
ing Systems 27. pages 3104–3112.

Richard S. Sutton and Andrew G. Barto. 1998. Rein-
forcement Learning : An Introduction. MIT Press.

Krysta Marie Svore, Lucy Vanderwende, and Christo-
pher J. C. Burges. 2007. Enhancing single-
document summarization by combining ranknet and
third-party sources. In Proceedings of the 2007
Joint Conference on Empirical Methods in Natural
Language Processing and Computational Natural
Language Learning. Prague, Czech Republic, pages
448–457.

Jiwei Tan and Xiaojun Wan. 2017. Abstractive docu-
ment summarization with a graph-based attentional
neural model. In Proceedings of the 55th Annual
Meeting of the Association for Computational Lin-
guistics. Vancouver, Canada, pages 1171–1181.

Simone Teufel and Marc Moens. 1997. Sentence ex-
traction as a classification task. In Proceedings of
ACL Workshop on Intelligent and Scalable Text Sum-
marization. Madrid, Spain, pages 58–65.

1758



Xiaojun Wan. 2010. Towards a unified approach to
simultaneous single-document and multi-document
summarizations. In Proceedings of the 23rd Inter-
national Conference on Computational Linguistics.
Beijing, China, pages 1137–1145.

Ronald J. Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
ment learning. Machine Learning 8(3-4):229–256.

Kristian Woodsend and Mirella Lapata. 2010. Auto-
matic generation of story highlights. In Proceedings
of the 48th Annual Meeting of the Association for
Computational Linguistics. Uppsala, Sweden, pages
565–574.

Kristian Woodsend and Mirella Lapata. 2012. Multi-
ple aspect summarization using integer linear pro-
gramming. In Proceedings of the 2012 Joint Con-
ference on Empirical Methods in Natural Language
Processing and Computational Natural Language
Learning. Jeju Island, Korea, pages 233–243.

Kelvin Xu, Jimmy Lei Ba, Ryan Kiros, Kyunghyun
Cho, Aaron Courville, Ruslan Salakhutdinov,
Richard S. Zemel, and Yoshua Bengio. 2015. Show,
attend and tell: Neural image caption generation
with visual attention. In Proceedings of the 32nd In-
ternational Conference on Machine Learning. Lille,
France, pages 2048–2057.

Michihiro Yasunaga, Rui Zhang, Kshitijh Meelu,
Ayush Pareek, Krishnan Srinivasan, and Dragomir
Radev. 2017. Graph-based neural multi-document
summarization. In Proceedings of the 21st Confer-
ence on Computational Natural Language Learning.
Vancouver, Canada, pages 452–462.

Wen-tau Yih, Joshua Goodman, Lucy Vanderwende,
and Hisami Suzuki. 2007. Multi-document summa-
rization by maximizing informative content-words.
In Proceedings of the 20th International Joint Con-
ference on Artifical intelligence. Hyderabad, India,
pages 1776–1782.

Wenpeng Yin and Yulong Pei. 2015. Optimizing sen-
tence modeling and selection for document summa-
rization. In Proceedings of the 24th International
Joint Conference on Artificial Intelligence. Buenos
Aires, Argentina, pages 1383–1389.

Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015.
Character-level convolutional networks for text clas-
sification. In Advances in Neural Information Pro-
cessing Systems 28. pages 649–657.

Xingxing Zhang and Mirella Lapata. 2017. Sentence
simplification with deep reinforcement learning. In
Proceedings of the 2017 Conference on Empirical
Methods in Natural Language Processing. Copen-
hagen, Denmark, pages 595–605.

1759


