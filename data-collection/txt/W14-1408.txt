



















































Incremental semantic scales by strings


Proceedings of the EACL 2014 Workshop on Type Theory and Natural Language Semantics (TTNLS), pages 63–71,
Gothenburg, Sweden, April 26-30 2014. c©2014 Association for Computational Linguistics

Incremental semantic scales by strings

Tim Fernando
Computer Science Department

Trinity College Dublin
Dublin, Ireland

Tim.Fernando@tcd.ie

Abstract

Scales for natural language semantics are
analyzed as moving targets, perpetually
under construction and subject to ad-
justment. Projections, factorizations and
constraints are described on strings of
bounded but refinable granularities, shap-
ing types by the processes that put seman-
tics in flux.

1 Introduction

An important impetus for recent investigations
into type theory for natural language semantics is
the view of “semantics in flux,” correcting “the im-
pression” from, for example, Montague 1973 “of
natural languages as being regimented with mean-
ings determined once and for all” (Cooper 2012,
page 271). The present work concerns scales
for temporal expressions and gradable predicates.
Two questions that loom large from the perspec-
tive of semantics in flux are: how to construct
scales and align them against one another (e.g.
Klein and Rovatsos 2011). The formal study car-
ried out below keeps scales as simple as possi-
ble, whilst allowing for necessary refinements and
adjustments. The basic picture is that a scale is
a moving target finitely approximable as a string
over an alphabet which we can expand to refine
granularity. Reducing a scale to a string comes,
however, at a price; indivisible points must give
way to refinable intervals (embodying underspec-
ification).

Arguments for a semantic reorientation around
intervals (away from points) are hardly new. Best
known within linguistic semantics perhaps are
those in tense and aspect from Bennett and Partee
1972, which seem to have met less resistance than
arguments in the degree literature from Kennedy
2001 and Schwarzschild and Wilkinson 2002 (see
Solt 2013). At the center of the present argument

for intervals is a notion of finite approximabil-
ity, plausibly related to cognition. What objection
might there be to it? The fact that no finite lin-
ear order is dense raises the issue of compatibility
between finite approximability and density — no
small worry, given the popularity of dense linear
orders for time (e.g. Kamp and Reyle 1993, Pratt-
Hartmann 2005, Klein 2009) as well as measure-
ment (e.g. Fox and Hackl 2006).

Fortunately, finite linear orders can be orga-
nized into a system of approximations converging
at the limit to a dense linear order. The present
work details ways to form such systems and lim-
its, with density reanalyzed as refinability of ar-
bitrary finite approximations. A familiar example
provides some orientation.

Example A (calendar) We can represent a cal-
endar year as the string

smo := Jan Feb Mar · · · Dec

of length 12, or, were we interested also in days
d1,d2. . .,d31, the string

smo,dy := Jan,d1 Jan,d2 · · · Jan,d31
Feb,d1 · · · Dec,d31

of length 365 for a non-leap year (Fernando
2011).1 In contrast to the points in the real line
R, a box can split, as Jan in smo does (30 times)
to

Jan,d1 Jan,d2 · · · Jan,d31
in smo,dy, on introducing days d1, d2,. . ., d31
into the picture. Reversing direction and gener-
alizing from

mo := {Jan,Feb,. . .Dec}
1We draw boxes (instead of the usual curly braces { and })

around sets-as-symbols, stringing together “snapshots” much
like a cartoon/film strip.

63



to any set A, we define the function ρA on strings
(of sets) to componentwise intersect with A

ρA(α1 · · ·αn) := (α1 ∩A) · · · (αn ∩A)
(throwing out non-A’s from each box) so that

ρmo(smo,dy) = Jan
31

Feb
28 · · · Dec 31.

Next, the block compression bc(s) of a string s
compresses all repeating blocks αn (for n ≥ 1)
of a box α in a string s to α for

bc(s) :=


bc(αs′) if s = ααs′

α bc(βs′) if s = αβs′ with
α 6= β

s otherwise

so that if bc(s) = α1 · · ·αn then αi 6= αi+1 for i
from 1 to n− 1. In particular,

bc( Jan
31

Feb
28 · · · Dec 31) = smo.

Writing bcA for the function mapping s to
bc(ρA(s)), we have

bcmo(smo,dy) = smo.

In general, we can refine a string sA of granu-
larity A to one sA′ of granularity A′ ⊇ A with
bcA(sA′) = sA. Iterating over a chain

A ⊆ A′ ⊆ A′′ ⊆ · · · ,
we can glue together strings sA, sA′ , sA′′ , . . . such
that

bcX(sX′) = sX for X ∈ {A,A′, A′′, . . .}.
Details in section 2.

We shall refer to the expressions we can put in
a box as fluents (short for temporal propositions),
and assume they are the elements of a set Φ. While
the set Φ of fluents might be infinite, we restrict the
boxes that we string together to finite sets of flu-
ents. Writing Fin(Φ) for the set of finite subsets
of Φ and 2X for the powerset of X (i.e. the set
of X’s subsets), we will organize the strings over
the infinite alphabet Fin(Φ) around finite alpha-
bets 2A, for A ∈ Fin(Φ)

Fin(Φ)∗ =
⋃

A∈Fin(Φ)
(2A)∗.

In addition to projecting Fin(Φ) down to 2A for
some A ∈ Fin(Φ), we can build up, forming

the componentwise unions of strings α1 · · ·αn and
β1 · · ·βn of the same number n of sets for their su-
perposition

α1 · · ·αn & β1 · · ·βn := (α1 ∪ β1) · · · (αn ∪ βn)

and superposing languages L and L′ over Fin(Φ)
by superposing strings in L and L′ of the same
length

L & L′ := {s&s′ | s ∈ L, s′ ∈ L′ and
length(s) = length(s′)}

(Fernando 2004). For example,

smo,dy = ρmo(smo,dy) & ρdy(smo,dy)

where dy := {d1, d2 . . . , d31}. More generally,
writing LA for the image of L under ρA

LA := {ρA(s) | s ∈ L},

observe that for L ⊆ (2B)∗ and A ⊆ B, L is
included in the superposition of LA and LB−A

L ⊆ LA & LB−A.

The next step is to identify a language L′ such that

L = (LA & LB−A) ∩ L′ (1)

other than L′ = L. For a decomposition (1) of
L into (generic) contextual constraints L′ separate
from the (specific) components LA and LB−A,
it will be useful to sharpen LA, LB−A and &,
factoring in bc and variants of bc (not to mention
∩). Measurements ranging from crude compar-
isons (of order) to quantitative judgments (mul-
tiplying unit magnitudes with real numbers) can
be expressed through fluents in Φ. We interpret
the fluents relative to suitable strings in Fin(Φ)∗,
presented below in category-theoretic terms con-
nected to type theory (e.g. Mac Lane and Moerdijk
1992). Central to this presentation is the notion of
a presheaf on Fin(Φ) — a functor from the op-
posite category Fin(Φ)op (a morphism in which
is a pair (B,A) of finite subsets of Φ such that
A ⊆ B) to the category Set of sets and functions.
The Fin(Φ)-indexed family of functions bcA (for
A ∈ Fin(Φ)) provides an important example that
we generalize in section 2.

An example of linguistic semantic interest to
which block compression bc applies is

64



Example B (continuous change) The pair (a),
(b) below superposes two events, soup cooling and
an hour passing, in different ways (Dowty 1979).

(a) The soup cooled in an hour.

(b) The soup cooled for an hour.

A common intuition is that in an hour requires
an event that culminates, while for an hour re-
quires a homogeneous event. In the case of (a),
the culmination may be that some threshold tem-
perature (supplied by context) was reached, while
in (b), the homogeneity may be the steady drop
in temperature over that hour. We might track
soup cooling by a descending sequence of degrees,
d1 > d2 > · · · > dn, with d1 at the beginning
of the hour, and dn at the end. But no sample of
finite size n can be complete. To overcome this
limitation, it is helpful to construe the ith box in
a string as a description of an interval Ii over the
real line R. We call a sequence I1 · · · In of inter-
vals a segmentation if

⋃n
i=1 Ii is an interval and for

1 ≤ i < n, Ii < Ii+1, where < is full precedence

I < I ′ iff (∀r ∈ I)(∀r′ ∈ I ′) r < r′.

Now, assuming an assignment of degrees sDg(r)
to real numbers r representing temporal instants,
the idea is to define satisfaction |= between inter-
vals I and fluents sDg < d according to

I |= sDg < d iff (∀r ∈ I) sDg(r) < d

and similarly for d ≤ sDg. We then lift |= to
segmentations I1 · · · In and strings α1 · · ·αn ∈
Fin(Φ)n of the same length n such that

I1 · · · In |= α1 · · ·αn iff whenever 1 ≤ i ≤ n
and ϕ ∈ Ii, Ii |= ϕi

and analyze (a) above as (c) below, where d is
the contextually given threshold required by in an
hour, and x is the start of that hour, the end of
which is marked by hour(x).

(c) x, d ≤ sDg d ≤ sDg hour(x), sDg < d

All fluents ϕ in (c) have the stative property

(†) for all intervals I and I ′ whose union I ∪ I ′
is an interval,

I ∪ I ′ |= ϕ iff I |= ϕ and I ′ |= ϕ

(Dowty 1979). (†) holds also for the fluents in
the string (d) below for (b), where the subinterval
relation v is inclusion restricted to intervals,

I |= [w]ϕ iff (∀I ′ v I) I ′ |= ϕ

and sDg↓ is the fluent

∃x (sDg < x ∧ Prev(x ≤ sDg))

saying the degree drops (with I |= Prev(ϕ) iff
I ′I |= ϕ for some I ′ < I such that I ∪ I ′ is
an interval).

(d) x [w]sDg↓ hour(x), [w]sDg↓
(†) is intimately related to block compression bc
(Fernando 2013b), supporting derivations of (c)
and (d) by a modification &bc of & defined in §2.3
below.

Our third example directly concerns computa-
tional processes, which we take up in section 3.

Example C (finite automata) Given a finite al-
phabet A, a (non-deterministic) finite automaton
A over A is a quadruple (Q, δ, F, q0) consisting
of a finite set Q of states, a transition relation
δ ⊆ Q × A × Q, a subset F of Q consisting of
final (accepting) states, and an initial state q0 ∈ Q.
A accepts a string a1 · · · an ∈ A∗ precisely if there
is a string q1 · · · qn ∈ Qn such that

qn ∈ F and δ(qi−1, ai, qi) for 1 ≤ i ≤ n (2)

(where q0 is A’s designated initial state). The ac-
cepting runs of A are strings of the form

a1, q1 · · · an, qn ∈ (2A∪Q)∗

satisfying (2). While we can formulate such runs
as strings over the alphabet A×Q, we opt for the
alphabet 2A∪Q (formed from A ∪ Q ∈ Fin(Φ))
to link up smoothly with examples where more
than one automata may be running, not all neces-
sarily known nor in perfect harmony with others.
Such examples are arguably of linguistic interest,
the so-called Imperfective Paradox (Dowty 1979)
being a case in point (Fernando 2008). That said,
the attention below is largely on certain category-
theoretic preliminaries for type theory.2

We adopt the following notational conventions.
Given a function f and a set X , we write

2Only the most rudimentary category-theoretic notions
are employed; explanations can be found in any number of in-
troductions to category theory available online (and in print).

65



- f � X for f restricted to X ∩ domain(f)
- image(f) for {f(x) | x ∈ domain(f)}
- fX for image(f � X)

- f−1X for {x ∈ domain(f) | f(x) ∈ X}
and if g is a function for which image(f) ⊆
domain(g),

- f ; g for f composed (left to right) with g

(f ; g)(x) := g(f(x))

for all x ∈ domain(f).
We say f is a function on X if

domain(f) = X ⊇ image(f)
— i.e., f : X → X . The kernel of f , ker(f), is
the equivalence relation on domain(f) that holds
between s, s′ such that f(s) = f(s′). Clearly,

ker(f) ⊆ ker(f ; g)
when f ; g is defined.

2 Some presheaves on Fin(Φ)

Given a function f on Fin(Φ)∗ and A ∈ Fin(Φ),
let us write fA for the function ρA; f on Fin(Φ)∗

fA(s) := f(ρA(s))

(recalling ρA(α1 · · ·αn) := (α1∩A) · · · (αn∩A)
and generalizing bcA from Example A). To extract
a presheaf on Fin(Φ) from the Fin(Φ)-indexed
family of functions fA, certain requirements on f
are helpful. Toward that end, let us agree that

- f preserves a function g with domain
Fin(Φ)∗ if g = f ; g

- f is idempotent if f preserves itself (i.e., f =
f ; f )

- the vocabulary voc(s) of s ∈ Fin(Φ)∗ is the
set of fluents that occur in s

voc(α1 · · ·αn) :=
n⋃

i=1

αi

whence s ∈ voc(s)∗.
Note that for idempotent f , image(f) consists of
canonical representatives f(s) of ker(f)’s equiva-
lence classes {s′ ∈ Fin(Φ)∗ | f(s′) = f(s)}.

2.1 Φ-preserving functions
A function f on Fin(Φ)∗ is Φ-preserving if f pre-
serves voc and fA, for all A ∈ Fin(Φ). Note that
bc is Φ-preserving, as is the identity function id on
Fin(Φ)∗.

Proposition 1. If f is Φ-preserving then f is
idempotent and

fB; fA = fA∩B

for all A,B ∈ Fin(Φ).
Let Pf be the function with domain

Fin(Φ) ∪ {(B,A) ∈ Fin(Φ)×Fin(Φ) |A ⊆ B}

mapping A ∈ Fin(Φ) to f(2A)∗

Pf (A) := {f(s) | s ∈ (2A)∗}

and a Fin(Φ)op-morphism (B,A) to the restric-
tion of fA to Pf (B)

Pf (B,A) := fA � Pf (B).

Corollary 2. If f is Φ-preserving then Pf is a
presheaf on Fin(Φ).

Apart from bc, we get a Φ-preserving function
by stripping off any initial or final empty boxes

unpad(s) :=


unpad(s′) if s = s′ or

else s = s′

s otherwise

so that unpad(s) neither begins nor ends with .
Notice that bc; unpad = unpad; bc.

Proposition 3. If f and g are Φ-preserving and
f ; g = g; f , then f ; g is Φ-preserving.

2.2 The Grothendieck construction
Given a presheaf F on Fin(Φ), the category

∫
F

of elements of F (also known as the Grothendieck
construction for F ) has

- objects (A, s) ∈ Fin(Φ) × F (A) (making∑
X∈Fin(Φ) F (X) the set of objects in

∫
F )

- morphisms (B, s′, A, s) from objects (B, s′)
to (A, s) when A ⊆ B and F (B,A)(s′) = s

(e.g. Mac Lane and Moerdijk 1992). Let πf be the
left projection

πf (A, s) = A

66



from
∫

Pf back to Fin(Φ). The inverse limit of
Pf , lim←−Pf , is the set of (

∫
Pf )-valued presheaves

p on Fin(Φ) (i.e. functors p : Fin(Φ)op → ∫ Pf )
that are inverted by πf

πf (p(A)) = A for all A ∈ Fin(Φ).
That is, p(A) = (A, sA) for some sA ∈ f(2A)∗
such that

(‡) sA = fA(sB) whenever A ⊆ B ∈ Fin(Φ).
(‡) is the essential restriction that lim←−Pf adds
to objects {sX}X∈Fin(Φ) of the dependent type∏

X∈Fin(Φ) Pf (X).

2.3 Superposition and non-determinism
Taking the presheaf Pid induced by the identity
function id on Fin(Φ)∗, observe that in

∫
Pid,

there is a product of

(∅, ) and ({ϕ}, ϕ )
but not of

({ϕ}, ) and ({ϕ}, ϕ ).

The tag A in (A, s) differentiating (∅, ) from
({ϕ}, ) cannot be ignored when forming prod-
ucts in

∫
Pid. A necessary and sufficient condition

for (A, s) and (B, s′) to have a product is

ρB(s) = ρA(s′)

presupposed by the pullback of

(A, s) → (A ∩B, ρB(s)) ← (B, s′).
By comparison, the superposition s&s′ exists (as
a string) if and only if

ρ∅(s) = ρ∅(s′)

for

(voc(s), s) → (∅, ρ∅(s)) ← (voc(s′), s′)

(or length(s) = length(s′) as ρ∅(s) =
length(s)).

Products in
∫

Pid are superpositions, but superpo-
sitions need not be products.

Next, we step from id to other Φ-preserving
functions f such as bc and bc; unpad. A pair
(A, s) and (B, s′) of

∫
Pf -objects may fail to

have a product not because there is no
∫

Pf -object
(A ∪B, s′′) such that

(A, s) ← (A ∪B, s′′) → (B, s′)

but too many non-isomorphic choices for such s′′.
Consider the case of bc; unpad, with (∅, �) terminal
in
∫

Pbc;unpad (where � is the null string of length
0). For distinct fluents a and b ∈ Φ, there are 13
strings s ∈ Pbc;unpad({a, b}) such that

({a}, a )← ({a, b}, s)→ ({b}, b ))

corresponding to the 13 interval relations in Allen
1983 (Fernando 2007).

The explosion of solutions s′′ ∈ Pf (A ∪ B) to
the equations

fA(s′′) = s and fB(s′′) = s′

given

(A, s) → (A ∩B, fB(s)) ← (B, s′)

(i.e., fB(s) = fA(s′)) is paralleled by the trans-
formation, under f , of a language L to

Lf := f−1fL

used to turn the superposition L&L′ of languages
L and L′ into

L &f L′ := f(Lf & L′f ).

For f := bc; unpad, the set a &f b consists of
the 13 strings mentioned above. (We follow the
usual practice of conflating a string s with the sin-
gleton language {s} whenever convenient.)

Stepping from strings to languages, we lift the
presheaf Pf to the presheaf Qf mapping A ∈
Fin(Φ) to

Qf (A) := {fL | L ⊆ (2A)∗}

and a Fin(Φ)op-morphism (B,A) to the function

Qf (B,A) := (λL ∈ Qf (B)) fAL

sending L ∈ Qf (B) to fAL ∈ Qf (A). Then,
for non-identity morphisms between

∫
Qf -objects

(A,L) and (A,L′) where L ⊆ L′, we add in-
clusions from (A,L) to (A,L′) to the

∫
Qf -

morphisms for the category C(Φ, f) with

- objects the same as those in
∫

Qf , and

- morphisms (B,L′, A, L) from objects
(B,L′) to (A,L) whenever A ⊆ B and
fAL

′ ⊆ L.

67



As is the case with
∫

Qf -morphisms, the sources
(domains) of C(Φ, f)-morphisms entail their tar-
gets (codomains). To make these entailments pre-
cise, we can identify the space of possible worlds
with the inverse limit of Pf , and reduce (A,L) to

[[A,L]]f := {p ∈ lim←−Pf |
(∃s ∈ L) p(A) = (A, s)}.

The inclusion

[[B,L′]]f ⊆ [[A,L]]f
can then be pronounced: (B,L′) f -entails (A,L).

Proposition 4. Let f be a Φ-preserving function
and (A,L) and (B,L′) be

∫
Qf -objects such that

A ⊆ B. (B,L′) f -entails (A,L) iff there is a
C(Φ, f)-morphism from (B,L′) to (A,L).

Relaxing the assumption A ⊆ B, one can also
check that for f ∈ {bc, unpad, (bc; unpad)}, pull-
backs of

(A,L)→ (A ∩B, (f∅L) ∩ f∅L′)← (B,L′)
in C(Φ, f) are given by

(A,L)← (A ∪B,L&fL′)→ (B,L′) (3)
although (3) need not hold for L&fL′ to be well-
defined.

3 Constraints and finite automata

We now bring finite automata into the picture, re-
calling from section 1 Example C’s superpositions

a1 · · · an & q1 · · · qn (4)
where a1 · · · an is accepted by a finite automaton
A going through the sequence q1 · · · qn of (inter-
nal) states. We can assume the tape alphabet A ⊇
{a1, . . . , an} and the state set Q ⊇ {q1, . . . , qn}
are two disjoint subsets of the set Φ of fluents; flu-
ents in A are “observable” (on a tape), while flu-
ents in Q are “hidden” (inside a black box). Dis-
joint though they may be,A andQ are tightly cou-
pled byA’s transition table δ ⊆ Q×A×Q (not to
mention the other components of A, its initial and
final states). That coupling can hardly be recreated
by superposition & (or some simple modification
&f ) without the help of some machinery encoding
δ. But first, there is the small matter of formulat-
ing the map a1 · · · an 7→ a1 · · · an implicit in
(4) above as a natural transformation.

3.1 Bottom ⊥ naturally
If the function ηA such that for a1 · · · an ∈ A∗,

ηA(a1 · · · an) = a1 · · · an
is to be the A-th component of a natural trans-
formation η : S ⇒ Pid, we need to specify
the presheaf S on Fin(Φ). To form a function
S(B,A) : S(B) → S(A) for A ⊆ B ∈ Fin(Φ)
with B∗ ⊆ S(B) and A∗ ⊆ S(A), it is handy to
introduce a bottom ⊥ for B −A, adjoining ⊥ to a
finite subset X of Φ for X⊥ := X + {⊥} before
forming the strings in S(X) := X⊥∗. We then set
S(B,A) : B⊥∗ → A⊥∗

S(B,A)(�) := �

S(B,A)(βs) :=
{
β S(B,A)(s) if β ∈ A⊥
⊥ S(B,A)(s) otherwise

(e.g. S({a, b}, {a})(ba⊥) = ⊥a⊥) and let ηA :
A⊥∗ → (2A)∗ map � to itself, and

ηA(αs) :=
{

ηA(s) if α = ⊥
α ηA(s) otherwise

(e.g. η{a}(⊥a⊥) = a ).
Proposition 5. η is a natural transformation
from S to Pid.

3.2 Another presheaf and category

Turning now to finite automata, we recall a funda-
mental result about languages that are regular (i.e.,
accepted by finite automata),3 the Büchi-Elgot-
Trakhtenbrot theorem (e.g. Thomas 1997)

for every finite alphabet A 6= ∅, a language
L ⊆ A+ is regular iff there is a sentence ϕ of
MSOA such that

L = {s ∈ A+ | s |=A ϕ} .

MSOA is Monadic Second Order logic with a
unary relation symbol Ua for each a ∈ A, plus a
binary relation symbol S for successors. The pred-
icate |=A treats a string a1a2 · · · an over A as an
MSOA-model with universe {1, 2, . . . , n}, Ua as
its subset {i | ai = a}, and S as

{(1, 2), (2, 3), . . . , (n− 1, n)}
3Whether or not this sense of regular has an interesting

connection with regular categories (which are, among other
things, finitely complete), I do not know.

68



so that, for instance,

a1 · · · an |=A ∃x∃y S(x, y) iff n ≥ 2 (5)
for all finite A 6= ∅. Notice that no a ∈ A is
required to interpret ∃x∃y S(x, y), which after all
is an MSO∅-sentence suited to strings ⊥n ∈ S(∅).
Furthermore, for a 6= b and {a, b} ⊆ A,

no string in A+ satisfies ∃x Ua(x) ∧ Ub(x) (6)
which makes it awkward to extend |=A to formulas
with free variables (requiring variable assignments
on top of strings in A+).

A simple way to accommodate variables is to
include them in A and interpret MSOA-formulas
not over A+ but over (2A)+, lifting |=A from
strings s over A to a predicate |=A on strings over
2A such that

s |=A ϕ iff ηA(s) |=A ϕ (7)
for every MSOA-sentence ϕ (Fernando 2013a).
For all s ∈ (2A)+, we set
s |=A S(x, y) iff ρ{x,y}(s) ∈ ∗ x y ∗ (8)

for A ⊇ {x, y}, and
s |=A Ua(x) iff ρ{a,x}(s) ∈ Ea a, x Ea (9)

forA ⊇ {a, x}, where Ea := ( + a )∗. We must
be careful to incorporate into the clauses defining
s |=A ϕ the presupposition that each first-order
variable x free in ϕ occurs uniquely in s — i.e.
s |=A x = x where
s |=A x = y iff ρ{x,y}(s) ∈ ∗ x, y ∗ (10)

for x, y ∈ A. In particular, we restrict negation
¬ϕ to strings |=A-satisfying x = x, for each first-
order variable x free in ϕ. We can then put

s |=A ∃x ϕ iff (∃s′) ρA(s′) = ρA(s)
and s′ |=A∪{x} ϕ

and similarly for second-order existential quantifi-
cation. The equivalence (5) above then becomes

s |=A ∃x∃y S(x, y) iff ρ∅(s) ∈ + (11)
and in place of (6), we have

s |=A ∃x Ua(x) ∧ Ub(x) iff ρ{a,b}(s) ∈
(2{a,b})∗ a, b (2{a,b})∗ (12)

for a, b ∈ A.
Working back from (7)

s |=A ϕ iff ηA(s) |=A ϕ

to the Büchi-Elgot-Trakhtenbrot theorem, one can
check that for every finite A and MSOA-formula
ϕ, the set

LA(ϕ) := {s ∈ (2A)+ | s |=A ϕ}

of strings over 2A that |=A-satisfy ϕ is regular, us-
ing the fact that for all A′ ⊆ A, the restriction
of ρA′ to (2A)∗ is computable by a finite state
transducer. But for A ⊆ Φ,4 ρA′ � (2A)∗ is just
Pid(A,A′). In recognition of the role of these
functions in |=A, we effectivize the presheaf Qid
from §2.3 as follows. Let RΦ be the presheaf on
Fin(Φ) mapping

- A ∈ Fin(Φ) to the set of languages over the
alphabet 2A that are regular

RΦ(A) := {L ∈ Qid(A) | L is regular}

and

- a Fin(Φ)op-morphism (B,A) to the restric-
tion of Qid(B,A) to RΦ(B)

RΦ(B,A) := (λL ∈ RΦ(B)) ρAL.∫
RΦ-objects are then pairs (A,L) where A ∈

Fin(Φ) and L is a regular language over the al-
phabet 2A, while

∫
RΦ-morphisms are quadru-

ples (B,L,A, ρAL) from (B,L) to (A, ρAL) for
A ⊆ B ∈ Fin(Φ). To account for the Boolean op-
erations in MSO (as opposed to the predications
(8)– (10) involving ρA), we add inclusions for a
category R(Φ) with

- the same objects as
∫

RΦ

- morphisms all of those in C(Φ, id) be-
tween objects in

∫
RΦ — i.e., quadruples

(B,L′, A, L) such that A ⊆ B ∈ Fin(Φ),
L′ ⊆ (2B)∗ is regular, L ⊆ (2A)∗ is regular,
and ρAL′ ⊆ L.

Let us agree to write

(B,L′) ; (A,L)
4Note an MSOA-formula ϕ is not strictly a fluent in Φ but

is formed in part from fluents.

69



to mean (B,L′, A, L) is a R(Φ)-morphism.
Clearly, for s ∈ (2A)+, A′ ⊆ A and L ⊆ (2A′)+,

ρA′(s) ∈ L iff (A, {s}) ; (A′, L).
In particular, for x ∈ A and s ∈ (2A)+,
s |=A x = x iff (A, {s}) ; ({x}, ∗ x ∗)

and similarly for x = x replaced by the differ-
ent MSOA-formulas specified in clauses (8)–(12)
above. The MSOA-sentence

spec(A) := ∀x
∨
a∈A

(Ua(x) ∧
∧

b∈A−{a}
¬Ub(x))

associating a unique a ∈ A with each string po-
sition (presupposed in |=A but not in |=A) fits the
same pattern

s |=A spec(A) iff ρA(s) ∈ { a | a ∈ A}+
iff (A ∪ voc(s), {s}) ;

(A, { a | a ∈ A}+)
iff ρA(s) ∈ ηAA+.

Let us define a string s ∈ Fin(Φ)+ to be
- A-specified if s |=A spec(A)
- A-underspecified if ρA(s) ∈ ηA(A⊥+−A+)
- A-overspecified if ρA(s) 6∈ image(ηA)

so that for a 6= a′ and A = {a, a′}, a a is A-
specified, a is A-underspecified, and a, a′ a
is A-overspecified. Given a finite automaton A
over A with set Q of states, its set AcRun(A) of
accepting runs (Example C) is both A-specified
and Q-specified, provided A ∩ Q = ∅ (and other-
wise risks being A-overspecified). The language
accepted by A is the η−1A -image of the language
ρAAcRun(A) that is Q-underspecified, in accor-
dance with the intuition that the states are hidden.
From the regularity of AcRun(A), however, it is
clear that we can make these states visible, with
AcRun(A) as the language accepted by a finite au-
tomaton A′ (over 2A∪Q) that may (or may not)
have the same set Q of states.

The maps ρA and inclusions ⊆ underlying the
morphisms of R(Φ) represent the two ways in-
formation may grow from

∫
RΦ-objects (A,L)

to (B,L′) — expansively with A ⊆ B and L =
ρAL

′, and eliminatively with L′ ⊆ L and A = B.
The same notion of f -entailment defined in §2.3
through the sets [[A,L]]f applies, but we have been
careful here to fix f to id, in view of

Proposition 6. For A ⊆ B ∈ Fin(Φ), ϕ an
MSOA-formula and s ∈ (2B)+,

s |=B ϕ iff ρA(s) |=A ϕ.
Proposition 6 says that s |=B ϕ depends only on
the part ρA(s) of s mentioned in ϕ. It is a par-
ticular instance of the satisfaction condition in in-
stitutions, expressing the invariance of truth under
change of notation (Goguen and Burstall 1992).
Proposition 6 breaks down if we replace ρA by
bcA or unpadA, as can be seen with A = ∅, and
ϕ = ∃x∃y S(x, y), for which recall (11).
3.3 Varying grain and span
Troublesome as they are, the maps bcA and
unpadA have some use. Just as we can vary tem-
poral grain through bc (Examples A and B in sec-
tion 1), we can vary temporal span through unpad.
For instance, we can combine runs of automataA1
over A1 and A2 over A2 in
L(A1,A2) := AcRun(A1) &unpad AcRun(A2)
with the subscript unpad on & relaxing the re-
quirement thatA1 andA2 start and finish together
(running in lockstep throughout). For i ∈ {1, 2},
and Qi the state set for Ai,

AcRun(Ai) = unpadAi∪QiL(A1,A2)
assuming the sets A1, A2, Q1 and Q2 are pair-
wise disjoint. The disjointness assumption rules
out any communication (or interference) between
A1 and A2. As subsets of one large set Φ of
fluents, however, it is perfectly natural for these
sets to intersect (and communicate through a com-
mon vocabulary), and we might express very par-
tial constraints involving them through, for ex-
ample, MSO-formulas. Recalling the definition
LA(ϕ) := {s ∈ (2A)+ | s |=A ϕ}, we can rewrite
the satisfaction condition

s |=B ϕ iff fA(s) |=A ϕ
on MSOA-formulas ϕ, A ⊆ B ∈ Fin(Φ) and s ∈
(2B)+ as

LB(ϕ) = {s ∈ (2B)+ | fA(s) ∈ LA(ϕ)}.
This equation lifts any regular language LA(ϕ) to
a regular languageLB(ϕ), provided f is computed
by a finite-state transducer (as in the case of bc or
unpad). Inverse images under such relations are a
useful addition to the stock of operations constitut-
ing MSO-formulas as well as regular expressions.

70



References
James F. Allen. 1983. Maintaining knowledge about

temporal intervals. C. ACM, 26(11):832–843.

Michael Bennett and Barbara Partee. 1972. Toward the
logic of tense and aspect in English. Technical re-
port, System Development Corporation, Santa Mon-
ica, California. Reprinted in Partee 2008.

Robin Cooper. 2012. Type theory and semantics in flux.
In Handbook of the Philosophy of Science. Volume
14: Philosophy of Linguistics. pages 271–323.

David R. Dowty. 1979. Word Meaning and Montague
Grammar. Reidel, Dordrecht.

Tim Fernando. 2004. A finite-state approach to events
in natural language semantics. J. Logic and Compu-
tation, 14(1):79–92.

Tim Fernando. 2007. Observing events and situations
in time. Linguistics and Philosophy 30(5):527–550.

Tim Fernando. 2008. Branching from inertia worlds. J.
Semantics 25(3):321–344.

Tim Fernando. 2011. Regular relations for temporal
propositions. Natural Language Engineering 17(2):
163–184.

Tim Fernando. 2013a. Finite state methods and descrip-
tion logics Proceedings of the 11th International
Conference on Finite State Methods and Natural
Language Processing, pages 63 – 71.

Tim Fernando. 2013b. Dowty’s aspect hypothesis seg-
mented. Proceedings of the 19th Amsterdam Collo-
quium, pages 107 – 114.

Danny Fox and Martin Hackl. 2006. The universal
density of measurement. Linguistics and Philosophy
29(5): 537 – 586.

Joseph Goguen and Rod Burstall. 1992., Institutions:
Abstract model theory for specification and pro-
gramming, J. ACM, 39(1):95–146.

Hans Kamp and Uwe Reyle. 1993. From Discourse to
Logic. Kluwer.

Christopher Kennedy. 2001. Polar opposition and the
ontology of degrees. Linguistics and Philosophy 24.
33 – 70.

Ewan Klein and Michael Rovatsos. 2011. Temporal
Vagueness, Coordination and Communication In
Vagueness in Communication 2009, LNAI 6517,
pages 108–126.

Wolfgang Klein. 2009. How time is encoded. In W.
Klein and P. Li, editors, The Expression of Time,
pages 39 – 81, Mouton De Gruyter.

Saunders Mac Lane and Ieke Moerdijk. 1992. Sheaves
in Geometry and Logic: A First Introduction to
Topos Theory. Springer.

Richard Montague. 1973. The proper treatment of
quantification in ordinary English. In Approaches to
Natural Language, pages 221 – 42. D. Reidel, Dor-
drecht.

Ian Pratt-Hartmann. 2005. Temporal prepositions and
their logic. Artificial Intelligence 166: 1–36.

Roger Schwarzschild and Karina Wilkinson. 2002.
Quantifiers in comparatives: A semantics of de-
gree based on intervals. Natural Language Seman-
tics 10(1):1–41.

Stephanie Solt. 2013. Scales in natural language.
Manuscript.

Wolfgang Thomas. 1997. Languages, automata and
logic. In Handbook of Formal Languages: Beyond
Words, volume 3, pages 389 – 455. Springer-Verlag.

71


