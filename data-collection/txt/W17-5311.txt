



















































LCT-MALTA's Submission to RepEval 2017 Shared Task


Proceedings of the 2nd Workshop on Evaluating Vector-Space Representations for NLP, pages 56–60,
Copenhagen, Denmark, September 7–11, 2017. c©2017 Association for Computational Linguistics

LCT-MALTA’s Submission to RepEval 2017 Shared Task

Hoa Trong Vu, Thuong-Hai Pham, Xiaoyu Bai
Marc Tanti, Lonneke van der Plas, Albert Gatt

thuong-hai.pham.16@um.edu.mt, hoa.vutrong.16@um.edu.mt, xiaoyu.bai.16@um.edu.mt
marctanti@gmail.com, lonneke.vanderplas@um.edu.mt, albert.gatt@um.edu.mt

Institute of Linguistics, University of Malta, Malta

Abstract

We present in this paper our team LCT-
MALTA’s submission to the RepEval 2017
Shared Task on natural language infer-
ence. Our system is a simple system
based on a standard BiLSTM architec-
ture, using as input GloVe word embed-
dings augmented with further linguistic in-
formation. We use max pooling on the
BiLSTM outputs to obtain embeddings for
sentences. On both the matched and the
mismatched test sets, our system clearly
beats the shared task’s BiLSTM baseline
model.

1 Introduction

The RepEval 2017 Shared Task aims to evalu-
ate fixed-length vector representations (or embed-
dings) of sentences on the basis of a natural lan-
guage understanding task, viz. natural language
inference (NLI), also known as recognising tex-
tual entailments. Given two sentences, the first
being the premise and the second the hypothe-
sis, the goal of NLI is to train a classifier to pre-
dict whether the relation of the hypothesis to the
premise is one of entailment, contradiction or a
neutral relation. The training and test data for
this 3-way classification task at RepEval 2017 are
drawn from the Multi-Genre NLI, or MultiNLI
corpus (see Williams et al. (2017) for details).
Task participants are provided with both training
and development datasets, where parts of the de-
velopment data match the training data in terms of
genre, topic etc. (referred to as matched examples)
and other parts do not (referred to as mismatched
examples).

This paper presents Team LCT-MALTA’s sub-
mission to the shared task. In line with previous
research, we obtain a single vector which is the

combined representation of both the premise and
the hypothesis and feed it into a Multilayer Per-
ceptron (MLP) for the actual 3-way classification.

2 Related Work

Various works in recent years have dealt with
the creation of distributed sentence representa-
tions, typically based on existing word embed-
dings such as word2vec (Mikolov et al., 2013)
or GloVe (Pennington et al., 2014). The base-
line models at the shared task use GloVe vec-
tors and present three approaches to obtaining sen-
tence embeddings (Williams et al., 2017): a) tak-
ing the sum of the embeddings of all the words in
the sentence (continous bag of words, CBOW); b)
taking the average of the hidden state outputs of
a bidirectional LSTM (BiLSTM; Hochreiter and
Schmidhuber 1997) across all the words; and c)
the Enhanced Sequential Inference Model (ESIM)
by (Chen et al., 2017), which, however, relies on
cross-sentence attention, which submissions to the
shared task may not make use of.

Instead of the BiLSTM architecture, Tai et al.
(2015) propose a tree-structured LSTM to capture
the hierarchical structure of natural language sen-
tences. Conneau et al. (2017) use BiLSTM with
max pooling and achieve state-of-art results when
testing their sentence representations on an NLI
task based on the Stanford Natural Language In-
ference (SNLI) dataset (Bowman et al., 2015). Lin
et al. (2017) introduce a self-attention mechanism
with multiple hops of attention on top of BiLSTM,
where the different hops attend to different parts
of the input sentence. Their approach represents
sentence embeddings as 2-D matrices instead of
vectors.

56



3 Our Approach

We present in our submission a simple BiLSTM-
based approach related to the second baseline
model. Crucially, however, we add the following
alterations:

• Our input word vectors are enhanced with
part-of-speech (POS), dependency and word
character information.

• Instead of taking the average of the BiLSTM
outputs across all words (mean pooling), we
use max pooling.

3.1 Enhanced Word Embeddings

A central component of our approach is the en-
hancement of the pre-trained GloVe vectors with
additional linguistic information. The main mo-
tivation is the following: BiLSTM proceeds lin-
early, processing an input sentence word by word.
The structure of natural language sentences, how-
ever, is hierarchical in nature 1. We wish to
encode some information on linguistic structure
while keeping the simple, standard BiLSTM ar-
chitecture. Therefore, we attach such additional
information to the representations of individual
words.

In conrete terms, we initialise our model with
300-D pre-trained GloVe vectors (as is done in the
BiLSTM baseline model) and enhance them with
the following content:

3.1.1 POS-tag Embeddings
Part-of-speech (POS) tagging is a common first
step in syntactic sentence processing. We postu-
late that explicit knowledge of a the input words’
syntactic categories might help representing the
meaning of the input sentence. Thus, using mod-
ules from UDPipe (Straka et al., 2016), we to-
kenise and tag input sentences with universal POS-
tags. We then generate randomly-initialised, 20-D
embeddings for all POS-tags.

3.1.2 Dependency Label Embeddings
Dependency parsing captures the binary depen-
dency relation between words in a sentence and
determines the central word of an input sentence
(the head word of the sentence) (Kübler et al.,
2009). In particular, it is enable to encode longer

1As mentioned in section 2, Tai et al. (2015) propose a
tree-structured LSTM for similar reasons

dependencies across multiple words. As such, de-
pendency parsing provides vital information on
the sentence’s structure.

Hence, we apply UDPipe’s (Straka et al., 2016)
state-of-the-art dependency parser to the input sen-
tence and subsequently equip each pre-trained
word embedding with that word’s dependency in-
formation, which in turn consists of the word’s
head word and its dependency relation to the head.
In concrete terms, for each word wi, we map the
embedding of its head word wj to a 50-D vector
and generate a 50-D randomly initialised embed-
ding for the dependency relation from wi to its
head. We then take the element-wise product be-
tween these two 50-D vectors to obtain the full de-
pendency embedding for the word wi. Formally,
the dependency embedding wid for any token wi
is computed as follows:

wid = Ed[dij ]� (Wd ∗ wj) (1)
where dij is the dependency relation between to-
ken wi and the head token wj , Ed is the 50-D em-
bedding of that dependency relation, Wd is a ma-
trix of size 50x300 which maps wj (originally a
300-D GloVe vector) to a 50-D vector, and � is
the element-wise product.

3.1.3 Character Embeddings
The usage of character embeddings is mainly
inspired by various works which incorporate
character-level embeddings into the distributed
representation of words to yield improved word
embeddings (Santos and Zadrozny, 2014; Bo-
janowski et al., 2016; Kim et al., 2016). For each
token, we employ LSTMs to compute embeddings
for each of its characters. The LSTM input at each
time step is one character, i.e. one letter, and the
output is a 100-D hidden state. The last 100-D hid-
den state vector is then considered the full charac-
ter embedding for that token.

3.1.4 Final Input Word Embeddings
Finally, for each word, we concatenate its
original GloVe embeddings with all of the
above-mentioned additional linguistic informa-
tion. Thus, our final embedding for each word,
which we input to the BiLSTM to compute sen-
tence embeddings, consists of the concatenation
of the word’s 300-D Glove embedding, its 20-D
POS-tag embedding, its 50-D dependency embed-
ding and 100-D character embedding. As men-
tioned, all of the embeddings except for the GloVe

57



word (GloVe)

300-D

char

100-D

dep

50-D

pos

20-D

Figure 1: Our enhanced word embedding

word embeddings are randomly initialized. Figure
1 illustrates an instance of our final enhanced word
embeddings.

3.2 BiLSTM Sentence Embedding with Max
Pooling

The enhanced word embeddings described above
are fed into a standard BiLSTM architecture, with
a 100-D hidden state output vector for each unidi-
rectional LSTM. Concatenating the forward (

−→
ht)

and backward (
←−
ht) output vectors for each node,

we obtain n hidden state vectors
−→
h , where n is the

number of words in the input sentence and
−→
h is a

200-D vector corresponding to one word.

−→
ht =

−−−−→
LSTM(wt,

−−→
ht−1) (2)

←−
ht =

←−−−−
LSTM(wt,

←−−
ht−1) (3)

Conneau et al. (2017) examine various super-
vised methods of obtaining general-purpose sen-
tence embeddings, with their conclusion favouring
a BiLSTM architecture combined with max pool-
ing. We follow their findings and use max pool-
ing on the n BiLSTM hidden outputs

−→
h . Indeed,

our own experiments shall show the superiority of
max pooling over average pooling (see section 4).
Hence, for each dimension d of the 200 dimen-
sions, we take the maximum among the values of
all hidden outputs at d. The result is a single 200-
D vector embedding of the input sentence.

3.3 Combining Premise and Hypothesis
Representations

We separately obtain the previously described sen-
tence embeddings for the premise and the hypoth-
esis. Mou et al. (2015) examine multiple heuris-
tics for combining the same-length embeddings
of two sentences in NLI tasks, including concate-
nating the two vectors and taking their element-
wise difference or product. We use a combina-
tion of some of these heuristics. More specif-
ically, we concatenate the two sentence embed-
dings, then further concatenate a) their element-
wise maximum and b) their element-wise product

enhanced word
embeddings

enhanced word
embeddings

BiLSTM encode
the premise

BiLSTM encode
the hypothesis

u v

(u, v, u*v, max(u,v))

Fully connected layer

3-way classification

max-pooling max-pooling

Figure 2: Architecture of our final submission

to the concatenation of the two sentence embed-
dings. Hence, we obtain as a result a single 800-D
vector that is the combined representation of the
premise and the hypothesis.

3.4 Classification

Finally, we feed the single vector representation
of the two sentences to a tanh layer with a softmax
layer on top of it to perform the 3-way classifica-
tion to the classes entailment, contradiction, and
neutral. Our complete model is illustrated in Fig-
ure 2.

4 Experiments & Results

We experimented with BiLSTM-based sentence
encoders including and excluding our enhanced
word embeddings as well as in combination with
max pooling and average pooling. We use L2 reg-
ularization and set dropout rate to 0.1 to prevent
overfitting. The models are trained in 10 epoches
using Adam optimizer with learning rate 10−3.
The models having the best performance on de-
velopment set are selected to evaluate on test set.

Furthermore, we implemented two systems pre-
sented in literature, viz. (Lin et al., 2017)’s self-
attentive embeddings approach and (Kim, 2014)’s
convolutional neural network (CNN) approach,
and compared their performance with that of our

58



Method Matched Mismatched
Dev Test Dev Test

BiLSTM + average pooling (baseline) 66.9 66.9
BiLSTM + max pooling 67.23 67.18

CNN (Kim, 2014) 67.3 68.0
Automatically learned self-attentive embeddings (Lin et al., 2017) 67.89 67.69

BiLSTM + enhanced embedding + average pooling 68.3 67.8
BiLSTM + enhanced embedding + max pooling 70.8 70.7 71.1 70.8

Table 1: System performances on MultiNLI dataset in order of ascending accuracy scores.

system. In their original work, Lin et al. (2017)
use 30 hops of attention for each sentence. In our
implementation of their algorithm, we deemed 10
hops to be sufficient due to the limited length of
the sentences in our MultiNLI database.

The results of our experiments are shown in Ta-
ble 1, in order of ascending accuracy scores. In
our experiments, our final submission, i.e. the
BiLSTM-encoder with enhanced word embed-
dings and max pooling, as described in section 3,
performed best, obtaining accuracy scores of 70.8
and 71.1 on the matched and mismatched dev set,
respectively. Its final results on the full shared task
test set are 70.7 for matched and 70.8 for mis-
matched data.

5 Discussion

Our results favour max pooling over average pool-
ing, which is in agreement with findings by Con-
neau et al. (2017). Moreover, our enhanced word
embeddings are shown to be effective. Their ad-
dition alone produces the accuracy scores superior
to what the incorporation of (Lin et al., 2017)’s
automatically learned self-attention matrix yields.
The combination of max pooling and enhanced
word embeddings, which are extremely simple al-
terations to the BiLSTM baseline, yield results
which clearly beat the baseline.

Thus, our submitted system to the RepEval
2017 shared task demonstrates that simple alter-
ations to the standard BiLSTM architecture for
computing sentence embeddings can obtain visi-
ble improvements. In particular, linguistic infor-
mation is shown to be useful for the present NLI
task. Therefore, with respect to distributed rep-
resentations of sentence meaning, more sophisti-
cated systems which take into account linguistic
and grammatical relationships are worth further
investigation.

References
Piotr Bojanowski, Edouard Grave, Armand Joulin,

and Tomas Mikolov. 2016. Enriching word vec-
tors with subword information. arXiv preprint
arXiv:1607.04606 .

Samuel R Bowman, Gabor Angeli, Christopher Potts,
and Christopher D Manning. 2015. A large anno-
tated corpus for learning natural language inference.
arXiv preprint arXiv:1508.05326 .

Qian Chen, Xiaodan Zhu, Zhen-Hua Ling, Si Wei, Hui
Jiang, and Diana Inkpen. 2017. Enhanced lstm for
natural language inference. In Proc. ACL.

Alexis Conneau, Douwe Kiela, Holger Schwenk, Loic
Barrault, and Antoine Bordes. 2017. Supervised
learning of universal sentence representations from
natural language inference data. arXiv preprint
arXiv:1705.02364 .

Sepp Hochreiter and Jürgen Schmidhuber. 1997.
Long short-term memory. Neural computation
9(8):1735–1780.

Yoon Kim. 2014. Convolutional neural net-
works for sentence classification. arXiv preprint
arXiv:1408.5882 .

Yoon Kim, Yacine Jernite, David Sontag, and Alexan-
der M Rush. 2016. Character-aware neural language
models. In Thirtieth AAAI Conference on Artificial
Intelligence.

Sandra Kübler, Ryan McDonald, and Joakim Nivre.
2009. Dependency parsing. Synthesis Lectures on
Human Language Technologies 1(1):1–127.

Zhouhan Lin, Minwei Feng, Cicero Nogueira dos San-
tos, Mo Yu, Bing Xiang, Bowen Zhou, and Yoshua
Bengio. 2017. A structured self-attentive sentence
embedding. arXiv preprint arXiv:1703.03130 .

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in neural information processing
systems. pages 3111–3119.

Lili Mou, Rui Men, Ge Li, Yan Xu, Lu Zhang, Rui
Yan, and Zhi Jin. 2015. Natural language inference

59



by tree-based convolution and heuristic matching.
arXiv preprint arXiv:1512.08422 .

Jeffrey Pennington, Richard Socher, and Christopher D
Manning. 2014. Glove: Global vectors for word
representation. In EMNLP. volume 14, pages 1532–
1543.

Cicero D Santos and Bianca Zadrozny. 2014. Learning
character-level representations for part-of-speech
tagging. In Proceedings of the 31st International
Conference on Machine Learning (ICML-14). pages
1818–1826.

Milan Straka, Jan Hajic, and Jana Straková. 2016.
Ud-pipe: Trainable pipeline for processing conll-u
files performing tokenization, morphological anal-
ysis, pos tagging and parsing. In Proceedings of
the Tenth International Conference on Language Re-
sources and Evaluation (LREC 2016).

Kai Sheng Tai, Richard Socher, and Christopher D
Manning. 2015. Improved semantic representations
from tree-structured long short-term memory net-
works. arXiv preprint arXiv:1503.00075 .

Adina Williams, Nikita Nangia, and Samuel R Bow-
man. 2017. A broad-coverage challenge corpus for
sentence understanding through inference. arXiv
preprint arXiv:1704.05426 .

60


