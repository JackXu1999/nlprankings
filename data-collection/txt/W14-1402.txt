



















































System with Generalized Quantifiers on Dependent Types for Anaphora


Proceedings of the EACL 2014 Workshop on Type Theory and Natural Language Semantics (TTNLS), pages 10–18,
Gothenburg, Sweden, April 26-30 2014. c©2014 Association for Computational Linguistics

System with Generalized Quantifiers on Dependent Types for Anaphora

Justyna Grudzińska
Institute of Philosophy
University of Warsaw

Krakowskie Przedmieście 3, 00-927 Warszawa
j.grudzinska@uw.edu.pl

Marek Zawadowski
Institute of Mathematics

University of Warsaw
Banacha 2, 02-097 Warszawa
zawado@mimuw.edu.pl

Abstract

We propose a system for the interpreta-
tion of anaphoric relationships between
unbound pronouns and quantifiers. The
main technical contribution of our pro-
posal consists in combining generalized
quantifiers with dependent types. Empir-
ically, our system allows a uniform treat-
ment of all types of unbound anaphora, in-
cluding the notoriously difficult cases such
as quantificational subordination, cumula-
tive and branching continuations, and don-
key anaphora.

1 Introduction

The phenomenon of unbound anaphora refers to
instances where anaphoric pronouns occur outside
the syntactic scopes (i.e. the c-command domain)
of their quantifier antecedents. The main kinds of
unbound anaphora are regular anaphora to quan-
tifiers, quantificational subordination, and donkey
anaphora, as exemplified by (1) to (3) respectively:

(1) Most kids entered. They looked happy.

(2) Every man loves a woman. They kiss them.

(3) Every farmer who owns a donkey beats it.

Unbound anaphoric pronouns have been dealt
with in two main semantic paradigms: dynamic
semantic theories (Groenendijk and Stokhof,
1991); (Van den Berg, 1996); (Nouwen, 2003) and
the E-type/D-type tradition (Evans, 1977); (Heim,
1990); (Elbourne, 2005). In the dynamic seman-
tic theories pronouns are taken to be (syntactically
free, but semantically bound) variables, and con-
text serves as a medium supplying values for the
variables. In the E-type/D-type tradition pronouns
are treated as quantifiers. Our system combines
aspects of both families of theories. As in the E-
type/D-type tradition we treat unbound anaphoric

pronouns as quantifiers; as in the systems of dy-
namic semantics context is used as a medium sup-
plying (possibly dependent) types as their poten-
tial quantificational domains. Like Dekker’s Pred-
icate Logic with Anaphora and more recent mul-
tidimensional models (Dekker, 1994); (Dekker,
2008), our system lends itself to the compositional
treatment of unbound anaphora, while keeping a
classical, static notion of truth. The main novelty
of our proposal consists in combining generalized
quantifiers (Mostowski, 1957); (Lindström, 1966);
(Barwise and Cooper, 1981) with dependent types
(Martin-Löf, 1972); (Ranta, 1994).

The paper is organized as follows. In Section 2
we introduce informally the main features of our
system. Section 3 sketches the process of English-
to-formal language translation. Finally, sections 4
and 5 define the syntax and semantics of the sys-
tem.

2 Elements of system

2.1 Context, types and dependent types
The variables of our system are always typed. We
write x : X to denote that the variable x is of type
X and refer to this as a type specification of the
variable x. Types, in this paper, are interpreted as
sets. We write the interpretation of the type X as
‖X‖.

Types can depend on variables of other types.
Thus, if we already have a type specification x :
X , then we can also have type Y (x) depending
on the variable x and we can declare a variable y
of type Y by stating y : Y (x). The fact that Y
depends on X is modeled as a projection

π : ‖Y ‖ → ‖X‖.
So that if the variable x of type X is interpreted as
an element a ∈ ‖X‖, ‖Y ‖(a) is interpreted as the
fiber of π over a (the preimage of {a} under π)

‖Y ‖(a) = {b ∈ ‖Y ‖ : π(b) = a}.

10



One standard natural language example of such a
dependence of types is that if m is a variable of
the type of months M , there is a type D(m) of
the days of the month m. Such type dependencies
can be nested, i.e., we can have a sequence of type
specifications of the (individual) variables:

x : X, y : Y (x), z : Z(x, y).

Context for us is a partially ordered sequence of
type specifications of the (individual) variables
and it is interpreted as a parameter set, i.e. as a
set of compatible n-tuples of the elements of the
sets corresponding to the types involved (compat-
ible wrt all projections).

2.2 Quantifiers, chains of quantifiers
Our system defines quantifiers and predicates
polymorphically. A generalized quantifier Q is
an association to every set Z a subset of the
power set of Z. If we have a predicate P de-
fined in a context Γ, then for any interpreta-
tion of the context ‖Γ‖ it is interpreted as a
subset of its parameter set. Quantifier phrases,
e.g. every man or some woman, are interpreted
as follows: ‖everym:man‖ = {‖man‖} and
‖somew:woman‖ = {X ⊆ ‖woman‖ : X 6= ∅}.

The interpretation of quantifier phrases is fur-
ther extended into the interpretation of chains of
quantifiers. Consider an example in (2):

(2) Every man loves a woman. They kiss them.

Multi-quantifier sentences such as the first sen-
tence in (2) are known to be ambiguous with
different readings corresponding to how various
quantifiers are semantically related in the sen-
tence. To account for the readings available for
such multi-quantifier sentences, we raise quanti-
fier phrases to the front of a sentence to form
(generalized) quantifier prefixes - chains of quan-
tifiers. Chains of quantifiers are built from quanti-
fier phrases using three chain-constructors: pack-
formation rule (?, . . . , ?), sequential composi-
tion ?|?, and parallel composition ?? . The se-
mantical operations that correspond to the chain-
constructors (known as cumulation, iteration and
branching) capture in a compositional manner cu-
mulative, scope-dependent and branching read-
ings, respectively.

The idea of chain-constructors and the cor-
responding semantical operations builds on
Mostowski’s notion of quantifier (Mostowski,

1957) further generalized by Lindström to a
so-called polyadic quantifier (Lindström, 1966),
see (Bellert and Zawadowski, 1989). To use a
familiar example, a multi-quantifier prefix like
∀m:M |∃w:W is thought of as a single two-place
quantifier obtained by an operation on the two
single quantifiers, and it has as denotation:

‖∀m:M |∃w:W ‖ = {R ⊆ ‖M‖× ‖W‖:{a ∈ ‖M‖:

{b ∈ ‖W‖: 〈a, b〉 ∈ R} ∈ ‖∃w:W ‖} ∈ ‖∀m:M‖}.
In this paper we generalize the three chain-
constructors and the corresponding semantical op-
erations to (pre-) chains defined on dependent
types.

2.3 Dynamic extensions of contexts

In our system language expressions are all defined
in context. Thus the first sentence in (2) (on the
most natural interpretation where a woman de-
pends on every man) translates (via the process de-
scribed in Section 3) into a sentence with a chain
of quantifiers in a context:

Γ ` ∀m:M |∃w:WLove(m,w),

and says that the set of pairs, a man and a woman
he loves, has the following property: the set of
those men that love some woman each is the set
of all men. The way to understand the second sen-
tence in (2) (i.e. the anaphoric continuation) is that
every man kisses the women he loves rather than
those loved by someone else. Thus the first sen-
tence in (2) must deliver some internal relation be-
tween the types corresponding to the two quanti-
fier phrases.

In our analysis, the first sentence in (2) extends
the context Γ by adding new variable specifica-
tions on newly formed types for every quantifier
phrase in the chain Ch = ∀m:M |∃w:W - for the
purpose of the formation of such new types we in-
troduce a new type constructor T. That is, the first
sentence in (2) (denoted as ϕ) extends the context
by adding:

tϕ,∀m : Tϕ,∀m:M ; tϕ,∃w : Tϕ,∃w:W (tϕ,∀m)

The interpretations of types (that correspond to
quantifier phrases in Ch) from the extended con-
text Γϕ are defined in a two-step procedure using
the inductive clauses through which we define Ch
but in the reverse direction.

11



Step 1. We define fibers of new types by inverse
induction.
Basic step.
For the whole chain Ch = ∀m:M |∃w:W we put:

‖Tϕ,∀m:M |∃w:W ‖ := ‖Love‖.
Inductive step.

‖Tϕ,∀m:M ‖ = {a ∈ ‖M‖: {b ∈ ‖W‖:
〈a, b〉 ∈ ‖Love‖} ∈ ‖∃w:W ‖}

and for a ∈ ‖M‖
‖Tϕ,∃w:W ‖(a) = {b ∈ ‖W‖: 〈a, b〉 ∈ ‖Love‖}

Step 2. We build dependent types from fibers.

‖Tϕ,∃w:W ‖ =
⋃
{{a} × ‖Tϕ,∃w:W ‖(a) :

a ∈ ‖Tϕ,∀m:M ‖}
Thus the first sentence in (2) extends the con-
text Γ by adding the type Tϕ,∀m:M , interpreted
as ‖Tϕ,∀m:M ‖ (i.e. the set of men who love some
women), and the dependent type Tϕ,∃w:W (tϕ,∀m),
interpreted for a ∈ ‖Tϕ,∀m:M ‖ as ‖Tϕ,∃w:W ‖(a)
(i.e. the set of women loved by the man a).

Unbound anaphoric pronouns are interpreted
with reference to the context created by the fore-
going text: they are treated as universal quantifiers
and newly formed (possibly dependent) types in-
crementally added to the context serve as their po-
tential quantificational domains. That is, unbound
anaphoric pronouns theym and themw in the sec-
ond sentence of (2) have the ability to pick up and
quantify universally over the respective interpreta-
tions. The anaphoric continuation in (2) translates
into:

Γϕ ` ∀tϕ,∀m :Tϕ,∀m:M |∀tϕ,∃w :Tϕ,∃w:W (tϕ,∀m )
Kiss(tϕ,∀m , tϕ,∃w),

where:

‖∀tϕ,∀m :Tϕ,∀m:M |∀tϕ,∃w :Tϕ,∃w:W (tϕ,∀m )‖ =

{R ⊆ ‖Tϕ,∃w:W ‖ : {a ∈ ‖Tϕ,∀m:M ‖ :
{b ∈ ‖Tϕ,∃w:W ‖(a) : 〈a, b〉 ∈ R} ∈

‖∀tϕ,∃w :Tϕ,∃w:W (tϕ,∀m )‖(a)} ∈ ‖∀tϕ,∀m :Tϕ,∀m:M ‖},
yielding the correct truth conditions: Every man
kisses every woman he loves.

Our system also handles intra-sentential
anaphora, as exemplified in (3):

(3) Every farmer who owns a donkey beats it.

To account for the dynamic contribution of modi-
fied common nouns (in this case common nouns
modified by relative clauses) we include in our
system ∗-sentences (i.e. sentences with dummy
quantifier phrases). The modified common noun
gets translated into a ∗-sentence (with a dummy-
quantifier phrase f : F ):

Γ ` f : F |∃d:DOwn(f, d)
and we extend the context by dropping the speci-
fications of variables: (f : F, d : D) and adding
new variable specifications on newly formed types
for every (dummy-) quantifier phrase in the chain
Ch∗:

tϕ,f : Tϕ,f :F ; tϕ,∃d : Tϕ,∃d:D(tϕ,f ),

The interpretations of types (that correspond to the
quantifier phrases in the Ch∗) from the extended
context Γϕ are defined in our two-step procedure.
Thus the ∗-sentence in (3) extends the context by
adding the type Tϕ,f :F interpreted as ‖Tϕ,f :F ‖
(i.e. the set of farmers who own some donkeys),
and the dependent type Tϕ,∃d:D(tϕ,f ), interpreted
for a ∈ ‖Tϕ,f :F ‖ as ‖Tϕ,∃d:D‖(a) (i.e. the set of
donkeys owned by the farmer a). The main clause
translates into:

Γϕ ` ∀tϕ,f :Tϕ,f :F |∀tϕ,∃d :Tϕ,∃d:D (tϕ,f )
Beat(tϕ,f , tϕ,∃d),

yielding the correct truth conditions Every farmer
who owns a donkey beats every donkey he owns.
Importantly, since we quantify over fibers (and not
over 〈farmer, donkey〉 pairs), our solution does
not run into the so-called ‘proportion problem’.

Dynamic extensions of contexts and their in-
terpretation are also defined for cumulative and
branching continuations. Consider a cumulative
example in (4):

(4) Last year three scientists wrote (a total of) five
articles (between them). They presented them
at major conferences.

Interpreted cumulatively, the first sentence in (4)
translates into a sentence:

Γ ` (Threes:S , F ivea:A) Write(s, a).
The anaphoric continuation in (4) can be inter-
preted in what Krifka calls a ‘correspondence’

12



fashion (Krifka, 1996). For example, Dr. K wrote
one article, co-authored two more with Dr. N, who
co-authored two more with Dr. S, and the scien-
tists that cooperated in writing one or more articles
also cooperated in presenting these (and no other)
articles at major conferences. In our system, the
first sentence in (4) extends the context by adding
the type corresponding to (Threes:S , F ivea:A):

tϕ,(Threes,F ivea) : Tϕ,(Threes:S ; Fivea:A),

interpreted as a set of tuples

‖Tϕ,(Threes:S ,F ivea:A)‖ =
= {〈c, d〉 : c ∈ ‖S‖ & d ∈ ‖A‖ & c wrote d}

The anaphoric continuation then quantifies univer-
sally over this type (i.e. a set of pairs), yielding the
desired truth-conditions The respective scientists
cooperated in presenting at major conferences the
respective articles that they cooperated in writing.

3 English-to-formal language translation

We assume a two-step translation process.
Representation. The syntax of the representa-

tion language - for the English fragment consid-
ered in this paper - is as follows.
S → Prdn(QP1, . . . , QPn);
MCN → Prdn(QP1, . . . , CN , . . . , QPn);
MCN → CN ;
QP → Det MCN ;
Det→ every,most, three, . . .;
CN → man,woman, . . .;
Prdn → enter, love, . . .;
Common nouns (CNs) are interpreted as types,
and common nouns modified by relative clauses
(MCNs) - as ∗-sentences determining some (pos-
sibly dependent) types.

Disambiguation. Sentences of English, con-
trary to sentences of our formal language, are of-
ten ambiguous. Hence one sentence representa-
tion can be associated with more than one sentence
in our formal language. The next step thus in-
volves disambiguation. We take quantifier phrases
of a given representation, e.g.:

P (Q1X1, Q2X2, Q3X3)
and organize them into all possible chains of quan-
tifiers in suitable contexts with some restrictions
imposed on particular quantifiers concerning the
places in prefixes at which they can occur (a de-
tailed elaboration of the disambiguation process is
left for another place):

Q1x1:X1|Q2x2:X2
Q3x3:X3

P (x1, x2, x3).

4 System - syntax

4.1 Alphabet
The alphabet consists of:
type variables: X,Y, Z, . . .;
type constants: M,men,women, . . .;
type constructors:

∑
,
∏
,T;

individual variables: x, y, z, . . .;
predicates: P, P ′, P1, . . .;
quantifier symbols: ∃, ∀, five,Q1, Q2, . . .;
three chain constructors: ?|?, ?? , (?, . . . , ?).
4.2 Context
A context is a list of type specifications of (indi-
vidual) variables. If we have a context

Γ = x1 : X1, . . . , xn : Xn(〈xi〉i∈Jn)

then the judgement

` Γ : cxt

expresses this fact. Having a context Γ as above,
we can declare a type Xn+1 in that context

Γ ` Xn+1(〈xi〉i∈Jn+1) : type

where Jn+1 ⊆ {1, . . . , n} such that if i ∈ Jn+1,
then Ji ⊆ Jn+1, J1 = ∅. The type Xn+1 depends
on variables 〈xi〉i∈Jn+1 . Now, we can declare a
new variable of the type Xn+1(〈xi〉i∈Jn+1) in the
context Γ

Γ ` xn+1 : Xn+1(〈xi〉i∈Jn+1)

and extend the context Γ by adding this variable
specification, i.e. we have

` Γ, xn+1 : Xn+1(〈xi〉i∈Jn+1) : cxt

Γ′ is a subcontext of Γ if Γ′ is a context and a sub-
list of Γ. Let ∆ be a list of variable specifications
from a context Γ, ∆′ the least subcontext of Γ con-
taining ∆. We say that ∆ is convex iff ∆′ −∆ is
again a context.

The variables the types depend on are always
explicitly written down in specifications. We can
think of a context as (a linearization of) a partially
ordered set of declarations such that the declara-
tion of a variable x (of type X) precedes the dec-
laration of the variable y (of type Y ) iff the type Y
depends on the variable x.

The formation rules for both Σ- and Π-types are
as usual.

13



4.3 Language
Quantifier-free formulas. Here, we need only
predicates applied to variables. So we write

Γ ` P (x1, . . . , xn) : qf-f
to express that P is an n-ary predicate and the
specifications of the variables x1, . . . , xn form a
subcontext of Γ.

Quantifier phrases. If we have a context Γ, y :
Y (~x),∆ and quantifier symbol Q, then we can
form a quantifier phrase Qy:Y (~x) in that context.
We write

Γ, y : Y (~x),∆ ` Qy:Y (~x) : QP
to express this fact. In a quantifier prase Qy:Y (~x):
the variable y is the binding variable and the vari-
ables ~x are indexing variables.

Packs of quantifiers. Quantifiers phrases can
be grouped together to form a pack of quantifiers.
The pack of quantifiers formation rule is as fol-
lows.

Γ ` Qi yi:Yi(~xi) : QP i = 1, . . . k
Γ ` (Q1 y1:Y1(~x1), . . . , Qk yk:Yk(~xk)) : pack

where, with ~y = y1, . . . , yk and ~x =
⋃k
i=1 ~xi, we

have that yi 6= yj for i 6= j and ~y ∩ ~x = ∅. In so
constructed pack: the binding variables are ~y and
the indexing variables are ~x. We can denote such
a pack Pc~y:~Y (~x) to indicate the variables involved.
One-element pack will be denoted and treated as
a quantifier phrase. This is why we denote such a
pack as Qy:Y (~x) rather than (Qy:Y (~x)).

Pre-chains and chains of quantifiers. Chains
and pre-chains of quantifiers have binding vari-
ables and indexing variables. By Ch~y:~Y (~x) we de-
note a pre-chain with binding variables ~y and in-
dexing variables ~x so that the type of the variable
yi is Yi(~xi) with

⋃
i ~xi = ~x. Chains of quantifiers

are pre-chains in which all indexing variables are
bound. Pre-chains of quantifiers arrange quantifier
phrases into N -free pre-orders, subject to some
binding conditions. Mutually comparable QPs in a
pre-chain sit in one pack. Thus the pre-chains are
built from packs via two chain-constructors of se-
quential ?|? and parallel composition ?? . The chain
formation rules are as follows.

1. Packs of quantifiers. Packs of quantifiers
are pre-chains of quantifiers with the same bind-
ing variable and the same indexing variables, i.e.

Γ ` Pc~y:~Y (~x) : pack
Γ ` Pc~y:~Y (~x) : p-ch

2. Sequential composition of pre-chains

Γ ` Ch1 ~y1:~Y1(~x1) : p-ch,Γ ` Ch2 ~y2:~Y2(~x2) : p-ch
Γ ` Ch1 ~y1:~Y1(~x1)|Ch2 ~y2:~Y2(~x2) : p-ch

provided ~y2 ∩ (~y1 ∪ ~x1) = ∅; the specifications of
the variables (~x1 ∪ ~x2) − (~y1 ∪ ~y2) form a con-
text, a subcontext of Γ. In so obtained pre-chain:
the binding variables are ~y1 ∪ ~y2 and the indexing
variables are ~x1 ∪ ~x2.

3. Parallel composition of pre-chains

Γ ` Ch1 ~y1:~Y1(~x1) : p-ch,Γ ` Ch2 ~y2:~Y2(~x2) : p-ch
Γ ` Ch1 ~y1:~Y1(~x1)Ch

2 ~y2:
~Y2(~x2)

: p-ch

provided ~y2 ∩ (~y1 ∪ ~x1) = ∅ = ~y1 ∩ (~y2 ∪ ~x2).
As above, in so obtained pre-chain: the binding
variables are ~y1 ∪ ~y2 and the indexing variables
are ~x1 ∪ ~x2.

A pre-chain of quantifiers Ch~y:~Y (~x) is a chain
iff ~x ⊆ ~y. The following

Γ ` Ch~y:~Y (~x) : chain

expresses the fact thatCh~y:~Y (~x) is a chain of quan-
tifiers in the context Γ.

Formulas, sentences and ∗-sentences. The for-
mulas have binding variables, indexing variables
and argument variables. We write ϕ~y:Y (~x)(~z) for
a formula with binding variables ~y, indexing vari-
ables ~x and argument variables ~z. We have the
following formation rule for formulas

Γ ` A(~z) : qf-f,Γ ` Ch~y:~Y (~x) : p-ch
Γ ` Ch~y:~Y (~x) A(~z) : formula

provided ~y is final in ~z, i.e. ~y ⊆ ~z and variable
specifications of ~z − ~y form a subcontext of Γ. In
so constructed formula: the binding variables are
~y, the indexing variables are ~x, and the argument
variables are ~z.

A formula ϕ~y:Y (~x)(~z) is a sentence iff ~z ⊆ ~y
and ~x ⊆ ~y. So a sentence is a formula without free
variables, neither individual nor indexing. The fol-
lowing

Γ ` ϕ~y:Y (~x)(~z) : sentence

expresses the fact that ϕ~y:Y (~x)(~z) is a sentence
formed in the context Γ.

We shall also consider some special formulas
that we call ∗-sentences. A formula ϕ~y:Y (~x)(~z) is a
∗-sentence if ~x ⊆ ~y∪~z but the set ~z−~y is possibly

14



not empty and moreover the type of each variable
in ~z−~y is constant, i.e., it does not depend on vari-
ables of other types. In such case we consider the
~z − ~y as a set of biding variables of an additional
pack called a dummy pack that is placed in front of
the whole chain Ch. The chain ’extended’ by this
dummy pack will be denoted by Ch∗. Clearly, if
~z − ~y is empty there is no dummy pack and the
chain Ch∗ is Ch, i.e. sentences are ∗-sentences
without dummy packs. We write

Γ ` ϕ~y:Y (~x)(~z) : ∗-sentence
to express the fact that ϕ~y:Y (~x)(~z) is a ∗-sentence
formed in the context Γ.

Having formed a ∗-sentence ϕ we can form a
new context Γϕ defined in the next section.

Notation. For semantics we need some notation
for the variables in the ∗-sentence. Suppose we
have a ∗-sentence

Γ ` Ch~y:Y (~x) P (~z) : ∗-sentence
We define: (i) The environment of pre-chain Ch:
Env(Ch) = Env(Ch~y:~Y (~x)) - is the context
defining variables ~x−~y; (ii) The binding variables
of pre-chain Ch: Bv(Ch) = Bv(Ch~y:~Y (~x)) - is
the convex set of declarations in Γ of the binding
variables in ~y; (iii) env(Ch) = env(Ch~y:~Y (~x)) -
the set of variables in the environment of Ch, i.e.
~x − ~y; (iv) bv(Ch) = bv(Ch~y:~Y (~x)) - the set of
biding variables ~y; (v) The environment of a pre-
chainCh′ in a ∗-sentenceϕ = Ch~y:Y (~x) P (~z), de-
noted Envϕ(Ch′), is the set of binding variables
in all the packs inCh∗ that are<ϕ-smaller than all
packs in Ch′. Note Env(Ch′) ⊆ Envϕ(Ch′). If
Ch′ = Ch1|Ch2 is a sub-pre-chain of the chain
Ch~y:Y (~x), then Envϕ(Ch2) = Envϕ(Ch1) ∪
Bv(Ch1) and Envϕ(Ch1) = Envϕ(Ch′).

4.4 Dynamic extensions
Suppose we have constructed a ∗-sentence in a
context

Γ ` Ch~y:~Y (~x) A(~z) : ∗-sentence

We write ϕ for Ch~y:~Y (~x) A(~z).
We form a context Γϕ dropping the specifica-

tions of variables ~z and adding one type and one
variable specification for each pack in PacksCh∗ .

Let Γ̌ denote the context Γ with the specifica-
tions of the variables ~z deleted. Suppose Φ ∈
PacksCh∗ and Γ′ is an extension of the context

Γ̌ such that one variable specification tΦ′,ϕ : TΦ′,ϕ
was already added for each pack Φ′ ∈ PacksCh∗
such that Φ′ <Ch∗ Φ but not for Φ yet. Then we
declare a type

Γ′ ` TΦ,ϕ(〈tΦ′,ϕ〉Φ′∈PacksCh∗ ,Φ′<Ch∗Φ) : type

and we extend the context Γ′ by a specification of
a variable tΦ,ϕ of that type

Γ′, tΦ,ϕ : TΦ,ϕ(〈tΦ′,ϕ〉Φ′∈PacksCh∗ ,Φ′<Ch∗Φ) : cxt

The context obtained from Γ̌ by adding the new
variables corresponding to all the packs PacksCh∗
as above will be denoted by

Γϕ = Γ̌ ∪T(Ch~y:~Y (~x) A(~z)).
At the end we add another context formation

rule

Γ ` Ch~y:~Y (~x) A(~z) : ∗-sentence,
Γϕ : cxt

Then we can build another formula starting in the
context Γϕ. This process can be iterated. Thus
in this system sentence ϕ in a context Γ is con-
structed via specifying sequence of formulas, with
the last formula being the sentence ϕ. However,
for the lack of space we are going to describe here
only one step of this process. That is, sentence ϕ
in a context Γ can be constructed via specifying
∗-sentence ψ extending the context as follows

Γ ` ψ : ∗-sentence

Γψ ` ϕ : sentence
For short, we can write

Γ ` Γψ ` ϕ : sentence

5 System - semantics

5.1 Interpretation of dependent types
The context Γ

` x : X(. . .), . . . , z : Z(. . . , x, y, . . .) : cxt

gives rise to a dependence graph. A dependence
graph DGΓ = (TΓ, EΓ) for the context Γ has
types of Γ as vertices and an edge πY,x : Y → X
for every variable specification x : X(. . .) in Γ
and every type Y (. . . , x, . . .) occurring in Γ that
depends on x.

15



The dependence diagram for the context Γ is an
association ‖ − ‖ : DGΓ → Set to every type X
in TΓ a set ‖X‖ and every edge πY,x : Y → X
in EΓ a function ‖πY,x‖ : ‖Y ‖ → ‖X‖, so that
whenever we have a triangle of edges in EΓ, πY,x
as before πZ,y : Z → Y , πZ,x : Z → X we have
‖πZ,x‖ = ‖πY,x‖ ◦ ‖πZ,y‖.

The interpretation of the context Γ, the param-
eter space ‖Γ‖, is the limit of the dependence dia-
gram ‖ − ‖ : DGΓ → Set. More specifically,

‖Γ‖ = ‖x : X(. . .), . . . , z : Z(. . . , x, y, . . .)‖ =

{~a : dom(~a) = var(Γ), ~a(z) ∈ ‖Z‖(~adenv(Z)),
‖πZ,x‖(~a(z)) = ~a(x), for z : Z in Γ, x ∈ envZ}
where var(Γ) denotes variables specified in Γ and
env(Z) denotes indexing variables of the type Z.

The interpretation of the Σ- and Π-types are as
usual.

5.2 Interpretation of language
Interpretation of predicates and quantifier sym-
bols. Both predicates and quantifiers are inter-
preted polymorphically.

If we have a predicate P defined in a context Γ:

x1 : X1, . . . , xn : Xn(〈xi〉i∈Jn]) ` P (~x) : qf-f

then, for any interpretation of the context ‖Γ‖, it
is interpreted as a subset of its parameter set, i.e.
‖P‖ ⊆ ‖Γ‖.

Quantifier symbol Q is interpreted as quantifier
‖Q‖ i.e. an association to every1 set Z a subset
‖Q‖(Z) ⊆ P(Z).

Interpretation of pre-chains and chains of quan-
tifiers. We interpret QP’s, packs, pre-chains, and
chains in the environment of a sentence Envϕ.
This is the only case that is needed. We could
interpret the aforementioned syntactic objects in
their natural environment Env (i.e. independently
of any given sentence) but it would unnecessarily
complicate some definitions. Thus having a (∗-)
sentence ϕ = Ch~y:Y (~x) P (~z) (defined in a con-
text Γ) and a sub-pre-chain (QP, pack) Ch′, for
~a ∈ ‖Envϕ(Ch′)‖ we define the meaning of

‖Ch′‖(~a)

Notation. Let ϕ = Ch~y:~Y P (~y) be a ∗-
sentence built in a context Γ, Ch′ a pre-chain used
in the construction of the (∗)-chain Ch. Then

1This association can be partial.

Envϕ(Ch′) is a sub-context of Γ disjoint from the
convex set Bv(Ch′) and Envϕ(Ch′), Bv(Ch′) is
a sub-context of Γ. For ~a ∈ ‖Envϕ(Ch′)‖ we de-
fine ‖Bv(Ch′)‖(~a) to be the largest set such that

{~a}×‖Bv(Ch′)‖(~a) ⊆ ‖Envϕ(Ch′), Bv(Ch′)‖

Interpretation of quantifier phrases. If we have
a quantifier phrase

Γ ` Qy:Y (~x) : QP

and ~a ∈ ‖Envϕ(Qy:Y (~x))‖, then it is interpreted
as ‖Q‖(‖Y ‖(~a)) ⊆ P(‖Y ‖(~ad~x)).

Interpretation of packs. If we have a pack of
quantifiers in the sentence ϕ

Pc = (Q1y1:Y1(~x1), . . . Qnyn:Yn(~xn))

and ~a ∈ ‖Envϕ(Pc)‖, then its interpretation with
the parameter ~a is

‖Pc‖(~a) = ‖(Q1y1:Y1(~x1), . . . , Qnyn:Yn(~xn))‖(~a) =

{A ⊆
n∏
i=1

‖Yi‖(~ad~xi) : πi(A) ∈ ‖Qi‖(‖Yi‖(~ad~xi),

for i = 1, . . . , n}
where πi is the i-th projection from the product.

Interpretation of chain constructors.
1. Parallel composition. For a pre-chain of

quantifiers in the sentence ϕ

Ch′ =
Ch1~y1:~Y1(~x1)
Ch2~y2:~Y2(~x2)

and ~a ∈ ‖Envϕ(Ch′)‖ we define

‖
Ch1~y1:~Y1(~x1)
Ch2~y2:~Y2(~x2)

‖(~a) = {A×B :

A ∈ ‖Ch1~y1:~Y1(~x1)‖(~ad~x1) and
B ∈ ‖Ch2~y2:~Y2(~x2)‖(~ad~x2)}

2. Sequential composition. For a pre-chain of
quantifiers in the sentence ϕ

Ch′ = Ch1~y1:~Y1(~x1)|Ch2~y2:~Y2(~x2)
and ~a ∈ ‖Envϕ(Ch′)‖ we define

‖Ch1~y1:~Y1(~x1)|Ch2~y2:~Y2(~x2)‖(~a) =

{R ⊆ ‖Bv(Ch′)‖(~a) : {~b ∈ ‖Bv(Ch1)‖(~a) :

16



{~c ∈ ‖Bv(Ch2)‖(~a,~b) : 〈~b,~c〉 ∈ R} ∈
‖Ch2~y2:~Y2(~x2)‖(~a,~b)} ∈ ‖Ch1~y1:~Y1(~x1)‖(~a)}
Validity. A sentence

~x : ~X ` Ch~y:~Y P (~y)

is true under the above interpretation iff

‖P‖(‖~Y ‖) ∈ ‖Ch~y:~Y ‖

5.3 Interpretation of dynamic extensions

Suppose we obtain a context Γϕ from Γ by the fol-
lowing rule

Γ ` Ch~y:~Y (~x) A(~z) : ∗-sentence,
Γϕ : cxt

where ϕ is Ch~y:~Y (~x) A(~z). Then

Γϕ = Γ̌ ∪T(Ch~y:~Y (~x) A(~z)).

From dependence diagram ‖ − ‖Γ : DGΓ → Set
we shall define another dependence diagram

‖ − ‖ = ‖ − ‖Γϕ : DGΓϕ → Set

Thus, for Φ ∈ PackCh∗ we need to define
‖TΦ,ϕ‖Γϕ and for Φ′ <Ch∗ Φ we need to define

‖πTΦ,ϕ,tΦ′‖ : ‖TΦ,ϕ‖ −→ ‖TΦ′,ϕ‖

This will be done in two steps:
Step 1. (Fibers of new types defined by inverse

induction.)
We shall define for the sub-prechains Ch′ of

Ch∗ and ~a ∈ ‖Envϕ(Ch′)‖ a set

‖Tϕ,Ch′‖(~a) ⊆ ‖Bv(Ch′)‖(~a)

This is done using the inductive clauses through
which we have defined Ch∗ but in the reverse di-
rection.

The basic case is when Ch′ = Ch∗. We put

‖Tϕ,Ch‖(∅) = ‖P‖

The inductive step. Now assume that the set
‖Tϕ,Ch′‖(~a) is defined for ~a ∈ ‖Envϕ(Ch′)‖.

Parallel decomposition. If we have

Ch′ =
Ch1~y1:~Y1(~x1)
Ch2~y2:~Y2(~x2)

then we define sets

‖Tϕ,Chi‖(~a) ∈ ‖Chi‖(~a)
for i = 1, 2 so that

‖Tϕ,Ch′‖(~a) = ‖Tϕ,Ch1‖(~a)× ‖Tϕ,Ch2‖(~a)
if such sets exist, and these sets (‖Tϕ,Chi‖(~a)) are
undefined otherwise.

Sequential decomposition. If we have

Ch′ = Ch1~y1:~Y1(~x1)|Ch2~y2:~Y2(~x2)
then we put

‖Tϕ,Ch1‖(~a) = {~b ∈ ‖Bv(Ch1)‖(~a) :

{~c ∈ ‖Bv(Ch2)‖(~a,~b) : 〈~b,~c〉 ∈ ‖Tϕ,Ch′‖(~a)}
∈ ‖Ch2‖(~a,~b)}

For~b ∈ ‖Bv(Ch1)‖ we put

‖Tϕ,Ch2‖(~a,~b) = {~c ∈ ‖Bv(Ch2)‖(~a,~b) :

〈~b,~c〉 ∈ ‖Tϕ,Ch′‖(~a)}
Step 2. (Building dependent types from fibers.)
If Φ is a pack in Ch∗, ~a ∈ ‖Envϕ(Φ)‖ then we

put

‖Tϕ,Φ‖ =
⋃
{{~a}×‖Tφ,Φ‖(~a) : ~a ∈ ‖Envϕ(Φ)‖,

∀Φ′<Ch∗Φ, (~adenvϕ(Φ′)) ∈ ‖Tϕ,Φ′‖}
It remains to define the projections between de-

pendent types. If Φ′ <ϕ Φ we define

πTϕ,Φ,tϕ,Φ′ : ‖Tϕ,Φ‖ −→ ‖Tϕ,Φ′‖
so that ~a 7→ ~ad(envϕ(Φ′) ∪ bvΦ′).
6 Conclusion

It was our intention in this paper to show that
adopting a typed approach to generalized quan-
tification allows a uniform treatment of a wide ar-
ray of anaphoric data involving natural language
quantification.

Acknowledgments

The work of Justyna Grudzińska was funded by
the National Science Center on the basis of de-
cision DEC-2012/07/B/HS1/00301. The authors
would like to thank the anonymous reviewers for
valuable comments on an earlier version of this pa-
per.

17



References
Barwise, Jon and Robin Cooper. 1981. Generalized

Quantifiers and Natural Language. Linguistics and
Philosophy 4: 159-219.

Bellert, Irena and Marek Zawadowski. 1989. Formal-
ization of the feature system in terms of pre-orders.
In Irena Bellert Feature System for Quantification
Structures in Natural Language. Foris Dordrecht.
155-172.

Dekker, Paul. 1994. Predicate logic with anaphora.
In Lynn Santelmann and Mandy Harvey (eds.), Pro-
ceedings SALT IX. Ithaca, NY: DMLL Publications,
Cornell University. 79-95.

Dekker, Paul. 2008. A multi-dimensional treatment of
quantification in extraordinary English. Linguistics
and Philosophy 31: 101-127.

Elworthy, David A. H. 1995. A theory of anaphoric
information. Linguistics and Philosophy 18: 297-
332.

Elbourne, Paul D. 2005. Situations and Individuals.

Cambridge, MA: MIT Press.

Evans, Gareth 1977. Pronouns, Quantifiers, and Rela-
tive Clauses (I). Canadian Journal of Philosophy 7:
467-536.

Heim, Irene. 1990. E-type pronouns and donkey
anaphora. Linguistics and Philosophy 13: 137-78.

Groenendijk, Jeroen and Martin Stokhof. 1991. Dy-
namic Predicate Logic. Linguistics and Philosophy
14: 39-100.

Kamp, Hans and Uwe Reyle. 1993. From Discourse to
Logic. Kluwer Academic Publishers, Dordrecht.

Krifka, Manfred. 1996. Parametrized sum individu-
als for plural reference and partitive quantification.
Linguistics and Philosophy 19: 555-598.

Lindström, Per. 1966. First-order predicate logic with
generalized quantifiers. Theoria 32: 186-95.

Martin-Löf, Per. 1972. An intuitionstic theory of
types. Technical Report, University of Stockholm.

Mostowski, Andrzej. 1957. On a generalization of
quantifiers. Fundamenta Mathematicae 44: 12-36.

Nouwen, Rick. 2003. Plural pronominal anaphora in
context: dynamic aspects of quantification. Ph.D.
thesis, UiL-OTS, Utrecht, LOT dissertation series,
No. 84.

Ranta, Aarne. 1994. Type-Theoretical Grammar. Ox-
ford University Press, Oxford.

Van den Berg, Martin H. 1996. The Internal Structure
of Discourse. Ph.D. thesis, Universiteit van Amster-
dam, Amsterdam.

18


