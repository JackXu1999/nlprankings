



















































Recurrent Neural Networks for Word Alignment Model


Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 1470–1480,
Baltimore, Maryland, USA, June 23-25 2014. c©2014 Association for Computational Linguistics

Recurrent Neural Networks for Word Alignment Model

Akihiro Tamura∗, Taro Watanabe, Eiichiro Sumita
National Institute of Information and Communications Technology

3-5 Hikaridai, Seika-cho, Soraku-gun, Kyoto, JAPAN
a-tamura@ah.jp.nec.com,

{taro.watanabe, eiichiro.sumita}@nict.go.jp

Abstract

This study proposes a word alignment
model based on a recurrent neural net-
work (RNN), in which an unlimited
alignment history is represented by re-
currently connected hidden layers. We
perform unsupervised learning using
noise-contrastive estimation (Gutmann
and Hyvärinen, 2010; Mnih and Teh,
2012), which utilizes artificially generated
negative samples. Our alignment model is
directional, similar to the generative IBM
models (Brown et al., 1993). To overcome
this limitation, we encourage agreement
between the two directional models by
introducing a penalty function that en-
sures word embedding consistency across
two directional models during training.
The RNN-based model outperforms
the feed-forward neural network-based
model (Yang et al., 2013) as well as the
IBM Model 4 under Japanese-English
and French-English word alignment
tasks, and achieves comparable transla-
tion performance to those baselines for
Japanese-English and Chinese-English
translation tasks.

1 Introduction

Automatic word alignment is an important task for
statistical machine translation. The most classical
approaches are the probabilistic IBM models 1-5
(Brown et al., 1993) and the HMM model (Vogel
et al., 1996). Various studies have extended those
models. Yang et al. (2013) adapted the Context-
Dependent Deep Neural Network for HMM (CD-
DNN-HMM) (Dahl et al., 2012), a type of feed-
forward neural network (FFNN)-based model, to

∗The first author is now affiliated with Knowledge
Discovery Research Laboratories, NEC Corporation, Nara,
Japan.

the HMM alignment model and achieved state-of-
the-art performance. However, the FFNN-based
model assumes a first-order Markov dependence
for alignments.

Recurrent neural network (RNN)-based models
have recently demonstrated state-of-the-art per-
formance that outperformed FFNN-based models
for various tasks (Mikolov et al., 2010; Mikolov
and Zweig, 2012; Auli et al., 2013; Kalchbrenner
and Blunsom, 2013; Sundermeyer et al., 2013).
An RNN has a hidden layer with recurrent con-
nections that propagates its own previous signals.
Through the recurrent architecture, RNN-based
models have the inherent property of modeling
long-span dependencies, e.g., long contexts, in in-
put data. We assume that this property would fit
with a word alignment task, and we propose an
RNN-based word alignment model. Our model
can maintain and arbitrarily integrate an alignment
history, e.g., bilingual context, which is longer
than the FFNN-based model.

The NN-based alignment models are super-
vised models. Unfortunately, it is usually dif-
ficult to prepare word-by-word aligned bilingual
data. Yang et al. (2013) trained their model from
word alignments produced by traditional unsuper-
vised probabilistic models. However, with this
approach, errors induced by probabilistic mod-
els are learned as correct alignments; thus, gen-
eralization capabilities are limited. To solve this
problem, we apply noise-contrastive estimation
(NCE) (Gutmann and Hyvärinen, 2010; Mnih
and Teh, 2012) for unsupervised training of our
RNN-based model without gold standard align-
ments or pseudo-oracle alignments. NCE artifi-
cially generates bilingual sentences through sam-
plings as pseudo-negative samples, and then trains
the model such that the scores of the original bilin-
gual sentences are higher than those of the sam-
pled bilingual sentences.

Our RNN-based alignment model has a direc-

1470



tion, such as other alignment models, i.e., from f
(source language) to e (target language) and from
e to f . It has been proven that the limitation may
be overcome by encouraging two directional mod-
els to agree by training them concurrently (Ma-
tusov et al., 2004; Liang et al., 2006; Graça et al.,
2008; Ganchev et al., 2008). The motivation for
this stems from the fact that model and generaliza-
tion errors by the two models differ, and the mod-
els must complement each other. Based on this
motivation, our directional models are also simul-
taneously trained. Specifically, our training en-
courages word embeddings to be consistent across
alignment directions by introducing a penalty term
that expresses the difference between embedding
of words into an objective function. This con-
straint prevents each model from overfitting to a
particular direction and leads to global optimiza-
tion across alignment directions.

This paper presents evaluations of Japanese-
English and French-English word alignment tasks
and Japanese-to-English and Chinese-to-English
translation tasks. The results illustrate that our
RNN-based model outperforms the FFNN-based
model (up to +0.0792 F1-measure) and the IBM
Model 4 (up to +0.0703 F1-measure) for the word
alignment tasks. For the translation tasks, our
model achieves up to 0.74% gain in BLEU as com-
pared to the FFNN-based model, which matches
the translation qualities of the IBM Model 4.

2 Related Work

Various word alignment models have been pro-
posed. These models are roughly clustered into
two groups: generative models, such as those pro-
posed by Brown et al. (1993), Vogel et al. (1996),
and Och and Ney (2003), and discriminative mod-
els, such as those proposed by Taskar et al. (2005),
Moore (2005), and Blunsom and Cohn (2006).

2.1 Generative Alignment Model

Given a source language sentence fJ1 = f1, ..., fJ
and a target language sentence eI1 = e1, ..., eI ,
fJ1 is generated by e

I
1 via the alignment a

J
1 =

a1, ..., aJ . Each aj is a hidden variable indicat-
ing that the source word fj is aligned to the target
word eaj . Usually, a “null” word e0 is added to
the target language sentence and aJ1 may contain
aj = 0, which indicates that fj is not aligned to
any target word. The probability of generating the

sentence fJ1 from e
I
1 is defined as

p(fJ1 |eI1) =
∑
aJ1

p(fJ1 , a
J
1 |eI1). (1)

The IBM Models 1 and 2 and the HMM model
decompose it into an alignment probability pa and
a lexical translation probability pt as

p(fJ1 , a
J
1 |eI1) =

J∏
j=1

pa(aj |aj−1, j)pt(fj |eaj ). (2)

The three models differ in their definition of align-
ment probability. For example, the HMM model
uses an alignment probability with a first-order
Markov property: pa(aj |aj − aj−1). In addition,
the IBM models 3-5 are extensions of these, which
consider the fertility and distortion of each trans-
lated word.

These models are trained using the expectation-
maximization algorithm (Dempster et al., 1977)
from bilingual sentences without word-level align-
ments (unlabeled training data). Given a specific
model, the best alignment (Viterbi alignment) of
the sentence pair (fJ1 , e

I
1) can be found as

âJ1 = argmax
aJ1

p(fJ1 , a
J
1 |eI1). (3)

For example, the HMM model identifies the
Viterbi alignment using the Viterbi algorithm.

2.2 FFNN-based Alignment Model
As an instance of discriminative models, we de-
scribe an FFNN-based word alignment model
(Yang et al., 2013), which is our baseline. An
FFNN learns a hierarchy of nonlinear features
that can automatically capture complex statisti-
cal patterns in input data. Recently, FFNNs have
been applied successfully to several tasks, such as
speech recognition (Dahl et al., 2012), statistical
machine translation (Le et al., 2012; Vaswani et
al., 2013), and other popular natural language pro-
cessing tasks (Collobert and Weston, 2008; Col-
lobert et al., 2011).

Yang et al. (2013) have adapted a type of FFNN,
i.e., CD-DNN-HMM (Dahl et al., 2012), to the
HMM alignment model. Specifically, the lexical
translation and alignment probability in Eq. 2 are
computed using FFNNs as

sNN (aJ1 |fJ1 , eI1) =
J∏

j=1

ta(aj − aj−1|c(eaj−1))

·tlex(fj , eaj |c(fj), c(eaj )), (4)

1471



Lookup
Layer

Hidden Layer

Output Layer

Input fj-1 e

L L L L L L 

htanh(H× +BH)

O× +BO

aj-1

t   ( ,    |      ,      )fj eaj ef j-1
j+1

lex

z0

z1

fj fj+1 eaj eaj+1

z0

z1

aj-1
aj+1

Figure 1: FFNN-based model for computing a lex-
ical translation score of (fj , eaj )

where ta and tlex are an alignment score and a lex-
ical translation score, respectively, sNN is a score
of alignments aJ1 , and “c(a word w)” denotes a
context of word w. Note that the model uses non-
probabilistic scores rather than probabilities be-
cause normalization over all words is computa-
tionally expensive. The model finds the Viterbi
alignment using the Viterbi algorithm, similar to
the classic HMM model. Note that alignments
in the FFNN-based model are also governed by
first-order Markov dynamics because an align-
ment score depends on the previous alignment
aj−1.

Figure 1 shows the network structure with one
hidden layer for computing a lexical translation
probability tlex(fj , eaj |c(fj), c(eaj )). The model
consists of a lookup layer, a hidden layer, and an
output layer, which have weight matrices. The
model receives a source and target word with their
contexts as inputs, which are words in a prede-
fined window (the window size is three in Fig-
ure 1). First, the lookup layer converts each in-
put word into its word embedding by looking up
its corresponding column in the embedding ma-
trix (L), and then concatenates them. Let Vf (or
Ve) be a set of source words (or target words) and
M be a predetermined embedding length. L is a
M × (|Vf |+ |Ve|) matrix1. Word embeddings are
dense, low dimensional, and real-valued vectors
that can capture syntactic and semantic properties
of the words (Bengio et al., 2003). The concate-
nation (z0) is then fed to the hidden layer to cap-
ture nonlinear relations. Finally, the output layer
receives the output of the hidden layer (z1) and
computes a lexical translation score.

1We add a special token ⟨unk⟩ to handle unknown words
and ⟨null⟩ to handle null alignments to Vf and Ve

The computations in the hidden and output layer
are as follows2:

z1 = f(H × z0 + BH), (5)
tlex = O × z1 + BO, (6)

where H , BH , O, and BO are |z1| × |z0|, |z1| × 1,
1×|z1|, and 1×1 matrices, respectively, and f(x)
is an activation function. Following Yang et al.
(2013), a “hard” version of the hyperbolic tangent,
htanh(x)3, is used as f(x) in this study.

The alignment model based on an FFNN is
formed in the same manner as the lexical trans-
lation model. Each model is optimized by mini-
mizing the following ranking loss with a margin
using stochastic gradient descent (SGD)4, where
gradients are computed by the back-propagation
algorithm (Rumelhart et al., 1986):

loss(θ) =
∑

(f ,e)∈T
max{0, 1− sθ(a+|f , e)

+sθ(a−|f ,e)}, (7)

where θ denotes the weights of layers in the
model, T is a set of training data, a+ is the gold
standard alignment, a− is the incorrect alignment
with the highest score under θ, and sθ denotes the
score defined by Eq. 4 as computed by the model
under θ.

3 RNN-based Alignment Model

This section proposes an RNN-based alignment
model, which computes a score for alignments aJ1
using an RNN:

sNN (aJ1 |fJ1 , eI1) =
J∏

j=1

tRNN (aj |aj−11 , fj , eaj ), (8)

where tRNN is the score of an alignment aj . The
prediction of the j-th alignment aj depends on all
preceding alignments aj−11 . Note that the pro-
posed model also uses nonprobabilistic scores,
similar to the FFNN-based model.

The RNN-based model is illustrated in Figure
2. The model consists of a lookup layer, a hid-
den layer, and an output layer, which have weight

2Consecutive l hidden layers can be used: zl = f(Hl ×
zl−1 + BHl). For simplicity, this paper describes the model
with 1 hidden layer.

3htanh(x) = −1 for x < −1, htanh(x) = 1 for x > 1,
and htanh(x) = x for others.

4In our experiments, we used a mini-batch SGD instead
of a plain SGD.

1472



O× +BO

htanh(H× +R× +BH )

t    ( |    ,    ,    )

Lookup Layer

Hidden 

Layer

Output Layer

Input

L L

d

aj fjRNN eaj
j-1a1

fj eaj

yj

yj-1

yj

d

xj

xj
d

yj-1

Figure 2: RNN-based alignment model

matrices L, {Hd, Rd, BdH}, and {O,BO}, respec-
tively. Each matrix in the hidden layer (Hd, Rd,
and BdH ) depends on alignment, where d denotes
the jump distance from aj−1 to aj : d = aj −
aj−1. In our experiments, we merge distances
that are greater than 8 and less than -8 into the
special “≥8” and “≤-8” distances, respectively.
Specifically, the hidden layer has weight matrices
{H≤−8, H−7, · · · , H7, H≥8, R≤−8, R−7, · · · ,
R7, R≥8, B≤−8H , B

−7
H , · · · , B7H , B≥8H } and com-

putes yj using the corresponding matrices of the
jump distance d.

The Viterbi alignment is determined using the
Viterbi algorithm, similar to the FFNN-based
model, where the model is sequentially applied
from f1 to fJ 5. When computing the score of the
alignment between fj and eaj , the two words are
input to the lookup layer. In the lookup layer, each
of these words is converted to its word embedding,
and then the concatenation of the two embeddings
(xj) is fed to the hidden layer in the same manner
as the FFNN-based model. Next, the hidden layer
receives the output of the lookup layer (xj) and
that of the previous hidden layer (yj−1). The hid-
den layer then computes and outputs the nonlinear
relations between them. Note that the weight ma-
trices used in this computation are embodied by
the specific jump distance d. The output of the hid-
den layer (yj) is copied and fed to the output layer
and the next hidden layer. Finally, the output layer
computes the score of aj (tRNN (aj |aj−11 , fj , eaj ))
from the output of the hidden layer (yj). Note that
the FFNN-based model consists of two compo-

5Strictly speaking, we cannot apply the dynamic pro-
gramming forward-backward algorithm (i.e., the Viterbi al-
gorithm) due to the long alignment history of yi. Thus, the
Viterbi alignment is computed approximately using heuristic
beam search.

nents: one is for lexical translation and the other
is for alignment. The proposed RNN produces a
single score that is constructed in the hidden layer
by employing the distance-dependent weight ma-
trices.

Specifically, the computations in the hidden and
output layer are as follows:

yj = f(Hd × xj + Rd × yj−1 + BdH), (9)
tRNN = O × yj + BO, (10)

where Hd, Rd, BdH , O, and BO are |yj | × |xj |,
|yj | × |yj−1|, |yj | × 1, 1 × |yj |, and 1 × 1 matri-
ces, respectively. Note that |yj−1| = |yj |. f(x) is
an activation function, which is a hard hyperbolic
tangent, i.e., htanh(x), in this study.

As described above, the RNN-based model has
a hidden layer with recurrent connections. Under
the recurrence, the proposed model compactly en-
codes the entire history of previous alignments in
the hidden layer configuration yi. Therefore, the
proposed model can find alignments by taking ad-
vantage of the long alignment history, while the
FFNN-based model considers only the last align-
ment.

4 Training

During training, we optimize the weight matrices
of each layer (i.e., L, Hd, Rd, BdH , O, and BO)
following a given objective using a mini-batch
SGD with batch size D, which converges faster
than a plain SGD (D = 1). Gradients are com-
puted by the back-propagation through time algo-
rithm (Rumelhart et al., 1986), which unfolds the
network in time (j) and computes gradients over
time steps. In addition, an l2 regularization term
is added to the objective to prevent the model from
overfitting the training data.

The RNN-based model can be trained by a
supervised approach, similar to the FFNN-based
model, where training proceeds based on the rank-
ing loss defined by Eq. 7 (Section 2.2). However,
this approach requires gold standard alignments.
To overcome this drawback, we propose an un-
supervised method using NCE, which learns from
unlabeled training data.

4.1 Unsupervised Learning
Dyer et al. (2011) presented an unsupervised
alignment model based on contrastive estimation
(CE) (Smith and Eisner, 2005). CE seeks to dis-
criminate observed data from its neighborhood,

1473



which can be viewed as pseudo-negative samples.
Dyer et al. (2011) regarded all possible align-
ments of the bilingual sentences, which are given
as training data (T ), and those of the full transla-
tion search space (Ω) as the observed data and its
neighborhood, respectively.

We introduce this idea to a ranking loss with
margin as

loss(θ) = max
{

0, 1−
∑

(f+,e+)∈T
EΦ[sθ(a|f+, e+)]

+
∑

(f+,e−)∈Ω
EΦ[sθ(a|f+, e−)]

}
, (11)

where Φ is a set of all possible alignments given
(f , e), EΦ[sθ] is the expected value of the scores
sθ on Φ, e+ denotes a target language sentence in
the training data, and e− denotes a pseudo-target
language sentence. The first expectation term is
for the observed data, and the second is for the
neighborhood.

However, the computation for Ω is prohibitively
expensive. To reduce computation, we employ
NCE, which uses randomly sampled sentences
from all target language sentences in Ω as e−, and
calculate the expected values by a beam search
with beam width W to truncate alignments with
low scores. In our experiments, we set W to 100.
In addition, the above criterion is converted to an
online fashion as

loss(θ) =
∑

f+∈T
max

{
0, 1− EGEN[sθ(a|f+, e+)]

+
1
N

∑
e−

EGEN[sθ(a|f+, e−)]
}

, (12)

where e+ is a target language sentence aligned to
f+ in the training data, i.e., (f+, e+) ∈ T , e− is
a randomly sampled pseudo-target language sen-
tence with length |e+|, and N denotes the num-
ber of pseudo-target language sentences per source
sentence f+. Note that |e+| = |e−|. GEN is a
subset of all possible word alignments Φ, which is
generated by beam search.

In a simple implementation, each e− is gener-
ated by repeating a random sampling from a set of
target words (Ve) |e+| times and lining them up
sequentially. To employ more discriminative neg-
ative samples, our implementation samples each
word of e− from a set of the target words that co-
occur with fi ∈ f+ whose probability is above a

threshold C under the IBM Model 1 incorporating
l0 prior (Vaswani et al., 2012). The IBM Model
1 with l0 prior is convenient for reducing transla-
tion candidates because it generates more sparse
alignments than the standard IBM Model 1.

4.2 Agreement Constraints
Both of the FFNN-based and RNN-based models
are based on the HMM alignment model, and they
are therefore asymmetric, i.e., they can represent
one-to-many relations from the target side. Asym-
metric models are usually trained in each align-
ment direction. The model proposed by Yang et
al. (2013) is no exception. However, it has been
demonstrated that encouraging directional mod-
els to agree improves alignment performance (Ma-
tusov et al., 2004; Liang et al., 2006; Graça et al.,
2008; Ganchev et al., 2008).

Inspired by their work, we introduce an agree-
ment constraint to our learning. The constraint
concretely enforces agreement in word embed-
dings of both directions. The proposed method
trains two directional models concurrently based
on the following objective by incorporating a
penalty term that expresses the difference between
word embeddings:

argmin
θFE

{
loss(θFE) + α∥θLEF − θLFE∥

}
, (13)

argmin
θEF

{
loss(θEF ) + α∥θLFE − θLEF ∥

}
, (14)

where θFE (or θEF ) denotes the weights of lay-
ers in a source-to-target (or target-to-source) align-
ment model, θL denotes weights of a lookup layer,
i.e., word embeddings, and α is a parameter that
controls the strength of the agreement constraint.
∥θ∥ indicates the norm of θ. 2-norm is used in our
experiments. Equations 13 and 14 can be applied
to both supervised and unsupervised approaches.
Equations 7 and 12 are substituted into loss(θ)
in supervised and unsupervised learning, respec-
tively. The proposed constraint penalizes overfit-
ting to a particular direction and enables two di-
rectional models to optimize across alignment di-
rections globally.

Our unsupervised learning procedure is summa-
rized in Algorithm 1. In Algorithm 1, line 2 ran-
domly samples D bilingual sentences (f+, e+)D

from training data T . Lines 3-1 and 3-2 gener-
ate N pseudo-negative samples for each f+ and
e+ based on the translation candidates of f+ and
e+ found by the IBM Model 1 with l0 prior,

1474



Algorithm 1 Training Algorithm
Input: θ1FE , θ

1
EF , training data T , MaxIter,

batch size D, N , C, IBM1, W , α
1: for all t such that 1 ≤ t ≤MaxIter do
2: {(f+, e+)D}←sample(D, T )
3-1: {(f+, {e−}N )D}←nege({(f+, e+)D}, N, C, IBM1)
3-2: {(e+, {f−}N )D}←negf({(f+, e+)D}, N,C, IBM1)
4-1: θt+1FE←update((f+, e+, {e−}N )D, θtFE , θtEF ,W, α)
4-2: θt+1EF←update((e+, f+, {f−}N )D, θtEF , θtFE ,W, α)
5: end for
Output: θMaxIter+1EF , θ

MaxIter+1
FE

Train Dev Test
BTEC 9 K 0 960

Hansards 1.1 M 37 447

FBIS
NIST03

240 K 878
919

NIST04 1,597
IWSLT 40 K 2,501 489
NTCIR 3.2 M 2,000 2,000

Table 1: Size of experimental datasets

IBM1 (Section 4.1). Lines 4-1 and 4-2 update the
weights in each layer following a given objective
(Sections 4.1 and 4.2). Note that θtFE and θ

t
EF are

concurrently updated in each iteration, and θtEF
(or θtFE) is employed to enforce agreement be-
tween word embeddings when updating θtFE (or
θtEF ).

5 Experiment

5.1 Experimental Data
We evaluated the alignment performance of the
proposed models with two tasks: Japanese-
English word alignment with the Basic Travel
Expression Corpus (BTEC) (Takezawa et al.,
2002) and French-English word alignment with
the Hansard dataset (Hansards) from the 2003
NAACL shared task (Mihalcea and Pedersen,
2003). In addition, we evaluated the end-to-end
translation performance of three tasks: a Chinese-
to-English translation task with the FBIS corpus
(FBIS), the IWSLT 2007 Japanese-to-English
translation task (IWSLT ) (Fordyce, 2007), and
the NTCIR-9 Japanese-to-English patent transla-
tion task (NTCIR) (Goto et al., 2011)6.

Table 1 shows the sizes of our experimental
datasets. Note that the development data was
not used in the alignment tasks, i.e., BTEC

6We did not evaluate the translation performance on the
Hansards data because the development data is very small
and performance is unreliable.

and Hansards, because the hyperparameters of
the alignment models were set by preliminary
small-scale experiments. The BTEC data is
the first 9,960 sentence pairs in the training data
for IWSLT , which were annotated with word
alignment (Goh et al., 2010). We split these
pairs into the first 9,000 for training data and
the remaining 960 as test data. All the data in
BTEC is word-aligned, and the training data in
Hansards is unlabeled data. In FBIS, we used
the NIST02 evaluation data as the development
data, and the NIST03 and 04 evaluation data as
test data (NIST03 and NIST04).

5.2 Comparing Methods

We evaluated the proposed RNN-based alignment
models against two baselines: the IBM Model
4 and the FFNN-based model with one hidden
layer. The IBM Model 4 was trained by pre-
viously presented model sequence schemes (Och
and Ney, 2003): 15H53545, i.e., five iterations of
the IBM Model 1 followed by five iterations of the
HMM Model, etc., which is the default setting for
GIZA++ (IBM4). For the FFNN-based model,
we set the word embedding length M to 30, the
number of units of a hidden layer |z1| to 100, and
the window size of contexts to 5. Hence, |z0| is
300 (30×5×2). Following Yang et al. (2013), the
FFNN-based model was trained by the supervised
approach described in Section 2.2 (FFNNs).

For the RNN-based models, we set M to 30
and the number of units of each recurrent hid-
den layer |yj | to 100. Thus, |xj | is 60 (30 × 2).
The number of units of each layer of the FFNN-
based and RNN-based models and M were set
through preliminary experiments. To demonstrate
the effectiveness of the proposed learning meth-
ods, we evaluated four types of RNN-based mod-
els: RNNs, RNNs+c, RNNu, and RNNu+c,
where “s/u” denotes a supervised/unsupervised
model and “+c” indicates that the agreement con-
straint was used.

In training all the models except IBM4, the
weights of each layer were initialized first. For
the weights of a lookup layer L, we preliminarily
trained word embeddings for the source and target
language from each side of the training data. We
then set the word embeddings to L to avoid falling
into local minima. Other weights were randomly
initialized to [−0.1, 0.1]. For the pretraining, we

1475



Alignment BTEC Hansards
IBM4 0.4859 0.9029

FFNNs(I) 0.4770 0.9020
RNNs(I) 0.5053+ 0.9068

RNNs+c(I) 0.5174+ 0.9202+

RNNu 0.5307+ 0.9037
RNNu+c 0.5562+ 0.9275+

FFNNs(R) 0.8224 -
RNNs(R) 0.8798+ -

RNNs+c(R) 0.8921+ -

Table 2: Word alignment performance (F1-
measure)

used the RNNLM Toolkit 7 (Mikolov et al., 2010)
with the default options. We mapped all words
that occurred less than five times to the special to-
ken ⟨unk⟩. Next, each weight was optimized us-
ing the mini-batch SGD, where batch size D was
100, learning rate was 0.01, and an l2 regulariza-
tion parameter was 0.1. The training stopped after
50 epochs. The other parameters were set as fol-
lows: W , N and C in the unsupervised learning
were 100, 50, and 0.001, respectively, and α for
the agreement constraint was 0.1.

In the translation tasks, we used the Moses
phrase-based SMT systems (Koehn et al., 2007).
All Japanese and Chinese sentences were seg-
mented by ChaSen8 and the Stanford Chinese seg-
menter9, respectively. In the training, long sen-
tences with over 40 words were filtered out. Using
the SRILM Toolkits (Stolcke, 2002) with modified
Kneser-Ney smoothing, we trained a 5-gram lan-
guage model on the English side of each training
data for IWSLT and NTCIR, and a 5-gram lan-
guage model on the Xinhua portion of the English
Gigaword corpus for FBIS. The SMT weighting
parameters were tuned by MERT (Och, 2003) in
the development data.

5.3 Word Alignment Results
Table 2 shows the alignment performance by
the F1-measure. Hereafter, MODEL(R) and
MODEL(I) denote the MODEL trained from
gold standard alignments and word alignments
found by the IBM Model 4, respectively. In
Hansards, all models were trained from ran-

7http://www.fit.vutbr.cz/˜imikolov/
rnnlm/

8http://chasen-legacy.sourceforge.jp/
9http://nlp.stanford.edu/software/

segmenter.shtml

domly sampled 100 K data10. We evaluated
the word alignments produced by first applying
each model in both directions and then combin-
ing the alignments using the “grow-diag-final-
and” heuristic (Koehn et al., 2003). The signif-
icance test on word alignment performance was
performed by the sign test with a 5% significance
level. “+” in Table 2 indicates that the compar-
isons are significant over corresponding baselines,
IBM4 and FFNNs(R/I).

In Table 2, RNNu+c, which includes all our
proposals, i.e., the RNN-based model, the unsu-
pervised learning, and the agreement constraint,
achieves the best performance for both BTEC
and Hansards. The differences from the base-
lines are statistically significant.

Table 2 shows that RNNs(R/I) outperforms
FFNNs(R/I), which is statistically significant
in BTEC. These results demonstrate that captur-
ing the long alignment history in the RNN-based
model improves the alignment performance. We
discuss the difference of the RNN-based model’s
effectiveness between language pairs in Section
6.1. Table 2 also shows that RNNs+c(R/I) and
RNNu+c achieve significantly better performance
than RNNs(R/I) and RNNu in both tasks, re-
spectively. This indicates that the proposed agree-
ment constraint is effective in training better mod-
els in both the supervised and unsupervised ap-
proaches.

In BTEC, RNNu and RNNu+c significantly
outperform RNNs(I) and RNNs+c(I), respec-
tively. The performance of these models is com-
parable with Hansards. This indicates that our
unsupervised learning benefits our models because
the supervised models are adversely affected by
errors in the automatically generated training data.
This is especially true when the quality of training
data, i.e., the performance of IBM4, is low.

5.4 Machine Translation Results

Table 3 shows the translation performance by the
case sensitive BLEU4 metric11 (Papineni et al.,
2002). Table 3 presents the average BLEU of three
different MERT runs. In NTCIR and FBIS,
each alignment model was trained from the ran-

10Due to high computational cost, we did not use all the
training data. Scaling up to larger datasets will be addressed
in future work.

11We used mteval-v13a.pl as the evaluation tool
(http://www.itl.nist.gov/iad/mig/tests/
mt/2009/).

1476



Alignment IWSLT NTCIR
FBIS

NIST03 NIST04
IBM4all 46.47

27.91 25.90 28.34
IBM4 27.25 25.41 27.65

FFNNs(I) 46.38 27.05 25.45 27.61
RNNs(I) 46.43 27.24 25.47 27.56

RNNs+c(I) 46.51 27.12 25.55 27.73
RNNu 47.05∗ 27.79∗ 25.76∗ 27.91∗

RNNu+c 46.97∗ 27.76∗ 25.84∗ 28.20∗

Table 3: Translation performance (BLEU4(%))

domly sampled 100 K data, and then a translation
model was trained from all the training data that
was word-aligned by the alignment model. In ad-
dition, for a detailed comparison, we evaluated the
SMT system where the IBM Model 4 was trained
from all the training data (IBM4all). The sig-
nificance test on translation performance was per-
formed by the bootstrap method (Koehn, 2004)
with a 5% significance level. “*” in Table 3 in-
dicates that the comparisons are significant over
both baselines, i.e., IBM4 and FFNNs(I).

Table 3 also shows that better word align-
ment does not always result in better translation,
which has been discussed previously (Yang et al.,
2013). However, RNNu and RNNu+c outper-
form FFNNs(I) and IBM4 in all tasks. These
results indicate that our proposals contribute to im-
proving translation performance12. In addition,
Table 3 shows that these proposed models are
comparable to IBM4all in NTCIR and FBIS
even though the proposed models are trained from
only a small part of the training data.

6 Discussion

6.1 Effectiveness of RNN-based Alignment
Model

Figure 3 shows word alignment examples from
FFNNs and RNNs, where solid squares indi-
cate the gold standard alignments. Figure 3 (a)
shows that RRNs adequately identifies compli-
cated alignments with long distances compared
to FFNNs (e.g., jaggy alignments of “have you
been learning” in Fig 3 (a)) because RNNs cap-
tures alignment paths based on long alignment his-
tory, which can be viewed as phrase-level align-
ments, while FFNNs employs only the last align-
ment.

In French-English word alignment, the most
12We also confirmed the effectiveness of our models on the

NIST05 and NTCIR-10 evaluation data.

How
long
have
you

been
learning

English

?

あ
な
た

は 英
語
を 習

い
始
め
て か

ら
ど
の
くら
い
に な

り
ま
す
か 。

△

△

△ △

△ △

△

△

△

△

(a) Japanese-English Alignment

they
also

have
a
role
to
play

in

food

chain
.

the

eu
x

au
ss

i

on
t

un rô
le

à jo
ue

r

da
ns

la ch
aî

ne

al
im

en
ta

ire

.

(b) French-English Alignment

△

△

△

△

△

△

△

△

△

△

△

△

△ : FFNN  (R)s

: RNN  (R)s

△ : FFNN  (I)s

: RNN  (I)s

Figure 3: Word alignment examples

Alignment 40 K 9 K 1 K
IBM4 0.5467 0.4859 0.4128

RNNu+c 0.6004 0.5562 0.4842
RNNs+c(R) - 0.8921 0.6063

Table 4: Word alignment performance on BTEC
with various sized training data

valuable clues are located locally because English
and French have similar word orders and their
alignment has more one-to-one mappings than
Japanese-English word alignment (Figure 3). Fig-
ure 3 (b) shows that both RRNs and FFNNs
work for such simpler alignments. Therefore,
the RNN-based model has less effect on French-
English word alignment than Japanese-English
word alignment, as indicated in Table 2.

6.2 Impact of Training Data Size

Table 4 shows the alignment performance on
BTEC with various training data sizes, i.e., train-
ing data for IWSLT (40 K), training data for
BTEC (9 K), and the randomly sampled 1 K
data from the BTEC training data. Note that
RNNs+c(R) cannot be trained from the 40 K data
because the 40 K data does not have gold standard

1477



Alignment BTEC Hansards
FFNNs(I) 0.4770 0.9020

FFNNs+c(I) 0.4854+ 0.9085+

FFNNu 0.5105+ 0.9026
FFNNu+c 0.5313+ 0.9144+

FFNNs(R) 0.8224 -
FFNNs+c(R) 0.8367+ -

Table 5: Word alignment performance of various
FFNN-based models (F1-measure)

word alignments.
Table 4 demonstrates that the proposed RNN-

based model outperforms IBM4 trained from the
unlabeled 40 K data by employing either the 1
K labeled data or the 9 K unlabeled data, which
is less than 25% of the training data for IBM4.
Consequently, the SMT system using RNNu+c
trained from a small part of training data can
achieve comparable performance to that using
IBM4 trained from all training data, which is
shown in Table 3.

6.3 Effectiveness of Unsupervised
Learning/Agreement Constraints

The proposed unsupervised learning and agree-
ment constraints can be applied to any NN-based
alignment model. Table 5 shows the alignment
performance of the FFNN-based models trained
by our supervised/unsupervised approaches (s/u)
with and without our agreement constraints. In
Table 5, “+c” denotes that the agreement con-
straint was used, and “+” indicates that the
comparison with its corresponding baseline, i.e.,
FFNNs(I/R), is significant in the sign test with a
5% significance level.

Table 5 shows that FFNNs+c(R/I) and
FFNNu+c achieve significantly better perfor-
mance than FFNNs(R/I) and FFNNu, respec-
tively, in both BTEC and Hansards. In addi-
tion, FFNNu and FFNNu+c significantly out-
perform FFNNs(I) and FFNNs+c(I), respec-
tively, in BTEC. The performance of these mod-
els is comparable in Hansards. These results
indicate that the proposed unsupervised learning
and agreement constraint benefit the FFNN-based
model, similar to the RNN-based model.

7 Conclusion

We have proposed a word alignment model based
on an RNN, which captures long alignment his-

tory through recurrent architectures. Furthermore,
we proposed an unsupervised method for training
our model using NCE and introduced an agree-
ment constraint that encourages word embeddings
to be consistent across alignment directions. Our
experiments have shown that the proposed model
outperforms the FFNN-based model (Yang et al.,
2013) for word alignment and machine translation,
and that the agreement constraint improves align-
ment performance.

In future, we plan to employ contexts composed
of surrounding words (e.g., c(fj) or c(eaj ) in the
FFNN-based model) in our model, even though
our model implicitly encodes such contexts in the
alignment history. We also plan to enrich each
hidden layer in our model with multiple layers
following the success of Yang et al. (2013), in
which multiple hidden layers improved the perfor-
mance of the FFNN-based model. In addition, we
would like to prove the effectiveness of the pro-
posed method for other datasets.

Acknowledgments

We thank the anonymous reviewers for their help-
ful suggestions and valuable comments on the first
version of this paper.

References
Michael Auli, Michel Galley, Chris Quirk, and Geof-

frey Zweig. 2013. Joint Language and Translation
Modeling with Recurrent Neural Networks. In Pro-
ceedings of the 2013 Conference on Empirical Meth-
ods in Natural Language Processing, pages 1044–
1054.

Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and
Christian Janvin. 2003. A Neural Probabilistic Lan-
guage Model. Journal of Machine Learning Re-
search, 3:1137–1155.

Phil Blunsom and Trevor Cohn. 2006. Discriminative
Word Alignment with Conditional Random Fields.
In Proceedings of the 21st International Confer-
ence on Computational Linguistics and 44th Annual
Meeting of the Association for Computational Lin-
guistics, pages 65–72.

Peter F. Brown, Stephen A. Della Pietra, Vincent
J. Della Pietra, and Robert L. Mercer. 1993. The
Mathematics of Statistical Machine Translation: Pa-
rameter Estimation. Computational Linguistics,
19(2):263–311.

Ronan Collobert and Jason Weston. 2008. A Uni-
fied Architecture for Natural Language Processing:
Deep Neural Networks with Multitask Learning. In

1478



Proceedings of the 25th International Conference on
Machine Learning, pages 160–167.

Ronan Collobert, Jason Weston, Léon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural Language Processing (Almost) from
Scratch. Journal of Machine Learning Research,
12:2493–2537.

George E. Dahl, Dong Yu, Li Deng, and Alex Acero.
2012. Context-Dependent Pre-trained Deep Neu-
ral Networks for Large Vocabulary Speech Recog-
nition. Audio, Speech, and Language Processing,
IEEE Transactions on, 20(1):30–42.

A. P. Dempster, N. M. Laird, and D. B. Rubin. 1977.
Maximum Likelihood from Incomplete Data via the
EM Algorithm. Journal of the Royal Statistical So-
ciety, Series B, 39(1):1–38.

Chris Dyer, Jonathan Clark, Alon Lavie, and Noah A.
Smith. 2011. Unsupervised Word Alignment with
Arbitrary Features. In Proceedings of the 49th An-
nual Meeting of the Association for Computational
Linguistics: Human Language Technologies - Vol-
ume 1, pages 409–419.

Cameron S. Fordyce. 2007. Overview of the IWSLT
2007 Evaluation Campaign. In Proceedings of the
4th International Workshop on Spoken Languaeg
Translation, pages 1–12.

Kuzman Ganchev, João V. Graça, and Ben Taskar.
2008. Better Alignments = Better Translations? In
Proceedings of the 46th Annual Conference of the
Association for Computational Linguistics: Human
Language Technologies, pages 986–993.

Chooi-Ling Goh, Taro Watanabe, Hirofumi Yamamoto,
and Eiichiro Sumita. 2010. Constraining a Gen-
erative Word Alignment Model with Discriminative
Output. IEICE Transactions, 93-D(7):1976–1983.

Isao Goto, Bin Lu, Ka Po Chow, Eiichiro Sumita, and
Benjamin K. Tsou. 2011. Overview of the Patent
Machine Translation Task at the NTCIR-9 Work-
shop. In Proceedings of the 9th NTCIR Workshop,
pages 559–578.

João V. Graça, Kuzman Ganchev, and Ben Taskar.
2008. Expectation Maximization and Posterior
Constraints. In Advances in Neural Information
Processing Systems 20, pages 569–576.

Michael Gutmann and Aapo Hyvärinen. 2010. Noise-
Contrastive Estimation: A New Estimation Principle
for Unnormalized Statistical Models. In Proceed-
ings of the 13st International Conference on Artifi-
cial Intelligence and Statistics, pages 297–304.

Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent
Continuous Translation Models. In Proceedings of
the 2013 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1700–1709.

Philipp Koehn, Franz Josef Och, and Daniel Marcu.
2003. Statistical Phrase-Based Translation. In Pro-
ceedings of the 2003 Human Language Technology
Conference: North American Chapter of the Associ-
ation for Computational Linguistics, pages 48–54.

Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ondrej Bojar, Alexan-
dra Constrantin, and Evan Herbst. 2007. Moses:
Open Source Toolkit for Statistical Machine Trans-
lation. In Proceedings of the 45th Annual Meeting of
the Association for Computational Linguistics on In-
teractive Poster and Demonstration Sessions, pages
177–180.

Philipp Koehn. 2004. Statistical Significance Tests for
Machine Translation Evaluation. In Proceedings of
the 2004 Conference on Empirical Methods in Nat-
ural Language Processing, pages 388–395.

Hai-Son Le, Alexandre Allauzen, and François Yvon.
2012. Continuous Space Translation Models with
Neural Networks. In Proceedings of the 2012 Con-
ference of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies, pages 39–48.

Percy Liang, Ben Taskar, and Dan Klein. 2006. Align-
ment by Agreement. In Proceedings of the Main
Conference on Human Language Technology Con-
ference of the North American Chapter of the As-
sociation of Computational Linguistics, pages 104–
111.

Evgeny Matusov, Richard Zens, and Hermann Ney.
2004. Symmetric Word Alignments for Statistical
Machine Translation. In Proceedings of the 20th In-
ternational Conference on Computational Linguis-
tics, pages 219–225.

Rada Mihalcea and Ted Pedersen. 2003. An Evalua-
tion Exercise for Word Alignment. In Proceedings
of the HLT-NAACL 2003 Workshop on Building and
Using Parallel Texts: Data Driven Machine Trans-
lation and Beyond, pages 1–10.

Tomas Mikolov and Geoffrey Zweig. 2012. Con-
text Dependent Recurrent Neural Network Lan-
guage Model. In Proceedings of the 4th IEEE Work-
shop on Spoken Language Technology, pages 234–
239.

Tomas Mikolov, Martin Karafiát, Lukas Burget, Jan
Cernocký, and Sanjeev Khudanpur. 2010. Recur-
rent Neural Network based Language Model. In
Proceedings of 11th Annual Conference of the Inter-
national Speech Communication Association, pages
1045–1048.

Andriy Mnih and Yee Whye Teh. 2012. A Fast and
Simple Algorithm for Training Neural Probabilistic
Language Models. In Proceedings of the 29th In-
ternational Conference on Machine Learning, pages
1751–1758.

1479



Robert C. Moore. 2005. A Discriminative Framework
for Bilingual Word Alignment. In Proceedings of
Human Language Technology Conference and Con-
ference on Empirical Methods in Natural Language
Processing, pages 81–88.

Franz Josef Och and Hermann Ney. 2003. A System-
atic Comparison of Various Statistical Alignment
Models. Computational Linguistics, 29:19–51.

Franz Josef Och. 2003. Minimum Error Rate Training
in Statistical Machine Translation. In Proceedings
of the 41st Annual Meeting of the Association for
Computational Linguistics, pages 160–167.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. BLEU: a Method for Automatic
Evaluation of Machine Translation. In Proceedings
of 40th Annual Meeting of the Association for Com-
putational Linguistics, pages 311–318.

D. E. Rumelhart, G. E. Hinton, and R. J. Williams.
1986. Learning Internal Representations by Error
Propagation. In D. E. Rumelhart and J. L. McClel-
land, editors, Parallel Distributed Processing, pages
318–362. MIT Press.

Noah A. Smith and Jason Eisner. 2005. Contrastive
Estimation: Training Log-Linear Models on Unla-
beled Data. In Proceedings of the 43rd Annual
Meeting of the Association for Computational Lin-
guistics, pages 354–362.

Andreas Stolcke. 2002. SRILM - An Extensible Lan-
guage Modeling Toolkit. In Proceedings of Interna-
tional Conference on Spoken Language Processing,
pages 901–904.

Martin Sundermeyer, Ilya Oparin, Jean-Luc Gauvain,
Ben Freiberg, Ralf Schlüter, and Hermann Ney.
2013. Comparison of Feedforward and Recurrent
Neural Network Language Models. In IEEE Inter-
national Conference on Acoustics, Speech, and Sig-
nal Processing, pages 8430–8434.

Toshiyuki Takezawa, Eiichiro Sumita, Fumiaki Sug-
aya, Hirofumi Yamamoto, and Seiichi Yamamoto.
2002. Toward a Broad-coverage Bilingual Corpus
for Speech Translation of Travel Conversations in
the Real World. In Proceedings of the 3rd Interna-
tional Conference on Language Resources and Eval-
uation, pages 147–152.

Ben Taskar, Simon Lacoste-Julien, and Dan Klein.
2005. A Discriminative Matching Approach to
Word Alignment. In Proceedings of Human Lan-
guage Technology Conference and Conference on
Empirical Methods in Natural Language Process-
ing, pages 73–80.

Ashish Vaswani, Liang Huang, and David Chiang.
2012. Smaller Alignment Models for Better Trans-
lations: Unsupervised Word Alignment with the l0-
norm. In Proceedings of the 50th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers), pages 311–319.

Ashish Vaswani, Yinggong Zhao, Victoria Fossum, and
David Chiang. 2013. Decoding with Large-Scale
Neural Language Models Improves Translation. In
Proceedings of the 2013 Conference on Empirical
Methods in Natural Language Processing, pages
1387–1392.

Stephan Vogel, Hermann Ney, and Christoph Tillmann.
1996. Hmm-based Word Alignment in Statisti-
cal Translation. In Proceedings of the 16th Inter-
national Conference on Computational Linguistics,
pages 836–841.

Nan Yang, Shujie Liu, Mu Li, Ming Zhou, and Neng-
hai Yu. 2013. Word Alignment Modeling with Con-
text Dependent Deep Neural Network. In Proceed-
ings of the 51st Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Pa-
pers), pages 166–175.

1480


